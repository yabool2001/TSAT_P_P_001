
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cdc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e54  08012d98  08012d98  00022d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bec  08014bec  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014bec  08014bec  00024bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bf4  08014bf4  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014bf4  08014bf4  00024bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bfc  08014bfc  00024bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08014c00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  200006e0  080152e0  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  080152e0  00030eac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd05  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed5  00000000  00000000  0004e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00052328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001503  00000000  00000000  00053e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0af  00000000  00000000  00055313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed59  00000000  00000000  000733c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1808  00000000  00000000  0009211b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d38  00000000  00000000  00143924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012d80 	.word	0x08012d80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012d80 	.word	0x08012d80

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080146a8 	.word	0x080146a8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f94d 	bl	800384c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f909 	bl	80027c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb43 	bl	8002c40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fabf 	bl	8002b3c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fa6f 	bl	8002aa0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fb09 	bl	8002bd8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa2d 	bl	8002a24 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f949 	bl	8002860 <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 f9eb 	bl	80029a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b65      	ldr	r3, [pc, #404]	; (8002768 <main+0x1c0>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b64      	ldr	r3, [pc, #400]	; (8002768 <main+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4860      	ldr	r0, [pc, #384]	; (800276c <main+0x1c4>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fc64 	bl	8006eb8 <HAL_UART_Transmit>

  // Is system initialized?
  if ( ! is_system_initialized () )
 80025f0:	f000 fd90 	bl	8003114 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	4053      	eors	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01b      	beq.n	800263a <main+0x92>
  {
	  // ASTRO INIT
	  my_astro_on () ;
 8002602:	f000 fc8d 	bl	8002f20 <my_astro_on>
	  if ( !my_astro_init () )
 8002606:	f007 fb2d 	bl	8009c64 <my_astro_init>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4053      	eors	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <main+0x74>
	  {
		  HAL_NVIC_SystemReset () ;
 8002618:	f001 fac1 	bl	8003b9e <HAL_NVIC_SystemReset>
	  }
	  my_astro_off () ;
 800261c:	f000 fca8 	bl	8002f70 <my_astro_off>

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <main+0x1c8>)
 8002622:	4a54      	ldr	r2, [pc, #336]	; (8002774 <main+0x1cc>)
 8002624:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8002626:	4b52      	ldr	r3, [pc, #328]	; (8002770 <main+0x1c8>)
 8002628:	4a53      	ldr	r2, [pc, #332]	; (8002778 <main+0x1d0>)
 800262a:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <main+0x1c8>)
 800262e:	4a53      	ldr	r2, [pc, #332]	; (800277c <main+0x1d4>)
 8002630:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002632:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <main+0x1c8>)
 8002634:	0018      	movs	r0, r3
 8002636:	f007 fbe2 	bl	8009dfe <my_lis2dw12_init>
  }

  // GNSS INIT AND ACQ
  astro_geo_wr_latitude = 0 ;
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <main+0x1d8>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <main+0x1dc>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002646:	4b50      	ldr	r3, [pc, #320]	; (8002788 <main+0x1e0>)
 8002648:	8818      	ldrh	r0, [r3, #0]
 800264a:	4b50      	ldr	r3, [pc, #320]	; (800278c <main+0x1e4>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	494c      	ldr	r1, [pc, #304]	; (8002784 <main+0x1dc>)
 8002652:	9102      	str	r1, [sp, #8]
 8002654:	494a      	ldr	r1, [pc, #296]	; (8002780 <main+0x1d8>)
 8002656:	9101      	str	r1, [sp, #4]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <main+0x1e8>)
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	f007 fc5e 	bl	8009f1c <my_lx6_get_coordinates>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d023      	beq.n	80026ac <main+0x104>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <main+0x1d8>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <main+0x1dc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f007 fbb6 	bl	8009de0 <my_astro_write_coordinates>
	  my_rtc_get_time_s ( rtc_dt ) ;
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <main+0x1ec>)
 8002676:	0018      	movs	r0, r3
 8002678:	f007 fe8e 	bl	800a398 <my_rtc_get_time_s>
	  send_debug_logs ( rtc_dt ) ;
 800267c:	4b45      	ldr	r3, [pc, #276]	; (8002794 <main+0x1ec>)
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fba0 	bl	8002dc4 <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 8002684:	4b42      	ldr	r3, [pc, #264]	; (8002790 <main+0x1e8>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <main+0x1f0>)
 800268e:	f7fd fee1 	bl	8000454 <__aeabi_dcmplt>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d00a      	beq.n	80026ac <main+0x104>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002696:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <main+0x1e8>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	493f      	ldr	r1, [pc, #252]	; (800279c <main+0x1f4>)
 800269e:	4840      	ldr	r0, [pc, #256]	; (80027a0 <main+0x1f8>)
 80026a0:	9200      	str	r2, [sp, #0]
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	000a      	movs	r2, r1
 80026a6:	2105      	movs	r1, #5
 80026a8:	f009 fd1e 	bl	800c0e8 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 80026ac:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <main+0x1fc>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	001a      	movs	r2, r3
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <main+0x200>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	18d2      	adds	r2, r2, r3
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <main+0x200>)
 80026ba:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <main+0x1fc>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	001c      	movs	r4, r3
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <main+0x200>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <main+0x1f8>)
 80026c8:	4938      	ldr	r1, [pc, #224]	; (80027ac <main+0x204>)
 80026ca:	4839      	ldr	r0, [pc, #228]	; (80027b0 <main+0x208>)
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	0023      	movs	r3, r4
 80026d0:	f009 fd3e 	bl	800c150 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80026d4:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <main+0x208>)
 80026d6:	4937      	ldr	r1, [pc, #220]	; (80027b4 <main+0x20c>)
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <main+0x210>)
 80026da:	0018      	movs	r0, r3
 80026dc:	f009 fd38 	bl	800c150 <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <main+0x210>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fb6e 	bl	8002dc4 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <main+0x208>)
 80026ea:	0018      	movs	r0, r3
 80026ec:	f007 fb10 	bl	8009d10 <my_astro_add_payload_2_queue>

  // ACC INT1 WAKEUP ENABLE
  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <main+0x1c8>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f007 fbdc 	bl	8009eb0 <my_lis2dw12_int1_wu_enable>

  // STOP SYSTEM
  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 80026f8:	f001 f952 	bl	80039a0 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	01db      	lsls	r3, r3, #7
 8002700:	2101      	movs	r1, #1
 8002702:	0018      	movs	r0, r3
 8002704:	f001 fcfe 	bl	8004104 <HAL_PWR_EnterSTOPMode>
  HAL_ResumeTick () ;
 8002708:	f001 f958 	bl	80039bc <HAL_ResumeTick>
  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <main+0x1c8>)
 800270e:	0018      	movs	r0, r3
 8002710:	f007 fbe9 	bl	8009ee6 <my_lis2dw12_int1_wu_disable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 8002714:	f000 fbe6 	bl	8002ee4 <get_systick>
 8002718:	0002      	movs	r2, r0
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <main+0x214>)
 800271c:	601a      	str	r2, [r3, #0]
  // MAIN STATE MACHINE
  while (1)
  {
	  if ( is_evt_pin_high() )
 800271e:	f000 fbcf 	bl	8002ec0 <is_evt_pin_high>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d001      	beq.n	800272a <main+0x182>
	  {
		  my_astro_read_evt_reg () ;
 8002726:	f007 fb1b 	bl	8009d60 <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 800272a:	f000 fbdb 	bl	8002ee4 <get_systick>
 800272e:	0002      	movs	r2, r0
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <main+0x214>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <main+0x218>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d9f0      	bls.n	800271e <main+0x176>
	  {
		  my_astro_log ();
 800273c:	f007 fb46 	bl	8009dcc <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 8002740:	f000 fbd0 	bl	8002ee4 <get_systick>
 8002744:	0002      	movs	r2, r0
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <main+0x214>)
 8002748:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <main+0x21c>)
 800274c:	881c      	ldrh	r4, [r3, #0]
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <main+0x208>)
 8002750:	0018      	movs	r0, r3
 8002752:	f7fd fcd7 	bl	8000104 <strlen>
 8002756:	0003      	movs	r3, r0
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <main+0x208>)
 800275c:	0019      	movs	r1, r3
 800275e:	0020      	movs	r0, r4
 8002760:	f005 fea2 	bl	80084a8 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002764:	e7db      	b.n	800271e <main+0x176>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000000 	.word	0x20000000
 800276c:	2000086c 	.word	0x2000086c
 8002770:	20000b80 	.word	0x20000b80
 8002774:	08003025 	.word	0x08003025
 8002778:	08003095 	.word	0x08003095
 800277c:	20000728 	.word	0x20000728
 8002780:	20000a0c 	.word	0x20000a0c
 8002784:	20000a10 	.word	0x20000a10
 8002788:	20000010 	.word	0x20000010
 800278c:	20000008 	.word	0x20000008
 8002790:	20000018 	.word	0x20000018
 8002794:	200009f8 	.word	0x200009f8
 8002798:	40590000 	.word	0x40590000
 800279c:	08012db0 	.word	0x08012db0
 80027a0:	20000a14 	.word	0x20000a14
 80027a4:	20000a1a 	.word	0x20000a1a
 80027a8:	20000a1c 	.word	0x20000a1c
 80027ac:	08012db8 	.word	0x08012db8
 80027b0:	20000a28 	.word	0x20000a28
 80027b4:	08012dc4 	.word	0x08012dc4
 80027b8:	20000ac8 	.word	0x20000ac8
 80027bc:	20000a20 	.word	0x20000a20
 80027c0:	0000ea60 	.word	0x0000ea60
 80027c4:	20000a24 	.word	0x20000a24

080027c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b093      	sub	sp, #76	; 0x4c
 80027cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ce:	2410      	movs	r4, #16
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	0018      	movs	r0, r3
 80027d4:	2338      	movs	r3, #56	; 0x38
 80027d6:	001a      	movs	r2, r3
 80027d8:	2100      	movs	r1, #0
 80027da:	f009 fd4f 	bl	800c27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027de:	003b      	movs	r3, r7
 80027e0:	0018      	movs	r0, r3
 80027e2:	2310      	movs	r3, #16
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f009 fd48 	bl	800c27c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f001 fcbf 	bl	8004174 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	220a      	movs	r2, #10
 80027fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	0052      	lsls	r2, r2, #1
 8002802:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002804:	0021      	movs	r1, r4
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2201      	movs	r2, #1
 8002816:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281e:	187b      	adds	r3, r7, r1
 8002820:	0018      	movs	r0, r3
 8002822:	f001 fcf3 	bl	800420c <HAL_RCC_OscConfig>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800282a:	f000 fce1 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800282e:	003b      	movs	r3, r7
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002834:	003b      	movs	r3, r7
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283a:	003b      	movs	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002840:	003b      	movs	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002846:	003b      	movs	r3, r7
 8002848:	2100      	movs	r1, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f001 fff8 	bl	8004840 <HAL_RCC_ClockConfig>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002854:	f000 fccc 	bl	80031f0 <Error_Handler>
  }
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b013      	add	sp, #76	; 0x4c
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	; 0x40
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002866:	232c      	movs	r3, #44	; 0x2c
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	0018      	movs	r0, r3
 800286c:	2314      	movs	r3, #20
 800286e:	001a      	movs	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f009 fd03 	bl	800c27c <memset>
  RTC_DateTypeDef sDate = {0};
 8002876:	2328      	movs	r3, #40	; 0x28
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800287e:	003b      	movs	r3, r7
 8002880:	0018      	movs	r0, r3
 8002882:	2328      	movs	r3, #40	; 0x28
 8002884:	001a      	movs	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	f009 fcf8 	bl	800c27c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <MX_RTC_Init+0x140>)
 800288e:	4a45      	ldr	r2, [pc, #276]	; (80029a4 <MX_RTC_Init+0x144>)
 8002890:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <MX_RTC_Init+0x140>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <MX_RTC_Init+0x140>)
 800289a:	227f      	movs	r2, #127	; 0x7f
 800289c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <MX_RTC_Init+0x140>)
 80028a0:	22ff      	movs	r2, #255	; 0xff
 80028a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <MX_RTC_Init+0x140>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <MX_RTC_Init+0x140>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <MX_RTC_Init+0x140>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <MX_RTC_Init+0x140>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	05d2      	lsls	r2, r2, #23
 80028bc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <MX_RTC_Init+0x140>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <MX_RTC_Init+0x140>)
 80028c6:	0018      	movs	r0, r3
 80028c8:	f002 fb1c 	bl	8004f04 <HAL_RTC_Init>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80028d0:	f000 fc8e 	bl	80031f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2200      	movs	r2, #0
 80028e6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028fa:	1879      	adds	r1, r7, r1
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <MX_RTC_Init+0x140>)
 80028fe:	2201      	movs	r2, #1
 8002900:	0018      	movs	r0, r3
 8002902:	f002 fba1 	bl	8005048 <HAL_RTC_SetTime>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800290a:	f000 fc71 	bl	80031f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800290e:	2128      	movs	r1, #40	; 0x28
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2206      	movs	r2, #6
 8002914:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2201      	movs	r2, #1
 800291a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2201      	movs	r2, #1
 8002920:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002928:	1879      	adds	r1, r7, r1
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_RTC_Init+0x140>)
 800292c:	2201      	movs	r2, #1
 800292e:	0018      	movs	r0, r3
 8002930:	f002 fc8e 	bl	8005250 <HAL_RTC_SetDate>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002938:	f000 fc5a 	bl	80031f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800293c:	003b      	movs	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002942:	003b      	movs	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002948:	003b      	movs	r3, r7
 800294a:	2200      	movs	r2, #0
 800294c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800294e:	003b      	movs	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002954:	003b      	movs	r3, r7
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800295a:	003b      	movs	r3, r7
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002960:	003b      	movs	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002966:	003b      	movs	r3, r7
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800296c:	003b      	movs	r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002972:	003b      	movs	r3, r7
 8002974:	2220      	movs	r2, #32
 8002976:	2101      	movs	r1, #1
 8002978:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800297a:	003b      	movs	r3, r7
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0052      	lsls	r2, r2, #1
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002982:	0039      	movs	r1, r7
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_RTC_Init+0x140>)
 8002986:	2201      	movs	r2, #1
 8002988:	0018      	movs	r0, r3
 800298a:	f002 fd41 	bl	8005410 <HAL_RTC_SetAlarm>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002992:	f000 fc2d 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b010      	add	sp, #64	; 0x40
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	200006fc 	.word	0x200006fc
 80029a4:	40002800 	.word	0x40002800

080029a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <MX_SPI1_Init+0x78>)
 80029b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029b4:	2282      	movs	r2, #130	; 0x82
 80029b6:	0052      	lsls	r2, r2, #1
 80029b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029c2:	22e0      	movs	r2, #224	; 0xe0
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029f6:	2207      	movs	r2, #7
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <MX_SPI1_Init+0x74>)
 8002a02:	2208      	movs	r2, #8
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <MX_SPI1_Init+0x74>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f002 ff83 	bl	8005914 <HAL_SPI_Init>
 8002a0e:	1e03      	subs	r3, r0, #0
 8002a10:	d001      	beq.n	8002a16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a12:	f000 fbed 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000728 	.word	0x20000728
 8002a20:	40013000 	.word	0x40013000

08002a24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	230c      	movs	r3, #12
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f009 fc22 	bl	800c27c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <MX_TIM6_Init+0x70>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <MX_TIM6_Init+0x74>)
 8002a42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <MX_TIM6_Init+0x78>)
 8002a4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f003 fe5d 	bl	8006718 <HAL_TIM_Base_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a62:	f000 fbc5 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a72:	1d3a      	adds	r2, r7, #4
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MX_TIM6_Init+0x6c>)
 8002a76:	0011      	movs	r1, r2
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f004 f901 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a82:	f000 fbb5 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	2000078c 	.word	0x2000078c
 8002a94:	40001000 	.word	0x40001000
 8002a98:	00003e7f 	.word	0x00003e7f
 8002a9c:	000003e7 	.word	0x000003e7

08002aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <MX_USART1_UART_Init+0x98>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002aac:	2296      	movs	r2, #150	; 0x96
 8002aae:	0192      	lsls	r2, r2, #6
 8002ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f004 f94e 	bl	8006d8c <HAL_UART_Init>
 8002af0:	1e03      	subs	r3, r0, #0
 8002af2:	d001      	beq.n	8002af8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002af4:	f000 fb7c 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002afa:	2100      	movs	r1, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f005 f81b 	bl	8007b38 <HAL_UARTEx_SetTxFifoThreshold>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b06:	f000 fb73 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f005 f852 	bl	8007bb8 <HAL_UARTEx_SetRxFifoThreshold>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b18:	f000 fb6a 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <MX_USART1_UART_Init+0x94>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f004 ffd0 	bl	8007ac4 <HAL_UARTEx_DisableFifoMode>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b28:	f000 fb62 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	200007d8 	.word	0x200007d8
 8002b38:	40013800 	.word	0x40013800

08002b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <MX_USART2_UART_Init+0x98>)
 8002b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b48:	22e1      	movs	r2, #225	; 0xe1
 8002b4a:	0252      	lsls	r2, r2, #9
 8002b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b62:	220c      	movs	r2, #12
 8002b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f004 f900 	bl	8006d8c <HAL_UART_Init>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b90:	f000 fb2e 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f004 ffcd 	bl	8007b38 <HAL_UARTEx_SetTxFifoThreshold>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ba2:	f000 fb25 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f005 f804 	bl	8007bb8 <HAL_UARTEx_SetRxFifoThreshold>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bb4:	f000 fb1c 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f004 ff82 	bl	8007ac4 <HAL_UARTEx_DisableFifoMode>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bc4:	f000 fb14 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	2000086c 	.word	0x2000086c
 8002bd4:	40004400 	.word	0x40004400

08002bd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <MX_USART3_UART_Init+0x64>)
 8002be0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002be4:	2296      	movs	r2, #150	; 0x96
 8002be6:	0192      	lsls	r2, r2, #6
 8002be8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002bfe:	220c      	movs	r2, #12
 8002c00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <MX_USART3_UART_Init+0x60>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f004 f8b2 	bl	8006d8c <HAL_UART_Init>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c2c:	f000 fae0 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	20000900 	.word	0x20000900
 8002c3c:	40004800 	.word	0x40004800

08002c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c46:	2414      	movs	r4, #20
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	2314      	movs	r3, #20
 8002c4e:	001a      	movs	r2, r3
 8002c50:	2100      	movs	r1, #0
 8002c52:	f009 fb13 	bl	800c27c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c56:	4b57      	ldr	r3, [pc, #348]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b56      	ldr	r3, [pc, #344]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
 8002c62:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	2204      	movs	r2, #4
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c72:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c74:	2120      	movs	r1, #32
 8002c76:	430a      	orrs	r2, r1
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	4b45      	ldr	r3, [pc, #276]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8002caa:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <MX_GPIO_Init+0x174>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002cb6:	2388      	movs	r3, #136	; 0x88
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	483f      	ldr	r0, [pc, #252]	; (8002db8 <MX_GPIO_Init+0x178>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	f001 f9cf 	bl	8004062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002cc4:	493d      	ldr	r1, [pc, #244]	; (8002dbc <MX_GPIO_Init+0x17c>)
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	2200      	movs	r2, #0
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f001 f9c8 	bl	8004062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	01db      	lsls	r3, r3, #7
 8002cd6:	483a      	ldr	r0, [pc, #232]	; (8002dc0 <MX_GPIO_Init+0x180>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	0019      	movs	r1, r3
 8002cdc:	f001 f9c1 	bl	8004062 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2288      	movs	r2, #136	; 0x88
 8002ce4:	0152      	lsls	r2, r2, #5
 8002ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	2201      	movs	r2, #1
 8002cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <MX_GPIO_Init+0x178>)
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f000 ff5d 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <MX_GPIO_Init+0x17c>)
 8002d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2201      	movs	r2, #1
 8002d10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	193a      	adds	r2, r7, r4
 8002d20:	23a0      	movs	r3, #160	; 0xa0
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 ff4a 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	01d2      	lsls	r2, r2, #7
 8002d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	000c      	movs	r4, r1
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <MX_GPIO_Init+0x180>)
 8002d4e:	0019      	movs	r1, r3
 8002d50:	0010      	movs	r0, r2
 8002d52:	f000 ff35 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0152      	lsls	r2, r2, #5
 8002d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002d6a:	193a      	adds	r2, r7, r4
 8002d6c:	23a0      	movs	r3, #160	; 0xa0
 8002d6e:	05db      	lsls	r3, r3, #23
 8002d70:	0011      	movs	r1, r2
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 ff24 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	22c0      	movs	r2, #192	; 0xc0
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2288      	movs	r2, #136	; 0x88
 8002d86:	0352      	lsls	r2, r2, #13
 8002d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <MX_GPIO_Init+0x180>)
 8002d94:	0019      	movs	r1, r3
 8002d96:	0010      	movs	r0, r2
 8002d98:	f000 ff12 	bl	8003bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2007      	movs	r0, #7
 8002da2:	f000 fed7 	bl	8003b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002da6:	2007      	movs	r0, #7
 8002da8:	f000 fee9 	bl	8003b7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b00b      	add	sp, #44	; 0x2c
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	50000800 	.word	0x50000800
 8002dbc:	00008860 	.word	0x00008860
 8002dc0:	50000400 	.word	0x50000400

08002dc4 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fd f998 	bl	8000104 <strlen>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2bfa      	cmp	r3, #250	; 0xfa
 8002ddc:	d908      	bls.n	8002df0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002dde:	23fa      	movs	r3, #250	; 0xfa
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	490d      	ldr	r1, [pc, #52]	; (8002e18 <send_debug_logs+0x54>)
 8002de4:	480d      	ldr	r0, [pc, #52]	; (8002e1c <send_debug_logs+0x58>)
 8002de6:	222a      	movs	r2, #42	; 0x2a
 8002de8:	f004 f866 	bl	8006eb8 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002dec:	23fa      	movs	r3, #250	; 0xfa
 8002dee:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	23fa      	movs	r3, #250	; 0xfa
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4808      	ldr	r0, [pc, #32]	; (8002e1c <send_debug_logs+0x58>)
 8002dfc:	f004 f85c 	bl	8006eb8 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002e00:	23fa      	movs	r3, #250	; 0xfa
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4906      	ldr	r1, [pc, #24]	; (8002e20 <send_debug_logs+0x5c>)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <send_debug_logs+0x58>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f004 f855 	bl	8006eb8 <HAL_UART_Transmit>
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	08012ddc 	.word	0x08012ddc
 8002e1c:	2000086c 	.word	0x2000086c
 8002e20:	08012e08 	.word	0x08012e08

08002e24 <reset_astronode>:
void reset_astronode ( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	0119      	lsls	r1, r3, #4
 8002e2c:	23a0      	movs	r3, #160	; 0xa0
 8002e2e:	05db      	lsls	r3, r3, #23
 8002e30:	2201      	movs	r2, #1
 8002e32:	0018      	movs	r0, r3
 8002e34:	f001 f915 	bl	8004062 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f000 fd8d 	bl	8003958 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	0119      	lsls	r1, r3, #4
 8002e42:	23a0      	movs	r3, #160	; 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f001 f90a 	bl	8004062 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002e4e:	20fa      	movs	r0, #250	; 0xfa
 8002e50:	f000 fd82 	bl	8003958 <HAL_Delay>
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <send_astronode_request+0x34>)
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff ffab 	bl	8002dc4 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ffa7 	bl	8002dc4 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	23fa      	movs	r3, #250	; 0xfa
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <send_astronode_request+0x38>)
 8002e82:	f004 f819 	bl	8006eb8 <HAL_UART_Transmit>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	08012e0c 	.word	0x08012e0c
 8002e94:	200007d8 	.word	0x200007d8

08002e98 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <is_astronode_character_received+0x24>)
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f004 f8a2 	bl	8006ff0 <HAL_UART_Receive>
 8002eac:	0003      	movs	r3, r0
 8002eae:	425a      	negs	r2, r3
 8002eb0:	4153      	adcs	r3, r2
 8002eb2:	b2db      	uxtb	r3, r3
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200007d8 	.word	0x200007d8

08002ec0 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f001 f8aa 	bl	8004028 <HAL_GPIO_ReadPin>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	425a      	negs	r2, r3
 8002eda:	4153      	adcs	r3, r2
 8002edc:	b2db      	uxtb	r3, r3
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002ee8:	f000 fd2c 	bl	8003944 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	000a      	movs	r2, r1
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002f02:	f7ff ffef 	bl	8002ee4 <get_systick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	1cba      	adds	r2, r7, #2
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	419b      	sbcs	r3, r3
 8002f14:	425b      	negs	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <my_astro_on+0x4c>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f003 ff86 	bl	8006e38 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	0219      	lsls	r1, r3, #8
 8002f30:	23a0      	movs	r3, #160	; 0xa0
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	2200      	movs	r2, #0
 8002f36:	0018      	movs	r0, r3
 8002f38:	f001 f893 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	0119      	lsls	r1, r3, #4
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	2200      	movs	r2, #0
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 f88b 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f4c:	23a0      	movs	r3, #160	; 0xa0
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	2201      	movs	r2, #1
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 f884 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f000 fcfc 	bl	8003958 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002f60:	f7ff fd9e 	bl	8002aa0 <MX_USART1_UART_Init>
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	200007d8 	.word	0x200007d8

08002f70 <my_astro_off>:
void my_astro_off ( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <my_astro_off+0x48>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f003 ff5e 	bl	8006e38 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	0219      	lsls	r1, r3, #8
 8002f80:	23a0      	movs	r3, #160	; 0xa0
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	2200      	movs	r2, #0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f001 f86b 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	0119      	lsls	r1, r3, #4
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	2200      	movs	r2, #0
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 f863 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f000 fcdb 	bl	8003958 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002fa2:	23a0      	movs	r3, #160	; 0xa0
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	0018      	movs	r0, r3
 8002fac:	f001 f859 	bl	8004062 <HAL_GPIO_WritePin>
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	200007d8 	.word	0x200007d8

08002fbc <my_lx6_on>:
void my_lx6_on ( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <my_lx6_on+0x2c>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	0019      	movs	r1, r3
 8002fca:	f001 f84a 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	015b      	lsls	r3, r3, #5
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <my_lx6_on+0x2c>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	f001 f843 	bl	8004062 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002fdc:	f7ff fdfc 	bl	8002bd8 <MX_USART3_UART_Init>
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	50000800 	.word	0x50000800

08002fec <my_lx6_off>:
void my_lx6_off ( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <my_lx6_off+0x30>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	f001 f832 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <my_lx6_off+0x30>)
 8003004:	2200      	movs	r2, #0
 8003006:	0019      	movs	r1, r3
 8003008:	f001 f82b 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <my_lx6_off+0x34>)
 800300e:	0018      	movs	r0, r3
 8003010:	f003 ff12 	bl	8006e38 <HAL_UART_DeInit>
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	50000800 	.word	0x50000800
 8003020:	20000900 	.word	0x20000900

08003024 <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	0008      	movs	r0, r1
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	0019      	movs	r1, r3
 8003032:	240b      	movs	r4, #11
 8003034:	193b      	adds	r3, r7, r4
 8003036:	1c02      	adds	r2, r0, #0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	2508      	movs	r5, #8
 800303c:	197b      	adds	r3, r7, r5
 800303e:	1c0a      	adds	r2, r1, #0
 8003040:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4812      	ldr	r0, [pc, #72]	; (8003090 <my_lis2dw12_platform_write+0x6c>)
 8003048:	2200      	movs	r2, #0
 800304a:	0019      	movs	r1, r3
 800304c:	f001 f809 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003050:	2014      	movs	r0, #20
 8003052:	f000 fc81 	bl	8003958 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003056:	23fa      	movs	r3, #250	; 0xfa
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	1939      	adds	r1, r7, r4
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f002 fd10 	bl	8005a84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003064:	23fa      	movs	r3, #250	; 0xfa
 8003066:	009c      	lsls	r4, r3, #2
 8003068:	197b      	adds	r3, r7, r5
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	0023      	movs	r3, r4
 8003072:	f002 fd07 	bl	8005a84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	01db      	lsls	r3, r3, #7
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <my_lis2dw12_platform_write+0x6c>)
 800307c:	2201      	movs	r2, #1
 800307e:	0019      	movs	r1, r3
 8003080:	f000 ffef 	bl	8004062 <HAL_GPIO_WritePin>

	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b004      	add	sp, #16
 800308c:	bdb0      	pop	{r4, r5, r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	50000400 	.word	0x50000400

08003094 <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	0008      	movs	r0, r1
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	0019      	movs	r1, r3
 80030a2:	240b      	movs	r4, #11
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	1c02      	adds	r2, r0, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	2508      	movs	r5, #8
 80030ac:	197b      	adds	r3, r7, r5
 80030ae:	1c0a      	adds	r2, r1, #0
 80030b0:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	4252      	negs	r2, r2
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	01db      	lsls	r3, r3, #7
 80030c6:	4812      	ldr	r0, [pc, #72]	; (8003110 <my_lis2dw12_platform_read+0x7c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	0019      	movs	r1, r3
 80030cc:	f000 ffc9 	bl	8004062 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030d0:	2014      	movs	r0, #20
 80030d2:	f000 fc41 	bl	8003958 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 80030d6:	23fa      	movs	r3, #250	; 0xfa
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	1939      	adds	r1, r7, r4
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f002 fcd0 	bl	8005a84 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80030e4:	23fa      	movs	r3, #250	; 0xfa
 80030e6:	009c      	lsls	r4, r3, #2
 80030e8:	197b      	adds	r3, r7, r5
 80030ea:	881a      	ldrh	r2, [r3, #0]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	0023      	movs	r3, r4
 80030f2:	f002 fe1f 	bl	8005d34 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	01db      	lsls	r3, r3, #7
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <my_lis2dw12_platform_read+0x7c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	0019      	movs	r1, r3
 8003100:	f000 ffaf 	bl	8004062 <HAL_GPIO_WritePin>

	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	50000400 	.word	0x50000400

08003114 <is_system_initialized>:
bool is_system_initialized ( void )
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 800311a:	f005 fae5 	bl	80086e8 <astronode_send_rtc_rr>
 800311e:	0003      	movs	r3, r0
 8003120:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt ) ;
 8003122:	1cbc      	adds	r4, r7, #2
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <is_system_initialized+0x44>)
 8003126:	0018      	movs	r0, r3
 8003128:	f007 f936 	bl	800a398 <my_rtc_get_time_s>
 800312c:	0003      	movs	r3, r0
 800312e:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt ) ;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <is_system_initialized+0x44>)
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff fe46 	bl	8002dc4 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 8003138:	1cbb      	adds	r3, r7, #2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <is_system_initialized+0x48>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <is_system_initialized+0x34>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <is_system_initialized+0x38>
	{
		return true ;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <is_system_initialized+0x3a>
	}
	return false ;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b003      	add	sp, #12
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	200009f8 	.word	0x200009f8
 800315c:	000007e6 	.word	0x000007e6

08003160 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10d      	bne.n	800318e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800317c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	23e1      	movs	r3, #225	; 0xe1
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	429a      	cmp	r2, r3
 8003188:	d901      	bls.n	800318e <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 800318a:	f000 fd08 	bl	8003b9e <HAL_NVIC_SystemReset>
		  }
	}
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40001000 	.word	0x40001000
 800319c:	20000a1a 	.word	0x20000a1a

080031a0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	0002      	movs	r2, r0
 80031a8:	1dbb      	adds	r3, r7, #6
 80031aa:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 )
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d110      	bne.n	80031da <HAL_GPIO_EXTI_Rising_Callback+0x3a>
	{
		is_acc_int1_wkup_flag = true ;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
		dbg_buff[0] = 0 ;
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	4908      	ldr	r1, [pc, #32]	; (80031ec <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80031cc:	0018      	movs	r0, r3
 80031ce:	f008 ffbf 	bl	800c150 <sprintf>
		send_debug_logs ( dbg_buff ) ;
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff fdf5 	bl	8002dc4 <send_debug_logs>
	}
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000b90 	.word	0x20000b90
 80031e8:	20000994 	.word	0x20000994
 80031ec:	08012ea0 	.word	0x08012ea0

080031f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <Error_Handler+0x8>
	...

080031fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_MspInit+0x44>)
 8003204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_MspInit+0x44>)
 8003208:	2101      	movs	r1, #1
 800320a:	430a      	orrs	r2, r1
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_MspInit+0x44>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_MspInit+0x44>)
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_MspInit+0x44>)
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0549      	lsls	r1, r1, #21
 8003224:	430a      	orrs	r2, r1
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_MspInit+0x44>)
 800322a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	055b      	lsls	r3, r3, #21
 8003230:	4013      	ands	r3, r2
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	40021000 	.word	0x40021000

08003244 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b091      	sub	sp, #68	; 0x44
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800324c:	240c      	movs	r4, #12
 800324e:	193b      	adds	r3, r7, r4
 8003250:	0018      	movs	r0, r3
 8003252:	2334      	movs	r3, #52	; 0x34
 8003254:	001a      	movs	r2, r3
 8003256:	2100      	movs	r1, #0
 8003258:	f009 f810 	bl	800c27c <memset>
  if(hrtc->Instance==RTC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_RTC_MspInit+0x74>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d124      	bne.n	80032b0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003266:	193b      	adds	r3, r7, r4
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	0292      	lsls	r2, r2, #10
 800326c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003276:	193b      	adds	r3, r7, r4
 8003278:	0018      	movs	r0, r3
 800327a:	f001 fc8b 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003282:	f7ff ffb5 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RTC_MspInit+0x78>)
 8003288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RTC_MspInit+0x78>)
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0209      	lsls	r1, r1, #8
 8003290:	430a      	orrs	r2, r1
 8003292:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RTC_MspInit+0x78>)
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_RTC_MspInit+0x78>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	00c9      	lsls	r1, r1, #3
 800329e:	430a      	orrs	r2, r1
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RTC_MspInit+0x78>)
 80032a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4013      	ands	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b011      	add	sp, #68	; 0x44
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	40002800 	.word	0x40002800
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b08b      	sub	sp, #44	; 0x2c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	2414      	movs	r4, #20
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	0018      	movs	r0, r3
 80032ce:	2314      	movs	r3, #20
 80032d0:	001a      	movs	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f008 ffd2 	bl	800c27c <memset>
  if(hspi->Instance==SPI1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_SPI_MspInit+0x8c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12f      	bne.n	8003342 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_SPI_MspInit+0x90>)
 80032e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_SPI_MspInit+0x90>)
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	0149      	lsls	r1, r1, #5
 80032ec:	430a      	orrs	r2, r1
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_SPI_MspInit+0x90>)
 80032f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_SPI_MspInit+0x90>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_SPI_MspInit+0x90>)
 8003304:	2102      	movs	r1, #2
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_SPI_MspInit+0x90>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 8003316:	0021      	movs	r1, r4
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2238      	movs	r2, #56	; 0x38
 800331c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2202      	movs	r2, #2
 8003322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	187b      	adds	r3, r7, r1
 8003338:	4a06      	ldr	r2, [pc, #24]	; (8003354 <HAL_SPI_MspInit+0x94>)
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f000 fc3f 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b00b      	add	sp, #44	; 0x2c
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	40013000 	.word	0x40013000
 8003350:	40021000 	.word	0x40021000
 8003354:	50000400 	.word	0x50000400

08003358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_TIM_Base_MspInit+0x44>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d113      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_TIM_Base_MspInit+0x48>)
 800336c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_TIM_Base_MspInit+0x48>)
 8003370:	2110      	movs	r1, #16
 8003372:	430a      	orrs	r2, r1
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_TIM_Base_MspInit+0x48>)
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	2210      	movs	r2, #16
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2011      	movs	r0, #17
 8003388:	f000 fbe4 	bl	8003b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800338c:	2011      	movs	r0, #17
 800338e:	f000 fbf6 	bl	8003b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	40001000 	.word	0x40001000
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b09b      	sub	sp, #108	; 0x6c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	2354      	movs	r3, #84	; 0x54
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	0018      	movs	r0, r3
 80033b2:	2314      	movs	r3, #20
 80033b4:	001a      	movs	r2, r3
 80033b6:	2100      	movs	r1, #0
 80033b8:	f008 ff60 	bl	800c27c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033bc:	2420      	movs	r4, #32
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	0018      	movs	r0, r3
 80033c2:	2334      	movs	r3, #52	; 0x34
 80033c4:	001a      	movs	r2, r3
 80033c6:	2100      	movs	r1, #0
 80033c8:	f008 ff58 	bl	800c27c <memset>
  if(huart->Instance==USART1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a61      	ldr	r2, [pc, #388]	; (8003558 <HAL_UART_MspInit+0x1b4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d140      	bne.n	8003458 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	2200      	movs	r2, #0
 80033e0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e2:	193b      	adds	r3, r7, r4
 80033e4:	0018      	movs	r0, r3
 80033e6:	f001 fbd5 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033ee:	f7ff feff 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80033f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f6:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	01c9      	lsls	r1, r1, #7
 80033fc:	430a      	orrs	r2, r1
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	01db      	lsls	r3, r3, #7
 8003408:	4013      	ands	r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003412:	4b52      	ldr	r3, [pc, #328]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_UART_MspInit+0x1b8>)
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8003426:	2154      	movs	r1, #84	; 0x54
 8003428:	187b      	adds	r3, r7, r1
 800342a:	22c0      	movs	r2, #192	; 0xc0
 800342c:	00d2      	lsls	r2, r2, #3
 800342e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2202      	movs	r2, #2
 8003434:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2201      	movs	r2, #1
 8003446:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	187a      	adds	r2, r7, r1
 800344a:	23a0      	movs	r3, #160	; 0xa0
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fbb5 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003456:	e07b      	b.n	8003550 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a40      	ldr	r2, [pc, #256]	; (8003560 <HAL_UART_MspInit+0x1bc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d140      	bne.n	80034e4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003462:	2120      	movs	r1, #32
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003470:	187b      	adds	r3, r7, r1
 8003472:	0018      	movs	r0, r3
 8003474:	f001 fb8e 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800347c:	f7ff feb8 	bl	80031f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	0289      	lsls	r1, r1, #10
 800348a:	430a      	orrs	r2, r1
 800348c:	63da      	str	r2, [r3, #60]	; 0x3c
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	029b      	lsls	r3, r3, #10
 8003496:	4013      	ands	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_UART_MspInit+0x1b8>)
 800349e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	430a      	orrs	r2, r1
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 80034b4:	2154      	movs	r1, #84	; 0x54
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	220c      	movs	r2, #12
 80034ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2202      	movs	r2, #2
 80034c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2201      	movs	r2, #1
 80034c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2201      	movs	r2, #1
 80034d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	187a      	adds	r2, r7, r1
 80034d6:	23a0      	movs	r3, #160	; 0xa0
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 fb6f 	bl	8003bc0 <HAL_GPIO_Init>
}
 80034e2:	e035      	b.n	8003550 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_UART_MspInit+0x1c0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d130      	bne.n	8003550 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80034f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	02c9      	lsls	r1, r1, #11
 80034f8:	430a      	orrs	r2, r1
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_UART_MspInit+0x1b8>)
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	02db      	lsls	r3, r3, #11
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_UART_MspInit+0x1b8>)
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003510:	2104      	movs	r1, #4
 8003512:	430a      	orrs	r2, r1
 8003514:	635a      	str	r2, [r3, #52]	; 0x34
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_UART_MspInit+0x1b8>)
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2204      	movs	r2, #4
 800351c:	4013      	ands	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8003522:	2154      	movs	r1, #84	; 0x54
 8003524:	187b      	adds	r3, r7, r1
 8003526:	22c0      	movs	r2, #192	; 0xc0
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2202      	movs	r2, #2
 8003530:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800353e:	187b      	adds	r3, r7, r1
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	187b      	adds	r3, r7, r1
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_UART_MspInit+0x1c4>)
 8003548:	0019      	movs	r1, r3
 800354a:	0010      	movs	r0, r2
 800354c:	f000 fb38 	bl	8003bc0 <HAL_GPIO_Init>
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b01b      	add	sp, #108	; 0x6c
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	40013800 	.word	0x40013800
 800355c:	40021000 	.word	0x40021000
 8003560:	40004400 	.word	0x40004400
 8003564:	40004800 	.word	0x40004800
 8003568:	50000800 	.word	0x50000800

0800356c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_UART_MspDeInit+0x80>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10e      	bne.n	800359c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 8003580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 8003584:	491b      	ldr	r1, [pc, #108]	; (80035f4 <HAL_UART_MspDeInit+0x88>)
 8003586:	400a      	ands	r2, r1
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 800358a:	23c0      	movs	r3, #192	; 0xc0
 800358c:	00da      	lsls	r2, r3, #3
 800358e:	23a0      	movs	r3, #160	; 0xa0
 8003590:	05db      	lsls	r3, r3, #23
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f000 fc77 	bl	8003e88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800359a:	e023      	b.n	80035e4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_UART_MspDeInit+0x8c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10c      	bne.n	80035c0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 80035a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 80035ac:	4913      	ldr	r1, [pc, #76]	; (80035fc <HAL_UART_MspDeInit+0x90>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 80035b2:	23a0      	movs	r3, #160	; 0xa0
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	210c      	movs	r1, #12
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 fc65 	bl	8003e88 <HAL_GPIO_DeInit>
}
 80035be:	e011      	b.n	80035e4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <HAL_UART_MspDeInit+0x94>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10c      	bne.n	80035e4 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 80035cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_UART_MspDeInit+0x84>)
 80035d0:	490c      	ldr	r1, [pc, #48]	; (8003604 <HAL_UART_MspDeInit+0x98>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 80035d6:	23c0      	movs	r3, #192	; 0xc0
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <HAL_UART_MspDeInit+0x9c>)
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f000 fc52 	bl	8003e88 <HAL_GPIO_DeInit>
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40021000 	.word	0x40021000
 80035f4:	ffffbfff 	.word	0xffffbfff
 80035f8:	40004400 	.word	0x40004400
 80035fc:	fffdffff 	.word	0xfffdffff
 8003600:	40004800 	.word	0x40004800
 8003604:	fffbffff 	.word	0xfffbffff
 8003608:	50000800 	.word	0x50000800

0800360c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <NMI_Handler+0x4>

08003612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <HardFault_Handler+0x4>

08003618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003630:	f000 f976 	bl	8003920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	0018      	movs	r0, r3
 8003644:	f000 fd2a 	bl	800409c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fd25 	bl	800409c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800365e:	0018      	movs	r0, r3
 8003660:	f003 f93c 	bl	80068dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	2000078c 	.word	0x2000078c

08003670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  return 1;
 8003674:	2301      	movs	r3, #1
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_kill>:

int _kill(int pid, int sig)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003686:	f008 fea5 	bl	800c3d4 <__errno>
 800368a:	0003      	movs	r3, r0
 800368c:	2216      	movs	r2, #22
 800368e:	601a      	str	r2, [r3, #0]
  return -1;
 8003690:	2301      	movs	r3, #1
 8003692:	425b      	negs	r3, r3
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <_exit>:

void _exit (int status)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036a4:	2301      	movs	r3, #1
 80036a6:	425a      	negs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7ff ffe5 	bl	800367c <_kill>
  while (1) {}    /* Make sure we hang here */
 80036b2:	e7fe      	b.n	80036b2 <_exit+0x16>

080036b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e00a      	b.n	80036dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036c6:	e000      	b.n	80036ca <_read+0x16>
 80036c8:	bf00      	nop
 80036ca:	0001      	movs	r1, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf0      	blt.n	80036c6 <_read+0x12>
  }

  return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b006      	add	sp, #24
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e009      	b.n	8003714 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	60ba      	str	r2, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	0018      	movs	r0, r3
 800370a:	e000      	b.n	800370e <_write+0x20>
 800370c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	dbf1      	blt.n	8003700 <_write+0x12>
  }
  return len;
 800371c:	687b      	ldr	r3, [r7, #4]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}

08003726 <_close>:

int _close(int file)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800372e:	2301      	movs	r3, #1
 8003730:	425b      	negs	r3, r3
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	0192      	lsls	r2, r2, #6
 800374a:	605a      	str	r2, [r3, #4]
  return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <_isatty>:

int _isatty(int file)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800375e:	2301      	movs	r3, #1
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <_sbrk+0x5c>)
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <_sbrk+0x60>)
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <_sbrk+0x64>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <_sbrk+0x64>)
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <_sbrk+0x68>)
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b0:	f008 fe10 	bl	800c3d4 <__errno>
 80037b4:	0003      	movs	r3, r0
 80037b6:	220c      	movs	r2, #12
 80037b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	425b      	negs	r3, r3
 80037be:	e009      	b.n	80037d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <_sbrk+0x64>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <_sbrk+0x64>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	18d2      	adds	r2, r2, r3
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <_sbrk+0x64>)
 80037d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b006      	add	sp, #24
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20009000 	.word	0x20009000
 80037e0:	00000400 	.word	0x00000400
 80037e4:	20000b94 	.word	0x20000b94
 80037e8:	20000eb0 	.word	0x20000eb0

080037ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037f8:	480d      	ldr	r0, [pc, #52]	; (8003830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037fc:	f7ff fff6 	bl	80037ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003800:	480c      	ldr	r0, [pc, #48]	; (8003834 <LoopForever+0x6>)
  ldr r1, =_edata
 8003802:	490d      	ldr	r1, [pc, #52]	; (8003838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <LoopForever+0xe>)
  movs r3, #0
 8003806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003808:	e002      	b.n	8003810 <LoopCopyDataInit>

0800380a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800380a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800380c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800380e:	3304      	adds	r3, #4

08003810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003814:	d3f9      	bcc.n	800380a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003818:	4c0a      	ldr	r4, [pc, #40]	; (8003844 <LoopForever+0x16>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800381c:	e001      	b.n	8003822 <LoopFillZerobss>

0800381e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800381e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003820:	3204      	adds	r2, #4

08003822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003824:	d3fb      	bcc.n	800381e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003826:	f008 fddb 	bl	800c3e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800382a:	f7fe febd 	bl	80025a8 <main>

0800382e <LoopForever>:

LoopForever:
  b LoopForever
 800382e:	e7fe      	b.n	800382e <LoopForever>
  ldr   r0, =_estack
 8003830:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003838:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 800383c:	08014c00 	.word	0x08014c00
  ldr r2, =_sbss
 8003840:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8003844:	20000eac 	.word	0x20000eac

08003848 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003848:	e7fe      	b.n	8003848 <ADC1_COMP_IRQHandler>
	...

0800384c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_Init+0x3c>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_Init+0x3c>)
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0049      	lsls	r1, r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003866:	2000      	movs	r0, #0
 8003868:	f000 f810 	bl	800388c <HAL_InitTick>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d003      	beq.n	8003878 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003870:	1dfb      	adds	r3, r7, #7
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e001      	b.n	800387c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003878:	f7ff fcc0 	bl	80031fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40022000 	.word	0x40022000

0800388c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_InitTick+0x88>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02b      	beq.n	80038fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_InitTick+0x8c>)
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_InitTick+0x88>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	0019      	movs	r1, r3
 80038ae:	23fa      	movs	r3, #250	; 0xfa
 80038b0:	0098      	lsls	r0, r3, #2
 80038b2:	f7fc fc43 	bl	800013c <__udivsi3>
 80038b6:	0003      	movs	r3, r0
 80038b8:	0019      	movs	r1, r3
 80038ba:	0020      	movs	r0, r4
 80038bc:	f7fc fc3e 	bl	800013c <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f96f 	bl	8003ba6 <HAL_SYSTICK_Config>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d112      	bne.n	80038f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d80a      	bhi.n	80038e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	2301      	movs	r3, #1
 80038d6:	425b      	negs	r3, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 f93a 	bl	8003b54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_InitTick+0x90>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e00d      	b.n	8003904 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e008      	b.n	8003904 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f2:	230f      	movs	r3, #15
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e003      	b.n	8003904 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038fc:	230f      	movs	r3, #15
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003904:	230f      	movs	r3, #15
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	781b      	ldrb	r3, [r3, #0]
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b005      	add	sp, #20
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	20000028 	.word	0x20000028
 8003918:	20000020 	.word	0x20000020
 800391c:	20000024 	.word	0x20000024

08003920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_IncTick+0x1c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	001a      	movs	r2, r3
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_IncTick+0x20>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	18d2      	adds	r2, r2, r3
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_IncTick+0x20>)
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000028 	.word	0x20000028
 8003940:	20000b98 	.word	0x20000b98

08003944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  return uwTick;
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <HAL_GetTick+0x10>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	20000b98 	.word	0x20000b98

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff fff0 	bl	8003944 <HAL_GetTick>
 8003964:	0003      	movs	r3, r0
 8003966:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	001a      	movs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	189b      	adds	r3, r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	f7ff ffe0 	bl	8003944 <HAL_GetTick>
 8003984:	0002      	movs	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000028 	.word	0x20000028

080039a0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_SuspendTick+0x18>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_SuspendTick+0x18>)
 80039aa:	2102      	movs	r1, #2
 80039ac:	438a      	bics	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_ResumeTick+0x18>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_ResumeTick+0x18>)
 80039c6:	2102      	movs	r1, #2
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	0002      	movs	r2, r0
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b7f      	cmp	r3, #127	; 0x7f
 80039ea:	d809      	bhi.n	8003a00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	001a      	movs	r2, r3
 80039f2:	231f      	movs	r3, #31
 80039f4:	401a      	ands	r2, r3
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_EnableIRQ+0x30>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	4091      	lsls	r1, r2
 80039fc:	000a      	movs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	0002      	movs	r2, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a20:	d828      	bhi.n	8003a74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a22:	4a2f      	ldr	r2, [pc, #188]	; (8003ae0 <__NVIC_SetPriority+0xd4>)
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	33c0      	adds	r3, #192	; 0xc0
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	589b      	ldr	r3, [r3, r2]
 8003a32:	1dfa      	adds	r2, r7, #7
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	0011      	movs	r1, r2
 8003a38:	2203      	movs	r2, #3
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	00d2      	lsls	r2, r2, #3
 8003a3e:	21ff      	movs	r1, #255	; 0xff
 8003a40:	4091      	lsls	r1, r2
 8003a42:	000a      	movs	r2, r1
 8003a44:	43d2      	mvns	r2, r2
 8003a46:	401a      	ands	r2, r3
 8003a48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	401a      	ands	r2, r3
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	0018      	movs	r0, r3
 8003a58:	2303      	movs	r3, #3
 8003a5a:	4003      	ands	r3, r0
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a60:	481f      	ldr	r0, [pc, #124]	; (8003ae0 <__NVIC_SetPriority+0xd4>)
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	33c0      	adds	r3, #192	; 0xc0
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a72:	e031      	b.n	8003ad8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a74:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <__NVIC_SetPriority+0xd8>)
 8003a76:	1dfb      	adds	r3, r7, #7
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	400b      	ands	r3, r1
 8003a80:	3b08      	subs	r3, #8
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3306      	adds	r3, #6
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1dfa      	adds	r2, r7, #7
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	0011      	movs	r1, r2
 8003a94:	2203      	movs	r2, #3
 8003a96:	400a      	ands	r2, r1
 8003a98:	00d2      	lsls	r2, r2, #3
 8003a9a:	21ff      	movs	r1, #255	; 0xff
 8003a9c:	4091      	lsls	r1, r2
 8003a9e:	000a      	movs	r2, r1
 8003aa0:	43d2      	mvns	r2, r2
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	401a      	ands	r2, r3
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	4003      	ands	r3, r0
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003abc:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <__NVIC_SetPriority+0xd8>)
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	001c      	movs	r4, r3
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	4023      	ands	r3, r4
 8003ac8:	3b08      	subs	r3, #8
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	430a      	orrs	r2, r1
 8003ace:	3306      	adds	r3, #6
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	18c3      	adds	r3, r0, r3
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b003      	add	sp, #12
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003aec:	f3bf 8f4f 	dsb	sy
}
 8003af0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <__NVIC_SystemReset+0x1c>)
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <__NVIC_SystemReset+0x20>)
 8003af6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003af8:	f3bf 8f4f 	dsb	sy
}
 8003afc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	e7fd      	b.n	8003afe <__NVIC_SystemReset+0x16>
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	e000ed00 	.word	0xe000ed00
 8003b08:	05fa0004 	.word	0x05fa0004

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1e5a      	subs	r2, r3, #1
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	045b      	lsls	r3, r3, #17
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d301      	bcc.n	8003b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b20:	2301      	movs	r3, #1
 8003b22:	e010      	b.n	8003b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <SysTick_Config+0x44>)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	425b      	negs	r3, r3
 8003b30:	2103      	movs	r1, #3
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff ff6a 	bl	8003a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <SysTick_Config+0x44>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <SysTick_Config+0x44>)
 8003b40:	2207      	movs	r2, #7
 8003b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	e000e010 	.word	0xe000e010

08003b54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	210f      	movs	r1, #15
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	1c02      	adds	r2, r0, #0
 8003b64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff ff4b 	bl	8003a0c <__NVIC_SetPriority>
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	0002      	movs	r2, r0
 8003b86:	1dfb      	adds	r3, r7, #7
 8003b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff ff21 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b002      	add	sp, #8
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003ba2:	f7ff ffa1 	bl	8003ae8 <__NVIC_SystemReset>

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff ffab 	bl	8003b0c <SysTick_Config>
 8003bb6:	0003      	movs	r3, r0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bce:	e147      	b.n	8003e60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4091      	lsls	r1, r2
 8003bda:	000a      	movs	r2, r1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d100      	bne.n	8003be8 <HAL_GPIO_Init+0x28>
 8003be6:	e138      	b.n	8003e5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d005      	beq.n	8003c00 <HAL_GPIO_Init+0x40>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d130      	bne.n	8003c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	0013      	movs	r3, r2
 8003c10:	43da      	mvns	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c36:	2201      	movs	r2, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
 8003c54:	0013      	movs	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d017      	beq.n	8003c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d123      	bne.n	8003cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	0092      	lsls	r2, r2, #2
 8003cb4:	58d3      	ldr	r3, [r2, r3]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2207      	movs	r2, #7
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2107      	movs	r1, #7
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	08da      	lsrs	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3208      	adds	r2, #8
 8003cec:	0092      	lsls	r2, r2, #2
 8003cee:	6939      	ldr	r1, [r7, #16]
 8003cf0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	0013      	movs	r3, r2
 8003d02:	43da      	mvns	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	401a      	ands	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	0013      	movs	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d100      	bne.n	8003d34 <HAL_GPIO_Init+0x174>
 8003d32:	e092      	b.n	8003e5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d34:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	589b      	ldr	r3, [r3, r2]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2203      	movs	r2, #3
 8003d46:	4013      	ands	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	0013      	movs	r3, r2
 8003d50:	43da      	mvns	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	23a0      	movs	r3, #160	; 0xa0
 8003d5c:	05db      	lsls	r3, r3, #23
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0x1ca>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a45      	ldr	r2, [pc, #276]	; (8003e7c <HAL_GPIO_Init+0x2bc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00d      	beq.n	8003d86 <HAL_GPIO_Init+0x1c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a44      	ldr	r2, [pc, #272]	; (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <HAL_GPIO_Init+0x1c2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a43      	ldr	r2, [pc, #268]	; (8003e84 <HAL_GPIO_Init+0x2c4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_GPIO_Init+0x1be>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x1cc>
 8003d7e:	2305      	movs	r3, #5
 8003d80:	e004      	b.n	8003d8c <HAL_GPIO_Init+0x1cc>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_Init+0x1cc>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_GPIO_Init+0x1cc>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	2103      	movs	r1, #3
 8003d90:	400a      	ands	r2, r1
 8003d92:	00d2      	lsls	r2, r2, #3
 8003d94:	4093      	lsls	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d9c:	4936      	ldr	r1, [pc, #216]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3318      	adds	r3, #24
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003daa:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43da      	mvns	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	035b      	lsls	r3, r3, #13
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dce:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003dd4:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	039b      	lsls	r3, r3, #14
 8003dec:	4013      	ands	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003e00:	2384      	movs	r3, #132	; 0x84
 8003e02:	58d3      	ldr	r3, [r2, r3]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43da      	mvns	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e24:	4914      	ldr	r1, [pc, #80]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003e26:	2284      	movs	r2, #132	; 0x84
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	58d3      	ldr	r3, [r2, r3]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	025b      	lsls	r3, r3, #9
 8003e46:	4013      	ands	r3, r2
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e52:	4909      	ldr	r1, [pc, #36]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	40da      	lsrs	r2, r3
 8003e68:	1e13      	subs	r3, r2, #0
 8003e6a:	d000      	beq.n	8003e6e <HAL_GPIO_Init+0x2ae>
 8003e6c:	e6b0      	b.n	8003bd0 <HAL_GPIO_Init+0x10>
  }
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b006      	add	sp, #24
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	50000400 	.word	0x50000400
 8003e80:	50000800 	.word	0x50000800
 8003e84:	50000c00 	.word	0x50000c00

08003e88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e96:	e0b4      	b.n	8004002 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d100      	bne.n	8003eac <HAL_GPIO_DeInit+0x24>
 8003eaa:	e0a7      	b.n	8003ffc <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003eac:	4a5a      	ldr	r2, [pc, #360]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	589b      	ldr	r3, [r3, r2]
 8003eb8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	23a0      	movs	r3, #160	; 0xa0
 8003ed0:	05db      	lsls	r3, r3, #23
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_DeInit+0x76>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a50      	ldr	r2, [pc, #320]	; (800401c <HAL_GPIO_DeInit+0x194>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00d      	beq.n	8003efa <HAL_GPIO_DeInit+0x72>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	; (8004020 <HAL_GPIO_DeInit+0x198>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <HAL_GPIO_DeInit+0x6e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4e      	ldr	r2, [pc, #312]	; (8004024 <HAL_GPIO_DeInit+0x19c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_GPIO_DeInit+0x6a>
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_DeInit+0x78>
 8003ef2:	2305      	movs	r3, #5
 8003ef4:	e004      	b.n	8003f00 <HAL_GPIO_DeInit+0x78>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_DeInit+0x78>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_DeInit+0x78>
 8003efe:	2300      	movs	r3, #0
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	2103      	movs	r1, #3
 8003f04:	400a      	ands	r2, r1
 8003f06:	00d2      	lsls	r2, r2, #3
 8003f08:	4093      	lsls	r3, r2
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d136      	bne.n	8003f7e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f10:	4a41      	ldr	r2, [pc, #260]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	58d3      	ldr	r3, [r2, r3]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	43d2      	mvns	r2, r2
 8003f1a:	493f      	ldr	r1, [pc, #252]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f22:	4a3d      	ldr	r2, [pc, #244]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f24:	2384      	movs	r3, #132	; 0x84
 8003f26:	58d3      	ldr	r3, [r2, r3]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	43d2      	mvns	r2, r2
 8003f2c:	493a      	ldr	r1, [pc, #232]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2284      	movs	r2, #132	; 0x84
 8003f32:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f34:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43d9      	mvns	r1, r3
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f42:	4b35      	ldr	r3, [pc, #212]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43d9      	mvns	r1, r3
 8003f4a:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2203      	movs	r2, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	220f      	movs	r2, #15
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003f60:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	3318      	adds	r3, #24
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	589a      	ldr	r2, [r3, r2]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43d9      	mvns	r1, r3
 8003f70:	4829      	ldr	r0, [pc, #164]	; (8004018 <HAL_GPIO_DeInit+0x190>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	400a      	ands	r2, r1
 8003f78:	3318      	adds	r3, #24
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2103      	movs	r1, #3
 8003f88:	4099      	lsls	r1, r3
 8003f8a:	000b      	movs	r3, r1
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	58d3      	ldr	r3, [r2, r3]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	2107      	movs	r1, #7
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	4091      	lsls	r1, r2
 8003faa:	000a      	movs	r2, r1
 8003fac:	43d1      	mvns	r1, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	08d2      	lsrs	r2, r2, #3
 8003fb2:	4019      	ands	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	0052      	lsls	r2, r2, #1
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	4091      	lsls	r1, r2
 8003fc8:	000a      	movs	r2, r1
 8003fca:	43d2      	mvns	r2, r2
 8003fcc:	401a      	ands	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4091      	lsls	r1, r2
 8003fdc:	000a      	movs	r2, r1
 8003fde:	43d2      	mvns	r2, r2
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	0052      	lsls	r2, r2, #1
 8003fee:	2103      	movs	r1, #3
 8003ff0:	4091      	lsls	r1, r2
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	43d2      	mvns	r2, r2
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	40da      	lsrs	r2, r3
 8004008:	1e13      	subs	r3, r2, #0
 800400a:	d000      	beq.n	800400e <HAL_GPIO_DeInit+0x186>
 800400c:	e744      	b.n	8003e98 <HAL_GPIO_DeInit+0x10>
  }
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b006      	add	sp, #24
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021800 	.word	0x40021800
 800401c:	50000400 	.word	0x50000400
 8004020:	50000800 	.word	0x50000800
 8004024:	50000c00 	.word	0x50000c00

08004028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	000a      	movs	r2, r1
 8004032:	1cbb      	adds	r3, r7, #2
 8004034:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	1cba      	adds	r2, r7, #2
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	4013      	ands	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004042:	230f      	movs	r3, #15
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e003      	b.n	8004054 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004054:	230f      	movs	r3, #15
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	781b      	ldrb	r3, [r3, #0]
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	0008      	movs	r0, r1
 800406c:	0011      	movs	r1, r2
 800406e:	1cbb      	adds	r3, r7, #2
 8004070:	1c02      	adds	r2, r0, #0
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	1c7b      	adds	r3, r7, #1
 8004076:	1c0a      	adds	r2, r1, #0
 8004078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800407a:	1c7b      	adds	r3, r7, #1
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004082:	1cbb      	adds	r3, r7, #2
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800408a:	e003      	b.n	8004094 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800408c:	1cbb      	adds	r3, r7, #2
 800408e:	881a      	ldrh	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	0002      	movs	r2, r0
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	1dba      	adds	r2, r7, #6
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	4013      	ands	r3, r2
 80040b2:	d008      	beq.n	80040c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040b6:	1dba      	adds	r2, r7, #6
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff f86d 	bl	80031a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	1dba      	adds	r2, r7, #6
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	d008      	beq.n	80040e4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040d4:	1dba      	adds	r2, r7, #6
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f806 	bl	80040f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021800 	.word	0x40021800

080040f0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	0002      	movs	r2, r0
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	000a      	movs	r2, r1
 800410e:	1cfb      	adds	r3, r7, #3
 8004110:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_PWR_EnterSTOPMode+0x68>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2207      	movs	r2, #7
 800411e:	4393      	bics	r3, r2
 8004120:	001a      	movs	r2, r3
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_PWR_EnterSTOPMode+0x68>)
 8004124:	2101      	movs	r1, #1
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e005      	b.n	8004138 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_PWR_EnterSTOPMode+0x68>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_PWR_EnterSTOPMode+0x68>)
 8004132:	2107      	movs	r1, #7
 8004134:	438a      	bics	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_PWR_EnterSTOPMode+0x6c>)
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_PWR_EnterSTOPMode+0x6c>)
 800413e:	2104      	movs	r1, #4
 8004140:	430a      	orrs	r2, r1
 8004142:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004144:	1cfb      	adds	r3, r7, #3
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800414c:	bf30      	wfi
 800414e:	e002      	b.n	8004156 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004150:	bf40      	sev
    __WFE();
 8004152:	bf20      	wfe
    __WFE();
 8004154:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_PWR_EnterSTOPMode+0x6c>)
 800415c:	2104      	movs	r1, #4
 800415e:	438a      	bics	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40007000 	.word	0x40007000
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d11f      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	0013      	movs	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4912      	ldr	r1, [pc, #72]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7fb ffc8 	bl	800013c <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b2:	e008      	b.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b01      	subs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e009      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	401a      	ands	r2, r3
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d0ed      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40007000 	.word	0x40007000
 80041e8:	fffff9ff 	.word	0xfffff9ff
 80041ec:	20000020 	.word	0x20000020
 80041f0:	000f4240 	.word	0x000f4240

080041f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	23e0      	movs	r3, #224	; 0xe0
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4013      	ands	r3, r2
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e2fe      	b.n	800481c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d100      	bne.n	800422a <HAL_RCC_OscConfig+0x1e>
 8004228:	e07c      	b.n	8004324 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422a:	4bc3      	ldr	r3, [pc, #780]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2238      	movs	r2, #56	; 0x38
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004234:	4bc0      	ldr	r3, [pc, #768]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2203      	movs	r2, #3
 800423a:	4013      	ands	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b10      	cmp	r3, #16
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x3e>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d002      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4bb9      	ldr	r3, [pc, #740]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	029b      	lsls	r3, r3, #10
 8004258:	4013      	ands	r3, r2
 800425a:	d062      	beq.n	8004322 <HAL_RCC_OscConfig+0x116>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d15e      	bne.n	8004322 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e2d9      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	025b      	lsls	r3, r3, #9
 8004270:	429a      	cmp	r2, r3
 8004272:	d107      	bne.n	8004284 <HAL_RCC_OscConfig+0x78>
 8004274:	4bb0      	ldr	r3, [pc, #704]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4baf      	ldr	r3, [pc, #700]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	0249      	lsls	r1, r1, #9
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e020      	b.n	80042c6 <HAL_RCC_OscConfig+0xba>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	23a0      	movs	r3, #160	; 0xa0
 800428a:	02db      	lsls	r3, r3, #11
 800428c:	429a      	cmp	r2, r3
 800428e:	d10e      	bne.n	80042ae <HAL_RCC_OscConfig+0xa2>
 8004290:	4ba9      	ldr	r3, [pc, #676]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4ba8      	ldr	r3, [pc, #672]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	02c9      	lsls	r1, r1, #11
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	4ba6      	ldr	r3, [pc, #664]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4ba5      	ldr	r3, [pc, #660]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	0249      	lsls	r1, r1, #9
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e00b      	b.n	80042c6 <HAL_RCC_OscConfig+0xba>
 80042ae:	4ba2      	ldr	r3, [pc, #648]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042b4:	49a1      	ldr	r1, [pc, #644]	; (800453c <HAL_RCC_OscConfig+0x330>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	4b9f      	ldr	r3, [pc, #636]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b9e      	ldr	r3, [pc, #632]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042c0:	499f      	ldr	r1, [pc, #636]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d014      	beq.n	80042f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7ff fb39 	bl	8003944 <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7ff fb34 	bl	8003944 <HAL_GetTick>
 80042dc:	0002      	movs	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e298      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	4b93      	ldr	r3, [pc, #588]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	4013      	ands	r3, r2
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xcc>
 80042f6:	e015      	b.n	8004324 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7ff fb24 	bl	8003944 <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004302:	f7ff fb1f 	bl	8003944 <HAL_GetTick>
 8004306:	0002      	movs	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	; 0x64
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e283      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004314:	4b88      	ldr	r3, [pc, #544]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	4013      	ands	r3, r2
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0xf6>
 8004320:	e000      	b.n	8004324 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004322:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2202      	movs	r2, #2
 800432a:	4013      	ands	r3, r2
 800432c:	d100      	bne.n	8004330 <HAL_RCC_OscConfig+0x124>
 800432e:	e099      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004330:	4b81      	ldr	r3, [pc, #516]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2238      	movs	r2, #56	; 0x38
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433a:	4b7f      	ldr	r3, [pc, #508]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2203      	movs	r2, #3
 8004340:	4013      	ands	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b10      	cmp	r3, #16
 8004348:	d102      	bne.n	8004350 <HAL_RCC_OscConfig+0x144>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d002      	beq.n	8004356 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d135      	bne.n	80043c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004356:	4b78      	ldr	r3, [pc, #480]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4013      	ands	r3, r2
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x162>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e256      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b72      	ldr	r3, [pc, #456]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a74      	ldr	r2, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004374:	4013      	ands	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	4b6e      	ldr	r3, [pc, #440]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d112      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800438a:	4b6b      	ldr	r3, [pc, #428]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6e      	ldr	r2, [pc, #440]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 8004390:	4013      	ands	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	4b67      	ldr	r3, [pc, #412]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800439e:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	0adb      	lsrs	r3, r3, #11
 80043a4:	2207      	movs	r2, #7
 80043a6:	4013      	ands	r3, r2
 80043a8:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80043aa:	40da      	lsrs	r2, r3
 80043ac:	4b68      	ldr	r3, [pc, #416]	; (8004550 <HAL_RCC_OscConfig+0x344>)
 80043ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043b0:	4b68      	ldr	r3, [pc, #416]	; (8004554 <HAL_RCC_OscConfig+0x348>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff fa69 	bl	800388c <HAL_InitTick>
 80043ba:	1e03      	subs	r3, r0, #0
 80043bc:	d051      	beq.n	8004462 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e22c      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d030      	beq.n	800442c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043ca:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	4b57      	ldr	r3, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043de:	4b56      	ldr	r3, [pc, #344]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b55      	ldr	r3, [pc, #340]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	0049      	lsls	r1, r1, #1
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7ff faaa 	bl	8003944 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f6:	f7ff faa5 	bl	8003944 <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e209      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4013      	ands	r3, r2
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b48      	ldr	r3, [pc, #288]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a4a      	ldr	r2, [pc, #296]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	021a      	lsls	r2, r3, #8
 8004424:	4b44      	ldr	r3, [pc, #272]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	e01b      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004432:	4949      	ldr	r1, [pc, #292]	; (8004558 <HAL_RCC_OscConfig+0x34c>)
 8004434:	400a      	ands	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7ff fa84 	bl	8003944 <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7ff fa7f 	bl	8003944 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1e3      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4013      	ands	r3, r2
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x236>
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004462:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2208      	movs	r2, #8
 800446a:	4013      	ands	r3, r2
 800446c:	d047      	beq.n	80044fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800446e:	4b32      	ldr	r3, [pc, #200]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2238      	movs	r2, #56	; 0x38
 8004474:	4013      	ands	r3, r2
 8004476:	2b18      	cmp	r3, #24
 8004478:	d10a      	bne.n	8004490 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	2202      	movs	r2, #2
 8004480:	4013      	ands	r3, r2
 8004482:	d03c      	beq.n	80044fe <HAL_RCC_OscConfig+0x2f2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d138      	bne.n	80044fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e1c5      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d019      	beq.n	80044cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800449a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 800449e:	2101      	movs	r1, #1
 80044a0:	430a      	orrs	r2, r1
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7ff fa4e 	bl	8003944 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7ff fa49 	bl	8003944 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1ad      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d0f1      	beq.n	80044ae <HAL_RCC_OscConfig+0x2a2>
 80044ca:	e018      	b.n	80044fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80044ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80044d2:	2101      	movs	r1, #1
 80044d4:	438a      	bics	r2, r1
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7ff fa34 	bl	8003944 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e2:	f7ff fa2f 	bl	8003944 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e193      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	2202      	movs	r2, #2
 80044fa:	4013      	ands	r3, r2
 80044fc:	d1f1      	bne.n	80044e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2204      	movs	r2, #4
 8004504:	4013      	ands	r3, r2
 8004506:	d100      	bne.n	800450a <HAL_RCC_OscConfig+0x2fe>
 8004508:	e0c6      	b.n	8004698 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	231f      	movs	r3, #31
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2238      	movs	r2, #56	; 0x38
 8004518:	4013      	ands	r3, r2
 800451a:	2b20      	cmp	r3, #32
 800451c:	d11e      	bne.n	800455c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x32c>)
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	d100      	bne.n	800452a <HAL_RCC_OscConfig+0x31e>
 8004528:	e0b6      	b.n	8004698 <HAL_RCC_OscConfig+0x48c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d000      	beq.n	8004534 <HAL_RCC_OscConfig+0x328>
 8004532:	e0b1      	b.n	8004698 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e171      	b.n	800481c <HAL_RCC_OscConfig+0x610>
 8004538:	40021000 	.word	0x40021000
 800453c:	fffeffff 	.word	0xfffeffff
 8004540:	fffbffff 	.word	0xfffbffff
 8004544:	ffff80ff 	.word	0xffff80ff
 8004548:	ffffc7ff 	.word	0xffffc7ff
 800454c:	00f42400 	.word	0x00f42400
 8004550:	20000020 	.word	0x20000020
 8004554:	20000024 	.word	0x20000024
 8004558:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800455c:	4bb1      	ldr	r3, [pc, #708]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	055b      	lsls	r3, r3, #21
 8004564:	4013      	ands	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_RCC_OscConfig+0x360>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x362>
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d011      	beq.n	8004596 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	4bac      	ldr	r3, [pc, #688]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004576:	4bab      	ldr	r3, [pc, #684]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004578:	2180      	movs	r1, #128	; 0x80
 800457a:	0549      	lsls	r1, r1, #21
 800457c:	430a      	orrs	r2, r1
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004580:	4ba8      	ldr	r3, [pc, #672]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	055b      	lsls	r3, r3, #21
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800458e:	231f      	movs	r3, #31
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004596:	4ba4      	ldr	r3, [pc, #656]	; (8004828 <HAL_RCC_OscConfig+0x61c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4013      	ands	r3, r2
 80045a0:	d11a      	bne.n	80045d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a2:	4ba1      	ldr	r3, [pc, #644]	; (8004828 <HAL_RCC_OscConfig+0x61c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4ba0      	ldr	r3, [pc, #640]	; (8004828 <HAL_RCC_OscConfig+0x61c>)
 80045a8:	2180      	movs	r1, #128	; 0x80
 80045aa:	0049      	lsls	r1, r1, #1
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045b0:	f7ff f9c8 	bl	8003944 <HAL_GetTick>
 80045b4:	0003      	movs	r3, r0
 80045b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7ff f9c3 	bl	8003944 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e127      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045cc:	4b96      	ldr	r3, [pc, #600]	; (8004828 <HAL_RCC_OscConfig+0x61c>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x3e2>
 80045e0:	4b90      	ldr	r3, [pc, #576]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80045e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e4:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	430a      	orrs	r2, r1
 80045ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ec:	e01c      	b.n	8004628 <HAL_RCC_OscConfig+0x41c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x404>
 80045f6:	4b8b      	ldr	r3, [pc, #556]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80045f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fa:	4b8a      	ldr	r3, [pc, #552]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80045fc:	2104      	movs	r1, #4
 80045fe:	430a      	orrs	r2, r1
 8004600:	65da      	str	r2, [r3, #92]	; 0x5c
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004604:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004606:	4b87      	ldr	r3, [pc, #540]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004608:	2101      	movs	r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	65da      	str	r2, [r3, #92]	; 0x5c
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x41c>
 8004610:	4b84      	ldr	r3, [pc, #528]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004614:	4b83      	ldr	r3, [pc, #524]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004616:	2101      	movs	r1, #1
 8004618:	438a      	bics	r2, r1
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800461e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004620:	4b80      	ldr	r3, [pc, #512]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004622:	2104      	movs	r1, #4
 8004624:	438a      	bics	r2, r1
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d014      	beq.n	800465a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7ff f988 	bl	8003944 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004638:	e009      	b.n	800464e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7ff f983 	bl	8003944 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4a79      	ldr	r2, [pc, #484]	; (800482c <HAL_RCC_OscConfig+0x620>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0e6      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464e:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2202      	movs	r2, #2
 8004654:	4013      	ands	r3, r2
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x42e>
 8004658:	e013      	b.n	8004682 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7ff f973 	bl	8003944 <HAL_GetTick>
 800465e:	0003      	movs	r3, r0
 8004660:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004662:	e009      	b.n	8004678 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7ff f96e 	bl	8003944 <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	4a6f      	ldr	r2, [pc, #444]	; (800482c <HAL_RCC_OscConfig+0x620>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0d1      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004678:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	2202      	movs	r2, #2
 800467e:	4013      	ands	r3, r2
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004682:	231f      	movs	r3, #31
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	4b64      	ldr	r3, [pc, #400]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004692:	4967      	ldr	r1, [pc, #412]	; (8004830 <HAL_RCC_OscConfig+0x624>)
 8004694:	400a      	ands	r2, r1
 8004696:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d100      	bne.n	80046a2 <HAL_RCC_OscConfig+0x496>
 80046a0:	e0bb      	b.n	800481a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a2:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2238      	movs	r2, #56	; 0x38
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d100      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4a4>
 80046ae:	e07b      	b.n	80047a8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d156      	bne.n	8004766 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b8:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046be:	495d      	ldr	r1, [pc, #372]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7ff f93e 	bl	8003944 <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7ff f939 	bl	8003944 <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e09d      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e0:	4b50      	ldr	r3, [pc, #320]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	049b      	lsls	r3, r3, #18
 80046e8:	4013      	ands	r3, r2
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ec:	4b4d      	ldr	r3, [pc, #308]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a51      	ldr	r2, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x62c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	431a      	orrs	r2, r3
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800471c:	430a      	orrs	r2, r1
 800471e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004720:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	0449      	lsls	r1, r1, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800472e:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	4b3c      	ldr	r3, [pc, #240]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	0549      	lsls	r1, r1, #21
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7ff f902 	bl	8003944 <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004746:	f7ff f8fd 	bl	8003944 <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e061      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004758:	4b32      	ldr	r3, [pc, #200]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	049b      	lsls	r3, r3, #18
 8004760:	4013      	ands	r3, r2
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x53a>
 8004764:	e059      	b.n	800481a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800476c:	4931      	ldr	r1, [pc, #196]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7ff f8e7 	bl	8003944 <HAL_GetTick>
 8004776:	0003      	movs	r3, r0
 8004778:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7ff f8e2 	bl	8003944 <HAL_GetTick>
 8004780:	0002      	movs	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e046      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	049b      	lsls	r3, r3, #18
 8004796:	4013      	ands	r3, r2
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800479a:	4b22      	ldr	r3, [pc, #136]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	4b21      	ldr	r3, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80047a0:	4926      	ldr	r1, [pc, #152]	; (800483c <HAL_RCC_OscConfig+0x630>)
 80047a2:	400a      	ands	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e038      	b.n	800481a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e033      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2203      	movs	r2, #3
 80047be:	401a      	ands	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d126      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2270      	movs	r2, #112	; 0x70
 80047cc:	401a      	ands	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11f      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	23fe      	movs	r3, #254	; 0xfe
 80047da:	01db      	lsls	r3, r3, #7
 80047dc:	401a      	ands	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d116      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	23f8      	movs	r3, #248	; 0xf8
 80047ec:	039b      	lsls	r3, r3, #14
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d10e      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	23e0      	movs	r3, #224	; 0xe0
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	401a      	ands	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0f5b      	lsrs	r3, r3, #29
 800480c:	075a      	lsls	r2, r3, #29
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b008      	add	sp, #32
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	00001388 	.word	0x00001388
 8004830:	efffffff 	.word	0xefffffff
 8004834:	feffffff 	.word	0xfeffffff
 8004838:	11c1808c 	.word	0x11c1808c
 800483c:	eefefffc 	.word	0xeefefffc

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0e9      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2207      	movs	r2, #7
 800485a:	4013      	ands	r3, r2
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d91e      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2207      	movs	r2, #7
 8004868:	4393      	bics	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	4b70      	ldr	r3, [pc, #448]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004874:	f7ff f866 	bl	8003944 <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800487c:	e009      	b.n	8004892 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487e:	f7ff f861 	bl	8003944 <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	4a6a      	ldr	r2, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0ca      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004892:	4b67      	ldr	r3, [pc, #412]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2207      	movs	r2, #7
 8004898:	4013      	ands	r3, r2
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d015      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d006      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048b4:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	21e0      	movs	r1, #224	; 0xe0
 80048bc:	01c9      	lsls	r1, r1, #7
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c2:	4b5d      	ldr	r3, [pc, #372]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a5d      	ldr	r2, [pc, #372]	; (8004a3c <HAL_RCC_ClockConfig+0x1fc>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d057      	beq.n	8004990 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e8:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	4013      	ands	r3, r2
 80048f2:	d12b      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e097      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004900:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	049b      	lsls	r3, r3, #18
 8004908:	4013      	ands	r3, r2
 800490a:	d11f      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e08b      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4013      	ands	r3, r2
 8004922:	d113      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e07f      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d106      	bne.n	800493e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d108      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e074      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493e:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06d      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494c:	4b3a      	ldr	r3, [pc, #232]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2207      	movs	r2, #7
 8004952:	4393      	bics	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fe fff0 	bl	8003944 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004968:	e009      	b.n	800497e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496a:	f7fe ffeb 	bl	8003944 <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e054      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2238      	movs	r2, #56	; 0x38
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	429a      	cmp	r2, r3
 800498e:	d1ec      	bne.n	800496a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d21e      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2207      	movs	r2, #7
 80049a4:	4393      	bics	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b0:	f7fe ffc8 	bl	8003944 <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ba:	f7fe ffc3 	bl	8003944 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02c      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_RCC_ClockConfig+0x200>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049fa:	f000 f829 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 80049fe:	0001      	movs	r1, r0
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	220f      	movs	r2, #15
 8004a08:	401a      	ands	r2, r3
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x204>)
 8004a0c:	0092      	lsls	r2, r2, #2
 8004a0e:	58d3      	ldr	r3, [r2, r3]
 8004a10:	221f      	movs	r2, #31
 8004a12:	4013      	ands	r3, r2
 8004a14:	000a      	movs	r2, r1
 8004a16:	40da      	lsrs	r2, r3
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x208>)
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x20c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fe ff33 	bl	800388c <HAL_InitTick>
 8004a26:	0003      	movs	r3, r0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40022000 	.word	0x40022000
 8004a34:	00001388 	.word	0x00001388
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	fffff0ff 	.word	0xfffff0ff
 8004a40:	ffff8fff 	.word	0xffff8fff
 8004a44:	080146e8 	.word	0x080146e8
 8004a48:	20000020 	.word	0x20000020
 8004a4c:	20000024 	.word	0x20000024

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a56:	4b3c      	ldr	r3, [pc, #240]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2238      	movs	r2, #56	; 0x38
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d10f      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0adb      	lsrs	r3, r3, #11
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	0013      	movs	r3, r2
 8004a70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	4835      	ldr	r0, [pc, #212]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a76:	f7fb fb61 	bl	800013c <__udivsi3>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e05d      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2238      	movs	r2, #56	; 0x38
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e054      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2238      	movs	r2, #56	; 0x38
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d138      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa8:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	2207      	movs	r2, #7
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d10d      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4824      	ldr	r0, [pc, #144]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ac0:	f7fb fb3c 	bl	800013c <__udivsi3>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	227f      	movs	r2, #127	; 0x7f
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	434b      	muls	r3, r1
 8004ad4:	617b      	str	r3, [r7, #20]
        break;
 8004ad6:	e00d      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	481c      	ldr	r0, [pc, #112]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004adc:	f7fb fb2e 	bl	800013c <__udivsi3>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	227f      	movs	r2, #127	; 0x7f
 8004aec:	4013      	ands	r3, r2
 8004aee:	434b      	muls	r3, r1
 8004af0:	617b      	str	r3, [r7, #20]
        break;
 8004af2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0f5b      	lsrs	r3, r3, #29
 8004afa:	2207      	movs	r2, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	3301      	adds	r3, #1
 8004b00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	6978      	ldr	r0, [r7, #20]
 8004b06:	f7fb fb19 	bl	800013c <__udivsi3>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e015      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2238      	movs	r2, #56	; 0x38
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d103      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2238      	movs	r2, #56	; 0x38
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b18      	cmp	r3, #24
 8004b2e:	d103      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b30:	23fa      	movs	r3, #250	; 0xfa
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e001      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b3c:	693b      	ldr	r3, [r7, #16]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b006      	add	sp, #24
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b02      	ldr	r3, [pc, #8]	; (8004b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	20000020 	.word	0x20000020

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b6c:	f7ff fff2 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b70:	0004      	movs	r4, r0
 8004b72:	f7ff fb3f 	bl	80041f4 <LL_RCC_GetAPB1Prescaler>
 8004b76:	0003      	movs	r3, r0
 8004b78:	0b1a      	lsrs	r2, r3, #12
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b7c:	0092      	lsls	r2, r2, #2
 8004b7e:	58d3      	ldr	r3, [r2, r3]
 8004b80:	221f      	movs	r2, #31
 8004b82:	4013      	ands	r3, r2
 8004b84:	40dc      	lsrs	r4, r3
 8004b86:	0023      	movs	r3, r4
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	08014728 	.word	0x08014728

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b9c:	2313      	movs	r3, #19
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba4:	2312      	movs	r3, #18
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d100      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bb8:	e0a3      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2011      	movs	r0, #17
 8004bbc:	183b      	adds	r3, r7, r0
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc2:	4bc3      	ldr	r3, [pc, #780]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	055b      	lsls	r3, r3, #21
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d110      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4bc0      	ldr	r3, [pc, #768]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd2:	4bbf      	ldr	r3, [pc, #764]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	0549      	lsls	r1, r1, #21
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bdc:	4bbc      	ldr	r3, [pc, #752]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	055b      	lsls	r3, r3, #21
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	183b      	adds	r3, r7, r0
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf0:	4bb8      	ldr	r3, [pc, #736]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4bb7      	ldr	r3, [pc, #732]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0049      	lsls	r1, r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfe:	f7fe fea1 	bl	8003944 <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c06:	e00b      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c08:	f7fe fe9c 	bl	8003944 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d904      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c16:	2313      	movs	r3, #19
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	701a      	strb	r2, [r3, #0]
        break;
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c20:	4bac      	ldr	r3, [pc, #688]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d0ed      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c2c:	2313      	movs	r3, #19
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d154      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c36:	4ba6      	ldr	r3, [pc, #664]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c3a:	23c0      	movs	r3, #192	; 0xc0
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d019      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d014      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c52:	4b9f      	ldr	r3, [pc, #636]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	4aa0      	ldr	r2, [pc, #640]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c60:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	0249      	lsls	r1, r1, #9
 8004c66:	430a      	orrs	r2, r1
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6a:	4b99      	ldr	r3, [pc, #612]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c6e:	4b98      	ldr	r3, [pc, #608]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c70:	499a      	ldr	r1, [pc, #616]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c76:	4b96      	ldr	r3, [pc, #600]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	d016      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe fe5e 	bl	8003944 <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8c:	e00c      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fe fe59 	bl	8003944 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a91      	ldr	r2, [pc, #580]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d904      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c9e:	2313      	movs	r3, #19
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	701a      	strb	r2, [r3, #0]
            break;
 8004ca6:	e004      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca8:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	2202      	movs	r2, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d0ed      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cb2:	2313      	movs	r3, #19
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cbc:	4b84      	ldr	r3, [pc, #528]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	4a85      	ldr	r2, [pc, #532]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cd0:	e00c      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cd2:	2312      	movs	r3, #18
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2213      	movs	r2, #19
 8004cd8:	18ba      	adds	r2, r7, r2
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e005      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	2312      	movs	r3, #18
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	2213      	movs	r2, #19
 8004ce6:	18ba      	adds	r2, r7, r2
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cec:	2311      	movs	r3, #17
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf6:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfa:	4b75      	ldr	r3, [pc, #468]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cfc:	4979      	ldr	r1, [pc, #484]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004cfe:	400a      	ands	r2, r1
 8004d00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d0c:	4b70      	ldr	r3, [pc, #448]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	2203      	movs	r2, #3
 8004d12:	4393      	bics	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d2a:	4b69      	ldr	r3, [pc, #420]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	220c      	movs	r2, #12
 8004d30:	4393      	bics	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	4013      	ands	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	4a66      	ldr	r2, [pc, #408]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4013      	ands	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d88:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	4a58      	ldr	r2, [pc, #352]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	4b4e      	ldr	r3, [pc, #312]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2220      	movs	r2, #32
 8004da2:	4013      	ands	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004da6:	4b4a      	ldr	r3, [pc, #296]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	4a52      	ldr	r2, [pc, #328]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004db6:	430a      	orrs	r2, r1
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	01db      	lsls	r3, r3, #7
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d015      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	0899      	lsrs	r1, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d106      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004de4:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	0249      	lsls	r1, r1, #9
 8004dee:	430a      	orrs	r2, r1
 8004df0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	4393      	bics	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0c:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	039b      	lsls	r3, r3, #14
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4a35      	ldr	r2, [pc, #212]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	03db      	lsls	r3, r3, #15
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e44:	2180      	movs	r1, #128	; 0x80
 8004e46:	0449      	lsls	r1, r1, #17
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	03db      	lsls	r3, r3, #15
 8004e54:	4013      	ands	r3, r2
 8004e56:	d016      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e58:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	4a27      	ldr	r2, [pc, #156]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	045b      	lsls	r3, r3, #17
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d106      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	0449      	lsls	r1, r1, #17
 8004e82:	430a      	orrs	r2, r1
 8004e84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d016      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	01db      	lsls	r3, r3, #7
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0249      	lsls	r1, r1, #9
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ec0:	2312      	movs	r3, #18
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	781b      	ldrb	r3, [r3, #0]
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b006      	add	sp, #24
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	fffffcff 	.word	0xfffffcff
 8004edc:	fffeffff 	.word	0xfffeffff
 8004ee0:	00001388 	.word	0x00001388
 8004ee4:	efffffff 	.word	0xefffffff
 8004ee8:	fffff3ff 	.word	0xfffff3ff
 8004eec:	fff3ffff 	.word	0xfff3ffff
 8004ef0:	ffcfffff 	.word	0xffcfffff
 8004ef4:	ffffcfff 	.word	0xffffcfff
 8004ef8:	ffbfffff 	.word	0xffbfffff
 8004efc:	feffffff 	.word	0xfeffffff
 8004f00:	ffff3fff 	.word	0xffff3fff

08004f04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f04:	b5b0      	push	{r4, r5, r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d100      	bne.n	8004f1c <HAL_RTC_Init+0x18>
 8004f1a:	e08c      	b.n	8005036 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2229      	movs	r2, #41	; 0x29
 8004f20:	5c9b      	ldrb	r3, [r3, r2]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2228      	movs	r2, #40	; 0x28
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2288      	movs	r2, #136	; 0x88
 8004f34:	0212      	lsls	r2, r2, #8
 8004f36:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7fe f982 	bl	8003244 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2229      	movs	r2, #41	; 0x29
 8004f44:	2102      	movs	r1, #2
 8004f46:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d062      	beq.n	800501c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	22ca      	movs	r2, #202	; 0xca
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2253      	movs	r2, #83	; 0x53
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f66:	250f      	movs	r5, #15
 8004f68:	197c      	adds	r4, r7, r5
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 fb9c 	bl	80056aa <RTC_EnterInitMode>
 8004f72:	0003      	movs	r3, r0
 8004f74:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004f76:	0028      	movs	r0, r5
 8004f78:	183b      	adds	r3, r7, r0
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d12c      	bne.n	8004fda <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	492e      	ldr	r1, [pc, #184]	; (8005044 <HAL_RTC_Init+0x140>)
 8004f8c:	400a      	ands	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6912      	ldr	r2, [r2, #16]
 8004fb6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6919      	ldr	r1, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	041a      	lsls	r2, r3, #16
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004fcc:	183c      	adds	r4, r7, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fbad 	bl	8005730 <RTC_ExitInitMode>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004fda:	230f      	movs	r3, #15
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	00d2      	lsls	r2, r2, #3
 8004ff0:	08d2      	lsrs	r2, r2, #3
 8004ff2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
 800501a:	e003      	b.n	8005024 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800501c:	230f      	movs	r3, #15
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005024:	230f      	movs	r3, #15
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2229      	movs	r2, #41	; 0x29
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005036:	230f      	movs	r3, #15
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	781b      	ldrb	r3, [r3, #0]
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b004      	add	sp, #16
 8005042:	bdb0      	pop	{r4, r5, r7, pc}
 8005044:	fb8fffbf 	.word	0xfb8fffbf

08005048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2228      	movs	r2, #40	; 0x28
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_RTC_SetTime+0x1a>
 800505e:	2302      	movs	r3, #2
 8005060:	e092      	b.n	8005188 <HAL_RTC_SetTime+0x140>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2228      	movs	r2, #40	; 0x28
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2229      	movs	r2, #41	; 0x29
 800506e:	2102      	movs	r1, #2
 8005070:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	22ca      	movs	r2, #202	; 0xca
 8005078:	625a      	str	r2, [r3, #36]	; 0x24
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2253      	movs	r2, #83	; 0x53
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005082:	2513      	movs	r5, #19
 8005084:	197c      	adds	r4, r7, r5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fb0e 	bl	80056aa <RTC_EnterInitMode>
 800508e:	0003      	movs	r3, r0
 8005090:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005092:	197b      	adds	r3, r7, r5
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d162      	bne.n	8005160 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d125      	bne.n	80050ec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2240      	movs	r2, #64	; 0x40
 80050a8:	4013      	ands	r3, r2
 80050aa:	d102      	bne.n	80050b2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 fb7e 	bl	80057b8 <RTC_ByteToBcd2>
 80050bc:	0003      	movs	r3, r0
 80050be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 fb77 	bl	80057b8 <RTC_ByteToBcd2>
 80050ca:	0003      	movs	r3, r0
 80050cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	789b      	ldrb	r3, [r3, #2]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fb6f 	bl	80057b8 <RTC_ByteToBcd2>
 80050da:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050dc:	0022      	movs	r2, r4
 80050de:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	e017      	b.n	800511c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	4013      	ands	r3, r2
 80050f6:	d102      	bne.n	80050fe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800510a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005110:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	78db      	ldrb	r3, [r3, #3]
 8005116:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	491b      	ldr	r1, [pc, #108]	; (8005190 <HAL_RTC_SetTime+0x148>)
 8005124:	400a      	ands	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4918      	ldr	r1, [pc, #96]	; (8005194 <HAL_RTC_SetTime+0x14c>)
 8005134:	400a      	ands	r2, r1
 8005136:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005150:	2313      	movs	r3, #19
 8005152:	18fc      	adds	r4, r7, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 faea 	bl	8005730 <RTC_ExitInitMode>
 800515c:	0003      	movs	r3, r0
 800515e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005168:	2313      	movs	r3, #19
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2229      	movs	r2, #41	; 0x29
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2228      	movs	r2, #40	; 0x28
 800517e:	2100      	movs	r1, #0
 8005180:	5499      	strb	r1, [r3, r2]

  return status;
 8005182:	2313      	movs	r3, #19
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	781b      	ldrb	r3, [r3, #0]
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b006      	add	sp, #24
 800518e:	bdb0      	pop	{r4, r5, r7, pc}
 8005190:	007f7f7f 	.word	0x007f7f7f
 8005194:	fffbffff 	.word	0xfffbffff

08005198 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	045b      	lsls	r3, r3, #17
 80051b6:	0c5a      	lsrs	r2, r3, #17
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a22      	ldr	r2, [pc, #136]	; (800524c <HAL_RTC_GetTime+0xb4>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	223f      	movs	r2, #63	; 0x3f
 80051d0:	4013      	ands	r3, r2
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	227f      	movs	r2, #127	; 0x7f
 80051e0:	4013      	ands	r3, r2
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	227f      	movs	r2, #127	; 0x7f
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	0d9b      	lsrs	r3, r3, #22
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2201      	movs	r2, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	b2da      	uxtb	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d11a      	bne.n	8005242 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	0018      	movs	r0, r3
 8005212:	f000 faf9 	bl	8005808 <RTC_Bcd2ToByte>
 8005216:	0003      	movs	r3, r0
 8005218:	001a      	movs	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	0018      	movs	r0, r3
 8005224:	f000 faf0 	bl	8005808 <RTC_Bcd2ToByte>
 8005228:	0003      	movs	r3, r0
 800522a:	001a      	movs	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	789b      	ldrb	r3, [r3, #2]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 fae7 	bl	8005808 <RTC_Bcd2ToByte>
 800523a:	0003      	movs	r3, r0
 800523c:	001a      	movs	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b006      	add	sp, #24
 800524a:	bd80      	pop	{r7, pc}
 800524c:	007f7f7f 	.word	0x007f7f7f

08005250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2228      	movs	r2, #40	; 0x28
 8005260:	5c9b      	ldrb	r3, [r3, r2]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_RTC_SetDate+0x1a>
 8005266:	2302      	movs	r3, #2
 8005268:	e07e      	b.n	8005368 <HAL_RTC_SetDate+0x118>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2228      	movs	r2, #40	; 0x28
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2229      	movs	r2, #41	; 0x29
 8005276:	2102      	movs	r1, #2
 8005278:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10e      	bne.n	800529e <HAL_RTC_SetDate+0x4e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	001a      	movs	r2, r3
 8005286:	2310      	movs	r3, #16
 8005288:	4013      	ands	r3, r2
 800528a:	d008      	beq.n	800529e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2210      	movs	r2, #16
 8005292:	4393      	bics	r3, r2
 8005294:	b2db      	uxtb	r3, r3
 8005296:	330a      	adds	r3, #10
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11c      	bne.n	80052de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	0018      	movs	r0, r3
 80052aa:	f000 fa85 	bl	80057b8 <RTC_ByteToBcd2>
 80052ae:	0003      	movs	r3, r0
 80052b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 fa7e 	bl	80057b8 <RTC_ByteToBcd2>
 80052bc:	0003      	movs	r3, r0
 80052be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 fa76 	bl	80057b8 <RTC_ByteToBcd2>
 80052cc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052ce:	0022      	movs	r2, r4
 80052d0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e00e      	b.n	80052fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	22ca      	movs	r2, #202	; 0xca
 8005302:	625a      	str	r2, [r3, #36]	; 0x24
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2253      	movs	r2, #83	; 0x53
 800530a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800530c:	2513      	movs	r5, #19
 800530e:	197c      	adds	r4, r7, r5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	0018      	movs	r0, r3
 8005314:	f000 f9c9 	bl	80056aa <RTC_EnterInitMode>
 8005318:	0003      	movs	r3, r0
 800531a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800531c:	0028      	movs	r0, r5
 800531e:	183b      	adds	r3, r7, r0
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4910      	ldr	r1, [pc, #64]	; (8005370 <HAL_RTC_SetDate+0x120>)
 800532e:	400a      	ands	r2, r1
 8005330:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005332:	183c      	adds	r4, r7, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	0018      	movs	r0, r3
 8005338:	f000 f9fa 	bl	8005730 <RTC_ExitInitMode>
 800533c:	0003      	movs	r3, r0
 800533e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	22ff      	movs	r2, #255	; 0xff
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005348:	2313      	movs	r3, #19
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2229      	movs	r2, #41	; 0x29
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	2100      	movs	r1, #0
 8005360:	5499      	strb	r1, [r3, r2]

  return status;
 8005362:	2313      	movs	r3, #19
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	781b      	ldrb	r3, [r3, #0]
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b006      	add	sp, #24
 800536e:	bdb0      	pop	{r4, r5, r7, pc}
 8005370:	00ffff3f 	.word	0x00ffff3f

08005374 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_RTC_GetDate+0x98>)
 8005388:	4013      	ands	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	b2db      	uxtb	r3, r3
 800539c:	221f      	movs	r2, #31
 800539e:	4013      	ands	r3, r2
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	223f      	movs	r2, #63	; 0x3f
 80053ac:	4013      	ands	r3, r2
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	0b5b      	lsrs	r3, r3, #13
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2207      	movs	r2, #7
 80053bc:	4013      	ands	r3, r2
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11a      	bne.n	8005400 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	78db      	ldrb	r3, [r3, #3]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 fa1a 	bl	8005808 <RTC_Bcd2ToByte>
 80053d4:	0003      	movs	r3, r0
 80053d6:	001a      	movs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fa11 	bl	8005808 <RTC_Bcd2ToByte>
 80053e6:	0003      	movs	r3, r0
 80053e8:	001a      	movs	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 fa08 	bl	8005808 <RTC_Bcd2ToByte>
 80053f8:	0003      	movs	r3, r0
 80053fa:	001a      	movs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b006      	add	sp, #24
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	00ffff3f 	.word	0x00ffff3f

08005410 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2228      	movs	r2, #40	; 0x28
 8005420:	5c9b      	ldrb	r3, [r3, r2]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_RTC_SetAlarm+0x1a>
 8005426:	2302      	movs	r3, #2
 8005428:	e10c      	b.n	8005644 <HAL_RTC_SetAlarm+0x234>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2228      	movs	r2, #40	; 0x28
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2229      	movs	r2, #41	; 0x29
 8005436:	2102      	movs	r1, #2
 8005438:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d136      	bne.n	80054ae <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	4013      	ands	r3, r2
 800544a:	d102      	bne.n	8005452 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0018      	movs	r0, r3
 8005458:	f000 f9ae 	bl	80057b8 <RTC_ByteToBcd2>
 800545c:	0003      	movs	r3, r0
 800545e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f9a7 	bl	80057b8 <RTC_ByteToBcd2>
 800546a:	0003      	movs	r3, r0
 800546c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800546e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	789b      	ldrb	r3, [r3, #2]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 f99f 	bl	80057b8 <RTC_ByteToBcd2>
 800547a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800547c:	0022      	movs	r2, r4
 800547e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005486:	431a      	orrs	r2, r3
 8005488:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2220      	movs	r2, #32
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 f991 	bl	80057b8 <RTC_ByteToBcd2>
 8005496:	0003      	movs	r3, r0
 8005498:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800549a:	0022      	movs	r2, r4
 800549c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e022      	b.n	80054f4 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2240      	movs	r2, #64	; 0x40
 80054b6:	4013      	ands	r3, r2
 80054b8:	d102      	bne.n	80054c0 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054cc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2120      	movs	r1, #32
 80054e0:	5c5b      	ldrb	r3, [r3, r1]
 80054e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	22ca      	movs	r2, #202	; 0xca
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2253      	movs	r2, #83	; 0x53
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	429a      	cmp	r2, r3
 800551a:	d143      	bne.n	80055a4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4949      	ldr	r1, [pc, #292]	; (800564c <HAL_RTC_SetAlarm+0x23c>)
 8005528:	400a      	ands	r2, r1
 800552a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4946      	ldr	r1, [pc, #280]	; (8005650 <HAL_RTC_SetAlarm+0x240>)
 8005538:	400a      	ands	r2, r1
 800553a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800553c:	f7fe fa02 	bl	8003944 <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005544:	e016      	b.n	8005574 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005546:	f7fe f9fd 	bl	8003944 <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	23fa      	movs	r3, #250	; 0xfa
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	429a      	cmp	r2, r3
 8005556:	d90d      	bls.n	8005574 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	22ff      	movs	r2, #255	; 0xff
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2229      	movs	r2, #41	; 0x29
 8005564:	2103      	movs	r1, #3
 8005566:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2228      	movs	r2, #40	; 0x28
 800556c:	2100      	movs	r1, #0
 800556e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e067      	b.n	8005644 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	4013      	ands	r3, r2
 800557e:	d0e2      	beq.n	8005546 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2180      	movs	r1, #128	; 0x80
 800559c:	0049      	lsls	r1, r1, #1
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	e042      	b.n	800562a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4929      	ldr	r1, [pc, #164]	; (8005654 <HAL_RTC_SetAlarm+0x244>)
 80055b0:	400a      	ands	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4926      	ldr	r1, [pc, #152]	; (8005658 <HAL_RTC_SetAlarm+0x248>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80055c4:	f7fe f9be 	bl	8003944 <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80055cc:	e016      	b.n	80055fc <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055ce:	f7fe f9b9 	bl	8003944 <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	23fa      	movs	r3, #250	; 0xfa
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	429a      	cmp	r2, r3
 80055de:	d90d      	bls.n	80055fc <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2229      	movs	r2, #41	; 0x29
 80055ec:	2103      	movs	r1, #3
 80055ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e023      	b.n	8005644 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2202      	movs	r2, #2
 8005604:	4013      	ands	r3, r2
 8005606:	d0e2      	beq.n	80055ce <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0089      	lsls	r1, r1, #2
 8005626:	430a      	orrs	r2, r1
 8005628:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	22ff      	movs	r2, #255	; 0xff
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2229      	movs	r2, #41	; 0x29
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2228      	movs	r2, #40	; 0x28
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b009      	add	sp, #36	; 0x24
 800564a:	bd90      	pop	{r4, r7, pc}
 800564c:	fffffeff 	.word	0xfffffeff
 8005650:	ffffefff 	.word	0xffffefff
 8005654:	fffffdff 	.word	0xfffffdff
 8005658:	ffffdfff 	.word	0xffffdfff

0800565c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	21a0      	movs	r1, #160	; 0xa0
 8005670:	438a      	bics	r2, r1
 8005672:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005674:	f7fe f966 	bl	8003944 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800567c:	e00a      	b.n	8005694 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800567e:	f7fe f961 	bl	8003944 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	23fa      	movs	r3, #250	; 0xfa
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d901      	bls.n	8005694 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e006      	b.n	80056a2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	4013      	ands	r3, r2
 800569e:	d0ee      	beq.n	800567e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b004      	add	sp, #16
 80056a8:	bd80      	pop	{r7, pc}

080056aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80056b2:	230f      	movs	r3, #15
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	4013      	ands	r3, r2
 80056c4:	d12c      	bne.n	8005720 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	430a      	orrs	r2, r1
 80056d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056d6:	f7fe f935 	bl	8003944 <HAL_GetTick>
 80056da:	0003      	movs	r3, r0
 80056dc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056de:	e014      	b.n	800570a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80056e0:	f7fe f930 	bl	8003944 <HAL_GetTick>
 80056e4:	0002      	movs	r2, r0
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	1ad2      	subs	r2, r2, r3
 80056ea:	200f      	movs	r0, #15
 80056ec:	183b      	adds	r3, r7, r0
 80056ee:	1839      	adds	r1, r7, r0
 80056f0:	7809      	ldrb	r1, [r1, #0]
 80056f2:	7019      	strb	r1, [r3, #0]
 80056f4:	23fa      	movs	r3, #250	; 0xfa
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d906      	bls.n	800570a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80056fc:	183b      	adds	r3, r7, r0
 80056fe:	2203      	movs	r2, #3
 8005700:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2229      	movs	r2, #41	; 0x29
 8005706:	2103      	movs	r1, #3
 8005708:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2240      	movs	r2, #64	; 0x40
 8005712:	4013      	ands	r3, r2
 8005714:	d104      	bne.n	8005720 <RTC_EnterInitMode+0x76>
 8005716:	230f      	movs	r3, #15
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d1df      	bne.n	80056e0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005720:	230f      	movs	r3, #15
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	781b      	ldrb	r3, [r3, #0]
}
 8005726:	0018      	movs	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	b004      	add	sp, #16
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	240f      	movs	r4, #15
 800573a:	193b      	adds	r3, r7, r4
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <RTC_ExitInitMode+0x84>)
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <RTC_ExitInitMode+0x84>)
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	438a      	bics	r2, r1
 800574a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <RTC_ExitInitMode+0x84>)
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2220      	movs	r2, #32
 8005752:	4013      	ands	r3, r2
 8005754:	d10d      	bne.n	8005772 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f7ff ff7f 	bl	800565c <HAL_RTC_WaitForSynchro>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d021      	beq.n	80057a6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2229      	movs	r2, #41	; 0x29
 8005766:	2103      	movs	r1, #3
 8005768:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800576a:	193b      	adds	r3, r7, r4
 800576c:	2203      	movs	r2, #3
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e019      	b.n	80057a6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005772:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <RTC_ExitInitMode+0x84>)
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <RTC_ExitInitMode+0x84>)
 8005778:	2120      	movs	r1, #32
 800577a:	438a      	bics	r2, r1
 800577c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff ff6b 	bl	800565c <HAL_RTC_WaitForSynchro>
 8005786:	1e03      	subs	r3, r0, #0
 8005788:	d007      	beq.n	800579a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2229      	movs	r2, #41	; 0x29
 800578e:	2103      	movs	r1, #3
 8005790:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005792:	230f      	movs	r3, #15
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2203      	movs	r2, #3
 8005798:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <RTC_ExitInitMode+0x84>)
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <RTC_ExitInitMode+0x84>)
 80057a0:	2120      	movs	r1, #32
 80057a2:	430a      	orrs	r2, r1
 80057a4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80057a6:	230f      	movs	r3, #15
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b005      	add	sp, #20
 80057b2:	bd90      	pop	{r4, r7, pc}
 80057b4:	40002800 	.word	0x40002800

080057b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	0002      	movs	r2, r0
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80057c8:	230b      	movs	r3, #11
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	1dfa      	adds	r2, r7, #7
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80057d2:	e008      	b.n	80057e6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80057da:	220b      	movs	r2, #11
 80057dc:	18bb      	adds	r3, r7, r2
 80057de:	18ba      	adds	r2, r7, r2
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	3a0a      	subs	r2, #10
 80057e4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80057e6:	210b      	movs	r1, #11
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d8f1      	bhi.n	80057d4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	187b      	adds	r3, r7, r1
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b2db      	uxtb	r3, r3
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}

08005808 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	0002      	movs	r2, r0
 8005810:	1dfb      	adds	r3, r7, #7
 8005812:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005814:	1dfb      	adds	r3, r7, #7
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	b2db      	uxtb	r3, r3
 800581c:	001a      	movs	r2, r3
 800581e:	0013      	movs	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	189b      	adds	r3, r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	210f      	movs	r1, #15
 8005832:	400b      	ands	r3, r1
 8005834:	b2db      	uxtb	r3, r3
 8005836:	18d3      	adds	r3, r2, r3
 8005838:	b2db      	uxtb	r3, r3
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b004      	add	sp, #16
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2228      	movs	r2, #40	; 0x28
 800584e:	5c9b      	ldrb	r3, [r3, r2]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005854:	2302      	movs	r3, #2
 8005856:	e024      	b.n	80058a2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2228      	movs	r2, #40	; 0x28
 800585c:	2101      	movs	r1, #1
 800585e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2229      	movs	r2, #41	; 0x29
 8005864:	2102      	movs	r1, #2
 8005866:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	22ca      	movs	r2, #202	; 0xca
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2253      	movs	r2, #83	; 0x53
 8005876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2120      	movs	r1, #32
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2229      	movs	r2, #41	; 0x29
 8005894:	2101      	movs	r1, #1
 8005896:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2228      	movs	r2, #40	; 0x28
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2228      	movs	r2, #40	; 0x28
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_RTCEx_DisableBypassShadow+0x16>
 80058bc:	2302      	movs	r3, #2
 80058be:	e024      	b.n	800590a <HAL_RTCEx_DisableBypassShadow+0x60>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2228      	movs	r2, #40	; 0x28
 80058c4:	2101      	movs	r1, #1
 80058c6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2229      	movs	r2, #41	; 0x29
 80058cc:	2102      	movs	r1, #2
 80058ce:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	22ca      	movs	r2, #202	; 0xca
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2253      	movs	r2, #83	; 0x53
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	21df      	movs	r1, #223	; 0xdf
 80058ec:	400a      	ands	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2229      	movs	r2, #41	; 0x29
 80058fc:	2101      	movs	r1, #1
 80058fe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2228      	movs	r2, #40	; 0x28
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	0018      	movs	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	b002      	add	sp, #8
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e0a8      	b.n	8005a78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	2382      	movs	r3, #130	; 0x82
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	429a      	cmp	r2, r3
 8005938:	d009      	beq.n	800594e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	61da      	str	r2, [r3, #28]
 8005940:	e005      	b.n	800594e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	225d      	movs	r2, #93	; 0x5d
 8005958:	5c9b      	ldrb	r3, [r3, r2]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	225c      	movs	r2, #92	; 0x5c
 8005964:	2100      	movs	r1, #0
 8005966:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	0018      	movs	r0, r3
 800596c:	f7fd fca8 	bl	80032c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	225d      	movs	r2, #93	; 0x5d
 8005974:	2102      	movs	r1, #2
 8005976:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	438a      	bics	r2, r1
 8005986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	23e0      	movs	r3, #224	; 0xe0
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	429a      	cmp	r2, r3
 8005992:	d902      	bls.n	800599a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e002      	b.n	80059a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	015b      	lsls	r3, r3, #5
 800599e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	23f0      	movs	r3, #240	; 0xf0
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d008      	beq.n	80059be <HAL_SPI_Init+0xaa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	23e0      	movs	r3, #224	; 0xe0
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	2382      	movs	r3, #130	; 0x82
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	401a      	ands	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	2384      	movs	r3, #132	; 0x84
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	400b      	ands	r3, r1
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2102      	movs	r1, #2
 80059da:	400b      	ands	r3, r1
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2101      	movs	r1, #1
 80059e4:	400b      	ands	r3, r1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6999      	ldr	r1, [r3, #24]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	400b      	ands	r3, r1
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2138      	movs	r1, #56	; 0x38
 80059fa:	400b      	ands	r3, r1
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	400b      	ands	r3, r1
 8005a06:	431a      	orrs	r2, r3
 8005a08:	0011      	movs	r1, r2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	401a      	ands	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	2204      	movs	r2, #4
 8005a24:	401a      	ands	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2110      	movs	r1, #16
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	2108      	movs	r1, #8
 8005a36:	400b      	ands	r3, r1
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	23f0      	movs	r3, #240	; 0xf0
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	400b      	ands	r3, r1
 8005a44:	431a      	orrs	r2, r3
 8005a46:	0011      	movs	r1, r2
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	015b      	lsls	r3, r3, #5
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4907      	ldr	r1, [pc, #28]	; (8005a80 <HAL_SPI_Init+0x16c>)
 8005a64:	400a      	ands	r2, r1
 8005a66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	225d      	movs	r2, #93	; 0x5d
 8005a72:	2101      	movs	r1, #1
 8005a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	fffff7ff 	.word	0xfffff7ff

08005a84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	1dbb      	adds	r3, r7, #6
 8005a92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a94:	231f      	movs	r3, #31
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	225c      	movs	r2, #92	; 0x5c
 8005aa0:	5c9b      	ldrb	r3, [r3, r2]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_SPI_Transmit+0x26>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e140      	b.n	8005d2c <HAL_SPI_Transmit+0x2a8>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	225c      	movs	r2, #92	; 0x5c
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab2:	f7fd ff47 	bl	8003944 <HAL_GetTick>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005aba:	2316      	movs	r3, #22
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	1dba      	adds	r2, r7, #6
 8005ac0:	8812      	ldrh	r2, [r2, #0]
 8005ac2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	225d      	movs	r2, #93	; 0x5d
 8005ac8:	5c9b      	ldrb	r3, [r3, r2]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d004      	beq.n	8005ada <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ad0:	231f      	movs	r3, #31
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ad8:	e11d      	b.n	8005d16 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_SPI_Transmit+0x64>
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005ae8:	231f      	movs	r3, #31
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
    goto error;
 8005af0:	e111      	b.n	8005d16 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	225d      	movs	r2, #93	; 0x5d
 8005af6:	2103      	movs	r1, #3
 8005af8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1dba      	adds	r2, r7, #6
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1dba      	adds	r2, r7, #6
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2244      	movs	r2, #68	; 0x44
 8005b20:	2100      	movs	r1, #0
 8005b22:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2246      	movs	r2, #70	; 0x46
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d110      	bne.n	8005b66 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2140      	movs	r1, #64	; 0x40
 8005b50:	438a      	bics	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	01c9      	lsls	r1, r1, #7
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2240      	movs	r2, #64	; 0x40
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d007      	beq.n	8005b84 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2140      	movs	r1, #64	; 0x40
 8005b80:	430a      	orrs	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	23e0      	movs	r3, #224	; 0xe0
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d94e      	bls.n	8005c2e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_SPI_Transmit+0x11e>
 8005b98:	2316      	movs	r3, #22
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d13f      	bne.n	8005c22 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bc6:	e02c      	b.n	8005c22 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d112      	bne.n	8005bfc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bfa:	e012      	b.n	8005c22 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfc:	f7fd fea2 	bl	8003944 <HAL_GetTick>
 8005c00:	0002      	movs	r2, r0
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d802      	bhi.n	8005c12 <HAL_SPI_Transmit+0x18e>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_SPI_Transmit+0x194>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005c18:	231f      	movs	r3, #31
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c20:	e079      	b.n	8005d16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1cd      	bne.n	8005bc8 <HAL_SPI_Transmit+0x144>
 8005c2c:	e04f      	b.n	8005cce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_SPI_Transmit+0x1bc>
 8005c36:	2316      	movs	r3, #22
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d141      	bne.n	8005cc4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c66:	e02d      	b.n	8005cc4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d113      	bne.n	8005c9e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c9c:	e012      	b.n	8005cc4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9e:	f7fd fe51 	bl	8003944 <HAL_GetTick>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d802      	bhi.n	8005cb4 <HAL_SPI_Transmit+0x230>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	d102      	bne.n	8005cba <HAL_SPI_Transmit+0x236>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005cba:	231f      	movs	r3, #31
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	701a      	strb	r2, [r3, #0]
          goto error;
 8005cc2:	e028      	b.n	8005d16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1cc      	bne.n	8005c68 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 fcd9 	bl	800668c <SPI_EndRxTxTransaction>
 8005cda:	1e03      	subs	r3, r0, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005d0a:	231f      	movs	r3, #31
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e000      	b.n	8005d16 <HAL_SPI_Transmit+0x292>
  }

error:
 8005d14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	225d      	movs	r2, #93	; 0x5d
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	225c      	movs	r2, #92	; 0x5c
 8005d22:	2100      	movs	r1, #0
 8005d24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d26:	231f      	movs	r3, #31
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b008      	add	sp, #32
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d44:	2317      	movs	r3, #23
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	2382      	movs	r3, #130	; 0x82
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d113      	bne.n	8005d80 <HAL_SPI_Receive+0x4c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	225d      	movs	r2, #93	; 0x5d
 8005d64:	2104      	movs	r1, #4
 8005d66:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d68:	1dbb      	adds	r3, r7, #6
 8005d6a:	881c      	ldrh	r4, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	0023      	movs	r3, r4
 8005d78:	f000 f928 	bl	8005fcc <HAL_SPI_TransmitReceive>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	e11c      	b.n	8005fba <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	225c      	movs	r2, #92	; 0x5c
 8005d84:	5c9b      	ldrb	r3, [r3, r2]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_SPI_Receive+0x5a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e115      	b.n	8005fba <HAL_SPI_Receive+0x286>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	225c      	movs	r2, #92	; 0x5c
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d96:	f7fd fdd5 	bl	8003944 <HAL_GetTick>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	225d      	movs	r2, #93	; 0x5d
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d004      	beq.n	8005db4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005daa:	2317      	movs	r3, #23
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	2202      	movs	r2, #2
 8005db0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005db2:	e0f7      	b.n	8005fa4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_SPI_Receive+0x8e>
 8005dba:	1dbb      	adds	r3, r7, #6
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005dc2:	2317      	movs	r3, #23
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dca:	e0eb      	b.n	8005fa4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	225d      	movs	r2, #93	; 0x5d
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1dba      	adds	r2, r7, #6
 8005de4:	2144      	movs	r1, #68	; 0x44
 8005de6:	8812      	ldrh	r2, [r2, #0]
 8005de8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1dba      	adds	r2, r7, #6
 8005dee:	2146      	movs	r1, #70	; 0x46
 8005df0:	8812      	ldrh	r2, [r2, #0]
 8005df2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	23e0      	movs	r3, #224	; 0xe0
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d908      	bls.n	8005e30 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4966      	ldr	r1, [pc, #408]	; (8005fc4 <HAL_SPI_Receive+0x290>)
 8005e2a:	400a      	ands	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e008      	b.n	8005e42 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	0149      	lsls	r1, r1, #5
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d10f      	bne.n	8005e6e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2140      	movs	r1, #64	; 0x40
 8005e5a:	438a      	bics	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4957      	ldr	r1, [pc, #348]	; (8005fc8 <HAL_SPI_Receive+0x294>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2240      	movs	r2, #64	; 0x40
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d007      	beq.n	8005e8c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2140      	movs	r1, #64	; 0x40
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	23e0      	movs	r3, #224	; 0xe0
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d900      	bls.n	8005e9a <HAL_SPI_Receive+0x166>
 8005e98:	e069      	b.n	8005f6e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e9a:	e031      	b.n	8005f00 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d117      	bne.n	8005eda <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2246      	movs	r2, #70	; 0x46
 8005eca:	5a9b      	ldrh	r3, [r3, r2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b299      	uxth	r1, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2246      	movs	r2, #70	; 0x46
 8005ed6:	5299      	strh	r1, [r3, r2]
 8005ed8:	e012      	b.n	8005f00 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eda:	f7fd fd33 	bl	8003944 <HAL_GetTick>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d802      	bhi.n	8005ef0 <HAL_SPI_Receive+0x1bc>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Receive+0x1c2>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005ef6:	2317      	movs	r3, #23
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	2203      	movs	r2, #3
 8005efc:	701a      	strb	r2, [r3, #0]
          goto error;
 8005efe:	e051      	b.n	8005fa4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2246      	movs	r2, #70	; 0x46
 8005f04:	5a9b      	ldrh	r3, [r3, r2]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1c7      	bne.n	8005e9c <HAL_SPI_Receive+0x168>
 8005f0c:	e035      	b.n	8005f7a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2201      	movs	r2, #1
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d115      	bne.n	8005f48 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	b292      	uxth	r2, r2
 8005f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2246      	movs	r2, #70	; 0x46
 8005f38:	5a9b      	ldrh	r3, [r3, r2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2246      	movs	r2, #70	; 0x46
 8005f44:	5299      	strh	r1, [r3, r2]
 8005f46:	e012      	b.n	8005f6e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f48:	f7fd fcfc 	bl	8003944 <HAL_GetTick>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d802      	bhi.n	8005f5e <HAL_SPI_Receive+0x22a>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	d102      	bne.n	8005f64 <HAL_SPI_Receive+0x230>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005f64:	2317      	movs	r3, #23
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	2203      	movs	r2, #3
 8005f6a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f6c:	e01a      	b.n	8005fa4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2246      	movs	r2, #70	; 0x46
 8005f72:	5a9b      	ldrh	r3, [r3, r2]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1c9      	bne.n	8005f0e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 fb25 	bl	80065d0 <SPI_EndRxTransaction>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005f98:	2317      	movs	r3, #23
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e000      	b.n	8005fa4 <HAL_SPI_Receive+0x270>
  }

error :
 8005fa2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	225d      	movs	r2, #93	; 0x5d
 8005fa8:	2101      	movs	r1, #1
 8005faa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	225c      	movs	r2, #92	; 0x5c
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005fb4:	2317      	movs	r3, #23
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	781b      	ldrb	r3, [r3, #0]
}
 8005fba:	0018      	movs	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b007      	add	sp, #28
 8005fc0:	bd90      	pop	{r4, r7, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	ffffefff 	.word	0xffffefff
 8005fc8:	ffffbfff 	.word	0xffffbfff

08005fcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	001a      	movs	r2, r3
 8005fda:	1cbb      	adds	r3, r7, #2
 8005fdc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fe2:	2323      	movs	r3, #35	; 0x23
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	225c      	movs	r2, #92	; 0x5c
 8005fee:	5c9b      	ldrb	r3, [r3, r2]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x2c>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e1b5      	b.n	8006364 <HAL_SPI_TransmitReceive+0x398>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	225c      	movs	r2, #92	; 0x5c
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006000:	f7fd fca0 	bl	8003944 <HAL_GetTick>
 8006004:	0003      	movs	r3, r0
 8006006:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006008:	201b      	movs	r0, #27
 800600a:	183b      	adds	r3, r7, r0
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	215d      	movs	r1, #93	; 0x5d
 8006010:	5c52      	ldrb	r2, [r2, r1]
 8006012:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800601a:	2312      	movs	r3, #18
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	1cba      	adds	r2, r7, #2
 8006020:	8812      	ldrh	r2, [r2, #0]
 8006022:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006024:	183b      	adds	r3, r7, r0
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d011      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x84>
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	2382      	movs	r3, #130	; 0x82
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	429a      	cmp	r2, r3
 8006034:	d107      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x7a>
 800603e:	183b      	adds	r3, r7, r0
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b04      	cmp	r3, #4
 8006044:	d004      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006046:	2323      	movs	r3, #35	; 0x23
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
    goto error;
 800604e:	e17e      	b.n	800634e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d006      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x98>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x98>
 800605c:	1cbb      	adds	r3, r7, #2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006064:	2323      	movs	r3, #35	; 0x23
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
    goto error;
 800606c:	e16f      	b.n	800634e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	225d      	movs	r2, #93	; 0x5d
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b04      	cmp	r3, #4
 8006078:	d003      	beq.n	8006082 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	225d      	movs	r2, #93	; 0x5d
 800607e:	2105      	movs	r1, #5
 8006080:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1cba      	adds	r2, r7, #2
 8006092:	2146      	movs	r1, #70	; 0x46
 8006094:	8812      	ldrh	r2, [r2, #0]
 8006096:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1cba      	adds	r2, r7, #2
 800609c:	2144      	movs	r1, #68	; 0x44
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1cba      	adds	r2, r7, #2
 80060ac:	8812      	ldrh	r2, [r2, #0]
 80060ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1cba      	adds	r2, r7, #2
 80060b4:	8812      	ldrh	r2, [r2, #0]
 80060b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	23e0      	movs	r3, #224	; 0xe0
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d908      	bls.n	80060e2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	49a4      	ldr	r1, [pc, #656]	; (800636c <HAL_SPI_TransmitReceive+0x3a0>)
 80060dc:	400a      	ands	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	e008      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	0149      	lsls	r1, r1, #5
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d007      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2140      	movs	r1, #64	; 0x40
 800610e:	430a      	orrs	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	23e0      	movs	r3, #224	; 0xe0
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	429a      	cmp	r2, r3
 800611c:	d800      	bhi.n	8006120 <HAL_SPI_TransmitReceive+0x154>
 800611e:	e07f      	b.n	8006220 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x168>
 8006128:	2312      	movs	r3, #18
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d000      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x168>
 8006132:	e069      	b.n	8006208 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	881a      	ldrh	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006158:	e056      	b.n	8006208 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2202      	movs	r2, #2
 8006162:	4013      	ands	r3, r2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d11b      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x1d4>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x1d4>
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b01      	cmp	r3, #1
 8006176:	d113      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	881a      	ldrh	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	1c9a      	adds	r2, r3, #2
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d11c      	bne.n	80061e8 <HAL_SPI_TransmitReceive+0x21c>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2246      	movs	r2, #70	; 0x46
 80061b2:	5a9b      	ldrh	r3, [r3, r2]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	b292      	uxth	r2, r2
 80061c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2246      	movs	r2, #70	; 0x46
 80061d6:	5a9b      	ldrh	r3, [r3, r2]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b299      	uxth	r1, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2246      	movs	r2, #70	; 0x46
 80061e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061e4:	2301      	movs	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061e8:	f7fd fbac 	bl	8003944 <HAL_GetTick>
 80061ec:	0002      	movs	r2, r0
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d807      	bhi.n	8006208 <HAL_SPI_TransmitReceive+0x23c>
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	3301      	adds	r3, #1
 80061fc:	d004      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80061fe:	2323      	movs	r3, #35	; 0x23
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	2203      	movs	r2, #3
 8006204:	701a      	strb	r2, [r3, #0]
        goto error;
 8006206:	e0a2      	b.n	800634e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1a3      	bne.n	800615a <HAL_SPI_TransmitReceive+0x18e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2246      	movs	r2, #70	; 0x46
 8006216:	5a9b      	ldrh	r3, [r3, r2]
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d19d      	bne.n	800615a <HAL_SPI_TransmitReceive+0x18e>
 800621e:	e085      	b.n	800632c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x268>
 8006228:	2312      	movs	r3, #18
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d000      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x268>
 8006232:	e070      	b.n	8006316 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625a:	e05c      	b.n	8006316 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d11c      	bne.n	80062a4 <HAL_SPI_TransmitReceive+0x2d8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x2d8>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b01      	cmp	r3, #1
 8006278:	d114      	bne.n	80062a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2201      	movs	r2, #1
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d11e      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x324>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2246      	movs	r2, #70	; 0x46
 80062b6:	5a9b      	ldrh	r3, [r3, r2]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	001a      	movs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2246      	movs	r2, #70	; 0x46
 80062de:	5a9b      	ldrh	r3, [r3, r2]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b299      	uxth	r1, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2246      	movs	r2, #70	; 0x46
 80062ea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062ec:	2301      	movs	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f0:	f7fd fb28 	bl	8003944 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d802      	bhi.n	8006306 <HAL_SPI_TransmitReceive+0x33a>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	3301      	adds	r3, #1
 8006304:	d102      	bne.n	800630c <HAL_SPI_TransmitReceive+0x340>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800630c:	2323      	movs	r3, #35	; 0x23
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	2203      	movs	r2, #3
 8006312:	701a      	strb	r2, [r3, #0]
        goto error;
 8006314:	e01b      	b.n	800634e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d19d      	bne.n	800625c <HAL_SPI_TransmitReceive+0x290>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2246      	movs	r2, #70	; 0x46
 8006324:	5a9b      	ldrh	r3, [r3, r2]
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d197      	bne.n	800625c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	0018      	movs	r0, r3
 8006334:	f000 f9aa 	bl	800668c <SPI_EndRxTxTransaction>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d007      	beq.n	800634c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800633c:	2323      	movs	r3, #35	; 0x23
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	661a      	str	r2, [r3, #96]	; 0x60
 800634a:	e000      	b.n	800634e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800634c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	225d      	movs	r2, #93	; 0x5d
 8006352:	2101      	movs	r1, #1
 8006354:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	225c      	movs	r2, #92	; 0x5c
 800635a:	2100      	movs	r1, #0
 800635c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800635e:	2323      	movs	r3, #35	; 0x23
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b00a      	add	sp, #40	; 0x28
 800636a:	bd80      	pop	{r7, pc}
 800636c:	ffffefff 	.word	0xffffefff

08006370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	1dfb      	adds	r3, r7, #7
 800637e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006380:	f7fd fae0 	bl	8003944 <HAL_GetTick>
 8006384:	0002      	movs	r2, r0
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006390:	f7fd fad8 	bl	8003944 <HAL_GetTick>
 8006394:	0003      	movs	r3, r0
 8006396:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006398:	4b3a      	ldr	r3, [pc, #232]	; (8006484 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	015b      	lsls	r3, r3, #5
 800639e:	0d1b      	lsrs	r3, r3, #20
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	4353      	muls	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a6:	e058      	b.n	800645a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	d055      	beq.n	800645a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063ae:	f7fd fac9 	bl	8003944 <HAL_GetTick>
 80063b2:	0002      	movs	r2, r0
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d902      	bls.n	80063c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d142      	bne.n	800644a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	21e0      	movs	r1, #224	; 0xe0
 80063d0:	438a      	bics	r2, r1
 80063d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	2382      	movs	r3, #130	; 0x82
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	d113      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x98>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d005      	beq.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d107      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2140      	movs	r1, #64	; 0x40
 8006404:	438a      	bics	r2, r1
 8006406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	019b      	lsls	r3, r3, #6
 8006410:	429a      	cmp	r2, r3
 8006412:	d110      	bne.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	491a      	ldr	r1, [pc, #104]	; (8006488 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006420:	400a      	ands	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	0189      	lsls	r1, r1, #6
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	225d      	movs	r2, #93	; 0x5d
 800643a:	2101      	movs	r1, #1
 800643c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	225c      	movs	r2, #92	; 0x5c
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e017      	b.n	800647a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3b01      	subs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	4013      	ands	r3, r2
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	425a      	negs	r2, r3
 800646a:	4153      	adcs	r3, r2
 800646c:	b2db      	uxtb	r3, r3
 800646e:	001a      	movs	r2, r3
 8006470:	1dfb      	adds	r3, r7, #7
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d197      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	0018      	movs	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	b008      	add	sp, #32
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	20000020 	.word	0x20000020
 8006488:	ffffdfff 	.word	0xffffdfff

0800648c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800649a:	2317      	movs	r3, #23
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064a2:	f7fd fa4f 	bl	8003944 <HAL_GetTick>
 80064a6:	0002      	movs	r2, r0
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	18d3      	adds	r3, r2, r3
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064b2:	f7fd fa47 	bl	8003944 <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	0013      	movs	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	00da      	lsls	r2, r3, #3
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d4:	4353      	muls	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064d8:	e068      	b.n	80065ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	23c0      	movs	r3, #192	; 0xc0
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d10a      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	2117      	movs	r1, #23
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064f6:	187b      	adds	r3, r7, r1
 80064f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	d055      	beq.n	80065ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006500:	f7fd fa20 	bl	8003944 <HAL_GetTick>
 8006504:	0002      	movs	r2, r0
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	429a      	cmp	r2, r3
 800650e:	d902      	bls.n	8006516 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d142      	bne.n	800659c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	21e0      	movs	r1, #224	; 0xe0
 8006522:	438a      	bics	r2, r1
 8006524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	2382      	movs	r3, #130	; 0x82
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	429a      	cmp	r2, r3
 8006530:	d113      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	429a      	cmp	r2, r3
 800653c:	d005      	beq.n	800654a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	429a      	cmp	r2, r3
 8006548:	d107      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2140      	movs	r1, #64	; 0x40
 8006556:	438a      	bics	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	019b      	lsls	r3, r3, #6
 8006562:	429a      	cmp	r2, r3
 8006564:	d110      	bne.n	8006588 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4916      	ldr	r1, [pc, #88]	; (80065cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006572:	400a      	ands	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	0189      	lsls	r1, r1, #6
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	225d      	movs	r2, #93	; 0x5d
 800658c:	2101      	movs	r1, #1
 800658e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	225c      	movs	r2, #92	; 0x5c
 8006594:	2100      	movs	r1, #0
 8006596:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e010      	b.n	80065be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d18e      	bne.n	80064da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	0018      	movs	r0, r3
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b00a      	add	sp, #40	; 0x28
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	20000020 	.word	0x20000020
 80065cc:	ffffdfff 	.word	0xffffdfff

080065d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	2382      	movs	r3, #130	; 0x82
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d113      	bne.n	8006610 <SPI_EndRxTransaction+0x40>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d005      	beq.n	8006600 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d107      	bne.n	8006610 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2140      	movs	r1, #64	; 0x40
 800660c:	438a      	bics	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	0013      	movs	r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	f7ff fea7 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 8006622:	1e03      	subs	r3, r0, #0
 8006624:	d007      	beq.n	8006636 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	2220      	movs	r2, #32
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e026      	b.n	8006684 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	2382      	movs	r3, #130	; 0x82
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	429a      	cmp	r2, r3
 8006640:	d11f      	bne.n	8006682 <SPI_EndRxTransaction+0xb2>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	429a      	cmp	r2, r3
 800664c:	d005      	beq.n	800665a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	429a      	cmp	r2, r3
 8006658:	d113      	bne.n	8006682 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	00d9      	lsls	r1, r3, #3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	0013      	movs	r3, r2
 8006668:	2200      	movs	r2, #0
 800666a:	f7ff ff0f 	bl	800648c <SPI_WaitFifoStateUntilTimeout>
 800666e:	1e03      	subs	r3, r0, #0
 8006670:	d007      	beq.n	8006682 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006676:	2220      	movs	r2, #32
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e000      	b.n	8006684 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	b004      	add	sp, #16
 800668a:	bd80      	pop	{r7, pc}

0800668c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	23c0      	movs	r3, #192	; 0xc0
 800669c:	0159      	lsls	r1, r3, #5
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	0013      	movs	r3, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	f7ff fef0 	bl	800648c <SPI_WaitFifoStateUntilTimeout>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d007      	beq.n	80066c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	2220      	movs	r2, #32
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e027      	b.n	8006710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	0013      	movs	r3, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	f7ff fe4f 	bl	8006370 <SPI_WaitFlagStateUntilTimeout>
 80066d2:	1e03      	subs	r3, r0, #0
 80066d4:	d007      	beq.n	80066e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066da:	2220      	movs	r2, #32
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e014      	b.n	8006710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	23c0      	movs	r3, #192	; 0xc0
 80066ea:	00d9      	lsls	r1, r3, #3
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	0013      	movs	r3, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	f7ff fec9 	bl	800648c <SPI_WaitFifoStateUntilTimeout>
 80066fa:	1e03      	subs	r3, r0, #0
 80066fc:	d007      	beq.n	800670e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	2220      	movs	r2, #32
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e000      	b.n	8006710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e04a      	b.n	80067c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223d      	movs	r2, #61	; 0x3d
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	223c      	movs	r2, #60	; 0x3c
 800673a:	2100      	movs	r1, #0
 800673c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0018      	movs	r0, r3
 8006742:	f7fc fe09 	bl	8003358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	223d      	movs	r2, #61	; 0x3d
 800674a:	2102      	movs	r1, #2
 800674c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	0019      	movs	r1, r3
 8006758:	0010      	movs	r0, r2
 800675a:	f000 fa11 	bl	8006b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2248      	movs	r2, #72	; 0x48
 8006762:	2101      	movs	r1, #1
 8006764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	223e      	movs	r2, #62	; 0x3e
 800676a:	2101      	movs	r1, #1
 800676c:	5499      	strb	r1, [r3, r2]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	223f      	movs	r2, #63	; 0x3f
 8006772:	2101      	movs	r1, #1
 8006774:	5499      	strb	r1, [r3, r2]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	2101      	movs	r1, #1
 800677c:	5499      	strb	r1, [r3, r2]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2241      	movs	r2, #65	; 0x41
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2242      	movs	r2, #66	; 0x42
 800678a:	2101      	movs	r1, #1
 800678c:	5499      	strb	r1, [r3, r2]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2243      	movs	r2, #67	; 0x43
 8006792:	2101      	movs	r1, #1
 8006794:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2244      	movs	r2, #68	; 0x44
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2245      	movs	r2, #69	; 0x45
 80067a2:	2101      	movs	r1, #1
 80067a4:	5499      	strb	r1, [r3, r2]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2246      	movs	r2, #70	; 0x46
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2247      	movs	r2, #71	; 0x47
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	223d      	movs	r2, #61	; 0x3d
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b002      	add	sp, #8
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	223d      	movs	r2, #61	; 0x3d
 80067d4:	5c9b      	ldrb	r3, [r3, r2]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e042      	b.n	8006866 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	223d      	movs	r2, #61	; 0x3d
 80067e4:	2102      	movs	r1, #2
 80067e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2101      	movs	r1, #1
 80067f4:	430a      	orrs	r2, r1
 80067f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_TIM_Base_Start_IT+0xa8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00f      	beq.n	8006822 <HAL_TIM_Base_Start_IT+0x5a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	2380      	movs	r3, #128	; 0x80
 8006808:	05db      	lsls	r3, r3, #23
 800680a:	429a      	cmp	r2, r3
 800680c:	d009      	beq.n	8006822 <HAL_TIM_Base_Start_IT+0x5a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a18      	ldr	r2, [pc, #96]	; (8006874 <HAL_TIM_Base_Start_IT+0xac>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIM_Base_Start_IT+0x5a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a16      	ldr	r2, [pc, #88]	; (8006878 <HAL_TIM_Base_Start_IT+0xb0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d116      	bne.n	8006850 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4a14      	ldr	r2, [pc, #80]	; (800687c <HAL_TIM_Base_Start_IT+0xb4>)
 800682a:	4013      	ands	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b06      	cmp	r3, #6
 8006832:	d016      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x9a>
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	025b      	lsls	r3, r3, #9
 800683a:	429a      	cmp	r2, r3
 800683c:	d011      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	430a      	orrs	r2, r1
 800684c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	e008      	b.n	8006862 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e000      	b.n	8006864 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006862:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b004      	add	sp, #16
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40000400 	.word	0x40000400
 8006878:	40014000 	.word	0x40014000
 800687c:	00010007 	.word	0x00010007

08006880 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2101      	movs	r1, #1
 8006894:	438a      	bics	r2, r1
 8006896:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	4a0d      	ldr	r2, [pc, #52]	; (80068d4 <HAL_TIM_Base_Stop_IT+0x54>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	d10d      	bne.n	80068c0 <HAL_TIM_Base_Stop_IT+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <HAL_TIM_Base_Stop_IT+0x58>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	d107      	bne.n	80068c0 <HAL_TIM_Base_Stop_IT+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	438a      	bics	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	223d      	movs	r2, #61	; 0x3d
 80068c4:	2101      	movs	r1, #1
 80068c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	00001111 	.word	0x00001111
 80068d8:	00000444 	.word	0x00000444

080068dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2202      	movs	r2, #2
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d124      	bne.n	800693c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d11d      	bne.n	800693c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2203      	movs	r2, #3
 8006906:	4252      	negs	r2, r2
 8006908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	2203      	movs	r2, #3
 8006918:	4013      	ands	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f916 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006924:	e007      	b.n	8006936 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 f909 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 f915 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2204      	movs	r2, #4
 8006944:	4013      	ands	r3, r2
 8006946:	2b04      	cmp	r3, #4
 8006948:	d125      	bne.n	8006996 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2204      	movs	r2, #4
 8006952:	4013      	ands	r3, r2
 8006954:	2b04      	cmp	r3, #4
 8006956:	d11e      	bne.n	8006996 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2205      	movs	r2, #5
 800695e:	4252      	negs	r2, r2
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	23c0      	movs	r3, #192	; 0xc0
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4013      	ands	r3, r2
 8006974:	d004      	beq.n	8006980 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 f8e9 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 800697e:	e007      	b.n	8006990 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f8dc 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f000 f8e8 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2208      	movs	r2, #8
 800699e:	4013      	ands	r3, r2
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d124      	bne.n	80069ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2208      	movs	r2, #8
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d11d      	bne.n	80069ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2209      	movs	r2, #9
 80069b8:	4252      	negs	r2, r2
 80069ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2204      	movs	r2, #4
 80069c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	2203      	movs	r2, #3
 80069ca:	4013      	ands	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 f8bd 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 80069d6:	e007      	b.n	80069e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 f8b0 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 f8bc 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2210      	movs	r2, #16
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d125      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2210      	movs	r2, #16
 8006a04:	4013      	ands	r3, r2
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d11e      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2211      	movs	r2, #17
 8006a10:	4252      	negs	r2, r2
 8006a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2208      	movs	r2, #8
 8006a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	23c0      	movs	r3, #192	; 0xc0
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4013      	ands	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f000 f890 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006a30:	e007      	b.n	8006a42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f000 f883 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 f88f 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d10f      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d108      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	4252      	negs	r2, r2
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7fc fb75 	bl	8003160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2280      	movs	r2, #128	; 0x80
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d10f      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d108      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2281      	movs	r2, #129	; 0x81
 8006a98:	4252      	negs	r2, r2
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 f964 	bl	8006d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	2380      	movs	r3, #128	; 0x80
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	401a      	ands	r2, r3
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <HAL_TIM_IRQHandler+0x260>)
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 f953 	bl	8006d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2240      	movs	r2, #64	; 0x40
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d10f      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2240      	movs	r2, #64	; 0x40
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d108      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2241      	movs	r2, #65	; 0x41
 8006af8:	4252      	negs	r2, r2
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 f836 	bl	8006b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d10f      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d108      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2221      	movs	r2, #33	; 0x21
 8006b26:	4252      	negs	r2, r2
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 f915 	bl	8006d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b002      	add	sp, #8
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	fffffeff 	.word	0xfffffeff

08006b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b48:	46c0      	nop			; (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b002      	add	sp, #8
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b68:	46c0      	nop			; (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a34      	ldr	r2, [pc, #208]	; (8006c64 <TIM_Base_SetConfig+0xe4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d008      	beq.n	8006baa <TIM_Base_SetConfig+0x2a>
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	05db      	lsls	r3, r3, #23
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d003      	beq.n	8006baa <TIM_Base_SetConfig+0x2a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <TIM_Base_SetConfig+0xe8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2270      	movs	r2, #112	; 0x70
 8006bae:	4393      	bics	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <TIM_Base_SetConfig+0xe4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d018      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	2380      	movs	r3, #128	; 0x80
 8006bc8:	05db      	lsls	r3, r3, #23
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d013      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <TIM_Base_SetConfig+0xe8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <TIM_Base_SetConfig+0xec>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a23      	ldr	r2, [pc, #140]	; (8006c70 <TIM_Base_SetConfig+0xf0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <TIM_Base_SetConfig+0xf4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x76>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <TIM_Base_SetConfig+0xf8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <TIM_Base_SetConfig+0xfc>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	001a      	movs	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a0c      	ldr	r2, [pc, #48]	; (8006c64 <TIM_Base_SetConfig+0xe4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0xce>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <TIM_Base_SetConfig+0xf0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0xce>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <TIM_Base_SetConfig+0xf4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0xce>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a0b      	ldr	r2, [pc, #44]	; (8006c78 <TIM_Base_SetConfig+0xf8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d103      	bne.n	8006c56 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	615a      	str	r2, [r3, #20]
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b004      	add	sp, #16
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40002000 	.word	0x40002000
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800
 8006c7c:	fffffcff 	.word	0xfffffcff

08006c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	223c      	movs	r2, #60	; 0x3c
 8006c8e:	5c9b      	ldrb	r3, [r3, r2]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e055      	b.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	223c      	movs	r2, #60	; 0x3c
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	223d      	movs	r2, #61	; 0x3d
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a23      	ldr	r2, [pc, #140]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d108      	bne.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4a22      	ldr	r2, [pc, #136]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2270      	movs	r2, #112	; 0x70
 8006cd8:	4393      	bics	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a16      	ldr	r2, [pc, #88]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00f      	beq.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d009      	beq.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a11      	ldr	r2, [pc, #68]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2280      	movs	r2, #128	; 0x80
 8006d1c:	4393      	bics	r3, r2
 8006d1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	223d      	movs	r2, #61	; 0x3d
 8006d36:	2101      	movs	r1, #1
 8006d38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	223c      	movs	r2, #60	; 0x3c
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b004      	add	sp, #16
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	ff0fffff 	.word	0xff0fffff
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40014000 	.word	0x40014000

08006d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e046      	b.n	8006e2c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2288      	movs	r2, #136	; 0x88
 8006da2:	589b      	ldr	r3, [r3, r2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2284      	movs	r2, #132	; 0x84
 8006dac:	2100      	movs	r1, #0
 8006dae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	0018      	movs	r0, r3
 8006db4:	f7fc faf6 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2288      	movs	r2, #136	; 0x88
 8006dbc:	2124      	movs	r1, #36	; 0x24
 8006dbe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2101      	movs	r1, #1
 8006dcc:	438a      	bics	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 f9ee 	bl	80071b4 <UART_SetConfig>
 8006dd8:	0003      	movs	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e024      	b.n	8006e2c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 fc9f 	bl	8007730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	490d      	ldr	r1, [pc, #52]	; (8006e34 <HAL_UART_Init+0xa8>)
 8006dfe:	400a      	ands	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	212a      	movs	r1, #42	; 0x2a
 8006e0e:	438a      	bics	r2, r1
 8006e10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f000 fd37 	bl	8007898 <UART_CheckIdleState>
 8006e2a:	0003      	movs	r3, r0
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	ffffb7ff 	.word	0xffffb7ff

08006e38 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e032      	b.n	8006eb0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2288      	movs	r2, #136	; 0x88
 8006e4e:	2124      	movs	r1, #36	; 0x24
 8006e50:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	438a      	bics	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7fc fb75 	bl	800356c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2290      	movs	r2, #144	; 0x90
 8006e86:	2100      	movs	r1, #0
 8006e88:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2288      	movs	r2, #136	; 0x88
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	228c      	movs	r2, #140	; 0x8c
 8006e96:	2100      	movs	r1, #0
 8006e98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2284      	movs	r2, #132	; 0x84
 8006eaa:	2100      	movs	r1, #0
 8006eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	1dbb      	adds	r3, r7, #6
 8006ec6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2288      	movs	r2, #136	; 0x88
 8006ecc:	589b      	ldr	r3, [r3, r2]
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d000      	beq.n	8006ed4 <HAL_UART_Transmit+0x1c>
 8006ed2:	e088      	b.n	8006fe6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_UART_Transmit+0x2a>
 8006eda:	1dbb      	adds	r3, r7, #6
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e080      	b.n	8006fe8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	015b      	lsls	r3, r3, #5
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d109      	bne.n	8006f06 <HAL_UART_Transmit+0x4e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2201      	movs	r2, #1
 8006efe:	4013      	ands	r3, r2
 8006f00:	d001      	beq.n	8006f06 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e070      	b.n	8006fe8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2290      	movs	r2, #144	; 0x90
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2288      	movs	r2, #136	; 0x88
 8006f12:	2121      	movs	r1, #33	; 0x21
 8006f14:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f16:	f7fc fd15 	bl	8003944 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1dba      	adds	r2, r7, #6
 8006f22:	2154      	movs	r1, #84	; 0x54
 8006f24:	8812      	ldrh	r2, [r2, #0]
 8006f26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1dba      	adds	r2, r7, #6
 8006f2c:	2156      	movs	r1, #86	; 0x56
 8006f2e:	8812      	ldrh	r2, [r2, #0]
 8006f30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	015b      	lsls	r3, r3, #5
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d108      	bne.n	8006f50 <HAL_UART_Transmit+0x98>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	e003      	b.n	8006f58 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f58:	e02c      	b.n	8006fb4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	0013      	movs	r3, r2
 8006f64:	2200      	movs	r2, #0
 8006f66:	2180      	movs	r1, #128	; 0x80
 8006f68:	f000 fce4 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	1e03      	subs	r3, r0, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e039      	b.n	8006fe8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	001a      	movs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	05d2      	lsls	r2, r2, #23
 8006f86:	0dd2      	lsrs	r2, r2, #23
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	e007      	b.n	8006fa2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2256      	movs	r2, #86	; 0x56
 8006fa6:	5a9b      	ldrh	r3, [r3, r2]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b299      	uxth	r1, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2256      	movs	r2, #86	; 0x56
 8006fb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2256      	movs	r2, #86	; 0x56
 8006fb8:	5a9b      	ldrh	r3, [r3, r2]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1cc      	bne.n	8006f5a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	0013      	movs	r3, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2140      	movs	r1, #64	; 0x40
 8006fce:	f000 fcb1 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	1e03      	subs	r3, r0, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e006      	b.n	8006fe8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2288      	movs	r2, #136	; 0x88
 8006fde:	2120      	movs	r1, #32
 8006fe0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	0018      	movs	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b008      	add	sp, #32
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	1dbb      	adds	r3, r7, #6
 8006ffe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	228c      	movs	r2, #140	; 0x8c
 8007004:	589b      	ldr	r3, [r3, r2]
 8007006:	2b20      	cmp	r3, #32
 8007008:	d000      	beq.n	800700c <HAL_UART_Receive+0x1c>
 800700a:	e0cc      	b.n	80071a6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_UART_Receive+0x2a>
 8007012:	1dbb      	adds	r3, r7, #6
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e0c4      	b.n	80071a8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	015b      	lsls	r3, r3, #5
 8007026:	429a      	cmp	r2, r3
 8007028:	d109      	bne.n	800703e <HAL_UART_Receive+0x4e>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2201      	movs	r2, #1
 8007036:	4013      	ands	r3, r2
 8007038:	d001      	beq.n	800703e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e0b4      	b.n	80071a8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2290      	movs	r2, #144	; 0x90
 8007042:	2100      	movs	r1, #0
 8007044:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	228c      	movs	r2, #140	; 0x8c
 800704a:	2122      	movs	r1, #34	; 0x22
 800704c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007054:	f7fc fc76 	bl	8003944 <HAL_GetTick>
 8007058:	0003      	movs	r3, r0
 800705a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1dba      	adds	r2, r7, #6
 8007060:	215c      	movs	r1, #92	; 0x5c
 8007062:	8812      	ldrh	r2, [r2, #0]
 8007064:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	1dba      	adds	r2, r7, #6
 800706a:	215e      	movs	r1, #94	; 0x5e
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	015b      	lsls	r3, r3, #5
 8007078:	429a      	cmp	r2, r3
 800707a:	d10d      	bne.n	8007098 <HAL_UART_Receive+0xa8>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_UART_Receive+0x9e>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2260      	movs	r2, #96	; 0x60
 8007088:	4949      	ldr	r1, [pc, #292]	; (80071b0 <HAL_UART_Receive+0x1c0>)
 800708a:	5299      	strh	r1, [r3, r2]
 800708c:	e02e      	b.n	80070ec <HAL_UART_Receive+0xfc>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2260      	movs	r2, #96	; 0x60
 8007092:	21ff      	movs	r1, #255	; 0xff
 8007094:	5299      	strh	r1, [r3, r2]
 8007096:	e029      	b.n	80070ec <HAL_UART_Receive+0xfc>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10d      	bne.n	80070bc <HAL_UART_Receive+0xcc>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_UART_Receive+0xc2>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2260      	movs	r2, #96	; 0x60
 80070ac:	21ff      	movs	r1, #255	; 0xff
 80070ae:	5299      	strh	r1, [r3, r2]
 80070b0:	e01c      	b.n	80070ec <HAL_UART_Receive+0xfc>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2260      	movs	r2, #96	; 0x60
 80070b6:	217f      	movs	r1, #127	; 0x7f
 80070b8:	5299      	strh	r1, [r3, r2]
 80070ba:	e017      	b.n	80070ec <HAL_UART_Receive+0xfc>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	055b      	lsls	r3, r3, #21
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d10d      	bne.n	80070e4 <HAL_UART_Receive+0xf4>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_UART_Receive+0xea>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2260      	movs	r2, #96	; 0x60
 80070d4:	217f      	movs	r1, #127	; 0x7f
 80070d6:	5299      	strh	r1, [r3, r2]
 80070d8:	e008      	b.n	80070ec <HAL_UART_Receive+0xfc>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2260      	movs	r2, #96	; 0x60
 80070de:	213f      	movs	r1, #63	; 0x3f
 80070e0:	5299      	strh	r1, [r3, r2]
 80070e2:	e003      	b.n	80070ec <HAL_UART_Receive+0xfc>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2260      	movs	r2, #96	; 0x60
 80070e8:	2100      	movs	r1, #0
 80070ea:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80070ec:	2312      	movs	r3, #18
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	2160      	movs	r1, #96	; 0x60
 80070f4:	5a52      	ldrh	r2, [r2, r1]
 80070f6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	015b      	lsls	r3, r3, #5
 8007100:	429a      	cmp	r2, r3
 8007102:	d108      	bne.n	8007116 <HAL_UART_Receive+0x126>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e003      	b.n	800711e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800711e:	e036      	b.n	800718e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	0013      	movs	r3, r2
 800712a:	2200      	movs	r2, #0
 800712c:	2120      	movs	r1, #32
 800712e:	f000 fc01 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007132:	1e03      	subs	r3, r0, #0
 8007134:	d001      	beq.n	800713a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e036      	b.n	80071a8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10e      	bne.n	800715e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	b29b      	uxth	r3, r3
 8007148:	2212      	movs	r2, #18
 800714a:	18ba      	adds	r2, r7, r2
 800714c:	8812      	ldrh	r2, [r2, #0]
 800714e:	4013      	ands	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	3302      	adds	r3, #2
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	e00e      	b.n	800717c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2212      	movs	r2, #18
 8007168:	18ba      	adds	r2, r7, r2
 800716a:	8812      	ldrh	r2, [r2, #0]
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	4013      	ands	r3, r2
 8007170:	b2da      	uxtb	r2, r3
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3301      	adds	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	225e      	movs	r2, #94	; 0x5e
 8007180:	5a9b      	ldrh	r3, [r3, r2]
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b299      	uxth	r1, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	225e      	movs	r2, #94	; 0x5e
 800718c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	225e      	movs	r2, #94	; 0x5e
 8007192:	5a9b      	ldrh	r3, [r3, r2]
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1c2      	bne.n	8007120 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	228c      	movs	r2, #140	; 0x8c
 800719e:	2120      	movs	r1, #32
 80071a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b008      	add	sp, #32
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	000001ff 	.word	0x000001ff

080071b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b4:	b5b0      	push	{r4, r5, r7, lr}
 80071b6:	b090      	sub	sp, #64	; 0x40
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071bc:	231a      	movs	r3, #26
 80071be:	2220      	movs	r2, #32
 80071c0:	189b      	adds	r3, r3, r2
 80071c2:	19db      	adds	r3, r3, r7
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	431a      	orrs	r2, r3
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4aaf      	ldr	r2, [pc, #700]	; (80074a4 <UART_SetConfig+0x2f0>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	0019      	movs	r1, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	430b      	orrs	r3, r1
 80071f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4aaa      	ldr	r2, [pc, #680]	; (80074a8 <UART_SetConfig+0x2f4>)
 80071fe:	4013      	ands	r3, r2
 8007200:	0018      	movs	r0, r3
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	68d9      	ldr	r1, [r3, #12]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	0003      	movs	r3, r0
 800720c:	430b      	orrs	r3, r1
 800720e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4aa4      	ldr	r2, [pc, #656]	; (80074ac <UART_SetConfig+0x2f8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007226:	4313      	orrs	r3, r2
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4a9f      	ldr	r2, [pc, #636]	; (80074b0 <UART_SetConfig+0x2fc>)
 8007232:	4013      	ands	r3, r2
 8007234:	0019      	movs	r1, r3
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723c:	430b      	orrs	r3, r1
 800723e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	220f      	movs	r2, #15
 8007248:	4393      	bics	r3, r2
 800724a:	0018      	movs	r0, r3
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	0003      	movs	r3, r0
 8007256:	430b      	orrs	r3, r1
 8007258:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a95      	ldr	r2, [pc, #596]	; (80074b4 <UART_SetConfig+0x300>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d131      	bne.n	80072c8 <UART_SetConfig+0x114>
 8007264:	4b94      	ldr	r3, [pc, #592]	; (80074b8 <UART_SetConfig+0x304>)
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	2203      	movs	r2, #3
 800726a:	4013      	ands	r3, r2
 800726c:	2b03      	cmp	r3, #3
 800726e:	d01d      	beq.n	80072ac <UART_SetConfig+0xf8>
 8007270:	d823      	bhi.n	80072ba <UART_SetConfig+0x106>
 8007272:	2b02      	cmp	r3, #2
 8007274:	d00c      	beq.n	8007290 <UART_SetConfig+0xdc>
 8007276:	d820      	bhi.n	80072ba <UART_SetConfig+0x106>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <UART_SetConfig+0xce>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d00e      	beq.n	800729e <UART_SetConfig+0xea>
 8007280:	e01b      	b.n	80072ba <UART_SetConfig+0x106>
 8007282:	231b      	movs	r3, #27
 8007284:	2220      	movs	r2, #32
 8007286:	189b      	adds	r3, r3, r2
 8007288:	19db      	adds	r3, r3, r7
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e0b4      	b.n	80073fa <UART_SetConfig+0x246>
 8007290:	231b      	movs	r3, #27
 8007292:	2220      	movs	r2, #32
 8007294:	189b      	adds	r3, r3, r2
 8007296:	19db      	adds	r3, r3, r7
 8007298:	2202      	movs	r2, #2
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e0ad      	b.n	80073fa <UART_SetConfig+0x246>
 800729e:	231b      	movs	r3, #27
 80072a0:	2220      	movs	r2, #32
 80072a2:	189b      	adds	r3, r3, r2
 80072a4:	19db      	adds	r3, r3, r7
 80072a6:	2204      	movs	r2, #4
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e0a6      	b.n	80073fa <UART_SetConfig+0x246>
 80072ac:	231b      	movs	r3, #27
 80072ae:	2220      	movs	r2, #32
 80072b0:	189b      	adds	r3, r3, r2
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	2208      	movs	r2, #8
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e09f      	b.n	80073fa <UART_SetConfig+0x246>
 80072ba:	231b      	movs	r3, #27
 80072bc:	2220      	movs	r2, #32
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	19db      	adds	r3, r3, r7
 80072c2:	2210      	movs	r2, #16
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e098      	b.n	80073fa <UART_SetConfig+0x246>
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a7b      	ldr	r2, [pc, #492]	; (80074bc <UART_SetConfig+0x308>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d131      	bne.n	8007336 <UART_SetConfig+0x182>
 80072d2:	4b79      	ldr	r3, [pc, #484]	; (80074b8 <UART_SetConfig+0x304>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	220c      	movs	r2, #12
 80072d8:	4013      	ands	r3, r2
 80072da:	2b0c      	cmp	r3, #12
 80072dc:	d01d      	beq.n	800731a <UART_SetConfig+0x166>
 80072de:	d823      	bhi.n	8007328 <UART_SetConfig+0x174>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d00c      	beq.n	80072fe <UART_SetConfig+0x14a>
 80072e4:	d820      	bhi.n	8007328 <UART_SetConfig+0x174>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <UART_SetConfig+0x13c>
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d00e      	beq.n	800730c <UART_SetConfig+0x158>
 80072ee:	e01b      	b.n	8007328 <UART_SetConfig+0x174>
 80072f0:	231b      	movs	r3, #27
 80072f2:	2220      	movs	r2, #32
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	19db      	adds	r3, r3, r7
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e07d      	b.n	80073fa <UART_SetConfig+0x246>
 80072fe:	231b      	movs	r3, #27
 8007300:	2220      	movs	r2, #32
 8007302:	189b      	adds	r3, r3, r2
 8007304:	19db      	adds	r3, r3, r7
 8007306:	2202      	movs	r2, #2
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e076      	b.n	80073fa <UART_SetConfig+0x246>
 800730c:	231b      	movs	r3, #27
 800730e:	2220      	movs	r2, #32
 8007310:	189b      	adds	r3, r3, r2
 8007312:	19db      	adds	r3, r3, r7
 8007314:	2204      	movs	r2, #4
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e06f      	b.n	80073fa <UART_SetConfig+0x246>
 800731a:	231b      	movs	r3, #27
 800731c:	2220      	movs	r2, #32
 800731e:	189b      	adds	r3, r3, r2
 8007320:	19db      	adds	r3, r3, r7
 8007322:	2208      	movs	r2, #8
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e068      	b.n	80073fa <UART_SetConfig+0x246>
 8007328:	231b      	movs	r3, #27
 800732a:	2220      	movs	r2, #32
 800732c:	189b      	adds	r3, r3, r2
 800732e:	19db      	adds	r3, r3, r7
 8007330:	2210      	movs	r2, #16
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	e061      	b.n	80073fa <UART_SetConfig+0x246>
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a61      	ldr	r2, [pc, #388]	; (80074c0 <UART_SetConfig+0x30c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d106      	bne.n	800734e <UART_SetConfig+0x19a>
 8007340:	231b      	movs	r3, #27
 8007342:	2220      	movs	r2, #32
 8007344:	189b      	adds	r3, r3, r2
 8007346:	19db      	adds	r3, r3, r7
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	e055      	b.n	80073fa <UART_SetConfig+0x246>
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5c      	ldr	r2, [pc, #368]	; (80074c4 <UART_SetConfig+0x310>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d106      	bne.n	8007366 <UART_SetConfig+0x1b2>
 8007358:	231b      	movs	r3, #27
 800735a:	2220      	movs	r2, #32
 800735c:	189b      	adds	r3, r3, r2
 800735e:	19db      	adds	r3, r3, r7
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e049      	b.n	80073fa <UART_SetConfig+0x246>
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a50      	ldr	r2, [pc, #320]	; (80074ac <UART_SetConfig+0x2f8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d13e      	bne.n	80073ee <UART_SetConfig+0x23a>
 8007370:	4b51      	ldr	r3, [pc, #324]	; (80074b8 <UART_SetConfig+0x304>)
 8007372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007374:	23c0      	movs	r3, #192	; 0xc0
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	4013      	ands	r3, r2
 800737a:	22c0      	movs	r2, #192	; 0xc0
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	4293      	cmp	r3, r2
 8007380:	d027      	beq.n	80073d2 <UART_SetConfig+0x21e>
 8007382:	22c0      	movs	r2, #192	; 0xc0
 8007384:	0112      	lsls	r2, r2, #4
 8007386:	4293      	cmp	r3, r2
 8007388:	d82a      	bhi.n	80073e0 <UART_SetConfig+0x22c>
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	0112      	lsls	r2, r2, #4
 800738e:	4293      	cmp	r3, r2
 8007390:	d011      	beq.n	80073b6 <UART_SetConfig+0x202>
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	0112      	lsls	r2, r2, #4
 8007396:	4293      	cmp	r3, r2
 8007398:	d822      	bhi.n	80073e0 <UART_SetConfig+0x22c>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <UART_SetConfig+0x1f4>
 800739e:	2280      	movs	r2, #128	; 0x80
 80073a0:	00d2      	lsls	r2, r2, #3
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <UART_SetConfig+0x210>
 80073a6:	e01b      	b.n	80073e0 <UART_SetConfig+0x22c>
 80073a8:	231b      	movs	r3, #27
 80073aa:	2220      	movs	r2, #32
 80073ac:	189b      	adds	r3, r3, r2
 80073ae:	19db      	adds	r3, r3, r7
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	e021      	b.n	80073fa <UART_SetConfig+0x246>
 80073b6:	231b      	movs	r3, #27
 80073b8:	2220      	movs	r2, #32
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	19db      	adds	r3, r3, r7
 80073be:	2202      	movs	r2, #2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e01a      	b.n	80073fa <UART_SetConfig+0x246>
 80073c4:	231b      	movs	r3, #27
 80073c6:	2220      	movs	r2, #32
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	19db      	adds	r3, r3, r7
 80073cc:	2204      	movs	r2, #4
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	e013      	b.n	80073fa <UART_SetConfig+0x246>
 80073d2:	231b      	movs	r3, #27
 80073d4:	2220      	movs	r2, #32
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	2208      	movs	r2, #8
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e00c      	b.n	80073fa <UART_SetConfig+0x246>
 80073e0:	231b      	movs	r3, #27
 80073e2:	2220      	movs	r2, #32
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	19db      	adds	r3, r3, r7
 80073e8:	2210      	movs	r2, #16
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e005      	b.n	80073fa <UART_SetConfig+0x246>
 80073ee:	231b      	movs	r3, #27
 80073f0:	2220      	movs	r2, #32
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	19db      	adds	r3, r3, r7
 80073f6:	2210      	movs	r2, #16
 80073f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2b      	ldr	r2, [pc, #172]	; (80074ac <UART_SetConfig+0x2f8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d000      	beq.n	8007406 <UART_SetConfig+0x252>
 8007404:	e0a9      	b.n	800755a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007406:	231b      	movs	r3, #27
 8007408:	2220      	movs	r2, #32
 800740a:	189b      	adds	r3, r3, r2
 800740c:	19db      	adds	r3, r3, r7
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d015      	beq.n	8007440 <UART_SetConfig+0x28c>
 8007414:	dc18      	bgt.n	8007448 <UART_SetConfig+0x294>
 8007416:	2b04      	cmp	r3, #4
 8007418:	d00d      	beq.n	8007436 <UART_SetConfig+0x282>
 800741a:	dc15      	bgt.n	8007448 <UART_SetConfig+0x294>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <UART_SetConfig+0x272>
 8007420:	2b02      	cmp	r3, #2
 8007422:	d005      	beq.n	8007430 <UART_SetConfig+0x27c>
 8007424:	e010      	b.n	8007448 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007426:	f7fd fb9f 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 800742a:	0003      	movs	r3, r0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007430:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <UART_SetConfig+0x314>)
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007434:	e011      	b.n	800745a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007436:	f7fd fb0b 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 800743a:	0003      	movs	r3, r0
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800743e:	e00c      	b.n	800745a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007440:	2380      	movs	r3, #128	; 0x80
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007446:	e008      	b.n	800745a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800744c:	231a      	movs	r3, #26
 800744e:	2220      	movs	r2, #32
 8007450:	189b      	adds	r3, r3, r2
 8007452:	19db      	adds	r3, r3, r7
 8007454:	2201      	movs	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]
        break;
 8007458:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	2b00      	cmp	r3, #0
 800745e:	d100      	bne.n	8007462 <UART_SetConfig+0x2ae>
 8007460:	e14b      	b.n	80076fa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <UART_SetConfig+0x318>)
 8007468:	0052      	lsls	r2, r2, #1
 800746a:	5ad3      	ldrh	r3, [r2, r3]
 800746c:	0019      	movs	r1, r3
 800746e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007470:	f7f8 fe64 	bl	800013c <__udivsi3>
 8007474:	0003      	movs	r3, r0
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	0013      	movs	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	189b      	adds	r3, r3, r2
 8007482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007484:	429a      	cmp	r2, r3
 8007486:	d305      	bcc.n	8007494 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800748e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007490:	429a      	cmp	r2, r3
 8007492:	d91d      	bls.n	80074d0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007494:	231a      	movs	r3, #26
 8007496:	2220      	movs	r2, #32
 8007498:	189b      	adds	r3, r3, r2
 800749a:	19db      	adds	r3, r3, r7
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e12b      	b.n	80076fa <UART_SetConfig+0x546>
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	cfff69f3 	.word	0xcfff69f3
 80074a8:	ffffcfff 	.word	0xffffcfff
 80074ac:	40008000 	.word	0x40008000
 80074b0:	11fff4ff 	.word	0x11fff4ff
 80074b4:	40013800 	.word	0x40013800
 80074b8:	40021000 	.word	0x40021000
 80074bc:	40004400 	.word	0x40004400
 80074c0:	40004800 	.word	0x40004800
 80074c4:	40004c00 	.word	0x40004c00
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	08014748 	.word	0x08014748
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074dc:	4b92      	ldr	r3, [pc, #584]	; (8007728 <UART_SetConfig+0x574>)
 80074de:	0052      	lsls	r2, r2, #1
 80074e0:	5ad3      	ldrh	r3, [r2, r3]
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	69b8      	ldr	r0, [r7, #24]
 80074ee:	69f9      	ldr	r1, [r7, #28]
 80074f0:	f7f8 ffd8 	bl	80004a4 <__aeabi_uldivmod>
 80074f4:	0002      	movs	r2, r0
 80074f6:	000b      	movs	r3, r1
 80074f8:	0e11      	lsrs	r1, r2, #24
 80074fa:	021d      	lsls	r5, r3, #8
 80074fc:	430d      	orrs	r5, r1
 80074fe:	0214      	lsls	r4, r2, #8
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	1900      	adds	r0, r0, r4
 8007512:	4169      	adcs	r1, r5
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f7f8 ffbf 	bl	80004a4 <__aeabi_uldivmod>
 8007526:	0002      	movs	r2, r0
 8007528:	000b      	movs	r3, r1
 800752a:	0013      	movs	r3, r2
 800752c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800752e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007530:	23c0      	movs	r3, #192	; 0xc0
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	429a      	cmp	r2, r3
 8007536:	d309      	bcc.n	800754c <UART_SetConfig+0x398>
 8007538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	035b      	lsls	r3, r3, #13
 800753e:	429a      	cmp	r2, r3
 8007540:	d204      	bcs.n	800754c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007548:	60da      	str	r2, [r3, #12]
 800754a:	e0d6      	b.n	80076fa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800754c:	231a      	movs	r3, #26
 800754e:	2220      	movs	r2, #32
 8007550:	189b      	adds	r3, r3, r2
 8007552:	19db      	adds	r3, r3, r7
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e0cf      	b.n	80076fa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	69da      	ldr	r2, [r3, #28]
 800755e:	2380      	movs	r3, #128	; 0x80
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	429a      	cmp	r2, r3
 8007564:	d000      	beq.n	8007568 <UART_SetConfig+0x3b4>
 8007566:	e070      	b.n	800764a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007568:	231b      	movs	r3, #27
 800756a:	2220      	movs	r2, #32
 800756c:	189b      	adds	r3, r3, r2
 800756e:	19db      	adds	r3, r3, r7
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b08      	cmp	r3, #8
 8007574:	d015      	beq.n	80075a2 <UART_SetConfig+0x3ee>
 8007576:	dc18      	bgt.n	80075aa <UART_SetConfig+0x3f6>
 8007578:	2b04      	cmp	r3, #4
 800757a:	d00d      	beq.n	8007598 <UART_SetConfig+0x3e4>
 800757c:	dc15      	bgt.n	80075aa <UART_SetConfig+0x3f6>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <UART_SetConfig+0x3d4>
 8007582:	2b02      	cmp	r3, #2
 8007584:	d005      	beq.n	8007592 <UART_SetConfig+0x3de>
 8007586:	e010      	b.n	80075aa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fd faee 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 800758c:	0003      	movs	r3, r0
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007590:	e014      	b.n	80075bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007592:	4b66      	ldr	r3, [pc, #408]	; (800772c <UART_SetConfig+0x578>)
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007596:	e011      	b.n	80075bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007598:	f7fd fa5a 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 800759c:	0003      	movs	r3, r0
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a0:	e00c      	b.n	80075bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a8:	e008      	b.n	80075bc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075ae:	231a      	movs	r3, #26
 80075b0:	2220      	movs	r2, #32
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	19db      	adds	r3, r3, r7
 80075b6:	2201      	movs	r2, #1
 80075b8:	701a      	strb	r2, [r3, #0]
        break;
 80075ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d100      	bne.n	80075c4 <UART_SetConfig+0x410>
 80075c2:	e09a      	b.n	80076fa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c8:	4b57      	ldr	r3, [pc, #348]	; (8007728 <UART_SetConfig+0x574>)
 80075ca:	0052      	lsls	r2, r2, #1
 80075cc:	5ad3      	ldrh	r3, [r2, r3]
 80075ce:	0019      	movs	r1, r3
 80075d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075d2:	f7f8 fdb3 	bl	800013c <__udivsi3>
 80075d6:	0003      	movs	r3, r0
 80075d8:	005a      	lsls	r2, r3, #1
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	18d2      	adds	r2, r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	0019      	movs	r1, r3
 80075e8:	0010      	movs	r0, r2
 80075ea:	f7f8 fda7 	bl	800013c <__udivsi3>
 80075ee:	0003      	movs	r3, r0
 80075f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	2b0f      	cmp	r3, #15
 80075f6:	d921      	bls.n	800763c <UART_SetConfig+0x488>
 80075f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	025b      	lsls	r3, r3, #9
 80075fe:	429a      	cmp	r2, r3
 8007600:	d21c      	bcs.n	800763c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	b29a      	uxth	r2, r3
 8007606:	200e      	movs	r0, #14
 8007608:	2420      	movs	r4, #32
 800760a:	1903      	adds	r3, r0, r4
 800760c:	19db      	adds	r3, r3, r7
 800760e:	210f      	movs	r1, #15
 8007610:	438a      	bics	r2, r1
 8007612:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	2207      	movs	r2, #7
 800761c:	4013      	ands	r3, r2
 800761e:	b299      	uxth	r1, r3
 8007620:	1903      	adds	r3, r0, r4
 8007622:	19db      	adds	r3, r3, r7
 8007624:	1902      	adds	r2, r0, r4
 8007626:	19d2      	adds	r2, r2, r7
 8007628:	8812      	ldrh	r2, [r2, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	1902      	adds	r2, r0, r4
 8007634:	19d2      	adds	r2, r2, r7
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e05e      	b.n	80076fa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	231a      	movs	r3, #26
 800763e:	2220      	movs	r2, #32
 8007640:	189b      	adds	r3, r3, r2
 8007642:	19db      	adds	r3, r3, r7
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
 8007648:	e057      	b.n	80076fa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800764a:	231b      	movs	r3, #27
 800764c:	2220      	movs	r2, #32
 800764e:	189b      	adds	r3, r3, r2
 8007650:	19db      	adds	r3, r3, r7
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b08      	cmp	r3, #8
 8007656:	d015      	beq.n	8007684 <UART_SetConfig+0x4d0>
 8007658:	dc18      	bgt.n	800768c <UART_SetConfig+0x4d8>
 800765a:	2b04      	cmp	r3, #4
 800765c:	d00d      	beq.n	800767a <UART_SetConfig+0x4c6>
 800765e:	dc15      	bgt.n	800768c <UART_SetConfig+0x4d8>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <UART_SetConfig+0x4b6>
 8007664:	2b02      	cmp	r3, #2
 8007666:	d005      	beq.n	8007674 <UART_SetConfig+0x4c0>
 8007668:	e010      	b.n	800768c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766a:	f7fd fa7d 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 800766e:	0003      	movs	r3, r0
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007672:	e014      	b.n	800769e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007674:	4b2d      	ldr	r3, [pc, #180]	; (800772c <UART_SetConfig+0x578>)
 8007676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007678:	e011      	b.n	800769e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767a:	f7fd f9e9 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 800767e:	0003      	movs	r3, r0
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007682:	e00c      	b.n	800769e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800768a:	e008      	b.n	800769e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007690:	231a      	movs	r3, #26
 8007692:	2220      	movs	r2, #32
 8007694:	189b      	adds	r3, r3, r2
 8007696:	19db      	adds	r3, r3, r7
 8007698:	2201      	movs	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]
        break;
 800769c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02a      	beq.n	80076fa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076a8:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <UART_SetConfig+0x574>)
 80076aa:	0052      	lsls	r2, r2, #1
 80076ac:	5ad3      	ldrh	r3, [r2, r3]
 80076ae:	0019      	movs	r1, r3
 80076b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076b2:	f7f8 fd43 	bl	800013c <__udivsi3>
 80076b6:	0003      	movs	r3, r0
 80076b8:	001a      	movs	r2, r3
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	18d2      	adds	r2, r2, r3
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	0019      	movs	r1, r3
 80076c8:	0010      	movs	r0, r2
 80076ca:	f7f8 fd37 	bl	800013c <__udivsi3>
 80076ce:	0003      	movs	r3, r0
 80076d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b0f      	cmp	r3, #15
 80076d6:	d90a      	bls.n	80076ee <UART_SetConfig+0x53a>
 80076d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076da:	2380      	movs	r3, #128	; 0x80
 80076dc:	025b      	lsls	r3, r3, #9
 80076de:	429a      	cmp	r2, r3
 80076e0:	d205      	bcs.n	80076ee <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e005      	b.n	80076fa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80076ee:	231a      	movs	r3, #26
 80076f0:	2220      	movs	r2, #32
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	19db      	adds	r3, r3, r7
 80076f6:	2201      	movs	r2, #1
 80076f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	226a      	movs	r2, #106	; 0x6a
 80076fe:	2101      	movs	r1, #1
 8007700:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	2268      	movs	r2, #104	; 0x68
 8007706:	2101      	movs	r1, #1
 8007708:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	2200      	movs	r2, #0
 800770e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	2200      	movs	r2, #0
 8007714:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007716:	231a      	movs	r3, #26
 8007718:	2220      	movs	r2, #32
 800771a:	189b      	adds	r3, r3, r2
 800771c:	19db      	adds	r3, r3, r7
 800771e:	781b      	ldrb	r3, [r3, #0]
}
 8007720:	0018      	movs	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	b010      	add	sp, #64	; 0x40
 8007726:	bdb0      	pop	{r4, r5, r7, pc}
 8007728:	08014748 	.word	0x08014748
 800772c:	00f42400 	.word	0x00f42400

08007730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2201      	movs	r2, #1
 800773e:	4013      	ands	r3, r2
 8007740:	d00b      	beq.n	800775a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4a4a      	ldr	r2, [pc, #296]	; (8007874 <UART_AdvFeatureConfig+0x144>)
 800774a:	4013      	ands	r3, r2
 800774c:	0019      	movs	r1, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2202      	movs	r2, #2
 8007760:	4013      	ands	r3, r2
 8007762:	d00b      	beq.n	800777c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4a43      	ldr	r2, [pc, #268]	; (8007878 <UART_AdvFeatureConfig+0x148>)
 800776c:	4013      	ands	r3, r2
 800776e:	0019      	movs	r1, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	2204      	movs	r2, #4
 8007782:	4013      	ands	r3, r2
 8007784:	d00b      	beq.n	800779e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a3b      	ldr	r2, [pc, #236]	; (800787c <UART_AdvFeatureConfig+0x14c>)
 800778e:	4013      	ands	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	2208      	movs	r2, #8
 80077a4:	4013      	ands	r3, r2
 80077a6:	d00b      	beq.n	80077c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4a34      	ldr	r2, [pc, #208]	; (8007880 <UART_AdvFeatureConfig+0x150>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	0019      	movs	r1, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	2210      	movs	r2, #16
 80077c6:	4013      	ands	r3, r2
 80077c8:	d00b      	beq.n	80077e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4a2c      	ldr	r2, [pc, #176]	; (8007884 <UART_AdvFeatureConfig+0x154>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	2220      	movs	r2, #32
 80077e8:	4013      	ands	r3, r2
 80077ea:	d00b      	beq.n	8007804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	4a25      	ldr	r2, [pc, #148]	; (8007888 <UART_AdvFeatureConfig+0x158>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	2240      	movs	r2, #64	; 0x40
 800780a:	4013      	ands	r3, r2
 800780c:	d01d      	beq.n	800784a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4a1d      	ldr	r2, [pc, #116]	; (800788c <UART_AdvFeatureConfig+0x15c>)
 8007816:	4013      	ands	r3, r2
 8007818:	0019      	movs	r1, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	035b      	lsls	r3, r3, #13
 800782e:	429a      	cmp	r2, r3
 8007830:	d10b      	bne.n	800784a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	4a15      	ldr	r2, [pc, #84]	; (8007890 <UART_AdvFeatureConfig+0x160>)
 800783a:	4013      	ands	r3, r2
 800783c:	0019      	movs	r1, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	4013      	ands	r3, r2
 8007852:	d00b      	beq.n	800786c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4a0e      	ldr	r2, [pc, #56]	; (8007894 <UART_AdvFeatureConfig+0x164>)
 800785c:	4013      	ands	r3, r2
 800785e:	0019      	movs	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	605a      	str	r2, [r3, #4]
  }
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b002      	add	sp, #8
 8007872:	bd80      	pop	{r7, pc}
 8007874:	fffdffff 	.word	0xfffdffff
 8007878:	fffeffff 	.word	0xfffeffff
 800787c:	fffbffff 	.word	0xfffbffff
 8007880:	ffff7fff 	.word	0xffff7fff
 8007884:	ffffefff 	.word	0xffffefff
 8007888:	ffffdfff 	.word	0xffffdfff
 800788c:	ffefffff 	.word	0xffefffff
 8007890:	ff9fffff 	.word	0xff9fffff
 8007894:	fff7ffff 	.word	0xfff7ffff

08007898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2290      	movs	r2, #144	; 0x90
 80078a4:	2100      	movs	r1, #0
 80078a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078a8:	f7fc f84c 	bl	8003944 <HAL_GetTick>
 80078ac:	0003      	movs	r3, r0
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2208      	movs	r2, #8
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d10c      	bne.n	80078d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	0391      	lsls	r1, r2, #14
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <UART_CheckIdleState+0x98>)
 80078c8:	9200      	str	r2, [sp, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f000 f832 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 80078d0:	1e03      	subs	r3, r0, #0
 80078d2:	d001      	beq.n	80078d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e026      	b.n	8007926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2204      	movs	r2, #4
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d10c      	bne.n	8007900 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2280      	movs	r2, #128	; 0x80
 80078ea:	03d1      	lsls	r1, r2, #15
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <UART_CheckIdleState+0x98>)
 80078f0:	9200      	str	r2, [sp, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f000 f81e 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 80078f8:	1e03      	subs	r3, r0, #0
 80078fa:	d001      	beq.n	8007900 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e012      	b.n	8007926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2288      	movs	r2, #136	; 0x88
 8007904:	2120      	movs	r1, #32
 8007906:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	228c      	movs	r2, #140	; 0x8c
 800790c:	2120      	movs	r1, #32
 800790e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2284      	movs	r2, #132	; 0x84
 8007920:	2100      	movs	r1, #0
 8007922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	0018      	movs	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	b004      	add	sp, #16
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	01ffffff 	.word	0x01ffffff

08007934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b094      	sub	sp, #80	; 0x50
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	1dfb      	adds	r3, r7, #7
 8007942:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007944:	e0a7      	b.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007948:	3301      	adds	r3, #1
 800794a:	d100      	bne.n	800794e <UART_WaitOnFlagUntilTimeout+0x1a>
 800794c:	e0a3      	b.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fb fff9 	bl	8003944 <HAL_GetTick>
 8007952:	0002      	movs	r2, r0
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <UART_WaitOnFlagUntilTimeout+0x30>
 800795e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007960:	2b00      	cmp	r3, #0
 8007962:	d13f      	bne.n	80079e4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800796c:	647b      	str	r3, [r7, #68]	; 0x44
 800796e:	2301      	movs	r3, #1
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	494e      	ldr	r1, [pc, #312]	; (8007ac0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007986:	400a      	ands	r2, r1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	f383 8810 	msr	PRIMASK, r3
}
 8007994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	643b      	str	r3, [r7, #64]	; 0x40
 80079a0:	2301      	movs	r3, #1
 80079a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2101      	movs	r1, #1
 80079b8:	438a      	bics	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2288      	movs	r2, #136	; 0x88
 80079cc:	2120      	movs	r1, #32
 80079ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	228c      	movs	r2, #140	; 0x8c
 80079d4:	2120      	movs	r1, #32
 80079d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2284      	movs	r2, #132	; 0x84
 80079dc:	2100      	movs	r1, #0
 80079de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e069      	b.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2204      	movs	r2, #4
 80079ec:	4013      	ands	r3, r2
 80079ee:	d052      	beq.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	2380      	movs	r3, #128	; 0x80
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	401a      	ands	r2, r3
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d148      	bne.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2280      	movs	r2, #128	; 0x80
 8007a0a:	0112      	lsls	r2, r2, #4
 8007a0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a12:	613b      	str	r3, [r7, #16]
  return(result);
 8007a14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f383 8810 	msr	PRIMASK, r3
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4924      	ldr	r1, [pc, #144]	; (8007ac0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007a30:	400a      	ands	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f383 8810 	msr	PRIMASK, r3
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a40:	f3ef 8310 	mrs	r3, PRIMASK
 8007a44:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a46:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2101      	movs	r1, #1
 8007a62:	438a      	bics	r2, r1
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2288      	movs	r2, #136	; 0x88
 8007a76:	2120      	movs	r1, #32
 8007a78:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	228c      	movs	r2, #140	; 0x8c
 8007a7e:	2120      	movs	r1, #32
 8007a80:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2290      	movs	r2, #144	; 0x90
 8007a86:	2120      	movs	r1, #32
 8007a88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2284      	movs	r2, #132	; 0x84
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e010      	b.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	425a      	negs	r2, r3
 8007aa6:	4153      	adcs	r3, r2
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	001a      	movs	r2, r3
 8007aac:	1dfb      	adds	r3, r7, #7
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d100      	bne.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x182>
 8007ab4:	e747      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	0018      	movs	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b014      	add	sp, #80	; 0x50
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	fffffe5f 	.word	0xfffffe5f

08007ac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2284      	movs	r2, #132	; 0x84
 8007ad0:	5c9b      	ldrb	r3, [r3, r2]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_UARTEx_DisableFifoMode+0x16>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e027      	b.n	8007b2a <HAL_UARTEx_DisableFifoMode+0x66>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2284      	movs	r2, #132	; 0x84
 8007ade:	2101      	movs	r1, #1
 8007ae0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2288      	movs	r2, #136	; 0x88
 8007ae6:	2124      	movs	r1, #36	; 0x24
 8007ae8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2101      	movs	r1, #1
 8007afe:	438a      	bics	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4a0b      	ldr	r2, [pc, #44]	; (8007b34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2288      	movs	r2, #136	; 0x88
 8007b1c:	2120      	movs	r1, #32
 8007b1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2284      	movs	r2, #132	; 0x84
 8007b24:	2100      	movs	r1, #0
 8007b26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	b004      	add	sp, #16
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	dfffffff 	.word	0xdfffffff

08007b38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2284      	movs	r2, #132	; 0x84
 8007b46:	5c9b      	ldrb	r3, [r3, r2]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e02e      	b.n	8007bae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2284      	movs	r2, #132	; 0x84
 8007b54:	2101      	movs	r1, #1
 8007b56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2288      	movs	r2, #136	; 0x88
 8007b5c:	2124      	movs	r1, #36	; 0x24
 8007b5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2101      	movs	r1, #1
 8007b74:	438a      	bics	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	08d9      	lsrs	r1, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f000 f854 	bl	8007c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2288      	movs	r2, #136	; 0x88
 8007ba0:	2120      	movs	r1, #32
 8007ba2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2284      	movs	r2, #132	; 0x84
 8007ba8:	2100      	movs	r1, #0
 8007baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b004      	add	sp, #16
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2284      	movs	r2, #132	; 0x84
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e02f      	b.n	8007c30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2284      	movs	r2, #132	; 0x84
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2288      	movs	r2, #136	; 0x88
 8007bdc:	2124      	movs	r1, #36	; 0x24
 8007bde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	438a      	bics	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	0019      	movs	r1, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f000 f813 	bl	8007c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2288      	movs	r2, #136	; 0x88
 8007c22:	2120      	movs	r1, #32
 8007c24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2284      	movs	r2, #132	; 0x84
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b004      	add	sp, #16
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	f1ffffff 	.word	0xf1ffffff

08007c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d108      	bne.n	8007c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	226a      	movs	r2, #106	; 0x6a
 8007c50:	2101      	movs	r1, #1
 8007c52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2268      	movs	r2, #104	; 0x68
 8007c58:	2101      	movs	r1, #1
 8007c5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c5c:	e043      	b.n	8007ce6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c5e:	260f      	movs	r6, #15
 8007c60:	19bb      	adds	r3, r7, r6
 8007c62:	2208      	movs	r2, #8
 8007c64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c66:	200e      	movs	r0, #14
 8007c68:	183b      	adds	r3, r7, r0
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	0e5b      	lsrs	r3, r3, #25
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	240d      	movs	r4, #13
 8007c7a:	193b      	adds	r3, r7, r4
 8007c7c:	2107      	movs	r1, #7
 8007c7e:	400a      	ands	r2, r1
 8007c80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	0f5b      	lsrs	r3, r3, #29
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	250c      	movs	r5, #12
 8007c8e:	197b      	adds	r3, r7, r5
 8007c90:	2107      	movs	r1, #7
 8007c92:	400a      	ands	r2, r1
 8007c94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c96:	183b      	adds	r3, r7, r0
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	197a      	adds	r2, r7, r5
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	4914      	ldr	r1, [pc, #80]	; (8007cf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007ca0:	5c8a      	ldrb	r2, [r1, r2]
 8007ca2:	435a      	muls	r2, r3
 8007ca4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ca6:	197b      	adds	r3, r7, r5
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	4a12      	ldr	r2, [pc, #72]	; (8007cf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007cac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cae:	0019      	movs	r1, r3
 8007cb0:	f7f8 face 	bl	8000250 <__divsi3>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	b299      	uxth	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	226a      	movs	r2, #106	; 0x6a
 8007cbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cbe:	19bb      	adds	r3, r7, r6
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	193a      	adds	r2, r7, r4
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	490a      	ldr	r1, [pc, #40]	; (8007cf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007cc8:	5c8a      	ldrb	r2, [r1, r2]
 8007cca:	435a      	muls	r2, r3
 8007ccc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cce:	193b      	adds	r3, r7, r4
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007cd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cd6:	0019      	movs	r1, r3
 8007cd8:	f7f8 faba 	bl	8000250 <__divsi3>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	b299      	uxth	r1, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2268      	movs	r2, #104	; 0x68
 8007ce4:	5299      	strh	r1, [r3, r2]
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b005      	add	sp, #20
 8007cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	08014760 	.word	0x08014760
 8007cf4:	08014768 	.word	0x08014768

08007cf8 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007cf8:	b5b0      	push	{r4, r5, r7, lr}
 8007cfa:	b0e4      	sub	sp, #400	; 0x190
 8007cfc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cfe:	24c8      	movs	r4, #200	; 0xc8
 8007d00:	193b      	adds	r3, r7, r4
 8007d02:	0018      	movs	r0, r3
 8007d04:	23c6      	movs	r3, #198	; 0xc6
 8007d06:	001a      	movs	r2, r3
 8007d08:	2100      	movs	r1, #0
 8007d0a:	f004 fab7 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <astronode_send_cfg_sr+0x64>)
 8007d10:	25c8      	movs	r5, #200	; 0xc8
 8007d12:	006d      	lsls	r5, r5, #1
 8007d14:	195b      	adds	r3, r3, r5
 8007d16:	19db      	adds	r3, r3, r7
 8007d18:	0018      	movs	r0, r3
 8007d1a:	23c6      	movs	r3, #198	; 0xc6
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	2100      	movs	r1, #0
 8007d20:	f004 faac 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007d24:	193b      	adds	r3, r7, r4
 8007d26:	2210      	movs	r2, #16
 8007d28:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007d2a:	003a      	movs	r2, r7
 8007d2c:	193b      	adds	r3, r7, r4
 8007d2e:	0011      	movs	r1, r2
 8007d30:	0018      	movs	r0, r3
 8007d32:	f001 faad 	bl	8009290 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <astronode_send_cfg_sr+0x64>)
 8007d38:	195b      	adds	r3, r3, r5
 8007d3a:	19db      	adds	r3, r3, r7
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b90      	cmp	r3, #144	; 0x90
 8007d40:	d104      	bne.n	8007d4c <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <astronode_send_cfg_sr+0x68>)
 8007d44:	0018      	movs	r0, r3
 8007d46:	f7fb f83d 	bl	8002dc4 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007d4a:	e003      	b.n	8007d54 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <astronode_send_cfg_sr+0x6c>)
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f7fb f838 	bl	8002dc4 <send_debug_logs>
}
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b064      	add	sp, #400	; 0x190
 8007d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d5c:	fffffe70 	.word	0xfffffe70
 8007d60:	080132d0 	.word	0x080132d0
 8007d64:	08013304 	.word	0x08013304

08007d68 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6a:	b0e7      	sub	sp, #412	; 0x19c
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	0005      	movs	r5, r0
 8007d70:	000c      	movs	r4, r1
 8007d72:	0010      	movs	r0, r2
 8007d74:	0019      	movs	r1, r3
 8007d76:	4b4b      	ldr	r3, [pc, #300]	; (8007ea4 <astronode_send_cfg_wr+0x13c>)
 8007d78:	26cc      	movs	r6, #204	; 0xcc
 8007d7a:	0076      	lsls	r6, r6, #1
 8007d7c:	199b      	adds	r3, r3, r6
 8007d7e:	19db      	adds	r3, r3, r7
 8007d80:	1c2a      	adds	r2, r5, #0
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	4b48      	ldr	r3, [pc, #288]	; (8007ea8 <astronode_send_cfg_wr+0x140>)
 8007d86:	0035      	movs	r5, r6
 8007d88:	195b      	adds	r3, r3, r5
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	1c22      	adds	r2, r4, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	4b46      	ldr	r3, [pc, #280]	; (8007eac <astronode_send_cfg_wr+0x144>)
 8007d92:	002c      	movs	r4, r5
 8007d94:	191b      	adds	r3, r3, r4
 8007d96:	19db      	adds	r3, r3, r7
 8007d98:	1c02      	adds	r2, r0, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	4b44      	ldr	r3, [pc, #272]	; (8007eb0 <astronode_send_cfg_wr+0x148>)
 8007d9e:	191b      	adds	r3, r3, r4
 8007da0:	19db      	adds	r3, r3, r7
 8007da2:	1c0a      	adds	r2, r1, #0
 8007da4:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007da6:	25d0      	movs	r5, #208	; 0xd0
 8007da8:	197b      	adds	r3, r7, r5
 8007daa:	0018      	movs	r0, r3
 8007dac:	23c6      	movs	r3, #198	; 0xc6
 8007dae:	001a      	movs	r2, r3
 8007db0:	2100      	movs	r1, #0
 8007db2:	f004 fa63 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8007db6:	4b3f      	ldr	r3, [pc, #252]	; (8007eb4 <astronode_send_cfg_wr+0x14c>)
 8007db8:	191b      	adds	r3, r3, r4
 8007dba:	19db      	adds	r3, r3, r7
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	23c6      	movs	r3, #198	; 0xc6
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	f004 fa5a 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007dc8:	0029      	movs	r1, r5
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	2205      	movs	r2, #5
 8007dce:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007dd0:	4b34      	ldr	r3, [pc, #208]	; (8007ea4 <astronode_send_cfg_wr+0x13c>)
 8007dd2:	191b      	adds	r3, r3, r4
 8007dd4:	19db      	adds	r3, r3, r7
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	569a      	ldrsb	r2, [r3, r2]
 8007dda:	4b33      	ldr	r3, [pc, #204]	; (8007ea8 <astronode_send_cfg_wr+0x140>)
 8007ddc:	191b      	adds	r3, r3, r4
 8007dde:	19db      	adds	r3, r3, r7
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007dea:	4b30      	ldr	r3, [pc, #192]	; (8007eac <astronode_send_cfg_wr+0x144>)
 8007dec:	191b      	adds	r3, r3, r4
 8007dee:	19db      	adds	r3, r3, r7
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007dfa:	4b2d      	ldr	r3, [pc, #180]	; (8007eb0 <astronode_send_cfg_wr+0x148>)
 8007dfc:	191b      	adds	r3, r3, r4
 8007dfe:	19db      	adds	r3, r3, r7
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007e10:	23d4      	movs	r3, #212	; 0xd4
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	2508      	movs	r5, #8
 8007e16:	195b      	adds	r3, r3, r5
 8007e18:	19db      	adds	r3, r3, r7
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	569a      	ldrsb	r2, [r3, r2]
 8007e1e:	23d6      	movs	r3, #214	; 0xd6
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	195b      	adds	r3, r3, r5
 8007e24:	19db      	adds	r3, r3, r7
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	b25b      	sxtb	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007e30:	23d8      	movs	r3, #216	; 0xd8
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	195b      	adds	r3, r3, r5
 8007e36:	19db      	adds	r3, r3, r7
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007e42:	23da      	movs	r3, #218	; 0xda
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	195b      	adds	r3, r3, r5
 8007e48:	19db      	adds	r3, r3, r7
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007e56:	187b      	adds	r3, r7, r1
 8007e58:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007e5a:	0008      	movs	r0, r1
 8007e5c:	187b      	adds	r3, r7, r1
 8007e5e:	22c4      	movs	r2, #196	; 0xc4
 8007e60:	2103      	movs	r1, #3
 8007e62:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e64:	002b      	movs	r3, r5
 8007e66:	18fa      	adds	r2, r7, r3
 8007e68:	183b      	adds	r3, r7, r0
 8007e6a:	0011      	movs	r1, r2
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f001 fa0f 	bl	8009290 <astronode_transport_send_receive>
 8007e72:	0003      	movs	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10f      	bne.n	8007e98 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <astronode_send_cfg_wr+0x14c>)
 8007e7a:	191b      	adds	r3, r3, r4
 8007e7c:	19db      	adds	r3, r3, r7
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b85      	cmp	r3, #133	; 0x85
 8007e82:	d105      	bne.n	8007e90 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <astronode_send_cfg_wr+0x150>)
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7fa ff9c 	bl	8002dc4 <send_debug_logs>
            return true ;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e004      	b.n	8007e9a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <astronode_send_cfg_wr+0x154>)
 8007e92:	0018      	movs	r0, r3
 8007e94:	f7fa ff96 	bl	8002dc4 <send_debug_logs>
        }
    }
    return false ;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b067      	add	sp, #412	; 0x19c
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	fffffe6f 	.word	0xfffffe6f
 8007ea8:	fffffe6e 	.word	0xfffffe6e
 8007eac:	fffffe6d 	.word	0xfffffe6d
 8007eb0:	fffffe6c 	.word	0xfffffe6c
 8007eb4:	fffffe70 	.word	0xfffffe70
 8007eb8:	08013338 	.word	0x08013338
 8007ebc:	08013364 	.word	0x08013364

08007ec0 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec2:	b0ed      	sub	sp, #436	; 0x1b4
 8007ec4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ec6:	21c8      	movs	r1, #200	; 0xc8
 8007ec8:	2318      	movs	r3, #24
 8007eca:	18cb      	adds	r3, r1, r3
 8007ecc:	19db      	adds	r3, r3, r7
 8007ece:	0018      	movs	r0, r3
 8007ed0:	23c6      	movs	r3, #198	; 0xc6
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f004 f9d1 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <astronode_send_mgi_rr+0x144>)
 8007edc:	26cc      	movs	r6, #204	; 0xcc
 8007ede:	0076      	lsls	r6, r6, #1
 8007ee0:	199b      	adds	r3, r3, r6
 8007ee2:	2218      	movs	r2, #24
 8007ee4:	4694      	mov	ip, r2
 8007ee6:	44bc      	add	ip, r7
 8007ee8:	4463      	add	r3, ip
 8007eea:	0018      	movs	r0, r3
 8007eec:	23c6      	movs	r3, #198	; 0xc6
 8007eee:	001a      	movs	r2, r3
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	f004 f9c3 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007ef6:	21c8      	movs	r1, #200	; 0xc8
 8007ef8:	2318      	movs	r3, #24
 8007efa:	18cb      	adds	r3, r1, r3
 8007efc:	19db      	adds	r3, r3, r7
 8007efe:	2219      	movs	r2, #25
 8007f00:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f02:	2318      	movs	r3, #24
 8007f04:	18fa      	adds	r2, r7, r3
 8007f06:	2318      	movs	r3, #24
 8007f08:	18cb      	adds	r3, r1, r3
 8007f0a:	19db      	adds	r3, r3, r7
 8007f0c:	0011      	movs	r1, r2
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f001 f9be 	bl	8009290 <astronode_transport_send_receive>
 8007f14:	0003      	movs	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d16f      	bne.n	8007ffa <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007f1a:	4b3a      	ldr	r3, [pc, #232]	; (8008004 <astronode_send_mgi_rr+0x144>)
 8007f1c:	0032      	movs	r2, r6
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	2118      	movs	r1, #24
 8007f22:	468c      	mov	ip, r1
 8007f24:	44bc      	add	ip, r7
 8007f26:	4463      	add	r3, ip
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b99      	cmp	r3, #153	; 0x99
 8007f2c:	d161      	bne.n	8007ff2 <astronode_send_mgi_rr+0x132>
        {
 8007f2e:	466b      	mov	r3, sp
 8007f30:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007f32:	4b34      	ldr	r3, [pc, #208]	; (8008004 <astronode_send_mgi_rr+0x144>)
 8007f34:	189b      	adds	r3, r3, r2
 8007f36:	2218      	movs	r2, #24
 8007f38:	4694      	mov	ip, r2
 8007f3a:	44bc      	add	ip, r7
 8007f3c:	4463      	add	r3, ip
 8007f3e:	22c4      	movs	r2, #196	; 0xc4
 8007f40:	5a9b      	ldrh	r3, [r3, r2]
 8007f42:	001a      	movs	r2, r3
 8007f44:	3a01      	subs	r2, #1
 8007f46:	21ca      	movs	r1, #202	; 0xca
 8007f48:	0049      	lsls	r1, r1, #1
 8007f4a:	2018      	movs	r0, #24
 8007f4c:	1809      	adds	r1, r1, r0
 8007f4e:	19c9      	adds	r1, r1, r7
 8007f50:	600a      	str	r2, [r1, #0]
 8007f52:	001c      	movs	r4, r3
 8007f54:	2200      	movs	r2, #0
 8007f56:	0015      	movs	r5, r2
 8007f58:	0020      	movs	r0, r4
 8007f5a:	0029      	movs	r1, r5
 8007f5c:	0004      	movs	r4, r0
 8007f5e:	0f62      	lsrs	r2, r4, #29
 8007f60:	000c      	movs	r4, r1
 8007f62:	00e4      	lsls	r4, r4, #3
 8007f64:	617c      	str	r4, [r7, #20]
 8007f66:	697c      	ldr	r4, [r7, #20]
 8007f68:	4314      	orrs	r4, r2
 8007f6a:	617c      	str	r4, [r7, #20]
 8007f6c:	0001      	movs	r1, r0
 8007f6e:	00c9      	lsls	r1, r1, #3
 8007f70:	6139      	str	r1, [r7, #16]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	2200      	movs	r2, #0
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	6838      	ldr	r0, [r7, #0]
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	0004      	movs	r4, r0
 8007f7e:	0f62      	lsrs	r2, r4, #29
 8007f80:	000c      	movs	r4, r1
 8007f82:	00e4      	lsls	r4, r4, #3
 8007f84:	60fc      	str	r4, [r7, #12]
 8007f86:	68fc      	ldr	r4, [r7, #12]
 8007f88:	4314      	orrs	r4, r2
 8007f8a:	60fc      	str	r4, [r7, #12]
 8007f8c:	0001      	movs	r1, r0
 8007f8e:	00ca      	lsls	r2, r1, #3
 8007f90:	60ba      	str	r2, [r7, #8]
 8007f92:	3307      	adds	r3, #7
 8007f94:	08db      	lsrs	r3, r3, #3
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	4669      	mov	r1, sp
 8007f9a:	1acb      	subs	r3, r1, r3
 8007f9c:	469d      	mov	sp, r3
 8007f9e:	466b      	mov	r3, sp
 8007fa0:	3300      	adds	r3, #0
 8007fa2:	24c8      	movs	r4, #200	; 0xc8
 8007fa4:	0064      	lsls	r4, r4, #1
 8007fa6:	2218      	movs	r2, #24
 8007fa8:	18a2      	adds	r2, r4, r2
 8007faa:	19d1      	adds	r1, r2, r7
 8007fac:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007fae:	4b16      	ldr	r3, [pc, #88]	; (8008008 <astronode_send_mgi_rr+0x148>)
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7fa ff07 	bl	8002dc4 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <astronode_send_mgi_rr+0x144>)
 8007fb8:	22cc      	movs	r2, #204	; 0xcc
 8007fba:	0052      	lsls	r2, r2, #1
 8007fbc:	189b      	adds	r3, r3, r2
 8007fbe:	2218      	movs	r2, #24
 8007fc0:	4694      	mov	ip, r2
 8007fc2:	44bc      	add	ip, r7
 8007fc4:	4463      	add	r3, ip
 8007fc6:	22c4      	movs	r2, #196	; 0xc4
 8007fc8:	5a9b      	ldrh	r3, [r3, r2]
 8007fca:	0019      	movs	r1, r3
 8007fcc:	2318      	movs	r3, #24
 8007fce:	18fb      	adds	r3, r7, r3
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	4a0e      	ldr	r2, [pc, #56]	; (800800c <astronode_send_mgi_rr+0x14c>)
 8007fd4:	2018      	movs	r0, #24
 8007fd6:	1820      	adds	r0, r4, r0
 8007fd8:	19c0      	adds	r0, r0, r7
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	f004 f884 	bl	800c0e8 <snprintf>
            send_debug_logs(guid);
 8007fe0:	2318      	movs	r3, #24
 8007fe2:	18e3      	adds	r3, r4, r3
 8007fe4:	19db      	adds	r3, r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f7fa feeb 	bl	8002dc4 <send_debug_logs>
 8007fee:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007ff0:	e003      	b.n	8007ffa <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <astronode_send_mgi_rr+0x150>)
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7fa fee5 	bl	8002dc4 <send_debug_logs>
}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	b06d      	add	sp, #436	; 0x1b4
 8008000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	fffffe68 	.word	0xfffffe68
 8008008:	080133f0 	.word	0x080133f0
 800800c:	08013400 	.word	0x08013400
 8008010:	08013404 	.word	0x08013404

08008014 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008016:	b0ed      	sub	sp, #436	; 0x1b4
 8008018:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800801a:	21c8      	movs	r1, #200	; 0xc8
 800801c:	2318      	movs	r3, #24
 800801e:	18cb      	adds	r3, r1, r3
 8008020:	19db      	adds	r3, r3, r7
 8008022:	0018      	movs	r0, r3
 8008024:	23c6      	movs	r3, #198	; 0xc6
 8008026:	001a      	movs	r2, r3
 8008028:	2100      	movs	r1, #0
 800802a:	f004 f927 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 800802e:	4b4a      	ldr	r3, [pc, #296]	; (8008158 <astronode_send_msn_rr+0x144>)
 8008030:	26cc      	movs	r6, #204	; 0xcc
 8008032:	0076      	lsls	r6, r6, #1
 8008034:	199b      	adds	r3, r3, r6
 8008036:	2218      	movs	r2, #24
 8008038:	4694      	mov	ip, r2
 800803a:	44bc      	add	ip, r7
 800803c:	4463      	add	r3, ip
 800803e:	0018      	movs	r0, r3
 8008040:	23c6      	movs	r3, #198	; 0xc6
 8008042:	001a      	movs	r2, r3
 8008044:	2100      	movs	r1, #0
 8008046:	f004 f919 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800804a:	21c8      	movs	r1, #200	; 0xc8
 800804c:	2318      	movs	r3, #24
 800804e:	18cb      	adds	r3, r1, r3
 8008050:	19db      	adds	r3, r3, r7
 8008052:	221a      	movs	r2, #26
 8008054:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008056:	2318      	movs	r3, #24
 8008058:	18fa      	adds	r2, r7, r3
 800805a:	2318      	movs	r3, #24
 800805c:	18cb      	adds	r3, r1, r3
 800805e:	19db      	adds	r3, r3, r7
 8008060:	0011      	movs	r1, r2
 8008062:	0018      	movs	r0, r3
 8008064:	f001 f914 	bl	8009290 <astronode_transport_send_receive>
 8008068:	0003      	movs	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d16f      	bne.n	800814e <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800806e:	4b3a      	ldr	r3, [pc, #232]	; (8008158 <astronode_send_msn_rr+0x144>)
 8008070:	0032      	movs	r2, r6
 8008072:	189b      	adds	r3, r3, r2
 8008074:	2118      	movs	r1, #24
 8008076:	468c      	mov	ip, r1
 8008078:	44bc      	add	ip, r7
 800807a:	4463      	add	r3, ip
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b9a      	cmp	r3, #154	; 0x9a
 8008080:	d161      	bne.n	8008146 <astronode_send_msn_rr+0x132>
        {
 8008082:	466b      	mov	r3, sp
 8008084:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8008086:	4b34      	ldr	r3, [pc, #208]	; (8008158 <astronode_send_msn_rr+0x144>)
 8008088:	189b      	adds	r3, r3, r2
 800808a:	2218      	movs	r2, #24
 800808c:	4694      	mov	ip, r2
 800808e:	44bc      	add	ip, r7
 8008090:	4463      	add	r3, ip
 8008092:	22c4      	movs	r2, #196	; 0xc4
 8008094:	5a9b      	ldrh	r3, [r3, r2]
 8008096:	001a      	movs	r2, r3
 8008098:	3a01      	subs	r2, #1
 800809a:	21ca      	movs	r1, #202	; 0xca
 800809c:	0049      	lsls	r1, r1, #1
 800809e:	2018      	movs	r0, #24
 80080a0:	1809      	adds	r1, r1, r0
 80080a2:	19c9      	adds	r1, r1, r7
 80080a4:	600a      	str	r2, [r1, #0]
 80080a6:	001c      	movs	r4, r3
 80080a8:	2200      	movs	r2, #0
 80080aa:	0015      	movs	r5, r2
 80080ac:	0020      	movs	r0, r4
 80080ae:	0029      	movs	r1, r5
 80080b0:	0004      	movs	r4, r0
 80080b2:	0f62      	lsrs	r2, r4, #29
 80080b4:	000c      	movs	r4, r1
 80080b6:	00e4      	lsls	r4, r4, #3
 80080b8:	617c      	str	r4, [r7, #20]
 80080ba:	697c      	ldr	r4, [r7, #20]
 80080bc:	4314      	orrs	r4, r2
 80080be:	617c      	str	r4, [r7, #20]
 80080c0:	0001      	movs	r1, r0
 80080c2:	00c9      	lsls	r1, r1, #3
 80080c4:	6139      	str	r1, [r7, #16]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	0004      	movs	r4, r0
 80080d2:	0f62      	lsrs	r2, r4, #29
 80080d4:	000c      	movs	r4, r1
 80080d6:	00e4      	lsls	r4, r4, #3
 80080d8:	60fc      	str	r4, [r7, #12]
 80080da:	68fc      	ldr	r4, [r7, #12]
 80080dc:	4314      	orrs	r4, r2
 80080de:	60fc      	str	r4, [r7, #12]
 80080e0:	0001      	movs	r1, r0
 80080e2:	00ca      	lsls	r2, r1, #3
 80080e4:	60ba      	str	r2, [r7, #8]
 80080e6:	3307      	adds	r3, #7
 80080e8:	08db      	lsrs	r3, r3, #3
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4669      	mov	r1, sp
 80080ee:	1acb      	subs	r3, r1, r3
 80080f0:	469d      	mov	sp, r3
 80080f2:	466b      	mov	r3, sp
 80080f4:	3300      	adds	r3, #0
 80080f6:	24c8      	movs	r4, #200	; 0xc8
 80080f8:	0064      	lsls	r4, r4, #1
 80080fa:	2218      	movs	r2, #24
 80080fc:	18a2      	adds	r2, r4, r2
 80080fe:	19d1      	adds	r1, r2, r7
 8008100:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <astronode_send_msn_rr+0x148>)
 8008104:	0018      	movs	r0, r3
 8008106:	f7fa fe5d 	bl	8002dc4 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <astronode_send_msn_rr+0x144>)
 800810c:	22cc      	movs	r2, #204	; 0xcc
 800810e:	0052      	lsls	r2, r2, #1
 8008110:	189b      	adds	r3, r3, r2
 8008112:	2218      	movs	r2, #24
 8008114:	4694      	mov	ip, r2
 8008116:	44bc      	add	ip, r7
 8008118:	4463      	add	r3, ip
 800811a:	22c4      	movs	r2, #196	; 0xc4
 800811c:	5a9b      	ldrh	r3, [r3, r2]
 800811e:	0019      	movs	r1, r3
 8008120:	2318      	movs	r3, #24
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	3301      	adds	r3, #1
 8008126:	4a0e      	ldr	r2, [pc, #56]	; (8008160 <astronode_send_msn_rr+0x14c>)
 8008128:	2018      	movs	r0, #24
 800812a:	1820      	adds	r0, r4, r0
 800812c:	19c0      	adds	r0, r0, r7
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	f003 ffda 	bl	800c0e8 <snprintf>
            send_debug_logs(serial_number);
 8008134:	2318      	movs	r3, #24
 8008136:	18e3      	adds	r3, r4, r3
 8008138:	19db      	adds	r3, r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	0018      	movs	r0, r3
 800813e:	f7fa fe41 	bl	8002dc4 <send_debug_logs>
 8008142:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008144:	e003      	b.n	800814e <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <astronode_send_msn_rr+0x150>)
 8008148:	0018      	movs	r0, r3
 800814a:	f7fa fe3b 	bl	8002dc4 <send_debug_logs>
}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	46bd      	mov	sp, r7
 8008152:	b06d      	add	sp, #436	; 0x1b4
 8008154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	fffffe68 	.word	0xfffffe68
 800815c:	08013420 	.word	0x08013420
 8008160:	08013400 	.word	0x08013400
 8008164:	0801343c 	.word	0x0801343c

08008168 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b0fa      	sub	sp, #488	; 0x1e8
 800816c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800816e:	258e      	movs	r5, #142	; 0x8e
 8008170:	006d      	lsls	r5, r5, #1
 8008172:	197b      	adds	r3, r7, r5
 8008174:	0018      	movs	r0, r3
 8008176:	23c6      	movs	r3, #198	; 0xc6
 8008178:	001a      	movs	r2, r3
 800817a:	2100      	movs	r1, #0
 800817c:	f004 f87e 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008180:	4b26      	ldr	r3, [pc, #152]	; (800821c <astronode_send_nco_rr+0xb4>)
 8008182:	24f4      	movs	r4, #244	; 0xf4
 8008184:	0064      	lsls	r4, r4, #1
 8008186:	191b      	adds	r3, r3, r4
 8008188:	19db      	adds	r3, r3, r7
 800818a:	0018      	movs	r0, r3
 800818c:	23c6      	movs	r3, #198	; 0xc6
 800818e:	001a      	movs	r2, r3
 8008190:	2100      	movs	r1, #0
 8008192:	f004 f873 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8008196:	197b      	adds	r3, r7, r5
 8008198:	2218      	movs	r2, #24
 800819a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800819c:	2354      	movs	r3, #84	; 0x54
 800819e:	18fa      	adds	r2, r7, r3
 80081a0:	197b      	adds	r3, r7, r5
 80081a2:	0011      	movs	r1, r2
 80081a4:	0018      	movs	r0, r3
 80081a6:	f001 f873 	bl	8009290 <astronode_transport_send_receive>
 80081aa:	0003      	movs	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d131      	bne.n	8008214 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <astronode_send_nco_rr+0xb4>)
 80081b2:	0021      	movs	r1, r4
 80081b4:	185b      	adds	r3, r3, r1
 80081b6:	19db      	adds	r3, r3, r7
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b98      	cmp	r3, #152	; 0x98
 80081bc:	d126      	bne.n	800820c <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <astronode_send_nco_rr+0xb4>)
 80081c0:	185b      	adds	r3, r3, r1
 80081c2:	19db      	adds	r3, r3, r7
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 80081c8:	4b14      	ldr	r3, [pc, #80]	; (800821c <astronode_send_nco_rr+0xb4>)
 80081ca:	185b      	adds	r3, r3, r1
 80081cc:	19db      	adds	r3, r3, r7
 80081ce:	789b      	ldrb	r3, [r3, #2]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 80081d4:	4b11      	ldr	r3, [pc, #68]	; (800821c <astronode_send_nco_rr+0xb4>)
 80081d6:	185b      	adds	r3, r3, r1
 80081d8:	19db      	adds	r3, r3, r7
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 80081e0:	4b0e      	ldr	r3, [pc, #56]	; (800821c <astronode_send_nco_rr+0xb4>)
 80081e2:	185b      	adds	r3, r3, r1
 80081e4:	19db      	adds	r3, r3, r7
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	061b      	lsls	r3, r3, #24
 80081ea:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 80081ec:	22f2      	movs	r2, #242	; 0xf2
 80081ee:	0052      	lsls	r2, r2, #1
 80081f0:	18b9      	adds	r1, r7, r2
 80081f2:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 80081f4:	18bb      	adds	r3, r7, r2
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4909      	ldr	r1, [pc, #36]	; (8008220 <astronode_send_nco_rr+0xb8>)
 80081fa:	1d3b      	adds	r3, r7, #4
 80081fc:	0018      	movs	r0, r3
 80081fe:	f003 ffa7 	bl	800c150 <sprintf>
            send_debug_logs(str);
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	0018      	movs	r0, r3
 8008206:	f7fa fddd 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 800820a:	e003      	b.n	8008214 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <astronode_send_nco_rr+0xbc>)
 800820e:	0018      	movs	r0, r3
 8008210:	f7fa fdd8 	bl	8002dc4 <send_debug_logs>
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	46bd      	mov	sp, r7
 8008218:	b07a      	add	sp, #488	; 0x1e8
 800821a:	bdb0      	pop	{r4, r5, r7, pc}
 800821c:	fffffe6c 	.word	0xfffffe6c
 8008220:	08013464 	.word	0x08013464
 8008224:	080134ac 	.word	0x080134ac

08008228 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8008228:	b5b0      	push	{r4, r5, r7, lr}
 800822a:	b0e4      	sub	sp, #400	; 0x190
 800822c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800822e:	24c8      	movs	r4, #200	; 0xc8
 8008230:	193b      	adds	r3, r7, r4
 8008232:	0018      	movs	r0, r3
 8008234:	23c6      	movs	r3, #198	; 0xc6
 8008236:	001a      	movs	r2, r3
 8008238:	2100      	movs	r1, #0
 800823a:	f004 f81f 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <astronode_send_evt_rr+0xdc>)
 8008240:	25c8      	movs	r5, #200	; 0xc8
 8008242:	006d      	lsls	r5, r5, #1
 8008244:	195b      	adds	r3, r3, r5
 8008246:	19db      	adds	r3, r3, r7
 8008248:	0018      	movs	r0, r3
 800824a:	23c6      	movs	r3, #198	; 0xc6
 800824c:	001a      	movs	r2, r3
 800824e:	2100      	movs	r1, #0
 8008250:	f004 f814 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008254:	193b      	adds	r3, r7, r4
 8008256:	2265      	movs	r2, #101	; 0x65
 8008258:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800825a:	003a      	movs	r2, r7
 800825c:	193b      	adds	r3, r7, r4
 800825e:	0011      	movs	r1, r2
 8008260:	0018      	movs	r0, r3
 8008262:	f001 f815 	bl	8009290 <astronode_transport_send_receive>
 8008266:	0003      	movs	r3, r0
 8008268:	2b01      	cmp	r3, #1
 800826a:	d147      	bne.n	80082fc <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 800826c:	4b25      	ldr	r3, [pc, #148]	; (8008304 <astronode_send_evt_rr+0xdc>)
 800826e:	195b      	adds	r3, r3, r5
 8008270:	19db      	adds	r3, r3, r7
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2be5      	cmp	r3, #229	; 0xe5
 8008276:	d141      	bne.n	80082fc <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8008278:	4b22      	ldr	r3, [pc, #136]	; (8008304 <astronode_send_evt_rr+0xdc>)
 800827a:	195b      	adds	r3, r3, r5
 800827c:	19db      	adds	r3, r3, r7
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	001a      	movs	r2, r3
 8008282:	2301      	movs	r3, #1
 8008284:	4013      	ands	r3, r2
 8008286:	d006      	beq.n	8008296 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8008288:	4b1f      	ldr	r3, [pc, #124]	; (8008308 <astronode_send_evt_rr+0xe0>)
 800828a:	2201      	movs	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800828e:	4b1f      	ldr	r3, [pc, #124]	; (800830c <astronode_send_evt_rr+0xe4>)
 8008290:	0018      	movs	r0, r3
 8008292:	f7fa fd97 	bl	8002dc4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8008296:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <astronode_send_evt_rr+0xdc>)
 8008298:	22c8      	movs	r2, #200	; 0xc8
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	189b      	adds	r3, r3, r2
 800829e:	19db      	adds	r3, r3, r7
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	001a      	movs	r2, r3
 80082a4:	2302      	movs	r3, #2
 80082a6:	4013      	ands	r3, r2
 80082a8:	d006      	beq.n	80082b8 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80082aa:	4b19      	ldr	r3, [pc, #100]	; (8008310 <astronode_send_evt_rr+0xe8>)
 80082ac:	2201      	movs	r2, #1
 80082ae:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80082b0:	4b18      	ldr	r3, [pc, #96]	; (8008314 <astronode_send_evt_rr+0xec>)
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7fa fd86 	bl	8002dc4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80082b8:	4b12      	ldr	r3, [pc, #72]	; (8008304 <astronode_send_evt_rr+0xdc>)
 80082ba:	22c8      	movs	r2, #200	; 0xc8
 80082bc:	0052      	lsls	r2, r2, #1
 80082be:	189b      	adds	r3, r3, r2
 80082c0:	19db      	adds	r3, r3, r7
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	001a      	movs	r2, r3
 80082c6:	2304      	movs	r3, #4
 80082c8:	4013      	ands	r3, r2
 80082ca:	d006      	beq.n	80082da <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <astronode_send_evt_rr+0xf0>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80082d2:	4b12      	ldr	r3, [pc, #72]	; (800831c <astronode_send_evt_rr+0xf4>)
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7fa fd75 	bl	8002dc4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <astronode_send_evt_rr+0xdc>)
 80082dc:	22c8      	movs	r2, #200	; 0xc8
 80082de:	0052      	lsls	r2, r2, #1
 80082e0:	189b      	adds	r3, r3, r2
 80082e2:	19db      	adds	r3, r3, r7
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	001a      	movs	r2, r3
 80082e8:	2308      	movs	r3, #8
 80082ea:	4013      	ands	r3, r2
 80082ec:	d006      	beq.n	80082fc <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <astronode_send_evt_rr+0xf8>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <astronode_send_evt_rr+0xfc>)
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7fa fd64 	bl	8002dc4 <send_debug_logs>
            }

        }
    }
}
 80082fc:	46c0      	nop			; (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	b064      	add	sp, #400	; 0x190
 8008302:	bdb0      	pop	{r4, r5, r7, pc}
 8008304:	fffffe70 	.word	0xfffffe70
 8008308:	20000b9c 	.word	0x20000b9c
 800830c:	080134e4 	.word	0x080134e4
 8008310:	20000b9d 	.word	0x20000b9d
 8008314:	08013508 	.word	0x08013508
 8008318:	20000b9e 	.word	0x20000b9e
 800831c:	08013520 	.word	0x08013520
 8008320:	20000b9f 	.word	0x20000b9f
 8008324:	08013534 	.word	0x08013534

08008328 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800832a:	b0e7      	sub	sp, #412	; 0x19c
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008332:	24d0      	movs	r4, #208	; 0xd0
 8008334:	193b      	adds	r3, r7, r4
 8008336:	0018      	movs	r0, r3
 8008338:	23c6      	movs	r3, #198	; 0xc6
 800833a:	001a      	movs	r2, r3
 800833c:	2100      	movs	r1, #0
 800833e:	f003 ff9d 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008342:	4b56      	ldr	r3, [pc, #344]	; (800849c <astronode_send_geo_wr+0x174>)
 8008344:	26cc      	movs	r6, #204	; 0xcc
 8008346:	0076      	lsls	r6, r6, #1
 8008348:	199b      	adds	r3, r3, r6
 800834a:	19db      	adds	r3, r3, r7
 800834c:	0018      	movs	r0, r3
 800834e:	23c6      	movs	r3, #198	; 0xc6
 8008350:	001a      	movs	r2, r3
 8008352:	2100      	movs	r1, #0
 8008354:	f003 ff92 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008358:	193b      	adds	r3, r7, r4
 800835a:	2235      	movs	r2, #53	; 0x35
 800835c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800835e:	193b      	adds	r3, r7, r4
 8008360:	22c4      	movs	r2, #196	; 0xc4
 8008362:	5a9b      	ldrh	r3, [r3, r2]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	b290      	uxth	r0, r2
 8008368:	193a      	adds	r2, r7, r4
 800836a:	21c4      	movs	r1, #196	; 0xc4
 800836c:	5250      	strh	r0, [r2, r1]
 800836e:	0019      	movs	r1, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	b2da      	uxtb	r2, r3
 8008374:	193b      	adds	r3, r7, r4
 8008376:	185b      	adds	r3, r3, r1
 8008378:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	1218      	asrs	r0, r3, #8
 800837e:	0025      	movs	r5, r4
 8008380:	197b      	adds	r3, r7, r5
 8008382:	22c4      	movs	r2, #196	; 0xc4
 8008384:	5a9b      	ldrh	r3, [r3, r2]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	b294      	uxth	r4, r2
 800838a:	197a      	adds	r2, r7, r5
 800838c:	21c4      	movs	r1, #196	; 0xc4
 800838e:	5254      	strh	r4, [r2, r1]
 8008390:	0019      	movs	r1, r3
 8008392:	b2c2      	uxtb	r2, r0
 8008394:	002c      	movs	r4, r5
 8008396:	193b      	adds	r3, r7, r4
 8008398:	185b      	adds	r3, r3, r1
 800839a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1418      	asrs	r0, r3, #16
 80083a0:	0025      	movs	r5, r4
 80083a2:	197b      	adds	r3, r7, r5
 80083a4:	22c4      	movs	r2, #196	; 0xc4
 80083a6:	5a9b      	ldrh	r3, [r3, r2]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	b294      	uxth	r4, r2
 80083ac:	197a      	adds	r2, r7, r5
 80083ae:	21c4      	movs	r1, #196	; 0xc4
 80083b0:	5254      	strh	r4, [r2, r1]
 80083b2:	0019      	movs	r1, r3
 80083b4:	b2c2      	uxtb	r2, r0
 80083b6:	002c      	movs	r4, r5
 80083b8:	193b      	adds	r3, r7, r4
 80083ba:	185b      	adds	r3, r3, r1
 80083bc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	1618      	asrs	r0, r3, #24
 80083c2:	0025      	movs	r5, r4
 80083c4:	197b      	adds	r3, r7, r5
 80083c6:	22c4      	movs	r2, #196	; 0xc4
 80083c8:	5a9b      	ldrh	r3, [r3, r2]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	b294      	uxth	r4, r2
 80083ce:	197a      	adds	r2, r7, r5
 80083d0:	21c4      	movs	r1, #196	; 0xc4
 80083d2:	5254      	strh	r4, [r2, r1]
 80083d4:	0019      	movs	r1, r3
 80083d6:	b2c2      	uxtb	r2, r0
 80083d8:	002c      	movs	r4, r5
 80083da:	193b      	adds	r3, r7, r4
 80083dc:	185b      	adds	r3, r3, r1
 80083de:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 80083e0:	193b      	adds	r3, r7, r4
 80083e2:	22c4      	movs	r2, #196	; 0xc4
 80083e4:	5a9b      	ldrh	r3, [r3, r2]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	b290      	uxth	r0, r2
 80083ea:	193a      	adds	r2, r7, r4
 80083ec:	21c4      	movs	r1, #196	; 0xc4
 80083ee:	5250      	strh	r0, [r2, r1]
 80083f0:	0019      	movs	r1, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	193b      	adds	r3, r7, r4
 80083f8:	185b      	adds	r3, r3, r1
 80083fa:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	1218      	asrs	r0, r3, #8
 8008400:	0025      	movs	r5, r4
 8008402:	197b      	adds	r3, r7, r5
 8008404:	22c4      	movs	r2, #196	; 0xc4
 8008406:	5a9b      	ldrh	r3, [r3, r2]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	b294      	uxth	r4, r2
 800840c:	197a      	adds	r2, r7, r5
 800840e:	21c4      	movs	r1, #196	; 0xc4
 8008410:	5254      	strh	r4, [r2, r1]
 8008412:	0019      	movs	r1, r3
 8008414:	b2c2      	uxtb	r2, r0
 8008416:	002c      	movs	r4, r5
 8008418:	193b      	adds	r3, r7, r4
 800841a:	185b      	adds	r3, r3, r1
 800841c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	1418      	asrs	r0, r3, #16
 8008422:	0025      	movs	r5, r4
 8008424:	197b      	adds	r3, r7, r5
 8008426:	22c4      	movs	r2, #196	; 0xc4
 8008428:	5a9b      	ldrh	r3, [r3, r2]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	b294      	uxth	r4, r2
 800842e:	197a      	adds	r2, r7, r5
 8008430:	21c4      	movs	r1, #196	; 0xc4
 8008432:	5254      	strh	r4, [r2, r1]
 8008434:	0019      	movs	r1, r3
 8008436:	b2c2      	uxtb	r2, r0
 8008438:	002c      	movs	r4, r5
 800843a:	193b      	adds	r3, r7, r4
 800843c:	185b      	adds	r3, r3, r1
 800843e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	1618      	asrs	r0, r3, #24
 8008444:	0025      	movs	r5, r4
 8008446:	197b      	adds	r3, r7, r5
 8008448:	22c4      	movs	r2, #196	; 0xc4
 800844a:	5a9b      	ldrh	r3, [r3, r2]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	b294      	uxth	r4, r2
 8008450:	197a      	adds	r2, r7, r5
 8008452:	21c4      	movs	r1, #196	; 0xc4
 8008454:	5254      	strh	r4, [r2, r1]
 8008456:	0019      	movs	r1, r3
 8008458:	b2c2      	uxtb	r2, r0
 800845a:	0028      	movs	r0, r5
 800845c:	183b      	adds	r3, r7, r0
 800845e:	185b      	adds	r3, r3, r1
 8008460:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008462:	2308      	movs	r3, #8
 8008464:	18fa      	adds	r2, r7, r3
 8008466:	183b      	adds	r3, r7, r0
 8008468:	0011      	movs	r1, r2
 800846a:	0018      	movs	r0, r3
 800846c:	f000 ff10 	bl	8009290 <astronode_transport_send_receive>
 8008470:	0003      	movs	r3, r0
 8008472:	2b01      	cmp	r3, #1
 8008474:	d10e      	bne.n	8008494 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <astronode_send_geo_wr+0x174>)
 8008478:	199b      	adds	r3, r3, r6
 800847a:	19db      	adds	r3, r3, r7
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2bb5      	cmp	r3, #181	; 0xb5
 8008480:	d104      	bne.n	800848c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <astronode_send_geo_wr+0x178>)
 8008484:	0018      	movs	r0, r3
 8008486:	f7fa fc9d 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800848a:	e003      	b.n	8008494 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <astronode_send_geo_wr+0x17c>)
 800848e:	0018      	movs	r0, r3
 8008490:	f7fa fc98 	bl	8002dc4 <send_debug_logs>
}
 8008494:	46c0      	nop			; (mov r8, r8)
 8008496:	46bd      	mov	sp, r7
 8008498:	b067      	add	sp, #412	; 0x19c
 800849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849c:	fffffe70 	.word	0xfffffe70
 80084a0:	08013548 	.word	0x08013548
 80084a4:	08013574 	.word	0x08013574

080084a8 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80084a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084aa:	b0fb      	sub	sp, #492	; 0x1ec
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6039      	str	r1, [r7, #0]
 80084b0:	0011      	movs	r1, r2
 80084b2:	4b4a      	ldr	r3, [pc, #296]	; (80085dc <astronode_send_pld_er+0x134>)
 80084b4:	26f4      	movs	r6, #244	; 0xf4
 80084b6:	0076      	lsls	r6, r6, #1
 80084b8:	199b      	adds	r3, r3, r6
 80084ba:	19db      	adds	r3, r3, r7
 80084bc:	1c02      	adds	r2, r0, #0
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	4b47      	ldr	r3, [pc, #284]	; (80085e0 <astronode_send_pld_er+0x138>)
 80084c2:	199b      	adds	r3, r3, r6
 80084c4:	19db      	adds	r3, r3, r7
 80084c6:	1c0a      	adds	r2, r1, #0
 80084c8:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80084ca:	2490      	movs	r4, #144	; 0x90
 80084cc:	0064      	lsls	r4, r4, #1
 80084ce:	193b      	adds	r3, r7, r4
 80084d0:	0018      	movs	r0, r3
 80084d2:	23c6      	movs	r3, #198	; 0xc6
 80084d4:	001a      	movs	r2, r3
 80084d6:	2100      	movs	r1, #0
 80084d8:	f003 fed0 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 80084dc:	4b41      	ldr	r3, [pc, #260]	; (80085e4 <astronode_send_pld_er+0x13c>)
 80084de:	199b      	adds	r3, r3, r6
 80084e0:	19db      	adds	r3, r3, r7
 80084e2:	0018      	movs	r0, r3
 80084e4:	23c6      	movs	r3, #198	; 0xc6
 80084e6:	001a      	movs	r2, r3
 80084e8:	2100      	movs	r1, #0
 80084ea:	f003 fec7 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	2225      	movs	r2, #37	; 0x25
 80084f2:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80084f4:	193b      	adds	r3, r7, r4
 80084f6:	22c4      	movs	r2, #196	; 0xc4
 80084f8:	5a9b      	ldrh	r3, [r3, r2]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	b290      	uxth	r0, r2
 80084fe:	193a      	adds	r2, r7, r4
 8008500:	21c4      	movs	r1, #196	; 0xc4
 8008502:	5250      	strh	r0, [r2, r1]
 8008504:	0019      	movs	r1, r3
 8008506:	4b35      	ldr	r3, [pc, #212]	; (80085dc <astronode_send_pld_er+0x134>)
 8008508:	199b      	adds	r3, r3, r6
 800850a:	19db      	adds	r3, r3, r7
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	193b      	adds	r3, r7, r4
 8008512:	185b      	adds	r3, r3, r1
 8008514:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008516:	4b31      	ldr	r3, [pc, #196]	; (80085dc <astronode_send_pld_er+0x134>)
 8008518:	199b      	adds	r3, r3, r6
 800851a:	19db      	adds	r3, r3, r7
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b298      	uxth	r0, r3
 8008522:	0025      	movs	r5, r4
 8008524:	197b      	adds	r3, r7, r5
 8008526:	22c4      	movs	r2, #196	; 0xc4
 8008528:	5a9b      	ldrh	r3, [r3, r2]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	b294      	uxth	r4, r2
 800852e:	197a      	adds	r2, r7, r5
 8008530:	21c4      	movs	r1, #196	; 0xc4
 8008532:	5254      	strh	r4, [r2, r1]
 8008534:	0019      	movs	r1, r3
 8008536:	b2c2      	uxtb	r2, r0
 8008538:	002c      	movs	r4, r5
 800853a:	193b      	adds	r3, r7, r4
 800853c:	185b      	adds	r3, r3, r1
 800853e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008540:	193b      	adds	r3, r7, r4
 8008542:	22c4      	movs	r2, #196	; 0xc4
 8008544:	5a9b      	ldrh	r3, [r3, r2]
 8008546:	001a      	movs	r2, r3
 8008548:	193b      	adds	r3, r7, r4
 800854a:	189b      	adds	r3, r3, r2
 800854c:	1c58      	adds	r0, r3, #1
 800854e:	4b24      	ldr	r3, [pc, #144]	; (80085e0 <astronode_send_pld_er+0x138>)
 8008550:	199b      	adds	r3, r3, r6
 8008552:	19db      	adds	r3, r3, r7
 8008554:	881a      	ldrh	r2, [r3, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	0019      	movs	r1, r3
 800855a:	f003 ff74 	bl	800c446 <memcpy>
    request.payload_len = 2 + payload_length;
 800855e:	4b20      	ldr	r3, [pc, #128]	; (80085e0 <astronode_send_pld_er+0x138>)
 8008560:	199b      	adds	r3, r3, r6
 8008562:	19db      	adds	r3, r3, r7
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	3302      	adds	r3, #2
 8008568:	b299      	uxth	r1, r3
 800856a:	193b      	adds	r3, r7, r4
 800856c:	22c4      	movs	r2, #196	; 0xc4
 800856e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008570:	2358      	movs	r3, #88	; 0x58
 8008572:	18fa      	adds	r2, r7, r3
 8008574:	193b      	adds	r3, r7, r4
 8008576:	0011      	movs	r1, r2
 8008578:	0018      	movs	r0, r3
 800857a:	f000 fe89 	bl	8009290 <astronode_transport_send_receive>
 800857e:	0003      	movs	r3, r0
 8008580:	2b01      	cmp	r3, #1
 8008582:	d125      	bne.n	80085d0 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <astronode_send_pld_er+0x13c>)
 8008586:	199b      	adds	r3, r3, r6
 8008588:	19db      	adds	r3, r3, r7
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2ba5      	cmp	r3, #165	; 0xa5
 800858e:	d10f      	bne.n	80085b0 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008590:	4b12      	ldr	r3, [pc, #72]	; (80085dc <astronode_send_pld_er+0x134>)
 8008592:	199b      	adds	r3, r3, r6
 8008594:	19db      	adds	r3, r3, r7
 8008596:	881a      	ldrh	r2, [r3, #0]
 8008598:	4913      	ldr	r1, [pc, #76]	; (80085e8 <astronode_send_pld_er+0x140>)
 800859a:	2408      	movs	r4, #8
 800859c:	193b      	adds	r3, r7, r4
 800859e:	0018      	movs	r0, r3
 80085a0:	f003 fdd6 	bl	800c150 <sprintf>
            send_debug_logs ( s ) ;
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	0018      	movs	r0, r3
 80085a8:	f7fa fc0c 	bl	8002dc4 <send_debug_logs>
            return true ;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e010      	b.n	80085d2 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <astronode_send_pld_er+0x134>)
 80085b2:	22f4      	movs	r2, #244	; 0xf4
 80085b4:	0052      	lsls	r2, r2, #1
 80085b6:	189b      	adds	r3, r3, r2
 80085b8:	19db      	adds	r3, r3, r7
 80085ba:	881a      	ldrh	r2, [r3, #0]
 80085bc:	490b      	ldr	r1, [pc, #44]	; (80085ec <astronode_send_pld_er+0x144>)
 80085be:	2408      	movs	r4, #8
 80085c0:	193b      	adds	r3, r7, r4
 80085c2:	0018      	movs	r0, r3
 80085c4:	f003 fdc4 	bl	800c150 <sprintf>
            send_debug_logs ( s ) ;
 80085c8:	193b      	adds	r3, r7, r4
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7fa fbfa 	bl	8002dc4 <send_debug_logs>
        }
    }
    return false ;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	0018      	movs	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	b07b      	add	sp, #492	; 0x1ec
 80085d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085da:	46c0      	nop			; (mov r8, r8)
 80085dc:	fffffe1e 	.word	0xfffffe1e
 80085e0:	fffffe1c 	.word	0xfffffe1c
 80085e4:	fffffe70 	.word	0xfffffe70
 80085e8:	080135ec 	.word	0x080135ec
 80085ec:	08013618 	.word	0x08013618

080085f0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b0e4      	sub	sp, #400	; 0x190
 80085f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085f6:	24c8      	movs	r4, #200	; 0xc8
 80085f8:	193b      	adds	r3, r7, r4
 80085fa:	0018      	movs	r0, r3
 80085fc:	23c6      	movs	r3, #198	; 0xc6
 80085fe:	001a      	movs	r2, r3
 8008600:	2100      	movs	r1, #0
 8008602:	f003 fe3b 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <astronode_send_pld_fr+0x6c>)
 8008608:	25c8      	movs	r5, #200	; 0xc8
 800860a:	006d      	lsls	r5, r5, #1
 800860c:	195b      	adds	r3, r3, r5
 800860e:	19db      	adds	r3, r3, r7
 8008610:	0018      	movs	r0, r3
 8008612:	23c6      	movs	r3, #198	; 0xc6
 8008614:	001a      	movs	r2, r3
 8008616:	2100      	movs	r1, #0
 8008618:	f003 fe30 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800861c:	193b      	adds	r3, r7, r4
 800861e:	2227      	movs	r2, #39	; 0x27
 8008620:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008622:	003a      	movs	r2, r7
 8008624:	193b      	adds	r3, r7, r4
 8008626:	0011      	movs	r1, r2
 8008628:	0018      	movs	r0, r3
 800862a:	f000 fe31 	bl	8009290 <astronode_transport_send_receive>
 800862e:	0003      	movs	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d10e      	bne.n	8008652 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <astronode_send_pld_fr+0x6c>)
 8008636:	195b      	adds	r3, r3, r5
 8008638:	19db      	adds	r3, r3, r7
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2ba7      	cmp	r3, #167	; 0xa7
 800863e:	d104      	bne.n	800864a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <astronode_send_pld_fr+0x70>)
 8008642:	0018      	movs	r0, r3
 8008644:	f7fa fbbe 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008648:	e003      	b.n	8008652 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <astronode_send_pld_fr+0x74>)
 800864c:	0018      	movs	r0, r3
 800864e:	f7fa fbb9 	bl	8002dc4 <send_debug_logs>
}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	46bd      	mov	sp, r7
 8008656:	b064      	add	sp, #400	; 0x190
 8008658:	bdb0      	pop	{r4, r5, r7, pc}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	fffffe70 	.word	0xfffffe70
 8008660:	08013648 	.word	0x08013648
 8008664:	08013680 	.word	0x08013680

08008668 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008668:	b5b0      	push	{r4, r5, r7, lr}
 800866a:	b0e4      	sub	sp, #400	; 0x190
 800866c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800866e:	24c8      	movs	r4, #200	; 0xc8
 8008670:	193b      	adds	r3, r7, r4
 8008672:	0018      	movs	r0, r3
 8008674:	23c6      	movs	r3, #198	; 0xc6
 8008676:	001a      	movs	r2, r3
 8008678:	2100      	movs	r1, #0
 800867a:	f003 fdff 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 800867e:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <astronode_send_res_cr+0x70>)
 8008680:	25c8      	movs	r5, #200	; 0xc8
 8008682:	006d      	lsls	r5, r5, #1
 8008684:	195b      	adds	r3, r3, r5
 8008686:	19db      	adds	r3, r3, r7
 8008688:	0018      	movs	r0, r3
 800868a:	23c6      	movs	r3, #198	; 0xc6
 800868c:	001a      	movs	r2, r3
 800868e:	2100      	movs	r1, #0
 8008690:	f003 fdf4 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008694:	193b      	adds	r3, r7, r4
 8008696:	2255      	movs	r2, #85	; 0x55
 8008698:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800869a:	003a      	movs	r2, r7
 800869c:	193b      	adds	r3, r7, r4
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f000 fdf5 	bl	8009290 <astronode_transport_send_receive>
 80086a6:	0003      	movs	r3, r0
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d111      	bne.n	80086d0 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <astronode_send_res_cr+0x70>)
 80086ae:	195b      	adds	r3, r3, r5
 80086b0:	19db      	adds	r3, r3, r7
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2bd5      	cmp	r3, #213	; 0xd5
 80086b6:	d107      	bne.n	80086c8 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80086b8:	4b08      	ldr	r3, [pc, #32]	; (80086dc <astronode_send_res_cr+0x74>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <astronode_send_res_cr+0x78>)
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fa fb7f 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80086c6:	e003      	b.n	80086d0 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80086c8:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <astronode_send_res_cr+0x7c>)
 80086ca:	0018      	movs	r0, r3
 80086cc:	f7fa fb7a 	bl	8002dc4 <send_debug_logs>
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b064      	add	sp, #400	; 0x190
 80086d6:	bdb0      	pop	{r4, r5, r7, pc}
 80086d8:	fffffe70 	.word	0xfffffe70
 80086dc:	20000b9d 	.word	0x20000b9d
 80086e0:	080136bc 	.word	0x080136bc
 80086e4:	080136f0 	.word	0x080136f0

080086e8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80086e8:	b5b0      	push	{r4, r5, r7, lr}
 80086ea:	b0fa      	sub	sp, #488	; 0x1e8
 80086ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80086ee:	258e      	movs	r5, #142	; 0x8e
 80086f0:	006d      	lsls	r5, r5, #1
 80086f2:	197b      	adds	r3, r7, r5
 80086f4:	0018      	movs	r0, r3
 80086f6:	23c6      	movs	r3, #198	; 0xc6
 80086f8:	001a      	movs	r2, r3
 80086fa:	2100      	movs	r1, #0
 80086fc:	f003 fdbe 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0} ;
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 8008702:	24f4      	movs	r4, #244	; 0xf4
 8008704:	0064      	lsls	r4, r4, #1
 8008706:	191b      	adds	r3, r3, r4
 8008708:	19db      	adds	r3, r3, r7
 800870a:	0018      	movs	r0, r3
 800870c:	23c6      	movs	r3, #198	; 0xc6
 800870e:	001a      	movs	r2, r3
 8008710:	2100      	movs	r1, #0
 8008712:	f003 fdb3 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008716:	197b      	adds	r3, r7, r5
 8008718:	2217      	movs	r2, #23
 800871a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800871c:	2354      	movs	r3, #84	; 0x54
 800871e:	18fa      	adds	r2, r7, r3
 8008720:	197b      	adds	r3, r7, r5
 8008722:	0011      	movs	r1, r2
 8008724:	0018      	movs	r0, r3
 8008726:	f000 fdb3 	bl	8009290 <astronode_transport_send_receive>
 800872a:	0003      	movs	r3, r0
 800872c:	2b01      	cmp	r3, #1
 800872e:	d133      	bne.n	8008798 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008730:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 8008732:	0021      	movs	r1, r4
 8008734:	185b      	adds	r3, r3, r1
 8008736:	19db      	adds	r3, r3, r7
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b97      	cmp	r3, #151	; 0x97
 800873c:	d128      	bne.n	8008790 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800873e:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 8008740:	185b      	adds	r3, r3, r1
 8008742:	19db      	adds	r3, r3, r7
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008748:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 800874a:	185b      	adds	r3, r3, r1
 800874c:	19db      	adds	r3, r3, r7
 800874e:	789b      	ldrb	r3, [r3, #2]
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 8008756:	185b      	adds	r3, r3, r1
 8008758:	19db      	adds	r3, r3, r7
 800875a:	78db      	ldrb	r3, [r3, #3]
 800875c:	041b      	lsls	r3, r3, #16
 800875e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008760:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <astronode_send_rtc_rr+0xbc>)
 8008762:	185b      	adds	r3, r3, r1
 8008764:	19db      	adds	r3, r3, r7
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800876c:	24f2      	movs	r4, #242	; 0xf2
 800876e:	0064      	lsls	r4, r4, #1
 8008770:	193a      	adds	r2, r7, r4
 8008772:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008774:	193b      	adds	r3, r7, r4
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	490b      	ldr	r1, [pc, #44]	; (80087a8 <astronode_send_rtc_rr+0xc0>)
 800877a:	1d3b      	adds	r3, r7, #4
 800877c:	0018      	movs	r0, r3
 800877e:	f003 fce7 	bl	800c150 <sprintf>
            send_debug_logs ( str ) ;
 8008782:	1d3b      	adds	r3, r7, #4
 8008784:	0018      	movs	r0, r3
 8008786:	f7fa fb1d 	bl	8002dc4 <send_debug_logs>
            return rtc_time ;
 800878a:	193b      	adds	r3, r7, r4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	e004      	b.n	800879a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <astronode_send_rtc_rr+0xc4>)
 8008792:	0018      	movs	r0, r3
 8008794:	f7fa fb16 	bl	8002dc4 <send_debug_logs>
        }
    }
    return 0 ;
 8008798:	2300      	movs	r3, #0
}
 800879a:	0018      	movs	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	b07a      	add	sp, #488	; 0x1e8
 80087a0:	bdb0      	pop	{r4, r5, r7, pc}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	fffffe6c 	.word	0xfffffe6c
 80087a8:	0801371c 	.word	0x0801371c
 80087ac:	0801375c 	.word	0x0801375c

080087b0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b0f8      	sub	sp, #480	; 0x1e0
 80087b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80087b6:	258c      	movs	r5, #140	; 0x8c
 80087b8:	006d      	lsls	r5, r5, #1
 80087ba:	197b      	adds	r3, r7, r5
 80087bc:	0018      	movs	r0, r3
 80087be:	23c6      	movs	r3, #198	; 0xc6
 80087c0:	001a      	movs	r2, r3
 80087c2:	2100      	movs	r1, #0
 80087c4:	f003 fd5a 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 80087c8:	4b21      	ldr	r3, [pc, #132]	; (8008850 <astronode_send_sak_rr+0xa0>)
 80087ca:	24f0      	movs	r4, #240	; 0xf0
 80087cc:	0064      	lsls	r4, r4, #1
 80087ce:	191b      	adds	r3, r3, r4
 80087d0:	19db      	adds	r3, r3, r7
 80087d2:	0018      	movs	r0, r3
 80087d4:	23c6      	movs	r3, #198	; 0xc6
 80087d6:	001a      	movs	r2, r3
 80087d8:	2100      	movs	r1, #0
 80087da:	f003 fd4f 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80087de:	197b      	adds	r3, r7, r5
 80087e0:	2245      	movs	r2, #69	; 0x45
 80087e2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087e4:	2350      	movs	r3, #80	; 0x50
 80087e6:	18fa      	adds	r2, r7, r3
 80087e8:	197b      	adds	r3, r7, r5
 80087ea:	0011      	movs	r1, r2
 80087ec:	0018      	movs	r0, r3
 80087ee:	f000 fd4f 	bl	8009290 <astronode_transport_send_receive>
 80087f2:	0003      	movs	r3, r0
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d126      	bne.n	8008846 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <astronode_send_sak_rr+0xa0>)
 80087fa:	191b      	adds	r3, r3, r4
 80087fc:	19db      	adds	r3, r3, r7
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2bc5      	cmp	r3, #197	; 0xc5
 8008802:	d11c      	bne.n	800883e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008804:	4b12      	ldr	r3, [pc, #72]	; (8008850 <astronode_send_sak_rr+0xa0>)
 8008806:	191b      	adds	r3, r3, r4
 8008808:	19db      	adds	r3, r3, r7
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	b299      	uxth	r1, r3
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <astronode_send_sak_rr+0xa0>)
 8008810:	191b      	adds	r3, r3, r4
 8008812:	19db      	adds	r3, r3, r7
 8008814:	789b      	ldrb	r3, [r3, #2]
 8008816:	b29b      	uxth	r3, r3
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b29a      	uxth	r2, r3
 800881c:	20ef      	movs	r0, #239	; 0xef
 800881e:	0040      	lsls	r0, r0, #1
 8008820:	183b      	adds	r3, r7, r0
 8008822:	188a      	adds	r2, r1, r2
 8008824:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008826:	183b      	adds	r3, r7, r0
 8008828:	881a      	ldrh	r2, [r3, #0]
 800882a:	490a      	ldr	r1, [pc, #40]	; (8008854 <astronode_send_sak_rr+0xa4>)
 800882c:	003b      	movs	r3, r7
 800882e:	0018      	movs	r0, r3
 8008830:	f003 fc8e 	bl	800c150 <sprintf>
            send_debug_logs(str);
 8008834:	003b      	movs	r3, r7
 8008836:	0018      	movs	r0, r3
 8008838:	f7fa fac4 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800883c:	e003      	b.n	8008846 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <astronode_send_sak_rr+0xa8>)
 8008840:	0018      	movs	r0, r3
 8008842:	f7fa fabf 	bl	8002dc4 <send_debug_logs>
}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	46bd      	mov	sp, r7
 800884a:	b078      	add	sp, #480	; 0x1e0
 800884c:	bdb0      	pop	{r4, r5, r7, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	fffffe70 	.word	0xfffffe70
 8008854:	08013778 	.word	0x08013778
 8008858:	080137a4 	.word	0x080137a4

0800885c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800885c:	b5b0      	push	{r4, r5, r7, lr}
 800885e:	b0e4      	sub	sp, #400	; 0x190
 8008860:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008862:	24c8      	movs	r4, #200	; 0xc8
 8008864:	193b      	adds	r3, r7, r4
 8008866:	0018      	movs	r0, r3
 8008868:	23c6      	movs	r3, #198	; 0xc6
 800886a:	001a      	movs	r2, r3
 800886c:	2100      	movs	r1, #0
 800886e:	f003 fd05 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008872:	4b16      	ldr	r3, [pc, #88]	; (80088cc <astronode_send_sak_cr+0x70>)
 8008874:	25c8      	movs	r5, #200	; 0xc8
 8008876:	006d      	lsls	r5, r5, #1
 8008878:	195b      	adds	r3, r3, r5
 800887a:	19db      	adds	r3, r3, r7
 800887c:	0018      	movs	r0, r3
 800887e:	23c6      	movs	r3, #198	; 0xc6
 8008880:	001a      	movs	r2, r3
 8008882:	2100      	movs	r1, #0
 8008884:	f003 fcfa 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008888:	193b      	adds	r3, r7, r4
 800888a:	2246      	movs	r2, #70	; 0x46
 800888c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800888e:	003a      	movs	r2, r7
 8008890:	193b      	adds	r3, r7, r4
 8008892:	0011      	movs	r1, r2
 8008894:	0018      	movs	r0, r3
 8008896:	f000 fcfb 	bl	8009290 <astronode_transport_send_receive>
 800889a:	0003      	movs	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d111      	bne.n	80088c4 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <astronode_send_sak_cr+0x70>)
 80088a2:	195b      	adds	r3, r3, r5
 80088a4:	19db      	adds	r3, r3, r7
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2bc6      	cmp	r3, #198	; 0xc6
 80088aa:	d107      	bne.n	80088bc <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <astronode_send_sak_cr+0x74>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <astronode_send_sak_cr+0x78>)
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7fa fa85 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80088ba:	e003      	b.n	80088c4 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <astronode_send_sak_cr+0x7c>)
 80088be:	0018      	movs	r0, r3
 80088c0:	f7fa fa80 	bl	8002dc4 <send_debug_logs>
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b064      	add	sp, #400	; 0x190
 80088ca:	bdb0      	pop	{r4, r5, r7, pc}
 80088cc:	fffffe70 	.word	0xfffffe70
 80088d0:	20000b9c 	.word	0x20000b9c
 80088d4:	080137d8 	.word	0x080137d8
 80088d8:	08013800 	.word	0x08013800

080088dc <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80088dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088de:	b0ed      	sub	sp, #436	; 0x1b4
 80088e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088e2:	21c8      	movs	r1, #200	; 0xc8
 80088e4:	2318      	movs	r3, #24
 80088e6:	18cb      	adds	r3, r1, r3
 80088e8:	19db      	adds	r3, r3, r7
 80088ea:	0018      	movs	r0, r3
 80088ec:	23c6      	movs	r3, #198	; 0xc6
 80088ee:	001a      	movs	r2, r3
 80088f0:	2100      	movs	r1, #0
 80088f2:	f003 fcc3 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 80088f6:	4b4a      	ldr	r3, [pc, #296]	; (8008a20 <astronode_send_mpn_rr+0x144>)
 80088f8:	26cc      	movs	r6, #204	; 0xcc
 80088fa:	0076      	lsls	r6, r6, #1
 80088fc:	199b      	adds	r3, r3, r6
 80088fe:	2218      	movs	r2, #24
 8008900:	4694      	mov	ip, r2
 8008902:	44bc      	add	ip, r7
 8008904:	4463      	add	r3, ip
 8008906:	0018      	movs	r0, r3
 8008908:	23c6      	movs	r3, #198	; 0xc6
 800890a:	001a      	movs	r2, r3
 800890c:	2100      	movs	r1, #0
 800890e:	f003 fcb5 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008912:	21c8      	movs	r1, #200	; 0xc8
 8008914:	2318      	movs	r3, #24
 8008916:	18cb      	adds	r3, r1, r3
 8008918:	19db      	adds	r3, r3, r7
 800891a:	221b      	movs	r2, #27
 800891c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800891e:	2318      	movs	r3, #24
 8008920:	18fa      	adds	r2, r7, r3
 8008922:	2318      	movs	r3, #24
 8008924:	18cb      	adds	r3, r1, r3
 8008926:	19db      	adds	r3, r3, r7
 8008928:	0011      	movs	r1, r2
 800892a:	0018      	movs	r0, r3
 800892c:	f000 fcb0 	bl	8009290 <astronode_transport_send_receive>
 8008930:	0003      	movs	r3, r0
 8008932:	2b01      	cmp	r3, #1
 8008934:	d16f      	bne.n	8008a16 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008936:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <astronode_send_mpn_rr+0x144>)
 8008938:	0032      	movs	r2, r6
 800893a:	189b      	adds	r3, r3, r2
 800893c:	2118      	movs	r1, #24
 800893e:	468c      	mov	ip, r1
 8008940:	44bc      	add	ip, r7
 8008942:	4463      	add	r3, ip
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b9b      	cmp	r3, #155	; 0x9b
 8008948:	d161      	bne.n	8008a0e <astronode_send_mpn_rr+0x132>
        {
 800894a:	466b      	mov	r3, sp
 800894c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800894e:	4b34      	ldr	r3, [pc, #208]	; (8008a20 <astronode_send_mpn_rr+0x144>)
 8008950:	189b      	adds	r3, r3, r2
 8008952:	2218      	movs	r2, #24
 8008954:	4694      	mov	ip, r2
 8008956:	44bc      	add	ip, r7
 8008958:	4463      	add	r3, ip
 800895a:	22c4      	movs	r2, #196	; 0xc4
 800895c:	5a9b      	ldrh	r3, [r3, r2]
 800895e:	001a      	movs	r2, r3
 8008960:	3a01      	subs	r2, #1
 8008962:	21ca      	movs	r1, #202	; 0xca
 8008964:	0049      	lsls	r1, r1, #1
 8008966:	2018      	movs	r0, #24
 8008968:	1809      	adds	r1, r1, r0
 800896a:	19c9      	adds	r1, r1, r7
 800896c:	600a      	str	r2, [r1, #0]
 800896e:	001c      	movs	r4, r3
 8008970:	2200      	movs	r2, #0
 8008972:	0015      	movs	r5, r2
 8008974:	0020      	movs	r0, r4
 8008976:	0029      	movs	r1, r5
 8008978:	0004      	movs	r4, r0
 800897a:	0f62      	lsrs	r2, r4, #29
 800897c:	000c      	movs	r4, r1
 800897e:	00e4      	lsls	r4, r4, #3
 8008980:	617c      	str	r4, [r7, #20]
 8008982:	697c      	ldr	r4, [r7, #20]
 8008984:	4314      	orrs	r4, r2
 8008986:	617c      	str	r4, [r7, #20]
 8008988:	0001      	movs	r1, r0
 800898a:	00c9      	lsls	r1, r1, #3
 800898c:	6139      	str	r1, [r7, #16]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	6838      	ldr	r0, [r7, #0]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	0004      	movs	r4, r0
 800899a:	0f62      	lsrs	r2, r4, #29
 800899c:	000c      	movs	r4, r1
 800899e:	00e4      	lsls	r4, r4, #3
 80089a0:	60fc      	str	r4, [r7, #12]
 80089a2:	68fc      	ldr	r4, [r7, #12]
 80089a4:	4314      	orrs	r4, r2
 80089a6:	60fc      	str	r4, [r7, #12]
 80089a8:	0001      	movs	r1, r0
 80089aa:	00ca      	lsls	r2, r1, #3
 80089ac:	60ba      	str	r2, [r7, #8]
 80089ae:	3307      	adds	r3, #7
 80089b0:	08db      	lsrs	r3, r3, #3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	4669      	mov	r1, sp
 80089b6:	1acb      	subs	r3, r1, r3
 80089b8:	469d      	mov	sp, r3
 80089ba:	466b      	mov	r3, sp
 80089bc:	3300      	adds	r3, #0
 80089be:	24c8      	movs	r4, #200	; 0xc8
 80089c0:	0064      	lsls	r4, r4, #1
 80089c2:	2218      	movs	r2, #24
 80089c4:	18a2      	adds	r2, r4, r2
 80089c6:	19d1      	adds	r1, r2, r7
 80089c8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80089ca:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <astronode_send_mpn_rr+0x148>)
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7fa f9f9 	bl	8002dc4 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80089d2:	4b13      	ldr	r3, [pc, #76]	; (8008a20 <astronode_send_mpn_rr+0x144>)
 80089d4:	22cc      	movs	r2, #204	; 0xcc
 80089d6:	0052      	lsls	r2, r2, #1
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	2218      	movs	r2, #24
 80089dc:	4694      	mov	ip, r2
 80089de:	44bc      	add	ip, r7
 80089e0:	4463      	add	r3, ip
 80089e2:	22c4      	movs	r2, #196	; 0xc4
 80089e4:	5a9b      	ldrh	r3, [r3, r2]
 80089e6:	0019      	movs	r1, r3
 80089e8:	2318      	movs	r3, #24
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a0e      	ldr	r2, [pc, #56]	; (8008a28 <astronode_send_mpn_rr+0x14c>)
 80089f0:	2018      	movs	r0, #24
 80089f2:	1820      	adds	r0, r4, r0
 80089f4:	19c0      	adds	r0, r0, r7
 80089f6:	6800      	ldr	r0, [r0, #0]
 80089f8:	f003 fb76 	bl	800c0e8 <snprintf>
            send_debug_logs(product_number);
 80089fc:	2318      	movs	r3, #24
 80089fe:	18e3      	adds	r3, r4, r3
 8008a00:	19db      	adds	r3, r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fa f9dd 	bl	8002dc4 <send_debug_logs>
 8008a0a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008a0c:	e003      	b.n	8008a16 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <astronode_send_mpn_rr+0x150>)
 8008a10:	0018      	movs	r0, r3
 8008a12:	f7fa f9d7 	bl	8002dc4 <send_debug_logs>
}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b06d      	add	sp, #436	; 0x1b4
 8008a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	fffffe68 	.word	0xfffffe68
 8008a24:	080138c8 	.word	0x080138c8
 8008a28:	08013400 	.word	0x08013400
 8008a2c:	0801343c 	.word	0x0801343c

08008a30 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008a30:	b5b0      	push	{r4, r5, r7, lr}
 8008a32:	b0e4      	sub	sp, #400	; 0x190
 8008a34:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a36:	24c8      	movs	r4, #200	; 0xc8
 8008a38:	193b      	adds	r3, r7, r4
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	23c6      	movs	r3, #198	; 0xc6
 8008a3e:	001a      	movs	r2, r3
 8008a40:	2100      	movs	r1, #0
 8008a42:	f003 fc1b 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008a46:	4b16      	ldr	r3, [pc, #88]	; (8008aa0 <astronode_send_cmd_cr+0x70>)
 8008a48:	25c8      	movs	r5, #200	; 0xc8
 8008a4a:	006d      	lsls	r5, r5, #1
 8008a4c:	195b      	adds	r3, r3, r5
 8008a4e:	19db      	adds	r3, r3, r7
 8008a50:	0018      	movs	r0, r3
 8008a52:	23c6      	movs	r3, #198	; 0xc6
 8008a54:	001a      	movs	r2, r3
 8008a56:	2100      	movs	r1, #0
 8008a58:	f003 fc10 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008a5c:	193b      	adds	r3, r7, r4
 8008a5e:	2248      	movs	r2, #72	; 0x48
 8008a60:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a62:	003a      	movs	r2, r7
 8008a64:	193b      	adds	r3, r7, r4
 8008a66:	0011      	movs	r1, r2
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f000 fc11 	bl	8009290 <astronode_transport_send_receive>
 8008a6e:	0003      	movs	r3, r0
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d111      	bne.n	8008a98 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <astronode_send_cmd_cr+0x70>)
 8008a76:	195b      	adds	r3, r3, r5
 8008a78:	19db      	adds	r3, r3, r7
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2bc8      	cmp	r3, #200	; 0xc8
 8008a7e:	d107      	bne.n	8008a90 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <astronode_send_cmd_cr+0x74>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008a86:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <astronode_send_cmd_cr+0x78>)
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7fa f99b 	bl	8002dc4 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008a8e:	e003      	b.n	8008a98 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008a90:	4b06      	ldr	r3, [pc, #24]	; (8008aac <astronode_send_cmd_cr+0x7c>)
 8008a92:	0018      	movs	r0, r3
 8008a94:	f7fa f996 	bl	8002dc4 <send_debug_logs>
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b064      	add	sp, #400	; 0x190
 8008a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa0:	fffffe70 	.word	0xfffffe70
 8008aa4:	20000b9e 	.word	0x20000b9e
 8008aa8:	08013d18 	.word	0x08013d18
 8008aac:	08013d3c 	.word	0x08013d3c

08008ab0 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab2:	4cac      	ldr	r4, [pc, #688]	; (8008d64 <astronode_send_cmd_rr+0x2b4>)
 8008ab4:	44a5      	add	sp, r4
 8008ab6:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008ab8:	218c      	movs	r1, #140	; 0x8c
 8008aba:	0049      	lsls	r1, r1, #1
 8008abc:	2318      	movs	r3, #24
 8008abe:	18cb      	adds	r3, r1, r3
 8008ac0:	19db      	adds	r3, r3, r7
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	23c6      	movs	r3, #198	; 0xc6
 8008ac6:	001a      	movs	r2, r3
 8008ac8:	2100      	movs	r1, #0
 8008aca:	f003 fbd7 	bl	800c27c <memset>
    astronode_app_msg_t answer = {0};
 8008ace:	4ba6      	ldr	r3, [pc, #664]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008ad0:	26f8      	movs	r6, #248	; 0xf8
 8008ad2:	0076      	lsls	r6, r6, #1
 8008ad4:	199b      	adds	r3, r3, r6
 8008ad6:	2218      	movs	r2, #24
 8008ad8:	4694      	mov	ip, r2
 8008ada:	44bc      	add	ip, r7
 8008adc:	4463      	add	r3, ip
 8008ade:	0018      	movs	r0, r3
 8008ae0:	23c6      	movs	r3, #198	; 0xc6
 8008ae2:	001a      	movs	r2, r3
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f003 fbc9 	bl	800c27c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008aea:	218c      	movs	r1, #140	; 0x8c
 8008aec:	0049      	lsls	r1, r1, #1
 8008aee:	2318      	movs	r3, #24
 8008af0:	18cb      	adds	r3, r1, r3
 8008af2:	19db      	adds	r3, r3, r7
 8008af4:	2247      	movs	r2, #71	; 0x47
 8008af6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008af8:	2350      	movs	r3, #80	; 0x50
 8008afa:	2218      	movs	r2, #24
 8008afc:	189b      	adds	r3, r3, r2
 8008afe:	19da      	adds	r2, r3, r7
 8008b00:	2318      	movs	r3, #24
 8008b02:	18cb      	adds	r3, r1, r3
 8008b04:	19db      	adds	r3, r3, r7
 8008b06:	0011      	movs	r1, r2
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f000 fbc1 	bl	8009290 <astronode_transport_send_receive>
 8008b0e:	0003      	movs	r3, r0
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d000      	beq.n	8008b16 <astronode_send_cmd_rr+0x66>
 8008b14:	e121      	b.n	8008d5a <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008b16:	4b94      	ldr	r3, [pc, #592]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008b18:	199b      	adds	r3, r3, r6
 8008b1a:	2218      	movs	r2, #24
 8008b1c:	4694      	mov	ip, r2
 8008b1e:	44bc      	add	ip, r7
 8008b20:	4463      	add	r3, ip
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2bc7      	cmp	r3, #199	; 0xc7
 8008b26:	d000      	beq.n	8008b2a <astronode_send_cmd_rr+0x7a>
 8008b28:	e113      	b.n	8008d52 <astronode_send_cmd_rr+0x2a2>
        {
 8008b2a:	466b      	mov	r3, sp
 8008b2c:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008b2e:	4b8f      	ldr	r3, [pc, #572]	; (8008d6c <astronode_send_cmd_rr+0x2bc>)
 8008b30:	0018      	movs	r0, r3
 8008b32:	f7fa f947 	bl	8002dc4 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008b36:	4b8c      	ldr	r3, [pc, #560]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008b38:	21f8      	movs	r1, #248	; 0xf8
 8008b3a:	0049      	lsls	r1, r1, #1
 8008b3c:	185b      	adds	r3, r3, r1
 8008b3e:	2218      	movs	r2, #24
 8008b40:	4694      	mov	ip, r2
 8008b42:	44bc      	add	ip, r7
 8008b44:	4463      	add	r3, ip
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008b4a:	4b87      	ldr	r3, [pc, #540]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008b4c:	185b      	adds	r3, r3, r1
 8008b4e:	2018      	movs	r0, #24
 8008b50:	4684      	mov	ip, r0
 8008b52:	44bc      	add	ip, r7
 8008b54:	4463      	add	r3, ip
 8008b56:	789b      	ldrb	r3, [r3, #2]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008b5c:	4b82      	ldr	r3, [pc, #520]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008b5e:	185b      	adds	r3, r3, r1
 8008b60:	2018      	movs	r0, #24
 8008b62:	4684      	mov	ip, r0
 8008b64:	44bc      	add	ip, r7
 8008b66:	4463      	add	r3, ip
 8008b68:	78db      	ldrb	r3, [r3, #3]
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008b6e:	4b7e      	ldr	r3, [pc, #504]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008b70:	185b      	adds	r3, r3, r1
 8008b72:	2118      	movs	r1, #24
 8008b74:	468c      	mov	ip, r1
 8008b76:	44bc      	add	ip, r7
 8008b78:	4463      	add	r3, ip
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008b80:	22f4      	movs	r2, #244	; 0xf4
 8008b82:	0052      	lsls	r2, r2, #1
 8008b84:	2118      	movs	r1, #24
 8008b86:	1851      	adds	r1, r2, r1
 8008b88:	19c8      	adds	r0, r1, r7
 8008b8a:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008b8c:	2318      	movs	r3, #24
 8008b8e:	18d3      	adds	r3, r2, r3
 8008b90:	19db      	adds	r3, r3, r7
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4976      	ldr	r1, [pc, #472]	; (8008d70 <astronode_send_cmd_rr+0x2c0>)
 8008b96:	2318      	movs	r3, #24
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f003 fad8 	bl	800c150 <sprintf>
            send_debug_logs(str);
 8008ba0:	2318      	movs	r3, #24
 8008ba2:	18fb      	adds	r3, r7, r3
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7fa f90d 	bl	8002dc4 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008baa:	4b6f      	ldr	r3, [pc, #444]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008bac:	21f8      	movs	r1, #248	; 0xf8
 8008bae:	0049      	lsls	r1, r1, #1
 8008bb0:	185b      	adds	r3, r3, r1
 8008bb2:	2218      	movs	r2, #24
 8008bb4:	4694      	mov	ip, r2
 8008bb6:	44bc      	add	ip, r7
 8008bb8:	4463      	add	r3, ip
 8008bba:	22c4      	movs	r2, #196	; 0xc4
 8008bbc:	5a9b      	ldrh	r3, [r3, r2]
 8008bbe:	2b2c      	cmp	r3, #44	; 0x2c
 8008bc0:	d00e      	beq.n	8008be0 <astronode_send_cmd_rr+0x130>
 8008bc2:	4b69      	ldr	r3, [pc, #420]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008bc4:	185b      	adds	r3, r3, r1
 8008bc6:	2218      	movs	r2, #24
 8008bc8:	4694      	mov	ip, r2
 8008bca:	44bc      	add	ip, r7
 8008bcc:	4463      	add	r3, ip
 8008bce:	22c4      	movs	r2, #196	; 0xc4
 8008bd0:	5a9b      	ldrh	r3, [r3, r2]
 8008bd2:	2b0c      	cmp	r3, #12
 8008bd4:	d004      	beq.n	8008be0 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008bd6:	4b67      	ldr	r3, [pc, #412]	; (8008d74 <astronode_send_cmd_rr+0x2c4>)
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7fa f8f3 	bl	8002dc4 <send_debug_logs>
                return;
 8008bde:	e0b6      	b.n	8008d4e <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008be0:	4b61      	ldr	r3, [pc, #388]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008be2:	22f8      	movs	r2, #248	; 0xf8
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	189b      	adds	r3, r3, r2
 8008be8:	2218      	movs	r2, #24
 8008bea:	4694      	mov	ip, r2
 8008bec:	44bc      	add	ip, r7
 8008bee:	4463      	add	r3, ip
 8008bf0:	22c4      	movs	r2, #196	; 0xc4
 8008bf2:	5a9b      	ldrh	r3, [r3, r2]
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	21f2      	movs	r1, #242	; 0xf2
 8008bfa:	0049      	lsls	r1, r1, #1
 8008bfc:	2018      	movs	r0, #24
 8008bfe:	1809      	adds	r1, r1, r0
 8008c00:	19c9      	adds	r1, r1, r7
 8008c02:	600a      	str	r2, [r1, #0]
 8008c04:	001c      	movs	r4, r3
 8008c06:	2200      	movs	r2, #0
 8008c08:	0015      	movs	r5, r2
 8008c0a:	0020      	movs	r0, r4
 8008c0c:	0029      	movs	r1, r5
 8008c0e:	0004      	movs	r4, r0
 8008c10:	0f62      	lsrs	r2, r4, #29
 8008c12:	000c      	movs	r4, r1
 8008c14:	00e4      	lsls	r4, r4, #3
 8008c16:	617c      	str	r4, [r7, #20]
 8008c18:	697c      	ldr	r4, [r7, #20]
 8008c1a:	4314      	orrs	r4, r2
 8008c1c:	617c      	str	r4, [r7, #20]
 8008c1e:	0001      	movs	r1, r0
 8008c20:	00c9      	lsls	r1, r1, #3
 8008c22:	6139      	str	r1, [r7, #16]
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	6838      	ldr	r0, [r7, #0]
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	0004      	movs	r4, r0
 8008c30:	0f62      	lsrs	r2, r4, #29
 8008c32:	000c      	movs	r4, r1
 8008c34:	00e4      	lsls	r4, r4, #3
 8008c36:	60fc      	str	r4, [r7, #12]
 8008c38:	68fc      	ldr	r4, [r7, #12]
 8008c3a:	4314      	orrs	r4, r2
 8008c3c:	60fc      	str	r4, [r7, #12]
 8008c3e:	0001      	movs	r1, r0
 8008c40:	00ca      	lsls	r2, r1, #3
 8008c42:	60ba      	str	r2, [r7, #8]
 8008c44:	3307      	adds	r3, #7
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	4669      	mov	r1, sp
 8008c4c:	1acb      	subs	r3, r1, r3
 8008c4e:	469d      	mov	sp, r3
 8008c50:	466b      	mov	r3, sp
 8008c52:	3300      	adds	r3, #0
 8008c54:	20f0      	movs	r0, #240	; 0xf0
 8008c56:	0040      	lsls	r0, r0, #1
 8008c58:	2218      	movs	r2, #24
 8008c5a:	1882      	adds	r2, r0, r2
 8008c5c:	19d1      	adds	r1, r2, r7
 8008c5e:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008c60:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <astronode_send_cmd_rr+0x2b8>)
 8008c62:	22f8      	movs	r2, #248	; 0xf8
 8008c64:	0052      	lsls	r2, r2, #1
 8008c66:	189b      	adds	r3, r3, r2
 8008c68:	2218      	movs	r2, #24
 8008c6a:	4694      	mov	ip, r2
 8008c6c:	44bc      	add	ip, r7
 8008c6e:	4463      	add	r3, ip
 8008c70:	22c4      	movs	r2, #196	; 0xc4
 8008c72:	5a9b      	ldrh	r3, [r3, r2]
 8008c74:	3b03      	subs	r3, #3
 8008c76:	0019      	movs	r1, r3
 8008c78:	2350      	movs	r3, #80	; 0x50
 8008c7a:	2218      	movs	r2, #24
 8008c7c:	189b      	adds	r3, r3, r2
 8008c7e:	19db      	adds	r3, r3, r7
 8008c80:	3305      	adds	r3, #5
 8008c82:	4a3d      	ldr	r2, [pc, #244]	; (8008d78 <astronode_send_cmd_rr+0x2c8>)
 8008c84:	2418      	movs	r4, #24
 8008c86:	1900      	adds	r0, r0, r4
 8008c88:	19c0      	adds	r0, r0, r7
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	f003 fa2c 	bl	800c0e8 <snprintf>
 8008c90:	0002      	movs	r2, r0
 8008c92:	23ef      	movs	r3, #239	; 0xef
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	2118      	movs	r1, #24
 8008c98:	185b      	adds	r3, r3, r1
 8008c9a:	19db      	adds	r3, r3, r7
 8008c9c:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c9e:	23f0      	movs	r3, #240	; 0xf0
 8008ca0:	33ff      	adds	r3, #255	; 0xff
 8008ca2:	2218      	movs	r2, #24
 8008ca4:	189b      	adds	r3, r3, r2
 8008ca6:	19db      	adds	r3, r3, r7
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	e024      	b.n	8008cf8 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008cae:	23f0      	movs	r3, #240	; 0xf0
 8008cb0:	33ff      	adds	r3, #255	; 0xff
 8008cb2:	2218      	movs	r2, #24
 8008cb4:	189b      	adds	r3, r3, r2
 8008cb6:	19db      	adds	r3, r3, r7
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	22f0      	movs	r2, #240	; 0xf0
 8008cbc:	0052      	lsls	r2, r2, #1
 8008cbe:	2118      	movs	r1, #24
 8008cc0:	1852      	adds	r2, r2, r1
 8008cc2:	19d2      	adds	r2, r2, r7
 8008cc4:	6812      	ldr	r2, [r2, #0]
 8008cc6:	5cd3      	ldrb	r3, [r2, r3]
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <astronode_send_cmd_rr+0x2cc>)
 8008ccc:	18d3      	adds	r3, r2, r3
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	2397      	movs	r3, #151	; 0x97
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d104      	bne.n	8008ce2 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008cd8:	4b29      	ldr	r3, [pc, #164]	; (8008d80 <astronode_send_cmd_rr+0x2d0>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f7fa f872 	bl	8002dc4 <send_debug_logs>
                    return;
 8008ce0:	e035      	b.n	8008d4e <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008ce2:	21f0      	movs	r1, #240	; 0xf0
 8008ce4:	31ff      	adds	r1, #255	; 0xff
 8008ce6:	2318      	movs	r3, #24
 8008ce8:	18cb      	adds	r3, r1, r3
 8008cea:	19db      	adds	r3, r3, r7
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	2318      	movs	r3, #24
 8008cf0:	18cb      	adds	r3, r1, r3
 8008cf2:	19db      	adds	r3, r3, r7
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	23f0      	movs	r3, #240	; 0xf0
 8008cfa:	33ff      	adds	r3, #255	; 0xff
 8008cfc:	2218      	movs	r2, #24
 8008cfe:	189b      	adds	r3, r3, r2
 8008d00:	19db      	adds	r3, r3, r7
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	22ef      	movs	r2, #239	; 0xef
 8008d08:	0052      	lsls	r2, r2, #1
 8008d0a:	2118      	movs	r1, #24
 8008d0c:	1852      	adds	r2, r2, r1
 8008d0e:	19d2      	adds	r2, r2, r7
 8008d10:	8812      	ldrh	r2, [r2, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d8cb      	bhi.n	8008cae <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008d16:	4b1b      	ldr	r3, [pc, #108]	; (8008d84 <astronode_send_cmd_rr+0x2d4>)
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7fa f853 	bl	8002dc4 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008d1e:	2350      	movs	r3, #80	; 0x50
 8008d20:	2218      	movs	r2, #24
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	19db      	adds	r3, r3, r7
 8008d26:	1d5a      	adds	r2, r3, #5
 8008d28:	4917      	ldr	r1, [pc, #92]	; (8008d88 <astronode_send_cmd_rr+0x2d8>)
 8008d2a:	24f0      	movs	r4, #240	; 0xf0
 8008d2c:	0064      	lsls	r4, r4, #1
 8008d2e:	2318      	movs	r3, #24
 8008d30:	18e3      	adds	r3, r4, r3
 8008d32:	19db      	adds	r3, r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	0018      	movs	r0, r3
 8008d38:	f003 fa0a 	bl	800c150 <sprintf>
            send_debug_logs(command_content);
 8008d3c:	2318      	movs	r3, #24
 8008d3e:	18e3      	adds	r3, r4, r3
 8008d40:	19db      	adds	r3, r3, r7
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7fa f83d 	bl	8002dc4 <send_debug_logs>
 8008d4a:	46b5      	mov	sp, r6
 8008d4c:	e005      	b.n	8008d5a <astronode_send_cmd_rr+0x2aa>
                return;
 8008d4e:	46b5      	mov	sp, r6
 8008d50:	e003      	b.n	8008d5a <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008d52:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <astronode_send_cmd_rr+0x2dc>)
 8008d54:	0018      	movs	r0, r3
 8008d56:	f7fa f835 	bl	8002dc4 <send_debug_logs>
        }
    }
}
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	2383      	movs	r3, #131	; 0x83
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	449d      	add	sp, r3
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	fffffdf4 	.word	0xfffffdf4
 8008d68:	fffffe60 	.word	0xfffffe60
 8008d6c:	08013d54 	.word	0x08013d54
 8008d70:	08013d70 	.word	0x08013d70
 8008d74:	08013dc0 	.word	0x08013dc0
 8008d78:	08013400 	.word	0x08013400
 8008d7c:	080147d8 	.word	0x080147d8
 8008d80:	08013dd4 	.word	0x08013dd4
 8008d84:	08013e00 	.word	0x08013e00
 8008d88:	08013e18 	.word	0x08013e18
 8008d8c:	08013e1c 	.word	0x08013e1c

08008d90 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <is_sak_available+0x10>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
}
 8008d98:	0018      	movs	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	20000b9c 	.word	0x20000b9c

08008da4 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <is_astronode_reset+0x10>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
}
 8008dac:	0018      	movs	r0, r3
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	20000b9d 	.word	0x20000b9d

08008db8 <is_command_available>:

bool is_command_available()
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <is_command_available+0x10>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
}
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	20000b9e 	.word	0x20000b9e

08008dcc <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	1dfb      	adds	r3, r7, #7
 8008dd8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008dda:	1dfb      	adds	r3, r7, #7
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b2f      	cmp	r3, #47	; 0x2f
 8008de0:	d90b      	bls.n	8008dfa <ascii_to_value+0x2e>
 8008de2:	1dfb      	adds	r3, r7, #7
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b39      	cmp	r3, #57	; 0x39
 8008de8:	d807      	bhi.n	8008dfa <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008dea:	1dfb      	adds	r3, r7, #7
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	3b30      	subs	r3, #48	; 0x30
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	701a      	strb	r2, [r3, #0]
        return true;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e010      	b.n	8008e1c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008dfa:	1dfb      	adds	r3, r7, #7
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d90b      	bls.n	8008e1a <ascii_to_value+0x4e>
 8008e02:	1dfb      	adds	r3, r7, #7
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b46      	cmp	r3, #70	; 0x46
 8008e08:	d807      	bhi.n	8008e1a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008e0a:	1dfb      	adds	r3, r7, #7
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	3b37      	subs	r3, #55	; 0x37
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	701a      	strb	r2, [r3, #0]
        return true;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e000      	b.n	8008e1c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008e1a:	2300      	movs	r3, #0
    }
}
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008e2e:	250e      	movs	r5, #14
 8008e30:	197b      	adds	r3, r7, r5
 8008e32:	2200      	movs	r2, #0
 8008e34:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008e36:	197b      	adds	r3, r7, r5
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	197a      	adds	r2, r7, r5
 8008e3c:	1c59      	adds	r1, r3, #1
 8008e3e:	8011      	strh	r1, [r2, #0]
 8008e40:	001a      	movs	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	189b      	adds	r3, r3, r2
 8008e46:	2202      	movs	r2, #2
 8008e48:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	260a      	movs	r6, #10
 8008e4e:	19bc      	adds	r4, r7, r6
 8008e50:	4a44      	ldr	r2, [pc, #272]	; (8008f64 <astronode_create_request_transport+0x140>)
 8008e52:	2101      	movs	r1, #1
 8008e54:	0018      	movs	r0, r3
 8008e56:	f000 fa7d 	bl	8009354 <calculate_crc>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	1c58      	adds	r0, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	22c4      	movs	r2, #196	; 0xc4
 8008e66:	5a99      	ldrh	r1, [r3, r2]
 8008e68:	19bc      	adds	r4, r7, r6
 8008e6a:	19bb      	adds	r3, r7, r6
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	001a      	movs	r2, r3
 8008e70:	f000 fa70 	bl	8009354 <calculate_crc>
 8008e74:	0003      	movs	r3, r0
 8008e76:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008e78:	19bb      	adds	r3, r7, r6
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	0031      	movs	r1, r6
 8008e82:	19bb      	adds	r3, r7, r6
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	b21a      	sxth	r2, r3
 8008e90:	187b      	adds	r3, r7, r1
 8008e92:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7818      	ldrb	r0, [r3, #0]
 8008e98:	197b      	adds	r3, r7, r5
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	f000 fbeb 	bl	800967c <uint8_to_ascii_buffer>
    index += 2;
 8008ea6:	197b      	adds	r3, r7, r5
 8008ea8:	197a      	adds	r2, r7, r5
 8008eaa:	8812      	ldrh	r2, [r2, #0]
 8008eac:	3202      	adds	r2, #2
 8008eae:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	18fb      	adds	r3, r7, r3
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	801a      	strh	r2, [r3, #0]
 8008eb8:	e017      	b.n	8008eea <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008eba:	240c      	movs	r4, #12
 8008ebc:	193b      	adds	r3, r7, r4
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	7858      	ldrb	r0, [r3, #1]
 8008ec6:	250e      	movs	r5, #14
 8008ec8:	197b      	adds	r3, r7, r5
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	18d3      	adds	r3, r2, r3
 8008ed0:	0019      	movs	r1, r3
 8008ed2:	f000 fbd3 	bl	800967c <uint8_to_ascii_buffer>
        index += 2;
 8008ed6:	197b      	adds	r3, r7, r5
 8008ed8:	197a      	adds	r2, r7, r5
 8008eda:	8812      	ldrh	r2, [r2, #0]
 8008edc:	3202      	adds	r2, #2
 8008ede:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008ee0:	193b      	adds	r3, r7, r4
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	193b      	adds	r3, r7, r4
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	22c4      	movs	r2, #196	; 0xc4
 8008eee:	5a9b      	ldrh	r3, [r3, r2]
 8008ef0:	220c      	movs	r2, #12
 8008ef2:	18ba      	adds	r2, r7, r2
 8008ef4:	8812      	ldrh	r2, [r2, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d3df      	bcc.n	8008eba <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008efa:	250a      	movs	r5, #10
 8008efc:	197b      	adds	r3, r7, r5
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	0a1b      	lsrs	r3, r3, #8
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	b2d8      	uxtb	r0, r3
 8008f06:	240e      	movs	r4, #14
 8008f08:	193b      	adds	r3, r7, r4
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	18d3      	adds	r3, r2, r3
 8008f10:	0019      	movs	r1, r3
 8008f12:	f000 fbb3 	bl	800967c <uint8_to_ascii_buffer>
    index += 2;
 8008f16:	0021      	movs	r1, r4
 8008f18:	187b      	adds	r3, r7, r1
 8008f1a:	187a      	adds	r2, r7, r1
 8008f1c:	8812      	ldrh	r2, [r2, #0]
 8008f1e:	3202      	adds	r2, #2
 8008f20:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008f22:	197b      	adds	r3, r7, r5
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b2d8      	uxtb	r0, r3
 8008f28:	000c      	movs	r4, r1
 8008f2a:	187b      	adds	r3, r7, r1
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	18d3      	adds	r3, r2, r3
 8008f32:	0019      	movs	r1, r3
 8008f34:	f000 fba2 	bl	800967c <uint8_to_ascii_buffer>
    index += 2;
 8008f38:	0020      	movs	r0, r4
 8008f3a:	183b      	adds	r3, r7, r0
 8008f3c:	183a      	adds	r2, r7, r0
 8008f3e:	8812      	ldrh	r2, [r2, #0]
 8008f40:	3202      	adds	r2, #2
 8008f42:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008f44:	183b      	adds	r3, r7, r0
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	183a      	adds	r2, r7, r0
 8008f4a:	1c59      	adds	r1, r3, #1
 8008f4c:	8011      	strh	r1, [r2, #0]
 8008f4e:	001a      	movs	r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	2203      	movs	r2, #3
 8008f56:	701a      	strb	r2, [r3, #0]

    return index;
 8008f58:	183b      	adds	r3, r7, r0
 8008f5a:	881b      	ldrh	r3, [r3, #0]
}
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	b005      	add	sp, #20
 8008f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f64:	0000ffff 	.word	0x0000ffff

08008f68 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6a:	b089      	sub	sp, #36	; 0x24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	230a      	movs	r3, #10
 8008f74:	18fb      	adds	r3, r7, r3
 8008f76:	1c0a      	adds	r2, r1, #0
 8008f78:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d005      	beq.n	8008f8e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008f82:	4bbd      	ldr	r3, [pc, #756]	; (8009278 <astronode_decode_answer_transport+0x310>)
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7f9 ff1d 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e170      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008f8e:	210a      	movs	r1, #10
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	2201      	movs	r2, #1
 8008f96:	4013      	ands	r3, r2
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d103      	bne.n	8008fa6 <astronode_decode_answer_transport+0x3e>
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	2b07      	cmp	r3, #7
 8008fa4:	d805      	bhi.n	8008fb2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008fa6:	4bb5      	ldr	r3, [pc, #724]	; (800927c <astronode_decode_answer_transport+0x314>)
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7f9 ff0b 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e15e      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	3b08      	subs	r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da00      	bge.n	8008fc0 <astronode_decode_answer_transport+0x58>
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	105b      	asrs	r3, r3, #1
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	22c4      	movs	r2, #196	; 0xc4
 8008fc8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008fca:	230a      	movs	r3, #10
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	18d3      	adds	r3, r2, r3
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d005      	beq.n	8008fe8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008fdc:	4ba8      	ldr	r3, [pc, #672]	; (8009280 <astronode_decode_answer_transport+0x318>)
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f7f9 fef0 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e143      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008fe8:	2117      	movs	r1, #23
 8008fea:	187b      	adds	r3, r7, r1
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008ff0:	2416      	movs	r4, #22
 8008ff2:	193b      	adds	r3, r7, r4
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	187a      	adds	r2, r7, r1
 8009000:	0011      	movs	r1, r2
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff fee2 	bl	8008dcc <ascii_to_value>
 8009008:	0003      	movs	r3, r0
 800900a:	001a      	movs	r2, r3
 800900c:	2301      	movs	r3, #1
 800900e:	4053      	eors	r3, r2
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10e      	bne.n	8009034 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	3302      	adds	r3, #2
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	193a      	adds	r2, r7, r4
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f7ff fed3 	bl	8008dcc <ascii_to_value>
 8009026:	0003      	movs	r3, r0
 8009028:	001a      	movs	r2, r3
 800902a:	2301      	movs	r3, #1
 800902c:	4053      	eors	r3, r2
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009034:	4b93      	ldr	r3, [pc, #588]	; (8009284 <astronode_decode_answer_transport+0x31c>)
 8009036:	0018      	movs	r0, r3
 8009038:	f7f9 fec4 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 800903c:	2300      	movs	r3, #0
 800903e:	e117      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8009040:	2317      	movs	r3, #23
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	b2da      	uxtb	r2, r3
 800904a:	2316      	movs	r3, #22
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	18d3      	adds	r3, r2, r3
 8009052:	b2da      	uxtb	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009058:	231e      	movs	r3, #30
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	2203      	movs	r2, #3
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	231c      	movs	r3, #28
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	2200      	movs	r2, #0
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e045      	b.n	80090f6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800906a:	241e      	movs	r4, #30
 800906c:	193b      	adds	r3, r7, r4
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	18d3      	adds	r3, r2, r3
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2217      	movs	r2, #23
 8009078:	18ba      	adds	r2, r7, r2
 800907a:	0011      	movs	r1, r2
 800907c:	0018      	movs	r0, r3
 800907e:	f7ff fea5 	bl	8008dcc <ascii_to_value>
 8009082:	0003      	movs	r3, r0
 8009084:	001a      	movs	r2, r3
 8009086:	2301      	movs	r3, #1
 8009088:	4053      	eors	r3, r2
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d112      	bne.n	80090b6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009090:	193b      	adds	r3, r7, r4
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	18d3      	adds	r3, r2, r3
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2216      	movs	r2, #22
 800909e:	18ba      	adds	r2, r7, r2
 80090a0:	0011      	movs	r1, r2
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7ff fe92 	bl	8008dcc <ascii_to_value>
 80090a8:	0003      	movs	r3, r0
 80090aa:	001a      	movs	r2, r3
 80090ac:	2301      	movs	r3, #1
 80090ae:	4053      	eors	r3, r2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80090b6:	4b73      	ldr	r3, [pc, #460]	; (8009284 <astronode_decode_answer_transport+0x31c>)
 80090b8:	0018      	movs	r0, r3
 80090ba:	f7f9 fe83 	bl	8002dc4 <send_debug_logs>
            return RS_FAILURE;
 80090be:	2300      	movs	r3, #0
 80090c0:	e0d6      	b.n	8009270 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80090c2:	2317      	movs	r3, #23
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	b2d9      	uxtb	r1, r3
 80090cc:	2316      	movs	r3, #22
 80090ce:	18fb      	adds	r3, r7, r3
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	201c      	movs	r0, #28
 80090d4:	183b      	adds	r3, r7, r0
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	1838      	adds	r0, r7, r0
 80090da:	1c5c      	adds	r4, r3, #1
 80090dc:	8004      	strh	r4, [r0, #0]
 80090de:	0018      	movs	r0, r3
 80090e0:	188b      	adds	r3, r1, r2
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	181b      	adds	r3, r3, r0
 80090e8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80090ea:	221e      	movs	r2, #30
 80090ec:	18bb      	adds	r3, r7, r2
 80090ee:	18ba      	adds	r2, r7, r2
 80090f0:	8812      	ldrh	r2, [r2, #0]
 80090f2:	3202      	adds	r2, #2
 80090f4:	801a      	strh	r2, [r3, #0]
 80090f6:	231e      	movs	r3, #30
 80090f8:	18fb      	adds	r3, r7, r3
 80090fa:	881a      	ldrh	r2, [r3, #0]
 80090fc:	260a      	movs	r6, #10
 80090fe:	19bb      	adds	r3, r7, r6
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	3b05      	subs	r3, #5
 8009104:	429a      	cmp	r2, r3
 8009106:	dbb0      	blt.n	800906a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	251a      	movs	r5, #26
 800910c:	197c      	adds	r4, r7, r5
 800910e:	4a5e      	ldr	r2, [pc, #376]	; (8009288 <astronode_decode_answer_transport+0x320>)
 8009110:	2101      	movs	r1, #1
 8009112:	0018      	movs	r0, r3
 8009114:	f000 f91e 	bl	8009354 <calculate_crc>
 8009118:	0003      	movs	r3, r0
 800911a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	1c58      	adds	r0, r3, #1
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	22c4      	movs	r2, #196	; 0xc4
 8009124:	5a99      	ldrh	r1, [r3, r2]
 8009126:	197c      	adds	r4, r7, r5
 8009128:	197b      	adds	r3, r7, r5
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	001a      	movs	r2, r3
 800912e:	f000 f911 	bl	8009354 <calculate_crc>
 8009132:	0003      	movs	r3, r0
 8009134:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8009136:	197b      	adds	r3, r7, r5
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	b21a      	sxth	r2, r3
 800913e:	0029      	movs	r1, r5
 8009140:	197b      	adds	r3, r7, r5
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	b21b      	sxth	r3, r3
 800914a:	4313      	orrs	r3, r2
 800914c:	b21a      	sxth	r2, r3
 800914e:	187b      	adds	r3, r7, r1
 8009150:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8009152:	19bb      	adds	r3, r7, r6
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	3b05      	subs	r3, #5
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	18d3      	adds	r3, r2, r3
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2217      	movs	r2, #23
 8009160:	18ba      	adds	r2, r7, r2
 8009162:	0011      	movs	r1, r2
 8009164:	0018      	movs	r0, r3
 8009166:	f7ff fe31 	bl	8008dcc <ascii_to_value>
 800916a:	0003      	movs	r3, r0
 800916c:	001a      	movs	r2, r3
 800916e:	2301      	movs	r3, #1
 8009170:	4053      	eors	r3, r2
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d112      	bne.n	800919e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8009178:	19bb      	adds	r3, r7, r6
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	3b04      	subs	r3, #4
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	18d3      	adds	r3, r2, r3
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2216      	movs	r2, #22
 8009186:	18ba      	adds	r2, r7, r2
 8009188:	0011      	movs	r1, r2
 800918a:	0018      	movs	r0, r3
 800918c:	f7ff fe1e 	bl	8008dcc <ascii_to_value>
 8009190:	0003      	movs	r3, r0
 8009192:	001a      	movs	r2, r3
 8009194:	2301      	movs	r3, #1
 8009196:	4053      	eors	r3, r2
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800919e:	4b39      	ldr	r3, [pc, #228]	; (8009284 <astronode_decode_answer_transport+0x31c>)
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7f9 fe0f 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e062      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 80091aa:	2017      	movs	r0, #23
 80091ac:	183b      	adds	r3, r7, r0
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	031b      	lsls	r3, r3, #12
 80091b4:	b299      	uxth	r1, r3
 80091b6:	2416      	movs	r4, #22
 80091b8:	193b      	adds	r3, r7, r4
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	2318      	movs	r3, #24
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	188a      	adds	r2, r1, r2
 80091c8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80091ca:	250a      	movs	r5, #10
 80091cc:	197b      	adds	r3, r7, r5
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	3b03      	subs	r3, #3
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	18d3      	adds	r3, r2, r3
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	183a      	adds	r2, r7, r0
 80091da:	0011      	movs	r1, r2
 80091dc:	0018      	movs	r0, r3
 80091de:	f7ff fdf5 	bl	8008dcc <ascii_to_value>
 80091e2:	0003      	movs	r3, r0
 80091e4:	001a      	movs	r2, r3
 80091e6:	2301      	movs	r3, #1
 80091e8:	4053      	eors	r3, r2
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d111      	bne.n	8009214 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80091f0:	197b      	adds	r3, r7, r5
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	3b02      	subs	r3, #2
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	18d3      	adds	r3, r2, r3
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	193a      	adds	r2, r7, r4
 80091fe:	0011      	movs	r1, r2
 8009200:	0018      	movs	r0, r3
 8009202:	f7ff fde3 	bl	8008dcc <ascii_to_value>
 8009206:	0003      	movs	r3, r0
 8009208:	001a      	movs	r2, r3
 800920a:	2301      	movs	r3, #1
 800920c:	4053      	eors	r3, r2
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009214:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <astronode_decode_answer_transport+0x31c>)
 8009216:	0018      	movs	r0, r3
 8009218:	f7f9 fdd4 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 800921c:	2300      	movs	r3, #0
 800921e:	e027      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009220:	2317      	movs	r3, #23
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	b29a      	uxth	r2, r3
 800922c:	2316      	movs	r3, #22
 800922e:	18fb      	adds	r3, r7, r3
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	b299      	uxth	r1, r3
 8009238:	2018      	movs	r0, #24
 800923a:	183b      	adds	r3, r7, r0
 800923c:	183a      	adds	r2, r7, r0
 800923e:	8812      	ldrh	r2, [r2, #0]
 8009240:	188a      	adds	r2, r1, r2
 8009242:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8009244:	183a      	adds	r2, r7, r0
 8009246:	231a      	movs	r3, #26
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	8812      	ldrh	r2, [r2, #0]
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d005      	beq.n	800925e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009252:	4b0e      	ldr	r3, [pc, #56]	; (800928c <astronode_decode_answer_transport+0x324>)
 8009254:	0018      	movs	r0, r3
 8009256:	f7f9 fdb5 	bl	8002dc4 <send_debug_logs>
        return RS_FAILURE;
 800925a:	2300      	movs	r3, #0
 800925c:	e008      	b.n	8009270 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2bff      	cmp	r3, #255	; 0xff
 8009264:	d103      	bne.n	800926e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	0018      	movs	r0, r3
 800926a:	f000 f8c3 	bl	80093f4 <check_for_error>
    }

    return RS_SUCCESS;
 800926e:	2301      	movs	r3, #1
}
 8009270:	0018      	movs	r0, r3
 8009272:	46bd      	mov	sp, r7
 8009274:	b009      	add	sp, #36	; 0x24
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009278:	08013eac 	.word	0x08013eac
 800927c:	08013efc 	.word	0x08013efc
 8009280:	08013f4c 	.word	0x08013f4c
 8009284:	08013f9c 	.word	0x08013f9c
 8009288:	0000ffff 	.word	0x0000ffff
 800928c:	08013fe8 	.word	0x08013fe8

08009290 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009292:	4c2b      	ldr	r4, [pc, #172]	; (8009340 <astronode_transport_send_receive+0xb0>)
 8009294:	44a5      	add	sp, r4
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800929c:	4b29      	ldr	r3, [pc, #164]	; (8009344 <astronode_transport_send_receive+0xb4>)
 800929e:	25ca      	movs	r5, #202	; 0xca
 80092a0:	00ad      	lsls	r5, r5, #2
 80092a2:	195b      	adds	r3, r3, r5
 80092a4:	19db      	adds	r3, r3, r7
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	3304      	adds	r3, #4
 80092ac:	22c4      	movs	r2, #196	; 0xc4
 80092ae:	0052      	lsls	r2, r2, #1
 80092b0:	2100      	movs	r1, #0
 80092b2:	0018      	movs	r0, r3
 80092b4:	f002 ffe2 	bl	800c27c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80092b8:	4b23      	ldr	r3, [pc, #140]	; (8009348 <astronode_transport_send_receive+0xb8>)
 80092ba:	195b      	adds	r3, r3, r5
 80092bc:	19db      	adds	r3, r3, r7
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	3304      	adds	r3, #4
 80092c4:	22c4      	movs	r2, #196	; 0xc4
 80092c6:	0052      	lsls	r2, r2, #1
 80092c8:	2100      	movs	r1, #0
 80092ca:	0018      	movs	r0, r3
 80092cc:	f002 ffd6 	bl	800c27c <memset>
    uint16_t answer_length =  0;
 80092d0:	4b1e      	ldr	r3, [pc, #120]	; (800934c <astronode_transport_send_receive+0xbc>)
 80092d2:	195b      	adds	r3, r3, r5
 80092d4:	19db      	adds	r3, r3, r7
 80092d6:	2200      	movs	r2, #0
 80092d8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80092da:	4e1d      	ldr	r6, [pc, #116]	; (8009350 <astronode_transport_send_receive+0xc0>)
 80092dc:	19bc      	adds	r4, r7, r6
 80092de:	23cc      	movs	r3, #204	; 0xcc
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	18fa      	adds	r2, r7, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	0011      	movs	r1, r2
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7ff fd9b 	bl	8008e24 <astronode_create_request_transport>
 80092ee:	0003      	movs	r3, r0
 80092f0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80092f2:	19bb      	adds	r3, r7, r6
 80092f4:	881a      	ldrh	r2, [r3, #0]
 80092f6:	23cc      	movs	r3, #204	; 0xcc
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	18fb      	adds	r3, r7, r3
 80092fc:	0011      	movs	r1, r2
 80092fe:	0018      	movs	r0, r3
 8009300:	f7f9 fdac 	bl	8002e5c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009304:	230a      	movs	r3, #10
 8009306:	18fa      	adds	r2, r7, r3
 8009308:	240c      	movs	r4, #12
 800930a:	193b      	adds	r3, r7, r4
 800930c:	0011      	movs	r1, r2
 800930e:	0018      	movs	r0, r3
 8009310:	f000 f92c 	bl	800956c <receive_astronode_answer>
 8009314:	0003      	movs	r3, r0
 8009316:	2b01      	cmp	r3, #1
 8009318:	d10a      	bne.n	8009330 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800931a:	4b0c      	ldr	r3, [pc, #48]	; (800934c <astronode_transport_send_receive+0xbc>)
 800931c:	195b      	adds	r3, r3, r5
 800931e:	19db      	adds	r3, r3, r7
 8009320:	8819      	ldrh	r1, [r3, #0]
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	193b      	adds	r3, r7, r4
 8009326:	0018      	movs	r0, r3
 8009328:	f7ff fe1e 	bl	8008f68 <astronode_decode_answer_transport>
 800932c:	0003      	movs	r3, r0
 800932e:	e000      	b.n	8009332 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009330:	2300      	movs	r3, #0
    }
}
 8009332:	0018      	movs	r0, r3
 8009334:	46bd      	mov	sp, r7
 8009336:	23cb      	movs	r3, #203	; 0xcb
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	449d      	add	sp, r3
 800933c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	fffffcd4 	.word	0xfffffcd4
 8009344:	fffffe70 	.word	0xfffffe70
 8009348:	fffffce4 	.word	0xfffffce4
 800934c:	fffffce2 	.word	0xfffffce2
 8009350:	00000326 	.word	0x00000326

08009354 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	0008      	movs	r0, r1
 800935e:	0011      	movs	r1, r2
 8009360:	1cbb      	adds	r3, r7, #2
 8009362:	1c02      	adds	r2, r0, #0
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	003b      	movs	r3, r7
 8009368:	1c0a      	adds	r2, r1, #0
 800936a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800936c:	230e      	movs	r3, #14
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	003a      	movs	r2, r7
 8009372:	8812      	ldrh	r2, [r2, #0]
 8009374:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8009376:	e02e      	b.n	80093d6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009378:	240e      	movs	r4, #14
 800937a:	193b      	adds	r3, r7, r4
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	0a1b      	lsrs	r3, r3, #8
 8009380:	b299      	uxth	r1, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	200c      	movs	r0, #12
 800938e:	183b      	adds	r3, r7, r0
 8009390:	404a      	eors	r2, r1
 8009392:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009394:	183b      	adds	r3, r7, r0
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	b299      	uxth	r1, r3
 800939c:	183b      	adds	r3, r7, r0
 800939e:	183a      	adds	r2, r7, r0
 80093a0:	8812      	ldrh	r2, [r2, #0]
 80093a2:	404a      	eors	r2, r1
 80093a4:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80093a6:	0021      	movs	r1, r4
 80093a8:	187b      	adds	r3, r7, r1
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	b21a      	sxth	r2, r3
 80093b0:	183b      	adds	r3, r7, r0
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	031b      	lsls	r3, r3, #12
 80093b6:	b21b      	sxth	r3, r3
 80093b8:	4053      	eors	r3, r2
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	183b      	adds	r3, r7, r0
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	015b      	lsls	r3, r3, #5
 80093c2:	b21b      	sxth	r3, r3
 80093c4:	4053      	eors	r3, r2
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	183b      	adds	r3, r7, r0
 80093ca:	2000      	movs	r0, #0
 80093cc:	5e1b      	ldrsh	r3, [r3, r0]
 80093ce:	4053      	eors	r3, r2
 80093d0:	b21a      	sxth	r2, r3
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80093d6:	1cbb      	adds	r3, r7, #2
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	1cba      	adds	r2, r7, #2
 80093dc:	1e59      	subs	r1, r3, #1
 80093de:	8011      	strh	r1, [r2, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1c9      	bne.n	8009378 <calculate_crc+0x24>
    }
    return crc;
 80093e4:	230e      	movs	r3, #14
 80093e6:	18fb      	adds	r3, r7, r3
 80093e8:	881b      	ldrh	r3, [r3, #0]
}
 80093ea:	0018      	movs	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b005      	add	sp, #20
 80093f0:	bd90      	pop	{r4, r7, pc}
	...

080093f4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	b299      	uxth	r1, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	789b      	ldrb	r3, [r3, #2]
 8009406:	b29b      	uxth	r3, r3
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b29a      	uxth	r2, r3
 800940c:	200e      	movs	r0, #14
 800940e:	183b      	adds	r3, r7, r0
 8009410:	188a      	adds	r2, r1, r2
 8009412:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009414:	183b      	adds	r3, r7, r0
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	4a40      	ldr	r2, [pc, #256]	; (800951c <check_for_error+0x128>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d100      	bne.n	8009420 <check_for_error+0x2c>
 800941e:	e06f      	b.n	8009500 <check_for_error+0x10c>
 8009420:	4a3e      	ldr	r2, [pc, #248]	; (800951c <check_for_error+0x128>)
 8009422:	4293      	cmp	r3, r2
 8009424:	dd00      	ble.n	8009428 <check_for_error+0x34>
 8009426:	e070      	b.n	800950a <check_for_error+0x116>
 8009428:	4a3d      	ldr	r2, [pc, #244]	; (8009520 <check_for_error+0x12c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d100      	bne.n	8009430 <check_for_error+0x3c>
 800942e:	e062      	b.n	80094f6 <check_for_error+0x102>
 8009430:	4a3b      	ldr	r2, [pc, #236]	; (8009520 <check_for_error+0x12c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	dd00      	ble.n	8009438 <check_for_error+0x44>
 8009436:	e068      	b.n	800950a <check_for_error+0x116>
 8009438:	4a3a      	ldr	r2, [pc, #232]	; (8009524 <check_for_error+0x130>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d056      	beq.n	80094ec <check_for_error+0xf8>
 800943e:	4a39      	ldr	r2, [pc, #228]	; (8009524 <check_for_error+0x130>)
 8009440:	4293      	cmp	r3, r2
 8009442:	dd00      	ble.n	8009446 <check_for_error+0x52>
 8009444:	e061      	b.n	800950a <check_for_error+0x116>
 8009446:	4a38      	ldr	r2, [pc, #224]	; (8009528 <check_for_error+0x134>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d04a      	beq.n	80094e2 <check_for_error+0xee>
 800944c:	4a36      	ldr	r2, [pc, #216]	; (8009528 <check_for_error+0x134>)
 800944e:	4293      	cmp	r3, r2
 8009450:	dc5b      	bgt.n	800950a <check_for_error+0x116>
 8009452:	4a36      	ldr	r2, [pc, #216]	; (800952c <check_for_error+0x138>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d03f      	beq.n	80094d8 <check_for_error+0xe4>
 8009458:	4a34      	ldr	r2, [pc, #208]	; (800952c <check_for_error+0x138>)
 800945a:	4293      	cmp	r3, r2
 800945c:	dc55      	bgt.n	800950a <check_for_error+0x116>
 800945e:	4a34      	ldr	r2, [pc, #208]	; (8009530 <check_for_error+0x13c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d034      	beq.n	80094ce <check_for_error+0xda>
 8009464:	4a32      	ldr	r2, [pc, #200]	; (8009530 <check_for_error+0x13c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	dc4f      	bgt.n	800950a <check_for_error+0x116>
 800946a:	4a32      	ldr	r2, [pc, #200]	; (8009534 <check_for_error+0x140>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d029      	beq.n	80094c4 <check_for_error+0xd0>
 8009470:	4a30      	ldr	r2, [pc, #192]	; (8009534 <check_for_error+0x140>)
 8009472:	4293      	cmp	r3, r2
 8009474:	dc49      	bgt.n	800950a <check_for_error+0x116>
 8009476:	4a30      	ldr	r2, [pc, #192]	; (8009538 <check_for_error+0x144>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d01e      	beq.n	80094ba <check_for_error+0xc6>
 800947c:	4a2e      	ldr	r2, [pc, #184]	; (8009538 <check_for_error+0x144>)
 800947e:	4293      	cmp	r3, r2
 8009480:	dc43      	bgt.n	800950a <check_for_error+0x116>
 8009482:	2222      	movs	r2, #34	; 0x22
 8009484:	32ff      	adds	r2, #255	; 0xff
 8009486:	4293      	cmp	r3, r2
 8009488:	d012      	beq.n	80094b0 <check_for_error+0xbc>
 800948a:	2291      	movs	r2, #145	; 0x91
 800948c:	0052      	lsls	r2, r2, #1
 800948e:	4293      	cmp	r3, r2
 8009490:	da3b      	bge.n	800950a <check_for_error+0x116>
 8009492:	2b01      	cmp	r3, #1
 8009494:	d002      	beq.n	800949c <check_for_error+0xa8>
 8009496:	2b11      	cmp	r3, #17
 8009498:	d005      	beq.n	80094a6 <check_for_error+0xb2>
 800949a:	e036      	b.n	800950a <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800949c:	4b27      	ldr	r3, [pc, #156]	; (800953c <check_for_error+0x148>)
 800949e:	0018      	movs	r0, r3
 80094a0:	f7f9 fc90 	bl	8002dc4 <send_debug_logs>
            break;
 80094a4:	e036      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80094a6:	4b26      	ldr	r3, [pc, #152]	; (8009540 <check_for_error+0x14c>)
 80094a8:	0018      	movs	r0, r3
 80094aa:	f7f9 fc8b 	bl	8002dc4 <send_debug_logs>
            break;
 80094ae:	e031      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80094b0:	4b24      	ldr	r3, [pc, #144]	; (8009544 <check_for_error+0x150>)
 80094b2:	0018      	movs	r0, r3
 80094b4:	f7f9 fc86 	bl	8002dc4 <send_debug_logs>
            break;
 80094b8:	e02c      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <check_for_error+0x154>)
 80094bc:	0018      	movs	r0, r3
 80094be:	f7f9 fc81 	bl	8002dc4 <send_debug_logs>
            break;
 80094c2:	e027      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80094c4:	4b21      	ldr	r3, [pc, #132]	; (800954c <check_for_error+0x158>)
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7f9 fc7c 	bl	8002dc4 <send_debug_logs>
            break;
 80094cc:	e022      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <check_for_error+0x15c>)
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7f9 fc77 	bl	8002dc4 <send_debug_logs>
            break;
 80094d6:	e01d      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <check_for_error+0x160>)
 80094da:	0018      	movs	r0, r3
 80094dc:	f7f9 fc72 	bl	8002dc4 <send_debug_logs>
            break;
 80094e0:	e018      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80094e2:	4b1d      	ldr	r3, [pc, #116]	; (8009558 <check_for_error+0x164>)
 80094e4:	0018      	movs	r0, r3
 80094e6:	f7f9 fc6d 	bl	8002dc4 <send_debug_logs>
            break;
 80094ea:	e013      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80094ec:	4b1b      	ldr	r3, [pc, #108]	; (800955c <check_for_error+0x168>)
 80094ee:	0018      	movs	r0, r3
 80094f0:	f7f9 fc68 	bl	8002dc4 <send_debug_logs>
            break;
 80094f4:	e00e      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80094f6:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <check_for_error+0x16c>)
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7f9 fc63 	bl	8002dc4 <send_debug_logs>
            break;
 80094fe:	e009      	b.n	8009514 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <check_for_error+0x170>)
 8009502:	0018      	movs	r0, r3
 8009504:	f7f9 fc5e 	bl	8002dc4 <send_debug_logs>
            break;
 8009508:	e004      	b.n	8009514 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800950a:	4b17      	ldr	r3, [pc, #92]	; (8009568 <check_for_error+0x174>)
 800950c:	0018      	movs	r0, r3
 800950e:	f7f9 fc59 	bl	8002dc4 <send_debug_logs>
            break;
 8009512:	46c0      	nop			; (mov r8, r8)
    }
}
 8009514:	46c0      	nop			; (mov r8, r8)
 8009516:	46bd      	mov	sp, r7
 8009518:	b004      	add	sp, #16
 800951a:	bd80      	pop	{r7, pc}
 800951c:	00004601 	.word	0x00004601
 8009520:	00004501 	.word	0x00004501
 8009524:	00003501 	.word	0x00003501
 8009528:	00002601 	.word	0x00002601
 800952c:	00002511 	.word	0x00002511
 8009530:	00002501 	.word	0x00002501
 8009534:	00000611 	.word	0x00000611
 8009538:	00000601 	.word	0x00000601
 800953c:	0801402c 	.word	0x0801402c
 8009540:	08014078 	.word	0x08014078
 8009544:	080140dc 	.word	0x080140dc
 8009548:	08014114 	.word	0x08014114
 800954c:	080141b8 	.word	0x080141b8
 8009550:	08014220 	.word	0x08014220
 8009554:	08014280 	.word	0x08014280
 8009558:	0801430c 	.word	0x0801430c
 800955c:	0801436c 	.word	0x0801436c
 8009560:	08014418 	.word	0x08014418
 8009564:	08014464 	.word	0x08014464
 8009568:	080144ac 	.word	0x080144ac

0800956c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009576:	230f      	movs	r3, #15
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800957e:	2316      	movs	r3, #22
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2200      	movs	r2, #0
 8009584:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009586:	f7f9 fcad 	bl	8002ee4 <get_systick>
 800958a:	0003      	movs	r3, r0
 800958c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800958e:	2315      	movs	r3, #21
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8009596:	e054      	b.n	8009642 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009598:	4a34      	ldr	r2, [pc, #208]	; (800966c <receive_astronode_answer+0x100>)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	0011      	movs	r1, r2
 800959e:	0018      	movs	r0, r3
 80095a0:	f7f9 fca8 	bl	8002ef4 <is_systick_timeout_over>
 80095a4:	1e03      	subs	r3, r0, #0
 80095a6:	d005      	beq.n	80095b4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80095a8:	4b31      	ldr	r3, [pc, #196]	; (8009670 <receive_astronode_answer+0x104>)
 80095aa:	0018      	movs	r0, r3
 80095ac:	f7f9 fc0a 	bl	8002dc4 <send_debug_logs>
            return RS_FAILURE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e057      	b.n	8009664 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80095b4:	250f      	movs	r5, #15
 80095b6:	197b      	adds	r3, r7, r5
 80095b8:	0018      	movs	r0, r3
 80095ba:	f7f9 fc6d 	bl	8002e98 <is_astronode_character_received>
 80095be:	0003      	movs	r3, r0
 80095c0:	0019      	movs	r1, r3
 80095c2:	2016      	movs	r0, #22
 80095c4:	183b      	adds	r3, r7, r0
 80095c6:	183a      	adds	r2, r7, r0
 80095c8:	8812      	ldrh	r2, [r2, #0]
 80095ca:	801a      	strh	r2, [r3, #0]
 80095cc:	2415      	movs	r4, #21
 80095ce:	193b      	adds	r3, r7, r4
 80095d0:	193a      	adds	r2, r7, r4
 80095d2:	7812      	ldrb	r2, [r2, #0]
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d033      	beq.n	8009642 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80095da:	197b      	adds	r3, r7, r5
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d105      	bne.n	80095ee <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80095e2:	193b      	adds	r3, r7, r4
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80095e8:	183b      	adds	r3, r7, r0
 80095ea:	2200      	movs	r2, #0
 80095ec:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80095ee:	2116      	movs	r1, #22
 80095f0:	187b      	adds	r3, r7, r1
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	18d3      	adds	r3, r2, r3
 80095f8:	220f      	movs	r2, #15
 80095fa:	18ba      	adds	r2, r7, r2
 80095fc:	7812      	ldrb	r2, [r2, #0]
 80095fe:	701a      	strb	r2, [r3, #0]
            length++;
 8009600:	187b      	adds	r3, r7, r1
 8009602:	881a      	ldrh	r2, [r3, #0]
 8009604:	187b      	adds	r3, r7, r1
 8009606:	3201      	adds	r2, #1
 8009608:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800960a:	187b      	adds	r3, r7, r1
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	2bb2      	cmp	r3, #178	; 0xb2
 8009610:	d905      	bls.n	800961e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009612:	4b18      	ldr	r3, [pc, #96]	; (8009674 <receive_astronode_answer+0x108>)
 8009614:	0018      	movs	r0, r3
 8009616:	f7f9 fbd5 	bl	8002dc4 <send_debug_logs>
                return RS_FAILURE;
 800961a:	2300      	movs	r3, #0
 800961c:	e022      	b.n	8009664 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800961e:	230f      	movs	r3, #15
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b03      	cmp	r3, #3
 8009626:	d10c      	bne.n	8009642 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009628:	2216      	movs	r2, #22
 800962a:	18bb      	adds	r3, r7, r2
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d907      	bls.n	8009642 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	18ba      	adds	r2, r7, r2
 8009636:	8812      	ldrh	r2, [r2, #0]
 8009638:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800963a:	2315      	movs	r3, #21
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009642:	2315      	movs	r3, #21
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2201      	movs	r2, #1
 800964a:	4053      	eors	r3, r2
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1a2      	bne.n	8009598 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <receive_astronode_answer+0x10c>)
 8009654:	0018      	movs	r0, r3
 8009656:	f7f9 fbb5 	bl	8002dc4 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	0018      	movs	r0, r3
 800965e:	f7f9 fbb1 	bl	8002dc4 <send_debug_logs>

    return RS_SUCCESS;
 8009662:	2301      	movs	r3, #1
}
 8009664:	0018      	movs	r0, r3
 8009666:	46bd      	mov	sp, r7
 8009668:	b006      	add	sp, #24
 800966a:	bdb0      	pop	{r4, r5, r7, pc}
 800966c:	000005dc 	.word	0x000005dc
 8009670:	080144d0 	.word	0x080144d0
 8009674:	080144f4 	.word	0x080144f4
 8009678:	08014540 	.word	0x08014540

0800967c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	0002      	movs	r2, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	1dfb      	adds	r3, r7, #7
 8009688:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800968a:	1dfb      	adds	r3, r7, #7
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	091b      	lsrs	r3, r3, #4
 8009690:	b2db      	uxtb	r3, r3
 8009692:	001a      	movs	r2, r3
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <uint8_to_ascii_buffer+0x3c>)
 8009696:	5c9a      	ldrb	r2, [r3, r2]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800969c:	1dfb      	adds	r3, r7, #7
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	220f      	movs	r2, #15
 80096a2:	401a      	ands	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4903      	ldr	r1, [pc, #12]	; (80096b8 <uint8_to_ascii_buffer+0x3c>)
 80096aa:	5c8a      	ldrb	r2, [r1, r2]
 80096ac:	701a      	strb	r2, [r3, #0]
}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	46bd      	mov	sp, r7
 80096b2:	b002      	add	sp, #8
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	08014770 	.word	0x08014770

080096bc <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80096bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	0008      	movs	r0, r1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	0019      	movs	r1, r3
 80096ca:	260b      	movs	r6, #11
 80096cc:	19bb      	adds	r3, r7, r6
 80096ce:	1c02      	adds	r2, r0, #0
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	2508      	movs	r5, #8
 80096d4:	197b      	adds	r3, r7, r5
 80096d6:	1c0a      	adds	r2, r1, #0
 80096d8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685c      	ldr	r4, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68d8      	ldr	r0, [r3, #12]
 80096e2:	197b      	adds	r3, r7, r5
 80096e4:	881d      	ldrh	r5, [r3, #0]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	19bb      	adds	r3, r7, r6
 80096ea:	7819      	ldrb	r1, [r3, #0]
 80096ec:	002b      	movs	r3, r5
 80096ee:	47a0      	blx	r4
 80096f0:	0003      	movs	r3, r0
 80096f2:	617b      	str	r3, [r7, #20]

  return ret;
 80096f4:	697b      	ldr	r3, [r7, #20]
}
 80096f6:	0018      	movs	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	b007      	add	sp, #28
 80096fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096fe <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80096fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009700:	b087      	sub	sp, #28
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	0008      	movs	r0, r1
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	0019      	movs	r1, r3
 800970c:	260b      	movs	r6, #11
 800970e:	19bb      	adds	r3, r7, r6
 8009710:	1c02      	adds	r2, r0, #0
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	2508      	movs	r5, #8
 8009716:	197b      	adds	r3, r7, r5
 8009718:	1c0a      	adds	r2, r1, #0
 800971a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681c      	ldr	r4, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68d8      	ldr	r0, [r3, #12]
 8009724:	197b      	adds	r3, r7, r5
 8009726:	881d      	ldrh	r5, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	19bb      	adds	r3, r7, r6
 800972c:	7819      	ldrb	r1, [r3, #0]
 800972e:	002b      	movs	r3, r5
 8009730:	47a0      	blx	r4
 8009732:	0003      	movs	r3, r0
 8009734:	617b      	str	r3, [r7, #20]

  return ret;
 8009736:	697b      	ldr	r3, [r7, #20]
}
 8009738:	0018      	movs	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	b007      	add	sp, #28
 800973e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009740 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8009740:	b590      	push	{r4, r7, lr}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	000a      	movs	r2, r1
 800974a:	1cfb      	adds	r3, r7, #3
 800974c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800974e:	2410      	movs	r4, #16
 8009750:	193a      	adds	r2, r7, r4
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	2301      	movs	r3, #1
 8009756:	2120      	movs	r1, #32
 8009758:	f7ff ffb0 	bl	80096bc <lis2dw12_read_reg>
 800975c:	0003      	movs	r3, r0
 800975e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d129      	bne.n	80097ba <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8009766:	1cfb      	adds	r3, r7, #3
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	089b      	lsrs	r3, r3, #2
 800976c:	1c1a      	adds	r2, r3, #0
 800976e:	2303      	movs	r3, #3
 8009770:	4013      	ands	r3, r2
 8009772:	b2da      	uxtb	r2, r3
 8009774:	193b      	adds	r3, r7, r4
 8009776:	2103      	movs	r1, #3
 8009778:	400a      	ands	r2, r1
 800977a:	0090      	lsls	r0, r2, #2
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	210c      	movs	r1, #12
 8009780:	438a      	bics	r2, r1
 8009782:	1c11      	adds	r1, r2, #0
 8009784:	1c02      	adds	r2, r0, #0
 8009786:	430a      	orrs	r2, r1
 8009788:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800978a:	1cfb      	adds	r3, r7, #3
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2203      	movs	r2, #3
 8009790:	4013      	ands	r3, r2
 8009792:	b2da      	uxtb	r2, r3
 8009794:	193b      	adds	r3, r7, r4
 8009796:	2103      	movs	r1, #3
 8009798:	400a      	ands	r2, r1
 800979a:	0010      	movs	r0, r2
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	2103      	movs	r1, #3
 80097a0:	438a      	bics	r2, r1
 80097a2:	1c11      	adds	r1, r2, #0
 80097a4:	1c02      	adds	r2, r0, #0
 80097a6:	430a      	orrs	r2, r1
 80097a8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80097aa:	193a      	adds	r2, r7, r4
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	2301      	movs	r3, #1
 80097b0:	2120      	movs	r1, #32
 80097b2:	f7ff ffa4 	bl	80096fe <lis2dw12_write_reg>
 80097b6:	0003      	movs	r3, r0
 80097b8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d108      	bne.n	80097d2 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80097c0:	230c      	movs	r3, #12
 80097c2:	18fa      	adds	r2, r7, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	2301      	movs	r3, #1
 80097c8:	2125      	movs	r1, #37	; 0x25
 80097ca:	f7ff ff77 	bl	80096bc <lis2dw12_read_reg>
 80097ce:	0003      	movs	r3, r0
 80097d0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80097d8:	1cfb      	adds	r3, r7, #3
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	091b      	lsrs	r3, r3, #4
 80097de:	1c1a      	adds	r2, r3, #0
 80097e0:	2301      	movs	r3, #1
 80097e2:	4013      	ands	r3, r2
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	240c      	movs	r4, #12
 80097e8:	193b      	adds	r3, r7, r4
 80097ea:	2101      	movs	r1, #1
 80097ec:	400a      	ands	r2, r1
 80097ee:	0090      	lsls	r0, r2, #2
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	2104      	movs	r1, #4
 80097f4:	438a      	bics	r2, r1
 80097f6:	1c11      	adds	r1, r2, #0
 80097f8:	1c02      	adds	r2, r0, #0
 80097fa:	430a      	orrs	r2, r1
 80097fc:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80097fe:	193a      	adds	r2, r7, r4
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	2301      	movs	r3, #1
 8009804:	2125      	movs	r1, #37	; 0x25
 8009806:	f7ff ff7a 	bl	80096fe <lis2dw12_write_reg>
 800980a:	0003      	movs	r3, r0
 800980c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800980e:	697b      	ldr	r3, [r7, #20]
}
 8009810:	0018      	movs	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	b007      	add	sp, #28
 8009816:	bd90      	pop	{r4, r7, pc}

08009818 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	000a      	movs	r2, r1
 8009822:	1cfb      	adds	r3, r7, #3
 8009824:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009826:	2410      	movs	r4, #16
 8009828:	193a      	adds	r2, r7, r4
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	2301      	movs	r3, #1
 800982e:	2120      	movs	r1, #32
 8009830:	f7ff ff44 	bl	80096bc <lis2dw12_read_reg>
 8009834:	0003      	movs	r3, r0
 8009836:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d115      	bne.n	800986a <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 800983e:	1cfb      	adds	r3, r7, #3
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	220f      	movs	r2, #15
 8009844:	4013      	ands	r3, r2
 8009846:	b2da      	uxtb	r2, r3
 8009848:	193b      	adds	r3, r7, r4
 800984a:	0110      	lsls	r0, r2, #4
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	210f      	movs	r1, #15
 8009850:	400a      	ands	r2, r1
 8009852:	1c11      	adds	r1, r2, #0
 8009854:	1c02      	adds	r2, r0, #0
 8009856:	430a      	orrs	r2, r1
 8009858:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800985a:	193a      	adds	r2, r7, r4
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	2301      	movs	r3, #1
 8009860:	2120      	movs	r1, #32
 8009862:	f7ff ff4c 	bl	80096fe <lis2dw12_write_reg>
 8009866:	0003      	movs	r3, r0
 8009868:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d108      	bne.n	8009882 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009870:	230c      	movs	r3, #12
 8009872:	18fa      	adds	r2, r7, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	2301      	movs	r3, #1
 8009878:	2122      	movs	r1, #34	; 0x22
 800987a:	f7ff ff1f 	bl	80096bc <lis2dw12_read_reg>
 800987e:	0003      	movs	r3, r0
 8009880:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d11a      	bne.n	80098be <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8009888:	1cfb      	adds	r3, r7, #3
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	091b      	lsrs	r3, r3, #4
 800988e:	1c1a      	adds	r2, r3, #0
 8009890:	2303      	movs	r3, #3
 8009892:	4013      	ands	r3, r2
 8009894:	b2da      	uxtb	r2, r3
 8009896:	240c      	movs	r4, #12
 8009898:	193b      	adds	r3, r7, r4
 800989a:	2103      	movs	r1, #3
 800989c:	400a      	ands	r2, r1
 800989e:	0010      	movs	r0, r2
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	2103      	movs	r1, #3
 80098a4:	438a      	bics	r2, r1
 80098a6:	1c11      	adds	r1, r2, #0
 80098a8:	1c02      	adds	r2, r0, #0
 80098aa:	430a      	orrs	r2, r1
 80098ac:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80098ae:	193a      	adds	r2, r7, r4
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	2301      	movs	r3, #1
 80098b4:	2122      	movs	r1, #34	; 0x22
 80098b6:	f7ff ff22 	bl	80096fe <lis2dw12_write_reg>
 80098ba:	0003      	movs	r3, r0
 80098bc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80098be:	697b      	ldr	r3, [r7, #20]
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b007      	add	sp, #28
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	000a      	movs	r2, r1
 80098d2:	1cfb      	adds	r3, r7, #3
 80098d4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80098d6:	2408      	movs	r4, #8
 80098d8:	193a      	adds	r2, r7, r4
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	2301      	movs	r3, #1
 80098de:	2125      	movs	r1, #37	; 0x25
 80098e0:	f7ff feec 	bl	80096bc <lis2dw12_read_reg>
 80098e4:	0003      	movs	r3, r0
 80098e6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d117      	bne.n	800991e <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 80098ee:	1cfb      	adds	r3, r7, #3
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2203      	movs	r2, #3
 80098f4:	4013      	ands	r3, r2
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	193b      	adds	r3, r7, r4
 80098fa:	2103      	movs	r1, #3
 80098fc:	400a      	ands	r2, r1
 80098fe:	0110      	lsls	r0, r2, #4
 8009900:	781a      	ldrb	r2, [r3, #0]
 8009902:	2130      	movs	r1, #48	; 0x30
 8009904:	438a      	bics	r2, r1
 8009906:	1c11      	adds	r1, r2, #0
 8009908:	1c02      	adds	r2, r0, #0
 800990a:	430a      	orrs	r2, r1
 800990c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800990e:	193a      	adds	r2, r7, r4
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	2301      	movs	r3, #1
 8009914:	2125      	movs	r1, #37	; 0x25
 8009916:	f7ff fef2 	bl	80096fe <lis2dw12_write_reg>
 800991a:	0003      	movs	r3, r0
 800991c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800991e:	68fb      	ldr	r3, [r7, #12]
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b005      	add	sp, #20
 8009926:	bd90      	pop	{r4, r7, pc}

08009928 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	2301      	movs	r3, #1
 8009938:	210f      	movs	r1, #15
 800993a:	f7ff febf 	bl	80096bc <lis2dw12_read_reg>
 800993e:	0003      	movs	r3, r0
 8009940:	60fb      	str	r3, [r7, #12]

  return ret;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b004      	add	sp, #16
 800994a:	bd80      	pop	{r7, pc}

0800994c <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	000a      	movs	r2, r1
 8009956:	1cfb      	adds	r3, r7, #3
 8009958:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800995a:	2408      	movs	r4, #8
 800995c:	193a      	adds	r2, r7, r4
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	2301      	movs	r3, #1
 8009962:	2121      	movs	r1, #33	; 0x21
 8009964:	f7ff feaa 	bl	80096bc <lis2dw12_read_reg>
 8009968:	0003      	movs	r3, r0
 800996a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d117      	bne.n	80099a2 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009972:	1cfb      	adds	r3, r7, #3
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2201      	movs	r2, #1
 8009978:	4013      	ands	r3, r2
 800997a:	b2da      	uxtb	r2, r3
 800997c:	193b      	adds	r3, r7, r4
 800997e:	2101      	movs	r1, #1
 8009980:	400a      	ands	r2, r1
 8009982:	0190      	lsls	r0, r2, #6
 8009984:	781a      	ldrb	r2, [r3, #0]
 8009986:	2140      	movs	r1, #64	; 0x40
 8009988:	438a      	bics	r2, r1
 800998a:	1c11      	adds	r1, r2, #0
 800998c:	1c02      	adds	r2, r0, #0
 800998e:	430a      	orrs	r2, r1
 8009990:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009992:	193a      	adds	r2, r7, r4
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	2301      	movs	r3, #1
 8009998:	2121      	movs	r1, #33	; 0x21
 800999a:	f7ff feb0 	bl	80096fe <lis2dw12_write_reg>
 800999e:	0003      	movs	r3, r0
 80099a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80099a2:	68fb      	ldr	r3, [r7, #12]
}
 80099a4:	0018      	movs	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b005      	add	sp, #20
 80099aa:	bd90      	pop	{r4, r7, pc}

080099ac <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80099b6:	2408      	movs	r4, #8
 80099b8:	193a      	adds	r2, r7, r4
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	2301      	movs	r3, #1
 80099be:	2121      	movs	r1, #33	; 0x21
 80099c0:	f7ff fe7c 	bl	80096bc <lis2dw12_read_reg>
 80099c4:	0003      	movs	r3, r0
 80099c6:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 80099c8:	193b      	adds	r3, r7, r4
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	065b      	lsls	r3, r3, #25
 80099ce:	0fdb      	lsrs	r3, r3, #31
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	001a      	movs	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80099d8:	68fb      	ldr	r3, [r7, #12]
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b005      	add	sp, #20
 80099e0:	bd90      	pop	{r4, r7, pc}

080099e2 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 80099e2:	b590      	push	{r4, r7, lr}
 80099e4:	b087      	sub	sp, #28
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	000a      	movs	r2, r1
 80099ec:	1cfb      	adds	r3, r7, #3
 80099ee:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80099f0:	2410      	movs	r4, #16
 80099f2:	193a      	adds	r2, r7, r4
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	2301      	movs	r3, #1
 80099f8:	2125      	movs	r1, #37	; 0x25
 80099fa:	f7ff fe5f 	bl	80096bc <lis2dw12_read_reg>
 80099fe:	0003      	movs	r3, r0
 8009a00:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d119      	bne.n	8009a3c <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8009a08:	1cfb      	adds	r3, r7, #3
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	091b      	lsrs	r3, r3, #4
 8009a0e:	1c1a      	adds	r2, r3, #0
 8009a10:	2301      	movs	r3, #1
 8009a12:	4013      	ands	r3, r2
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	193b      	adds	r3, r7, r4
 8009a18:	2101      	movs	r1, #1
 8009a1a:	400a      	ands	r2, r1
 8009a1c:	00d0      	lsls	r0, r2, #3
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	2108      	movs	r1, #8
 8009a22:	438a      	bics	r2, r1
 8009a24:	1c11      	adds	r1, r2, #0
 8009a26:	1c02      	adds	r2, r0, #0
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a2c:	193a      	adds	r2, r7, r4
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	2301      	movs	r3, #1
 8009a32:	2125      	movs	r1, #37	; 0x25
 8009a34:	f7ff fe63 	bl	80096fe <lis2dw12_write_reg>
 8009a38:	0003      	movs	r3, r0
 8009a3a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d108      	bne.n	8009a54 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a42:	230c      	movs	r3, #12
 8009a44:	18fa      	adds	r2, r7, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	213f      	movs	r1, #63	; 0x3f
 8009a4c:	f7ff fe36 	bl	80096bc <lis2dw12_read_reg>
 8009a50:	0003      	movs	r3, r0
 8009a52:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d118      	bne.n	8009a8c <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8009a5a:	1cfb      	adds	r3, r7, #3
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4013      	ands	r3, r2
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	240c      	movs	r4, #12
 8009a66:	193b      	adds	r3, r7, r4
 8009a68:	2101      	movs	r1, #1
 8009a6a:	400a      	ands	r2, r1
 8009a6c:	0110      	lsls	r0, r2, #4
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	2110      	movs	r1, #16
 8009a72:	438a      	bics	r2, r1
 8009a74:	1c11      	adds	r1, r2, #0
 8009a76:	1c02      	adds	r2, r0, #0
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a7c:	193a      	adds	r2, r7, r4
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	2301      	movs	r3, #1
 8009a82:	213f      	movs	r1, #63	; 0x3f
 8009a84:	f7ff fe3b 	bl	80096fe <lis2dw12_write_reg>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009a8c:	697b      	ldr	r3, [r7, #20]
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b007      	add	sp, #28
 8009a94:	bd90      	pop	{r4, r7, pc}

08009a96 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b086      	sub	sp, #24
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	18fa      	adds	r2, r7, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	2124      	movs	r1, #36	; 0x24
 8009aaa:	f7ff fe07 	bl	80096bc <lis2dw12_read_reg>
 8009aae:	0003      	movs	r3, r0
 8009ab0:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d108      	bne.n	8009aca <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009ab8:	230c      	movs	r3, #12
 8009aba:	18fa      	adds	r2, r7, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	213f      	movs	r1, #63	; 0x3f
 8009ac2:	f7ff fdfb 	bl	80096bc <lis2dw12_read_reg>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d146      	bne.n	8009b5e <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	071b      	lsls	r3, r3, #28
 8009ad6:	0fdb      	lsrs	r3, r3, #31
 8009ad8:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	06db      	lsls	r3, r3, #27
 8009ae0:	0fdb      	lsrs	r3, r3, #31
 8009ae2:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	069b      	lsls	r3, r3, #26
 8009aee:	0fdb      	lsrs	r3, r3, #31
 8009af0:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009af2:	4313      	orrs	r3, r2
 8009af4:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	065b      	lsls	r3, r3, #25
 8009afc:	0fdb      	lsrs	r3, r3, #31
 8009afe:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009b00:	4313      	orrs	r3, r2
 8009b02:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	061b      	lsls	r3, r3, #24
 8009b0a:	0fdb      	lsrs	r3, r3, #31
 8009b0c:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009b12:	2110      	movs	r1, #16
 8009b14:	187b      	adds	r3, r7, r1
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	061b      	lsls	r3, r3, #24
 8009b1a:	0fdb      	lsrs	r3, r3, #31
 8009b1c:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009b22:	187b      	adds	r3, r7, r1
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	065b      	lsls	r3, r3, #25
 8009b28:	0fdb      	lsrs	r3, r3, #31
 8009b2a:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d006      	beq.n	8009b42 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009b34:	230c      	movs	r3, #12
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	2120      	movs	r1, #32
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	701a      	strb	r2, [r3, #0]
 8009b40:	e005      	b.n	8009b4e <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009b42:	230c      	movs	r3, #12
 8009b44:	18fb      	adds	r3, r7, r3
 8009b46:	781a      	ldrb	r2, [r3, #0]
 8009b48:	2120      	movs	r1, #32
 8009b4a:	438a      	bics	r2, r1
 8009b4c:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	2301      	movs	r3, #1
 8009b54:	2123      	movs	r1, #35	; 0x23
 8009b56:	f7ff fdd2 	bl	80096fe <lis2dw12_write_reg>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d108      	bne.n	8009b76 <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009b64:	230c      	movs	r3, #12
 8009b66:	18fa      	adds	r2, r7, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	213f      	movs	r1, #63	; 0x3f
 8009b6e:	f7ff fdc6 	bl	80096fe <lis2dw12_write_reg>
 8009b72:	0003      	movs	r3, r0
 8009b74:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b76:	697b      	ldr	r3, [r7, #20]
}
 8009b78:	0018      	movs	r0, r3
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b006      	add	sp, #24
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	2123      	movs	r1, #35	; 0x23
 8009b92:	f7ff fd93 	bl	80096bc <lis2dw12_read_reg>
 8009b96:	0003      	movs	r3, r0
 8009b98:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b004      	add	sp, #16
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	000a      	movs	r2, r1
 8009bae:	1cfb      	adds	r3, r7, #3
 8009bb0:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009bb2:	2408      	movs	r4, #8
 8009bb4:	193a      	adds	r2, r7, r4
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	2134      	movs	r1, #52	; 0x34
 8009bbc:	f7ff fd7e 	bl	80096bc <lis2dw12_read_reg>
 8009bc0:	0003      	movs	r3, r0
 8009bc2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d117      	bne.n	8009bfa <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009bca:	1cfb      	adds	r3, r7, #3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	223f      	movs	r2, #63	; 0x3f
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	213f      	movs	r1, #63	; 0x3f
 8009bd8:	400a      	ands	r2, r1
 8009bda:	0010      	movs	r0, r2
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	213f      	movs	r1, #63	; 0x3f
 8009be0:	438a      	bics	r2, r1
 8009be2:	1c11      	adds	r1, r2, #0
 8009be4:	1c02      	adds	r2, r0, #0
 8009be6:	430a      	orrs	r2, r1
 8009be8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009bea:	193a      	adds	r2, r7, r4
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	2301      	movs	r3, #1
 8009bf0:	2134      	movs	r1, #52	; 0x34
 8009bf2:	f7ff fd84 	bl	80096fe <lis2dw12_write_reg>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b005      	add	sp, #20
 8009c02:	bd90      	pop	{r4, r7, pc}

08009c04 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	000a      	movs	r2, r1
 8009c0e:	1cfb      	adds	r3, r7, #3
 8009c10:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009c12:	2408      	movs	r4, #8
 8009c14:	193a      	adds	r2, r7, r4
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	2301      	movs	r3, #1
 8009c1a:	2135      	movs	r1, #53	; 0x35
 8009c1c:	f7ff fd4e 	bl	80096bc <lis2dw12_read_reg>
 8009c20:	0003      	movs	r3, r0
 8009c22:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d117      	bne.n	8009c5a <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009c2a:	1cfb      	adds	r3, r7, #3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2203      	movs	r2, #3
 8009c30:	4013      	ands	r3, r2
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	193b      	adds	r3, r7, r4
 8009c36:	2103      	movs	r1, #3
 8009c38:	400a      	ands	r2, r1
 8009c3a:	0150      	lsls	r0, r2, #5
 8009c3c:	781a      	ldrb	r2, [r3, #0]
 8009c3e:	2160      	movs	r1, #96	; 0x60
 8009c40:	438a      	bics	r2, r1
 8009c42:	1c11      	adds	r1, r2, #0
 8009c44:	1c02      	adds	r2, r0, #0
 8009c46:	430a      	orrs	r2, r1
 8009c48:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009c4a:	193a      	adds	r2, r7, r4
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	2135      	movs	r1, #53	; 0x35
 8009c52:	f7ff fd54 	bl	80096fe <lis2dw12_write_reg>
 8009c56:	0003      	movs	r3, r0
 8009c58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
}
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	b005      	add	sp, #20
 8009c62:	bd90      	pop	{r4, r7, pc}

08009c64 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009c64:	b590      	push	{r4, r7, lr}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009c6a:	1dfb      	adds	r3, r7, #7
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009c70:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <my_astro_init+0xa4>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009c76:	4b25      	ldr	r3, [pc, #148]	; (8009d0c <my_astro_init+0xa8>)
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f7fc fda5 	bl	80067c8 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c7e:	e019      	b.n	8009cb4 <my_astro_init+0x50>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009c80:	1dfc      	adds	r4, r7, #7
 8009c82:	2300      	movs	r3, #0
 8009c84:	9303      	str	r3, [sp, #12]
 8009c86:	2301      	movs	r3, #1
 8009c88:	9302      	str	r3, [sp, #8]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	2301      	movs	r3, #1
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	2201      	movs	r2, #1
 8009c96:	2101      	movs	r1, #1
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f7fe f865 	bl	8007d68 <astronode_send_cfg_wr>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 8009ca2:	f7f9 f965 	bl	8002f70 <my_astro_off>
		HAL_Delay ( 100 ) ;
 8009ca6:	2064      	movs	r0, #100	; 0x64
 8009ca8:	f7f9 fe56 	bl	8003958 <HAL_Delay>
		my_astro_on () ;
 8009cac:	f7f9 f938 	bl	8002f20 <my_astro_on>
		reset_astronode () ;
 8009cb0:	f7f9 f8b8 	bl	8002e24 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009cb4:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <my_astro_init+0xa4>)
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	2b3b      	cmp	r3, #59	; 0x3b
 8009cba:	d806      	bhi.n	8009cca <my_astro_init+0x66>
 8009cbc:	1dfb      	adds	r3, r7, #7
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	4053      	eors	r3, r2
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1da      	bne.n	8009c80 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8009cca:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <my_astro_init+0xa4>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <my_astro_init+0xa8>)
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f7fc fdd4 	bl	8006880 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009cd8:	1dfb      	adds	r3, r7, #7
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00d      	beq.n	8009cfc <my_astro_init+0x98>
	{
		astronode_send_rtc_rr () ;
 8009ce0:	f7fe fd02 	bl	80086e8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009ce4:	f7fe f808 	bl	8007cf8 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009ce8:	f7fe fdf8 	bl	80088dc <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009cec:	f7fe f992 	bl	8008014 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009cf0:	f7fe f8e6 	bl	8007ec0 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009cf4:	f7fe fc7c 	bl	80085f0 <astronode_send_pld_fr>
		return true ;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <my_astro_init+0x9a>
	}
	else
	{
		return false ;
 8009cfc:	2300      	movs	r3, #0
	}
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b003      	add	sp, #12
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	20000a1a 	.word	0x20000a1a
 8009d0c:	2000078c 	.word	0x2000078c

08009d10 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8009d18:	240e      	movs	r4, #14
 8009d1a:	193b      	adds	r3, r7, r4
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7f6 f9ee 	bl	8000104 <strlen>
 8009d28:	0003      	movs	r3, r0
 8009d2a:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2ba0      	cmp	r3, #160	; 0xa0
 8009d30:	d80b      	bhi.n	8009d4a <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	193b      	adds	r3, r7, r4
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f7fe fbb3 	bl	80084a8 <astronode_send_pld_er>
 8009d42:	1e03      	subs	r3, r0, #0
 8009d44:	d005      	beq.n	8009d52 <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e004      	b.n	8009d54 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009d4a:	4b04      	ldr	r3, [pc, #16]	; (8009d5c <my_astro_add_payload_2_queue+0x4c>)
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7f9 f839 	bl	8002dc4 <send_debug_logs>
	}
	return false ;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b005      	add	sp, #20
 8009d5a:	bd90      	pop	{r4, r7, pc}
 8009d5c:	0801456c 	.word	0x0801456c

08009d60 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009d64:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <my_astro_read_evt_reg+0x5c>)
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7f9 f82c 	bl	8002dc4 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009d6c:	f7fe fa5c 	bl	8008228 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009d70:	f7ff f80e 	bl	8008d90 <is_sak_available>
 8009d74:	1e03      	subs	r3, r0, #0
 8009d76:	d007      	beq.n	8009d88 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009d78:	f7fe fd1a 	bl	80087b0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009d7c:	f7fe fd6e 	bl	800885c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <my_astro_read_evt_reg+0x60>)
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7f9 f81e 	bl	8002dc4 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009d88:	f7ff f80c 	bl	8008da4 <is_astronode_reset>
 8009d8c:	1e03      	subs	r3, r0, #0
 8009d8e:	d005      	beq.n	8009d9c <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <my_astro_read_evt_reg+0x64>)
 8009d92:	0018      	movs	r0, r3
 8009d94:	f7f9 f816 	bl	8002dc4 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009d98:	f7fe fc66 	bl	8008668 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009d9c:	f7ff f80c 	bl	8008db8 <is_command_available>
 8009da0:	1e03      	subs	r3, r0, #0
 8009da2:	d007      	beq.n	8009db4 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009da4:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <my_astro_read_evt_reg+0x68>)
 8009da6:	0018      	movs	r0, r3
 8009da8:	f7f9 f80c 	bl	8002dc4 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009dac:	f7fe fe80 	bl	8008ab0 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009db0:	f7fe fe3e 	bl	8008a30 <astronode_send_cmd_cr>
	}
	return true ;
 8009db4:	2301      	movs	r3, #1
}
 8009db6:	0018      	movs	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	080145b0 	.word	0x080145b0
 8009dc0:	080145cc 	.word	0x080145cc
 8009dc4:	080145f8 	.word	0x080145f8
 8009dc8:	0801461c 	.word	0x0801461c

08009dcc <my_astro_log>:
bool my_astro_log ( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 8009dd0:	f7fe fc8a 	bl	80086e8 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8009dd4:	f7fe f9c8 	bl	8008168 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8009dd8:	2301      	movs	r3, #1
}
 8009dda:	0018      	movs	r0, r3
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	0011      	movs	r1, r2
 8009df0:	0018      	movs	r0, r3
 8009df2:	f7fe fa99 	bl	8008328 <astronode_send_geo_wr>
}
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	b002      	add	sp, #8
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8009dfe:	b590      	push	{r4, r7, lr}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8009e06:	230f      	movs	r3, #15
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2101      	movs	r1, #1
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7ff fd9a 	bl	800994c <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8009e18:	240f      	movs	r4, #15
 8009e1a:	193a      	adds	r2, r7, r4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	0011      	movs	r1, r2
 8009e20:	0018      	movs	r0, r3
 8009e22:	f7ff fdc3 	bl	80099ac <lis2dw12_reset_get>
	} while ( rst ) ;
 8009e26:	193b      	adds	r3, r7, r4
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1f4      	bne.n	8009e18 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	0018      	movs	r0, r3
 8009e32:	f000 f828 	bl	8009e86 <my_lis2dw12_get_id>
 8009e36:	0003      	movs	r3, r0
 8009e38:	2b44      	cmp	r3, #68	; 0x44
 8009e3a:	d11f      	bne.n	8009e7c <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2100      	movs	r1, #0
 8009e40:	0018      	movs	r0, r3
 8009e42:	f7ff fd41 	bl	80098c8 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2110      	movs	r1, #16
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7ff fc78 	bl	8009740 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2106      	movs	r1, #6
 8009e54:	0018      	movs	r0, r3
 8009e56:	f7ff fcdf 	bl	8009818 <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2110      	movs	r1, #16
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f7ff fdbf 	bl	80099e2 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2100      	movs	r1, #0
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f7ff fecb 	bl	8009c04 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2102      	movs	r1, #2
 8009e72:	0018      	movs	r0, r3
 8009e74:	f7ff fe96 	bl	8009ba4 <lis2dw12_wkup_threshold_set>
		return true ;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <my_lis2dw12_init+0x80>
	}

	return false ;
 8009e7c:	2300      	movs	r3, #0

}
 8009e7e:	0018      	movs	r0, r3
 8009e80:	46bd      	mov	sp, r7
 8009e82:	b005      	add	sp, #20
 8009e84:	bd90      	pop	{r4, r7, pc}

08009e86 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8009e8e:	210f      	movs	r1, #15
 8009e90:	187b      	adds	r3, r7, r1
 8009e92:	2200      	movs	r2, #0
 8009e94:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8009e96:	000c      	movs	r4, r1
 8009e98:	187a      	adds	r2, r7, r1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	0011      	movs	r1, r2
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f7ff fd42 	bl	8009928 <lis2dw12_device_id_get>
	return id ;
 8009ea4:	193b      	adds	r3, r7, r4
 8009ea6:	781b      	ldrb	r3, [r3, #0]
}
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	b005      	add	sp, #20
 8009eae:	bd90      	pop	{r4, r7, pc}

08009eb0 <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009eb8:	240c      	movs	r4, #12
 8009eba:	193a      	adds	r2, r7, r4
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	0011      	movs	r1, r2
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f7ff fe5d 	bl	8009b80 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8009ec6:	0020      	movs	r0, r4
 8009ec8:	183b      	adds	r3, r7, r0
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	2120      	movs	r1, #32
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009ed2:	183a      	adds	r2, r7, r0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	0011      	movs	r1, r2
 8009ed8:	0018      	movs	r0, r3
 8009eda:	f7ff fddc 	bl	8009a96 <lis2dw12_pin_int1_route_set>
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b005      	add	sp, #20
 8009ee4:	bd90      	pop	{r4, r7, pc}

08009ee6 <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 8009ee6:	b590      	push	{r4, r7, lr}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009eee:	240c      	movs	r4, #12
 8009ef0:	193a      	adds	r2, r7, r4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	0011      	movs	r1, r2
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f7ff fe42 	bl	8009b80 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 8009efc:	0020      	movs	r0, r4
 8009efe:	183b      	adds	r3, r7, r0
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	2120      	movs	r1, #32
 8009f04:	438a      	bics	r2, r1
 8009f06:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009f08:	183a      	adds	r2, r7, r0
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	0011      	movs	r1, r2
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f7ff fdc1 	bl	8009a96 <lis2dw12_pin_int1_route_set>
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b005      	add	sp, #20
 8009f1a:	bd90      	pop	{r4, r7, pc}

08009f1c <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1e:	4cde      	ldr	r4, [pc, #888]	; (800a298 <my_lx6_get_coordinates+0x37c>)
 8009f20:	44a5      	add	sp, r4
 8009f22:	af02      	add	r7, sp, #8
 8009f24:	0001      	movs	r1, r0
 8009f26:	603a      	str	r2, [r7, #0]
 8009f28:	607b      	str	r3, [r7, #4]
 8009f2a:	4bdc      	ldr	r3, [pc, #880]	; (800a29c <my_lx6_get_coordinates+0x380>)
 8009f2c:	20da      	movs	r0, #218	; 0xda
 8009f2e:	0080      	lsls	r0, r0, #2
 8009f30:	181b      	adds	r3, r3, r0
 8009f32:	19db      	adds	r3, r3, r7
 8009f34:	1c0a      	adds	r2, r1, #0
 8009f36:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009f38:	4bd9      	ldr	r3, [pc, #868]	; (800a2a0 <my_lx6_get_coordinates+0x384>)
 8009f3a:	18fb      	adds	r3, r7, r3
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009f40:	4bd8      	ldr	r3, [pc, #864]	; (800a2a4 <my_lx6_get_coordinates+0x388>)
 8009f42:	18fb      	adds	r3, r7, r3
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f48:	4bd7      	ldr	r3, [pc, #860]	; (800a2a8 <my_lx6_get_coordinates+0x38c>)
 8009f4a:	0004      	movs	r4, r0
 8009f4c:	191b      	adds	r3, r3, r4
 8009f4e:	19db      	adds	r3, r3, r7
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	3304      	adds	r3, #4
 8009f56:	22f6      	movs	r2, #246	; 0xf6
 8009f58:	2100      	movs	r1, #0
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	f002 f98e 	bl	800c27c <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f60:	4bd2      	ldr	r3, [pc, #840]	; (800a2ac <my_lx6_get_coordinates+0x390>)
 8009f62:	191b      	adds	r3, r3, r4
 8009f64:	19db      	adds	r3, r3, r7
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	22f6      	movs	r2, #246	; 0xf6
 8009f6e:	2100      	movs	r1, #0
 8009f70:	0018      	movs	r0, r3
 8009f72:	f002 f983 	bl	800c27c <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f76:	4bce      	ldr	r3, [pc, #824]	; (800a2b0 <my_lx6_get_coordinates+0x394>)
 8009f78:	191b      	adds	r3, r3, r4
 8009f7a:	19db      	adds	r3, r3, r7
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	3304      	adds	r3, #4
 8009f82:	22f6      	movs	r2, #246	; 0xf6
 8009f84:	2100      	movs	r1, #0
 8009f86:	0018      	movs	r0, r3
 8009f88:	f002 f978 	bl	800c27c <memset>
	uint8_t		i_nmea = 0 ;
 8009f8c:	4bc9      	ldr	r3, [pc, #804]	; (800a2b4 <my_lx6_get_coordinates+0x398>)
 8009f8e:	0021      	movs	r1, r4
 8009f90:	185b      	adds	r3, r3, r1
 8009f92:	19db      	adds	r3, r3, r7
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009f98:	4bc7      	ldr	r3, [pc, #796]	; (800a2b8 <my_lx6_get_coordinates+0x39c>)
 8009f9a:	18fb      	adds	r3, r7, r3
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009fa0:	4bc6      	ldr	r3, [pc, #792]	; (800a2bc <my_lx6_get_coordinates+0x3a0>)
 8009fa2:	000c      	movs	r4, r1
 8009fa4:	185b      	adds	r3, r3, r1
 8009fa6:	19db      	adds	r3, r3, r7
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	3304      	adds	r3, #4
 8009fae:	2208      	movs	r2, #8
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f002 f962 	bl	800c27c <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009fb8:	4bc1      	ldr	r3, [pc, #772]	; (800a2c0 <my_lx6_get_coordinates+0x3a4>)
 8009fba:	191b      	adds	r3, r3, r4
 8009fbc:	19db      	adds	r3, r3, r7
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f002 f957 	bl	800c27c <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009fce:	4bbd      	ldr	r3, [pc, #756]	; (800a2c4 <my_lx6_get_coordinates+0x3a8>)
 8009fd0:	22d8      	movs	r2, #216	; 0xd8
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	18ba      	adds	r2, r7, r2
 8009fd6:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009fd8:	4bbb      	ldr	r3, [pc, #748]	; (800a2c8 <my_lx6_get_coordinates+0x3ac>)
 8009fda:	22d7      	movs	r2, #215	; 0xd7
 8009fdc:	0092      	lsls	r2, r2, #2
 8009fde:	18ba      	adds	r2, r7, r2
 8009fe0:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8009fe2:	4bba      	ldr	r3, [pc, #744]	; (800a2cc <my_lx6_get_coordinates+0x3b0>)
 8009fe4:	22d6      	movs	r2, #214	; 0xd6
 8009fe6:	0092      	lsls	r2, r2, #2
 8009fe8:	18ba      	adds	r2, r7, r2
 8009fea:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8009fec:	4bb8      	ldr	r3, [pc, #736]	; (800a2d0 <my_lx6_get_coordinates+0x3b4>)
 8009fee:	22d5      	movs	r2, #213	; 0xd5
 8009ff0:	0092      	lsls	r2, r2, #2
 8009ff2:	18ba      	adds	r2, r7, r2
 8009ff4:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 8009ff6:	4bb7      	ldr	r3, [pc, #732]	; (800a2d4 <my_lx6_get_coordinates+0x3b8>)
 8009ff8:	18fb      	adds	r3, r7, r3
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 8009ffe:	4bb6      	ldr	r3, [pc, #728]	; (800a2d8 <my_lx6_get_coordinates+0x3bc>)
 800a000:	2200      	movs	r2, #0
 800a002:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800a004:	4bb5      	ldr	r3, [pc, #724]	; (800a2dc <my_lx6_get_coordinates+0x3c0>)
 800a006:	0018      	movs	r0, r3
 800a008:	f7fc fbde 	bl	80067c8 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 800a00c:	f7f8 ffd6 	bl	8002fbc <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a010:	e0ea      	b.n	800a1e8 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 800a012:	23fa      	movs	r3, #250	; 0xfa
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4ca3      	ldr	r4, [pc, #652]	; (800a2a4 <my_lx6_get_coordinates+0x388>)
 800a018:	1939      	adds	r1, r7, r4
 800a01a:	48b1      	ldr	r0, [pc, #708]	; (800a2e0 <my_lx6_get_coordinates+0x3c4>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	f7fc ffe7 	bl	8006ff0 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 800a022:	23fa      	movs	r3, #250	; 0xfa
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	1939      	adds	r1, r7, r4
 800a028:	48ae      	ldr	r0, [pc, #696]	; (800a2e4 <my_lx6_get_coordinates+0x3c8>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	f7fc ff44 	bl	8006eb8 <HAL_UART_Transmit>
		if ( rxd_byte )
 800a030:	0020      	movs	r0, r4
 800a032:	193b      	adds	r3, r7, r4
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4ca0      	ldr	r4, [pc, #640]	; (800a2b8 <my_lx6_get_coordinates+0x39c>)
 800a038:	193a      	adds	r2, r7, r4
 800a03a:	1939      	adds	r1, r7, r4
 800a03c:	7809      	ldrb	r1, [r1, #0]
 800a03e:	7011      	strb	r1, [r2, #0]
 800a040:	4da4      	ldr	r5, [pc, #656]	; (800a2d4 <my_lx6_get_coordinates+0x3b8>)
 800a042:	197a      	adds	r2, r7, r5
 800a044:	1979      	adds	r1, r7, r5
 800a046:	7809      	ldrb	r1, [r1, #0]
 800a048:	7011      	strb	r1, [r2, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d100      	bne.n	800a050 <my_lx6_get_coordinates+0x134>
 800a04e:	e0cb      	b.n	800a1e8 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800a050:	235f      	movs	r3, #95	; 0x5f
 800a052:	18fa      	adds	r2, r7, r3
 800a054:	2696      	movs	r6, #150	; 0x96
 800a056:	00b6      	lsls	r6, r6, #2
 800a058:	19b9      	adds	r1, r7, r6
 800a05a:	183b      	adds	r3, r7, r0
 800a05c:	0018      	movs	r0, r3
 800a05e:	f000 fa34 	bl	800a4ca <my_nmea_message>
 800a062:	0001      	movs	r1, r0
 800a064:	193b      	adds	r3, r7, r4
 800a066:	193a      	adds	r2, r7, r4
 800a068:	7812      	ldrb	r2, [r2, #0]
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	197b      	adds	r3, r7, r5
 800a06e:	197a      	adds	r2, r7, r5
 800a070:	7812      	ldrb	r2, [r2, #0]
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	2902      	cmp	r1, #2
 800a076:	d000      	beq.n	800a07a <my_lx6_get_coordinates+0x15e>
 800a078:	e0b6      	b.n	800a1e8 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a07a:	19bb      	adds	r3, r7, r6
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fae4 	bl	800a64a <is_my_nmea_checksum_ok>
 800a082:	0003      	movs	r3, r0
 800a084:	0019      	movs	r1, r3
 800a086:	193b      	adds	r3, r7, r4
 800a088:	193a      	adds	r2, r7, r4
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	197b      	adds	r3, r7, r5
 800a090:	197a      	adds	r2, r7, r5
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	2900      	cmp	r1, #0
 800a098:	d100      	bne.n	800a09c <my_lx6_get_coordinates+0x180>
 800a09a:	e0a5      	b.n	800a1e8 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a09c:	23d6      	movs	r3, #214	; 0xd6
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	18fb      	adds	r3, r7, r3
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	19bb      	adds	r3, r7, r6
 800a0a6:	0011      	movs	r1, r2
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f002 f914 	bl	800c2d6 <strstr>
 800a0ae:	1e03      	subs	r3, r0, #0
 800a0b0:	d00d      	beq.n	800a0ce <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a0b2:	4b7f      	ldr	r3, [pc, #508]	; (800a2b0 <my_lx6_get_coordinates+0x394>)
 800a0b4:	21da      	movs	r1, #218	; 0xda
 800a0b6:	0089      	lsls	r1, r1, #2
 800a0b8:	185b      	adds	r3, r3, r1
 800a0ba:	19da      	adds	r2, r3, r7
 800a0bc:	4b7a      	ldr	r3, [pc, #488]	; (800a2a8 <my_lx6_get_coordinates+0x38c>)
 800a0be:	185b      	adds	r3, r3, r1
 800a0c0:	19db      	adds	r3, r3, r7
 800a0c2:	0010      	movs	r0, r2
 800a0c4:	0019      	movs	r1, r3
 800a0c6:	23fa      	movs	r3, #250	; 0xfa
 800a0c8:	001a      	movs	r2, r3
 800a0ca:	f002 f9bc 	bl	800c446 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a0ce:	23d5      	movs	r3, #213	; 0xd5
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	2496      	movs	r4, #150	; 0x96
 800a0d8:	00a4      	lsls	r4, r4, #2
 800a0da:	193b      	adds	r3, r7, r4
 800a0dc:	0011      	movs	r1, r2
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f002 f8f9 	bl	800c2d6 <strstr>
 800a0e4:	1e03      	subs	r3, r0, #0
 800a0e6:	d011      	beq.n	800a10c <my_lx6_get_coordinates+0x1f0>
 800a0e8:	4d73      	ldr	r5, [pc, #460]	; (800a2b8 <my_lx6_get_coordinates+0x39c>)
 800a0ea:	197b      	adds	r3, r7, r5
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d80c      	bhi.n	800a10c <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a0f2:	4b79      	ldr	r3, [pc, #484]	; (800a2d8 <my_lx6_get_coordinates+0x3bc>)
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	2b0a      	cmp	r3, #10
 800a0f8:	d900      	bls.n	800a0fc <my_lx6_get_coordinates+0x1e0>
 800a0fa:	e081      	b.n	800a200 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a0fc:	193b      	adds	r3, r7, r4
 800a0fe:	0018      	movs	r0, r3
 800a100:	f000 fc60 	bl	800a9c4 <my_nmea_get_gsv_tns>
 800a104:	0003      	movs	r3, r0
 800a106:	001a      	movs	r2, r3
 800a108:	197b      	adds	r3, r7, r5
 800a10a:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a10c:	23d8      	movs	r3, #216	; 0xd8
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	18fb      	adds	r3, r7, r3
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	2596      	movs	r5, #150	; 0x96
 800a116:	00ad      	lsls	r5, r5, #2
 800a118:	197b      	adds	r3, r7, r5
 800a11a:	0011      	movs	r1, r2
 800a11c:	0018      	movs	r0, r3
 800a11e:	f002 f8da 	bl	800c2d6 <strstr>
 800a122:	1e03      	subs	r3, r0, #0
 800a124:	d015      	beq.n	800a152 <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a126:	4b6b      	ldr	r3, [pc, #428]	; (800a2d4 <my_lx6_get_coordinates+0x3b8>)
 800a128:	18fc      	adds	r4, r7, r3
 800a12a:	197b      	adds	r3, r7, r5
 800a12c:	0018      	movs	r0, r3
 800a12e:	f000 fa38 	bl	800a5a2 <get_my_nmea_gngsa_fixed_mode_s>
 800a132:	0003      	movs	r3, r0
 800a134:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a136:	197b      	adds	r3, r7, r5
 800a138:	0018      	movs	r0, r3
 800a13a:	f000 fa3d 	bl	800a5b8 <get_my_nmea_gngsa_pdop_d>
 800a13e:	0002      	movs	r2, r0
 800a140:	000b      	movs	r3, r1
 800a142:	21de      	movs	r1, #222	; 0xde
 800a144:	0089      	lsls	r1, r1, #2
 800a146:	2008      	movs	r0, #8
 800a148:	1809      	adds	r1, r1, r0
 800a14a:	19c9      	adds	r1, r1, r7
 800a14c:	6809      	ldr	r1, [r1, #0]
 800a14e:	600a      	str	r2, [r1, #0]
 800a150:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a152:	23d7      	movs	r3, #215	; 0xd7
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	2596      	movs	r5, #150	; 0x96
 800a15c:	00ad      	lsls	r5, r5, #2
 800a15e:	197b      	adds	r3, r7, r5
 800a160:	0011      	movs	r1, r2
 800a162:	0018      	movs	r0, r3
 800a164:	f002 f8b7 	bl	800c2d6 <strstr>
 800a168:	1e03      	subs	r3, r0, #0
 800a16a:	d03d      	beq.n	800a1e8 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a16c:	23de      	movs	r3, #222	; 0xde
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	2408      	movs	r4, #8
 800a172:	191b      	adds	r3, r3, r4
 800a174:	19db      	adds	r3, r3, r7
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	6838      	ldr	r0, [r7, #0]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	f7f6 f986 	bl	8000490 <__aeabi_dcmpge>
 800a184:	1e03      	subs	r3, r0, #0
 800a186:	d021      	beq.n	800a1cc <my_lx6_get_coordinates+0x2b0>
 800a188:	4b52      	ldr	r3, [pc, #328]	; (800a2d4 <my_lx6_get_coordinates+0x3b8>)
 800a18a:	18fb      	adds	r3, r7, r3
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b33      	cmp	r3, #51	; 0x33
 800a190:	d11c      	bne.n	800a1cc <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a192:	23df      	movs	r3, #223	; 0xdf
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	0026      	movs	r6, r4
 800a198:	191b      	adds	r3, r3, r4
 800a19a:	19db      	adds	r3, r3, r7
 800a19c:	681c      	ldr	r4, [r3, #0]
 800a19e:	2344      	movs	r3, #68	; 0x44
 800a1a0:	18fa      	adds	r2, r7, r3
 800a1a2:	2350      	movs	r3, #80	; 0x50
 800a1a4:	18f9      	adds	r1, r7, r3
 800a1a6:	1978      	adds	r0, r7, r5
 800a1a8:	23e0      	movs	r3, #224	; 0xe0
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	199b      	adds	r3, r3, r6
 800a1ae:	19db      	adds	r3, r3, r7
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	0023      	movs	r3, r4
 800a1b6:	f000 fb03 	bl	800a7c0 <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a1ba:	197b      	adds	r3, r7, r5
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f000 f895 	bl	800a2ec <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a1c2:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <my_lx6_get_coordinates+0x384>)
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	701a      	strb	r2, [r3, #0]
							break ;
 800a1ca:	e01a      	b.n	800a202 <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a1cc:	4b37      	ldr	r3, [pc, #220]	; (800a2ac <my_lx6_get_coordinates+0x390>)
 800a1ce:	21da      	movs	r1, #218	; 0xda
 800a1d0:	0089      	lsls	r1, r1, #2
 800a1d2:	185b      	adds	r3, r3, r1
 800a1d4:	19da      	adds	r2, r3, r7
 800a1d6:	4b34      	ldr	r3, [pc, #208]	; (800a2a8 <my_lx6_get_coordinates+0x38c>)
 800a1d8:	185b      	adds	r3, r3, r1
 800a1da:	19db      	adds	r3, r3, r7
 800a1dc:	0010      	movs	r0, r2
 800a1de:	0019      	movs	r1, r3
 800a1e0:	23fa      	movs	r3, #250	; 0xfa
 800a1e2:	001a      	movs	r2, r3
 800a1e4:	f002 f92f 	bl	800c446 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <my_lx6_get_coordinates+0x3bc>)
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	4a2b      	ldr	r2, [pc, #172]	; (800a29c <my_lx6_get_coordinates+0x380>)
 800a1ee:	21da      	movs	r1, #218	; 0xda
 800a1f0:	0089      	lsls	r1, r1, #2
 800a1f2:	1852      	adds	r2, r2, r1
 800a1f4:	19d2      	adds	r2, r2, r7
 800a1f6:	8812      	ldrh	r2, [r2, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d900      	bls.n	800a1fe <my_lx6_get_coordinates+0x2e2>
 800a1fc:	e709      	b.n	800a012 <my_lx6_get_coordinates+0xf6>
 800a1fe:	e000      	b.n	800a202 <my_lx6_get_coordinates+0x2e6>
							break ;
 800a200:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a202:	4b36      	ldr	r3, [pc, #216]	; (800a2dc <my_lx6_get_coordinates+0x3c0>)
 800a204:	0018      	movs	r0, r3
 800a206:	f7fc fb3b 	bl	8006880 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a20a:	f7f8 feef 	bl	8002fec <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a20e:	4b2b      	ldr	r3, [pc, #172]	; (800a2bc <my_lx6_get_coordinates+0x3a0>)
 800a210:	22da      	movs	r2, #218	; 0xda
 800a212:	0092      	lsls	r2, r2, #2
 800a214:	189b      	adds	r3, r3, r2
 800a216:	19db      	adds	r3, r3, r7
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d125      	bne.n	800a26a <my_lx6_get_coordinates+0x34e>
 800a21e:	4b23      	ldr	r3, [pc, #140]	; (800a2ac <my_lx6_get_coordinates+0x390>)
 800a220:	189b      	adds	r3, r3, r2
 800a222:	19db      	adds	r3, r3, r7
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01f      	beq.n	800a26a <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a22a:	23df      	movs	r3, #223	; 0xdf
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	2508      	movs	r5, #8
 800a230:	195b      	adds	r3, r3, r5
 800a232:	19db      	adds	r3, r3, r7
 800a234:	681c      	ldr	r4, [r3, #0]
 800a236:	2344      	movs	r3, #68	; 0x44
 800a238:	18fa      	adds	r2, r7, r3
 800a23a:	2350      	movs	r3, #80	; 0x50
 800a23c:	18f9      	adds	r1, r7, r3
 800a23e:	23ae      	movs	r3, #174	; 0xae
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	18f8      	adds	r0, r7, r3
 800a244:	23e0      	movs	r3, #224	; 0xe0
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	195b      	adds	r3, r3, r5
 800a24a:	19db      	adds	r3, r3, r7
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	0023      	movs	r3, r4
 800a252:	f000 fab5 	bl	800a7c0 <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a256:	2396      	movs	r3, #150	; 0x96
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	0018      	movs	r0, r3
 800a25e:	f000 f845 	bl	800a2ec <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a262:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <my_lx6_get_coordinates+0x384>)
 800a264:	18fb      	adds	r3, r7, r3
 800a266:	2201      	movs	r2, #1
 800a268:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 800a26a:	2344      	movs	r3, #68	; 0x44
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	2250      	movs	r2, #80	; 0x50
 800a270:	18ba      	adds	r2, r7, r2
 800a272:	491d      	ldr	r1, [pc, #116]	; (800a2e8 <my_lx6_get_coordinates+0x3cc>)
 800a274:	2410      	movs	r4, #16
 800a276:	1938      	adds	r0, r7, r4
 800a278:	f001 ff6a 	bl	800c150 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 800a27c:	193b      	adds	r3, r7, r4
 800a27e:	0018      	movs	r0, r3
 800a280:	f7f8 fda0 	bl	8002dc4 <send_debug_logs>
	return r ;
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <my_lx6_get_coordinates+0x384>)
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	781b      	ldrb	r3, [r3, #0]
}
 800a28a:	0018      	movs	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	23db      	movs	r3, #219	; 0xdb
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	449d      	add	sp, r3
 800a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	fffffc8c 	.word	0xfffffc8c
 800a29c:	fffffca6 	.word	0xfffffca6
 800a2a0:	00000367 	.word	0x00000367
 800a2a4:	00000353 	.word	0x00000353
 800a2a8:	fffffef0 	.word	0xfffffef0
 800a2ac:	fffffdf4 	.word	0xfffffdf4
 800a2b0:	fffffcf8 	.word	0xfffffcf8
 800a2b4:	fffffcf7 	.word	0xfffffcf7
 800a2b8:	00000366 	.word	0x00000366
 800a2bc:	fffffce8 	.word	0xfffffce8
 800a2c0:	fffffcdc 	.word	0xfffffcdc
 800a2c4:	08014644 	.word	0x08014644
 800a2c8:	0801464c 	.word	0x0801464c
 800a2cc:	08014654 	.word	0x08014654
 800a2d0:	08014658 	.word	0x08014658
 800a2d4:	00000365 	.word	0x00000365
 800a2d8:	20000a1a 	.word	0x20000a1a
 800a2dc:	2000078c 	.word	0x2000078c
 800a2e0:	20000900 	.word	0x20000900
 800a2e4:	2000086c 	.word	0x2000086c
 800a2e8:	0801465c 	.word	0x0801465c

0800a2ec <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a2ec:	b5b0      	push	{r4, r5, r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a2f4:	2508      	movs	r5, #8
 800a2f6:	197b      	adds	r3, r7, r5
 800a2f8:	1cda      	adds	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 fb98 	bl	800aa34 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a304:	197b      	adds	r3, r7, r5
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	0011      	movs	r1, r2
 800a30c:	0018      	movs	r0, r3
 800a30e:	f000 fbcb 	bl	800aaa8 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a312:	197b      	adds	r3, r7, r5
 800a314:	1c9a      	adds	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	0011      	movs	r1, r2
 800a31a:	0018      	movs	r0, r3
 800a31c:	f000 fbfe 	bl	800ab1c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a320:	240c      	movs	r4, #12
 800a322:	193a      	adds	r2, r7, r4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	0011      	movs	r1, r2
 800a328:	0018      	movs	r0, r3
 800a32a:	f000 fc31 	bl	800ab90 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a32e:	193b      	adds	r3, r7, r4
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	0011      	movs	r1, r2
 800a336:	0018      	movs	r0, r3
 800a338:	f000 fc64 	bl	800ac04 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a33c:	193b      	adds	r3, r7, r4
 800a33e:	1c9a      	adds	r2, r3, #2
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	0011      	movs	r1, r2
 800a344:	0018      	movs	r0, r3
 800a346:	f000 fc97 	bl	800ac78 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a34a:	193b      	adds	r3, r7, r4
 800a34c:	1d1a      	adds	r2, r3, #4
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	0011      	movs	r1, r2
 800a352:	0018      	movs	r0, r3
 800a354:	f000 fcca 	bl	800acec <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a358:	193b      	adds	r3, r7, r4
 800a35a:	2200      	movs	r2, #0
 800a35c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a35e:	193b      	adds	r3, r7, r4
 800a360:	2200      	movs	r2, #0
 800a362:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a364:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a366:	0018      	movs	r0, r3
 800a368:	f7fb fa6b 	bl	8005842 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a36c:	1939      	adds	r1, r7, r4
 800a36e:	4b09      	ldr	r3, [pc, #36]	; (800a394 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a370:	2200      	movs	r2, #0
 800a372:	0018      	movs	r0, r3
 800a374:	f7fa fe68 	bl	8005048 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a378:	1979      	adds	r1, r7, r5
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	0018      	movs	r0, r3
 800a380:	f7fa ff66 	bl	8005250 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a384:	4b03      	ldr	r3, [pc, #12]	; (800a394 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a386:	0018      	movs	r0, r3
 800a388:	f7fb fa8f 	bl	80058aa <HAL_RTCEx_DisableBypassShadow>
}
 800a38c:	46c0      	nop			; (mov r8, r8)
 800a38e:	46bd      	mov	sp, r7
 800a390:	b008      	add	sp, #32
 800a392:	bdb0      	pop	{r4, r5, r7, pc}
 800a394:	200006fc 	.word	0x200006fc

0800a398 <my_rtc_get_time_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a39a:	b08d      	sub	sp, #52	; 0x34
 800a39c:	af04      	add	r7, sp, #16
 800a39e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a3a0:	2508      	movs	r5, #8
 800a3a2:	1979      	adds	r1, r7, r5
 800a3a4:	4b1b      	ldr	r3, [pc, #108]	; (800a414 <my_rtc_get_time_s+0x7c>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f7fa fef5 	bl	8005198 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a3ae:	241c      	movs	r4, #28
 800a3b0:	1939      	adds	r1, r7, r4
 800a3b2:	4b18      	ldr	r3, [pc, #96]	; (800a414 <my_rtc_get_time_s+0x7c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f7fa ffdc 	bl	8005374 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a3bc:	0021      	movs	r1, r4
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	78db      	ldrb	r3, [r3, #3]
 800a3c2:	22fa      	movs	r2, #250	; 0xfa
 800a3c4:	00d2      	lsls	r2, r2, #3
 800a3c6:	189a      	adds	r2, r3, r2
 800a3c8:	187b      	adds	r3, r7, r1
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	469c      	mov	ip, r3
 800a3ce:	187b      	adds	r3, r7, r1
 800a3d0:	789b      	ldrb	r3, [r3, #2]
 800a3d2:	001c      	movs	r4, r3
 800a3d4:	0028      	movs	r0, r5
 800a3d6:	183b      	adds	r3, r7, r0
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	001d      	movs	r5, r3
 800a3dc:	183b      	adds	r3, r7, r0
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	001e      	movs	r6, r3
 800a3e2:	183b      	adds	r3, r7, r0
 800a3e4:	789b      	ldrb	r3, [r3, #2]
 800a3e6:	490c      	ldr	r1, [pc, #48]	; (800a418 <my_rtc_get_time_s+0x80>)
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	9303      	str	r3, [sp, #12]
 800a3ec:	9602      	str	r6, [sp, #8]
 800a3ee:	9501      	str	r5, [sp, #4]
 800a3f0:	9400      	str	r4, [sp, #0]
 800a3f2:	4663      	mov	r3, ip
 800a3f4:	f001 feac 	bl	800c150 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a3f8:	211c      	movs	r1, #28
 800a3fa:	187b      	adds	r3, r7, r1
 800a3fc:	78db      	ldrb	r3, [r3, #3]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	22fa      	movs	r2, #250	; 0xfa
 800a402:	00d2      	lsls	r2, r2, #3
 800a404:	4694      	mov	ip, r2
 800a406:	4463      	add	r3, ip
 800a408:	b29b      	uxth	r3, r3
}
 800a40a:	0018      	movs	r0, r3
 800a40c:	46bd      	mov	sp, r7
 800a40e:	b009      	add	sp, #36	; 0x24
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	200006fc 	.word	0x200006fc
 800a418:	08014674 	.word	0x08014674

0800a41c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2100      	movs	r1, #0
 800a428:	0018      	movs	r0, r3
 800a42a:	f001 fcf5 	bl	800be18 <strtod>
 800a42e:	0002      	movs	r2, r0
 800a430:	000b      	movs	r3, r1
 800a432:	60ba      	str	r2, [r7, #8]
 800a434:	60fb      	str	r3, [r7, #12]
    return d ;
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
}
 800a43a:	0010      	movs	r0, r2
 800a43c:	0019      	movs	r1, r3
 800a43e:	46bd      	mov	sp, r7
 800a440:	b004      	add	sp, #16
 800a442:	bd80      	pop	{r7, pc}

0800a444 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	0008      	movs	r0, r1
 800a44e:	0011      	movs	r1, r2
 800a450:	1cfb      	adds	r3, r7, #3
 800a452:	1c02      	adds	r2, r0, #0
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	1cbb      	adds	r3, r7, #2
 800a458:	1c0a      	adds	r2, r1, #0
 800a45a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a45c:	230f      	movs	r3, #15
 800a45e:	18fb      	adds	r3, r7, r3
 800a460:	2200      	movs	r2, #0
 800a462:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a464:	230e      	movs	r3, #14
 800a466:	18fb      	adds	r3, r7, r3
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a46c:	e01c      	b.n	800a4a8 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a46e:	230f      	movs	r3, #15
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	18d3      	adds	r3, r2, r3
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	1cfa      	adds	r2, r7, #3
 800a47c:	7812      	ldrb	r2, [r2, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d105      	bne.n	800a48e <my_find_char_position+0x4a>
			p++ ;
 800a482:	210e      	movs	r1, #14
 800a484:	187b      	adds	r3, r7, r1
 800a486:	781a      	ldrb	r2, [r3, #0]
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	3201      	adds	r2, #1
 800a48c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a48e:	230e      	movs	r3, #14
 800a490:	18fa      	adds	r2, r7, r3
 800a492:	1cbb      	adds	r3, r7, #2
 800a494:	7812      	ldrb	r2, [r2, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d00e      	beq.n	800a4ba <my_find_char_position+0x76>
			break ;
		i++ ;
 800a49c:	210f      	movs	r1, #15
 800a49e:	187b      	adds	r3, r7, r1
 800a4a0:	781a      	ldrb	r2, [r3, #0]
 800a4a2:	187b      	adds	r3, r7, r1
 800a4a4:	3201      	adds	r2, #1
 800a4a6:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a4a8:	230f      	movs	r3, #15
 800a4aa:	18fb      	adds	r3, r7, r3
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1da      	bne.n	800a46e <my_find_char_position+0x2a>
 800a4b8:	e000      	b.n	800a4bc <my_find_char_position+0x78>
			break ;
 800a4ba:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a4bc:	230f      	movs	r3, #15
 800a4be:	18fb      	adds	r3, r7, r3
 800a4c0:	781b      	ldrb	r3, [r3, #0]
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b004      	add	sp, #16
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b24      	cmp	r3, #36	; 0x24
 800a4dc:	d117      	bne.n	800a50e <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	b2d1      	uxtb	r1, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	7011      	strb	r1, [r2, #0]
 800a4f0:	001a      	movs	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	189b      	adds	r3, r3, r2
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	7812      	ldrb	r2, [r2, #0]
 800a4fa:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	001a      	movs	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	189b      	adds	r3, r3, r2
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e045      	b.n	800a59a <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b1f      	cmp	r3, #31
 800a514:	d907      	bls.n	800a526 <my_nmea_message+0x5c>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b7e      	cmp	r3, #126	; 0x7e
 800a51c:	d803      	bhi.n	800a526 <my_nmea_message+0x5c>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d103      	bne.n	800a52e <my_nmea_message+0x64>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b0d      	cmp	r3, #13
 800a52c:	d114      	bne.n	800a558 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	b2d1      	uxtb	r1, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	7011      	strb	r1, [r2, #0]
 800a53a:	001a      	movs	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	001a      	movs	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	189b      	adds	r3, r3, r2
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a554:	2301      	movs	r3, #1
 800a556:	e020      	b.n	800a59a <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b0a      	cmp	r3, #10
 800a55e:	d11a      	bne.n	800a596 <my_nmea_message+0xcc>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d916      	bls.n	800a596 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	001a      	movs	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	189b      	adds	r3, r3, r2
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b0d      	cmp	r3, #13
 800a582:	d108      	bne.n	800a596 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	001a      	movs	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	189b      	adds	r3, r3, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a592:	2302      	movs	r3, #2
 800a594:	e001      	b.n	800a59a <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a596:	2301      	movs	r3, #1
 800a598:	425b      	negs	r3, r3
}
 800a59a:	0018      	movs	r0, r3
 800a59c:	46bd      	mov	sp, r7
 800a59e:	b004      	add	sp, #16
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3309      	adds	r3, #9
 800a5ae:	781b      	ldrb	r3, [r3, #0]
}
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b002      	add	sp, #8
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a5b8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	220f      	movs	r2, #15
 800a5c4:	212c      	movs	r1, #44	; 0x2c
 800a5c6:	0018      	movs	r0, r3
 800a5c8:	f7ff ff3c 	bl	800a444 <my_find_char_position>
 800a5cc:	0003      	movs	r3, r0
 800a5ce:	001a      	movs	r2, r3
 800a5d0:	2517      	movs	r5, #23
 800a5d2:	197b      	adds	r3, r7, r5
 800a5d4:	3201      	adds	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2210      	movs	r2, #16
 800a5dc:	212c      	movs	r1, #44	; 0x2c
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f7ff ff30 	bl	800a444 <my_find_char_position>
 800a5e4:	0003      	movs	r3, r0
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	2416      	movs	r4, #22
 800a5ea:	193b      	adds	r3, r7, r4
 800a5ec:	197a      	adds	r2, r7, r5
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	1a8a      	subs	r2, r1, r2
 800a5f2:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a5f4:	193b      	adds	r3, r7, r4
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f000 fbaa 	bl	800ad54 <malloc>
 800a600:	0003      	movs	r3, r0
 800a602:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a604:	197b      	adds	r3, r7, r5
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	18d1      	adds	r1, r2, r3
 800a60c:	193b      	adds	r3, r7, r4
 800a60e:	781a      	ldrb	r2, [r3, #0]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	0018      	movs	r0, r3
 800a614:	f001 fe4b 	bl	800c2ae <strncpy>
	pdop_s[pdop_length] = '\0';
 800a618:	193b      	adds	r3, r7, r4
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	18d3      	adds	r3, r2, r3
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	0018      	movs	r0, r3
 800a628:	f7ff fef8 	bl	800a41c <my_string2double_conv>
 800a62c:	0002      	movs	r2, r0
 800a62e:	000b      	movs	r3, r1
 800a630:	60ba      	str	r2, [r7, #8]
 800a632:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	0018      	movs	r0, r3
 800a638:	f000 fb96 	bl	800ad68 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	68fb      	ldr	r3, [r7, #12]
}
 800a640:	0010      	movs	r0, r2
 800a642:	0019      	movs	r1, r3
 800a644:	46bd      	mov	sp, r7
 800a646:	b006      	add	sp, #24
 800a648:	bdb0      	pop	{r4, r5, r7, pc}

0800a64a <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a64a:	b590      	push	{r4, r7, lr}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a652:	230f      	movs	r3, #15
 800a654:	18fb      	adds	r3, r7, r3
 800a656:	2200      	movs	r2, #0
 800a658:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a65a:	230e      	movs	r3, #14
 800a65c:	18fb      	adds	r3, r7, r3
 800a65e:	2201      	movs	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a662:	e00f      	b.n	800a684 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a664:	220e      	movs	r2, #14
 800a666:	18bb      	adds	r3, r7, r2
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	18ba      	adds	r2, r7, r2
 800a66c:	1c59      	adds	r1, r3, #1
 800a66e:	7011      	strb	r1, [r2, #0]
 800a670:	001a      	movs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	189b      	adds	r3, r3, r2
 800a676:	7819      	ldrb	r1, [r3, #0]
 800a678:	220f      	movs	r2, #15
 800a67a:	18bb      	adds	r3, r7, r2
 800a67c:	18ba      	adds	r2, r7, r2
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	404a      	eors	r2, r1
 800a682:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a684:	210e      	movs	r1, #14
 800a686:	187b      	adds	r3, r7, r1
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	18d3      	adds	r3, r2, r3
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	2b2a      	cmp	r3, #42	; 0x2a
 800a692:	d00a      	beq.n	800a6aa <is_my_nmea_checksum_ok+0x60>
 800a694:	187b      	adds	r3, r7, r1
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <is_my_nmea_checksum_ok+0x60>
 800a6a2:	187b      	adds	r3, r7, r1
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1dc      	bne.n	800a664 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a6aa:	230f      	movs	r3, #15
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	781c      	ldrb	r4, [r3, #0]
 800a6b0:	210e      	movs	r1, #14
 800a6b2:	187b      	adds	r3, r7, r1
 800a6b4:	187a      	adds	r2, r7, r1
 800a6b6:	7812      	ldrb	r2, [r2, #0]
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	187b      	adds	r3, r7, r1
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	18d3      	adds	r3, r2, r3
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f001 fc3d 	bl	800bf48 <strtol>
 800a6ce:	0003      	movs	r3, r0
 800a6d0:	1ae3      	subs	r3, r4, r3
 800a6d2:	425a      	negs	r2, r3
 800a6d4:	4153      	adcs	r3, r2
 800a6d6:	b2db      	uxtb	r3, r3
}
 800a6d8:	0018      	movs	r0, r3
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b005      	add	sp, #20
 800a6de:	bd90      	pop	{r4, r7, pc}

0800a6e0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a6e0:	b5b0      	push	{r4, r5, r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	000a      	movs	r2, r1
 800a6ea:	1cfb      	adds	r3, r7, #3
 800a6ec:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a6ee:	2308      	movs	r3, #8
 800a6f0:	18fa      	adds	r2, r7, r3
 800a6f2:	492f      	ldr	r1, [pc, #188]	; (800a7b0 <nmea2decimal+0xd0>)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f001 fd4a 	bl	800c190 <sscanf>
    min = deg / 100 ;
 800a6fc:	68b8      	ldr	r0, [r7, #8]
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	4b2c      	ldr	r3, [pc, #176]	; (800a7b4 <nmea2decimal+0xd4>)
 800a704:	f7f6 fbb8 	bl	8000e78 <__aeabi_ddiv>
 800a708:	0002      	movs	r2, r0
 800a70a:	000b      	movs	r3, r1
 800a70c:	613a      	str	r2, [r7, #16]
 800a70e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a710:	6938      	ldr	r0, [r7, #16]
 800a712:	6979      	ldr	r1, [r7, #20]
 800a714:	f7f7 fe0c 	bl	8002330 <__aeabi_d2iz>
 800a718:	0003      	movs	r3, r0
 800a71a:	0018      	movs	r0, r3
 800a71c:	f7f7 fe3e 	bl	800239c <__aeabi_i2d>
 800a720:	0002      	movs	r2, r0
 800a722:	000b      	movs	r3, r1
 800a724:	60ba      	str	r2, [r7, #8]
 800a726:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	6979      	ldr	r1, [r7, #20]
 800a730:	f7f7 fa5e 	bl	8001bf0 <__aeabi_dsub>
 800a734:	0002      	movs	r2, r0
 800a736:	000b      	movs	r3, r1
 800a738:	0010      	movs	r0, r2
 800a73a:	0019      	movs	r1, r3
 800a73c:	2200      	movs	r2, #0
 800a73e:	4b1e      	ldr	r3, [pc, #120]	; (800a7b8 <nmea2decimal+0xd8>)
 800a740:	f7f6 ff94 	bl	800166c <__aeabi_dmul>
 800a744:	0002      	movs	r2, r0
 800a746:	000b      	movs	r3, r1
 800a748:	613a      	str	r2, [r7, #16]
 800a74a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a74c:	2200      	movs	r2, #0
 800a74e:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <nmea2decimal+0xdc>)
 800a750:	6938      	ldr	r0, [r7, #16]
 800a752:	6979      	ldr	r1, [r7, #20]
 800a754:	f7f6 fb90 	bl	8000e78 <__aeabi_ddiv>
 800a758:	0002      	movs	r2, r0
 800a75a:	000b      	movs	r3, r1
 800a75c:	613a      	str	r2, [r7, #16]
 800a75e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a760:	1cfb      	adds	r3, r7, #3
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b53      	cmp	r3, #83	; 0x53
 800a766:	d003      	beq.n	800a770 <nmea2decimal+0x90>
 800a768:	1cfb      	adds	r3, r7, #3
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b57      	cmp	r3, #87	; 0x57
 800a76e:	d10e      	bne.n	800a78e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a770:	68b8      	ldr	r0, [r7, #8]
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f7f6 f81e 	bl	80007b8 <__aeabi_dadd>
 800a77c:	0002      	movs	r2, r0
 800a77e:	000b      	movs	r3, r1
 800a780:	0011      	movs	r1, r2
 800a782:	000c      	movs	r4, r1
 800a784:	2180      	movs	r1, #128	; 0x80
 800a786:	0609      	lsls	r1, r1, #24
 800a788:	4059      	eors	r1, r3
 800a78a:	000d      	movs	r5, r1
 800a78c:	e009      	b.n	800a7a2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a78e:	68b8      	ldr	r0, [r7, #8]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f7f6 f80f 	bl	80007b8 <__aeabi_dadd>
 800a79a:	0002      	movs	r2, r0
 800a79c:	000b      	movs	r3, r1
 800a79e:	0014      	movs	r4, r2
 800a7a0:	001d      	movs	r5, r3
}
 800a7a2:	0022      	movs	r2, r4
 800a7a4:	002b      	movs	r3, r5
 800a7a6:	0010      	movs	r0, r2
 800a7a8:	0019      	movs	r1, r3
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	b006      	add	sp, #24
 800a7ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a7b0:	08014694 	.word	0x08014694
 800a7b4:	40590000 	.word	0x40590000
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	40180000 	.word	0x40180000

0800a7c0 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c2:	b091      	sub	sp, #68	; 0x44
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	212c      	movs	r1, #44	; 0x2c
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7ff fe35 	bl	800a444 <my_find_char_position>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	001a      	movs	r2, r3
 800a7de:	2537      	movs	r5, #55	; 0x37
 800a7e0:	197b      	adds	r3, r7, r5
 800a7e2:	3201      	adds	r2, #1
 800a7e4:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	212c      	movs	r1, #44	; 0x2c
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f7ff fe29 	bl	800a444 <my_find_char_position>
 800a7f2:	0003      	movs	r3, r0
 800a7f4:	0019      	movs	r1, r3
 800a7f6:	2436      	movs	r4, #54	; 0x36
 800a7f8:	193b      	adds	r3, r7, r4
 800a7fa:	197a      	adds	r2, r7, r5
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	1a8a      	subs	r2, r1, r2
 800a800:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a802:	193b      	adds	r3, r7, r4
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	0018      	movs	r0, r3
 800a80a:	f000 faa3 	bl	800ad54 <malloc>
 800a80e:	0003      	movs	r3, r0
 800a810:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a812:	197b      	adds	r3, r7, r5
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	18d1      	adds	r1, r2, r3
 800a81a:	193b      	adds	r3, r7, r4
 800a81c:	781a      	ldrb	r2, [r3, #0]
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	0018      	movs	r0, r3
 800a822:	f001 fd44 	bl	800c2ae <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a826:	193b      	adds	r3, r7, r4
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82c:	18d3      	adds	r3, r2, r3
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a832:	197b      	adds	r3, r7, r5
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	193b      	adds	r3, r7, r4
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	18d3      	adds	r3, r2, r3
 800a83c:	3301      	adds	r3, #1
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	18d2      	adds	r2, r2, r3
 800a842:	262f      	movs	r6, #47	; 0x2f
 800a844:	19bb      	adds	r3, r7, r6
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a84a:	19bb      	adds	r3, r7, r6
 800a84c:	781a      	ldrb	r2, [r3, #0]
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	0011      	movs	r1, r2
 800a852:	0018      	movs	r0, r3
 800a854:	f7ff ff44 	bl	800a6e0 <nmea2decimal>
 800a858:	0002      	movs	r2, r0
 800a85a:	000b      	movs	r3, r1
 800a85c:	623a      	str	r2, [r7, #32]
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	0018      	movs	r0, r3
 800a864:	f000 fa80 	bl	800ad68 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a868:	2200      	movs	r2, #0
 800a86a:	4b53      	ldr	r3, [pc, #332]	; (800a9b8 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a86c:	6a38      	ldr	r0, [r7, #32]
 800a86e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a870:	f7f6 fefc 	bl	800166c <__aeabi_dmul>
 800a874:	0002      	movs	r2, r0
 800a876:	000b      	movs	r3, r1
 800a878:	0010      	movs	r0, r2
 800a87a:	0019      	movs	r1, r3
 800a87c:	f008 fa34 	bl	8012ce8 <round>
 800a880:	2200      	movs	r2, #0
 800a882:	4b4d      	ldr	r3, [pc, #308]	; (800a9b8 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a884:	f7f6 faf8 	bl	8000e78 <__aeabi_ddiv>
 800a888:	0002      	movs	r2, r0
 800a88a:	000b      	movs	r3, r1
 800a88c:	623a      	str	r2, [r7, #32]
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a890:	494a      	ldr	r1, [pc, #296]	; (800a9bc <get_my_nmea_gngll_coordinates+0x1fc>)
 800a892:	68b8      	ldr	r0, [r7, #8]
 800a894:	6a3a      	ldr	r2, [r7, #32]
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	9200      	str	r2, [sp, #0]
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	000a      	movs	r2, r1
 800a89e:	210c      	movs	r1, #12
 800a8a0:	f001 fc22 	bl	800c0e8 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4b46      	ldr	r3, [pc, #280]	; (800a9c0 <get_my_nmea_gngll_coordinates+0x200>)
 800a8a8:	6a38      	ldr	r0, [r7, #32]
 800a8aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8ac:	f7f6 fede 	bl	800166c <__aeabi_dmul>
 800a8b0:	0002      	movs	r2, r0
 800a8b2:	000b      	movs	r3, r1
 800a8b4:	0010      	movs	r0, r2
 800a8b6:	0019      	movs	r1, r3
 800a8b8:	f7f7 fd3a 	bl	8002330 <__aeabi_d2iz>
 800a8bc:	0002      	movs	r2, r0
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	212c      	movs	r1, #44	; 0x2c
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	f7ff fdbb 	bl	800a444 <my_find_char_position>
 800a8ce:	0003      	movs	r3, r0
 800a8d0:	001a      	movs	r2, r3
 800a8d2:	197b      	adds	r3, r7, r5
 800a8d4:	3201      	adds	r2, #1
 800a8d6:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2204      	movs	r2, #4
 800a8dc:	212c      	movs	r1, #44	; 0x2c
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f7ff fdb0 	bl	800a444 <my_find_char_position>
 800a8e4:	0003      	movs	r3, r0
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	193b      	adds	r3, r7, r4
 800a8ea:	197a      	adds	r2, r7, r5
 800a8ec:	7812      	ldrb	r2, [r2, #0]
 800a8ee:	1a8a      	subs	r2, r1, r2
 800a8f0:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a8f2:	193b      	adds	r3, r7, r4
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	f000 fa2b 	bl	800ad54 <malloc>
 800a8fe:	0003      	movs	r3, r0
 800a900:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a902:	197b      	adds	r3, r7, r5
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	18d1      	adds	r1, r2, r3
 800a90a:	193b      	adds	r3, r7, r4
 800a90c:	781a      	ldrb	r2, [r3, #0]
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	0018      	movs	r0, r3
 800a912:	f001 fccc 	bl	800c2ae <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a916:	193b      	adds	r3, r7, r4
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	18d3      	adds	r3, r2, r3
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a922:	197b      	adds	r3, r7, r5
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	193b      	adds	r3, r7, r4
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	18d3      	adds	r3, r2, r3
 800a92c:	3301      	adds	r3, #1
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	18d2      	adds	r2, r2, r3
 800a932:	19bb      	adds	r3, r7, r6
 800a934:	7812      	ldrb	r2, [r2, #0]
 800a936:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a938:	19bb      	adds	r3, r7, r6
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	0011      	movs	r1, r2
 800a940:	0018      	movs	r0, r3
 800a942:	f7ff fecd 	bl	800a6e0 <nmea2decimal>
 800a946:	0002      	movs	r2, r0
 800a948:	000b      	movs	r3, r1
 800a94a:	613a      	str	r2, [r7, #16]
 800a94c:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	0018      	movs	r0, r3
 800a952:	f000 fa09 	bl	800ad68 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a956:	2200      	movs	r2, #0
 800a958:	4b17      	ldr	r3, [pc, #92]	; (800a9b8 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a95a:	6938      	ldr	r0, [r7, #16]
 800a95c:	6979      	ldr	r1, [r7, #20]
 800a95e:	f7f6 fe85 	bl	800166c <__aeabi_dmul>
 800a962:	0002      	movs	r2, r0
 800a964:	000b      	movs	r3, r1
 800a966:	0010      	movs	r0, r2
 800a968:	0019      	movs	r1, r3
 800a96a:	f008 f9bd 	bl	8012ce8 <round>
 800a96e:	2200      	movs	r2, #0
 800a970:	4b11      	ldr	r3, [pc, #68]	; (800a9b8 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a972:	f7f6 fa81 	bl	8000e78 <__aeabi_ddiv>
 800a976:	0002      	movs	r2, r0
 800a978:	000b      	movs	r3, r1
 800a97a:	613a      	str	r2, [r7, #16]
 800a97c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800a97e:	490f      	ldr	r1, [pc, #60]	; (800a9bc <get_my_nmea_gngll_coordinates+0x1fc>)
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	9200      	str	r2, [sp, #0]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	000a      	movs	r2, r1
 800a98c:	210c      	movs	r1, #12
 800a98e:	f001 fbab 	bl	800c0e8 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a992:	2200      	movs	r2, #0
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <get_my_nmea_gngll_coordinates+0x200>)
 800a996:	6938      	ldr	r0, [r7, #16]
 800a998:	6979      	ldr	r1, [r7, #20]
 800a99a:	f7f6 fe67 	bl	800166c <__aeabi_dmul>
 800a99e:	0002      	movs	r2, r0
 800a9a0:	000b      	movs	r3, r1
 800a9a2:	0010      	movs	r0, r2
 800a9a4:	0019      	movs	r1, r3
 800a9a6:	f7f7 fcc3 	bl	8002330 <__aeabi_d2iz>
 800a9aa:	0002      	movs	r2, r0
 800a9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ae:	601a      	str	r2, [r3, #0]
}
 800a9b0:	46c0      	nop			; (mov r8, r8)
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	b00f      	add	sp, #60	; 0x3c
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	412e8480 	.word	0x412e8480
 800a9bc:	08014698 	.word	0x08014698
 800a9c0:	416312d0 	.word	0x416312d0

0800a9c4 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a9c4:	b5b0      	push	{r4, r5, r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a9cc:	240e      	movs	r4, #14
 800a9ce:	193b      	adds	r3, r7, r4
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	212c      	movs	r1, #44	; 0x2c
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f7ff fd32 	bl	800a444 <my_find_char_position>
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	001a      	movs	r2, r3
 800a9e4:	2517      	movs	r5, #23
 800a9e6:	197b      	adds	r3, r7, r5
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a9ec:	2003      	movs	r0, #3
 800a9ee:	f000 f9b1 	bl	800ad54 <malloc>
 800a9f2:	0003      	movs	r3, r0
 800a9f4:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a9f6:	197b      	adds	r3, r7, r5
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	18d1      	adds	r1, r2, r3
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2202      	movs	r2, #2
 800aa02:	0018      	movs	r0, r3
 800aa04:	f001 fc53 	bl	800c2ae <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	3302      	adds	r3, #2
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800aa10:	193a      	adds	r2, r7, r4
 800aa12:	4907      	ldr	r1, [pc, #28]	; (800aa30 <my_nmea_get_gsv_tns+0x6c>)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	0018      	movs	r0, r3
 800aa18:	f001 fbba 	bl	800c190 <sscanf>
	free ( s ) ;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	0018      	movs	r0, r3
 800aa20:	f000 f9a2 	bl	800ad68 <free>
	return tns ;
 800aa24:	193b      	adds	r3, r7, r4
 800aa26:	881b      	ldrh	r3, [r3, #0]
}
 800aa28:	0018      	movs	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	b006      	add	sp, #24
 800aa2e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa30:	080146a0 	.word	0x080146a0

0800aa34 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800aa34:	b590      	push	{r4, r7, lr}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2209      	movs	r2, #9
 800aa42:	212c      	movs	r1, #44	; 0x2c
 800aa44:	0018      	movs	r0, r3
 800aa46:	f7ff fcfd 	bl	800a444 <my_find_char_position>
 800aa4a:	0003      	movs	r3, r0
 800aa4c:	001a      	movs	r2, r3
 800aa4e:	2417      	movs	r4, #23
 800aa50:	193b      	adds	r3, r7, r4
 800aa52:	3205      	adds	r2, #5
 800aa54:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aa56:	2003      	movs	r0, #3
 800aa58:	f000 f97c 	bl	800ad54 <malloc>
 800aa5c:	0003      	movs	r3, r0
 800aa5e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aa60:	193b      	adds	r3, r7, r4
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	18d1      	adds	r1, r2, r3
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f001 fc1e 	bl	800c2ae <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3302      	adds	r3, #2
 800aa76:	2200      	movs	r2, #0
 800aa78:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aa7a:	240e      	movs	r4, #14
 800aa7c:	193a      	adds	r2, r7, r4
 800aa7e:	4909      	ldr	r1, [pc, #36]	; (800aaa4 <my_nmea_get_rmc_date_yy+0x70>)
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	0018      	movs	r0, r3
 800aa84:	f001 fb84 	bl	800c190 <sscanf>
	free ( s ) ;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	f000 f96c 	bl	800ad68 <free>
	*yy = (uint8_t) temp ;
 800aa90:	193b      	adds	r3, r7, r4
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	701a      	strb	r2, [r3, #0]

}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	b007      	add	sp, #28
 800aaa0:	bd90      	pop	{r4, r7, pc}
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	080146a0 	.word	0x080146a0

0800aaa8 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2209      	movs	r2, #9
 800aab6:	212c      	movs	r1, #44	; 0x2c
 800aab8:	0018      	movs	r0, r3
 800aaba:	f7ff fcc3 	bl	800a444 <my_find_char_position>
 800aabe:	0003      	movs	r3, r0
 800aac0:	001a      	movs	r2, r3
 800aac2:	2417      	movs	r4, #23
 800aac4:	193b      	adds	r3, r7, r4
 800aac6:	3203      	adds	r2, #3
 800aac8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aaca:	2003      	movs	r0, #3
 800aacc:	f000 f942 	bl	800ad54 <malloc>
 800aad0:	0003      	movs	r3, r0
 800aad2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aad4:	193b      	adds	r3, r7, r4
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	18d1      	adds	r1, r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2202      	movs	r2, #2
 800aae0:	0018      	movs	r0, r3
 800aae2:	f001 fbe4 	bl	800c2ae <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3302      	adds	r3, #2
 800aaea:	2200      	movs	r2, #0
 800aaec:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aaee:	240e      	movs	r4, #14
 800aaf0:	193a      	adds	r2, r7, r4
 800aaf2:	4909      	ldr	r1, [pc, #36]	; (800ab18 <my_nmea_get_rmc_date_mm+0x70>)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f001 fb4a 	bl	800c190 <sscanf>
	free ( s ) ;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	0018      	movs	r0, r3
 800ab00:	f000 f932 	bl	800ad68 <free>
	*mm = (uint8_t) temp ;
 800ab04:	193b      	adds	r3, r7, r4
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	701a      	strb	r2, [r3, #0]

}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	46bd      	mov	sp, r7
 800ab12:	b007      	add	sp, #28
 800ab14:	bd90      	pop	{r4, r7, pc}
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	080146a0 	.word	0x080146a0

0800ab1c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2209      	movs	r2, #9
 800ab2a:	212c      	movs	r1, #44	; 0x2c
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f7ff fc89 	bl	800a444 <my_find_char_position>
 800ab32:	0003      	movs	r3, r0
 800ab34:	001a      	movs	r2, r3
 800ab36:	2417      	movs	r4, #23
 800ab38:	193b      	adds	r3, r7, r4
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab3e:	2003      	movs	r0, #3
 800ab40:	f000 f908 	bl	800ad54 <malloc>
 800ab44:	0003      	movs	r3, r0
 800ab46:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab48:	193b      	adds	r3, r7, r4
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	18d1      	adds	r1, r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2202      	movs	r2, #2
 800ab54:	0018      	movs	r0, r3
 800ab56:	f001 fbaa 	bl	800c2ae <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	3302      	adds	r3, #2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ab62:	240e      	movs	r4, #14
 800ab64:	193a      	adds	r2, r7, r4
 800ab66:	4909      	ldr	r1, [pc, #36]	; (800ab8c <my_nmea_get_rmc_date_dd+0x70>)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f001 fb10 	bl	800c190 <sscanf>
	free ( s ) ;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	0018      	movs	r0, r3
 800ab74:	f000 f8f8 	bl	800ad68 <free>
	*dd = (uint8_t) temp ;
 800ab78:	193b      	adds	r3, r7, r4
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	701a      	strb	r2, [r3, #0]

}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b007      	add	sp, #28
 800ab88:	bd90      	pop	{r4, r7, pc}
 800ab8a:	46c0      	nop			; (mov r8, r8)
 800ab8c:	080146a0 	.word	0x080146a0

0800ab90 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ab90:	b590      	push	{r4, r7, lr}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	212c      	movs	r1, #44	; 0x2c
 800aba0:	0018      	movs	r0, r3
 800aba2:	f7ff fc4f 	bl	800a444 <my_find_char_position>
 800aba6:	0003      	movs	r3, r0
 800aba8:	001a      	movs	r2, r3
 800abaa:	2417      	movs	r4, #23
 800abac:	193b      	adds	r3, r7, r4
 800abae:	3201      	adds	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800abb2:	2003      	movs	r0, #3
 800abb4:	f000 f8ce 	bl	800ad54 <malloc>
 800abb8:	0003      	movs	r3, r0
 800abba:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800abbc:	193b      	adds	r3, r7, r4
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	18d1      	adds	r1, r2, r3
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2202      	movs	r2, #2
 800abc8:	0018      	movs	r0, r3
 800abca:	f001 fb70 	bl	800c2ae <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	3302      	adds	r3, #2
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800abd6:	240e      	movs	r4, #14
 800abd8:	193a      	adds	r2, r7, r4
 800abda:	4909      	ldr	r1, [pc, #36]	; (800ac00 <my_nmea_get_rmc_utc_hh+0x70>)
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	0018      	movs	r0, r3
 800abe0:	f001 fad6 	bl	800c190 <sscanf>
	free ( s ) ;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	0018      	movs	r0, r3
 800abe8:	f000 f8be 	bl	800ad68 <free>
	*hh = (uint8_t) temp ;
 800abec:	193b      	adds	r3, r7, r4
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	701a      	strb	r2, [r3, #0]

}
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	46bd      	mov	sp, r7
 800abfa:	b007      	add	sp, #28
 800abfc:	bd90      	pop	{r4, r7, pc}
 800abfe:	46c0      	nop			; (mov r8, r8)
 800ac00:	080146a0 	.word	0x080146a0

0800ac04 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800ac04:	b590      	push	{r4, r7, lr}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	212c      	movs	r1, #44	; 0x2c
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7ff fc15 	bl	800a444 <my_find_char_position>
 800ac1a:	0003      	movs	r3, r0
 800ac1c:	001a      	movs	r2, r3
 800ac1e:	2417      	movs	r4, #23
 800ac20:	193b      	adds	r3, r7, r4
 800ac22:	3203      	adds	r2, #3
 800ac24:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac26:	2003      	movs	r0, #3
 800ac28:	f000 f894 	bl	800ad54 <malloc>
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ac30:	193b      	adds	r3, r7, r4
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	18d1      	adds	r1, r2, r3
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	f001 fb36 	bl	800c2ae <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	3302      	adds	r3, #2
 800ac46:	2200      	movs	r2, #0
 800ac48:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ac4a:	240e      	movs	r4, #14
 800ac4c:	193a      	adds	r2, r7, r4
 800ac4e:	4909      	ldr	r1, [pc, #36]	; (800ac74 <my_nmea_get_rmc_utc_mm+0x70>)
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	0018      	movs	r0, r3
 800ac54:	f001 fa9c 	bl	800c190 <sscanf>
	free ( s ) ;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 f884 	bl	800ad68 <free>
	*mm = (uint8_t) temp ;
 800ac60:	193b      	adds	r3, r7, r4
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	701a      	strb	r2, [r3, #0]

}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	b007      	add	sp, #28
 800ac70:	bd90      	pop	{r4, r7, pc}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	080146a0 	.word	0x080146a0

0800ac78 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	212c      	movs	r1, #44	; 0x2c
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f7ff fbdb 	bl	800a444 <my_find_char_position>
 800ac8e:	0003      	movs	r3, r0
 800ac90:	001a      	movs	r2, r3
 800ac92:	2417      	movs	r4, #23
 800ac94:	193b      	adds	r3, r7, r4
 800ac96:	3205      	adds	r2, #5
 800ac98:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac9a:	2003      	movs	r0, #3
 800ac9c:	f000 f85a 	bl	800ad54 <malloc>
 800aca0:	0003      	movs	r3, r0
 800aca2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aca4:	193b      	adds	r3, r7, r4
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	18d1      	adds	r1, r2, r3
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2202      	movs	r2, #2
 800acb0:	0018      	movs	r0, r3
 800acb2:	f001 fafc 	bl	800c2ae <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	3302      	adds	r3, #2
 800acba:	2200      	movs	r2, #0
 800acbc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800acbe:	240e      	movs	r4, #14
 800acc0:	193a      	adds	r2, r7, r4
 800acc2:	4909      	ldr	r1, [pc, #36]	; (800ace8 <my_nmea_get_rmc_utc_ss+0x70>)
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	0018      	movs	r0, r3
 800acc8:	f001 fa62 	bl	800c190 <sscanf>
	free ( s ) ;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	0018      	movs	r0, r3
 800acd0:	f000 f84a 	bl	800ad68 <free>
	*ss = (uint8_t) temp ;
 800acd4:	193b      	adds	r3, r7, r4
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	701a      	strb	r2, [r3, #0]

}
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	46bd      	mov	sp, r7
 800ace2:	b007      	add	sp, #28
 800ace4:	bd90      	pop	{r4, r7, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	080146a0 	.word	0x080146a0

0800acec <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800acec:	b590      	push	{r4, r7, lr}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	212c      	movs	r1, #44	; 0x2c
 800acfc:	0018      	movs	r0, r3
 800acfe:	f7ff fba1 	bl	800a444 <my_find_char_position>
 800ad02:	0003      	movs	r3, r0
 800ad04:	001a      	movs	r2, r3
 800ad06:	240f      	movs	r4, #15
 800ad08:	193b      	adds	r3, r7, r4
 800ad0a:	3208      	adds	r2, #8
 800ad0c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad0e:	2004      	movs	r0, #4
 800ad10:	f000 f820 	bl	800ad54 <malloc>
 800ad14:	0003      	movs	r3, r0
 800ad16:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad18:	193b      	adds	r3, r7, r4
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	18d1      	adds	r1, r2, r3
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2203      	movs	r2, #3
 800ad24:	0018      	movs	r0, r3
 800ad26:	f001 fac2 	bl	800c2ae <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	3303      	adds	r3, #3
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	4906      	ldr	r1, [pc, #24]	; (800ad50 <my_nmea_get_rmc_utc_sss+0x64>)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f001 fa29 	bl	800c190 <sscanf>
	free ( s ) ;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	0018      	movs	r0, r3
 800ad42:	f000 f811 	bl	800ad68 <free>
}
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	b005      	add	sp, #20
 800ad4c:	bd90      	pop	{r4, r7, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	080146a4 	.word	0x080146a4

0800ad54 <malloc>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <malloc+0x10>)
 800ad58:	0001      	movs	r1, r0
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	f000 f80e 	bl	800ad7c <_malloc_r>
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	200006d8 	.word	0x200006d8

0800ad68 <free>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <free+0x10>)
 800ad6c:	0001      	movs	r1, r0
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	f001 fbe4 	bl	800c53c <_free_r>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	200006d8 	.word	0x200006d8

0800ad7c <_malloc_r>:
 800ad7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7e:	000d      	movs	r5, r1
 800ad80:	b087      	sub	sp, #28
 800ad82:	350b      	adds	r5, #11
 800ad84:	9001      	str	r0, [sp, #4]
 800ad86:	2d16      	cmp	r5, #22
 800ad88:	d908      	bls.n	800ad9c <_malloc_r+0x20>
 800ad8a:	2207      	movs	r2, #7
 800ad8c:	4395      	bics	r5, r2
 800ad8e:	d506      	bpl.n	800ad9e <_malloc_r+0x22>
 800ad90:	230c      	movs	r3, #12
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	2000      	movs	r0, #0
 800ad98:	b007      	add	sp, #28
 800ad9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9c:	2510      	movs	r5, #16
 800ad9e:	42a9      	cmp	r1, r5
 800ada0:	d8f6      	bhi.n	800ad90 <_malloc_r+0x14>
 800ada2:	9801      	ldr	r0, [sp, #4]
 800ada4:	f000 f9fe 	bl	800b1a4 <__malloc_lock>
 800ada8:	23fc      	movs	r3, #252	; 0xfc
 800adaa:	4ebe      	ldr	r6, [pc, #760]	; (800b0a4 <_malloc_r+0x328>)
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	429d      	cmp	r5, r3
 800adb0:	d219      	bcs.n	800ade6 <_malloc_r+0x6a>
 800adb2:	002a      	movs	r2, r5
 800adb4:	3208      	adds	r2, #8
 800adb6:	18b2      	adds	r2, r6, r2
 800adb8:	0011      	movs	r1, r2
 800adba:	6854      	ldr	r4, [r2, #4]
 800adbc:	3908      	subs	r1, #8
 800adbe:	08eb      	lsrs	r3, r5, #3
 800adc0:	428c      	cmp	r4, r1
 800adc2:	d103      	bne.n	800adcc <_malloc_r+0x50>
 800adc4:	68d4      	ldr	r4, [r2, #12]
 800adc6:	3302      	adds	r3, #2
 800adc8:	42a2      	cmp	r2, r4
 800adca:	d022      	beq.n	800ae12 <_malloc_r+0x96>
 800adcc:	2203      	movs	r2, #3
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	68a1      	ldr	r1, [r4, #8]
 800add2:	4393      	bics	r3, r2
 800add4:	68e2      	ldr	r2, [r4, #12]
 800add6:	18e3      	adds	r3, r4, r3
 800add8:	60ca      	str	r2, [r1, #12]
 800adda:	6091      	str	r1, [r2, #8]
 800addc:	2201      	movs	r2, #1
 800adde:	6859      	ldr	r1, [r3, #4]
 800ade0:	430a      	orrs	r2, r1
 800ade2:	605a      	str	r2, [r3, #4]
 800ade4:	e02a      	b.n	800ae3c <_malloc_r+0xc0>
 800ade6:	233f      	movs	r3, #63	; 0x3f
 800ade8:	0a6a      	lsrs	r2, r5, #9
 800adea:	d003      	beq.n	800adf4 <_malloc_r+0x78>
 800adec:	2a04      	cmp	r2, #4
 800adee:	d82b      	bhi.n	800ae48 <_malloc_r+0xcc>
 800adf0:	09ab      	lsrs	r3, r5, #6
 800adf2:	3338      	adds	r3, #56	; 0x38
 800adf4:	2203      	movs	r2, #3
 800adf6:	4694      	mov	ip, r2
 800adf8:	00d9      	lsls	r1, r3, #3
 800adfa:	1989      	adds	r1, r1, r6
 800adfc:	68cc      	ldr	r4, [r1, #12]
 800adfe:	428c      	cmp	r4, r1
 800ae00:	d006      	beq.n	800ae10 <_malloc_r+0x94>
 800ae02:	4660      	mov	r0, ip
 800ae04:	6862      	ldr	r2, [r4, #4]
 800ae06:	4382      	bics	r2, r0
 800ae08:	1b57      	subs	r7, r2, r5
 800ae0a:	2f0f      	cmp	r7, #15
 800ae0c:	dd34      	ble.n	800ae78 <_malloc_r+0xfc>
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	3301      	adds	r3, #1
 800ae12:	6934      	ldr	r4, [r6, #16]
 800ae14:	49a4      	ldr	r1, [pc, #656]	; (800b0a8 <_malloc_r+0x32c>)
 800ae16:	428c      	cmp	r4, r1
 800ae18:	d055      	beq.n	800aec6 <_malloc_r+0x14a>
 800ae1a:	2003      	movs	r0, #3
 800ae1c:	6862      	ldr	r2, [r4, #4]
 800ae1e:	4382      	bics	r2, r0
 800ae20:	1b50      	subs	r0, r2, r5
 800ae22:	280f      	cmp	r0, #15
 800ae24:	dd36      	ble.n	800ae94 <_malloc_r+0x118>
 800ae26:	2301      	movs	r3, #1
 800ae28:	1967      	adds	r7, r4, r5
 800ae2a:	431d      	orrs	r5, r3
 800ae2c:	4303      	orrs	r3, r0
 800ae2e:	6065      	str	r5, [r4, #4]
 800ae30:	6177      	str	r7, [r6, #20]
 800ae32:	6137      	str	r7, [r6, #16]
 800ae34:	60f9      	str	r1, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	50a0      	str	r0, [r4, r2]
 800ae3c:	9801      	ldr	r0, [sp, #4]
 800ae3e:	f000 f9b9 	bl	800b1b4 <__malloc_unlock>
 800ae42:	0020      	movs	r0, r4
 800ae44:	3008      	adds	r0, #8
 800ae46:	e7a7      	b.n	800ad98 <_malloc_r+0x1c>
 800ae48:	2a14      	cmp	r2, #20
 800ae4a:	d802      	bhi.n	800ae52 <_malloc_r+0xd6>
 800ae4c:	0013      	movs	r3, r2
 800ae4e:	335b      	adds	r3, #91	; 0x5b
 800ae50:	e7d0      	b.n	800adf4 <_malloc_r+0x78>
 800ae52:	2a54      	cmp	r2, #84	; 0x54
 800ae54:	d802      	bhi.n	800ae5c <_malloc_r+0xe0>
 800ae56:	0b2b      	lsrs	r3, r5, #12
 800ae58:	336e      	adds	r3, #110	; 0x6e
 800ae5a:	e7cb      	b.n	800adf4 <_malloc_r+0x78>
 800ae5c:	23aa      	movs	r3, #170	; 0xaa
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d802      	bhi.n	800ae6a <_malloc_r+0xee>
 800ae64:	0beb      	lsrs	r3, r5, #15
 800ae66:	3377      	adds	r3, #119	; 0x77
 800ae68:	e7c4      	b.n	800adf4 <_malloc_r+0x78>
 800ae6a:	4990      	ldr	r1, [pc, #576]	; (800b0ac <_malloc_r+0x330>)
 800ae6c:	237e      	movs	r3, #126	; 0x7e
 800ae6e:	428a      	cmp	r2, r1
 800ae70:	d8c0      	bhi.n	800adf4 <_malloc_r+0x78>
 800ae72:	0cab      	lsrs	r3, r5, #18
 800ae74:	337c      	adds	r3, #124	; 0x7c
 800ae76:	e7bd      	b.n	800adf4 <_malloc_r+0x78>
 800ae78:	68e0      	ldr	r0, [r4, #12]
 800ae7a:	2f00      	cmp	r7, #0
 800ae7c:	db08      	blt.n	800ae90 <_malloc_r+0x114>
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	60d8      	str	r0, [r3, #12]
 800ae82:	6083      	str	r3, [r0, #8]
 800ae84:	2301      	movs	r3, #1
 800ae86:	18a2      	adds	r2, r4, r2
 800ae88:	6851      	ldr	r1, [r2, #4]
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	6053      	str	r3, [r2, #4]
 800ae8e:	e7d5      	b.n	800ae3c <_malloc_r+0xc0>
 800ae90:	0004      	movs	r4, r0
 800ae92:	e7b4      	b.n	800adfe <_malloc_r+0x82>
 800ae94:	6171      	str	r1, [r6, #20]
 800ae96:	6131      	str	r1, [r6, #16]
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	daf3      	bge.n	800ae84 <_malloc_r+0x108>
 800ae9c:	6871      	ldr	r1, [r6, #4]
 800ae9e:	468c      	mov	ip, r1
 800aea0:	2180      	movs	r1, #128	; 0x80
 800aea2:	0089      	lsls	r1, r1, #2
 800aea4:	428a      	cmp	r2, r1
 800aea6:	d300      	bcc.n	800aeaa <_malloc_r+0x12e>
 800aea8:	e08c      	b.n	800afc4 <_malloc_r+0x248>
 800aeaa:	08d1      	lsrs	r1, r2, #3
 800aeac:	0950      	lsrs	r0, r2, #5
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4082      	lsls	r2, r0
 800aeb2:	4660      	mov	r0, ip
 800aeb4:	4302      	orrs	r2, r0
 800aeb6:	6072      	str	r2, [r6, #4]
 800aeb8:	00ca      	lsls	r2, r1, #3
 800aeba:	1992      	adds	r2, r2, r6
 800aebc:	6891      	ldr	r1, [r2, #8]
 800aebe:	60e2      	str	r2, [r4, #12]
 800aec0:	60a1      	str	r1, [r4, #8]
 800aec2:	6094      	str	r4, [r2, #8]
 800aec4:	60cc      	str	r4, [r1, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	4876      	ldr	r0, [pc, #472]	; (800b0a4 <_malloc_r+0x328>)
 800aeca:	1099      	asrs	r1, r3, #2
 800aecc:	408a      	lsls	r2, r1
 800aece:	6841      	ldr	r1, [r0, #4]
 800aed0:	4291      	cmp	r1, r2
 800aed2:	d328      	bcc.n	800af26 <_malloc_r+0x1aa>
 800aed4:	420a      	tst	r2, r1
 800aed6:	d105      	bne.n	800aee4 <_malloc_r+0x168>
 800aed8:	2403      	movs	r4, #3
 800aeda:	43a3      	bics	r3, r4
 800aedc:	0052      	lsls	r2, r2, #1
 800aede:	3304      	adds	r3, #4
 800aee0:	420a      	tst	r2, r1
 800aee2:	d0fb      	beq.n	800aedc <_malloc_r+0x160>
 800aee4:	496f      	ldr	r1, [pc, #444]	; (800b0a4 <_malloc_r+0x328>)
 800aee6:	9104      	str	r1, [sp, #16]
 800aee8:	00d9      	lsls	r1, r3, #3
 800aeea:	1841      	adds	r1, r0, r1
 800aeec:	468c      	mov	ip, r1
 800aeee:	000f      	movs	r7, r1
 800aef0:	9302      	str	r3, [sp, #8]
 800aef2:	68fc      	ldr	r4, [r7, #12]
 800aef4:	42bc      	cmp	r4, r7
 800aef6:	d000      	beq.n	800aefa <_malloc_r+0x17e>
 800aef8:	e09b      	b.n	800b032 <_malloc_r+0x2b6>
 800aefa:	2403      	movs	r4, #3
 800aefc:	9902      	ldr	r1, [sp, #8]
 800aefe:	3708      	adds	r7, #8
 800af00:	3101      	adds	r1, #1
 800af02:	9102      	str	r1, [sp, #8]
 800af04:	4221      	tst	r1, r4
 800af06:	d1f4      	bne.n	800aef2 <_malloc_r+0x176>
 800af08:	2103      	movs	r1, #3
 800af0a:	420b      	tst	r3, r1
 800af0c:	d000      	beq.n	800af10 <_malloc_r+0x194>
 800af0e:	e0b7      	b.n	800b080 <_malloc_r+0x304>
 800af10:	6843      	ldr	r3, [r0, #4]
 800af12:	4393      	bics	r3, r2
 800af14:	6043      	str	r3, [r0, #4]
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	0052      	lsls	r2, r2, #1
 800af1a:	6859      	ldr	r1, [r3, #4]
 800af1c:	4291      	cmp	r1, r2
 800af1e:	d302      	bcc.n	800af26 <_malloc_r+0x1aa>
 800af20:	2a00      	cmp	r2, #0
 800af22:	d000      	beq.n	800af26 <_malloc_r+0x1aa>
 800af24:	e0bb      	b.n	800b09e <_malloc_r+0x322>
 800af26:	2203      	movs	r2, #3
 800af28:	6883      	ldr	r3, [r0, #8]
 800af2a:	9302      	str	r3, [sp, #8]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4393      	bics	r3, r2
 800af30:	9303      	str	r3, [sp, #12]
 800af32:	42ab      	cmp	r3, r5
 800af34:	d303      	bcc.n	800af3e <_malloc_r+0x1c2>
 800af36:	1b59      	subs	r1, r3, r5
 800af38:	290f      	cmp	r1, #15
 800af3a:	dd00      	ble.n	800af3e <_malloc_r+0x1c2>
 800af3c:	e123      	b.n	800b186 <_malloc_r+0x40a>
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	9a03      	ldr	r2, [sp, #12]
 800af42:	2008      	movs	r0, #8
 800af44:	189e      	adds	r6, r3, r2
 800af46:	4b5a      	ldr	r3, [pc, #360]	; (800b0b0 <_malloc_r+0x334>)
 800af48:	681f      	ldr	r7, [r3, #0]
 800af4a:	f001 fa71 	bl	800c430 <sysconf>
 800af4e:	4b59      	ldr	r3, [pc, #356]	; (800b0b4 <_malloc_r+0x338>)
 800af50:	3710      	adds	r7, #16
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	197f      	adds	r7, r7, r5
 800af56:	9004      	str	r0, [sp, #16]
 800af58:	3301      	adds	r3, #1
 800af5a:	d003      	beq.n	800af64 <_malloc_r+0x1e8>
 800af5c:	1e7b      	subs	r3, r7, #1
 800af5e:	181b      	adds	r3, r3, r0
 800af60:	4247      	negs	r7, r0
 800af62:	401f      	ands	r7, r3
 800af64:	0039      	movs	r1, r7
 800af66:	9801      	ldr	r0, [sp, #4]
 800af68:	f001 fa0e 	bl	800c388 <_sbrk_r>
 800af6c:	0004      	movs	r4, r0
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	d100      	bne.n	800af74 <_malloc_r+0x1f8>
 800af72:	e0de      	b.n	800b132 <_malloc_r+0x3b6>
 800af74:	4286      	cmp	r6, r0
 800af76:	d904      	bls.n	800af82 <_malloc_r+0x206>
 800af78:	4b4a      	ldr	r3, [pc, #296]	; (800b0a4 <_malloc_r+0x328>)
 800af7a:	9a02      	ldr	r2, [sp, #8]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d000      	beq.n	800af82 <_malloc_r+0x206>
 800af80:	e0d7      	b.n	800b132 <_malloc_r+0x3b6>
 800af82:	4a4d      	ldr	r2, [pc, #308]	; (800b0b8 <_malloc_r+0x33c>)
 800af84:	6813      	ldr	r3, [r2, #0]
 800af86:	18fb      	adds	r3, r7, r3
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	3a01      	subs	r2, #1
 800af8e:	42a6      	cmp	r6, r4
 800af90:	d000      	beq.n	800af94 <_malloc_r+0x218>
 800af92:	e097      	b.n	800b0c4 <_malloc_r+0x348>
 800af94:	4216      	tst	r6, r2
 800af96:	d000      	beq.n	800af9a <_malloc_r+0x21e>
 800af98:	e094      	b.n	800b0c4 <_malloc_r+0x348>
 800af9a:	4b42      	ldr	r3, [pc, #264]	; (800b0a4 <_malloc_r+0x328>)
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	19df      	adds	r7, r3, r7
 800afa2:	2301      	movs	r3, #1
 800afa4:	433b      	orrs	r3, r7
 800afa6:	6053      	str	r3, [r2, #4]
 800afa8:	4b43      	ldr	r3, [pc, #268]	; (800b0b8 <_malloc_r+0x33c>)
 800afaa:	4a44      	ldr	r2, [pc, #272]	; (800b0bc <_malloc_r+0x340>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6811      	ldr	r1, [r2, #0]
 800afb0:	428b      	cmp	r3, r1
 800afb2:	d900      	bls.n	800afb6 <_malloc_r+0x23a>
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	4a42      	ldr	r2, [pc, #264]	; (800b0c0 <_malloc_r+0x344>)
 800afb8:	6811      	ldr	r1, [r2, #0]
 800afba:	428b      	cmp	r3, r1
 800afbc:	d800      	bhi.n	800afc0 <_malloc_r+0x244>
 800afbe:	e0b8      	b.n	800b132 <_malloc_r+0x3b6>
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	e0b6      	b.n	800b132 <_malloc_r+0x3b6>
 800afc4:	0a50      	lsrs	r0, r2, #9
 800afc6:	2804      	cmp	r0, #4
 800afc8:	d811      	bhi.n	800afee <_malloc_r+0x272>
 800afca:	0991      	lsrs	r1, r2, #6
 800afcc:	3138      	adds	r1, #56	; 0x38
 800afce:	00cf      	lsls	r7, r1, #3
 800afd0:	19bf      	adds	r7, r7, r6
 800afd2:	68b8      	ldr	r0, [r7, #8]
 800afd4:	4287      	cmp	r7, r0
 800afd6:	d125      	bne.n	800b024 <_malloc_r+0x2a8>
 800afd8:	2201      	movs	r2, #1
 800afda:	1089      	asrs	r1, r1, #2
 800afdc:	408a      	lsls	r2, r1
 800afde:	4661      	mov	r1, ip
 800afe0:	430a      	orrs	r2, r1
 800afe2:	6072      	str	r2, [r6, #4]
 800afe4:	60e7      	str	r7, [r4, #12]
 800afe6:	60a0      	str	r0, [r4, #8]
 800afe8:	60bc      	str	r4, [r7, #8]
 800afea:	60c4      	str	r4, [r0, #12]
 800afec:	e76b      	b.n	800aec6 <_malloc_r+0x14a>
 800afee:	2814      	cmp	r0, #20
 800aff0:	d802      	bhi.n	800aff8 <_malloc_r+0x27c>
 800aff2:	0001      	movs	r1, r0
 800aff4:	315b      	adds	r1, #91	; 0x5b
 800aff6:	e7ea      	b.n	800afce <_malloc_r+0x252>
 800aff8:	2854      	cmp	r0, #84	; 0x54
 800affa:	d802      	bhi.n	800b002 <_malloc_r+0x286>
 800affc:	0b11      	lsrs	r1, r2, #12
 800affe:	316e      	adds	r1, #110	; 0x6e
 800b000:	e7e5      	b.n	800afce <_malloc_r+0x252>
 800b002:	21aa      	movs	r1, #170	; 0xaa
 800b004:	0049      	lsls	r1, r1, #1
 800b006:	4288      	cmp	r0, r1
 800b008:	d802      	bhi.n	800b010 <_malloc_r+0x294>
 800b00a:	0bd1      	lsrs	r1, r2, #15
 800b00c:	3177      	adds	r1, #119	; 0x77
 800b00e:	e7de      	b.n	800afce <_malloc_r+0x252>
 800b010:	4f26      	ldr	r7, [pc, #152]	; (800b0ac <_malloc_r+0x330>)
 800b012:	217e      	movs	r1, #126	; 0x7e
 800b014:	42b8      	cmp	r0, r7
 800b016:	d8da      	bhi.n	800afce <_malloc_r+0x252>
 800b018:	0c91      	lsrs	r1, r2, #18
 800b01a:	317c      	adds	r1, #124	; 0x7c
 800b01c:	e7d7      	b.n	800afce <_malloc_r+0x252>
 800b01e:	6880      	ldr	r0, [r0, #8]
 800b020:	4287      	cmp	r7, r0
 800b022:	d004      	beq.n	800b02e <_malloc_r+0x2b2>
 800b024:	2603      	movs	r6, #3
 800b026:	6841      	ldr	r1, [r0, #4]
 800b028:	43b1      	bics	r1, r6
 800b02a:	4291      	cmp	r1, r2
 800b02c:	d8f7      	bhi.n	800b01e <_malloc_r+0x2a2>
 800b02e:	68c7      	ldr	r7, [r0, #12]
 800b030:	e7d8      	b.n	800afe4 <_malloc_r+0x268>
 800b032:	2603      	movs	r6, #3
 800b034:	6861      	ldr	r1, [r4, #4]
 800b036:	43b1      	bics	r1, r6
 800b038:	9103      	str	r1, [sp, #12]
 800b03a:	68e6      	ldr	r6, [r4, #12]
 800b03c:	1b49      	subs	r1, r1, r5
 800b03e:	290f      	cmp	r1, #15
 800b040:	dd10      	ble.n	800b064 <_malloc_r+0x2e8>
 800b042:	2201      	movs	r2, #1
 800b044:	1963      	adds	r3, r4, r5
 800b046:	4315      	orrs	r5, r2
 800b048:	6065      	str	r5, [r4, #4]
 800b04a:	68a5      	ldr	r5, [r4, #8]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	60ee      	str	r6, [r5, #12]
 800b050:	60b5      	str	r5, [r6, #8]
 800b052:	6143      	str	r3, [r0, #20]
 800b054:	6103      	str	r3, [r0, #16]
 800b056:	4814      	ldr	r0, [pc, #80]	; (800b0a8 <_malloc_r+0x32c>)
 800b058:	605a      	str	r2, [r3, #4]
 800b05a:	60d8      	str	r0, [r3, #12]
 800b05c:	6098      	str	r0, [r3, #8]
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	50e1      	str	r1, [r4, r3]
 800b062:	e6eb      	b.n	800ae3c <_malloc_r+0xc0>
 800b064:	2900      	cmp	r1, #0
 800b066:	db09      	blt.n	800b07c <_malloc_r+0x300>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	18e1      	adds	r1, r4, r3
 800b06c:	2301      	movs	r3, #1
 800b06e:	684a      	ldr	r2, [r1, #4]
 800b070:	4313      	orrs	r3, r2
 800b072:	604b      	str	r3, [r1, #4]
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	60de      	str	r6, [r3, #12]
 800b078:	60b3      	str	r3, [r6, #8]
 800b07a:	e6df      	b.n	800ae3c <_malloc_r+0xc0>
 800b07c:	0034      	movs	r4, r6
 800b07e:	e739      	b.n	800aef4 <_malloc_r+0x178>
 800b080:	2108      	movs	r1, #8
 800b082:	4249      	negs	r1, r1
 800b084:	448c      	add	ip, r1
 800b086:	4661      	mov	r1, ip
 800b088:	6889      	ldr	r1, [r1, #8]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	4561      	cmp	r1, ip
 800b08e:	d100      	bne.n	800b092 <_malloc_r+0x316>
 800b090:	e73a      	b.n	800af08 <_malloc_r+0x18c>
 800b092:	e740      	b.n	800af16 <_malloc_r+0x19a>
 800b094:	3304      	adds	r3, #4
 800b096:	0052      	lsls	r2, r2, #1
 800b098:	420a      	tst	r2, r1
 800b09a:	d0fb      	beq.n	800b094 <_malloc_r+0x318>
 800b09c:	e724      	b.n	800aee8 <_malloc_r+0x16c>
 800b09e:	9b02      	ldr	r3, [sp, #8]
 800b0a0:	e7fa      	b.n	800b098 <_malloc_r+0x31c>
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	2000002c 	.word	0x2000002c
 800b0a8:	20000034 	.word	0x20000034
 800b0ac:	00000554 	.word	0x00000554
 800b0b0:	20000bd0 	.word	0x20000bd0
 800b0b4:	20000434 	.word	0x20000434
 800b0b8:	20000ba0 	.word	0x20000ba0
 800b0bc:	20000bc8 	.word	0x20000bc8
 800b0c0:	20000bcc 	.word	0x20000bcc
 800b0c4:	4934      	ldr	r1, [pc, #208]	; (800b198 <_malloc_r+0x41c>)
 800b0c6:	6808      	ldr	r0, [r1, #0]
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d140      	bne.n	800b14e <_malloc_r+0x3d2>
 800b0cc:	600c      	str	r4, [r1, #0]
 800b0ce:	2107      	movs	r1, #7
 800b0d0:	0026      	movs	r6, r4
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	400e      	ands	r6, r1
 800b0d6:	420c      	tst	r4, r1
 800b0d8:	d002      	beq.n	800b0e0 <_malloc_r+0x364>
 800b0da:	3308      	adds	r3, #8
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	18e4      	adds	r4, r4, r3
 800b0e0:	19e1      	adds	r1, r4, r7
 800b0e2:	9105      	str	r1, [sp, #20]
 800b0e4:	9f05      	ldr	r7, [sp, #20]
 800b0e6:	9904      	ldr	r1, [sp, #16]
 800b0e8:	4017      	ands	r7, r2
 800b0ea:	18cb      	adds	r3, r1, r3
 800b0ec:	1bdf      	subs	r7, r3, r7
 800b0ee:	4017      	ands	r7, r2
 800b0f0:	0039      	movs	r1, r7
 800b0f2:	9801      	ldr	r0, [sp, #4]
 800b0f4:	f001 f948 	bl	800c388 <_sbrk_r>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d107      	bne.n	800b10c <_malloc_r+0x390>
 800b0fc:	1e37      	subs	r7, r6, #0
 800b0fe:	9805      	ldr	r0, [sp, #20]
 800b100:	d004      	beq.n	800b10c <_malloc_r+0x390>
 800b102:	0030      	movs	r0, r6
 800b104:	2700      	movs	r7, #0
 800b106:	9b05      	ldr	r3, [sp, #20]
 800b108:	3808      	subs	r0, #8
 800b10a:	1818      	adds	r0, r3, r0
 800b10c:	4a23      	ldr	r2, [pc, #140]	; (800b19c <_malloc_r+0x420>)
 800b10e:	1b00      	subs	r0, r0, r4
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	19c0      	adds	r0, r0, r7
 800b114:	19db      	adds	r3, r3, r7
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	2201      	movs	r2, #1
 800b11a:	4b21      	ldr	r3, [pc, #132]	; (800b1a0 <_malloc_r+0x424>)
 800b11c:	9902      	ldr	r1, [sp, #8]
 800b11e:	4310      	orrs	r0, r2
 800b120:	609c      	str	r4, [r3, #8]
 800b122:	6060      	str	r0, [r4, #4]
 800b124:	4299      	cmp	r1, r3
 800b126:	d100      	bne.n	800b12a <_malloc_r+0x3ae>
 800b128:	e73e      	b.n	800afa8 <_malloc_r+0x22c>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	2b0f      	cmp	r3, #15
 800b12e:	d813      	bhi.n	800b158 <_malloc_r+0x3dc>
 800b130:	6062      	str	r2, [r4, #4]
 800b132:	2203      	movs	r2, #3
 800b134:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <_malloc_r+0x424>)
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	4393      	bics	r3, r2
 800b13c:	1b59      	subs	r1, r3, r5
 800b13e:	42ab      	cmp	r3, r5
 800b140:	d301      	bcc.n	800b146 <_malloc_r+0x3ca>
 800b142:	290f      	cmp	r1, #15
 800b144:	dc1f      	bgt.n	800b186 <_malloc_r+0x40a>
 800b146:	9801      	ldr	r0, [sp, #4]
 800b148:	f000 f834 	bl	800b1b4 <__malloc_unlock>
 800b14c:	e623      	b.n	800ad96 <_malloc_r+0x1a>
 800b14e:	4913      	ldr	r1, [pc, #76]	; (800b19c <_malloc_r+0x420>)
 800b150:	1ba6      	subs	r6, r4, r6
 800b152:	18f6      	adds	r6, r6, r3
 800b154:	600e      	str	r6, [r1, #0]
 800b156:	e7ba      	b.n	800b0ce <_malloc_r+0x352>
 800b158:	2107      	movs	r1, #7
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	3b0c      	subs	r3, #12
 800b15e:	438b      	bics	r3, r1
 800b160:	9902      	ldr	r1, [sp, #8]
 800b162:	6849      	ldr	r1, [r1, #4]
 800b164:	400a      	ands	r2, r1
 800b166:	9902      	ldr	r1, [sp, #8]
 800b168:	431a      	orrs	r2, r3
 800b16a:	604a      	str	r2, [r1, #4]
 800b16c:	18ca      	adds	r2, r1, r3
 800b16e:	2105      	movs	r1, #5
 800b170:	6051      	str	r1, [r2, #4]
 800b172:	6091      	str	r1, [r2, #8]
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d800      	bhi.n	800b17a <_malloc_r+0x3fe>
 800b178:	e716      	b.n	800afa8 <_malloc_r+0x22c>
 800b17a:	9902      	ldr	r1, [sp, #8]
 800b17c:	9801      	ldr	r0, [sp, #4]
 800b17e:	3108      	adds	r1, #8
 800b180:	f001 f9dc 	bl	800c53c <_free_r>
 800b184:	e710      	b.n	800afa8 <_malloc_r+0x22c>
 800b186:	2201      	movs	r2, #1
 800b188:	0013      	movs	r3, r2
 800b18a:	4805      	ldr	r0, [pc, #20]	; (800b1a0 <_malloc_r+0x424>)
 800b18c:	432b      	orrs	r3, r5
 800b18e:	6884      	ldr	r4, [r0, #8]
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	1963      	adds	r3, r4, r5
 800b194:	6083      	str	r3, [r0, #8]
 800b196:	e623      	b.n	800ade0 <_malloc_r+0x64>
 800b198:	20000434 	.word	0x20000434
 800b19c:	20000ba0 	.word	0x20000ba0
 800b1a0:	2000002c 	.word	0x2000002c

0800b1a4 <__malloc_lock>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4802      	ldr	r0, [pc, #8]	; (800b1b0 <__malloc_lock+0xc>)
 800b1a8:	f001 f940 	bl	800c42c <__retarget_lock_acquire_recursive>
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	20000d15 	.word	0x20000d15

0800b1b4 <__malloc_unlock>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4802      	ldr	r0, [pc, #8]	; (800b1c0 <__malloc_unlock+0xc>)
 800b1b8:	f001 f939 	bl	800c42e <__retarget_lock_release_recursive>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	20000d15 	.word	0x20000d15

0800b1c4 <sulp>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	0016      	movs	r6, r2
 800b1c8:	000d      	movs	r5, r1
 800b1ca:	f002 f90d 	bl	800d3e8 <__ulp>
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	d00d      	beq.n	800b1ee <sulp+0x2a>
 800b1d2:	236b      	movs	r3, #107	; 0x6b
 800b1d4:	006a      	lsls	r2, r5, #1
 800b1d6:	0d52      	lsrs	r2, r2, #21
 800b1d8:	1a9b      	subs	r3, r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dd07      	ble.n	800b1ee <sulp+0x2a>
 800b1de:	2400      	movs	r4, #0
 800b1e0:	4a03      	ldr	r2, [pc, #12]	; (800b1f0 <sulp+0x2c>)
 800b1e2:	051b      	lsls	r3, r3, #20
 800b1e4:	189d      	adds	r5, r3, r2
 800b1e6:	002b      	movs	r3, r5
 800b1e8:	0022      	movs	r2, r4
 800b1ea:	f7f6 fa3f 	bl	800166c <__aeabi_dmul>
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
 800b1f0:	3ff00000 	.word	0x3ff00000

0800b1f4 <_strtod_l>:
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	b0a1      	sub	sp, #132	; 0x84
 800b1f8:	9219      	str	r2, [sp, #100]	; 0x64
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2600      	movs	r6, #0
 800b1fe:	2700      	movs	r7, #0
 800b200:	9004      	str	r0, [sp, #16]
 800b202:	9107      	str	r1, [sp, #28]
 800b204:	921c      	str	r2, [sp, #112]	; 0x70
 800b206:	911b      	str	r1, [sp, #108]	; 0x6c
 800b208:	780a      	ldrb	r2, [r1, #0]
 800b20a:	2a2b      	cmp	r2, #43	; 0x2b
 800b20c:	d055      	beq.n	800b2ba <_strtod_l+0xc6>
 800b20e:	d841      	bhi.n	800b294 <_strtod_l+0xa0>
 800b210:	2a0d      	cmp	r2, #13
 800b212:	d83b      	bhi.n	800b28c <_strtod_l+0x98>
 800b214:	2a08      	cmp	r2, #8
 800b216:	d83b      	bhi.n	800b290 <_strtod_l+0x9c>
 800b218:	2a00      	cmp	r2, #0
 800b21a:	d044      	beq.n	800b2a6 <_strtod_l+0xb2>
 800b21c:	2200      	movs	r2, #0
 800b21e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b220:	2100      	movs	r1, #0
 800b222:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b224:	9109      	str	r1, [sp, #36]	; 0x24
 800b226:	782a      	ldrb	r2, [r5, #0]
 800b228:	2a30      	cmp	r2, #48	; 0x30
 800b22a:	d000      	beq.n	800b22e <_strtod_l+0x3a>
 800b22c:	e085      	b.n	800b33a <_strtod_l+0x146>
 800b22e:	786a      	ldrb	r2, [r5, #1]
 800b230:	3120      	adds	r1, #32
 800b232:	438a      	bics	r2, r1
 800b234:	2a58      	cmp	r2, #88	; 0x58
 800b236:	d000      	beq.n	800b23a <_strtod_l+0x46>
 800b238:	e075      	b.n	800b326 <_strtod_l+0x132>
 800b23a:	9302      	str	r3, [sp, #8]
 800b23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b23e:	4a97      	ldr	r2, [pc, #604]	; (800b49c <_strtod_l+0x2a8>)
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	ab1c      	add	r3, sp, #112	; 0x70
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	9804      	ldr	r0, [sp, #16]
 800b248:	ab1d      	add	r3, sp, #116	; 0x74
 800b24a:	a91b      	add	r1, sp, #108	; 0x6c
 800b24c:	f001 fa92 	bl	800c774 <__gethex>
 800b250:	230f      	movs	r3, #15
 800b252:	0002      	movs	r2, r0
 800b254:	401a      	ands	r2, r3
 800b256:	0004      	movs	r4, r0
 800b258:	9205      	str	r2, [sp, #20]
 800b25a:	4218      	tst	r0, r3
 800b25c:	d005      	beq.n	800b26a <_strtod_l+0x76>
 800b25e:	2a06      	cmp	r2, #6
 800b260:	d12d      	bne.n	800b2be <_strtod_l+0xca>
 800b262:	1c6b      	adds	r3, r5, #1
 800b264:	931b      	str	r3, [sp, #108]	; 0x6c
 800b266:	2300      	movs	r3, #0
 800b268:	930f      	str	r3, [sp, #60]	; 0x3c
 800b26a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <_strtod_l+0x82>
 800b270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b272:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01b      	beq.n	800b2b4 <_strtod_l+0xc0>
 800b27c:	2380      	movs	r3, #128	; 0x80
 800b27e:	0032      	movs	r2, r6
 800b280:	061b      	lsls	r3, r3, #24
 800b282:	18fb      	adds	r3, r7, r3
 800b284:	0010      	movs	r0, r2
 800b286:	0019      	movs	r1, r3
 800b288:	b021      	add	sp, #132	; 0x84
 800b28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b28c:	2a20      	cmp	r2, #32
 800b28e:	d1c5      	bne.n	800b21c <_strtod_l+0x28>
 800b290:	3101      	adds	r1, #1
 800b292:	e7b8      	b.n	800b206 <_strtod_l+0x12>
 800b294:	2a2d      	cmp	r2, #45	; 0x2d
 800b296:	d1c1      	bne.n	800b21c <_strtod_l+0x28>
 800b298:	3a2c      	subs	r2, #44	; 0x2c
 800b29a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b29c:	1c4a      	adds	r2, r1, #1
 800b29e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2a0:	784a      	ldrb	r2, [r1, #1]
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d1bc      	bne.n	800b220 <_strtod_l+0x2c>
 800b2a6:	9b07      	ldr	r3, [sp, #28]
 800b2a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1dd      	bne.n	800b270 <_strtod_l+0x7c>
 800b2b4:	0032      	movs	r2, r6
 800b2b6:	003b      	movs	r3, r7
 800b2b8:	e7e4      	b.n	800b284 <_strtod_l+0x90>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	e7ed      	b.n	800b29a <_strtod_l+0xa6>
 800b2be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	d007      	beq.n	800b2d4 <_strtod_l+0xe0>
 800b2c4:	2135      	movs	r1, #53	; 0x35
 800b2c6:	a81e      	add	r0, sp, #120	; 0x78
 800b2c8:	f002 f97f 	bl	800d5ca <__copybits>
 800b2cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2ce:	9804      	ldr	r0, [sp, #16]
 800b2d0:	f001 fd7c 	bl	800cdcc <_Bfree>
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2d8:	3801      	subs	r0, #1
 800b2da:	2804      	cmp	r0, #4
 800b2dc:	d806      	bhi.n	800b2ec <_strtod_l+0xf8>
 800b2de:	f7f4 ff19 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b2e2:	0312      	.short	0x0312
 800b2e4:	1e1c      	.short	0x1e1c
 800b2e6:	12          	.byte	0x12
 800b2e7:	00          	.byte	0x00
 800b2e8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b2ea:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b2ec:	05e4      	lsls	r4, r4, #23
 800b2ee:	d502      	bpl.n	800b2f6 <_strtod_l+0x102>
 800b2f0:	2380      	movs	r3, #128	; 0x80
 800b2f2:	061b      	lsls	r3, r3, #24
 800b2f4:	431f      	orrs	r7, r3
 800b2f6:	4b6a      	ldr	r3, [pc, #424]	; (800b4a0 <_strtod_l+0x2ac>)
 800b2f8:	423b      	tst	r3, r7
 800b2fa:	d1b6      	bne.n	800b26a <_strtod_l+0x76>
 800b2fc:	f001 f86a 	bl	800c3d4 <__errno>
 800b300:	2322      	movs	r3, #34	; 0x22
 800b302:	6003      	str	r3, [r0, #0]
 800b304:	e7b1      	b.n	800b26a <_strtod_l+0x76>
 800b306:	4967      	ldr	r1, [pc, #412]	; (800b4a4 <_strtod_l+0x2b0>)
 800b308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b30a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b30c:	400a      	ands	r2, r1
 800b30e:	4966      	ldr	r1, [pc, #408]	; (800b4a8 <_strtod_l+0x2b4>)
 800b310:	185b      	adds	r3, r3, r1
 800b312:	051b      	lsls	r3, r3, #20
 800b314:	431a      	orrs	r2, r3
 800b316:	0017      	movs	r7, r2
 800b318:	e7e8      	b.n	800b2ec <_strtod_l+0xf8>
 800b31a:	4f61      	ldr	r7, [pc, #388]	; (800b4a0 <_strtod_l+0x2ac>)
 800b31c:	e7e6      	b.n	800b2ec <_strtod_l+0xf8>
 800b31e:	2601      	movs	r6, #1
 800b320:	4f62      	ldr	r7, [pc, #392]	; (800b4ac <_strtod_l+0x2b8>)
 800b322:	4276      	negs	r6, r6
 800b324:	e7e2      	b.n	800b2ec <_strtod_l+0xf8>
 800b326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	2b30      	cmp	r3, #48	; 0x30
 800b330:	d0f9      	beq.n	800b326 <_strtod_l+0x132>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d099      	beq.n	800b26a <_strtod_l+0x76>
 800b336:	2301      	movs	r3, #1
 800b338:	9309      	str	r3, [sp, #36]	; 0x24
 800b33a:	2500      	movs	r5, #0
 800b33c:	220a      	movs	r2, #10
 800b33e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b340:	950d      	str	r5, [sp, #52]	; 0x34
 800b342:	9310      	str	r3, [sp, #64]	; 0x40
 800b344:	9508      	str	r5, [sp, #32]
 800b346:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b348:	7804      	ldrb	r4, [r0, #0]
 800b34a:	0023      	movs	r3, r4
 800b34c:	3b30      	subs	r3, #48	; 0x30
 800b34e:	b2d9      	uxtb	r1, r3
 800b350:	2909      	cmp	r1, #9
 800b352:	d927      	bls.n	800b3a4 <_strtod_l+0x1b0>
 800b354:	2201      	movs	r2, #1
 800b356:	4956      	ldr	r1, [pc, #344]	; (800b4b0 <_strtod_l+0x2bc>)
 800b358:	f000 ff98 	bl	800c28c <strncmp>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d031      	beq.n	800b3c4 <_strtod_l+0x1d0>
 800b360:	2000      	movs	r0, #0
 800b362:	0023      	movs	r3, r4
 800b364:	4684      	mov	ip, r0
 800b366:	9a08      	ldr	r2, [sp, #32]
 800b368:	900c      	str	r0, [sp, #48]	; 0x30
 800b36a:	9205      	str	r2, [sp, #20]
 800b36c:	2220      	movs	r2, #32
 800b36e:	0019      	movs	r1, r3
 800b370:	4391      	bics	r1, r2
 800b372:	000a      	movs	r2, r1
 800b374:	2100      	movs	r1, #0
 800b376:	9106      	str	r1, [sp, #24]
 800b378:	2a45      	cmp	r2, #69	; 0x45
 800b37a:	d000      	beq.n	800b37e <_strtod_l+0x18a>
 800b37c:	e0c2      	b.n	800b504 <_strtod_l+0x310>
 800b37e:	9b05      	ldr	r3, [sp, #20]
 800b380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b382:	4303      	orrs	r3, r0
 800b384:	4313      	orrs	r3, r2
 800b386:	428b      	cmp	r3, r1
 800b388:	d08d      	beq.n	800b2a6 <_strtod_l+0xb2>
 800b38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b38c:	9307      	str	r3, [sp, #28]
 800b38e:	3301      	adds	r3, #1
 800b390:	931b      	str	r3, [sp, #108]	; 0x6c
 800b392:	9b07      	ldr	r3, [sp, #28]
 800b394:	785b      	ldrb	r3, [r3, #1]
 800b396:	2b2b      	cmp	r3, #43	; 0x2b
 800b398:	d071      	beq.n	800b47e <_strtod_l+0x28a>
 800b39a:	000c      	movs	r4, r1
 800b39c:	2b2d      	cmp	r3, #45	; 0x2d
 800b39e:	d174      	bne.n	800b48a <_strtod_l+0x296>
 800b3a0:	2401      	movs	r4, #1
 800b3a2:	e06d      	b.n	800b480 <_strtod_l+0x28c>
 800b3a4:	9908      	ldr	r1, [sp, #32]
 800b3a6:	2908      	cmp	r1, #8
 800b3a8:	dc09      	bgt.n	800b3be <_strtod_l+0x1ca>
 800b3aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3ac:	4351      	muls	r1, r2
 800b3ae:	185b      	adds	r3, r3, r1
 800b3b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	901b      	str	r0, [sp, #108]	; 0x6c
 800b3bc:	e7c3      	b.n	800b346 <_strtod_l+0x152>
 800b3be:	4355      	muls	r5, r2
 800b3c0:	195d      	adds	r5, r3, r5
 800b3c2:	e7f6      	b.n	800b3b2 <_strtod_l+0x1be>
 800b3c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3ca:	9a08      	ldr	r2, [sp, #32]
 800b3cc:	785b      	ldrb	r3, [r3, #1]
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	d03a      	beq.n	800b448 <_strtod_l+0x254>
 800b3d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b3d4:	9205      	str	r2, [sp, #20]
 800b3d6:	001a      	movs	r2, r3
 800b3d8:	3a30      	subs	r2, #48	; 0x30
 800b3da:	2a09      	cmp	r2, #9
 800b3dc:	d912      	bls.n	800b404 <_strtod_l+0x210>
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4694      	mov	ip, r2
 800b3e2:	e7c3      	b.n	800b36c <_strtod_l+0x178>
 800b3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	2b30      	cmp	r3, #48	; 0x30
 800b3f0:	d0f8      	beq.n	800b3e4 <_strtod_l+0x1f0>
 800b3f2:	001a      	movs	r2, r3
 800b3f4:	3a31      	subs	r2, #49	; 0x31
 800b3f6:	2a08      	cmp	r2, #8
 800b3f8:	d83c      	bhi.n	800b474 <_strtod_l+0x280>
 800b3fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b400:	9005      	str	r0, [sp, #20]
 800b402:	9210      	str	r2, [sp, #64]	; 0x40
 800b404:	001a      	movs	r2, r3
 800b406:	1c41      	adds	r1, r0, #1
 800b408:	3a30      	subs	r2, #48	; 0x30
 800b40a:	2b30      	cmp	r3, #48	; 0x30
 800b40c:	d016      	beq.n	800b43c <_strtod_l+0x248>
 800b40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b410:	185b      	adds	r3, r3, r1
 800b412:	930c      	str	r3, [sp, #48]	; 0x30
 800b414:	9b05      	ldr	r3, [sp, #20]
 800b416:	210a      	movs	r1, #10
 800b418:	469c      	mov	ip, r3
 800b41a:	4484      	add	ip, r0
 800b41c:	4563      	cmp	r3, ip
 800b41e:	d115      	bne.n	800b44c <_strtod_l+0x258>
 800b420:	9905      	ldr	r1, [sp, #20]
 800b422:	9b05      	ldr	r3, [sp, #20]
 800b424:	3101      	adds	r1, #1
 800b426:	1809      	adds	r1, r1, r0
 800b428:	181b      	adds	r3, r3, r0
 800b42a:	9105      	str	r1, [sp, #20]
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	dc19      	bgt.n	800b464 <_strtod_l+0x270>
 800b430:	230a      	movs	r3, #10
 800b432:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b434:	434b      	muls	r3, r1
 800b436:	2100      	movs	r1, #0
 800b438:	18d3      	adds	r3, r2, r3
 800b43a:	930d      	str	r3, [sp, #52]	; 0x34
 800b43c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b43e:	0008      	movs	r0, r1
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	921b      	str	r2, [sp, #108]	; 0x6c
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	e7c6      	b.n	800b3d6 <_strtod_l+0x1e2>
 800b448:	9808      	ldr	r0, [sp, #32]
 800b44a:	e7d0      	b.n	800b3ee <_strtod_l+0x1fa>
 800b44c:	1c5c      	adds	r4, r3, #1
 800b44e:	2b08      	cmp	r3, #8
 800b450:	dc04      	bgt.n	800b45c <_strtod_l+0x268>
 800b452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b454:	434b      	muls	r3, r1
 800b456:	930d      	str	r3, [sp, #52]	; 0x34
 800b458:	0023      	movs	r3, r4
 800b45a:	e7df      	b.n	800b41c <_strtod_l+0x228>
 800b45c:	2c10      	cmp	r4, #16
 800b45e:	dcfb      	bgt.n	800b458 <_strtod_l+0x264>
 800b460:	434d      	muls	r5, r1
 800b462:	e7f9      	b.n	800b458 <_strtod_l+0x264>
 800b464:	9b05      	ldr	r3, [sp, #20]
 800b466:	2100      	movs	r1, #0
 800b468:	2b10      	cmp	r3, #16
 800b46a:	dce7      	bgt.n	800b43c <_strtod_l+0x248>
 800b46c:	230a      	movs	r3, #10
 800b46e:	435d      	muls	r5, r3
 800b470:	1955      	adds	r5, r2, r5
 800b472:	e7e3      	b.n	800b43c <_strtod_l+0x248>
 800b474:	2200      	movs	r2, #0
 800b476:	920c      	str	r2, [sp, #48]	; 0x30
 800b478:	9205      	str	r2, [sp, #20]
 800b47a:	3201      	adds	r2, #1
 800b47c:	e7b0      	b.n	800b3e0 <_strtod_l+0x1ec>
 800b47e:	2400      	movs	r4, #0
 800b480:	9b07      	ldr	r3, [sp, #28]
 800b482:	3302      	adds	r3, #2
 800b484:	931b      	str	r3, [sp, #108]	; 0x6c
 800b486:	9b07      	ldr	r3, [sp, #28]
 800b488:	789b      	ldrb	r3, [r3, #2]
 800b48a:	001a      	movs	r2, r3
 800b48c:	3a30      	subs	r2, #48	; 0x30
 800b48e:	2a09      	cmp	r2, #9
 800b490:	d914      	bls.n	800b4bc <_strtod_l+0x2c8>
 800b492:	9a07      	ldr	r2, [sp, #28]
 800b494:	921b      	str	r2, [sp, #108]	; 0x6c
 800b496:	2200      	movs	r2, #0
 800b498:	e033      	b.n	800b502 <_strtod_l+0x30e>
 800b49a:	46c0      	nop			; (mov r8, r8)
 800b49c:	08014784 	.word	0x08014784
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	ffefffff 	.word	0xffefffff
 800b4a8:	00000433 	.word	0x00000433
 800b4ac:	7fffffff 	.word	0x7fffffff
 800b4b0:	08014780 	.word	0x08014780
 800b4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4ba:	785b      	ldrb	r3, [r3, #1]
 800b4bc:	2b30      	cmp	r3, #48	; 0x30
 800b4be:	d0f9      	beq.n	800b4b4 <_strtod_l+0x2c0>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	9206      	str	r2, [sp, #24]
 800b4c4:	001a      	movs	r2, r3
 800b4c6:	3a31      	subs	r2, #49	; 0x31
 800b4c8:	2a08      	cmp	r2, #8
 800b4ca:	d81b      	bhi.n	800b504 <_strtod_l+0x310>
 800b4cc:	3b30      	subs	r3, #48	; 0x30
 800b4ce:	930e      	str	r3, [sp, #56]	; 0x38
 800b4d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4d2:	9306      	str	r3, [sp, #24]
 800b4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4d6:	1c59      	adds	r1, r3, #1
 800b4d8:	911b      	str	r1, [sp, #108]	; 0x6c
 800b4da:	785b      	ldrb	r3, [r3, #1]
 800b4dc:	001a      	movs	r2, r3
 800b4de:	3a30      	subs	r2, #48	; 0x30
 800b4e0:	2a09      	cmp	r2, #9
 800b4e2:	d93a      	bls.n	800b55a <_strtod_l+0x366>
 800b4e4:	9a06      	ldr	r2, [sp, #24]
 800b4e6:	1a8a      	subs	r2, r1, r2
 800b4e8:	49b2      	ldr	r1, [pc, #712]	; (800b7b4 <_strtod_l+0x5c0>)
 800b4ea:	9106      	str	r1, [sp, #24]
 800b4ec:	2a08      	cmp	r2, #8
 800b4ee:	dc04      	bgt.n	800b4fa <_strtod_l+0x306>
 800b4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4f2:	9206      	str	r2, [sp, #24]
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	dd00      	ble.n	800b4fa <_strtod_l+0x306>
 800b4f8:	9106      	str	r1, [sp, #24]
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	d002      	beq.n	800b504 <_strtod_l+0x310>
 800b4fe:	9a06      	ldr	r2, [sp, #24]
 800b500:	4252      	negs	r2, r2
 800b502:	9206      	str	r2, [sp, #24]
 800b504:	9a05      	ldr	r2, [sp, #20]
 800b506:	2a00      	cmp	r2, #0
 800b508:	d14d      	bne.n	800b5a6 <_strtod_l+0x3b2>
 800b50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b50c:	4310      	orrs	r0, r2
 800b50e:	d000      	beq.n	800b512 <_strtod_l+0x31e>
 800b510:	e6ab      	b.n	800b26a <_strtod_l+0x76>
 800b512:	4662      	mov	r2, ip
 800b514:	2a00      	cmp	r2, #0
 800b516:	d000      	beq.n	800b51a <_strtod_l+0x326>
 800b518:	e6c5      	b.n	800b2a6 <_strtod_l+0xb2>
 800b51a:	2b69      	cmp	r3, #105	; 0x69
 800b51c:	d027      	beq.n	800b56e <_strtod_l+0x37a>
 800b51e:	dc23      	bgt.n	800b568 <_strtod_l+0x374>
 800b520:	2b49      	cmp	r3, #73	; 0x49
 800b522:	d024      	beq.n	800b56e <_strtod_l+0x37a>
 800b524:	2b4e      	cmp	r3, #78	; 0x4e
 800b526:	d000      	beq.n	800b52a <_strtod_l+0x336>
 800b528:	e6bd      	b.n	800b2a6 <_strtod_l+0xb2>
 800b52a:	49a3      	ldr	r1, [pc, #652]	; (800b7b8 <_strtod_l+0x5c4>)
 800b52c:	a81b      	add	r0, sp, #108	; 0x6c
 800b52e:	f001 fb57 	bl	800cbe0 <__match>
 800b532:	2800      	cmp	r0, #0
 800b534:	d100      	bne.n	800b538 <_strtod_l+0x344>
 800b536:	e6b6      	b.n	800b2a6 <_strtod_l+0xb2>
 800b538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b28      	cmp	r3, #40	; 0x28
 800b53e:	d12c      	bne.n	800b59a <_strtod_l+0x3a6>
 800b540:	499e      	ldr	r1, [pc, #632]	; (800b7bc <_strtod_l+0x5c8>)
 800b542:	aa1e      	add	r2, sp, #120	; 0x78
 800b544:	a81b      	add	r0, sp, #108	; 0x6c
 800b546:	f001 fb5f 	bl	800cc08 <__hexnan>
 800b54a:	2805      	cmp	r0, #5
 800b54c:	d125      	bne.n	800b59a <_strtod_l+0x3a6>
 800b54e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b550:	4a9b      	ldr	r2, [pc, #620]	; (800b7c0 <_strtod_l+0x5cc>)
 800b552:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b554:	431a      	orrs	r2, r3
 800b556:	0017      	movs	r7, r2
 800b558:	e687      	b.n	800b26a <_strtod_l+0x76>
 800b55a:	220a      	movs	r2, #10
 800b55c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b55e:	434a      	muls	r2, r1
 800b560:	18d2      	adds	r2, r2, r3
 800b562:	3a30      	subs	r2, #48	; 0x30
 800b564:	920e      	str	r2, [sp, #56]	; 0x38
 800b566:	e7b5      	b.n	800b4d4 <_strtod_l+0x2e0>
 800b568:	2b6e      	cmp	r3, #110	; 0x6e
 800b56a:	d0de      	beq.n	800b52a <_strtod_l+0x336>
 800b56c:	e69b      	b.n	800b2a6 <_strtod_l+0xb2>
 800b56e:	4995      	ldr	r1, [pc, #596]	; (800b7c4 <_strtod_l+0x5d0>)
 800b570:	a81b      	add	r0, sp, #108	; 0x6c
 800b572:	f001 fb35 	bl	800cbe0 <__match>
 800b576:	2800      	cmp	r0, #0
 800b578:	d100      	bne.n	800b57c <_strtod_l+0x388>
 800b57a:	e694      	b.n	800b2a6 <_strtod_l+0xb2>
 800b57c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b57e:	4992      	ldr	r1, [pc, #584]	; (800b7c8 <_strtod_l+0x5d4>)
 800b580:	3b01      	subs	r3, #1
 800b582:	a81b      	add	r0, sp, #108	; 0x6c
 800b584:	931b      	str	r3, [sp, #108]	; 0x6c
 800b586:	f001 fb2b 	bl	800cbe0 <__match>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d102      	bne.n	800b594 <_strtod_l+0x3a0>
 800b58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b590:	3301      	adds	r3, #1
 800b592:	931b      	str	r3, [sp, #108]	; 0x6c
 800b594:	2600      	movs	r6, #0
 800b596:	4f8a      	ldr	r7, [pc, #552]	; (800b7c0 <_strtod_l+0x5cc>)
 800b598:	e667      	b.n	800b26a <_strtod_l+0x76>
 800b59a:	488c      	ldr	r0, [pc, #560]	; (800b7cc <_strtod_l+0x5d8>)
 800b59c:	f000 ff5c 	bl	800c458 <nan>
 800b5a0:	0006      	movs	r6, r0
 800b5a2:	000f      	movs	r7, r1
 800b5a4:	e661      	b.n	800b26a <_strtod_l+0x76>
 800b5a6:	9b06      	ldr	r3, [sp, #24]
 800b5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5aa:	1a9b      	subs	r3, r3, r2
 800b5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ae:	9b08      	ldr	r3, [sp, #32]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <_strtod_l+0x3c4>
 800b5b4:	9b05      	ldr	r3, [sp, #20]
 800b5b6:	9308      	str	r3, [sp, #32]
 800b5b8:	9c05      	ldr	r4, [sp, #20]
 800b5ba:	2c10      	cmp	r4, #16
 800b5bc:	dd00      	ble.n	800b5c0 <_strtod_l+0x3cc>
 800b5be:	2410      	movs	r4, #16
 800b5c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5c2:	f7f6 ff1b 	bl	80023fc <__aeabi_ui2d>
 800b5c6:	9b05      	ldr	r3, [sp, #20]
 800b5c8:	0006      	movs	r6, r0
 800b5ca:	000f      	movs	r7, r1
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	dd15      	ble.n	800b5fc <_strtod_l+0x408>
 800b5d0:	0022      	movs	r2, r4
 800b5d2:	4b7f      	ldr	r3, [pc, #508]	; (800b7d0 <_strtod_l+0x5dc>)
 800b5d4:	3a09      	subs	r2, #9
 800b5d6:	00d2      	lsls	r2, r2, #3
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f7f6 f845 	bl	800166c <__aeabi_dmul>
 800b5e2:	0006      	movs	r6, r0
 800b5e4:	0028      	movs	r0, r5
 800b5e6:	000f      	movs	r7, r1
 800b5e8:	f7f6 ff08 	bl	80023fc <__aeabi_ui2d>
 800b5ec:	0002      	movs	r2, r0
 800b5ee:	000b      	movs	r3, r1
 800b5f0:	0030      	movs	r0, r6
 800b5f2:	0039      	movs	r1, r7
 800b5f4:	f7f5 f8e0 	bl	80007b8 <__aeabi_dadd>
 800b5f8:	0006      	movs	r6, r0
 800b5fa:	000f      	movs	r7, r1
 800b5fc:	9b05      	ldr	r3, [sp, #20]
 800b5fe:	2b0f      	cmp	r3, #15
 800b600:	dc39      	bgt.n	800b676 <_strtod_l+0x482>
 800b602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d100      	bne.n	800b60a <_strtod_l+0x416>
 800b608:	e62f      	b.n	800b26a <_strtod_l+0x76>
 800b60a:	dd24      	ble.n	800b656 <_strtod_l+0x462>
 800b60c:	2b16      	cmp	r3, #22
 800b60e:	dc09      	bgt.n	800b624 <_strtod_l+0x430>
 800b610:	496f      	ldr	r1, [pc, #444]	; (800b7d0 <_strtod_l+0x5dc>)
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	18c9      	adds	r1, r1, r3
 800b616:	0032      	movs	r2, r6
 800b618:	6808      	ldr	r0, [r1, #0]
 800b61a:	6849      	ldr	r1, [r1, #4]
 800b61c:	003b      	movs	r3, r7
 800b61e:	f7f6 f825 	bl	800166c <__aeabi_dmul>
 800b622:	e7bd      	b.n	800b5a0 <_strtod_l+0x3ac>
 800b624:	2325      	movs	r3, #37	; 0x25
 800b626:	9a05      	ldr	r2, [sp, #20]
 800b628:	1a9b      	subs	r3, r3, r2
 800b62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62c:	4293      	cmp	r3, r2
 800b62e:	db22      	blt.n	800b676 <_strtod_l+0x482>
 800b630:	240f      	movs	r4, #15
 800b632:	9b05      	ldr	r3, [sp, #20]
 800b634:	4d66      	ldr	r5, [pc, #408]	; (800b7d0 <_strtod_l+0x5dc>)
 800b636:	1ae4      	subs	r4, r4, r3
 800b638:	00e1      	lsls	r1, r4, #3
 800b63a:	1869      	adds	r1, r5, r1
 800b63c:	0032      	movs	r2, r6
 800b63e:	6808      	ldr	r0, [r1, #0]
 800b640:	6849      	ldr	r1, [r1, #4]
 800b642:	003b      	movs	r3, r7
 800b644:	f7f6 f812 	bl	800166c <__aeabi_dmul>
 800b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64a:	1b1c      	subs	r4, r3, r4
 800b64c:	00e4      	lsls	r4, r4, #3
 800b64e:	192d      	adds	r5, r5, r4
 800b650:	682a      	ldr	r2, [r5, #0]
 800b652:	686b      	ldr	r3, [r5, #4]
 800b654:	e7e3      	b.n	800b61e <_strtod_l+0x42a>
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	3316      	adds	r3, #22
 800b65a:	db0c      	blt.n	800b676 <_strtod_l+0x482>
 800b65c:	9906      	ldr	r1, [sp, #24]
 800b65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b660:	4b5b      	ldr	r3, [pc, #364]	; (800b7d0 <_strtod_l+0x5dc>)
 800b662:	1a52      	subs	r2, r2, r1
 800b664:	00d2      	lsls	r2, r2, #3
 800b666:	189b      	adds	r3, r3, r2
 800b668:	0030      	movs	r0, r6
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	0039      	movs	r1, r7
 800b670:	f7f5 fc02 	bl	8000e78 <__aeabi_ddiv>
 800b674:	e794      	b.n	800b5a0 <_strtod_l+0x3ac>
 800b676:	9b05      	ldr	r3, [sp, #20]
 800b678:	1b1c      	subs	r4, r3, r4
 800b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67c:	18e4      	adds	r4, r4, r3
 800b67e:	2c00      	cmp	r4, #0
 800b680:	dd72      	ble.n	800b768 <_strtod_l+0x574>
 800b682:	220f      	movs	r2, #15
 800b684:	0023      	movs	r3, r4
 800b686:	4013      	ands	r3, r2
 800b688:	4214      	tst	r4, r2
 800b68a:	d00a      	beq.n	800b6a2 <_strtod_l+0x4ae>
 800b68c:	4950      	ldr	r1, [pc, #320]	; (800b7d0 <_strtod_l+0x5dc>)
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	18c9      	adds	r1, r1, r3
 800b692:	0032      	movs	r2, r6
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	6849      	ldr	r1, [r1, #4]
 800b698:	003b      	movs	r3, r7
 800b69a:	f7f5 ffe7 	bl	800166c <__aeabi_dmul>
 800b69e:	0006      	movs	r6, r0
 800b6a0:	000f      	movs	r7, r1
 800b6a2:	230f      	movs	r3, #15
 800b6a4:	439c      	bics	r4, r3
 800b6a6:	d04a      	beq.n	800b73e <_strtod_l+0x54a>
 800b6a8:	3326      	adds	r3, #38	; 0x26
 800b6aa:	33ff      	adds	r3, #255	; 0xff
 800b6ac:	429c      	cmp	r4, r3
 800b6ae:	dd22      	ble.n	800b6f6 <_strtod_l+0x502>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	9306      	str	r3, [sp, #24]
 800b6b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	2322      	movs	r3, #34	; 0x22
 800b6bc:	2600      	movs	r6, #0
 800b6be:	9a04      	ldr	r2, [sp, #16]
 800b6c0:	4f3f      	ldr	r7, [pc, #252]	; (800b7c0 <_strtod_l+0x5cc>)
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c6:	42b3      	cmp	r3, r6
 800b6c8:	d100      	bne.n	800b6cc <_strtod_l+0x4d8>
 800b6ca:	e5ce      	b.n	800b26a <_strtod_l+0x76>
 800b6cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6ce:	9804      	ldr	r0, [sp, #16]
 800b6d0:	f001 fb7c 	bl	800cdcc <_Bfree>
 800b6d4:	9908      	ldr	r1, [sp, #32]
 800b6d6:	9804      	ldr	r0, [sp, #16]
 800b6d8:	f001 fb78 	bl	800cdcc <_Bfree>
 800b6dc:	9906      	ldr	r1, [sp, #24]
 800b6de:	9804      	ldr	r0, [sp, #16]
 800b6e0:	f001 fb74 	bl	800cdcc <_Bfree>
 800b6e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6e6:	9804      	ldr	r0, [sp, #16]
 800b6e8:	f001 fb70 	bl	800cdcc <_Bfree>
 800b6ec:	9905      	ldr	r1, [sp, #20]
 800b6ee:	9804      	ldr	r0, [sp, #16]
 800b6f0:	f001 fb6c 	bl	800cdcc <_Bfree>
 800b6f4:	e5b9      	b.n	800b26a <_strtod_l+0x76>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	0030      	movs	r0, r6
 800b6fa:	0039      	movs	r1, r7
 800b6fc:	4d35      	ldr	r5, [pc, #212]	; (800b7d4 <_strtod_l+0x5e0>)
 800b6fe:	1124      	asrs	r4, r4, #4
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	2c01      	cmp	r4, #1
 800b704:	dc1e      	bgt.n	800b744 <_strtod_l+0x550>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <_strtod_l+0x51a>
 800b70a:	0006      	movs	r6, r0
 800b70c:	000f      	movs	r7, r1
 800b70e:	4b32      	ldr	r3, [pc, #200]	; (800b7d8 <_strtod_l+0x5e4>)
 800b710:	9a07      	ldr	r2, [sp, #28]
 800b712:	18ff      	adds	r7, r7, r3
 800b714:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <_strtod_l+0x5e0>)
 800b716:	00d2      	lsls	r2, r2, #3
 800b718:	189d      	adds	r5, r3, r2
 800b71a:	6828      	ldr	r0, [r5, #0]
 800b71c:	6869      	ldr	r1, [r5, #4]
 800b71e:	0032      	movs	r2, r6
 800b720:	003b      	movs	r3, r7
 800b722:	f7f5 ffa3 	bl	800166c <__aeabi_dmul>
 800b726:	4b26      	ldr	r3, [pc, #152]	; (800b7c0 <_strtod_l+0x5cc>)
 800b728:	4a2c      	ldr	r2, [pc, #176]	; (800b7dc <_strtod_l+0x5e8>)
 800b72a:	0006      	movs	r6, r0
 800b72c:	400b      	ands	r3, r1
 800b72e:	4293      	cmp	r3, r2
 800b730:	d8be      	bhi.n	800b6b0 <_strtod_l+0x4bc>
 800b732:	4a2b      	ldr	r2, [pc, #172]	; (800b7e0 <_strtod_l+0x5ec>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d913      	bls.n	800b760 <_strtod_l+0x56c>
 800b738:	2601      	movs	r6, #1
 800b73a:	4f2a      	ldr	r7, [pc, #168]	; (800b7e4 <_strtod_l+0x5f0>)
 800b73c:	4276      	negs	r6, r6
 800b73e:	2300      	movs	r3, #0
 800b740:	9307      	str	r3, [sp, #28]
 800b742:	e088      	b.n	800b856 <_strtod_l+0x662>
 800b744:	2201      	movs	r2, #1
 800b746:	4214      	tst	r4, r2
 800b748:	d004      	beq.n	800b754 <_strtod_l+0x560>
 800b74a:	682a      	ldr	r2, [r5, #0]
 800b74c:	686b      	ldr	r3, [r5, #4]
 800b74e:	f7f5 ff8d 	bl	800166c <__aeabi_dmul>
 800b752:	2301      	movs	r3, #1
 800b754:	9a07      	ldr	r2, [sp, #28]
 800b756:	1064      	asrs	r4, r4, #1
 800b758:	3201      	adds	r2, #1
 800b75a:	9207      	str	r2, [sp, #28]
 800b75c:	3508      	adds	r5, #8
 800b75e:	e7d0      	b.n	800b702 <_strtod_l+0x50e>
 800b760:	23d4      	movs	r3, #212	; 0xd4
 800b762:	049b      	lsls	r3, r3, #18
 800b764:	18cf      	adds	r7, r1, r3
 800b766:	e7ea      	b.n	800b73e <_strtod_l+0x54a>
 800b768:	2c00      	cmp	r4, #0
 800b76a:	d0e8      	beq.n	800b73e <_strtod_l+0x54a>
 800b76c:	4264      	negs	r4, r4
 800b76e:	230f      	movs	r3, #15
 800b770:	0022      	movs	r2, r4
 800b772:	401a      	ands	r2, r3
 800b774:	421c      	tst	r4, r3
 800b776:	d00a      	beq.n	800b78e <_strtod_l+0x59a>
 800b778:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <_strtod_l+0x5dc>)
 800b77a:	00d2      	lsls	r2, r2, #3
 800b77c:	189b      	adds	r3, r3, r2
 800b77e:	0030      	movs	r0, r6
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	0039      	movs	r1, r7
 800b786:	f7f5 fb77 	bl	8000e78 <__aeabi_ddiv>
 800b78a:	0006      	movs	r6, r0
 800b78c:	000f      	movs	r7, r1
 800b78e:	1124      	asrs	r4, r4, #4
 800b790:	d0d5      	beq.n	800b73e <_strtod_l+0x54a>
 800b792:	2c1f      	cmp	r4, #31
 800b794:	dd28      	ble.n	800b7e8 <_strtod_l+0x5f4>
 800b796:	2300      	movs	r3, #0
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	9306      	str	r3, [sp, #24]
 800b79c:	930d      	str	r3, [sp, #52]	; 0x34
 800b79e:	9308      	str	r3, [sp, #32]
 800b7a0:	2322      	movs	r3, #34	; 0x22
 800b7a2:	9a04      	ldr	r2, [sp, #16]
 800b7a4:	2600      	movs	r6, #0
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7aa:	2700      	movs	r7, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d18d      	bne.n	800b6cc <_strtod_l+0x4d8>
 800b7b0:	e55b      	b.n	800b26a <_strtod_l+0x76>
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	00004e1f 	.word	0x00004e1f
 800b7b8:	08014ab9 	.word	0x08014ab9
 800b7bc:	08014798 	.word	0x08014798
 800b7c0:	7ff00000 	.word	0x7ff00000
 800b7c4:	08014ab1 	.word	0x08014ab1
 800b7c8:	08014b67 	.word	0x08014b67
 800b7cc:	08014b63 	.word	0x08014b63
 800b7d0:	080149d8 	.word	0x080149d8
 800b7d4:	080149b0 	.word	0x080149b0
 800b7d8:	fcb00000 	.word	0xfcb00000
 800b7dc:	7ca00000 	.word	0x7ca00000
 800b7e0:	7c900000 	.word	0x7c900000
 800b7e4:	7fefffff 	.word	0x7fefffff
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	0022      	movs	r2, r4
 800b7ec:	401a      	ands	r2, r3
 800b7ee:	9207      	str	r2, [sp, #28]
 800b7f0:	421c      	tst	r4, r3
 800b7f2:	d001      	beq.n	800b7f8 <_strtod_l+0x604>
 800b7f4:	335a      	adds	r3, #90	; 0x5a
 800b7f6:	9307      	str	r3, [sp, #28]
 800b7f8:	0030      	movs	r0, r6
 800b7fa:	0039      	movs	r1, r7
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4dc4      	ldr	r5, [pc, #784]	; (800bb10 <_strtod_l+0x91c>)
 800b800:	2201      	movs	r2, #1
 800b802:	4214      	tst	r4, r2
 800b804:	d004      	beq.n	800b810 <_strtod_l+0x61c>
 800b806:	682a      	ldr	r2, [r5, #0]
 800b808:	686b      	ldr	r3, [r5, #4]
 800b80a:	f7f5 ff2f 	bl	800166c <__aeabi_dmul>
 800b80e:	2301      	movs	r3, #1
 800b810:	1064      	asrs	r4, r4, #1
 800b812:	3508      	adds	r5, #8
 800b814:	2c00      	cmp	r4, #0
 800b816:	d1f3      	bne.n	800b800 <_strtod_l+0x60c>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <_strtod_l+0x62c>
 800b81c:	0006      	movs	r6, r0
 800b81e:	000f      	movs	r7, r1
 800b820:	9b07      	ldr	r3, [sp, #28]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00f      	beq.n	800b846 <_strtod_l+0x652>
 800b826:	236b      	movs	r3, #107	; 0x6b
 800b828:	007a      	lsls	r2, r7, #1
 800b82a:	0d52      	lsrs	r2, r2, #21
 800b82c:	0039      	movs	r1, r7
 800b82e:	1a9b      	subs	r3, r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	dd08      	ble.n	800b846 <_strtod_l+0x652>
 800b834:	2b1f      	cmp	r3, #31
 800b836:	dc00      	bgt.n	800b83a <_strtod_l+0x646>
 800b838:	e121      	b.n	800ba7e <_strtod_l+0x88a>
 800b83a:	2600      	movs	r6, #0
 800b83c:	2b34      	cmp	r3, #52	; 0x34
 800b83e:	dc00      	bgt.n	800b842 <_strtod_l+0x64e>
 800b840:	e116      	b.n	800ba70 <_strtod_l+0x87c>
 800b842:	27dc      	movs	r7, #220	; 0xdc
 800b844:	04bf      	lsls	r7, r7, #18
 800b846:	2200      	movs	r2, #0
 800b848:	2300      	movs	r3, #0
 800b84a:	0030      	movs	r0, r6
 800b84c:	0039      	movs	r1, r7
 800b84e:	f7f4 fdfb 	bl	8000448 <__aeabi_dcmpeq>
 800b852:	2800      	cmp	r0, #0
 800b854:	d19f      	bne.n	800b796 <_strtod_l+0x5a2>
 800b856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b858:	9a08      	ldr	r2, [sp, #32]
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b85e:	9b05      	ldr	r3, [sp, #20]
 800b860:	9804      	ldr	r0, [sp, #16]
 800b862:	f001 fb01 	bl	800ce68 <__s2b>
 800b866:	900d      	str	r0, [sp, #52]	; 0x34
 800b868:	2800      	cmp	r0, #0
 800b86a:	d100      	bne.n	800b86e <_strtod_l+0x67a>
 800b86c:	e720      	b.n	800b6b0 <_strtod_l+0x4bc>
 800b86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b870:	9906      	ldr	r1, [sp, #24]
 800b872:	17da      	asrs	r2, r3, #31
 800b874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b876:	1a5b      	subs	r3, r3, r1
 800b878:	401a      	ands	r2, r3
 800b87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87c:	9215      	str	r2, [sp, #84]	; 0x54
 800b87e:	43db      	mvns	r3, r3
 800b880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b882:	17db      	asrs	r3, r3, #31
 800b884:	401a      	ands	r2, r3
 800b886:	2300      	movs	r3, #0
 800b888:	9218      	str	r2, [sp, #96]	; 0x60
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	9306      	str	r3, [sp, #24]
 800b88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b890:	9804      	ldr	r0, [sp, #16]
 800b892:	6859      	ldr	r1, [r3, #4]
 800b894:	f001 fa72 	bl	800cd7c <_Balloc>
 800b898:	9008      	str	r0, [sp, #32]
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d100      	bne.n	800b8a0 <_strtod_l+0x6ac>
 800b89e:	e70c      	b.n	800b6ba <_strtod_l+0x4c6>
 800b8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8a2:	300c      	adds	r0, #12
 800b8a4:	0019      	movs	r1, r3
 800b8a6:	691a      	ldr	r2, [r3, #16]
 800b8a8:	310c      	adds	r1, #12
 800b8aa:	3202      	adds	r2, #2
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	f000 fdca 	bl	800c446 <memcpy>
 800b8b2:	ab1e      	add	r3, sp, #120	; 0x78
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	0032      	movs	r2, r6
 800b8bc:	003b      	movs	r3, r7
 800b8be:	9804      	ldr	r0, [sp, #16]
 800b8c0:	9610      	str	r6, [sp, #64]	; 0x40
 800b8c2:	9711      	str	r7, [sp, #68]	; 0x44
 800b8c4:	f001 fdf8 	bl	800d4b8 <__d2b>
 800b8c8:	901c      	str	r0, [sp, #112]	; 0x70
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d100      	bne.n	800b8d0 <_strtod_l+0x6dc>
 800b8ce:	e6f4      	b.n	800b6ba <_strtod_l+0x4c6>
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	9804      	ldr	r0, [sp, #16]
 800b8d4:	f001 fb5c 	bl	800cf90 <__i2b>
 800b8d8:	9006      	str	r0, [sp, #24]
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d100      	bne.n	800b8e0 <_strtod_l+0x6ec>
 800b8de:	e6ec      	b.n	800b6ba <_strtod_l+0x4c6>
 800b8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b8e6:	1ad4      	subs	r4, r2, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db01      	blt.n	800b8f0 <_strtod_l+0x6fc>
 800b8ec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b8ee:	195d      	adds	r5, r3, r5
 800b8f0:	9907      	ldr	r1, [sp, #28]
 800b8f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b8f4:	1a5b      	subs	r3, r3, r1
 800b8f6:	2136      	movs	r1, #54	; 0x36
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	1a8a      	subs	r2, r1, r2
 800b8fc:	4985      	ldr	r1, [pc, #532]	; (800bb14 <_strtod_l+0x920>)
 800b8fe:	2001      	movs	r0, #1
 800b900:	468c      	mov	ip, r1
 800b902:	2100      	movs	r1, #0
 800b904:	3b01      	subs	r3, #1
 800b906:	9114      	str	r1, [sp, #80]	; 0x50
 800b908:	9012      	str	r0, [sp, #72]	; 0x48
 800b90a:	4563      	cmp	r3, ip
 800b90c:	da07      	bge.n	800b91e <_strtod_l+0x72a>
 800b90e:	4661      	mov	r1, ip
 800b910:	1ac9      	subs	r1, r1, r3
 800b912:	1a52      	subs	r2, r2, r1
 800b914:	291f      	cmp	r1, #31
 800b916:	dd00      	ble.n	800b91a <_strtod_l+0x726>
 800b918:	e0b6      	b.n	800ba88 <_strtod_l+0x894>
 800b91a:	4088      	lsls	r0, r1
 800b91c:	9012      	str	r0, [sp, #72]	; 0x48
 800b91e:	18ab      	adds	r3, r5, r2
 800b920:	930c      	str	r3, [sp, #48]	; 0x30
 800b922:	18a4      	adds	r4, r4, r2
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b928:	191c      	adds	r4, r3, r4
 800b92a:	002b      	movs	r3, r5
 800b92c:	4295      	cmp	r5, r2
 800b92e:	dd00      	ble.n	800b932 <_strtod_l+0x73e>
 800b930:	0013      	movs	r3, r2
 800b932:	42a3      	cmp	r3, r4
 800b934:	dd00      	ble.n	800b938 <_strtod_l+0x744>
 800b936:	0023      	movs	r3, r4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dd04      	ble.n	800b946 <_strtod_l+0x752>
 800b93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b93e:	1ae4      	subs	r4, r4, r3
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	920c      	str	r2, [sp, #48]	; 0x30
 800b944:	1aed      	subs	r5, r5, r3
 800b946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dd17      	ble.n	800b97c <_strtod_l+0x788>
 800b94c:	001a      	movs	r2, r3
 800b94e:	9906      	ldr	r1, [sp, #24]
 800b950:	9804      	ldr	r0, [sp, #16]
 800b952:	f001 fbe5 	bl	800d120 <__pow5mult>
 800b956:	9006      	str	r0, [sp, #24]
 800b958:	2800      	cmp	r0, #0
 800b95a:	d100      	bne.n	800b95e <_strtod_l+0x76a>
 800b95c:	e6ad      	b.n	800b6ba <_strtod_l+0x4c6>
 800b95e:	0001      	movs	r1, r0
 800b960:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b962:	9804      	ldr	r0, [sp, #16]
 800b964:	f001 fb2c 	bl	800cfc0 <__multiply>
 800b968:	900e      	str	r0, [sp, #56]	; 0x38
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d100      	bne.n	800b970 <_strtod_l+0x77c>
 800b96e:	e6a4      	b.n	800b6ba <_strtod_l+0x4c6>
 800b970:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b972:	9804      	ldr	r0, [sp, #16]
 800b974:	f001 fa2a 	bl	800cdcc <_Bfree>
 800b978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b97a:	931c      	str	r3, [sp, #112]	; 0x70
 800b97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd00      	ble.n	800b984 <_strtod_l+0x790>
 800b982:	e087      	b.n	800ba94 <_strtod_l+0x8a0>
 800b984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd08      	ble.n	800b99c <_strtod_l+0x7a8>
 800b98a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b98c:	9908      	ldr	r1, [sp, #32]
 800b98e:	9804      	ldr	r0, [sp, #16]
 800b990:	f001 fbc6 	bl	800d120 <__pow5mult>
 800b994:	9008      	str	r0, [sp, #32]
 800b996:	2800      	cmp	r0, #0
 800b998:	d100      	bne.n	800b99c <_strtod_l+0x7a8>
 800b99a:	e68e      	b.n	800b6ba <_strtod_l+0x4c6>
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	dd08      	ble.n	800b9b2 <_strtod_l+0x7be>
 800b9a0:	0022      	movs	r2, r4
 800b9a2:	9908      	ldr	r1, [sp, #32]
 800b9a4:	9804      	ldr	r0, [sp, #16]
 800b9a6:	f001 fbfd 	bl	800d1a4 <__lshift>
 800b9aa:	9008      	str	r0, [sp, #32]
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d100      	bne.n	800b9b2 <_strtod_l+0x7be>
 800b9b0:	e683      	b.n	800b6ba <_strtod_l+0x4c6>
 800b9b2:	2d00      	cmp	r5, #0
 800b9b4:	dd08      	ble.n	800b9c8 <_strtod_l+0x7d4>
 800b9b6:	002a      	movs	r2, r5
 800b9b8:	9906      	ldr	r1, [sp, #24]
 800b9ba:	9804      	ldr	r0, [sp, #16]
 800b9bc:	f001 fbf2 	bl	800d1a4 <__lshift>
 800b9c0:	9006      	str	r0, [sp, #24]
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d100      	bne.n	800b9c8 <_strtod_l+0x7d4>
 800b9c6:	e678      	b.n	800b6ba <_strtod_l+0x4c6>
 800b9c8:	9a08      	ldr	r2, [sp, #32]
 800b9ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9cc:	9804      	ldr	r0, [sp, #16]
 800b9ce:	f001 fc73 	bl	800d2b8 <__mdiff>
 800b9d2:	9005      	str	r0, [sp, #20]
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d100      	bne.n	800b9da <_strtod_l+0x7e6>
 800b9d8:	e66f      	b.n	800b6ba <_strtod_l+0x4c6>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	68c3      	ldr	r3, [r0, #12]
 800b9de:	9906      	ldr	r1, [sp, #24]
 800b9e0:	60c2      	str	r2, [r0, #12]
 800b9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9e4:	f001 fc4c 	bl	800d280 <__mcmp>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	da5d      	bge.n	800baa8 <_strtod_l+0x8b4>
 800b9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ee:	4333      	orrs	r3, r6
 800b9f0:	d000      	beq.n	800b9f4 <_strtod_l+0x800>
 800b9f2:	e088      	b.n	800bb06 <_strtod_l+0x912>
 800b9f4:	033b      	lsls	r3, r7, #12
 800b9f6:	d000      	beq.n	800b9fa <_strtod_l+0x806>
 800b9f8:	e085      	b.n	800bb06 <_strtod_l+0x912>
 800b9fa:	22d6      	movs	r2, #214	; 0xd6
 800b9fc:	4b46      	ldr	r3, [pc, #280]	; (800bb18 <_strtod_l+0x924>)
 800b9fe:	04d2      	lsls	r2, r2, #19
 800ba00:	403b      	ands	r3, r7
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d97f      	bls.n	800bb06 <_strtod_l+0x912>
 800ba06:	9b05      	ldr	r3, [sp, #20]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <_strtod_l+0x822>
 800ba0e:	9b05      	ldr	r3, [sp, #20]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	dd77      	ble.n	800bb06 <_strtod_l+0x912>
 800ba16:	9905      	ldr	r1, [sp, #20]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	9804      	ldr	r0, [sp, #16]
 800ba1c:	f001 fbc2 	bl	800d1a4 <__lshift>
 800ba20:	9906      	ldr	r1, [sp, #24]
 800ba22:	9005      	str	r0, [sp, #20]
 800ba24:	f001 fc2c 	bl	800d280 <__mcmp>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	dd6c      	ble.n	800bb06 <_strtod_l+0x912>
 800ba2c:	9907      	ldr	r1, [sp, #28]
 800ba2e:	003b      	movs	r3, r7
 800ba30:	4a39      	ldr	r2, [pc, #228]	; (800bb18 <_strtod_l+0x924>)
 800ba32:	2900      	cmp	r1, #0
 800ba34:	d100      	bne.n	800ba38 <_strtod_l+0x844>
 800ba36:	e094      	b.n	800bb62 <_strtod_l+0x96e>
 800ba38:	0011      	movs	r1, r2
 800ba3a:	20d6      	movs	r0, #214	; 0xd6
 800ba3c:	4039      	ands	r1, r7
 800ba3e:	04c0      	lsls	r0, r0, #19
 800ba40:	4281      	cmp	r1, r0
 800ba42:	dd00      	ble.n	800ba46 <_strtod_l+0x852>
 800ba44:	e08d      	b.n	800bb62 <_strtod_l+0x96e>
 800ba46:	23dc      	movs	r3, #220	; 0xdc
 800ba48:	049b      	lsls	r3, r3, #18
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	dc00      	bgt.n	800ba50 <_strtod_l+0x85c>
 800ba4e:	e6a7      	b.n	800b7a0 <_strtod_l+0x5ac>
 800ba50:	0030      	movs	r0, r6
 800ba52:	0039      	movs	r1, r7
 800ba54:	4b31      	ldr	r3, [pc, #196]	; (800bb1c <_strtod_l+0x928>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	f7f5 fe08 	bl	800166c <__aeabi_dmul>
 800ba5c:	4b2e      	ldr	r3, [pc, #184]	; (800bb18 <_strtod_l+0x924>)
 800ba5e:	0006      	movs	r6, r0
 800ba60:	000f      	movs	r7, r1
 800ba62:	420b      	tst	r3, r1
 800ba64:	d000      	beq.n	800ba68 <_strtod_l+0x874>
 800ba66:	e631      	b.n	800b6cc <_strtod_l+0x4d8>
 800ba68:	2322      	movs	r3, #34	; 0x22
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	e62d      	b.n	800b6cc <_strtod_l+0x4d8>
 800ba70:	234b      	movs	r3, #75	; 0x4b
 800ba72:	1a9a      	subs	r2, r3, r2
 800ba74:	3b4c      	subs	r3, #76	; 0x4c
 800ba76:	4093      	lsls	r3, r2
 800ba78:	4019      	ands	r1, r3
 800ba7a:	000f      	movs	r7, r1
 800ba7c:	e6e3      	b.n	800b846 <_strtod_l+0x652>
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4252      	negs	r2, r2
 800ba82:	409a      	lsls	r2, r3
 800ba84:	4016      	ands	r6, r2
 800ba86:	e6de      	b.n	800b846 <_strtod_l+0x652>
 800ba88:	4925      	ldr	r1, [pc, #148]	; (800bb20 <_strtod_l+0x92c>)
 800ba8a:	1acb      	subs	r3, r1, r3
 800ba8c:	0001      	movs	r1, r0
 800ba8e:	4099      	lsls	r1, r3
 800ba90:	9114      	str	r1, [sp, #80]	; 0x50
 800ba92:	e743      	b.n	800b91c <_strtod_l+0x728>
 800ba94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba98:	9804      	ldr	r0, [sp, #16]
 800ba9a:	f001 fb83 	bl	800d1a4 <__lshift>
 800ba9e:	901c      	str	r0, [sp, #112]	; 0x70
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d000      	beq.n	800baa6 <_strtod_l+0x8b2>
 800baa4:	e76e      	b.n	800b984 <_strtod_l+0x790>
 800baa6:	e608      	b.n	800b6ba <_strtod_l+0x4c6>
 800baa8:	970e      	str	r7, [sp, #56]	; 0x38
 800baaa:	2800      	cmp	r0, #0
 800baac:	d177      	bne.n	800bb9e <_strtod_l+0x9aa>
 800baae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab0:	033b      	lsls	r3, r7, #12
 800bab2:	0b1b      	lsrs	r3, r3, #12
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	d039      	beq.n	800bb2c <_strtod_l+0x938>
 800bab8:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <_strtod_l+0x930>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d139      	bne.n	800bb32 <_strtod_l+0x93e>
 800babe:	2101      	movs	r1, #1
 800bac0:	9b07      	ldr	r3, [sp, #28]
 800bac2:	4249      	negs	r1, r1
 800bac4:	0032      	movs	r2, r6
 800bac6:	0008      	movs	r0, r1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00b      	beq.n	800bae4 <_strtod_l+0x8f0>
 800bacc:	24d4      	movs	r4, #212	; 0xd4
 800bace:	4b12      	ldr	r3, [pc, #72]	; (800bb18 <_strtod_l+0x924>)
 800bad0:	0008      	movs	r0, r1
 800bad2:	403b      	ands	r3, r7
 800bad4:	04e4      	lsls	r4, r4, #19
 800bad6:	42a3      	cmp	r3, r4
 800bad8:	d804      	bhi.n	800bae4 <_strtod_l+0x8f0>
 800bada:	306c      	adds	r0, #108	; 0x6c
 800badc:	0d1b      	lsrs	r3, r3, #20
 800bade:	1ac3      	subs	r3, r0, r3
 800bae0:	4099      	lsls	r1, r3
 800bae2:	0008      	movs	r0, r1
 800bae4:	4282      	cmp	r2, r0
 800bae6:	d124      	bne.n	800bb32 <_strtod_l+0x93e>
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <_strtod_l+0x934>)
 800baea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800baec:	4299      	cmp	r1, r3
 800baee:	d102      	bne.n	800baf6 <_strtod_l+0x902>
 800baf0:	3201      	adds	r2, #1
 800baf2:	d100      	bne.n	800baf6 <_strtod_l+0x902>
 800baf4:	e5e1      	b.n	800b6ba <_strtod_l+0x4c6>
 800baf6:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <_strtod_l+0x924>)
 800baf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bafa:	2600      	movs	r6, #0
 800bafc:	401a      	ands	r2, r3
 800bafe:	0013      	movs	r3, r2
 800bb00:	2280      	movs	r2, #128	; 0x80
 800bb02:	0352      	lsls	r2, r2, #13
 800bb04:	189f      	adds	r7, r3, r2
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1a1      	bne.n	800ba50 <_strtod_l+0x85c>
 800bb0c:	e5de      	b.n	800b6cc <_strtod_l+0x4d8>
 800bb0e:	46c0      	nop			; (mov r8, r8)
 800bb10:	080147b0 	.word	0x080147b0
 800bb14:	fffffc02 	.word	0xfffffc02
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	39500000 	.word	0x39500000
 800bb20:	fffffbe2 	.word	0xfffffbe2
 800bb24:	000fffff 	.word	0x000fffff
 800bb28:	7fefffff 	.word	0x7fefffff
 800bb2c:	4333      	orrs	r3, r6
 800bb2e:	d100      	bne.n	800bb32 <_strtod_l+0x93e>
 800bb30:	e77c      	b.n	800ba2c <_strtod_l+0x838>
 800bb32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d01d      	beq.n	800bb74 <_strtod_l+0x980>
 800bb38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb3c:	4213      	tst	r3, r2
 800bb3e:	d0e2      	beq.n	800bb06 <_strtod_l+0x912>
 800bb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb42:	0030      	movs	r0, r6
 800bb44:	0039      	movs	r1, r7
 800bb46:	9a07      	ldr	r2, [sp, #28]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d017      	beq.n	800bb7c <_strtod_l+0x988>
 800bb4c:	f7ff fb3a 	bl	800b1c4 <sulp>
 800bb50:	0002      	movs	r2, r0
 800bb52:	000b      	movs	r3, r1
 800bb54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb56:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb58:	f7f4 fe2e 	bl	80007b8 <__aeabi_dadd>
 800bb5c:	0006      	movs	r6, r0
 800bb5e:	000f      	movs	r7, r1
 800bb60:	e7d1      	b.n	800bb06 <_strtod_l+0x912>
 800bb62:	2601      	movs	r6, #1
 800bb64:	4013      	ands	r3, r2
 800bb66:	4a98      	ldr	r2, [pc, #608]	; (800bdc8 <_strtod_l+0xbd4>)
 800bb68:	4276      	negs	r6, r6
 800bb6a:	189b      	adds	r3, r3, r2
 800bb6c:	4a97      	ldr	r2, [pc, #604]	; (800bdcc <_strtod_l+0xbd8>)
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	0017      	movs	r7, r2
 800bb72:	e7c8      	b.n	800bb06 <_strtod_l+0x912>
 800bb74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb76:	4233      	tst	r3, r6
 800bb78:	d0c5      	beq.n	800bb06 <_strtod_l+0x912>
 800bb7a:	e7e1      	b.n	800bb40 <_strtod_l+0x94c>
 800bb7c:	f7ff fb22 	bl	800b1c4 <sulp>
 800bb80:	0002      	movs	r2, r0
 800bb82:	000b      	movs	r3, r1
 800bb84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb86:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb88:	f7f6 f832 	bl	8001bf0 <__aeabi_dsub>
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2300      	movs	r3, #0
 800bb90:	0006      	movs	r6, r0
 800bb92:	000f      	movs	r7, r1
 800bb94:	f7f4 fc58 	bl	8000448 <__aeabi_dcmpeq>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0b4      	beq.n	800bb06 <_strtod_l+0x912>
 800bb9c:	e600      	b.n	800b7a0 <_strtod_l+0x5ac>
 800bb9e:	9906      	ldr	r1, [sp, #24]
 800bba0:	9805      	ldr	r0, [sp, #20]
 800bba2:	f001 fce9 	bl	800d578 <__ratio>
 800bba6:	2380      	movs	r3, #128	; 0x80
 800bba8:	2200      	movs	r2, #0
 800bbaa:	05db      	lsls	r3, r3, #23
 800bbac:	0004      	movs	r4, r0
 800bbae:	000d      	movs	r5, r1
 800bbb0:	f7f4 fc5a 	bl	8000468 <__aeabi_dcmple>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d06d      	beq.n	800bc94 <_strtod_l+0xaa0>
 800bbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d000      	beq.n	800bbc0 <_strtod_l+0x9cc>
 800bbbe:	e07e      	b.n	800bcbe <_strtod_l+0xaca>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d158      	bne.n	800bc76 <_strtod_l+0xa82>
 800bbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbc6:	031b      	lsls	r3, r3, #12
 800bbc8:	d000      	beq.n	800bbcc <_strtod_l+0x9d8>
 800bbca:	e07f      	b.n	800bccc <_strtod_l+0xad8>
 800bbcc:	2200      	movs	r2, #0
 800bbce:	0020      	movs	r0, r4
 800bbd0:	0029      	movs	r1, r5
 800bbd2:	4b7f      	ldr	r3, [pc, #508]	; (800bdd0 <_strtod_l+0xbdc>)
 800bbd4:	f7f4 fc3e 	bl	8000454 <__aeabi_dcmplt>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d158      	bne.n	800bc8e <_strtod_l+0xa9a>
 800bbdc:	0020      	movs	r0, r4
 800bbde:	0029      	movs	r1, r5
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4b7c      	ldr	r3, [pc, #496]	; (800bdd4 <_strtod_l+0xbe0>)
 800bbe4:	f7f5 fd42 	bl	800166c <__aeabi_dmul>
 800bbe8:	0004      	movs	r4, r0
 800bbea:	000d      	movs	r5, r1
 800bbec:	2380      	movs	r3, #128	; 0x80
 800bbee:	061b      	lsls	r3, r3, #24
 800bbf0:	940a      	str	r4, [sp, #40]	; 0x28
 800bbf2:	18eb      	adds	r3, r5, r3
 800bbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfa:	9212      	str	r2, [sp, #72]	; 0x48
 800bbfc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbfe:	4a76      	ldr	r2, [pc, #472]	; (800bdd8 <_strtod_l+0xbe4>)
 800bc00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc02:	4013      	ands	r3, r2
 800bc04:	9314      	str	r3, [sp, #80]	; 0x50
 800bc06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc08:	4b74      	ldr	r3, [pc, #464]	; (800bddc <_strtod_l+0xbe8>)
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d000      	beq.n	800bc10 <_strtod_l+0xa1c>
 800bc0e:	e091      	b.n	800bd34 <_strtod_l+0xb40>
 800bc10:	4a73      	ldr	r2, [pc, #460]	; (800bde0 <_strtod_l+0xbec>)
 800bc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc14:	4694      	mov	ip, r2
 800bc16:	4463      	add	r3, ip
 800bc18:	001f      	movs	r7, r3
 800bc1a:	0030      	movs	r0, r6
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	f001 fbe3 	bl	800d3e8 <__ulp>
 800bc22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc26:	f7f5 fd21 	bl	800166c <__aeabi_dmul>
 800bc2a:	0032      	movs	r2, r6
 800bc2c:	003b      	movs	r3, r7
 800bc2e:	f7f4 fdc3 	bl	80007b8 <__aeabi_dadd>
 800bc32:	4a69      	ldr	r2, [pc, #420]	; (800bdd8 <_strtod_l+0xbe4>)
 800bc34:	4b6b      	ldr	r3, [pc, #428]	; (800bde4 <_strtod_l+0xbf0>)
 800bc36:	0006      	movs	r6, r0
 800bc38:	400a      	ands	r2, r1
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d949      	bls.n	800bcd2 <_strtod_l+0xade>
 800bc3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc40:	4b69      	ldr	r3, [pc, #420]	; (800bde8 <_strtod_l+0xbf4>)
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d103      	bne.n	800bc4e <_strtod_l+0xa5a>
 800bc46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc48:	3301      	adds	r3, #1
 800bc4a:	d100      	bne.n	800bc4e <_strtod_l+0xa5a>
 800bc4c:	e535      	b.n	800b6ba <_strtod_l+0x4c6>
 800bc4e:	2601      	movs	r6, #1
 800bc50:	4f65      	ldr	r7, [pc, #404]	; (800bde8 <_strtod_l+0xbf4>)
 800bc52:	4276      	negs	r6, r6
 800bc54:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc56:	9804      	ldr	r0, [sp, #16]
 800bc58:	f001 f8b8 	bl	800cdcc <_Bfree>
 800bc5c:	9908      	ldr	r1, [sp, #32]
 800bc5e:	9804      	ldr	r0, [sp, #16]
 800bc60:	f001 f8b4 	bl	800cdcc <_Bfree>
 800bc64:	9906      	ldr	r1, [sp, #24]
 800bc66:	9804      	ldr	r0, [sp, #16]
 800bc68:	f001 f8b0 	bl	800cdcc <_Bfree>
 800bc6c:	9905      	ldr	r1, [sp, #20]
 800bc6e:	9804      	ldr	r0, [sp, #16]
 800bc70:	f001 f8ac 	bl	800cdcc <_Bfree>
 800bc74:	e60b      	b.n	800b88e <_strtod_l+0x69a>
 800bc76:	2e01      	cmp	r6, #1
 800bc78:	d103      	bne.n	800bc82 <_strtod_l+0xa8e>
 800bc7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d100      	bne.n	800bc82 <_strtod_l+0xa8e>
 800bc80:	e58e      	b.n	800b7a0 <_strtod_l+0x5ac>
 800bc82:	2300      	movs	r3, #0
 800bc84:	4c59      	ldr	r4, [pc, #356]	; (800bdec <_strtod_l+0xbf8>)
 800bc86:	930a      	str	r3, [sp, #40]	; 0x28
 800bc88:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc8c:	e01c      	b.n	800bcc8 <_strtod_l+0xad4>
 800bc8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc90:	4d50      	ldr	r5, [pc, #320]	; (800bdd4 <_strtod_l+0xbe0>)
 800bc92:	e7ab      	b.n	800bbec <_strtod_l+0x9f8>
 800bc94:	2200      	movs	r2, #0
 800bc96:	0020      	movs	r0, r4
 800bc98:	0029      	movs	r1, r5
 800bc9a:	4b4e      	ldr	r3, [pc, #312]	; (800bdd4 <_strtod_l+0xbe0>)
 800bc9c:	f7f5 fce6 	bl	800166c <__aeabi_dmul>
 800bca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bca2:	0004      	movs	r4, r0
 800bca4:	000b      	movs	r3, r1
 800bca6:	000d      	movs	r5, r1
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	d104      	bne.n	800bcb6 <_strtod_l+0xac2>
 800bcac:	2280      	movs	r2, #128	; 0x80
 800bcae:	0612      	lsls	r2, r2, #24
 800bcb0:	900a      	str	r0, [sp, #40]	; 0x28
 800bcb2:	188b      	adds	r3, r1, r2
 800bcb4:	e79e      	b.n	800bbf4 <_strtod_l+0xa00>
 800bcb6:	0002      	movs	r2, r0
 800bcb8:	920a      	str	r2, [sp, #40]	; 0x28
 800bcba:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcbc:	e79b      	b.n	800bbf6 <_strtod_l+0xa02>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4c43      	ldr	r4, [pc, #268]	; (800bdd0 <_strtod_l+0xbdc>)
 800bcc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc4:	940b      	str	r4, [sp, #44]	; 0x2c
 800bcc6:	2400      	movs	r4, #0
 800bcc8:	4d41      	ldr	r5, [pc, #260]	; (800bdd0 <_strtod_l+0xbdc>)
 800bcca:	e794      	b.n	800bbf6 <_strtod_l+0xa02>
 800bccc:	2300      	movs	r3, #0
 800bcce:	4c47      	ldr	r4, [pc, #284]	; (800bdec <_strtod_l+0xbf8>)
 800bcd0:	e7f7      	b.n	800bcc2 <_strtod_l+0xace>
 800bcd2:	23d4      	movs	r3, #212	; 0xd4
 800bcd4:	049b      	lsls	r3, r3, #18
 800bcd6:	18cf      	adds	r7, r1, r3
 800bcd8:	9b07      	ldr	r3, [sp, #28]
 800bcda:	970e      	str	r7, [sp, #56]	; 0x38
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1b9      	bne.n	800bc54 <_strtod_l+0xa60>
 800bce0:	4b3d      	ldr	r3, [pc, #244]	; (800bdd8 <_strtod_l+0xbe4>)
 800bce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bce4:	403b      	ands	r3, r7
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d1b4      	bne.n	800bc54 <_strtod_l+0xa60>
 800bcea:	0020      	movs	r0, r4
 800bcec:	0029      	movs	r1, r5
 800bcee:	f7f4 fc45 	bl	800057c <__aeabi_d2lz>
 800bcf2:	f7f4 fc7f 	bl	80005f4 <__aeabi_l2d>
 800bcf6:	0002      	movs	r2, r0
 800bcf8:	000b      	movs	r3, r1
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	0029      	movs	r1, r5
 800bcfe:	f7f5 ff77 	bl	8001bf0 <__aeabi_dsub>
 800bd02:	033b      	lsls	r3, r7, #12
 800bd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd06:	0b1b      	lsrs	r3, r3, #12
 800bd08:	4333      	orrs	r3, r6
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	0004      	movs	r4, r0
 800bd0e:	000d      	movs	r5, r1
 800bd10:	4a37      	ldr	r2, [pc, #220]	; (800bdf0 <_strtod_l+0xbfc>)
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d054      	beq.n	800bdc0 <_strtod_l+0xbcc>
 800bd16:	4b37      	ldr	r3, [pc, #220]	; (800bdf4 <_strtod_l+0xc00>)
 800bd18:	f7f4 fb9c 	bl	8000454 <__aeabi_dcmplt>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d000      	beq.n	800bd22 <_strtod_l+0xb2e>
 800bd20:	e4d4      	b.n	800b6cc <_strtod_l+0x4d8>
 800bd22:	0020      	movs	r0, r4
 800bd24:	0029      	movs	r1, r5
 800bd26:	4a34      	ldr	r2, [pc, #208]	; (800bdf8 <_strtod_l+0xc04>)
 800bd28:	4b2a      	ldr	r3, [pc, #168]	; (800bdd4 <_strtod_l+0xbe0>)
 800bd2a:	f7f4 fba7 	bl	800047c <__aeabi_dcmpgt>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d090      	beq.n	800bc54 <_strtod_l+0xa60>
 800bd32:	e4cb      	b.n	800b6cc <_strtod_l+0x4d8>
 800bd34:	9b07      	ldr	r3, [sp, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d02b      	beq.n	800bd92 <_strtod_l+0xb9e>
 800bd3a:	23d4      	movs	r3, #212	; 0xd4
 800bd3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd3e:	04db      	lsls	r3, r3, #19
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d826      	bhi.n	800bd92 <_strtod_l+0xb9e>
 800bd44:	0020      	movs	r0, r4
 800bd46:	0029      	movs	r1, r5
 800bd48:	4a2c      	ldr	r2, [pc, #176]	; (800bdfc <_strtod_l+0xc08>)
 800bd4a:	4b2d      	ldr	r3, [pc, #180]	; (800be00 <_strtod_l+0xc0c>)
 800bd4c:	f7f4 fb8c 	bl	8000468 <__aeabi_dcmple>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d017      	beq.n	800bd84 <_strtod_l+0xb90>
 800bd54:	0020      	movs	r0, r4
 800bd56:	0029      	movs	r1, r5
 800bd58:	f7f4 fbf2 	bl	8000540 <__aeabi_d2uiz>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d100      	bne.n	800bd62 <_strtod_l+0xb6e>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f7f6 fb4b 	bl	80023fc <__aeabi_ui2d>
 800bd66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd68:	0004      	movs	r4, r0
 800bd6a:	000b      	movs	r3, r1
 800bd6c:	000d      	movs	r5, r1
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	d122      	bne.n	800bdb8 <_strtod_l+0xbc4>
 800bd72:	2280      	movs	r2, #128	; 0x80
 800bd74:	0612      	lsls	r2, r2, #24
 800bd76:	188b      	adds	r3, r1, r2
 800bd78:	9016      	str	r0, [sp, #88]	; 0x58
 800bd7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd80:	9212      	str	r2, [sp, #72]	; 0x48
 800bd82:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd84:	22d6      	movs	r2, #214	; 0xd6
 800bd86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd88:	04d2      	lsls	r2, r2, #19
 800bd8a:	189b      	adds	r3, r3, r2
 800bd8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd92:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd94:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd96:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bd98:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bd9a:	f001 fb25 	bl	800d3e8 <__ulp>
 800bd9e:	0002      	movs	r2, r0
 800bda0:	000b      	movs	r3, r1
 800bda2:	0030      	movs	r0, r6
 800bda4:	0039      	movs	r1, r7
 800bda6:	f7f5 fc61 	bl	800166c <__aeabi_dmul>
 800bdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdae:	f7f4 fd03 	bl	80007b8 <__aeabi_dadd>
 800bdb2:	0006      	movs	r6, r0
 800bdb4:	000f      	movs	r7, r1
 800bdb6:	e78f      	b.n	800bcd8 <_strtod_l+0xae4>
 800bdb8:	0002      	movs	r2, r0
 800bdba:	9216      	str	r2, [sp, #88]	; 0x58
 800bdbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdbe:	e7dd      	b.n	800bd7c <_strtod_l+0xb88>
 800bdc0:	4b10      	ldr	r3, [pc, #64]	; (800be04 <_strtod_l+0xc10>)
 800bdc2:	f7f4 fb47 	bl	8000454 <__aeabi_dcmplt>
 800bdc6:	e7b2      	b.n	800bd2e <_strtod_l+0xb3a>
 800bdc8:	fff00000 	.word	0xfff00000
 800bdcc:	000fffff 	.word	0x000fffff
 800bdd0:	3ff00000 	.word	0x3ff00000
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	7ff00000 	.word	0x7ff00000
 800bddc:	7fe00000 	.word	0x7fe00000
 800bde0:	fcb00000 	.word	0xfcb00000
 800bde4:	7c9fffff 	.word	0x7c9fffff
 800bde8:	7fefffff 	.word	0x7fefffff
 800bdec:	bff00000 	.word	0xbff00000
 800bdf0:	94a03595 	.word	0x94a03595
 800bdf4:	3fdfffff 	.word	0x3fdfffff
 800bdf8:	35afe535 	.word	0x35afe535
 800bdfc:	ffc00000 	.word	0xffc00000
 800be00:	41dfffff 	.word	0x41dfffff
 800be04:	3fcfffff 	.word	0x3fcfffff

0800be08 <_strtod_r>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	4b02      	ldr	r3, [pc, #8]	; (800be14 <_strtod_r+0xc>)
 800be0c:	f7ff f9f2 	bl	800b1f4 <_strtod_l>
 800be10:	bd10      	pop	{r4, pc}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	20000448 	.word	0x20000448

0800be18 <strtod>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	4c04      	ldr	r4, [pc, #16]	; (800be2c <strtod+0x14>)
 800be1c:	000a      	movs	r2, r1
 800be1e:	0001      	movs	r1, r0
 800be20:	4b03      	ldr	r3, [pc, #12]	; (800be30 <strtod+0x18>)
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	f7ff f9e6 	bl	800b1f4 <_strtod_l>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	46c0      	nop			; (mov r8, r8)
 800be2c:	200006d8 	.word	0x200006d8
 800be30:	20000448 	.word	0x20000448

0800be34 <_strtol_l.constprop.0>:
 800be34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be36:	b087      	sub	sp, #28
 800be38:	001e      	movs	r6, r3
 800be3a:	9005      	str	r0, [sp, #20]
 800be3c:	9101      	str	r1, [sp, #4]
 800be3e:	9202      	str	r2, [sp, #8]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d048      	beq.n	800bed6 <_strtol_l.constprop.0+0xa2>
 800be44:	000b      	movs	r3, r1
 800be46:	2e24      	cmp	r6, #36	; 0x24
 800be48:	d845      	bhi.n	800bed6 <_strtol_l.constprop.0+0xa2>
 800be4a:	4a3b      	ldr	r2, [pc, #236]	; (800bf38 <_strtol_l.constprop.0+0x104>)
 800be4c:	2108      	movs	r1, #8
 800be4e:	4694      	mov	ip, r2
 800be50:	001a      	movs	r2, r3
 800be52:	4660      	mov	r0, ip
 800be54:	7814      	ldrb	r4, [r2, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	5d00      	ldrb	r0, [r0, r4]
 800be5a:	001d      	movs	r5, r3
 800be5c:	0007      	movs	r7, r0
 800be5e:	400f      	ands	r7, r1
 800be60:	4208      	tst	r0, r1
 800be62:	d1f5      	bne.n	800be50 <_strtol_l.constprop.0+0x1c>
 800be64:	2c2d      	cmp	r4, #45	; 0x2d
 800be66:	d13d      	bne.n	800bee4 <_strtol_l.constprop.0+0xb0>
 800be68:	2701      	movs	r7, #1
 800be6a:	781c      	ldrb	r4, [r3, #0]
 800be6c:	1c95      	adds	r5, r2, #2
 800be6e:	2e00      	cmp	r6, #0
 800be70:	d05e      	beq.n	800bf30 <_strtol_l.constprop.0+0xfc>
 800be72:	2e10      	cmp	r6, #16
 800be74:	d109      	bne.n	800be8a <_strtol_l.constprop.0+0x56>
 800be76:	2c30      	cmp	r4, #48	; 0x30
 800be78:	d107      	bne.n	800be8a <_strtol_l.constprop.0+0x56>
 800be7a:	2220      	movs	r2, #32
 800be7c:	782b      	ldrb	r3, [r5, #0]
 800be7e:	4393      	bics	r3, r2
 800be80:	2b58      	cmp	r3, #88	; 0x58
 800be82:	d150      	bne.n	800bf26 <_strtol_l.constprop.0+0xf2>
 800be84:	2610      	movs	r6, #16
 800be86:	786c      	ldrb	r4, [r5, #1]
 800be88:	3502      	adds	r5, #2
 800be8a:	4b2c      	ldr	r3, [pc, #176]	; (800bf3c <_strtol_l.constprop.0+0x108>)
 800be8c:	0031      	movs	r1, r6
 800be8e:	18fb      	adds	r3, r7, r3
 800be90:	0018      	movs	r0, r3
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	f7f4 f9d8 	bl	8000248 <__aeabi_uidivmod>
 800be98:	2200      	movs	r2, #0
 800be9a:	9104      	str	r1, [sp, #16]
 800be9c:	2101      	movs	r1, #1
 800be9e:	4684      	mov	ip, r0
 800bea0:	0010      	movs	r0, r2
 800bea2:	4249      	negs	r1, r1
 800bea4:	0023      	movs	r3, r4
 800bea6:	3b30      	subs	r3, #48	; 0x30
 800bea8:	2b09      	cmp	r3, #9
 800beaa:	d903      	bls.n	800beb4 <_strtol_l.constprop.0+0x80>
 800beac:	3b11      	subs	r3, #17
 800beae:	2b19      	cmp	r3, #25
 800beb0:	d81d      	bhi.n	800beee <_strtol_l.constprop.0+0xba>
 800beb2:	330a      	adds	r3, #10
 800beb4:	429e      	cmp	r6, r3
 800beb6:	dd1e      	ble.n	800bef6 <_strtol_l.constprop.0+0xc2>
 800beb8:	1c54      	adds	r4, r2, #1
 800beba:	d009      	beq.n	800bed0 <_strtol_l.constprop.0+0x9c>
 800bebc:	000a      	movs	r2, r1
 800bebe:	4584      	cmp	ip, r0
 800bec0:	d306      	bcc.n	800bed0 <_strtol_l.constprop.0+0x9c>
 800bec2:	d102      	bne.n	800beca <_strtol_l.constprop.0+0x96>
 800bec4:	9c04      	ldr	r4, [sp, #16]
 800bec6:	429c      	cmp	r4, r3
 800bec8:	db02      	blt.n	800bed0 <_strtol_l.constprop.0+0x9c>
 800beca:	2201      	movs	r2, #1
 800becc:	4370      	muls	r0, r6
 800bece:	1818      	adds	r0, r3, r0
 800bed0:	782c      	ldrb	r4, [r5, #0]
 800bed2:	3501      	adds	r5, #1
 800bed4:	e7e6      	b.n	800bea4 <_strtol_l.constprop.0+0x70>
 800bed6:	f000 fa7d 	bl	800c3d4 <__errno>
 800beda:	2316      	movs	r3, #22
 800bedc:	6003      	str	r3, [r0, #0]
 800bede:	2000      	movs	r0, #0
 800bee0:	b007      	add	sp, #28
 800bee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee4:	2c2b      	cmp	r4, #43	; 0x2b
 800bee6:	d1c2      	bne.n	800be6e <_strtol_l.constprop.0+0x3a>
 800bee8:	781c      	ldrb	r4, [r3, #0]
 800beea:	1c95      	adds	r5, r2, #2
 800beec:	e7bf      	b.n	800be6e <_strtol_l.constprop.0+0x3a>
 800beee:	0023      	movs	r3, r4
 800bef0:	3b61      	subs	r3, #97	; 0x61
 800bef2:	2b19      	cmp	r3, #25
 800bef4:	d9dd      	bls.n	800beb2 <_strtol_l.constprop.0+0x7e>
 800bef6:	1c53      	adds	r3, r2, #1
 800bef8:	d109      	bne.n	800bf0e <_strtol_l.constprop.0+0xda>
 800befa:	2322      	movs	r3, #34	; 0x22
 800befc:	9a05      	ldr	r2, [sp, #20]
 800befe:	9803      	ldr	r0, [sp, #12]
 800bf00:	6013      	str	r3, [r2, #0]
 800bf02:	9b02      	ldr	r3, [sp, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0eb      	beq.n	800bee0 <_strtol_l.constprop.0+0xac>
 800bf08:	1e6b      	subs	r3, r5, #1
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	e007      	b.n	800bf1e <_strtol_l.constprop.0+0xea>
 800bf0e:	2f00      	cmp	r7, #0
 800bf10:	d000      	beq.n	800bf14 <_strtol_l.constprop.0+0xe0>
 800bf12:	4240      	negs	r0, r0
 800bf14:	9b02      	ldr	r3, [sp, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0e2      	beq.n	800bee0 <_strtol_l.constprop.0+0xac>
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	d1f4      	bne.n	800bf08 <_strtol_l.constprop.0+0xd4>
 800bf1e:	9b02      	ldr	r3, [sp, #8]
 800bf20:	9a01      	ldr	r2, [sp, #4]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e7dc      	b.n	800bee0 <_strtol_l.constprop.0+0xac>
 800bf26:	2430      	movs	r4, #48	; 0x30
 800bf28:	2e00      	cmp	r6, #0
 800bf2a:	d1ae      	bne.n	800be8a <_strtol_l.constprop.0+0x56>
 800bf2c:	3608      	adds	r6, #8
 800bf2e:	e7ac      	b.n	800be8a <_strtol_l.constprop.0+0x56>
 800bf30:	2c30      	cmp	r4, #48	; 0x30
 800bf32:	d0a2      	beq.n	800be7a <_strtol_l.constprop.0+0x46>
 800bf34:	260a      	movs	r6, #10
 800bf36:	e7a8      	b.n	800be8a <_strtol_l.constprop.0+0x56>
 800bf38:	080147d9 	.word	0x080147d9
 800bf3c:	7fffffff 	.word	0x7fffffff

0800bf40 <_strtol_r>:
 800bf40:	b510      	push	{r4, lr}
 800bf42:	f7ff ff77 	bl	800be34 <_strtol_l.constprop.0>
 800bf46:	bd10      	pop	{r4, pc}

0800bf48 <strtol>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	4c04      	ldr	r4, [pc, #16]	; (800bf5c <strtol+0x14>)
 800bf4c:	0013      	movs	r3, r2
 800bf4e:	000a      	movs	r2, r1
 800bf50:	0001      	movs	r1, r0
 800bf52:	6820      	ldr	r0, [r4, #0]
 800bf54:	f7ff ff6e 	bl	800be34 <_strtol_l.constprop.0>
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	200006d8 	.word	0x200006d8

0800bf60 <std>:
 800bf60:	2300      	movs	r3, #0
 800bf62:	b510      	push	{r4, lr}
 800bf64:	0004      	movs	r4, r0
 800bf66:	6003      	str	r3, [r0, #0]
 800bf68:	6043      	str	r3, [r0, #4]
 800bf6a:	6083      	str	r3, [r0, #8]
 800bf6c:	8181      	strh	r1, [r0, #12]
 800bf6e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf70:	81c2      	strh	r2, [r0, #14]
 800bf72:	6103      	str	r3, [r0, #16]
 800bf74:	6143      	str	r3, [r0, #20]
 800bf76:	6183      	str	r3, [r0, #24]
 800bf78:	0019      	movs	r1, r3
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	305c      	adds	r0, #92	; 0x5c
 800bf7e:	f000 f97d 	bl	800c27c <memset>
 800bf82:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <std+0x50>)
 800bf84:	61e4      	str	r4, [r4, #28]
 800bf86:	6223      	str	r3, [r4, #32]
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <std+0x54>)
 800bf8a:	6263      	str	r3, [r4, #36]	; 0x24
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <std+0x58>)
 800bf8e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <std+0x5c>)
 800bf92:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf94:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <std+0x60>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d005      	beq.n	800bfa6 <std+0x46>
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <std+0x64>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d002      	beq.n	800bfa6 <std+0x46>
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <std+0x68>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d103      	bne.n	800bfae <std+0x4e>
 800bfa6:	0020      	movs	r0, r4
 800bfa8:	3058      	adds	r0, #88	; 0x58
 800bfaa:	f000 fa3d 	bl	800c428 <__retarget_lock_init_recursive>
 800bfae:	bd10      	pop	{r4, pc}
 800bfb0:	0800c1e1 	.word	0x0800c1e1
 800bfb4:	0800c20d 	.word	0x0800c20d
 800bfb8:	0800c245 	.word	0x0800c245
 800bfbc:	0800c271 	.word	0x0800c271
 800bfc0:	20000bd4 	.word	0x20000bd4
 800bfc4:	20000c3c 	.word	0x20000c3c
 800bfc8:	20000ca4 	.word	0x20000ca4

0800bfcc <stdio_exit_handler>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	4a03      	ldr	r2, [pc, #12]	; (800bfdc <stdio_exit_handler+0x10>)
 800bfd0:	4903      	ldr	r1, [pc, #12]	; (800bfe0 <stdio_exit_handler+0x14>)
 800bfd2:	4804      	ldr	r0, [pc, #16]	; (800bfe4 <stdio_exit_handler+0x18>)
 800bfd4:	f000 f86c 	bl	800c0b0 <_fwalk_sglue>
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	2000043c 	.word	0x2000043c
 800bfe0:	0800ff29 	.word	0x0800ff29
 800bfe4:	200005b8 	.word	0x200005b8

0800bfe8 <cleanup_stdio>:
 800bfe8:	6841      	ldr	r1, [r0, #4]
 800bfea:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <cleanup_stdio+0x30>)
 800bfec:	b510      	push	{r4, lr}
 800bfee:	0004      	movs	r4, r0
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d001      	beq.n	800bff8 <cleanup_stdio+0x10>
 800bff4:	f003 ff98 	bl	800ff28 <_fclose_r>
 800bff8:	68a1      	ldr	r1, [r4, #8]
 800bffa:	4b08      	ldr	r3, [pc, #32]	; (800c01c <cleanup_stdio+0x34>)
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <cleanup_stdio+0x1e>
 800c000:	0020      	movs	r0, r4
 800c002:	f003 ff91 	bl	800ff28 <_fclose_r>
 800c006:	68e1      	ldr	r1, [r4, #12]
 800c008:	4b05      	ldr	r3, [pc, #20]	; (800c020 <cleanup_stdio+0x38>)
 800c00a:	4299      	cmp	r1, r3
 800c00c:	d002      	beq.n	800c014 <cleanup_stdio+0x2c>
 800c00e:	0020      	movs	r0, r4
 800c010:	f003 ff8a 	bl	800ff28 <_fclose_r>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	20000bd4 	.word	0x20000bd4
 800c01c:	20000c3c 	.word	0x20000c3c
 800c020:	20000ca4 	.word	0x20000ca4

0800c024 <global_stdio_init.part.0>:
 800c024:	b510      	push	{r4, lr}
 800c026:	4b09      	ldr	r3, [pc, #36]	; (800c04c <global_stdio_init.part.0+0x28>)
 800c028:	4a09      	ldr	r2, [pc, #36]	; (800c050 <global_stdio_init.part.0+0x2c>)
 800c02a:	2104      	movs	r1, #4
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	4809      	ldr	r0, [pc, #36]	; (800c054 <global_stdio_init.part.0+0x30>)
 800c030:	2200      	movs	r2, #0
 800c032:	f7ff ff95 	bl	800bf60 <std>
 800c036:	2201      	movs	r2, #1
 800c038:	2109      	movs	r1, #9
 800c03a:	4807      	ldr	r0, [pc, #28]	; (800c058 <global_stdio_init.part.0+0x34>)
 800c03c:	f7ff ff90 	bl	800bf60 <std>
 800c040:	2202      	movs	r2, #2
 800c042:	2112      	movs	r1, #18
 800c044:	4805      	ldr	r0, [pc, #20]	; (800c05c <global_stdio_init.part.0+0x38>)
 800c046:	f7ff ff8b 	bl	800bf60 <std>
 800c04a:	bd10      	pop	{r4, pc}
 800c04c:	20000d0c 	.word	0x20000d0c
 800c050:	0800bfcd 	.word	0x0800bfcd
 800c054:	20000bd4 	.word	0x20000bd4
 800c058:	20000c3c 	.word	0x20000c3c
 800c05c:	20000ca4 	.word	0x20000ca4

0800c060 <__sfp_lock_acquire>:
 800c060:	b510      	push	{r4, lr}
 800c062:	4802      	ldr	r0, [pc, #8]	; (800c06c <__sfp_lock_acquire+0xc>)
 800c064:	f000 f9e2 	bl	800c42c <__retarget_lock_acquire_recursive>
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	20000d16 	.word	0x20000d16

0800c070 <__sfp_lock_release>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4802      	ldr	r0, [pc, #8]	; (800c07c <__sfp_lock_release+0xc>)
 800c074:	f000 f9db 	bl	800c42e <__retarget_lock_release_recursive>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	20000d16 	.word	0x20000d16

0800c080 <__sinit>:
 800c080:	b510      	push	{r4, lr}
 800c082:	0004      	movs	r4, r0
 800c084:	f7ff ffec 	bl	800c060 <__sfp_lock_acquire>
 800c088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <__sinit+0x14>
 800c08e:	f7ff ffef 	bl	800c070 <__sfp_lock_release>
 800c092:	bd10      	pop	{r4, pc}
 800c094:	4b04      	ldr	r3, [pc, #16]	; (800c0a8 <__sinit+0x28>)
 800c096:	6363      	str	r3, [r4, #52]	; 0x34
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <__sinit+0x2c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1f6      	bne.n	800c08e <__sinit+0xe>
 800c0a0:	f7ff ffc0 	bl	800c024 <global_stdio_init.part.0>
 800c0a4:	e7f3      	b.n	800c08e <__sinit+0xe>
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	0800bfe9 	.word	0x0800bfe9
 800c0ac:	20000d0c 	.word	0x20000d0c

0800c0b0 <_fwalk_sglue>:
 800c0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0b2:	0014      	movs	r4, r2
 800c0b4:	2600      	movs	r6, #0
 800c0b6:	9000      	str	r0, [sp, #0]
 800c0b8:	9101      	str	r1, [sp, #4]
 800c0ba:	68a5      	ldr	r5, [r4, #8]
 800c0bc:	6867      	ldr	r7, [r4, #4]
 800c0be:	3f01      	subs	r7, #1
 800c0c0:	d504      	bpl.n	800c0cc <_fwalk_sglue+0x1c>
 800c0c2:	6824      	ldr	r4, [r4, #0]
 800c0c4:	2c00      	cmp	r4, #0
 800c0c6:	d1f8      	bne.n	800c0ba <_fwalk_sglue+0xa>
 800c0c8:	0030      	movs	r0, r6
 800c0ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0cc:	89ab      	ldrh	r3, [r5, #12]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d908      	bls.n	800c0e4 <_fwalk_sglue+0x34>
 800c0d2:	220e      	movs	r2, #14
 800c0d4:	5eab      	ldrsh	r3, [r5, r2]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	d004      	beq.n	800c0e4 <_fwalk_sglue+0x34>
 800c0da:	0029      	movs	r1, r5
 800c0dc:	9800      	ldr	r0, [sp, #0]
 800c0de:	9b01      	ldr	r3, [sp, #4]
 800c0e0:	4798      	blx	r3
 800c0e2:	4306      	orrs	r6, r0
 800c0e4:	3568      	adds	r5, #104	; 0x68
 800c0e6:	e7ea      	b.n	800c0be <_fwalk_sglue+0xe>

0800c0e8 <snprintf>:
 800c0e8:	b40c      	push	{r2, r3}
 800c0ea:	b530      	push	{r4, r5, lr}
 800c0ec:	4b17      	ldr	r3, [pc, #92]	; (800c14c <snprintf+0x64>)
 800c0ee:	000c      	movs	r4, r1
 800c0f0:	681d      	ldr	r5, [r3, #0]
 800c0f2:	b09d      	sub	sp, #116	; 0x74
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	da08      	bge.n	800c10a <snprintf+0x22>
 800c0f8:	238b      	movs	r3, #139	; 0x8b
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	602b      	str	r3, [r5, #0]
 800c0fe:	4240      	negs	r0, r0
 800c100:	b01d      	add	sp, #116	; 0x74
 800c102:	bc30      	pop	{r4, r5}
 800c104:	bc08      	pop	{r3}
 800c106:	b002      	add	sp, #8
 800c108:	4718      	bx	r3
 800c10a:	2382      	movs	r3, #130	; 0x82
 800c10c:	466a      	mov	r2, sp
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	8293      	strh	r3, [r2, #20]
 800c112:	2300      	movs	r3, #0
 800c114:	9002      	str	r0, [sp, #8]
 800c116:	9006      	str	r0, [sp, #24]
 800c118:	4299      	cmp	r1, r3
 800c11a:	d000      	beq.n	800c11e <snprintf+0x36>
 800c11c:	1e4b      	subs	r3, r1, #1
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	9307      	str	r3, [sp, #28]
 800c122:	2301      	movs	r3, #1
 800c124:	466a      	mov	r2, sp
 800c126:	425b      	negs	r3, r3
 800c128:	82d3      	strh	r3, [r2, #22]
 800c12a:	0028      	movs	r0, r5
 800c12c:	ab21      	add	r3, sp, #132	; 0x84
 800c12e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c130:	a902      	add	r1, sp, #8
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	f001 fa9a 	bl	800d66c <_svfprintf_r>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	da01      	bge.n	800c140 <snprintf+0x58>
 800c13c:	238b      	movs	r3, #139	; 0x8b
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	2c00      	cmp	r4, #0
 800c142:	d0dd      	beq.n	800c100 <snprintf+0x18>
 800c144:	2200      	movs	r2, #0
 800c146:	9b02      	ldr	r3, [sp, #8]
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e7d9      	b.n	800c100 <snprintf+0x18>
 800c14c:	200006d8 	.word	0x200006d8

0800c150 <sprintf>:
 800c150:	b40e      	push	{r1, r2, r3}
 800c152:	b500      	push	{lr}
 800c154:	490b      	ldr	r1, [pc, #44]	; (800c184 <sprintf+0x34>)
 800c156:	b09c      	sub	sp, #112	; 0x70
 800c158:	ab1d      	add	r3, sp, #116	; 0x74
 800c15a:	9002      	str	r0, [sp, #8]
 800c15c:	9006      	str	r0, [sp, #24]
 800c15e:	9107      	str	r1, [sp, #28]
 800c160:	9104      	str	r1, [sp, #16]
 800c162:	4809      	ldr	r0, [pc, #36]	; (800c188 <sprintf+0x38>)
 800c164:	4909      	ldr	r1, [pc, #36]	; (800c18c <sprintf+0x3c>)
 800c166:	cb04      	ldmia	r3!, {r2}
 800c168:	9105      	str	r1, [sp, #20]
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	a902      	add	r1, sp, #8
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	f001 fa7c 	bl	800d66c <_svfprintf_r>
 800c174:	2200      	movs	r2, #0
 800c176:	9b02      	ldr	r3, [sp, #8]
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	b01c      	add	sp, #112	; 0x70
 800c17c:	bc08      	pop	{r3}
 800c17e:	b003      	add	sp, #12
 800c180:	4718      	bx	r3
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	7fffffff 	.word	0x7fffffff
 800c188:	200006d8 	.word	0x200006d8
 800c18c:	ffff0208 	.word	0xffff0208

0800c190 <sscanf>:
 800c190:	b40e      	push	{r1, r2, r3}
 800c192:	b530      	push	{r4, r5, lr}
 800c194:	2381      	movs	r3, #129	; 0x81
 800c196:	b09c      	sub	sp, #112	; 0x70
 800c198:	466a      	mov	r2, sp
 800c19a:	ac1f      	add	r4, sp, #124	; 0x7c
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	cc20      	ldmia	r4!, {r5}
 800c1a0:	8293      	strh	r3, [r2, #20]
 800c1a2:	9002      	str	r0, [sp, #8]
 800c1a4:	9006      	str	r0, [sp, #24]
 800c1a6:	f7f3 ffad 	bl	8000104 <strlen>
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <sscanf+0x48>)
 800c1ac:	466a      	mov	r2, sp
 800c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9003      	str	r0, [sp, #12]
 800c1b4:	9007      	str	r0, [sp, #28]
 800c1b6:	4809      	ldr	r0, [pc, #36]	; (800c1dc <sscanf+0x4c>)
 800c1b8:	930e      	str	r3, [sp, #56]	; 0x38
 800c1ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	82d3      	strh	r3, [r2, #22]
 800c1c0:	a902      	add	r1, sp, #8
 800c1c2:	0023      	movs	r3, r4
 800c1c4:	002a      	movs	r2, r5
 800c1c6:	6800      	ldr	r0, [r0, #0]
 800c1c8:	9401      	str	r4, [sp, #4]
 800c1ca:	f002 fc91 	bl	800eaf0 <__ssvfscanf_r>
 800c1ce:	b01c      	add	sp, #112	; 0x70
 800c1d0:	bc30      	pop	{r4, r5}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	b003      	add	sp, #12
 800c1d6:	4718      	bx	r3
 800c1d8:	0800c209 	.word	0x0800c209
 800c1dc:	200006d8 	.word	0x200006d8

0800c1e0 <__sread>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	000c      	movs	r4, r1
 800c1e4:	250e      	movs	r5, #14
 800c1e6:	5f49      	ldrsh	r1, [r1, r5]
 800c1e8:	f000 f8ba 	bl	800c360 <_read_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	db03      	blt.n	800c1f8 <__sread+0x18>
 800c1f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c1f2:	181b      	adds	r3, r3, r0
 800c1f4:	6523      	str	r3, [r4, #80]	; 0x50
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	4a02      	ldr	r2, [pc, #8]	; (800c204 <__sread+0x24>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	e7f9      	b.n	800c1f6 <__sread+0x16>
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	ffffefff 	.word	0xffffefff

0800c208 <__seofread>:
 800c208:	2000      	movs	r0, #0
 800c20a:	4770      	bx	lr

0800c20c <__swrite>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	001f      	movs	r7, r3
 800c210:	898b      	ldrh	r3, [r1, #12]
 800c212:	0005      	movs	r5, r0
 800c214:	000c      	movs	r4, r1
 800c216:	0016      	movs	r6, r2
 800c218:	05db      	lsls	r3, r3, #23
 800c21a:	d505      	bpl.n	800c228 <__swrite+0x1c>
 800c21c:	230e      	movs	r3, #14
 800c21e:	5ec9      	ldrsh	r1, [r1, r3]
 800c220:	2200      	movs	r2, #0
 800c222:	2302      	movs	r3, #2
 800c224:	f000 f888 	bl	800c338 <_lseek_r>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	4a05      	ldr	r2, [pc, #20]	; (800c240 <__swrite+0x34>)
 800c22c:	0028      	movs	r0, r5
 800c22e:	4013      	ands	r3, r2
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	0032      	movs	r2, r6
 800c234:	230e      	movs	r3, #14
 800c236:	5ee1      	ldrsh	r1, [r4, r3]
 800c238:	003b      	movs	r3, r7
 800c23a:	f000 f8b7 	bl	800c3ac <_write_r>
 800c23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c240:	ffffefff 	.word	0xffffefff

0800c244 <__sseek>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	000c      	movs	r4, r1
 800c248:	250e      	movs	r5, #14
 800c24a:	5f49      	ldrsh	r1, [r1, r5]
 800c24c:	f000 f874 	bl	800c338 <_lseek_r>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	1c42      	adds	r2, r0, #1
 800c254:	d103      	bne.n	800c25e <__sseek+0x1a>
 800c256:	4a05      	ldr	r2, [pc, #20]	; (800c26c <__sseek+0x28>)
 800c258:	4013      	ands	r3, r2
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	bd70      	pop	{r4, r5, r6, pc}
 800c25e:	2280      	movs	r2, #128	; 0x80
 800c260:	0152      	lsls	r2, r2, #5
 800c262:	4313      	orrs	r3, r2
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	6520      	str	r0, [r4, #80]	; 0x50
 800c268:	e7f8      	b.n	800c25c <__sseek+0x18>
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	ffffefff 	.word	0xffffefff

0800c270 <__sclose>:
 800c270:	b510      	push	{r4, lr}
 800c272:	230e      	movs	r3, #14
 800c274:	5ec9      	ldrsh	r1, [r1, r3]
 800c276:	f000 f84d 	bl	800c314 <_close_r>
 800c27a:	bd10      	pop	{r4, pc}

0800c27c <memset>:
 800c27c:	0003      	movs	r3, r0
 800c27e:	1882      	adds	r2, r0, r2
 800c280:	4293      	cmp	r3, r2
 800c282:	d100      	bne.n	800c286 <memset+0xa>
 800c284:	4770      	bx	lr
 800c286:	7019      	strb	r1, [r3, #0]
 800c288:	3301      	adds	r3, #1
 800c28a:	e7f9      	b.n	800c280 <memset+0x4>

0800c28c <strncmp>:
 800c28c:	b530      	push	{r4, r5, lr}
 800c28e:	0005      	movs	r5, r0
 800c290:	1e10      	subs	r0, r2, #0
 800c292:	d00b      	beq.n	800c2ac <strncmp+0x20>
 800c294:	2400      	movs	r4, #0
 800c296:	3a01      	subs	r2, #1
 800c298:	5d2b      	ldrb	r3, [r5, r4]
 800c29a:	5d08      	ldrb	r0, [r1, r4]
 800c29c:	4283      	cmp	r3, r0
 800c29e:	d104      	bne.n	800c2aa <strncmp+0x1e>
 800c2a0:	42a2      	cmp	r2, r4
 800c2a2:	d002      	beq.n	800c2aa <strncmp+0x1e>
 800c2a4:	3401      	adds	r4, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1f6      	bne.n	800c298 <strncmp+0xc>
 800c2aa:	1a18      	subs	r0, r3, r0
 800c2ac:	bd30      	pop	{r4, r5, pc}

0800c2ae <strncpy>:
 800c2ae:	0003      	movs	r3, r0
 800c2b0:	b530      	push	{r4, r5, lr}
 800c2b2:	001d      	movs	r5, r3
 800c2b4:	2a00      	cmp	r2, #0
 800c2b6:	d006      	beq.n	800c2c6 <strncpy+0x18>
 800c2b8:	780c      	ldrb	r4, [r1, #0]
 800c2ba:	3a01      	subs	r2, #1
 800c2bc:	3301      	adds	r3, #1
 800c2be:	702c      	strb	r4, [r5, #0]
 800c2c0:	3101      	adds	r1, #1
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	d1f5      	bne.n	800c2b2 <strncpy+0x4>
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	189a      	adds	r2, r3, r2
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d100      	bne.n	800c2d0 <strncpy+0x22>
 800c2ce:	bd30      	pop	{r4, r5, pc}
 800c2d0:	7019      	strb	r1, [r3, #0]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	e7f9      	b.n	800c2ca <strncpy+0x1c>

0800c2d6 <strstr>:
 800c2d6:	780a      	ldrb	r2, [r1, #0]
 800c2d8:	b530      	push	{r4, r5, lr}
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d10c      	bne.n	800c2f8 <strstr+0x22>
 800c2de:	bd30      	pop	{r4, r5, pc}
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d108      	bne.n	800c2f6 <strstr+0x20>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	5ccc      	ldrb	r4, [r1, r3]
 800c2e8:	2c00      	cmp	r4, #0
 800c2ea:	d0f8      	beq.n	800c2de <strstr+0x8>
 800c2ec:	5cc5      	ldrb	r5, [r0, r3]
 800c2ee:	42a5      	cmp	r5, r4
 800c2f0:	d101      	bne.n	800c2f6 <strstr+0x20>
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	e7f7      	b.n	800c2e6 <strstr+0x10>
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	7803      	ldrb	r3, [r0, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1f0      	bne.n	800c2e0 <strstr+0xa>
 800c2fe:	0018      	movs	r0, r3
 800c300:	e7ed      	b.n	800c2de <strstr+0x8>
	...

0800c304 <__locale_mb_cur_max>:
 800c304:	2294      	movs	r2, #148	; 0x94
 800c306:	4b02      	ldr	r3, [pc, #8]	; (800c310 <__locale_mb_cur_max+0xc>)
 800c308:	0052      	lsls	r2, r2, #1
 800c30a:	5c98      	ldrb	r0, [r3, r2]
 800c30c:	4770      	bx	lr
 800c30e:	46c0      	nop			; (mov r8, r8)
 800c310:	20000448 	.word	0x20000448

0800c314 <_close_r>:
 800c314:	2300      	movs	r3, #0
 800c316:	b570      	push	{r4, r5, r6, lr}
 800c318:	4d06      	ldr	r5, [pc, #24]	; (800c334 <_close_r+0x20>)
 800c31a:	0004      	movs	r4, r0
 800c31c:	0008      	movs	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f7 fa01 	bl	8003726 <_close>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d103      	bne.n	800c330 <_close_r+0x1c>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d000      	beq.n	800c330 <_close_r+0x1c>
 800c32e:	6023      	str	r3, [r4, #0]
 800c330:	bd70      	pop	{r4, r5, r6, pc}
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	20000d10 	.word	0x20000d10

0800c338 <_lseek_r>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	0004      	movs	r4, r0
 800c33c:	0008      	movs	r0, r1
 800c33e:	0011      	movs	r1, r2
 800c340:	001a      	movs	r2, r3
 800c342:	2300      	movs	r3, #0
 800c344:	4d05      	ldr	r5, [pc, #20]	; (800c35c <_lseek_r+0x24>)
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	f7f7 fa0e 	bl	8003768 <_lseek>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d103      	bne.n	800c358 <_lseek_r+0x20>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d000      	beq.n	800c358 <_lseek_r+0x20>
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	46c0      	nop			; (mov r8, r8)
 800c35c:	20000d10 	.word	0x20000d10

0800c360 <_read_r>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	0004      	movs	r4, r0
 800c364:	0008      	movs	r0, r1
 800c366:	0011      	movs	r1, r2
 800c368:	001a      	movs	r2, r3
 800c36a:	2300      	movs	r3, #0
 800c36c:	4d05      	ldr	r5, [pc, #20]	; (800c384 <_read_r+0x24>)
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	f7f7 f9a0 	bl	80036b4 <_read>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d103      	bne.n	800c380 <_read_r+0x20>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d000      	beq.n	800c380 <_read_r+0x20>
 800c37e:	6023      	str	r3, [r4, #0]
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	20000d10 	.word	0x20000d10

0800c388 <_sbrk_r>:
 800c388:	2300      	movs	r3, #0
 800c38a:	b570      	push	{r4, r5, r6, lr}
 800c38c:	4d06      	ldr	r5, [pc, #24]	; (800c3a8 <_sbrk_r+0x20>)
 800c38e:	0004      	movs	r4, r0
 800c390:	0008      	movs	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f7f7 f9f4 	bl	8003780 <_sbrk>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d103      	bne.n	800c3a4 <_sbrk_r+0x1c>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d000      	beq.n	800c3a4 <_sbrk_r+0x1c>
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	bd70      	pop	{r4, r5, r6, pc}
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	20000d10 	.word	0x20000d10

0800c3ac <_write_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	0004      	movs	r4, r0
 800c3b0:	0008      	movs	r0, r1
 800c3b2:	0011      	movs	r1, r2
 800c3b4:	001a      	movs	r2, r3
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	4d05      	ldr	r5, [pc, #20]	; (800c3d0 <_write_r+0x24>)
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	f7f7 f997 	bl	80036ee <_write>
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	d103      	bne.n	800c3cc <_write_r+0x20>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d000      	beq.n	800c3cc <_write_r+0x20>
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	20000d10 	.word	0x20000d10

0800c3d4 <__errno>:
 800c3d4:	4b01      	ldr	r3, [pc, #4]	; (800c3dc <__errno+0x8>)
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	4770      	bx	lr
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	200006d8 	.word	0x200006d8

0800c3e0 <__libc_init_array>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	2600      	movs	r6, #0
 800c3e4:	4c0c      	ldr	r4, [pc, #48]	; (800c418 <__libc_init_array+0x38>)
 800c3e6:	4d0d      	ldr	r5, [pc, #52]	; (800c41c <__libc_init_array+0x3c>)
 800c3e8:	1b64      	subs	r4, r4, r5
 800c3ea:	10a4      	asrs	r4, r4, #2
 800c3ec:	42a6      	cmp	r6, r4
 800c3ee:	d109      	bne.n	800c404 <__libc_init_array+0x24>
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	f006 fcc5 	bl	8012d80 <_init>
 800c3f6:	4c0a      	ldr	r4, [pc, #40]	; (800c420 <__libc_init_array+0x40>)
 800c3f8:	4d0a      	ldr	r5, [pc, #40]	; (800c424 <__libc_init_array+0x44>)
 800c3fa:	1b64      	subs	r4, r4, r5
 800c3fc:	10a4      	asrs	r4, r4, #2
 800c3fe:	42a6      	cmp	r6, r4
 800c400:	d105      	bne.n	800c40e <__libc_init_array+0x2e>
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	00b3      	lsls	r3, r6, #2
 800c406:	58eb      	ldr	r3, [r5, r3]
 800c408:	4798      	blx	r3
 800c40a:	3601      	adds	r6, #1
 800c40c:	e7ee      	b.n	800c3ec <__libc_init_array+0xc>
 800c40e:	00b3      	lsls	r3, r6, #2
 800c410:	58eb      	ldr	r3, [r5, r3]
 800c412:	4798      	blx	r3
 800c414:	3601      	adds	r6, #1
 800c416:	e7f2      	b.n	800c3fe <__libc_init_array+0x1e>
 800c418:	08014bf4 	.word	0x08014bf4
 800c41c:	08014bf4 	.word	0x08014bf4
 800c420:	08014bfc 	.word	0x08014bfc
 800c424:	08014bf4 	.word	0x08014bf4

0800c428 <__retarget_lock_init_recursive>:
 800c428:	4770      	bx	lr

0800c42a <__retarget_lock_close_recursive>:
 800c42a:	4770      	bx	lr

0800c42c <__retarget_lock_acquire_recursive>:
 800c42c:	4770      	bx	lr

0800c42e <__retarget_lock_release_recursive>:
 800c42e:	4770      	bx	lr

0800c430 <sysconf>:
 800c430:	2380      	movs	r3, #128	; 0x80
 800c432:	b510      	push	{r4, lr}
 800c434:	2808      	cmp	r0, #8
 800c436:	d004      	beq.n	800c442 <sysconf+0x12>
 800c438:	f7ff ffcc 	bl	800c3d4 <__errno>
 800c43c:	2316      	movs	r3, #22
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	3b17      	subs	r3, #23
 800c442:	0018      	movs	r0, r3
 800c444:	bd10      	pop	{r4, pc}

0800c446 <memcpy>:
 800c446:	2300      	movs	r3, #0
 800c448:	b510      	push	{r4, lr}
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d100      	bne.n	800c450 <memcpy+0xa>
 800c44e:	bd10      	pop	{r4, pc}
 800c450:	5ccc      	ldrb	r4, [r1, r3]
 800c452:	54c4      	strb	r4, [r0, r3]
 800c454:	3301      	adds	r3, #1
 800c456:	e7f8      	b.n	800c44a <memcpy+0x4>

0800c458 <nan>:
 800c458:	2000      	movs	r0, #0
 800c45a:	4901      	ldr	r1, [pc, #4]	; (800c460 <nan+0x8>)
 800c45c:	4770      	bx	lr
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	7ff80000 	.word	0x7ff80000

0800c464 <nanf>:
 800c464:	4800      	ldr	r0, [pc, #0]	; (800c468 <nanf+0x4>)
 800c466:	4770      	bx	lr
 800c468:	7fc00000 	.word	0x7fc00000

0800c46c <register_fini>:
 800c46c:	4b03      	ldr	r3, [pc, #12]	; (800c47c <register_fini+0x10>)
 800c46e:	b510      	push	{r4, lr}
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <register_fini+0xe>
 800c474:	4802      	ldr	r0, [pc, #8]	; (800c480 <register_fini+0x14>)
 800c476:	f000 f805 	bl	800c484 <atexit>
 800c47a:	bd10      	pop	{r4, pc}
 800c47c:	00000000 	.word	0x00000000
 800c480:	080101e1 	.word	0x080101e1

0800c484 <atexit>:
 800c484:	2300      	movs	r3, #0
 800c486:	b510      	push	{r4, lr}
 800c488:	0001      	movs	r1, r0
 800c48a:	001a      	movs	r2, r3
 800c48c:	0018      	movs	r0, r3
 800c48e:	f003 fef9 	bl	8010284 <__register_exitproc>
 800c492:	bd10      	pop	{r4, pc}

0800c494 <_malloc_trim_r>:
 800c494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c496:	0004      	movs	r4, r0
 800c498:	2008      	movs	r0, #8
 800c49a:	000d      	movs	r5, r1
 800c49c:	f7ff ffc8 	bl	800c430 <sysconf>
 800c4a0:	0006      	movs	r6, r0
 800c4a2:	0020      	movs	r0, r4
 800c4a4:	f7fe fe7e 	bl	800b1a4 <__malloc_lock>
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	4f21      	ldr	r7, [pc, #132]	; (800c530 <_malloc_trim_r+0x9c>)
 800c4ac:	0031      	movs	r1, r6
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	4393      	bics	r3, r2
 800c4b4:	1b58      	subs	r0, r3, r5
 800c4b6:	3811      	subs	r0, #17
 800c4b8:	1980      	adds	r0, r0, r6
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	f7f3 fe3e 	bl	800013c <__udivsi3>
 800c4c0:	1e45      	subs	r5, r0, #1
 800c4c2:	4375      	muls	r5, r6
 800c4c4:	42ae      	cmp	r6, r5
 800c4c6:	dd04      	ble.n	800c4d2 <_malloc_trim_r+0x3e>
 800c4c8:	0020      	movs	r0, r4
 800c4ca:	f7fe fe73 	bl	800b1b4 <__malloc_unlock>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	0020      	movs	r0, r4
 800c4d6:	f7ff ff57 	bl	800c388 <_sbrk_r>
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	9a01      	ldr	r2, [sp, #4]
 800c4de:	189b      	adds	r3, r3, r2
 800c4e0:	4298      	cmp	r0, r3
 800c4e2:	d1f1      	bne.n	800c4c8 <_malloc_trim_r+0x34>
 800c4e4:	0020      	movs	r0, r4
 800c4e6:	4269      	negs	r1, r5
 800c4e8:	f7ff ff4e 	bl	800c388 <_sbrk_r>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d110      	bne.n	800c512 <_malloc_trim_r+0x7e>
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	0020      	movs	r0, r4
 800c4f4:	f7ff ff48 	bl	800c388 <_sbrk_r>
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	1a81      	subs	r1, r0, r2
 800c4fc:	290f      	cmp	r1, #15
 800c4fe:	dde3      	ble.n	800c4c8 <_malloc_trim_r+0x34>
 800c500:	4d0c      	ldr	r5, [pc, #48]	; (800c534 <_malloc_trim_r+0xa0>)
 800c502:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <_malloc_trim_r+0xa4>)
 800c504:	682d      	ldr	r5, [r5, #0]
 800c506:	1b40      	subs	r0, r0, r5
 800c508:	6018      	str	r0, [r3, #0]
 800c50a:	2301      	movs	r3, #1
 800c50c:	430b      	orrs	r3, r1
 800c50e:	6053      	str	r3, [r2, #4]
 800c510:	e7da      	b.n	800c4c8 <_malloc_trim_r+0x34>
 800c512:	2601      	movs	r6, #1
 800c514:	9b01      	ldr	r3, [sp, #4]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	1b5b      	subs	r3, r3, r5
 800c51a:	4333      	orrs	r3, r6
 800c51c:	6053      	str	r3, [r2, #4]
 800c51e:	4a06      	ldr	r2, [pc, #24]	; (800c538 <_malloc_trim_r+0xa4>)
 800c520:	0020      	movs	r0, r4
 800c522:	6813      	ldr	r3, [r2, #0]
 800c524:	1b5b      	subs	r3, r3, r5
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	f7fe fe44 	bl	800b1b4 <__malloc_unlock>
 800c52c:	0030      	movs	r0, r6
 800c52e:	e7cf      	b.n	800c4d0 <_malloc_trim_r+0x3c>
 800c530:	2000002c 	.word	0x2000002c
 800c534:	20000434 	.word	0x20000434
 800c538:	20000ba0 	.word	0x20000ba0

0800c53c <_free_r>:
 800c53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c53e:	1e0d      	subs	r5, r1, #0
 800c540:	9001      	str	r0, [sp, #4]
 800c542:	d02d      	beq.n	800c5a0 <_free_r+0x64>
 800c544:	f7fe fe2e 	bl	800b1a4 <__malloc_lock>
 800c548:	2301      	movs	r3, #1
 800c54a:	0029      	movs	r1, r5
 800c54c:	469c      	mov	ip, r3
 800c54e:	3908      	subs	r1, #8
 800c550:	684f      	ldr	r7, [r1, #4]
 800c552:	4662      	mov	r2, ip
 800c554:	003b      	movs	r3, r7
 800c556:	4664      	mov	r4, ip
 800c558:	4393      	bics	r3, r2
 800c55a:	18c8      	adds	r0, r1, r3
 800c55c:	6845      	ldr	r5, [r0, #4]
 800c55e:	3202      	adds	r2, #2
 800c560:	4395      	bics	r5, r2
 800c562:	4a4a      	ldr	r2, [pc, #296]	; (800c68c <_free_r+0x150>)
 800c564:	4027      	ands	r7, r4
 800c566:	6896      	ldr	r6, [r2, #8]
 800c568:	4286      	cmp	r6, r0
 800c56a:	d11a      	bne.n	800c5a2 <_free_r+0x66>
 800c56c:	195b      	adds	r3, r3, r5
 800c56e:	2f00      	cmp	r7, #0
 800c570:	d106      	bne.n	800c580 <_free_r+0x44>
 800c572:	6808      	ldr	r0, [r1, #0]
 800c574:	1a09      	subs	r1, r1, r0
 800c576:	688d      	ldr	r5, [r1, #8]
 800c578:	181b      	adds	r3, r3, r0
 800c57a:	68c8      	ldr	r0, [r1, #12]
 800c57c:	60e8      	str	r0, [r5, #12]
 800c57e:	6085      	str	r5, [r0, #8]
 800c580:	2001      	movs	r0, #1
 800c582:	4318      	orrs	r0, r3
 800c584:	6048      	str	r0, [r1, #4]
 800c586:	6091      	str	r1, [r2, #8]
 800c588:	4a41      	ldr	r2, [pc, #260]	; (800c690 <_free_r+0x154>)
 800c58a:	6812      	ldr	r2, [r2, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d804      	bhi.n	800c59a <_free_r+0x5e>
 800c590:	4b40      	ldr	r3, [pc, #256]	; (800c694 <_free_r+0x158>)
 800c592:	9801      	ldr	r0, [sp, #4]
 800c594:	6819      	ldr	r1, [r3, #0]
 800c596:	f7ff ff7d 	bl	800c494 <_malloc_trim_r>
 800c59a:	9801      	ldr	r0, [sp, #4]
 800c59c:	f7fe fe0a 	bl	800b1b4 <__malloc_unlock>
 800c5a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	6045      	str	r5, [r0, #4]
 800c5a6:	42b7      	cmp	r7, r6
 800c5a8:	d109      	bne.n	800c5be <_free_r+0x82>
 800c5aa:	680f      	ldr	r7, [r1, #0]
 800c5ac:	4c3a      	ldr	r4, [pc, #232]	; (800c698 <_free_r+0x15c>)
 800c5ae:	1bc9      	subs	r1, r1, r7
 800c5b0:	19db      	adds	r3, r3, r7
 800c5b2:	688f      	ldr	r7, [r1, #8]
 800c5b4:	42a7      	cmp	r7, r4
 800c5b6:	d02c      	beq.n	800c612 <_free_r+0xd6>
 800c5b8:	68cc      	ldr	r4, [r1, #12]
 800c5ba:	60fc      	str	r4, [r7, #12]
 800c5bc:	60a7      	str	r7, [r4, #8]
 800c5be:	1947      	adds	r7, r0, r5
 800c5c0:	687c      	ldr	r4, [r7, #4]
 800c5c2:	2701      	movs	r7, #1
 800c5c4:	423c      	tst	r4, r7
 800c5c6:	d10b      	bne.n	800c5e0 <_free_r+0xa4>
 800c5c8:	195b      	adds	r3, r3, r5
 800c5ca:	6885      	ldr	r5, [r0, #8]
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	d122      	bne.n	800c616 <_free_r+0xda>
 800c5d0:	4c31      	ldr	r4, [pc, #196]	; (800c698 <_free_r+0x15c>)
 800c5d2:	42a5      	cmp	r5, r4
 800c5d4:	d11f      	bne.n	800c616 <_free_r+0xda>
 800c5d6:	003e      	movs	r6, r7
 800c5d8:	6151      	str	r1, [r2, #20]
 800c5da:	6111      	str	r1, [r2, #16]
 800c5dc:	60cd      	str	r5, [r1, #12]
 800c5de:	608d      	str	r5, [r1, #8]
 800c5e0:	2501      	movs	r5, #1
 800c5e2:	0028      	movs	r0, r5
 800c5e4:	4318      	orrs	r0, r3
 800c5e6:	6048      	str	r0, [r1, #4]
 800c5e8:	50cb      	str	r3, [r1, r3]
 800c5ea:	2e00      	cmp	r6, #0
 800c5ec:	d1d5      	bne.n	800c59a <_free_r+0x5e>
 800c5ee:	2080      	movs	r0, #128	; 0x80
 800c5f0:	0080      	lsls	r0, r0, #2
 800c5f2:	4283      	cmp	r3, r0
 800c5f4:	d213      	bcs.n	800c61e <_free_r+0xe2>
 800c5f6:	08d8      	lsrs	r0, r3, #3
 800c5f8:	095b      	lsrs	r3, r3, #5
 800c5fa:	409d      	lsls	r5, r3
 800c5fc:	6853      	ldr	r3, [r2, #4]
 800c5fe:	431d      	orrs	r5, r3
 800c600:	00c3      	lsls	r3, r0, #3
 800c602:	189b      	adds	r3, r3, r2
 800c604:	6055      	str	r5, [r2, #4]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	60cb      	str	r3, [r1, #12]
 800c60a:	608a      	str	r2, [r1, #8]
 800c60c:	6099      	str	r1, [r3, #8]
 800c60e:	60d1      	str	r1, [r2, #12]
 800c610:	e7c3      	b.n	800c59a <_free_r+0x5e>
 800c612:	4666      	mov	r6, ip
 800c614:	e7d3      	b.n	800c5be <_free_r+0x82>
 800c616:	68c0      	ldr	r0, [r0, #12]
 800c618:	60e8      	str	r0, [r5, #12]
 800c61a:	6085      	str	r5, [r0, #8]
 800c61c:	e7e0      	b.n	800c5e0 <_free_r+0xa4>
 800c61e:	0a5d      	lsrs	r5, r3, #9
 800c620:	2d04      	cmp	r5, #4
 800c622:	d812      	bhi.n	800c64a <_free_r+0x10e>
 800c624:	0998      	lsrs	r0, r3, #6
 800c626:	3038      	adds	r0, #56	; 0x38
 800c628:	00c6      	lsls	r6, r0, #3
 800c62a:	18b6      	adds	r6, r6, r2
 800c62c:	68b5      	ldr	r5, [r6, #8]
 800c62e:	2703      	movs	r7, #3
 800c630:	42ae      	cmp	r6, r5
 800c632:	d125      	bne.n	800c680 <_free_r+0x144>
 800c634:	2301      	movs	r3, #1
 800c636:	1080      	asrs	r0, r0, #2
 800c638:	4083      	lsls	r3, r0
 800c63a:	6850      	ldr	r0, [r2, #4]
 800c63c:	4303      	orrs	r3, r0
 800c63e:	6053      	str	r3, [r2, #4]
 800c640:	60ce      	str	r6, [r1, #12]
 800c642:	608d      	str	r5, [r1, #8]
 800c644:	60b1      	str	r1, [r6, #8]
 800c646:	60e9      	str	r1, [r5, #12]
 800c648:	e7a7      	b.n	800c59a <_free_r+0x5e>
 800c64a:	2d14      	cmp	r5, #20
 800c64c:	d802      	bhi.n	800c654 <_free_r+0x118>
 800c64e:	0028      	movs	r0, r5
 800c650:	305b      	adds	r0, #91	; 0x5b
 800c652:	e7e9      	b.n	800c628 <_free_r+0xec>
 800c654:	2d54      	cmp	r5, #84	; 0x54
 800c656:	d802      	bhi.n	800c65e <_free_r+0x122>
 800c658:	0b18      	lsrs	r0, r3, #12
 800c65a:	306e      	adds	r0, #110	; 0x6e
 800c65c:	e7e4      	b.n	800c628 <_free_r+0xec>
 800c65e:	20aa      	movs	r0, #170	; 0xaa
 800c660:	0040      	lsls	r0, r0, #1
 800c662:	4285      	cmp	r5, r0
 800c664:	d802      	bhi.n	800c66c <_free_r+0x130>
 800c666:	0bd8      	lsrs	r0, r3, #15
 800c668:	3077      	adds	r0, #119	; 0x77
 800c66a:	e7dd      	b.n	800c628 <_free_r+0xec>
 800c66c:	4e0b      	ldr	r6, [pc, #44]	; (800c69c <_free_r+0x160>)
 800c66e:	207e      	movs	r0, #126	; 0x7e
 800c670:	42b5      	cmp	r5, r6
 800c672:	d8d9      	bhi.n	800c628 <_free_r+0xec>
 800c674:	0c98      	lsrs	r0, r3, #18
 800c676:	307c      	adds	r0, #124	; 0x7c
 800c678:	e7d6      	b.n	800c628 <_free_r+0xec>
 800c67a:	68ad      	ldr	r5, [r5, #8]
 800c67c:	42ae      	cmp	r6, r5
 800c67e:	d003      	beq.n	800c688 <_free_r+0x14c>
 800c680:	686a      	ldr	r2, [r5, #4]
 800c682:	43ba      	bics	r2, r7
 800c684:	429a      	cmp	r2, r3
 800c686:	d8f8      	bhi.n	800c67a <_free_r+0x13e>
 800c688:	68ee      	ldr	r6, [r5, #12]
 800c68a:	e7d9      	b.n	800c640 <_free_r+0x104>
 800c68c:	2000002c 	.word	0x2000002c
 800c690:	20000438 	.word	0x20000438
 800c694:	20000bd0 	.word	0x20000bd0
 800c698:	20000034 	.word	0x20000034
 800c69c:	00000554 	.word	0x00000554

0800c6a0 <rshift>:
 800c6a0:	0002      	movs	r2, r0
 800c6a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a4:	6904      	ldr	r4, [r0, #16]
 800c6a6:	114b      	asrs	r3, r1, #5
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	3214      	adds	r2, #20
 800c6ac:	9302      	str	r3, [sp, #8]
 800c6ae:	114d      	asrs	r5, r1, #5
 800c6b0:	0013      	movs	r3, r2
 800c6b2:	42ac      	cmp	r4, r5
 800c6b4:	dd32      	ble.n	800c71c <rshift+0x7c>
 800c6b6:	261f      	movs	r6, #31
 800c6b8:	000f      	movs	r7, r1
 800c6ba:	114b      	asrs	r3, r1, #5
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	00a5      	lsls	r5, r4, #2
 800c6c0:	18d3      	adds	r3, r2, r3
 800c6c2:	4037      	ands	r7, r6
 800c6c4:	1955      	adds	r5, r2, r5
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	9701      	str	r7, [sp, #4]
 800c6ca:	4231      	tst	r1, r6
 800c6cc:	d10d      	bne.n	800c6ea <rshift+0x4a>
 800c6ce:	0016      	movs	r6, r2
 800c6d0:	0019      	movs	r1, r3
 800c6d2:	428d      	cmp	r5, r1
 800c6d4:	d836      	bhi.n	800c744 <rshift+0xa4>
 800c6d6:	9900      	ldr	r1, [sp, #0]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	3903      	subs	r1, #3
 800c6dc:	428d      	cmp	r5, r1
 800c6de:	d302      	bcc.n	800c6e6 <rshift+0x46>
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	1ae4      	subs	r4, r4, r3
 800c6e4:	00a3      	lsls	r3, r4, #2
 800c6e6:	18d3      	adds	r3, r2, r3
 800c6e8:	e018      	b.n	800c71c <rshift+0x7c>
 800c6ea:	2120      	movs	r1, #32
 800c6ec:	9e01      	ldr	r6, [sp, #4]
 800c6ee:	9f01      	ldr	r7, [sp, #4]
 800c6f0:	1b89      	subs	r1, r1, r6
 800c6f2:	9e00      	ldr	r6, [sp, #0]
 800c6f4:	9103      	str	r1, [sp, #12]
 800c6f6:	ce02      	ldmia	r6!, {r1}
 800c6f8:	4694      	mov	ip, r2
 800c6fa:	40f9      	lsrs	r1, r7
 800c6fc:	42b5      	cmp	r5, r6
 800c6fe:	d816      	bhi.n	800c72e <rshift+0x8e>
 800c700:	9e00      	ldr	r6, [sp, #0]
 800c702:	2300      	movs	r3, #0
 800c704:	3601      	adds	r6, #1
 800c706:	42b5      	cmp	r5, r6
 800c708:	d303      	bcc.n	800c712 <rshift+0x72>
 800c70a:	9b02      	ldr	r3, [sp, #8]
 800c70c:	1ae3      	subs	r3, r4, r3
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	3b04      	subs	r3, #4
 800c712:	18d3      	adds	r3, r2, r3
 800c714:	6019      	str	r1, [r3, #0]
 800c716:	2900      	cmp	r1, #0
 800c718:	d000      	beq.n	800c71c <rshift+0x7c>
 800c71a:	3304      	adds	r3, #4
 800c71c:	1a99      	subs	r1, r3, r2
 800c71e:	1089      	asrs	r1, r1, #2
 800c720:	6101      	str	r1, [r0, #16]
 800c722:	4293      	cmp	r3, r2
 800c724:	d101      	bne.n	800c72a <rshift+0x8a>
 800c726:	2300      	movs	r3, #0
 800c728:	6143      	str	r3, [r0, #20]
 800c72a:	b005      	add	sp, #20
 800c72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c72e:	6837      	ldr	r7, [r6, #0]
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	409f      	lsls	r7, r3
 800c734:	430f      	orrs	r7, r1
 800c736:	4661      	mov	r1, ip
 800c738:	c180      	stmia	r1!, {r7}
 800c73a:	468c      	mov	ip, r1
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	ce02      	ldmia	r6!, {r1}
 800c740:	40d9      	lsrs	r1, r3
 800c742:	e7db      	b.n	800c6fc <rshift+0x5c>
 800c744:	c980      	ldmia	r1!, {r7}
 800c746:	c680      	stmia	r6!, {r7}
 800c748:	e7c3      	b.n	800c6d2 <rshift+0x32>

0800c74a <__hexdig_fun>:
 800c74a:	0002      	movs	r2, r0
 800c74c:	3a30      	subs	r2, #48	; 0x30
 800c74e:	0003      	movs	r3, r0
 800c750:	2a09      	cmp	r2, #9
 800c752:	d802      	bhi.n	800c75a <__hexdig_fun+0x10>
 800c754:	3b20      	subs	r3, #32
 800c756:	b2d8      	uxtb	r0, r3
 800c758:	4770      	bx	lr
 800c75a:	0002      	movs	r2, r0
 800c75c:	3a61      	subs	r2, #97	; 0x61
 800c75e:	2a05      	cmp	r2, #5
 800c760:	d801      	bhi.n	800c766 <__hexdig_fun+0x1c>
 800c762:	3b47      	subs	r3, #71	; 0x47
 800c764:	e7f7      	b.n	800c756 <__hexdig_fun+0xc>
 800c766:	001a      	movs	r2, r3
 800c768:	3a41      	subs	r2, #65	; 0x41
 800c76a:	2000      	movs	r0, #0
 800c76c:	2a05      	cmp	r2, #5
 800c76e:	d8f3      	bhi.n	800c758 <__hexdig_fun+0xe>
 800c770:	3b27      	subs	r3, #39	; 0x27
 800c772:	e7f0      	b.n	800c756 <__hexdig_fun+0xc>

0800c774 <__gethex>:
 800c774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c776:	b089      	sub	sp, #36	; 0x24
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	2302      	movs	r3, #2
 800c77c:	9201      	str	r2, [sp, #4]
 800c77e:	680a      	ldr	r2, [r1, #0]
 800c780:	425b      	negs	r3, r3
 800c782:	9003      	str	r0, [sp, #12]
 800c784:	9106      	str	r1, [sp, #24]
 800c786:	1c96      	adds	r6, r2, #2
 800c788:	1a9b      	subs	r3, r3, r2
 800c78a:	199a      	adds	r2, r3, r6
 800c78c:	9600      	str	r6, [sp, #0]
 800c78e:	9205      	str	r2, [sp, #20]
 800c790:	9a00      	ldr	r2, [sp, #0]
 800c792:	3601      	adds	r6, #1
 800c794:	7810      	ldrb	r0, [r2, #0]
 800c796:	2830      	cmp	r0, #48	; 0x30
 800c798:	d0f7      	beq.n	800c78a <__gethex+0x16>
 800c79a:	f7ff ffd6 	bl	800c74a <__hexdig_fun>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	001d      	movs	r5, r3
 800c7a2:	9302      	str	r3, [sp, #8]
 800c7a4:	4298      	cmp	r0, r3
 800c7a6:	d11d      	bne.n	800c7e4 <__gethex+0x70>
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	49a6      	ldr	r1, [pc, #664]	; (800ca44 <__gethex+0x2d0>)
 800c7ac:	9800      	ldr	r0, [sp, #0]
 800c7ae:	f7ff fd6d 	bl	800c28c <strncmp>
 800c7b2:	0007      	movs	r7, r0
 800c7b4:	42a8      	cmp	r0, r5
 800c7b6:	d169      	bne.n	800c88c <__gethex+0x118>
 800c7b8:	9b00      	ldr	r3, [sp, #0]
 800c7ba:	0034      	movs	r4, r6
 800c7bc:	7858      	ldrb	r0, [r3, #1]
 800c7be:	f7ff ffc4 	bl	800c74a <__hexdig_fun>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	9302      	str	r3, [sp, #8]
 800c7c6:	42a8      	cmp	r0, r5
 800c7c8:	d02f      	beq.n	800c82a <__gethex+0xb6>
 800c7ca:	9600      	str	r6, [sp, #0]
 800c7cc:	9b00      	ldr	r3, [sp, #0]
 800c7ce:	7818      	ldrb	r0, [r3, #0]
 800c7d0:	2830      	cmp	r0, #48	; 0x30
 800c7d2:	d009      	beq.n	800c7e8 <__gethex+0x74>
 800c7d4:	f7ff ffb9 	bl	800c74a <__hexdig_fun>
 800c7d8:	4242      	negs	r2, r0
 800c7da:	4142      	adcs	r2, r0
 800c7dc:	2301      	movs	r3, #1
 800c7de:	0035      	movs	r5, r6
 800c7e0:	9202      	str	r2, [sp, #8]
 800c7e2:	9305      	str	r3, [sp, #20]
 800c7e4:	9c00      	ldr	r4, [sp, #0]
 800c7e6:	e004      	b.n	800c7f2 <__gethex+0x7e>
 800c7e8:	9b00      	ldr	r3, [sp, #0]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	e7ed      	b.n	800c7cc <__gethex+0x58>
 800c7f0:	3401      	adds	r4, #1
 800c7f2:	7820      	ldrb	r0, [r4, #0]
 800c7f4:	f7ff ffa9 	bl	800c74a <__hexdig_fun>
 800c7f8:	1e07      	subs	r7, r0, #0
 800c7fa:	d1f9      	bne.n	800c7f0 <__gethex+0x7c>
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	0020      	movs	r0, r4
 800c800:	4990      	ldr	r1, [pc, #576]	; (800ca44 <__gethex+0x2d0>)
 800c802:	f7ff fd43 	bl	800c28c <strncmp>
 800c806:	2800      	cmp	r0, #0
 800c808:	d10d      	bne.n	800c826 <__gethex+0xb2>
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	d106      	bne.n	800c81c <__gethex+0xa8>
 800c80e:	3401      	adds	r4, #1
 800c810:	0025      	movs	r5, r4
 800c812:	7820      	ldrb	r0, [r4, #0]
 800c814:	f7ff ff99 	bl	800c74a <__hexdig_fun>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d102      	bne.n	800c822 <__gethex+0xae>
 800c81c:	1b2d      	subs	r5, r5, r4
 800c81e:	00af      	lsls	r7, r5, #2
 800c820:	e003      	b.n	800c82a <__gethex+0xb6>
 800c822:	3401      	adds	r4, #1
 800c824:	e7f5      	b.n	800c812 <__gethex+0x9e>
 800c826:	2d00      	cmp	r5, #0
 800c828:	d1f8      	bne.n	800c81c <__gethex+0xa8>
 800c82a:	2220      	movs	r2, #32
 800c82c:	7823      	ldrb	r3, [r4, #0]
 800c82e:	0026      	movs	r6, r4
 800c830:	4393      	bics	r3, r2
 800c832:	2b50      	cmp	r3, #80	; 0x50
 800c834:	d11d      	bne.n	800c872 <__gethex+0xfe>
 800c836:	7863      	ldrb	r3, [r4, #1]
 800c838:	2b2b      	cmp	r3, #43	; 0x2b
 800c83a:	d02c      	beq.n	800c896 <__gethex+0x122>
 800c83c:	2b2d      	cmp	r3, #45	; 0x2d
 800c83e:	d02e      	beq.n	800c89e <__gethex+0x12a>
 800c840:	2300      	movs	r3, #0
 800c842:	1c66      	adds	r6, r4, #1
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	7830      	ldrb	r0, [r6, #0]
 800c848:	f7ff ff7f 	bl	800c74a <__hexdig_fun>
 800c84c:	1e43      	subs	r3, r0, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b18      	cmp	r3, #24
 800c852:	d82b      	bhi.n	800c8ac <__gethex+0x138>
 800c854:	3810      	subs	r0, #16
 800c856:	0005      	movs	r5, r0
 800c858:	7870      	ldrb	r0, [r6, #1]
 800c85a:	f7ff ff76 	bl	800c74a <__hexdig_fun>
 800c85e:	1e43      	subs	r3, r0, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	3601      	adds	r6, #1
 800c864:	2b18      	cmp	r3, #24
 800c866:	d91c      	bls.n	800c8a2 <__gethex+0x12e>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d000      	beq.n	800c870 <__gethex+0xfc>
 800c86e:	426d      	negs	r5, r5
 800c870:	197f      	adds	r7, r7, r5
 800c872:	9b06      	ldr	r3, [sp, #24]
 800c874:	601e      	str	r6, [r3, #0]
 800c876:	9b02      	ldr	r3, [sp, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d019      	beq.n	800c8b0 <__gethex+0x13c>
 800c87c:	2600      	movs	r6, #0
 800c87e:	9b05      	ldr	r3, [sp, #20]
 800c880:	42b3      	cmp	r3, r6
 800c882:	d100      	bne.n	800c886 <__gethex+0x112>
 800c884:	3606      	adds	r6, #6
 800c886:	0030      	movs	r0, r6
 800c888:	b009      	add	sp, #36	; 0x24
 800c88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88c:	2301      	movs	r3, #1
 800c88e:	2700      	movs	r7, #0
 800c890:	9c00      	ldr	r4, [sp, #0]
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	e7c9      	b.n	800c82a <__gethex+0xb6>
 800c896:	2300      	movs	r3, #0
 800c898:	9304      	str	r3, [sp, #16]
 800c89a:	1ca6      	adds	r6, r4, #2
 800c89c:	e7d3      	b.n	800c846 <__gethex+0xd2>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e7fa      	b.n	800c898 <__gethex+0x124>
 800c8a2:	230a      	movs	r3, #10
 800c8a4:	435d      	muls	r5, r3
 800c8a6:	182d      	adds	r5, r5, r0
 800c8a8:	3d10      	subs	r5, #16
 800c8aa:	e7d5      	b.n	800c858 <__gethex+0xe4>
 800c8ac:	0026      	movs	r6, r4
 800c8ae:	e7e0      	b.n	800c872 <__gethex+0xfe>
 800c8b0:	9b00      	ldr	r3, [sp, #0]
 800c8b2:	9902      	ldr	r1, [sp, #8]
 800c8b4:	1ae3      	subs	r3, r4, r3
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	dc0a      	bgt.n	800c8d2 <__gethex+0x15e>
 800c8bc:	9803      	ldr	r0, [sp, #12]
 800c8be:	f000 fa5d 	bl	800cd7c <_Balloc>
 800c8c2:	1e05      	subs	r5, r0, #0
 800c8c4:	d108      	bne.n	800c8d8 <__gethex+0x164>
 800c8c6:	002a      	movs	r2, r5
 800c8c8:	21e4      	movs	r1, #228	; 0xe4
 800c8ca:	4b5f      	ldr	r3, [pc, #380]	; (800ca48 <__gethex+0x2d4>)
 800c8cc:	485f      	ldr	r0, [pc, #380]	; (800ca4c <__gethex+0x2d8>)
 800c8ce:	f003 fd19 	bl	8010304 <__assert_func>
 800c8d2:	3101      	adds	r1, #1
 800c8d4:	105b      	asrs	r3, r3, #1
 800c8d6:	e7ef      	b.n	800c8b8 <__gethex+0x144>
 800c8d8:	0003      	movs	r3, r0
 800c8da:	3314      	adds	r3, #20
 800c8dc:	9302      	str	r3, [sp, #8]
 800c8de:	9305      	str	r3, [sp, #20]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	001e      	movs	r6, r3
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	d33f      	bcc.n	800c96c <__gethex+0x1f8>
 800c8ec:	9c05      	ldr	r4, [sp, #20]
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	c440      	stmia	r4!, {r6}
 800c8f2:	1ae4      	subs	r4, r4, r3
 800c8f4:	10a4      	asrs	r4, r4, #2
 800c8f6:	0030      	movs	r0, r6
 800c8f8:	612c      	str	r4, [r5, #16]
 800c8fa:	f000 fb01 	bl	800cf00 <__hi0bits>
 800c8fe:	9b01      	ldr	r3, [sp, #4]
 800c900:	0164      	lsls	r4, r4, #5
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	1a26      	subs	r6, r4, r0
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	429e      	cmp	r6, r3
 800c90a:	dd51      	ble.n	800c9b0 <__gethex+0x23c>
 800c90c:	1af6      	subs	r6, r6, r3
 800c90e:	0031      	movs	r1, r6
 800c910:	0028      	movs	r0, r5
 800c912:	f000 fe7b 	bl	800d60c <__any_on>
 800c916:	1e04      	subs	r4, r0, #0
 800c918:	d016      	beq.n	800c948 <__gethex+0x1d4>
 800c91a:	2401      	movs	r4, #1
 800c91c:	231f      	movs	r3, #31
 800c91e:	0020      	movs	r0, r4
 800c920:	1e72      	subs	r2, r6, #1
 800c922:	4013      	ands	r3, r2
 800c924:	4098      	lsls	r0, r3
 800c926:	0003      	movs	r3, r0
 800c928:	1151      	asrs	r1, r2, #5
 800c92a:	9802      	ldr	r0, [sp, #8]
 800c92c:	0089      	lsls	r1, r1, #2
 800c92e:	5809      	ldr	r1, [r1, r0]
 800c930:	4219      	tst	r1, r3
 800c932:	d009      	beq.n	800c948 <__gethex+0x1d4>
 800c934:	42a2      	cmp	r2, r4
 800c936:	dd06      	ble.n	800c946 <__gethex+0x1d2>
 800c938:	0028      	movs	r0, r5
 800c93a:	1eb1      	subs	r1, r6, #2
 800c93c:	f000 fe66 	bl	800d60c <__any_on>
 800c940:	3402      	adds	r4, #2
 800c942:	2800      	cmp	r0, #0
 800c944:	d100      	bne.n	800c948 <__gethex+0x1d4>
 800c946:	2402      	movs	r4, #2
 800c948:	0031      	movs	r1, r6
 800c94a:	0028      	movs	r0, r5
 800c94c:	f7ff fea8 	bl	800c6a0 <rshift>
 800c950:	19bf      	adds	r7, r7, r6
 800c952:	9b01      	ldr	r3, [sp, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	42bb      	cmp	r3, r7
 800c958:	da3a      	bge.n	800c9d0 <__gethex+0x25c>
 800c95a:	0029      	movs	r1, r5
 800c95c:	9803      	ldr	r0, [sp, #12]
 800c95e:	f000 fa35 	bl	800cdcc <_Bfree>
 800c962:	2300      	movs	r3, #0
 800c964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c966:	26a3      	movs	r6, #163	; 0xa3
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	e78c      	b.n	800c886 <__gethex+0x112>
 800c96c:	3c01      	subs	r4, #1
 800c96e:	7823      	ldrb	r3, [r4, #0]
 800c970:	2b2e      	cmp	r3, #46	; 0x2e
 800c972:	d012      	beq.n	800c99a <__gethex+0x226>
 800c974:	9b04      	ldr	r3, [sp, #16]
 800c976:	2b20      	cmp	r3, #32
 800c978:	d104      	bne.n	800c984 <__gethex+0x210>
 800c97a:	9b05      	ldr	r3, [sp, #20]
 800c97c:	c340      	stmia	r3!, {r6}
 800c97e:	2600      	movs	r6, #0
 800c980:	9305      	str	r3, [sp, #20]
 800c982:	9604      	str	r6, [sp, #16]
 800c984:	7820      	ldrb	r0, [r4, #0]
 800c986:	f7ff fee0 	bl	800c74a <__hexdig_fun>
 800c98a:	230f      	movs	r3, #15
 800c98c:	4018      	ands	r0, r3
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	4098      	lsls	r0, r3
 800c992:	3304      	adds	r3, #4
 800c994:	4306      	orrs	r6, r0
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	e7a5      	b.n	800c8e6 <__gethex+0x172>
 800c99a:	9b00      	ldr	r3, [sp, #0]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d8e9      	bhi.n	800c974 <__gethex+0x200>
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	0020      	movs	r0, r4
 800c9a4:	4927      	ldr	r1, [pc, #156]	; (800ca44 <__gethex+0x2d0>)
 800c9a6:	f7ff fc71 	bl	800c28c <strncmp>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d1e2      	bne.n	800c974 <__gethex+0x200>
 800c9ae:	e79a      	b.n	800c8e6 <__gethex+0x172>
 800c9b0:	9b00      	ldr	r3, [sp, #0]
 800c9b2:	2400      	movs	r4, #0
 800c9b4:	429e      	cmp	r6, r3
 800c9b6:	dacc      	bge.n	800c952 <__gethex+0x1de>
 800c9b8:	1b9e      	subs	r6, r3, r6
 800c9ba:	0029      	movs	r1, r5
 800c9bc:	0032      	movs	r2, r6
 800c9be:	9803      	ldr	r0, [sp, #12]
 800c9c0:	f000 fbf0 	bl	800d1a4 <__lshift>
 800c9c4:	0003      	movs	r3, r0
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	0005      	movs	r5, r0
 800c9ca:	1bbf      	subs	r7, r7, r6
 800c9cc:	9302      	str	r3, [sp, #8]
 800c9ce:	e7c0      	b.n	800c952 <__gethex+0x1de>
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	685e      	ldr	r6, [r3, #4]
 800c9d4:	42be      	cmp	r6, r7
 800c9d6:	dd70      	ble.n	800caba <__gethex+0x346>
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	1bf6      	subs	r6, r6, r7
 800c9dc:	42b3      	cmp	r3, r6
 800c9de:	dc37      	bgt.n	800ca50 <__gethex+0x2dc>
 800c9e0:	9b01      	ldr	r3, [sp, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d024      	beq.n	800ca32 <__gethex+0x2be>
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d026      	beq.n	800ca3a <__gethex+0x2c6>
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d117      	bne.n	800ca20 <__gethex+0x2ac>
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	42b3      	cmp	r3, r6
 800c9f4:	d114      	bne.n	800ca20 <__gethex+0x2ac>
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d10b      	bne.n	800ca12 <__gethex+0x29e>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	9a07      	ldr	r2, [sp, #28]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	2662      	movs	r6, #98	; 0x62
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	2301      	movs	r3, #1
 800ca06:	9a02      	ldr	r2, [sp, #8]
 800ca08:	612b      	str	r3, [r5, #16]
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca0e:	601d      	str	r5, [r3, #0]
 800ca10:	e739      	b.n	800c886 <__gethex+0x112>
 800ca12:	9900      	ldr	r1, [sp, #0]
 800ca14:	0028      	movs	r0, r5
 800ca16:	3901      	subs	r1, #1
 800ca18:	f000 fdf8 	bl	800d60c <__any_on>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d1ec      	bne.n	800c9fa <__gethex+0x286>
 800ca20:	0029      	movs	r1, r5
 800ca22:	9803      	ldr	r0, [sp, #12]
 800ca24:	f000 f9d2 	bl	800cdcc <_Bfree>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca2c:	2650      	movs	r6, #80	; 0x50
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	e729      	b.n	800c886 <__gethex+0x112>
 800ca32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1f3      	bne.n	800ca20 <__gethex+0x2ac>
 800ca38:	e7df      	b.n	800c9fa <__gethex+0x286>
 800ca3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1dc      	bne.n	800c9fa <__gethex+0x286>
 800ca40:	e7ee      	b.n	800ca20 <__gethex+0x2ac>
 800ca42:	46c0      	nop			; (mov r8, r8)
 800ca44:	08014780 	.word	0x08014780
 800ca48:	080148e1 	.word	0x080148e1
 800ca4c:	080148f2 	.word	0x080148f2
 800ca50:	1e77      	subs	r7, r6, #1
 800ca52:	2c00      	cmp	r4, #0
 800ca54:	d12f      	bne.n	800cab6 <__gethex+0x342>
 800ca56:	2f00      	cmp	r7, #0
 800ca58:	d004      	beq.n	800ca64 <__gethex+0x2f0>
 800ca5a:	0039      	movs	r1, r7
 800ca5c:	0028      	movs	r0, r5
 800ca5e:	f000 fdd5 	bl	800d60c <__any_on>
 800ca62:	0004      	movs	r4, r0
 800ca64:	231f      	movs	r3, #31
 800ca66:	117a      	asrs	r2, r7, #5
 800ca68:	401f      	ands	r7, r3
 800ca6a:	3b1e      	subs	r3, #30
 800ca6c:	40bb      	lsls	r3, r7
 800ca6e:	9902      	ldr	r1, [sp, #8]
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	5852      	ldr	r2, [r2, r1]
 800ca74:	421a      	tst	r2, r3
 800ca76:	d001      	beq.n	800ca7c <__gethex+0x308>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	431c      	orrs	r4, r3
 800ca7c:	9b00      	ldr	r3, [sp, #0]
 800ca7e:	0031      	movs	r1, r6
 800ca80:	1b9b      	subs	r3, r3, r6
 800ca82:	2602      	movs	r6, #2
 800ca84:	0028      	movs	r0, r5
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	f7ff fe0a 	bl	800c6a0 <rshift>
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	685f      	ldr	r7, [r3, #4]
 800ca90:	2c00      	cmp	r4, #0
 800ca92:	d041      	beq.n	800cb18 <__gethex+0x3a4>
 800ca94:	9b01      	ldr	r3, [sp, #4]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d010      	beq.n	800cabe <__gethex+0x34a>
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d012      	beq.n	800cac6 <__gethex+0x352>
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d106      	bne.n	800cab2 <__gethex+0x33e>
 800caa4:	07a2      	lsls	r2, r4, #30
 800caa6:	d504      	bpl.n	800cab2 <__gethex+0x33e>
 800caa8:	9a02      	ldr	r2, [sp, #8]
 800caaa:	6812      	ldr	r2, [r2, #0]
 800caac:	4314      	orrs	r4, r2
 800caae:	421c      	tst	r4, r3
 800cab0:	d10c      	bne.n	800cacc <__gethex+0x358>
 800cab2:	2310      	movs	r3, #16
 800cab4:	e02f      	b.n	800cb16 <__gethex+0x3a2>
 800cab6:	2401      	movs	r4, #1
 800cab8:	e7d4      	b.n	800ca64 <__gethex+0x2f0>
 800caba:	2601      	movs	r6, #1
 800cabc:	e7e8      	b.n	800ca90 <__gethex+0x31c>
 800cabe:	2301      	movs	r3, #1
 800cac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cac2:	1a9b      	subs	r3, r3, r2
 800cac4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0f2      	beq.n	800cab2 <__gethex+0x33e>
 800cacc:	692b      	ldr	r3, [r5, #16]
 800cace:	2000      	movs	r0, #0
 800cad0:	9302      	str	r3, [sp, #8]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	002b      	movs	r3, r5
 800cad8:	9a04      	ldr	r2, [sp, #16]
 800cada:	3314      	adds	r3, #20
 800cadc:	1899      	adds	r1, r3, r2
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	1c54      	adds	r4, r2, #1
 800cae2:	d01e      	beq.n	800cb22 <__gethex+0x3ae>
 800cae4:	3201      	adds	r2, #1
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	002b      	movs	r3, r5
 800caea:	3314      	adds	r3, #20
 800caec:	2e02      	cmp	r6, #2
 800caee:	d141      	bne.n	800cb74 <__gethex+0x400>
 800caf0:	9a01      	ldr	r2, [sp, #4]
 800caf2:	9900      	ldr	r1, [sp, #0]
 800caf4:	6812      	ldr	r2, [r2, #0]
 800caf6:	3a01      	subs	r2, #1
 800caf8:	428a      	cmp	r2, r1
 800cafa:	d10b      	bne.n	800cb14 <__gethex+0x3a0>
 800cafc:	221f      	movs	r2, #31
 800cafe:	9800      	ldr	r0, [sp, #0]
 800cb00:	1149      	asrs	r1, r1, #5
 800cb02:	4002      	ands	r2, r0
 800cb04:	2001      	movs	r0, #1
 800cb06:	0004      	movs	r4, r0
 800cb08:	4094      	lsls	r4, r2
 800cb0a:	0089      	lsls	r1, r1, #2
 800cb0c:	58cb      	ldr	r3, [r1, r3]
 800cb0e:	4223      	tst	r3, r4
 800cb10:	d000      	beq.n	800cb14 <__gethex+0x3a0>
 800cb12:	2601      	movs	r6, #1
 800cb14:	2320      	movs	r3, #32
 800cb16:	431e      	orrs	r6, r3
 800cb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb1a:	601d      	str	r5, [r3, #0]
 800cb1c:	9b07      	ldr	r3, [sp, #28]
 800cb1e:	601f      	str	r7, [r3, #0]
 800cb20:	e6b1      	b.n	800c886 <__gethex+0x112>
 800cb22:	c301      	stmia	r3!, {r0}
 800cb24:	4299      	cmp	r1, r3
 800cb26:	d8da      	bhi.n	800cade <__gethex+0x36a>
 800cb28:	68ab      	ldr	r3, [r5, #8]
 800cb2a:	9a02      	ldr	r2, [sp, #8]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	db18      	blt.n	800cb62 <__gethex+0x3ee>
 800cb30:	6869      	ldr	r1, [r5, #4]
 800cb32:	9803      	ldr	r0, [sp, #12]
 800cb34:	3101      	adds	r1, #1
 800cb36:	f000 f921 	bl	800cd7c <_Balloc>
 800cb3a:	1e04      	subs	r4, r0, #0
 800cb3c:	d104      	bne.n	800cb48 <__gethex+0x3d4>
 800cb3e:	0022      	movs	r2, r4
 800cb40:	2184      	movs	r1, #132	; 0x84
 800cb42:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <__gethex+0x440>)
 800cb44:	481c      	ldr	r0, [pc, #112]	; (800cbb8 <__gethex+0x444>)
 800cb46:	e6c2      	b.n	800c8ce <__gethex+0x15a>
 800cb48:	0029      	movs	r1, r5
 800cb4a:	692a      	ldr	r2, [r5, #16]
 800cb4c:	310c      	adds	r1, #12
 800cb4e:	3202      	adds	r2, #2
 800cb50:	0092      	lsls	r2, r2, #2
 800cb52:	300c      	adds	r0, #12
 800cb54:	f7ff fc77 	bl	800c446 <memcpy>
 800cb58:	0029      	movs	r1, r5
 800cb5a:	9803      	ldr	r0, [sp, #12]
 800cb5c:	f000 f936 	bl	800cdcc <_Bfree>
 800cb60:	0025      	movs	r5, r4
 800cb62:	692b      	ldr	r3, [r5, #16]
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	612a      	str	r2, [r5, #16]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	18eb      	adds	r3, r5, r3
 800cb70:	605a      	str	r2, [r3, #4]
 800cb72:	e7b9      	b.n	800cae8 <__gethex+0x374>
 800cb74:	692a      	ldr	r2, [r5, #16]
 800cb76:	9902      	ldr	r1, [sp, #8]
 800cb78:	428a      	cmp	r2, r1
 800cb7a:	dd09      	ble.n	800cb90 <__gethex+0x41c>
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	0028      	movs	r0, r5
 800cb80:	f7ff fd8e 	bl	800c6a0 <rshift>
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	3701      	adds	r7, #1
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	42bb      	cmp	r3, r7
 800cb8c:	dac1      	bge.n	800cb12 <__gethex+0x39e>
 800cb8e:	e6e4      	b.n	800c95a <__gethex+0x1e6>
 800cb90:	221f      	movs	r2, #31
 800cb92:	9c00      	ldr	r4, [sp, #0]
 800cb94:	9900      	ldr	r1, [sp, #0]
 800cb96:	2601      	movs	r6, #1
 800cb98:	4014      	ands	r4, r2
 800cb9a:	4211      	tst	r1, r2
 800cb9c:	d0ba      	beq.n	800cb14 <__gethex+0x3a0>
 800cb9e:	9a04      	ldr	r2, [sp, #16]
 800cba0:	189b      	adds	r3, r3, r2
 800cba2:	3b04      	subs	r3, #4
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	f000 f9ab 	bl	800cf00 <__hi0bits>
 800cbaa:	2320      	movs	r3, #32
 800cbac:	1b1b      	subs	r3, r3, r4
 800cbae:	4298      	cmp	r0, r3
 800cbb0:	dbe4      	blt.n	800cb7c <__gethex+0x408>
 800cbb2:	e7af      	b.n	800cb14 <__gethex+0x3a0>
 800cbb4:	080148e1 	.word	0x080148e1
 800cbb8:	080148f2 	.word	0x080148f2

0800cbbc <L_shift>:
 800cbbc:	2308      	movs	r3, #8
 800cbbe:	b570      	push	{r4, r5, r6, lr}
 800cbc0:	2520      	movs	r5, #32
 800cbc2:	1a9a      	subs	r2, r3, r2
 800cbc4:	0092      	lsls	r2, r2, #2
 800cbc6:	1aad      	subs	r5, r5, r2
 800cbc8:	6843      	ldr	r3, [r0, #4]
 800cbca:	6804      	ldr	r4, [r0, #0]
 800cbcc:	001e      	movs	r6, r3
 800cbce:	40ae      	lsls	r6, r5
 800cbd0:	40d3      	lsrs	r3, r2
 800cbd2:	4334      	orrs	r4, r6
 800cbd4:	6004      	str	r4, [r0, #0]
 800cbd6:	6043      	str	r3, [r0, #4]
 800cbd8:	3004      	adds	r0, #4
 800cbda:	4288      	cmp	r0, r1
 800cbdc:	d3f4      	bcc.n	800cbc8 <L_shift+0xc>
 800cbde:	bd70      	pop	{r4, r5, r6, pc}

0800cbe0 <__match>:
 800cbe0:	b530      	push	{r4, r5, lr}
 800cbe2:	6803      	ldr	r3, [r0, #0]
 800cbe4:	780c      	ldrb	r4, [r1, #0]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	2c00      	cmp	r4, #0
 800cbea:	d102      	bne.n	800cbf2 <__match+0x12>
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	2001      	movs	r0, #1
 800cbf0:	bd30      	pop	{r4, r5, pc}
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	0015      	movs	r5, r2
 800cbf6:	3d41      	subs	r5, #65	; 0x41
 800cbf8:	2d19      	cmp	r5, #25
 800cbfa:	d800      	bhi.n	800cbfe <__match+0x1e>
 800cbfc:	3220      	adds	r2, #32
 800cbfe:	3101      	adds	r1, #1
 800cc00:	42a2      	cmp	r2, r4
 800cc02:	d0ef      	beq.n	800cbe4 <__match+0x4>
 800cc04:	2000      	movs	r0, #0
 800cc06:	e7f3      	b.n	800cbf0 <__match+0x10>

0800cc08 <__hexnan>:
 800cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0a:	680b      	ldr	r3, [r1, #0]
 800cc0c:	b08b      	sub	sp, #44	; 0x2c
 800cc0e:	9201      	str	r2, [sp, #4]
 800cc10:	9901      	ldr	r1, [sp, #4]
 800cc12:	115a      	asrs	r2, r3, #5
 800cc14:	0092      	lsls	r2, r2, #2
 800cc16:	188a      	adds	r2, r1, r2
 800cc18:	9202      	str	r2, [sp, #8]
 800cc1a:	0019      	movs	r1, r3
 800cc1c:	221f      	movs	r2, #31
 800cc1e:	4011      	ands	r1, r2
 800cc20:	9008      	str	r0, [sp, #32]
 800cc22:	9106      	str	r1, [sp, #24]
 800cc24:	4213      	tst	r3, r2
 800cc26:	d002      	beq.n	800cc2e <__hexnan+0x26>
 800cc28:	9b02      	ldr	r3, [sp, #8]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	9b02      	ldr	r3, [sp, #8]
 800cc30:	2500      	movs	r5, #0
 800cc32:	1f1f      	subs	r7, r3, #4
 800cc34:	003e      	movs	r6, r7
 800cc36:	003c      	movs	r4, r7
 800cc38:	9b08      	ldr	r3, [sp, #32]
 800cc3a:	603d      	str	r5, [r7, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	9507      	str	r5, [sp, #28]
 800cc40:	9305      	str	r3, [sp, #20]
 800cc42:	9503      	str	r5, [sp, #12]
 800cc44:	9b05      	ldr	r3, [sp, #20]
 800cc46:	3301      	adds	r3, #1
 800cc48:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	785b      	ldrb	r3, [r3, #1]
 800cc4e:	9304      	str	r3, [sp, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d028      	beq.n	800cca6 <__hexnan+0x9e>
 800cc54:	9804      	ldr	r0, [sp, #16]
 800cc56:	f7ff fd78 	bl	800c74a <__hexdig_fun>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d154      	bne.n	800cd08 <__hexnan+0x100>
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	2b20      	cmp	r3, #32
 800cc62:	d819      	bhi.n	800cc98 <__hexnan+0x90>
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	9a07      	ldr	r2, [sp, #28]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	dd12      	ble.n	800cc92 <__hexnan+0x8a>
 800cc6c:	42b4      	cmp	r4, r6
 800cc6e:	d206      	bcs.n	800cc7e <__hexnan+0x76>
 800cc70:	2d07      	cmp	r5, #7
 800cc72:	dc04      	bgt.n	800cc7e <__hexnan+0x76>
 800cc74:	002a      	movs	r2, r5
 800cc76:	0031      	movs	r1, r6
 800cc78:	0020      	movs	r0, r4
 800cc7a:	f7ff ff9f 	bl	800cbbc <L_shift>
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	2508      	movs	r5, #8
 800cc82:	429c      	cmp	r4, r3
 800cc84:	d905      	bls.n	800cc92 <__hexnan+0x8a>
 800cc86:	1f26      	subs	r6, r4, #4
 800cc88:	2500      	movs	r5, #0
 800cc8a:	0034      	movs	r4, r6
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	6035      	str	r5, [r6, #0]
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc94:	9305      	str	r3, [sp, #20]
 800cc96:	e7d5      	b.n	800cc44 <__hexnan+0x3c>
 800cc98:	9b04      	ldr	r3, [sp, #16]
 800cc9a:	2b29      	cmp	r3, #41	; 0x29
 800cc9c:	d159      	bne.n	800cd52 <__hexnan+0x14a>
 800cc9e:	9b05      	ldr	r3, [sp, #20]
 800cca0:	9a08      	ldr	r2, [sp, #32]
 800cca2:	3302      	adds	r3, #2
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d052      	beq.n	800cd52 <__hexnan+0x14a>
 800ccac:	42b4      	cmp	r4, r6
 800ccae:	d206      	bcs.n	800ccbe <__hexnan+0xb6>
 800ccb0:	2d07      	cmp	r5, #7
 800ccb2:	dc04      	bgt.n	800ccbe <__hexnan+0xb6>
 800ccb4:	002a      	movs	r2, r5
 800ccb6:	0031      	movs	r1, r6
 800ccb8:	0020      	movs	r0, r4
 800ccba:	f7ff ff7f 	bl	800cbbc <L_shift>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	429c      	cmp	r4, r3
 800ccc2:	d935      	bls.n	800cd30 <__hexnan+0x128>
 800ccc4:	001a      	movs	r2, r3
 800ccc6:	0023      	movs	r3, r4
 800ccc8:	cb02      	ldmia	r3!, {r1}
 800ccca:	c202      	stmia	r2!, {r1}
 800cccc:	429f      	cmp	r7, r3
 800ccce:	d2fb      	bcs.n	800ccc8 <__hexnan+0xc0>
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	1c62      	adds	r2, r4, #1
 800ccd4:	1ed9      	subs	r1, r3, #3
 800ccd6:	2304      	movs	r3, #4
 800ccd8:	4291      	cmp	r1, r2
 800ccda:	d305      	bcc.n	800cce8 <__hexnan+0xe0>
 800ccdc:	9b02      	ldr	r3, [sp, #8]
 800ccde:	3b04      	subs	r3, #4
 800cce0:	1b1b      	subs	r3, r3, r4
 800cce2:	089b      	lsrs	r3, r3, #2
 800cce4:	3301      	adds	r3, #1
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	9a01      	ldr	r2, [sp, #4]
 800ccea:	18d3      	adds	r3, r2, r3
 800ccec:	2200      	movs	r2, #0
 800ccee:	c304      	stmia	r3!, {r2}
 800ccf0:	429f      	cmp	r7, r3
 800ccf2:	d2fc      	bcs.n	800ccee <__hexnan+0xe6>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d104      	bne.n	800cd04 <__hexnan+0xfc>
 800ccfa:	9b01      	ldr	r3, [sp, #4]
 800ccfc:	429f      	cmp	r7, r3
 800ccfe:	d126      	bne.n	800cd4e <__hexnan+0x146>
 800cd00:	2301      	movs	r3, #1
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	2005      	movs	r0, #5
 800cd06:	e025      	b.n	800cd54 <__hexnan+0x14c>
 800cd08:	9b03      	ldr	r3, [sp, #12]
 800cd0a:	3501      	adds	r5, #1
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	9303      	str	r3, [sp, #12]
 800cd10:	2d08      	cmp	r5, #8
 800cd12:	dd06      	ble.n	800cd22 <__hexnan+0x11a>
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	429c      	cmp	r4, r3
 800cd18:	d9bb      	bls.n	800cc92 <__hexnan+0x8a>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2501      	movs	r5, #1
 800cd1e:	3c04      	subs	r4, #4
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	220f      	movs	r2, #15
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	4010      	ands	r0, r2
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	4303      	orrs	r3, r0
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	e7b0      	b.n	800cc92 <__hexnan+0x8a>
 800cd30:	9b06      	ldr	r3, [sp, #24]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0de      	beq.n	800ccf4 <__hexnan+0xec>
 800cd36:	2320      	movs	r3, #32
 800cd38:	9a06      	ldr	r2, [sp, #24]
 800cd3a:	9902      	ldr	r1, [sp, #8]
 800cd3c:	1a9b      	subs	r3, r3, r2
 800cd3e:	2201      	movs	r2, #1
 800cd40:	4252      	negs	r2, r2
 800cd42:	40da      	lsrs	r2, r3
 800cd44:	3904      	subs	r1, #4
 800cd46:	680b      	ldr	r3, [r1, #0]
 800cd48:	4013      	ands	r3, r2
 800cd4a:	600b      	str	r3, [r1, #0]
 800cd4c:	e7d2      	b.n	800ccf4 <__hexnan+0xec>
 800cd4e:	3f04      	subs	r7, #4
 800cd50:	e7d0      	b.n	800ccf4 <__hexnan+0xec>
 800cd52:	2004      	movs	r0, #4
 800cd54:	b00b      	add	sp, #44	; 0x2c
 800cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd58 <__ascii_mbtowc>:
 800cd58:	b082      	sub	sp, #8
 800cd5a:	2900      	cmp	r1, #0
 800cd5c:	d100      	bne.n	800cd60 <__ascii_mbtowc+0x8>
 800cd5e:	a901      	add	r1, sp, #4
 800cd60:	1e10      	subs	r0, r2, #0
 800cd62:	d006      	beq.n	800cd72 <__ascii_mbtowc+0x1a>
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d006      	beq.n	800cd76 <__ascii_mbtowc+0x1e>
 800cd68:	7813      	ldrb	r3, [r2, #0]
 800cd6a:	600b      	str	r3, [r1, #0]
 800cd6c:	7810      	ldrb	r0, [r2, #0]
 800cd6e:	1e43      	subs	r3, r0, #1
 800cd70:	4198      	sbcs	r0, r3
 800cd72:	b002      	add	sp, #8
 800cd74:	4770      	bx	lr
 800cd76:	2002      	movs	r0, #2
 800cd78:	4240      	negs	r0, r0
 800cd7a:	e7fa      	b.n	800cd72 <__ascii_mbtowc+0x1a>

0800cd7c <_Balloc>:
 800cd7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cd7e:	b570      	push	{r4, r5, r6, lr}
 800cd80:	0006      	movs	r6, r0
 800cd82:	000c      	movs	r4, r1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d012      	beq.n	800cdae <_Balloc+0x32>
 800cd88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800cd8a:	00a2      	lsls	r2, r4, #2
 800cd8c:	189b      	adds	r3, r3, r2
 800cd8e:	6818      	ldr	r0, [r3, #0]
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d115      	bne.n	800cdc0 <_Balloc+0x44>
 800cd94:	2101      	movs	r1, #1
 800cd96:	000d      	movs	r5, r1
 800cd98:	40a5      	lsls	r5, r4
 800cd9a:	1d6a      	adds	r2, r5, #5
 800cd9c:	0030      	movs	r0, r6
 800cd9e:	0092      	lsls	r2, r2, #2
 800cda0:	f003 face 	bl	8010340 <_calloc_r>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d009      	beq.n	800cdbc <_Balloc+0x40>
 800cda8:	6044      	str	r4, [r0, #4]
 800cdaa:	6085      	str	r5, [r0, #8]
 800cdac:	e00a      	b.n	800cdc4 <_Balloc+0x48>
 800cdae:	2221      	movs	r2, #33	; 0x21
 800cdb0:	2104      	movs	r1, #4
 800cdb2:	f003 fac5 	bl	8010340 <_calloc_r>
 800cdb6:	6470      	str	r0, [r6, #68]	; 0x44
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1e5      	bne.n	800cd88 <_Balloc+0xc>
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
 800cdc0:	6802      	ldr	r2, [r0, #0]
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6103      	str	r3, [r0, #16]
 800cdc8:	60c3      	str	r3, [r0, #12]
 800cdca:	e7f8      	b.n	800cdbe <_Balloc+0x42>

0800cdcc <_Bfree>:
 800cdcc:	2900      	cmp	r1, #0
 800cdce:	d006      	beq.n	800cdde <_Bfree+0x12>
 800cdd0:	684a      	ldr	r2, [r1, #4]
 800cdd2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cdd4:	0092      	lsls	r2, r2, #2
 800cdd6:	189b      	adds	r3, r3, r2
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	600a      	str	r2, [r1, #0]
 800cddc:	6019      	str	r1, [r3, #0]
 800cdde:	4770      	bx	lr

0800cde0 <__multadd>:
 800cde0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cde2:	000e      	movs	r6, r1
 800cde4:	9001      	str	r0, [sp, #4]
 800cde6:	000c      	movs	r4, r1
 800cde8:	001d      	movs	r5, r3
 800cdea:	2000      	movs	r0, #0
 800cdec:	690f      	ldr	r7, [r1, #16]
 800cdee:	3614      	adds	r6, #20
 800cdf0:	6833      	ldr	r3, [r6, #0]
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	b299      	uxth	r1, r3
 800cdf6:	4351      	muls	r1, r2
 800cdf8:	0c1b      	lsrs	r3, r3, #16
 800cdfa:	4353      	muls	r3, r2
 800cdfc:	1949      	adds	r1, r1, r5
 800cdfe:	0c0d      	lsrs	r5, r1, #16
 800ce00:	195b      	adds	r3, r3, r5
 800ce02:	0c1d      	lsrs	r5, r3, #16
 800ce04:	b289      	uxth	r1, r1
 800ce06:	041b      	lsls	r3, r3, #16
 800ce08:	185b      	adds	r3, r3, r1
 800ce0a:	c608      	stmia	r6!, {r3}
 800ce0c:	4287      	cmp	r7, r0
 800ce0e:	dcef      	bgt.n	800cdf0 <__multadd+0x10>
 800ce10:	2d00      	cmp	r5, #0
 800ce12:	d022      	beq.n	800ce5a <__multadd+0x7a>
 800ce14:	68a3      	ldr	r3, [r4, #8]
 800ce16:	42bb      	cmp	r3, r7
 800ce18:	dc19      	bgt.n	800ce4e <__multadd+0x6e>
 800ce1a:	6861      	ldr	r1, [r4, #4]
 800ce1c:	9801      	ldr	r0, [sp, #4]
 800ce1e:	3101      	adds	r1, #1
 800ce20:	f7ff ffac 	bl	800cd7c <_Balloc>
 800ce24:	1e06      	subs	r6, r0, #0
 800ce26:	d105      	bne.n	800ce34 <__multadd+0x54>
 800ce28:	0032      	movs	r2, r6
 800ce2a:	21ba      	movs	r1, #186	; 0xba
 800ce2c:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <__multadd+0x80>)
 800ce2e:	480d      	ldr	r0, [pc, #52]	; (800ce64 <__multadd+0x84>)
 800ce30:	f003 fa68 	bl	8010304 <__assert_func>
 800ce34:	0021      	movs	r1, r4
 800ce36:	6922      	ldr	r2, [r4, #16]
 800ce38:	310c      	adds	r1, #12
 800ce3a:	3202      	adds	r2, #2
 800ce3c:	0092      	lsls	r2, r2, #2
 800ce3e:	300c      	adds	r0, #12
 800ce40:	f7ff fb01 	bl	800c446 <memcpy>
 800ce44:	0021      	movs	r1, r4
 800ce46:	9801      	ldr	r0, [sp, #4]
 800ce48:	f7ff ffc0 	bl	800cdcc <_Bfree>
 800ce4c:	0034      	movs	r4, r6
 800ce4e:	1d3b      	adds	r3, r7, #4
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	18e3      	adds	r3, r4, r3
 800ce54:	605d      	str	r5, [r3, #4]
 800ce56:	1c7b      	adds	r3, r7, #1
 800ce58:	6123      	str	r3, [r4, #16]
 800ce5a:	0020      	movs	r0, r4
 800ce5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce5e:	46c0      	nop			; (mov r8, r8)
 800ce60:	080148e1 	.word	0x080148e1
 800ce64:	08014952 	.word	0x08014952

0800ce68 <__s2b>:
 800ce68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce6a:	0006      	movs	r6, r0
 800ce6c:	0018      	movs	r0, r3
 800ce6e:	000c      	movs	r4, r1
 800ce70:	3008      	adds	r0, #8
 800ce72:	2109      	movs	r1, #9
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	0015      	movs	r5, r2
 800ce78:	f7f3 f9ea 	bl	8000250 <__divsi3>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	2100      	movs	r1, #0
 800ce80:	4283      	cmp	r3, r0
 800ce82:	db0a      	blt.n	800ce9a <__s2b+0x32>
 800ce84:	0030      	movs	r0, r6
 800ce86:	f7ff ff79 	bl	800cd7c <_Balloc>
 800ce8a:	1e01      	subs	r1, r0, #0
 800ce8c:	d108      	bne.n	800cea0 <__s2b+0x38>
 800ce8e:	000a      	movs	r2, r1
 800ce90:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <__s2b+0x90>)
 800ce92:	481a      	ldr	r0, [pc, #104]	; (800cefc <__s2b+0x94>)
 800ce94:	31d3      	adds	r1, #211	; 0xd3
 800ce96:	f003 fa35 	bl	8010304 <__assert_func>
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	3101      	adds	r1, #1
 800ce9e:	e7ef      	b.n	800ce80 <__s2b+0x18>
 800cea0:	9b08      	ldr	r3, [sp, #32]
 800cea2:	6143      	str	r3, [r0, #20]
 800cea4:	2301      	movs	r3, #1
 800cea6:	6103      	str	r3, [r0, #16]
 800cea8:	2d09      	cmp	r5, #9
 800ceaa:	dd18      	ble.n	800cede <__s2b+0x76>
 800ceac:	0023      	movs	r3, r4
 800ceae:	3309      	adds	r3, #9
 800ceb0:	001f      	movs	r7, r3
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	1964      	adds	r4, r4, r5
 800ceb6:	783b      	ldrb	r3, [r7, #0]
 800ceb8:	220a      	movs	r2, #10
 800ceba:	0030      	movs	r0, r6
 800cebc:	3b30      	subs	r3, #48	; 0x30
 800cebe:	f7ff ff8f 	bl	800cde0 <__multadd>
 800cec2:	3701      	adds	r7, #1
 800cec4:	0001      	movs	r1, r0
 800cec6:	42a7      	cmp	r7, r4
 800cec8:	d1f5      	bne.n	800ceb6 <__s2b+0x4e>
 800ceca:	002c      	movs	r4, r5
 800cecc:	9b00      	ldr	r3, [sp, #0]
 800cece:	3c08      	subs	r4, #8
 800ced0:	191c      	adds	r4, r3, r4
 800ced2:	002f      	movs	r7, r5
 800ced4:	9b01      	ldr	r3, [sp, #4]
 800ced6:	429f      	cmp	r7, r3
 800ced8:	db04      	blt.n	800cee4 <__s2b+0x7c>
 800ceda:	0008      	movs	r0, r1
 800cedc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cede:	2509      	movs	r5, #9
 800cee0:	340a      	adds	r4, #10
 800cee2:	e7f6      	b.n	800ced2 <__s2b+0x6a>
 800cee4:	1b63      	subs	r3, r4, r5
 800cee6:	5ddb      	ldrb	r3, [r3, r7]
 800cee8:	220a      	movs	r2, #10
 800ceea:	0030      	movs	r0, r6
 800ceec:	3b30      	subs	r3, #48	; 0x30
 800ceee:	f7ff ff77 	bl	800cde0 <__multadd>
 800cef2:	3701      	adds	r7, #1
 800cef4:	0001      	movs	r1, r0
 800cef6:	e7ed      	b.n	800ced4 <__s2b+0x6c>
 800cef8:	080148e1 	.word	0x080148e1
 800cefc:	08014952 	.word	0x08014952

0800cf00 <__hi0bits>:
 800cf00:	0003      	movs	r3, r0
 800cf02:	0c02      	lsrs	r2, r0, #16
 800cf04:	2000      	movs	r0, #0
 800cf06:	4282      	cmp	r2, r0
 800cf08:	d101      	bne.n	800cf0e <__hi0bits+0xe>
 800cf0a:	041b      	lsls	r3, r3, #16
 800cf0c:	3010      	adds	r0, #16
 800cf0e:	0e1a      	lsrs	r2, r3, #24
 800cf10:	d101      	bne.n	800cf16 <__hi0bits+0x16>
 800cf12:	3008      	adds	r0, #8
 800cf14:	021b      	lsls	r3, r3, #8
 800cf16:	0f1a      	lsrs	r2, r3, #28
 800cf18:	d101      	bne.n	800cf1e <__hi0bits+0x1e>
 800cf1a:	3004      	adds	r0, #4
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	0f9a      	lsrs	r2, r3, #30
 800cf20:	d101      	bne.n	800cf26 <__hi0bits+0x26>
 800cf22:	3002      	adds	r0, #2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	db03      	blt.n	800cf32 <__hi0bits+0x32>
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	d400      	bmi.n	800cf32 <__hi0bits+0x32>
 800cf30:	2020      	movs	r0, #32
 800cf32:	4770      	bx	lr

0800cf34 <__lo0bits>:
 800cf34:	6803      	ldr	r3, [r0, #0]
 800cf36:	0001      	movs	r1, r0
 800cf38:	2207      	movs	r2, #7
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	4010      	ands	r0, r2
 800cf3e:	4213      	tst	r3, r2
 800cf40:	d00d      	beq.n	800cf5e <__lo0bits+0x2a>
 800cf42:	3a06      	subs	r2, #6
 800cf44:	2000      	movs	r0, #0
 800cf46:	4213      	tst	r3, r2
 800cf48:	d105      	bne.n	800cf56 <__lo0bits+0x22>
 800cf4a:	3002      	adds	r0, #2
 800cf4c:	4203      	tst	r3, r0
 800cf4e:	d003      	beq.n	800cf58 <__lo0bits+0x24>
 800cf50:	40d3      	lsrs	r3, r2
 800cf52:	0010      	movs	r0, r2
 800cf54:	600b      	str	r3, [r1, #0]
 800cf56:	4770      	bx	lr
 800cf58:	089b      	lsrs	r3, r3, #2
 800cf5a:	600b      	str	r3, [r1, #0]
 800cf5c:	e7fb      	b.n	800cf56 <__lo0bits+0x22>
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	d101      	bne.n	800cf68 <__lo0bits+0x34>
 800cf64:	2010      	movs	r0, #16
 800cf66:	0c1b      	lsrs	r3, r3, #16
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	2a00      	cmp	r2, #0
 800cf6c:	d101      	bne.n	800cf72 <__lo0bits+0x3e>
 800cf6e:	3008      	adds	r0, #8
 800cf70:	0a1b      	lsrs	r3, r3, #8
 800cf72:	071a      	lsls	r2, r3, #28
 800cf74:	d101      	bne.n	800cf7a <__lo0bits+0x46>
 800cf76:	3004      	adds	r0, #4
 800cf78:	091b      	lsrs	r3, r3, #4
 800cf7a:	079a      	lsls	r2, r3, #30
 800cf7c:	d101      	bne.n	800cf82 <__lo0bits+0x4e>
 800cf7e:	3002      	adds	r0, #2
 800cf80:	089b      	lsrs	r3, r3, #2
 800cf82:	07da      	lsls	r2, r3, #31
 800cf84:	d4e9      	bmi.n	800cf5a <__lo0bits+0x26>
 800cf86:	3001      	adds	r0, #1
 800cf88:	085b      	lsrs	r3, r3, #1
 800cf8a:	d1e6      	bne.n	800cf5a <__lo0bits+0x26>
 800cf8c:	2020      	movs	r0, #32
 800cf8e:	e7e2      	b.n	800cf56 <__lo0bits+0x22>

0800cf90 <__i2b>:
 800cf90:	b510      	push	{r4, lr}
 800cf92:	000c      	movs	r4, r1
 800cf94:	2101      	movs	r1, #1
 800cf96:	f7ff fef1 	bl	800cd7c <_Balloc>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d107      	bne.n	800cfae <__i2b+0x1e>
 800cf9e:	2146      	movs	r1, #70	; 0x46
 800cfa0:	4c05      	ldr	r4, [pc, #20]	; (800cfb8 <__i2b+0x28>)
 800cfa2:	0002      	movs	r2, r0
 800cfa4:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <__i2b+0x2c>)
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	31ff      	adds	r1, #255	; 0xff
 800cfaa:	f003 f9ab 	bl	8010304 <__assert_func>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	6144      	str	r4, [r0, #20]
 800cfb2:	6103      	str	r3, [r0, #16]
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	46c0      	nop			; (mov r8, r8)
 800cfb8:	08014952 	.word	0x08014952
 800cfbc:	080148e1 	.word	0x080148e1

0800cfc0 <__multiply>:
 800cfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc2:	0015      	movs	r5, r2
 800cfc4:	690a      	ldr	r2, [r1, #16]
 800cfc6:	692b      	ldr	r3, [r5, #16]
 800cfc8:	000c      	movs	r4, r1
 800cfca:	b08b      	sub	sp, #44	; 0x2c
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	da01      	bge.n	800cfd4 <__multiply+0x14>
 800cfd0:	002c      	movs	r4, r5
 800cfd2:	000d      	movs	r5, r1
 800cfd4:	6927      	ldr	r7, [r4, #16]
 800cfd6:	692e      	ldr	r6, [r5, #16]
 800cfd8:	6861      	ldr	r1, [r4, #4]
 800cfda:	19bb      	adds	r3, r7, r6
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	19ba      	adds	r2, r7, r6
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	da00      	bge.n	800cfe8 <__multiply+0x28>
 800cfe6:	3101      	adds	r1, #1
 800cfe8:	f7ff fec8 	bl	800cd7c <_Balloc>
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d106      	bne.n	800d000 <__multiply+0x40>
 800cff2:	21b1      	movs	r1, #177	; 0xb1
 800cff4:	4b48      	ldr	r3, [pc, #288]	; (800d118 <__multiply+0x158>)
 800cff6:	4849      	ldr	r0, [pc, #292]	; (800d11c <__multiply+0x15c>)
 800cff8:	9a02      	ldr	r2, [sp, #8]
 800cffa:	0049      	lsls	r1, r1, #1
 800cffc:	f003 f982 	bl	8010304 <__assert_func>
 800d000:	9b02      	ldr	r3, [sp, #8]
 800d002:	2200      	movs	r2, #0
 800d004:	3314      	adds	r3, #20
 800d006:	469c      	mov	ip, r3
 800d008:	19bb      	adds	r3, r7, r6
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4463      	add	r3, ip
 800d00e:	9304      	str	r3, [sp, #16]
 800d010:	4663      	mov	r3, ip
 800d012:	9904      	ldr	r1, [sp, #16]
 800d014:	428b      	cmp	r3, r1
 800d016:	d32a      	bcc.n	800d06e <__multiply+0xae>
 800d018:	0023      	movs	r3, r4
 800d01a:	00bf      	lsls	r7, r7, #2
 800d01c:	3314      	adds	r3, #20
 800d01e:	3514      	adds	r5, #20
 800d020:	9308      	str	r3, [sp, #32]
 800d022:	00b6      	lsls	r6, r6, #2
 800d024:	19db      	adds	r3, r3, r7
 800d026:	9305      	str	r3, [sp, #20]
 800d028:	19ab      	adds	r3, r5, r6
 800d02a:	9309      	str	r3, [sp, #36]	; 0x24
 800d02c:	2304      	movs	r3, #4
 800d02e:	9306      	str	r3, [sp, #24]
 800d030:	0023      	movs	r3, r4
 800d032:	9a05      	ldr	r2, [sp, #20]
 800d034:	3315      	adds	r3, #21
 800d036:	9501      	str	r5, [sp, #4]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d305      	bcc.n	800d048 <__multiply+0x88>
 800d03c:	1b13      	subs	r3, r2, r4
 800d03e:	3b15      	subs	r3, #21
 800d040:	089b      	lsrs	r3, r3, #2
 800d042:	3301      	adds	r3, #1
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	9306      	str	r3, [sp, #24]
 800d048:	9b01      	ldr	r3, [sp, #4]
 800d04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d310      	bcc.n	800d072 <__multiply+0xb2>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	dd05      	ble.n	800d062 <__multiply+0xa2>
 800d056:	9b04      	ldr	r3, [sp, #16]
 800d058:	3b04      	subs	r3, #4
 800d05a:	9304      	str	r3, [sp, #16]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d056      	beq.n	800d110 <__multiply+0x150>
 800d062:	9b02      	ldr	r3, [sp, #8]
 800d064:	9a03      	ldr	r2, [sp, #12]
 800d066:	0018      	movs	r0, r3
 800d068:	611a      	str	r2, [r3, #16]
 800d06a:	b00b      	add	sp, #44	; 0x2c
 800d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d06e:	c304      	stmia	r3!, {r2}
 800d070:	e7cf      	b.n	800d012 <__multiply+0x52>
 800d072:	9b01      	ldr	r3, [sp, #4]
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	b280      	uxth	r0, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d01e      	beq.n	800d0ba <__multiply+0xfa>
 800d07c:	4667      	mov	r7, ip
 800d07e:	2500      	movs	r5, #0
 800d080:	9e08      	ldr	r6, [sp, #32]
 800d082:	ce02      	ldmia	r6!, {r1}
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	9307      	str	r3, [sp, #28]
 800d088:	b28b      	uxth	r3, r1
 800d08a:	4343      	muls	r3, r0
 800d08c:	001a      	movs	r2, r3
 800d08e:	466b      	mov	r3, sp
 800d090:	8b9b      	ldrh	r3, [r3, #28]
 800d092:	18d3      	adds	r3, r2, r3
 800d094:	195b      	adds	r3, r3, r5
 800d096:	0c0d      	lsrs	r5, r1, #16
 800d098:	4345      	muls	r5, r0
 800d09a:	9a07      	ldr	r2, [sp, #28]
 800d09c:	0c11      	lsrs	r1, r2, #16
 800d09e:	1869      	adds	r1, r5, r1
 800d0a0:	0c1a      	lsrs	r2, r3, #16
 800d0a2:	188a      	adds	r2, r1, r2
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	0c15      	lsrs	r5, r2, #16
 800d0a8:	0412      	lsls	r2, r2, #16
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	9b05      	ldr	r3, [sp, #20]
 800d0ae:	c704      	stmia	r7!, {r2}
 800d0b0:	42b3      	cmp	r3, r6
 800d0b2:	d8e6      	bhi.n	800d082 <__multiply+0xc2>
 800d0b4:	4663      	mov	r3, ip
 800d0b6:	9a06      	ldr	r2, [sp, #24]
 800d0b8:	509d      	str	r5, [r3, r2]
 800d0ba:	9b01      	ldr	r3, [sp, #4]
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	0c00      	lsrs	r0, r0, #16
 800d0c0:	d020      	beq.n	800d104 <__multiply+0x144>
 800d0c2:	4663      	mov	r3, ip
 800d0c4:	0025      	movs	r5, r4
 800d0c6:	4661      	mov	r1, ip
 800d0c8:	2700      	movs	r7, #0
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3514      	adds	r5, #20
 800d0ce:	682a      	ldr	r2, [r5, #0]
 800d0d0:	680e      	ldr	r6, [r1, #0]
 800d0d2:	b292      	uxth	r2, r2
 800d0d4:	4342      	muls	r2, r0
 800d0d6:	0c36      	lsrs	r6, r6, #16
 800d0d8:	1992      	adds	r2, r2, r6
 800d0da:	19d2      	adds	r2, r2, r7
 800d0dc:	0416      	lsls	r6, r2, #16
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	431e      	orrs	r6, r3
 800d0e2:	600e      	str	r6, [r1, #0]
 800d0e4:	cd40      	ldmia	r5!, {r6}
 800d0e6:	684b      	ldr	r3, [r1, #4]
 800d0e8:	0c36      	lsrs	r6, r6, #16
 800d0ea:	4346      	muls	r6, r0
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	0c12      	lsrs	r2, r2, #16
 800d0f0:	18f3      	adds	r3, r6, r3
 800d0f2:	189b      	adds	r3, r3, r2
 800d0f4:	9a05      	ldr	r2, [sp, #20]
 800d0f6:	0c1f      	lsrs	r7, r3, #16
 800d0f8:	3104      	adds	r1, #4
 800d0fa:	42aa      	cmp	r2, r5
 800d0fc:	d8e7      	bhi.n	800d0ce <__multiply+0x10e>
 800d0fe:	4662      	mov	r2, ip
 800d100:	9906      	ldr	r1, [sp, #24]
 800d102:	5053      	str	r3, [r2, r1]
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	3304      	adds	r3, #4
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	2304      	movs	r3, #4
 800d10c:	449c      	add	ip, r3
 800d10e:	e79b      	b.n	800d048 <__multiply+0x88>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	3b01      	subs	r3, #1
 800d114:	9303      	str	r3, [sp, #12]
 800d116:	e79b      	b.n	800d050 <__multiply+0x90>
 800d118:	080148e1 	.word	0x080148e1
 800d11c:	08014952 	.word	0x08014952

0800d120 <__pow5mult>:
 800d120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d122:	2303      	movs	r3, #3
 800d124:	0015      	movs	r5, r2
 800d126:	0007      	movs	r7, r0
 800d128:	000e      	movs	r6, r1
 800d12a:	401a      	ands	r2, r3
 800d12c:	421d      	tst	r5, r3
 800d12e:	d008      	beq.n	800d142 <__pow5mult+0x22>
 800d130:	491a      	ldr	r1, [pc, #104]	; (800d19c <__pow5mult+0x7c>)
 800d132:	3a01      	subs	r2, #1
 800d134:	0092      	lsls	r2, r2, #2
 800d136:	5852      	ldr	r2, [r2, r1]
 800d138:	2300      	movs	r3, #0
 800d13a:	0031      	movs	r1, r6
 800d13c:	f7ff fe50 	bl	800cde0 <__multadd>
 800d140:	0006      	movs	r6, r0
 800d142:	10ad      	asrs	r5, r5, #2
 800d144:	d027      	beq.n	800d196 <__pow5mult+0x76>
 800d146:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d148:	2c00      	cmp	r4, #0
 800d14a:	d107      	bne.n	800d15c <__pow5mult+0x3c>
 800d14c:	0038      	movs	r0, r7
 800d14e:	4914      	ldr	r1, [pc, #80]	; (800d1a0 <__pow5mult+0x80>)
 800d150:	f7ff ff1e 	bl	800cf90 <__i2b>
 800d154:	2300      	movs	r3, #0
 800d156:	0004      	movs	r4, r0
 800d158:	6438      	str	r0, [r7, #64]	; 0x40
 800d15a:	6003      	str	r3, [r0, #0]
 800d15c:	2301      	movs	r3, #1
 800d15e:	421d      	tst	r5, r3
 800d160:	d00a      	beq.n	800d178 <__pow5mult+0x58>
 800d162:	0031      	movs	r1, r6
 800d164:	0022      	movs	r2, r4
 800d166:	0038      	movs	r0, r7
 800d168:	f7ff ff2a 	bl	800cfc0 <__multiply>
 800d16c:	0031      	movs	r1, r6
 800d16e:	9001      	str	r0, [sp, #4]
 800d170:	0038      	movs	r0, r7
 800d172:	f7ff fe2b 	bl	800cdcc <_Bfree>
 800d176:	9e01      	ldr	r6, [sp, #4]
 800d178:	106d      	asrs	r5, r5, #1
 800d17a:	d00c      	beq.n	800d196 <__pow5mult+0x76>
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	2800      	cmp	r0, #0
 800d180:	d107      	bne.n	800d192 <__pow5mult+0x72>
 800d182:	0022      	movs	r2, r4
 800d184:	0021      	movs	r1, r4
 800d186:	0038      	movs	r0, r7
 800d188:	f7ff ff1a 	bl	800cfc0 <__multiply>
 800d18c:	2300      	movs	r3, #0
 800d18e:	6020      	str	r0, [r4, #0]
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	0004      	movs	r4, r0
 800d194:	e7e2      	b.n	800d15c <__pow5mult+0x3c>
 800d196:	0030      	movs	r0, r6
 800d198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	08014aa0 	.word	0x08014aa0
 800d1a0:	00000271 	.word	0x00000271

0800d1a4 <__lshift>:
 800d1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a6:	000c      	movs	r4, r1
 800d1a8:	0017      	movs	r7, r2
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	1155      	asrs	r5, r2, #5
 800d1ae:	b087      	sub	sp, #28
 800d1b0:	18eb      	adds	r3, r5, r3
 800d1b2:	9302      	str	r3, [sp, #8]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	6849      	ldr	r1, [r1, #4]
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	9004      	str	r0, [sp, #16]
 800d1be:	9a01      	ldr	r2, [sp, #4]
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	db10      	blt.n	800d1e6 <__lshift+0x42>
 800d1c4:	9804      	ldr	r0, [sp, #16]
 800d1c6:	f7ff fdd9 	bl	800cd7c <_Balloc>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	0002      	movs	r2, r0
 800d1ce:	0006      	movs	r6, r0
 800d1d0:	0019      	movs	r1, r3
 800d1d2:	3214      	adds	r2, #20
 800d1d4:	4298      	cmp	r0, r3
 800d1d6:	d10c      	bne.n	800d1f2 <__lshift+0x4e>
 800d1d8:	31df      	adds	r1, #223	; 0xdf
 800d1da:	0032      	movs	r2, r6
 800d1dc:	4b26      	ldr	r3, [pc, #152]	; (800d278 <__lshift+0xd4>)
 800d1de:	4827      	ldr	r0, [pc, #156]	; (800d27c <__lshift+0xd8>)
 800d1e0:	31ff      	adds	r1, #255	; 0xff
 800d1e2:	f003 f88f 	bl	8010304 <__assert_func>
 800d1e6:	3101      	adds	r1, #1
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	e7e8      	b.n	800d1be <__lshift+0x1a>
 800d1ec:	0098      	lsls	r0, r3, #2
 800d1ee:	5011      	str	r1, [r2, r0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	42ab      	cmp	r3, r5
 800d1f4:	dbfa      	blt.n	800d1ec <__lshift+0x48>
 800d1f6:	43eb      	mvns	r3, r5
 800d1f8:	17db      	asrs	r3, r3, #31
 800d1fa:	401d      	ands	r5, r3
 800d1fc:	211f      	movs	r1, #31
 800d1fe:	0023      	movs	r3, r4
 800d200:	0038      	movs	r0, r7
 800d202:	00ad      	lsls	r5, r5, #2
 800d204:	1955      	adds	r5, r2, r5
 800d206:	6922      	ldr	r2, [r4, #16]
 800d208:	3314      	adds	r3, #20
 800d20a:	0092      	lsls	r2, r2, #2
 800d20c:	4008      	ands	r0, r1
 800d20e:	4684      	mov	ip, r0
 800d210:	189a      	adds	r2, r3, r2
 800d212:	420f      	tst	r7, r1
 800d214:	d02a      	beq.n	800d26c <__lshift+0xc8>
 800d216:	3101      	adds	r1, #1
 800d218:	1a09      	subs	r1, r1, r0
 800d21a:	9105      	str	r1, [sp, #20]
 800d21c:	2100      	movs	r1, #0
 800d21e:	9503      	str	r5, [sp, #12]
 800d220:	4667      	mov	r7, ip
 800d222:	6818      	ldr	r0, [r3, #0]
 800d224:	40b8      	lsls	r0, r7
 800d226:	4308      	orrs	r0, r1
 800d228:	9903      	ldr	r1, [sp, #12]
 800d22a:	c101      	stmia	r1!, {r0}
 800d22c:	9103      	str	r1, [sp, #12]
 800d22e:	9805      	ldr	r0, [sp, #20]
 800d230:	cb02      	ldmia	r3!, {r1}
 800d232:	40c1      	lsrs	r1, r0
 800d234:	429a      	cmp	r2, r3
 800d236:	d8f3      	bhi.n	800d220 <__lshift+0x7c>
 800d238:	0020      	movs	r0, r4
 800d23a:	3015      	adds	r0, #21
 800d23c:	2304      	movs	r3, #4
 800d23e:	4282      	cmp	r2, r0
 800d240:	d304      	bcc.n	800d24c <__lshift+0xa8>
 800d242:	1b13      	subs	r3, r2, r4
 800d244:	3b15      	subs	r3, #21
 800d246:	089b      	lsrs	r3, r3, #2
 800d248:	3301      	adds	r3, #1
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	50e9      	str	r1, [r5, r3]
 800d24e:	2900      	cmp	r1, #0
 800d250:	d002      	beq.n	800d258 <__lshift+0xb4>
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	3302      	adds	r3, #2
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	9b01      	ldr	r3, [sp, #4]
 800d25a:	9804      	ldr	r0, [sp, #16]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	0021      	movs	r1, r4
 800d260:	6133      	str	r3, [r6, #16]
 800d262:	f7ff fdb3 	bl	800cdcc <_Bfree>
 800d266:	0030      	movs	r0, r6
 800d268:	b007      	add	sp, #28
 800d26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d26c:	cb02      	ldmia	r3!, {r1}
 800d26e:	c502      	stmia	r5!, {r1}
 800d270:	429a      	cmp	r2, r3
 800d272:	d8fb      	bhi.n	800d26c <__lshift+0xc8>
 800d274:	e7f0      	b.n	800d258 <__lshift+0xb4>
 800d276:	46c0      	nop			; (mov r8, r8)
 800d278:	080148e1 	.word	0x080148e1
 800d27c:	08014952 	.word	0x08014952

0800d280 <__mcmp>:
 800d280:	b530      	push	{r4, r5, lr}
 800d282:	690b      	ldr	r3, [r1, #16]
 800d284:	6904      	ldr	r4, [r0, #16]
 800d286:	0002      	movs	r2, r0
 800d288:	1ae0      	subs	r0, r4, r3
 800d28a:	429c      	cmp	r4, r3
 800d28c:	d10e      	bne.n	800d2ac <__mcmp+0x2c>
 800d28e:	3214      	adds	r2, #20
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	3114      	adds	r1, #20
 800d294:	0014      	movs	r4, r2
 800d296:	18c9      	adds	r1, r1, r3
 800d298:	18d2      	adds	r2, r2, r3
 800d29a:	3a04      	subs	r2, #4
 800d29c:	3904      	subs	r1, #4
 800d29e:	6815      	ldr	r5, [r2, #0]
 800d2a0:	680b      	ldr	r3, [r1, #0]
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	d003      	beq.n	800d2ae <__mcmp+0x2e>
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	429d      	cmp	r5, r3
 800d2aa:	d303      	bcc.n	800d2b4 <__mcmp+0x34>
 800d2ac:	bd30      	pop	{r4, r5, pc}
 800d2ae:	4294      	cmp	r4, r2
 800d2b0:	d3f3      	bcc.n	800d29a <__mcmp+0x1a>
 800d2b2:	e7fb      	b.n	800d2ac <__mcmp+0x2c>
 800d2b4:	4240      	negs	r0, r0
 800d2b6:	e7f9      	b.n	800d2ac <__mcmp+0x2c>

0800d2b8 <__mdiff>:
 800d2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ba:	000e      	movs	r6, r1
 800d2bc:	0007      	movs	r7, r0
 800d2be:	0011      	movs	r1, r2
 800d2c0:	0030      	movs	r0, r6
 800d2c2:	b087      	sub	sp, #28
 800d2c4:	0014      	movs	r4, r2
 800d2c6:	f7ff ffdb 	bl	800d280 <__mcmp>
 800d2ca:	1e05      	subs	r5, r0, #0
 800d2cc:	d110      	bne.n	800d2f0 <__mdiff+0x38>
 800d2ce:	0001      	movs	r1, r0
 800d2d0:	0038      	movs	r0, r7
 800d2d2:	f7ff fd53 	bl	800cd7c <_Balloc>
 800d2d6:	1e02      	subs	r2, r0, #0
 800d2d8:	d104      	bne.n	800d2e4 <__mdiff+0x2c>
 800d2da:	4b3f      	ldr	r3, [pc, #252]	; (800d3d8 <__mdiff+0x120>)
 800d2dc:	483f      	ldr	r0, [pc, #252]	; (800d3dc <__mdiff+0x124>)
 800d2de:	4940      	ldr	r1, [pc, #256]	; (800d3e0 <__mdiff+0x128>)
 800d2e0:	f003 f810 	bl	8010304 <__assert_func>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	6145      	str	r5, [r0, #20]
 800d2e8:	6103      	str	r3, [r0, #16]
 800d2ea:	0010      	movs	r0, r2
 800d2ec:	b007      	add	sp, #28
 800d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	db04      	blt.n	800d302 <__mdiff+0x4a>
 800d2f8:	0023      	movs	r3, r4
 800d2fa:	0034      	movs	r4, r6
 800d2fc:	001e      	movs	r6, r3
 800d2fe:	2300      	movs	r3, #0
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	0038      	movs	r0, r7
 800d304:	6861      	ldr	r1, [r4, #4]
 800d306:	f7ff fd39 	bl	800cd7c <_Balloc>
 800d30a:	1e02      	subs	r2, r0, #0
 800d30c:	d103      	bne.n	800d316 <__mdiff+0x5e>
 800d30e:	4b32      	ldr	r3, [pc, #200]	; (800d3d8 <__mdiff+0x120>)
 800d310:	4832      	ldr	r0, [pc, #200]	; (800d3dc <__mdiff+0x124>)
 800d312:	4934      	ldr	r1, [pc, #208]	; (800d3e4 <__mdiff+0x12c>)
 800d314:	e7e4      	b.n	800d2e0 <__mdiff+0x28>
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	2700      	movs	r7, #0
 800d31a:	60c3      	str	r3, [r0, #12]
 800d31c:	6920      	ldr	r0, [r4, #16]
 800d31e:	3414      	adds	r4, #20
 800d320:	0083      	lsls	r3, r0, #2
 800d322:	18e3      	adds	r3, r4, r3
 800d324:	0021      	movs	r1, r4
 800d326:	9401      	str	r4, [sp, #4]
 800d328:	0034      	movs	r4, r6
 800d32a:	9302      	str	r3, [sp, #8]
 800d32c:	6933      	ldr	r3, [r6, #16]
 800d32e:	3414      	adds	r4, #20
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	18e3      	adds	r3, r4, r3
 800d334:	9303      	str	r3, [sp, #12]
 800d336:	0013      	movs	r3, r2
 800d338:	3314      	adds	r3, #20
 800d33a:	469c      	mov	ip, r3
 800d33c:	9305      	str	r3, [sp, #20]
 800d33e:	9104      	str	r1, [sp, #16]
 800d340:	9b04      	ldr	r3, [sp, #16]
 800d342:	cc02      	ldmia	r4!, {r1}
 800d344:	cb20      	ldmia	r3!, {r5}
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	b2ab      	uxth	r3, r5
 800d34a:	19df      	adds	r7, r3, r7
 800d34c:	b28b      	uxth	r3, r1
 800d34e:	1afb      	subs	r3, r7, r3
 800d350:	0c09      	lsrs	r1, r1, #16
 800d352:	0c2d      	lsrs	r5, r5, #16
 800d354:	1a6d      	subs	r5, r5, r1
 800d356:	1419      	asrs	r1, r3, #16
 800d358:	1869      	adds	r1, r5, r1
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	140f      	asrs	r7, r1, #16
 800d35e:	0409      	lsls	r1, r1, #16
 800d360:	4319      	orrs	r1, r3
 800d362:	4663      	mov	r3, ip
 800d364:	c302      	stmia	r3!, {r1}
 800d366:	469c      	mov	ip, r3
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	42a3      	cmp	r3, r4
 800d36c:	d8e8      	bhi.n	800d340 <__mdiff+0x88>
 800d36e:	0031      	movs	r1, r6
 800d370:	9c03      	ldr	r4, [sp, #12]
 800d372:	3115      	adds	r1, #21
 800d374:	2304      	movs	r3, #4
 800d376:	428c      	cmp	r4, r1
 800d378:	d304      	bcc.n	800d384 <__mdiff+0xcc>
 800d37a:	1ba3      	subs	r3, r4, r6
 800d37c:	3b15      	subs	r3, #21
 800d37e:	089b      	lsrs	r3, r3, #2
 800d380:	3301      	adds	r3, #1
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	9901      	ldr	r1, [sp, #4]
 800d386:	18cd      	adds	r5, r1, r3
 800d388:	9905      	ldr	r1, [sp, #20]
 800d38a:	002e      	movs	r6, r5
 800d38c:	18cb      	adds	r3, r1, r3
 800d38e:	469c      	mov	ip, r3
 800d390:	9902      	ldr	r1, [sp, #8]
 800d392:	428e      	cmp	r6, r1
 800d394:	d310      	bcc.n	800d3b8 <__mdiff+0x100>
 800d396:	9e02      	ldr	r6, [sp, #8]
 800d398:	1ee9      	subs	r1, r5, #3
 800d39a:	2400      	movs	r4, #0
 800d39c:	428e      	cmp	r6, r1
 800d39e:	d304      	bcc.n	800d3aa <__mdiff+0xf2>
 800d3a0:	0031      	movs	r1, r6
 800d3a2:	3103      	adds	r1, #3
 800d3a4:	1b49      	subs	r1, r1, r5
 800d3a6:	0889      	lsrs	r1, r1, #2
 800d3a8:	008c      	lsls	r4, r1, #2
 800d3aa:	191b      	adds	r3, r3, r4
 800d3ac:	3b04      	subs	r3, #4
 800d3ae:	6819      	ldr	r1, [r3, #0]
 800d3b0:	2900      	cmp	r1, #0
 800d3b2:	d00f      	beq.n	800d3d4 <__mdiff+0x11c>
 800d3b4:	6110      	str	r0, [r2, #16]
 800d3b6:	e798      	b.n	800d2ea <__mdiff+0x32>
 800d3b8:	ce02      	ldmia	r6!, {r1}
 800d3ba:	b28c      	uxth	r4, r1
 800d3bc:	19e4      	adds	r4, r4, r7
 800d3be:	0c0f      	lsrs	r7, r1, #16
 800d3c0:	1421      	asrs	r1, r4, #16
 800d3c2:	1879      	adds	r1, r7, r1
 800d3c4:	b2a4      	uxth	r4, r4
 800d3c6:	140f      	asrs	r7, r1, #16
 800d3c8:	0409      	lsls	r1, r1, #16
 800d3ca:	4321      	orrs	r1, r4
 800d3cc:	4664      	mov	r4, ip
 800d3ce:	c402      	stmia	r4!, {r1}
 800d3d0:	46a4      	mov	ip, r4
 800d3d2:	e7dd      	b.n	800d390 <__mdiff+0xd8>
 800d3d4:	3801      	subs	r0, #1
 800d3d6:	e7e9      	b.n	800d3ac <__mdiff+0xf4>
 800d3d8:	080148e1 	.word	0x080148e1
 800d3dc:	08014952 	.word	0x08014952
 800d3e0:	00000237 	.word	0x00000237
 800d3e4:	00000245 	.word	0x00000245

0800d3e8 <__ulp>:
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <__ulp+0x30>)
 800d3ec:	4019      	ands	r1, r3
 800d3ee:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <__ulp+0x34>)
 800d3f0:	18c9      	adds	r1, r1, r3
 800d3f2:	4281      	cmp	r1, r0
 800d3f4:	dc06      	bgt.n	800d404 <__ulp+0x1c>
 800d3f6:	4249      	negs	r1, r1
 800d3f8:	150b      	asrs	r3, r1, #20
 800d3fa:	2b13      	cmp	r3, #19
 800d3fc:	dc03      	bgt.n	800d406 <__ulp+0x1e>
 800d3fe:	2180      	movs	r1, #128	; 0x80
 800d400:	0309      	lsls	r1, r1, #12
 800d402:	4119      	asrs	r1, r3
 800d404:	4770      	bx	lr
 800d406:	3b14      	subs	r3, #20
 800d408:	2001      	movs	r0, #1
 800d40a:	2b1e      	cmp	r3, #30
 800d40c:	dc02      	bgt.n	800d414 <__ulp+0x2c>
 800d40e:	2080      	movs	r0, #128	; 0x80
 800d410:	0600      	lsls	r0, r0, #24
 800d412:	40d8      	lsrs	r0, r3
 800d414:	2100      	movs	r1, #0
 800d416:	e7f5      	b.n	800d404 <__ulp+0x1c>
 800d418:	7ff00000 	.word	0x7ff00000
 800d41c:	fcc00000 	.word	0xfcc00000

0800d420 <__b2d>:
 800d420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d422:	0006      	movs	r6, r0
 800d424:	6903      	ldr	r3, [r0, #16]
 800d426:	3614      	adds	r6, #20
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	18f3      	adds	r3, r6, r3
 800d42c:	1f1d      	subs	r5, r3, #4
 800d42e:	682c      	ldr	r4, [r5, #0]
 800d430:	000f      	movs	r7, r1
 800d432:	0020      	movs	r0, r4
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	f7ff fd63 	bl	800cf00 <__hi0bits>
 800d43a:	2220      	movs	r2, #32
 800d43c:	1a12      	subs	r2, r2, r0
 800d43e:	603a      	str	r2, [r7, #0]
 800d440:	0003      	movs	r3, r0
 800d442:	4a1c      	ldr	r2, [pc, #112]	; (800d4b4 <__b2d+0x94>)
 800d444:	280a      	cmp	r0, #10
 800d446:	dc15      	bgt.n	800d474 <__b2d+0x54>
 800d448:	210b      	movs	r1, #11
 800d44a:	0027      	movs	r7, r4
 800d44c:	1a09      	subs	r1, r1, r0
 800d44e:	40cf      	lsrs	r7, r1
 800d450:	433a      	orrs	r2, r7
 800d452:	468c      	mov	ip, r1
 800d454:	0011      	movs	r1, r2
 800d456:	2200      	movs	r2, #0
 800d458:	42ae      	cmp	r6, r5
 800d45a:	d202      	bcs.n	800d462 <__b2d+0x42>
 800d45c:	9a01      	ldr	r2, [sp, #4]
 800d45e:	3a08      	subs	r2, #8
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	3315      	adds	r3, #21
 800d464:	409c      	lsls	r4, r3
 800d466:	4663      	mov	r3, ip
 800d468:	0027      	movs	r7, r4
 800d46a:	40da      	lsrs	r2, r3
 800d46c:	4317      	orrs	r7, r2
 800d46e:	0038      	movs	r0, r7
 800d470:	b003      	add	sp, #12
 800d472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d474:	2700      	movs	r7, #0
 800d476:	42ae      	cmp	r6, r5
 800d478:	d202      	bcs.n	800d480 <__b2d+0x60>
 800d47a:	9d01      	ldr	r5, [sp, #4]
 800d47c:	3d08      	subs	r5, #8
 800d47e:	682f      	ldr	r7, [r5, #0]
 800d480:	210b      	movs	r1, #11
 800d482:	4249      	negs	r1, r1
 800d484:	468c      	mov	ip, r1
 800d486:	449c      	add	ip, r3
 800d488:	2b0b      	cmp	r3, #11
 800d48a:	d010      	beq.n	800d4ae <__b2d+0x8e>
 800d48c:	4661      	mov	r1, ip
 800d48e:	2320      	movs	r3, #32
 800d490:	408c      	lsls	r4, r1
 800d492:	1a5b      	subs	r3, r3, r1
 800d494:	0039      	movs	r1, r7
 800d496:	40d9      	lsrs	r1, r3
 800d498:	430c      	orrs	r4, r1
 800d49a:	4322      	orrs	r2, r4
 800d49c:	0011      	movs	r1, r2
 800d49e:	2200      	movs	r2, #0
 800d4a0:	42b5      	cmp	r5, r6
 800d4a2:	d901      	bls.n	800d4a8 <__b2d+0x88>
 800d4a4:	3d04      	subs	r5, #4
 800d4a6:	682a      	ldr	r2, [r5, #0]
 800d4a8:	4664      	mov	r4, ip
 800d4aa:	40a7      	lsls	r7, r4
 800d4ac:	e7dd      	b.n	800d46a <__b2d+0x4a>
 800d4ae:	4322      	orrs	r2, r4
 800d4b0:	0011      	movs	r1, r2
 800d4b2:	e7dc      	b.n	800d46e <__b2d+0x4e>
 800d4b4:	3ff00000 	.word	0x3ff00000

0800d4b8 <__d2b>:
 800d4b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	0014      	movs	r4, r2
 800d4be:	001d      	movs	r5, r3
 800d4c0:	9f08      	ldr	r7, [sp, #32]
 800d4c2:	f7ff fc5b 	bl	800cd7c <_Balloc>
 800d4c6:	1e06      	subs	r6, r0, #0
 800d4c8:	d105      	bne.n	800d4d6 <__d2b+0x1e>
 800d4ca:	0032      	movs	r2, r6
 800d4cc:	4b24      	ldr	r3, [pc, #144]	; (800d560 <__d2b+0xa8>)
 800d4ce:	4825      	ldr	r0, [pc, #148]	; (800d564 <__d2b+0xac>)
 800d4d0:	4925      	ldr	r1, [pc, #148]	; (800d568 <__d2b+0xb0>)
 800d4d2:	f002 ff17 	bl	8010304 <__assert_func>
 800d4d6:	032b      	lsls	r3, r5, #12
 800d4d8:	006d      	lsls	r5, r5, #1
 800d4da:	0b1b      	lsrs	r3, r3, #12
 800d4dc:	0d6d      	lsrs	r5, r5, #21
 800d4de:	d125      	bne.n	800d52c <__d2b+0x74>
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	2c00      	cmp	r4, #0
 800d4e4:	d028      	beq.n	800d538 <__d2b+0x80>
 800d4e6:	4668      	mov	r0, sp
 800d4e8:	9400      	str	r4, [sp, #0]
 800d4ea:	f7ff fd23 	bl	800cf34 <__lo0bits>
 800d4ee:	9b01      	ldr	r3, [sp, #4]
 800d4f0:	9900      	ldr	r1, [sp, #0]
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d01e      	beq.n	800d534 <__d2b+0x7c>
 800d4f6:	2220      	movs	r2, #32
 800d4f8:	001c      	movs	r4, r3
 800d4fa:	1a12      	subs	r2, r2, r0
 800d4fc:	4094      	lsls	r4, r2
 800d4fe:	0022      	movs	r2, r4
 800d500:	40c3      	lsrs	r3, r0
 800d502:	430a      	orrs	r2, r1
 800d504:	6172      	str	r2, [r6, #20]
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	9c01      	ldr	r4, [sp, #4]
 800d50a:	61b4      	str	r4, [r6, #24]
 800d50c:	1e63      	subs	r3, r4, #1
 800d50e:	419c      	sbcs	r4, r3
 800d510:	3401      	adds	r4, #1
 800d512:	6134      	str	r4, [r6, #16]
 800d514:	2d00      	cmp	r5, #0
 800d516:	d017      	beq.n	800d548 <__d2b+0x90>
 800d518:	2435      	movs	r4, #53	; 0x35
 800d51a:	4b14      	ldr	r3, [pc, #80]	; (800d56c <__d2b+0xb4>)
 800d51c:	18ed      	adds	r5, r5, r3
 800d51e:	182d      	adds	r5, r5, r0
 800d520:	603d      	str	r5, [r7, #0]
 800d522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d524:	1a24      	subs	r4, r4, r0
 800d526:	601c      	str	r4, [r3, #0]
 800d528:	0030      	movs	r0, r6
 800d52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d52c:	2280      	movs	r2, #128	; 0x80
 800d52e:	0352      	lsls	r2, r2, #13
 800d530:	4313      	orrs	r3, r2
 800d532:	e7d5      	b.n	800d4e0 <__d2b+0x28>
 800d534:	6171      	str	r1, [r6, #20]
 800d536:	e7e7      	b.n	800d508 <__d2b+0x50>
 800d538:	a801      	add	r0, sp, #4
 800d53a:	f7ff fcfb 	bl	800cf34 <__lo0bits>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	2401      	movs	r4, #1
 800d542:	6173      	str	r3, [r6, #20]
 800d544:	3020      	adds	r0, #32
 800d546:	e7e4      	b.n	800d512 <__d2b+0x5a>
 800d548:	4b09      	ldr	r3, [pc, #36]	; (800d570 <__d2b+0xb8>)
 800d54a:	18c0      	adds	r0, r0, r3
 800d54c:	4b09      	ldr	r3, [pc, #36]	; (800d574 <__d2b+0xbc>)
 800d54e:	6038      	str	r0, [r7, #0]
 800d550:	18e3      	adds	r3, r4, r3
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	18f3      	adds	r3, r6, r3
 800d556:	6958      	ldr	r0, [r3, #20]
 800d558:	f7ff fcd2 	bl	800cf00 <__hi0bits>
 800d55c:	0164      	lsls	r4, r4, #5
 800d55e:	e7e0      	b.n	800d522 <__d2b+0x6a>
 800d560:	080148e1 	.word	0x080148e1
 800d564:	08014952 	.word	0x08014952
 800d568:	0000030f 	.word	0x0000030f
 800d56c:	fffffbcd 	.word	0xfffffbcd
 800d570:	fffffbce 	.word	0xfffffbce
 800d574:	3fffffff 	.word	0x3fffffff

0800d578 <__ratio>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	b087      	sub	sp, #28
 800d57c:	000f      	movs	r7, r1
 800d57e:	a904      	add	r1, sp, #16
 800d580:	0006      	movs	r6, r0
 800d582:	f7ff ff4d 	bl	800d420 <__b2d>
 800d586:	9000      	str	r0, [sp, #0]
 800d588:	9101      	str	r1, [sp, #4]
 800d58a:	9c00      	ldr	r4, [sp, #0]
 800d58c:	9d01      	ldr	r5, [sp, #4]
 800d58e:	0038      	movs	r0, r7
 800d590:	a905      	add	r1, sp, #20
 800d592:	f7ff ff45 	bl	800d420 <__b2d>
 800d596:	9002      	str	r0, [sp, #8]
 800d598:	9103      	str	r1, [sp, #12]
 800d59a:	9a02      	ldr	r2, [sp, #8]
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	6930      	ldr	r0, [r6, #16]
 800d5a0:	6939      	ldr	r1, [r7, #16]
 800d5a2:	9e04      	ldr	r6, [sp, #16]
 800d5a4:	1a40      	subs	r0, r0, r1
 800d5a6:	9905      	ldr	r1, [sp, #20]
 800d5a8:	0140      	lsls	r0, r0, #5
 800d5aa:	1a71      	subs	r1, r6, r1
 800d5ac:	1841      	adds	r1, r0, r1
 800d5ae:	0508      	lsls	r0, r1, #20
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	dd07      	ble.n	800d5c4 <__ratio+0x4c>
 800d5b4:	9901      	ldr	r1, [sp, #4]
 800d5b6:	1845      	adds	r5, r0, r1
 800d5b8:	0020      	movs	r0, r4
 800d5ba:	0029      	movs	r1, r5
 800d5bc:	f7f3 fc5c 	bl	8000e78 <__aeabi_ddiv>
 800d5c0:	b007      	add	sp, #28
 800d5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c4:	9903      	ldr	r1, [sp, #12]
 800d5c6:	1a0b      	subs	r3, r1, r0
 800d5c8:	e7f6      	b.n	800d5b8 <__ratio+0x40>

0800d5ca <__copybits>:
 800d5ca:	b570      	push	{r4, r5, r6, lr}
 800d5cc:	0014      	movs	r4, r2
 800d5ce:	0005      	movs	r5, r0
 800d5d0:	3901      	subs	r1, #1
 800d5d2:	6913      	ldr	r3, [r2, #16]
 800d5d4:	1149      	asrs	r1, r1, #5
 800d5d6:	3101      	adds	r1, #1
 800d5d8:	0089      	lsls	r1, r1, #2
 800d5da:	3414      	adds	r4, #20
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	1841      	adds	r1, r0, r1
 800d5e0:	18e3      	adds	r3, r4, r3
 800d5e2:	42a3      	cmp	r3, r4
 800d5e4:	d80d      	bhi.n	800d602 <__copybits+0x38>
 800d5e6:	0014      	movs	r4, r2
 800d5e8:	3411      	adds	r4, #17
 800d5ea:	2500      	movs	r5, #0
 800d5ec:	429c      	cmp	r4, r3
 800d5ee:	d803      	bhi.n	800d5f8 <__copybits+0x2e>
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	3b11      	subs	r3, #17
 800d5f4:	089b      	lsrs	r3, r3, #2
 800d5f6:	009d      	lsls	r5, r3, #2
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	1940      	adds	r0, r0, r5
 800d5fc:	4281      	cmp	r1, r0
 800d5fe:	d803      	bhi.n	800d608 <__copybits+0x3e>
 800d600:	bd70      	pop	{r4, r5, r6, pc}
 800d602:	cc40      	ldmia	r4!, {r6}
 800d604:	c540      	stmia	r5!, {r6}
 800d606:	e7ec      	b.n	800d5e2 <__copybits+0x18>
 800d608:	c008      	stmia	r0!, {r3}
 800d60a:	e7f7      	b.n	800d5fc <__copybits+0x32>

0800d60c <__any_on>:
 800d60c:	0002      	movs	r2, r0
 800d60e:	6900      	ldr	r0, [r0, #16]
 800d610:	b510      	push	{r4, lr}
 800d612:	3214      	adds	r2, #20
 800d614:	114b      	asrs	r3, r1, #5
 800d616:	4298      	cmp	r0, r3
 800d618:	db13      	blt.n	800d642 <__any_on+0x36>
 800d61a:	dd0c      	ble.n	800d636 <__any_on+0x2a>
 800d61c:	241f      	movs	r4, #31
 800d61e:	0008      	movs	r0, r1
 800d620:	4020      	ands	r0, r4
 800d622:	4221      	tst	r1, r4
 800d624:	d007      	beq.n	800d636 <__any_on+0x2a>
 800d626:	0099      	lsls	r1, r3, #2
 800d628:	588c      	ldr	r4, [r1, r2]
 800d62a:	0021      	movs	r1, r4
 800d62c:	40c1      	lsrs	r1, r0
 800d62e:	4081      	lsls	r1, r0
 800d630:	2001      	movs	r0, #1
 800d632:	428c      	cmp	r4, r1
 800d634:	d104      	bne.n	800d640 <__any_on+0x34>
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	18d3      	adds	r3, r2, r3
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d803      	bhi.n	800d646 <__any_on+0x3a>
 800d63e:	2000      	movs	r0, #0
 800d640:	bd10      	pop	{r4, pc}
 800d642:	0003      	movs	r3, r0
 800d644:	e7f7      	b.n	800d636 <__any_on+0x2a>
 800d646:	3b04      	subs	r3, #4
 800d648:	6819      	ldr	r1, [r3, #0]
 800d64a:	2900      	cmp	r1, #0
 800d64c:	d0f5      	beq.n	800d63a <__any_on+0x2e>
 800d64e:	2001      	movs	r0, #1
 800d650:	e7f6      	b.n	800d640 <__any_on+0x34>

0800d652 <__ascii_wctomb>:
 800d652:	0003      	movs	r3, r0
 800d654:	1e08      	subs	r0, r1, #0
 800d656:	d005      	beq.n	800d664 <__ascii_wctomb+0x12>
 800d658:	2aff      	cmp	r2, #255	; 0xff
 800d65a:	d904      	bls.n	800d666 <__ascii_wctomb+0x14>
 800d65c:	228a      	movs	r2, #138	; 0x8a
 800d65e:	2001      	movs	r0, #1
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	4240      	negs	r0, r0
 800d664:	4770      	bx	lr
 800d666:	2001      	movs	r0, #1
 800d668:	700a      	strb	r2, [r1, #0]
 800d66a:	e7fb      	b.n	800d664 <__ascii_wctomb+0x12>

0800d66c <_svfprintf_r>:
 800d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66e:	b0d9      	sub	sp, #356	; 0x164
 800d670:	001c      	movs	r4, r3
 800d672:	910b      	str	r1, [sp, #44]	; 0x2c
 800d674:	9208      	str	r2, [sp, #32]
 800d676:	900a      	str	r0, [sp, #40]	; 0x28
 800d678:	f002 fdae 	bl	80101d8 <_localeconv_r>
 800d67c:	6803      	ldr	r3, [r0, #0]
 800d67e:	0018      	movs	r0, r3
 800d680:	931c      	str	r3, [sp, #112]	; 0x70
 800d682:	f7f2 fd3f 	bl	8000104 <strlen>
 800d686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d688:	9016      	str	r0, [sp, #88]	; 0x58
 800d68a:	899b      	ldrh	r3, [r3, #12]
 800d68c:	061b      	lsls	r3, r3, #24
 800d68e:	d517      	bpl.n	800d6c0 <_svfprintf_r+0x54>
 800d690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d113      	bne.n	800d6c0 <_svfprintf_r+0x54>
 800d698:	2140      	movs	r1, #64	; 0x40
 800d69a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d69c:	f7fd fb6e 	bl	800ad7c <_malloc_r>
 800d6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a2:	6018      	str	r0, [r3, #0]
 800d6a4:	6118      	str	r0, [r3, #16]
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d107      	bne.n	800d6ba <_svfprintf_r+0x4e>
 800d6aa:	230c      	movs	r3, #12
 800d6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	3b0d      	subs	r3, #13
 800d6b2:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d6b6:	b059      	add	sp, #356	; 0x164
 800d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ba:	2340      	movs	r3, #64	; 0x40
 800d6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6be:	6153      	str	r3, [r2, #20]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6c8:	930e      	str	r3, [sp, #56]	; 0x38
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9214      	str	r2, [sp, #80]	; 0x50
 800d6ce:	9315      	str	r3, [sp, #84]	; 0x54
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	af2f      	add	r7, sp, #188	; 0xbc
 800d6d4:	972c      	str	r7, [sp, #176]	; 0xb0
 800d6d6:	931f      	str	r3, [sp, #124]	; 0x7c
 800d6d8:	931e      	str	r3, [sp, #120]	; 0x78
 800d6da:	9312      	str	r3, [sp, #72]	; 0x48
 800d6dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800d6de:	931d      	str	r3, [sp, #116]	; 0x74
 800d6e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6e2:	9d08      	ldr	r5, [sp, #32]
 800d6e4:	782b      	ldrb	r3, [r5, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <_svfprintf_r+0x84>
 800d6ea:	2b25      	cmp	r3, #37	; 0x25
 800d6ec:	d000      	beq.n	800d6f0 <_svfprintf_r+0x84>
 800d6ee:	e091      	b.n	800d814 <_svfprintf_r+0x1a8>
 800d6f0:	9b08      	ldr	r3, [sp, #32]
 800d6f2:	1aee      	subs	r6, r5, r3
 800d6f4:	429d      	cmp	r5, r3
 800d6f6:	d016      	beq.n	800d726 <_svfprintf_r+0xba>
 800d6f8:	603b      	str	r3, [r7, #0]
 800d6fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d6fc:	607e      	str	r6, [r7, #4]
 800d6fe:	199b      	adds	r3, r3, r6
 800d700:	932e      	str	r3, [sp, #184]	; 0xb8
 800d702:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d704:	3708      	adds	r7, #8
 800d706:	3301      	adds	r3, #1
 800d708:	932d      	str	r3, [sp, #180]	; 0xb4
 800d70a:	2b07      	cmp	r3, #7
 800d70c:	dd08      	ble.n	800d720 <_svfprintf_r+0xb4>
 800d70e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d710:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d712:	aa2c      	add	r2, sp, #176	; 0xb0
 800d714:	f004 f8c0 	bl	8011898 <__ssprint_r>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d000      	beq.n	800d71e <_svfprintf_r+0xb2>
 800d71c:	e1cf      	b.n	800dabe <_svfprintf_r+0x452>
 800d71e:	af2f      	add	r7, sp, #188	; 0xbc
 800d720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d722:	199b      	adds	r3, r3, r6
 800d724:	9317      	str	r3, [sp, #92]	; 0x5c
 800d726:	782b      	ldrb	r3, [r5, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <_svfprintf_r+0xc4>
 800d72c:	f001 f99e 	bl	800ea6c <_svfprintf_r+0x1400>
 800d730:	221b      	movs	r2, #27
 800d732:	2300      	movs	r3, #0
 800d734:	a91e      	add	r1, sp, #120	; 0x78
 800d736:	1852      	adds	r2, r2, r1
 800d738:	7013      	strb	r3, [r2, #0]
 800d73a:	2201      	movs	r2, #1
 800d73c:	001e      	movs	r6, r3
 800d73e:	4252      	negs	r2, r2
 800d740:	3501      	adds	r5, #1
 800d742:	9209      	str	r2, [sp, #36]	; 0x24
 800d744:	9318      	str	r3, [sp, #96]	; 0x60
 800d746:	1c6b      	adds	r3, r5, #1
 800d748:	9313      	str	r3, [sp, #76]	; 0x4c
 800d74a:	782b      	ldrb	r3, [r5, #0]
 800d74c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d74e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d750:	3820      	subs	r0, #32
 800d752:	285a      	cmp	r0, #90	; 0x5a
 800d754:	d901      	bls.n	800d75a <_svfprintf_r+0xee>
 800d756:	f000 fe20 	bl	800e39a <_svfprintf_r+0xd2e>
 800d75a:	f7f2 fce5 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d75e:	0078      	.short	0x0078
 800d760:	061e061e 	.word	0x061e061e
 800d764:	061e0082 	.word	0x061e0082
 800d768:	061e061e 	.word	0x061e061e
 800d76c:	061e005d 	.word	0x061e005d
 800d770:	0084061e 	.word	0x0084061e
 800d774:	061e008c 	.word	0x061e008c
 800d778:	0091008a 	.word	0x0091008a
 800d77c:	00b2061e 	.word	0x00b2061e
 800d780:	00b400b4 	.word	0x00b400b4
 800d784:	00b400b4 	.word	0x00b400b4
 800d788:	00b400b4 	.word	0x00b400b4
 800d78c:	00b400b4 	.word	0x00b400b4
 800d790:	061e00b4 	.word	0x061e00b4
 800d794:	061e061e 	.word	0x061e061e
 800d798:	061e061e 	.word	0x061e061e
 800d79c:	061e061e 	.word	0x061e061e
 800d7a0:	061e013b 	.word	0x061e013b
 800d7a4:	00f400e0 	.word	0x00f400e0
 800d7a8:	013b013b 	.word	0x013b013b
 800d7ac:	061e013b 	.word	0x061e013b
 800d7b0:	061e061e 	.word	0x061e061e
 800d7b4:	00c7061e 	.word	0x00c7061e
 800d7b8:	061e061e 	.word	0x061e061e
 800d7bc:	061e04c7 	.word	0x061e04c7
 800d7c0:	061e061e 	.word	0x061e061e
 800d7c4:	061e050a 	.word	0x061e050a
 800d7c8:	061e052a 	.word	0x061e052a
 800d7cc:	055c061e 	.word	0x055c061e
 800d7d0:	061e061e 	.word	0x061e061e
 800d7d4:	061e061e 	.word	0x061e061e
 800d7d8:	061e061e 	.word	0x061e061e
 800d7dc:	061e061e 	.word	0x061e061e
 800d7e0:	061e013b 	.word	0x061e013b
 800d7e4:	00f600e0 	.word	0x00f600e0
 800d7e8:	013b013b 	.word	0x013b013b
 800d7ec:	00c9013b 	.word	0x00c9013b
 800d7f0:	00dc00f6 	.word	0x00dc00f6
 800d7f4:	00d5061e 	.word	0x00d5061e
 800d7f8:	04a7061e 	.word	0x04a7061e
 800d7fc:	04fa04c9 	.word	0x04fa04c9
 800d800:	061e00dc 	.word	0x061e00dc
 800d804:	0080050a 	.word	0x0080050a
 800d808:	061e052c 	.word	0x061e052c
 800d80c:	057c061e 	.word	0x057c061e
 800d810:	0080061e 	.word	0x0080061e
 800d814:	3501      	adds	r5, #1
 800d816:	e765      	b.n	800d6e4 <_svfprintf_r+0x78>
 800d818:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d81a:	f002 fcdd 	bl	80101d8 <_localeconv_r>
 800d81e:	6843      	ldr	r3, [r0, #4]
 800d820:	0018      	movs	r0, r3
 800d822:	931d      	str	r3, [sp, #116]	; 0x74
 800d824:	f7f2 fc6e 	bl	8000104 <strlen>
 800d828:	901b      	str	r0, [sp, #108]	; 0x6c
 800d82a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d82c:	f002 fcd4 	bl	80101d8 <_localeconv_r>
 800d830:	6883      	ldr	r3, [r0, #8]
 800d832:	9312      	str	r3, [sp, #72]	; 0x48
 800d834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d836:	2b00      	cmp	r3, #0
 800d838:	d011      	beq.n	800d85e <_svfprintf_r+0x1f2>
 800d83a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00e      	beq.n	800d85e <_svfprintf_r+0x1f2>
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00b      	beq.n	800d85e <_svfprintf_r+0x1f2>
 800d846:	2380      	movs	r3, #128	; 0x80
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	431e      	orrs	r6, r3
 800d84c:	e007      	b.n	800d85e <_svfprintf_r+0x1f2>
 800d84e:	231b      	movs	r3, #27
 800d850:	aa1e      	add	r2, sp, #120	; 0x78
 800d852:	189b      	adds	r3, r3, r2
 800d854:	781a      	ldrb	r2, [r3, #0]
 800d856:	2a00      	cmp	r2, #0
 800d858:	d101      	bne.n	800d85e <_svfprintf_r+0x1f2>
 800d85a:	3220      	adds	r2, #32
 800d85c:	701a      	strb	r2, [r3, #0]
 800d85e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d860:	e771      	b.n	800d746 <_svfprintf_r+0xda>
 800d862:	2301      	movs	r3, #1
 800d864:	e7f1      	b.n	800d84a <_svfprintf_r+0x1de>
 800d866:	cc08      	ldmia	r4!, {r3}
 800d868:	9318      	str	r3, [sp, #96]	; 0x60
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	daf7      	bge.n	800d85e <_svfprintf_r+0x1f2>
 800d86e:	425b      	negs	r3, r3
 800d870:	9318      	str	r3, [sp, #96]	; 0x60
 800d872:	2304      	movs	r3, #4
 800d874:	e7e9      	b.n	800d84a <_svfprintf_r+0x1de>
 800d876:	231b      	movs	r3, #27
 800d878:	aa1e      	add	r2, sp, #120	; 0x78
 800d87a:	189b      	adds	r3, r3, r2
 800d87c:	222b      	movs	r2, #43	; 0x2b
 800d87e:	e7ed      	b.n	800d85c <_svfprintf_r+0x1f0>
 800d880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d882:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d884:	7812      	ldrb	r2, [r2, #0]
 800d886:	3301      	adds	r3, #1
 800d888:	920f      	str	r2, [sp, #60]	; 0x3c
 800d88a:	2a2a      	cmp	r2, #42	; 0x2a
 800d88c:	d010      	beq.n	800d8b0 <_svfprintf_r+0x244>
 800d88e:	2200      	movs	r2, #0
 800d890:	9209      	str	r2, [sp, #36]	; 0x24
 800d892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d894:	9313      	str	r3, [sp, #76]	; 0x4c
 800d896:	3a30      	subs	r2, #48	; 0x30
 800d898:	2a09      	cmp	r2, #9
 800d89a:	d900      	bls.n	800d89e <_svfprintf_r+0x232>
 800d89c:	e757      	b.n	800d74e <_svfprintf_r+0xe2>
 800d89e:	200a      	movs	r0, #10
 800d8a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8a2:	4341      	muls	r1, r0
 800d8a4:	188a      	adds	r2, r1, r2
 800d8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8a8:	781a      	ldrb	r2, [r3, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	920f      	str	r2, [sp, #60]	; 0x3c
 800d8ae:	e7f0      	b.n	800d892 <_svfprintf_r+0x226>
 800d8b0:	cc04      	ldmia	r4!, {r2}
 800d8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	da02      	bge.n	800d8be <_svfprintf_r+0x252>
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	4252      	negs	r2, r2
 800d8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d8be:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8c0:	e7cd      	b.n	800d85e <_svfprintf_r+0x1f2>
 800d8c2:	2380      	movs	r3, #128	; 0x80
 800d8c4:	e7c1      	b.n	800d84a <_svfprintf_r+0x1de>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8ca:	9218      	str	r2, [sp, #96]	; 0x60
 800d8cc:	210a      	movs	r1, #10
 800d8ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8d0:	434a      	muls	r2, r1
 800d8d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8d4:	3930      	subs	r1, #48	; 0x30
 800d8d6:	188a      	adds	r2, r1, r2
 800d8d8:	9218      	str	r2, [sp, #96]	; 0x60
 800d8da:	001a      	movs	r2, r3
 800d8dc:	7812      	ldrb	r2, [r2, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	920f      	str	r2, [sp, #60]	; 0x3c
 800d8e2:	3a30      	subs	r2, #48	; 0x30
 800d8e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8e6:	2a09      	cmp	r2, #9
 800d8e8:	d9f0      	bls.n	800d8cc <_svfprintf_r+0x260>
 800d8ea:	e730      	b.n	800d74e <_svfprintf_r+0xe2>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	e7ac      	b.n	800d84a <_svfprintf_r+0x1de>
 800d8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b68      	cmp	r3, #104	; 0x68
 800d8f6:	d105      	bne.n	800d904 <_svfprintf_r+0x298>
 800d8f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8fe:	2380      	movs	r3, #128	; 0x80
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	e7a2      	b.n	800d84a <_svfprintf_r+0x1de>
 800d904:	2340      	movs	r3, #64	; 0x40
 800d906:	e7a0      	b.n	800d84a <_svfprintf_r+0x1de>
 800d908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	2b6c      	cmp	r3, #108	; 0x6c
 800d90e:	d104      	bne.n	800d91a <_svfprintf_r+0x2ae>
 800d910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d912:	3301      	adds	r3, #1
 800d914:	9313      	str	r3, [sp, #76]	; 0x4c
 800d916:	2320      	movs	r3, #32
 800d918:	e797      	b.n	800d84a <_svfprintf_r+0x1de>
 800d91a:	2310      	movs	r3, #16
 800d91c:	e795      	b.n	800d84a <_svfprintf_r+0x1de>
 800d91e:	0021      	movs	r1, r4
 800d920:	c904      	ldmia	r1!, {r2}
 800d922:	ab3f      	add	r3, sp, #252	; 0xfc
 800d924:	910d      	str	r1, [sp, #52]	; 0x34
 800d926:	211b      	movs	r1, #27
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	2200      	movs	r2, #0
 800d92c:	a81e      	add	r0, sp, #120	; 0x78
 800d92e:	1809      	adds	r1, r1, r0
 800d930:	700a      	strb	r2, [r1, #0]
 800d932:	920c      	str	r2, [sp, #48]	; 0x30
 800d934:	3201      	adds	r2, #1
 800d936:	9209      	str	r2, [sp, #36]	; 0x24
 800d938:	2200      	movs	r2, #0
 800d93a:	9308      	str	r3, [sp, #32]
 800d93c:	0015      	movs	r5, r2
 800d93e:	9219      	str	r2, [sp, #100]	; 0x64
 800d940:	9210      	str	r2, [sp, #64]	; 0x40
 800d942:	9211      	str	r2, [sp, #68]	; 0x44
 800d944:	e1f1      	b.n	800dd2a <_svfprintf_r+0x6be>
 800d946:	2310      	movs	r3, #16
 800d948:	431e      	orrs	r6, r3
 800d94a:	06b3      	lsls	r3, r6, #26
 800d94c:	d531      	bpl.n	800d9b2 <_svfprintf_r+0x346>
 800d94e:	2307      	movs	r3, #7
 800d950:	3407      	adds	r4, #7
 800d952:	439c      	bics	r4, r3
 800d954:	0022      	movs	r2, r4
 800d956:	ca18      	ldmia	r2!, {r3, r4}
 800d958:	9306      	str	r3, [sp, #24]
 800d95a:	9407      	str	r4, [sp, #28]
 800d95c:	920d      	str	r2, [sp, #52]	; 0x34
 800d95e:	9a07      	ldr	r2, [sp, #28]
 800d960:	2301      	movs	r3, #1
 800d962:	2a00      	cmp	r2, #0
 800d964:	da0b      	bge.n	800d97e <_svfprintf_r+0x312>
 800d966:	9c06      	ldr	r4, [sp, #24]
 800d968:	9d07      	ldr	r5, [sp, #28]
 800d96a:	2200      	movs	r2, #0
 800d96c:	4261      	negs	r1, r4
 800d96e:	41aa      	sbcs	r2, r5
 800d970:	9106      	str	r1, [sp, #24]
 800d972:	9207      	str	r2, [sp, #28]
 800d974:	221b      	movs	r2, #27
 800d976:	a91e      	add	r1, sp, #120	; 0x78
 800d978:	1852      	adds	r2, r2, r1
 800d97a:	212d      	movs	r1, #45	; 0x2d
 800d97c:	7011      	strb	r1, [r2, #0]
 800d97e:	9907      	ldr	r1, [sp, #28]
 800d980:	9a06      	ldr	r2, [sp, #24]
 800d982:	430a      	orrs	r2, r1
 800d984:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d986:	3101      	adds	r1, #1
 800d988:	d101      	bne.n	800d98e <_svfprintf_r+0x322>
 800d98a:	f001 f87b 	bl	800ea84 <_svfprintf_r+0x1418>
 800d98e:	2180      	movs	r1, #128	; 0x80
 800d990:	0034      	movs	r4, r6
 800d992:	438c      	bics	r4, r1
 800d994:	2a00      	cmp	r2, #0
 800d996:	d001      	beq.n	800d99c <_svfprintf_r+0x330>
 800d998:	f001 f879 	bl	800ea8e <_svfprintf_r+0x1422>
 800d99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d99e:	2a00      	cmp	r2, #0
 800d9a0:	d101      	bne.n	800d9a6 <_svfprintf_r+0x33a>
 800d9a2:	f000 fcef 	bl	800e384 <_svfprintf_r+0xd18>
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d001      	beq.n	800d9ae <_svfprintf_r+0x342>
 800d9aa:	f001 f874 	bl	800ea96 <_svfprintf_r+0x142a>
 800d9ae:	f000 fc79 	bl	800e2a4 <_svfprintf_r+0xc38>
 800d9b2:	0022      	movs	r2, r4
 800d9b4:	ca08      	ldmia	r2!, {r3}
 800d9b6:	920d      	str	r2, [sp, #52]	; 0x34
 800d9b8:	06f2      	lsls	r2, r6, #27
 800d9ba:	d503      	bpl.n	800d9c4 <_svfprintf_r+0x358>
 800d9bc:	9306      	str	r3, [sp, #24]
 800d9be:	17db      	asrs	r3, r3, #31
 800d9c0:	9307      	str	r3, [sp, #28]
 800d9c2:	e7cc      	b.n	800d95e <_svfprintf_r+0x2f2>
 800d9c4:	0672      	lsls	r2, r6, #25
 800d9c6:	d501      	bpl.n	800d9cc <_svfprintf_r+0x360>
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	e7f7      	b.n	800d9bc <_svfprintf_r+0x350>
 800d9cc:	05b2      	lsls	r2, r6, #22
 800d9ce:	d5f5      	bpl.n	800d9bc <_svfprintf_r+0x350>
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	e7f3      	b.n	800d9bc <_svfprintf_r+0x350>
 800d9d4:	2307      	movs	r3, #7
 800d9d6:	3407      	adds	r4, #7
 800d9d8:	439c      	bics	r4, r3
 800d9da:	0022      	movs	r2, r4
 800d9dc:	ca18      	ldmia	r2!, {r3, r4}
 800d9de:	920d      	str	r2, [sp, #52]	; 0x34
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	9314      	str	r3, [sp, #80]	; 0x50
 800d9e4:	9415      	str	r4, [sp, #84]	; 0x54
 800d9e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d9ea:	005c      	lsls	r4, r3, #1
 800d9ec:	0864      	lsrs	r4, r4, #1
 800d9ee:	0028      	movs	r0, r5
 800d9f0:	0021      	movs	r1, r4
 800d9f2:	4b3e      	ldr	r3, [pc, #248]	; (800daec <_svfprintf_r+0x480>)
 800d9f4:	4252      	negs	r2, r2
 800d9f6:	f7f4 fc7d 	bl	80022f4 <__aeabi_dcmpun>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d126      	bne.n	800da4c <_svfprintf_r+0x3e0>
 800d9fe:	2201      	movs	r2, #1
 800da00:	0028      	movs	r0, r5
 800da02:	0021      	movs	r1, r4
 800da04:	4b39      	ldr	r3, [pc, #228]	; (800daec <_svfprintf_r+0x480>)
 800da06:	4252      	negs	r2, r2
 800da08:	f7f2 fd2e 	bl	8000468 <__aeabi_dcmple>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d11d      	bne.n	800da4c <_svfprintf_r+0x3e0>
 800da10:	9814      	ldr	r0, [sp, #80]	; 0x50
 800da12:	9915      	ldr	r1, [sp, #84]	; 0x54
 800da14:	2200      	movs	r2, #0
 800da16:	2300      	movs	r3, #0
 800da18:	f7f2 fd1c 	bl	8000454 <__aeabi_dcmplt>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d004      	beq.n	800da2a <_svfprintf_r+0x3be>
 800da20:	231b      	movs	r3, #27
 800da22:	aa1e      	add	r2, sp, #120	; 0x78
 800da24:	189b      	adds	r3, r3, r2
 800da26:	222d      	movs	r2, #45	; 0x2d
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	4b31      	ldr	r3, [pc, #196]	; (800daf0 <_svfprintf_r+0x484>)
 800da2c:	9308      	str	r3, [sp, #32]
 800da2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da30:	2b47      	cmp	r3, #71	; 0x47
 800da32:	dd01      	ble.n	800da38 <_svfprintf_r+0x3cc>
 800da34:	4b2f      	ldr	r3, [pc, #188]	; (800daf4 <_svfprintf_r+0x488>)
 800da36:	9308      	str	r3, [sp, #32]
 800da38:	2380      	movs	r3, #128	; 0x80
 800da3a:	439e      	bics	r6, r3
 800da3c:	2300      	movs	r3, #0
 800da3e:	930c      	str	r3, [sp, #48]	; 0x30
 800da40:	3303      	adds	r3, #3
 800da42:	9309      	str	r3, [sp, #36]	; 0x24
 800da44:	2300      	movs	r3, #0
 800da46:	9319      	str	r3, [sp, #100]	; 0x64
 800da48:	f000 fc78 	bl	800e33c <_svfprintf_r+0xcd0>
 800da4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da50:	0010      	movs	r0, r2
 800da52:	0019      	movs	r1, r3
 800da54:	f7f4 fc4e 	bl	80022f4 <__aeabi_dcmpun>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d00e      	beq.n	800da7a <_svfprintf_r+0x40e>
 800da5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da5e:	2b00      	cmp	r3, #0
 800da60:	da04      	bge.n	800da6c <_svfprintf_r+0x400>
 800da62:	231b      	movs	r3, #27
 800da64:	aa1e      	add	r2, sp, #120	; 0x78
 800da66:	189b      	adds	r3, r3, r2
 800da68:	222d      	movs	r2, #45	; 0x2d
 800da6a:	701a      	strb	r2, [r3, #0]
 800da6c:	4b22      	ldr	r3, [pc, #136]	; (800daf8 <_svfprintf_r+0x48c>)
 800da6e:	9308      	str	r3, [sp, #32]
 800da70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da72:	2b47      	cmp	r3, #71	; 0x47
 800da74:	dde0      	ble.n	800da38 <_svfprintf_r+0x3cc>
 800da76:	4b21      	ldr	r3, [pc, #132]	; (800dafc <_svfprintf_r+0x490>)
 800da78:	e7dd      	b.n	800da36 <_svfprintf_r+0x3ca>
 800da7a:	2320      	movs	r3, #32
 800da7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da7e:	439a      	bics	r2, r3
 800da80:	9210      	str	r2, [sp, #64]	; 0x40
 800da82:	2a41      	cmp	r2, #65	; 0x41
 800da84:	d123      	bne.n	800dace <_svfprintf_r+0x462>
 800da86:	2230      	movs	r2, #48	; 0x30
 800da88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da8a:	ab25      	add	r3, sp, #148	; 0x94
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	3248      	adds	r2, #72	; 0x48
 800da90:	2961      	cmp	r1, #97	; 0x61
 800da92:	d000      	beq.n	800da96 <_svfprintf_r+0x42a>
 800da94:	3a20      	subs	r2, #32
 800da96:	705a      	strb	r2, [r3, #1]
 800da98:	2302      	movs	r3, #2
 800da9a:	431e      	orrs	r6, r3
 800da9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9e:	2b63      	cmp	r3, #99	; 0x63
 800daa0:	dd2e      	ble.n	800db00 <_svfprintf_r+0x494>
 800daa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800daa4:	1c59      	adds	r1, r3, #1
 800daa6:	f7fd f969 	bl	800ad7c <_malloc_r>
 800daaa:	9008      	str	r0, [sp, #32]
 800daac:	2800      	cmp	r0, #0
 800daae:	d000      	beq.n	800dab2 <_svfprintf_r+0x446>
 800dab0:	e216      	b.n	800dee0 <_svfprintf_r+0x874>
 800dab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab4:	899a      	ldrh	r2, [r3, #12]
 800dab6:	2340      	movs	r3, #64	; 0x40
 800dab8:	4313      	orrs	r3, r2
 800daba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dabc:	8193      	strh	r3, [r2, #12]
 800dabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac0:	899b      	ldrh	r3, [r3, #12]
 800dac2:	065b      	lsls	r3, r3, #25
 800dac4:	d400      	bmi.n	800dac8 <_svfprintf_r+0x45c>
 800dac6:	e5f5      	b.n	800d6b4 <_svfprintf_r+0x48>
 800dac8:	2301      	movs	r3, #1
 800daca:	425b      	negs	r3, r3
 800dacc:	e5f1      	b.n	800d6b2 <_svfprintf_r+0x46>
 800dace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad0:	900c      	str	r0, [sp, #48]	; 0x30
 800dad2:	3301      	adds	r3, #1
 800dad4:	d100      	bne.n	800dad8 <_svfprintf_r+0x46c>
 800dad6:	e206      	b.n	800dee6 <_svfprintf_r+0x87a>
 800dad8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dada:	2b47      	cmp	r3, #71	; 0x47
 800dadc:	d114      	bne.n	800db08 <_svfprintf_r+0x49c>
 800dade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d111      	bne.n	800db08 <_svfprintf_r+0x49c>
 800dae4:	3301      	adds	r3, #1
 800dae6:	9309      	str	r3, [sp, #36]	; 0x24
 800dae8:	e00e      	b.n	800db08 <_svfprintf_r+0x49c>
 800daea:	46c0      	nop			; (mov r8, r8)
 800daec:	7fefffff 	.word	0x7fefffff
 800daf0:	08014aac 	.word	0x08014aac
 800daf4:	08014ab0 	.word	0x08014ab0
 800daf8:	08014ab4 	.word	0x08014ab4
 800dafc:	08014ab8 	.word	0x08014ab8
 800db00:	2300      	movs	r3, #0
 800db02:	930c      	str	r3, [sp, #48]	; 0x30
 800db04:	ab3f      	add	r3, sp, #252	; 0xfc
 800db06:	9308      	str	r3, [sp, #32]
 800db08:	2380      	movs	r3, #128	; 0x80
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4333      	orrs	r3, r6
 800db0e:	931a      	str	r3, [sp, #104]	; 0x68
 800db10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800db14:	2b00      	cmp	r3, #0
 800db16:	db00      	blt.n	800db1a <_svfprintf_r+0x4ae>
 800db18:	e1e7      	b.n	800deea <_svfprintf_r+0x87e>
 800db1a:	2280      	movs	r2, #128	; 0x80
 800db1c:	0612      	lsls	r2, r2, #24
 800db1e:	4694      	mov	ip, r2
 800db20:	4463      	add	r3, ip
 800db22:	930e      	str	r3, [sp, #56]	; 0x38
 800db24:	232d      	movs	r3, #45	; 0x2d
 800db26:	9322      	str	r3, [sp, #136]	; 0x88
 800db28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db2a:	2b41      	cmp	r3, #65	; 0x41
 800db2c:	d000      	beq.n	800db30 <_svfprintf_r+0x4c4>
 800db2e:	e1f5      	b.n	800df1c <_svfprintf_r+0x8b0>
 800db30:	0028      	movs	r0, r5
 800db32:	aa26      	add	r2, sp, #152	; 0x98
 800db34:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db36:	f002 fb73 	bl	8010220 <frexp>
 800db3a:	23ff      	movs	r3, #255	; 0xff
 800db3c:	2200      	movs	r2, #0
 800db3e:	059b      	lsls	r3, r3, #22
 800db40:	f7f3 fd94 	bl	800166c <__aeabi_dmul>
 800db44:	2200      	movs	r2, #0
 800db46:	2300      	movs	r3, #0
 800db48:	0004      	movs	r4, r0
 800db4a:	000d      	movs	r5, r1
 800db4c:	f7f2 fc7c 	bl	8000448 <__aeabi_dcmpeq>
 800db50:	2800      	cmp	r0, #0
 800db52:	d001      	beq.n	800db58 <_svfprintf_r+0x4ec>
 800db54:	2301      	movs	r3, #1
 800db56:	9326      	str	r3, [sp, #152]	; 0x98
 800db58:	4bda      	ldr	r3, [pc, #872]	; (800dec4 <_svfprintf_r+0x858>)
 800db5a:	9319      	str	r3, [sp, #100]	; 0x64
 800db5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db5e:	2b61      	cmp	r3, #97	; 0x61
 800db60:	d001      	beq.n	800db66 <_svfprintf_r+0x4fa>
 800db62:	4bd9      	ldr	r3, [pc, #868]	; (800dec8 <_svfprintf_r+0x85c>)
 800db64:	9319      	str	r3, [sp, #100]	; 0x64
 800db66:	9b08      	ldr	r3, [sp, #32]
 800db68:	930e      	str	r3, [sp, #56]	; 0x38
 800db6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6c:	3b01      	subs	r3, #1
 800db6e:	9311      	str	r3, [sp, #68]	; 0x44
 800db70:	2200      	movs	r2, #0
 800db72:	4bd6      	ldr	r3, [pc, #856]	; (800decc <_svfprintf_r+0x860>)
 800db74:	0020      	movs	r0, r4
 800db76:	0029      	movs	r1, r5
 800db78:	f7f3 fd78 	bl	800166c <__aeabi_dmul>
 800db7c:	000d      	movs	r5, r1
 800db7e:	0004      	movs	r4, r0
 800db80:	f7f4 fbd6 	bl	8002330 <__aeabi_d2iz>
 800db84:	9021      	str	r0, [sp, #132]	; 0x84
 800db86:	f7f4 fc09 	bl	800239c <__aeabi_i2d>
 800db8a:	0002      	movs	r2, r0
 800db8c:	000b      	movs	r3, r1
 800db8e:	0020      	movs	r0, r4
 800db90:	0029      	movs	r1, r5
 800db92:	f7f4 f82d 	bl	8001bf0 <__aeabi_dsub>
 800db96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db98:	000d      	movs	r5, r1
 800db9a:	001a      	movs	r2, r3
 800db9c:	3201      	adds	r2, #1
 800db9e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dba0:	920e      	str	r2, [sp, #56]	; 0x38
 800dba2:	9223      	str	r2, [sp, #140]	; 0x8c
 800dba4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dba6:	0004      	movs	r4, r0
 800dba8:	5c52      	ldrb	r2, [r2, r1]
 800dbaa:	701a      	strb	r2, [r3, #0]
 800dbac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbae:	9320      	str	r3, [sp, #128]	; 0x80
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	d00a      	beq.n	800dbca <_svfprintf_r+0x55e>
 800dbb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	9311      	str	r3, [sp, #68]	; 0x44
 800dbbc:	0020      	movs	r0, r4
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	0029      	movs	r1, r5
 800dbc2:	f7f2 fc41 	bl	8000448 <__aeabi_dcmpeq>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d0d2      	beq.n	800db70 <_svfprintf_r+0x504>
 800dbca:	2200      	movs	r2, #0
 800dbcc:	0020      	movs	r0, r4
 800dbce:	0029      	movs	r1, r5
 800dbd0:	4bbf      	ldr	r3, [pc, #764]	; (800ded0 <_svfprintf_r+0x864>)
 800dbd2:	f7f2 fc53 	bl	800047c <__aeabi_dcmpgt>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d10c      	bne.n	800dbf4 <_svfprintf_r+0x588>
 800dbda:	2200      	movs	r2, #0
 800dbdc:	0020      	movs	r0, r4
 800dbde:	0029      	movs	r1, r5
 800dbe0:	4bbb      	ldr	r3, [pc, #748]	; (800ded0 <_svfprintf_r+0x864>)
 800dbe2:	f7f2 fc31 	bl	8000448 <__aeabi_dcmpeq>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d100      	bne.n	800dbec <_svfprintf_r+0x580>
 800dbea:	e191      	b.n	800df10 <_svfprintf_r+0x8a4>
 800dbec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbee:	07db      	lsls	r3, r3, #31
 800dbf0:	d400      	bmi.n	800dbf4 <_svfprintf_r+0x588>
 800dbf2:	e18d      	b.n	800df10 <_svfprintf_r+0x8a4>
 800dbf4:	2030      	movs	r0, #48	; 0x30
 800dbf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbf8:	932a      	str	r3, [sp, #168]	; 0xa8
 800dbfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbfc:	7bdb      	ldrb	r3, [r3, #15]
 800dbfe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dc00:	3a01      	subs	r2, #1
 800dc02:	922a      	str	r2, [sp, #168]	; 0xa8
 800dc04:	7811      	ldrb	r1, [r2, #0]
 800dc06:	4299      	cmp	r1, r3
 800dc08:	d100      	bne.n	800dc0c <_svfprintf_r+0x5a0>
 800dc0a:	e171      	b.n	800def0 <_svfprintf_r+0x884>
 800dc0c:	1c4b      	adds	r3, r1, #1
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2939      	cmp	r1, #57	; 0x39
 800dc12:	d101      	bne.n	800dc18 <_svfprintf_r+0x5ac>
 800dc14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc16:	7a9b      	ldrb	r3, [r3, #10]
 800dc18:	7013      	strb	r3, [r2, #0]
 800dc1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc1c:	9a08      	ldr	r2, [sp, #32]
 800dc1e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dc20:	1a9b      	subs	r3, r3, r2
 800dc22:	930e      	str	r3, [sp, #56]	; 0x38
 800dc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc26:	2b47      	cmp	r3, #71	; 0x47
 800dc28:	d000      	beq.n	800dc2c <_svfprintf_r+0x5c0>
 800dc2a:	e1c4      	b.n	800dfb6 <_svfprintf_r+0x94a>
 800dc2c:	1ceb      	adds	r3, r5, #3
 800dc2e:	db03      	blt.n	800dc38 <_svfprintf_r+0x5cc>
 800dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc32:	42ab      	cmp	r3, r5
 800dc34:	db00      	blt.n	800dc38 <_svfprintf_r+0x5cc>
 800dc36:	e1e6      	b.n	800e006 <_svfprintf_r+0x99a>
 800dc38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc3a:	3b02      	subs	r3, #2
 800dc3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc3e:	223c      	movs	r2, #60	; 0x3c
 800dc40:	466b      	mov	r3, sp
 800dc42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc44:	189b      	adds	r3, r3, r2
 800dc46:	1e6c      	subs	r4, r5, #1
 800dc48:	3a1c      	subs	r2, #28
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	9426      	str	r4, [sp, #152]	; 0x98
 800dc50:	4391      	bics	r1, r2
 800dc52:	2941      	cmp	r1, #65	; 0x41
 800dc54:	d102      	bne.n	800dc5c <_svfprintf_r+0x5f0>
 800dc56:	330f      	adds	r3, #15
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	a928      	add	r1, sp, #160	; 0xa0
 800dc5e:	700b      	strb	r3, [r1, #0]
 800dc60:	232b      	movs	r3, #43	; 0x2b
 800dc62:	2c00      	cmp	r4, #0
 800dc64:	da02      	bge.n	800dc6c <_svfprintf_r+0x600>
 800dc66:	2401      	movs	r4, #1
 800dc68:	3302      	adds	r3, #2
 800dc6a:	1b64      	subs	r4, r4, r5
 800dc6c:	704b      	strb	r3, [r1, #1]
 800dc6e:	2c09      	cmp	r4, #9
 800dc70:	dc00      	bgt.n	800dc74 <_svfprintf_r+0x608>
 800dc72:	e1ba      	b.n	800dfea <_svfprintf_r+0x97e>
 800dc74:	2337      	movs	r3, #55	; 0x37
 800dc76:	250a      	movs	r5, #10
 800dc78:	aa1e      	add	r2, sp, #120	; 0x78
 800dc7a:	189b      	adds	r3, r3, r2
 800dc7c:	9310      	str	r3, [sp, #64]	; 0x40
 800dc7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc80:	0020      	movs	r0, r4
 800dc82:	9309      	str	r3, [sp, #36]	; 0x24
 800dc84:	0029      	movs	r1, r5
 800dc86:	3b01      	subs	r3, #1
 800dc88:	9310      	str	r3, [sp, #64]	; 0x40
 800dc8a:	f7f2 fbc7 	bl	800041c <__aeabi_idivmod>
 800dc8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc90:	3130      	adds	r1, #48	; 0x30
 800dc92:	7019      	strb	r1, [r3, #0]
 800dc94:	0020      	movs	r0, r4
 800dc96:	0029      	movs	r1, r5
 800dc98:	9411      	str	r4, [sp, #68]	; 0x44
 800dc9a:	f7f2 fad9 	bl	8000250 <__divsi3>
 800dc9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dca0:	0004      	movs	r4, r0
 800dca2:	2b63      	cmp	r3, #99	; 0x63
 800dca4:	dceb      	bgt.n	800dc7e <_svfprintf_r+0x612>
 800dca6:	222a      	movs	r2, #42	; 0x2a
 800dca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcaa:	a81e      	add	r0, sp, #120	; 0x78
 800dcac:	1e99      	subs	r1, r3, #2
 800dcae:	1812      	adds	r2, r2, r0
 800dcb0:	2037      	movs	r0, #55	; 0x37
 800dcb2:	000b      	movs	r3, r1
 800dcb4:	3430      	adds	r4, #48	; 0x30
 800dcb6:	700c      	strb	r4, [r1, #0]
 800dcb8:	ac1e      	add	r4, sp, #120	; 0x78
 800dcba:	1900      	adds	r0, r0, r4
 800dcbc:	4283      	cmp	r3, r0
 800dcbe:	d200      	bcs.n	800dcc2 <_svfprintf_r+0x656>
 800dcc0:	e18e      	b.n	800dfe0 <_svfprintf_r+0x974>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4281      	cmp	r1, r0
 800dcc6:	d804      	bhi.n	800dcd2 <_svfprintf_r+0x666>
 800dcc8:	aa1e      	add	r2, sp, #120	; 0x78
 800dcca:	3339      	adds	r3, #57	; 0x39
 800dccc:	189b      	adds	r3, r3, r2
 800dcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd0:	1a9b      	subs	r3, r3, r2
 800dcd2:	222a      	movs	r2, #42	; 0x2a
 800dcd4:	a91e      	add	r1, sp, #120	; 0x78
 800dcd6:	1852      	adds	r2, r2, r1
 800dcd8:	18d3      	adds	r3, r2, r3
 800dcda:	aa28      	add	r2, sp, #160	; 0xa0
 800dcdc:	1a9b      	subs	r3, r3, r2
 800dcde:	931e      	str	r3, [sp, #120]	; 0x78
 800dce0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dce4:	4694      	mov	ip, r2
 800dce6:	4463      	add	r3, ip
 800dce8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	dc01      	bgt.n	800dcf4 <_svfprintf_r+0x688>
 800dcf0:	07f3      	lsls	r3, r6, #31
 800dcf2:	d504      	bpl.n	800dcfe <_svfprintf_r+0x692>
 800dcf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf8:	4694      	mov	ip, r2
 800dcfa:	4463      	add	r3, ip
 800dcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfe:	2280      	movs	r2, #128	; 0x80
 800dd00:	4b74      	ldr	r3, [pc, #464]	; (800ded4 <_svfprintf_r+0x868>)
 800dd02:	0052      	lsls	r2, r2, #1
 800dd04:	4033      	ands	r3, r6
 800dd06:	431a      	orrs	r2, r3
 800dd08:	2300      	movs	r3, #0
 800dd0a:	001d      	movs	r5, r3
 800dd0c:	921a      	str	r2, [sp, #104]	; 0x68
 800dd0e:	9310      	str	r3, [sp, #64]	; 0x40
 800dd10:	9311      	str	r3, [sp, #68]	; 0x44
 800dd12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd14:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dd16:	9319      	str	r3, [sp, #100]	; 0x64
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <_svfprintf_r+0x6be>
 800dd1c:	231b      	movs	r3, #27
 800dd1e:	aa1e      	add	r2, sp, #120	; 0x78
 800dd20:	189b      	adds	r3, r3, r2
 800dd22:	222d      	movs	r2, #45	; 0x2d
 800dd24:	701a      	strb	r2, [r3, #0]
 800dd26:	2300      	movs	r3, #0
 800dd28:	9319      	str	r3, [sp, #100]	; 0x64
 800dd2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2e:	931a      	str	r3, [sp, #104]	; 0x68
 800dd30:	4293      	cmp	r3, r2
 800dd32:	da00      	bge.n	800dd36 <_svfprintf_r+0x6ca>
 800dd34:	921a      	str	r2, [sp, #104]	; 0x68
 800dd36:	231b      	movs	r3, #27
 800dd38:	aa1e      	add	r2, sp, #120	; 0x78
 800dd3a:	189b      	adds	r3, r3, r2
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	1e5a      	subs	r2, r3, #1
 800dd40:	4193      	sbcs	r3, r2
 800dd42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd44:	18d3      	adds	r3, r2, r3
 800dd46:	931a      	str	r3, [sp, #104]	; 0x68
 800dd48:	0032      	movs	r2, r6
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	401a      	ands	r2, r3
 800dd4e:	9220      	str	r2, [sp, #128]	; 0x80
 800dd50:	421e      	tst	r6, r3
 800dd52:	d002      	beq.n	800dd5a <_svfprintf_r+0x6ee>
 800dd54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dd56:	3302      	adds	r3, #2
 800dd58:	931a      	str	r3, [sp, #104]	; 0x68
 800dd5a:	2384      	movs	r3, #132	; 0x84
 800dd5c:	0032      	movs	r2, r6
 800dd5e:	401a      	ands	r2, r3
 800dd60:	9221      	str	r2, [sp, #132]	; 0x84
 800dd62:	421e      	tst	r6, r3
 800dd64:	d11f      	bne.n	800dda6 <_svfprintf_r+0x73a>
 800dd66:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd6a:	1a9c      	subs	r4, r3, r2
 800dd6c:	2c00      	cmp	r4, #0
 800dd6e:	dd1a      	ble.n	800dda6 <_svfprintf_r+0x73a>
 800dd70:	0039      	movs	r1, r7
 800dd72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd74:	4858      	ldr	r0, [pc, #352]	; (800ded8 <_svfprintf_r+0x86c>)
 800dd76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd78:	3301      	adds	r3, #1
 800dd7a:	3108      	adds	r1, #8
 800dd7c:	6038      	str	r0, [r7, #0]
 800dd7e:	2c10      	cmp	r4, #16
 800dd80:	dd00      	ble.n	800dd84 <_svfprintf_r+0x718>
 800dd82:	e31c      	b.n	800e3be <_svfprintf_r+0xd52>
 800dd84:	607c      	str	r4, [r7, #4]
 800dd86:	18a4      	adds	r4, r4, r2
 800dd88:	000f      	movs	r7, r1
 800dd8a:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd8c:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd8e:	2b07      	cmp	r3, #7
 800dd90:	dd09      	ble.n	800dda6 <_svfprintf_r+0x73a>
 800dd92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd96:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd98:	f003 fd7e 	bl	8011898 <__ssprint_r>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d001      	beq.n	800dda4 <_svfprintf_r+0x738>
 800dda0:	f000 fe43 	bl	800ea2a <_svfprintf_r+0x13be>
 800dda4:	af2f      	add	r7, sp, #188	; 0xbc
 800dda6:	221b      	movs	r2, #27
 800dda8:	a91e      	add	r1, sp, #120	; 0x78
 800ddaa:	1852      	adds	r2, r2, r1
 800ddac:	7811      	ldrb	r1, [r2, #0]
 800ddae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	d014      	beq.n	800ddde <_svfprintf_r+0x772>
 800ddb4:	603a      	str	r2, [r7, #0]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	189b      	adds	r3, r3, r2
 800ddba:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddbe:	607a      	str	r2, [r7, #4]
 800ddc0:	189b      	adds	r3, r3, r2
 800ddc2:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	2b07      	cmp	r3, #7
 800ddc8:	dd09      	ble.n	800ddde <_svfprintf_r+0x772>
 800ddca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddce:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddd0:	f003 fd62 	bl	8011898 <__ssprint_r>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d001      	beq.n	800dddc <_svfprintf_r+0x770>
 800ddd8:	f000 fe27 	bl	800ea2a <_svfprintf_r+0x13be>
 800dddc:	af2f      	add	r7, sp, #188	; 0xbc
 800ddde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dde0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	d015      	beq.n	800de12 <_svfprintf_r+0x7a6>
 800dde6:	aa25      	add	r2, sp, #148	; 0x94
 800dde8:	603a      	str	r2, [r7, #0]
 800ddea:	2202      	movs	r2, #2
 800ddec:	189b      	adds	r3, r3, r2
 800ddee:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	2b07      	cmp	r3, #7
 800ddfc:	dd09      	ble.n	800de12 <_svfprintf_r+0x7a6>
 800ddfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de00:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de02:	aa2c      	add	r2, sp, #176	; 0xb0
 800de04:	f003 fd48 	bl	8011898 <__ssprint_r>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d001      	beq.n	800de10 <_svfprintf_r+0x7a4>
 800de0c:	f000 fe0d 	bl	800ea2a <_svfprintf_r+0x13be>
 800de10:	af2f      	add	r7, sp, #188	; 0xbc
 800de12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de14:	2b80      	cmp	r3, #128	; 0x80
 800de16:	d11f      	bne.n	800de58 <_svfprintf_r+0x7ec>
 800de18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de1c:	1a9c      	subs	r4, r3, r2
 800de1e:	2c00      	cmp	r4, #0
 800de20:	dd1a      	ble.n	800de58 <_svfprintf_r+0x7ec>
 800de22:	0039      	movs	r1, r7
 800de24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de26:	482d      	ldr	r0, [pc, #180]	; (800dedc <_svfprintf_r+0x870>)
 800de28:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de2a:	3301      	adds	r3, #1
 800de2c:	3108      	adds	r1, #8
 800de2e:	6038      	str	r0, [r7, #0]
 800de30:	2c10      	cmp	r4, #16
 800de32:	dd00      	ble.n	800de36 <_svfprintf_r+0x7ca>
 800de34:	e2d6      	b.n	800e3e4 <_svfprintf_r+0xd78>
 800de36:	607c      	str	r4, [r7, #4]
 800de38:	18a4      	adds	r4, r4, r2
 800de3a:	000f      	movs	r7, r1
 800de3c:	942e      	str	r4, [sp, #184]	; 0xb8
 800de3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800de40:	2b07      	cmp	r3, #7
 800de42:	dd09      	ble.n	800de58 <_svfprintf_r+0x7ec>
 800de44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de48:	aa2c      	add	r2, sp, #176	; 0xb0
 800de4a:	f003 fd25 	bl	8011898 <__ssprint_r>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d001      	beq.n	800de56 <_svfprintf_r+0x7ea>
 800de52:	f000 fdea 	bl	800ea2a <_svfprintf_r+0x13be>
 800de56:	af2f      	add	r7, sp, #188	; 0xbc
 800de58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de5c:	1a9c      	subs	r4, r3, r2
 800de5e:	2c00      	cmp	r4, #0
 800de60:	dd1a      	ble.n	800de98 <_svfprintf_r+0x82c>
 800de62:	0039      	movs	r1, r7
 800de64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de66:	481d      	ldr	r0, [pc, #116]	; (800dedc <_svfprintf_r+0x870>)
 800de68:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de6a:	3301      	adds	r3, #1
 800de6c:	3108      	adds	r1, #8
 800de6e:	6038      	str	r0, [r7, #0]
 800de70:	2c10      	cmp	r4, #16
 800de72:	dd00      	ble.n	800de76 <_svfprintf_r+0x80a>
 800de74:	e2c9      	b.n	800e40a <_svfprintf_r+0xd9e>
 800de76:	18a2      	adds	r2, r4, r2
 800de78:	607c      	str	r4, [r7, #4]
 800de7a:	922e      	str	r2, [sp, #184]	; 0xb8
 800de7c:	000f      	movs	r7, r1
 800de7e:	932d      	str	r3, [sp, #180]	; 0xb4
 800de80:	2b07      	cmp	r3, #7
 800de82:	dd09      	ble.n	800de98 <_svfprintf_r+0x82c>
 800de84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de88:	aa2c      	add	r2, sp, #176	; 0xb0
 800de8a:	f003 fd05 	bl	8011898 <__ssprint_r>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d001      	beq.n	800de96 <_svfprintf_r+0x82a>
 800de92:	f000 fdca 	bl	800ea2a <_svfprintf_r+0x13be>
 800de96:	af2f      	add	r7, sp, #188	; 0xbc
 800de98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de9a:	9319      	str	r3, [sp, #100]	; 0x64
 800de9c:	05f3      	lsls	r3, r6, #23
 800de9e:	d500      	bpl.n	800dea2 <_svfprintf_r+0x836>
 800dea0:	e2ce      	b.n	800e440 <_svfprintf_r+0xdd4>
 800dea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	4694      	mov	ip, r2
 800dea8:	603b      	str	r3, [r7, #0]
 800deaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800deb0:	4463      	add	r3, ip
 800deb2:	932e      	str	r3, [sp, #184]	; 0xb8
 800deb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800deb6:	3301      	adds	r3, #1
 800deb8:	932d      	str	r3, [sp, #180]	; 0xb4
 800deba:	2b07      	cmp	r3, #7
 800debc:	dd00      	ble.n	800dec0 <_svfprintf_r+0x854>
 800debe:	e3a3      	b.n	800e608 <_svfprintf_r+0xf9c>
 800dec0:	3708      	adds	r7, #8
 800dec2:	e301      	b.n	800e4c8 <_svfprintf_r+0xe5c>
 800dec4:	08014abc 	.word	0x08014abc
 800dec8:	08014acd 	.word	0x08014acd
 800decc:	40300000 	.word	0x40300000
 800ded0:	3fe00000 	.word	0x3fe00000
 800ded4:	fffffbff 	.word	0xfffffbff
 800ded8:	08014ae0 	.word	0x08014ae0
 800dedc:	08014af0 	.word	0x08014af0
 800dee0:	9b08      	ldr	r3, [sp, #32]
 800dee2:	930c      	str	r3, [sp, #48]	; 0x30
 800dee4:	e610      	b.n	800db08 <_svfprintf_r+0x49c>
 800dee6:	2306      	movs	r3, #6
 800dee8:	e5fd      	b.n	800dae6 <_svfprintf_r+0x47a>
 800deea:	930e      	str	r3, [sp, #56]	; 0x38
 800deec:	2300      	movs	r3, #0
 800deee:	e61a      	b.n	800db26 <_svfprintf_r+0x4ba>
 800def0:	7010      	strb	r0, [r2, #0]
 800def2:	e684      	b.n	800dbfe <_svfprintf_r+0x592>
 800def4:	7018      	strb	r0, [r3, #0]
 800def6:	3301      	adds	r3, #1
 800def8:	1aca      	subs	r2, r1, r3
 800defa:	d5fb      	bpl.n	800def4 <_svfprintf_r+0x888>
 800defc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800defe:	2300      	movs	r3, #0
 800df00:	3201      	adds	r2, #1
 800df02:	db01      	blt.n	800df08 <_svfprintf_r+0x89c>
 800df04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df06:	3301      	adds	r3, #1
 800df08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df0a:	18d3      	adds	r3, r2, r3
 800df0c:	9323      	str	r3, [sp, #140]	; 0x8c
 800df0e:	e684      	b.n	800dc1a <_svfprintf_r+0x5ae>
 800df10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df12:	9920      	ldr	r1, [sp, #128]	; 0x80
 800df14:	2030      	movs	r0, #48	; 0x30
 800df16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df18:	1851      	adds	r1, r2, r1
 800df1a:	e7ed      	b.n	800def8 <_svfprintf_r+0x88c>
 800df1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df1e:	2303      	movs	r3, #3
 800df20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df22:	2a46      	cmp	r2, #70	; 0x46
 800df24:	d006      	beq.n	800df34 <_svfprintf_r+0x8c8>
 800df26:	0014      	movs	r4, r2
 800df28:	3c45      	subs	r4, #69	; 0x45
 800df2a:	4262      	negs	r2, r4
 800df2c:	4154      	adcs	r4, r2
 800df2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df30:	3b01      	subs	r3, #1
 800df32:	1914      	adds	r4, r2, r4
 800df34:	aa2a      	add	r2, sp, #168	; 0xa8
 800df36:	9204      	str	r2, [sp, #16]
 800df38:	aa27      	add	r2, sp, #156	; 0x9c
 800df3a:	9203      	str	r2, [sp, #12]
 800df3c:	aa26      	add	r2, sp, #152	; 0x98
 800df3e:	9202      	str	r2, [sp, #8]
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	002a      	movs	r2, r5
 800df44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df48:	9401      	str	r4, [sp, #4]
 800df4a:	f002 fad7 	bl	80104fc <_dtoa_r>
 800df4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df50:	9008      	str	r0, [sp, #32]
 800df52:	2b47      	cmp	r3, #71	; 0x47
 800df54:	d103      	bne.n	800df5e <_svfprintf_r+0x8f2>
 800df56:	07f3      	lsls	r3, r6, #31
 800df58:	d401      	bmi.n	800df5e <_svfprintf_r+0x8f2>
 800df5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800df5c:	e65e      	b.n	800dc1c <_svfprintf_r+0x5b0>
 800df5e:	9b08      	ldr	r3, [sp, #32]
 800df60:	191b      	adds	r3, r3, r4
 800df62:	9311      	str	r3, [sp, #68]	; 0x44
 800df64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df66:	2b46      	cmp	r3, #70	; 0x46
 800df68:	d112      	bne.n	800df90 <_svfprintf_r+0x924>
 800df6a:	9b08      	ldr	r3, [sp, #32]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b30      	cmp	r3, #48	; 0x30
 800df70:	d10a      	bne.n	800df88 <_svfprintf_r+0x91c>
 800df72:	2200      	movs	r2, #0
 800df74:	2300      	movs	r3, #0
 800df76:	0028      	movs	r0, r5
 800df78:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df7a:	f7f2 fa65 	bl	8000448 <__aeabi_dcmpeq>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d102      	bne.n	800df88 <_svfprintf_r+0x91c>
 800df82:	2301      	movs	r3, #1
 800df84:	1b1b      	subs	r3, r3, r4
 800df86:	9326      	str	r3, [sp, #152]	; 0x98
 800df88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df8c:	18d3      	adds	r3, r2, r3
 800df8e:	9311      	str	r3, [sp, #68]	; 0x44
 800df90:	2200      	movs	r2, #0
 800df92:	2300      	movs	r3, #0
 800df94:	0028      	movs	r0, r5
 800df96:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df98:	f7f2 fa56 	bl	8000448 <__aeabi_dcmpeq>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d001      	beq.n	800dfa4 <_svfprintf_r+0x938>
 800dfa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfa2:	932a      	str	r3, [sp, #168]	; 0xa8
 800dfa4:	2230      	movs	r2, #48	; 0x30
 800dfa6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dfa8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dfaa:	4299      	cmp	r1, r3
 800dfac:	d9d5      	bls.n	800df5a <_svfprintf_r+0x8ee>
 800dfae:	1c59      	adds	r1, r3, #1
 800dfb0:	912a      	str	r1, [sp, #168]	; 0xa8
 800dfb2:	701a      	strb	r2, [r3, #0]
 800dfb4:	e7f7      	b.n	800dfa6 <_svfprintf_r+0x93a>
 800dfb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfb8:	2b46      	cmp	r3, #70	; 0x46
 800dfba:	d000      	beq.n	800dfbe <_svfprintf_r+0x952>
 800dfbc:	e63f      	b.n	800dc3e <_svfprintf_r+0x5d2>
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	0033      	movs	r3, r6
 800dfc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	430b      	orrs	r3, r1
 800dfc8:	2d00      	cmp	r5, #0
 800dfca:	dd2c      	ble.n	800e026 <_svfprintf_r+0x9ba>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d046      	beq.n	800e05e <_svfprintf_r+0x9f2>
 800dfd0:	000a      	movs	r2, r1
 800dfd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfd4:	18eb      	adds	r3, r5, r3
 800dfd6:	18d3      	adds	r3, r2, r3
 800dfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dfda:	2366      	movs	r3, #102	; 0x66
 800dfdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfde:	e030      	b.n	800e042 <_svfprintf_r+0x9d6>
 800dfe0:	781c      	ldrb	r4, [r3, #0]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	7014      	strb	r4, [r2, #0]
 800dfe6:	3201      	adds	r2, #1
 800dfe8:	e668      	b.n	800dcbc <_svfprintf_r+0x650>
 800dfea:	222a      	movs	r2, #42	; 0x2a
 800dfec:	ab1e      	add	r3, sp, #120	; 0x78
 800dfee:	18d2      	adds	r2, r2, r3
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d104      	bne.n	800dffe <_svfprintf_r+0x992>
 800dff4:	2330      	movs	r3, #48	; 0x30
 800dff6:	222b      	movs	r2, #43	; 0x2b
 800dff8:	708b      	strb	r3, [r1, #2]
 800dffa:	ab1e      	add	r3, sp, #120	; 0x78
 800dffc:	18d2      	adds	r2, r2, r3
 800dffe:	3430      	adds	r4, #48	; 0x30
 800e000:	1c53      	adds	r3, r2, #1
 800e002:	7014      	strb	r4, [r2, #0]
 800e004:	e669      	b.n	800dcda <_svfprintf_r+0x66e>
 800e006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e008:	42ab      	cmp	r3, r5
 800e00a:	dd12      	ble.n	800e032 <_svfprintf_r+0x9c6>
 800e00c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e010:	4694      	mov	ip, r2
 800e012:	4463      	add	r3, ip
 800e014:	9309      	str	r3, [sp, #36]	; 0x24
 800e016:	2367      	movs	r3, #103	; 0x67
 800e018:	930f      	str	r3, [sp, #60]	; 0x3c
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	dc11      	bgt.n	800e042 <_svfprintf_r+0x9d6>
 800e01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e020:	1b5b      	subs	r3, r3, r5
 800e022:	3301      	adds	r3, #1
 800e024:	e00c      	b.n	800e040 <_svfprintf_r+0x9d4>
 800e026:	2b00      	cmp	r3, #0
 800e028:	d01b      	beq.n	800e062 <_svfprintf_r+0x9f6>
 800e02a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e02e:	3301      	adds	r3, #1
 800e030:	e7d1      	b.n	800dfd6 <_svfprintf_r+0x96a>
 800e032:	2367      	movs	r3, #103	; 0x67
 800e034:	9509      	str	r5, [sp, #36]	; 0x24
 800e036:	930f      	str	r3, [sp, #60]	; 0x3c
 800e038:	07f3      	lsls	r3, r6, #31
 800e03a:	d502      	bpl.n	800e042 <_svfprintf_r+0x9d6>
 800e03c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e03e:	18eb      	adds	r3, r5, r3
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	2380      	movs	r3, #128	; 0x80
 800e044:	0032      	movs	r2, r6
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	401a      	ands	r2, r3
 800e04a:	9211      	str	r2, [sp, #68]	; 0x44
 800e04c:	2200      	movs	r2, #0
 800e04e:	9210      	str	r2, [sp, #64]	; 0x40
 800e050:	421e      	tst	r6, r3
 800e052:	d100      	bne.n	800e056 <_svfprintf_r+0x9ea>
 800e054:	e65d      	b.n	800dd12 <_svfprintf_r+0x6a6>
 800e056:	4295      	cmp	r5, r2
 800e058:	dc25      	bgt.n	800e0a6 <_svfprintf_r+0xa3a>
 800e05a:	9211      	str	r2, [sp, #68]	; 0x44
 800e05c:	e659      	b.n	800dd12 <_svfprintf_r+0x6a6>
 800e05e:	9509      	str	r5, [sp, #36]	; 0x24
 800e060:	e7bb      	b.n	800dfda <_svfprintf_r+0x96e>
 800e062:	2366      	movs	r3, #102	; 0x66
 800e064:	9209      	str	r2, [sp, #36]	; 0x24
 800e066:	930f      	str	r3, [sp, #60]	; 0x3c
 800e068:	e7eb      	b.n	800e042 <_svfprintf_r+0x9d6>
 800e06a:	42ab      	cmp	r3, r5
 800e06c:	da0e      	bge.n	800e08c <_svfprintf_r+0xa20>
 800e06e:	1aed      	subs	r5, r5, r3
 800e070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d012      	beq.n	800e09e <_svfprintf_r+0xa32>
 800e078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e07a:	3301      	adds	r3, #1
 800e07c:	9311      	str	r3, [sp, #68]	; 0x44
 800e07e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e080:	3301      	adds	r3, #1
 800e082:	9312      	str	r3, [sp, #72]	; 0x48
 800e084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2bff      	cmp	r3, #255	; 0xff
 800e08a:	d1ee      	bne.n	800e06a <_svfprintf_r+0x9fe>
 800e08c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e090:	189b      	adds	r3, r3, r2
 800e092:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e094:	4353      	muls	r3, r2
 800e096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e098:	189b      	adds	r3, r3, r2
 800e09a:	9309      	str	r3, [sp, #36]	; 0x24
 800e09c:	e639      	b.n	800dd12 <_svfprintf_r+0x6a6>
 800e09e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	9310      	str	r3, [sp, #64]	; 0x40
 800e0a4:	e7ee      	b.n	800e084 <_svfprintf_r+0xa18>
 800e0a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0a8:	9311      	str	r3, [sp, #68]	; 0x44
 800e0aa:	e7eb      	b.n	800e084 <_svfprintf_r+0xa18>
 800e0ac:	1d23      	adds	r3, r4, #4
 800e0ae:	930d      	str	r3, [sp, #52]	; 0x34
 800e0b0:	06b3      	lsls	r3, r6, #26
 800e0b2:	d509      	bpl.n	800e0c8 <_svfprintf_r+0xa5c>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	17d2      	asrs	r2, r2, #31
 800e0bc:	605a      	str	r2, [r3, #4]
 800e0be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e0c2:	9308      	str	r3, [sp, #32]
 800e0c4:	f7ff fb0d 	bl	800d6e2 <_svfprintf_r+0x76>
 800e0c8:	06f3      	lsls	r3, r6, #27
 800e0ca:	d503      	bpl.n	800e0d4 <_svfprintf_r+0xa68>
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0d0:	601a      	str	r2, [r3, #0]
 800e0d2:	e7f4      	b.n	800e0be <_svfprintf_r+0xa52>
 800e0d4:	0673      	lsls	r3, r6, #25
 800e0d6:	d503      	bpl.n	800e0e0 <_svfprintf_r+0xa74>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0dc:	801a      	strh	r2, [r3, #0]
 800e0de:	e7ee      	b.n	800e0be <_svfprintf_r+0xa52>
 800e0e0:	05b6      	lsls	r6, r6, #22
 800e0e2:	d5f3      	bpl.n	800e0cc <_svfprintf_r+0xa60>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0e8:	701a      	strb	r2, [r3, #0]
 800e0ea:	e7e8      	b.n	800e0be <_svfprintf_r+0xa52>
 800e0ec:	2310      	movs	r3, #16
 800e0ee:	431e      	orrs	r6, r3
 800e0f0:	2320      	movs	r3, #32
 800e0f2:	0030      	movs	r0, r6
 800e0f4:	4018      	ands	r0, r3
 800e0f6:	421e      	tst	r6, r3
 800e0f8:	d00f      	beq.n	800e11a <_svfprintf_r+0xaae>
 800e0fa:	3b19      	subs	r3, #25
 800e0fc:	3407      	adds	r4, #7
 800e0fe:	439c      	bics	r4, r3
 800e100:	0022      	movs	r2, r4
 800e102:	ca18      	ldmia	r2!, {r3, r4}
 800e104:	9306      	str	r3, [sp, #24]
 800e106:	9407      	str	r4, [sp, #28]
 800e108:	920d      	str	r2, [sp, #52]	; 0x34
 800e10a:	4bc9      	ldr	r3, [pc, #804]	; (800e430 <_svfprintf_r+0xdc4>)
 800e10c:	401e      	ands	r6, r3
 800e10e:	2300      	movs	r3, #0
 800e110:	221b      	movs	r2, #27
 800e112:	a91e      	add	r1, sp, #120	; 0x78
 800e114:	1852      	adds	r2, r2, r1
 800e116:	2100      	movs	r1, #0
 800e118:	e430      	b.n	800d97c <_svfprintf_r+0x310>
 800e11a:	0022      	movs	r2, r4
 800e11c:	ca08      	ldmia	r2!, {r3}
 800e11e:	0031      	movs	r1, r6
 800e120:	920d      	str	r2, [sp, #52]	; 0x34
 800e122:	2210      	movs	r2, #16
 800e124:	4011      	ands	r1, r2
 800e126:	4216      	tst	r6, r2
 800e128:	d002      	beq.n	800e130 <_svfprintf_r+0xac4>
 800e12a:	9306      	str	r3, [sp, #24]
 800e12c:	9007      	str	r0, [sp, #28]
 800e12e:	e7ec      	b.n	800e10a <_svfprintf_r+0xa9e>
 800e130:	2240      	movs	r2, #64	; 0x40
 800e132:	0030      	movs	r0, r6
 800e134:	4010      	ands	r0, r2
 800e136:	4216      	tst	r6, r2
 800e138:	d003      	beq.n	800e142 <_svfprintf_r+0xad6>
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	9306      	str	r3, [sp, #24]
 800e13e:	9107      	str	r1, [sp, #28]
 800e140:	e7e3      	b.n	800e10a <_svfprintf_r+0xa9e>
 800e142:	2280      	movs	r2, #128	; 0x80
 800e144:	0031      	movs	r1, r6
 800e146:	0092      	lsls	r2, r2, #2
 800e148:	4011      	ands	r1, r2
 800e14a:	4216      	tst	r6, r2
 800e14c:	d0f6      	beq.n	800e13c <_svfprintf_r+0xad0>
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	e7eb      	b.n	800e12a <_svfprintf_r+0xabe>
 800e152:	0023      	movs	r3, r4
 800e154:	cb04      	ldmia	r3!, {r2}
 800e156:	49b7      	ldr	r1, [pc, #732]	; (800e434 <_svfprintf_r+0xdc8>)
 800e158:	9206      	str	r2, [sp, #24]
 800e15a:	aa25      	add	r2, sp, #148	; 0x94
 800e15c:	8011      	strh	r1, [r2, #0]
 800e15e:	4ab6      	ldr	r2, [pc, #728]	; (800e438 <_svfprintf_r+0xdcc>)
 800e160:	930d      	str	r3, [sp, #52]	; 0x34
 800e162:	2300      	movs	r3, #0
 800e164:	921f      	str	r2, [sp, #124]	; 0x7c
 800e166:	2278      	movs	r2, #120	; 0x78
 800e168:	9307      	str	r3, [sp, #28]
 800e16a:	3302      	adds	r3, #2
 800e16c:	431e      	orrs	r6, r3
 800e16e:	920f      	str	r2, [sp, #60]	; 0x3c
 800e170:	e7ce      	b.n	800e110 <_svfprintf_r+0xaa4>
 800e172:	0023      	movs	r3, r4
 800e174:	cb04      	ldmia	r3!, {r2}
 800e176:	2400      	movs	r4, #0
 800e178:	930d      	str	r3, [sp, #52]	; 0x34
 800e17a:	231b      	movs	r3, #27
 800e17c:	9208      	str	r2, [sp, #32]
 800e17e:	aa1e      	add	r2, sp, #120	; 0x78
 800e180:	189b      	adds	r3, r3, r2
 800e182:	701c      	strb	r4, [r3, #0]
 800e184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e186:	3301      	adds	r3, #1
 800e188:	d00e      	beq.n	800e1a8 <_svfprintf_r+0xb3c>
 800e18a:	0021      	movs	r1, r4
 800e18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e18e:	9808      	ldr	r0, [sp, #32]
 800e190:	f002 f83a 	bl	8010208 <memchr>
 800e194:	900c      	str	r0, [sp, #48]	; 0x30
 800e196:	42a0      	cmp	r0, r4
 800e198:	d100      	bne.n	800e19c <_svfprintf_r+0xb30>
 800e19a:	e10d      	b.n	800e3b8 <_svfprintf_r+0xd4c>
 800e19c:	9a08      	ldr	r2, [sp, #32]
 800e19e:	1a83      	subs	r3, r0, r2
 800e1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a2:	0023      	movs	r3, r4
 800e1a4:	940c      	str	r4, [sp, #48]	; 0x30
 800e1a6:	e44e      	b.n	800da46 <_svfprintf_r+0x3da>
 800e1a8:	9808      	ldr	r0, [sp, #32]
 800e1aa:	f7f1 ffab 	bl	8000104 <strlen>
 800e1ae:	9009      	str	r0, [sp, #36]	; 0x24
 800e1b0:	e7f7      	b.n	800e1a2 <_svfprintf_r+0xb36>
 800e1b2:	2310      	movs	r3, #16
 800e1b4:	431e      	orrs	r6, r3
 800e1b6:	2320      	movs	r3, #32
 800e1b8:	0030      	movs	r0, r6
 800e1ba:	4018      	ands	r0, r3
 800e1bc:	421e      	tst	r6, r3
 800e1be:	d009      	beq.n	800e1d4 <_svfprintf_r+0xb68>
 800e1c0:	3b19      	subs	r3, #25
 800e1c2:	3407      	adds	r4, #7
 800e1c4:	439c      	bics	r4, r3
 800e1c6:	0022      	movs	r2, r4
 800e1c8:	ca18      	ldmia	r2!, {r3, r4}
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	9407      	str	r4, [sp, #28]
 800e1ce:	920d      	str	r2, [sp, #52]	; 0x34
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e79d      	b.n	800e110 <_svfprintf_r+0xaa4>
 800e1d4:	0023      	movs	r3, r4
 800e1d6:	cb04      	ldmia	r3!, {r2}
 800e1d8:	0031      	movs	r1, r6
 800e1da:	930d      	str	r3, [sp, #52]	; 0x34
 800e1dc:	2310      	movs	r3, #16
 800e1de:	4019      	ands	r1, r3
 800e1e0:	421e      	tst	r6, r3
 800e1e2:	d003      	beq.n	800e1ec <_svfprintf_r+0xb80>
 800e1e4:	9206      	str	r2, [sp, #24]
 800e1e6:	9007      	str	r0, [sp, #28]
 800e1e8:	3b0f      	subs	r3, #15
 800e1ea:	e791      	b.n	800e110 <_svfprintf_r+0xaa4>
 800e1ec:	2340      	movs	r3, #64	; 0x40
 800e1ee:	0030      	movs	r0, r6
 800e1f0:	4018      	ands	r0, r3
 800e1f2:	421e      	tst	r6, r3
 800e1f4:	d003      	beq.n	800e1fe <_svfprintf_r+0xb92>
 800e1f6:	b293      	uxth	r3, r2
 800e1f8:	9306      	str	r3, [sp, #24]
 800e1fa:	9107      	str	r1, [sp, #28]
 800e1fc:	e7e8      	b.n	800e1d0 <_svfprintf_r+0xb64>
 800e1fe:	2380      	movs	r3, #128	; 0x80
 800e200:	0031      	movs	r1, r6
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4019      	ands	r1, r3
 800e206:	421e      	tst	r6, r3
 800e208:	d003      	beq.n	800e212 <_svfprintf_r+0xba6>
 800e20a:	b2d3      	uxtb	r3, r2
 800e20c:	9306      	str	r3, [sp, #24]
 800e20e:	9007      	str	r0, [sp, #28]
 800e210:	e7de      	b.n	800e1d0 <_svfprintf_r+0xb64>
 800e212:	9206      	str	r2, [sp, #24]
 800e214:	e7f1      	b.n	800e1fa <_svfprintf_r+0xb8e>
 800e216:	4b89      	ldr	r3, [pc, #548]	; (800e43c <_svfprintf_r+0xdd0>)
 800e218:	0030      	movs	r0, r6
 800e21a:	931f      	str	r3, [sp, #124]	; 0x7c
 800e21c:	2320      	movs	r3, #32
 800e21e:	4018      	ands	r0, r3
 800e220:	421e      	tst	r6, r3
 800e222:	d01a      	beq.n	800e25a <_svfprintf_r+0xbee>
 800e224:	3b19      	subs	r3, #25
 800e226:	3407      	adds	r4, #7
 800e228:	439c      	bics	r4, r3
 800e22a:	0022      	movs	r2, r4
 800e22c:	ca18      	ldmia	r2!, {r3, r4}
 800e22e:	9306      	str	r3, [sp, #24]
 800e230:	9407      	str	r4, [sp, #28]
 800e232:	920d      	str	r2, [sp, #52]	; 0x34
 800e234:	07f3      	lsls	r3, r6, #31
 800e236:	d50a      	bpl.n	800e24e <_svfprintf_r+0xbe2>
 800e238:	9b06      	ldr	r3, [sp, #24]
 800e23a:	9a07      	ldr	r2, [sp, #28]
 800e23c:	4313      	orrs	r3, r2
 800e23e:	d006      	beq.n	800e24e <_svfprintf_r+0xbe2>
 800e240:	2230      	movs	r2, #48	; 0x30
 800e242:	ab25      	add	r3, sp, #148	; 0x94
 800e244:	701a      	strb	r2, [r3, #0]
 800e246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e248:	705a      	strb	r2, [r3, #1]
 800e24a:	2302      	movs	r3, #2
 800e24c:	431e      	orrs	r6, r3
 800e24e:	4b78      	ldr	r3, [pc, #480]	; (800e430 <_svfprintf_r+0xdc4>)
 800e250:	401e      	ands	r6, r3
 800e252:	2302      	movs	r3, #2
 800e254:	e75c      	b.n	800e110 <_svfprintf_r+0xaa4>
 800e256:	4b78      	ldr	r3, [pc, #480]	; (800e438 <_svfprintf_r+0xdcc>)
 800e258:	e7de      	b.n	800e218 <_svfprintf_r+0xbac>
 800e25a:	0023      	movs	r3, r4
 800e25c:	cb04      	ldmia	r3!, {r2}
 800e25e:	0031      	movs	r1, r6
 800e260:	930d      	str	r3, [sp, #52]	; 0x34
 800e262:	2310      	movs	r3, #16
 800e264:	4019      	ands	r1, r3
 800e266:	421e      	tst	r6, r3
 800e268:	d002      	beq.n	800e270 <_svfprintf_r+0xc04>
 800e26a:	9206      	str	r2, [sp, #24]
 800e26c:	9007      	str	r0, [sp, #28]
 800e26e:	e7e1      	b.n	800e234 <_svfprintf_r+0xbc8>
 800e270:	2340      	movs	r3, #64	; 0x40
 800e272:	0030      	movs	r0, r6
 800e274:	4018      	ands	r0, r3
 800e276:	421e      	tst	r6, r3
 800e278:	d003      	beq.n	800e282 <_svfprintf_r+0xc16>
 800e27a:	b293      	uxth	r3, r2
 800e27c:	9306      	str	r3, [sp, #24]
 800e27e:	9107      	str	r1, [sp, #28]
 800e280:	e7d8      	b.n	800e234 <_svfprintf_r+0xbc8>
 800e282:	2380      	movs	r3, #128	; 0x80
 800e284:	0031      	movs	r1, r6
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4019      	ands	r1, r3
 800e28a:	421e      	tst	r6, r3
 800e28c:	d002      	beq.n	800e294 <_svfprintf_r+0xc28>
 800e28e:	b2d3      	uxtb	r3, r2
 800e290:	9306      	str	r3, [sp, #24]
 800e292:	e7eb      	b.n	800e26c <_svfprintf_r+0xc00>
 800e294:	9206      	str	r2, [sp, #24]
 800e296:	e7f2      	b.n	800e27e <_svfprintf_r+0xc12>
 800e298:	9b07      	ldr	r3, [sp, #28]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d10a      	bne.n	800e2b4 <_svfprintf_r+0xc48>
 800e29e:	9b06      	ldr	r3, [sp, #24]
 800e2a0:	2b09      	cmp	r3, #9
 800e2a2:	d807      	bhi.n	800e2b4 <_svfprintf_r+0xc48>
 800e2a4:	23e7      	movs	r3, #231	; 0xe7
 800e2a6:	aa1e      	add	r2, sp, #120	; 0x78
 800e2a8:	189b      	adds	r3, r3, r2
 800e2aa:	9a06      	ldr	r2, [sp, #24]
 800e2ac:	3230      	adds	r2, #48	; 0x30
 800e2ae:	701a      	strb	r2, [r3, #0]
 800e2b0:	f000 fc18 	bl	800eae4 <_svfprintf_r+0x1478>
 800e2b4:	2680      	movs	r6, #128	; 0x80
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	00f6      	lsls	r6, r6, #3
 800e2ba:	930e      	str	r3, [sp, #56]	; 0x38
 800e2bc:	ad58      	add	r5, sp, #352	; 0x160
 800e2be:	4026      	ands	r6, r4
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	9806      	ldr	r0, [sp, #24]
 800e2c4:	9907      	ldr	r1, [sp, #28]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f7f2 f8ec 	bl	80004a4 <__aeabi_uldivmod>
 800e2cc:	1e6b      	subs	r3, r5, #1
 800e2ce:	3230      	adds	r2, #48	; 0x30
 800e2d0:	9308      	str	r3, [sp, #32]
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d6:	900c      	str	r0, [sp, #48]	; 0x30
 800e2d8:	3301      	adds	r3, #1
 800e2da:	9110      	str	r1, [sp, #64]	; 0x40
 800e2dc:	930e      	str	r3, [sp, #56]	; 0x38
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	d01d      	beq.n	800e31e <_svfprintf_r+0xcb2>
 800e2e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d118      	bne.n	800e31e <_svfprintf_r+0xcb2>
 800e2ec:	2aff      	cmp	r2, #255	; 0xff
 800e2ee:	d016      	beq.n	800e31e <_svfprintf_r+0xcb2>
 800e2f0:	9b07      	ldr	r3, [sp, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <_svfprintf_r+0xc90>
 800e2f6:	9b06      	ldr	r3, [sp, #24]
 800e2f8:	2b09      	cmp	r3, #9
 800e2fa:	d910      	bls.n	800e31e <_svfprintf_r+0xcb2>
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e300:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	0018      	movs	r0, r3
 800e306:	9308      	str	r3, [sp, #32]
 800e308:	f7fd ffd1 	bl	800c2ae <strncpy>
 800e30c:	2200      	movs	r2, #0
 800e30e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e310:	920e      	str	r2, [sp, #56]	; 0x38
 800e312:	785b      	ldrb	r3, [r3, #1]
 800e314:	1e5a      	subs	r2, r3, #1
 800e316:	4193      	sbcs	r3, r2
 800e318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e31a:	18d3      	adds	r3, r2, r3
 800e31c:	9312      	str	r3, [sp, #72]	; 0x48
 800e31e:	9b07      	ldr	r3, [sp, #28]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10f      	bne.n	800e344 <_svfprintf_r+0xcd8>
 800e324:	9b06      	ldr	r3, [sp, #24]
 800e326:	2b09      	cmp	r3, #9
 800e328:	d80c      	bhi.n	800e344 <_svfprintf_r+0xcd8>
 800e32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32c:	9a08      	ldr	r2, [sp, #32]
 800e32e:	9319      	str	r3, [sp, #100]	; 0x64
 800e330:	ab58      	add	r3, sp, #352	; 0x160
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	9309      	str	r3, [sp, #36]	; 0x24
 800e336:	2300      	movs	r3, #0
 800e338:	0026      	movs	r6, r4
 800e33a:	930c      	str	r3, [sp, #48]	; 0x30
 800e33c:	001d      	movs	r5, r3
 800e33e:	9310      	str	r3, [sp, #64]	; 0x40
 800e340:	9311      	str	r3, [sp, #68]	; 0x44
 800e342:	e4f2      	b.n	800dd2a <_svfprintf_r+0x6be>
 800e344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e346:	9d08      	ldr	r5, [sp, #32]
 800e348:	9306      	str	r3, [sp, #24]
 800e34a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e34c:	9307      	str	r3, [sp, #28]
 800e34e:	e7b7      	b.n	800e2c0 <_svfprintf_r+0xc54>
 800e350:	200f      	movs	r0, #15
 800e352:	ab58      	add	r3, sp, #352	; 0x160
 800e354:	9308      	str	r3, [sp, #32]
 800e356:	9b08      	ldr	r3, [sp, #32]
 800e358:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e35a:	3b01      	subs	r3, #1
 800e35c:	9308      	str	r3, [sp, #32]
 800e35e:	9b06      	ldr	r3, [sp, #24]
 800e360:	4003      	ands	r3, r0
 800e362:	5cd3      	ldrb	r3, [r2, r3]
 800e364:	9a08      	ldr	r2, [sp, #32]
 800e366:	7013      	strb	r3, [r2, #0]
 800e368:	9b07      	ldr	r3, [sp, #28]
 800e36a:	0719      	lsls	r1, r3, #28
 800e36c:	9b06      	ldr	r3, [sp, #24]
 800e36e:	091a      	lsrs	r2, r3, #4
 800e370:	9b07      	ldr	r3, [sp, #28]
 800e372:	4311      	orrs	r1, r2
 800e374:	091b      	lsrs	r3, r3, #4
 800e376:	9307      	str	r3, [sp, #28]
 800e378:	000b      	movs	r3, r1
 800e37a:	9a07      	ldr	r2, [sp, #28]
 800e37c:	9106      	str	r1, [sp, #24]
 800e37e:	4313      	orrs	r3, r2
 800e380:	d1e9      	bne.n	800e356 <_svfprintf_r+0xcea>
 800e382:	e7d2      	b.n	800e32a <_svfprintf_r+0xcbe>
 800e384:	aa58      	add	r2, sp, #352	; 0x160
 800e386:	9208      	str	r2, [sp, #32]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1ce      	bne.n	800e32a <_svfprintf_r+0xcbe>
 800e38c:	07f6      	lsls	r6, r6, #31
 800e38e:	d5cc      	bpl.n	800e32a <_svfprintf_r+0xcbe>
 800e390:	aa1e      	add	r2, sp, #120	; 0x78
 800e392:	33e7      	adds	r3, #231	; 0xe7
 800e394:	189b      	adds	r3, r3, r2
 800e396:	2230      	movs	r2, #48	; 0x30
 800e398:	e789      	b.n	800e2ae <_svfprintf_r+0xc42>
 800e39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d100      	bne.n	800e3a2 <_svfprintf_r+0xd36>
 800e3a0:	e364      	b.n	800ea6c <_svfprintf_r+0x1400>
 800e3a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e3a4:	211b      	movs	r1, #27
 800e3a6:	ab3f      	add	r3, sp, #252	; 0xfc
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	a81e      	add	r0, sp, #120	; 0x78
 800e3ae:	1809      	adds	r1, r1, r0
 800e3b0:	700a      	strb	r2, [r1, #0]
 800e3b2:	940d      	str	r4, [sp, #52]	; 0x34
 800e3b4:	f7ff fabd 	bl	800d932 <_svfprintf_r+0x2c6>
 800e3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3ba:	f7ff fb44 	bl	800da46 <_svfprintf_r+0x3da>
 800e3be:	2010      	movs	r0, #16
 800e3c0:	1812      	adds	r2, r2, r0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3c8:	2b07      	cmp	r3, #7
 800e3ca:	dd08      	ble.n	800e3de <_svfprintf_r+0xd72>
 800e3cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3d2:	f003 fa61 	bl	8011898 <__ssprint_r>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d000      	beq.n	800e3dc <_svfprintf_r+0xd70>
 800e3da:	e326      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e3dc:	a92f      	add	r1, sp, #188	; 0xbc
 800e3de:	000f      	movs	r7, r1
 800e3e0:	3c10      	subs	r4, #16
 800e3e2:	e4c5      	b.n	800dd70 <_svfprintf_r+0x704>
 800e3e4:	2010      	movs	r0, #16
 800e3e6:	1812      	adds	r2, r2, r0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3ee:	2b07      	cmp	r3, #7
 800e3f0:	dd08      	ble.n	800e404 <_svfprintf_r+0xd98>
 800e3f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3f8:	f003 fa4e 	bl	8011898 <__ssprint_r>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d000      	beq.n	800e402 <_svfprintf_r+0xd96>
 800e400:	e313      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e402:	a92f      	add	r1, sp, #188	; 0xbc
 800e404:	000f      	movs	r7, r1
 800e406:	3c10      	subs	r4, #16
 800e408:	e50b      	b.n	800de22 <_svfprintf_r+0x7b6>
 800e40a:	2010      	movs	r0, #16
 800e40c:	1812      	adds	r2, r2, r0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	922e      	str	r2, [sp, #184]	; 0xb8
 800e412:	932d      	str	r3, [sp, #180]	; 0xb4
 800e414:	2b07      	cmp	r3, #7
 800e416:	dd08      	ble.n	800e42a <_svfprintf_r+0xdbe>
 800e418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e41a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e41c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e41e:	f003 fa3b 	bl	8011898 <__ssprint_r>
 800e422:	2800      	cmp	r0, #0
 800e424:	d000      	beq.n	800e428 <_svfprintf_r+0xdbc>
 800e426:	e300      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e428:	a92f      	add	r1, sp, #188	; 0xbc
 800e42a:	000f      	movs	r7, r1
 800e42c:	3c10      	subs	r4, #16
 800e42e:	e518      	b.n	800de62 <_svfprintf_r+0x7f6>
 800e430:	fffffbff 	.word	0xfffffbff
 800e434:	00007830 	.word	0x00007830
 800e438:	08014abc 	.word	0x08014abc
 800e43c:	08014acd 	.word	0x08014acd
 800e440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e442:	2b65      	cmp	r3, #101	; 0x65
 800e444:	dc00      	bgt.n	800e448 <_svfprintf_r+0xddc>
 800e446:	e241      	b.n	800e8cc <_svfprintf_r+0x1260>
 800e448:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e44a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e44c:	2200      	movs	r2, #0
 800e44e:	2300      	movs	r3, #0
 800e450:	f7f1 fffa 	bl	8000448 <__aeabi_dcmpeq>
 800e454:	2800      	cmp	r0, #0
 800e456:	d077      	beq.n	800e548 <_svfprintf_r+0xedc>
 800e458:	4bca      	ldr	r3, [pc, #808]	; (800e784 <_svfprintf_r+0x1118>)
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	2301      	movs	r3, #1
 800e45e:	607b      	str	r3, [r7, #4]
 800e460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e462:	3708      	adds	r7, #8
 800e464:	3301      	adds	r3, #1
 800e466:	932e      	str	r3, [sp, #184]	; 0xb8
 800e468:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e46a:	3301      	adds	r3, #1
 800e46c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e46e:	2b07      	cmp	r3, #7
 800e470:	dd08      	ble.n	800e484 <_svfprintf_r+0xe18>
 800e472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e474:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e476:	aa2c      	add	r2, sp, #176	; 0xb0
 800e478:	f003 fa0e 	bl	8011898 <__ssprint_r>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d000      	beq.n	800e482 <_svfprintf_r+0xe16>
 800e480:	e2d3      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e482:	af2f      	add	r7, sp, #188	; 0xbc
 800e484:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e488:	4293      	cmp	r3, r2
 800e48a:	db01      	blt.n	800e490 <_svfprintf_r+0xe24>
 800e48c:	07f3      	lsls	r3, r6, #31
 800e48e:	d51b      	bpl.n	800e4c8 <_svfprintf_r+0xe5c>
 800e490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e492:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e494:	603b      	str	r3, [r7, #0]
 800e496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e498:	607b      	str	r3, [r7, #4]
 800e49a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e49c:	3708      	adds	r7, #8
 800e49e:	189b      	adds	r3, r3, r2
 800e4a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e4a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4a8:	2b07      	cmp	r3, #7
 800e4aa:	dd08      	ble.n	800e4be <_svfprintf_r+0xe52>
 800e4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4b2:	f003 f9f1 	bl	8011898 <__ssprint_r>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d000      	beq.n	800e4bc <_svfprintf_r+0xe50>
 800e4ba:	e2b6      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e4bc:	af2f      	add	r7, sp, #188	; 0xbc
 800e4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4c0:	2510      	movs	r5, #16
 800e4c2:	1e5c      	subs	r4, r3, #1
 800e4c4:	2c00      	cmp	r4, #0
 800e4c6:	dc2e      	bgt.n	800e526 <_svfprintf_r+0xeba>
 800e4c8:	0776      	lsls	r6, r6, #29
 800e4ca:	d500      	bpl.n	800e4ce <_svfprintf_r+0xe62>
 800e4cc:	e290      	b.n	800e9f0 <_svfprintf_r+0x1384>
 800e4ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e4d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	da00      	bge.n	800e4d8 <_svfprintf_r+0xe6c>
 800e4d6:	0013      	movs	r3, r2
 800e4d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4da:	18d3      	adds	r3, r2, r3
 800e4dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800e4de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d007      	beq.n	800e4f4 <_svfprintf_r+0xe88>
 800e4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ea:	f003 f9d5 	bl	8011898 <__ssprint_r>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d000      	beq.n	800e4f4 <_svfprintf_r+0xe88>
 800e4f2:	e29a      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d000      	beq.n	800e500 <_svfprintf_r+0xe94>
 800e4fe:	e2b0      	b.n	800ea62 <_svfprintf_r+0x13f6>
 800e500:	af2f      	add	r7, sp, #188	; 0xbc
 800e502:	e5dc      	b.n	800e0be <_svfprintf_r+0xa52>
 800e504:	3210      	adds	r2, #16
 800e506:	607d      	str	r5, [r7, #4]
 800e508:	922e      	str	r2, [sp, #184]	; 0xb8
 800e50a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e50c:	2b07      	cmp	r3, #7
 800e50e:	dd08      	ble.n	800e522 <_svfprintf_r+0xeb6>
 800e510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e512:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e514:	aa2c      	add	r2, sp, #176	; 0xb0
 800e516:	f003 f9bf 	bl	8011898 <__ssprint_r>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d000      	beq.n	800e520 <_svfprintf_r+0xeb4>
 800e51e:	e284      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e520:	a92f      	add	r1, sp, #188	; 0xbc
 800e522:	000f      	movs	r7, r1
 800e524:	3c10      	subs	r4, #16
 800e526:	0039      	movs	r1, r7
 800e528:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e52a:	4897      	ldr	r0, [pc, #604]	; (800e788 <_svfprintf_r+0x111c>)
 800e52c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e52e:	3301      	adds	r3, #1
 800e530:	3108      	adds	r1, #8
 800e532:	6038      	str	r0, [r7, #0]
 800e534:	2c10      	cmp	r4, #16
 800e536:	dce5      	bgt.n	800e504 <_svfprintf_r+0xe98>
 800e538:	607c      	str	r4, [r7, #4]
 800e53a:	18a4      	adds	r4, r4, r2
 800e53c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e53e:	000f      	movs	r7, r1
 800e540:	932d      	str	r3, [sp, #180]	; 0xb4
 800e542:	2b07      	cmp	r3, #7
 800e544:	ddc0      	ble.n	800e4c8 <_svfprintf_r+0xe5c>
 800e546:	e05f      	b.n	800e608 <_svfprintf_r+0xf9c>
 800e548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	dc78      	bgt.n	800e640 <_svfprintf_r+0xfd4>
 800e54e:	4b8d      	ldr	r3, [pc, #564]	; (800e784 <_svfprintf_r+0x1118>)
 800e550:	603b      	str	r3, [r7, #0]
 800e552:	2301      	movs	r3, #1
 800e554:	607b      	str	r3, [r7, #4]
 800e556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e558:	3708      	adds	r7, #8
 800e55a:	3301      	adds	r3, #1
 800e55c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e55e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e560:	3301      	adds	r3, #1
 800e562:	932d      	str	r3, [sp, #180]	; 0xb4
 800e564:	2b07      	cmp	r3, #7
 800e566:	dd08      	ble.n	800e57a <_svfprintf_r+0xf0e>
 800e568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e56a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e56c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e56e:	f003 f993 	bl	8011898 <__ssprint_r>
 800e572:	2800      	cmp	r0, #0
 800e574:	d000      	beq.n	800e578 <_svfprintf_r+0xf0c>
 800e576:	e258      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e578:	af2f      	add	r7, sp, #188	; 0xbc
 800e57a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e57c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e57e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e580:	430b      	orrs	r3, r1
 800e582:	2101      	movs	r1, #1
 800e584:	4031      	ands	r1, r6
 800e586:	430b      	orrs	r3, r1
 800e588:	d09e      	beq.n	800e4c8 <_svfprintf_r+0xe5c>
 800e58a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e58c:	603b      	str	r3, [r7, #0]
 800e58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e590:	607b      	str	r3, [r7, #4]
 800e592:	189a      	adds	r2, r3, r2
 800e594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e596:	922e      	str	r2, [sp, #184]	; 0xb8
 800e598:	3301      	adds	r3, #1
 800e59a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e59c:	3708      	adds	r7, #8
 800e59e:	2b07      	cmp	r3, #7
 800e5a0:	dd08      	ble.n	800e5b4 <_svfprintf_r+0xf48>
 800e5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5a6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5a8:	f003 f976 	bl	8011898 <__ssprint_r>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d000      	beq.n	800e5b2 <_svfprintf_r+0xf46>
 800e5b0:	e23b      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e5b2:	af2f      	add	r7, sp, #188	; 0xbc
 800e5b4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e5b6:	2c00      	cmp	r4, #0
 800e5b8:	da19      	bge.n	800e5ee <_svfprintf_r+0xf82>
 800e5ba:	0038      	movs	r0, r7
 800e5bc:	2510      	movs	r5, #16
 800e5be:	4264      	negs	r4, r4
 800e5c0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e5c2:	4a71      	ldr	r2, [pc, #452]	; (800e788 <_svfprintf_r+0x111c>)
 800e5c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5c6:	3101      	adds	r1, #1
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	6002      	str	r2, [r0, #0]
 800e5cc:	2c10      	cmp	r4, #16
 800e5ce:	dc25      	bgt.n	800e61c <_svfprintf_r+0xfb0>
 800e5d0:	6044      	str	r4, [r0, #4]
 800e5d2:	18e4      	adds	r4, r4, r3
 800e5d4:	942e      	str	r4, [sp, #184]	; 0xb8
 800e5d6:	912d      	str	r1, [sp, #180]	; 0xb4
 800e5d8:	2907      	cmp	r1, #7
 800e5da:	dd08      	ble.n	800e5ee <_svfprintf_r+0xf82>
 800e5dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5e2:	f003 f959 	bl	8011898 <__ssprint_r>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d000      	beq.n	800e5ec <_svfprintf_r+0xf80>
 800e5ea:	e21e      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e5ec:	af2f      	add	r7, sp, #188	; 0xbc
 800e5ee:	9b08      	ldr	r3, [sp, #32]
 800e5f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5f6:	18d2      	adds	r2, r2, r3
 800e5f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e5fc:	607b      	str	r3, [r7, #4]
 800e5fe:	3201      	adds	r2, #1
 800e600:	922d      	str	r2, [sp, #180]	; 0xb4
 800e602:	2a07      	cmp	r2, #7
 800e604:	dc00      	bgt.n	800e608 <_svfprintf_r+0xf9c>
 800e606:	e45b      	b.n	800dec0 <_svfprintf_r+0x854>
 800e608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e60a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e60c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e60e:	f003 f943 	bl	8011898 <__ssprint_r>
 800e612:	2800      	cmp	r0, #0
 800e614:	d000      	beq.n	800e618 <_svfprintf_r+0xfac>
 800e616:	e208      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e618:	af2f      	add	r7, sp, #188	; 0xbc
 800e61a:	e755      	b.n	800e4c8 <_svfprintf_r+0xe5c>
 800e61c:	3310      	adds	r3, #16
 800e61e:	6045      	str	r5, [r0, #4]
 800e620:	932e      	str	r3, [sp, #184]	; 0xb8
 800e622:	912d      	str	r1, [sp, #180]	; 0xb4
 800e624:	2907      	cmp	r1, #7
 800e626:	dd08      	ble.n	800e63a <_svfprintf_r+0xfce>
 800e628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e62a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e62c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e62e:	f003 f933 	bl	8011898 <__ssprint_r>
 800e632:	2800      	cmp	r0, #0
 800e634:	d000      	beq.n	800e638 <_svfprintf_r+0xfcc>
 800e636:	e1f8      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e638:	af2f      	add	r7, sp, #188	; 0xbc
 800e63a:	0038      	movs	r0, r7
 800e63c:	3c10      	subs	r4, #16
 800e63e:	e7bf      	b.n	800e5c0 <_svfprintf_r+0xf54>
 800e640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e642:	002c      	movs	r4, r5
 800e644:	429d      	cmp	r5, r3
 800e646:	dd00      	ble.n	800e64a <_svfprintf_r+0xfde>
 800e648:	001c      	movs	r4, r3
 800e64a:	2c00      	cmp	r4, #0
 800e64c:	dd14      	ble.n	800e678 <_svfprintf_r+0x100c>
 800e64e:	9b08      	ldr	r3, [sp, #32]
 800e650:	607c      	str	r4, [r7, #4]
 800e652:	603b      	str	r3, [r7, #0]
 800e654:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e656:	3708      	adds	r7, #8
 800e658:	18e3      	adds	r3, r4, r3
 800e65a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e65c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e65e:	3301      	adds	r3, #1
 800e660:	932d      	str	r3, [sp, #180]	; 0xb4
 800e662:	2b07      	cmp	r3, #7
 800e664:	dd08      	ble.n	800e678 <_svfprintf_r+0x100c>
 800e666:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e668:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e66a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e66c:	f003 f914 	bl	8011898 <__ssprint_r>
 800e670:	2800      	cmp	r0, #0
 800e672:	d000      	beq.n	800e676 <_svfprintf_r+0x100a>
 800e674:	e1d9      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e676:	af2f      	add	r7, sp, #188	; 0xbc
 800e678:	43e3      	mvns	r3, r4
 800e67a:	17db      	asrs	r3, r3, #31
 800e67c:	401c      	ands	r4, r3
 800e67e:	1b2c      	subs	r4, r5, r4
 800e680:	2c00      	cmp	r4, #0
 800e682:	dd18      	ble.n	800e6b6 <_svfprintf_r+0x104a>
 800e684:	0039      	movs	r1, r7
 800e686:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e688:	483f      	ldr	r0, [pc, #252]	; (800e788 <_svfprintf_r+0x111c>)
 800e68a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e68c:	3301      	adds	r3, #1
 800e68e:	3108      	adds	r1, #8
 800e690:	6038      	str	r0, [r7, #0]
 800e692:	2c10      	cmp	r4, #16
 800e694:	dc7a      	bgt.n	800e78c <_svfprintf_r+0x1120>
 800e696:	607c      	str	r4, [r7, #4]
 800e698:	18a4      	adds	r4, r4, r2
 800e69a:	000f      	movs	r7, r1
 800e69c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e69e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6a0:	2b07      	cmp	r3, #7
 800e6a2:	dd08      	ble.n	800e6b6 <_svfprintf_r+0x104a>
 800e6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6a8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6aa:	f003 f8f5 	bl	8011898 <__ssprint_r>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d000      	beq.n	800e6b4 <_svfprintf_r+0x1048>
 800e6b2:	e1ba      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e6b4:	af2f      	add	r7, sp, #188	; 0xbc
 800e6b6:	9b08      	ldr	r3, [sp, #32]
 800e6b8:	195d      	adds	r5, r3, r5
 800e6ba:	0573      	lsls	r3, r6, #21
 800e6bc:	d50b      	bpl.n	800e6d6 <_svfprintf_r+0x106a>
 800e6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d176      	bne.n	800e7b2 <_svfprintf_r+0x1146>
 800e6c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d176      	bne.n	800e7b8 <_svfprintf_r+0x114c>
 800e6ca:	9b08      	ldr	r3, [sp, #32]
 800e6cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6ce:	189b      	adds	r3, r3, r2
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	d900      	bls.n	800e6d6 <_svfprintf_r+0x106a>
 800e6d4:	001d      	movs	r5, r3
 800e6d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	db01      	blt.n	800e6e2 <_svfprintf_r+0x1076>
 800e6de:	07f3      	lsls	r3, r6, #31
 800e6e0:	d516      	bpl.n	800e710 <_svfprintf_r+0x10a4>
 800e6e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6ea:	607b      	str	r3, [r7, #4]
 800e6ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	189b      	adds	r3, r3, r2
 800e6f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e6f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6fa:	2b07      	cmp	r3, #7
 800e6fc:	dd08      	ble.n	800e710 <_svfprintf_r+0x10a4>
 800e6fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e700:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e702:	aa2c      	add	r2, sp, #176	; 0xb0
 800e704:	f003 f8c8 	bl	8011898 <__ssprint_r>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d000      	beq.n	800e70e <_svfprintf_r+0x10a2>
 800e70c:	e18d      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e70e:	af2f      	add	r7, sp, #188	; 0xbc
 800e710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	4694      	mov	ip, r2
 800e716:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e718:	4463      	add	r3, ip
 800e71a:	1b5b      	subs	r3, r3, r5
 800e71c:	1b14      	subs	r4, r2, r4
 800e71e:	429c      	cmp	r4, r3
 800e720:	dd00      	ble.n	800e724 <_svfprintf_r+0x10b8>
 800e722:	001c      	movs	r4, r3
 800e724:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e726:	2c00      	cmp	r4, #0
 800e728:	dd12      	ble.n	800e750 <_svfprintf_r+0x10e4>
 800e72a:	18e3      	adds	r3, r4, r3
 800e72c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e72e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e730:	603d      	str	r5, [r7, #0]
 800e732:	3301      	adds	r3, #1
 800e734:	607c      	str	r4, [r7, #4]
 800e736:	932d      	str	r3, [sp, #180]	; 0xb4
 800e738:	3708      	adds	r7, #8
 800e73a:	2b07      	cmp	r3, #7
 800e73c:	dd08      	ble.n	800e750 <_svfprintf_r+0x10e4>
 800e73e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e740:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e742:	aa2c      	add	r2, sp, #176	; 0xb0
 800e744:	f003 f8a8 	bl	8011898 <__ssprint_r>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d000      	beq.n	800e74e <_svfprintf_r+0x10e2>
 800e74c:	e16d      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e74e:	af2f      	add	r7, sp, #188	; 0xbc
 800e750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e752:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e754:	2510      	movs	r5, #16
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	43e2      	mvns	r2, r4
 800e75a:	17d2      	asrs	r2, r2, #31
 800e75c:	4014      	ands	r4, r2
 800e75e:	1b1c      	subs	r4, r3, r4
 800e760:	2c00      	cmp	r4, #0
 800e762:	dc00      	bgt.n	800e766 <_svfprintf_r+0x10fa>
 800e764:	e6b0      	b.n	800e4c8 <_svfprintf_r+0xe5c>
 800e766:	0039      	movs	r1, r7
 800e768:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e76a:	4807      	ldr	r0, [pc, #28]	; (800e788 <_svfprintf_r+0x111c>)
 800e76c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e76e:	3301      	adds	r3, #1
 800e770:	3108      	adds	r1, #8
 800e772:	6038      	str	r0, [r7, #0]
 800e774:	2c10      	cmp	r4, #16
 800e776:	dd00      	ble.n	800e77a <_svfprintf_r+0x110e>
 800e778:	e096      	b.n	800e8a8 <_svfprintf_r+0x123c>
 800e77a:	1912      	adds	r2, r2, r4
 800e77c:	607c      	str	r4, [r7, #4]
 800e77e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e780:	e6dd      	b.n	800e53e <_svfprintf_r+0xed2>
 800e782:	46c0      	nop			; (mov r8, r8)
 800e784:	08014ade 	.word	0x08014ade
 800e788:	08014af0 	.word	0x08014af0
 800e78c:	2010      	movs	r0, #16
 800e78e:	1812      	adds	r2, r2, r0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	922e      	str	r2, [sp, #184]	; 0xb8
 800e794:	932d      	str	r3, [sp, #180]	; 0xb4
 800e796:	2b07      	cmp	r3, #7
 800e798:	dd08      	ble.n	800e7ac <_svfprintf_r+0x1140>
 800e79a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e79c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e79e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7a0:	f003 f87a 	bl	8011898 <__ssprint_r>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d000      	beq.n	800e7aa <_svfprintf_r+0x113e>
 800e7a8:	e13f      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e7aa:	a92f      	add	r1, sp, #188	; 0xbc
 800e7ac:	000f      	movs	r7, r1
 800e7ae:	3c10      	subs	r4, #16
 800e7b0:	e768      	b.n	800e684 <_svfprintf_r+0x1018>
 800e7b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d05d      	beq.n	800e874 <_svfprintf_r+0x1208>
 800e7b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	9310      	str	r3, [sp, #64]	; 0x40
 800e7be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e7c2:	603b      	str	r3, [r7, #0]
 800e7c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7c6:	607b      	str	r3, [r7, #4]
 800e7c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	189b      	adds	r3, r3, r2
 800e7ce:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7d6:	2b07      	cmp	r3, #7
 800e7d8:	dd08      	ble.n	800e7ec <_svfprintf_r+0x1180>
 800e7da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7de:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7e0:	f003 f85a 	bl	8011898 <__ssprint_r>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d000      	beq.n	800e7ea <_svfprintf_r+0x117e>
 800e7e8:	e11f      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e7ea:	af2f      	add	r7, sp, #188	; 0xbc
 800e7ec:	9b08      	ldr	r3, [sp, #32]
 800e7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7f0:	189c      	adds	r4, r3, r2
 800e7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7f4:	1b64      	subs	r4, r4, r5
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	429c      	cmp	r4, r3
 800e7fa:	dd00      	ble.n	800e7fe <_svfprintf_r+0x1192>
 800e7fc:	001c      	movs	r4, r3
 800e7fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e800:	2c00      	cmp	r4, #0
 800e802:	dd12      	ble.n	800e82a <_svfprintf_r+0x11be>
 800e804:	18e3      	adds	r3, r4, r3
 800e806:	932e      	str	r3, [sp, #184]	; 0xb8
 800e808:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e80a:	603d      	str	r5, [r7, #0]
 800e80c:	3301      	adds	r3, #1
 800e80e:	607c      	str	r4, [r7, #4]
 800e810:	932d      	str	r3, [sp, #180]	; 0xb4
 800e812:	3708      	adds	r7, #8
 800e814:	2b07      	cmp	r3, #7
 800e816:	dd08      	ble.n	800e82a <_svfprintf_r+0x11be>
 800e818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e81a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e81c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e81e:	f003 f83b 	bl	8011898 <__ssprint_r>
 800e822:	2800      	cmp	r0, #0
 800e824:	d000      	beq.n	800e828 <_svfprintf_r+0x11bc>
 800e826:	e100      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e828:	af2f      	add	r7, sp, #188	; 0xbc
 800e82a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	43e3      	mvns	r3, r4
 800e830:	17db      	asrs	r3, r3, #31
 800e832:	401c      	ands	r4, r3
 800e834:	1b14      	subs	r4, r2, r4
 800e836:	2c00      	cmp	r4, #0
 800e838:	dd18      	ble.n	800e86c <_svfprintf_r+0x1200>
 800e83a:	0039      	movs	r1, r7
 800e83c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e83e:	48aa      	ldr	r0, [pc, #680]	; (800eae8 <_svfprintf_r+0x147c>)
 800e840:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e842:	3301      	adds	r3, #1
 800e844:	3108      	adds	r1, #8
 800e846:	6038      	str	r0, [r7, #0]
 800e848:	2c10      	cmp	r4, #16
 800e84a:	dc1a      	bgt.n	800e882 <_svfprintf_r+0x1216>
 800e84c:	1912      	adds	r2, r2, r4
 800e84e:	607c      	str	r4, [r7, #4]
 800e850:	922e      	str	r2, [sp, #184]	; 0xb8
 800e852:	000f      	movs	r7, r1
 800e854:	932d      	str	r3, [sp, #180]	; 0xb4
 800e856:	2b07      	cmp	r3, #7
 800e858:	dd08      	ble.n	800e86c <_svfprintf_r+0x1200>
 800e85a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e85e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e860:	f003 f81a 	bl	8011898 <__ssprint_r>
 800e864:	2800      	cmp	r0, #0
 800e866:	d000      	beq.n	800e86a <_svfprintf_r+0x11fe>
 800e868:	e0df      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e86a:	af2f      	add	r7, sp, #188	; 0xbc
 800e86c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	18ed      	adds	r5, r5, r3
 800e872:	e724      	b.n	800e6be <_svfprintf_r+0x1052>
 800e874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e876:	3b01      	subs	r3, #1
 800e878:	9312      	str	r3, [sp, #72]	; 0x48
 800e87a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e87c:	3b01      	subs	r3, #1
 800e87e:	9311      	str	r3, [sp, #68]	; 0x44
 800e880:	e79d      	b.n	800e7be <_svfprintf_r+0x1152>
 800e882:	2010      	movs	r0, #16
 800e884:	1812      	adds	r2, r2, r0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	922e      	str	r2, [sp, #184]	; 0xb8
 800e88a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e88c:	2b07      	cmp	r3, #7
 800e88e:	dd08      	ble.n	800e8a2 <_svfprintf_r+0x1236>
 800e890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e892:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e894:	aa2c      	add	r2, sp, #176	; 0xb0
 800e896:	f002 ffff 	bl	8011898 <__ssprint_r>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d000      	beq.n	800e8a0 <_svfprintf_r+0x1234>
 800e89e:	e0c4      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e8a0:	a92f      	add	r1, sp, #188	; 0xbc
 800e8a2:	000f      	movs	r7, r1
 800e8a4:	3c10      	subs	r4, #16
 800e8a6:	e7c8      	b.n	800e83a <_svfprintf_r+0x11ce>
 800e8a8:	3210      	adds	r2, #16
 800e8aa:	607d      	str	r5, [r7, #4]
 800e8ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800e8ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	dd08      	ble.n	800e8c6 <_svfprintf_r+0x125a>
 800e8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8ba:	f002 ffed 	bl	8011898 <__ssprint_r>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d000      	beq.n	800e8c4 <_svfprintf_r+0x1258>
 800e8c2:	e0b2      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e8c4:	a92f      	add	r1, sp, #188	; 0xbc
 800e8c6:	000f      	movs	r7, r1
 800e8c8:	3c10      	subs	r4, #16
 800e8ca:	e74c      	b.n	800e766 <_svfprintf_r+0x10fa>
 800e8cc:	003c      	movs	r4, r7
 800e8ce:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e8d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8d4:	3101      	adds	r1, #1
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	3408      	adds	r4, #8
 800e8da:	2a01      	cmp	r2, #1
 800e8dc:	dc03      	bgt.n	800e8e6 <_svfprintf_r+0x127a>
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4216      	tst	r6, r2
 800e8e2:	d100      	bne.n	800e8e6 <_svfprintf_r+0x127a>
 800e8e4:	e07f      	b.n	800e9e6 <_svfprintf_r+0x137a>
 800e8e6:	9a08      	ldr	r2, [sp, #32]
 800e8e8:	912e      	str	r1, [sp, #184]	; 0xb8
 800e8ea:	603a      	str	r2, [r7, #0]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8f0:	607a      	str	r2, [r7, #4]
 800e8f2:	2b07      	cmp	r3, #7
 800e8f4:	dd08      	ble.n	800e908 <_svfprintf_r+0x129c>
 800e8f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8fc:	f002 ffcc 	bl	8011898 <__ssprint_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	d000      	beq.n	800e906 <_svfprintf_r+0x129a>
 800e904:	e091      	b.n	800ea2a <_svfprintf_r+0x13be>
 800e906:	ac2f      	add	r4, sp, #188	; 0xbc
 800e908:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e90a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e910:	6063      	str	r3, [r4, #4]
 800e912:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e914:	3408      	adds	r4, #8
 800e916:	189b      	adds	r3, r3, r2
 800e918:	932e      	str	r3, [sp, #184]	; 0xb8
 800e91a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e91c:	3301      	adds	r3, #1
 800e91e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e920:	2b07      	cmp	r3, #7
 800e922:	dd07      	ble.n	800e934 <_svfprintf_r+0x12c8>
 800e924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e926:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e928:	aa2c      	add	r2, sp, #176	; 0xb0
 800e92a:	f002 ffb5 	bl	8011898 <__ssprint_r>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d17b      	bne.n	800ea2a <_svfprintf_r+0x13be>
 800e932:	ac2f      	add	r4, sp, #188	; 0xbc
 800e934:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e936:	2200      	movs	r2, #0
 800e938:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e93a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e93c:	9309      	str	r3, [sp, #36]	; 0x24
 800e93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e940:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e942:	1e5d      	subs	r5, r3, #1
 800e944:	2300      	movs	r3, #0
 800e946:	f7f1 fd7f 	bl	8000448 <__aeabi_dcmpeq>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d126      	bne.n	800e99c <_svfprintf_r+0x1330>
 800e94e:	9b08      	ldr	r3, [sp, #32]
 800e950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e952:	3301      	adds	r3, #1
 800e954:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e956:	6023      	str	r3, [r4, #0]
 800e958:	1e7b      	subs	r3, r7, #1
 800e95a:	3201      	adds	r2, #1
 800e95c:	185b      	adds	r3, r3, r1
 800e95e:	6065      	str	r5, [r4, #4]
 800e960:	932e      	str	r3, [sp, #184]	; 0xb8
 800e962:	922d      	str	r2, [sp, #180]	; 0xb4
 800e964:	3408      	adds	r4, #8
 800e966:	2a07      	cmp	r2, #7
 800e968:	dd07      	ble.n	800e97a <_svfprintf_r+0x130e>
 800e96a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e96c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e96e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e970:	f002 ff92 	bl	8011898 <__ssprint_r>
 800e974:	2800      	cmp	r0, #0
 800e976:	d158      	bne.n	800ea2a <_svfprintf_r+0x13be>
 800e978:	ac2f      	add	r4, sp, #188	; 0xbc
 800e97a:	ab28      	add	r3, sp, #160	; 0xa0
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e980:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e982:	6063      	str	r3, [r4, #4]
 800e984:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e986:	189b      	adds	r3, r3, r2
 800e988:	932e      	str	r3, [sp, #184]	; 0xb8
 800e98a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e98c:	3301      	adds	r3, #1
 800e98e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e990:	2b07      	cmp	r3, #7
 800e992:	dd00      	ble.n	800e996 <_svfprintf_r+0x132a>
 800e994:	e638      	b.n	800e608 <_svfprintf_r+0xf9c>
 800e996:	3408      	adds	r4, #8
 800e998:	0027      	movs	r7, r4
 800e99a:	e595      	b.n	800e4c8 <_svfprintf_r+0xe5c>
 800e99c:	2710      	movs	r7, #16
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	ddeb      	ble.n	800e97a <_svfprintf_r+0x130e>
 800e9a2:	0021      	movs	r1, r4
 800e9a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9a6:	4850      	ldr	r0, [pc, #320]	; (800eae8 <_svfprintf_r+0x147c>)
 800e9a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	3108      	adds	r1, #8
 800e9ae:	6020      	str	r0, [r4, #0]
 800e9b0:	2d10      	cmp	r5, #16
 800e9b2:	dc07      	bgt.n	800e9c4 <_svfprintf_r+0x1358>
 800e9b4:	6065      	str	r5, [r4, #4]
 800e9b6:	000c      	movs	r4, r1
 800e9b8:	18ad      	adds	r5, r5, r2
 800e9ba:	952e      	str	r5, [sp, #184]	; 0xb8
 800e9bc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9be:	2b07      	cmp	r3, #7
 800e9c0:	dddb      	ble.n	800e97a <_svfprintf_r+0x130e>
 800e9c2:	e7d2      	b.n	800e96a <_svfprintf_r+0x12fe>
 800e9c4:	3210      	adds	r2, #16
 800e9c6:	6067      	str	r7, [r4, #4]
 800e9c8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9cc:	2b07      	cmp	r3, #7
 800e9ce:	dd07      	ble.n	800e9e0 <_svfprintf_r+0x1374>
 800e9d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9d6:	f002 ff5f 	bl	8011898 <__ssprint_r>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d125      	bne.n	800ea2a <_svfprintf_r+0x13be>
 800e9de:	a92f      	add	r1, sp, #188	; 0xbc
 800e9e0:	000c      	movs	r4, r1
 800e9e2:	3d10      	subs	r5, #16
 800e9e4:	e7dd      	b.n	800e9a2 <_svfprintf_r+0x1336>
 800e9e6:	9808      	ldr	r0, [sp, #32]
 800e9e8:	912e      	str	r1, [sp, #184]	; 0xb8
 800e9ea:	c705      	stmia	r7!, {r0, r2}
 800e9ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9ee:	e7e6      	b.n	800e9be <_svfprintf_r+0x1352>
 800e9f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e9f4:	2510      	movs	r5, #16
 800e9f6:	1a9c      	subs	r4, r3, r2
 800e9f8:	2c00      	cmp	r4, #0
 800e9fa:	dc00      	bgt.n	800e9fe <_svfprintf_r+0x1392>
 800e9fc:	e567      	b.n	800e4ce <_svfprintf_r+0xe62>
 800e9fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea00:	493a      	ldr	r1, [pc, #232]	; (800eaec <_svfprintf_r+0x1480>)
 800ea02:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ea04:	3301      	adds	r3, #1
 800ea06:	6039      	str	r1, [r7, #0]
 800ea08:	2c10      	cmp	r4, #16
 800ea0a:	dc19      	bgt.n	800ea40 <_svfprintf_r+0x13d4>
 800ea0c:	607c      	str	r4, [r7, #4]
 800ea0e:	18a4      	adds	r4, r4, r2
 800ea10:	942e      	str	r4, [sp, #184]	; 0xb8
 800ea12:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea14:	2b07      	cmp	r3, #7
 800ea16:	dc00      	bgt.n	800ea1a <_svfprintf_r+0x13ae>
 800ea18:	e559      	b.n	800e4ce <_svfprintf_r+0xe62>
 800ea1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea1e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea20:	f002 ff3a 	bl	8011898 <__ssprint_r>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d100      	bne.n	800ea2a <_svfprintf_r+0x13be>
 800ea28:	e551      	b.n	800e4ce <_svfprintf_r+0xe62>
 800ea2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <_svfprintf_r+0x13c8>
 800ea30:	f7ff f845 	bl	800dabe <_svfprintf_r+0x452>
 800ea34:	0019      	movs	r1, r3
 800ea36:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea38:	f7fd fd80 	bl	800c53c <_free_r>
 800ea3c:	f7ff f83f 	bl	800dabe <_svfprintf_r+0x452>
 800ea40:	3210      	adds	r2, #16
 800ea42:	607d      	str	r5, [r7, #4]
 800ea44:	922e      	str	r2, [sp, #184]	; 0xb8
 800ea46:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea48:	3708      	adds	r7, #8
 800ea4a:	2b07      	cmp	r3, #7
 800ea4c:	dd07      	ble.n	800ea5e <_svfprintf_r+0x13f2>
 800ea4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea52:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea54:	f002 ff20 	bl	8011898 <__ssprint_r>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d1e6      	bne.n	800ea2a <_svfprintf_r+0x13be>
 800ea5c:	af2f      	add	r7, sp, #188	; 0xbc
 800ea5e:	3c10      	subs	r4, #16
 800ea60:	e7cd      	b.n	800e9fe <_svfprintf_r+0x1392>
 800ea62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea66:	f7fd fd69 	bl	800c53c <_free_r>
 800ea6a:	e549      	b.n	800e500 <_svfprintf_r+0xe94>
 800ea6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <_svfprintf_r+0x140a>
 800ea72:	f7ff f824 	bl	800dabe <_svfprintf_r+0x452>
 800ea76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea78:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea7a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea7c:	f002 ff0c 	bl	8011898 <__ssprint_r>
 800ea80:	f7ff f81d 	bl	800dabe <_svfprintf_r+0x452>
 800ea84:	0034      	movs	r4, r6
 800ea86:	2a00      	cmp	r2, #0
 800ea88:	d101      	bne.n	800ea8e <_svfprintf_r+0x1422>
 800ea8a:	f7fe ff8c 	bl	800d9a6 <_svfprintf_r+0x33a>
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d101      	bne.n	800ea96 <_svfprintf_r+0x142a>
 800ea92:	f7ff fc01 	bl	800e298 <_svfprintf_r+0xc2c>
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d100      	bne.n	800ea9c <_svfprintf_r+0x1430>
 800ea9a:	e459      	b.n	800e350 <_svfprintf_r+0xce4>
 800ea9c:	2507      	movs	r5, #7
 800ea9e:	ab58      	add	r3, sp, #352	; 0x160
 800eaa0:	9308      	str	r3, [sp, #32]
 800eaa2:	9a08      	ldr	r2, [sp, #32]
 800eaa4:	0013      	movs	r3, r2
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	9308      	str	r3, [sp, #32]
 800eaaa:	9b06      	ldr	r3, [sp, #24]
 800eaac:	9908      	ldr	r1, [sp, #32]
 800eaae:	402b      	ands	r3, r5
 800eab0:	3330      	adds	r3, #48	; 0x30
 800eab2:	700b      	strb	r3, [r1, #0]
 800eab4:	9907      	ldr	r1, [sp, #28]
 800eab6:	074e      	lsls	r6, r1, #29
 800eab8:	9906      	ldr	r1, [sp, #24]
 800eaba:	08c8      	lsrs	r0, r1, #3
 800eabc:	9907      	ldr	r1, [sp, #28]
 800eabe:	4306      	orrs	r6, r0
 800eac0:	08c9      	lsrs	r1, r1, #3
 800eac2:	9107      	str	r1, [sp, #28]
 800eac4:	0031      	movs	r1, r6
 800eac6:	9807      	ldr	r0, [sp, #28]
 800eac8:	9606      	str	r6, [sp, #24]
 800eaca:	4301      	orrs	r1, r0
 800eacc:	d1e9      	bne.n	800eaa2 <_svfprintf_r+0x1436>
 800eace:	07e1      	lsls	r1, r4, #31
 800ead0:	d400      	bmi.n	800ead4 <_svfprintf_r+0x1468>
 800ead2:	e42a      	b.n	800e32a <_svfprintf_r+0xcbe>
 800ead4:	2b30      	cmp	r3, #48	; 0x30
 800ead6:	d100      	bne.n	800eada <_svfprintf_r+0x146e>
 800ead8:	e427      	b.n	800e32a <_svfprintf_r+0xcbe>
 800eada:	2130      	movs	r1, #48	; 0x30
 800eadc:	9b08      	ldr	r3, [sp, #32]
 800eade:	3b01      	subs	r3, #1
 800eae0:	7019      	strb	r1, [r3, #0]
 800eae2:	1e93      	subs	r3, r2, #2
 800eae4:	9308      	str	r3, [sp, #32]
 800eae6:	e420      	b.n	800e32a <_svfprintf_r+0xcbe>
 800eae8:	08014af0 	.word	0x08014af0
 800eaec:	08014ae0 	.word	0x08014ae0

0800eaf0 <__ssvfscanf_r>:
 800eaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf2:	4ca7      	ldr	r4, [pc, #668]	; (800ed90 <__ssvfscanf_r+0x2a0>)
 800eaf4:	44a5      	add	sp, r4
 800eaf6:	af02      	add	r7, sp, #8
 800eaf8:	633b      	str	r3, [r7, #48]	; 0x30
 800eafa:	000b      	movs	r3, r1
 800eafc:	6378      	str	r0, [r7, #52]	; 0x34
 800eafe:	6479      	str	r1, [r7, #68]	; 0x44
 800eb00:	61ba      	str	r2, [r7, #24]
 800eb02:	220c      	movs	r2, #12
 800eb04:	5e9a      	ldrsh	r2, [r3, r2]
 800eb06:	2380      	movs	r3, #128	; 0x80
 800eb08:	019b      	lsls	r3, r3, #6
 800eb0a:	421a      	tst	r2, r3
 800eb0c:	d105      	bne.n	800eb1a <__ssvfscanf_r+0x2a>
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	818b      	strh	r3, [r1, #12]
 800eb12:	4aa0      	ldr	r2, [pc, #640]	; (800ed94 <__ssvfscanf_r+0x2a4>)
 800eb14:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eb16:	4013      	ands	r3, r2
 800eb18:	664b      	str	r3, [r1, #100]	; 0x64
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	643b      	str	r3, [r7, #64]	; 0x40
 800eb20:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb22:	627b      	str	r3, [r7, #36]	; 0x24
 800eb24:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	3201      	adds	r2, #1
 800eb30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb32:	61ba      	str	r2, [r7, #24]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d100      	bne.n	800eb3a <__ssvfscanf_r+0x4a>
 800eb38:	e0d7      	b.n	800ecea <__ssvfscanf_r+0x1fa>
 800eb3a:	2608      	movs	r6, #8
 800eb3c:	2108      	movs	r1, #8
 800eb3e:	4a96      	ldr	r2, [pc, #600]	; (800ed98 <__ssvfscanf_r+0x2a8>)
 800eb40:	5cd2      	ldrb	r2, [r2, r3]
 800eb42:	4016      	ands	r6, r2
 800eb44:	420a      	tst	r2, r1
 800eb46:	d01d      	beq.n	800eb84 <__ssvfscanf_r+0x94>
 800eb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	dd12      	ble.n	800eb76 <__ssvfscanf_r+0x86>
 800eb50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb52:	4991      	ldr	r1, [pc, #580]	; (800ed98 <__ssvfscanf_r+0x2a8>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	781a      	ldrb	r2, [r3, #0]
 800eb58:	5c8a      	ldrb	r2, [r1, r2]
 800eb5a:	2108      	movs	r1, #8
 800eb5c:	420a      	tst	r2, r1
 800eb5e:	d0e3      	beq.n	800eb28 <__ssvfscanf_r+0x38>
 800eb60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb64:	3201      	adds	r2, #1
 800eb66:	63ba      	str	r2, [r7, #56]	; 0x38
 800eb68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	6852      	ldr	r2, [r2, #4]
 800eb6e:	600b      	str	r3, [r1, #0]
 800eb70:	3a01      	subs	r2, #1
 800eb72:	604a      	str	r2, [r1, #4]
 800eb74:	e7e8      	b.n	800eb48 <__ssvfscanf_r+0x58>
 800eb76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb7a:	f002 ff4d 	bl	8011a18 <__ssrefill_r>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d0e6      	beq.n	800eb50 <__ssvfscanf_r+0x60>
 800eb82:	e7d1      	b.n	800eb28 <__ssvfscanf_r+0x38>
 800eb84:	2b25      	cmp	r3, #37	; 0x25
 800eb86:	d165      	bne.n	800ec54 <__ssvfscanf_r+0x164>
 800eb88:	250a      	movs	r5, #10
 800eb8a:	2480      	movs	r4, #128	; 0x80
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800eb90:	3b16      	subs	r3, #22
 800eb92:	69b9      	ldr	r1, [r7, #24]
 800eb94:	3101      	adds	r1, #1
 800eb96:	61b9      	str	r1, [r7, #24]
 800eb98:	7811      	ldrb	r1, [r2, #0]
 800eb9a:	0008      	movs	r0, r1
 800eb9c:	3825      	subs	r0, #37	; 0x25
 800eb9e:	2855      	cmp	r0, #85	; 0x55
 800eba0:	d900      	bls.n	800eba4 <__ssvfscanf_r+0xb4>
 800eba2:	e170      	b.n	800ee86 <__ssvfscanf_r+0x396>
 800eba4:	f7f1 fac0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eba8:	016f0056 	.word	0x016f0056
 800ebac:	016f016f 	.word	0x016f016f
 800ebb0:	0081016f 	.word	0x0081016f
 800ebb4:	016f016f 	.word	0x016f016f
 800ebb8:	016f016f 	.word	0x016f016f
 800ebbc:	00b8016f 	.word	0x00b8016f
 800ebc0:	00b800b8 	.word	0x00b800b8
 800ebc4:	00b800b8 	.word	0x00b800b8
 800ebc8:	00b800b8 	.word	0x00b800b8
 800ebcc:	00b800b8 	.word	0x00b800b8
 800ebd0:	016f00b8 	.word	0x016f00b8
 800ebd4:	016f016f 	.word	0x016f016f
 800ebd8:	016f016f 	.word	0x016f016f
 800ebdc:	016f016f 	.word	0x016f016f
 800ebe0:	016f00d8 	.word	0x016f00d8
 800ebe4:	00c1010a 	.word	0x00c1010a
 800ebe8:	00d800d8 	.word	0x00d800d8
 800ebec:	016f00d8 	.word	0x016f00d8
 800ebf0:	016f016f 	.word	0x016f016f
 800ebf4:	009f016f 	.word	0x009f016f
 800ebf8:	016f016f 	.word	0x016f016f
 800ebfc:	016f00c9 	.word	0x016f00c9
 800ec00:	016f016f 	.word	0x016f016f
 800ec04:	016f00f0 	.word	0x016f00f0
 800ec08:	016f016f 	.word	0x016f016f
 800ec0c:	00d1016f 	.word	0x00d1016f
 800ec10:	016f016f 	.word	0x016f016f
 800ec14:	016f00fe 	.word	0x016f00fe
 800ec18:	016f016f 	.word	0x016f016f
 800ec1c:	016f016f 	.word	0x016f016f
 800ec20:	016f00d8 	.word	0x016f00d8
 800ec24:	00c3010c 	.word	0x00c3010c
 800ec28:	00d800d8 	.word	0x00d800d8
 800ec2c:	009400d8 	.word	0x009400d8
 800ec30:	009f012f 	.word	0x009f012f
 800ec34:	0088016f 	.word	0x0088016f
 800ec38:	011200a9 	.word	0x011200a9
 800ec3c:	011000cb 	.word	0x011000cb
 800ec40:	016f016f 	.word	0x016f016f
 800ec44:	00a600f2 	.word	0x00a600f2
 800ec48:	016f00cf 	.word	0x016f00cf
 800ec4c:	00d1016f 	.word	0x00d1016f
 800ec50:	00a6016f 	.word	0x00a6016f
 800ec54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	dd12      	ble.n	800ec82 <__ssvfscanf_r+0x192>
 800ec5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec5e:	69ba      	ldr	r2, [r7, #24]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	3a01      	subs	r2, #1
 800ec64:	7819      	ldrb	r1, [r3, #0]
 800ec66:	7812      	ldrb	r2, [r2, #0]
 800ec68:	4291      	cmp	r1, r2
 800ec6a:	d13e      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ec6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec70:	6852      	ldr	r2, [r2, #4]
 800ec72:	3301      	adds	r3, #1
 800ec74:	600b      	str	r3, [r1, #0]
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	3a01      	subs	r2, #1
 800ec7a:	604a      	str	r2, [r1, #4]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec80:	e752      	b.n	800eb28 <__ssvfscanf_r+0x38>
 800ec82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec86:	f002 fec7 	bl	8011a18 <__ssrefill_r>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0e6      	beq.n	800ec5c <__ssvfscanf_r+0x16c>
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d003      	beq.n	800ec9c <__ssvfscanf_r+0x1ac>
 800ec94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec96:	899b      	ldrh	r3, [r3, #12]
 800ec98:	065b      	lsls	r3, r3, #25
 800ec9a:	d526      	bpl.n	800ecea <__ssvfscanf_r+0x1fa>
 800ec9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d000      	beq.n	800eca4 <__ssvfscanf_r+0x1b4>
 800eca2:	e0f6      	b.n	800ee92 <__ssvfscanf_r+0x3a2>
 800eca4:	3b01      	subs	r3, #1
 800eca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eca8:	e104      	b.n	800eeb4 <__ssvfscanf_r+0x3c4>
 800ecaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecac:	4332      	orrs	r2, r6
 800ecae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ecb0:	d11b      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ecb2:	2610      	movs	r6, #16
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	e76c      	b.n	800eb92 <__ssvfscanf_r+0xa2>
 800ecb8:	421e      	tst	r6, r3
 800ecba:	d116      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ecbc:	7851      	ldrb	r1, [r2, #1]
 800ecbe:	296c      	cmp	r1, #108	; 0x6c
 800ecc0:	d103      	bne.n	800ecca <__ssvfscanf_r+0x1da>
 800ecc2:	3202      	adds	r2, #2
 800ecc4:	61ba      	str	r2, [r7, #24]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	e000      	b.n	800eccc <__ssvfscanf_r+0x1dc>
 800ecca:	2201      	movs	r2, #1
 800eccc:	4316      	orrs	r6, r2
 800ecce:	e7f1      	b.n	800ecb4 <__ssvfscanf_r+0x1c4>
 800ecd0:	421e      	tst	r6, r3
 800ecd2:	d10a      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ecd4:	7851      	ldrb	r1, [r2, #1]
 800ecd6:	2968      	cmp	r1, #104	; 0x68
 800ecd8:	d103      	bne.n	800ece2 <__ssvfscanf_r+0x1f2>
 800ecda:	3202      	adds	r2, #2
 800ecdc:	61ba      	str	r2, [r7, #24]
 800ecde:	2208      	movs	r2, #8
 800ece0:	e7f4      	b.n	800eccc <__ssvfscanf_r+0x1dc>
 800ece2:	2204      	movs	r2, #4
 800ece4:	e7f2      	b.n	800eccc <__ssvfscanf_r+0x1dc>
 800ece6:	421e      	tst	r6, r3
 800ece8:	d0ed      	beq.n	800ecc6 <__ssvfscanf_r+0x1d6>
 800ecea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d000      	beq.n	800ecf2 <__ssvfscanf_r+0x202>
 800ecf0:	e0da      	b.n	800eea8 <__ssvfscanf_r+0x3b8>
 800ecf2:	e0df      	b.n	800eeb4 <__ssvfscanf_r+0x3c4>
 800ecf4:	421e      	tst	r6, r3
 800ecf6:	d0dd      	beq.n	800ecb4 <__ssvfscanf_r+0x1c4>
 800ecf8:	e7f7      	b.n	800ecea <__ssvfscanf_r+0x1fa>
 800ecfa:	228f      	movs	r2, #143	; 0x8f
 800ecfc:	218f      	movs	r1, #143	; 0x8f
 800ecfe:	4032      	ands	r2, r6
 800ed00:	420e      	tst	r6, r1
 800ed02:	d1f2      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ed04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed06:	2900      	cmp	r1, #0
 800ed08:	d104      	bne.n	800ed14 <__ssvfscanf_r+0x224>
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	a902      	add	r1, sp, #8
 800ed0e:	6439      	str	r1, [r7, #64]	; 0x40
 800ed10:	600a      	str	r2, [r1, #0]
 800ed12:	604a      	str	r2, [r1, #4]
 800ed14:	4326      	orrs	r6, r4
 800ed16:	e7cd      	b.n	800ecb4 <__ssvfscanf_r+0x1c4>
 800ed18:	228f      	movs	r2, #143	; 0x8f
 800ed1a:	4216      	tst	r6, r2
 800ed1c:	d1e5      	bne.n	800ecea <__ssvfscanf_r+0x1fa>
 800ed1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed20:	436a      	muls	r2, r5
 800ed22:	3a30      	subs	r2, #48	; 0x30
 800ed24:	188a      	adds	r2, r1, r2
 800ed26:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ed28:	e7c4      	b.n	800ecb4 <__ssvfscanf_r+0x1c4>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	431e      	orrs	r6, r3
 800ed2e:	4b1b      	ldr	r3, [pc, #108]	; (800ed9c <__ssvfscanf_r+0x2ac>)
 800ed30:	617b      	str	r3, [r7, #20]
 800ed32:	230a      	movs	r3, #10
 800ed34:	2403      	movs	r4, #3
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
 800ed38:	e00f      	b.n	800ed5a <__ssvfscanf_r+0x26a>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	431e      	orrs	r6, r3
 800ed3e:	4b18      	ldr	r3, [pc, #96]	; (800eda0 <__ssvfscanf_r+0x2b0>)
 800ed40:	617b      	str	r3, [r7, #20]
 800ed42:	2308      	movs	r3, #8
 800ed44:	e7f6      	b.n	800ed34 <__ssvfscanf_r+0x244>
 800ed46:	4b16      	ldr	r3, [pc, #88]	; (800eda0 <__ssvfscanf_r+0x2b0>)
 800ed48:	e7f2      	b.n	800ed30 <__ssvfscanf_r+0x240>
 800ed4a:	2380      	movs	r3, #128	; 0x80
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	431e      	orrs	r6, r3
 800ed50:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <__ssvfscanf_r+0x2b0>)
 800ed52:	617b      	str	r3, [r7, #20]
 800ed54:	2310      	movs	r3, #16
 800ed56:	e7ed      	b.n	800ed34 <__ssvfscanf_r+0x244>
 800ed58:	2404      	movs	r4, #4
 800ed5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	dd55      	ble.n	800ee0e <__ssvfscanf_r+0x31e>
 800ed62:	0673      	lsls	r3, r6, #25
 800ed64:	d407      	bmi.n	800ed76 <__ssvfscanf_r+0x286>
 800ed66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed68:	490b      	ldr	r1, [pc, #44]	; (800ed98 <__ssvfscanf_r+0x2a8>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	5c8a      	ldrb	r2, [r1, r2]
 800ed70:	2108      	movs	r1, #8
 800ed72:	420a      	tst	r2, r1
 800ed74:	d152      	bne.n	800ee1c <__ssvfscanf_r+0x32c>
 800ed76:	1e60      	subs	r0, r4, #1
 800ed78:	2803      	cmp	r0, #3
 800ed7a:	d863      	bhi.n	800ee44 <__ssvfscanf_r+0x354>
 800ed7c:	f7f1 f9d4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ed80:	03bd01da 	.word	0x03bd01da
 800ed84:	068a0579 	.word	0x068a0579
 800ed88:	2301      	movs	r3, #1
 800ed8a:	431e      	orrs	r6, r3
 800ed8c:	2402      	movs	r4, #2
 800ed8e:	e7e4      	b.n	800ed5a <__ssvfscanf_r+0x26a>
 800ed90:	fffffd34 	.word	0xfffffd34
 800ed94:	ffffdfff 	.word	0xffffdfff
 800ed98:	080147d9 	.word	0x080147d9
 800ed9c:	0800bf41 	.word	0x0800bf41
 800eda0:	08011549 	.word	0x08011549
 800eda4:	2248      	movs	r2, #72	; 0x48
 800eda6:	2318      	movs	r3, #24
 800eda8:	189b      	adds	r3, r3, r2
 800edaa:	19d8      	adds	r0, r3, r7
 800edac:	69b9      	ldr	r1, [r7, #24]
 800edae:	f001 f9d7 	bl	8010160 <__sccl>
 800edb2:	2340      	movs	r3, #64	; 0x40
 800edb4:	2401      	movs	r4, #1
 800edb6:	61b8      	str	r0, [r7, #24]
 800edb8:	431e      	orrs	r6, r3
 800edba:	e7ce      	b.n	800ed5a <__ssvfscanf_r+0x26a>
 800edbc:	2301      	movs	r3, #1
 800edbe:	431e      	orrs	r6, r3
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	2400      	movs	r4, #0
 800edc4:	431e      	orrs	r6, r3
 800edc6:	e7c8      	b.n	800ed5a <__ssvfscanf_r+0x26a>
 800edc8:	2388      	movs	r3, #136	; 0x88
 800edca:	e7bf      	b.n	800ed4c <__ssvfscanf_r+0x25c>
 800edcc:	06f3      	lsls	r3, r6, #27
 800edce:	d500      	bpl.n	800edd2 <__ssvfscanf_r+0x2e2>
 800edd0:	e6aa      	b.n	800eb28 <__ssvfscanf_r+0x38>
 800edd2:	2108      	movs	r1, #8
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	cb04      	ldmia	r3!, {r2}
 800edd8:	420e      	tst	r6, r1
 800edda:	d003      	beq.n	800ede4 <__ssvfscanf_r+0x2f4>
 800eddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edde:	7011      	strb	r1, [r2, #0]
 800ede0:	633b      	str	r3, [r7, #48]	; 0x30
 800ede2:	e6a1      	b.n	800eb28 <__ssvfscanf_r+0x38>
 800ede4:	0771      	lsls	r1, r6, #29
 800ede6:	d502      	bpl.n	800edee <__ssvfscanf_r+0x2fe>
 800ede8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edea:	8011      	strh	r1, [r2, #0]
 800edec:	e7f8      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800edee:	07f1      	lsls	r1, r6, #31
 800edf0:	d502      	bpl.n	800edf8 <__ssvfscanf_r+0x308>
 800edf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edf4:	6011      	str	r1, [r2, #0]
 800edf6:	e7f3      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800edf8:	07b6      	lsls	r6, r6, #30
 800edfa:	d5fa      	bpl.n	800edf2 <__ssvfscanf_r+0x302>
 800edfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edfe:	6011      	str	r1, [r2, #0]
 800ee00:	17c9      	asrs	r1, r1, #31
 800ee02:	6051      	str	r1, [r2, #4]
 800ee04:	e7ec      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800ee06:	4ba2      	ldr	r3, [pc, #648]	; (800f090 <__ssvfscanf_r+0x5a0>)
 800ee08:	617b      	str	r3, [r7, #20]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e792      	b.n	800ed34 <__ssvfscanf_r+0x244>
 800ee0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee12:	f002 fe01 	bl	8011a18 <__ssrefill_r>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d0a3      	beq.n	800ed62 <__ssvfscanf_r+0x272>
 800ee1a:	e738      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800ee1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee20:	3201      	adds	r2, #1
 800ee22:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee26:	6852      	ldr	r2, [r2, #4]
 800ee28:	3a01      	subs	r2, #1
 800ee2a:	604a      	str	r2, [r1, #4]
 800ee2c:	2a00      	cmp	r2, #0
 800ee2e:	dd02      	ble.n	800ee36 <__ssvfscanf_r+0x346>
 800ee30:	3301      	adds	r3, #1
 800ee32:	600b      	str	r3, [r1, #0]
 800ee34:	e797      	b.n	800ed66 <__ssvfscanf_r+0x276>
 800ee36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee3a:	f002 fded 	bl	8011a18 <__ssrefill_r>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d091      	beq.n	800ed66 <__ssvfscanf_r+0x276>
 800ee42:	e724      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800ee44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee46:	2301      	movs	r3, #1
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	d100      	bne.n	800ee4e <__ssvfscanf_r+0x35e>
 800ee4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee4e:	2210      	movs	r2, #16
 800ee50:	0034      	movs	r4, r6
 800ee52:	4032      	ands	r2, r6
 800ee54:	623a      	str	r2, [r7, #32]
 800ee56:	401c      	ands	r4, r3
 800ee58:	421e      	tst	r6, r3
 800ee5a:	d100      	bne.n	800ee5e <__ssvfscanf_r+0x36e>
 800ee5c:	e0f3      	b.n	800f046 <__ssvfscanf_r+0x556>
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	d000      	beq.n	800ee64 <__ssvfscanf_r+0x374>
 800ee62:	e0b6      	b.n	800efd2 <__ssvfscanf_r+0x4e2>
 800ee64:	2080      	movs	r0, #128	; 0x80
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	cb10      	ldmia	r3!, {r4}
 800ee6a:	613b      	str	r3, [r7, #16]
 800ee6c:	4206      	tst	r6, r0
 800ee6e:	d100      	bne.n	800ee72 <__ssvfscanf_r+0x382>
 800ee70:	e0b7      	b.n	800efe2 <__ssvfscanf_r+0x4f2>
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d007      	beq.n	800ee86 <__ssvfscanf_r+0x396>
 800ee76:	f7fb ff6d 	bl	800ad54 <malloc>
 800ee7a:	6338      	str	r0, [r7, #48]	; 0x30
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d11f      	bne.n	800eec0 <__ssvfscanf_r+0x3d0>
 800ee80:	2301      	movs	r3, #1
 800ee82:	425b      	negs	r3, r3
 800ee84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d013      	beq.n	800eeb4 <__ssvfscanf_r+0x3c4>
 800ee8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8e:	3301      	adds	r3, #1
 800ee90:	d10a      	bne.n	800eea8 <__ssvfscanf_r+0x3b8>
 800ee92:	2400      	movs	r4, #0
 800ee94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee96:	681d      	ldr	r5, [r3, #0]
 800ee98:	88db      	ldrh	r3, [r3, #6]
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	dd01      	ble.n	800eea2 <__ssvfscanf_r+0x3b2>
 800ee9e:	f001 f82a 	bl	800fef6 <__ssvfscanf_r+0x1406>
 800eea2:	2301      	movs	r3, #1
 800eea4:	425b      	negs	r3, r3
 800eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d001      	beq.n	800eeb4 <__ssvfscanf_r+0x3c4>
 800eeb0:	f7fb ff5a 	bl	800ad68 <free>
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeb8:	23b1      	movs	r3, #177	; 0xb1
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	449d      	add	sp, r3
 800eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec6:	88de      	ldrh	r6, [r3, #6]
 800eec8:	889d      	ldrh	r5, [r3, #4]
 800eeca:	42ae      	cmp	r6, r5
 800eecc:	d30e      	bcc.n	800eeec <__ssvfscanf_r+0x3fc>
 800eece:	4b71      	ldr	r3, [pc, #452]	; (800f094 <__ssvfscanf_r+0x5a4>)
 800eed0:	429d      	cmp	r5, r3
 800eed2:	d8d5      	bhi.n	800ee80 <__ssvfscanf_r+0x390>
 800eed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed6:	3508      	adds	r5, #8
 800eed8:	b2ad      	uxth	r5, r5
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	00a9      	lsls	r1, r5, #2
 800eede:	f002 f901 	bl	80110e4 <realloc>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d0cc      	beq.n	800ee80 <__ssvfscanf_r+0x390>
 800eee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee8:	6018      	str	r0, [r3, #0]
 800eeea:	809d      	strh	r5, [r3, #4]
 800eeec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeee:	1c72      	adds	r2, r6, #1
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	00b6      	lsls	r6, r6, #2
 800eef4:	50f4      	str	r4, [r6, r3]
 800eef6:	2320      	movs	r3, #32
 800eef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eefa:	0026      	movs	r6, r4
 800eefc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eefe:	80ca      	strh	r2, [r1, #6]
 800ef00:	61fb      	str	r3, [r7, #28]
 800ef02:	2500      	movs	r5, #0
 800ef04:	f7fd f9fe 	bl	800c304 <__locale_mb_cur_max>
 800ef08:	42a8      	cmp	r0, r5
 800ef0a:	d100      	bne.n	800ef0e <__ssvfscanf_r+0x41e>
 800ef0c:	e6bf      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800ef0e:	1c6a      	adds	r2, r5, #1
 800ef10:	60fa      	str	r2, [r7, #12]
 800ef12:	228c      	movs	r2, #140	; 0x8c
 800ef14:	2048      	movs	r0, #72	; 0x48
 800ef16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef18:	0052      	lsls	r2, r2, #1
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	1812      	adds	r2, r2, r0
 800ef1e:	7819      	ldrb	r1, [r3, #0]
 800ef20:	19d2      	adds	r2, r2, r7
 800ef22:	5551      	strb	r1, [r2, r5]
 800ef24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef28:	6852      	ldr	r2, [r2, #4]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	600b      	str	r3, [r1, #0]
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	3a01      	subs	r2, #1
 800ef32:	604a      	str	r2, [r1, #4]
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d102      	bne.n	800ef3e <__ssvfscanf_r+0x44e>
 800ef38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	d007      	beq.n	800ef4e <__ssvfscanf_r+0x45e>
 800ef3e:	2048      	movs	r0, #72	; 0x48
 800ef40:	2310      	movs	r3, #16
 800ef42:	181b      	adds	r3, r3, r0
 800ef44:	2208      	movs	r2, #8
 800ef46:	2100      	movs	r1, #0
 800ef48:	19d8      	adds	r0, r3, r7
 800ef4a:	f7fd f997 	bl	800c27c <memset>
 800ef4e:	2148      	movs	r1, #72	; 0x48
 800ef50:	2310      	movs	r3, #16
 800ef52:	228c      	movs	r2, #140	; 0x8c
 800ef54:	185b      	adds	r3, r3, r1
 800ef56:	0052      	lsls	r2, r2, #1
 800ef58:	19db      	adds	r3, r3, r7
 800ef5a:	1852      	adds	r2, r2, r1
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	0021      	movs	r1, r4
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef64:	19d2      	adds	r2, r2, r7
 800ef66:	f002 fc57 	bl	8011818 <_mbrtowc_r>
 800ef6a:	0003      	movs	r3, r0
 800ef6c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef6e:	3301      	adds	r3, #1
 800ef70:	d100      	bne.n	800ef74 <__ssvfscanf_r+0x484>
 800ef72:	e68c      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d139      	bne.n	800efec <__ssvfscanf_r+0x4fc>
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d100      	bne.n	800ef80 <__ssvfscanf_r+0x490>
 800ef7e:	6023      	str	r3, [r4, #0]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef84:	4694      	mov	ip, r2
 800ef86:	4463      	add	r3, ip
 800ef88:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d102      	bne.n	800ef96 <__ssvfscanf_r+0x4a6>
 800ef90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef92:	2b04      	cmp	r3, #4
 800ef94:	d002      	beq.n	800ef9c <__ssvfscanf_r+0x4ac>
 800ef96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef98:	3b01      	subs	r3, #1
 800ef9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d115      	bne.n	800efce <__ssvfscanf_r+0x4de>
 800efa2:	2e00      	cmp	r6, #0
 800efa4:	d012      	beq.n	800efcc <__ssvfscanf_r+0x4dc>
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	69fa      	ldr	r2, [r7, #28]
 800efaa:	1ae5      	subs	r5, r4, r3
 800efac:	10ab      	asrs	r3, r5, #2
 800efae:	4293      	cmp	r3, r2
 800efb0:	d30c      	bcc.n	800efcc <__ssvfscanf_r+0x4dc>
 800efb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efb4:	00d1      	lsls	r1, r2, #3
 800efb6:	f002 f895 	bl	80110e4 <realloc>
 800efba:	6338      	str	r0, [r7, #48]	; 0x30
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d100      	bne.n	800efc2 <__ssvfscanf_r+0x4d2>
 800efc0:	e75e      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	1944      	adds	r4, r0, r5
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	6030      	str	r0, [r6, #0]
 800efca:	61fb      	str	r3, [r7, #28]
 800efcc:	3404      	adds	r4, #4
 800efce:	2500      	movs	r5, #0
 800efd0:	e010      	b.n	800eff4 <__ssvfscanf_r+0x504>
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	613b      	str	r3, [r7, #16]
 800efd6:	2300      	movs	r3, #0
 800efd8:	001e      	movs	r6, r3
 800efda:	001c      	movs	r4, r3
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	633b      	str	r3, [r7, #48]	; 0x30
 800efe0:	e78f      	b.n	800ef02 <__ssvfscanf_r+0x412>
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	001e      	movs	r6, r3
 800efe6:	61fb      	str	r3, [r7, #28]
 800efe8:	633b      	str	r3, [r7, #48]	; 0x30
 800efea:	e78a      	b.n	800ef02 <__ssvfscanf_r+0x412>
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	68fd      	ldr	r5, [r7, #12]
 800eff0:	3302      	adds	r3, #2
 800eff2:	d1c5      	bne.n	800ef80 <__ssvfscanf_r+0x490>
 800eff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dc12      	bgt.n	800f022 <__ssvfscanf_r+0x532>
 800effc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800effe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f000:	f002 fd0a 	bl	8011a18 <__ssrefill_r>
 800f004:	2800      	cmp	r0, #0
 800f006:	d00c      	beq.n	800f022 <__ssvfscanf_r+0x532>
 800f008:	2d00      	cmp	r5, #0
 800f00a:	d000      	beq.n	800f00e <__ssvfscanf_r+0x51e>
 800f00c:	e63f      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f00e:	2e00      	cmp	r6, #0
 800f010:	d10c      	bne.n	800f02c <__ssvfscanf_r+0x53c>
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	425a      	negs	r2, r3
 800f016:	4153      	adcs	r3, r2
 800f018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f01a:	18d3      	adds	r3, r2, r3
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	e6de      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800f022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f024:	2b00      	cmp	r3, #0
 800f026:	d000      	beq.n	800f02a <__ssvfscanf_r+0x53a>
 800f028:	e76c      	b.n	800ef04 <__ssvfscanf_r+0x414>
 800f02a:	e7f0      	b.n	800f00e <__ssvfscanf_r+0x51e>
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	69fa      	ldr	r2, [r7, #28]
 800f030:	1ae1      	subs	r1, r4, r3
 800f032:	108b      	asrs	r3, r1, #2
 800f034:	429a      	cmp	r2, r3
 800f036:	d9ec      	bls.n	800f012 <__ssvfscanf_r+0x522>
 800f038:	6830      	ldr	r0, [r6, #0]
 800f03a:	f002 f853 	bl	80110e4 <realloc>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0e7      	beq.n	800f012 <__ssvfscanf_r+0x522>
 800f042:	6030      	str	r0, [r6, #0]
 800f044:	e7e5      	b.n	800f012 <__ssvfscanf_r+0x522>
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d025      	beq.n	800f098 <__ssvfscanf_r+0x5a8>
 800f04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f04e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f054:	6812      	ldr	r2, [r2, #0]
 800f056:	4299      	cmp	r1, r3
 800f058:	dd11      	ble.n	800f07e <__ssvfscanf_r+0x58e>
 800f05a:	1ac9      	subs	r1, r1, r3
 800f05c:	18d2      	adds	r2, r2, r3
 800f05e:	18e4      	adds	r4, r4, r3
 800f060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f062:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f064:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f066:	0019      	movs	r1, r3
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	f002 fcd5 	bl	8011a18 <__ssrefill_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0ec      	beq.n	800f04c <__ssvfscanf_r+0x55c>
 800f072:	2c00      	cmp	r4, #0
 800f074:	d100      	bne.n	800f078 <__ssvfscanf_r+0x588>
 800f076:	e60a      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07a:	191b      	adds	r3, r3, r4
 800f07c:	e5ff      	b.n	800ec7e <__ssvfscanf_r+0x18e>
 800f07e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f080:	1a5b      	subs	r3, r3, r1
 800f082:	1864      	adds	r4, r4, r1
 800f084:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f086:	604b      	str	r3, [r1, #4]
 800f088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08a:	18d2      	adds	r2, r2, r3
 800f08c:	600a      	str	r2, [r1, #0]
 800f08e:	e7f3      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f090:	0800bf41 	.word	0x0800bf41
 800f094:	0000fff6 	.word	0x0000fff6
 800f098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09a:	0034      	movs	r4, r6
 800f09c:	cb20      	ldmia	r3!, {r5}
 800f09e:	633b      	str	r3, [r7, #48]	; 0x30
 800f0a0:	2380      	movs	r3, #128	; 0x80
 800f0a2:	401c      	ands	r4, r3
 800f0a4:	421e      	tst	r6, r3
 800f0a6:	d028      	beq.n	800f0fa <__ssvfscanf_r+0x60a>
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	d100      	bne.n	800f0ae <__ssvfscanf_r+0x5be>
 800f0ac:	e61d      	b.n	800ecea <__ssvfscanf_r+0x1fa>
 800f0ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f0b0:	f7fb fe50 	bl	800ad54 <malloc>
 800f0b4:	6238      	str	r0, [r7, #32]
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d100      	bne.n	800f0bc <__ssvfscanf_r+0x5cc>
 800f0ba:	e5ef      	b.n	800ec9c <__ssvfscanf_r+0x1ac>
 800f0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0be:	6028      	str	r0, [r5, #0]
 800f0c0:	88de      	ldrh	r6, [r3, #6]
 800f0c2:	889c      	ldrh	r4, [r3, #4]
 800f0c4:	6818      	ldr	r0, [r3, #0]
 800f0c6:	42a6      	cmp	r6, r4
 800f0c8:	d30e      	bcc.n	800f0e8 <__ssvfscanf_r+0x5f8>
 800f0ca:	4bbf      	ldr	r3, [pc, #764]	; (800f3c8 <__ssvfscanf_r+0x8d8>)
 800f0cc:	429c      	cmp	r4, r3
 800f0ce:	d900      	bls.n	800f0d2 <__ssvfscanf_r+0x5e2>
 800f0d0:	e6df      	b.n	800ee92 <__ssvfscanf_r+0x3a2>
 800f0d2:	3408      	adds	r4, #8
 800f0d4:	b2a4      	uxth	r4, r4
 800f0d6:	00a1      	lsls	r1, r4, #2
 800f0d8:	f002 f804 	bl	80110e4 <realloc>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d100      	bne.n	800f0e2 <__ssvfscanf_r+0x5f2>
 800f0e0:	e6d7      	b.n	800ee92 <__ssvfscanf_r+0x3a2>
 800f0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e4:	6018      	str	r0, [r3, #0]
 800f0e6:	809c      	strh	r4, [r3, #4]
 800f0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ea:	1c72      	adds	r2, r6, #1
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0f0:	00b6      	lsls	r6, r6, #2
 800f0f2:	002c      	movs	r4, r5
 800f0f4:	50f5      	str	r5, [r6, r3]
 800f0f6:	6a3d      	ldr	r5, [r7, #32]
 800f0f8:	80ca      	strh	r2, [r1, #6]
 800f0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fc:	0029      	movs	r1, r5
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	2201      	movs	r2, #1
 800f102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f106:	f002 fca6 	bl	8011a56 <_sfread_r>
 800f10a:	1e05      	subs	r5, r0, #0
 800f10c:	d100      	bne.n	800f110 <__ssvfscanf_r+0x620>
 800f10e:	e5be      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f110:	2c00      	cmp	r4, #0
 800f112:	d009      	beq.n	800f128 <__ssvfscanf_r+0x638>
 800f114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f116:	4283      	cmp	r3, r0
 800f118:	d906      	bls.n	800f128 <__ssvfscanf_r+0x638>
 800f11a:	0001      	movs	r1, r0
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	f001 ffe1 	bl	80110e4 <realloc>
 800f122:	2800      	cmp	r0, #0
 800f124:	d000      	beq.n	800f128 <__ssvfscanf_r+0x638>
 800f126:	6020      	str	r0, [r4, #0]
 800f128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12a:	195b      	adds	r3, r3, r5
 800f12c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	3301      	adds	r3, #1
 800f132:	e4f8      	b.n	800eb26 <__ssvfscanf_r+0x36>
 800f134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f136:	2b00      	cmp	r3, #0
 800f138:	d101      	bne.n	800f13e <__ssvfscanf_r+0x64e>
 800f13a:	3b01      	subs	r3, #1
 800f13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f13e:	2210      	movs	r2, #16
 800f140:	2301      	movs	r3, #1
 800f142:	0034      	movs	r4, r6
 800f144:	4032      	ands	r2, r6
 800f146:	401c      	ands	r4, r3
 800f148:	623a      	str	r2, [r7, #32]
 800f14a:	421e      	tst	r6, r3
 800f14c:	d100      	bne.n	800f150 <__ssvfscanf_r+0x660>
 800f14e:	e116      	b.n	800f37e <__ssvfscanf_r+0x88e>
 800f150:	2a00      	cmp	r2, #0
 800f152:	d000      	beq.n	800f156 <__ssvfscanf_r+0x666>
 800f154:	e0b0      	b.n	800f2b8 <__ssvfscanf_r+0x7c8>
 800f156:	2080      	movs	r0, #128	; 0x80
 800f158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15a:	cb10      	ldmia	r3!, {r4}
 800f15c:	60fb      	str	r3, [r7, #12]
 800f15e:	4206      	tst	r6, r0
 800f160:	d100      	bne.n	800f164 <__ssvfscanf_r+0x674>
 800f162:	e0b2      	b.n	800f2ca <__ssvfscanf_r+0x7da>
 800f164:	2c00      	cmp	r4, #0
 800f166:	d100      	bne.n	800f16a <__ssvfscanf_r+0x67a>
 800f168:	e68d      	b.n	800ee86 <__ssvfscanf_r+0x396>
 800f16a:	f7fb fdf3 	bl	800ad54 <malloc>
 800f16e:	6338      	str	r0, [r7, #48]	; 0x30
 800f170:	2800      	cmp	r0, #0
 800f172:	d100      	bne.n	800f176 <__ssvfscanf_r+0x686>
 800f174:	e684      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f17c:	88de      	ldrh	r6, [r3, #6]
 800f17e:	889d      	ldrh	r5, [r3, #4]
 800f180:	42ae      	cmp	r6, r5
 800f182:	d310      	bcc.n	800f1a6 <__ssvfscanf_r+0x6b6>
 800f184:	4b90      	ldr	r3, [pc, #576]	; (800f3c8 <__ssvfscanf_r+0x8d8>)
 800f186:	429d      	cmp	r5, r3
 800f188:	d900      	bls.n	800f18c <__ssvfscanf_r+0x69c>
 800f18a:	e679      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f18e:	3508      	adds	r5, #8
 800f190:	b2ad      	uxth	r5, r5
 800f192:	6818      	ldr	r0, [r3, #0]
 800f194:	00a9      	lsls	r1, r5, #2
 800f196:	f001 ffa5 	bl	80110e4 <realloc>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d100      	bne.n	800f1a0 <__ssvfscanf_r+0x6b0>
 800f19e:	e66f      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a2:	6018      	str	r0, [r3, #0]
 800f1a4:	809d      	strh	r5, [r3, #4]
 800f1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a8:	1c72      	adds	r2, r6, #1
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	00b6      	lsls	r6, r6, #2
 800f1ae:	50f4      	str	r4, [r6, r3]
 800f1b0:	2320      	movs	r3, #32
 800f1b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1b4:	0026      	movs	r6, r4
 800f1b6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f1b8:	80ca      	strh	r2, [r1, #6]
 800f1ba:	613b      	str	r3, [r7, #16]
 800f1bc:	2500      	movs	r5, #0
 800f1be:	f7fd f8a1 	bl	800c304 <__locale_mb_cur_max>
 800f1c2:	42a8      	cmp	r0, r5
 800f1c4:	d100      	bne.n	800f1c8 <__ssvfscanf_r+0x6d8>
 800f1c6:	e562      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f1c8:	1c6a      	adds	r2, r5, #1
 800f1ca:	61fa      	str	r2, [r7, #28]
 800f1cc:	228c      	movs	r2, #140	; 0x8c
 800f1ce:	2048      	movs	r0, #72	; 0x48
 800f1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d2:	0052      	lsls	r2, r2, #1
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	1812      	adds	r2, r2, r0
 800f1d8:	7819      	ldrb	r1, [r3, #0]
 800f1da:	19d2      	adds	r2, r2, r7
 800f1dc:	5551      	strb	r1, [r2, r5]
 800f1de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1e2:	6852      	ldr	r2, [r2, #4]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	600b      	str	r3, [r1, #0]
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	3a01      	subs	r2, #1
 800f1ec:	604a      	str	r2, [r1, #4]
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d102      	bne.n	800f1f8 <__ssvfscanf_r+0x708>
 800f1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f4:	2b04      	cmp	r3, #4
 800f1f6:	d006      	beq.n	800f206 <__ssvfscanf_r+0x716>
 800f1f8:	2048      	movs	r0, #72	; 0x48
 800f1fa:	2208      	movs	r2, #8
 800f1fc:	1813      	adds	r3, r2, r0
 800f1fe:	2100      	movs	r1, #0
 800f200:	19d8      	adds	r0, r3, r7
 800f202:	f7fd f83b 	bl	800c27c <memset>
 800f206:	2148      	movs	r1, #72	; 0x48
 800f208:	2308      	movs	r3, #8
 800f20a:	228c      	movs	r2, #140	; 0x8c
 800f20c:	185b      	adds	r3, r3, r1
 800f20e:	0052      	lsls	r2, r2, #1
 800f210:	19db      	adds	r3, r3, r7
 800f212:	1852      	adds	r2, r2, r1
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	0021      	movs	r1, r4
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f21c:	19d2      	adds	r2, r2, r7
 800f21e:	f002 fafb 	bl	8011818 <_mbrtowc_r>
 800f222:	0003      	movs	r3, r0
 800f224:	62b8      	str	r0, [r7, #40]	; 0x28
 800f226:	3301      	adds	r3, #1
 800f228:	d100      	bne.n	800f22c <__ssvfscanf_r+0x73c>
 800f22a:	e530      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	d151      	bne.n	800f2d4 <__ssvfscanf_r+0x7e4>
 800f230:	6020      	str	r0, [r4, #0]
 800f232:	2301      	movs	r3, #1
 800f234:	6825      	ldr	r5, [r4, #0]
 800f236:	425b      	negs	r3, r3
 800f238:	1c6a      	adds	r2, r5, #1
 800f23a:	d01a      	beq.n	800f272 <__ssvfscanf_r+0x782>
 800f23c:	2048      	movs	r0, #72	; 0x48
 800f23e:	3311      	adds	r3, #17
 800f240:	181b      	adds	r3, r3, r0
 800f242:	2208      	movs	r2, #8
 800f244:	2100      	movs	r1, #0
 800f246:	19d8      	adds	r0, r3, r7
 800f248:	f7fd f818 	bl	800c27c <memset>
 800f24c:	4b5f      	ldr	r3, [pc, #380]	; (800f3cc <__ssvfscanf_r+0x8dc>)
 800f24e:	2148      	movs	r1, #72	; 0x48
 800f250:	33e0      	adds	r3, #224	; 0xe0
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	2310      	movs	r3, #16
 800f256:	4694      	mov	ip, r2
 800f258:	185b      	adds	r3, r3, r1
 800f25a:	002a      	movs	r2, r5
 800f25c:	19db      	adds	r3, r3, r7
 800f25e:	4665      	mov	r5, ip
 800f260:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f262:	1879      	adds	r1, r7, r1
 800f264:	47a8      	blx	r5
 800f266:	2300      	movs	r3, #0
 800f268:	2801      	cmp	r0, #1
 800f26a:	d102      	bne.n	800f272 <__ssvfscanf_r+0x782>
 800f26c:	3348      	adds	r3, #72	; 0x48
 800f26e:	18fb      	adds	r3, r7, r3
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	2218      	movs	r2, #24
 800f274:	2148      	movs	r1, #72	; 0x48
 800f276:	1852      	adds	r2, r2, r1
 800f278:	19d2      	adds	r2, r2, r7
 800f27a:	5cd3      	ldrb	r3, [r2, r3]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d149      	bne.n	800f314 <__ssvfscanf_r+0x824>
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d137      	bne.n	800f2f6 <__ssvfscanf_r+0x806>
 800f286:	6a3b      	ldr	r3, [r7, #32]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d113      	bne.n	800f2b4 <__ssvfscanf_r+0x7c4>
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	2e00      	cmp	r6, #0
 800f290:	d00d      	beq.n	800f2ae <__ssvfscanf_r+0x7be>
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	693a      	ldr	r2, [r7, #16]
 800f296:	1ae4      	subs	r4, r4, r3
 800f298:	10a3      	asrs	r3, r4, #2
 800f29a:	3301      	adds	r3, #1
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d906      	bls.n	800f2ae <__ssvfscanf_r+0x7be>
 800f2a0:	6830      	ldr	r0, [r6, #0]
 800f2a2:	1d21      	adds	r1, r4, #4
 800f2a4:	f001 ff1e 	bl	80110e4 <realloc>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d000      	beq.n	800f2ae <__ssvfscanf_r+0x7be>
 800f2ac:	6030      	str	r0, [r6, #0]
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	e593      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	001e      	movs	r6, r3
 800f2c0:	613b      	str	r3, [r7, #16]
 800f2c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f2c4:	334c      	adds	r3, #76	; 0x4c
 800f2c6:	18fc      	adds	r4, r7, r3
 800f2c8:	e778      	b.n	800f1bc <__ssvfscanf_r+0x6cc>
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	001e      	movs	r6, r3
 800f2ce:	613b      	str	r3, [r7, #16]
 800f2d0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2d2:	e773      	b.n	800f1bc <__ssvfscanf_r+0x6cc>
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	69fd      	ldr	r5, [r7, #28]
 800f2d8:	3302      	adds	r3, #2
 800f2da:	d1aa      	bne.n	800f232 <__ssvfscanf_r+0x742>
 800f2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc47      	bgt.n	800f374 <__ssvfscanf_r+0x884>
 800f2e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2e8:	f002 fb96 	bl	8011a18 <__ssrefill_r>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d041      	beq.n	800f374 <__ssvfscanf_r+0x884>
 800f2f0:	2d00      	cmp	r5, #0
 800f2f2:	d0c8      	beq.n	800f286 <__ssvfscanf_r+0x796>
 800f2f4:	e4cb      	b.n	800ec8e <__ssvfscanf_r+0x19e>
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	2248      	movs	r2, #72	; 0x48
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	238c      	movs	r3, #140	; 0x8c
 800f300:	005b      	lsls	r3, r3, #1
 800f302:	189b      	adds	r3, r3, r2
 800f304:	69fa      	ldr	r2, [r7, #28]
 800f306:	19db      	adds	r3, r3, r7
 800f308:	5cd1      	ldrb	r1, [r2, r3]
 800f30a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f30c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f30e:	f002 fb47 	bl	80119a0 <_sungetc_r>
 800f312:	e7b5      	b.n	800f280 <__ssvfscanf_r+0x790>
 800f314:	69fa      	ldr	r2, [r7, #28]
 800f316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f318:	4694      	mov	ip, r2
 800f31a:	4463      	add	r3, ip
 800f31c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	2b03      	cmp	r3, #3
 800f322:	d102      	bne.n	800f32a <__ssvfscanf_r+0x83a>
 800f324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f326:	2b04      	cmp	r3, #4
 800f328:	d002      	beq.n	800f330 <__ssvfscanf_r+0x840>
 800f32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32c:	3b01      	subs	r3, #1
 800f32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d11a      	bne.n	800f36c <__ssvfscanf_r+0x87c>
 800f336:	3404      	adds	r4, #4
 800f338:	2e00      	cmp	r6, #0
 800f33a:	d019      	beq.n	800f370 <__ssvfscanf_r+0x880>
 800f33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33e:	693a      	ldr	r2, [r7, #16]
 800f340:	1ae3      	subs	r3, r4, r3
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	6a3d      	ldr	r5, [r7, #32]
 800f346:	109b      	asrs	r3, r3, #2
 800f348:	4293      	cmp	r3, r2
 800f34a:	d3c7      	bcc.n	800f2dc <__ssvfscanf_r+0x7ec>
 800f34c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f34e:	00d1      	lsls	r1, r2, #3
 800f350:	f001 fec8 	bl	80110e4 <realloc>
 800f354:	6338      	str	r0, [r7, #48]	; 0x30
 800f356:	2800      	cmp	r0, #0
 800f358:	d100      	bne.n	800f35c <__ssvfscanf_r+0x86c>
 800f35a:	e591      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f35c:	4684      	mov	ip, r0
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	69fc      	ldr	r4, [r7, #28]
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	4464      	add	r4, ip
 800f366:	6030      	str	r0, [r6, #0]
 800f368:	613b      	str	r3, [r7, #16]
 800f36a:	e7b7      	b.n	800f2dc <__ssvfscanf_r+0x7ec>
 800f36c:	2500      	movs	r5, #0
 800f36e:	e7b5      	b.n	800f2dc <__ssvfscanf_r+0x7ec>
 800f370:	0035      	movs	r5, r6
 800f372:	e7b3      	b.n	800f2dc <__ssvfscanf_r+0x7ec>
 800f374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f376:	2b00      	cmp	r3, #0
 800f378:	d000      	beq.n	800f37c <__ssvfscanf_r+0x88c>
 800f37a:	e720      	b.n	800f1be <__ssvfscanf_r+0x6ce>
 800f37c:	e783      	b.n	800f286 <__ssvfscanf_r+0x796>
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d025      	beq.n	800f3d0 <__ssvfscanf_r+0x8e0>
 800f384:	2118      	movs	r1, #24
 800f386:	2048      	movs	r0, #72	; 0x48
 800f388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f38a:	1809      	adds	r1, r1, r0
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	19c9      	adds	r1, r1, r7
 800f390:	781a      	ldrb	r2, [r3, #0]
 800f392:	5c8a      	ldrb	r2, [r1, r2]
 800f394:	2a00      	cmp	r2, #0
 800f396:	d103      	bne.n	800f3a0 <__ssvfscanf_r+0x8b0>
 800f398:	2c00      	cmp	r4, #0
 800f39a:	d000      	beq.n	800f39e <__ssvfscanf_r+0x8ae>
 800f39c:	e66c      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f39e:	e4a4      	b.n	800ecea <__ssvfscanf_r+0x1fa>
 800f3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3a4:	6852      	ldr	r2, [r2, #4]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	600b      	str	r3, [r1, #0]
 800f3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ac:	3a01      	subs	r2, #1
 800f3ae:	3401      	adds	r4, #1
 800f3b0:	604a      	str	r2, [r1, #4]
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	d100      	bne.n	800f3b8 <__ssvfscanf_r+0x8c8>
 800f3b6:	e65f      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f3b8:	2a00      	cmp	r2, #0
 800f3ba:	dce3      	bgt.n	800f384 <__ssvfscanf_r+0x894>
 800f3bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3be:	f002 fb2b 	bl	8011a18 <__ssrefill_r>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d0de      	beq.n	800f384 <__ssvfscanf_r+0x894>
 800f3c6:	e657      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f3c8:	0000fff6 	.word	0x0000fff6
 800f3cc:	20000448 	.word	0x20000448
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	0032      	movs	r2, r6
 800f3d4:	cb20      	ldmia	r3!, {r5}
 800f3d6:	61fb      	str	r3, [r7, #28]
 800f3d8:	2380      	movs	r3, #128	; 0x80
 800f3da:	401a      	ands	r2, r3
 800f3dc:	421e      	tst	r6, r3
 800f3de:	d100      	bne.n	800f3e2 <__ssvfscanf_r+0x8f2>
 800f3e0:	e086      	b.n	800f4f0 <__ssvfscanf_r+0xa00>
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	d100      	bne.n	800f3e8 <__ssvfscanf_r+0x8f8>
 800f3e6:	e480      	b.n	800ecea <__ssvfscanf_r+0x1fa>
 800f3e8:	2020      	movs	r0, #32
 800f3ea:	f7fb fcb3 	bl	800ad54 <malloc>
 800f3ee:	6338      	str	r0, [r7, #48]	; 0x30
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d100      	bne.n	800f3f6 <__ssvfscanf_r+0x906>
 800f3f4:	e452      	b.n	800ec9c <__ssvfscanf_r+0x1ac>
 800f3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3f8:	6028      	str	r0, [r5, #0]
 800f3fa:	88de      	ldrh	r6, [r3, #6]
 800f3fc:	889c      	ldrh	r4, [r3, #4]
 800f3fe:	6818      	ldr	r0, [r3, #0]
 800f400:	42a6      	cmp	r6, r4
 800f402:	d30e      	bcc.n	800f422 <__ssvfscanf_r+0x932>
 800f404:	4bc3      	ldr	r3, [pc, #780]	; (800f714 <__ssvfscanf_r+0xc24>)
 800f406:	429c      	cmp	r4, r3
 800f408:	d900      	bls.n	800f40c <__ssvfscanf_r+0x91c>
 800f40a:	e542      	b.n	800ee92 <__ssvfscanf_r+0x3a2>
 800f40c:	3408      	adds	r4, #8
 800f40e:	b2a4      	uxth	r4, r4
 800f410:	00a1      	lsls	r1, r4, #2
 800f412:	f001 fe67 	bl	80110e4 <realloc>
 800f416:	2800      	cmp	r0, #0
 800f418:	d100      	bne.n	800f41c <__ssvfscanf_r+0x92c>
 800f41a:	e53a      	b.n	800ee92 <__ssvfscanf_r+0x3a2>
 800f41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41e:	6018      	str	r0, [r3, #0]
 800f420:	809c      	strh	r4, [r3, #4]
 800f422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f424:	1c72      	adds	r2, r6, #1
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	00b6      	lsls	r6, r6, #2
 800f42a:	50f5      	str	r5, [r6, r3]
 800f42c:	2320      	movs	r3, #32
 800f42e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f430:	002e      	movs	r6, r5
 800f432:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f434:	80ca      	strh	r2, [r1, #6]
 800f436:	623b      	str	r3, [r7, #32]
 800f438:	002c      	movs	r4, r5
 800f43a:	2118      	movs	r1, #24
 800f43c:	2048      	movs	r0, #72	; 0x48
 800f43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f440:	1809      	adds	r1, r1, r0
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	19c9      	adds	r1, r1, r7
 800f446:	781a      	ldrb	r2, [r3, #0]
 800f448:	5c8a      	ldrb	r2, [r1, r2]
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	d101      	bne.n	800f452 <__ssvfscanf_r+0x962>
 800f44e:	633d      	str	r5, [r7, #48]	; 0x30
 800f450:	e031      	b.n	800f4b6 <__ssvfscanf_r+0x9c6>
 800f452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f456:	6852      	ldr	r2, [r2, #4]
 800f458:	3a01      	subs	r2, #1
 800f45a:	604a      	str	r2, [r1, #4]
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	600a      	str	r2, [r1, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	1c6a      	adds	r2, r5, #1
 800f464:	633a      	str	r2, [r7, #48]	; 0x30
 800f466:	702b      	strb	r3, [r5, #0]
 800f468:	2e00      	cmp	r6, #0
 800f46a:	d010      	beq.n	800f48e <__ssvfscanf_r+0x99e>
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	1b15      	subs	r5, r2, r4
 800f470:	429d      	cmp	r5, r3
 800f472:	d30c      	bcc.n	800f48e <__ssvfscanf_r+0x99e>
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	0020      	movs	r0, r4
 800f478:	0019      	movs	r1, r3
 800f47a:	623b      	str	r3, [r7, #32]
 800f47c:	f001 fe32 	bl	80110e4 <realloc>
 800f480:	1e04      	subs	r4, r0, #0
 800f482:	d101      	bne.n	800f488 <__ssvfscanf_r+0x998>
 800f484:	f7ff fc0a 	bl	800ec9c <__ssvfscanf_r+0x1ac>
 800f488:	1943      	adds	r3, r0, r5
 800f48a:	633b      	str	r3, [r7, #48]	; 0x30
 800f48c:	6030      	str	r0, [r6, #0]
 800f48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f490:	3b01      	subs	r3, #1
 800f492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00e      	beq.n	800f4b6 <__ssvfscanf_r+0x9c6>
 800f498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dc2a      	bgt.n	800f4f6 <__ssvfscanf_r+0xa06>
 800f4a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4a4:	f002 fab8 	bl	8011a18 <__ssrefill_r>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d024      	beq.n	800f4f6 <__ssvfscanf_r+0xa06>
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	42a3      	cmp	r3, r4
 800f4b0:	d101      	bne.n	800f4b6 <__ssvfscanf_r+0x9c6>
 800f4b2:	f7ff fbec 	bl	800ec8e <__ssvfscanf_r+0x19e>
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	1b1d      	subs	r5, r3, r4
 800f4ba:	42a3      	cmp	r3, r4
 800f4bc:	d101      	bne.n	800f4c2 <__ssvfscanf_r+0x9d2>
 800f4be:	f7ff fc14 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4c6:	7013      	strb	r3, [r2, #0]
 800f4c8:	429e      	cmp	r6, r3
 800f4ca:	d009      	beq.n	800f4e0 <__ssvfscanf_r+0x9f0>
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	1c69      	adds	r1, r5, #1
 800f4d0:	428b      	cmp	r3, r1
 800f4d2:	d905      	bls.n	800f4e0 <__ssvfscanf_r+0x9f0>
 800f4d4:	6830      	ldr	r0, [r6, #0]
 800f4d6:	f001 fe05 	bl	80110e4 <realloc>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d000      	beq.n	800f4e0 <__ssvfscanf_r+0x9f0>
 800f4de:	6030      	str	r0, [r6, #0]
 800f4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	195b      	adds	r3, r3, r5
 800f4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	e477      	b.n	800ede0 <__ssvfscanf_r+0x2f0>
 800f4f0:	0016      	movs	r6, r2
 800f4f2:	623a      	str	r2, [r7, #32]
 800f4f4:	e7a0      	b.n	800f438 <__ssvfscanf_r+0x948>
 800f4f6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f4f8:	e79f      	b.n	800f43a <__ssvfscanf_r+0x94a>
 800f4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <__ssvfscanf_r+0xa14>
 800f500:	3b01      	subs	r3, #1
 800f502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f504:	2210      	movs	r2, #16
 800f506:	2301      	movs	r3, #1
 800f508:	0034      	movs	r4, r6
 800f50a:	4032      	ands	r2, r6
 800f50c:	401c      	ands	r4, r3
 800f50e:	61fa      	str	r2, [r7, #28]
 800f510:	421e      	tst	r6, r3
 800f512:	d100      	bne.n	800f516 <__ssvfscanf_r+0xa26>
 800f514:	e102      	b.n	800f71c <__ssvfscanf_r+0xc2c>
 800f516:	2a00      	cmp	r2, #0
 800f518:	d000      	beq.n	800f51c <__ssvfscanf_r+0xa2c>
 800f51a:	e09f      	b.n	800f65c <__ssvfscanf_r+0xb6c>
 800f51c:	2080      	movs	r0, #128	; 0x80
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	cb10      	ldmia	r3!, {r4}
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	4206      	tst	r6, r0
 800f526:	d100      	bne.n	800f52a <__ssvfscanf_r+0xa3a>
 800f528:	e0a1      	b.n	800f66e <__ssvfscanf_r+0xb7e>
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	d100      	bne.n	800f530 <__ssvfscanf_r+0xa40>
 800f52e:	e4aa      	b.n	800ee86 <__ssvfscanf_r+0x396>
 800f530:	f7fb fc10 	bl	800ad54 <malloc>
 800f534:	6338      	str	r0, [r7, #48]	; 0x30
 800f536:	2800      	cmp	r0, #0
 800f538:	d100      	bne.n	800f53c <__ssvfscanf_r+0xa4c>
 800f53a:	e4a1      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f542:	88de      	ldrh	r6, [r3, #6]
 800f544:	889d      	ldrh	r5, [r3, #4]
 800f546:	42ae      	cmp	r6, r5
 800f548:	d310      	bcc.n	800f56c <__ssvfscanf_r+0xa7c>
 800f54a:	4b72      	ldr	r3, [pc, #456]	; (800f714 <__ssvfscanf_r+0xc24>)
 800f54c:	429d      	cmp	r5, r3
 800f54e:	d900      	bls.n	800f552 <__ssvfscanf_r+0xa62>
 800f550:	e496      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f554:	3508      	adds	r5, #8
 800f556:	b2ad      	uxth	r5, r5
 800f558:	6818      	ldr	r0, [r3, #0]
 800f55a:	00a9      	lsls	r1, r5, #2
 800f55c:	f001 fdc2 	bl	80110e4 <realloc>
 800f560:	2800      	cmp	r0, #0
 800f562:	d100      	bne.n	800f566 <__ssvfscanf_r+0xa76>
 800f564:	e48c      	b.n	800ee80 <__ssvfscanf_r+0x390>
 800f566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f568:	6018      	str	r0, [r3, #0]
 800f56a:	809d      	strh	r5, [r3, #4]
 800f56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56e:	1c72      	adds	r2, r6, #1
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	00b6      	lsls	r6, r6, #2
 800f574:	50f4      	str	r4, [r6, r3]
 800f576:	2320      	movs	r3, #32
 800f578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f57a:	0025      	movs	r5, r4
 800f57c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f57e:	80ca      	strh	r2, [r1, #6]
 800f580:	613b      	str	r3, [r7, #16]
 800f582:	2300      	movs	r3, #0
 800f584:	623b      	str	r3, [r7, #32]
 800f586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f588:	4a63      	ldr	r2, [pc, #396]	; (800f718 <__ssvfscanf_r+0xc28>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	5cd3      	ldrb	r3, [r2, r3]
 800f590:	2208      	movs	r2, #8
 800f592:	4213      	tst	r3, r2
 800f594:	d149      	bne.n	800f62a <__ssvfscanf_r+0xb3a>
 800f596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d046      	beq.n	800f62a <__ssvfscanf_r+0xb3a>
 800f59c:	f7fc feb2 	bl	800c304 <__locale_mb_cur_max>
 800f5a0:	6a3b      	ldr	r3, [r7, #32]
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	d101      	bne.n	800f5aa <__ssvfscanf_r+0xaba>
 800f5a6:	f7ff fb72 	bl	800ec8e <__ssvfscanf_r+0x19e>
 800f5aa:	6a3a      	ldr	r2, [r7, #32]
 800f5ac:	2048      	movs	r0, #72	; 0x48
 800f5ae:	1c56      	adds	r6, r2, #1
 800f5b0:	228c      	movs	r2, #140	; 0x8c
 800f5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b4:	0052      	lsls	r2, r2, #1
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	1812      	adds	r2, r2, r0
 800f5ba:	7819      	ldrb	r1, [r3, #0]
 800f5bc:	6a38      	ldr	r0, [r7, #32]
 800f5be:	19d2      	adds	r2, r2, r7
 800f5c0:	5411      	strb	r1, [r2, r0]
 800f5c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5c6:	6852      	ldr	r2, [r2, #4]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	600b      	str	r3, [r1, #0]
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	3a01      	subs	r2, #1
 800f5d0:	604a      	str	r2, [r1, #4]
 800f5d2:	2b03      	cmp	r3, #3
 800f5d4:	d102      	bne.n	800f5dc <__ssvfscanf_r+0xaec>
 800f5d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5d8:	2b04      	cmp	r3, #4
 800f5da:	d007      	beq.n	800f5ec <__ssvfscanf_r+0xafc>
 800f5dc:	2048      	movs	r0, #72	; 0x48
 800f5de:	2310      	movs	r3, #16
 800f5e0:	181b      	adds	r3, r3, r0
 800f5e2:	2208      	movs	r2, #8
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	19d8      	adds	r0, r3, r7
 800f5e8:	f7fc fe48 	bl	800c27c <memset>
 800f5ec:	2148      	movs	r1, #72	; 0x48
 800f5ee:	2310      	movs	r3, #16
 800f5f0:	228c      	movs	r2, #140	; 0x8c
 800f5f2:	185b      	adds	r3, r3, r1
 800f5f4:	0052      	lsls	r2, r2, #1
 800f5f6:	19db      	adds	r3, r3, r7
 800f5f8:	1852      	adds	r2, r2, r1
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	0021      	movs	r1, r4
 800f5fe:	0033      	movs	r3, r6
 800f600:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f602:	19d2      	adds	r2, r2, r7
 800f604:	f002 f908 	bl	8011818 <_mbrtowc_r>
 800f608:	0003      	movs	r3, r0
 800f60a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f60c:	3301      	adds	r3, #1
 800f60e:	d101      	bne.n	800f614 <__ssvfscanf_r+0xb24>
 800f610:	f7ff fb3d 	bl	800ec8e <__ssvfscanf_r+0x19e>
 800f614:	2800      	cmp	r0, #0
 800f616:	d12f      	bne.n	800f678 <__ssvfscanf_r+0xb88>
 800f618:	6020      	str	r0, [r4, #0]
 800f61a:	6820      	ldr	r0, [r4, #0]
 800f61c:	f002 f91a 	bl	8011854 <iswspace>
 800f620:	6238      	str	r0, [r7, #32]
 800f622:	2800      	cmp	r0, #0
 800f624:	d04a      	beq.n	800f6bc <__ssvfscanf_r+0xbcc>
 800f626:	2e00      	cmp	r6, #0
 800f628:	d13c      	bne.n	800f6a4 <__ssvfscanf_r+0xbb4>
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d000      	beq.n	800f632 <__ssvfscanf_r+0xb42>
 800f630:	e640      	b.n	800f2b4 <__ssvfscanf_r+0x7c4>
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	2d00      	cmp	r5, #0
 800f636:	d100      	bne.n	800f63a <__ssvfscanf_r+0xb4a>
 800f638:	e639      	b.n	800f2ae <__ssvfscanf_r+0x7be>
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	1ae4      	subs	r4, r4, r3
 800f640:	10a3      	asrs	r3, r4, #2
 800f642:	3301      	adds	r3, #1
 800f644:	429a      	cmp	r2, r3
 800f646:	d800      	bhi.n	800f64a <__ssvfscanf_r+0xb5a>
 800f648:	e631      	b.n	800f2ae <__ssvfscanf_r+0x7be>
 800f64a:	6828      	ldr	r0, [r5, #0]
 800f64c:	1d21      	adds	r1, r4, #4
 800f64e:	f001 fd49 	bl	80110e4 <realloc>
 800f652:	2800      	cmp	r0, #0
 800f654:	d100      	bne.n	800f658 <__ssvfscanf_r+0xb68>
 800f656:	e62a      	b.n	800f2ae <__ssvfscanf_r+0x7be>
 800f658:	6028      	str	r0, [r5, #0]
 800f65a:	e628      	b.n	800f2ae <__ssvfscanf_r+0x7be>
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	60fb      	str	r3, [r7, #12]
 800f660:	2300      	movs	r3, #0
 800f662:	001d      	movs	r5, r3
 800f664:	613b      	str	r3, [r7, #16]
 800f666:	633b      	str	r3, [r7, #48]	; 0x30
 800f668:	334c      	adds	r3, #76	; 0x4c
 800f66a:	18fc      	adds	r4, r7, r3
 800f66c:	e789      	b.n	800f582 <__ssvfscanf_r+0xa92>
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	001d      	movs	r5, r3
 800f672:	613b      	str	r3, [r7, #16]
 800f674:	633b      	str	r3, [r7, #48]	; 0x30
 800f676:	e784      	b.n	800f582 <__ssvfscanf_r+0xa92>
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	623e      	str	r6, [r7, #32]
 800f67c:	3302      	adds	r3, #2
 800f67e:	d1cc      	bne.n	800f61a <__ssvfscanf_r+0xb2a>
 800f680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	dd00      	ble.n	800f68a <__ssvfscanf_r+0xb9a>
 800f688:	e77d      	b.n	800f586 <__ssvfscanf_r+0xa96>
 800f68a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f68c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f68e:	f002 f9c3 	bl	8011a18 <__ssrefill_r>
 800f692:	2800      	cmp	r0, #0
 800f694:	d100      	bne.n	800f698 <__ssvfscanf_r+0xba8>
 800f696:	e776      	b.n	800f586 <__ssvfscanf_r+0xa96>
 800f698:	6a3b      	ldr	r3, [r7, #32]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d001      	beq.n	800f6a2 <__ssvfscanf_r+0xbb2>
 800f69e:	f7ff faf6 	bl	800ec8e <__ssvfscanf_r+0x19e>
 800f6a2:	e7c2      	b.n	800f62a <__ssvfscanf_r+0xb3a>
 800f6a4:	238c      	movs	r3, #140	; 0x8c
 800f6a6:	2248      	movs	r2, #72	; 0x48
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	189b      	adds	r3, r3, r2
 800f6ac:	3e01      	subs	r6, #1
 800f6ae:	19db      	adds	r3, r3, r7
 800f6b0:	5cf1      	ldrb	r1, [r6, r3]
 800f6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6b6:	f002 f973 	bl	80119a0 <_sungetc_r>
 800f6ba:	e7b4      	b.n	800f626 <__ssvfscanf_r+0xb36>
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6be:	199b      	adds	r3, r3, r6
 800f6c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d102      	bne.n	800f6ce <__ssvfscanf_r+0xbde>
 800f6c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6ca:	2b04      	cmp	r3, #4
 800f6cc:	d002      	beq.n	800f6d4 <__ssvfscanf_r+0xbe4>
 800f6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1d2      	bne.n	800f680 <__ssvfscanf_r+0xb90>
 800f6da:	3404      	adds	r4, #4
 800f6dc:	2d00      	cmp	r5, #0
 800f6de:	d016      	beq.n	800f70e <__ssvfscanf_r+0xc1e>
 800f6e0:	69fa      	ldr	r2, [r7, #28]
 800f6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e4:	623a      	str	r2, [r7, #32]
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	1ae6      	subs	r6, r4, r3
 800f6ea:	10b3      	asrs	r3, r6, #2
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d3c7      	bcc.n	800f680 <__ssvfscanf_r+0xb90>
 800f6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6f2:	00d1      	lsls	r1, r2, #3
 800f6f4:	f001 fcf6 	bl	80110e4 <realloc>
 800f6f8:	6338      	str	r0, [r7, #48]	; 0x30
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d101      	bne.n	800f702 <__ssvfscanf_r+0xc12>
 800f6fe:	f7ff fbbf 	bl	800ee80 <__ssvfscanf_r+0x390>
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	1984      	adds	r4, r0, r6
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	6028      	str	r0, [r5, #0]
 800f70a:	613b      	str	r3, [r7, #16]
 800f70c:	e7b8      	b.n	800f680 <__ssvfscanf_r+0xb90>
 800f70e:	623d      	str	r5, [r7, #32]
 800f710:	e7b6      	b.n	800f680 <__ssvfscanf_r+0xb90>
 800f712:	46c0      	nop			; (mov r8, r8)
 800f714:	0000fff6 	.word	0x0000fff6
 800f718:	080147d9 	.word	0x080147d9
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d01c      	beq.n	800f75c <__ssvfscanf_r+0xc6c>
 800f722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f724:	49bf      	ldr	r1, [pc, #764]	; (800fa24 <__ssvfscanf_r+0xf34>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	781a      	ldrb	r2, [r3, #0]
 800f72a:	5c8a      	ldrb	r2, [r1, r2]
 800f72c:	2108      	movs	r1, #8
 800f72e:	420a      	tst	r2, r1
 800f730:	d000      	beq.n	800f734 <__ssvfscanf_r+0xc44>
 800f732:	e4a1      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f738:	6852      	ldr	r2, [r2, #4]
 800f73a:	3301      	adds	r3, #1
 800f73c:	600b      	str	r3, [r1, #0]
 800f73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f740:	3a01      	subs	r2, #1
 800f742:	3401      	adds	r4, #1
 800f744:	604a      	str	r2, [r1, #4]
 800f746:	429c      	cmp	r4, r3
 800f748:	d100      	bne.n	800f74c <__ssvfscanf_r+0xc5c>
 800f74a:	e495      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f74c:	2a00      	cmp	r2, #0
 800f74e:	dce8      	bgt.n	800f722 <__ssvfscanf_r+0xc32>
 800f750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f752:	f002 f961 	bl	8011a18 <__ssrefill_r>
 800f756:	2800      	cmp	r0, #0
 800f758:	d0e3      	beq.n	800f722 <__ssvfscanf_r+0xc32>
 800f75a:	e48d      	b.n	800f078 <__ssvfscanf_r+0x588>
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	0032      	movs	r2, r6
 800f760:	cb10      	ldmia	r3!, {r4}
 800f762:	61fb      	str	r3, [r7, #28]
 800f764:	2380      	movs	r3, #128	; 0x80
 800f766:	401a      	ands	r2, r3
 800f768:	421e      	tst	r6, r3
 800f76a:	d039      	beq.n	800f7e0 <__ssvfscanf_r+0xcf0>
 800f76c:	2c00      	cmp	r4, #0
 800f76e:	d101      	bne.n	800f774 <__ssvfscanf_r+0xc84>
 800f770:	f7ff fabb 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800f774:	2020      	movs	r0, #32
 800f776:	f7fb faed 	bl	800ad54 <malloc>
 800f77a:	6338      	str	r0, [r7, #48]	; 0x30
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d101      	bne.n	800f784 <__ssvfscanf_r+0xc94>
 800f780:	f7ff fa8c 	bl	800ec9c <__ssvfscanf_r+0x1ac>
 800f784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f786:	6020      	str	r0, [r4, #0]
 800f788:	88de      	ldrh	r6, [r3, #6]
 800f78a:	889d      	ldrh	r5, [r3, #4]
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	42ae      	cmp	r6, r5
 800f790:	d310      	bcc.n	800f7b4 <__ssvfscanf_r+0xcc4>
 800f792:	4ba5      	ldr	r3, [pc, #660]	; (800fa28 <__ssvfscanf_r+0xf38>)
 800f794:	429d      	cmp	r5, r3
 800f796:	d901      	bls.n	800f79c <__ssvfscanf_r+0xcac>
 800f798:	f7ff fb7b 	bl	800ee92 <__ssvfscanf_r+0x3a2>
 800f79c:	3508      	adds	r5, #8
 800f79e:	b2ad      	uxth	r5, r5
 800f7a0:	00a9      	lsls	r1, r5, #2
 800f7a2:	f001 fc9f 	bl	80110e4 <realloc>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d101      	bne.n	800f7ae <__ssvfscanf_r+0xcbe>
 800f7aa:	f7ff fb72 	bl	800ee92 <__ssvfscanf_r+0x3a2>
 800f7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b0:	6018      	str	r0, [r3, #0]
 800f7b2:	809d      	strh	r5, [r3, #4]
 800f7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b6:	1c72      	adds	r2, r6, #1
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	00b6      	lsls	r6, r6, #2
 800f7bc:	50f4      	str	r4, [r6, r3]
 800f7be:	2320      	movs	r3, #32
 800f7c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7c2:	0026      	movs	r6, r4
 800f7c4:	80ca      	strh	r2, [r1, #6]
 800f7c6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f7c8:	633b      	str	r3, [r7, #48]	; 0x30
 800f7ca:	0025      	movs	r5, r4
 800f7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7ce:	4995      	ldr	r1, [pc, #596]	; (800fa24 <__ssvfscanf_r+0xf34>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	781a      	ldrb	r2, [r3, #0]
 800f7d4:	5c8a      	ldrb	r2, [r1, r2]
 800f7d6:	2108      	movs	r1, #8
 800f7d8:	420a      	tst	r2, r1
 800f7da:	d004      	beq.n	800f7e6 <__ssvfscanf_r+0xcf6>
 800f7dc:	623c      	str	r4, [r7, #32]
 800f7de:	e031      	b.n	800f844 <__ssvfscanf_r+0xd54>
 800f7e0:	0016      	movs	r6, r2
 800f7e2:	633a      	str	r2, [r7, #48]	; 0x30
 800f7e4:	e7f1      	b.n	800f7ca <__ssvfscanf_r+0xcda>
 800f7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7ea:	6852      	ldr	r2, [r2, #4]
 800f7ec:	3a01      	subs	r2, #1
 800f7ee:	604a      	str	r2, [r1, #4]
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	600a      	str	r2, [r1, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	1c62      	adds	r2, r4, #1
 800f7f8:	623a      	str	r2, [r7, #32]
 800f7fa:	7023      	strb	r3, [r4, #0]
 800f7fc:	2e00      	cmp	r6, #0
 800f7fe:	d010      	beq.n	800f822 <__ssvfscanf_r+0xd32>
 800f800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f802:	1b54      	subs	r4, r2, r5
 800f804:	429c      	cmp	r4, r3
 800f806:	d30c      	bcc.n	800f822 <__ssvfscanf_r+0xd32>
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	0028      	movs	r0, r5
 800f80c:	0019      	movs	r1, r3
 800f80e:	633b      	str	r3, [r7, #48]	; 0x30
 800f810:	f001 fc68 	bl	80110e4 <realloc>
 800f814:	1e05      	subs	r5, r0, #0
 800f816:	d101      	bne.n	800f81c <__ssvfscanf_r+0xd2c>
 800f818:	f7ff fa40 	bl	800ec9c <__ssvfscanf_r+0x1ac>
 800f81c:	1903      	adds	r3, r0, r4
 800f81e:	623b      	str	r3, [r7, #32]
 800f820:	6030      	str	r0, [r6, #0]
 800f822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f824:	3b01      	subs	r3, #1
 800f826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00b      	beq.n	800f844 <__ssvfscanf_r+0xd54>
 800f82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	dd01      	ble.n	800f838 <__ssvfscanf_r+0xd48>
 800f834:	6a3c      	ldr	r4, [r7, #32]
 800f836:	e7c9      	b.n	800f7cc <__ssvfscanf_r+0xcdc>
 800f838:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f83a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f83c:	f002 f8ec 	bl	8011a18 <__ssrefill_r>
 800f840:	2800      	cmp	r0, #0
 800f842:	d0f7      	beq.n	800f834 <__ssvfscanf_r+0xd44>
 800f844:	2300      	movs	r3, #0
 800f846:	6a3a      	ldr	r2, [r7, #32]
 800f848:	7013      	strb	r3, [r2, #0]
 800f84a:	1b55      	subs	r5, r2, r5
 800f84c:	2e00      	cmp	r6, #0
 800f84e:	d009      	beq.n	800f864 <__ssvfscanf_r+0xd74>
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	1c69      	adds	r1, r5, #1
 800f854:	428b      	cmp	r3, r1
 800f856:	d905      	bls.n	800f864 <__ssvfscanf_r+0xd74>
 800f858:	6830      	ldr	r0, [r6, #0]
 800f85a:	f001 fc43 	bl	80110e4 <realloc>
 800f85e:	2800      	cmp	r0, #0
 800f860:	d000      	beq.n	800f864 <__ssvfscanf_r+0xd74>
 800f862:	6030      	str	r0, [r6, #0]
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	195b      	adds	r3, r3, r5
 800f868:	63bb      	str	r3, [r7, #56]	; 0x38
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	3301      	adds	r3, #1
 800f86e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f870:	e63c      	b.n	800f4ec <__ssvfscanf_r+0x9fc>
 800f872:	22ae      	movs	r2, #174	; 0xae
 800f874:	2100      	movs	r1, #0
 800f876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f878:	0052      	lsls	r2, r2, #1
 800f87a:	3b01      	subs	r3, #1
 800f87c:	6239      	str	r1, [r7, #32]
 800f87e:	4293      	cmp	r3, r2
 800f880:	d906      	bls.n	800f890 <__ssvfscanf_r+0xda0>
 800f882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f884:	3b5e      	subs	r3, #94	; 0x5e
 800f886:	3bff      	subs	r3, #255	; 0xff
 800f888:	623b      	str	r3, [r7, #32]
 800f88a:	235e      	movs	r3, #94	; 0x5e
 800f88c:	33ff      	adds	r3, #255	; 0xff
 800f88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f890:	24d8      	movs	r4, #216	; 0xd8
 800f892:	2300      	movs	r3, #0
 800f894:	2248      	movs	r2, #72	; 0x48
 800f896:	0124      	lsls	r4, r4, #4
 800f898:	4334      	orrs	r4, r6
 800f89a:	2680      	movs	r6, #128	; 0x80
 800f89c:	61fb      	str	r3, [r7, #28]
 800f89e:	3319      	adds	r3, #25
 800f8a0:	33ff      	adds	r3, #255	; 0xff
 800f8a2:	189b      	adds	r3, r3, r2
 800f8a4:	19dd      	adds	r5, r3, r7
 800f8a6:	00b6      	lsls	r6, r6, #2
 800f8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	7813      	ldrb	r3, [r2, #0]
 800f8ae:	2b39      	cmp	r3, #57	; 0x39
 800f8b0:	d80f      	bhi.n	800f8d2 <__ssvfscanf_r+0xde2>
 800f8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b4:	d91b      	bls.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	382b      	subs	r0, #43	; 0x2b
 800f8ba:	280e      	cmp	r0, #14
 800f8bc:	d817      	bhi.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f8be:	f7f0 fc29 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f8c2:	168f      	.short	0x168f
 800f8c4:	5416168f 	.word	0x5416168f
 800f8c8:	80808080 	.word	0x80808080
 800f8cc:	87808080 	.word	0x87808080
 800f8d0:	87          	.byte	0x87
 800f8d1:	00          	.byte	0x00
 800f8d2:	2b66      	cmp	r3, #102	; 0x66
 800f8d4:	d83a      	bhi.n	800f94c <__ssvfscanf_r+0xe5c>
 800f8d6:	2b60      	cmp	r3, #96	; 0x60
 800f8d8:	d803      	bhi.n	800f8e2 <__ssvfscanf_r+0xdf2>
 800f8da:	2b46      	cmp	r3, #70	; 0x46
 800f8dc:	d805      	bhi.n	800f8ea <__ssvfscanf_r+0xdfa>
 800f8de:	2b40      	cmp	r3, #64	; 0x40
 800f8e0:	d905      	bls.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f8e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8e4:	290a      	cmp	r1, #10
 800f8e6:	dc71      	bgt.n	800f9cc <__ssvfscanf_r+0xedc>
 800f8e8:	e001      	b.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f8ea:	2b58      	cmp	r3, #88	; 0x58
 800f8ec:	d030      	beq.n	800f950 <__ssvfscanf_r+0xe60>
 800f8ee:	05e3      	lsls	r3, r4, #23
 800f8f0:	d515      	bpl.n	800f91e <__ssvfscanf_r+0xe2e>
 800f8f2:	238c      	movs	r3, #140	; 0x8c
 800f8f4:	2248      	movs	r2, #72	; 0x48
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	189b      	adds	r3, r3, r2
 800f8fa:	19db      	adds	r3, r3, r7
 800f8fc:	429d      	cmp	r5, r3
 800f8fe:	d905      	bls.n	800f90c <__ssvfscanf_r+0xe1c>
 800f900:	3d01      	subs	r5, #1
 800f902:	7829      	ldrb	r1, [r5, #0]
 800f904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f906:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f908:	f002 f84a 	bl	80119a0 <_sungetc_r>
 800f90c:	238c      	movs	r3, #140	; 0x8c
 800f90e:	2248      	movs	r2, #72	; 0x48
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	189b      	adds	r3, r3, r2
 800f914:	19db      	adds	r3, r3, r7
 800f916:	429d      	cmp	r5, r3
 800f918:	d101      	bne.n	800f91e <__ssvfscanf_r+0xe2e>
 800f91a:	f7ff f9e6 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800f91e:	2310      	movs	r3, #16
 800f920:	0022      	movs	r2, r4
 800f922:	401a      	ands	r2, r3
 800f924:	421c      	tst	r4, r3
 800f926:	d171      	bne.n	800fa0c <__ssvfscanf_r+0xf1c>
 800f928:	218c      	movs	r1, #140	; 0x8c
 800f92a:	2048      	movs	r0, #72	; 0x48
 800f92c:	0049      	lsls	r1, r1, #1
 800f92e:	1809      	adds	r1, r1, r0
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	697e      	ldr	r6, [r7, #20]
 800f934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f936:	19c9      	adds	r1, r1, r7
 800f938:	702a      	strb	r2, [r5, #0]
 800f93a:	47b0      	blx	r6
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	1d1e      	adds	r6, r3, #4
 800f940:	06a3      	lsls	r3, r4, #26
 800f942:	d559      	bpl.n	800f9f8 <__ssvfscanf_r+0xf08>
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6018      	str	r0, [r3, #0]
 800f94a:	e05b      	b.n	800fa04 <__ssvfscanf_r+0xf14>
 800f94c:	2b78      	cmp	r3, #120	; 0x78
 800f94e:	d1ce      	bne.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f950:	21c0      	movs	r1, #192	; 0xc0
 800f952:	00c9      	lsls	r1, r1, #3
 800f954:	4021      	ands	r1, r4
 800f956:	42b1      	cmp	r1, r6
 800f958:	d1c9      	bne.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f95a:	4934      	ldr	r1, [pc, #208]	; (800fa2c <__ssvfscanf_r+0xf3c>)
 800f95c:	4021      	ands	r1, r4
 800f95e:	24a0      	movs	r4, #160	; 0xa0
 800f960:	00e4      	lsls	r4, r4, #3
 800f962:	430c      	orrs	r4, r1
 800f964:	2110      	movs	r1, #16
 800f966:	6279      	str	r1, [r7, #36]	; 0x24
 800f968:	e00b      	b.n	800f982 <__ssvfscanf_r+0xe92>
 800f96a:	0521      	lsls	r1, r4, #20
 800f96c:	d509      	bpl.n	800f982 <__ssvfscanf_r+0xe92>
 800f96e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f970:	2900      	cmp	r1, #0
 800f972:	d102      	bne.n	800f97a <__ssvfscanf_r+0xe8a>
 800f974:	3108      	adds	r1, #8
 800f976:	4334      	orrs	r4, r6
 800f978:	6279      	str	r1, [r7, #36]	; 0x24
 800f97a:	0561      	lsls	r1, r4, #21
 800f97c:	d504      	bpl.n	800f988 <__ssvfscanf_r+0xe98>
 800f97e:	492c      	ldr	r1, [pc, #176]	; (800fa30 <__ssvfscanf_r+0xf40>)
 800f980:	400c      	ands	r4, r1
 800f982:	702b      	strb	r3, [r5, #0]
 800f984:	3501      	adds	r5, #1
 800f986:	e00c      	b.n	800f9a2 <__ssvfscanf_r+0xeb2>
 800f988:	4b2a      	ldr	r3, [pc, #168]	; (800fa34 <__ssvfscanf_r+0xf44>)
 800f98a:	401c      	ands	r4, r3
 800f98c:	6a3b      	ldr	r3, [r7, #32]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <__ssvfscanf_r+0xeac>
 800f992:	3b01      	subs	r3, #1
 800f994:	623b      	str	r3, [r7, #32]
 800f996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f998:	3301      	adds	r3, #1
 800f99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	61fb      	str	r3, [r7, #28]
 800f9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	604b      	str	r3, [r1, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	dd1c      	ble.n	800f9ea <__ssvfscanf_r+0xefa>
 800f9b0:	3201      	adds	r2, #1
 800f9b2:	600a      	str	r2, [r1, #0]
 800f9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d000      	beq.n	800f9c0 <__ssvfscanf_r+0xed0>
 800f9be:	e773      	b.n	800f8a8 <__ssvfscanf_r+0xdb8>
 800f9c0:	e795      	b.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f9c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9c4:	491c      	ldr	r1, [pc, #112]	; (800fa38 <__ssvfscanf_r+0xf48>)
 800f9c6:	0040      	lsls	r0, r0, #1
 800f9c8:	5e41      	ldrsh	r1, [r0, r1]
 800f9ca:	6279      	str	r1, [r7, #36]	; 0x24
 800f9cc:	491b      	ldr	r1, [pc, #108]	; (800fa3c <__ssvfscanf_r+0xf4c>)
 800f9ce:	e7d7      	b.n	800f980 <__ssvfscanf_r+0xe90>
 800f9d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9d2:	4919      	ldr	r1, [pc, #100]	; (800fa38 <__ssvfscanf_r+0xf48>)
 800f9d4:	0040      	lsls	r0, r0, #1
 800f9d6:	5e41      	ldrsh	r1, [r0, r1]
 800f9d8:	6279      	str	r1, [r7, #36]	; 0x24
 800f9da:	2908      	cmp	r1, #8
 800f9dc:	dcf6      	bgt.n	800f9cc <__ssvfscanf_r+0xedc>
 800f9de:	e786      	b.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f9e0:	2180      	movs	r1, #128	; 0x80
 800f9e2:	420c      	tst	r4, r1
 800f9e4:	d083      	beq.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f9e6:	438c      	bics	r4, r1
 800f9e8:	e7cb      	b.n	800f982 <__ssvfscanf_r+0xe92>
 800f9ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9ee:	f002 f813 	bl	8011a18 <__ssrefill_r>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d0de      	beq.n	800f9b4 <__ssvfscanf_r+0xec4>
 800f9f6:	e77a      	b.n	800f8ee <__ssvfscanf_r+0xdfe>
 800f9f8:	2308      	movs	r3, #8
 800f9fa:	421c      	tst	r4, r3
 800f9fc:	d020      	beq.n	800fa40 <__ssvfscanf_r+0xf50>
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	7018      	strb	r0, [r3, #0]
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	633e      	str	r6, [r7, #48]	; 0x30
 800fa08:	3301      	adds	r3, #1
 800fa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa0c:	238c      	movs	r3, #140	; 0x8c
 800fa0e:	2248      	movs	r2, #72	; 0x48
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	189b      	adds	r3, r3, r2
 800fa14:	19db      	adds	r3, r3, r7
 800fa16:	1aed      	subs	r5, r5, r3
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	18ed      	adds	r5, r5, r3
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	195b      	adds	r3, r3, r5
 800fa20:	f7ff f92d 	bl	800ec7e <__ssvfscanf_r+0x18e>
 800fa24:	080147d9 	.word	0x080147d9
 800fa28:	0000fff6 	.word	0x0000fff6
 800fa2c:	fffffdff 	.word	0xfffffdff
 800fa30:	fffffa7f 	.word	0xfffffa7f
 800fa34:	fffffc7f 	.word	0xfffffc7f
 800fa38:	08014b06 	.word	0x08014b06
 800fa3c:	fffff47f 	.word	0xfffff47f
 800fa40:	0763      	lsls	r3, r4, #29
 800fa42:	d503      	bpl.n	800fa4c <__ssvfscanf_r+0xf5c>
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	8018      	strh	r0, [r3, #0]
 800fa4a:	e7db      	b.n	800fa04 <__ssvfscanf_r+0xf14>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	0022      	movs	r2, r4
 800fa50:	401a      	ands	r2, r3
 800fa52:	421c      	tst	r4, r3
 800fa54:	d000      	beq.n	800fa58 <__ssvfscanf_r+0xf68>
 800fa56:	e775      	b.n	800f944 <__ssvfscanf_r+0xe54>
 800fa58:	07a4      	lsls	r4, r4, #30
 800fa5a:	d400      	bmi.n	800fa5e <__ssvfscanf_r+0xf6e>
 800fa5c:	e772      	b.n	800f944 <__ssvfscanf_r+0xe54>
 800fa5e:	4ba8      	ldr	r3, [pc, #672]	; (800fd00 <__ssvfscanf_r+0x1210>)
 800fa60:	6979      	ldr	r1, [r7, #20]
 800fa62:	4299      	cmp	r1, r3
 800fa64:	d10c      	bne.n	800fa80 <__ssvfscanf_r+0xf90>
 800fa66:	218c      	movs	r1, #140	; 0x8c
 800fa68:	2048      	movs	r0, #72	; 0x48
 800fa6a:	0049      	lsls	r1, r1, #1
 800fa6c:	1809      	adds	r1, r1, r0
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa72:	19c9      	adds	r1, r1, r7
 800fa74:	f001 fecc 	bl	8011810 <_strtoull_r>
 800fa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	c303      	stmia	r3!, {r0, r1}
 800fa7e:	e7c1      	b.n	800fa04 <__ssvfscanf_r+0xf14>
 800fa80:	218c      	movs	r1, #140	; 0x8c
 800fa82:	2048      	movs	r0, #72	; 0x48
 800fa84:	0049      	lsls	r1, r1, #1
 800fa86:	1809      	adds	r1, r1, r0
 800fa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa8c:	19c9      	adds	r1, r1, r7
 800fa8e:	f001 fe0d 	bl	80116ac <_strtoll_r>
 800fa92:	e7f1      	b.n	800fa78 <__ssvfscanf_r+0xf88>
 800fa94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa96:	f000 fb9f 	bl	80101d8 <_localeconv_r>
 800fa9a:	22ae      	movs	r2, #174	; 0xae
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	6803      	ldr	r3, [r0, #0]
 800faa0:	0052      	lsls	r2, r2, #1
 800faa2:	603b      	str	r3, [r7, #0]
 800faa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa6:	60f9      	str	r1, [r7, #12]
 800faa8:	3b01      	subs	r3, #1
 800faaa:	4293      	cmp	r3, r2
 800faac:	d906      	bls.n	800fabc <__ssvfscanf_r+0xfcc>
 800faae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab0:	3b5e      	subs	r3, #94	; 0x5e
 800fab2:	3bff      	subs	r3, #255	; 0xff
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	235e      	movs	r3, #94	; 0x5e
 800fab8:	33ff      	adds	r3, #255	; 0xff
 800faba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fabc:	23f0      	movs	r3, #240	; 0xf0
 800fabe:	00db      	lsls	r3, r3, #3
 800fac0:	431e      	orrs	r6, r3
 800fac2:	238c      	movs	r3, #140	; 0x8c
 800fac4:	2248      	movs	r2, #72	; 0x48
 800fac6:	2400      	movs	r4, #0
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	189b      	adds	r3, r3, r2
 800facc:	623c      	str	r4, [r7, #32]
 800face:	607c      	str	r4, [r7, #4]
 800fad0:	60bc      	str	r4, [r7, #8]
 800fad2:	61fc      	str	r4, [r7, #28]
 800fad4:	613c      	str	r4, [r7, #16]
 800fad6:	19dd      	adds	r5, r3, r7
 800fad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	781a      	ldrb	r2, [r3, #0]
 800fade:	0010      	movs	r0, r2
 800fae0:	382b      	subs	r0, #43	; 0x2b
 800fae2:	284e      	cmp	r0, #78	; 0x4e
 800fae4:	d900      	bls.n	800fae8 <__ssvfscanf_r+0xff8>
 800fae6:	e133      	b.n	800fd50 <__ssvfscanf_r+0x1260>
 800fae8:	f7f0 fb1e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800faec:	0132009b 	.word	0x0132009b
 800faf0:	0132009b 	.word	0x0132009b
 800faf4:	004f0132 	.word	0x004f0132
 800faf8:	00720072 	.word	0x00720072
 800fafc:	00720072 	.word	0x00720072
 800fb00:	00720072 	.word	0x00720072
 800fb04:	00720072 	.word	0x00720072
 800fb08:	01320072 	.word	0x01320072
 800fb0c:	01320132 	.word	0x01320132
 800fb10:	01320132 	.word	0x01320132
 800fb14:	01320132 	.word	0x01320132
 800fb18:	007b00bc 	.word	0x007b00bc
 800fb1c:	007b007b 	.word	0x007b007b
 800fb20:	00f7012f 	.word	0x00f7012f
 800fb24:	01320132 	.word	0x01320132
 800fb28:	013200e3 	.word	0x013200e3
 800fb2c:	01320132 	.word	0x01320132
 800fb30:	00a00132 	.word	0x00a00132
 800fb34:	01120132 	.word	0x01120132
 800fb38:	01320132 	.word	0x01320132
 800fb3c:	01010132 	.word	0x01010132
 800fb40:	01320132 	.word	0x01320132
 800fb44:	00820132 	.word	0x00820132
 800fb48:	01320105 	.word	0x01320105
 800fb4c:	01320132 	.word	0x01320132
 800fb50:	01320132 	.word	0x01320132
 800fb54:	01320132 	.word	0x01320132
 800fb58:	007b00bc 	.word	0x007b00bc
 800fb5c:	007b007b 	.word	0x007b007b
 800fb60:	00f7012f 	.word	0x00f7012f
 800fb64:	01320132 	.word	0x01320132
 800fb68:	013200e3 	.word	0x013200e3
 800fb6c:	01320132 	.word	0x01320132
 800fb70:	00a00132 	.word	0x00a00132
 800fb74:	01120132 	.word	0x01120132
 800fb78:	01320132 	.word	0x01320132
 800fb7c:	01010132 	.word	0x01010132
 800fb80:	01320132 	.word	0x01320132
 800fb84:	00820132 	.word	0x00820132
 800fb88:	0105      	.short	0x0105
 800fb8a:	05f1      	lsls	r1, r6, #23
 800fb8c:	d520      	bpl.n	800fbd0 <__ssvfscanf_r+0x10e0>
 800fb8e:	2280      	movs	r2, #128	; 0x80
 800fb90:	4396      	bics	r6, r2
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	3201      	adds	r2, #1
 800fb96:	61fa      	str	r2, [r7, #28]
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	2a00      	cmp	r2, #0
 800fb9c:	d004      	beq.n	800fba8 <__ssvfscanf_r+0x10b8>
 800fb9e:	3a01      	subs	r2, #1
 800fba0:	60fa      	str	r2, [r7, #12]
 800fba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fba4:	3201      	adds	r2, #1
 800fba6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbac:	3a01      	subs	r2, #1
 800fbae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbb2:	3201      	adds	r2, #1
 800fbb4:	63ba      	str	r2, [r7, #56]	; 0x38
 800fbb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbb8:	6852      	ldr	r2, [r2, #4]
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	604a      	str	r2, [r1, #4]
 800fbbe:	2a00      	cmp	r2, #0
 800fbc0:	dc00      	bgt.n	800fbc4 <__ssvfscanf_r+0x10d4>
 800fbc2:	e0d6      	b.n	800fd72 <__ssvfscanf_r+0x1282>
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	600b      	str	r3, [r1, #0]
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d184      	bne.n	800fad8 <__ssvfscanf_r+0xfe8>
 800fbce:	e057      	b.n	800fc80 <__ssvfscanf_r+0x1190>
 800fbd0:	6a39      	ldr	r1, [r7, #32]
 800fbd2:	1909      	adds	r1, r1, r4
 800fbd4:	2900      	cmp	r1, #0
 800fbd6:	d153      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fbd8:	494a      	ldr	r1, [pc, #296]	; (800fd04 <__ssvfscanf_r+0x1214>)
 800fbda:	400e      	ands	r6, r1
 800fbdc:	702a      	strb	r2, [r5, #0]
 800fbde:	3501      	adds	r5, #1
 800fbe0:	e7e2      	b.n	800fba8 <__ssvfscanf_r+0x10b8>
 800fbe2:	0531      	lsls	r1, r6, #20
 800fbe4:	d54c      	bpl.n	800fc80 <__ssvfscanf_r+0x1190>
 800fbe6:	6a39      	ldr	r1, [r7, #32]
 800fbe8:	1909      	adds	r1, r1, r4
 800fbea:	2900      	cmp	r1, #0
 800fbec:	d040      	beq.n	800fc70 <__ssvfscanf_r+0x1180>
 800fbee:	e047      	b.n	800fc80 <__ssvfscanf_r+0x1190>
 800fbf0:	2198      	movs	r1, #152	; 0x98
 800fbf2:	2080      	movs	r0, #128	; 0x80
 800fbf4:	0109      	lsls	r1, r1, #4
 800fbf6:	4031      	ands	r1, r6
 800fbf8:	0040      	lsls	r0, r0, #1
 800fbfa:	4281      	cmp	r1, r0
 800fbfc:	d140      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fbfe:	69f9      	ldr	r1, [r7, #28]
 800fc00:	2901      	cmp	r1, #1
 800fc02:	d13d      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fc04:	2080      	movs	r0, #128	; 0x80
 800fc06:	4940      	ldr	r1, [pc, #256]	; (800fd08 <__ssvfscanf_r+0x1218>)
 800fc08:	0100      	lsls	r0, r0, #4
 800fc0a:	400e      	ands	r6, r1
 800fc0c:	3132      	adds	r1, #50	; 0x32
 800fc0e:	31ff      	adds	r1, #255	; 0xff
 800fc10:	7029      	strb	r1, [r5, #0]
 800fc12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc14:	4306      	orrs	r6, r0
 800fc16:	3901      	subs	r1, #1
 800fc18:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fc1a:	3501      	adds	r5, #1
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	61f9      	str	r1, [r7, #28]
 800fc20:	e7dc      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fc22:	2180      	movs	r1, #128	; 0x80
 800fc24:	420e      	tst	r6, r1
 800fc26:	d02b      	beq.n	800fc80 <__ssvfscanf_r+0x1190>
 800fc28:	438e      	bics	r6, r1
 800fc2a:	e7d7      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fc2c:	6a39      	ldr	r1, [r7, #32]
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	d10d      	bne.n	800fc4e <__ssvfscanf_r+0x115e>
 800fc32:	69f9      	ldr	r1, [r7, #28]
 800fc34:	2900      	cmp	r1, #0
 800fc36:	d10e      	bne.n	800fc56 <__ssvfscanf_r+0x1166>
 800fc38:	21e0      	movs	r1, #224	; 0xe0
 800fc3a:	0030      	movs	r0, r6
 800fc3c:	00c9      	lsls	r1, r1, #3
 800fc3e:	4008      	ands	r0, r1
 800fc40:	4288      	cmp	r0, r1
 800fc42:	d108      	bne.n	800fc56 <__ssvfscanf_r+0x1166>
 800fc44:	4931      	ldr	r1, [pc, #196]	; (800fd0c <__ssvfscanf_r+0x121c>)
 800fc46:	400e      	ands	r6, r1
 800fc48:	2101      	movs	r1, #1
 800fc4a:	6239      	str	r1, [r7, #32]
 800fc4c:	e7c6      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fc4e:	6a39      	ldr	r1, [r7, #32]
 800fc50:	2902      	cmp	r1, #2
 800fc52:	d100      	bne.n	800fc56 <__ssvfscanf_r+0x1166>
 800fc54:	e089      	b.n	800fd6a <__ssvfscanf_r+0x127a>
 800fc56:	2c01      	cmp	r4, #1
 800fc58:	d001      	beq.n	800fc5e <__ssvfscanf_r+0x116e>
 800fc5a:	2c04      	cmp	r4, #4
 800fc5c:	d110      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fc5e:	3401      	adds	r4, #1
 800fc60:	b2e4      	uxtb	r4, r4
 800fc62:	e7bb      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fc64:	0531      	lsls	r1, r6, #20
 800fc66:	d508      	bpl.n	800fc7a <__ssvfscanf_r+0x118a>
 800fc68:	6a39      	ldr	r1, [r7, #32]
 800fc6a:	1909      	adds	r1, r1, r4
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d104      	bne.n	800fc7a <__ssvfscanf_r+0x118a>
 800fc70:	4824      	ldr	r0, [pc, #144]	; (800fd04 <__ssvfscanf_r+0x1214>)
 800fc72:	000c      	movs	r4, r1
 800fc74:	4006      	ands	r6, r0
 800fc76:	6239      	str	r1, [r7, #32]
 800fc78:	e7b0      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fc7a:	6a39      	ldr	r1, [r7, #32]
 800fc7c:	2901      	cmp	r1, #1
 800fc7e:	d076      	beq.n	800fd6e <__ssvfscanf_r+0x127e>
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <__ssvfscanf_r+0x119a>
 800fc86:	4b20      	ldr	r3, [pc, #128]	; (800fd08 <__ssvfscanf_r+0x1218>)
 800fc88:	401e      	ands	r6, r3
 800fc8a:	6a3b      	ldr	r3, [r7, #32]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d877      	bhi.n	800fd82 <__ssvfscanf_r+0x1292>
 800fc92:	238c      	movs	r3, #140	; 0x8c
 800fc94:	2248      	movs	r2, #72	; 0x48
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	189b      	adds	r3, r3, r2
 800fc9a:	19db      	adds	r3, r3, r7
 800fc9c:	429d      	cmp	r5, r3
 800fc9e:	d801      	bhi.n	800fca4 <__ssvfscanf_r+0x11b4>
 800fca0:	f7ff f823 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800fca4:	3d01      	subs	r5, #1
 800fca6:	7829      	ldrb	r1, [r5, #0]
 800fca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fcac:	f001 fe78 	bl	80119a0 <_sungetc_r>
 800fcb0:	e7ef      	b.n	800fc92 <__ssvfscanf_r+0x11a2>
 800fcb2:	2c00      	cmp	r4, #0
 800fcb4:	d10c      	bne.n	800fcd0 <__ssvfscanf_r+0x11e0>
 800fcb6:	69f9      	ldr	r1, [r7, #28]
 800fcb8:	2900      	cmp	r1, #0
 800fcba:	d1e4      	bne.n	800fc86 <__ssvfscanf_r+0x1196>
 800fcbc:	21e0      	movs	r1, #224	; 0xe0
 800fcbe:	0030      	movs	r0, r6
 800fcc0:	00c9      	lsls	r1, r1, #3
 800fcc2:	4008      	ands	r0, r1
 800fcc4:	4288      	cmp	r0, r1
 800fcc6:	d1e0      	bne.n	800fc8a <__ssvfscanf_r+0x119a>
 800fcc8:	4910      	ldr	r1, [pc, #64]	; (800fd0c <__ssvfscanf_r+0x121c>)
 800fcca:	3401      	adds	r4, #1
 800fccc:	400e      	ands	r6, r1
 800fcce:	e785      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fcd0:	20fd      	movs	r0, #253	; 0xfd
 800fcd2:	1ee1      	subs	r1, r4, #3
 800fcd4:	4201      	tst	r1, r0
 800fcd6:	d1d3      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fcd8:	e7c1      	b.n	800fc5e <__ssvfscanf_r+0x116e>
 800fcda:	0531      	lsls	r1, r6, #20
 800fcdc:	d503      	bpl.n	800fce6 <__ssvfscanf_r+0x11f6>
 800fcde:	6a39      	ldr	r1, [r7, #32]
 800fce0:	1909      	adds	r1, r1, r4
 800fce2:	2900      	cmp	r1, #0
 800fce4:	d0c4      	beq.n	800fc70 <__ssvfscanf_r+0x1180>
 800fce6:	2c02      	cmp	r4, #2
 800fce8:	d1ca      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fcea:	2403      	movs	r4, #3
 800fcec:	e776      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fcee:	2c06      	cmp	r4, #6
 800fcf0:	d1c6      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fcf2:	2407      	movs	r4, #7
 800fcf4:	e772      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fcf6:	2c07      	cmp	r4, #7
 800fcf8:	d1c2      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fcfa:	2408      	movs	r4, #8
 800fcfc:	e76e      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	08011549 	.word	0x08011549
 800fd04:	fffffe7f 	.word	0xfffffe7f
 800fd08:	fffffeff 	.word	0xfffffeff
 800fd0c:	fffff87f 	.word	0xfffff87f
 800fd10:	0531      	lsls	r1, r6, #20
 800fd12:	d5b5      	bpl.n	800fc80 <__ssvfscanf_r+0x1190>
 800fd14:	21a0      	movs	r1, #160	; 0xa0
 800fd16:	2080      	movs	r0, #128	; 0x80
 800fd18:	00c9      	lsls	r1, r1, #3
 800fd1a:	00c0      	lsls	r0, r0, #3
 800fd1c:	4031      	ands	r1, r6
 800fd1e:	4281      	cmp	r1, r0
 800fd20:	d004      	beq.n	800fd2c <__ssvfscanf_r+0x123c>
 800fd22:	4206      	tst	r6, r0
 800fd24:	d0ac      	beq.n	800fc80 <__ssvfscanf_r+0x1190>
 800fd26:	69f9      	ldr	r1, [r7, #28]
 800fd28:	2900      	cmp	r1, #0
 800fd2a:	d0ae      	beq.n	800fc8a <__ssvfscanf_r+0x119a>
 800fd2c:	2180      	movs	r1, #128	; 0x80
 800fd2e:	0089      	lsls	r1, r1, #2
 800fd30:	420e      	tst	r6, r1
 800fd32:	d104      	bne.n	800fd3e <__ssvfscanf_r+0x124e>
 800fd34:	69f9      	ldr	r1, [r7, #28]
 800fd36:	6938      	ldr	r0, [r7, #16]
 800fd38:	607d      	str	r5, [r7, #4]
 800fd3a:	1a09      	subs	r1, r1, r0
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	20c0      	movs	r0, #192	; 0xc0
 800fd40:	4973      	ldr	r1, [pc, #460]	; (800ff10 <__ssvfscanf_r+0x1420>)
 800fd42:	0040      	lsls	r0, r0, #1
 800fd44:	400e      	ands	r6, r1
 800fd46:	4306      	orrs	r6, r0
 800fd48:	e768      	b.n	800fc1c <__ssvfscanf_r+0x112c>
 800fd4a:	0531      	lsls	r1, r6, #20
 800fd4c:	d5e2      	bpl.n	800fd14 <__ssvfscanf_r+0x1224>
 800fd4e:	e74a      	b.n	800fbe6 <__ssvfscanf_r+0x10f6>
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	7809      	ldrb	r1, [r1, #0]
 800fd54:	4291      	cmp	r1, r2
 800fd56:	d193      	bne.n	800fc80 <__ssvfscanf_r+0x1190>
 800fd58:	2180      	movs	r1, #128	; 0x80
 800fd5a:	0089      	lsls	r1, r1, #2
 800fd5c:	420e      	tst	r6, r1
 800fd5e:	d08f      	beq.n	800fc80 <__ssvfscanf_r+0x1190>
 800fd60:	496c      	ldr	r1, [pc, #432]	; (800ff14 <__ssvfscanf_r+0x1424>)
 800fd62:	400e      	ands	r6, r1
 800fd64:	69f9      	ldr	r1, [r7, #28]
 800fd66:	6139      	str	r1, [r7, #16]
 800fd68:	e738      	b.n	800fbdc <__ssvfscanf_r+0x10ec>
 800fd6a:	2103      	movs	r1, #3
 800fd6c:	e76d      	b.n	800fc4a <__ssvfscanf_r+0x115a>
 800fd6e:	2102      	movs	r1, #2
 800fd70:	e76b      	b.n	800fc4a <__ssvfscanf_r+0x115a>
 800fd72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd76:	f001 fe4f 	bl	8011a18 <__ssrefill_r>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	d100      	bne.n	800fd80 <__ssvfscanf_r+0x1290>
 800fd7e:	e723      	b.n	800fbc8 <__ssvfscanf_r+0x10d8>
 800fd80:	e77e      	b.n	800fc80 <__ssvfscanf_r+0x1190>
 800fd82:	1e63      	subs	r3, r4, #1
 800fd84:	2b06      	cmp	r3, #6
 800fd86:	d825      	bhi.n	800fdd4 <__ssvfscanf_r+0x12e4>
 800fd88:	2c02      	cmp	r4, #2
 800fd8a:	d837      	bhi.n	800fdfc <__ssvfscanf_r+0x130c>
 800fd8c:	238c      	movs	r3, #140	; 0x8c
 800fd8e:	2248      	movs	r2, #72	; 0x48
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	189b      	adds	r3, r3, r2
 800fd94:	19db      	adds	r3, r3, r7
 800fd96:	429d      	cmp	r5, r3
 800fd98:	d801      	bhi.n	800fd9e <__ssvfscanf_r+0x12ae>
 800fd9a:	f7fe ffa6 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800fd9e:	3d01      	subs	r5, #1
 800fda0:	7829      	ldrb	r1, [r5, #0]
 800fda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fda4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fda6:	f001 fdfb 	bl	80119a0 <_sungetc_r>
 800fdaa:	e7ef      	b.n	800fd8c <__ssvfscanf_r+0x129c>
 800fdac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	7819      	ldrb	r1, [r3, #0]
 800fdb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdb8:	f001 fdf2 	bl	80119a0 <_sungetc_r>
 800fdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdbe:	6a3a      	ldr	r2, [r7, #32]
 800fdc0:	189b      	adds	r3, r3, r2
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b03      	cmp	r3, #3
 800fdc6:	d8f1      	bhi.n	800fdac <__ssvfscanf_r+0x12bc>
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	3c03      	subs	r4, #3
 800fdcc:	b2e4      	uxtb	r4, r4
 800fdce:	1b1b      	subs	r3, r3, r4
 800fdd0:	1b2d      	subs	r5, r5, r4
 800fdd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdd4:	05f3      	lsls	r3, r6, #23
 800fdd6:	d52f      	bpl.n	800fe38 <__ssvfscanf_r+0x1348>
 800fdd8:	0573      	lsls	r3, r6, #21
 800fdda:	d514      	bpl.n	800fe06 <__ssvfscanf_r+0x1316>
 800fddc:	238c      	movs	r3, #140	; 0x8c
 800fdde:	2248      	movs	r2, #72	; 0x48
 800fde0:	005b      	lsls	r3, r3, #1
 800fde2:	189b      	adds	r3, r3, r2
 800fde4:	19db      	adds	r3, r3, r7
 800fde6:	429d      	cmp	r5, r3
 800fde8:	d801      	bhi.n	800fdee <__ssvfscanf_r+0x12fe>
 800fdea:	f7fe ff7e 	bl	800ecea <__ssvfscanf_r+0x1fa>
 800fdee:	3d01      	subs	r5, #1
 800fdf0:	7829      	ldrb	r1, [r5, #0]
 800fdf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdf6:	f001 fdd3 	bl	80119a0 <_sungetc_r>
 800fdfa:	e7ef      	b.n	800fddc <__ssvfscanf_r+0x12ec>
 800fdfc:	1b63      	subs	r3, r4, r5
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fe02:	623b      	str	r3, [r7, #32]
 800fe04:	e7da      	b.n	800fdbc <__ssvfscanf_r+0x12cc>
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	1e6c      	subs	r4, r5, #1
 800fe0a:	7821      	ldrb	r1, [r4, #0]
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe10:	2965      	cmp	r1, #101	; 0x65
 800fe12:	d00a      	beq.n	800fe2a <__ssvfscanf_r+0x133a>
 800fe14:	2945      	cmp	r1, #69	; 0x45
 800fe16:	d008      	beq.n	800fe2a <__ssvfscanf_r+0x133a>
 800fe18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe1c:	f001 fdc0 	bl	80119a0 <_sungetc_r>
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	1eac      	subs	r4, r5, #2
 800fe24:	3b02      	subs	r3, #2
 800fe26:	7821      	ldrb	r1, [r4, #0]
 800fe28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe2a:	0025      	movs	r5, r4
 800fe2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe30:	f001 fdb6 	bl	80119a0 <_sungetc_r>
 800fe34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe36:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe38:	2310      	movs	r3, #16
 800fe3a:	0032      	movs	r2, r6
 800fe3c:	401a      	ands	r2, r3
 800fe3e:	421e      	tst	r6, r3
 800fe40:	d001      	beq.n	800fe46 <__ssvfscanf_r+0x1356>
 800fe42:	f7fe fe71 	bl	800eb28 <__ssvfscanf_r+0x38>
 800fe46:	23c0      	movs	r3, #192	; 0xc0
 800fe48:	2180      	movs	r1, #128	; 0x80
 800fe4a:	00db      	lsls	r3, r3, #3
 800fe4c:	702a      	strb	r2, [r5, #0]
 800fe4e:	4033      	ands	r3, r6
 800fe50:	00c9      	lsls	r1, r1, #3
 800fe52:	428b      	cmp	r3, r1
 800fe54:	d11f      	bne.n	800fe96 <__ssvfscanf_r+0x13a6>
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	69fa      	ldr	r2, [r7, #28]
 800fe5a:	69f9      	ldr	r1, [r7, #28]
 800fe5c:	1a9a      	subs	r2, r3, r2
 800fe5e:	428b      	cmp	r3, r1
 800fe60:	d125      	bne.n	800feae <__ssvfscanf_r+0x13be>
 800fe62:	238c      	movs	r3, #140	; 0x8c
 800fe64:	2148      	movs	r1, #72	; 0x48
 800fe66:	005b      	lsls	r3, r3, #1
 800fe68:	185b      	adds	r3, r3, r1
 800fe6a:	19d9      	adds	r1, r3, r7
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe70:	f7fb ffca 	bl	800be08 <_strtod_r>
 800fe74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe76:	0004      	movs	r4, r0
 800fe78:	3304      	adds	r3, #4
 800fe7a:	000d      	movs	r5, r1
 800fe7c:	623b      	str	r3, [r7, #32]
 800fe7e:	07f3      	lsls	r3, r6, #31
 800fe80:	d523      	bpl.n	800feca <__ssvfscanf_r+0x13da>
 800fe82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	601c      	str	r4, [r3, #0]
 800fe88:	605d      	str	r5, [r3, #4]
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe90:	6a3b      	ldr	r3, [r7, #32]
 800fe92:	f7fe ffa5 	bl	800ede0 <__ssvfscanf_r+0x2f0>
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d0e2      	beq.n	800fe62 <__ssvfscanf_r+0x1372>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fea0:	1c59      	adds	r1, r3, #1
 800fea2:	230a      	movs	r3, #10
 800fea4:	f7fc f84c 	bl	800bf40 <_strtol_r>
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	687d      	ldr	r5, [r7, #4]
 800feac:	1ac2      	subs	r2, r0, r3
 800feae:	2148      	movs	r1, #72	; 0x48
 800feb0:	4b19      	ldr	r3, [pc, #100]	; (800ff18 <__ssvfscanf_r+0x1428>)
 800feb2:	185b      	adds	r3, r3, r1
 800feb4:	19db      	adds	r3, r3, r7
 800feb6:	429d      	cmp	r5, r3
 800feb8:	d302      	bcc.n	800fec0 <__ssvfscanf_r+0x13d0>
 800feba:	4b18      	ldr	r3, [pc, #96]	; (800ff1c <__ssvfscanf_r+0x142c>)
 800febc:	185b      	adds	r3, r3, r1
 800febe:	19dd      	adds	r5, r3, r7
 800fec0:	0028      	movs	r0, r5
 800fec2:	4917      	ldr	r1, [pc, #92]	; (800ff20 <__ssvfscanf_r+0x1430>)
 800fec4:	f7fc f944 	bl	800c150 <sprintf>
 800fec8:	e7cb      	b.n	800fe62 <__ssvfscanf_r+0x1372>
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fed0:	07b6      	lsls	r6, r6, #30
 800fed2:	d4d8      	bmi.n	800fe86 <__ssvfscanf_r+0x1396>
 800fed4:	0002      	movs	r2, r0
 800fed6:	000b      	movs	r3, r1
 800fed8:	f7f2 fa0c 	bl	80022f4 <__aeabi_dcmpun>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d005      	beq.n	800feec <__ssvfscanf_r+0x13fc>
 800fee0:	4810      	ldr	r0, [pc, #64]	; (800ff24 <__ssvfscanf_r+0x1434>)
 800fee2:	f7fc fabf 	bl	800c464 <nanf>
 800fee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee8:	6018      	str	r0, [r3, #0]
 800feea:	e7ce      	b.n	800fe8a <__ssvfscanf_r+0x139a>
 800feec:	0020      	movs	r0, r4
 800feee:	0029      	movs	r1, r5
 800fef0:	f7f2 faaa 	bl	8002448 <__aeabi_d2f>
 800fef4:	e7f7      	b.n	800fee6 <__ssvfscanf_r+0x13f6>
 800fef6:	00a3      	lsls	r3, r4, #2
 800fef8:	18ed      	adds	r5, r5, r3
 800fefa:	682b      	ldr	r3, [r5, #0]
 800fefc:	3401      	adds	r4, #1
 800fefe:	6818      	ldr	r0, [r3, #0]
 800ff00:	f7fa ff32 	bl	800ad68 <free>
 800ff04:	2200      	movs	r2, #0
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	601a      	str	r2, [r3, #0]
 800ff0a:	f7fe ffc3 	bl	800ee94 <__ssvfscanf_r+0x3a4>
 800ff0e:	46c0      	nop			; (mov r8, r8)
 800ff10:	fffff07f 	.word	0xfffff07f
 800ff14:	fffffd7f 	.word	0xfffffd7f
 800ff18:	0000026b 	.word	0x0000026b
 800ff1c:	0000026a 	.word	0x0000026a
 800ff20:	08014b00 	.word	0x08014b00
 800ff24:	08014b63 	.word	0x08014b63

0800ff28 <_fclose_r>:
 800ff28:	b570      	push	{r4, r5, r6, lr}
 800ff2a:	0005      	movs	r5, r0
 800ff2c:	1e0c      	subs	r4, r1, #0
 800ff2e:	d102      	bne.n	800ff36 <_fclose_r+0xe>
 800ff30:	2600      	movs	r6, #0
 800ff32:	0030      	movs	r0, r6
 800ff34:	bd70      	pop	{r4, r5, r6, pc}
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d004      	beq.n	800ff44 <_fclose_r+0x1c>
 800ff3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <_fclose_r+0x1c>
 800ff40:	f7fc f89e 	bl	800c080 <__sinit>
 800ff44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff46:	07db      	lsls	r3, r3, #31
 800ff48:	d405      	bmi.n	800ff56 <_fclose_r+0x2e>
 800ff4a:	89a3      	ldrh	r3, [r4, #12]
 800ff4c:	059b      	lsls	r3, r3, #22
 800ff4e:	d402      	bmi.n	800ff56 <_fclose_r+0x2e>
 800ff50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff52:	f7fc fa6b 	bl	800c42c <__retarget_lock_acquire_recursive>
 800ff56:	220c      	movs	r2, #12
 800ff58:	5ea3      	ldrsh	r3, [r4, r2]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <_fclose_r+0x4a>
 800ff5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff60:	3301      	adds	r3, #1
 800ff62:	0016      	movs	r6, r2
 800ff64:	401e      	ands	r6, r3
 800ff66:	421a      	tst	r2, r3
 800ff68:	d1e2      	bne.n	800ff30 <_fclose_r+0x8>
 800ff6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6c:	f7fc fa5f 	bl	800c42e <__retarget_lock_release_recursive>
 800ff70:	e7df      	b.n	800ff32 <_fclose_r+0xa>
 800ff72:	0021      	movs	r1, r4
 800ff74:	0028      	movs	r0, r5
 800ff76:	f000 f837 	bl	800ffe8 <__sflush_r>
 800ff7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff7c:	0006      	movs	r6, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <_fclose_r+0x68>
 800ff82:	0028      	movs	r0, r5
 800ff84:	69e1      	ldr	r1, [r4, #28]
 800ff86:	4798      	blx	r3
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	da01      	bge.n	800ff90 <_fclose_r+0x68>
 800ff8c:	2601      	movs	r6, #1
 800ff8e:	4276      	negs	r6, r6
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	061b      	lsls	r3, r3, #24
 800ff94:	d503      	bpl.n	800ff9e <_fclose_r+0x76>
 800ff96:	0028      	movs	r0, r5
 800ff98:	6921      	ldr	r1, [r4, #16]
 800ff9a:	f7fc facf 	bl	800c53c <_free_r>
 800ff9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ffa0:	2900      	cmp	r1, #0
 800ffa2:	d008      	beq.n	800ffb6 <_fclose_r+0x8e>
 800ffa4:	0023      	movs	r3, r4
 800ffa6:	3340      	adds	r3, #64	; 0x40
 800ffa8:	4299      	cmp	r1, r3
 800ffaa:	d002      	beq.n	800ffb2 <_fclose_r+0x8a>
 800ffac:	0028      	movs	r0, r5
 800ffae:	f7fc fac5 	bl	800c53c <_free_r>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	6323      	str	r3, [r4, #48]	; 0x30
 800ffb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ffb8:	2900      	cmp	r1, #0
 800ffba:	d004      	beq.n	800ffc6 <_fclose_r+0x9e>
 800ffbc:	0028      	movs	r0, r5
 800ffbe:	f7fc fabd 	bl	800c53c <_free_r>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6463      	str	r3, [r4, #68]	; 0x44
 800ffc6:	f7fc f84b 	bl	800c060 <__sfp_lock_acquire>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	81a3      	strh	r3, [r4, #12]
 800ffce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffd0:	07db      	lsls	r3, r3, #31
 800ffd2:	d402      	bmi.n	800ffda <_fclose_r+0xb2>
 800ffd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffd6:	f7fc fa2a 	bl	800c42e <__retarget_lock_release_recursive>
 800ffda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffdc:	f7fc fa25 	bl	800c42a <__retarget_lock_close_recursive>
 800ffe0:	f7fc f846 	bl	800c070 <__sfp_lock_release>
 800ffe4:	e7a5      	b.n	800ff32 <_fclose_r+0xa>
	...

0800ffe8 <__sflush_r>:
 800ffe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffea:	230c      	movs	r3, #12
 800ffec:	5eca      	ldrsh	r2, [r1, r3]
 800ffee:	000c      	movs	r4, r1
 800fff0:	0005      	movs	r5, r0
 800fff2:	b291      	uxth	r1, r2
 800fff4:	0713      	lsls	r3, r2, #28
 800fff6:	d464      	bmi.n	80100c2 <__sflush_r+0xda>
 800fff8:	2380      	movs	r3, #128	; 0x80
 800fffa:	011b      	lsls	r3, r3, #4
 800fffc:	4313      	orrs	r3, r2
 800fffe:	6862      	ldr	r2, [r4, #4]
 8010000:	81a3      	strh	r3, [r4, #12]
 8010002:	2a00      	cmp	r2, #0
 8010004:	dc04      	bgt.n	8010010 <__sflush_r+0x28>
 8010006:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010008:	2a00      	cmp	r2, #0
 801000a:	dc01      	bgt.n	8010010 <__sflush_r+0x28>
 801000c:	2000      	movs	r0, #0
 801000e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010010:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010012:	2f00      	cmp	r7, #0
 8010014:	d0fa      	beq.n	801000c <__sflush_r+0x24>
 8010016:	2200      	movs	r2, #0
 8010018:	2080      	movs	r0, #128	; 0x80
 801001a:	682e      	ldr	r6, [r5, #0]
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	001a      	movs	r2, r3
 8010020:	0140      	lsls	r0, r0, #5
 8010022:	69e1      	ldr	r1, [r4, #28]
 8010024:	4002      	ands	r2, r0
 8010026:	4203      	tst	r3, r0
 8010028:	d038      	beq.n	801009c <__sflush_r+0xb4>
 801002a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	075b      	lsls	r3, r3, #29
 8010030:	d506      	bpl.n	8010040 <__sflush_r+0x58>
 8010032:	6863      	ldr	r3, [r4, #4]
 8010034:	1ac0      	subs	r0, r0, r3
 8010036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010038:	2b00      	cmp	r3, #0
 801003a:	d001      	beq.n	8010040 <__sflush_r+0x58>
 801003c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801003e:	1ac0      	subs	r0, r0, r3
 8010040:	0002      	movs	r2, r0
 8010042:	2300      	movs	r3, #0
 8010044:	0028      	movs	r0, r5
 8010046:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010048:	69e1      	ldr	r1, [r4, #28]
 801004a:	47b8      	blx	r7
 801004c:	89a2      	ldrh	r2, [r4, #12]
 801004e:	1c43      	adds	r3, r0, #1
 8010050:	d106      	bne.n	8010060 <__sflush_r+0x78>
 8010052:	6829      	ldr	r1, [r5, #0]
 8010054:	291d      	cmp	r1, #29
 8010056:	d830      	bhi.n	80100ba <__sflush_r+0xd2>
 8010058:	4b2c      	ldr	r3, [pc, #176]	; (801010c <__sflush_r+0x124>)
 801005a:	410b      	asrs	r3, r1
 801005c:	07db      	lsls	r3, r3, #31
 801005e:	d42c      	bmi.n	80100ba <__sflush_r+0xd2>
 8010060:	4b2b      	ldr	r3, [pc, #172]	; (8010110 <__sflush_r+0x128>)
 8010062:	4013      	ands	r3, r2
 8010064:	2200      	movs	r2, #0
 8010066:	6062      	str	r2, [r4, #4]
 8010068:	6922      	ldr	r2, [r4, #16]
 801006a:	b21b      	sxth	r3, r3
 801006c:	81a3      	strh	r3, [r4, #12]
 801006e:	6022      	str	r2, [r4, #0]
 8010070:	04db      	lsls	r3, r3, #19
 8010072:	d505      	bpl.n	8010080 <__sflush_r+0x98>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <__sflush_r+0x96>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d100      	bne.n	8010080 <__sflush_r+0x98>
 801007e:	6520      	str	r0, [r4, #80]	; 0x50
 8010080:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010082:	602e      	str	r6, [r5, #0]
 8010084:	2900      	cmp	r1, #0
 8010086:	d0c1      	beq.n	801000c <__sflush_r+0x24>
 8010088:	0023      	movs	r3, r4
 801008a:	3340      	adds	r3, #64	; 0x40
 801008c:	4299      	cmp	r1, r3
 801008e:	d002      	beq.n	8010096 <__sflush_r+0xae>
 8010090:	0028      	movs	r0, r5
 8010092:	f7fc fa53 	bl	800c53c <_free_r>
 8010096:	2000      	movs	r0, #0
 8010098:	6320      	str	r0, [r4, #48]	; 0x30
 801009a:	e7b8      	b.n	801000e <__sflush_r+0x26>
 801009c:	2301      	movs	r3, #1
 801009e:	0028      	movs	r0, r5
 80100a0:	47b8      	blx	r7
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d1c2      	bne.n	801002c <__sflush_r+0x44>
 80100a6:	682b      	ldr	r3, [r5, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d0bf      	beq.n	801002c <__sflush_r+0x44>
 80100ac:	2b1d      	cmp	r3, #29
 80100ae:	d001      	beq.n	80100b4 <__sflush_r+0xcc>
 80100b0:	2b16      	cmp	r3, #22
 80100b2:	d101      	bne.n	80100b8 <__sflush_r+0xd0>
 80100b4:	602e      	str	r6, [r5, #0]
 80100b6:	e7a9      	b.n	801000c <__sflush_r+0x24>
 80100b8:	89a2      	ldrh	r2, [r4, #12]
 80100ba:	2340      	movs	r3, #64	; 0x40
 80100bc:	4313      	orrs	r3, r2
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	e7a5      	b.n	801000e <__sflush_r+0x26>
 80100c2:	6926      	ldr	r6, [r4, #16]
 80100c4:	2e00      	cmp	r6, #0
 80100c6:	d0a1      	beq.n	801000c <__sflush_r+0x24>
 80100c8:	6827      	ldr	r7, [r4, #0]
 80100ca:	6026      	str	r6, [r4, #0]
 80100cc:	1bbb      	subs	r3, r7, r6
 80100ce:	9301      	str	r3, [sp, #4]
 80100d0:	2300      	movs	r3, #0
 80100d2:	0789      	lsls	r1, r1, #30
 80100d4:	d100      	bne.n	80100d8 <__sflush_r+0xf0>
 80100d6:	6963      	ldr	r3, [r4, #20]
 80100d8:	60a3      	str	r3, [r4, #8]
 80100da:	9b01      	ldr	r3, [sp, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dc00      	bgt.n	80100e2 <__sflush_r+0xfa>
 80100e0:	e794      	b.n	801000c <__sflush_r+0x24>
 80100e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100e4:	0032      	movs	r2, r6
 80100e6:	001f      	movs	r7, r3
 80100e8:	0028      	movs	r0, r5
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	69e1      	ldr	r1, [r4, #28]
 80100ee:	47b8      	blx	r7
 80100f0:	2800      	cmp	r0, #0
 80100f2:	dc06      	bgt.n	8010102 <__sflush_r+0x11a>
 80100f4:	2340      	movs	r3, #64	; 0x40
 80100f6:	2001      	movs	r0, #1
 80100f8:	89a2      	ldrh	r2, [r4, #12]
 80100fa:	4240      	negs	r0, r0
 80100fc:	4313      	orrs	r3, r2
 80100fe:	81a3      	strh	r3, [r4, #12]
 8010100:	e785      	b.n	801000e <__sflush_r+0x26>
 8010102:	9b01      	ldr	r3, [sp, #4]
 8010104:	1836      	adds	r6, r6, r0
 8010106:	1a1b      	subs	r3, r3, r0
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	e7e6      	b.n	80100da <__sflush_r+0xf2>
 801010c:	dfbffffe 	.word	0xdfbffffe
 8010110:	fffff7ff 	.word	0xfffff7ff

08010114 <_fflush_r>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	0005      	movs	r5, r0
 8010118:	000c      	movs	r4, r1
 801011a:	2800      	cmp	r0, #0
 801011c:	d004      	beq.n	8010128 <_fflush_r+0x14>
 801011e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010120:	2b00      	cmp	r3, #0
 8010122:	d101      	bne.n	8010128 <_fflush_r+0x14>
 8010124:	f7fb ffac 	bl	800c080 <__sinit>
 8010128:	220c      	movs	r2, #12
 801012a:	5ea3      	ldrsh	r3, [r4, r2]
 801012c:	1e1e      	subs	r6, r3, #0
 801012e:	d015      	beq.n	801015c <_fflush_r+0x48>
 8010130:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010132:	07d2      	lsls	r2, r2, #31
 8010134:	d404      	bmi.n	8010140 <_fflush_r+0x2c>
 8010136:	059b      	lsls	r3, r3, #22
 8010138:	d402      	bmi.n	8010140 <_fflush_r+0x2c>
 801013a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801013c:	f7fc f976 	bl	800c42c <__retarget_lock_acquire_recursive>
 8010140:	0021      	movs	r1, r4
 8010142:	0028      	movs	r0, r5
 8010144:	f7ff ff50 	bl	800ffe8 <__sflush_r>
 8010148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801014a:	0006      	movs	r6, r0
 801014c:	07db      	lsls	r3, r3, #31
 801014e:	d405      	bmi.n	801015c <_fflush_r+0x48>
 8010150:	89a3      	ldrh	r3, [r4, #12]
 8010152:	059b      	lsls	r3, r3, #22
 8010154:	d402      	bmi.n	801015c <_fflush_r+0x48>
 8010156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010158:	f7fc f969 	bl	800c42e <__retarget_lock_release_recursive>
 801015c:	0030      	movs	r0, r6
 801015e:	bd70      	pop	{r4, r5, r6, pc}

08010160 <__sccl>:
 8010160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010162:	780b      	ldrb	r3, [r1, #0]
 8010164:	0004      	movs	r4, r0
 8010166:	2b5e      	cmp	r3, #94	; 0x5e
 8010168:	d019      	beq.n	801019e <__sccl+0x3e>
 801016a:	2200      	movs	r2, #0
 801016c:	1c4d      	adds	r5, r1, #1
 801016e:	0021      	movs	r1, r4
 8010170:	1c60      	adds	r0, r4, #1
 8010172:	30ff      	adds	r0, #255	; 0xff
 8010174:	700a      	strb	r2, [r1, #0]
 8010176:	3101      	adds	r1, #1
 8010178:	4281      	cmp	r1, r0
 801017a:	d1fb      	bne.n	8010174 <__sccl+0x14>
 801017c:	1e68      	subs	r0, r5, #1
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00c      	beq.n	801019c <__sccl+0x3c>
 8010182:	2101      	movs	r1, #1
 8010184:	262d      	movs	r6, #45	; 0x2d
 8010186:	404a      	eors	r2, r1
 8010188:	0028      	movs	r0, r5
 801018a:	54e2      	strb	r2, [r4, r3]
 801018c:	7801      	ldrb	r1, [r0, #0]
 801018e:	1c45      	adds	r5, r0, #1
 8010190:	292d      	cmp	r1, #45	; 0x2d
 8010192:	d00c      	beq.n	80101ae <__sccl+0x4e>
 8010194:	295d      	cmp	r1, #93	; 0x5d
 8010196:	d01d      	beq.n	80101d4 <__sccl+0x74>
 8010198:	2900      	cmp	r1, #0
 801019a:	d104      	bne.n	80101a6 <__sccl+0x46>
 801019c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019e:	2201      	movs	r2, #1
 80101a0:	784b      	ldrb	r3, [r1, #1]
 80101a2:	1c8d      	adds	r5, r1, #2
 80101a4:	e7e3      	b.n	801016e <__sccl+0xe>
 80101a6:	000b      	movs	r3, r1
 80101a8:	e7ee      	b.n	8010188 <__sccl+0x28>
 80101aa:	0033      	movs	r3, r6
 80101ac:	e7ec      	b.n	8010188 <__sccl+0x28>
 80101ae:	7841      	ldrb	r1, [r0, #1]
 80101b0:	295d      	cmp	r1, #93	; 0x5d
 80101b2:	d0fa      	beq.n	80101aa <__sccl+0x4a>
 80101b4:	428b      	cmp	r3, r1
 80101b6:	dcf8      	bgt.n	80101aa <__sccl+0x4a>
 80101b8:	001d      	movs	r5, r3
 80101ba:	3002      	adds	r0, #2
 80101bc:	3501      	adds	r5, #1
 80101be:	5562      	strb	r2, [r4, r5]
 80101c0:	42a9      	cmp	r1, r5
 80101c2:	dcfb      	bgt.n	80101bc <__sccl+0x5c>
 80101c4:	2500      	movs	r5, #0
 80101c6:	1c5f      	adds	r7, r3, #1
 80101c8:	428b      	cmp	r3, r1
 80101ca:	da01      	bge.n	80101d0 <__sccl+0x70>
 80101cc:	1acd      	subs	r5, r1, r3
 80101ce:	3d01      	subs	r5, #1
 80101d0:	197b      	adds	r3, r7, r5
 80101d2:	e7db      	b.n	801018c <__sccl+0x2c>
 80101d4:	0028      	movs	r0, r5
 80101d6:	e7e1      	b.n	801019c <__sccl+0x3c>

080101d8 <_localeconv_r>:
 80101d8:	4800      	ldr	r0, [pc, #0]	; (80101dc <_localeconv_r+0x4>)
 80101da:	4770      	bx	lr
 80101dc:	20000538 	.word	0x20000538

080101e0 <__libc_fini_array>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	4c07      	ldr	r4, [pc, #28]	; (8010200 <__libc_fini_array+0x20>)
 80101e4:	4d07      	ldr	r5, [pc, #28]	; (8010204 <__libc_fini_array+0x24>)
 80101e6:	1b64      	subs	r4, r4, r5
 80101e8:	10a4      	asrs	r4, r4, #2
 80101ea:	2c00      	cmp	r4, #0
 80101ec:	d102      	bne.n	80101f4 <__libc_fini_array+0x14>
 80101ee:	f002 fdcd 	bl	8012d8c <_fini>
 80101f2:	bd70      	pop	{r4, r5, r6, pc}
 80101f4:	3c01      	subs	r4, #1
 80101f6:	00a3      	lsls	r3, r4, #2
 80101f8:	58eb      	ldr	r3, [r5, r3]
 80101fa:	4798      	blx	r3
 80101fc:	e7f5      	b.n	80101ea <__libc_fini_array+0xa>
 80101fe:	46c0      	nop			; (mov r8, r8)
 8010200:	08014c00 	.word	0x08014c00
 8010204:	08014bfc 	.word	0x08014bfc

08010208 <memchr>:
 8010208:	b2c9      	uxtb	r1, r1
 801020a:	1882      	adds	r2, r0, r2
 801020c:	4290      	cmp	r0, r2
 801020e:	d101      	bne.n	8010214 <memchr+0xc>
 8010210:	2000      	movs	r0, #0
 8010212:	4770      	bx	lr
 8010214:	7803      	ldrb	r3, [r0, #0]
 8010216:	428b      	cmp	r3, r1
 8010218:	d0fb      	beq.n	8010212 <memchr+0xa>
 801021a:	3001      	adds	r0, #1
 801021c:	e7f6      	b.n	801020c <memchr+0x4>
	...

08010220 <frexp>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	0014      	movs	r4, r2
 8010224:	2500      	movs	r5, #0
 8010226:	6025      	str	r5, [r4, #0]
 8010228:	4d10      	ldr	r5, [pc, #64]	; (801026c <frexp+0x4c>)
 801022a:	004b      	lsls	r3, r1, #1
 801022c:	000a      	movs	r2, r1
 801022e:	085b      	lsrs	r3, r3, #1
 8010230:	42ab      	cmp	r3, r5
 8010232:	dc1a      	bgt.n	801026a <frexp+0x4a>
 8010234:	001d      	movs	r5, r3
 8010236:	4305      	orrs	r5, r0
 8010238:	d017      	beq.n	801026a <frexp+0x4a>
 801023a:	4d0d      	ldr	r5, [pc, #52]	; (8010270 <frexp+0x50>)
 801023c:	4229      	tst	r1, r5
 801023e:	d109      	bne.n	8010254 <frexp+0x34>
 8010240:	2200      	movs	r2, #0
 8010242:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <frexp+0x54>)
 8010244:	f7f1 fa12 	bl	800166c <__aeabi_dmul>
 8010248:	2536      	movs	r5, #54	; 0x36
 801024a:	000a      	movs	r2, r1
 801024c:	004b      	lsls	r3, r1, #1
 801024e:	426d      	negs	r5, r5
 8010250:	085b      	lsrs	r3, r3, #1
 8010252:	6025      	str	r5, [r4, #0]
 8010254:	4d08      	ldr	r5, [pc, #32]	; (8010278 <frexp+0x58>)
 8010256:	151b      	asrs	r3, r3, #20
 8010258:	195b      	adds	r3, r3, r5
 801025a:	6825      	ldr	r5, [r4, #0]
 801025c:	18eb      	adds	r3, r5, r3
 801025e:	6023      	str	r3, [r4, #0]
 8010260:	4b06      	ldr	r3, [pc, #24]	; (801027c <frexp+0x5c>)
 8010262:	401a      	ands	r2, r3
 8010264:	4b06      	ldr	r3, [pc, #24]	; (8010280 <frexp+0x60>)
 8010266:	4313      	orrs	r3, r2
 8010268:	0019      	movs	r1, r3
 801026a:	bd70      	pop	{r4, r5, r6, pc}
 801026c:	7fefffff 	.word	0x7fefffff
 8010270:	7ff00000 	.word	0x7ff00000
 8010274:	43500000 	.word	0x43500000
 8010278:	fffffc02 	.word	0xfffffc02
 801027c:	800fffff 	.word	0x800fffff
 8010280:	3fe00000 	.word	0x3fe00000

08010284 <__register_exitproc>:
 8010284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010286:	4f1c      	ldr	r7, [pc, #112]	; (80102f8 <__register_exitproc+0x74>)
 8010288:	0004      	movs	r4, r0
 801028a:	6838      	ldr	r0, [r7, #0]
 801028c:	0016      	movs	r6, r2
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	9100      	str	r1, [sp, #0]
 8010292:	f7fc f8cb 	bl	800c42c <__retarget_lock_acquire_recursive>
 8010296:	4a19      	ldr	r2, [pc, #100]	; (80102fc <__register_exitproc+0x78>)
 8010298:	6813      	ldr	r3, [r2, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d101      	bne.n	80102a2 <__register_exitproc+0x1e>
 801029e:	4b18      	ldr	r3, [pc, #96]	; (8010300 <__register_exitproc+0x7c>)
 80102a0:	6013      	str	r3, [r2, #0]
 80102a2:	685a      	ldr	r2, [r3, #4]
 80102a4:	6838      	ldr	r0, [r7, #0]
 80102a6:	2a1f      	cmp	r2, #31
 80102a8:	dd04      	ble.n	80102b4 <__register_exitproc+0x30>
 80102aa:	f7fc f8c0 	bl	800c42e <__retarget_lock_release_recursive>
 80102ae:	2001      	movs	r0, #1
 80102b0:	4240      	negs	r0, r0
 80102b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80102b4:	2c00      	cmp	r4, #0
 80102b6:	d014      	beq.n	80102e2 <__register_exitproc+0x5e>
 80102b8:	0091      	lsls	r1, r2, #2
 80102ba:	1859      	adds	r1, r3, r1
 80102bc:	000f      	movs	r7, r1
 80102be:	3788      	adds	r7, #136	; 0x88
 80102c0:	603e      	str	r6, [r7, #0]
 80102c2:	2701      	movs	r7, #1
 80102c4:	001e      	movs	r6, r3
 80102c6:	4097      	lsls	r7, r2
 80102c8:	3685      	adds	r6, #133	; 0x85
 80102ca:	36ff      	adds	r6, #255	; 0xff
 80102cc:	6875      	ldr	r5, [r6, #4]
 80102ce:	31fc      	adds	r1, #252	; 0xfc
 80102d0:	433d      	orrs	r5, r7
 80102d2:	6075      	str	r5, [r6, #4]
 80102d4:	9d01      	ldr	r5, [sp, #4]
 80102d6:	60cd      	str	r5, [r1, #12]
 80102d8:	2c02      	cmp	r4, #2
 80102da:	d102      	bne.n	80102e2 <__register_exitproc+0x5e>
 80102dc:	68b1      	ldr	r1, [r6, #8]
 80102de:	4339      	orrs	r1, r7
 80102e0:	60b1      	str	r1, [r6, #8]
 80102e2:	1c51      	adds	r1, r2, #1
 80102e4:	6059      	str	r1, [r3, #4]
 80102e6:	3202      	adds	r2, #2
 80102e8:	9900      	ldr	r1, [sp, #0]
 80102ea:	0092      	lsls	r2, r2, #2
 80102ec:	50d1      	str	r1, [r2, r3]
 80102ee:	f7fc f89e 	bl	800c42e <__retarget_lock_release_recursive>
 80102f2:	2000      	movs	r0, #0
 80102f4:	e7dd      	b.n	80102b2 <__register_exitproc+0x2e>
 80102f6:	46c0      	nop			; (mov r8, r8)
 80102f8:	200006dc 	.word	0x200006dc
 80102fc:	20000d18 	.word	0x20000d18
 8010300:	20000d1c 	.word	0x20000d1c

08010304 <__assert_func>:
 8010304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010306:	0014      	movs	r4, r2
 8010308:	001a      	movs	r2, r3
 801030a:	4b09      	ldr	r3, [pc, #36]	; (8010330 <__assert_func+0x2c>)
 801030c:	0005      	movs	r5, r0
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	000e      	movs	r6, r1
 8010312:	68d8      	ldr	r0, [r3, #12]
 8010314:	4b07      	ldr	r3, [pc, #28]	; (8010334 <__assert_func+0x30>)
 8010316:	2c00      	cmp	r4, #0
 8010318:	d101      	bne.n	801031e <__assert_func+0x1a>
 801031a:	4b07      	ldr	r3, [pc, #28]	; (8010338 <__assert_func+0x34>)
 801031c:	001c      	movs	r4, r3
 801031e:	4907      	ldr	r1, [pc, #28]	; (801033c <__assert_func+0x38>)
 8010320:	9301      	str	r3, [sp, #4]
 8010322:	9402      	str	r4, [sp, #8]
 8010324:	002b      	movs	r3, r5
 8010326:	9600      	str	r6, [sp, #0]
 8010328:	f001 faa6 	bl	8011878 <fiprintf>
 801032c:	f002 fb8e 	bl	8012a4c <abort>
 8010330:	200006d8 	.word	0x200006d8
 8010334:	08014b28 	.word	0x08014b28
 8010338:	08014b63 	.word	0x08014b63
 801033c:	08014b35 	.word	0x08014b35

08010340 <_calloc_r>:
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	2400      	movs	r4, #0
 8010344:	0c0b      	lsrs	r3, r1, #16
 8010346:	0c16      	lsrs	r6, r2, #16
 8010348:	42a3      	cmp	r3, r4
 801034a:	d133      	bne.n	80103b4 <_calloc_r+0x74>
 801034c:	42a6      	cmp	r6, r4
 801034e:	d121      	bne.n	8010394 <_calloc_r+0x54>
 8010350:	b28b      	uxth	r3, r1
 8010352:	b291      	uxth	r1, r2
 8010354:	4359      	muls	r1, r3
 8010356:	f7fa fd11 	bl	800ad7c <_malloc_r>
 801035a:	1e05      	subs	r5, r0, #0
 801035c:	d033      	beq.n	80103c6 <_calloc_r+0x86>
 801035e:	0003      	movs	r3, r0
 8010360:	3b08      	subs	r3, #8
 8010362:	685a      	ldr	r2, [r3, #4]
 8010364:	2303      	movs	r3, #3
 8010366:	439a      	bics	r2, r3
 8010368:	3a04      	subs	r2, #4
 801036a:	2a24      	cmp	r2, #36	; 0x24
 801036c:	d832      	bhi.n	80103d4 <_calloc_r+0x94>
 801036e:	0003      	movs	r3, r0
 8010370:	2a13      	cmp	r2, #19
 8010372:	d90a      	bls.n	801038a <_calloc_r+0x4a>
 8010374:	6004      	str	r4, [r0, #0]
 8010376:	6044      	str	r4, [r0, #4]
 8010378:	3308      	adds	r3, #8
 801037a:	2a1b      	cmp	r2, #27
 801037c:	d905      	bls.n	801038a <_calloc_r+0x4a>
 801037e:	6084      	str	r4, [r0, #8]
 8010380:	60c4      	str	r4, [r0, #12]
 8010382:	2a24      	cmp	r2, #36	; 0x24
 8010384:	d021      	beq.n	80103ca <_calloc_r+0x8a>
 8010386:	0003      	movs	r3, r0
 8010388:	3310      	adds	r3, #16
 801038a:	2200      	movs	r2, #0
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	605a      	str	r2, [r3, #4]
 8010390:	609a      	str	r2, [r3, #8]
 8010392:	e018      	b.n	80103c6 <_calloc_r+0x86>
 8010394:	1c33      	adds	r3, r6, #0
 8010396:	1c0d      	adds	r5, r1, #0
 8010398:	b289      	uxth	r1, r1
 801039a:	b292      	uxth	r2, r2
 801039c:	434a      	muls	r2, r1
 801039e:	b2ad      	uxth	r5, r5
 80103a0:	b299      	uxth	r1, r3
 80103a2:	4369      	muls	r1, r5
 80103a4:	0c13      	lsrs	r3, r2, #16
 80103a6:	18c9      	adds	r1, r1, r3
 80103a8:	0c0b      	lsrs	r3, r1, #16
 80103aa:	d107      	bne.n	80103bc <_calloc_r+0x7c>
 80103ac:	0409      	lsls	r1, r1, #16
 80103ae:	b292      	uxth	r2, r2
 80103b0:	4311      	orrs	r1, r2
 80103b2:	e7d0      	b.n	8010356 <_calloc_r+0x16>
 80103b4:	2e00      	cmp	r6, #0
 80103b6:	d101      	bne.n	80103bc <_calloc_r+0x7c>
 80103b8:	1c15      	adds	r5, r2, #0
 80103ba:	e7ed      	b.n	8010398 <_calloc_r+0x58>
 80103bc:	f7fc f80a 	bl	800c3d4 <__errno>
 80103c0:	230c      	movs	r3, #12
 80103c2:	2500      	movs	r5, #0
 80103c4:	6003      	str	r3, [r0, #0]
 80103c6:	0028      	movs	r0, r5
 80103c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ca:	0003      	movs	r3, r0
 80103cc:	6104      	str	r4, [r0, #16]
 80103ce:	3318      	adds	r3, #24
 80103d0:	6144      	str	r4, [r0, #20]
 80103d2:	e7da      	b.n	801038a <_calloc_r+0x4a>
 80103d4:	2100      	movs	r1, #0
 80103d6:	f7fb ff51 	bl	800c27c <memset>
 80103da:	e7f4      	b.n	80103c6 <_calloc_r+0x86>

080103dc <quorem>:
 80103dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103de:	6902      	ldr	r2, [r0, #16]
 80103e0:	690b      	ldr	r3, [r1, #16]
 80103e2:	b089      	sub	sp, #36	; 0x24
 80103e4:	0007      	movs	r7, r0
 80103e6:	9104      	str	r1, [sp, #16]
 80103e8:	2000      	movs	r0, #0
 80103ea:	429a      	cmp	r2, r3
 80103ec:	db69      	blt.n	80104c2 <quorem+0xe6>
 80103ee:	3b01      	subs	r3, #1
 80103f0:	009c      	lsls	r4, r3, #2
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	000b      	movs	r3, r1
 80103f6:	3314      	adds	r3, #20
 80103f8:	9306      	str	r3, [sp, #24]
 80103fa:	191b      	adds	r3, r3, r4
 80103fc:	9305      	str	r3, [sp, #20]
 80103fe:	003b      	movs	r3, r7
 8010400:	3314      	adds	r3, #20
 8010402:	9303      	str	r3, [sp, #12]
 8010404:	191c      	adds	r4, r3, r4
 8010406:	9b05      	ldr	r3, [sp, #20]
 8010408:	6826      	ldr	r6, [r4, #0]
 801040a:	681d      	ldr	r5, [r3, #0]
 801040c:	0030      	movs	r0, r6
 801040e:	3501      	adds	r5, #1
 8010410:	0029      	movs	r1, r5
 8010412:	f7ef fe93 	bl	800013c <__udivsi3>
 8010416:	9002      	str	r0, [sp, #8]
 8010418:	42ae      	cmp	r6, r5
 801041a:	d329      	bcc.n	8010470 <quorem+0x94>
 801041c:	9b06      	ldr	r3, [sp, #24]
 801041e:	2600      	movs	r6, #0
 8010420:	469c      	mov	ip, r3
 8010422:	9d03      	ldr	r5, [sp, #12]
 8010424:	9606      	str	r6, [sp, #24]
 8010426:	4662      	mov	r2, ip
 8010428:	ca08      	ldmia	r2!, {r3}
 801042a:	6828      	ldr	r0, [r5, #0]
 801042c:	4694      	mov	ip, r2
 801042e:	9a02      	ldr	r2, [sp, #8]
 8010430:	b299      	uxth	r1, r3
 8010432:	4351      	muls	r1, r2
 8010434:	0c1b      	lsrs	r3, r3, #16
 8010436:	4353      	muls	r3, r2
 8010438:	1989      	adds	r1, r1, r6
 801043a:	0c0a      	lsrs	r2, r1, #16
 801043c:	189b      	adds	r3, r3, r2
 801043e:	9307      	str	r3, [sp, #28]
 8010440:	0c1e      	lsrs	r6, r3, #16
 8010442:	9b06      	ldr	r3, [sp, #24]
 8010444:	b282      	uxth	r2, r0
 8010446:	18d2      	adds	r2, r2, r3
 8010448:	466b      	mov	r3, sp
 801044a:	b289      	uxth	r1, r1
 801044c:	8b9b      	ldrh	r3, [r3, #28]
 801044e:	1a52      	subs	r2, r2, r1
 8010450:	0c01      	lsrs	r1, r0, #16
 8010452:	1ac9      	subs	r1, r1, r3
 8010454:	1413      	asrs	r3, r2, #16
 8010456:	18cb      	adds	r3, r1, r3
 8010458:	1419      	asrs	r1, r3, #16
 801045a:	b292      	uxth	r2, r2
 801045c:	041b      	lsls	r3, r3, #16
 801045e:	4313      	orrs	r3, r2
 8010460:	c508      	stmia	r5!, {r3}
 8010462:	9b05      	ldr	r3, [sp, #20]
 8010464:	9106      	str	r1, [sp, #24]
 8010466:	4563      	cmp	r3, ip
 8010468:	d2dd      	bcs.n	8010426 <quorem+0x4a>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d030      	beq.n	80104d2 <quorem+0xf6>
 8010470:	0038      	movs	r0, r7
 8010472:	9904      	ldr	r1, [sp, #16]
 8010474:	f7fc ff04 	bl	800d280 <__mcmp>
 8010478:	2800      	cmp	r0, #0
 801047a:	db21      	blt.n	80104c0 <quorem+0xe4>
 801047c:	0038      	movs	r0, r7
 801047e:	2600      	movs	r6, #0
 8010480:	9b02      	ldr	r3, [sp, #8]
 8010482:	9c04      	ldr	r4, [sp, #16]
 8010484:	3301      	adds	r3, #1
 8010486:	9302      	str	r3, [sp, #8]
 8010488:	3014      	adds	r0, #20
 801048a:	3414      	adds	r4, #20
 801048c:	6803      	ldr	r3, [r0, #0]
 801048e:	cc02      	ldmia	r4!, {r1}
 8010490:	b29d      	uxth	r5, r3
 8010492:	19ad      	adds	r5, r5, r6
 8010494:	b28a      	uxth	r2, r1
 8010496:	1aaa      	subs	r2, r5, r2
 8010498:	0c09      	lsrs	r1, r1, #16
 801049a:	0c1b      	lsrs	r3, r3, #16
 801049c:	1a5b      	subs	r3, r3, r1
 801049e:	1411      	asrs	r1, r2, #16
 80104a0:	185b      	adds	r3, r3, r1
 80104a2:	141e      	asrs	r6, r3, #16
 80104a4:	b292      	uxth	r2, r2
 80104a6:	041b      	lsls	r3, r3, #16
 80104a8:	4313      	orrs	r3, r2
 80104aa:	c008      	stmia	r0!, {r3}
 80104ac:	9b05      	ldr	r3, [sp, #20]
 80104ae:	42a3      	cmp	r3, r4
 80104b0:	d2ec      	bcs.n	801048c <quorem+0xb0>
 80104b2:	9b01      	ldr	r3, [sp, #4]
 80104b4:	9a03      	ldr	r2, [sp, #12]
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	18d3      	adds	r3, r2, r3
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	2a00      	cmp	r2, #0
 80104be:	d015      	beq.n	80104ec <quorem+0x110>
 80104c0:	9802      	ldr	r0, [sp, #8]
 80104c2:	b009      	add	sp, #36	; 0x24
 80104c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d106      	bne.n	80104da <quorem+0xfe>
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	3b01      	subs	r3, #1
 80104d0:	9301      	str	r3, [sp, #4]
 80104d2:	9b03      	ldr	r3, [sp, #12]
 80104d4:	3c04      	subs	r4, #4
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	d3f5      	bcc.n	80104c6 <quorem+0xea>
 80104da:	9b01      	ldr	r3, [sp, #4]
 80104dc:	613b      	str	r3, [r7, #16]
 80104de:	e7c7      	b.n	8010470 <quorem+0x94>
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	2a00      	cmp	r2, #0
 80104e4:	d106      	bne.n	80104f4 <quorem+0x118>
 80104e6:	9a01      	ldr	r2, [sp, #4]
 80104e8:	3a01      	subs	r2, #1
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	9a03      	ldr	r2, [sp, #12]
 80104ee:	3b04      	subs	r3, #4
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d3f5      	bcc.n	80104e0 <quorem+0x104>
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	613b      	str	r3, [r7, #16]
 80104f8:	e7e2      	b.n	80104c0 <quorem+0xe4>
	...

080104fc <_dtoa_r>:
 80104fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104fe:	0014      	movs	r4, r2
 8010500:	001d      	movs	r5, r3
 8010502:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010504:	b09d      	sub	sp, #116	; 0x74
 8010506:	9408      	str	r4, [sp, #32]
 8010508:	9509      	str	r5, [sp, #36]	; 0x24
 801050a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801050c:	9004      	str	r0, [sp, #16]
 801050e:	2900      	cmp	r1, #0
 8010510:	d009      	beq.n	8010526 <_dtoa_r+0x2a>
 8010512:	2301      	movs	r3, #1
 8010514:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010516:	4093      	lsls	r3, r2
 8010518:	604a      	str	r2, [r1, #4]
 801051a:	608b      	str	r3, [r1, #8]
 801051c:	f7fc fc56 	bl	800cdcc <_Bfree>
 8010520:	2300      	movs	r3, #0
 8010522:	9a04      	ldr	r2, [sp, #16]
 8010524:	6393      	str	r3, [r2, #56]	; 0x38
 8010526:	2d00      	cmp	r5, #0
 8010528:	da1e      	bge.n	8010568 <_dtoa_r+0x6c>
 801052a:	2301      	movs	r3, #1
 801052c:	6033      	str	r3, [r6, #0]
 801052e:	006b      	lsls	r3, r5, #1
 8010530:	085b      	lsrs	r3, r3, #1
 8010532:	9309      	str	r3, [sp, #36]	; 0x24
 8010534:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010536:	4bb5      	ldr	r3, [pc, #724]	; (801080c <_dtoa_r+0x310>)
 8010538:	4ab4      	ldr	r2, [pc, #720]	; (801080c <_dtoa_r+0x310>)
 801053a:	403b      	ands	r3, r7
 801053c:	4293      	cmp	r3, r2
 801053e:	d116      	bne.n	801056e <_dtoa_r+0x72>
 8010540:	4bb3      	ldr	r3, [pc, #716]	; (8010810 <_dtoa_r+0x314>)
 8010542:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	033b      	lsls	r3, r7, #12
 8010548:	0b1b      	lsrs	r3, r3, #12
 801054a:	4323      	orrs	r3, r4
 801054c:	d101      	bne.n	8010552 <_dtoa_r+0x56>
 801054e:	f000 fdb2 	bl	80110b6 <_dtoa_r+0xbba>
 8010552:	4bb0      	ldr	r3, [pc, #704]	; (8010814 <_dtoa_r+0x318>)
 8010554:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010556:	9306      	str	r3, [sp, #24]
 8010558:	2a00      	cmp	r2, #0
 801055a:	d002      	beq.n	8010562 <_dtoa_r+0x66>
 801055c:	4bae      	ldr	r3, [pc, #696]	; (8010818 <_dtoa_r+0x31c>)
 801055e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010560:	6013      	str	r3, [r2, #0]
 8010562:	9806      	ldr	r0, [sp, #24]
 8010564:	b01d      	add	sp, #116	; 0x74
 8010566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010568:	2300      	movs	r3, #0
 801056a:	6033      	str	r3, [r6, #0]
 801056c:	e7e2      	b.n	8010534 <_dtoa_r+0x38>
 801056e:	9a08      	ldr	r2, [sp, #32]
 8010570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010572:	9210      	str	r2, [sp, #64]	; 0x40
 8010574:	9311      	str	r3, [sp, #68]	; 0x44
 8010576:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010578:	9911      	ldr	r1, [sp, #68]	; 0x44
 801057a:	2200      	movs	r2, #0
 801057c:	2300      	movs	r3, #0
 801057e:	f7ef ff63 	bl	8000448 <__aeabi_dcmpeq>
 8010582:	1e06      	subs	r6, r0, #0
 8010584:	d009      	beq.n	801059a <_dtoa_r+0x9e>
 8010586:	2301      	movs	r3, #1
 8010588:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801058a:	6013      	str	r3, [r2, #0]
 801058c:	4ba3      	ldr	r3, [pc, #652]	; (801081c <_dtoa_r+0x320>)
 801058e:	9306      	str	r3, [sp, #24]
 8010590:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010592:	2b00      	cmp	r3, #0
 8010594:	d0e5      	beq.n	8010562 <_dtoa_r+0x66>
 8010596:	4ba2      	ldr	r3, [pc, #648]	; (8010820 <_dtoa_r+0x324>)
 8010598:	e7e1      	b.n	801055e <_dtoa_r+0x62>
 801059a:	ab1a      	add	r3, sp, #104	; 0x68
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	ab1b      	add	r3, sp, #108	; 0x6c
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	9804      	ldr	r0, [sp, #16]
 80105a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80105a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105a8:	f7fc ff86 	bl	800d4b8 <__d2b>
 80105ac:	007a      	lsls	r2, r7, #1
 80105ae:	9005      	str	r0, [sp, #20]
 80105b0:	0d52      	lsrs	r2, r2, #21
 80105b2:	d100      	bne.n	80105b6 <_dtoa_r+0xba>
 80105b4:	e07b      	b.n	80106ae <_dtoa_r+0x1b2>
 80105b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105b8:	9617      	str	r6, [sp, #92]	; 0x5c
 80105ba:	0319      	lsls	r1, r3, #12
 80105bc:	4b99      	ldr	r3, [pc, #612]	; (8010824 <_dtoa_r+0x328>)
 80105be:	0b09      	lsrs	r1, r1, #12
 80105c0:	430b      	orrs	r3, r1
 80105c2:	4999      	ldr	r1, [pc, #612]	; (8010828 <_dtoa_r+0x32c>)
 80105c4:	1857      	adds	r7, r2, r1
 80105c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80105c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80105ca:	0019      	movs	r1, r3
 80105cc:	2200      	movs	r2, #0
 80105ce:	4b97      	ldr	r3, [pc, #604]	; (801082c <_dtoa_r+0x330>)
 80105d0:	f7f1 fb0e 	bl	8001bf0 <__aeabi_dsub>
 80105d4:	4a96      	ldr	r2, [pc, #600]	; (8010830 <_dtoa_r+0x334>)
 80105d6:	4b97      	ldr	r3, [pc, #604]	; (8010834 <_dtoa_r+0x338>)
 80105d8:	f7f1 f848 	bl	800166c <__aeabi_dmul>
 80105dc:	4a96      	ldr	r2, [pc, #600]	; (8010838 <_dtoa_r+0x33c>)
 80105de:	4b97      	ldr	r3, [pc, #604]	; (801083c <_dtoa_r+0x340>)
 80105e0:	f7f0 f8ea 	bl	80007b8 <__aeabi_dadd>
 80105e4:	0004      	movs	r4, r0
 80105e6:	0038      	movs	r0, r7
 80105e8:	000d      	movs	r5, r1
 80105ea:	f7f1 fed7 	bl	800239c <__aeabi_i2d>
 80105ee:	4a94      	ldr	r2, [pc, #592]	; (8010840 <_dtoa_r+0x344>)
 80105f0:	4b94      	ldr	r3, [pc, #592]	; (8010844 <_dtoa_r+0x348>)
 80105f2:	f7f1 f83b 	bl	800166c <__aeabi_dmul>
 80105f6:	0002      	movs	r2, r0
 80105f8:	000b      	movs	r3, r1
 80105fa:	0020      	movs	r0, r4
 80105fc:	0029      	movs	r1, r5
 80105fe:	f7f0 f8db 	bl	80007b8 <__aeabi_dadd>
 8010602:	0004      	movs	r4, r0
 8010604:	000d      	movs	r5, r1
 8010606:	f7f1 fe93 	bl	8002330 <__aeabi_d2iz>
 801060a:	2200      	movs	r2, #0
 801060c:	9003      	str	r0, [sp, #12]
 801060e:	2300      	movs	r3, #0
 8010610:	0020      	movs	r0, r4
 8010612:	0029      	movs	r1, r5
 8010614:	f7ef ff1e 	bl	8000454 <__aeabi_dcmplt>
 8010618:	2800      	cmp	r0, #0
 801061a:	d00b      	beq.n	8010634 <_dtoa_r+0x138>
 801061c:	9803      	ldr	r0, [sp, #12]
 801061e:	f7f1 febd 	bl	800239c <__aeabi_i2d>
 8010622:	002b      	movs	r3, r5
 8010624:	0022      	movs	r2, r4
 8010626:	f7ef ff0f 	bl	8000448 <__aeabi_dcmpeq>
 801062a:	4243      	negs	r3, r0
 801062c:	4158      	adcs	r0, r3
 801062e:	9b03      	ldr	r3, [sp, #12]
 8010630:	1a1b      	subs	r3, r3, r0
 8010632:	9303      	str	r3, [sp, #12]
 8010634:	2301      	movs	r3, #1
 8010636:	9316      	str	r3, [sp, #88]	; 0x58
 8010638:	9b03      	ldr	r3, [sp, #12]
 801063a:	2b16      	cmp	r3, #22
 801063c:	d810      	bhi.n	8010660 <_dtoa_r+0x164>
 801063e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010640:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010642:	9a03      	ldr	r2, [sp, #12]
 8010644:	4b80      	ldr	r3, [pc, #512]	; (8010848 <_dtoa_r+0x34c>)
 8010646:	00d2      	lsls	r2, r2, #3
 8010648:	189b      	adds	r3, r3, r2
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f7ef ff01 	bl	8000454 <__aeabi_dcmplt>
 8010652:	2800      	cmp	r0, #0
 8010654:	d047      	beq.n	80106e6 <_dtoa_r+0x1ea>
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	3b01      	subs	r3, #1
 801065a:	9303      	str	r3, [sp, #12]
 801065c:	2300      	movs	r3, #0
 801065e:	9316      	str	r3, [sp, #88]	; 0x58
 8010660:	2200      	movs	r2, #0
 8010662:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010664:	920a      	str	r2, [sp, #40]	; 0x28
 8010666:	1bdb      	subs	r3, r3, r7
 8010668:	1e5a      	subs	r2, r3, #1
 801066a:	d53e      	bpl.n	80106ea <_dtoa_r+0x1ee>
 801066c:	2201      	movs	r2, #1
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	930a      	str	r3, [sp, #40]	; 0x28
 8010672:	2300      	movs	r3, #0
 8010674:	930c      	str	r3, [sp, #48]	; 0x30
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	2b00      	cmp	r3, #0
 801067a:	db38      	blt.n	80106ee <_dtoa_r+0x1f2>
 801067c:	9a03      	ldr	r2, [sp, #12]
 801067e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010680:	4694      	mov	ip, r2
 8010682:	4463      	add	r3, ip
 8010684:	930c      	str	r3, [sp, #48]	; 0x30
 8010686:	2300      	movs	r3, #0
 8010688:	9213      	str	r2, [sp, #76]	; 0x4c
 801068a:	930d      	str	r3, [sp, #52]	; 0x34
 801068c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801068e:	2401      	movs	r4, #1
 8010690:	2b09      	cmp	r3, #9
 8010692:	d867      	bhi.n	8010764 <_dtoa_r+0x268>
 8010694:	2b05      	cmp	r3, #5
 8010696:	dd02      	ble.n	801069e <_dtoa_r+0x1a2>
 8010698:	2400      	movs	r4, #0
 801069a:	3b04      	subs	r3, #4
 801069c:	9322      	str	r3, [sp, #136]	; 0x88
 801069e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80106a0:	1e98      	subs	r0, r3, #2
 80106a2:	2803      	cmp	r0, #3
 80106a4:	d867      	bhi.n	8010776 <_dtoa_r+0x27a>
 80106a6:	f7ef fd35 	bl	8000114 <__gnu_thumb1_case_uqi>
 80106aa:	3a2b      	.short	0x3a2b
 80106ac:	5b38      	.short	0x5b38
 80106ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80106b0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80106b2:	18f6      	adds	r6, r6, r3
 80106b4:	4b65      	ldr	r3, [pc, #404]	; (801084c <_dtoa_r+0x350>)
 80106b6:	18f2      	adds	r2, r6, r3
 80106b8:	2a20      	cmp	r2, #32
 80106ba:	dd0f      	ble.n	80106dc <_dtoa_r+0x1e0>
 80106bc:	2340      	movs	r3, #64	; 0x40
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	409f      	lsls	r7, r3
 80106c2:	4b63      	ldr	r3, [pc, #396]	; (8010850 <_dtoa_r+0x354>)
 80106c4:	0038      	movs	r0, r7
 80106c6:	18f3      	adds	r3, r6, r3
 80106c8:	40dc      	lsrs	r4, r3
 80106ca:	4320      	orrs	r0, r4
 80106cc:	f7f1 fe96 	bl	80023fc <__aeabi_ui2d>
 80106d0:	2201      	movs	r2, #1
 80106d2:	4b60      	ldr	r3, [pc, #384]	; (8010854 <_dtoa_r+0x358>)
 80106d4:	1e77      	subs	r7, r6, #1
 80106d6:	18cb      	adds	r3, r1, r3
 80106d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80106da:	e776      	b.n	80105ca <_dtoa_r+0xce>
 80106dc:	2320      	movs	r3, #32
 80106de:	0020      	movs	r0, r4
 80106e0:	1a9b      	subs	r3, r3, r2
 80106e2:	4098      	lsls	r0, r3
 80106e4:	e7f2      	b.n	80106cc <_dtoa_r+0x1d0>
 80106e6:	9016      	str	r0, [sp, #88]	; 0x58
 80106e8:	e7ba      	b.n	8010660 <_dtoa_r+0x164>
 80106ea:	920c      	str	r2, [sp, #48]	; 0x30
 80106ec:	e7c3      	b.n	8010676 <_dtoa_r+0x17a>
 80106ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f0:	9a03      	ldr	r2, [sp, #12]
 80106f2:	1a9b      	subs	r3, r3, r2
 80106f4:	930a      	str	r3, [sp, #40]	; 0x28
 80106f6:	4253      	negs	r3, r2
 80106f8:	930d      	str	r3, [sp, #52]	; 0x34
 80106fa:	2300      	movs	r3, #0
 80106fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80106fe:	e7c5      	b.n	801068c <_dtoa_r+0x190>
 8010700:	2300      	movs	r3, #0
 8010702:	930f      	str	r3, [sp, #60]	; 0x3c
 8010704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010706:	930b      	str	r3, [sp, #44]	; 0x2c
 8010708:	9307      	str	r3, [sp, #28]
 801070a:	2b00      	cmp	r3, #0
 801070c:	dc13      	bgt.n	8010736 <_dtoa_r+0x23a>
 801070e:	2301      	movs	r3, #1
 8010710:	001a      	movs	r2, r3
 8010712:	930b      	str	r3, [sp, #44]	; 0x2c
 8010714:	9307      	str	r3, [sp, #28]
 8010716:	9223      	str	r2, [sp, #140]	; 0x8c
 8010718:	e00d      	b.n	8010736 <_dtoa_r+0x23a>
 801071a:	2301      	movs	r3, #1
 801071c:	e7f1      	b.n	8010702 <_dtoa_r+0x206>
 801071e:	2300      	movs	r3, #0
 8010720:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010722:	930f      	str	r3, [sp, #60]	; 0x3c
 8010724:	4694      	mov	ip, r2
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	4463      	add	r3, ip
 801072a:	930b      	str	r3, [sp, #44]	; 0x2c
 801072c:	3301      	adds	r3, #1
 801072e:	9307      	str	r3, [sp, #28]
 8010730:	2b00      	cmp	r3, #0
 8010732:	dc00      	bgt.n	8010736 <_dtoa_r+0x23a>
 8010734:	2301      	movs	r3, #1
 8010736:	2100      	movs	r1, #0
 8010738:	2204      	movs	r2, #4
 801073a:	0010      	movs	r0, r2
 801073c:	3014      	adds	r0, #20
 801073e:	4298      	cmp	r0, r3
 8010740:	d91d      	bls.n	801077e <_dtoa_r+0x282>
 8010742:	9b04      	ldr	r3, [sp, #16]
 8010744:	0018      	movs	r0, r3
 8010746:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010748:	f7fc fb18 	bl	800cd7c <_Balloc>
 801074c:	9006      	str	r0, [sp, #24]
 801074e:	2800      	cmp	r0, #0
 8010750:	d118      	bne.n	8010784 <_dtoa_r+0x288>
 8010752:	21b0      	movs	r1, #176	; 0xb0
 8010754:	4b40      	ldr	r3, [pc, #256]	; (8010858 <_dtoa_r+0x35c>)
 8010756:	4841      	ldr	r0, [pc, #260]	; (801085c <_dtoa_r+0x360>)
 8010758:	9a06      	ldr	r2, [sp, #24]
 801075a:	31ff      	adds	r1, #255	; 0xff
 801075c:	f7ff fdd2 	bl	8010304 <__assert_func>
 8010760:	2301      	movs	r3, #1
 8010762:	e7dd      	b.n	8010720 <_dtoa_r+0x224>
 8010764:	2300      	movs	r3, #0
 8010766:	940f      	str	r4, [sp, #60]	; 0x3c
 8010768:	9322      	str	r3, [sp, #136]	; 0x88
 801076a:	3b01      	subs	r3, #1
 801076c:	930b      	str	r3, [sp, #44]	; 0x2c
 801076e:	9307      	str	r3, [sp, #28]
 8010770:	2200      	movs	r2, #0
 8010772:	3313      	adds	r3, #19
 8010774:	e7cf      	b.n	8010716 <_dtoa_r+0x21a>
 8010776:	2301      	movs	r3, #1
 8010778:	930f      	str	r3, [sp, #60]	; 0x3c
 801077a:	3b02      	subs	r3, #2
 801077c:	e7f6      	b.n	801076c <_dtoa_r+0x270>
 801077e:	3101      	adds	r1, #1
 8010780:	0052      	lsls	r2, r2, #1
 8010782:	e7da      	b.n	801073a <_dtoa_r+0x23e>
 8010784:	9b04      	ldr	r3, [sp, #16]
 8010786:	9a06      	ldr	r2, [sp, #24]
 8010788:	639a      	str	r2, [r3, #56]	; 0x38
 801078a:	9b07      	ldr	r3, [sp, #28]
 801078c:	2b0e      	cmp	r3, #14
 801078e:	d900      	bls.n	8010792 <_dtoa_r+0x296>
 8010790:	e0e3      	b.n	801095a <_dtoa_r+0x45e>
 8010792:	2c00      	cmp	r4, #0
 8010794:	d100      	bne.n	8010798 <_dtoa_r+0x29c>
 8010796:	e0e0      	b.n	801095a <_dtoa_r+0x45e>
 8010798:	9b03      	ldr	r3, [sp, #12]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dd62      	ble.n	8010864 <_dtoa_r+0x368>
 801079e:	210f      	movs	r1, #15
 80107a0:	9a03      	ldr	r2, [sp, #12]
 80107a2:	4b29      	ldr	r3, [pc, #164]	; (8010848 <_dtoa_r+0x34c>)
 80107a4:	400a      	ands	r2, r1
 80107a6:	00d2      	lsls	r2, r2, #3
 80107a8:	189b      	adds	r3, r3, r2
 80107aa:	681e      	ldr	r6, [r3, #0]
 80107ac:	685f      	ldr	r7, [r3, #4]
 80107ae:	9b03      	ldr	r3, [sp, #12]
 80107b0:	2402      	movs	r4, #2
 80107b2:	111d      	asrs	r5, r3, #4
 80107b4:	05db      	lsls	r3, r3, #23
 80107b6:	d50a      	bpl.n	80107ce <_dtoa_r+0x2d2>
 80107b8:	4b29      	ldr	r3, [pc, #164]	; (8010860 <_dtoa_r+0x364>)
 80107ba:	400d      	ands	r5, r1
 80107bc:	6a1a      	ldr	r2, [r3, #32]
 80107be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80107c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80107c4:	f7f0 fb58 	bl	8000e78 <__aeabi_ddiv>
 80107c8:	9008      	str	r0, [sp, #32]
 80107ca:	9109      	str	r1, [sp, #36]	; 0x24
 80107cc:	3401      	adds	r4, #1
 80107ce:	4b24      	ldr	r3, [pc, #144]	; (8010860 <_dtoa_r+0x364>)
 80107d0:	930e      	str	r3, [sp, #56]	; 0x38
 80107d2:	2d00      	cmp	r5, #0
 80107d4:	d108      	bne.n	80107e8 <_dtoa_r+0x2ec>
 80107d6:	9808      	ldr	r0, [sp, #32]
 80107d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107da:	0032      	movs	r2, r6
 80107dc:	003b      	movs	r3, r7
 80107de:	f7f0 fb4b 	bl	8000e78 <__aeabi_ddiv>
 80107e2:	9008      	str	r0, [sp, #32]
 80107e4:	9109      	str	r1, [sp, #36]	; 0x24
 80107e6:	e058      	b.n	801089a <_dtoa_r+0x39e>
 80107e8:	2301      	movs	r3, #1
 80107ea:	421d      	tst	r5, r3
 80107ec:	d009      	beq.n	8010802 <_dtoa_r+0x306>
 80107ee:	18e4      	adds	r4, r4, r3
 80107f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107f2:	0030      	movs	r0, r6
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	0039      	movs	r1, r7
 80107fa:	f7f0 ff37 	bl	800166c <__aeabi_dmul>
 80107fe:	0006      	movs	r6, r0
 8010800:	000f      	movs	r7, r1
 8010802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010804:	106d      	asrs	r5, r5, #1
 8010806:	3308      	adds	r3, #8
 8010808:	e7e2      	b.n	80107d0 <_dtoa_r+0x2d4>
 801080a:	46c0      	nop			; (mov r8, r8)
 801080c:	7ff00000 	.word	0x7ff00000
 8010810:	0000270f 	.word	0x0000270f
 8010814:	08014b6d 	.word	0x08014b6d
 8010818:	08014b70 	.word	0x08014b70
 801081c:	08014ade 	.word	0x08014ade
 8010820:	08014adf 	.word	0x08014adf
 8010824:	3ff00000 	.word	0x3ff00000
 8010828:	fffffc01 	.word	0xfffffc01
 801082c:	3ff80000 	.word	0x3ff80000
 8010830:	636f4361 	.word	0x636f4361
 8010834:	3fd287a7 	.word	0x3fd287a7
 8010838:	8b60c8b3 	.word	0x8b60c8b3
 801083c:	3fc68a28 	.word	0x3fc68a28
 8010840:	509f79fb 	.word	0x509f79fb
 8010844:	3fd34413 	.word	0x3fd34413
 8010848:	080149d8 	.word	0x080149d8
 801084c:	00000432 	.word	0x00000432
 8010850:	00000412 	.word	0x00000412
 8010854:	fe100000 	.word	0xfe100000
 8010858:	080148e1 	.word	0x080148e1
 801085c:	08014b71 	.word	0x08014b71
 8010860:	080149b0 	.word	0x080149b0
 8010864:	9b03      	ldr	r3, [sp, #12]
 8010866:	2402      	movs	r4, #2
 8010868:	2b00      	cmp	r3, #0
 801086a:	d016      	beq.n	801089a <_dtoa_r+0x39e>
 801086c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801086e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010870:	220f      	movs	r2, #15
 8010872:	425d      	negs	r5, r3
 8010874:	402a      	ands	r2, r5
 8010876:	4bdd      	ldr	r3, [pc, #884]	; (8010bec <_dtoa_r+0x6f0>)
 8010878:	00d2      	lsls	r2, r2, #3
 801087a:	189b      	adds	r3, r3, r2
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	f7f0 fef4 	bl	800166c <__aeabi_dmul>
 8010884:	2701      	movs	r7, #1
 8010886:	2300      	movs	r3, #0
 8010888:	9008      	str	r0, [sp, #32]
 801088a:	9109      	str	r1, [sp, #36]	; 0x24
 801088c:	4ed8      	ldr	r6, [pc, #864]	; (8010bf0 <_dtoa_r+0x6f4>)
 801088e:	112d      	asrs	r5, r5, #4
 8010890:	2d00      	cmp	r5, #0
 8010892:	d000      	beq.n	8010896 <_dtoa_r+0x39a>
 8010894:	e091      	b.n	80109ba <_dtoa_r+0x4be>
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1a3      	bne.n	80107e2 <_dtoa_r+0x2e6>
 801089a:	9e08      	ldr	r6, [sp, #32]
 801089c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801089e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d100      	bne.n	80108a6 <_dtoa_r+0x3aa>
 80108a4:	e094      	b.n	80109d0 <_dtoa_r+0x4d4>
 80108a6:	2200      	movs	r2, #0
 80108a8:	0030      	movs	r0, r6
 80108aa:	0039      	movs	r1, r7
 80108ac:	4bd1      	ldr	r3, [pc, #836]	; (8010bf4 <_dtoa_r+0x6f8>)
 80108ae:	f7ef fdd1 	bl	8000454 <__aeabi_dcmplt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d100      	bne.n	80108b8 <_dtoa_r+0x3bc>
 80108b6:	e08b      	b.n	80109d0 <_dtoa_r+0x4d4>
 80108b8:	9b07      	ldr	r3, [sp, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d100      	bne.n	80108c0 <_dtoa_r+0x3c4>
 80108be:	e087      	b.n	80109d0 <_dtoa_r+0x4d4>
 80108c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dd45      	ble.n	8010952 <_dtoa_r+0x456>
 80108c6:	9b03      	ldr	r3, [sp, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	3b01      	subs	r3, #1
 80108cc:	930e      	str	r3, [sp, #56]	; 0x38
 80108ce:	0030      	movs	r0, r6
 80108d0:	4bc9      	ldr	r3, [pc, #804]	; (8010bf8 <_dtoa_r+0x6fc>)
 80108d2:	0039      	movs	r1, r7
 80108d4:	f7f0 feca 	bl	800166c <__aeabi_dmul>
 80108d8:	9008      	str	r0, [sp, #32]
 80108da:	9109      	str	r1, [sp, #36]	; 0x24
 80108dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108de:	3401      	adds	r4, #1
 80108e0:	0020      	movs	r0, r4
 80108e2:	9e08      	ldr	r6, [sp, #32]
 80108e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80108e6:	9312      	str	r3, [sp, #72]	; 0x48
 80108e8:	f7f1 fd58 	bl	800239c <__aeabi_i2d>
 80108ec:	0032      	movs	r2, r6
 80108ee:	003b      	movs	r3, r7
 80108f0:	f7f0 febc 	bl	800166c <__aeabi_dmul>
 80108f4:	2200      	movs	r2, #0
 80108f6:	4bc1      	ldr	r3, [pc, #772]	; (8010bfc <_dtoa_r+0x700>)
 80108f8:	f7ef ff5e 	bl	80007b8 <__aeabi_dadd>
 80108fc:	4ac0      	ldr	r2, [pc, #768]	; (8010c00 <_dtoa_r+0x704>)
 80108fe:	9014      	str	r0, [sp, #80]	; 0x50
 8010900:	9115      	str	r1, [sp, #84]	; 0x54
 8010902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010904:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010906:	4694      	mov	ip, r2
 8010908:	9308      	str	r3, [sp, #32]
 801090a:	9409      	str	r4, [sp, #36]	; 0x24
 801090c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801090e:	4463      	add	r3, ip
 8010910:	9318      	str	r3, [sp, #96]	; 0x60
 8010912:	9309      	str	r3, [sp, #36]	; 0x24
 8010914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010916:	2b00      	cmp	r3, #0
 8010918:	d15e      	bne.n	80109d8 <_dtoa_r+0x4dc>
 801091a:	2200      	movs	r2, #0
 801091c:	4bb9      	ldr	r3, [pc, #740]	; (8010c04 <_dtoa_r+0x708>)
 801091e:	0030      	movs	r0, r6
 8010920:	0039      	movs	r1, r7
 8010922:	f7f1 f965 	bl	8001bf0 <__aeabi_dsub>
 8010926:	9a08      	ldr	r2, [sp, #32]
 8010928:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801092a:	0004      	movs	r4, r0
 801092c:	000d      	movs	r5, r1
 801092e:	f7ef fda5 	bl	800047c <__aeabi_dcmpgt>
 8010932:	2800      	cmp	r0, #0
 8010934:	d000      	beq.n	8010938 <_dtoa_r+0x43c>
 8010936:	e2b3      	b.n	8010ea0 <_dtoa_r+0x9a4>
 8010938:	48b3      	ldr	r0, [pc, #716]	; (8010c08 <_dtoa_r+0x70c>)
 801093a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801093c:	4684      	mov	ip, r0
 801093e:	4461      	add	r1, ip
 8010940:	000b      	movs	r3, r1
 8010942:	0020      	movs	r0, r4
 8010944:	0029      	movs	r1, r5
 8010946:	9a08      	ldr	r2, [sp, #32]
 8010948:	f7ef fd84 	bl	8000454 <__aeabi_dcmplt>
 801094c:	2800      	cmp	r0, #0
 801094e:	d000      	beq.n	8010952 <_dtoa_r+0x456>
 8010950:	e2a3      	b.n	8010e9a <_dtoa_r+0x99e>
 8010952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010954:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010956:	9308      	str	r3, [sp, #32]
 8010958:	9409      	str	r4, [sp, #36]	; 0x24
 801095a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801095c:	2b00      	cmp	r3, #0
 801095e:	da00      	bge.n	8010962 <_dtoa_r+0x466>
 8010960:	e179      	b.n	8010c56 <_dtoa_r+0x75a>
 8010962:	9a03      	ldr	r2, [sp, #12]
 8010964:	2a0e      	cmp	r2, #14
 8010966:	dd00      	ble.n	801096a <_dtoa_r+0x46e>
 8010968:	e175      	b.n	8010c56 <_dtoa_r+0x75a>
 801096a:	4ba0      	ldr	r3, [pc, #640]	; (8010bec <_dtoa_r+0x6f0>)
 801096c:	00d2      	lsls	r2, r2, #3
 801096e:	189b      	adds	r3, r3, r2
 8010970:	681e      	ldr	r6, [r3, #0]
 8010972:	685f      	ldr	r7, [r3, #4]
 8010974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010976:	2b00      	cmp	r3, #0
 8010978:	db00      	blt.n	801097c <_dtoa_r+0x480>
 801097a:	e0e5      	b.n	8010b48 <_dtoa_r+0x64c>
 801097c:	9b07      	ldr	r3, [sp, #28]
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd00      	ble.n	8010984 <_dtoa_r+0x488>
 8010982:	e0e1      	b.n	8010b48 <_dtoa_r+0x64c>
 8010984:	d000      	beq.n	8010988 <_dtoa_r+0x48c>
 8010986:	e288      	b.n	8010e9a <_dtoa_r+0x99e>
 8010988:	2200      	movs	r2, #0
 801098a:	0030      	movs	r0, r6
 801098c:	0039      	movs	r1, r7
 801098e:	4b9d      	ldr	r3, [pc, #628]	; (8010c04 <_dtoa_r+0x708>)
 8010990:	f7f0 fe6c 	bl	800166c <__aeabi_dmul>
 8010994:	9a08      	ldr	r2, [sp, #32]
 8010996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010998:	f7ef fd7a 	bl	8000490 <__aeabi_dcmpge>
 801099c:	9e07      	ldr	r6, [sp, #28]
 801099e:	0037      	movs	r7, r6
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d000      	beq.n	80109a6 <_dtoa_r+0x4aa>
 80109a4:	e25f      	b.n	8010e66 <_dtoa_r+0x96a>
 80109a6:	9b06      	ldr	r3, [sp, #24]
 80109a8:	9a06      	ldr	r2, [sp, #24]
 80109aa:	3301      	adds	r3, #1
 80109ac:	9308      	str	r3, [sp, #32]
 80109ae:	2331      	movs	r3, #49	; 0x31
 80109b0:	7013      	strb	r3, [r2, #0]
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	3301      	adds	r3, #1
 80109b6:	9303      	str	r3, [sp, #12]
 80109b8:	e25a      	b.n	8010e70 <_dtoa_r+0x974>
 80109ba:	423d      	tst	r5, r7
 80109bc:	d005      	beq.n	80109ca <_dtoa_r+0x4ce>
 80109be:	6832      	ldr	r2, [r6, #0]
 80109c0:	6873      	ldr	r3, [r6, #4]
 80109c2:	f7f0 fe53 	bl	800166c <__aeabi_dmul>
 80109c6:	003b      	movs	r3, r7
 80109c8:	3401      	adds	r4, #1
 80109ca:	106d      	asrs	r5, r5, #1
 80109cc:	3608      	adds	r6, #8
 80109ce:	e75f      	b.n	8010890 <_dtoa_r+0x394>
 80109d0:	9b03      	ldr	r3, [sp, #12]
 80109d2:	930e      	str	r3, [sp, #56]	; 0x38
 80109d4:	9b07      	ldr	r3, [sp, #28]
 80109d6:	e783      	b.n	80108e0 <_dtoa_r+0x3e4>
 80109d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80109da:	4b84      	ldr	r3, [pc, #528]	; (8010bec <_dtoa_r+0x6f0>)
 80109dc:	3a01      	subs	r2, #1
 80109de:	00d2      	lsls	r2, r2, #3
 80109e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109e2:	189b      	adds	r3, r3, r2
 80109e4:	9c08      	ldr	r4, [sp, #32]
 80109e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	2900      	cmp	r1, #0
 80109ee:	d051      	beq.n	8010a94 <_dtoa_r+0x598>
 80109f0:	2000      	movs	r0, #0
 80109f2:	4986      	ldr	r1, [pc, #536]	; (8010c0c <_dtoa_r+0x710>)
 80109f4:	f7f0 fa40 	bl	8000e78 <__aeabi_ddiv>
 80109f8:	0022      	movs	r2, r4
 80109fa:	002b      	movs	r3, r5
 80109fc:	f7f1 f8f8 	bl	8001bf0 <__aeabi_dsub>
 8010a00:	9a06      	ldr	r2, [sp, #24]
 8010a02:	0004      	movs	r4, r0
 8010a04:	4694      	mov	ip, r2
 8010a06:	000d      	movs	r5, r1
 8010a08:	9b06      	ldr	r3, [sp, #24]
 8010a0a:	9314      	str	r3, [sp, #80]	; 0x50
 8010a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a0e:	4463      	add	r3, ip
 8010a10:	9318      	str	r3, [sp, #96]	; 0x60
 8010a12:	0039      	movs	r1, r7
 8010a14:	0030      	movs	r0, r6
 8010a16:	f7f1 fc8b 	bl	8002330 <__aeabi_d2iz>
 8010a1a:	9012      	str	r0, [sp, #72]	; 0x48
 8010a1c:	f7f1 fcbe 	bl	800239c <__aeabi_i2d>
 8010a20:	0002      	movs	r2, r0
 8010a22:	000b      	movs	r3, r1
 8010a24:	0030      	movs	r0, r6
 8010a26:	0039      	movs	r1, r7
 8010a28:	f7f1 f8e2 	bl	8001bf0 <__aeabi_dsub>
 8010a2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a30:	3301      	adds	r3, #1
 8010a32:	9308      	str	r3, [sp, #32]
 8010a34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a36:	0006      	movs	r6, r0
 8010a38:	3330      	adds	r3, #48	; 0x30
 8010a3a:	7013      	strb	r3, [r2, #0]
 8010a3c:	0022      	movs	r2, r4
 8010a3e:	002b      	movs	r3, r5
 8010a40:	000f      	movs	r7, r1
 8010a42:	f7ef fd07 	bl	8000454 <__aeabi_dcmplt>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d174      	bne.n	8010b34 <_dtoa_r+0x638>
 8010a4a:	0032      	movs	r2, r6
 8010a4c:	003b      	movs	r3, r7
 8010a4e:	2000      	movs	r0, #0
 8010a50:	4968      	ldr	r1, [pc, #416]	; (8010bf4 <_dtoa_r+0x6f8>)
 8010a52:	f7f1 f8cd 	bl	8001bf0 <__aeabi_dsub>
 8010a56:	0022      	movs	r2, r4
 8010a58:	002b      	movs	r3, r5
 8010a5a:	f7ef fcfb 	bl	8000454 <__aeabi_dcmplt>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d000      	beq.n	8010a64 <_dtoa_r+0x568>
 8010a62:	e0d7      	b.n	8010c14 <_dtoa_r+0x718>
 8010a64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a66:	9a08      	ldr	r2, [sp, #32]
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d100      	bne.n	8010a6e <_dtoa_r+0x572>
 8010a6c:	e771      	b.n	8010952 <_dtoa_r+0x456>
 8010a6e:	2200      	movs	r2, #0
 8010a70:	0020      	movs	r0, r4
 8010a72:	0029      	movs	r1, r5
 8010a74:	4b60      	ldr	r3, [pc, #384]	; (8010bf8 <_dtoa_r+0x6fc>)
 8010a76:	f7f0 fdf9 	bl	800166c <__aeabi_dmul>
 8010a7a:	4b5f      	ldr	r3, [pc, #380]	; (8010bf8 <_dtoa_r+0x6fc>)
 8010a7c:	0004      	movs	r4, r0
 8010a7e:	000d      	movs	r5, r1
 8010a80:	0030      	movs	r0, r6
 8010a82:	0039      	movs	r1, r7
 8010a84:	2200      	movs	r2, #0
 8010a86:	f7f0 fdf1 	bl	800166c <__aeabi_dmul>
 8010a8a:	9b08      	ldr	r3, [sp, #32]
 8010a8c:	0006      	movs	r6, r0
 8010a8e:	000f      	movs	r7, r1
 8010a90:	9314      	str	r3, [sp, #80]	; 0x50
 8010a92:	e7be      	b.n	8010a12 <_dtoa_r+0x516>
 8010a94:	0020      	movs	r0, r4
 8010a96:	0029      	movs	r1, r5
 8010a98:	f7f0 fde8 	bl	800166c <__aeabi_dmul>
 8010a9c:	9a06      	ldr	r2, [sp, #24]
 8010a9e:	9b06      	ldr	r3, [sp, #24]
 8010aa0:	4694      	mov	ip, r2
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010aa6:	9014      	str	r0, [sp, #80]	; 0x50
 8010aa8:	9115      	str	r1, [sp, #84]	; 0x54
 8010aaa:	4463      	add	r3, ip
 8010aac:	9319      	str	r3, [sp, #100]	; 0x64
 8010aae:	0030      	movs	r0, r6
 8010ab0:	0039      	movs	r1, r7
 8010ab2:	f7f1 fc3d 	bl	8002330 <__aeabi_d2iz>
 8010ab6:	9018      	str	r0, [sp, #96]	; 0x60
 8010ab8:	f7f1 fc70 	bl	800239c <__aeabi_i2d>
 8010abc:	0002      	movs	r2, r0
 8010abe:	000b      	movs	r3, r1
 8010ac0:	0030      	movs	r0, r6
 8010ac2:	0039      	movs	r1, r7
 8010ac4:	f7f1 f894 	bl	8001bf0 <__aeabi_dsub>
 8010ac8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010aca:	9b08      	ldr	r3, [sp, #32]
 8010acc:	3630      	adds	r6, #48	; 0x30
 8010ace:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010ad0:	701e      	strb	r6, [r3, #0]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	0004      	movs	r4, r0
 8010ad6:	000d      	movs	r5, r1
 8010ad8:	9308      	str	r3, [sp, #32]
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d12d      	bne.n	8010b3a <_dtoa_r+0x63e>
 8010ade:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010ae0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ae2:	9a06      	ldr	r2, [sp, #24]
 8010ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ae6:	4694      	mov	ip, r2
 8010ae8:	4463      	add	r3, ip
 8010aea:	2200      	movs	r2, #0
 8010aec:	9308      	str	r3, [sp, #32]
 8010aee:	4b47      	ldr	r3, [pc, #284]	; (8010c0c <_dtoa_r+0x710>)
 8010af0:	f7ef fe62 	bl	80007b8 <__aeabi_dadd>
 8010af4:	0002      	movs	r2, r0
 8010af6:	000b      	movs	r3, r1
 8010af8:	0020      	movs	r0, r4
 8010afa:	0029      	movs	r1, r5
 8010afc:	f7ef fcbe 	bl	800047c <__aeabi_dcmpgt>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d000      	beq.n	8010b06 <_dtoa_r+0x60a>
 8010b04:	e086      	b.n	8010c14 <_dtoa_r+0x718>
 8010b06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	493f      	ldr	r1, [pc, #252]	; (8010c0c <_dtoa_r+0x710>)
 8010b0e:	f7f1 f86f 	bl	8001bf0 <__aeabi_dsub>
 8010b12:	0002      	movs	r2, r0
 8010b14:	000b      	movs	r3, r1
 8010b16:	0020      	movs	r0, r4
 8010b18:	0029      	movs	r1, r5
 8010b1a:	f7ef fc9b 	bl	8000454 <__aeabi_dcmplt>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d100      	bne.n	8010b24 <_dtoa_r+0x628>
 8010b22:	e716      	b.n	8010952 <_dtoa_r+0x456>
 8010b24:	9b08      	ldr	r3, [sp, #32]
 8010b26:	001a      	movs	r2, r3
 8010b28:	3a01      	subs	r2, #1
 8010b2a:	9208      	str	r2, [sp, #32]
 8010b2c:	7812      	ldrb	r2, [r2, #0]
 8010b2e:	2a30      	cmp	r2, #48	; 0x30
 8010b30:	d0f8      	beq.n	8010b24 <_dtoa_r+0x628>
 8010b32:	9308      	str	r3, [sp, #32]
 8010b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b36:	9303      	str	r3, [sp, #12]
 8010b38:	e046      	b.n	8010bc8 <_dtoa_r+0x6cc>
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	4b2e      	ldr	r3, [pc, #184]	; (8010bf8 <_dtoa_r+0x6fc>)
 8010b3e:	f7f0 fd95 	bl	800166c <__aeabi_dmul>
 8010b42:	0006      	movs	r6, r0
 8010b44:	000f      	movs	r7, r1
 8010b46:	e7b2      	b.n	8010aae <_dtoa_r+0x5b2>
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	9a06      	ldr	r2, [sp, #24]
 8010b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8010b4e:	9b07      	ldr	r3, [sp, #28]
 8010b50:	9c08      	ldr	r4, [sp, #32]
 8010b52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b54:	3b01      	subs	r3, #1
 8010b56:	189b      	adds	r3, r3, r2
 8010b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b5a:	0032      	movs	r2, r6
 8010b5c:	003b      	movs	r3, r7
 8010b5e:	0020      	movs	r0, r4
 8010b60:	0029      	movs	r1, r5
 8010b62:	f7f0 f989 	bl	8000e78 <__aeabi_ddiv>
 8010b66:	f7f1 fbe3 	bl	8002330 <__aeabi_d2iz>
 8010b6a:	9007      	str	r0, [sp, #28]
 8010b6c:	f7f1 fc16 	bl	800239c <__aeabi_i2d>
 8010b70:	0032      	movs	r2, r6
 8010b72:	003b      	movs	r3, r7
 8010b74:	f7f0 fd7a 	bl	800166c <__aeabi_dmul>
 8010b78:	0002      	movs	r2, r0
 8010b7a:	000b      	movs	r3, r1
 8010b7c:	0020      	movs	r0, r4
 8010b7e:	0029      	movs	r1, r5
 8010b80:	f7f1 f836 	bl	8001bf0 <__aeabi_dsub>
 8010b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b86:	001a      	movs	r2, r3
 8010b88:	3201      	adds	r2, #1
 8010b8a:	920a      	str	r2, [sp, #40]	; 0x28
 8010b8c:	9208      	str	r2, [sp, #32]
 8010b8e:	9a07      	ldr	r2, [sp, #28]
 8010b90:	3230      	adds	r2, #48	; 0x30
 8010b92:	701a      	strb	r2, [r3, #0]
 8010b94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d14f      	bne.n	8010c3a <_dtoa_r+0x73e>
 8010b9a:	0002      	movs	r2, r0
 8010b9c:	000b      	movs	r3, r1
 8010b9e:	f7ef fe0b 	bl	80007b8 <__aeabi_dadd>
 8010ba2:	0032      	movs	r2, r6
 8010ba4:	003b      	movs	r3, r7
 8010ba6:	0004      	movs	r4, r0
 8010ba8:	000d      	movs	r5, r1
 8010baa:	f7ef fc67 	bl	800047c <__aeabi_dcmpgt>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d12e      	bne.n	8010c10 <_dtoa_r+0x714>
 8010bb2:	0032      	movs	r2, r6
 8010bb4:	003b      	movs	r3, r7
 8010bb6:	0020      	movs	r0, r4
 8010bb8:	0029      	movs	r1, r5
 8010bba:	f7ef fc45 	bl	8000448 <__aeabi_dcmpeq>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d002      	beq.n	8010bc8 <_dtoa_r+0x6cc>
 8010bc2:	9b07      	ldr	r3, [sp, #28]
 8010bc4:	07de      	lsls	r6, r3, #31
 8010bc6:	d423      	bmi.n	8010c10 <_dtoa_r+0x714>
 8010bc8:	9905      	ldr	r1, [sp, #20]
 8010bca:	9804      	ldr	r0, [sp, #16]
 8010bcc:	f7fc f8fe 	bl	800cdcc <_Bfree>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	9a08      	ldr	r2, [sp, #32]
 8010bd4:	7013      	strb	r3, [r2, #0]
 8010bd6:	9b03      	ldr	r3, [sp, #12]
 8010bd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010bda:	3301      	adds	r3, #1
 8010bdc:	6013      	str	r3, [r2, #0]
 8010bde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d100      	bne.n	8010be6 <_dtoa_r+0x6ea>
 8010be4:	e4bd      	b.n	8010562 <_dtoa_r+0x66>
 8010be6:	9a08      	ldr	r2, [sp, #32]
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	e4ba      	b.n	8010562 <_dtoa_r+0x66>
 8010bec:	080149d8 	.word	0x080149d8
 8010bf0:	080149b0 	.word	0x080149b0
 8010bf4:	3ff00000 	.word	0x3ff00000
 8010bf8:	40240000 	.word	0x40240000
 8010bfc:	401c0000 	.word	0x401c0000
 8010c00:	fcc00000 	.word	0xfcc00000
 8010c04:	40140000 	.word	0x40140000
 8010c08:	7cc00000 	.word	0x7cc00000
 8010c0c:	3fe00000 	.word	0x3fe00000
 8010c10:	9b03      	ldr	r3, [sp, #12]
 8010c12:	930e      	str	r3, [sp, #56]	; 0x38
 8010c14:	9b08      	ldr	r3, [sp, #32]
 8010c16:	9308      	str	r3, [sp, #32]
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	2a39      	cmp	r2, #57	; 0x39
 8010c1e:	d108      	bne.n	8010c32 <_dtoa_r+0x736>
 8010c20:	9a06      	ldr	r2, [sp, #24]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d1f7      	bne.n	8010c16 <_dtoa_r+0x71a>
 8010c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c28:	9906      	ldr	r1, [sp, #24]
 8010c2a:	3201      	adds	r2, #1
 8010c2c:	920e      	str	r2, [sp, #56]	; 0x38
 8010c2e:	2230      	movs	r2, #48	; 0x30
 8010c30:	700a      	strb	r2, [r1, #0]
 8010c32:	781a      	ldrb	r2, [r3, #0]
 8010c34:	3201      	adds	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
 8010c38:	e77c      	b.n	8010b34 <_dtoa_r+0x638>
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4ba9      	ldr	r3, [pc, #676]	; (8010ee4 <_dtoa_r+0x9e8>)
 8010c3e:	f7f0 fd15 	bl	800166c <__aeabi_dmul>
 8010c42:	2200      	movs	r2, #0
 8010c44:	2300      	movs	r3, #0
 8010c46:	0004      	movs	r4, r0
 8010c48:	000d      	movs	r5, r1
 8010c4a:	f7ef fbfd 	bl	8000448 <__aeabi_dcmpeq>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d100      	bne.n	8010c54 <_dtoa_r+0x758>
 8010c52:	e782      	b.n	8010b5a <_dtoa_r+0x65e>
 8010c54:	e7b8      	b.n	8010bc8 <_dtoa_r+0x6cc>
 8010c56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010c58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010c5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010c5c:	2f00      	cmp	r7, #0
 8010c5e:	d012      	beq.n	8010c86 <_dtoa_r+0x78a>
 8010c60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c62:	2a01      	cmp	r2, #1
 8010c64:	dc6e      	bgt.n	8010d44 <_dtoa_r+0x848>
 8010c66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	d065      	beq.n	8010d38 <_dtoa_r+0x83c>
 8010c6c:	4a9e      	ldr	r2, [pc, #632]	; (8010ee8 <_dtoa_r+0x9ec>)
 8010c6e:	189b      	adds	r3, r3, r2
 8010c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c72:	2101      	movs	r1, #1
 8010c74:	18d2      	adds	r2, r2, r3
 8010c76:	920a      	str	r2, [sp, #40]	; 0x28
 8010c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c7a:	9804      	ldr	r0, [sp, #16]
 8010c7c:	18d3      	adds	r3, r2, r3
 8010c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c80:	f7fc f986 	bl	800cf90 <__i2b>
 8010c84:	0007      	movs	r7, r0
 8010c86:	2c00      	cmp	r4, #0
 8010c88:	d00e      	beq.n	8010ca8 <_dtoa_r+0x7ac>
 8010c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dd0b      	ble.n	8010ca8 <_dtoa_r+0x7ac>
 8010c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c92:	0023      	movs	r3, r4
 8010c94:	4294      	cmp	r4, r2
 8010c96:	dd00      	ble.n	8010c9a <_dtoa_r+0x79e>
 8010c98:	0013      	movs	r3, r2
 8010c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c9c:	1ae4      	subs	r4, r4, r3
 8010c9e:	1ad2      	subs	r2, r2, r3
 8010ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8010ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01e      	beq.n	8010cec <_dtoa_r+0x7f0>
 8010cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d05c      	beq.n	8010d6e <_dtoa_r+0x872>
 8010cb4:	2d00      	cmp	r5, #0
 8010cb6:	dd10      	ble.n	8010cda <_dtoa_r+0x7de>
 8010cb8:	0039      	movs	r1, r7
 8010cba:	002a      	movs	r2, r5
 8010cbc:	9804      	ldr	r0, [sp, #16]
 8010cbe:	f7fc fa2f 	bl	800d120 <__pow5mult>
 8010cc2:	9a05      	ldr	r2, [sp, #20]
 8010cc4:	0001      	movs	r1, r0
 8010cc6:	0007      	movs	r7, r0
 8010cc8:	9804      	ldr	r0, [sp, #16]
 8010cca:	f7fc f979 	bl	800cfc0 <__multiply>
 8010cce:	0006      	movs	r6, r0
 8010cd0:	9905      	ldr	r1, [sp, #20]
 8010cd2:	9804      	ldr	r0, [sp, #16]
 8010cd4:	f7fc f87a 	bl	800cdcc <_Bfree>
 8010cd8:	9605      	str	r6, [sp, #20]
 8010cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cdc:	1b5a      	subs	r2, r3, r5
 8010cde:	42ab      	cmp	r3, r5
 8010ce0:	d004      	beq.n	8010cec <_dtoa_r+0x7f0>
 8010ce2:	9905      	ldr	r1, [sp, #20]
 8010ce4:	9804      	ldr	r0, [sp, #16]
 8010ce6:	f7fc fa1b 	bl	800d120 <__pow5mult>
 8010cea:	9005      	str	r0, [sp, #20]
 8010cec:	2101      	movs	r1, #1
 8010cee:	9804      	ldr	r0, [sp, #16]
 8010cf0:	f7fc f94e 	bl	800cf90 <__i2b>
 8010cf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010cf6:	0006      	movs	r6, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dd3a      	ble.n	8010d72 <_dtoa_r+0x876>
 8010cfc:	001a      	movs	r2, r3
 8010cfe:	0001      	movs	r1, r0
 8010d00:	9804      	ldr	r0, [sp, #16]
 8010d02:	f7fc fa0d 	bl	800d120 <__pow5mult>
 8010d06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d08:	0006      	movs	r6, r0
 8010d0a:	2500      	movs	r5, #0
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	dc38      	bgt.n	8010d82 <_dtoa_r+0x886>
 8010d10:	2500      	movs	r5, #0
 8010d12:	9b08      	ldr	r3, [sp, #32]
 8010d14:	42ab      	cmp	r3, r5
 8010d16:	d130      	bne.n	8010d7a <_dtoa_r+0x87e>
 8010d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d1a:	031b      	lsls	r3, r3, #12
 8010d1c:	42ab      	cmp	r3, r5
 8010d1e:	d12c      	bne.n	8010d7a <_dtoa_r+0x87e>
 8010d20:	4b72      	ldr	r3, [pc, #456]	; (8010eec <_dtoa_r+0x9f0>)
 8010d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d24:	4213      	tst	r3, r2
 8010d26:	d028      	beq.n	8010d7a <_dtoa_r+0x87e>
 8010d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d2a:	3501      	adds	r5, #1
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d32:	3301      	adds	r3, #1
 8010d34:	930c      	str	r3, [sp, #48]	; 0x30
 8010d36:	e020      	b.n	8010d7a <_dtoa_r+0x87e>
 8010d38:	2336      	movs	r3, #54	; 0x36
 8010d3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d40:	1a9b      	subs	r3, r3, r2
 8010d42:	e795      	b.n	8010c70 <_dtoa_r+0x774>
 8010d44:	9b07      	ldr	r3, [sp, #28]
 8010d46:	1e5d      	subs	r5, r3, #1
 8010d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d4a:	42ab      	cmp	r3, r5
 8010d4c:	db07      	blt.n	8010d5e <_dtoa_r+0x862>
 8010d4e:	1b5d      	subs	r5, r3, r5
 8010d50:	9b07      	ldr	r3, [sp, #28]
 8010d52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	da8b      	bge.n	8010c70 <_dtoa_r+0x774>
 8010d58:	1ae4      	subs	r4, r4, r3
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e788      	b.n	8010c70 <_dtoa_r+0x774>
 8010d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d62:	1aeb      	subs	r3, r5, r3
 8010d64:	18d3      	adds	r3, r2, r3
 8010d66:	950d      	str	r5, [sp, #52]	; 0x34
 8010d68:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d6a:	2500      	movs	r5, #0
 8010d6c:	e7f0      	b.n	8010d50 <_dtoa_r+0x854>
 8010d6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d70:	e7b7      	b.n	8010ce2 <_dtoa_r+0x7e6>
 8010d72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d74:	2500      	movs	r5, #0
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	ddca      	ble.n	8010d10 <_dtoa_r+0x814>
 8010d7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d7c:	2001      	movs	r0, #1
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d008      	beq.n	8010d94 <_dtoa_r+0x898>
 8010d82:	6933      	ldr	r3, [r6, #16]
 8010d84:	3303      	adds	r3, #3
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	18f3      	adds	r3, r6, r3
 8010d8a:	6858      	ldr	r0, [r3, #4]
 8010d8c:	f7fc f8b8 	bl	800cf00 <__hi0bits>
 8010d90:	2320      	movs	r3, #32
 8010d92:	1a18      	subs	r0, r3, r0
 8010d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d96:	1818      	adds	r0, r3, r0
 8010d98:	0002      	movs	r2, r0
 8010d9a:	231f      	movs	r3, #31
 8010d9c:	401a      	ands	r2, r3
 8010d9e:	4218      	tst	r0, r3
 8010da0:	d047      	beq.n	8010e32 <_dtoa_r+0x936>
 8010da2:	3301      	adds	r3, #1
 8010da4:	1a9b      	subs	r3, r3, r2
 8010da6:	2b04      	cmp	r3, #4
 8010da8:	dd3f      	ble.n	8010e2a <_dtoa_r+0x92e>
 8010daa:	231c      	movs	r3, #28
 8010dac:	1a9b      	subs	r3, r3, r2
 8010dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010db0:	18e4      	adds	r4, r4, r3
 8010db2:	18d2      	adds	r2, r2, r3
 8010db4:	920a      	str	r2, [sp, #40]	; 0x28
 8010db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010db8:	18d3      	adds	r3, r2, r3
 8010dba:	930c      	str	r3, [sp, #48]	; 0x30
 8010dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	dd05      	ble.n	8010dce <_dtoa_r+0x8d2>
 8010dc2:	001a      	movs	r2, r3
 8010dc4:	9905      	ldr	r1, [sp, #20]
 8010dc6:	9804      	ldr	r0, [sp, #16]
 8010dc8:	f7fc f9ec 	bl	800d1a4 <__lshift>
 8010dcc:	9005      	str	r0, [sp, #20]
 8010dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dd05      	ble.n	8010de0 <_dtoa_r+0x8e4>
 8010dd4:	0031      	movs	r1, r6
 8010dd6:	001a      	movs	r2, r3
 8010dd8:	9804      	ldr	r0, [sp, #16]
 8010dda:	f7fc f9e3 	bl	800d1a4 <__lshift>
 8010dde:	0006      	movs	r6, r0
 8010de0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d027      	beq.n	8010e36 <_dtoa_r+0x93a>
 8010de6:	0031      	movs	r1, r6
 8010de8:	9805      	ldr	r0, [sp, #20]
 8010dea:	f7fc fa49 	bl	800d280 <__mcmp>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	da21      	bge.n	8010e36 <_dtoa_r+0x93a>
 8010df2:	9b03      	ldr	r3, [sp, #12]
 8010df4:	220a      	movs	r2, #10
 8010df6:	3b01      	subs	r3, #1
 8010df8:	9303      	str	r3, [sp, #12]
 8010dfa:	9905      	ldr	r1, [sp, #20]
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	9804      	ldr	r0, [sp, #16]
 8010e00:	f7fb ffee 	bl	800cde0 <__multadd>
 8010e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e06:	9005      	str	r0, [sp, #20]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d100      	bne.n	8010e0e <_dtoa_r+0x912>
 8010e0c:	e15d      	b.n	80110ca <_dtoa_r+0xbce>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	0039      	movs	r1, r7
 8010e12:	220a      	movs	r2, #10
 8010e14:	9804      	ldr	r0, [sp, #16]
 8010e16:	f7fb ffe3 	bl	800cde0 <__multadd>
 8010e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e1c:	0007      	movs	r7, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	dc49      	bgt.n	8010eb6 <_dtoa_r+0x9ba>
 8010e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e24:	2b02      	cmp	r3, #2
 8010e26:	dc0e      	bgt.n	8010e46 <_dtoa_r+0x94a>
 8010e28:	e045      	b.n	8010eb6 <_dtoa_r+0x9ba>
 8010e2a:	2b04      	cmp	r3, #4
 8010e2c:	d0c6      	beq.n	8010dbc <_dtoa_r+0x8c0>
 8010e2e:	331c      	adds	r3, #28
 8010e30:	e7bd      	b.n	8010dae <_dtoa_r+0x8b2>
 8010e32:	0013      	movs	r3, r2
 8010e34:	e7fb      	b.n	8010e2e <_dtoa_r+0x932>
 8010e36:	9b07      	ldr	r3, [sp, #28]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dc36      	bgt.n	8010eaa <_dtoa_r+0x9ae>
 8010e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	dd33      	ble.n	8010eaa <_dtoa_r+0x9ae>
 8010e42:	9b07      	ldr	r3, [sp, #28]
 8010e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10c      	bne.n	8010e66 <_dtoa_r+0x96a>
 8010e4c:	0031      	movs	r1, r6
 8010e4e:	2205      	movs	r2, #5
 8010e50:	9804      	ldr	r0, [sp, #16]
 8010e52:	f7fb ffc5 	bl	800cde0 <__multadd>
 8010e56:	0006      	movs	r6, r0
 8010e58:	0001      	movs	r1, r0
 8010e5a:	9805      	ldr	r0, [sp, #20]
 8010e5c:	f7fc fa10 	bl	800d280 <__mcmp>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	dd00      	ble.n	8010e66 <_dtoa_r+0x96a>
 8010e64:	e59f      	b.n	80109a6 <_dtoa_r+0x4aa>
 8010e66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010e68:	43db      	mvns	r3, r3
 8010e6a:	9303      	str	r3, [sp, #12]
 8010e6c:	9b06      	ldr	r3, [sp, #24]
 8010e6e:	9308      	str	r3, [sp, #32]
 8010e70:	2500      	movs	r5, #0
 8010e72:	0031      	movs	r1, r6
 8010e74:	9804      	ldr	r0, [sp, #16]
 8010e76:	f7fb ffa9 	bl	800cdcc <_Bfree>
 8010e7a:	2f00      	cmp	r7, #0
 8010e7c:	d100      	bne.n	8010e80 <_dtoa_r+0x984>
 8010e7e:	e6a3      	b.n	8010bc8 <_dtoa_r+0x6cc>
 8010e80:	2d00      	cmp	r5, #0
 8010e82:	d005      	beq.n	8010e90 <_dtoa_r+0x994>
 8010e84:	42bd      	cmp	r5, r7
 8010e86:	d003      	beq.n	8010e90 <_dtoa_r+0x994>
 8010e88:	0029      	movs	r1, r5
 8010e8a:	9804      	ldr	r0, [sp, #16]
 8010e8c:	f7fb ff9e 	bl	800cdcc <_Bfree>
 8010e90:	0039      	movs	r1, r7
 8010e92:	9804      	ldr	r0, [sp, #16]
 8010e94:	f7fb ff9a 	bl	800cdcc <_Bfree>
 8010e98:	e696      	b.n	8010bc8 <_dtoa_r+0x6cc>
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	0037      	movs	r7, r6
 8010e9e:	e7e2      	b.n	8010e66 <_dtoa_r+0x96a>
 8010ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ea2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ea4:	9303      	str	r3, [sp, #12]
 8010ea6:	0037      	movs	r7, r6
 8010ea8:	e57d      	b.n	80109a6 <_dtoa_r+0x4aa>
 8010eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d100      	bne.n	8010eb2 <_dtoa_r+0x9b6>
 8010eb0:	e0c3      	b.n	801103a <_dtoa_r+0xb3e>
 8010eb2:	9b07      	ldr	r3, [sp, #28]
 8010eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eb6:	2c00      	cmp	r4, #0
 8010eb8:	dd05      	ble.n	8010ec6 <_dtoa_r+0x9ca>
 8010eba:	0039      	movs	r1, r7
 8010ebc:	0022      	movs	r2, r4
 8010ebe:	9804      	ldr	r0, [sp, #16]
 8010ec0:	f7fc f970 	bl	800d1a4 <__lshift>
 8010ec4:	0007      	movs	r7, r0
 8010ec6:	0038      	movs	r0, r7
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	d024      	beq.n	8010f16 <_dtoa_r+0xa1a>
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	9804      	ldr	r0, [sp, #16]
 8010ed0:	f7fb ff54 	bl	800cd7c <_Balloc>
 8010ed4:	1e04      	subs	r4, r0, #0
 8010ed6:	d111      	bne.n	8010efc <_dtoa_r+0xa00>
 8010ed8:	0022      	movs	r2, r4
 8010eda:	4b05      	ldr	r3, [pc, #20]	; (8010ef0 <_dtoa_r+0x9f4>)
 8010edc:	4805      	ldr	r0, [pc, #20]	; (8010ef4 <_dtoa_r+0x9f8>)
 8010ede:	4906      	ldr	r1, [pc, #24]	; (8010ef8 <_dtoa_r+0x9fc>)
 8010ee0:	e43c      	b.n	801075c <_dtoa_r+0x260>
 8010ee2:	46c0      	nop			; (mov r8, r8)
 8010ee4:	40240000 	.word	0x40240000
 8010ee8:	00000433 	.word	0x00000433
 8010eec:	7ff00000 	.word	0x7ff00000
 8010ef0:	080148e1 	.word	0x080148e1
 8010ef4:	08014b71 	.word	0x08014b71
 8010ef8:	000002ef 	.word	0x000002ef
 8010efc:	0039      	movs	r1, r7
 8010efe:	693a      	ldr	r2, [r7, #16]
 8010f00:	310c      	adds	r1, #12
 8010f02:	3202      	adds	r2, #2
 8010f04:	0092      	lsls	r2, r2, #2
 8010f06:	300c      	adds	r0, #12
 8010f08:	f7fb fa9d 	bl	800c446 <memcpy>
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	0021      	movs	r1, r4
 8010f10:	9804      	ldr	r0, [sp, #16]
 8010f12:	f7fc f947 	bl	800d1a4 <__lshift>
 8010f16:	9b06      	ldr	r3, [sp, #24]
 8010f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f1a:	9307      	str	r3, [sp, #28]
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	189b      	adds	r3, r3, r2
 8010f20:	2201      	movs	r2, #1
 8010f22:	003d      	movs	r5, r7
 8010f24:	0007      	movs	r7, r0
 8010f26:	930e      	str	r3, [sp, #56]	; 0x38
 8010f28:	9b08      	ldr	r3, [sp, #32]
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8010f2e:	0031      	movs	r1, r6
 8010f30:	9805      	ldr	r0, [sp, #20]
 8010f32:	f7ff fa53 	bl	80103dc <quorem>
 8010f36:	0029      	movs	r1, r5
 8010f38:	0004      	movs	r4, r0
 8010f3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f3c:	9805      	ldr	r0, [sp, #20]
 8010f3e:	f7fc f99f 	bl	800d280 <__mcmp>
 8010f42:	003a      	movs	r2, r7
 8010f44:	900c      	str	r0, [sp, #48]	; 0x30
 8010f46:	0031      	movs	r1, r6
 8010f48:	9804      	ldr	r0, [sp, #16]
 8010f4a:	f7fc f9b5 	bl	800d2b8 <__mdiff>
 8010f4e:	2201      	movs	r2, #1
 8010f50:	68c3      	ldr	r3, [r0, #12]
 8010f52:	3430      	adds	r4, #48	; 0x30
 8010f54:	9008      	str	r0, [sp, #32]
 8010f56:	920a      	str	r2, [sp, #40]	; 0x28
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d104      	bne.n	8010f66 <_dtoa_r+0xa6a>
 8010f5c:	0001      	movs	r1, r0
 8010f5e:	9805      	ldr	r0, [sp, #20]
 8010f60:	f7fc f98e 	bl	800d280 <__mcmp>
 8010f64:	900a      	str	r0, [sp, #40]	; 0x28
 8010f66:	9908      	ldr	r1, [sp, #32]
 8010f68:	9804      	ldr	r0, [sp, #16]
 8010f6a:	f7fb ff2f 	bl	800cdcc <_Bfree>
 8010f6e:	9b07      	ldr	r3, [sp, #28]
 8010f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f72:	3301      	adds	r3, #1
 8010f74:	9308      	str	r3, [sp, #32]
 8010f76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	d109      	bne.n	8010f94 <_dtoa_r+0xa98>
 8010f80:	2c39      	cmp	r4, #57	; 0x39
 8010f82:	d022      	beq.n	8010fca <_dtoa_r+0xace>
 8010f84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	dd01      	ble.n	8010f8e <_dtoa_r+0xa92>
 8010f8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010f8c:	3431      	adds	r4, #49	; 0x31
 8010f8e:	9b07      	ldr	r3, [sp, #28]
 8010f90:	701c      	strb	r4, [r3, #0]
 8010f92:	e76e      	b.n	8010e72 <_dtoa_r+0x976>
 8010f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	db04      	blt.n	8010fa4 <_dtoa_r+0xaa8>
 8010f9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	d11e      	bne.n	8010fe2 <_dtoa_r+0xae6>
 8010fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	ddf1      	ble.n	8010f8e <_dtoa_r+0xa92>
 8010faa:	9905      	ldr	r1, [sp, #20]
 8010fac:	2201      	movs	r2, #1
 8010fae:	9804      	ldr	r0, [sp, #16]
 8010fb0:	f7fc f8f8 	bl	800d1a4 <__lshift>
 8010fb4:	0031      	movs	r1, r6
 8010fb6:	9005      	str	r0, [sp, #20]
 8010fb8:	f7fc f962 	bl	800d280 <__mcmp>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	dc02      	bgt.n	8010fc6 <_dtoa_r+0xaca>
 8010fc0:	d1e5      	bne.n	8010f8e <_dtoa_r+0xa92>
 8010fc2:	07e3      	lsls	r3, r4, #31
 8010fc4:	d5e3      	bpl.n	8010f8e <_dtoa_r+0xa92>
 8010fc6:	2c39      	cmp	r4, #57	; 0x39
 8010fc8:	d1df      	bne.n	8010f8a <_dtoa_r+0xa8e>
 8010fca:	2339      	movs	r3, #57	; 0x39
 8010fcc:	9a07      	ldr	r2, [sp, #28]
 8010fce:	7013      	strb	r3, [r2, #0]
 8010fd0:	9b08      	ldr	r3, [sp, #32]
 8010fd2:	9308      	str	r3, [sp, #32]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	781a      	ldrb	r2, [r3, #0]
 8010fd8:	2a39      	cmp	r2, #57	; 0x39
 8010fda:	d063      	beq.n	80110a4 <_dtoa_r+0xba8>
 8010fdc:	3201      	adds	r2, #1
 8010fde:	701a      	strb	r2, [r3, #0]
 8010fe0:	e747      	b.n	8010e72 <_dtoa_r+0x976>
 8010fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	dd03      	ble.n	8010ff0 <_dtoa_r+0xaf4>
 8010fe8:	2c39      	cmp	r4, #57	; 0x39
 8010fea:	d0ee      	beq.n	8010fca <_dtoa_r+0xace>
 8010fec:	3401      	adds	r4, #1
 8010fee:	e7ce      	b.n	8010f8e <_dtoa_r+0xa92>
 8010ff0:	9b07      	ldr	r3, [sp, #28]
 8010ff2:	9a07      	ldr	r2, [sp, #28]
 8010ff4:	701c      	strb	r4, [r3, #0]
 8010ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d03e      	beq.n	801107a <_dtoa_r+0xb7e>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	220a      	movs	r2, #10
 8011000:	9905      	ldr	r1, [sp, #20]
 8011002:	9804      	ldr	r0, [sp, #16]
 8011004:	f7fb feec 	bl	800cde0 <__multadd>
 8011008:	2300      	movs	r3, #0
 801100a:	9005      	str	r0, [sp, #20]
 801100c:	220a      	movs	r2, #10
 801100e:	0029      	movs	r1, r5
 8011010:	9804      	ldr	r0, [sp, #16]
 8011012:	42bd      	cmp	r5, r7
 8011014:	d106      	bne.n	8011024 <_dtoa_r+0xb28>
 8011016:	f7fb fee3 	bl	800cde0 <__multadd>
 801101a:	0005      	movs	r5, r0
 801101c:	0007      	movs	r7, r0
 801101e:	9b08      	ldr	r3, [sp, #32]
 8011020:	9307      	str	r3, [sp, #28]
 8011022:	e784      	b.n	8010f2e <_dtoa_r+0xa32>
 8011024:	f7fb fedc 	bl	800cde0 <__multadd>
 8011028:	0039      	movs	r1, r7
 801102a:	0005      	movs	r5, r0
 801102c:	2300      	movs	r3, #0
 801102e:	220a      	movs	r2, #10
 8011030:	9804      	ldr	r0, [sp, #16]
 8011032:	f7fb fed5 	bl	800cde0 <__multadd>
 8011036:	0007      	movs	r7, r0
 8011038:	e7f1      	b.n	801101e <_dtoa_r+0xb22>
 801103a:	9b07      	ldr	r3, [sp, #28]
 801103c:	930b      	str	r3, [sp, #44]	; 0x2c
 801103e:	2500      	movs	r5, #0
 8011040:	0031      	movs	r1, r6
 8011042:	9805      	ldr	r0, [sp, #20]
 8011044:	f7ff f9ca 	bl	80103dc <quorem>
 8011048:	9b06      	ldr	r3, [sp, #24]
 801104a:	3030      	adds	r0, #48	; 0x30
 801104c:	5558      	strb	r0, [r3, r5]
 801104e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011050:	3501      	adds	r5, #1
 8011052:	0004      	movs	r4, r0
 8011054:	42ab      	cmp	r3, r5
 8011056:	dd07      	ble.n	8011068 <_dtoa_r+0xb6c>
 8011058:	2300      	movs	r3, #0
 801105a:	220a      	movs	r2, #10
 801105c:	9905      	ldr	r1, [sp, #20]
 801105e:	9804      	ldr	r0, [sp, #16]
 8011060:	f7fb febe 	bl	800cde0 <__multadd>
 8011064:	9005      	str	r0, [sp, #20]
 8011066:	e7eb      	b.n	8011040 <_dtoa_r+0xb44>
 8011068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801106a:	2301      	movs	r3, #1
 801106c:	2a00      	cmp	r2, #0
 801106e:	dd00      	ble.n	8011072 <_dtoa_r+0xb76>
 8011070:	0013      	movs	r3, r2
 8011072:	2500      	movs	r5, #0
 8011074:	9a06      	ldr	r2, [sp, #24]
 8011076:	18d3      	adds	r3, r2, r3
 8011078:	9308      	str	r3, [sp, #32]
 801107a:	9905      	ldr	r1, [sp, #20]
 801107c:	2201      	movs	r2, #1
 801107e:	9804      	ldr	r0, [sp, #16]
 8011080:	f7fc f890 	bl	800d1a4 <__lshift>
 8011084:	0031      	movs	r1, r6
 8011086:	9005      	str	r0, [sp, #20]
 8011088:	f7fc f8fa 	bl	800d280 <__mcmp>
 801108c:	2800      	cmp	r0, #0
 801108e:	dc9f      	bgt.n	8010fd0 <_dtoa_r+0xad4>
 8011090:	d101      	bne.n	8011096 <_dtoa_r+0xb9a>
 8011092:	07e4      	lsls	r4, r4, #31
 8011094:	d49c      	bmi.n	8010fd0 <_dtoa_r+0xad4>
 8011096:	9b08      	ldr	r3, [sp, #32]
 8011098:	9308      	str	r3, [sp, #32]
 801109a:	3b01      	subs	r3, #1
 801109c:	781a      	ldrb	r2, [r3, #0]
 801109e:	2a30      	cmp	r2, #48	; 0x30
 80110a0:	d0fa      	beq.n	8011098 <_dtoa_r+0xb9c>
 80110a2:	e6e6      	b.n	8010e72 <_dtoa_r+0x976>
 80110a4:	9a06      	ldr	r2, [sp, #24]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d193      	bne.n	8010fd2 <_dtoa_r+0xad6>
 80110aa:	9b03      	ldr	r3, [sp, #12]
 80110ac:	3301      	adds	r3, #1
 80110ae:	9303      	str	r3, [sp, #12]
 80110b0:	2331      	movs	r3, #49	; 0x31
 80110b2:	7013      	strb	r3, [r2, #0]
 80110b4:	e6dd      	b.n	8010e72 <_dtoa_r+0x976>
 80110b6:	4b09      	ldr	r3, [pc, #36]	; (80110dc <_dtoa_r+0xbe0>)
 80110b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80110ba:	9306      	str	r3, [sp, #24]
 80110bc:	4b08      	ldr	r3, [pc, #32]	; (80110e0 <_dtoa_r+0xbe4>)
 80110be:	2a00      	cmp	r2, #0
 80110c0:	d001      	beq.n	80110c6 <_dtoa_r+0xbca>
 80110c2:	f7ff fa4c 	bl	801055e <_dtoa_r+0x62>
 80110c6:	f7ff fa4c 	bl	8010562 <_dtoa_r+0x66>
 80110ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	dcb6      	bgt.n	801103e <_dtoa_r+0xb42>
 80110d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	dd00      	ble.n	80110d8 <_dtoa_r+0xbdc>
 80110d6:	e6b6      	b.n	8010e46 <_dtoa_r+0x94a>
 80110d8:	e7b1      	b.n	801103e <_dtoa_r+0xb42>
 80110da:	46c0      	nop			; (mov r8, r8)
 80110dc:	08014b64 	.word	0x08014b64
 80110e0:	08014b6c 	.word	0x08014b6c

080110e4 <realloc>:
 80110e4:	b510      	push	{r4, lr}
 80110e6:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <realloc+0x10>)
 80110e8:	000a      	movs	r2, r1
 80110ea:	0001      	movs	r1, r0
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	f000 f803 	bl	80110f8 <_realloc_r>
 80110f2:	bd10      	pop	{r4, pc}
 80110f4:	200006d8 	.word	0x200006d8

080110f8 <_realloc_r>:
 80110f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110fa:	b087      	sub	sp, #28
 80110fc:	1e0c      	subs	r4, r1, #0
 80110fe:	9001      	str	r0, [sp, #4]
 8011100:	9205      	str	r2, [sp, #20]
 8011102:	d106      	bne.n	8011112 <_realloc_r+0x1a>
 8011104:	0011      	movs	r1, r2
 8011106:	f7f9 fe39 	bl	800ad7c <_malloc_r>
 801110a:	0007      	movs	r7, r0
 801110c:	0038      	movs	r0, r7
 801110e:	b007      	add	sp, #28
 8011110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011112:	9801      	ldr	r0, [sp, #4]
 8011114:	f7fa f846 	bl	800b1a4 <__malloc_lock>
 8011118:	0023      	movs	r3, r4
 801111a:	3b08      	subs	r3, #8
 801111c:	685f      	ldr	r7, [r3, #4]
 801111e:	9304      	str	r3, [sp, #16]
 8011120:	9b05      	ldr	r3, [sp, #20]
 8011122:	330b      	adds	r3, #11
 8011124:	2b16      	cmp	r3, #22
 8011126:	d908      	bls.n	801113a <_realloc_r+0x42>
 8011128:	2207      	movs	r2, #7
 801112a:	4393      	bics	r3, r2
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	d506      	bpl.n	801113e <_realloc_r+0x46>
 8011130:	230c      	movs	r3, #12
 8011132:	9a01      	ldr	r2, [sp, #4]
 8011134:	2700      	movs	r7, #0
 8011136:	6013      	str	r3, [r2, #0]
 8011138:	e7e8      	b.n	801110c <_realloc_r+0x14>
 801113a:	2310      	movs	r3, #16
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	9b00      	ldr	r3, [sp, #0]
 8011140:	9a05      	ldr	r2, [sp, #20]
 8011142:	4293      	cmp	r3, r2
 8011144:	d3f4      	bcc.n	8011130 <_realloc_r+0x38>
 8011146:	9b04      	ldr	r3, [sp, #16]
 8011148:	003a      	movs	r2, r7
 801114a:	9302      	str	r3, [sp, #8]
 801114c:	2303      	movs	r3, #3
 801114e:	439a      	bics	r2, r3
 8011150:	9b00      	ldr	r3, [sp, #0]
 8011152:	9203      	str	r2, [sp, #12]
 8011154:	4293      	cmp	r3, r2
 8011156:	dc00      	bgt.n	801115a <_realloc_r+0x62>
 8011158:	e169      	b.n	801142e <_realloc_r+0x336>
 801115a:	9b04      	ldr	r3, [sp, #16]
 801115c:	48b8      	ldr	r0, [pc, #736]	; (8011440 <_realloc_r+0x348>)
 801115e:	189b      	adds	r3, r3, r2
 8011160:	6882      	ldr	r2, [r0, #8]
 8011162:	4694      	mov	ip, r2
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	459c      	cmp	ip, r3
 8011168:	d006      	beq.n	8011178 <_realloc_r+0x80>
 801116a:	2501      	movs	r5, #1
 801116c:	0011      	movs	r1, r2
 801116e:	43a9      	bics	r1, r5
 8011170:	1859      	adds	r1, r3, r1
 8011172:	6849      	ldr	r1, [r1, #4]
 8011174:	4229      	tst	r1, r5
 8011176:	d144      	bne.n	8011202 <_realloc_r+0x10a>
 8011178:	2103      	movs	r1, #3
 801117a:	438a      	bics	r2, r1
 801117c:	9903      	ldr	r1, [sp, #12]
 801117e:	188e      	adds	r6, r1, r2
 8011180:	9900      	ldr	r1, [sp, #0]
 8011182:	459c      	cmp	ip, r3
 8011184:	d117      	bne.n	80111b6 <_realloc_r+0xbe>
 8011186:	3110      	adds	r1, #16
 8011188:	42b1      	cmp	r1, r6
 801118a:	dc3c      	bgt.n	8011206 <_realloc_r+0x10e>
 801118c:	9a00      	ldr	r2, [sp, #0]
 801118e:	2101      	movs	r1, #1
 8011190:	4694      	mov	ip, r2
 8011192:	1ab6      	subs	r6, r6, r2
 8011194:	0022      	movs	r2, r4
 8011196:	9b04      	ldr	r3, [sp, #16]
 8011198:	430e      	orrs	r6, r1
 801119a:	4463      	add	r3, ip
 801119c:	6083      	str	r3, [r0, #8]
 801119e:	3a08      	subs	r2, #8
 80111a0:	605e      	str	r6, [r3, #4]
 80111a2:	6853      	ldr	r3, [r2, #4]
 80111a4:	9801      	ldr	r0, [sp, #4]
 80111a6:	400b      	ands	r3, r1
 80111a8:	4661      	mov	r1, ip
 80111aa:	430b      	orrs	r3, r1
 80111ac:	6053      	str	r3, [r2, #4]
 80111ae:	f7fa f801 	bl	800b1b4 <__malloc_unlock>
 80111b2:	0027      	movs	r7, r4
 80111b4:	e7aa      	b.n	801110c <_realloc_r+0x14>
 80111b6:	42b1      	cmp	r1, r6
 80111b8:	dc25      	bgt.n	8011206 <_realloc_r+0x10e>
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	60da      	str	r2, [r3, #12]
 80111c0:	6093      	str	r3, [r2, #8]
 80111c2:	9b00      	ldr	r3, [sp, #0]
 80111c4:	9a02      	ldr	r2, [sp, #8]
 80111c6:	1af4      	subs	r4, r6, r3
 80111c8:	9b02      	ldr	r3, [sp, #8]
 80111ca:	1992      	adds	r2, r2, r6
 80111cc:	6858      	ldr	r0, [r3, #4]
 80111ce:	2301      	movs	r3, #1
 80111d0:	4018      	ands	r0, r3
 80111d2:	2c0f      	cmp	r4, #15
 80111d4:	d800      	bhi.n	80111d8 <_realloc_r+0xe0>
 80111d6:	e12c      	b.n	8011432 <_realloc_r+0x33a>
 80111d8:	9d00      	ldr	r5, [sp, #0]
 80111da:	9902      	ldr	r1, [sp, #8]
 80111dc:	4328      	orrs	r0, r5
 80111de:	1949      	adds	r1, r1, r5
 80111e0:	9d02      	ldr	r5, [sp, #8]
 80111e2:	431c      	orrs	r4, r3
 80111e4:	6068      	str	r0, [r5, #4]
 80111e6:	604c      	str	r4, [r1, #4]
 80111e8:	6850      	ldr	r0, [r2, #4]
 80111ea:	3108      	adds	r1, #8
 80111ec:	4303      	orrs	r3, r0
 80111ee:	6053      	str	r3, [r2, #4]
 80111f0:	9801      	ldr	r0, [sp, #4]
 80111f2:	f7fb f9a3 	bl	800c53c <_free_r>
 80111f6:	9801      	ldr	r0, [sp, #4]
 80111f8:	f7f9 ffdc 	bl	800b1b4 <__malloc_unlock>
 80111fc:	9f02      	ldr	r7, [sp, #8]
 80111fe:	3708      	adds	r7, #8
 8011200:	e784      	b.n	801110c <_realloc_r+0x14>
 8011202:	2200      	movs	r2, #0
 8011204:	0013      	movs	r3, r2
 8011206:	07ff      	lsls	r7, r7, #31
 8011208:	d500      	bpl.n	801120c <_realloc_r+0x114>
 801120a:	e0c6      	b.n	801139a <_realloc_r+0x2a2>
 801120c:	0021      	movs	r1, r4
 801120e:	2003      	movs	r0, #3
 8011210:	3908      	subs	r1, #8
 8011212:	680d      	ldr	r5, [r1, #0]
 8011214:	9904      	ldr	r1, [sp, #16]
 8011216:	1b4d      	subs	r5, r1, r5
 8011218:	6869      	ldr	r1, [r5, #4]
 801121a:	4381      	bics	r1, r0
 801121c:	9803      	ldr	r0, [sp, #12]
 801121e:	180f      	adds	r7, r1, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d100      	bne.n	8011226 <_realloc_r+0x12e>
 8011224:	e084      	b.n	8011330 <_realloc_r+0x238>
 8011226:	19d6      	adds	r6, r2, r7
 8011228:	459c      	cmp	ip, r3
 801122a:	d148      	bne.n	80112be <_realloc_r+0x1c6>
 801122c:	9b00      	ldr	r3, [sp, #0]
 801122e:	3310      	adds	r3, #16
 8011230:	42b3      	cmp	r3, r6
 8011232:	dc7d      	bgt.n	8011330 <_realloc_r+0x238>
 8011234:	68aa      	ldr	r2, [r5, #8]
 8011236:	68eb      	ldr	r3, [r5, #12]
 8011238:	002f      	movs	r7, r5
 801123a:	60d3      	str	r3, [r2, #12]
 801123c:	609a      	str	r2, [r3, #8]
 801123e:	0002      	movs	r2, r0
 8011240:	3a04      	subs	r2, #4
 8011242:	3708      	adds	r7, #8
 8011244:	2a24      	cmp	r2, #36	; 0x24
 8011246:	d835      	bhi.n	80112b4 <_realloc_r+0x1bc>
 8011248:	003b      	movs	r3, r7
 801124a:	2a13      	cmp	r2, #19
 801124c:	d908      	bls.n	8011260 <_realloc_r+0x168>
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	60ab      	str	r3, [r5, #8]
 8011252:	6863      	ldr	r3, [r4, #4]
 8011254:	60eb      	str	r3, [r5, #12]
 8011256:	2a1b      	cmp	r2, #27
 8011258:	d81a      	bhi.n	8011290 <_realloc_r+0x198>
 801125a:	002b      	movs	r3, r5
 801125c:	3408      	adds	r4, #8
 801125e:	3310      	adds	r3, #16
 8011260:	6822      	ldr	r2, [r4, #0]
 8011262:	601a      	str	r2, [r3, #0]
 8011264:	6862      	ldr	r2, [r4, #4]
 8011266:	605a      	str	r2, [r3, #4]
 8011268:	68a2      	ldr	r2, [r4, #8]
 801126a:	609a      	str	r2, [r3, #8]
 801126c:	9b00      	ldr	r3, [sp, #0]
 801126e:	4a74      	ldr	r2, [pc, #464]	; (8011440 <_realloc_r+0x348>)
 8011270:	18eb      	adds	r3, r5, r3
 8011272:	6093      	str	r3, [r2, #8]
 8011274:	9a00      	ldr	r2, [sp, #0]
 8011276:	1ab6      	subs	r6, r6, r2
 8011278:	2201      	movs	r2, #1
 801127a:	4316      	orrs	r6, r2
 801127c:	605e      	str	r6, [r3, #4]
 801127e:	686b      	ldr	r3, [r5, #4]
 8011280:	4013      	ands	r3, r2
 8011282:	9a00      	ldr	r2, [sp, #0]
 8011284:	4313      	orrs	r3, r2
 8011286:	606b      	str	r3, [r5, #4]
 8011288:	9801      	ldr	r0, [sp, #4]
 801128a:	f7f9 ff93 	bl	800b1b4 <__malloc_unlock>
 801128e:	e73d      	b.n	801110c <_realloc_r+0x14>
 8011290:	68a3      	ldr	r3, [r4, #8]
 8011292:	612b      	str	r3, [r5, #16]
 8011294:	68e3      	ldr	r3, [r4, #12]
 8011296:	616b      	str	r3, [r5, #20]
 8011298:	2a24      	cmp	r2, #36	; 0x24
 801129a:	d003      	beq.n	80112a4 <_realloc_r+0x1ac>
 801129c:	002b      	movs	r3, r5
 801129e:	3410      	adds	r4, #16
 80112a0:	3318      	adds	r3, #24
 80112a2:	e7dd      	b.n	8011260 <_realloc_r+0x168>
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	61ab      	str	r3, [r5, #24]
 80112a8:	002b      	movs	r3, r5
 80112aa:	6962      	ldr	r2, [r4, #20]
 80112ac:	3320      	adds	r3, #32
 80112ae:	61ea      	str	r2, [r5, #28]
 80112b0:	3418      	adds	r4, #24
 80112b2:	e7d5      	b.n	8011260 <_realloc_r+0x168>
 80112b4:	0021      	movs	r1, r4
 80112b6:	0038      	movs	r0, r7
 80112b8:	f001 fbb5 	bl	8012a26 <memmove>
 80112bc:	e7d6      	b.n	801126c <_realloc_r+0x174>
 80112be:	9a00      	ldr	r2, [sp, #0]
 80112c0:	42b2      	cmp	r2, r6
 80112c2:	dc35      	bgt.n	8011330 <_realloc_r+0x238>
 80112c4:	0028      	movs	r0, r5
 80112c6:	68da      	ldr	r2, [r3, #12]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	3008      	adds	r0, #8
 80112cc:	60da      	str	r2, [r3, #12]
 80112ce:	6093      	str	r3, [r2, #8]
 80112d0:	68aa      	ldr	r2, [r5, #8]
 80112d2:	68eb      	ldr	r3, [r5, #12]
 80112d4:	60d3      	str	r3, [r2, #12]
 80112d6:	609a      	str	r2, [r3, #8]
 80112d8:	9a03      	ldr	r2, [sp, #12]
 80112da:	3a04      	subs	r2, #4
 80112dc:	2a24      	cmp	r2, #36	; 0x24
 80112de:	d823      	bhi.n	8011328 <_realloc_r+0x230>
 80112e0:	2a13      	cmp	r2, #19
 80112e2:	d907      	bls.n	80112f4 <_realloc_r+0x1fc>
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	60ab      	str	r3, [r5, #8]
 80112e8:	6863      	ldr	r3, [r4, #4]
 80112ea:	60eb      	str	r3, [r5, #12]
 80112ec:	2a1b      	cmp	r2, #27
 80112ee:	d809      	bhi.n	8011304 <_realloc_r+0x20c>
 80112f0:	3408      	adds	r4, #8
 80112f2:	3008      	adds	r0, #8
 80112f4:	6823      	ldr	r3, [r4, #0]
 80112f6:	6003      	str	r3, [r0, #0]
 80112f8:	6863      	ldr	r3, [r4, #4]
 80112fa:	6043      	str	r3, [r0, #4]
 80112fc:	68a3      	ldr	r3, [r4, #8]
 80112fe:	6083      	str	r3, [r0, #8]
 8011300:	9502      	str	r5, [sp, #8]
 8011302:	e75e      	b.n	80111c2 <_realloc_r+0xca>
 8011304:	68a3      	ldr	r3, [r4, #8]
 8011306:	612b      	str	r3, [r5, #16]
 8011308:	68e3      	ldr	r3, [r4, #12]
 801130a:	616b      	str	r3, [r5, #20]
 801130c:	2a24      	cmp	r2, #36	; 0x24
 801130e:	d003      	beq.n	8011318 <_realloc_r+0x220>
 8011310:	0028      	movs	r0, r5
 8011312:	3410      	adds	r4, #16
 8011314:	3018      	adds	r0, #24
 8011316:	e7ed      	b.n	80112f4 <_realloc_r+0x1fc>
 8011318:	0028      	movs	r0, r5
 801131a:	6923      	ldr	r3, [r4, #16]
 801131c:	3020      	adds	r0, #32
 801131e:	61ab      	str	r3, [r5, #24]
 8011320:	6963      	ldr	r3, [r4, #20]
 8011322:	3418      	adds	r4, #24
 8011324:	61eb      	str	r3, [r5, #28]
 8011326:	e7e5      	b.n	80112f4 <_realloc_r+0x1fc>
 8011328:	0021      	movs	r1, r4
 801132a:	f001 fb7c 	bl	8012a26 <memmove>
 801132e:	e7e7      	b.n	8011300 <_realloc_r+0x208>
 8011330:	9b00      	ldr	r3, [sp, #0]
 8011332:	42bb      	cmp	r3, r7
 8011334:	dc31      	bgt.n	801139a <_realloc_r+0x2a2>
 8011336:	0028      	movs	r0, r5
 8011338:	68aa      	ldr	r2, [r5, #8]
 801133a:	68eb      	ldr	r3, [r5, #12]
 801133c:	3008      	adds	r0, #8
 801133e:	60d3      	str	r3, [r2, #12]
 8011340:	609a      	str	r2, [r3, #8]
 8011342:	9a03      	ldr	r2, [sp, #12]
 8011344:	3a04      	subs	r2, #4
 8011346:	2a24      	cmp	r2, #36	; 0x24
 8011348:	d823      	bhi.n	8011392 <_realloc_r+0x29a>
 801134a:	2a13      	cmp	r2, #19
 801134c:	d907      	bls.n	801135e <_realloc_r+0x266>
 801134e:	6823      	ldr	r3, [r4, #0]
 8011350:	60ab      	str	r3, [r5, #8]
 8011352:	6863      	ldr	r3, [r4, #4]
 8011354:	60eb      	str	r3, [r5, #12]
 8011356:	2a1b      	cmp	r2, #27
 8011358:	d809      	bhi.n	801136e <_realloc_r+0x276>
 801135a:	3408      	adds	r4, #8
 801135c:	3008      	adds	r0, #8
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	6003      	str	r3, [r0, #0]
 8011362:	6863      	ldr	r3, [r4, #4]
 8011364:	6043      	str	r3, [r0, #4]
 8011366:	68a3      	ldr	r3, [r4, #8]
 8011368:	6083      	str	r3, [r0, #8]
 801136a:	003e      	movs	r6, r7
 801136c:	e7c8      	b.n	8011300 <_realloc_r+0x208>
 801136e:	68a3      	ldr	r3, [r4, #8]
 8011370:	612b      	str	r3, [r5, #16]
 8011372:	68e3      	ldr	r3, [r4, #12]
 8011374:	616b      	str	r3, [r5, #20]
 8011376:	2a24      	cmp	r2, #36	; 0x24
 8011378:	d003      	beq.n	8011382 <_realloc_r+0x28a>
 801137a:	0028      	movs	r0, r5
 801137c:	3410      	adds	r4, #16
 801137e:	3018      	adds	r0, #24
 8011380:	e7ed      	b.n	801135e <_realloc_r+0x266>
 8011382:	0028      	movs	r0, r5
 8011384:	6923      	ldr	r3, [r4, #16]
 8011386:	3020      	adds	r0, #32
 8011388:	61ab      	str	r3, [r5, #24]
 801138a:	6963      	ldr	r3, [r4, #20]
 801138c:	3418      	adds	r4, #24
 801138e:	61eb      	str	r3, [r5, #28]
 8011390:	e7e5      	b.n	801135e <_realloc_r+0x266>
 8011392:	0021      	movs	r1, r4
 8011394:	f001 fb47 	bl	8012a26 <memmove>
 8011398:	e7e7      	b.n	801136a <_realloc_r+0x272>
 801139a:	9905      	ldr	r1, [sp, #20]
 801139c:	9801      	ldr	r0, [sp, #4]
 801139e:	f7f9 fced 	bl	800ad7c <_malloc_r>
 80113a2:	1e07      	subs	r7, r0, #0
 80113a4:	d100      	bne.n	80113a8 <_realloc_r+0x2b0>
 80113a6:	e76f      	b.n	8011288 <_realloc_r+0x190>
 80113a8:	0023      	movs	r3, r4
 80113aa:	2201      	movs	r2, #1
 80113ac:	3b08      	subs	r3, #8
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	4393      	bics	r3, r2
 80113b2:	9a04      	ldr	r2, [sp, #16]
 80113b4:	18d3      	adds	r3, r2, r3
 80113b6:	0002      	movs	r2, r0
 80113b8:	3a08      	subs	r2, #8
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d105      	bne.n	80113ca <_realloc_r+0x2d2>
 80113be:	685e      	ldr	r6, [r3, #4]
 80113c0:	2303      	movs	r3, #3
 80113c2:	439e      	bics	r6, r3
 80113c4:	9b03      	ldr	r3, [sp, #12]
 80113c6:	18f6      	adds	r6, r6, r3
 80113c8:	e6fb      	b.n	80111c2 <_realloc_r+0xca>
 80113ca:	9a03      	ldr	r2, [sp, #12]
 80113cc:	3a04      	subs	r2, #4
 80113ce:	2a24      	cmp	r2, #36	; 0x24
 80113d0:	d829      	bhi.n	8011426 <_realloc_r+0x32e>
 80113d2:	0003      	movs	r3, r0
 80113d4:	0021      	movs	r1, r4
 80113d6:	2a13      	cmp	r2, #19
 80113d8:	d908      	bls.n	80113ec <_realloc_r+0x2f4>
 80113da:	6823      	ldr	r3, [r4, #0]
 80113dc:	6003      	str	r3, [r0, #0]
 80113de:	6863      	ldr	r3, [r4, #4]
 80113e0:	6043      	str	r3, [r0, #4]
 80113e2:	2a1b      	cmp	r2, #27
 80113e4:	d80d      	bhi.n	8011402 <_realloc_r+0x30a>
 80113e6:	0003      	movs	r3, r0
 80113e8:	3108      	adds	r1, #8
 80113ea:	3308      	adds	r3, #8
 80113ec:	680a      	ldr	r2, [r1, #0]
 80113ee:	601a      	str	r2, [r3, #0]
 80113f0:	684a      	ldr	r2, [r1, #4]
 80113f2:	605a      	str	r2, [r3, #4]
 80113f4:	688a      	ldr	r2, [r1, #8]
 80113f6:	609a      	str	r2, [r3, #8]
 80113f8:	0021      	movs	r1, r4
 80113fa:	9801      	ldr	r0, [sp, #4]
 80113fc:	f7fb f89e 	bl	800c53c <_free_r>
 8011400:	e742      	b.n	8011288 <_realloc_r+0x190>
 8011402:	68a3      	ldr	r3, [r4, #8]
 8011404:	6083      	str	r3, [r0, #8]
 8011406:	68e3      	ldr	r3, [r4, #12]
 8011408:	60c3      	str	r3, [r0, #12]
 801140a:	2a24      	cmp	r2, #36	; 0x24
 801140c:	d003      	beq.n	8011416 <_realloc_r+0x31e>
 801140e:	0003      	movs	r3, r0
 8011410:	3110      	adds	r1, #16
 8011412:	3310      	adds	r3, #16
 8011414:	e7ea      	b.n	80113ec <_realloc_r+0x2f4>
 8011416:	6923      	ldr	r3, [r4, #16]
 8011418:	3118      	adds	r1, #24
 801141a:	6103      	str	r3, [r0, #16]
 801141c:	0003      	movs	r3, r0
 801141e:	6962      	ldr	r2, [r4, #20]
 8011420:	3318      	adds	r3, #24
 8011422:	6142      	str	r2, [r0, #20]
 8011424:	e7e2      	b.n	80113ec <_realloc_r+0x2f4>
 8011426:	0021      	movs	r1, r4
 8011428:	f001 fafd 	bl	8012a26 <memmove>
 801142c:	e7e4      	b.n	80113f8 <_realloc_r+0x300>
 801142e:	9e03      	ldr	r6, [sp, #12]
 8011430:	e6c7      	b.n	80111c2 <_realloc_r+0xca>
 8011432:	9902      	ldr	r1, [sp, #8]
 8011434:	4306      	orrs	r6, r0
 8011436:	604e      	str	r6, [r1, #4]
 8011438:	6851      	ldr	r1, [r2, #4]
 801143a:	430b      	orrs	r3, r1
 801143c:	6053      	str	r3, [r2, #4]
 801143e:	e6da      	b.n	80111f6 <_realloc_r+0xfe>
 8011440:	2000002c 	.word	0x2000002c

08011444 <_strtoul_l.constprop.0>:
 8011444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011446:	b087      	sub	sp, #28
 8011448:	9202      	str	r2, [sp, #8]
 801144a:	4a3e      	ldr	r2, [pc, #248]	; (8011544 <_strtoul_l.constprop.0+0x100>)
 801144c:	001e      	movs	r6, r3
 801144e:	9101      	str	r1, [sp, #4]
 8011450:	000b      	movs	r3, r1
 8011452:	4694      	mov	ip, r2
 8011454:	2108      	movs	r1, #8
 8011456:	9005      	str	r0, [sp, #20]
 8011458:	001a      	movs	r2, r3
 801145a:	4660      	mov	r0, ip
 801145c:	7814      	ldrb	r4, [r2, #0]
 801145e:	3301      	adds	r3, #1
 8011460:	5d00      	ldrb	r0, [r0, r4]
 8011462:	001d      	movs	r5, r3
 8011464:	0007      	movs	r7, r0
 8011466:	400f      	ands	r7, r1
 8011468:	4208      	tst	r0, r1
 801146a:	d1f5      	bne.n	8011458 <_strtoul_l.constprop.0+0x14>
 801146c:	2c2d      	cmp	r4, #45	; 0x2d
 801146e:	d13d      	bne.n	80114ec <_strtoul_l.constprop.0+0xa8>
 8011470:	2701      	movs	r7, #1
 8011472:	781c      	ldrb	r4, [r3, #0]
 8011474:	1c95      	adds	r5, r2, #2
 8011476:	2e00      	cmp	r6, #0
 8011478:	d05f      	beq.n	801153a <_strtoul_l.constprop.0+0xf6>
 801147a:	2e10      	cmp	r6, #16
 801147c:	d109      	bne.n	8011492 <_strtoul_l.constprop.0+0x4e>
 801147e:	2c30      	cmp	r4, #48	; 0x30
 8011480:	d107      	bne.n	8011492 <_strtoul_l.constprop.0+0x4e>
 8011482:	2220      	movs	r2, #32
 8011484:	782b      	ldrb	r3, [r5, #0]
 8011486:	4393      	bics	r3, r2
 8011488:	2b58      	cmp	r3, #88	; 0x58
 801148a:	d151      	bne.n	8011530 <_strtoul_l.constprop.0+0xec>
 801148c:	2610      	movs	r6, #16
 801148e:	786c      	ldrb	r4, [r5, #1]
 8011490:	3502      	adds	r5, #2
 8011492:	2001      	movs	r0, #1
 8011494:	0031      	movs	r1, r6
 8011496:	4240      	negs	r0, r0
 8011498:	f7ee fe50 	bl	800013c <__udivsi3>
 801149c:	9003      	str	r0, [sp, #12]
 801149e:	2001      	movs	r0, #1
 80114a0:	0031      	movs	r1, r6
 80114a2:	4240      	negs	r0, r0
 80114a4:	f7ee fed0 	bl	8000248 <__aeabi_uidivmod>
 80114a8:	2300      	movs	r3, #0
 80114aa:	2201      	movs	r2, #1
 80114ac:	9104      	str	r1, [sp, #16]
 80114ae:	2101      	movs	r1, #1
 80114b0:	0018      	movs	r0, r3
 80114b2:	4694      	mov	ip, r2
 80114b4:	4249      	negs	r1, r1
 80114b6:	0022      	movs	r2, r4
 80114b8:	3a30      	subs	r2, #48	; 0x30
 80114ba:	2a09      	cmp	r2, #9
 80114bc:	d903      	bls.n	80114c6 <_strtoul_l.constprop.0+0x82>
 80114be:	3a11      	subs	r2, #17
 80114c0:	2a19      	cmp	r2, #25
 80114c2:	d818      	bhi.n	80114f6 <_strtoul_l.constprop.0+0xb2>
 80114c4:	320a      	adds	r2, #10
 80114c6:	4296      	cmp	r6, r2
 80114c8:	dd19      	ble.n	80114fe <_strtoul_l.constprop.0+0xba>
 80114ca:	1c5c      	adds	r4, r3, #1
 80114cc:	d00b      	beq.n	80114e6 <_strtoul_l.constprop.0+0xa2>
 80114ce:	9c03      	ldr	r4, [sp, #12]
 80114d0:	000b      	movs	r3, r1
 80114d2:	4284      	cmp	r4, r0
 80114d4:	d307      	bcc.n	80114e6 <_strtoul_l.constprop.0+0xa2>
 80114d6:	d103      	bne.n	80114e0 <_strtoul_l.constprop.0+0x9c>
 80114d8:	9c04      	ldr	r4, [sp, #16]
 80114da:	000b      	movs	r3, r1
 80114dc:	4294      	cmp	r4, r2
 80114de:	db02      	blt.n	80114e6 <_strtoul_l.constprop.0+0xa2>
 80114e0:	4663      	mov	r3, ip
 80114e2:	4370      	muls	r0, r6
 80114e4:	1810      	adds	r0, r2, r0
 80114e6:	782c      	ldrb	r4, [r5, #0]
 80114e8:	3501      	adds	r5, #1
 80114ea:	e7e4      	b.n	80114b6 <_strtoul_l.constprop.0+0x72>
 80114ec:	2c2b      	cmp	r4, #43	; 0x2b
 80114ee:	d1c2      	bne.n	8011476 <_strtoul_l.constprop.0+0x32>
 80114f0:	781c      	ldrb	r4, [r3, #0]
 80114f2:	1c95      	adds	r5, r2, #2
 80114f4:	e7bf      	b.n	8011476 <_strtoul_l.constprop.0+0x32>
 80114f6:	0022      	movs	r2, r4
 80114f8:	3a61      	subs	r2, #97	; 0x61
 80114fa:	2a19      	cmp	r2, #25
 80114fc:	d9e2      	bls.n	80114c4 <_strtoul_l.constprop.0+0x80>
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	d108      	bne.n	8011514 <_strtoul_l.constprop.0+0xd0>
 8011502:	2222      	movs	r2, #34	; 0x22
 8011504:	9905      	ldr	r1, [sp, #20]
 8011506:	0018      	movs	r0, r3
 8011508:	600a      	str	r2, [r1, #0]
 801150a:	9a02      	ldr	r2, [sp, #8]
 801150c:	2a00      	cmp	r2, #0
 801150e:	d109      	bne.n	8011524 <_strtoul_l.constprop.0+0xe0>
 8011510:	b007      	add	sp, #28
 8011512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011514:	2f00      	cmp	r7, #0
 8011516:	d000      	beq.n	801151a <_strtoul_l.constprop.0+0xd6>
 8011518:	4240      	negs	r0, r0
 801151a:	9a02      	ldr	r2, [sp, #8]
 801151c:	2a00      	cmp	r2, #0
 801151e:	d0f7      	beq.n	8011510 <_strtoul_l.constprop.0+0xcc>
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <_strtoul_l.constprop.0+0xe4>
 8011524:	1e6b      	subs	r3, r5, #1
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	9b02      	ldr	r3, [sp, #8]
 801152a:	9a01      	ldr	r2, [sp, #4]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	e7ef      	b.n	8011510 <_strtoul_l.constprop.0+0xcc>
 8011530:	2430      	movs	r4, #48	; 0x30
 8011532:	2e00      	cmp	r6, #0
 8011534:	d1ad      	bne.n	8011492 <_strtoul_l.constprop.0+0x4e>
 8011536:	3608      	adds	r6, #8
 8011538:	e7ab      	b.n	8011492 <_strtoul_l.constprop.0+0x4e>
 801153a:	2c30      	cmp	r4, #48	; 0x30
 801153c:	d0a1      	beq.n	8011482 <_strtoul_l.constprop.0+0x3e>
 801153e:	260a      	movs	r6, #10
 8011540:	e7a7      	b.n	8011492 <_strtoul_l.constprop.0+0x4e>
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	080147d9 	.word	0x080147d9

08011548 <_strtoul_r>:
 8011548:	b510      	push	{r4, lr}
 801154a:	f7ff ff7b 	bl	8011444 <_strtoul_l.constprop.0>
 801154e:	bd10      	pop	{r4, pc}

08011550 <_strtoll_l.constprop.0>:
 8011550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011552:	b08d      	sub	sp, #52	; 0x34
 8011554:	9203      	str	r2, [sp, #12]
 8011556:	4a53      	ldr	r2, [pc, #332]	; (80116a4 <_strtoll_l.constprop.0+0x154>)
 8011558:	001e      	movs	r6, r3
 801155a:	9102      	str	r1, [sp, #8]
 801155c:	000b      	movs	r3, r1
 801155e:	4694      	mov	ip, r2
 8011560:	2108      	movs	r1, #8
 8011562:	900a      	str	r0, [sp, #40]	; 0x28
 8011564:	001a      	movs	r2, r3
 8011566:	4660      	mov	r0, ip
 8011568:	7814      	ldrb	r4, [r2, #0]
 801156a:	3301      	adds	r3, #1
 801156c:	5d00      	ldrb	r0, [r0, r4]
 801156e:	001d      	movs	r5, r3
 8011570:	0007      	movs	r7, r0
 8011572:	400f      	ands	r7, r1
 8011574:	4208      	tst	r0, r1
 8011576:	d1f5      	bne.n	8011564 <_strtoll_l.constprop.0+0x14>
 8011578:	2c2d      	cmp	r4, #45	; 0x2d
 801157a:	d153      	bne.n	8011624 <_strtoll_l.constprop.0+0xd4>
 801157c:	781c      	ldrb	r4, [r3, #0]
 801157e:	2301      	movs	r3, #1
 8011580:	1c95      	adds	r5, r2, #2
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	2e00      	cmp	r6, #0
 8011586:	d100      	bne.n	801158a <_strtoll_l.constprop.0+0x3a>
 8011588:	e086      	b.n	8011698 <_strtoll_l.constprop.0+0x148>
 801158a:	2e10      	cmp	r6, #16
 801158c:	d10a      	bne.n	80115a4 <_strtoll_l.constprop.0+0x54>
 801158e:	2c30      	cmp	r4, #48	; 0x30
 8011590:	d108      	bne.n	80115a4 <_strtoll_l.constprop.0+0x54>
 8011592:	2220      	movs	r2, #32
 8011594:	782b      	ldrb	r3, [r5, #0]
 8011596:	4393      	bics	r3, r2
 8011598:	2b58      	cmp	r3, #88	; 0x58
 801159a:	d000      	beq.n	801159e <_strtoll_l.constprop.0+0x4e>
 801159c:	e076      	b.n	801168c <_strtoll_l.constprop.0+0x13c>
 801159e:	2610      	movs	r6, #16
 80115a0:	786c      	ldrb	r4, [r5, #1]
 80115a2:	3502      	adds	r5, #2
 80115a4:	2001      	movs	r0, #1
 80115a6:	2300      	movs	r3, #0
 80115a8:	493f      	ldr	r1, [pc, #252]	; (80116a8 <_strtoll_l.constprop.0+0x158>)
 80115aa:	9a01      	ldr	r2, [sp, #4]
 80115ac:	4240      	negs	r0, r0
 80115ae:	1812      	adds	r2, r2, r0
 80115b0:	414b      	adcs	r3, r1
 80115b2:	9204      	str	r2, [sp, #16]
 80115b4:	9305      	str	r3, [sp, #20]
 80115b6:	9804      	ldr	r0, [sp, #16]
 80115b8:	9905      	ldr	r1, [sp, #20]
 80115ba:	17f3      	asrs	r3, r6, #31
 80115bc:	0032      	movs	r2, r6
 80115be:	930b      	str	r3, [sp, #44]	; 0x2c
 80115c0:	f7ee ff70 	bl	80004a4 <__aeabi_uldivmod>
 80115c4:	2300      	movs	r3, #0
 80115c6:	000f      	movs	r7, r1
 80115c8:	9008      	str	r0, [sp, #32]
 80115ca:	2100      	movs	r1, #0
 80115cc:	2000      	movs	r0, #0
 80115ce:	9209      	str	r2, [sp, #36]	; 0x24
 80115d0:	0022      	movs	r2, r4
 80115d2:	3a30      	subs	r2, #48	; 0x30
 80115d4:	2a09      	cmp	r2, #9
 80115d6:	d82b      	bhi.n	8011630 <_strtoll_l.constprop.0+0xe0>
 80115d8:	0014      	movs	r4, r2
 80115da:	42a6      	cmp	r6, r4
 80115dc:	dd37      	ble.n	801164e <_strtoll_l.constprop.0+0xfe>
 80115de:	1c5a      	adds	r2, r3, #1
 80115e0:	d01d      	beq.n	801161e <_strtoll_l.constprop.0+0xce>
 80115e2:	42b9      	cmp	r1, r7
 80115e4:	d830      	bhi.n	8011648 <_strtoll_l.constprop.0+0xf8>
 80115e6:	d102      	bne.n	80115ee <_strtoll_l.constprop.0+0x9e>
 80115e8:	9b08      	ldr	r3, [sp, #32]
 80115ea:	4298      	cmp	r0, r3
 80115ec:	d82c      	bhi.n	8011648 <_strtoll_l.constprop.0+0xf8>
 80115ee:	9b08      	ldr	r3, [sp, #32]
 80115f0:	4283      	cmp	r3, r0
 80115f2:	d106      	bne.n	8011602 <_strtoll_l.constprop.0+0xb2>
 80115f4:	428f      	cmp	r7, r1
 80115f6:	d104      	bne.n	8011602 <_strtoll_l.constprop.0+0xb2>
 80115f8:	2301      	movs	r3, #1
 80115fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115fc:	425b      	negs	r3, r3
 80115fe:	42a2      	cmp	r2, r4
 8011600:	db0d      	blt.n	801161e <_strtoll_l.constprop.0+0xce>
 8011602:	000b      	movs	r3, r1
 8011604:	0002      	movs	r2, r0
 8011606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011608:	0030      	movs	r0, r6
 801160a:	f7ee ff6b 	bl	80004e4 <__aeabi_lmul>
 801160e:	17e3      	asrs	r3, r4, #31
 8011610:	9406      	str	r4, [sp, #24]
 8011612:	9307      	str	r3, [sp, #28]
 8011614:	9b06      	ldr	r3, [sp, #24]
 8011616:	9c07      	ldr	r4, [sp, #28]
 8011618:	18c0      	adds	r0, r0, r3
 801161a:	4161      	adcs	r1, r4
 801161c:	2301      	movs	r3, #1
 801161e:	782c      	ldrb	r4, [r5, #0]
 8011620:	3501      	adds	r5, #1
 8011622:	e7d5      	b.n	80115d0 <_strtoll_l.constprop.0+0x80>
 8011624:	9701      	str	r7, [sp, #4]
 8011626:	2c2b      	cmp	r4, #43	; 0x2b
 8011628:	d1ac      	bne.n	8011584 <_strtoll_l.constprop.0+0x34>
 801162a:	781c      	ldrb	r4, [r3, #0]
 801162c:	1c95      	adds	r5, r2, #2
 801162e:	e7a9      	b.n	8011584 <_strtoll_l.constprop.0+0x34>
 8011630:	0022      	movs	r2, r4
 8011632:	3a41      	subs	r2, #65	; 0x41
 8011634:	2a19      	cmp	r2, #25
 8011636:	d801      	bhi.n	801163c <_strtoll_l.constprop.0+0xec>
 8011638:	3c37      	subs	r4, #55	; 0x37
 801163a:	e7ce      	b.n	80115da <_strtoll_l.constprop.0+0x8a>
 801163c:	0022      	movs	r2, r4
 801163e:	3a61      	subs	r2, #97	; 0x61
 8011640:	2a19      	cmp	r2, #25
 8011642:	d804      	bhi.n	801164e <_strtoll_l.constprop.0+0xfe>
 8011644:	3c57      	subs	r4, #87	; 0x57
 8011646:	e7c8      	b.n	80115da <_strtoll_l.constprop.0+0x8a>
 8011648:	2301      	movs	r3, #1
 801164a:	425b      	negs	r3, r3
 801164c:	e7e7      	b.n	801161e <_strtoll_l.constprop.0+0xce>
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	d109      	bne.n	8011666 <_strtoll_l.constprop.0+0x116>
 8011652:	9804      	ldr	r0, [sp, #16]
 8011654:	9905      	ldr	r1, [sp, #20]
 8011656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011658:	3323      	adds	r3, #35	; 0x23
 801165a:	6013      	str	r3, [r2, #0]
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10e      	bne.n	8011680 <_strtoll_l.constprop.0+0x130>
 8011662:	b00d      	add	sp, #52	; 0x34
 8011664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011666:	9a01      	ldr	r2, [sp, #4]
 8011668:	2a00      	cmp	r2, #0
 801166a:	d004      	beq.n	8011676 <_strtoll_l.constprop.0+0x126>
 801166c:	0006      	movs	r6, r0
 801166e:	000f      	movs	r7, r1
 8011670:	2100      	movs	r1, #0
 8011672:	4270      	negs	r0, r6
 8011674:	41b9      	sbcs	r1, r7
 8011676:	9a03      	ldr	r2, [sp, #12]
 8011678:	2a00      	cmp	r2, #0
 801167a:	d0f2      	beq.n	8011662 <_strtoll_l.constprop.0+0x112>
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <_strtoll_l.constprop.0+0x134>
 8011680:	1e6b      	subs	r3, r5, #1
 8011682:	9302      	str	r3, [sp, #8]
 8011684:	9b03      	ldr	r3, [sp, #12]
 8011686:	9a02      	ldr	r2, [sp, #8]
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	e7ea      	b.n	8011662 <_strtoll_l.constprop.0+0x112>
 801168c:	2430      	movs	r4, #48	; 0x30
 801168e:	2e00      	cmp	r6, #0
 8011690:	d000      	beq.n	8011694 <_strtoll_l.constprop.0+0x144>
 8011692:	e787      	b.n	80115a4 <_strtoll_l.constprop.0+0x54>
 8011694:	3608      	adds	r6, #8
 8011696:	e785      	b.n	80115a4 <_strtoll_l.constprop.0+0x54>
 8011698:	2c30      	cmp	r4, #48	; 0x30
 801169a:	d100      	bne.n	801169e <_strtoll_l.constprop.0+0x14e>
 801169c:	e779      	b.n	8011592 <_strtoll_l.constprop.0+0x42>
 801169e:	260a      	movs	r6, #10
 80116a0:	e780      	b.n	80115a4 <_strtoll_l.constprop.0+0x54>
 80116a2:	46c0      	nop			; (mov r8, r8)
 80116a4:	080147d9 	.word	0x080147d9
 80116a8:	7fffffff 	.word	0x7fffffff

080116ac <_strtoll_r>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	f7ff ff4f 	bl	8011550 <_strtoll_l.constprop.0>
 80116b2:	bd10      	pop	{r4, pc}

080116b4 <_strtoull_l.constprop.0>:
 80116b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116b6:	b08b      	sub	sp, #44	; 0x2c
 80116b8:	9202      	str	r2, [sp, #8]
 80116ba:	4a54      	ldr	r2, [pc, #336]	; (801180c <_strtoull_l.constprop.0+0x158>)
 80116bc:	001e      	movs	r6, r3
 80116be:	9101      	str	r1, [sp, #4]
 80116c0:	000b      	movs	r3, r1
 80116c2:	4694      	mov	ip, r2
 80116c4:	2108      	movs	r1, #8
 80116c6:	9009      	str	r0, [sp, #36]	; 0x24
 80116c8:	001a      	movs	r2, r3
 80116ca:	4660      	mov	r0, ip
 80116cc:	7814      	ldrb	r4, [r2, #0]
 80116ce:	3301      	adds	r3, #1
 80116d0:	5d00      	ldrb	r0, [r0, r4]
 80116d2:	001d      	movs	r5, r3
 80116d4:	0007      	movs	r7, r0
 80116d6:	400f      	ands	r7, r1
 80116d8:	4208      	tst	r0, r1
 80116da:	d1f5      	bne.n	80116c8 <_strtoull_l.constprop.0+0x14>
 80116dc:	2c2d      	cmp	r4, #45	; 0x2d
 80116de:	d154      	bne.n	801178a <_strtoull_l.constprop.0+0xd6>
 80116e0:	781c      	ldrb	r4, [r3, #0]
 80116e2:	2301      	movs	r3, #1
 80116e4:	1c95      	adds	r5, r2, #2
 80116e6:	9306      	str	r3, [sp, #24]
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	d100      	bne.n	80116ee <_strtoull_l.constprop.0+0x3a>
 80116ec:	e088      	b.n	8011800 <_strtoull_l.constprop.0+0x14c>
 80116ee:	2e10      	cmp	r6, #16
 80116f0:	d10a      	bne.n	8011708 <_strtoull_l.constprop.0+0x54>
 80116f2:	2c30      	cmp	r4, #48	; 0x30
 80116f4:	d108      	bne.n	8011708 <_strtoull_l.constprop.0+0x54>
 80116f6:	2220      	movs	r2, #32
 80116f8:	782b      	ldrb	r3, [r5, #0]
 80116fa:	4393      	bics	r3, r2
 80116fc:	2b58      	cmp	r3, #88	; 0x58
 80116fe:	d000      	beq.n	8011702 <_strtoull_l.constprop.0+0x4e>
 8011700:	e078      	b.n	80117f4 <_strtoull_l.constprop.0+0x140>
 8011702:	2610      	movs	r6, #16
 8011704:	786c      	ldrb	r4, [r5, #1]
 8011706:	3502      	adds	r5, #2
 8011708:	17f7      	asrs	r7, r6, #31
 801170a:	0032      	movs	r2, r6
 801170c:	003b      	movs	r3, r7
 801170e:	2001      	movs	r0, #1
 8011710:	4240      	negs	r0, r0
 8011712:	17c1      	asrs	r1, r0, #31
 8011714:	f7ee fec6 	bl	80004a4 <__aeabi_uldivmod>
 8011718:	0032      	movs	r2, r6
 801171a:	9007      	str	r0, [sp, #28]
 801171c:	9103      	str	r1, [sp, #12]
 801171e:	003b      	movs	r3, r7
 8011720:	2001      	movs	r0, #1
 8011722:	4240      	negs	r0, r0
 8011724:	17c1      	asrs	r1, r0, #31
 8011726:	f7ee febd 	bl	80004a4 <__aeabi_uldivmod>
 801172a:	2300      	movs	r3, #0
 801172c:	2000      	movs	r0, #0
 801172e:	2100      	movs	r1, #0
 8011730:	9208      	str	r2, [sp, #32]
 8011732:	0022      	movs	r2, r4
 8011734:	3a30      	subs	r2, #48	; 0x30
 8011736:	2a09      	cmp	r2, #9
 8011738:	d82d      	bhi.n	8011796 <_strtoull_l.constprop.0+0xe2>
 801173a:	0014      	movs	r4, r2
 801173c:	42a6      	cmp	r6, r4
 801173e:	dd39      	ble.n	80117b4 <_strtoull_l.constprop.0+0x100>
 8011740:	1c5a      	adds	r2, r3, #1
 8011742:	d01f      	beq.n	8011784 <_strtoull_l.constprop.0+0xd0>
 8011744:	9b03      	ldr	r3, [sp, #12]
 8011746:	4299      	cmp	r1, r3
 8011748:	d831      	bhi.n	80117ae <_strtoull_l.constprop.0+0xfa>
 801174a:	d102      	bne.n	8011752 <_strtoull_l.constprop.0+0x9e>
 801174c:	9b07      	ldr	r3, [sp, #28]
 801174e:	4298      	cmp	r0, r3
 8011750:	d82d      	bhi.n	80117ae <_strtoull_l.constprop.0+0xfa>
 8011752:	9b07      	ldr	r3, [sp, #28]
 8011754:	4283      	cmp	r3, r0
 8011756:	d107      	bne.n	8011768 <_strtoull_l.constprop.0+0xb4>
 8011758:	9b03      	ldr	r3, [sp, #12]
 801175a:	428b      	cmp	r3, r1
 801175c:	d104      	bne.n	8011768 <_strtoull_l.constprop.0+0xb4>
 801175e:	2301      	movs	r3, #1
 8011760:	9a08      	ldr	r2, [sp, #32]
 8011762:	425b      	negs	r3, r3
 8011764:	42a2      	cmp	r2, r4
 8011766:	db0d      	blt.n	8011784 <_strtoull_l.constprop.0+0xd0>
 8011768:	000b      	movs	r3, r1
 801176a:	0002      	movs	r2, r0
 801176c:	0039      	movs	r1, r7
 801176e:	0030      	movs	r0, r6
 8011770:	f7ee feb8 	bl	80004e4 <__aeabi_lmul>
 8011774:	17e3      	asrs	r3, r4, #31
 8011776:	9404      	str	r4, [sp, #16]
 8011778:	9305      	str	r3, [sp, #20]
 801177a:	9b04      	ldr	r3, [sp, #16]
 801177c:	9c05      	ldr	r4, [sp, #20]
 801177e:	18c0      	adds	r0, r0, r3
 8011780:	4161      	adcs	r1, r4
 8011782:	2301      	movs	r3, #1
 8011784:	782c      	ldrb	r4, [r5, #0]
 8011786:	3501      	adds	r5, #1
 8011788:	e7d3      	b.n	8011732 <_strtoull_l.constprop.0+0x7e>
 801178a:	9706      	str	r7, [sp, #24]
 801178c:	2c2b      	cmp	r4, #43	; 0x2b
 801178e:	d1ab      	bne.n	80116e8 <_strtoull_l.constprop.0+0x34>
 8011790:	781c      	ldrb	r4, [r3, #0]
 8011792:	1c95      	adds	r5, r2, #2
 8011794:	e7a8      	b.n	80116e8 <_strtoull_l.constprop.0+0x34>
 8011796:	0022      	movs	r2, r4
 8011798:	3a41      	subs	r2, #65	; 0x41
 801179a:	2a19      	cmp	r2, #25
 801179c:	d801      	bhi.n	80117a2 <_strtoull_l.constprop.0+0xee>
 801179e:	3c37      	subs	r4, #55	; 0x37
 80117a0:	e7cc      	b.n	801173c <_strtoull_l.constprop.0+0x88>
 80117a2:	0022      	movs	r2, r4
 80117a4:	3a61      	subs	r2, #97	; 0x61
 80117a6:	2a19      	cmp	r2, #25
 80117a8:	d804      	bhi.n	80117b4 <_strtoull_l.constprop.0+0x100>
 80117aa:	3c57      	subs	r4, #87	; 0x57
 80117ac:	e7c6      	b.n	801173c <_strtoull_l.constprop.0+0x88>
 80117ae:	2301      	movs	r3, #1
 80117b0:	425b      	negs	r3, r3
 80117b2:	e7e7      	b.n	8011784 <_strtoull_l.constprop.0+0xd0>
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	d10a      	bne.n	80117ce <_strtoull_l.constprop.0+0x11a>
 80117b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117ba:	3323      	adds	r3, #35	; 0x23
 80117bc:	6013      	str	r3, [r2, #0]
 80117be:	9b02      	ldr	r3, [sp, #8]
 80117c0:	2001      	movs	r0, #1
 80117c2:	4240      	negs	r0, r0
 80117c4:	17c1      	asrs	r1, r0, #31
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10e      	bne.n	80117e8 <_strtoull_l.constprop.0+0x134>
 80117ca:	b00b      	add	sp, #44	; 0x2c
 80117cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ce:	9a06      	ldr	r2, [sp, #24]
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	d004      	beq.n	80117de <_strtoull_l.constprop.0+0x12a>
 80117d4:	0006      	movs	r6, r0
 80117d6:	000f      	movs	r7, r1
 80117d8:	2100      	movs	r1, #0
 80117da:	4270      	negs	r0, r6
 80117dc:	41b9      	sbcs	r1, r7
 80117de:	9a02      	ldr	r2, [sp, #8]
 80117e0:	2a00      	cmp	r2, #0
 80117e2:	d0f2      	beq.n	80117ca <_strtoull_l.constprop.0+0x116>
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <_strtoull_l.constprop.0+0x138>
 80117e8:	1e6b      	subs	r3, r5, #1
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	9b02      	ldr	r3, [sp, #8]
 80117ee:	9a01      	ldr	r2, [sp, #4]
 80117f0:	601a      	str	r2, [r3, #0]
 80117f2:	e7ea      	b.n	80117ca <_strtoull_l.constprop.0+0x116>
 80117f4:	2430      	movs	r4, #48	; 0x30
 80117f6:	2e00      	cmp	r6, #0
 80117f8:	d000      	beq.n	80117fc <_strtoull_l.constprop.0+0x148>
 80117fa:	e785      	b.n	8011708 <_strtoull_l.constprop.0+0x54>
 80117fc:	3608      	adds	r6, #8
 80117fe:	e783      	b.n	8011708 <_strtoull_l.constprop.0+0x54>
 8011800:	2c30      	cmp	r4, #48	; 0x30
 8011802:	d100      	bne.n	8011806 <_strtoull_l.constprop.0+0x152>
 8011804:	e777      	b.n	80116f6 <_strtoull_l.constprop.0+0x42>
 8011806:	260a      	movs	r6, #10
 8011808:	e77e      	b.n	8011708 <_strtoull_l.constprop.0+0x54>
 801180a:	46c0      	nop			; (mov r8, r8)
 801180c:	080147d9 	.word	0x080147d9

08011810 <_strtoull_r>:
 8011810:	b510      	push	{r4, lr}
 8011812:	f7ff ff4f 	bl	80116b4 <_strtoull_l.constprop.0>
 8011816:	bd10      	pop	{r4, pc}

08011818 <_mbrtowc_r>:
 8011818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801181a:	0004      	movs	r4, r0
 801181c:	0010      	movs	r0, r2
 801181e:	4a0b      	ldr	r2, [pc, #44]	; (801184c <_mbrtowc_r+0x34>)
 8011820:	9d06      	ldr	r5, [sp, #24]
 8011822:	32e4      	adds	r2, #228	; 0xe4
 8011824:	6816      	ldr	r6, [r2, #0]
 8011826:	2800      	cmp	r0, #0
 8011828:	d10c      	bne.n	8011844 <_mbrtowc_r+0x2c>
 801182a:	2301      	movs	r3, #1
 801182c:	0001      	movs	r1, r0
 801182e:	4a08      	ldr	r2, [pc, #32]	; (8011850 <_mbrtowc_r+0x38>)
 8011830:	9500      	str	r5, [sp, #0]
 8011832:	0020      	movs	r0, r4
 8011834:	47b0      	blx	r6
 8011836:	1c43      	adds	r3, r0, #1
 8011838:	d103      	bne.n	8011842 <_mbrtowc_r+0x2a>
 801183a:	2300      	movs	r3, #0
 801183c:	602b      	str	r3, [r5, #0]
 801183e:	338a      	adds	r3, #138	; 0x8a
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011844:	0002      	movs	r2, r0
 8011846:	9500      	str	r5, [sp, #0]
 8011848:	e7f3      	b.n	8011832 <_mbrtowc_r+0x1a>
 801184a:	46c0      	nop			; (mov r8, r8)
 801184c:	20000448 	.word	0x20000448
 8011850:	08014b63 	.word	0x08014b63

08011854 <iswspace>:
 8011854:	b510      	push	{r4, lr}
 8011856:	2100      	movs	r1, #0
 8011858:	f000 f802 	bl	8011860 <iswspace_l>
 801185c:	bd10      	pop	{r4, pc}
	...

08011860 <iswspace_l>:
 8011860:	0003      	movs	r3, r0
 8011862:	2000      	movs	r0, #0
 8011864:	2bff      	cmp	r3, #255	; 0xff
 8011866:	d803      	bhi.n	8011870 <iswspace_l+0x10>
 8011868:	4a02      	ldr	r2, [pc, #8]	; (8011874 <iswspace_l+0x14>)
 801186a:	5cd0      	ldrb	r0, [r2, r3]
 801186c:	2308      	movs	r3, #8
 801186e:	4018      	ands	r0, r3
 8011870:	4770      	bx	lr
 8011872:	46c0      	nop			; (mov r8, r8)
 8011874:	080147d9 	.word	0x080147d9

08011878 <fiprintf>:
 8011878:	b40e      	push	{r1, r2, r3}
 801187a:	b517      	push	{r0, r1, r2, r4, lr}
 801187c:	4c05      	ldr	r4, [pc, #20]	; (8011894 <fiprintf+0x1c>)
 801187e:	ab05      	add	r3, sp, #20
 8011880:	cb04      	ldmia	r3!, {r2}
 8011882:	0001      	movs	r1, r0
 8011884:	6820      	ldr	r0, [r4, #0]
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	f000 f954 	bl	8011b34 <_vfiprintf_r>
 801188c:	bc1e      	pop	{r1, r2, r3, r4}
 801188e:	bc08      	pop	{r3}
 8011890:	b003      	add	sp, #12
 8011892:	4718      	bx	r3
 8011894:	200006d8 	.word	0x200006d8

08011898 <__ssprint_r>:
 8011898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801189a:	6813      	ldr	r3, [r2, #0]
 801189c:	b087      	sub	sp, #28
 801189e:	0017      	movs	r7, r2
 80118a0:	9303      	str	r3, [sp, #12]
 80118a2:	6893      	ldr	r3, [r2, #8]
 80118a4:	2200      	movs	r2, #0
 80118a6:	000c      	movs	r4, r1
 80118a8:	9005      	str	r0, [sp, #20]
 80118aa:	9202      	str	r2, [sp, #8]
 80118ac:	9201      	str	r2, [sp, #4]
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d10d      	bne.n	80118ce <__ssprint_r+0x36>
 80118b2:	2000      	movs	r0, #0
 80118b4:	2300      	movs	r3, #0
 80118b6:	607b      	str	r3, [r7, #4]
 80118b8:	b007      	add	sp, #28
 80118ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118bc:	9b03      	ldr	r3, [sp, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	9302      	str	r3, [sp, #8]
 80118c2:	9b03      	ldr	r3, [sp, #12]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	9301      	str	r3, [sp, #4]
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	3308      	adds	r3, #8
 80118cc:	9303      	str	r3, [sp, #12]
 80118ce:	9a01      	ldr	r2, [sp, #4]
 80118d0:	68a6      	ldr	r6, [r4, #8]
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d0f1      	beq.n	80118bc <__ssprint_r+0x24>
 80118d8:	42b2      	cmp	r2, r6
 80118da:	d32e      	bcc.n	801193a <__ssprint_r+0xa2>
 80118dc:	2190      	movs	r1, #144	; 0x90
 80118de:	89a2      	ldrh	r2, [r4, #12]
 80118e0:	00c9      	lsls	r1, r1, #3
 80118e2:	420a      	tst	r2, r1
 80118e4:	d029      	beq.n	801193a <__ssprint_r+0xa2>
 80118e6:	2003      	movs	r0, #3
 80118e8:	6921      	ldr	r1, [r4, #16]
 80118ea:	1a5b      	subs	r3, r3, r1
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	6963      	ldr	r3, [r4, #20]
 80118f0:	4343      	muls	r3, r0
 80118f2:	0fdd      	lsrs	r5, r3, #31
 80118f4:	18ed      	adds	r5, r5, r3
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	9801      	ldr	r0, [sp, #4]
 80118fa:	3301      	adds	r3, #1
 80118fc:	181b      	adds	r3, r3, r0
 80118fe:	106d      	asrs	r5, r5, #1
 8011900:	42ab      	cmp	r3, r5
 8011902:	d900      	bls.n	8011906 <__ssprint_r+0x6e>
 8011904:	001d      	movs	r5, r3
 8011906:	0552      	lsls	r2, r2, #21
 8011908:	d532      	bpl.n	8011970 <__ssprint_r+0xd8>
 801190a:	0029      	movs	r1, r5
 801190c:	9805      	ldr	r0, [sp, #20]
 801190e:	f7f9 fa35 	bl	800ad7c <_malloc_r>
 8011912:	1e06      	subs	r6, r0, #0
 8011914:	d036      	beq.n	8011984 <__ssprint_r+0xec>
 8011916:	9a04      	ldr	r2, [sp, #16]
 8011918:	6921      	ldr	r1, [r4, #16]
 801191a:	f7fa fd94 	bl	800c446 <memcpy>
 801191e:	89a2      	ldrh	r2, [r4, #12]
 8011920:	4b1e      	ldr	r3, [pc, #120]	; (801199c <__ssprint_r+0x104>)
 8011922:	401a      	ands	r2, r3
 8011924:	2380      	movs	r3, #128	; 0x80
 8011926:	4313      	orrs	r3, r2
 8011928:	81a3      	strh	r3, [r4, #12]
 801192a:	9b04      	ldr	r3, [sp, #16]
 801192c:	6126      	str	r6, [r4, #16]
 801192e:	18f6      	adds	r6, r6, r3
 8011930:	6026      	str	r6, [r4, #0]
 8011932:	6165      	str	r5, [r4, #20]
 8011934:	9e01      	ldr	r6, [sp, #4]
 8011936:	1aed      	subs	r5, r5, r3
 8011938:	60a5      	str	r5, [r4, #8]
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	429e      	cmp	r6, r3
 801193e:	d900      	bls.n	8011942 <__ssprint_r+0xaa>
 8011940:	001e      	movs	r6, r3
 8011942:	0032      	movs	r2, r6
 8011944:	9902      	ldr	r1, [sp, #8]
 8011946:	6820      	ldr	r0, [r4, #0]
 8011948:	f001 f86d 	bl	8012a26 <memmove>
 801194c:	9a01      	ldr	r2, [sp, #4]
 801194e:	68a3      	ldr	r3, [r4, #8]
 8011950:	4694      	mov	ip, r2
 8011952:	1b9b      	subs	r3, r3, r6
 8011954:	60a3      	str	r3, [r4, #8]
 8011956:	6823      	ldr	r3, [r4, #0]
 8011958:	199b      	adds	r3, r3, r6
 801195a:	6023      	str	r3, [r4, #0]
 801195c:	9b02      	ldr	r3, [sp, #8]
 801195e:	4463      	add	r3, ip
 8011960:	9302      	str	r3, [sp, #8]
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	1a9b      	subs	r3, r3, r2
 8011966:	60bb      	str	r3, [r7, #8]
 8011968:	d0a3      	beq.n	80118b2 <__ssprint_r+0x1a>
 801196a:	2300      	movs	r3, #0
 801196c:	9301      	str	r3, [sp, #4]
 801196e:	e7ae      	b.n	80118ce <__ssprint_r+0x36>
 8011970:	002a      	movs	r2, r5
 8011972:	9805      	ldr	r0, [sp, #20]
 8011974:	f7ff fbc0 	bl	80110f8 <_realloc_r>
 8011978:	1e06      	subs	r6, r0, #0
 801197a:	d1d6      	bne.n	801192a <__ssprint_r+0x92>
 801197c:	6921      	ldr	r1, [r4, #16]
 801197e:	9805      	ldr	r0, [sp, #20]
 8011980:	f7fa fddc 	bl	800c53c <_free_r>
 8011984:	230c      	movs	r3, #12
 8011986:	9a05      	ldr	r2, [sp, #20]
 8011988:	2001      	movs	r0, #1
 801198a:	6013      	str	r3, [r2, #0]
 801198c:	89a2      	ldrh	r2, [r4, #12]
 801198e:	3334      	adds	r3, #52	; 0x34
 8011990:	4313      	orrs	r3, r2
 8011992:	81a3      	strh	r3, [r4, #12]
 8011994:	2300      	movs	r3, #0
 8011996:	4240      	negs	r0, r0
 8011998:	60bb      	str	r3, [r7, #8]
 801199a:	e78b      	b.n	80118b4 <__ssprint_r+0x1c>
 801199c:	fffffb7f 	.word	0xfffffb7f

080119a0 <_sungetc_r>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	0014      	movs	r4, r2
 80119a4:	1c4b      	adds	r3, r1, #1
 80119a6:	d103      	bne.n	80119b0 <_sungetc_r+0x10>
 80119a8:	2501      	movs	r5, #1
 80119aa:	426d      	negs	r5, r5
 80119ac:	0028      	movs	r0, r5
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	8993      	ldrh	r3, [r2, #12]
 80119b2:	2220      	movs	r2, #32
 80119b4:	4393      	bics	r3, r2
 80119b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	b2ce      	uxtb	r6, r1
 80119bc:	6863      	ldr	r3, [r4, #4]
 80119be:	b2cd      	uxtb	r5, r1
 80119c0:	2a00      	cmp	r2, #0
 80119c2:	d010      	beq.n	80119e6 <_sungetc_r+0x46>
 80119c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80119c6:	429a      	cmp	r2, r3
 80119c8:	dd07      	ble.n	80119da <_sungetc_r+0x3a>
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	6023      	str	r3, [r4, #0]
 80119d0:	701e      	strb	r6, [r3, #0]
 80119d2:	6863      	ldr	r3, [r4, #4]
 80119d4:	3301      	adds	r3, #1
 80119d6:	6063      	str	r3, [r4, #4]
 80119d8:	e7e8      	b.n	80119ac <_sungetc_r+0xc>
 80119da:	0021      	movs	r1, r4
 80119dc:	f000 ff1a 	bl	8012814 <__submore>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d0f2      	beq.n	80119ca <_sungetc_r+0x2a>
 80119e4:	e7e0      	b.n	80119a8 <_sungetc_r+0x8>
 80119e6:	6921      	ldr	r1, [r4, #16]
 80119e8:	6822      	ldr	r2, [r4, #0]
 80119ea:	2900      	cmp	r1, #0
 80119ec:	d007      	beq.n	80119fe <_sungetc_r+0x5e>
 80119ee:	4291      	cmp	r1, r2
 80119f0:	d205      	bcs.n	80119fe <_sungetc_r+0x5e>
 80119f2:	1e51      	subs	r1, r2, #1
 80119f4:	7808      	ldrb	r0, [r1, #0]
 80119f6:	42a8      	cmp	r0, r5
 80119f8:	d101      	bne.n	80119fe <_sungetc_r+0x5e>
 80119fa:	6021      	str	r1, [r4, #0]
 80119fc:	e7ea      	b.n	80119d4 <_sungetc_r+0x34>
 80119fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011a00:	0023      	movs	r3, r4
 8011a02:	3340      	adds	r3, #64	; 0x40
 8011a04:	6323      	str	r3, [r4, #48]	; 0x30
 8011a06:	2303      	movs	r3, #3
 8011a08:	6363      	str	r3, [r4, #52]	; 0x34
 8011a0a:	0023      	movs	r3, r4
 8011a0c:	3342      	adds	r3, #66	; 0x42
 8011a0e:	63a2      	str	r2, [r4, #56]	; 0x38
 8011a10:	701e      	strb	r6, [r3, #0]
 8011a12:	6023      	str	r3, [r4, #0]
 8011a14:	2301      	movs	r3, #1
 8011a16:	e7de      	b.n	80119d6 <_sungetc_r+0x36>

08011a18 <__ssrefill_r>:
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	000c      	movs	r4, r1
 8011a1c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	d00e      	beq.n	8011a40 <__ssrefill_r+0x28>
 8011a22:	0023      	movs	r3, r4
 8011a24:	3340      	adds	r3, #64	; 0x40
 8011a26:	4299      	cmp	r1, r3
 8011a28:	d001      	beq.n	8011a2e <__ssrefill_r+0x16>
 8011a2a:	f7fa fd87 	bl	800c53c <_free_r>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a32:	6320      	str	r0, [r4, #48]	; 0x30
 8011a34:	6063      	str	r3, [r4, #4]
 8011a36:	4283      	cmp	r3, r0
 8011a38:	d002      	beq.n	8011a40 <__ssrefill_r+0x28>
 8011a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	bd10      	pop	{r4, pc}
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	2001      	movs	r0, #1
 8011a44:	6023      	str	r3, [r4, #0]
 8011a46:	2300      	movs	r3, #0
 8011a48:	89a2      	ldrh	r2, [r4, #12]
 8011a4a:	6063      	str	r3, [r4, #4]
 8011a4c:	3320      	adds	r3, #32
 8011a4e:	4313      	orrs	r3, r2
 8011a50:	81a3      	strh	r3, [r4, #12]
 8011a52:	4240      	negs	r0, r0
 8011a54:	e7f3      	b.n	8011a3e <__ssrefill_r+0x26>

08011a56 <_sfread_r>:
 8011a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a58:	0014      	movs	r4, r2
 8011a5a:	435c      	muls	r4, r3
 8011a5c:	b087      	sub	sp, #28
 8011a5e:	1e26      	subs	r6, r4, #0
 8011a60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a62:	9005      	str	r0, [sp, #20]
 8011a64:	9101      	str	r1, [sp, #4]
 8011a66:	9202      	str	r2, [sp, #8]
 8011a68:	9303      	str	r3, [sp, #12]
 8011a6a:	d11e      	bne.n	8011aaa <_sfread_r+0x54>
 8011a6c:	0020      	movs	r0, r4
 8011a6e:	b007      	add	sp, #28
 8011a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a72:	003a      	movs	r2, r7
 8011a74:	9801      	ldr	r0, [sp, #4]
 8011a76:	f7fa fce6 	bl	800c446 <memcpy>
 8011a7a:	682b      	ldr	r3, [r5, #0]
 8011a7c:	0029      	movs	r1, r5
 8011a7e:	19db      	adds	r3, r3, r7
 8011a80:	602b      	str	r3, [r5, #0]
 8011a82:	2300      	movs	r3, #0
 8011a84:	606b      	str	r3, [r5, #4]
 8011a86:	9b01      	ldr	r3, [sp, #4]
 8011a88:	9805      	ldr	r0, [sp, #20]
 8011a8a:	19db      	adds	r3, r3, r7
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	1bf3      	subs	r3, r6, r7
 8011a90:	9304      	str	r3, [sp, #16]
 8011a92:	f7ff ffc1 	bl	8011a18 <__ssrefill_r>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d006      	beq.n	8011aa8 <_sfread_r+0x52>
 8011a9a:	193c      	adds	r4, r7, r4
 8011a9c:	1ba0      	subs	r0, r4, r6
 8011a9e:	9902      	ldr	r1, [sp, #8]
 8011aa0:	f7ee fb4c 	bl	800013c <__udivsi3>
 8011aa4:	0004      	movs	r4, r0
 8011aa6:	e7e1      	b.n	8011a6c <_sfread_r+0x16>
 8011aa8:	9e04      	ldr	r6, [sp, #16]
 8011aaa:	686f      	ldr	r7, [r5, #4]
 8011aac:	6829      	ldr	r1, [r5, #0]
 8011aae:	42b7      	cmp	r7, r6
 8011ab0:	d3df      	bcc.n	8011a72 <_sfread_r+0x1c>
 8011ab2:	0032      	movs	r2, r6
 8011ab4:	9801      	ldr	r0, [sp, #4]
 8011ab6:	f7fa fcc6 	bl	800c446 <memcpy>
 8011aba:	686b      	ldr	r3, [r5, #4]
 8011abc:	9c03      	ldr	r4, [sp, #12]
 8011abe:	1b9b      	subs	r3, r3, r6
 8011ac0:	606b      	str	r3, [r5, #4]
 8011ac2:	682b      	ldr	r3, [r5, #0]
 8011ac4:	199b      	adds	r3, r3, r6
 8011ac6:	602b      	str	r3, [r5, #0]
 8011ac8:	e7d0      	b.n	8011a6c <_sfread_r+0x16>

08011aca <__sprint_r>:
 8011aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011acc:	6893      	ldr	r3, [r2, #8]
 8011ace:	b085      	sub	sp, #20
 8011ad0:	9001      	str	r0, [sp, #4]
 8011ad2:	000d      	movs	r5, r1
 8011ad4:	0014      	movs	r4, r2
 8011ad6:	1e18      	subs	r0, r3, #0
 8011ad8:	d018      	beq.n	8011b0c <__sprint_r+0x42>
 8011ada:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011adc:	049b      	lsls	r3, r3, #18
 8011ade:	d524      	bpl.n	8011b2a <__sprint_r+0x60>
 8011ae0:	6817      	ldr	r7, [r2, #0]
 8011ae2:	2600      	movs	r6, #0
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	9302      	str	r3, [sp, #8]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	089b      	lsrs	r3, r3, #2
 8011aee:	9303      	str	r3, [sp, #12]
 8011af0:	9b03      	ldr	r3, [sp, #12]
 8011af2:	42b3      	cmp	r3, r6
 8011af4:	dc0e      	bgt.n	8011b14 <__sprint_r+0x4a>
 8011af6:	2203      	movs	r2, #3
 8011af8:	9b00      	ldr	r3, [sp, #0]
 8011afa:	68a0      	ldr	r0, [r4, #8]
 8011afc:	4393      	bics	r3, r2
 8011afe:	1ac0      	subs	r0, r0, r3
 8011b00:	60a0      	str	r0, [r4, #8]
 8011b02:	3708      	adds	r7, #8
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d1ec      	bne.n	8011ae2 <__sprint_r+0x18>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60a3      	str	r3, [r4, #8]
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	6063      	str	r3, [r4, #4]
 8011b10:	b005      	add	sp, #20
 8011b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b14:	9902      	ldr	r1, [sp, #8]
 8011b16:	00b3      	lsls	r3, r6, #2
 8011b18:	58c9      	ldr	r1, [r1, r3]
 8011b1a:	002a      	movs	r2, r5
 8011b1c:	9801      	ldr	r0, [sp, #4]
 8011b1e:	f000 ff59 	bl	80129d4 <_fputwc_r>
 8011b22:	1c43      	adds	r3, r0, #1
 8011b24:	d0f0      	beq.n	8011b08 <__sprint_r+0x3e>
 8011b26:	3601      	adds	r6, #1
 8011b28:	e7e2      	b.n	8011af0 <__sprint_r+0x26>
 8011b2a:	9801      	ldr	r0, [sp, #4]
 8011b2c:	f000 fd14 	bl	8012558 <__sfvwrite_r>
 8011b30:	e7ea      	b.n	8011b08 <__sprint_r+0x3e>
	...

08011b34 <_vfiprintf_r>:
 8011b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b36:	b0c1      	sub	sp, #260	; 0x104
 8011b38:	001c      	movs	r4, r3
 8011b3a:	001f      	movs	r7, r3
 8011b3c:	9006      	str	r0, [sp, #24]
 8011b3e:	9103      	str	r1, [sp, #12]
 8011b40:	9207      	str	r2, [sp, #28]
 8011b42:	2800      	cmp	r0, #0
 8011b44:	d004      	beq.n	8011b50 <_vfiprintf_r+0x1c>
 8011b46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d101      	bne.n	8011b50 <_vfiprintf_r+0x1c>
 8011b4c:	f7fa fa98 	bl	800c080 <__sinit>
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b54:	07db      	lsls	r3, r3, #31
 8011b56:	d407      	bmi.n	8011b68 <_vfiprintf_r+0x34>
 8011b58:	9b03      	ldr	r3, [sp, #12]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	059b      	lsls	r3, r3, #22
 8011b5e:	d403      	bmi.n	8011b68 <_vfiprintf_r+0x34>
 8011b60:	9b03      	ldr	r3, [sp, #12]
 8011b62:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011b64:	f7fa fc62 	bl	800c42c <__retarget_lock_acquire_recursive>
 8011b68:	9b03      	ldr	r3, [sp, #12]
 8011b6a:	220c      	movs	r2, #12
 8011b6c:	5e9a      	ldrsh	r2, [r3, r2]
 8011b6e:	2380      	movs	r3, #128	; 0x80
 8011b70:	019b      	lsls	r3, r3, #6
 8011b72:	421a      	tst	r2, r3
 8011b74:	d107      	bne.n	8011b86 <_vfiprintf_r+0x52>
 8011b76:	4313      	orrs	r3, r2
 8011b78:	9a03      	ldr	r2, [sp, #12]
 8011b7a:	8193      	strh	r3, [r2, #12]
 8011b7c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011b7e:	4aa3      	ldr	r2, [pc, #652]	; (8011e0c <_vfiprintf_r+0x2d8>)
 8011b80:	4013      	ands	r3, r2
 8011b82:	9a03      	ldr	r2, [sp, #12]
 8011b84:	6653      	str	r3, [r2, #100]	; 0x64
 8011b86:	9b03      	ldr	r3, [sp, #12]
 8011b88:	899b      	ldrh	r3, [r3, #12]
 8011b8a:	071b      	lsls	r3, r3, #28
 8011b8c:	d503      	bpl.n	8011b96 <_vfiprintf_r+0x62>
 8011b8e:	9b03      	ldr	r3, [sp, #12]
 8011b90:	691b      	ldr	r3, [r3, #16]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d118      	bne.n	8011bc8 <_vfiprintf_r+0x94>
 8011b96:	9903      	ldr	r1, [sp, #12]
 8011b98:	9806      	ldr	r0, [sp, #24]
 8011b9a:	f000 fe79 	bl	8012890 <__swsetup_r>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d012      	beq.n	8011bc8 <_vfiprintf_r+0x94>
 8011ba2:	9b03      	ldr	r3, [sp, #12]
 8011ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ba6:	07db      	lsls	r3, r3, #31
 8011ba8:	d505      	bpl.n	8011bb6 <_vfiprintf_r+0x82>
 8011baa:	2301      	movs	r3, #1
 8011bac:	425b      	negs	r3, r3
 8011bae:	9308      	str	r3, [sp, #32]
 8011bb0:	9808      	ldr	r0, [sp, #32]
 8011bb2:	b041      	add	sp, #260	; 0x104
 8011bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb6:	9b03      	ldr	r3, [sp, #12]
 8011bb8:	899b      	ldrh	r3, [r3, #12]
 8011bba:	059b      	lsls	r3, r3, #22
 8011bbc:	d4f5      	bmi.n	8011baa <_vfiprintf_r+0x76>
 8011bbe:	9b03      	ldr	r3, [sp, #12]
 8011bc0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bc2:	f7fa fc34 	bl	800c42e <__retarget_lock_release_recursive>
 8011bc6:	e7f0      	b.n	8011baa <_vfiprintf_r+0x76>
 8011bc8:	221a      	movs	r2, #26
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	899b      	ldrh	r3, [r3, #12]
 8011bce:	401a      	ands	r2, r3
 8011bd0:	2a0a      	cmp	r2, #10
 8011bd2:	d116      	bne.n	8011c02 <_vfiprintf_r+0xce>
 8011bd4:	9a03      	ldr	r2, [sp, #12]
 8011bd6:	210e      	movs	r1, #14
 8011bd8:	5e52      	ldrsh	r2, [r2, r1]
 8011bda:	2a00      	cmp	r2, #0
 8011bdc:	db11      	blt.n	8011c02 <_vfiprintf_r+0xce>
 8011bde:	9a03      	ldr	r2, [sp, #12]
 8011be0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011be2:	07d2      	lsls	r2, r2, #31
 8011be4:	d405      	bmi.n	8011bf2 <_vfiprintf_r+0xbe>
 8011be6:	059b      	lsls	r3, r3, #22
 8011be8:	d403      	bmi.n	8011bf2 <_vfiprintf_r+0xbe>
 8011bea:	9b03      	ldr	r3, [sp, #12]
 8011bec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bee:	f7fa fc1e 	bl	800c42e <__retarget_lock_release_recursive>
 8011bf2:	0023      	movs	r3, r4
 8011bf4:	9a07      	ldr	r2, [sp, #28]
 8011bf6:	9903      	ldr	r1, [sp, #12]
 8011bf8:	9806      	ldr	r0, [sp, #24]
 8011bfa:	f000 fc69 	bl	80124d0 <__sbprintf>
 8011bfe:	9008      	str	r0, [sp, #32]
 8011c00:	e7d6      	b.n	8011bb0 <_vfiprintf_r+0x7c>
 8011c02:	2300      	movs	r3, #0
 8011c04:	ad17      	add	r5, sp, #92	; 0x5c
 8011c06:	9514      	str	r5, [sp, #80]	; 0x50
 8011c08:	9316      	str	r3, [sp, #88]	; 0x58
 8011c0a:	9315      	str	r3, [sp, #84]	; 0x54
 8011c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8011c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c10:	930e      	str	r3, [sp, #56]	; 0x38
 8011c12:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c14:	9308      	str	r3, [sp, #32]
 8011c16:	9c07      	ldr	r4, [sp, #28]
 8011c18:	7823      	ldrb	r3, [r4, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d002      	beq.n	8011c24 <_vfiprintf_r+0xf0>
 8011c1e:	2b25      	cmp	r3, #37	; 0x25
 8011c20:	d000      	beq.n	8011c24 <_vfiprintf_r+0xf0>
 8011c22:	e08d      	b.n	8011d40 <_vfiprintf_r+0x20c>
 8011c24:	9b07      	ldr	r3, [sp, #28]
 8011c26:	1ae6      	subs	r6, r4, r3
 8011c28:	429c      	cmp	r4, r3
 8011c2a:	d016      	beq.n	8011c5a <_vfiprintf_r+0x126>
 8011c2c:	602b      	str	r3, [r5, #0]
 8011c2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c30:	606e      	str	r6, [r5, #4]
 8011c32:	199b      	adds	r3, r3, r6
 8011c34:	9316      	str	r3, [sp, #88]	; 0x58
 8011c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c38:	3508      	adds	r5, #8
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	9315      	str	r3, [sp, #84]	; 0x54
 8011c3e:	2b07      	cmp	r3, #7
 8011c40:	dd08      	ble.n	8011c54 <_vfiprintf_r+0x120>
 8011c42:	9903      	ldr	r1, [sp, #12]
 8011c44:	9806      	ldr	r0, [sp, #24]
 8011c46:	aa14      	add	r2, sp, #80	; 0x50
 8011c48:	f7ff ff3f 	bl	8011aca <__sprint_r>
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	d000      	beq.n	8011c52 <_vfiprintf_r+0x11e>
 8011c50:	e3d9      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8011c52:	ad17      	add	r5, sp, #92	; 0x5c
 8011c54:	9b08      	ldr	r3, [sp, #32]
 8011c56:	199b      	adds	r3, r3, r6
 8011c58:	9308      	str	r3, [sp, #32]
 8011c5a:	7823      	ldrb	r3, [r4, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <_vfiprintf_r+0x130>
 8011c60:	f000 fbf6 	bl	8012450 <_vfiprintf_r+0x91c>
 8011c64:	2200      	movs	r2, #0
 8011c66:	a912      	add	r1, sp, #72	; 0x48
 8011c68:	70ca      	strb	r2, [r1, #3]
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	1c63      	adds	r3, r4, #1
 8011c6e:	0014      	movs	r4, r2
 8011c70:	4249      	negs	r1, r1
 8011c72:	9105      	str	r1, [sp, #20]
 8011c74:	9209      	str	r2, [sp, #36]	; 0x24
 8011c76:	1c5a      	adds	r2, r3, #1
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	9207      	str	r2, [sp, #28]
 8011c7c:	0018      	movs	r0, r3
 8011c7e:	3820      	subs	r0, #32
 8011c80:	285a      	cmp	r0, #90	; 0x5a
 8011c82:	d900      	bls.n	8011c86 <_vfiprintf_r+0x152>
 8011c84:	e362      	b.n	801234c <_vfiprintf_r+0x818>
 8011c86:	f7ee fa4f 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011c8a:	0078      	.short	0x0078
 8011c8c:	03610361 	.word	0x03610361
 8011c90:	03610081 	.word	0x03610081
 8011c94:	03610361 	.word	0x03610361
 8011c98:	0361005d 	.word	0x0361005d
 8011c9c:	00830361 	.word	0x00830361
 8011ca0:	0361008b 	.word	0x0361008b
 8011ca4:	008f0089 	.word	0x008f0089
 8011ca8:	00ad0361 	.word	0x00ad0361
 8011cac:	00af00af 	.word	0x00af00af
 8011cb0:	00af00af 	.word	0x00af00af
 8011cb4:	00af00af 	.word	0x00af00af
 8011cb8:	00af00af 	.word	0x00af00af
 8011cbc:	036100af 	.word	0x036100af
 8011cc0:	03610361 	.word	0x03610361
 8011cc4:	03610361 	.word	0x03610361
 8011cc8:	03610361 	.word	0x03610361
 8011ccc:	03610361 	.word	0x03610361
 8011cd0:	00e600da 	.word	0x00e600da
 8011cd4:	03610361 	.word	0x03610361
 8011cd8:	03610361 	.word	0x03610361
 8011cdc:	03610361 	.word	0x03610361
 8011ce0:	03610361 	.word	0x03610361
 8011ce4:	03610361 	.word	0x03610361
 8011ce8:	03610143 	.word	0x03610143
 8011cec:	03610361 	.word	0x03610361
 8011cf0:	03610182 	.word	0x03610182
 8011cf4:	0361027c 	.word	0x0361027c
 8011cf8:	02ae0361 	.word	0x02ae0361
 8011cfc:	03610361 	.word	0x03610361
 8011d00:	03610361 	.word	0x03610361
 8011d04:	03610361 	.word	0x03610361
 8011d08:	03610361 	.word	0x03610361
 8011d0c:	03610361 	.word	0x03610361
 8011d10:	00e800da 	.word	0x00e800da
 8011d14:	03610361 	.word	0x03610361
 8011d18:	00c30361 	.word	0x00c30361
 8011d1c:	00d600e8 	.word	0x00d600e8
 8011d20:	00cf0361 	.word	0x00cf0361
 8011d24:	01260361 	.word	0x01260361
 8011d28:	01740145 	.word	0x01740145
 8011d2c:	036100d6 	.word	0x036100d6
 8011d30:	007f0182 	.word	0x007f0182
 8011d34:	0361027e 	.word	0x0361027e
 8011d38:	02cd0361 	.word	0x02cd0361
 8011d3c:	007f0361 	.word	0x007f0361
 8011d40:	3401      	adds	r4, #1
 8011d42:	e769      	b.n	8011c18 <_vfiprintf_r+0xe4>
 8011d44:	9806      	ldr	r0, [sp, #24]
 8011d46:	f7fe fa47 	bl	80101d8 <_localeconv_r>
 8011d4a:	6843      	ldr	r3, [r0, #4]
 8011d4c:	0018      	movs	r0, r3
 8011d4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d50:	f7ee f9d8 	bl	8000104 <strlen>
 8011d54:	900e      	str	r0, [sp, #56]	; 0x38
 8011d56:	9806      	ldr	r0, [sp, #24]
 8011d58:	f7fe fa3e 	bl	80101d8 <_localeconv_r>
 8011d5c:	6883      	ldr	r3, [r0, #8]
 8011d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8011d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d010      	beq.n	8011d88 <_vfiprintf_r+0x254>
 8011d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00d      	beq.n	8011d88 <_vfiprintf_r+0x254>
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00a      	beq.n	8011d88 <_vfiprintf_r+0x254>
 8011d72:	2380      	movs	r3, #128	; 0x80
 8011d74:	00db      	lsls	r3, r3, #3
 8011d76:	431c      	orrs	r4, r3
 8011d78:	e006      	b.n	8011d88 <_vfiprintf_r+0x254>
 8011d7a:	ab12      	add	r3, sp, #72	; 0x48
 8011d7c:	78da      	ldrb	r2, [r3, #3]
 8011d7e:	3303      	adds	r3, #3
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	d101      	bne.n	8011d88 <_vfiprintf_r+0x254>
 8011d84:	3220      	adds	r2, #32
 8011d86:	701a      	strb	r2, [r3, #0]
 8011d88:	9b07      	ldr	r3, [sp, #28]
 8011d8a:	e774      	b.n	8011c76 <_vfiprintf_r+0x142>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e7f2      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011d90:	cf08      	ldmia	r7!, {r3}
 8011d92:	9309      	str	r3, [sp, #36]	; 0x24
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	daf7      	bge.n	8011d88 <_vfiprintf_r+0x254>
 8011d98:	425b      	negs	r3, r3
 8011d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d9c:	2304      	movs	r3, #4
 8011d9e:	e7ea      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011da0:	222b      	movs	r2, #43	; 0x2b
 8011da2:	ab12      	add	r3, sp, #72	; 0x48
 8011da4:	70da      	strb	r2, [r3, #3]
 8011da6:	e7ef      	b.n	8011d88 <_vfiprintf_r+0x254>
 8011da8:	9b07      	ldr	r3, [sp, #28]
 8011daa:	1c5a      	adds	r2, r3, #1
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	2b2a      	cmp	r3, #42	; 0x2a
 8011db0:	d00f      	beq.n	8011dd2 <_vfiprintf_r+0x29e>
 8011db2:	2100      	movs	r1, #0
 8011db4:	9105      	str	r1, [sp, #20]
 8011db6:	0019      	movs	r1, r3
 8011db8:	3930      	subs	r1, #48	; 0x30
 8011dba:	9207      	str	r2, [sp, #28]
 8011dbc:	2909      	cmp	r1, #9
 8011dbe:	d900      	bls.n	8011dc2 <_vfiprintf_r+0x28e>
 8011dc0:	e75c      	b.n	8011c7c <_vfiprintf_r+0x148>
 8011dc2:	200a      	movs	r0, #10
 8011dc4:	9b05      	ldr	r3, [sp, #20]
 8011dc6:	4343      	muls	r3, r0
 8011dc8:	185b      	adds	r3, r3, r1
 8011dca:	9305      	str	r3, [sp, #20]
 8011dcc:	7813      	ldrb	r3, [r2, #0]
 8011dce:	3201      	adds	r2, #1
 8011dd0:	e7f1      	b.n	8011db6 <_vfiprintf_r+0x282>
 8011dd2:	cf08      	ldmia	r7!, {r3}
 8011dd4:	9305      	str	r3, [sp, #20]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	da02      	bge.n	8011de0 <_vfiprintf_r+0x2ac>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	425b      	negs	r3, r3
 8011dde:	9305      	str	r3, [sp, #20]
 8011de0:	9207      	str	r2, [sp, #28]
 8011de2:	e7d1      	b.n	8011d88 <_vfiprintf_r+0x254>
 8011de4:	2380      	movs	r3, #128	; 0x80
 8011de6:	e7c6      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011de8:	2100      	movs	r1, #0
 8011dea:	9a07      	ldr	r2, [sp, #28]
 8011dec:	9109      	str	r1, [sp, #36]	; 0x24
 8011dee:	200a      	movs	r0, #10
 8011df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011df2:	3b30      	subs	r3, #48	; 0x30
 8011df4:	4341      	muls	r1, r0
 8011df6:	185b      	adds	r3, r3, r1
 8011df8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dfa:	0013      	movs	r3, r2
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	3201      	adds	r2, #1
 8011e00:	0019      	movs	r1, r3
 8011e02:	3930      	subs	r1, #48	; 0x30
 8011e04:	9207      	str	r2, [sp, #28]
 8011e06:	2909      	cmp	r1, #9
 8011e08:	d9f1      	bls.n	8011dee <_vfiprintf_r+0x2ba>
 8011e0a:	e737      	b.n	8011c7c <_vfiprintf_r+0x148>
 8011e0c:	ffffdfff 	.word	0xffffdfff
 8011e10:	9b07      	ldr	r3, [sp, #28]
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	2b68      	cmp	r3, #104	; 0x68
 8011e16:	d105      	bne.n	8011e24 <_vfiprintf_r+0x2f0>
 8011e18:	9b07      	ldr	r3, [sp, #28]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	9307      	str	r3, [sp, #28]
 8011e1e:	2380      	movs	r3, #128	; 0x80
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	e7a8      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011e24:	2340      	movs	r3, #64	; 0x40
 8011e26:	e7a6      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011e28:	9b07      	ldr	r3, [sp, #28]
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2b6c      	cmp	r3, #108	; 0x6c
 8011e2e:	d104      	bne.n	8011e3a <_vfiprintf_r+0x306>
 8011e30:	9b07      	ldr	r3, [sp, #28]
 8011e32:	3301      	adds	r3, #1
 8011e34:	9307      	str	r3, [sp, #28]
 8011e36:	2320      	movs	r3, #32
 8011e38:	e79d      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011e3a:	2310      	movs	r3, #16
 8011e3c:	e79b      	b.n	8011d76 <_vfiprintf_r+0x242>
 8011e3e:	003a      	movs	r2, r7
 8011e40:	ca08      	ldmia	r2!, {r3}
 8011e42:	ae27      	add	r6, sp, #156	; 0x9c
 8011e44:	7033      	strb	r3, [r6, #0]
 8011e46:	2300      	movs	r3, #0
 8011e48:	9204      	str	r2, [sp, #16]
 8011e4a:	aa12      	add	r2, sp, #72	; 0x48
 8011e4c:	70d3      	strb	r3, [r2, #3]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e52:	9205      	str	r2, [sp, #20]
 8011e54:	e0b0      	b.n	8011fb8 <_vfiprintf_r+0x484>
 8011e56:	2310      	movs	r3, #16
 8011e58:	431c      	orrs	r4, r3
 8011e5a:	06a3      	lsls	r3, r4, #26
 8011e5c:	d52a      	bpl.n	8011eb4 <_vfiprintf_r+0x380>
 8011e5e:	2307      	movs	r3, #7
 8011e60:	3707      	adds	r7, #7
 8011e62:	439f      	bics	r7, r3
 8011e64:	0039      	movs	r1, r7
 8011e66:	c90c      	ldmia	r1!, {r2, r3}
 8011e68:	9200      	str	r2, [sp, #0]
 8011e6a:	9301      	str	r3, [sp, #4]
 8011e6c:	9104      	str	r1, [sp, #16]
 8011e6e:	9a01      	ldr	r2, [sp, #4]
 8011e70:	2301      	movs	r3, #1
 8011e72:	2a00      	cmp	r2, #0
 8011e74:	da09      	bge.n	8011e8a <_vfiprintf_r+0x356>
 8011e76:	9e00      	ldr	r6, [sp, #0]
 8011e78:	9f01      	ldr	r7, [sp, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	4271      	negs	r1, r6
 8011e7e:	41ba      	sbcs	r2, r7
 8011e80:	9100      	str	r1, [sp, #0]
 8011e82:	9201      	str	r2, [sp, #4]
 8011e84:	212d      	movs	r1, #45	; 0x2d
 8011e86:	aa12      	add	r2, sp, #72	; 0x48
 8011e88:	70d1      	strb	r1, [r2, #3]
 8011e8a:	9901      	ldr	r1, [sp, #4]
 8011e8c:	9a00      	ldr	r2, [sp, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	9905      	ldr	r1, [sp, #20]
 8011e92:	3101      	adds	r1, #1
 8011e94:	d100      	bne.n	8011e98 <_vfiprintf_r+0x364>
 8011e96:	e2e9      	b.n	801246c <_vfiprintf_r+0x938>
 8011e98:	2180      	movs	r1, #128	; 0x80
 8011e9a:	0027      	movs	r7, r4
 8011e9c:	438f      	bics	r7, r1
 8011e9e:	2a00      	cmp	r2, #0
 8011ea0:	d000      	beq.n	8011ea4 <_vfiprintf_r+0x370>
 8011ea2:	e2e7      	b.n	8012474 <_vfiprintf_r+0x940>
 8011ea4:	9a05      	ldr	r2, [sp, #20]
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	d100      	bne.n	8011eac <_vfiprintf_r+0x378>
 8011eaa:	e243      	b.n	8012334 <_vfiprintf_r+0x800>
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d000      	beq.n	8011eb2 <_vfiprintf_r+0x37e>
 8011eb0:	e2e3      	b.n	801247a <_vfiprintf_r+0x946>
 8011eb2:	e1e7      	b.n	8012284 <_vfiprintf_r+0x750>
 8011eb4:	003a      	movs	r2, r7
 8011eb6:	ca08      	ldmia	r2!, {r3}
 8011eb8:	9204      	str	r2, [sp, #16]
 8011eba:	06e2      	lsls	r2, r4, #27
 8011ebc:	d503      	bpl.n	8011ec6 <_vfiprintf_r+0x392>
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	17db      	asrs	r3, r3, #31
 8011ec2:	9301      	str	r3, [sp, #4]
 8011ec4:	e7d3      	b.n	8011e6e <_vfiprintf_r+0x33a>
 8011ec6:	0662      	lsls	r2, r4, #25
 8011ec8:	d501      	bpl.n	8011ece <_vfiprintf_r+0x39a>
 8011eca:	b21b      	sxth	r3, r3
 8011ecc:	e7f7      	b.n	8011ebe <_vfiprintf_r+0x38a>
 8011ece:	05a2      	lsls	r2, r4, #22
 8011ed0:	d5f5      	bpl.n	8011ebe <_vfiprintf_r+0x38a>
 8011ed2:	b25b      	sxtb	r3, r3
 8011ed4:	e7f3      	b.n	8011ebe <_vfiprintf_r+0x38a>
 8011ed6:	1d3b      	adds	r3, r7, #4
 8011ed8:	9304      	str	r3, [sp, #16]
 8011eda:	06a3      	lsls	r3, r4, #26
 8011edc:	d506      	bpl.n	8011eec <_vfiprintf_r+0x3b8>
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	9a08      	ldr	r2, [sp, #32]
 8011ee2:	601a      	str	r2, [r3, #0]
 8011ee4:	17d2      	asrs	r2, r2, #31
 8011ee6:	605a      	str	r2, [r3, #4]
 8011ee8:	9f04      	ldr	r7, [sp, #16]
 8011eea:	e694      	b.n	8011c16 <_vfiprintf_r+0xe2>
 8011eec:	06e3      	lsls	r3, r4, #27
 8011eee:	d503      	bpl.n	8011ef8 <_vfiprintf_r+0x3c4>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	9a08      	ldr	r2, [sp, #32]
 8011ef4:	601a      	str	r2, [r3, #0]
 8011ef6:	e7f7      	b.n	8011ee8 <_vfiprintf_r+0x3b4>
 8011ef8:	0663      	lsls	r3, r4, #25
 8011efa:	d503      	bpl.n	8011f04 <_vfiprintf_r+0x3d0>
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	9a08      	ldr	r2, [sp, #32]
 8011f00:	801a      	strh	r2, [r3, #0]
 8011f02:	e7f1      	b.n	8011ee8 <_vfiprintf_r+0x3b4>
 8011f04:	05a4      	lsls	r4, r4, #22
 8011f06:	d5f3      	bpl.n	8011ef0 <_vfiprintf_r+0x3bc>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	9a08      	ldr	r2, [sp, #32]
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	e7eb      	b.n	8011ee8 <_vfiprintf_r+0x3b4>
 8011f10:	2310      	movs	r3, #16
 8011f12:	431c      	orrs	r4, r3
 8011f14:	2320      	movs	r3, #32
 8011f16:	0020      	movs	r0, r4
 8011f18:	4018      	ands	r0, r3
 8011f1a:	421c      	tst	r4, r3
 8011f1c:	d00d      	beq.n	8011f3a <_vfiprintf_r+0x406>
 8011f1e:	3b19      	subs	r3, #25
 8011f20:	3707      	adds	r7, #7
 8011f22:	439f      	bics	r7, r3
 8011f24:	0039      	movs	r1, r7
 8011f26:	c90c      	ldmia	r1!, {r2, r3}
 8011f28:	9200      	str	r2, [sp, #0]
 8011f2a:	9301      	str	r3, [sp, #4]
 8011f2c:	9104      	str	r1, [sp, #16]
 8011f2e:	4bcc      	ldr	r3, [pc, #816]	; (8012260 <_vfiprintf_r+0x72c>)
 8011f30:	401c      	ands	r4, r3
 8011f32:	2300      	movs	r3, #0
 8011f34:	2100      	movs	r1, #0
 8011f36:	aa12      	add	r2, sp, #72	; 0x48
 8011f38:	e7a6      	b.n	8011e88 <_vfiprintf_r+0x354>
 8011f3a:	003a      	movs	r2, r7
 8011f3c:	ca08      	ldmia	r2!, {r3}
 8011f3e:	0021      	movs	r1, r4
 8011f40:	9204      	str	r2, [sp, #16]
 8011f42:	2210      	movs	r2, #16
 8011f44:	4011      	ands	r1, r2
 8011f46:	4214      	tst	r4, r2
 8011f48:	d002      	beq.n	8011f50 <_vfiprintf_r+0x41c>
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	9001      	str	r0, [sp, #4]
 8011f4e:	e7ee      	b.n	8011f2e <_vfiprintf_r+0x3fa>
 8011f50:	2240      	movs	r2, #64	; 0x40
 8011f52:	0020      	movs	r0, r4
 8011f54:	4010      	ands	r0, r2
 8011f56:	4214      	tst	r4, r2
 8011f58:	d003      	beq.n	8011f62 <_vfiprintf_r+0x42e>
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	9101      	str	r1, [sp, #4]
 8011f60:	e7e5      	b.n	8011f2e <_vfiprintf_r+0x3fa>
 8011f62:	2280      	movs	r2, #128	; 0x80
 8011f64:	0021      	movs	r1, r4
 8011f66:	0092      	lsls	r2, r2, #2
 8011f68:	4011      	ands	r1, r2
 8011f6a:	4214      	tst	r4, r2
 8011f6c:	d0f6      	beq.n	8011f5c <_vfiprintf_r+0x428>
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	e7eb      	b.n	8011f4a <_vfiprintf_r+0x416>
 8011f72:	003b      	movs	r3, r7
 8011f74:	cb04      	ldmia	r3!, {r2}
 8011f76:	49bb      	ldr	r1, [pc, #748]	; (8012264 <_vfiprintf_r+0x730>)
 8011f78:	9304      	str	r3, [sp, #16]
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	9200      	str	r2, [sp, #0]
 8011f7e:	aa13      	add	r2, sp, #76	; 0x4c
 8011f80:	8011      	strh	r1, [r2, #0]
 8011f82:	4ab9      	ldr	r2, [pc, #740]	; (8012268 <_vfiprintf_r+0x734>)
 8011f84:	9301      	str	r3, [sp, #4]
 8011f86:	3302      	adds	r3, #2
 8011f88:	431c      	orrs	r4, r3
 8011f8a:	920c      	str	r2, [sp, #48]	; 0x30
 8011f8c:	e7d2      	b.n	8011f34 <_vfiprintf_r+0x400>
 8011f8e:	003b      	movs	r3, r7
 8011f90:	2700      	movs	r7, #0
 8011f92:	cb40      	ldmia	r3!, {r6}
 8011f94:	9304      	str	r3, [sp, #16]
 8011f96:	ab12      	add	r3, sp, #72	; 0x48
 8011f98:	70df      	strb	r7, [r3, #3]
 8011f9a:	9b05      	ldr	r3, [sp, #20]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	d100      	bne.n	8011fa2 <_vfiprintf_r+0x46e>
 8011fa0:	e0ea      	b.n	8012178 <_vfiprintf_r+0x644>
 8011fa2:	0039      	movs	r1, r7
 8011fa4:	0030      	movs	r0, r6
 8011fa6:	9a05      	ldr	r2, [sp, #20]
 8011fa8:	f7fe f92e 	bl	8010208 <memchr>
 8011fac:	900b      	str	r0, [sp, #44]	; 0x2c
 8011fae:	42b8      	cmp	r0, r7
 8011fb0:	d002      	beq.n	8011fb8 <_vfiprintf_r+0x484>
 8011fb2:	1b83      	subs	r3, r0, r6
 8011fb4:	9305      	str	r3, [sp, #20]
 8011fb6:	970b      	str	r7, [sp, #44]	; 0x2c
 8011fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fba:	9a05      	ldr	r2, [sp, #20]
 8011fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	da00      	bge.n	8011fc4 <_vfiprintf_r+0x490>
 8011fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8011fc4:	ab12      	add	r3, sp, #72	; 0x48
 8011fc6:	3303      	adds	r3, #3
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	1e5a      	subs	r2, r3, #1
 8011fcc:	4193      	sbcs	r3, r2
 8011fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fd0:	18d3      	adds	r3, r2, r3
 8011fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8011fd4:	0022      	movs	r2, r4
 8011fd6:	2302      	movs	r3, #2
 8011fd8:	401a      	ands	r2, r3
 8011fda:	9210      	str	r2, [sp, #64]	; 0x40
 8011fdc:	421c      	tst	r4, r3
 8011fde:	d002      	beq.n	8011fe6 <_vfiprintf_r+0x4b2>
 8011fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fe2:	3302      	adds	r3, #2
 8011fe4:	930a      	str	r3, [sp, #40]	; 0x28
 8011fe6:	2384      	movs	r3, #132	; 0x84
 8011fe8:	0022      	movs	r2, r4
 8011fea:	401a      	ands	r2, r3
 8011fec:	9211      	str	r2, [sp, #68]	; 0x44
 8011fee:	421c      	tst	r4, r3
 8011ff0:	d11e      	bne.n	8012030 <_vfiprintf_r+0x4fc>
 8011ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ff6:	1a9f      	subs	r7, r3, r2
 8011ff8:	2f00      	cmp	r7, #0
 8011ffa:	dd19      	ble.n	8012030 <_vfiprintf_r+0x4fc>
 8011ffc:	0029      	movs	r1, r5
 8011ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012000:	489a      	ldr	r0, [pc, #616]	; (801226c <_vfiprintf_r+0x738>)
 8012002:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012004:	3301      	adds	r3, #1
 8012006:	3108      	adds	r1, #8
 8012008:	6028      	str	r0, [r5, #0]
 801200a:	2f10      	cmp	r7, #16
 801200c:	dd00      	ble.n	8012010 <_vfiprintf_r+0x4dc>
 801200e:	e1a7      	b.n	8012360 <_vfiprintf_r+0x82c>
 8012010:	606f      	str	r7, [r5, #4]
 8012012:	18bf      	adds	r7, r7, r2
 8012014:	000d      	movs	r5, r1
 8012016:	9716      	str	r7, [sp, #88]	; 0x58
 8012018:	9315      	str	r3, [sp, #84]	; 0x54
 801201a:	2b07      	cmp	r3, #7
 801201c:	dd08      	ble.n	8012030 <_vfiprintf_r+0x4fc>
 801201e:	9903      	ldr	r1, [sp, #12]
 8012020:	9806      	ldr	r0, [sp, #24]
 8012022:	aa14      	add	r2, sp, #80	; 0x50
 8012024:	f7ff fd51 	bl	8011aca <__sprint_r>
 8012028:	2800      	cmp	r0, #0
 801202a:	d000      	beq.n	801202e <_vfiprintf_r+0x4fa>
 801202c:	e1eb      	b.n	8012406 <_vfiprintf_r+0x8d2>
 801202e:	ad17      	add	r5, sp, #92	; 0x5c
 8012030:	a912      	add	r1, sp, #72	; 0x48
 8012032:	78c8      	ldrb	r0, [r1, #3]
 8012034:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012038:	3103      	adds	r1, #3
 801203a:	2800      	cmp	r0, #0
 801203c:	d012      	beq.n	8012064 <_vfiprintf_r+0x530>
 801203e:	6029      	str	r1, [r5, #0]
 8012040:	2101      	movs	r1, #1
 8012042:	3301      	adds	r3, #1
 8012044:	1852      	adds	r2, r2, r1
 8012046:	6069      	str	r1, [r5, #4]
 8012048:	9216      	str	r2, [sp, #88]	; 0x58
 801204a:	9315      	str	r3, [sp, #84]	; 0x54
 801204c:	3508      	adds	r5, #8
 801204e:	2b07      	cmp	r3, #7
 8012050:	dd08      	ble.n	8012064 <_vfiprintf_r+0x530>
 8012052:	9903      	ldr	r1, [sp, #12]
 8012054:	9806      	ldr	r0, [sp, #24]
 8012056:	aa14      	add	r2, sp, #80	; 0x50
 8012058:	f7ff fd37 	bl	8011aca <__sprint_r>
 801205c:	2800      	cmp	r0, #0
 801205e:	d000      	beq.n	8012062 <_vfiprintf_r+0x52e>
 8012060:	e1d1      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8012062:	ad17      	add	r5, sp, #92	; 0x5c
 8012064:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012066:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801206a:	2900      	cmp	r1, #0
 801206c:	d013      	beq.n	8012096 <_vfiprintf_r+0x562>
 801206e:	a913      	add	r1, sp, #76	; 0x4c
 8012070:	6029      	str	r1, [r5, #0]
 8012072:	2102      	movs	r1, #2
 8012074:	3301      	adds	r3, #1
 8012076:	1852      	adds	r2, r2, r1
 8012078:	6069      	str	r1, [r5, #4]
 801207a:	9216      	str	r2, [sp, #88]	; 0x58
 801207c:	9315      	str	r3, [sp, #84]	; 0x54
 801207e:	3508      	adds	r5, #8
 8012080:	2b07      	cmp	r3, #7
 8012082:	dd08      	ble.n	8012096 <_vfiprintf_r+0x562>
 8012084:	9903      	ldr	r1, [sp, #12]
 8012086:	9806      	ldr	r0, [sp, #24]
 8012088:	aa14      	add	r2, sp, #80	; 0x50
 801208a:	f7ff fd1e 	bl	8011aca <__sprint_r>
 801208e:	2800      	cmp	r0, #0
 8012090:	d000      	beq.n	8012094 <_vfiprintf_r+0x560>
 8012092:	e1b8      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8012094:	ad17      	add	r5, sp, #92	; 0x5c
 8012096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012098:	2b80      	cmp	r3, #128	; 0x80
 801209a:	d11e      	bne.n	80120da <_vfiprintf_r+0x5a6>
 801209c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801209e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120a0:	1a9f      	subs	r7, r3, r2
 80120a2:	2f00      	cmp	r7, #0
 80120a4:	dd19      	ble.n	80120da <_vfiprintf_r+0x5a6>
 80120a6:	0029      	movs	r1, r5
 80120a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120aa:	4871      	ldr	r0, [pc, #452]	; (8012270 <_vfiprintf_r+0x73c>)
 80120ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120ae:	3301      	adds	r3, #1
 80120b0:	3108      	adds	r1, #8
 80120b2:	6028      	str	r0, [r5, #0]
 80120b4:	2f10      	cmp	r7, #16
 80120b6:	dd00      	ble.n	80120ba <_vfiprintf_r+0x586>
 80120b8:	e164      	b.n	8012384 <_vfiprintf_r+0x850>
 80120ba:	606f      	str	r7, [r5, #4]
 80120bc:	18bf      	adds	r7, r7, r2
 80120be:	000d      	movs	r5, r1
 80120c0:	9716      	str	r7, [sp, #88]	; 0x58
 80120c2:	9315      	str	r3, [sp, #84]	; 0x54
 80120c4:	2b07      	cmp	r3, #7
 80120c6:	dd08      	ble.n	80120da <_vfiprintf_r+0x5a6>
 80120c8:	9903      	ldr	r1, [sp, #12]
 80120ca:	9806      	ldr	r0, [sp, #24]
 80120cc:	aa14      	add	r2, sp, #80	; 0x50
 80120ce:	f7ff fcfc 	bl	8011aca <__sprint_r>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d000      	beq.n	80120d8 <_vfiprintf_r+0x5a4>
 80120d6:	e196      	b.n	8012406 <_vfiprintf_r+0x8d2>
 80120d8:	ad17      	add	r5, sp, #92	; 0x5c
 80120da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120dc:	9a05      	ldr	r2, [sp, #20]
 80120de:	1a9f      	subs	r7, r3, r2
 80120e0:	2f00      	cmp	r7, #0
 80120e2:	dd19      	ble.n	8012118 <_vfiprintf_r+0x5e4>
 80120e4:	0029      	movs	r1, r5
 80120e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120e8:	4861      	ldr	r0, [pc, #388]	; (8012270 <_vfiprintf_r+0x73c>)
 80120ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120ec:	3301      	adds	r3, #1
 80120ee:	3108      	adds	r1, #8
 80120f0:	6028      	str	r0, [r5, #0]
 80120f2:	2f10      	cmp	r7, #16
 80120f4:	dd00      	ble.n	80120f8 <_vfiprintf_r+0x5c4>
 80120f6:	e157      	b.n	80123a8 <_vfiprintf_r+0x874>
 80120f8:	606f      	str	r7, [r5, #4]
 80120fa:	18bf      	adds	r7, r7, r2
 80120fc:	000d      	movs	r5, r1
 80120fe:	9716      	str	r7, [sp, #88]	; 0x58
 8012100:	9315      	str	r3, [sp, #84]	; 0x54
 8012102:	2b07      	cmp	r3, #7
 8012104:	dd08      	ble.n	8012118 <_vfiprintf_r+0x5e4>
 8012106:	9903      	ldr	r1, [sp, #12]
 8012108:	9806      	ldr	r0, [sp, #24]
 801210a:	aa14      	add	r2, sp, #80	; 0x50
 801210c:	f7ff fcdd 	bl	8011aca <__sprint_r>
 8012110:	2800      	cmp	r0, #0
 8012112:	d000      	beq.n	8012116 <_vfiprintf_r+0x5e2>
 8012114:	e177      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8012116:	ad17      	add	r5, sp, #92	; 0x5c
 8012118:	9b05      	ldr	r3, [sp, #20]
 801211a:	9a05      	ldr	r2, [sp, #20]
 801211c:	606b      	str	r3, [r5, #4]
 801211e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012120:	602e      	str	r6, [r5, #0]
 8012122:	189b      	adds	r3, r3, r2
 8012124:	9316      	str	r3, [sp, #88]	; 0x58
 8012126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012128:	3508      	adds	r5, #8
 801212a:	3301      	adds	r3, #1
 801212c:	9315      	str	r3, [sp, #84]	; 0x54
 801212e:	2b07      	cmp	r3, #7
 8012130:	dd08      	ble.n	8012144 <_vfiprintf_r+0x610>
 8012132:	9903      	ldr	r1, [sp, #12]
 8012134:	9806      	ldr	r0, [sp, #24]
 8012136:	aa14      	add	r2, sp, #80	; 0x50
 8012138:	f7ff fcc7 	bl	8011aca <__sprint_r>
 801213c:	2800      	cmp	r0, #0
 801213e:	d000      	beq.n	8012142 <_vfiprintf_r+0x60e>
 8012140:	e161      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8012142:	ad17      	add	r5, sp, #92	; 0x5c
 8012144:	0764      	lsls	r4, r4, #29
 8012146:	d500      	bpl.n	801214a <_vfiprintf_r+0x616>
 8012148:	e140      	b.n	80123cc <_vfiprintf_r+0x898>
 801214a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801214c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801214e:	4293      	cmp	r3, r2
 8012150:	da00      	bge.n	8012154 <_vfiprintf_r+0x620>
 8012152:	0013      	movs	r3, r2
 8012154:	9a08      	ldr	r2, [sp, #32]
 8012156:	18d3      	adds	r3, r2, r3
 8012158:	9308      	str	r3, [sp, #32]
 801215a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801215c:	2b00      	cmp	r3, #0
 801215e:	d007      	beq.n	8012170 <_vfiprintf_r+0x63c>
 8012160:	9903      	ldr	r1, [sp, #12]
 8012162:	9806      	ldr	r0, [sp, #24]
 8012164:	aa14      	add	r2, sp, #80	; 0x50
 8012166:	f7ff fcb0 	bl	8011aca <__sprint_r>
 801216a:	2800      	cmp	r0, #0
 801216c:	d000      	beq.n	8012170 <_vfiprintf_r+0x63c>
 801216e:	e14a      	b.n	8012406 <_vfiprintf_r+0x8d2>
 8012170:	2300      	movs	r3, #0
 8012172:	ad17      	add	r5, sp, #92	; 0x5c
 8012174:	9315      	str	r3, [sp, #84]	; 0x54
 8012176:	e6b7      	b.n	8011ee8 <_vfiprintf_r+0x3b4>
 8012178:	0030      	movs	r0, r6
 801217a:	f7ed ffc3 	bl	8000104 <strlen>
 801217e:	9005      	str	r0, [sp, #20]
 8012180:	e719      	b.n	8011fb6 <_vfiprintf_r+0x482>
 8012182:	2310      	movs	r3, #16
 8012184:	431c      	orrs	r4, r3
 8012186:	2320      	movs	r3, #32
 8012188:	0020      	movs	r0, r4
 801218a:	4018      	ands	r0, r3
 801218c:	421c      	tst	r4, r3
 801218e:	d009      	beq.n	80121a4 <_vfiprintf_r+0x670>
 8012190:	3b19      	subs	r3, #25
 8012192:	3707      	adds	r7, #7
 8012194:	439f      	bics	r7, r3
 8012196:	0039      	movs	r1, r7
 8012198:	c90c      	ldmia	r1!, {r2, r3}
 801219a:	9200      	str	r2, [sp, #0]
 801219c:	9301      	str	r3, [sp, #4]
 801219e:	9104      	str	r1, [sp, #16]
 80121a0:	2301      	movs	r3, #1
 80121a2:	e6c7      	b.n	8011f34 <_vfiprintf_r+0x400>
 80121a4:	003b      	movs	r3, r7
 80121a6:	cb04      	ldmia	r3!, {r2}
 80121a8:	0021      	movs	r1, r4
 80121aa:	9304      	str	r3, [sp, #16]
 80121ac:	2310      	movs	r3, #16
 80121ae:	4019      	ands	r1, r3
 80121b0:	421c      	tst	r4, r3
 80121b2:	d003      	beq.n	80121bc <_vfiprintf_r+0x688>
 80121b4:	9200      	str	r2, [sp, #0]
 80121b6:	9001      	str	r0, [sp, #4]
 80121b8:	3b0f      	subs	r3, #15
 80121ba:	e6bb      	b.n	8011f34 <_vfiprintf_r+0x400>
 80121bc:	2340      	movs	r3, #64	; 0x40
 80121be:	0020      	movs	r0, r4
 80121c0:	4018      	ands	r0, r3
 80121c2:	421c      	tst	r4, r3
 80121c4:	d003      	beq.n	80121ce <_vfiprintf_r+0x69a>
 80121c6:	b293      	uxth	r3, r2
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	9101      	str	r1, [sp, #4]
 80121cc:	e7e8      	b.n	80121a0 <_vfiprintf_r+0x66c>
 80121ce:	2380      	movs	r3, #128	; 0x80
 80121d0:	0021      	movs	r1, r4
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4019      	ands	r1, r3
 80121d6:	421c      	tst	r4, r3
 80121d8:	d003      	beq.n	80121e2 <_vfiprintf_r+0x6ae>
 80121da:	b2d3      	uxtb	r3, r2
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	9001      	str	r0, [sp, #4]
 80121e0:	e7de      	b.n	80121a0 <_vfiprintf_r+0x66c>
 80121e2:	9200      	str	r2, [sp, #0]
 80121e4:	e7f1      	b.n	80121ca <_vfiprintf_r+0x696>
 80121e6:	4a23      	ldr	r2, [pc, #140]	; (8012274 <_vfiprintf_r+0x740>)
 80121e8:	0020      	movs	r0, r4
 80121ea:	920c      	str	r2, [sp, #48]	; 0x30
 80121ec:	2220      	movs	r2, #32
 80121ee:	4010      	ands	r0, r2
 80121f0:	4214      	tst	r4, r2
 80121f2:	d019      	beq.n	8012228 <_vfiprintf_r+0x6f4>
 80121f4:	3a19      	subs	r2, #25
 80121f6:	3707      	adds	r7, #7
 80121f8:	4397      	bics	r7, r2
 80121fa:	0038      	movs	r0, r7
 80121fc:	c806      	ldmia	r0!, {r1, r2}
 80121fe:	9100      	str	r1, [sp, #0]
 8012200:	9201      	str	r2, [sp, #4]
 8012202:	9004      	str	r0, [sp, #16]
 8012204:	07e2      	lsls	r2, r4, #31
 8012206:	d509      	bpl.n	801221c <_vfiprintf_r+0x6e8>
 8012208:	9a00      	ldr	r2, [sp, #0]
 801220a:	9901      	ldr	r1, [sp, #4]
 801220c:	430a      	orrs	r2, r1
 801220e:	d005      	beq.n	801221c <_vfiprintf_r+0x6e8>
 8012210:	aa13      	add	r2, sp, #76	; 0x4c
 8012212:	2130      	movs	r1, #48	; 0x30
 8012214:	7053      	strb	r3, [r2, #1]
 8012216:	2302      	movs	r3, #2
 8012218:	7011      	strb	r1, [r2, #0]
 801221a:	431c      	orrs	r4, r3
 801221c:	4b10      	ldr	r3, [pc, #64]	; (8012260 <_vfiprintf_r+0x72c>)
 801221e:	401c      	ands	r4, r3
 8012220:	2302      	movs	r3, #2
 8012222:	e687      	b.n	8011f34 <_vfiprintf_r+0x400>
 8012224:	4a10      	ldr	r2, [pc, #64]	; (8012268 <_vfiprintf_r+0x734>)
 8012226:	e7df      	b.n	80121e8 <_vfiprintf_r+0x6b4>
 8012228:	0039      	movs	r1, r7
 801222a:	c904      	ldmia	r1!, {r2}
 801222c:	0026      	movs	r6, r4
 801222e:	9104      	str	r1, [sp, #16]
 8012230:	2110      	movs	r1, #16
 8012232:	400e      	ands	r6, r1
 8012234:	420c      	tst	r4, r1
 8012236:	d002      	beq.n	801223e <_vfiprintf_r+0x70a>
 8012238:	9200      	str	r2, [sp, #0]
 801223a:	9001      	str	r0, [sp, #4]
 801223c:	e7e2      	b.n	8012204 <_vfiprintf_r+0x6d0>
 801223e:	2140      	movs	r1, #64	; 0x40
 8012240:	0020      	movs	r0, r4
 8012242:	4008      	ands	r0, r1
 8012244:	420c      	tst	r4, r1
 8012246:	d003      	beq.n	8012250 <_vfiprintf_r+0x71c>
 8012248:	b292      	uxth	r2, r2
 801224a:	9200      	str	r2, [sp, #0]
 801224c:	9601      	str	r6, [sp, #4]
 801224e:	e7d9      	b.n	8012204 <_vfiprintf_r+0x6d0>
 8012250:	2180      	movs	r1, #128	; 0x80
 8012252:	0026      	movs	r6, r4
 8012254:	0089      	lsls	r1, r1, #2
 8012256:	400e      	ands	r6, r1
 8012258:	420c      	tst	r4, r1
 801225a:	d0f6      	beq.n	801224a <_vfiprintf_r+0x716>
 801225c:	b2d2      	uxtb	r2, r2
 801225e:	e7eb      	b.n	8012238 <_vfiprintf_r+0x704>
 8012260:	fffffbff 	.word	0xfffffbff
 8012264:	00007830 	.word	0x00007830
 8012268:	08014abc 	.word	0x08014abc
 801226c:	08014bc9 	.word	0x08014bc9
 8012270:	08014bd9 	.word	0x08014bd9
 8012274:	08014acd 	.word	0x08014acd
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d109      	bne.n	8012292 <_vfiprintf_r+0x75e>
 801227e:	9b00      	ldr	r3, [sp, #0]
 8012280:	2b09      	cmp	r3, #9
 8012282:	d806      	bhi.n	8012292 <_vfiprintf_r+0x75e>
 8012284:	26b7      	movs	r6, #183	; 0xb7
 8012286:	ab12      	add	r3, sp, #72	; 0x48
 8012288:	18f6      	adds	r6, r6, r3
 801228a:	9b00      	ldr	r3, [sp, #0]
 801228c:	3330      	adds	r3, #48	; 0x30
 801228e:	7033      	strb	r3, [r6, #0]
 8012290:	e115      	b.n	80124be <_vfiprintf_r+0x98a>
 8012292:	2380      	movs	r3, #128	; 0x80
 8012294:	2400      	movs	r4, #0
 8012296:	00db      	lsls	r3, r3, #3
 8012298:	403b      	ands	r3, r7
 801229a:	ae40      	add	r6, sp, #256	; 0x100
 801229c:	930a      	str	r3, [sp, #40]	; 0x28
 801229e:	220a      	movs	r2, #10
 80122a0:	9800      	ldr	r0, [sp, #0]
 80122a2:	9901      	ldr	r1, [sp, #4]
 80122a4:	2300      	movs	r3, #0
 80122a6:	f7ee f8fd 	bl	80004a4 <__aeabi_uldivmod>
 80122aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ac:	3e01      	subs	r6, #1
 80122ae:	3230      	adds	r2, #48	; 0x30
 80122b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80122b2:	9110      	str	r1, [sp, #64]	; 0x40
 80122b4:	7032      	strb	r2, [r6, #0]
 80122b6:	3401      	adds	r4, #1
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d01a      	beq.n	80122f2 <_vfiprintf_r+0x7be>
 80122bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	42a3      	cmp	r3, r4
 80122c2:	d116      	bne.n	80122f2 <_vfiprintf_r+0x7be>
 80122c4:	2cff      	cmp	r4, #255	; 0xff
 80122c6:	d014      	beq.n	80122f2 <_vfiprintf_r+0x7be>
 80122c8:	9b01      	ldr	r3, [sp, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <_vfiprintf_r+0x7a0>
 80122ce:	9b00      	ldr	r3, [sp, #0]
 80122d0:	2b09      	cmp	r3, #9
 80122d2:	d90e      	bls.n	80122f2 <_vfiprintf_r+0x7be>
 80122d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80122d8:	1af6      	subs	r6, r6, r3
 80122da:	001a      	movs	r2, r3
 80122dc:	0030      	movs	r0, r6
 80122de:	f7f9 ffe6 	bl	800c2ae <strncpy>
 80122e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122e4:	2400      	movs	r4, #0
 80122e6:	785b      	ldrb	r3, [r3, #1]
 80122e8:	1e5a      	subs	r2, r3, #1
 80122ea:	4193      	sbcs	r3, r2
 80122ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122ee:	18d3      	adds	r3, r2, r3
 80122f0:	930d      	str	r3, [sp, #52]	; 0x34
 80122f2:	9b01      	ldr	r3, [sp, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d103      	bne.n	8012300 <_vfiprintf_r+0x7cc>
 80122f8:	9b00      	ldr	r3, [sp, #0]
 80122fa:	2b09      	cmp	r3, #9
 80122fc:	d800      	bhi.n	8012300 <_vfiprintf_r+0x7cc>
 80122fe:	e0de      	b.n	80124be <_vfiprintf_r+0x98a>
 8012300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012306:	9301      	str	r3, [sp, #4]
 8012308:	e7c9      	b.n	801229e <_vfiprintf_r+0x76a>
 801230a:	200f      	movs	r0, #15
 801230c:	9b00      	ldr	r3, [sp, #0]
 801230e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012310:	4003      	ands	r3, r0
 8012312:	5cd3      	ldrb	r3, [r2, r3]
 8012314:	3e01      	subs	r6, #1
 8012316:	7033      	strb	r3, [r6, #0]
 8012318:	9b01      	ldr	r3, [sp, #4]
 801231a:	0719      	lsls	r1, r3, #28
 801231c:	9b00      	ldr	r3, [sp, #0]
 801231e:	091a      	lsrs	r2, r3, #4
 8012320:	9b01      	ldr	r3, [sp, #4]
 8012322:	4311      	orrs	r1, r2
 8012324:	091b      	lsrs	r3, r3, #4
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	000b      	movs	r3, r1
 801232a:	9a01      	ldr	r2, [sp, #4]
 801232c:	9100      	str	r1, [sp, #0]
 801232e:	4313      	orrs	r3, r2
 8012330:	d1ec      	bne.n	801230c <_vfiprintf_r+0x7d8>
 8012332:	e0c4      	b.n	80124be <_vfiprintf_r+0x98a>
 8012334:	ae40      	add	r6, sp, #256	; 0x100
 8012336:	2b00      	cmp	r3, #0
 8012338:	d000      	beq.n	801233c <_vfiprintf_r+0x808>
 801233a:	e0c0      	b.n	80124be <_vfiprintf_r+0x98a>
 801233c:	07e4      	lsls	r4, r4, #31
 801233e:	d400      	bmi.n	8012342 <_vfiprintf_r+0x80e>
 8012340:	e0bd      	b.n	80124be <_vfiprintf_r+0x98a>
 8012342:	26b7      	movs	r6, #183	; 0xb7
 8012344:	ab12      	add	r3, sp, #72	; 0x48
 8012346:	18f6      	adds	r6, r6, r3
 8012348:	2330      	movs	r3, #48	; 0x30
 801234a:	e7a0      	b.n	801228e <_vfiprintf_r+0x75a>
 801234c:	2b00      	cmp	r3, #0
 801234e:	d100      	bne.n	8012352 <_vfiprintf_r+0x81e>
 8012350:	e07e      	b.n	8012450 <_vfiprintf_r+0x91c>
 8012352:	ae27      	add	r6, sp, #156	; 0x9c
 8012354:	7033      	strb	r3, [r6, #0]
 8012356:	2300      	movs	r3, #0
 8012358:	aa12      	add	r2, sp, #72	; 0x48
 801235a:	70d3      	strb	r3, [r2, #3]
 801235c:	9704      	str	r7, [sp, #16]
 801235e:	e576      	b.n	8011e4e <_vfiprintf_r+0x31a>
 8012360:	2010      	movs	r0, #16
 8012362:	1812      	adds	r2, r2, r0
 8012364:	6068      	str	r0, [r5, #4]
 8012366:	9216      	str	r2, [sp, #88]	; 0x58
 8012368:	9315      	str	r3, [sp, #84]	; 0x54
 801236a:	2b07      	cmp	r3, #7
 801236c:	dd07      	ble.n	801237e <_vfiprintf_r+0x84a>
 801236e:	9903      	ldr	r1, [sp, #12]
 8012370:	9806      	ldr	r0, [sp, #24]
 8012372:	aa14      	add	r2, sp, #80	; 0x50
 8012374:	f7ff fba9 	bl	8011aca <__sprint_r>
 8012378:	2800      	cmp	r0, #0
 801237a:	d144      	bne.n	8012406 <_vfiprintf_r+0x8d2>
 801237c:	a917      	add	r1, sp, #92	; 0x5c
 801237e:	000d      	movs	r5, r1
 8012380:	3f10      	subs	r7, #16
 8012382:	e63b      	b.n	8011ffc <_vfiprintf_r+0x4c8>
 8012384:	2010      	movs	r0, #16
 8012386:	1812      	adds	r2, r2, r0
 8012388:	6068      	str	r0, [r5, #4]
 801238a:	9216      	str	r2, [sp, #88]	; 0x58
 801238c:	9315      	str	r3, [sp, #84]	; 0x54
 801238e:	2b07      	cmp	r3, #7
 8012390:	dd07      	ble.n	80123a2 <_vfiprintf_r+0x86e>
 8012392:	9903      	ldr	r1, [sp, #12]
 8012394:	9806      	ldr	r0, [sp, #24]
 8012396:	aa14      	add	r2, sp, #80	; 0x50
 8012398:	f7ff fb97 	bl	8011aca <__sprint_r>
 801239c:	2800      	cmp	r0, #0
 801239e:	d132      	bne.n	8012406 <_vfiprintf_r+0x8d2>
 80123a0:	a917      	add	r1, sp, #92	; 0x5c
 80123a2:	000d      	movs	r5, r1
 80123a4:	3f10      	subs	r7, #16
 80123a6:	e67e      	b.n	80120a6 <_vfiprintf_r+0x572>
 80123a8:	2010      	movs	r0, #16
 80123aa:	1812      	adds	r2, r2, r0
 80123ac:	6068      	str	r0, [r5, #4]
 80123ae:	9216      	str	r2, [sp, #88]	; 0x58
 80123b0:	9315      	str	r3, [sp, #84]	; 0x54
 80123b2:	2b07      	cmp	r3, #7
 80123b4:	dd07      	ble.n	80123c6 <_vfiprintf_r+0x892>
 80123b6:	9903      	ldr	r1, [sp, #12]
 80123b8:	9806      	ldr	r0, [sp, #24]
 80123ba:	aa14      	add	r2, sp, #80	; 0x50
 80123bc:	f7ff fb85 	bl	8011aca <__sprint_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d120      	bne.n	8012406 <_vfiprintf_r+0x8d2>
 80123c4:	a917      	add	r1, sp, #92	; 0x5c
 80123c6:	000d      	movs	r5, r1
 80123c8:	3f10      	subs	r7, #16
 80123ca:	e68b      	b.n	80120e4 <_vfiprintf_r+0x5b0>
 80123cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123d0:	2610      	movs	r6, #16
 80123d2:	1a9c      	subs	r4, r3, r2
 80123d4:	2c00      	cmp	r4, #0
 80123d6:	dc00      	bgt.n	80123da <_vfiprintf_r+0x8a6>
 80123d8:	e6b7      	b.n	801214a <_vfiprintf_r+0x616>
 80123da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80123dc:	4a3b      	ldr	r2, [pc, #236]	; (80124cc <_vfiprintf_r+0x998>)
 80123de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123e0:	3101      	adds	r1, #1
 80123e2:	602a      	str	r2, [r5, #0]
 80123e4:	2c10      	cmp	r4, #16
 80123e6:	dc22      	bgt.n	801242e <_vfiprintf_r+0x8fa>
 80123e8:	606c      	str	r4, [r5, #4]
 80123ea:	18e4      	adds	r4, r4, r3
 80123ec:	9416      	str	r4, [sp, #88]	; 0x58
 80123ee:	9115      	str	r1, [sp, #84]	; 0x54
 80123f0:	2907      	cmp	r1, #7
 80123f2:	dc00      	bgt.n	80123f6 <_vfiprintf_r+0x8c2>
 80123f4:	e6a9      	b.n	801214a <_vfiprintf_r+0x616>
 80123f6:	9903      	ldr	r1, [sp, #12]
 80123f8:	9806      	ldr	r0, [sp, #24]
 80123fa:	aa14      	add	r2, sp, #80	; 0x50
 80123fc:	f7ff fb65 	bl	8011aca <__sprint_r>
 8012400:	2800      	cmp	r0, #0
 8012402:	d100      	bne.n	8012406 <_vfiprintf_r+0x8d2>
 8012404:	e6a1      	b.n	801214a <_vfiprintf_r+0x616>
 8012406:	9b03      	ldr	r3, [sp, #12]
 8012408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801240a:	07db      	lsls	r3, r3, #31
 801240c:	d407      	bmi.n	801241e <_vfiprintf_r+0x8ea>
 801240e:	9b03      	ldr	r3, [sp, #12]
 8012410:	899b      	ldrh	r3, [r3, #12]
 8012412:	059b      	lsls	r3, r3, #22
 8012414:	d403      	bmi.n	801241e <_vfiprintf_r+0x8ea>
 8012416:	9b03      	ldr	r3, [sp, #12]
 8012418:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801241a:	f7fa f808 	bl	800c42e <__retarget_lock_release_recursive>
 801241e:	9b03      	ldr	r3, [sp, #12]
 8012420:	899b      	ldrh	r3, [r3, #12]
 8012422:	065b      	lsls	r3, r3, #25
 8012424:	d401      	bmi.n	801242a <_vfiprintf_r+0x8f6>
 8012426:	f7ff fbc3 	bl	8011bb0 <_vfiprintf_r+0x7c>
 801242a:	f7ff fbbe 	bl	8011baa <_vfiprintf_r+0x76>
 801242e:	3310      	adds	r3, #16
 8012430:	606e      	str	r6, [r5, #4]
 8012432:	9316      	str	r3, [sp, #88]	; 0x58
 8012434:	9115      	str	r1, [sp, #84]	; 0x54
 8012436:	3508      	adds	r5, #8
 8012438:	2907      	cmp	r1, #7
 801243a:	dd07      	ble.n	801244c <_vfiprintf_r+0x918>
 801243c:	9903      	ldr	r1, [sp, #12]
 801243e:	9806      	ldr	r0, [sp, #24]
 8012440:	aa14      	add	r2, sp, #80	; 0x50
 8012442:	f7ff fb42 	bl	8011aca <__sprint_r>
 8012446:	2800      	cmp	r0, #0
 8012448:	d1dd      	bne.n	8012406 <_vfiprintf_r+0x8d2>
 801244a:	ad17      	add	r5, sp, #92	; 0x5c
 801244c:	3c10      	subs	r4, #16
 801244e:	e7c4      	b.n	80123da <_vfiprintf_r+0x8a6>
 8012450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012452:	2b00      	cmp	r3, #0
 8012454:	d102      	bne.n	801245c <_vfiprintf_r+0x928>
 8012456:	2300      	movs	r3, #0
 8012458:	9315      	str	r3, [sp, #84]	; 0x54
 801245a:	e7d4      	b.n	8012406 <_vfiprintf_r+0x8d2>
 801245c:	9903      	ldr	r1, [sp, #12]
 801245e:	9806      	ldr	r0, [sp, #24]
 8012460:	aa14      	add	r2, sp, #80	; 0x50
 8012462:	f7ff fb32 	bl	8011aca <__sprint_r>
 8012466:	2800      	cmp	r0, #0
 8012468:	d0f5      	beq.n	8012456 <_vfiprintf_r+0x922>
 801246a:	e7cc      	b.n	8012406 <_vfiprintf_r+0x8d2>
 801246c:	0027      	movs	r7, r4
 801246e:	2a00      	cmp	r2, #0
 8012470:	d100      	bne.n	8012474 <_vfiprintf_r+0x940>
 8012472:	e51b      	b.n	8011eac <_vfiprintf_r+0x378>
 8012474:	2b01      	cmp	r3, #1
 8012476:	d100      	bne.n	801247a <_vfiprintf_r+0x946>
 8012478:	e6fe      	b.n	8012278 <_vfiprintf_r+0x744>
 801247a:	ae40      	add	r6, sp, #256	; 0x100
 801247c:	2b02      	cmp	r3, #2
 801247e:	d100      	bne.n	8012482 <_vfiprintf_r+0x94e>
 8012480:	e743      	b.n	801230a <_vfiprintf_r+0x7d6>
 8012482:	2307      	movs	r3, #7
 8012484:	469c      	mov	ip, r3
 8012486:	4663      	mov	r3, ip
 8012488:	9900      	ldr	r1, [sp, #0]
 801248a:	0032      	movs	r2, r6
 801248c:	400b      	ands	r3, r1
 801248e:	9901      	ldr	r1, [sp, #4]
 8012490:	3e01      	subs	r6, #1
 8012492:	074c      	lsls	r4, r1, #29
 8012494:	9900      	ldr	r1, [sp, #0]
 8012496:	3330      	adds	r3, #48	; 0x30
 8012498:	08c8      	lsrs	r0, r1, #3
 801249a:	9901      	ldr	r1, [sp, #4]
 801249c:	4304      	orrs	r4, r0
 801249e:	08c9      	lsrs	r1, r1, #3
 80124a0:	9101      	str	r1, [sp, #4]
 80124a2:	0021      	movs	r1, r4
 80124a4:	9801      	ldr	r0, [sp, #4]
 80124a6:	7033      	strb	r3, [r6, #0]
 80124a8:	9400      	str	r4, [sp, #0]
 80124aa:	4301      	orrs	r1, r0
 80124ac:	d1eb      	bne.n	8012486 <_vfiprintf_r+0x952>
 80124ae:	07f9      	lsls	r1, r7, #31
 80124b0:	d505      	bpl.n	80124be <_vfiprintf_r+0x98a>
 80124b2:	2b30      	cmp	r3, #48	; 0x30
 80124b4:	d003      	beq.n	80124be <_vfiprintf_r+0x98a>
 80124b6:	2330      	movs	r3, #48	; 0x30
 80124b8:	3e01      	subs	r6, #1
 80124ba:	7033      	strb	r3, [r6, #0]
 80124bc:	1e96      	subs	r6, r2, #2
 80124be:	9b05      	ldr	r3, [sp, #20]
 80124c0:	003c      	movs	r4, r7
 80124c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80124c4:	ab40      	add	r3, sp, #256	; 0x100
 80124c6:	1b9b      	subs	r3, r3, r6
 80124c8:	9305      	str	r3, [sp, #20]
 80124ca:	e575      	b.n	8011fb8 <_vfiprintf_r+0x484>
 80124cc:	08014bc9 	.word	0x08014bc9

080124d0 <__sbprintf>:
 80124d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124d2:	0015      	movs	r5, r2
 80124d4:	2202      	movs	r2, #2
 80124d6:	4c1e      	ldr	r4, [pc, #120]	; (8012550 <__sbprintf+0x80>)
 80124d8:	001f      	movs	r7, r3
 80124da:	898b      	ldrh	r3, [r1, #12]
 80124dc:	44a5      	add	sp, r4
 80124de:	4393      	bics	r3, r2
 80124e0:	466a      	mov	r2, sp
 80124e2:	8193      	strh	r3, [r2, #12]
 80124e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80124e6:	0006      	movs	r6, r0
 80124e8:	9319      	str	r3, [sp, #100]	; 0x64
 80124ea:	89cb      	ldrh	r3, [r1, #14]
 80124ec:	a816      	add	r0, sp, #88	; 0x58
 80124ee:	81d3      	strh	r3, [r2, #14]
 80124f0:	69cb      	ldr	r3, [r1, #28]
 80124f2:	000c      	movs	r4, r1
 80124f4:	9307      	str	r3, [sp, #28]
 80124f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80124f8:	9309      	str	r3, [sp, #36]	; 0x24
 80124fa:	ab1a      	add	r3, sp, #104	; 0x68
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	9304      	str	r3, [sp, #16]
 8012500:	2380      	movs	r3, #128	; 0x80
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	9302      	str	r3, [sp, #8]
 8012506:	9305      	str	r3, [sp, #20]
 8012508:	2300      	movs	r3, #0
 801250a:	9306      	str	r3, [sp, #24]
 801250c:	f7f9 ff8c 	bl	800c428 <__retarget_lock_init_recursive>
 8012510:	002a      	movs	r2, r5
 8012512:	003b      	movs	r3, r7
 8012514:	4669      	mov	r1, sp
 8012516:	0030      	movs	r0, r6
 8012518:	f7ff fb0c 	bl	8011b34 <_vfiprintf_r>
 801251c:	1e05      	subs	r5, r0, #0
 801251e:	db07      	blt.n	8012530 <__sbprintf+0x60>
 8012520:	4669      	mov	r1, sp
 8012522:	0030      	movs	r0, r6
 8012524:	f7fd fdf6 	bl	8010114 <_fflush_r>
 8012528:	2800      	cmp	r0, #0
 801252a:	d001      	beq.n	8012530 <__sbprintf+0x60>
 801252c:	2501      	movs	r5, #1
 801252e:	426d      	negs	r5, r5
 8012530:	466b      	mov	r3, sp
 8012532:	899a      	ldrh	r2, [r3, #12]
 8012534:	2340      	movs	r3, #64	; 0x40
 8012536:	421a      	tst	r2, r3
 8012538:	d002      	beq.n	8012540 <__sbprintf+0x70>
 801253a:	89a2      	ldrh	r2, [r4, #12]
 801253c:	4313      	orrs	r3, r2
 801253e:	81a3      	strh	r3, [r4, #12]
 8012540:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012542:	f7f9 ff72 	bl	800c42a <__retarget_lock_close_recursive>
 8012546:	0028      	movs	r0, r5
 8012548:	4b02      	ldr	r3, [pc, #8]	; (8012554 <__sbprintf+0x84>)
 801254a:	449d      	add	sp, r3
 801254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801254e:	46c0      	nop			; (mov r8, r8)
 8012550:	fffffb94 	.word	0xfffffb94
 8012554:	0000046c 	.word	0x0000046c

08012558 <__sfvwrite_r>:
 8012558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801255a:	6893      	ldr	r3, [r2, #8]
 801255c:	b087      	sub	sp, #28
 801255e:	000c      	movs	r4, r1
 8012560:	9002      	str	r0, [sp, #8]
 8012562:	9204      	str	r2, [sp, #16]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d102      	bne.n	801256e <__sfvwrite_r+0x16>
 8012568:	2000      	movs	r0, #0
 801256a:	b007      	add	sp, #28
 801256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801256e:	898b      	ldrh	r3, [r1, #12]
 8012570:	071b      	lsls	r3, r3, #28
 8012572:	d557      	bpl.n	8012624 <__sfvwrite_r+0xcc>
 8012574:	690b      	ldr	r3, [r1, #16]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d054      	beq.n	8012624 <__sfvwrite_r+0xcc>
 801257a:	9b04      	ldr	r3, [sp, #16]
 801257c:	2202      	movs	r2, #2
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	89a3      	ldrh	r3, [r4, #12]
 8012584:	001f      	movs	r7, r3
 8012586:	4017      	ands	r7, r2
 8012588:	4213      	tst	r3, r2
 801258a:	d171      	bne.n	8012670 <__sfvwrite_r+0x118>
 801258c:	2201      	movs	r2, #1
 801258e:	2101      	movs	r1, #1
 8012590:	401a      	ands	r2, r3
 8012592:	420b      	tst	r3, r1
 8012594:	d100      	bne.n	8012598 <__sfvwrite_r+0x40>
 8012596:	e0a5      	b.n	80126e4 <__sfvwrite_r+0x18c>
 8012598:	0038      	movs	r0, r7
 801259a:	003e      	movs	r6, r7
 801259c:	9703      	str	r7, [sp, #12]
 801259e:	9b03      	ldr	r3, [sp, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d100      	bne.n	80125a6 <__sfvwrite_r+0x4e>
 80125a4:	e10b      	b.n	80127be <__sfvwrite_r+0x266>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d10a      	bne.n	80125c0 <__sfvwrite_r+0x68>
 80125aa:	001a      	movs	r2, r3
 80125ac:	210a      	movs	r1, #10
 80125ae:	0030      	movs	r0, r6
 80125b0:	f7fd fe2a 	bl	8010208 <memchr>
 80125b4:	9b03      	ldr	r3, [sp, #12]
 80125b6:	1c5f      	adds	r7, r3, #1
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d001      	beq.n	80125c0 <__sfvwrite_r+0x68>
 80125bc:	3001      	adds	r0, #1
 80125be:	1b87      	subs	r7, r0, r6
 80125c0:	9b03      	ldr	r3, [sp, #12]
 80125c2:	9705      	str	r7, [sp, #20]
 80125c4:	429f      	cmp	r7, r3
 80125c6:	d900      	bls.n	80125ca <__sfvwrite_r+0x72>
 80125c8:	9305      	str	r3, [sp, #20]
 80125ca:	6820      	ldr	r0, [r4, #0]
 80125cc:	6922      	ldr	r2, [r4, #16]
 80125ce:	68a5      	ldr	r5, [r4, #8]
 80125d0:	6963      	ldr	r3, [r4, #20]
 80125d2:	4290      	cmp	r0, r2
 80125d4:	d800      	bhi.n	80125d8 <__sfvwrite_r+0x80>
 80125d6:	e0fb      	b.n	80127d0 <__sfvwrite_r+0x278>
 80125d8:	9a05      	ldr	r2, [sp, #20]
 80125da:	18ed      	adds	r5, r5, r3
 80125dc:	42aa      	cmp	r2, r5
 80125de:	dc00      	bgt.n	80125e2 <__sfvwrite_r+0x8a>
 80125e0:	e0f6      	b.n	80127d0 <__sfvwrite_r+0x278>
 80125e2:	0031      	movs	r1, r6
 80125e4:	002a      	movs	r2, r5
 80125e6:	f000 fa1e 	bl	8012a26 <memmove>
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	0021      	movs	r1, r4
 80125ee:	195b      	adds	r3, r3, r5
 80125f0:	9802      	ldr	r0, [sp, #8]
 80125f2:	6023      	str	r3, [r4, #0]
 80125f4:	f7fd fd8e 	bl	8010114 <_fflush_r>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d16e      	bne.n	80126da <__sfvwrite_r+0x182>
 80125fc:	2001      	movs	r0, #1
 80125fe:	1b7f      	subs	r7, r7, r5
 8012600:	d105      	bne.n	801260e <__sfvwrite_r+0xb6>
 8012602:	0021      	movs	r1, r4
 8012604:	9802      	ldr	r0, [sp, #8]
 8012606:	f7fd fd85 	bl	8010114 <_fflush_r>
 801260a:	2800      	cmp	r0, #0
 801260c:	d165      	bne.n	80126da <__sfvwrite_r+0x182>
 801260e:	9b03      	ldr	r3, [sp, #12]
 8012610:	9a04      	ldr	r2, [sp, #16]
 8012612:	1b5b      	subs	r3, r3, r5
 8012614:	9303      	str	r3, [sp, #12]
 8012616:	9b04      	ldr	r3, [sp, #16]
 8012618:	1976      	adds	r6, r6, r5
 801261a:	689b      	ldr	r3, [r3, #8]
 801261c:	1b5b      	subs	r3, r3, r5
 801261e:	6093      	str	r3, [r2, #8]
 8012620:	d1bd      	bne.n	801259e <__sfvwrite_r+0x46>
 8012622:	e7a1      	b.n	8012568 <__sfvwrite_r+0x10>
 8012624:	0021      	movs	r1, r4
 8012626:	9802      	ldr	r0, [sp, #8]
 8012628:	f000 f932 	bl	8012890 <__swsetup_r>
 801262c:	2800      	cmp	r0, #0
 801262e:	d0a4      	beq.n	801257a <__sfvwrite_r+0x22>
 8012630:	2001      	movs	r0, #1
 8012632:	4240      	negs	r0, r0
 8012634:	e799      	b.n	801256a <__sfvwrite_r+0x12>
 8012636:	9b01      	ldr	r3, [sp, #4]
 8012638:	681e      	ldr	r6, [r3, #0]
 801263a:	685d      	ldr	r5, [r3, #4]
 801263c:	3308      	adds	r3, #8
 801263e:	9301      	str	r3, [sp, #4]
 8012640:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012642:	69e1      	ldr	r1, [r4, #28]
 8012644:	2d00      	cmp	r5, #0
 8012646:	d0f6      	beq.n	8012636 <__sfvwrite_r+0xde>
 8012648:	4a6e      	ldr	r2, [pc, #440]	; (8012804 <__sfvwrite_r+0x2ac>)
 801264a:	002b      	movs	r3, r5
 801264c:	4295      	cmp	r5, r2
 801264e:	d900      	bls.n	8012652 <__sfvwrite_r+0xfa>
 8012650:	0013      	movs	r3, r2
 8012652:	0032      	movs	r2, r6
 8012654:	9802      	ldr	r0, [sp, #8]
 8012656:	47b8      	blx	r7
 8012658:	2800      	cmp	r0, #0
 801265a:	dd3e      	ble.n	80126da <__sfvwrite_r+0x182>
 801265c:	9b04      	ldr	r3, [sp, #16]
 801265e:	9a04      	ldr	r2, [sp, #16]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	1836      	adds	r6, r6, r0
 8012664:	1a1b      	subs	r3, r3, r0
 8012666:	1a2d      	subs	r5, r5, r0
 8012668:	6093      	str	r3, [r2, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d1e8      	bne.n	8012640 <__sfvwrite_r+0xe8>
 801266e:	e77b      	b.n	8012568 <__sfvwrite_r+0x10>
 8012670:	2600      	movs	r6, #0
 8012672:	0035      	movs	r5, r6
 8012674:	e7e4      	b.n	8012640 <__sfvwrite_r+0xe8>
 8012676:	9b01      	ldr	r3, [sp, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	9303      	str	r3, [sp, #12]
 801267c:	9b01      	ldr	r3, [sp, #4]
 801267e:	685d      	ldr	r5, [r3, #4]
 8012680:	3308      	adds	r3, #8
 8012682:	9301      	str	r3, [sp, #4]
 8012684:	220c      	movs	r2, #12
 8012686:	5ea3      	ldrsh	r3, [r4, r2]
 8012688:	6820      	ldr	r0, [r4, #0]
 801268a:	68a6      	ldr	r6, [r4, #8]
 801268c:	2d00      	cmp	r5, #0
 801268e:	d0f2      	beq.n	8012676 <__sfvwrite_r+0x11e>
 8012690:	2180      	movs	r1, #128	; 0x80
 8012692:	0089      	lsls	r1, r1, #2
 8012694:	b29a      	uxth	r2, r3
 8012696:	420b      	tst	r3, r1
 8012698:	d062      	beq.n	8012760 <__sfvwrite_r+0x208>
 801269a:	42ae      	cmp	r6, r5
 801269c:	d837      	bhi.n	801270e <__sfvwrite_r+0x1b6>
 801269e:	2390      	movs	r3, #144	; 0x90
 80126a0:	00db      	lsls	r3, r3, #3
 80126a2:	421a      	tst	r2, r3
 80126a4:	d033      	beq.n	801270e <__sfvwrite_r+0x1b6>
 80126a6:	6921      	ldr	r1, [r4, #16]
 80126a8:	1a43      	subs	r3, r0, r1
 80126aa:	2003      	movs	r0, #3
 80126ac:	9305      	str	r3, [sp, #20]
 80126ae:	6963      	ldr	r3, [r4, #20]
 80126b0:	4343      	muls	r3, r0
 80126b2:	0fdf      	lsrs	r7, r3, #31
 80126b4:	18ff      	adds	r7, r7, r3
 80126b6:	9b05      	ldr	r3, [sp, #20]
 80126b8:	107f      	asrs	r7, r7, #1
 80126ba:	3301      	adds	r3, #1
 80126bc:	195b      	adds	r3, r3, r5
 80126be:	42bb      	cmp	r3, r7
 80126c0:	d900      	bls.n	80126c4 <__sfvwrite_r+0x16c>
 80126c2:	001f      	movs	r7, r3
 80126c4:	0552      	lsls	r2, r2, #21
 80126c6:	d53c      	bpl.n	8012742 <__sfvwrite_r+0x1ea>
 80126c8:	0039      	movs	r1, r7
 80126ca:	9802      	ldr	r0, [sp, #8]
 80126cc:	f7f8 fb56 	bl	800ad7c <_malloc_r>
 80126d0:	1e06      	subs	r6, r0, #0
 80126d2:	d10a      	bne.n	80126ea <__sfvwrite_r+0x192>
 80126d4:	230c      	movs	r3, #12
 80126d6:	9a02      	ldr	r2, [sp, #8]
 80126d8:	6013      	str	r3, [r2, #0]
 80126da:	2340      	movs	r3, #64	; 0x40
 80126dc:	89a2      	ldrh	r2, [r4, #12]
 80126de:	4313      	orrs	r3, r2
 80126e0:	81a3      	strh	r3, [r4, #12]
 80126e2:	e7a5      	b.n	8012630 <__sfvwrite_r+0xd8>
 80126e4:	0015      	movs	r5, r2
 80126e6:	9203      	str	r2, [sp, #12]
 80126e8:	e7cc      	b.n	8012684 <__sfvwrite_r+0x12c>
 80126ea:	9a05      	ldr	r2, [sp, #20]
 80126ec:	6921      	ldr	r1, [r4, #16]
 80126ee:	f7f9 feaa 	bl	800c446 <memcpy>
 80126f2:	89a2      	ldrh	r2, [r4, #12]
 80126f4:	4b44      	ldr	r3, [pc, #272]	; (8012808 <__sfvwrite_r+0x2b0>)
 80126f6:	401a      	ands	r2, r3
 80126f8:	2380      	movs	r3, #128	; 0x80
 80126fa:	4313      	orrs	r3, r2
 80126fc:	81a3      	strh	r3, [r4, #12]
 80126fe:	9b05      	ldr	r3, [sp, #20]
 8012700:	6126      	str	r6, [r4, #16]
 8012702:	18f6      	adds	r6, r6, r3
 8012704:	6026      	str	r6, [r4, #0]
 8012706:	002e      	movs	r6, r5
 8012708:	6167      	str	r7, [r4, #20]
 801270a:	1aff      	subs	r7, r7, r3
 801270c:	60a7      	str	r7, [r4, #8]
 801270e:	002f      	movs	r7, r5
 8012710:	42ae      	cmp	r6, r5
 8012712:	d900      	bls.n	8012716 <__sfvwrite_r+0x1be>
 8012714:	002e      	movs	r6, r5
 8012716:	0032      	movs	r2, r6
 8012718:	9903      	ldr	r1, [sp, #12]
 801271a:	6820      	ldr	r0, [r4, #0]
 801271c:	f000 f983 	bl	8012a26 <memmove>
 8012720:	68a3      	ldr	r3, [r4, #8]
 8012722:	1b9b      	subs	r3, r3, r6
 8012724:	60a3      	str	r3, [r4, #8]
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	199b      	adds	r3, r3, r6
 801272a:	6023      	str	r3, [r4, #0]
 801272c:	9b03      	ldr	r3, [sp, #12]
 801272e:	9a04      	ldr	r2, [sp, #16]
 8012730:	19db      	adds	r3, r3, r7
 8012732:	9303      	str	r3, [sp, #12]
 8012734:	9b04      	ldr	r3, [sp, #16]
 8012736:	1bed      	subs	r5, r5, r7
 8012738:	689b      	ldr	r3, [r3, #8]
 801273a:	1bdb      	subs	r3, r3, r7
 801273c:	6093      	str	r3, [r2, #8]
 801273e:	d1a1      	bne.n	8012684 <__sfvwrite_r+0x12c>
 8012740:	e712      	b.n	8012568 <__sfvwrite_r+0x10>
 8012742:	003a      	movs	r2, r7
 8012744:	9802      	ldr	r0, [sp, #8]
 8012746:	f7fe fcd7 	bl	80110f8 <_realloc_r>
 801274a:	1e06      	subs	r6, r0, #0
 801274c:	d1d7      	bne.n	80126fe <__sfvwrite_r+0x1a6>
 801274e:	6921      	ldr	r1, [r4, #16]
 8012750:	9802      	ldr	r0, [sp, #8]
 8012752:	f7f9 fef3 	bl	800c53c <_free_r>
 8012756:	2280      	movs	r2, #128	; 0x80
 8012758:	89a3      	ldrh	r3, [r4, #12]
 801275a:	4393      	bics	r3, r2
 801275c:	81a3      	strh	r3, [r4, #12]
 801275e:	e7b9      	b.n	80126d4 <__sfvwrite_r+0x17c>
 8012760:	6923      	ldr	r3, [r4, #16]
 8012762:	4283      	cmp	r3, r0
 8012764:	d302      	bcc.n	801276c <__sfvwrite_r+0x214>
 8012766:	6967      	ldr	r7, [r4, #20]
 8012768:	42af      	cmp	r7, r5
 801276a:	d916      	bls.n	801279a <__sfvwrite_r+0x242>
 801276c:	42ae      	cmp	r6, r5
 801276e:	d900      	bls.n	8012772 <__sfvwrite_r+0x21a>
 8012770:	002e      	movs	r6, r5
 8012772:	0032      	movs	r2, r6
 8012774:	9903      	ldr	r1, [sp, #12]
 8012776:	f000 f956 	bl	8012a26 <memmove>
 801277a:	68a3      	ldr	r3, [r4, #8]
 801277c:	6822      	ldr	r2, [r4, #0]
 801277e:	1b9b      	subs	r3, r3, r6
 8012780:	1992      	adds	r2, r2, r6
 8012782:	0037      	movs	r7, r6
 8012784:	60a3      	str	r3, [r4, #8]
 8012786:	6022      	str	r2, [r4, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1cf      	bne.n	801272c <__sfvwrite_r+0x1d4>
 801278c:	0021      	movs	r1, r4
 801278e:	9802      	ldr	r0, [sp, #8]
 8012790:	f7fd fcc0 	bl	8010114 <_fflush_r>
 8012794:	2800      	cmp	r0, #0
 8012796:	d0c9      	beq.n	801272c <__sfvwrite_r+0x1d4>
 8012798:	e79f      	b.n	80126da <__sfvwrite_r+0x182>
 801279a:	4b1c      	ldr	r3, [pc, #112]	; (801280c <__sfvwrite_r+0x2b4>)
 801279c:	0028      	movs	r0, r5
 801279e:	429d      	cmp	r5, r3
 80127a0:	d900      	bls.n	80127a4 <__sfvwrite_r+0x24c>
 80127a2:	481b      	ldr	r0, [pc, #108]	; (8012810 <__sfvwrite_r+0x2b8>)
 80127a4:	0039      	movs	r1, r7
 80127a6:	f7ed fd53 	bl	8000250 <__divsi3>
 80127aa:	003b      	movs	r3, r7
 80127ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127ae:	4343      	muls	r3, r0
 80127b0:	9a03      	ldr	r2, [sp, #12]
 80127b2:	69e1      	ldr	r1, [r4, #28]
 80127b4:	9802      	ldr	r0, [sp, #8]
 80127b6:	47b0      	blx	r6
 80127b8:	1e07      	subs	r7, r0, #0
 80127ba:	dcb7      	bgt.n	801272c <__sfvwrite_r+0x1d4>
 80127bc:	e78d      	b.n	80126da <__sfvwrite_r+0x182>
 80127be:	9b01      	ldr	r3, [sp, #4]
 80127c0:	2000      	movs	r0, #0
 80127c2:	681e      	ldr	r6, [r3, #0]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	9303      	str	r3, [sp, #12]
 80127c8:	9b01      	ldr	r3, [sp, #4]
 80127ca:	3308      	adds	r3, #8
 80127cc:	9301      	str	r3, [sp, #4]
 80127ce:	e6e6      	b.n	801259e <__sfvwrite_r+0x46>
 80127d0:	9a05      	ldr	r2, [sp, #20]
 80127d2:	4293      	cmp	r3, r2
 80127d4:	dc08      	bgt.n	80127e8 <__sfvwrite_r+0x290>
 80127d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80127d8:	0032      	movs	r2, r6
 80127da:	69e1      	ldr	r1, [r4, #28]
 80127dc:	9802      	ldr	r0, [sp, #8]
 80127de:	47a8      	blx	r5
 80127e0:	1e05      	subs	r5, r0, #0
 80127e2:	dd00      	ble.n	80127e6 <__sfvwrite_r+0x28e>
 80127e4:	e70a      	b.n	80125fc <__sfvwrite_r+0xa4>
 80127e6:	e778      	b.n	80126da <__sfvwrite_r+0x182>
 80127e8:	9a05      	ldr	r2, [sp, #20]
 80127ea:	0031      	movs	r1, r6
 80127ec:	f000 f91b 	bl	8012a26 <memmove>
 80127f0:	9a05      	ldr	r2, [sp, #20]
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	0015      	movs	r5, r2
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	60a3      	str	r3, [r4, #8]
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	189b      	adds	r3, r3, r2
 80127fe:	6023      	str	r3, [r4, #0]
 8012800:	e6fc      	b.n	80125fc <__sfvwrite_r+0xa4>
 8012802:	46c0      	nop			; (mov r8, r8)
 8012804:	7ffffc00 	.word	0x7ffffc00
 8012808:	fffffb7f 	.word	0xfffffb7f
 801280c:	7ffffffe 	.word	0x7ffffffe
 8012810:	7fffffff 	.word	0x7fffffff

08012814 <__submore>:
 8012814:	000b      	movs	r3, r1
 8012816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012818:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801281a:	3340      	adds	r3, #64	; 0x40
 801281c:	000c      	movs	r4, r1
 801281e:	429d      	cmp	r5, r3
 8012820:	d11c      	bne.n	801285c <__submore+0x48>
 8012822:	2680      	movs	r6, #128	; 0x80
 8012824:	00f6      	lsls	r6, r6, #3
 8012826:	0031      	movs	r1, r6
 8012828:	f7f8 faa8 	bl	800ad7c <_malloc_r>
 801282c:	2800      	cmp	r0, #0
 801282e:	d102      	bne.n	8012836 <__submore+0x22>
 8012830:	2001      	movs	r0, #1
 8012832:	4240      	negs	r0, r0
 8012834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012836:	0023      	movs	r3, r4
 8012838:	6320      	str	r0, [r4, #48]	; 0x30
 801283a:	6366      	str	r6, [r4, #52]	; 0x34
 801283c:	3342      	adds	r3, #66	; 0x42
 801283e:	781a      	ldrb	r2, [r3, #0]
 8012840:	4b10      	ldr	r3, [pc, #64]	; (8012884 <__submore+0x70>)
 8012842:	54c2      	strb	r2, [r0, r3]
 8012844:	0023      	movs	r3, r4
 8012846:	3341      	adds	r3, #65	; 0x41
 8012848:	781a      	ldrb	r2, [r3, #0]
 801284a:	4b0f      	ldr	r3, [pc, #60]	; (8012888 <__submore+0x74>)
 801284c:	54c2      	strb	r2, [r0, r3]
 801284e:	782a      	ldrb	r2, [r5, #0]
 8012850:	4b0e      	ldr	r3, [pc, #56]	; (801288c <__submore+0x78>)
 8012852:	54c2      	strb	r2, [r0, r3]
 8012854:	18c0      	adds	r0, r0, r3
 8012856:	6020      	str	r0, [r4, #0]
 8012858:	2000      	movs	r0, #0
 801285a:	e7eb      	b.n	8012834 <__submore+0x20>
 801285c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801285e:	0029      	movs	r1, r5
 8012860:	0073      	lsls	r3, r6, #1
 8012862:	001a      	movs	r2, r3
 8012864:	9301      	str	r3, [sp, #4]
 8012866:	f7fe fc47 	bl	80110f8 <_realloc_r>
 801286a:	1e05      	subs	r5, r0, #0
 801286c:	d0e0      	beq.n	8012830 <__submore+0x1c>
 801286e:	1987      	adds	r7, r0, r6
 8012870:	0001      	movs	r1, r0
 8012872:	0032      	movs	r2, r6
 8012874:	0038      	movs	r0, r7
 8012876:	f7f9 fde6 	bl	800c446 <memcpy>
 801287a:	9b01      	ldr	r3, [sp, #4]
 801287c:	6027      	str	r7, [r4, #0]
 801287e:	6325      	str	r5, [r4, #48]	; 0x30
 8012880:	6363      	str	r3, [r4, #52]	; 0x34
 8012882:	e7e9      	b.n	8012858 <__submore+0x44>
 8012884:	000003ff 	.word	0x000003ff
 8012888:	000003fe 	.word	0x000003fe
 801288c:	000003fd 	.word	0x000003fd

08012890 <__swsetup_r>:
 8012890:	4b30      	ldr	r3, [pc, #192]	; (8012954 <__swsetup_r+0xc4>)
 8012892:	b570      	push	{r4, r5, r6, lr}
 8012894:	0005      	movs	r5, r0
 8012896:	6818      	ldr	r0, [r3, #0]
 8012898:	000c      	movs	r4, r1
 801289a:	2800      	cmp	r0, #0
 801289c:	d004      	beq.n	80128a8 <__swsetup_r+0x18>
 801289e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d101      	bne.n	80128a8 <__swsetup_r+0x18>
 80128a4:	f7f9 fbec 	bl	800c080 <__sinit>
 80128a8:	230c      	movs	r3, #12
 80128aa:	5ee2      	ldrsh	r2, [r4, r3]
 80128ac:	b293      	uxth	r3, r2
 80128ae:	0711      	lsls	r1, r2, #28
 80128b0:	d423      	bmi.n	80128fa <__swsetup_r+0x6a>
 80128b2:	06d9      	lsls	r1, r3, #27
 80128b4:	d407      	bmi.n	80128c6 <__swsetup_r+0x36>
 80128b6:	2309      	movs	r3, #9
 80128b8:	2001      	movs	r0, #1
 80128ba:	602b      	str	r3, [r5, #0]
 80128bc:	3337      	adds	r3, #55	; 0x37
 80128be:	4313      	orrs	r3, r2
 80128c0:	81a3      	strh	r3, [r4, #12]
 80128c2:	4240      	negs	r0, r0
 80128c4:	bd70      	pop	{r4, r5, r6, pc}
 80128c6:	075b      	lsls	r3, r3, #29
 80128c8:	d513      	bpl.n	80128f2 <__swsetup_r+0x62>
 80128ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80128cc:	2900      	cmp	r1, #0
 80128ce:	d008      	beq.n	80128e2 <__swsetup_r+0x52>
 80128d0:	0023      	movs	r3, r4
 80128d2:	3340      	adds	r3, #64	; 0x40
 80128d4:	4299      	cmp	r1, r3
 80128d6:	d002      	beq.n	80128de <__swsetup_r+0x4e>
 80128d8:	0028      	movs	r0, r5
 80128da:	f7f9 fe2f 	bl	800c53c <_free_r>
 80128de:	2300      	movs	r3, #0
 80128e0:	6323      	str	r3, [r4, #48]	; 0x30
 80128e2:	2224      	movs	r2, #36	; 0x24
 80128e4:	89a3      	ldrh	r3, [r4, #12]
 80128e6:	4393      	bics	r3, r2
 80128e8:	81a3      	strh	r3, [r4, #12]
 80128ea:	2300      	movs	r3, #0
 80128ec:	6063      	str	r3, [r4, #4]
 80128ee:	6923      	ldr	r3, [r4, #16]
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	2308      	movs	r3, #8
 80128f4:	89a2      	ldrh	r2, [r4, #12]
 80128f6:	4313      	orrs	r3, r2
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	6923      	ldr	r3, [r4, #16]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d10b      	bne.n	8012918 <__swsetup_r+0x88>
 8012900:	21a0      	movs	r1, #160	; 0xa0
 8012902:	2280      	movs	r2, #128	; 0x80
 8012904:	89a3      	ldrh	r3, [r4, #12]
 8012906:	0089      	lsls	r1, r1, #2
 8012908:	0092      	lsls	r2, r2, #2
 801290a:	400b      	ands	r3, r1
 801290c:	4293      	cmp	r3, r2
 801290e:	d003      	beq.n	8012918 <__swsetup_r+0x88>
 8012910:	0021      	movs	r1, r4
 8012912:	0028      	movs	r0, r5
 8012914:	f000 f8e8 	bl	8012ae8 <__smakebuf_r>
 8012918:	220c      	movs	r2, #12
 801291a:	5ea3      	ldrsh	r3, [r4, r2]
 801291c:	2001      	movs	r0, #1
 801291e:	001a      	movs	r2, r3
 8012920:	b299      	uxth	r1, r3
 8012922:	4002      	ands	r2, r0
 8012924:	4203      	tst	r3, r0
 8012926:	d00f      	beq.n	8012948 <__swsetup_r+0xb8>
 8012928:	2200      	movs	r2, #0
 801292a:	60a2      	str	r2, [r4, #8]
 801292c:	6962      	ldr	r2, [r4, #20]
 801292e:	4252      	negs	r2, r2
 8012930:	61a2      	str	r2, [r4, #24]
 8012932:	2000      	movs	r0, #0
 8012934:	6922      	ldr	r2, [r4, #16]
 8012936:	4282      	cmp	r2, r0
 8012938:	d1c4      	bne.n	80128c4 <__swsetup_r+0x34>
 801293a:	0609      	lsls	r1, r1, #24
 801293c:	d5c2      	bpl.n	80128c4 <__swsetup_r+0x34>
 801293e:	2240      	movs	r2, #64	; 0x40
 8012940:	4313      	orrs	r3, r2
 8012942:	81a3      	strh	r3, [r4, #12]
 8012944:	3801      	subs	r0, #1
 8012946:	e7bd      	b.n	80128c4 <__swsetup_r+0x34>
 8012948:	0788      	lsls	r0, r1, #30
 801294a:	d400      	bmi.n	801294e <__swsetup_r+0xbe>
 801294c:	6962      	ldr	r2, [r4, #20]
 801294e:	60a2      	str	r2, [r4, #8]
 8012950:	e7ef      	b.n	8012932 <__swsetup_r+0xa2>
 8012952:	46c0      	nop			; (mov r8, r8)
 8012954:	200006d8 	.word	0x200006d8

08012958 <__fputwc>:
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	b085      	sub	sp, #20
 801295c:	000e      	movs	r6, r1
 801295e:	0015      	movs	r5, r2
 8012960:	9001      	str	r0, [sp, #4]
 8012962:	f7f9 fccf 	bl	800c304 <__locale_mb_cur_max>
 8012966:	0004      	movs	r4, r0
 8012968:	2801      	cmp	r0, #1
 801296a:	d119      	bne.n	80129a0 <__fputwc+0x48>
 801296c:	1e73      	subs	r3, r6, #1
 801296e:	2bfe      	cmp	r3, #254	; 0xfe
 8012970:	d816      	bhi.n	80129a0 <__fputwc+0x48>
 8012972:	ab02      	add	r3, sp, #8
 8012974:	711e      	strb	r6, [r3, #4]
 8012976:	2700      	movs	r7, #0
 8012978:	42a7      	cmp	r7, r4
 801297a:	d020      	beq.n	80129be <__fputwc+0x66>
 801297c:	ab03      	add	r3, sp, #12
 801297e:	5dd9      	ldrb	r1, [r3, r7]
 8012980:	68ab      	ldr	r3, [r5, #8]
 8012982:	3b01      	subs	r3, #1
 8012984:	60ab      	str	r3, [r5, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	da04      	bge.n	8012994 <__fputwc+0x3c>
 801298a:	69aa      	ldr	r2, [r5, #24]
 801298c:	4293      	cmp	r3, r2
 801298e:	db19      	blt.n	80129c4 <__fputwc+0x6c>
 8012990:	290a      	cmp	r1, #10
 8012992:	d017      	beq.n	80129c4 <__fputwc+0x6c>
 8012994:	682b      	ldr	r3, [r5, #0]
 8012996:	1c5a      	adds	r2, r3, #1
 8012998:	602a      	str	r2, [r5, #0]
 801299a:	7019      	strb	r1, [r3, #0]
 801299c:	3701      	adds	r7, #1
 801299e:	e7eb      	b.n	8012978 <__fputwc+0x20>
 80129a0:	002b      	movs	r3, r5
 80129a2:	0032      	movs	r2, r6
 80129a4:	9801      	ldr	r0, [sp, #4]
 80129a6:	335c      	adds	r3, #92	; 0x5c
 80129a8:	a903      	add	r1, sp, #12
 80129aa:	f000 f857 	bl	8012a5c <_wcrtomb_r>
 80129ae:	0004      	movs	r4, r0
 80129b0:	1c43      	adds	r3, r0, #1
 80129b2:	d1e0      	bne.n	8012976 <__fputwc+0x1e>
 80129b4:	2340      	movs	r3, #64	; 0x40
 80129b6:	0006      	movs	r6, r0
 80129b8:	89aa      	ldrh	r2, [r5, #12]
 80129ba:	4313      	orrs	r3, r2
 80129bc:	81ab      	strh	r3, [r5, #12]
 80129be:	0030      	movs	r0, r6
 80129c0:	b005      	add	sp, #20
 80129c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c4:	002a      	movs	r2, r5
 80129c6:	9801      	ldr	r0, [sp, #4]
 80129c8:	f000 f8cc 	bl	8012b64 <__swbuf_r>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d1e5      	bne.n	801299c <__fputwc+0x44>
 80129d0:	0006      	movs	r6, r0
 80129d2:	e7f4      	b.n	80129be <__fputwc+0x66>

080129d4 <_fputwc_r>:
 80129d4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80129d6:	b570      	push	{r4, r5, r6, lr}
 80129d8:	0005      	movs	r5, r0
 80129da:	000e      	movs	r6, r1
 80129dc:	0014      	movs	r4, r2
 80129de:	07db      	lsls	r3, r3, #31
 80129e0:	d405      	bmi.n	80129ee <_fputwc_r+0x1a>
 80129e2:	8993      	ldrh	r3, [r2, #12]
 80129e4:	059b      	lsls	r3, r3, #22
 80129e6:	d402      	bmi.n	80129ee <_fputwc_r+0x1a>
 80129e8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80129ea:	f7f9 fd1f 	bl	800c42c <__retarget_lock_acquire_recursive>
 80129ee:	230c      	movs	r3, #12
 80129f0:	5ee2      	ldrsh	r2, [r4, r3]
 80129f2:	2380      	movs	r3, #128	; 0x80
 80129f4:	019b      	lsls	r3, r3, #6
 80129f6:	421a      	tst	r2, r3
 80129f8:	d104      	bne.n	8012a04 <_fputwc_r+0x30>
 80129fa:	431a      	orrs	r2, r3
 80129fc:	81a2      	strh	r2, [r4, #12]
 80129fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a00:	4313      	orrs	r3, r2
 8012a02:	6663      	str	r3, [r4, #100]	; 0x64
 8012a04:	0028      	movs	r0, r5
 8012a06:	0022      	movs	r2, r4
 8012a08:	0031      	movs	r1, r6
 8012a0a:	f7ff ffa5 	bl	8012958 <__fputwc>
 8012a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a10:	0005      	movs	r5, r0
 8012a12:	07db      	lsls	r3, r3, #31
 8012a14:	d405      	bmi.n	8012a22 <_fputwc_r+0x4e>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	059b      	lsls	r3, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_fputwc_r+0x4e>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a1e:	f7f9 fd06 	bl	800c42e <__retarget_lock_release_recursive>
 8012a22:	0028      	movs	r0, r5
 8012a24:	bd70      	pop	{r4, r5, r6, pc}

08012a26 <memmove>:
 8012a26:	b510      	push	{r4, lr}
 8012a28:	4288      	cmp	r0, r1
 8012a2a:	d902      	bls.n	8012a32 <memmove+0xc>
 8012a2c:	188b      	adds	r3, r1, r2
 8012a2e:	4298      	cmp	r0, r3
 8012a30:	d303      	bcc.n	8012a3a <memmove+0x14>
 8012a32:	2300      	movs	r3, #0
 8012a34:	e007      	b.n	8012a46 <memmove+0x20>
 8012a36:	5c8b      	ldrb	r3, [r1, r2]
 8012a38:	5483      	strb	r3, [r0, r2]
 8012a3a:	3a01      	subs	r2, #1
 8012a3c:	d2fb      	bcs.n	8012a36 <memmove+0x10>
 8012a3e:	bd10      	pop	{r4, pc}
 8012a40:	5ccc      	ldrb	r4, [r1, r3]
 8012a42:	54c4      	strb	r4, [r0, r3]
 8012a44:	3301      	adds	r3, #1
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d1fa      	bne.n	8012a40 <memmove+0x1a>
 8012a4a:	e7f8      	b.n	8012a3e <memmove+0x18>

08012a4c <abort>:
 8012a4c:	2006      	movs	r0, #6
 8012a4e:	b510      	push	{r4, lr}
 8012a50:	f000 f906 	bl	8012c60 <raise>
 8012a54:	2001      	movs	r0, #1
 8012a56:	f7f0 fe21 	bl	800369c <_exit>
	...

08012a5c <_wcrtomb_r>:
 8012a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a5e:	001d      	movs	r5, r3
 8012a60:	4b09      	ldr	r3, [pc, #36]	; (8012a88 <_wcrtomb_r+0x2c>)
 8012a62:	0004      	movs	r4, r0
 8012a64:	33e0      	adds	r3, #224	; 0xe0
 8012a66:	681e      	ldr	r6, [r3, #0]
 8012a68:	002b      	movs	r3, r5
 8012a6a:	2900      	cmp	r1, #0
 8012a6c:	d101      	bne.n	8012a72 <_wcrtomb_r+0x16>
 8012a6e:	000a      	movs	r2, r1
 8012a70:	a901      	add	r1, sp, #4
 8012a72:	0020      	movs	r0, r4
 8012a74:	47b0      	blx	r6
 8012a76:	1c43      	adds	r3, r0, #1
 8012a78:	d103      	bne.n	8012a82 <_wcrtomb_r+0x26>
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	602b      	str	r3, [r5, #0]
 8012a7e:	338a      	adds	r3, #138	; 0x8a
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	b004      	add	sp, #16
 8012a84:	bd70      	pop	{r4, r5, r6, pc}
 8012a86:	46c0      	nop			; (mov r8, r8)
 8012a88:	20000448 	.word	0x20000448

08012a8c <__swhatbuf_r>:
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	000e      	movs	r6, r1
 8012a90:	001d      	movs	r5, r3
 8012a92:	230e      	movs	r3, #14
 8012a94:	5ec9      	ldrsh	r1, [r1, r3]
 8012a96:	0014      	movs	r4, r2
 8012a98:	b096      	sub	sp, #88	; 0x58
 8012a9a:	2900      	cmp	r1, #0
 8012a9c:	da09      	bge.n	8012ab2 <__swhatbuf_r+0x26>
 8012a9e:	89b2      	ldrh	r2, [r6, #12]
 8012aa0:	2380      	movs	r3, #128	; 0x80
 8012aa2:	0011      	movs	r1, r2
 8012aa4:	4019      	ands	r1, r3
 8012aa6:	421a      	tst	r2, r3
 8012aa8:	d018      	beq.n	8012adc <__swhatbuf_r+0x50>
 8012aaa:	2100      	movs	r1, #0
 8012aac:	3b40      	subs	r3, #64	; 0x40
 8012aae:	0008      	movs	r0, r1
 8012ab0:	e010      	b.n	8012ad4 <__swhatbuf_r+0x48>
 8012ab2:	466a      	mov	r2, sp
 8012ab4:	f000 f8de 	bl	8012c74 <_fstat_r>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	dbf0      	blt.n	8012a9e <__swhatbuf_r+0x12>
 8012abc:	23f0      	movs	r3, #240	; 0xf0
 8012abe:	9901      	ldr	r1, [sp, #4]
 8012ac0:	021b      	lsls	r3, r3, #8
 8012ac2:	4019      	ands	r1, r3
 8012ac4:	4b07      	ldr	r3, [pc, #28]	; (8012ae4 <__swhatbuf_r+0x58>)
 8012ac6:	2080      	movs	r0, #128	; 0x80
 8012ac8:	18c9      	adds	r1, r1, r3
 8012aca:	424b      	negs	r3, r1
 8012acc:	4159      	adcs	r1, r3
 8012ace:	2380      	movs	r3, #128	; 0x80
 8012ad0:	0100      	lsls	r0, r0, #4
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	6029      	str	r1, [r5, #0]
 8012ad6:	6023      	str	r3, [r4, #0]
 8012ad8:	b016      	add	sp, #88	; 0x58
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	2380      	movs	r3, #128	; 0x80
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	e7e5      	b.n	8012aae <__swhatbuf_r+0x22>
 8012ae2:	46c0      	nop			; (mov r8, r8)
 8012ae4:	ffffe000 	.word	0xffffe000

08012ae8 <__smakebuf_r>:
 8012ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aea:	2602      	movs	r6, #2
 8012aec:	898b      	ldrh	r3, [r1, #12]
 8012aee:	0005      	movs	r5, r0
 8012af0:	000c      	movs	r4, r1
 8012af2:	4233      	tst	r3, r6
 8012af4:	d006      	beq.n	8012b04 <__smakebuf_r+0x1c>
 8012af6:	0023      	movs	r3, r4
 8012af8:	3343      	adds	r3, #67	; 0x43
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	6123      	str	r3, [r4, #16]
 8012afe:	2301      	movs	r3, #1
 8012b00:	6163      	str	r3, [r4, #20]
 8012b02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012b04:	466a      	mov	r2, sp
 8012b06:	ab01      	add	r3, sp, #4
 8012b08:	f7ff ffc0 	bl	8012a8c <__swhatbuf_r>
 8012b0c:	9900      	ldr	r1, [sp, #0]
 8012b0e:	0007      	movs	r7, r0
 8012b10:	0028      	movs	r0, r5
 8012b12:	f7f8 f933 	bl	800ad7c <_malloc_r>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d108      	bne.n	8012b2c <__smakebuf_r+0x44>
 8012b1a:	220c      	movs	r2, #12
 8012b1c:	5ea3      	ldrsh	r3, [r4, r2]
 8012b1e:	059a      	lsls	r2, r3, #22
 8012b20:	d4ef      	bmi.n	8012b02 <__smakebuf_r+0x1a>
 8012b22:	2203      	movs	r2, #3
 8012b24:	4393      	bics	r3, r2
 8012b26:	431e      	orrs	r6, r3
 8012b28:	81a6      	strh	r6, [r4, #12]
 8012b2a:	e7e4      	b.n	8012af6 <__smakebuf_r+0xe>
 8012b2c:	2380      	movs	r3, #128	; 0x80
 8012b2e:	89a2      	ldrh	r2, [r4, #12]
 8012b30:	6020      	str	r0, [r4, #0]
 8012b32:	4313      	orrs	r3, r2
 8012b34:	81a3      	strh	r3, [r4, #12]
 8012b36:	9b00      	ldr	r3, [sp, #0]
 8012b38:	6120      	str	r0, [r4, #16]
 8012b3a:	6163      	str	r3, [r4, #20]
 8012b3c:	9b01      	ldr	r3, [sp, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00c      	beq.n	8012b5c <__smakebuf_r+0x74>
 8012b42:	0028      	movs	r0, r5
 8012b44:	230e      	movs	r3, #14
 8012b46:	5ee1      	ldrsh	r1, [r4, r3]
 8012b48:	f000 f8a6 	bl	8012c98 <_isatty_r>
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d005      	beq.n	8012b5c <__smakebuf_r+0x74>
 8012b50:	2303      	movs	r3, #3
 8012b52:	89a2      	ldrh	r2, [r4, #12]
 8012b54:	439a      	bics	r2, r3
 8012b56:	3b02      	subs	r3, #2
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	81a3      	strh	r3, [r4, #12]
 8012b5c:	89a3      	ldrh	r3, [r4, #12]
 8012b5e:	433b      	orrs	r3, r7
 8012b60:	81a3      	strh	r3, [r4, #12]
 8012b62:	e7ce      	b.n	8012b02 <__smakebuf_r+0x1a>

08012b64 <__swbuf_r>:
 8012b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b66:	0006      	movs	r6, r0
 8012b68:	000d      	movs	r5, r1
 8012b6a:	0014      	movs	r4, r2
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	d004      	beq.n	8012b7a <__swbuf_r+0x16>
 8012b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d101      	bne.n	8012b7a <__swbuf_r+0x16>
 8012b76:	f7f9 fa83 	bl	800c080 <__sinit>
 8012b7a:	69a3      	ldr	r3, [r4, #24]
 8012b7c:	60a3      	str	r3, [r4, #8]
 8012b7e:	89a3      	ldrh	r3, [r4, #12]
 8012b80:	071b      	lsls	r3, r3, #28
 8012b82:	d52e      	bpl.n	8012be2 <__swbuf_r+0x7e>
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d02b      	beq.n	8012be2 <__swbuf_r+0x7e>
 8012b8a:	230c      	movs	r3, #12
 8012b8c:	5ee2      	ldrsh	r2, [r4, r3]
 8012b8e:	2380      	movs	r3, #128	; 0x80
 8012b90:	019b      	lsls	r3, r3, #6
 8012b92:	b2ef      	uxtb	r7, r5
 8012b94:	b2ed      	uxtb	r5, r5
 8012b96:	421a      	tst	r2, r3
 8012b98:	d02c      	beq.n	8012bf4 <__swbuf_r+0x90>
 8012b9a:	6923      	ldr	r3, [r4, #16]
 8012b9c:	6820      	ldr	r0, [r4, #0]
 8012b9e:	1ac0      	subs	r0, r0, r3
 8012ba0:	6963      	ldr	r3, [r4, #20]
 8012ba2:	4283      	cmp	r3, r0
 8012ba4:	dc05      	bgt.n	8012bb2 <__swbuf_r+0x4e>
 8012ba6:	0021      	movs	r1, r4
 8012ba8:	0030      	movs	r0, r6
 8012baa:	f7fd fab3 	bl	8010114 <_fflush_r>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d11d      	bne.n	8012bee <__swbuf_r+0x8a>
 8012bb2:	68a3      	ldr	r3, [r4, #8]
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	60a3      	str	r3, [r4, #8]
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	1c5a      	adds	r2, r3, #1
 8012bbe:	6022      	str	r2, [r4, #0]
 8012bc0:	701f      	strb	r7, [r3, #0]
 8012bc2:	6963      	ldr	r3, [r4, #20]
 8012bc4:	4283      	cmp	r3, r0
 8012bc6:	d004      	beq.n	8012bd2 <__swbuf_r+0x6e>
 8012bc8:	89a3      	ldrh	r3, [r4, #12]
 8012bca:	07db      	lsls	r3, r3, #31
 8012bcc:	d507      	bpl.n	8012bde <__swbuf_r+0x7a>
 8012bce:	2d0a      	cmp	r5, #10
 8012bd0:	d105      	bne.n	8012bde <__swbuf_r+0x7a>
 8012bd2:	0021      	movs	r1, r4
 8012bd4:	0030      	movs	r0, r6
 8012bd6:	f7fd fa9d 	bl	8010114 <_fflush_r>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d107      	bne.n	8012bee <__swbuf_r+0x8a>
 8012bde:	0028      	movs	r0, r5
 8012be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012be2:	0021      	movs	r1, r4
 8012be4:	0030      	movs	r0, r6
 8012be6:	f7ff fe53 	bl	8012890 <__swsetup_r>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d0cd      	beq.n	8012b8a <__swbuf_r+0x26>
 8012bee:	2501      	movs	r5, #1
 8012bf0:	426d      	negs	r5, r5
 8012bf2:	e7f4      	b.n	8012bde <__swbuf_r+0x7a>
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	81a3      	strh	r3, [r4, #12]
 8012bf8:	4a02      	ldr	r2, [pc, #8]	; (8012c04 <__swbuf_r+0xa0>)
 8012bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bfc:	4013      	ands	r3, r2
 8012bfe:	6663      	str	r3, [r4, #100]	; 0x64
 8012c00:	e7cb      	b.n	8012b9a <__swbuf_r+0x36>
 8012c02:	46c0      	nop			; (mov r8, r8)
 8012c04:	ffffdfff 	.word	0xffffdfff

08012c08 <_raise_r>:
 8012c08:	b570      	push	{r4, r5, r6, lr}
 8012c0a:	0004      	movs	r4, r0
 8012c0c:	000d      	movs	r5, r1
 8012c0e:	291f      	cmp	r1, #31
 8012c10:	d904      	bls.n	8012c1c <_raise_r+0x14>
 8012c12:	2316      	movs	r3, #22
 8012c14:	6003      	str	r3, [r0, #0]
 8012c16:	2001      	movs	r0, #1
 8012c18:	4240      	negs	r0, r0
 8012c1a:	bd70      	pop	{r4, r5, r6, pc}
 8012c1c:	0003      	movs	r3, r0
 8012c1e:	33fc      	adds	r3, #252	; 0xfc
 8012c20:	69db      	ldr	r3, [r3, #28]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d004      	beq.n	8012c30 <_raise_r+0x28>
 8012c26:	008a      	lsls	r2, r1, #2
 8012c28:	189b      	adds	r3, r3, r2
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	2a00      	cmp	r2, #0
 8012c2e:	d108      	bne.n	8012c42 <_raise_r+0x3a>
 8012c30:	0020      	movs	r0, r4
 8012c32:	f000 f855 	bl	8012ce0 <_getpid_r>
 8012c36:	002a      	movs	r2, r5
 8012c38:	0001      	movs	r1, r0
 8012c3a:	0020      	movs	r0, r4
 8012c3c:	f000 f83e 	bl	8012cbc <_kill_r>
 8012c40:	e7eb      	b.n	8012c1a <_raise_r+0x12>
 8012c42:	2000      	movs	r0, #0
 8012c44:	2a01      	cmp	r2, #1
 8012c46:	d0e8      	beq.n	8012c1a <_raise_r+0x12>
 8012c48:	1c51      	adds	r1, r2, #1
 8012c4a:	d103      	bne.n	8012c54 <_raise_r+0x4c>
 8012c4c:	2316      	movs	r3, #22
 8012c4e:	3001      	adds	r0, #1
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	e7e2      	b.n	8012c1a <_raise_r+0x12>
 8012c54:	2400      	movs	r4, #0
 8012c56:	0028      	movs	r0, r5
 8012c58:	601c      	str	r4, [r3, #0]
 8012c5a:	4790      	blx	r2
 8012c5c:	0020      	movs	r0, r4
 8012c5e:	e7dc      	b.n	8012c1a <_raise_r+0x12>

08012c60 <raise>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	4b03      	ldr	r3, [pc, #12]	; (8012c70 <raise+0x10>)
 8012c64:	0001      	movs	r1, r0
 8012c66:	6818      	ldr	r0, [r3, #0]
 8012c68:	f7ff ffce 	bl	8012c08 <_raise_r>
 8012c6c:	bd10      	pop	{r4, pc}
 8012c6e:	46c0      	nop			; (mov r8, r8)
 8012c70:	200006d8 	.word	0x200006d8

08012c74 <_fstat_r>:
 8012c74:	2300      	movs	r3, #0
 8012c76:	b570      	push	{r4, r5, r6, lr}
 8012c78:	4d06      	ldr	r5, [pc, #24]	; (8012c94 <_fstat_r+0x20>)
 8012c7a:	0004      	movs	r4, r0
 8012c7c:	0008      	movs	r0, r1
 8012c7e:	0011      	movs	r1, r2
 8012c80:	602b      	str	r3, [r5, #0]
 8012c82:	f7f0 fd5a 	bl	800373a <_fstat>
 8012c86:	1c43      	adds	r3, r0, #1
 8012c88:	d103      	bne.n	8012c92 <_fstat_r+0x1e>
 8012c8a:	682b      	ldr	r3, [r5, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d000      	beq.n	8012c92 <_fstat_r+0x1e>
 8012c90:	6023      	str	r3, [r4, #0]
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	20000d10 	.word	0x20000d10

08012c98 <_isatty_r>:
 8012c98:	2300      	movs	r3, #0
 8012c9a:	b570      	push	{r4, r5, r6, lr}
 8012c9c:	4d06      	ldr	r5, [pc, #24]	; (8012cb8 <_isatty_r+0x20>)
 8012c9e:	0004      	movs	r4, r0
 8012ca0:	0008      	movs	r0, r1
 8012ca2:	602b      	str	r3, [r5, #0]
 8012ca4:	f7f0 fd57 	bl	8003756 <_isatty>
 8012ca8:	1c43      	adds	r3, r0, #1
 8012caa:	d103      	bne.n	8012cb4 <_isatty_r+0x1c>
 8012cac:	682b      	ldr	r3, [r5, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d000      	beq.n	8012cb4 <_isatty_r+0x1c>
 8012cb2:	6023      	str	r3, [r4, #0]
 8012cb4:	bd70      	pop	{r4, r5, r6, pc}
 8012cb6:	46c0      	nop			; (mov r8, r8)
 8012cb8:	20000d10 	.word	0x20000d10

08012cbc <_kill_r>:
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	b570      	push	{r4, r5, r6, lr}
 8012cc0:	4d06      	ldr	r5, [pc, #24]	; (8012cdc <_kill_r+0x20>)
 8012cc2:	0004      	movs	r4, r0
 8012cc4:	0008      	movs	r0, r1
 8012cc6:	0011      	movs	r1, r2
 8012cc8:	602b      	str	r3, [r5, #0]
 8012cca:	f7f0 fcd7 	bl	800367c <_kill>
 8012cce:	1c43      	adds	r3, r0, #1
 8012cd0:	d103      	bne.n	8012cda <_kill_r+0x1e>
 8012cd2:	682b      	ldr	r3, [r5, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d000      	beq.n	8012cda <_kill_r+0x1e>
 8012cd8:	6023      	str	r3, [r4, #0]
 8012cda:	bd70      	pop	{r4, r5, r6, pc}
 8012cdc:	20000d10 	.word	0x20000d10

08012ce0 <_getpid_r>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	f7f0 fcc5 	bl	8003670 <_getpid>
 8012ce6:	bd10      	pop	{r4, pc}

08012ce8 <round>:
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	004a      	lsls	r2, r1, #1
 8012cec:	000d      	movs	r5, r1
 8012cee:	4920      	ldr	r1, [pc, #128]	; (8012d70 <round+0x88>)
 8012cf0:	0d52      	lsrs	r2, r2, #21
 8012cf2:	1851      	adds	r1, r2, r1
 8012cf4:	0006      	movs	r6, r0
 8012cf6:	2913      	cmp	r1, #19
 8012cf8:	dc18      	bgt.n	8012d2c <round+0x44>
 8012cfa:	2900      	cmp	r1, #0
 8012cfc:	da09      	bge.n	8012d12 <round+0x2a>
 8012cfe:	0feb      	lsrs	r3, r5, #31
 8012d00:	2200      	movs	r2, #0
 8012d02:	07db      	lsls	r3, r3, #31
 8012d04:	3101      	adds	r1, #1
 8012d06:	d101      	bne.n	8012d0c <round+0x24>
 8012d08:	491a      	ldr	r1, [pc, #104]	; (8012d74 <round+0x8c>)
 8012d0a:	430b      	orrs	r3, r1
 8012d0c:	0019      	movs	r1, r3
 8012d0e:	0010      	movs	r0, r2
 8012d10:	e017      	b.n	8012d42 <round+0x5a>
 8012d12:	4c19      	ldr	r4, [pc, #100]	; (8012d78 <round+0x90>)
 8012d14:	410c      	asrs	r4, r1
 8012d16:	0022      	movs	r2, r4
 8012d18:	402a      	ands	r2, r5
 8012d1a:	4302      	orrs	r2, r0
 8012d1c:	d013      	beq.n	8012d46 <round+0x5e>
 8012d1e:	2280      	movs	r2, #128	; 0x80
 8012d20:	0312      	lsls	r2, r2, #12
 8012d22:	410a      	asrs	r2, r1
 8012d24:	1953      	adds	r3, r2, r5
 8012d26:	43a3      	bics	r3, r4
 8012d28:	2200      	movs	r2, #0
 8012d2a:	e7ef      	b.n	8012d0c <round+0x24>
 8012d2c:	2933      	cmp	r1, #51	; 0x33
 8012d2e:	dd0d      	ble.n	8012d4c <round+0x64>
 8012d30:	2380      	movs	r3, #128	; 0x80
 8012d32:	00db      	lsls	r3, r3, #3
 8012d34:	4299      	cmp	r1, r3
 8012d36:	d106      	bne.n	8012d46 <round+0x5e>
 8012d38:	0002      	movs	r2, r0
 8012d3a:	002b      	movs	r3, r5
 8012d3c:	0029      	movs	r1, r5
 8012d3e:	f7ed fd3b 	bl	80007b8 <__aeabi_dadd>
 8012d42:	0006      	movs	r6, r0
 8012d44:	000d      	movs	r5, r1
 8012d46:	0030      	movs	r0, r6
 8012d48:	0029      	movs	r1, r5
 8012d4a:	bd70      	pop	{r4, r5, r6, pc}
 8012d4c:	4c0b      	ldr	r4, [pc, #44]	; (8012d7c <round+0x94>)
 8012d4e:	1912      	adds	r2, r2, r4
 8012d50:	2401      	movs	r4, #1
 8012d52:	4264      	negs	r4, r4
 8012d54:	40d4      	lsrs	r4, r2
 8012d56:	4220      	tst	r0, r4
 8012d58:	d0f5      	beq.n	8012d46 <round+0x5e>
 8012d5a:	2233      	movs	r2, #51	; 0x33
 8012d5c:	1a51      	subs	r1, r2, r1
 8012d5e:	3a32      	subs	r2, #50	; 0x32
 8012d60:	408a      	lsls	r2, r1
 8012d62:	1812      	adds	r2, r2, r0
 8012d64:	4282      	cmp	r2, r0
 8012d66:	4180      	sbcs	r0, r0
 8012d68:	4240      	negs	r0, r0
 8012d6a:	182b      	adds	r3, r5, r0
 8012d6c:	43a2      	bics	r2, r4
 8012d6e:	e7cd      	b.n	8012d0c <round+0x24>
 8012d70:	fffffc01 	.word	0xfffffc01
 8012d74:	3ff00000 	.word	0x3ff00000
 8012d78:	000fffff 	.word	0x000fffff
 8012d7c:	fffffbed 	.word	0xfffffbed

08012d80 <_init>:
 8012d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d82:	46c0      	nop			; (mov r8, r8)
 8012d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d86:	bc08      	pop	{r3}
 8012d88:	469e      	mov	lr, r3
 8012d8a:	4770      	bx	lr

08012d8c <_fini>:
 8012d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d8e:	46c0      	nop			; (mov r8, r8)
 8012d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d92:	bc08      	pop	{r3}
 8012d94:	469e      	mov	lr, r3
 8012d96:	4770      	bx	lr
