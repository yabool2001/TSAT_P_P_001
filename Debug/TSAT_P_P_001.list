
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b704  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800b7c0  0800b7c0  0001b7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd64  0800bd64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001e0  0800bf4c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0800bf4c  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140f7  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b07  00000000  00000000  00034342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00036e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6f  00000000  00000000  000380a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aaee  00000000  00000000  00038f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171f7  00000000  00000000  00053a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6930  00000000  00000000  0006abfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a44  00000000  00000000  0011152c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00116f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b7a8 	.word	0x0800b7a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800b7a8 	.word	0x0800b7a8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800b850 	.word	0x0800b850
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002550:	f000 fe28 	bl	80031a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002554:	f000 f8be 	bl	80026d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002558:	f000 fa52 	bl	8002a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255c:	f000 f9ce 	bl	80028fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002560:	f000 f97e 	bl	8002860 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002564:	f000 fa18 	bl	8002998 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002568:	f000 f8fc 	bl	8002764 <MX_I2C1_Init>
  MX_TIM6_Init();
 800256c:	f000 f93a 	bl	80027e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , DBG_TX_TIMEOUT ) ;
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <main+0x148>)
 8002572:	681c      	ldr	r4, [r3, #0]
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <main+0x148>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fd fdc3 	bl	8000104 <strlen>
 800257e:	0003      	movs	r3, r0
 8002580:	b29a      	uxth	r2, r3
 8002582:	23fa      	movs	r3, #250	; 0xfa
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4844      	ldr	r0, [pc, #272]	; (8002698 <main+0x14c>)
 8002588:	0021      	movs	r1, r4
 800258a:	f002 fd87 	bl	800509c <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <main+0x150>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	4252      	negs	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 8002598:	f000 fac0 	bl	8002b1c <my_astro_off>
  astronode_send_mpn_rr () ;
  astronode_send_msn_rr () ;
  astronode_send_mgi_rr () ;
  my_astro_off () ;
  */
  my_lx6_on () ;
 800259c:	f000 fad0 	bl	8002b40 <my_lx6_on>
  __NOP () ;
 80025a0:	46c0      	nop			; (mov r8, r8)

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  seek_fix_loop_flag = true ;
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <main+0x154>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <main+0x150>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f002 f9fe 	bl	80049ac <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_SET ) ;
 80025b0:	23a0      	movs	r3, #160	; 0xa0
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	2201      	movs	r2, #1
 80025b6:	2120      	movs	r1, #32
 80025b8:	0018      	movs	r0, r3
 80025ba:	f001 f98b 	bl	80038d4 <HAL_GPIO_WritePin>
	  while ( seek_fix_loop_flag )
 80025be:	e063      	b.n	8002688 <main+0x13c>
	  {
		  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , 1000 ) ;
 80025c0:	23fa      	movs	r3, #250	; 0xfa
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4937      	ldr	r1, [pc, #220]	; (80026a4 <main+0x158>)
 80025c6:	4838      	ldr	r0, [pc, #224]	; (80026a8 <main+0x15c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	f002 fe03 	bl	80051d4 <HAL_UART_Receive>
		  if ( rxd_byte )
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <main+0x158>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d055      	beq.n	8002682 <main+0x136>
		  {
			  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 80025d6:	4a35      	ldr	r2, [pc, #212]	; (80026ac <main+0x160>)
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <main+0x164>)
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <main+0x158>)
 80025dc:	0018      	movs	r0, r3
 80025de:	f003 fcd4 	bl	8005f8a <my_nmea_message>
 80025e2:	0003      	movs	r3, r0
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d14c      	bne.n	8002682 <main+0x136>
			  {
				  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <main+0x164>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f003 fd8d 	bl	800610a <is_my_nmea_checksum_ok>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d046      	beq.n	8002682 <main+0x136>
				  {
					  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <main+0x168>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <main+0x164>)
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f005 fef8 	bl	80083f2 <strstr>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d024      	beq.n	8002650 <main+0x104>
					  {
						  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <main+0x164>)
 8002608:	0018      	movs	r0, r3
 800260a:	f003 fd2a 	bl	8006062 <get_my_nmea_gngsa_fixed_mode_s>
 800260e:	0003      	movs	r3, r0
 8002610:	001a      	movs	r2, r3
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <main+0x16c>)
 8002614:	701a      	strb	r2, [r3, #0]
						  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <main+0x164>)
 8002618:	0018      	movs	r0, r3
 800261a:	f003 fd2d 	bl	8006078 <get_my_nmea_gngsa_pdop_d>
 800261e:	0002      	movs	r2, r0
 8002620:	000b      	movs	r3, r1
 8002622:	4926      	ldr	r1, [pc, #152]	; (80026bc <main+0x170>)
 8002624:	600a      	str	r2, [r1, #0]
 8002626:	604b      	str	r3, [r1, #4]
						  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <main+0x16c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b33      	cmp	r3, #51	; 0x33
 800262e:	d10f      	bne.n	8002650 <main+0x104>
						  {
							  if ( nmea_fixed_pdop_d <= NMEA_PDOP_MIN_THS_D )
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <main+0x170>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <main+0x174>)
 800263a:	f7fd ff15 	bl	8000468 <__aeabi_dcmple>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d003      	beq.n	800264a <main+0xfe>
							  {
								  fix_quality = 2 ;
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <main+0x178>)
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e002      	b.n	8002650 <main+0x104>
							  }
							  else
							  {
								  fix_quality = 1 ;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <main+0x178>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
							  }

						  }
					  }
					  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) )
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <main+0x17c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <main+0x164>)
 8002656:	0011      	movs	r1, r2
 8002658:	0018      	movs	r0, r3
 800265a:	f005 feca 	bl	80083f2 <strstr>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d00f      	beq.n	8002682 <main+0x136>
					  {
						  get_my_nmea_gngll_coordinates_s ( (char*) nmea_message , nmea_latitude , nmea_longitude ) ;
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <main+0x180>)
 8002664:	491a      	ldr	r1, [pc, #104]	; (80026d0 <main+0x184>)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <main+0x164>)
 8002668:	0018      	movs	r0, r3
 800266a:	f003 fe09 	bl	8006280 <get_my_nmea_gngll_coordinates_s>
						  HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
 800266e:	23a0      	movs	r3, #160	; 0xa0
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	2200      	movs	r2, #0
 8002674:	2120      	movs	r1, #32
 8002676:	0018      	movs	r0, r3
 8002678:	f001 f92c 	bl	80038d4 <HAL_GPIO_WritePin>
						  seek_fix_loop_flag = false ;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <main+0x154>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
					  }
				  }
			  }
		  }
		  rxd_byte = 0 ;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <main+0x158>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
	  while ( seek_fix_loop_flag )
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <main+0x154>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d197      	bne.n	80025c0 <main+0x74>
	  seek_fix_loop_flag = true ;
 8002690:	e787      	b.n	80025a2 <main+0x56>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	20000000 	.word	0x20000000
 8002698:	20000330 	.word	0x20000330
 800269c:	20000250 	.word	0x20000250
 80026a0:	20000580 	.word	0x20000580
 80026a4:	20000458 	.word	0x20000458
 80026a8:	200003c4 	.word	0x200003c4
 80026ac:	20000556 	.word	0x20000556
 80026b0:	2000045c 	.word	0x2000045c
 80026b4:	20000004 	.word	0x20000004
 80026b8:	20000571 	.word	0x20000571
 80026bc:	20000578 	.word	0x20000578
 80026c0:	40140000 	.word	0x40140000
 80026c4:	20000570 	.word	0x20000570
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000564 	.word	0x20000564
 80026d0:	20000558 	.word	0x20000558

080026d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b093      	sub	sp, #76	; 0x4c
 80026d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026da:	2410      	movs	r4, #16
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	0018      	movs	r0, r3
 80026e0:	2338      	movs	r3, #56	; 0x38
 80026e2:	001a      	movs	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	f005 fe57 	bl	8008398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ea:	003b      	movs	r3, r7
 80026ec:	0018      	movs	r0, r3
 80026ee:	2310      	movs	r3, #16
 80026f0:	001a      	movs	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	f005 fe50 	bl	8008398 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f001 fa35 	bl	8003b6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2202      	movs	r2, #2
 8002706:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	0052      	lsls	r2, r2, #1
 800270e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002722:	193b      	adds	r3, r7, r4
 8002724:	0018      	movs	r0, r3
 8002726:	f001 fa6d 	bl	8003c04 <HAL_RCC_OscConfig>
 800272a:	1e03      	subs	r3, r0, #0
 800272c:	d001      	beq.n	8002732 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800272e:	f000 fa41 	bl	8002bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002732:	003b      	movs	r3, r7
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002738:	003b      	movs	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273e:	003b      	movs	r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002744:	003b      	movs	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800274a:	003b      	movs	r3, r7
 800274c:	2100      	movs	r1, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f001 fd72 	bl	8004238 <HAL_RCC_ClockConfig>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002758:	f000 fa2c 	bl	8002bb4 <Error_Handler>
  }
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b013      	add	sp, #76	; 0x4c
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_I2C1_Init+0x74>)
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <MX_I2C1_Init+0x78>)
 800276c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <MX_I2C1_Init+0x7c>)
 8002772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_I2C1_Init+0x74>)
 800277c:	2201      	movs	r2, #1
 800277e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_I2C1_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_I2C1_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_I2C1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027a0:	0018      	movs	r0, r3
 80027a2:	f001 f8b5 	bl	8003910 <HAL_I2C_Init>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027aa:	f000 fa03 	bl	8002bb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027b0:	2100      	movs	r1, #0
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 f942 	bl	8003a3c <HAL_I2CEx_ConfigAnalogFilter>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027bc:	f000 f9fa 	bl	8002bb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <MX_I2C1_Init+0x74>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 f985 	bl	8003ad4 <HAL_I2CEx_ConfigDigitalFilter>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ce:	f000 f9f1 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200001fc 	.word	0x200001fc
 80027dc:	40005400 	.word	0x40005400
 80027e0:	00303d5b 	.word	0x00303d5b

080027e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	0018      	movs	r0, r3
 80027ee:	230c      	movs	r3, #12
 80027f0:	001a      	movs	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f005 fdd0 	bl	8008398 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <MX_TIM6_Init+0x6c>)
 80027fa:	4a16      	ldr	r2, [pc, #88]	; (8002854 <MX_TIM6_Init+0x70>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <MX_TIM6_Init+0x6c>)
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <MX_TIM6_Init+0x74>)
 8002802:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MX_TIM6_Init+0x6c>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000-1;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_TIM6_Init+0x6c>)
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <MX_TIM6_Init+0x78>)
 800280e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_TIM6_Init+0x6c>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_TIM6_Init+0x6c>)
 8002818:	0018      	movs	r0, r3
 800281a:	f002 f86f 	bl	80048fc <HAL_TIM_Base_Init>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002822:	f000 f9c7 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002832:	1d3a      	adds	r2, r7, #4
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_TIM6_Init+0x6c>)
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f002 fb13 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002842:	f000 f9b7 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	20000250 	.word	0x20000250
 8002854:	40001000 	.word	0x40001000
 8002858:	0000f9ff 	.word	0x0000f9ff
 800285c:	0000fde7 	.word	0x0000fde7

08002860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002866:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <MX_USART1_UART_Init+0x98>)
 8002868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800286c:	2296      	movs	r2, #150	; 0x96
 800286e:	0192      	lsls	r2, r2, #6
 8002870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 fb60 	bl	8004f70 <HAL_UART_Init>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028b4:	f000 f97e 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	0018      	movs	r0, r3
 80028be:	f003 fa2d 	bl	8005d1c <HAL_UARTEx_SetTxFifoThreshold>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028c6:	f000 f975 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028cc:	2100      	movs	r1, #0
 80028ce:	0018      	movs	r0, r3
 80028d0:	f003 fa64 	bl	8005d9c <HAL_UARTEx_SetRxFifoThreshold>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028d8:	f000 f96c 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f003 f9e2 	bl	8005ca8 <HAL_UARTEx_DisableFifoMode>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028e8:	f000 f964 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	2000029c 	.word	0x2000029c
 80028f8:	40013800 	.word	0x40013800

080028fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <MX_USART2_UART_Init+0x98>)
 8002904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002908:	22e1      	movs	r2, #225	; 0xe1
 800290a:	0252      	lsls	r2, r2, #9
 800290c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002946:	0018      	movs	r0, r3
 8002948:	f002 fb12 	bl	8004f70 <HAL_UART_Init>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002950:	f000 f930 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002956:	2100      	movs	r1, #0
 8002958:	0018      	movs	r0, r3
 800295a:	f003 f9df 	bl	8005d1c <HAL_UARTEx_SetTxFifoThreshold>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002962:	f000 f927 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002968:	2100      	movs	r1, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f003 fa16 	bl	8005d9c <HAL_UARTEx_SetRxFifoThreshold>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002974:	f000 f91e 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800297a:	0018      	movs	r0, r3
 800297c:	f003 f994 	bl	8005ca8 <HAL_UARTEx_DisableFifoMode>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002984:	f000 f916 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	20000330 	.word	0x20000330
 8002994:	40004400 	.word	0x40004400

08002998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <MX_USART3_UART_Init+0x64>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029a4:	2296      	movs	r2, #150	; 0x96
 80029a6:	0192      	lsls	r2, r2, #6
 80029a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <MX_USART3_UART_Init+0x60>)
 80029e2:	0018      	movs	r0, r3
 80029e4:	f002 fac4 	bl	8004f70 <HAL_UART_Init>
 80029e8:	1e03      	subs	r3, r0, #0
 80029ea:	d001      	beq.n	80029f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029ec:	f000 f8e2 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	200003c4 	.word	0x200003c4
 80029fc:	40004800 	.word	0x40004800

08002a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08b      	sub	sp, #44	; 0x2c
 8002a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a06:	2414      	movs	r4, #20
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	2314      	movs	r3, #20
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2100      	movs	r1, #0
 8002a12:	f005 fcc1 	bl	8008398 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
 8002a22:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a34:	2120      	movs	r1, #32
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3a:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2220      	movs	r2, #32
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a64:	2102      	movs	r1, #2
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <MX_GPIO_Init+0x10c>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002a76:	238c      	movs	r3, #140	; 0x8c
 8002a78:	015b      	lsls	r3, r3, #5
 8002a7a:	4825      	ldr	r0, [pc, #148]	; (8002b10 <MX_GPIO_Init+0x110>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	0019      	movs	r1, r3
 8002a80:	f000 ff28 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002a84:	4923      	ldr	r1, [pc, #140]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a86:	23a0      	movs	r3, #160	; 0xa0
 8002a88:	05db      	lsls	r3, r3, #23
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 ff21 	bl	80038d4 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	228c      	movs	r2, #140	; 0x8c
 8002a96:	0152      	lsls	r2, r2, #5
 8002a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <MX_GPIO_Init+0x110>)
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	f000 fcda 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002abc:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	193a      	adds	r2, r7, r4
 8002ad2:	23a0      	movs	r3, #160	; 0xa0
 8002ad4:	05db      	lsls	r3, r3, #23
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fcc7 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002ade:	0021      	movs	r1, r4
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	22c0      	movs	r2, #192	; 0xc0
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2288      	movs	r2, #136	; 0x88
 8002aec:	0352      	lsls	r2, r2, #13
 8002aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <MX_GPIO_Init+0x118>)
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fcb5 	bl	800346c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00b      	add	sp, #44	; 0x2c
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	50000800 	.word	0x50000800
 8002b14:	00009860 	.word	0x00009860
 8002b18:	50000400 	.word	0x50000400

08002b1c <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002b20:	23a0      	movs	r3, #160	; 0xa0
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fed3 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002b2e:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <my_astro_off+0x20>)
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 fa73 	bl	800501c <HAL_UART_DeInit>
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000029c 	.word	0x2000029c

08002b40 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <my_lx6_on+0x2c>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	f000 fec1 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	015b      	lsls	r3, r3, #5
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <my_lx6_on+0x2c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	f000 feba 	bl	80038d4 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002b60:	f7ff ff1a 	bl	8002998 <MX_USART3_UART_Init>
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	50000800 	.word	0x50000800

08002b70 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10d      	bne.n	8002b9e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
 8002b82:	23a0      	movs	r3, #160	; 0xa0
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	2200      	movs	r2, #0
 8002b88:	2120      	movs	r1, #32
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fea2 	bl	80038d4 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f001 ff66 	bl	8004a64 <HAL_TIM_Base_Stop_IT>
		seek_fix_loop_flag = false ;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
	}
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40001000 	.word	0x40001000
 8002bac:	20000250 	.word	0x20000250
 8002bb0:	20000580 	.word	0x20000580

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <Error_Handler+0x8>
	...

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_MspInit+0x44>)
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_MspInit+0x44>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_MspInit+0x44>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_MspInit+0x44>)
 8002be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_MspInit+0x44>)
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	0549      	lsls	r1, r1, #21
 8002be8:	430a      	orrs	r2, r1
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_MspInit+0x44>)
 8002bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	055b      	lsls	r3, r3, #21
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b097      	sub	sp, #92	; 0x5c
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	2344      	movs	r3, #68	; 0x44
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	0018      	movs	r0, r3
 8002c16:	2314      	movs	r3, #20
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f005 fbbc 	bl	8008398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c20:	2410      	movs	r4, #16
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	0018      	movs	r0, r3
 8002c26:	2334      	movs	r3, #52	; 0x34
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f005 fbb4 	bl	8008398 <memset>
  if(hi2c->Instance==I2C1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_I2C_MspInit+0xb8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d13d      	bne.n	8002cb6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fc9f 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c52:	f7ff ffaf 	bl	8002bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8002c6e:	2144      	movs	r1, #68	; 0x44
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	22c0      	movs	r2, #192	; 0xc0
 8002c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2212      	movs	r2, #18
 8002c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2206      	movs	r2, #6
 8002c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_I2C_MspInit+0xc0>)
 8002c92:	0019      	movs	r1, r3
 8002c94:	0010      	movs	r0, r2
 8002c96:	f000 fbe9 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0389      	lsls	r1, r1, #14
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_I2C_MspInit+0xbc>)
 8002caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	039b      	lsls	r3, r3, #14
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b017      	add	sp, #92	; 0x5c
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40005400 	.word	0x40005400
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	50000400 	.word	0x50000400

08002ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_TIM_Base_MspInit+0x44>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_TIM_Base_MspInit+0x48>)
 8002ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_TIM_Base_MspInit+0x48>)
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_TIM_Base_MspInit+0x48>)
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2210      	movs	r2, #16
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2011      	movs	r0, #17
 8002cfc:	f000 fb84 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002d00:	2011      	movs	r0, #17
 8002d02:	f000 fb96 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40001000 	.word	0x40001000
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b09b      	sub	sp, #108	; 0x6c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	2354      	movs	r3, #84	; 0x54
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	0018      	movs	r0, r3
 8002d26:	2314      	movs	r3, #20
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f005 fb34 	bl	8008398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d30:	2420      	movs	r4, #32
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	0018      	movs	r0, r3
 8002d36:	2334      	movs	r3, #52	; 0x34
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f005 fb2c 	bl	8008398 <memset>
  if(huart->Instance==USART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <HAL_UART_MspInit+0x1b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d140      	bne.n	8002dcc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f001 fc17 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d62:	f7ff ff27 	bl	8002bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d66:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6a:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	01c9      	lsls	r1, r1, #7
 8002d70:	430a      	orrs	r2, r1
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
 8002d74:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d86:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8002d9a:	2154      	movs	r1, #84	; 0x54
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	22c0      	movs	r2, #192	; 0xc0
 8002da0:	00d2      	lsls	r2, r2, #3
 8002da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2202      	movs	r2, #2
 8002da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2201      	movs	r2, #1
 8002dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	187a      	adds	r2, r7, r1
 8002dbe:	23a0      	movs	r3, #160	; 0xa0
 8002dc0:	05db      	lsls	r3, r3, #23
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fb51 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dca:	e07b      	b.n	8002ec4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a40      	ldr	r2, [pc, #256]	; (8002ed4 <HAL_UART_MspInit+0x1bc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d140      	bne.n	8002e58 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2202      	movs	r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	0018      	movs	r0, r3
 8002de8:	f001 fbd0 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8002df0:	f7ff fee0 	bl	8002bb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0289      	lsls	r1, r1, #10
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e14:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8002e28:	2154      	movs	r1, #84	; 0x54
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2202      	movs	r2, #2
 8002e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2201      	movs	r2, #1
 8002e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2201      	movs	r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	187a      	adds	r2, r7, r1
 8002e4a:	23a0      	movs	r3, #160	; 0xa0
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fb0b 	bl	800346c <HAL_GPIO_Init>
}
 8002e56:	e035      	b.n	8002ec4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_UART_MspInit+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d130      	bne.n	8002ec4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	02c9      	lsls	r1, r1, #11
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	02db      	lsls	r3, r3, #11
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e84:	2104      	movs	r1, #4
 8002e86:	430a      	orrs	r2, r1
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_UART_MspInit+0x1b8>)
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	2204      	movs	r2, #4
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8002e96:	2154      	movs	r1, #84	; 0x54
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	22c0      	movs	r2, #192	; 0xc0
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_UART_MspInit+0x1c4>)
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	0010      	movs	r0, r2
 8002ec0:	f000 fad4 	bl	800346c <HAL_GPIO_Init>
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b01b      	add	sp, #108	; 0x6c
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	40004800 	.word	0x40004800
 8002edc:	50000800 	.word	0x50000800

08002ee0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_UART_MspDeInit+0x80>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10e      	bne.n	8002f10 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002ef8:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_UART_MspDeInit+0x88>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8002efe:	23c0      	movs	r3, #192	; 0xc0
 8002f00:	00da      	lsls	r2, r3, #3
 8002f02:	23a0      	movs	r3, #160	; 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fc13 	bl	8003734 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002f0e:	e023      	b.n	8002f58 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_UART_MspDeInit+0x8c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002f20:	4913      	ldr	r1, [pc, #76]	; (8002f70 <HAL_UART_MspDeInit+0x90>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8002f26:	23a0      	movs	r3, #160	; 0xa0
 8002f28:	05db      	lsls	r3, r3, #23
 8002f2a:	210c      	movs	r1, #12
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fc01 	bl	8003734 <HAL_GPIO_DeInit>
}
 8002f32:	e011      	b.n	8002f58 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <HAL_UART_MspDeInit+0x94>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10c      	bne.n	8002f58 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_UART_MspDeInit+0x84>)
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <HAL_UART_MspDeInit+0x98>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_UART_MspDeInit+0x9c>)
 8002f50:	0019      	movs	r1, r3
 8002f52:	0010      	movs	r0, r2
 8002f54:	f000 fbee 	bl	8003734 <HAL_GPIO_DeInit>
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	ffffbfff 	.word	0xffffbfff
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	fffdffff 	.word	0xfffdffff
 8002f74:	40004800 	.word	0x40004800
 8002f78:	fffbffff 	.word	0xfffbffff
 8002f7c:	50000800 	.word	0x50000800

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <NMI_Handler+0x4>

08002f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <HardFault_Handler+0x4>

08002f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa4:	f000 f968 	bl	8003278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fd82 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20000250 	.word	0x20000250

08002fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_kill>:

int _kill(int pid, int sig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fde:	f005 fa83 	bl	80084e8 <__errno>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	2216      	movs	r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	425b      	negs	r3, r3
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_exit>:

void _exit (int status)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	425a      	negs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ffe5 	bl	8002fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800300a:	e7fe      	b.n	800300a <_exit+0x16>

0800300c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e00a      	b.n	8003034 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800301e:	e000      	b.n	8003022 <_read+0x16>
 8003020:	bf00      	nop
 8003022:	0001      	movs	r1, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	60ba      	str	r2, [r7, #8]
 800302a:	b2ca      	uxtb	r2, r1
 800302c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	dbf0      	blt.n	800301e <_read+0x12>
  }

  return len;
 800303c:	687b      	ldr	r3, [r7, #4]
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b006      	add	sp, #24
 8003044:	bd80      	pop	{r7, pc}

08003046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e009      	b.n	800306c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	0018      	movs	r0, r3
 8003062:	e000      	b.n	8003066 <_write+0x20>
 8003064:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3301      	adds	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	dbf1      	blt.n	8003058 <_write+0x12>
  }
  return len;
 8003074:	687b      	ldr	r3, [r7, #4]
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b006      	add	sp, #24
 800307c:	bd80      	pop	{r7, pc}

0800307e <_close>:

int _close(int file)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003086:	2301      	movs	r3, #1
 8003088:	425b      	negs	r3, r3
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}

08003092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	0192      	lsls	r2, r2, #6
 80030a2:	605a      	str	r2, [r3, #4]
  return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_isatty>:

int _isatty(int file)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <_sbrk+0x5c>)
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <_sbrk+0x60>)
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <_sbrk+0x64>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <_sbrk+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d207      	bcs.n	8003118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003108:	f005 f9ee 	bl	80084e8 <__errno>
 800310c:	0003      	movs	r3, r0
 800310e:	220c      	movs	r2, #12
 8003110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003112:	2301      	movs	r3, #1
 8003114:	425b      	negs	r3, r3
 8003116:	e009      	b.n	800312c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	18d2      	adds	r2, r2, r3
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <_sbrk+0x64>)
 8003128:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b006      	add	sp, #24
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20009000 	.word	0x20009000
 8003138:	00000400 	.word	0x00000400
 800313c:	20000584 	.word	0x20000584
 8003140:	200006d8 	.word	0x200006d8

08003144 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003152:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003154:	f7ff fff6 	bl	8003144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003158:	480c      	ldr	r0, [pc, #48]	; (800318c <LoopForever+0x6>)
  ldr r1, =_edata
 800315a:	490d      	ldr	r1, [pc, #52]	; (8003190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <LoopForever+0xe>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003160:	e002      	b.n	8003168 <LoopCopyDataInit>

08003162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003166:	3304      	adds	r3, #4

08003168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800316c:	d3f9      	bcc.n	8003162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003170:	4c0a      	ldr	r4, [pc, #40]	; (800319c <LoopForever+0x16>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003174:	e001      	b.n	800317a <LoopFillZerobss>

08003176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003178:	3204      	adds	r2, #4

0800317a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800317c:	d3fb      	bcc.n	8003176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800317e:	f005 f9b9 	bl	80084f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003182:	f7ff f9e3 	bl	800254c <main>

08003186 <LoopForever>:

LoopForever:
  b LoopForever
 8003186:	e7fe      	b.n	8003186 <LoopForever>
  ldr   r0, =_estack
 8003188:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003194:	0800bd6c 	.word	0x0800bd6c
  ldr r2, =_sbss
 8003198:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800319c:	200006d8 	.word	0x200006d8

080031a0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC1_COMP_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_Init+0x3c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_Init+0x3c>)
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	0049      	lsls	r1, r1, #1
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f810 	bl	80031e4 <HAL_InitTick>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e001      	b.n	80031d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031d0:	f7ff fcf6 	bl	8002bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022000 	.word	0x40022000

080031e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031ec:	230f      	movs	r3, #15
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_InitTick+0x88>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02b      	beq.n	8003254 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_InitTick+0x8c>)
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_InitTick+0x88>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	0019      	movs	r1, r3
 8003206:	23fa      	movs	r3, #250	; 0xfa
 8003208:	0098      	lsls	r0, r3, #2
 800320a:	f7fc ff97 	bl	800013c <__udivsi3>
 800320e:	0003      	movs	r3, r0
 8003210:	0019      	movs	r1, r3
 8003212:	0020      	movs	r0, r4
 8003214:	f7fc ff92 	bl	800013c <__udivsi3>
 8003218:	0003      	movs	r3, r0
 800321a:	0018      	movs	r0, r3
 800321c:	f000 f919 	bl	8003452 <HAL_SYSTICK_Config>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d112      	bne.n	800324a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d80a      	bhi.n	8003240 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	2301      	movs	r3, #1
 800322e:	425b      	negs	r3, r3
 8003230:	2200      	movs	r2, #0
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f8e8 	bl	8003408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_InitTick+0x90>)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e00d      	b.n	800325c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e008      	b.n	800325c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800324a:	230f      	movs	r3, #15
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e003      	b.n	800325c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	781b      	ldrb	r3, [r3, #0]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b005      	add	sp, #20
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20000014 	.word	0x20000014
 8003270:	2000000c 	.word	0x2000000c
 8003274:	20000010 	.word	0x20000010

08003278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_IncTick+0x1c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	001a      	movs	r2, r3
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_IncTick+0x20>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	18d2      	adds	r2, r2, r3
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_IncTick+0x20>)
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	20000014 	.word	0x20000014
 8003298:	20000588 	.word	0x20000588

0800329c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  return uwTick;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <HAL_GetTick+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000588 	.word	0x20000588

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	0002      	movs	r2, r0
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b7f      	cmp	r3, #127	; 0x7f
 80032c2:	d809      	bhi.n	80032d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	001a      	movs	r2, r3
 80032ca:	231f      	movs	r3, #31
 80032cc:	401a      	ands	r2, r3
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <__NVIC_EnableIRQ+0x30>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	4091      	lsls	r1, r2
 80032d4:	000a      	movs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	0002      	movs	r2, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b7f      	cmp	r3, #127	; 0x7f
 80032f8:	d828      	bhi.n	800334c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <__NVIC_SetPriority+0xd4>)
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	33c0      	adds	r3, #192	; 0xc0
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	1dfa      	adds	r2, r7, #7
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	0011      	movs	r1, r2
 8003310:	2203      	movs	r2, #3
 8003312:	400a      	ands	r2, r1
 8003314:	00d2      	lsls	r2, r2, #3
 8003316:	21ff      	movs	r1, #255	; 0xff
 8003318:	4091      	lsls	r1, r2
 800331a:	000a      	movs	r2, r1
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	401a      	ands	r2, r3
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	2303      	movs	r3, #3
 8003332:	4003      	ands	r3, r0
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	481f      	ldr	r0, [pc, #124]	; (80033b8 <__NVIC_SetPriority+0xd4>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	430a      	orrs	r2, r1
 8003344:	33c0      	adds	r3, #192	; 0xc0
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800334a:	e031      	b.n	80033b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <__NVIC_SetPriority+0xd8>)
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0019      	movs	r1, r3
 8003354:	230f      	movs	r3, #15
 8003356:	400b      	ands	r3, r1
 8003358:	3b08      	subs	r3, #8
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3306      	adds	r3, #6
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	3304      	adds	r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1dfa      	adds	r2, r7, #7
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	0011      	movs	r1, r2
 800336c:	2203      	movs	r2, #3
 800336e:	400a      	ands	r2, r1
 8003370:	00d2      	lsls	r2, r2, #3
 8003372:	21ff      	movs	r1, #255	; 0xff
 8003374:	4091      	lsls	r1, r2
 8003376:	000a      	movs	r2, r1
 8003378:	43d2      	mvns	r2, r2
 800337a:	401a      	ands	r2, r3
 800337c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	401a      	ands	r2, r3
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	2303      	movs	r3, #3
 800338e:	4003      	ands	r3, r0
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4809      	ldr	r0, [pc, #36]	; (80033bc <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	001c      	movs	r4, r3
 800339c:	230f      	movs	r3, #15
 800339e:	4023      	ands	r3, r4
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	430a      	orrs	r2, r1
 80033a6:	3306      	adds	r3, #6
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	18c3      	adds	r3, r0, r3
 80033ac:	3304      	adds	r3, #4
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b003      	add	sp, #12
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	045b      	lsls	r3, r3, #17
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d301      	bcc.n	80033d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d4:	2301      	movs	r3, #1
 80033d6:	e010      	b.n	80033fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <SysTick_Config+0x44>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	3a01      	subs	r2, #1
 80033de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e0:	2301      	movs	r3, #1
 80033e2:	425b      	negs	r3, r3
 80033e4:	2103      	movs	r1, #3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff ff7c 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <SysTick_Config+0x44>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <SysTick_Config+0x44>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	210f      	movs	r1, #15
 8003414:	187b      	adds	r3, r7, r1
 8003416:	1c02      	adds	r2, r0, #0
 8003418:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	187b      	adds	r3, r7, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b004      	add	sp, #16
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	0002      	movs	r2, r0
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff ff33 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b002      	add	sp, #8
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff ffaf 	bl	80033c0 <SysTick_Config>
 8003462:	0003      	movs	r3, r0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	e147      	b.n	800370c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4091      	lsls	r1, r2
 8003486:	000a      	movs	r2, r1
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d100      	bne.n	8003494 <HAL_GPIO_Init+0x28>
 8003492:	e138      	b.n	8003706 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	2b01      	cmp	r3, #1
 800349e:	d005      	beq.n	80034ac <HAL_GPIO_Init+0x40>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d130      	bne.n	800350e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	409a      	lsls	r2, r3
 80034ba:	0013      	movs	r3, r2
 80034bc:	43da      	mvns	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	409a      	lsls	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e2:	2201      	movs	r2, #1
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
 80034e8:	0013      	movs	r3, r2
 80034ea:	43da      	mvns	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	2201      	movs	r2, #1
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2203      	movs	r2, #3
 8003514:	4013      	ands	r3, r2
 8003516:	2b03      	cmp	r3, #3
 8003518:	d017      	beq.n	800354a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	409a      	lsls	r2, r3
 8003528:	0013      	movs	r3, r2
 800352a:	43da      	mvns	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	0013      	movs	r3, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	4013      	ands	r3, r2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d123      	bne.n	800359e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	58d3      	ldr	r3, [r2, r3]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2207      	movs	r2, #7
 8003568:	4013      	ands	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	43da      	mvns	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2107      	movs	r1, #7
 8003582:	400b      	ands	r3, r1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	6939      	ldr	r1, [r7, #16]
 800359c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	43da      	mvns	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	401a      	ands	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	23c0      	movs	r3, #192	; 0xc0
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4013      	ands	r3, r2
 80035dc:	d100      	bne.n	80035e0 <HAL_GPIO_Init+0x174>
 80035de:	e092      	b.n	8003706 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3318      	adds	r3, #24
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	589b      	ldr	r3, [r3, r2]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2203      	movs	r2, #3
 80035f2:	4013      	ands	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	220f      	movs	r2, #15
 80035f8:	409a      	lsls	r2, r3
 80035fa:	0013      	movs	r3, r2
 80035fc:	43da      	mvns	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	23a0      	movs	r3, #160	; 0xa0
 8003608:	05db      	lsls	r3, r3, #23
 800360a:	429a      	cmp	r2, r3
 800360c:	d013      	beq.n	8003636 <HAL_GPIO_Init+0x1ca>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a45      	ldr	r2, [pc, #276]	; (8003728 <HAL_GPIO_Init+0x2bc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_GPIO_Init+0x1c6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a44      	ldr	r2, [pc, #272]	; (800372c <HAL_GPIO_Init+0x2c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <HAL_GPIO_Init+0x1c2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a43      	ldr	r2, [pc, #268]	; (8003730 <HAL_GPIO_Init+0x2c4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_GPIO_Init+0x1be>
 8003626:	2303      	movs	r3, #3
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 800362a:	2305      	movs	r3, #5
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x1cc>
 8003636:	2300      	movs	r3, #0
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	2103      	movs	r1, #3
 800363c:	400a      	ands	r2, r1
 800363e:	00d2      	lsls	r2, r2, #3
 8003640:	4093      	lsls	r3, r2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003648:	4936      	ldr	r1, [pc, #216]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3318      	adds	r3, #24
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43da      	mvns	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	035b      	lsls	r3, r3, #13
 800366e:	4013      	ands	r3, r2
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43da      	mvns	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	039b      	lsls	r3, r3, #14
 8003698:	4013      	ands	r3, r2
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036ac:	2384      	movs	r3, #132	; 0x84
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	4013      	ands	r3, r2
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d0:	4914      	ldr	r1, [pc, #80]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036d2:	2284      	movs	r2, #132	; 0x84
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	58d3      	ldr	r3, [r2, r3]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43da      	mvns	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	4013      	ands	r3, r2
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <HAL_GPIO_Init+0x2b8>)
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	40da      	lsrs	r2, r3
 8003714:	1e13      	subs	r3, r2, #0
 8003716:	d000      	beq.n	800371a <HAL_GPIO_Init+0x2ae>
 8003718:	e6b0      	b.n	800347c <HAL_GPIO_Init+0x10>
  }
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021800 	.word	0x40021800
 8003728:	50000400 	.word	0x50000400
 800372c:	50000800 	.word	0x50000800
 8003730:	50000c00 	.word	0x50000c00

08003734 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003742:	e0b4      	b.n	80038ae <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003744:	2201      	movs	r2, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	409a      	lsls	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d100      	bne.n	8003758 <HAL_GPIO_DeInit+0x24>
 8003756:	e0a7      	b.n	80038a8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003758:	4a5a      	ldr	r2, [pc, #360]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3318      	adds	r3, #24
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	589b      	ldr	r3, [r3, r2]
 8003764:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2203      	movs	r2, #3
 800376a:	4013      	ands	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	220f      	movs	r2, #15
 8003770:	409a      	lsls	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	23a0      	movs	r3, #160	; 0xa0
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	429a      	cmp	r2, r3
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_DeInit+0x76>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a50      	ldr	r2, [pc, #320]	; (80038c8 <HAL_GPIO_DeInit+0x194>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_DeInit+0x72>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <HAL_GPIO_DeInit+0x198>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_DeInit+0x6e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_GPIO_DeInit+0x19c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_DeInit+0x6a>
 800379a:	2303      	movs	r3, #3
 800379c:	e006      	b.n	80037ac <HAL_GPIO_DeInit+0x78>
 800379e:	2305      	movs	r3, #5
 80037a0:	e004      	b.n	80037ac <HAL_GPIO_DeInit+0x78>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e002      	b.n	80037ac <HAL_GPIO_DeInit+0x78>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_GPIO_DeInit+0x78>
 80037aa:	2300      	movs	r3, #0
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	2103      	movs	r1, #3
 80037b0:	400a      	ands	r2, r1
 80037b2:	00d2      	lsls	r2, r2, #3
 80037b4:	4093      	lsls	r3, r2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d136      	bne.n	800382a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037bc:	4a41      	ldr	r2, [pc, #260]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	58d3      	ldr	r3, [r2, r3]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	43d2      	mvns	r2, r2
 80037c6:	493f      	ldr	r1, [pc, #252]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80037ce:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037d0:	2384      	movs	r3, #132	; 0x84
 80037d2:	58d3      	ldr	r3, [r2, r3]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	43d2      	mvns	r2, r2
 80037d8:	493a      	ldr	r1, [pc, #232]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037da:	4013      	ands	r3, r2
 80037dc:	2284      	movs	r2, #132	; 0x84
 80037de:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037e0:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80037ee:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43d9      	mvns	r1, r3
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2203      	movs	r2, #3
 8003800:	4013      	ands	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	220f      	movs	r2, #15
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800380c:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3318      	adds	r3, #24
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	589a      	ldr	r2, [r3, r2]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43d9      	mvns	r1, r3
 800381c:	4829      	ldr	r0, [pc, #164]	; (80038c4 <HAL_GPIO_DeInit+0x190>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	400a      	ands	r2, r1
 8003824:	3318      	adds	r3, #24
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2103      	movs	r1, #3
 8003834:	4099      	lsls	r1, r3
 8003836:	000b      	movs	r3, r1
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	58d3      	ldr	r3, [r2, r3]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	2107      	movs	r1, #7
 800384e:	400a      	ands	r2, r1
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	210f      	movs	r1, #15
 8003854:	4091      	lsls	r1, r2
 8003856:	000a      	movs	r2, r1
 8003858:	43d1      	mvns	r1, r2
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	08d2      	lsrs	r2, r2, #3
 800385e:	4019      	ands	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3208      	adds	r2, #8
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	0052      	lsls	r2, r2, #1
 8003870:	2103      	movs	r1, #3
 8003872:	4091      	lsls	r1, r2
 8003874:	000a      	movs	r2, r1
 8003876:	43d2      	mvns	r2, r2
 8003878:	401a      	ands	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2101      	movs	r1, #1
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4091      	lsls	r1, r2
 8003888:	000a      	movs	r2, r1
 800388a:	43d2      	mvns	r2, r2
 800388c:	401a      	ands	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	0052      	lsls	r2, r2, #1
 800389a:	2103      	movs	r1, #3
 800389c:	4091      	lsls	r1, r2
 800389e:	000a      	movs	r2, r1
 80038a0:	43d2      	mvns	r2, r2
 80038a2:	401a      	ands	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3301      	adds	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	40da      	lsrs	r2, r3
 80038b4:	1e13      	subs	r3, r2, #0
 80038b6:	d000      	beq.n	80038ba <HAL_GPIO_DeInit+0x186>
 80038b8:	e744      	b.n	8003744 <HAL_GPIO_DeInit+0x10>
  }
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021800 	.word	0x40021800
 80038c8:	50000400 	.word	0x50000400
 80038cc:	50000800 	.word	0x50000800
 80038d0:	50000c00 	.word	0x50000c00

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	0008      	movs	r0, r1
 80038de:	0011      	movs	r1, r2
 80038e0:	1cbb      	adds	r3, r7, #2
 80038e2:	1c02      	adds	r2, r0, #0
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	1c7b      	adds	r3, r7, #1
 80038e8:	1c0a      	adds	r2, r1, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ec:	1c7b      	adds	r3, r7, #1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038f4:	1cbb      	adds	r3, r7, #2
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e082      	b.n	8003a28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2241      	movs	r2, #65	; 0x41
 8003926:	5c9b      	ldrb	r3, [r3, r2]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff f965 	bl	8002c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2241      	movs	r2, #65	; 0x41
 8003942:	2124      	movs	r1, #36	; 0x24
 8003944:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	438a      	bics	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_I2C_Init+0x120>)
 8003960:	400a      	ands	r2, r1
 8003962:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4931      	ldr	r1, [pc, #196]	; (8003a34 <HAL_I2C_Init+0x124>)
 8003970:	400a      	ands	r2, r1
 8003972:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0209      	lsls	r1, r1, #8
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	e007      	b.n	800399e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2184      	movs	r1, #132	; 0x84
 8003998:	0209      	lsls	r1, r1, #8
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d104      	bne.n	80039b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	491f      	ldr	r1, [pc, #124]	; (8003a38 <HAL_I2C_Init+0x128>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	491a      	ldr	r1, [pc, #104]	; (8003a34 <HAL_I2C_Init+0x124>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	431a      	orrs	r2, r3
 80039da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69d9      	ldr	r1, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2241      	movs	r2, #65	; 0x41
 8003a14:	2120      	movs	r1, #32
 8003a16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2242      	movs	r2, #66	; 0x42
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	f0ffffff 	.word	0xf0ffffff
 8003a34:	ffff7fff 	.word	0xffff7fff
 8003a38:	02008000 	.word	0x02008000

08003a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d138      	bne.n	8003ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e032      	b.n	8003ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2241      	movs	r2, #65	; 0x41
 8003a6c:	2124      	movs	r1, #36	; 0x24
 8003a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4911      	ldr	r1, [pc, #68]	; (8003ad0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2241      	movs	r2, #65	; 0x41
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	ffffefff 	.word	0xffffefff

08003ad4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2241      	movs	r2, #65	; 0x41
 8003ae2:	5c9b      	ldrb	r3, [r3, r2]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d139      	bne.n	8003b5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e033      	b.n	8003b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	2101      	movs	r1, #1
 8003afe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2241      	movs	r2, #65	; 0x41
 8003b04:	2124      	movs	r1, #36	; 0x24
 8003b06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2101      	movs	r1, #1
 8003b14:	438a      	bics	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2241      	movs	r2, #65	; 0x41
 8003b4e:	2120      	movs	r1, #32
 8003b50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2100      	movs	r1, #0
 8003b58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
  }
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	fffff0ff 	.word	0xfffff0ff

08003b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d11f      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	0013      	movs	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4912      	ldr	r1, [pc, #72]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fc facc 	bl	800013c <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003baa:	e008      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e001      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e009      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0ed      	beq.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	fffff9ff 	.word	0xfffff9ff
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	000f4240 	.word	0x000f4240

08003bec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	23e0      	movs	r3, #224	; 0xe0
 8003bf6:	01db      	lsls	r3, r3, #7
 8003bf8:	4013      	ands	r3, r2
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e2fe      	b.n	8004214 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCC_OscConfig+0x1e>
 8003c20:	e07c      	b.n	8003d1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c22:	4bc3      	ldr	r3, [pc, #780]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2238      	movs	r2, #56	; 0x38
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2c:	4bc0      	ldr	r3, [pc, #768]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2203      	movs	r2, #3
 8003c32:	4013      	ands	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_OscConfig+0x3e>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	4bb9      	ldr	r3, [pc, #740]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	4013      	ands	r3, r2
 8003c52:	d062      	beq.n	8003d1a <HAL_RCC_OscConfig+0x116>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d15e      	bne.n	8003d1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e2d9      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_OscConfig+0x78>
 8003c6c:	4bb0      	ldr	r3, [pc, #704]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4baf      	ldr	r3, [pc, #700]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	0249      	lsls	r1, r1, #9
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e020      	b.n	8003cbe <HAL_RCC_OscConfig+0xba>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	23a0      	movs	r3, #160	; 0xa0
 8003c82:	02db      	lsls	r3, r3, #11
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d10e      	bne.n	8003ca6 <HAL_RCC_OscConfig+0xa2>
 8003c88:	4ba9      	ldr	r3, [pc, #676]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4ba8      	ldr	r3, [pc, #672]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	02c9      	lsls	r1, r1, #11
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	4ba6      	ldr	r3, [pc, #664]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4ba5      	ldr	r3, [pc, #660]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	0249      	lsls	r1, r1, #9
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0xba>
 8003ca6:	4ba2      	ldr	r3, [pc, #648]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4ba1      	ldr	r3, [pc, #644]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	49a1      	ldr	r1, [pc, #644]	; (8003f34 <HAL_RCC_OscConfig+0x330>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4b9f      	ldr	r3, [pc, #636]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b9e      	ldr	r3, [pc, #632]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	499f      	ldr	r1, [pc, #636]	; (8003f38 <HAL_RCC_OscConfig+0x334>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d014      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7ff fae9 	bl	800329c <HAL_GetTick>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7ff fae4 	bl	800329c <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e298      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	4b93      	ldr	r3, [pc, #588]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	029b      	lsls	r3, r3, #10
 8003cea:	4013      	ands	r3, r2
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xcc>
 8003cee:	e015      	b.n	8003d1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7ff fad4 	bl	800329c <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfa:	f7ff facf 	bl	800329c <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e283      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0c:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0xf6>
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d100      	bne.n	8003d28 <HAL_RCC_OscConfig+0x124>
 8003d26:	e099      	b.n	8003e5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d28:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2238      	movs	r2, #56	; 0x38
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d32:	4b7f      	ldr	r3, [pc, #508]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2203      	movs	r2, #3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_OscConfig+0x144>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d002      	beq.n	8003d4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d135      	bne.n	8003dba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4e:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4013      	ands	r3, r2
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x162>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e256      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b72      	ldr	r3, [pc, #456]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a74      	ldr	r2, [pc, #464]	; (8003f3c <HAL_RCC_OscConfig+0x338>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	4b6e      	ldr	r3, [pc, #440]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d112      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x33c>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	4b67      	ldr	r3, [pc, #412]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d96:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	0adb      	lsrs	r3, r3, #11
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	4013      	ands	r3, r2
 8003da0:	4a68      	ldr	r2, [pc, #416]	; (8003f44 <HAL_RCC_OscConfig+0x340>)
 8003da2:	40da      	lsrs	r2, r3
 8003da4:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x344>)
 8003da6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_OscConfig+0x348>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fa19 	bl	80031e4 <HAL_InitTick>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d051      	beq.n	8003e5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e22c      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d030      	beq.n	8003e24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5e      	ldr	r2, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x33c>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003dd6:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	0049      	lsls	r1, r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7ff fa5a 	bl	800329c <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dee:	f7ff fa55 	bl	800329c <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e209      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a4a      	ldr	r2, [pc, #296]	; (8003f3c <HAL_RCC_OscConfig+0x338>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	e01b      	b.n	8003e5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	4949      	ldr	r1, [pc, #292]	; (8003f50 <HAL_RCC_OscConfig+0x34c>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7ff fa34 	bl	800329c <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7ff fa2f 	bl	800329c <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1e3      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4013      	ands	r3, r2
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x236>
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4013      	ands	r3, r2
 8003e64:	d047      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2238      	movs	r2, #56	; 0x38
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b18      	cmp	r3, #24
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e72:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	2202      	movs	r2, #2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d03c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d138      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e1c5      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d019      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	2101      	movs	r1, #1
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7ff f9fe 	bl	800329c <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7ff f9f9 	bl	800329c <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1ad      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d0f1      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2a2>
 8003ec2:	e018      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003ec6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	2101      	movs	r1, #1
 8003ecc:	438a      	bics	r2, r1
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7ff f9e4 	bl	800329c <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7ff f9df 	bl	800329c <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e193      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d1f1      	bne.n	8003eda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2204      	movs	r2, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	d100      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2fe>
 8003f00:	e0c6      	b.n	8004090 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	231f      	movs	r3, #31
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2238      	movs	r2, #56	; 0x38
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d11e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_OscConfig+0x32c>)
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <HAL_RCC_OscConfig+0x31e>
 8003f20:	e0b6      	b.n	8004090 <HAL_RCC_OscConfig+0x48c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <HAL_RCC_OscConfig+0x328>
 8003f2a:	e0b1      	b.n	8004090 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e171      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	fffeffff 	.word	0xfffeffff
 8003f38:	fffbffff 	.word	0xfffbffff
 8003f3c:	ffff80ff 	.word	0xffff80ff
 8003f40:	ffffc7ff 	.word	0xffffc7ff
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	20000010 	.word	0x20000010
 8003f50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f54:	4bb1      	ldr	r3, [pc, #708]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	055b      	lsls	r3, r3, #21
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_OscConfig+0x360>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x362>
 8003f64:	2300      	movs	r3, #0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4bac      	ldr	r3, [pc, #688]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6e:	4bab      	ldr	r3, [pc, #684]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0549      	lsls	r1, r1, #21
 8003f74:	430a      	orrs	r2, r1
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f78:	4ba8      	ldr	r3, [pc, #672]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	055b      	lsls	r3, r3, #21
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f86:	231f      	movs	r3, #31
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8e:	4ba4      	ldr	r3, [pc, #656]	; (8004220 <HAL_RCC_OscConfig+0x61c>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	d11a      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9a:	4ba1      	ldr	r3, [pc, #644]	; (8004220 <HAL_RCC_OscConfig+0x61c>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4ba0      	ldr	r3, [pc, #640]	; (8004220 <HAL_RCC_OscConfig+0x61c>)
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	0049      	lsls	r1, r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003fa8:	f7ff f978 	bl	800329c <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7ff f973 	bl	800329c <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e127      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc4:	4b96      	ldr	r3, [pc, #600]	; (8004220 <HAL_RCC_OscConfig+0x61c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3e2>
 8003fd8:	4b90      	ldr	r3, [pc, #576]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fdc:	4b8f      	ldr	r3, [pc, #572]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x41c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x404>
 8003fee:	4b8b      	ldr	r3, [pc, #556]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ffa:	4b88      	ldr	r3, [pc, #544]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8003ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ffe:	4b87      	ldr	r3, [pc, #540]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004000:	2101      	movs	r1, #1
 8004002:	430a      	orrs	r2, r1
 8004004:	65da      	str	r2, [r3, #92]	; 0x5c
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x41c>
 8004008:	4b84      	ldr	r3, [pc, #528]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800400a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800400c:	4b83      	ldr	r3, [pc, #524]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800400e:	2101      	movs	r1, #1
 8004010:	438a      	bics	r2, r1
 8004012:	65da      	str	r2, [r3, #92]	; 0x5c
 8004014:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004016:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004018:	4b80      	ldr	r3, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800401a:	2104      	movs	r1, #4
 800401c:	438a      	bics	r2, r1
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d014      	beq.n	8004052 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7ff f938 	bl	800329c <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004030:	e009      	b.n	8004046 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7ff f933 	bl	800329c <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	4a79      	ldr	r2, [pc, #484]	; (8004224 <HAL_RCC_OscConfig+0x620>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0e6      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b75      	ldr	r3, [pc, #468]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	2202      	movs	r2, #2
 800404c:	4013      	ands	r3, r2
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x42e>
 8004050:	e013      	b.n	800407a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7ff f923 	bl	800329c <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405a:	e009      	b.n	8004070 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7ff f91e 	bl	800329c <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	4a6f      	ldr	r2, [pc, #444]	; (8004224 <HAL_RCC_OscConfig+0x620>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0d1      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800407a:	231f      	movs	r3, #31
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004088:	4b64      	ldr	r3, [pc, #400]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800408a:	4967      	ldr	r1, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x624>)
 800408c:	400a      	ands	r2, r1
 800408e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x496>
 8004098:	e0bb      	b.n	8004212 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2238      	movs	r2, #56	; 0x38
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d100      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4a4>
 80040a6:	e07b      	b.n	80041a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d156      	bne.n	800415e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b5a      	ldr	r3, [pc, #360]	; (800421c <HAL_RCC_OscConfig+0x618>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_OscConfig+0x618>)
 80040b6:	495d      	ldr	r1, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x628>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7ff f8ee 	bl	800329c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c6:	f7ff f8e9 	bl	800329c <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e09d      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	4b50      	ldr	r3, [pc, #320]	; (800421c <HAL_RCC_OscConfig+0x618>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	049b      	lsls	r3, r3, #18
 80040e0:	4013      	ands	r3, r2
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e4:	4b4d      	ldr	r3, [pc, #308]	; (800421c <HAL_RCC_OscConfig+0x618>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a51      	ldr	r2, [pc, #324]	; (8004230 <HAL_RCC_OscConfig+0x62c>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1a      	ldr	r2, [r3, #32]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	431a      	orrs	r2, r3
 8004112:	4b42      	ldr	r3, [pc, #264]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004114:	430a      	orrs	r2, r1
 8004116:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004118:	4b40      	ldr	r3, [pc, #256]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0449      	lsls	r1, r1, #17
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	4b3c      	ldr	r3, [pc, #240]	; (800421c <HAL_RCC_OscConfig+0x618>)
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	0549      	lsls	r1, r1, #21
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7ff f8b2 	bl	800329c <HAL_GetTick>
 8004138:	0003      	movs	r3, r0
 800413a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413e:	f7ff f8ad 	bl	800329c <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e061      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	049b      	lsls	r3, r3, #18
 8004158:	4013      	ands	r3, r2
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x53a>
 800415c:	e059      	b.n	8004212 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b2e      	ldr	r3, [pc, #184]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004164:	4931      	ldr	r1, [pc, #196]	; (800422c <HAL_RCC_OscConfig+0x628>)
 8004166:	400a      	ands	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7ff f897 	bl	800329c <HAL_GetTick>
 800416e:	0003      	movs	r3, r0
 8004170:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7ff f892 	bl	800329c <HAL_GetTick>
 8004178:	0002      	movs	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e046      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	049b      	lsls	r3, r3, #18
 800418e:	4013      	ands	r3, r2
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x618>)
 8004198:	4926      	ldr	r1, [pc, #152]	; (8004234 <HAL_RCC_OscConfig+0x630>)
 800419a:	400a      	ands	r2, r1
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	e038      	b.n	8004212 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e033      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_RCC_OscConfig+0x618>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2203      	movs	r2, #3
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d126      	bne.n	800420e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2270      	movs	r2, #112	; 0x70
 80041c4:	401a      	ands	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d11f      	bne.n	800420e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	23fe      	movs	r3, #254	; 0xfe
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d116      	bne.n	800420e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	23f8      	movs	r3, #248	; 0xf8
 80041e4:	039b      	lsls	r3, r3, #14
 80041e6:	401a      	ands	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d10e      	bne.n	800420e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	23e0      	movs	r3, #224	; 0xe0
 80041f4:	051b      	lsls	r3, r3, #20
 80041f6:	401a      	ands	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	0f5b      	lsrs	r3, r3, #29
 8004204:	075a      	lsls	r2, r3, #29
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b008      	add	sp, #32
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
 8004224:	00001388 	.word	0x00001388
 8004228:	efffffff 	.word	0xefffffff
 800422c:	feffffff 	.word	0xfeffffff
 8004230:	11c1808c 	.word	0x11c1808c
 8004234:	eefefffc 	.word	0xeefefffc

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0e9      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2207      	movs	r2, #7
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d91e      	bls.n	8004298 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2207      	movs	r2, #7
 8004260:	4393      	bics	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800426c:	f7ff f816 	bl	800329c <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004274:	e009      	b.n	800428a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004276:	f7ff f811 	bl	800329c <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	4a6a      	ldr	r2, [pc, #424]	; (800442c <HAL_RCC_ClockConfig+0x1f4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0ca      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d1ee      	bne.n	8004276 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2202      	movs	r2, #2
 800429e:	4013      	ands	r3, r2
 80042a0:	d015      	beq.n	80042ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d006      	beq.n	80042ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042ac:	4b60      	ldr	r3, [pc, #384]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042b2:	21e0      	movs	r1, #224	; 0xe0
 80042b4:	01c9      	lsls	r1, r1, #7
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4a5d      	ldr	r2, [pc, #372]	; (8004434 <HAL_RCC_ClockConfig+0x1fc>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d057      	beq.n	8004388 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	4013      	ands	r3, r2
 80042ea:	d12b      	bne.n	8004344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e097      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f8:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	049b      	lsls	r3, r3, #18
 8004300:	4013      	ands	r3, r2
 8004302:	d11f      	bne.n	8004344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e08b      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	4b47      	ldr	r3, [pc, #284]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4013      	ands	r3, r2
 800431a:	d113      	bne.n	8004344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e07f      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d106      	bne.n	8004336 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d108      	bne.n	8004344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e074      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2202      	movs	r2, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e06d      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2207      	movs	r2, #7
 800434a:	4393      	bics	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fe ffa0 	bl	800329c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004360:	e009      	b.n	8004376 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004362:	f7fe ff9b 	bl	800329c <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a2f      	ldr	r2, [pc, #188]	; (800442c <HAL_RCC_ClockConfig+0x1f4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e054      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2238      	movs	r2, #56	; 0x38
 800437c:	401a      	ands	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	429a      	cmp	r2, r3
 8004386:	d1ec      	bne.n	8004362 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004388:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2207      	movs	r2, #7
 800438e:	4013      	ands	r3, r2
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d21e      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2207      	movs	r2, #7
 800439c:	4393      	bics	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043a8:	f7fe ff78 	bl	800329c <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043b0:	e009      	b.n	80043c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b2:	f7fe ff73 	bl	800329c <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_RCC_ClockConfig+0x1f4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e02c      	b.n	8004420 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCC_ClockConfig+0x1f0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2207      	movs	r2, #7
 80043cc:	4013      	ands	r3, r2
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2204      	movs	r2, #4
 80043da:	4013      	ands	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_RCC_ClockConfig+0x200>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80043f2:	f000 f829 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043f6:	0001      	movs	r1, r0
 80043f8:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <HAL_RCC_ClockConfig+0x1f8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	220f      	movs	r2, #15
 8004400:	401a      	ands	r2, r3
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_RCC_ClockConfig+0x204>)
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	58d3      	ldr	r3, [r2, r3]
 8004408:	221f      	movs	r2, #31
 800440a:	4013      	ands	r3, r2
 800440c:	000a      	movs	r2, r1
 800440e:	40da      	lsrs	r2, r3
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x208>)
 8004412:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_RCC_ClockConfig+0x20c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fe fee3 	bl	80031e4 <HAL_InitTick>
 800441e:	0003      	movs	r3, r0
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40022000 	.word	0x40022000
 800442c:	00001388 	.word	0x00001388
 8004430:	40021000 	.word	0x40021000
 8004434:	fffff0ff 	.word	0xfffff0ff
 8004438:	ffff8fff 	.word	0xffff8fff
 800443c:	0800b890 	.word	0x0800b890
 8004440:	2000000c 	.word	0x2000000c
 8004444:	20000010 	.word	0x20000010

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800444e:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2238      	movs	r2, #56	; 0x38
 8004454:	4013      	ands	r3, r2
 8004456:	d10f      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0adb      	lsrs	r3, r3, #11
 800445e:	2207      	movs	r2, #7
 8004460:	4013      	ands	r3, r2
 8004462:	2201      	movs	r2, #1
 8004464:	409a      	lsls	r2, r3
 8004466:	0013      	movs	r3, r2
 8004468:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	4835      	ldr	r0, [pc, #212]	; (8004544 <HAL_RCC_GetSysClockFreq+0xfc>)
 800446e:	f7fb fe65 	bl	800013c <__udivsi3>
 8004472:	0003      	movs	r3, r0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e05d      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004478:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2238      	movs	r2, #56	; 0x38
 800447e:	4013      	ands	r3, r2
 8004480:	2b08      	cmp	r3, #8
 8004482:	d102      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004484:	4b30      	ldr	r3, [pc, #192]	; (8004548 <HAL_RCC_GetSysClockFreq+0x100>)
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e054      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448a:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2238      	movs	r2, #56	; 0x38
 8004490:	4013      	ands	r3, r2
 8004492:	2b10      	cmp	r3, #16
 8004494:	d138      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004496:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2203      	movs	r2, #3
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044a0:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	2207      	movs	r2, #7
 80044a8:	4013      	ands	r3, r2
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4824      	ldr	r0, [pc, #144]	; (8004548 <HAL_RCC_GetSysClockFreq+0x100>)
 80044b8:	f7fb fe40 	bl	800013c <__udivsi3>
 80044bc:	0003      	movs	r3, r0
 80044be:	0019      	movs	r1, r3
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	227f      	movs	r2, #127	; 0x7f
 80044c8:	4013      	ands	r3, r2
 80044ca:	434b      	muls	r3, r1
 80044cc:	617b      	str	r3, [r7, #20]
        break;
 80044ce:	e00d      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	481c      	ldr	r0, [pc, #112]	; (8004544 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044d4:	f7fb fe32 	bl	800013c <__udivsi3>
 80044d8:	0003      	movs	r3, r0
 80044da:	0019      	movs	r1, r3
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	227f      	movs	r2, #127	; 0x7f
 80044e4:	4013      	ands	r3, r2
 80044e6:	434b      	muls	r3, r1
 80044e8:	617b      	str	r3, [r7, #20]
        break;
 80044ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0f5b      	lsrs	r3, r3, #29
 80044f2:	2207      	movs	r2, #7
 80044f4:	4013      	ands	r3, r2
 80044f6:	3301      	adds	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	f7fb fe1d 	bl	800013c <__udivsi3>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e015      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2238      	movs	r2, #56	; 0x38
 800450e:	4013      	ands	r3, r2
 8004510:	2b20      	cmp	r3, #32
 8004512:	d103      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2238      	movs	r2, #56	; 0x38
 8004522:	4013      	ands	r3, r2
 8004524:	2b18      	cmp	r3, #24
 8004526:	d103      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004528:	23fa      	movs	r3, #250	; 0xfa
 800452a:	01db      	lsls	r3, r3, #7
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e001      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004534:	693b      	ldr	r3, [r7, #16]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b006      	add	sp, #24
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	40021000 	.word	0x40021000
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004550:	4b02      	ldr	r3, [pc, #8]	; (800455c <HAL_RCC_GetHCLKFreq+0x10>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	2000000c 	.word	0x2000000c

08004560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004564:	f7ff fff2 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004568:	0004      	movs	r4, r0
 800456a:	f7ff fb3f 	bl	8003bec <LL_RCC_GetAPB1Prescaler>
 800456e:	0003      	movs	r3, r0
 8004570:	0b1a      	lsrs	r2, r3, #12
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004574:	0092      	lsls	r2, r2, #2
 8004576:	58d3      	ldr	r3, [r2, r3]
 8004578:	221f      	movs	r2, #31
 800457a:	4013      	ands	r3, r2
 800457c:	40dc      	lsrs	r4, r3
 800457e:	0023      	movs	r3, r4
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	bdb0      	pop	{r4, r5, r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	0800b8d0 	.word	0x0800b8d0

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004594:	2313      	movs	r3, #19
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800459c:	2312      	movs	r3, #18
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	029b      	lsls	r3, r3, #10
 80045ac:	4013      	ands	r3, r2
 80045ae:	d100      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80045b0:	e0a3      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2011      	movs	r0, #17
 80045b4:	183b      	adds	r3, r7, r0
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ba:	4bc3      	ldr	r3, [pc, #780]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	055b      	lsls	r3, r3, #21
 80045c2:	4013      	ands	r3, r2
 80045c4:	d110      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	4bc0      	ldr	r3, [pc, #768]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ca:	4bbf      	ldr	r3, [pc, #764]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	0549      	lsls	r1, r1, #21
 80045d0:	430a      	orrs	r2, r1
 80045d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80045d4:	4bbc      	ldr	r3, [pc, #752]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	055b      	lsls	r3, r3, #21
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e2:	183b      	adds	r3, r7, r0
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e8:	4bb8      	ldr	r3, [pc, #736]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4bb7      	ldr	r3, [pc, #732]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	0049      	lsls	r1, r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f6:	f7fe fe51 	bl	800329c <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fe:	e00b      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fe fe4c 	bl	800329c <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d904      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800460e:	2313      	movs	r3, #19
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2203      	movs	r2, #3
 8004614:	701a      	strb	r2, [r3, #0]
        break;
 8004616:	e005      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004618:	4bac      	ldr	r3, [pc, #688]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d0ed      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004624:	2313      	movs	r3, #19
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d154      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462e:	4ba6      	ldr	r3, [pc, #664]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4013      	ands	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d019      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d014      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464a:	4b9f      	ldr	r3, [pc, #636]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	4aa0      	ldr	r2, [pc, #640]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004650:	4013      	ands	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004654:	4b9c      	ldr	r3, [pc, #624]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004658:	4b9b      	ldr	r3, [pc, #620]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	0249      	lsls	r1, r1, #9
 800465e:	430a      	orrs	r2, r1
 8004660:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004662:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004666:	4b98      	ldr	r3, [pc, #608]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004668:	499a      	ldr	r1, [pc, #616]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800466a:	400a      	ands	r2, r1
 800466c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800466e:	4b96      	ldr	r3, [pc, #600]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	d016      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fe fe0e 	bl	800329c <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004684:	e00c      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fe fe09 	bl	800329c <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a91      	ldr	r2, [pc, #580]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d904      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004696:	2313      	movs	r3, #19
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2203      	movs	r2, #3
 800469c:	701a      	strb	r2, [r3, #0]
            break;
 800469e:	e004      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	2202      	movs	r2, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d0ed      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046aa:	2313      	movs	r3, #19
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b4:	4b84      	ldr	r3, [pc, #528]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	4a85      	ldr	r2, [pc, #532]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c2:	4b81      	ldr	r3, [pc, #516]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80046c8:	e00c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ca:	2312      	movs	r3, #18
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2213      	movs	r2, #19
 80046d0:	18ba      	adds	r2, r7, r2
 80046d2:	7812      	ldrb	r2, [r2, #0]
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e005      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	2312      	movs	r3, #18
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2213      	movs	r2, #19
 80046de:	18ba      	adds	r2, r7, r2
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e4:	2311      	movs	r3, #17
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b76      	ldr	r3, [pc, #472]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f2:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f4:	4979      	ldr	r1, [pc, #484]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80046f6:	400a      	ands	r2, r1
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004704:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	2203      	movs	r2, #3
 800470a:	4393      	bics	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4b6d      	ldr	r3, [pc, #436]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004714:	430a      	orrs	r2, r1
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2202      	movs	r2, #2
 800471e:	4013      	ands	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004722:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	220c      	movs	r2, #12
 8004728:	4393      	bics	r3, r2
 800472a:	0019      	movs	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004732:	430a      	orrs	r2, r1
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2210      	movs	r2, #16
 800473c:	4013      	ands	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	4a66      	ldr	r2, [pc, #408]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004750:	430a      	orrs	r2, r1
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4013      	ands	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	4a5f      	ldr	r2, [pc, #380]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004766:	4013      	ands	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004770:	430a      	orrs	r2, r1
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4013      	ands	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004780:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	4b4e      	ldr	r3, [pc, #312]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004790:	430a      	orrs	r2, r1
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2220      	movs	r2, #32
 800479a:	4013      	ands	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800479e:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	4a52      	ldr	r2, [pc, #328]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	4b46      	ldr	r3, [pc, #280]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047ae:	430a      	orrs	r2, r1
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	01db      	lsls	r3, r3, #7
 80047ba:	4013      	ands	r3, r2
 80047bc:	d015      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	0899      	lsrs	r1, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	05db      	lsls	r3, r3, #23
 80047d8:	429a      	cmp	r2, r3
 80047da:	d106      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	0249      	lsls	r1, r1, #9
 80047e6:	430a      	orrs	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	4013      	ands	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	4393      	bics	r3, r2
 80047fe:	0019      	movs	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004806:	430a      	orrs	r2, r1
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	039b      	lsls	r3, r3, #14
 8004812:	4013      	ands	r3, r2
 8004814:	d016      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	4a35      	ldr	r2, [pc, #212]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004826:	430a      	orrs	r2, r1
 8004828:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	03db      	lsls	r3, r3, #15
 8004832:	429a      	cmp	r2, r3
 8004834:	d106      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	0449      	lsls	r1, r1, #17
 8004840:	430a      	orrs	r2, r1
 8004842:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	03db      	lsls	r3, r3, #15
 800484c:	4013      	ands	r3, r2
 800484e:	d016      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485e:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004860:	430a      	orrs	r2, r1
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	045b      	lsls	r3, r3, #17
 800486c:	429a      	cmp	r2, r3
 800486e:	d106      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0449      	lsls	r1, r1, #17
 800487a:	430a      	orrs	r2, r1
 800487c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	4013      	ands	r3, r2
 8004888:	d016      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004890:	4013      	ands	r3, r2
 8004892:	0019      	movs	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800489a:	430a      	orrs	r2, r1
 800489c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d106      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	0249      	lsls	r1, r1, #9
 80048b4:	430a      	orrs	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048b8:	2312      	movs	r3, #18
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
}
 80048be:	0018      	movs	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b006      	add	sp, #24
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
 80048d0:	fffffcff 	.word	0xfffffcff
 80048d4:	fffeffff 	.word	0xfffeffff
 80048d8:	00001388 	.word	0x00001388
 80048dc:	efffffff 	.word	0xefffffff
 80048e0:	fffff3ff 	.word	0xfffff3ff
 80048e4:	fff3ffff 	.word	0xfff3ffff
 80048e8:	ffcfffff 	.word	0xffcfffff
 80048ec:	ffffcfff 	.word	0xffffcfff
 80048f0:	ffbfffff 	.word	0xffbfffff
 80048f4:	feffffff 	.word	0xfeffffff
 80048f8:	ffff3fff 	.word	0xffff3fff

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e04a      	b.n	80049a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223d      	movs	r2, #61	; 0x3d
 8004912:	5c9b      	ldrb	r3, [r3, r2]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	223c      	movs	r2, #60	; 0x3c
 800491e:	2100      	movs	r1, #0
 8004920:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fe f9d1 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223d      	movs	r2, #61	; 0x3d
 800492e:	2102      	movs	r1, #2
 8004930:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	0019      	movs	r1, r3
 800493c:	0010      	movs	r0, r2
 800493e:	f000 fa11 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2248      	movs	r2, #72	; 0x48
 8004946:	2101      	movs	r1, #1
 8004948:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	223e      	movs	r2, #62	; 0x3e
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	223f      	movs	r2, #63	; 0x3f
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	2101      	movs	r1, #1
 8004960:	5499      	strb	r1, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2241      	movs	r2, #65	; 0x41
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2242      	movs	r2, #66	; 0x42
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2243      	movs	r2, #67	; 0x43
 8004976:	2101      	movs	r1, #1
 8004978:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2244      	movs	r2, #68	; 0x44
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2245      	movs	r2, #69	; 0x45
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2246      	movs	r2, #70	; 0x46
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2247      	movs	r2, #71	; 0x47
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	223d      	movs	r2, #61	; 0x3d
 800499e:	2101      	movs	r1, #1
 80049a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	223d      	movs	r2, #61	; 0x3d
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e042      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	223d      	movs	r2, #61	; 0x3d
 80049c8:	2102      	movs	r1, #2
 80049ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2101      	movs	r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIM_Base_Start_IT+0xa8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0x5a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	05db      	lsls	r3, r3, #23
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d009      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0x5a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_TIM_Base_Start_IT+0xac>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0x5a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_TIM_Base_Start_IT+0xb0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d116      	bne.n	8004a34 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d016      	beq.n	8004a46 <HAL_TIM_Base_Start_IT+0x9a>
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d011      	beq.n	8004a46 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e000      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	00010007 	.word	0x00010007

08004a64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2101      	movs	r1, #1
 8004a78:	438a      	bics	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <HAL_TIM_Base_Stop_IT+0x54>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <HAL_TIM_Base_Stop_IT+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_TIM_Base_Stop_IT+0x58>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_Base_Stop_IT+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	223d      	movs	r2, #61	; 0x3d
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	00001111 	.word	0x00001111
 8004abc:	00000444 	.word	0x00000444

08004ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d124      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2202      	movs	r2, #2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d11d      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	4252      	negs	r2, r2
 8004aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2203      	movs	r2, #3
 8004afc:	4013      	ands	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f916 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e007      	b.n	8004b1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 f909 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f915 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2204      	movs	r2, #4
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d125      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2204      	movs	r2, #4
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d11e      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2205      	movs	r2, #5
 8004b42:	4252      	negs	r2, r2
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	23c0      	movs	r3, #192	; 0xc0
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4013      	ands	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 f8e9 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004b62:	e007      	b.n	8004b74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f8dc 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f8e8 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d124      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11d      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2209      	movs	r2, #9
 8004b9c:	4252      	negs	r2, r2
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2203      	movs	r2, #3
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f000 f8bd 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 f8b0 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f8bc 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d125      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2210      	movs	r2, #16
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d11e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2211      	movs	r2, #17
 8004bf4:	4252      	negs	r2, r2
 8004bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 f890 	bl	8004d34 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e007      	b.n	8004c26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f883 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 f88f 	bl	8004d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2201      	movs	r2, #1
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10f      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	4252      	negs	r2, r2
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fd ff8b 	bl	8002b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d10f      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d108      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2281      	movs	r2, #129	; 0x81
 8004c7c:	4252      	negs	r2, r2
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 f964 	bl	8004f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	401a      	ands	r2, r3
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d10e      	bne.n	8004cba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d107      	bne.n	8004cba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_TIM_IRQHandler+0x260>)
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 f953 	bl	8004f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2240      	movs	r2, #64	; 0x40
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d108      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2241      	movs	r2, #65	; 0x41
 8004cdc:	4252      	negs	r2, r2
 8004cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 f836 	bl	8004d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d10f      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d108      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2221      	movs	r2, #33	; 0x21
 8004d0a:	4252      	negs	r2, r2
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f915 	bl	8004f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	fffffeff 	.word	0xfffffeff

08004d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b002      	add	sp, #8
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b002      	add	sp, #8
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a34      	ldr	r2, [pc, #208]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d008      	beq.n	8004d8e <TIM_Base_SetConfig+0x2a>
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	05db      	lsls	r3, r3, #23
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x2a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <TIM_Base_SetConfig+0xe8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2270      	movs	r2, #112	; 0x70
 8004d92:	4393      	bics	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	05db      	lsls	r3, r3, #23
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d013      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <TIM_Base_SetConfig+0xe8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a24      	ldr	r2, [pc, #144]	; (8004e50 <TIM_Base_SetConfig+0xec>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <TIM_Base_SetConfig+0xf0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a22      	ldr	r2, [pc, #136]	; (8004e58 <TIM_Base_SetConfig+0xf4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_Base_SetConfig+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <TIM_Base_SetConfig+0xf8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d108      	bne.n	8004dec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <TIM_Base_SetConfig+0xfc>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	4393      	bics	r3, r2
 8004df2:	001a      	movs	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0xce>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <TIM_Base_SetConfig+0xf0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0xce>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0xce>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d103      	bne.n	8004e3a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	615a      	str	r2, [r3, #20]
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b004      	add	sp, #16
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40002000 	.word	0x40002000
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800
 8004e60:	fffffcff 	.word	0xfffffcff

08004e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223c      	movs	r2, #60	; 0x3c
 8004e72:	5c9b      	ldrb	r3, [r3, r2]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e055      	b.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223c      	movs	r2, #60	; 0x3c
 8004e80:	2101      	movs	r1, #1
 8004e82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	223d      	movs	r2, #61	; 0x3d
 8004e88:	2102      	movs	r1, #2
 8004e8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2270      	movs	r2, #112	; 0x70
 8004ebc:	4393      	bics	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00f      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	05db      	lsls	r3, r3, #23
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d009      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10c      	bne.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2280      	movs	r2, #128	; 0x80
 8004f00:	4393      	bics	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	223d      	movs	r2, #61	; 0x3d
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	223c      	movs	r2, #60	; 0x3c
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	0018      	movs	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b004      	add	sp, #16
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	ff0fffff 	.word	0xff0fffff
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e046      	b.n	8005010 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2288      	movs	r2, #136	; 0x88
 8004f86:	589b      	ldr	r3, [r3, r2]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2284      	movs	r2, #132	; 0x84
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7fd febe 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2288      	movs	r2, #136	; 0x88
 8004fa0:	2124      	movs	r1, #36	; 0x24
 8004fa2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2101      	movs	r1, #1
 8004fb0:	438a      	bics	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 f9ee 	bl	8005398 <UART_SetConfig>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e024      	b.n	8005010 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fc9f 	bl	8005914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	490d      	ldr	r1, [pc, #52]	; (8005018 <HAL_UART_Init+0xa8>)
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	212a      	movs	r1, #42	; 0x2a
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	0018      	movs	r0, r3
 800500a:	f000 fd37 	bl	8005a7c <UART_CheckIdleState>
 800500e:	0003      	movs	r3, r0
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}
 8005018:	ffffb7ff 	.word	0xffffb7ff

0800501c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e032      	b.n	8005094 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2288      	movs	r2, #136	; 0x88
 8005032:	2124      	movs	r1, #36	; 0x24
 8005034:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	438a      	bics	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f7fd ff3d 	bl	8002ee0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2290      	movs	r2, #144	; 0x90
 800506a:	2100      	movs	r1, #0
 800506c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2288      	movs	r2, #136	; 0x88
 8005072:	2100      	movs	r1, #0
 8005074:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	228c      	movs	r2, #140	; 0x8c
 800507a:	2100      	movs	r1, #0
 800507c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2284      	movs	r2, #132	; 0x84
 800508e:	2100      	movs	r1, #0
 8005090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b002      	add	sp, #8
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	1dbb      	adds	r3, r7, #6
 80050aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2288      	movs	r2, #136	; 0x88
 80050b0:	589b      	ldr	r3, [r3, r2]
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d000      	beq.n	80050b8 <HAL_UART_Transmit+0x1c>
 80050b6:	e088      	b.n	80051ca <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_Transmit+0x2a>
 80050be:	1dbb      	adds	r3, r7, #6
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e080      	b.n	80051cc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	015b      	lsls	r3, r3, #5
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d109      	bne.n	80050ea <HAL_UART_Transmit+0x4e>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d105      	bne.n	80050ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4013      	ands	r3, r2
 80050e4:	d001      	beq.n	80050ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e070      	b.n	80051cc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2290      	movs	r2, #144	; 0x90
 80050ee:	2100      	movs	r1, #0
 80050f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2288      	movs	r2, #136	; 0x88
 80050f6:	2121      	movs	r1, #33	; 0x21
 80050f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fa:	f7fe f8cf 	bl	800329c <HAL_GetTick>
 80050fe:	0003      	movs	r3, r0
 8005100:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1dba      	adds	r2, r7, #6
 8005106:	2154      	movs	r1, #84	; 0x54
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1dba      	adds	r2, r7, #6
 8005110:	2156      	movs	r1, #86	; 0x56
 8005112:	8812      	ldrh	r2, [r2, #0]
 8005114:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	015b      	lsls	r3, r3, #5
 800511e:	429a      	cmp	r2, r3
 8005120:	d108      	bne.n	8005134 <HAL_UART_Transmit+0x98>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513c:	e02c      	b.n	8005198 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	0013      	movs	r3, r2
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	f000 fce4 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d001      	beq.n	8005158 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e039      	b.n	80051cc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	001a      	movs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	05d2      	lsls	r2, r2, #23
 800516a:	0dd2      	lsrs	r2, r2, #23
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2256      	movs	r2, #86	; 0x56
 800518a:	5a9b      	ldrh	r3, [r3, r2]
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b299      	uxth	r1, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2256      	movs	r2, #86	; 0x56
 8005196:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2256      	movs	r2, #86	; 0x56
 800519c:	5a9b      	ldrh	r3, [r3, r2]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1cc      	bne.n	800513e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	0013      	movs	r3, r2
 80051ae:	2200      	movs	r2, #0
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	f000 fcb1 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 80051b6:	1e03      	subs	r3, r0, #0
 80051b8:	d001      	beq.n	80051be <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e006      	b.n	80051cc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2288      	movs	r2, #136	; 0x88
 80051c2:	2120      	movs	r1, #32
 80051c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e000      	b.n	80051cc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
  }
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b008      	add	sp, #32
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	1dbb      	adds	r3, r7, #6
 80051e2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	228c      	movs	r2, #140	; 0x8c
 80051e8:	589b      	ldr	r3, [r3, r2]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d000      	beq.n	80051f0 <HAL_UART_Receive+0x1c>
 80051ee:	e0cc      	b.n	800538a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_UART_Receive+0x2a>
 80051f6:	1dbb      	adds	r3, r7, #6
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0c4      	b.n	800538c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	015b      	lsls	r3, r3, #5
 800520a:	429a      	cmp	r2, r3
 800520c:	d109      	bne.n	8005222 <HAL_UART_Receive+0x4e>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2201      	movs	r2, #1
 800521a:	4013      	ands	r3, r2
 800521c:	d001      	beq.n	8005222 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0b4      	b.n	800538c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2290      	movs	r2, #144	; 0x90
 8005226:	2100      	movs	r1, #0
 8005228:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	228c      	movs	r2, #140	; 0x8c
 800522e:	2122      	movs	r1, #34	; 0x22
 8005230:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005238:	f7fe f830 	bl	800329c <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1dba      	adds	r2, r7, #6
 8005244:	215c      	movs	r1, #92	; 0x5c
 8005246:	8812      	ldrh	r2, [r2, #0]
 8005248:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1dba      	adds	r2, r7, #6
 800524e:	215e      	movs	r1, #94	; 0x5e
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	429a      	cmp	r2, r3
 800525e:	d10d      	bne.n	800527c <HAL_UART_Receive+0xa8>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_UART_Receive+0x9e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2260      	movs	r2, #96	; 0x60
 800526c:	4949      	ldr	r1, [pc, #292]	; (8005394 <HAL_UART_Receive+0x1c0>)
 800526e:	5299      	strh	r1, [r3, r2]
 8005270:	e02e      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2260      	movs	r2, #96	; 0x60
 8005276:	21ff      	movs	r1, #255	; 0xff
 8005278:	5299      	strh	r1, [r3, r2]
 800527a:	e029      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_UART_Receive+0xcc>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_UART_Receive+0xc2>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2260      	movs	r2, #96	; 0x60
 8005290:	21ff      	movs	r1, #255	; 0xff
 8005292:	5299      	strh	r1, [r3, r2]
 8005294:	e01c      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2260      	movs	r2, #96	; 0x60
 800529a:	217f      	movs	r1, #127	; 0x7f
 800529c:	5299      	strh	r1, [r3, r2]
 800529e:	e017      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	055b      	lsls	r3, r3, #21
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d10d      	bne.n	80052c8 <HAL_UART_Receive+0xf4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_UART_Receive+0xea>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2260      	movs	r2, #96	; 0x60
 80052b8:	217f      	movs	r1, #127	; 0x7f
 80052ba:	5299      	strh	r1, [r3, r2]
 80052bc:	e008      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2260      	movs	r2, #96	; 0x60
 80052c2:	213f      	movs	r1, #63	; 0x3f
 80052c4:	5299      	strh	r1, [r3, r2]
 80052c6:	e003      	b.n	80052d0 <HAL_UART_Receive+0xfc>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2260      	movs	r2, #96	; 0x60
 80052cc:	2100      	movs	r1, #0
 80052ce:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80052d0:	2312      	movs	r3, #18
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	2160      	movs	r1, #96	; 0x60
 80052d8:	5a52      	ldrh	r2, [r2, r1]
 80052da:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	015b      	lsls	r3, r3, #5
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d108      	bne.n	80052fa <HAL_UART_Receive+0x126>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e003      	b.n	8005302 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005302:	e036      	b.n	8005372 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	0013      	movs	r3, r2
 800530e:	2200      	movs	r2, #0
 8005310:	2120      	movs	r1, #32
 8005312:	f000 fc01 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005316:	1e03      	subs	r3, r0, #0
 8005318:	d001      	beq.n	800531e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e036      	b.n	800538c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10e      	bne.n	8005342 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b29b      	uxth	r3, r3
 800532c:	2212      	movs	r2, #18
 800532e:	18ba      	adds	r2, r7, r2
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	4013      	ands	r3, r2
 8005334:	b29a      	uxth	r2, r3
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	3302      	adds	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e00e      	b.n	8005360 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2212      	movs	r2, #18
 800534c:	18ba      	adds	r2, r7, r2
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	4013      	ands	r3, r2
 8005354:	b2da      	uxtb	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	225e      	movs	r2, #94	; 0x5e
 8005364:	5a9b      	ldrh	r3, [r3, r2]
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b299      	uxth	r1, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	225e      	movs	r2, #94	; 0x5e
 8005370:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	225e      	movs	r2, #94	; 0x5e
 8005376:	5a9b      	ldrh	r3, [r3, r2]
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1c2      	bne.n	8005304 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	228c      	movs	r2, #140	; 0x8c
 8005382:	2120      	movs	r1, #32
 8005384:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b008      	add	sp, #32
 8005392:	bd80      	pop	{r7, pc}
 8005394:	000001ff 	.word	0x000001ff

08005398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b090      	sub	sp, #64	; 0x40
 800539c:	af00      	add	r7, sp, #0
 800539e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a0:	231a      	movs	r3, #26
 80053a2:	2220      	movs	r2, #32
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4aaf      	ldr	r2, [pc, #700]	; (8005688 <UART_SetConfig+0x2f0>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	430b      	orrs	r3, r1
 80053d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4aaa      	ldr	r2, [pc, #680]	; (800568c <UART_SetConfig+0x2f4>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	0018      	movs	r0, r3
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	68d9      	ldr	r1, [r3, #12]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	0003      	movs	r3, r0
 80053f0:	430b      	orrs	r3, r1
 80053f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4aa4      	ldr	r2, [pc, #656]	; (8005690 <UART_SetConfig+0x2f8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800540a:	4313      	orrs	r3, r2
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a9f      	ldr	r2, [pc, #636]	; (8005694 <UART_SetConfig+0x2fc>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005420:	430b      	orrs	r3, r1
 8005422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	220f      	movs	r2, #15
 800542c:	4393      	bics	r3, r2
 800542e:	0018      	movs	r0, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	0003      	movs	r3, r0
 800543a:	430b      	orrs	r3, r1
 800543c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a95      	ldr	r2, [pc, #596]	; (8005698 <UART_SetConfig+0x300>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d131      	bne.n	80054ac <UART_SetConfig+0x114>
 8005448:	4b94      	ldr	r3, [pc, #592]	; (800569c <UART_SetConfig+0x304>)
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	2203      	movs	r2, #3
 800544e:	4013      	ands	r3, r2
 8005450:	2b03      	cmp	r3, #3
 8005452:	d01d      	beq.n	8005490 <UART_SetConfig+0xf8>
 8005454:	d823      	bhi.n	800549e <UART_SetConfig+0x106>
 8005456:	2b02      	cmp	r3, #2
 8005458:	d00c      	beq.n	8005474 <UART_SetConfig+0xdc>
 800545a:	d820      	bhi.n	800549e <UART_SetConfig+0x106>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <UART_SetConfig+0xce>
 8005460:	2b01      	cmp	r3, #1
 8005462:	d00e      	beq.n	8005482 <UART_SetConfig+0xea>
 8005464:	e01b      	b.n	800549e <UART_SetConfig+0x106>
 8005466:	231b      	movs	r3, #27
 8005468:	2220      	movs	r2, #32
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e0b4      	b.n	80055de <UART_SetConfig+0x246>
 8005474:	231b      	movs	r3, #27
 8005476:	2220      	movs	r2, #32
 8005478:	189b      	adds	r3, r3, r2
 800547a:	19db      	adds	r3, r3, r7
 800547c:	2202      	movs	r2, #2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e0ad      	b.n	80055de <UART_SetConfig+0x246>
 8005482:	231b      	movs	r3, #27
 8005484:	2220      	movs	r2, #32
 8005486:	189b      	adds	r3, r3, r2
 8005488:	19db      	adds	r3, r3, r7
 800548a:	2204      	movs	r2, #4
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e0a6      	b.n	80055de <UART_SetConfig+0x246>
 8005490:	231b      	movs	r3, #27
 8005492:	2220      	movs	r2, #32
 8005494:	189b      	adds	r3, r3, r2
 8005496:	19db      	adds	r3, r3, r7
 8005498:	2208      	movs	r2, #8
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e09f      	b.n	80055de <UART_SetConfig+0x246>
 800549e:	231b      	movs	r3, #27
 80054a0:	2220      	movs	r2, #32
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	19db      	adds	r3, r3, r7
 80054a6:	2210      	movs	r2, #16
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e098      	b.n	80055de <UART_SetConfig+0x246>
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7b      	ldr	r2, [pc, #492]	; (80056a0 <UART_SetConfig+0x308>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d131      	bne.n	800551a <UART_SetConfig+0x182>
 80054b6:	4b79      	ldr	r3, [pc, #484]	; (800569c <UART_SetConfig+0x304>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	220c      	movs	r2, #12
 80054bc:	4013      	ands	r3, r2
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d01d      	beq.n	80054fe <UART_SetConfig+0x166>
 80054c2:	d823      	bhi.n	800550c <UART_SetConfig+0x174>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d00c      	beq.n	80054e2 <UART_SetConfig+0x14a>
 80054c8:	d820      	bhi.n	800550c <UART_SetConfig+0x174>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <UART_SetConfig+0x13c>
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d00e      	beq.n	80054f0 <UART_SetConfig+0x158>
 80054d2:	e01b      	b.n	800550c <UART_SetConfig+0x174>
 80054d4:	231b      	movs	r3, #27
 80054d6:	2220      	movs	r2, #32
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	19db      	adds	r3, r3, r7
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e07d      	b.n	80055de <UART_SetConfig+0x246>
 80054e2:	231b      	movs	r3, #27
 80054e4:	2220      	movs	r2, #32
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	19db      	adds	r3, r3, r7
 80054ea:	2202      	movs	r2, #2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e076      	b.n	80055de <UART_SetConfig+0x246>
 80054f0:	231b      	movs	r3, #27
 80054f2:	2220      	movs	r2, #32
 80054f4:	189b      	adds	r3, r3, r2
 80054f6:	19db      	adds	r3, r3, r7
 80054f8:	2204      	movs	r2, #4
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e06f      	b.n	80055de <UART_SetConfig+0x246>
 80054fe:	231b      	movs	r3, #27
 8005500:	2220      	movs	r2, #32
 8005502:	189b      	adds	r3, r3, r2
 8005504:	19db      	adds	r3, r3, r7
 8005506:	2208      	movs	r2, #8
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e068      	b.n	80055de <UART_SetConfig+0x246>
 800550c:	231b      	movs	r3, #27
 800550e:	2220      	movs	r2, #32
 8005510:	189b      	adds	r3, r3, r2
 8005512:	19db      	adds	r3, r3, r7
 8005514:	2210      	movs	r2, #16
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e061      	b.n	80055de <UART_SetConfig+0x246>
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a61      	ldr	r2, [pc, #388]	; (80056a4 <UART_SetConfig+0x30c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d106      	bne.n	8005532 <UART_SetConfig+0x19a>
 8005524:	231b      	movs	r3, #27
 8005526:	2220      	movs	r2, #32
 8005528:	189b      	adds	r3, r3, r2
 800552a:	19db      	adds	r3, r3, r7
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e055      	b.n	80055de <UART_SetConfig+0x246>
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5c      	ldr	r2, [pc, #368]	; (80056a8 <UART_SetConfig+0x310>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d106      	bne.n	800554a <UART_SetConfig+0x1b2>
 800553c:	231b      	movs	r3, #27
 800553e:	2220      	movs	r2, #32
 8005540:	189b      	adds	r3, r3, r2
 8005542:	19db      	adds	r3, r3, r7
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e049      	b.n	80055de <UART_SetConfig+0x246>
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a50      	ldr	r2, [pc, #320]	; (8005690 <UART_SetConfig+0x2f8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d13e      	bne.n	80055d2 <UART_SetConfig+0x23a>
 8005554:	4b51      	ldr	r3, [pc, #324]	; (800569c <UART_SetConfig+0x304>)
 8005556:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005558:	23c0      	movs	r3, #192	; 0xc0
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	4013      	ands	r3, r2
 800555e:	22c0      	movs	r2, #192	; 0xc0
 8005560:	0112      	lsls	r2, r2, #4
 8005562:	4293      	cmp	r3, r2
 8005564:	d027      	beq.n	80055b6 <UART_SetConfig+0x21e>
 8005566:	22c0      	movs	r2, #192	; 0xc0
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	4293      	cmp	r3, r2
 800556c:	d82a      	bhi.n	80055c4 <UART_SetConfig+0x22c>
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	0112      	lsls	r2, r2, #4
 8005572:	4293      	cmp	r3, r2
 8005574:	d011      	beq.n	800559a <UART_SetConfig+0x202>
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	0112      	lsls	r2, r2, #4
 800557a:	4293      	cmp	r3, r2
 800557c:	d822      	bhi.n	80055c4 <UART_SetConfig+0x22c>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d004      	beq.n	800558c <UART_SetConfig+0x1f4>
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	00d2      	lsls	r2, r2, #3
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <UART_SetConfig+0x210>
 800558a:	e01b      	b.n	80055c4 <UART_SetConfig+0x22c>
 800558c:	231b      	movs	r3, #27
 800558e:	2220      	movs	r2, #32
 8005590:	189b      	adds	r3, r3, r2
 8005592:	19db      	adds	r3, r3, r7
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e021      	b.n	80055de <UART_SetConfig+0x246>
 800559a:	231b      	movs	r3, #27
 800559c:	2220      	movs	r2, #32
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	19db      	adds	r3, r3, r7
 80055a2:	2202      	movs	r2, #2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e01a      	b.n	80055de <UART_SetConfig+0x246>
 80055a8:	231b      	movs	r3, #27
 80055aa:	2220      	movs	r2, #32
 80055ac:	189b      	adds	r3, r3, r2
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	2204      	movs	r2, #4
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e013      	b.n	80055de <UART_SetConfig+0x246>
 80055b6:	231b      	movs	r3, #27
 80055b8:	2220      	movs	r2, #32
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	19db      	adds	r3, r3, r7
 80055be:	2208      	movs	r2, #8
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e00c      	b.n	80055de <UART_SetConfig+0x246>
 80055c4:	231b      	movs	r3, #27
 80055c6:	2220      	movs	r2, #32
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	19db      	adds	r3, r3, r7
 80055cc:	2210      	movs	r2, #16
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e005      	b.n	80055de <UART_SetConfig+0x246>
 80055d2:	231b      	movs	r3, #27
 80055d4:	2220      	movs	r2, #32
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	19db      	adds	r3, r3, r7
 80055da:	2210      	movs	r2, #16
 80055dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <UART_SetConfig+0x2f8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d000      	beq.n	80055ea <UART_SetConfig+0x252>
 80055e8:	e0a9      	b.n	800573e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ea:	231b      	movs	r3, #27
 80055ec:	2220      	movs	r2, #32
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	19db      	adds	r3, r3, r7
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d015      	beq.n	8005624 <UART_SetConfig+0x28c>
 80055f8:	dc18      	bgt.n	800562c <UART_SetConfig+0x294>
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d00d      	beq.n	800561a <UART_SetConfig+0x282>
 80055fe:	dc15      	bgt.n	800562c <UART_SetConfig+0x294>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <UART_SetConfig+0x272>
 8005604:	2b02      	cmp	r3, #2
 8005606:	d005      	beq.n	8005614 <UART_SetConfig+0x27c>
 8005608:	e010      	b.n	800562c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7fe ffa9 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 800560e:	0003      	movs	r3, r0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005612:	e014      	b.n	800563e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005614:	4b25      	ldr	r3, [pc, #148]	; (80056ac <UART_SetConfig+0x314>)
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005618:	e011      	b.n	800563e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561a:	f7fe ff15 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 800561e:	0003      	movs	r3, r0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005622:	e00c      	b.n	800563e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800562a:	e008      	b.n	800563e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005630:	231a      	movs	r3, #26
 8005632:	2220      	movs	r2, #32
 8005634:	189b      	adds	r3, r3, r2
 8005636:	19db      	adds	r3, r3, r7
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
        break;
 800563c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d100      	bne.n	8005646 <UART_SetConfig+0x2ae>
 8005644:	e14b      	b.n	80058de <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <UART_SetConfig+0x318>)
 800564c:	0052      	lsls	r2, r2, #1
 800564e:	5ad3      	ldrh	r3, [r2, r3]
 8005650:	0019      	movs	r1, r3
 8005652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005654:	f7fa fd72 	bl	800013c <__udivsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	0013      	movs	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	189b      	adds	r3, r3, r2
 8005666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005668:	429a      	cmp	r2, r3
 800566a:	d305      	bcc.n	8005678 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005674:	429a      	cmp	r2, r3
 8005676:	d91d      	bls.n	80056b4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005678:	231a      	movs	r3, #26
 800567a:	2220      	movs	r2, #32
 800567c:	189b      	adds	r3, r3, r2
 800567e:	19db      	adds	r3, r3, r7
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e12b      	b.n	80058de <UART_SetConfig+0x546>
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	cfff69f3 	.word	0xcfff69f3
 800568c:	ffffcfff 	.word	0xffffcfff
 8005690:	40008000 	.word	0x40008000
 8005694:	11fff4ff 	.word	0x11fff4ff
 8005698:	40013800 	.word	0x40013800
 800569c:	40021000 	.word	0x40021000
 80056a0:	40004400 	.word	0x40004400
 80056a4:	40004800 	.word	0x40004800
 80056a8:	40004c00 	.word	0x40004c00
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	0800b8f0 	.word	0x0800b8f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c0:	4b92      	ldr	r3, [pc, #584]	; (800590c <UART_SetConfig+0x574>)
 80056c2:	0052      	lsls	r2, r2, #1
 80056c4:	5ad3      	ldrh	r3, [r2, r3]
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	69b8      	ldr	r0, [r7, #24]
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	f7fa fee6 	bl	80004a4 <__aeabi_uldivmod>
 80056d8:	0002      	movs	r2, r0
 80056da:	000b      	movs	r3, r1
 80056dc:	0e11      	lsrs	r1, r2, #24
 80056de:	021d      	lsls	r5, r3, #8
 80056e0:	430d      	orrs	r5, r1
 80056e2:	0214      	lsls	r4, r2, #8
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	1900      	adds	r0, r0, r4
 80056f6:	4169      	adcs	r1, r5
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f7fa fecd 	bl	80004a4 <__aeabi_uldivmod>
 800570a:	0002      	movs	r2, r0
 800570c:	000b      	movs	r3, r1
 800570e:	0013      	movs	r3, r2
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005714:	23c0      	movs	r3, #192	; 0xc0
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	429a      	cmp	r2, r3
 800571a:	d309      	bcc.n	8005730 <UART_SetConfig+0x398>
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	035b      	lsls	r3, r3, #13
 8005722:	429a      	cmp	r2, r3
 8005724:	d204      	bcs.n	8005730 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e0d6      	b.n	80058de <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005730:	231a      	movs	r3, #26
 8005732:	2220      	movs	r2, #32
 8005734:	189b      	adds	r3, r3, r2
 8005736:	19db      	adds	r3, r3, r7
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e0cf      	b.n	80058de <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	429a      	cmp	r2, r3
 8005748:	d000      	beq.n	800574c <UART_SetConfig+0x3b4>
 800574a:	e070      	b.n	800582e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800574c:	231b      	movs	r3, #27
 800574e:	2220      	movs	r2, #32
 8005750:	189b      	adds	r3, r3, r2
 8005752:	19db      	adds	r3, r3, r7
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d015      	beq.n	8005786 <UART_SetConfig+0x3ee>
 800575a:	dc18      	bgt.n	800578e <UART_SetConfig+0x3f6>
 800575c:	2b04      	cmp	r3, #4
 800575e:	d00d      	beq.n	800577c <UART_SetConfig+0x3e4>
 8005760:	dc15      	bgt.n	800578e <UART_SetConfig+0x3f6>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <UART_SetConfig+0x3d4>
 8005766:	2b02      	cmp	r3, #2
 8005768:	d005      	beq.n	8005776 <UART_SetConfig+0x3de>
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fe fef8 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8005770:	0003      	movs	r3, r0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005774:	e014      	b.n	80057a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <UART_SetConfig+0x578>)
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800577a:	e011      	b.n	80057a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577c:	f7fe fe64 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005780:	0003      	movs	r3, r0
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005784:	e00c      	b.n	80057a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800578c:	e008      	b.n	80057a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005792:	231a      	movs	r3, #26
 8005794:	2220      	movs	r2, #32
 8005796:	189b      	adds	r3, r3, r2
 8005798:	19db      	adds	r3, r3, r7
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
        break;
 800579e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d100      	bne.n	80057a8 <UART_SetConfig+0x410>
 80057a6:	e09a      	b.n	80058de <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ac:	4b57      	ldr	r3, [pc, #348]	; (800590c <UART_SetConfig+0x574>)
 80057ae:	0052      	lsls	r2, r2, #1
 80057b0:	5ad3      	ldrh	r3, [r2, r3]
 80057b2:	0019      	movs	r1, r3
 80057b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057b6:	f7fa fcc1 	bl	800013c <__udivsi3>
 80057ba:	0003      	movs	r3, r0
 80057bc:	005a      	lsls	r2, r3, #1
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	18d2      	adds	r2, r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	0019      	movs	r1, r3
 80057cc:	0010      	movs	r0, r2
 80057ce:	f7fa fcb5 	bl	800013c <__udivsi3>
 80057d2:	0003      	movs	r3, r0
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d921      	bls.n	8005820 <UART_SetConfig+0x488>
 80057dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d21c      	bcs.n	8005820 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	200e      	movs	r0, #14
 80057ec:	2420      	movs	r4, #32
 80057ee:	1903      	adds	r3, r0, r4
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	210f      	movs	r1, #15
 80057f4:	438a      	bics	r2, r1
 80057f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2207      	movs	r2, #7
 8005800:	4013      	ands	r3, r2
 8005802:	b299      	uxth	r1, r3
 8005804:	1903      	adds	r3, r0, r4
 8005806:	19db      	adds	r3, r3, r7
 8005808:	1902      	adds	r2, r0, r4
 800580a:	19d2      	adds	r2, r2, r7
 800580c:	8812      	ldrh	r2, [r2, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1902      	adds	r2, r0, r4
 8005818:	19d2      	adds	r2, r2, r7
 800581a:	8812      	ldrh	r2, [r2, #0]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e05e      	b.n	80058de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	231a      	movs	r3, #26
 8005822:	2220      	movs	r2, #32
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e057      	b.n	80058de <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800582e:	231b      	movs	r3, #27
 8005830:	2220      	movs	r2, #32
 8005832:	189b      	adds	r3, r3, r2
 8005834:	19db      	adds	r3, r3, r7
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d015      	beq.n	8005868 <UART_SetConfig+0x4d0>
 800583c:	dc18      	bgt.n	8005870 <UART_SetConfig+0x4d8>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d00d      	beq.n	800585e <UART_SetConfig+0x4c6>
 8005842:	dc15      	bgt.n	8005870 <UART_SetConfig+0x4d8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <UART_SetConfig+0x4b6>
 8005848:	2b02      	cmp	r3, #2
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0x4c0>
 800584c:	e010      	b.n	8005870 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584e:	f7fe fe87 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8005852:	0003      	movs	r3, r0
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005856:	e014      	b.n	8005882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <UART_SetConfig+0x578>)
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800585c:	e011      	b.n	8005882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7fe fdf3 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8005862:	0003      	movs	r3, r0
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005866:	e00c      	b.n	8005882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586e:	e008      	b.n	8005882 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005874:	231a      	movs	r3, #26
 8005876:	2220      	movs	r2, #32
 8005878:	189b      	adds	r3, r3, r2
 800587a:	19db      	adds	r3, r3, r7
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
        break;
 8005880:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02a      	beq.n	80058de <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <UART_SetConfig+0x574>)
 800588e:	0052      	lsls	r2, r2, #1
 8005890:	5ad3      	ldrh	r3, [r2, r3]
 8005892:	0019      	movs	r1, r3
 8005894:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005896:	f7fa fc51 	bl	800013c <__udivsi3>
 800589a:	0003      	movs	r3, r0
 800589c:	001a      	movs	r2, r3
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	18d2      	adds	r2, r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	0019      	movs	r1, r3
 80058ac:	0010      	movs	r0, r2
 80058ae:	f7fa fc45 	bl	800013c <__udivsi3>
 80058b2:	0003      	movs	r3, r0
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	2b0f      	cmp	r3, #15
 80058ba:	d90a      	bls.n	80058d2 <UART_SetConfig+0x53a>
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	025b      	lsls	r3, r3, #9
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d205      	bcs.n	80058d2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e005      	b.n	80058de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80058d2:	231a      	movs	r3, #26
 80058d4:	2220      	movs	r2, #32
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	226a      	movs	r2, #106	; 0x6a
 80058e2:	2101      	movs	r1, #1
 80058e4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	2268      	movs	r2, #104	; 0x68
 80058ea:	2101      	movs	r1, #1
 80058ec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	2200      	movs	r2, #0
 80058f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	2200      	movs	r2, #0
 80058f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80058fa:	231a      	movs	r3, #26
 80058fc:	2220      	movs	r2, #32
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	19db      	adds	r3, r3, r7
 8005902:	781b      	ldrb	r3, [r3, #0]
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b010      	add	sp, #64	; 0x40
 800590a:	bdb0      	pop	{r4, r5, r7, pc}
 800590c:	0800b8f0 	.word	0x0800b8f0
 8005910:	00f42400 	.word	0x00f42400

08005914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	d00b      	beq.n	800593e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a4a      	ldr	r2, [pc, #296]	; (8005a58 <UART_AdvFeatureConfig+0x144>)
 800592e:	4013      	ands	r3, r2
 8005930:	0019      	movs	r1, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2202      	movs	r2, #2
 8005944:	4013      	ands	r3, r2
 8005946:	d00b      	beq.n	8005960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a43      	ldr	r2, [pc, #268]	; (8005a5c <UART_AdvFeatureConfig+0x148>)
 8005950:	4013      	ands	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	2204      	movs	r2, #4
 8005966:	4013      	ands	r3, r2
 8005968:	d00b      	beq.n	8005982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <UART_AdvFeatureConfig+0x14c>)
 8005972:	4013      	ands	r3, r2
 8005974:	0019      	movs	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	2208      	movs	r2, #8
 8005988:	4013      	ands	r3, r2
 800598a:	d00b      	beq.n	80059a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a34      	ldr	r2, [pc, #208]	; (8005a64 <UART_AdvFeatureConfig+0x150>)
 8005994:	4013      	ands	r3, r2
 8005996:	0019      	movs	r1, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	2210      	movs	r2, #16
 80059aa:	4013      	ands	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <UART_AdvFeatureConfig+0x154>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	2220      	movs	r2, #32
 80059cc:	4013      	ands	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <UART_AdvFeatureConfig+0x158>)
 80059d8:	4013      	ands	r3, r2
 80059da:	0019      	movs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	2240      	movs	r2, #64	; 0x40
 80059ee:	4013      	ands	r3, r2
 80059f0:	d01d      	beq.n	8005a2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <UART_AdvFeatureConfig+0x15c>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	0019      	movs	r1, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	035b      	lsls	r3, r3, #13
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10b      	bne.n	8005a2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <UART_AdvFeatureConfig+0x160>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	4013      	ands	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <UART_AdvFeatureConfig+0x164>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b002      	add	sp, #8
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	fffdffff 	.word	0xfffdffff
 8005a5c:	fffeffff 	.word	0xfffeffff
 8005a60:	fffbffff 	.word	0xfffbffff
 8005a64:	ffff7fff 	.word	0xffff7fff
 8005a68:	ffffefff 	.word	0xffffefff
 8005a6c:	ffffdfff 	.word	0xffffdfff
 8005a70:	ffefffff 	.word	0xffefffff
 8005a74:	ff9fffff 	.word	0xff9fffff
 8005a78:	fff7ffff 	.word	0xfff7ffff

08005a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2290      	movs	r2, #144	; 0x90
 8005a88:	2100      	movs	r1, #0
 8005a8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a8c:	f7fd fc06 	bl	800329c <HAL_GetTick>
 8005a90:	0003      	movs	r3, r0
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d10c      	bne.n	8005abc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	0391      	lsls	r1, r2, #14
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <UART_CheckIdleState+0x98>)
 8005aac:	9200      	str	r2, [sp, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f000 f832 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005ab4:	1e03      	subs	r3, r0, #0
 8005ab6:	d001      	beq.n	8005abc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e026      	b.n	8005b0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d10c      	bne.n	8005ae4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	03d1      	lsls	r1, r2, #15
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <UART_CheckIdleState+0x98>)
 8005ad4:	9200      	str	r2, [sp, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f000 f81e 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005adc:	1e03      	subs	r3, r0, #0
 8005ade:	d001      	beq.n	8005ae4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e012      	b.n	8005b0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2288      	movs	r2, #136	; 0x88
 8005ae8:	2120      	movs	r1, #32
 8005aea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	228c      	movs	r2, #140	; 0x8c
 8005af0:	2120      	movs	r1, #32
 8005af2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2284      	movs	r2, #132	; 0x84
 8005b04:	2100      	movs	r1, #0
 8005b06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	01ffffff 	.word	0x01ffffff

08005b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b094      	sub	sp, #80	; 0x50
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	1dfb      	adds	r3, r7, #7
 8005b26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	e0a7      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	d100      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b30:	e0a3      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	f7fd fbb3 	bl	800329c <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d13f      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b48:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
 8005b52:	2301      	movs	r3, #1
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	494e      	ldr	r1, [pc, #312]	; (8005ca4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	643b      	str	r3, [r7, #64]	; 0x40
 8005b84:	2301      	movs	r3, #1
 8005b86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2288      	movs	r2, #136	; 0x88
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	228c      	movs	r2, #140	; 0x8c
 8005bb8:	2120      	movs	r1, #32
 8005bba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2284      	movs	r2, #132	; 0x84
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e069      	b.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d052      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	401a      	ands	r2, r3
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d148      	bne.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	0112      	lsls	r2, r2, #4
 8005bf0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf6:	613b      	str	r3, [r7, #16]
  return(result);
 8005bf8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f383 8810 	msr	PRIMASK, r3
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4924      	ldr	r1, [pc, #144]	; (8005ca4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c14:	400a      	ands	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c24:	f3ef 8310 	mrs	r3, PRIMASK
 8005c28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c2e:	2301      	movs	r3, #1
 8005c30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f383 8810 	msr	PRIMASK, r3
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	438a      	bics	r2, r1
 8005c48:	609a      	str	r2, [r3, #8]
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f383 8810 	msr	PRIMASK, r3
}
 8005c54:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2288      	movs	r2, #136	; 0x88
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	228c      	movs	r2, #140	; 0x8c
 8005c62:	2120      	movs	r1, #32
 8005c64:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2290      	movs	r2, #144	; 0x90
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2284      	movs	r2, #132	; 0x84
 8005c72:	2100      	movs	r1, #0
 8005c74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e010      	b.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	425a      	negs	r2, r3
 8005c8a:	4153      	adcs	r3, r2
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	001a      	movs	r2, r3
 8005c90:	1dfb      	adds	r3, r7, #7
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d100      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x182>
 8005c98:	e747      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b014      	add	sp, #80	; 0x50
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	fffffe5f 	.word	0xfffffe5f

08005ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2284      	movs	r2, #132	; 0x84
 8005cb4:	5c9b      	ldrb	r3, [r3, r2]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e027      	b.n	8005d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2284      	movs	r2, #132	; 0x84
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2288      	movs	r2, #136	; 0x88
 8005cca:	2124      	movs	r1, #36	; 0x24
 8005ccc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2288      	movs	r2, #136	; 0x88
 8005d00:	2120      	movs	r1, #32
 8005d02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2284      	movs	r2, #132	; 0x84
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b004      	add	sp, #16
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	dfffffff 	.word	0xdfffffff

08005d1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2284      	movs	r2, #132	; 0x84
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e02e      	b.n	8005d92 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2284      	movs	r2, #132	; 0x84
 8005d38:	2101      	movs	r1, #1
 8005d3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2288      	movs	r2, #136	; 0x88
 8005d40:	2124      	movs	r1, #36	; 0x24
 8005d42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2101      	movs	r1, #1
 8005d58:	438a      	bics	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	08d9      	lsrs	r1, r3, #3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 f854 	bl	8005e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2288      	movs	r2, #136	; 0x88
 8005d84:	2120      	movs	r1, #32
 8005d86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2284      	movs	r2, #132	; 0x84
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	0018      	movs	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b004      	add	sp, #16
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2284      	movs	r2, #132	; 0x84
 8005daa:	5c9b      	ldrb	r3, [r3, r2]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e02f      	b.n	8005e14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2284      	movs	r2, #132	; 0x84
 8005db8:	2101      	movs	r1, #1
 8005dba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2288      	movs	r2, #136	; 0x88
 8005dc0:	2124      	movs	r1, #36	; 0x24
 8005dc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	438a      	bics	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 f813 	bl	8005e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2288      	movs	r2, #136	; 0x88
 8005e06:	2120      	movs	r1, #32
 8005e08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2284      	movs	r2, #132	; 0x84
 8005e0e:	2100      	movs	r1, #0
 8005e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b004      	add	sp, #16
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	f1ffffff 	.word	0xf1ffffff

08005e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d108      	bne.n	8005e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	226a      	movs	r2, #106	; 0x6a
 8005e34:	2101      	movs	r1, #1
 8005e36:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2268      	movs	r2, #104	; 0x68
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e40:	e043      	b.n	8005eca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e42:	260f      	movs	r6, #15
 8005e44:	19bb      	adds	r3, r7, r6
 8005e46:	2208      	movs	r2, #8
 8005e48:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e4a:	200e      	movs	r0, #14
 8005e4c:	183b      	adds	r3, r7, r0
 8005e4e:	2208      	movs	r2, #8
 8005e50:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	0e5b      	lsrs	r3, r3, #25
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	240d      	movs	r4, #13
 8005e5e:	193b      	adds	r3, r7, r4
 8005e60:	2107      	movs	r1, #7
 8005e62:	400a      	ands	r2, r1
 8005e64:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	0f5b      	lsrs	r3, r3, #29
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	250c      	movs	r5, #12
 8005e72:	197b      	adds	r3, r7, r5
 8005e74:	2107      	movs	r1, #7
 8005e76:	400a      	ands	r2, r1
 8005e78:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	197a      	adds	r2, r7, r5
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	4914      	ldr	r1, [pc, #80]	; (8005ed4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e84:	5c8a      	ldrb	r2, [r1, r2]
 8005e86:	435a      	muls	r2, r3
 8005e88:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e8a:	197b      	adds	r3, r7, r5
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005e90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e92:	0019      	movs	r1, r3
 8005e94:	f7fa f9dc 	bl	8000250 <__divsi3>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	b299      	uxth	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	226a      	movs	r2, #106	; 0x6a
 8005ea0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ea2:	19bb      	adds	r3, r7, r6
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	193a      	adds	r2, r7, r4
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	490a      	ldr	r1, [pc, #40]	; (8005ed4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005eac:	5c8a      	ldrb	r2, [r1, r2]
 8005eae:	435a      	muls	r2, r3
 8005eb0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eb2:	193b      	adds	r3, r7, r4
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005eb8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eba:	0019      	movs	r1, r3
 8005ebc:	f7fa f9c8 	bl	8000250 <__divsi3>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	b299      	uxth	r1, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2268      	movs	r2, #104	; 0x68
 8005ec8:	5299      	strh	r1, [r3, r2]
}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b005      	add	sp, #20
 8005ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	0800b908 	.word	0x0800b908
 8005ed8:	0800b910 	.word	0x0800b910

08005edc <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f001 f99d 	bl	8007228 <strtod>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	000b      	movs	r3, r1
 8005ef2:	60ba      	str	r2, [r7, #8]
 8005ef4:	60fb      	str	r3, [r7, #12]
    return d ;
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	0010      	movs	r0, r2
 8005efc:	0019      	movs	r1, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b004      	add	sp, #16
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	0011      	movs	r1, r2
 8005f10:	1cfb      	adds	r3, r7, #3
 8005f12:	1c02      	adds	r2, r0, #0
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	1cbb      	adds	r3, r7, #2
 8005f18:	1c0a      	adds	r2, r1, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8005f1c:	230f      	movs	r3, #15
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8005f24:	230e      	movs	r3, #14
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8005f2c:	e01c      	b.n	8005f68 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8005f2e:	230f      	movs	r3, #15
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	18d3      	adds	r3, r2, r3
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	1cfa      	adds	r2, r7, #3
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d105      	bne.n	8005f4e <my_find_char_position+0x4a>
			p++ ;
 8005f42:	210e      	movs	r1, #14
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	781a      	ldrb	r2, [r3, #0]
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	3201      	adds	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8005f4e:	230e      	movs	r3, #14
 8005f50:	18fa      	adds	r2, r7, r3
 8005f52:	1cbb      	adds	r3, r7, #2
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d00e      	beq.n	8005f7a <my_find_char_position+0x76>
			break ;
		i++ ;
 8005f5c:	210f      	movs	r1, #15
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	3201      	adds	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8005f68:	230f      	movs	r3, #15
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1da      	bne.n	8005f2e <my_find_char_position+0x2a>
 8005f78:	e000      	b.n	8005f7c <my_find_char_position+0x78>
			break ;
 8005f7a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	781b      	ldrb	r3, [r3, #0]
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b004      	add	sp, #16
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <my_nmea_message>:

#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b24      	cmp	r3, #36	; 0x24
 8005f9c:	d117      	bne.n	8005fce <my_nmea_message+0x44>
    {
        *i = 0 ;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	b2d1      	uxtb	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	7011      	strb	r1, [r2, #0]
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	189b      	adds	r3, r3, r2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	189b      	adds	r3, r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e045      	b.n	800605a <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b1f      	cmp	r3, #31
 8005fd4:	d907      	bls.n	8005fe6 <my_nmea_message+0x5c>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b7e      	cmp	r3, #126	; 0x7e
 8005fdc:	d803      	bhi.n	8005fe6 <my_nmea_message+0x5c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <my_nmea_message+0x64>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b0d      	cmp	r3, #13
 8005fec:	d114      	bne.n	8006018 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	b2d1      	uxtb	r1, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	7011      	strb	r1, [r2, #0]
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	7812      	ldrb	r2, [r2, #0]
 8006004:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	001a      	movs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	189b      	adds	r3, r3, r2
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8006014:	2301      	movs	r3, #1
 8006016:	e020      	b.n	800605a <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d11a      	bne.n	8006056 <my_nmea_message+0xcc>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d916      	bls.n	8006056 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	001a      	movs	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	189b      	adds	r3, r3, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b0d      	cmp	r3, #13
 8006042:	d108      	bne.n	8006056 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	001a      	movs	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	189b      	adds	r3, r3, r2
 800604e:	2200      	movs	r2, #0
 8006050:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8006052:	2302      	movs	r3, #2
 8006054:	e001      	b.n	800605a <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8006056:	2301      	movs	r3, #1
 8006058:	425b      	negs	r3, r3
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b004      	add	sp, #16
 8006060:	bd80      	pop	{r7, pc}

08006062 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3309      	adds	r3, #9
 800606e:	781b      	ldrb	r3, [r3, #0]
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b002      	add	sp, #8
 8006076:	bd80      	pop	{r7, pc}

08006078 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8006078:	b5b0      	push	{r4, r5, r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	220f      	movs	r2, #15
 8006084:	212c      	movs	r1, #44	; 0x2c
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff ff3c 	bl	8005f04 <my_find_char_position>
 800608c:	0003      	movs	r3, r0
 800608e:	001a      	movs	r2, r3
 8006090:	2517      	movs	r5, #23
 8006092:	197b      	adds	r3, r7, r5
 8006094:	3201      	adds	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2210      	movs	r2, #16
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	0018      	movs	r0, r3
 80060a0:	f7ff ff30 	bl	8005f04 <my_find_char_position>
 80060a4:	0003      	movs	r3, r0
 80060a6:	0019      	movs	r1, r3
 80060a8:	2416      	movs	r4, #22
 80060aa:	193b      	adds	r3, r7, r4
 80060ac:	197a      	adds	r2, r7, r5
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	1a8a      	subs	r2, r1, r2
 80060b2:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 80060b4:	193b      	adds	r3, r7, r4
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	0018      	movs	r0, r3
 80060bc:	f000 f9c2 	bl	8006444 <malloc>
 80060c0:	0003      	movs	r3, r0
 80060c2:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 80060c4:	197b      	adds	r3, r7, r5
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	18d1      	adds	r1, r2, r3
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	781a      	ldrb	r2, [r3, #0]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	0018      	movs	r0, r3
 80060d4:	f002 f979 	bl	80083ca <strncpy>
	pdop_s[pdop_length] = '\0';
 80060d8:	193b      	adds	r3, r7, r4
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	18d3      	adds	r3, r2, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f7ff fef8 	bl	8005edc <my_string2double_conv>
 80060ec:	0002      	movs	r2, r0
 80060ee:	000b      	movs	r3, r1
 80060f0:	60ba      	str	r2, [r7, #8]
 80060f2:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f9ae 	bl	8006458 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	0010      	movs	r0, r2
 8006102:	0019      	movs	r1, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	b006      	add	sp, #24
 8006108:	bdb0      	pop	{r4, r5, r7, pc}

0800610a <is_my_nmea_checksum_ok>:

bool is_my_nmea_checksum_ok ( const char* s )
{
 800610a:	b590      	push	{r4, r7, lr}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8006112:	230f      	movs	r3, #15
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800611a:	230e      	movs	r3, #14
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006122:	e00f      	b.n	8006144 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8006124:	220e      	movs	r2, #14
 8006126:	18bb      	adds	r3, r7, r2
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	18ba      	adds	r2, r7, r2
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	7011      	strb	r1, [r2, #0]
 8006130:	001a      	movs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	189b      	adds	r3, r3, r2
 8006136:	7819      	ldrb	r1, [r3, #0]
 8006138:	220f      	movs	r2, #15
 800613a:	18bb      	adds	r3, r7, r2
 800613c:	18ba      	adds	r2, r7, r2
 800613e:	7812      	ldrb	r2, [r2, #0]
 8006140:	404a      	eors	r2, r1
 8006142:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006144:	210e      	movs	r1, #14
 8006146:	187b      	adds	r3, r7, r1
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b2a      	cmp	r3, #42	; 0x2a
 8006152:	d00a      	beq.n	800616a <is_my_nmea_checksum_ok+0x60>
 8006154:	187b      	adds	r3, r7, r1
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	18d3      	adds	r3, r2, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <is_my_nmea_checksum_ok+0x60>
 8006162:	187b      	adds	r3, r7, r1
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1dc      	bne.n	8006124 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800616a:	230f      	movs	r3, #15
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	781c      	ldrb	r4, [r3, #0]
 8006170:	210e      	movs	r1, #14
 8006172:	187b      	adds	r3, r7, r1
 8006174:	187a      	adds	r2, r7, r1
 8006176:	7812      	ldrb	r2, [r2, #0]
 8006178:	3201      	adds	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	187b      	adds	r3, r7, r1
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	18d3      	adds	r3, r2, r3
 8006184:	2210      	movs	r2, #16
 8006186:	2100      	movs	r1, #0
 8006188:	0018      	movs	r0, r3
 800618a:	f001 f8e5 	bl	8007358 <strtol>
 800618e:	0003      	movs	r3, r0
 8006190:	1ae3      	subs	r3, r4, r3
 8006192:	425a      	negs	r2, r3
 8006194:	4153      	adcs	r3, r2
 8006196:	b2db      	uxtb	r3, r3
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b005      	add	sp, #20
 800619e:	bd90      	pop	{r4, r7, pc}

080061a0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	000a      	movs	r2, r1
 80061aa:	1cfb      	adds	r3, r7, #3
 80061ac:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 80061ae:	2308      	movs	r3, #8
 80061b0:	18fa      	adds	r2, r7, r3
 80061b2:	492f      	ldr	r1, [pc, #188]	; (8006270 <nmea2decimal+0xd0>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	0018      	movs	r0, r3
 80061b8:	f002 f878 	bl	80082ac <siscanf>
    min = deg / 100 ;
 80061bc:	68b8      	ldr	r0, [r7, #8]
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <nmea2decimal+0xd4>)
 80061c4:	f7fa fe2a 	bl	8000e1c <__aeabi_ddiv>
 80061c8:	0002      	movs	r2, r0
 80061ca:	000b      	movs	r3, r1
 80061cc:	613a      	str	r2, [r7, #16]
 80061ce:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 80061d0:	6938      	ldr	r0, [r7, #16]
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	f7fc f87e 	bl	80022d4 <__aeabi_d2iz>
 80061d8:	0003      	movs	r3, r0
 80061da:	0018      	movs	r0, r3
 80061dc:	f7fc f8b0 	bl	8002340 <__aeabi_i2d>
 80061e0:	0002      	movs	r2, r0
 80061e2:	000b      	movs	r3, r1
 80061e4:	60ba      	str	r2, [r7, #8]
 80061e6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6938      	ldr	r0, [r7, #16]
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	f7fb fcd0 	bl	8001b94 <__aeabi_dsub>
 80061f4:	0002      	movs	r2, r0
 80061f6:	000b      	movs	r3, r1
 80061f8:	0010      	movs	r0, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	2200      	movs	r2, #0
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <nmea2decimal+0xd8>)
 8006200:	f7fb fa06 	bl	8001610 <__aeabi_dmul>
 8006204:	0002      	movs	r2, r0
 8006206:	000b      	movs	r3, r1
 8006208:	613a      	str	r2, [r7, #16]
 800620a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800620c:	2200      	movs	r2, #0
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <nmea2decimal+0xdc>)
 8006210:	6938      	ldr	r0, [r7, #16]
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	f7fa fe02 	bl	8000e1c <__aeabi_ddiv>
 8006218:	0002      	movs	r2, r0
 800621a:	000b      	movs	r3, r1
 800621c:	613a      	str	r2, [r7, #16]
 800621e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8006220:	1cfb      	adds	r3, r7, #3
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b53      	cmp	r3, #83	; 0x53
 8006226:	d003      	beq.n	8006230 <nmea2decimal+0x90>
 8006228:	1cfb      	adds	r3, r7, #3
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b57      	cmp	r3, #87	; 0x57
 800622e:	d10e      	bne.n	800624e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8006230:	68b8      	ldr	r0, [r7, #8]
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f7fa fa90 	bl	800075c <__aeabi_dadd>
 800623c:	0002      	movs	r2, r0
 800623e:	000b      	movs	r3, r1
 8006240:	0011      	movs	r1, r2
 8006242:	000c      	movs	r4, r1
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	0609      	lsls	r1, r1, #24
 8006248:	4059      	eors	r1, r3
 800624a:	000d      	movs	r5, r1
 800624c:	e009      	b.n	8006262 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800624e:	68b8      	ldr	r0, [r7, #8]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f7fa fa81 	bl	800075c <__aeabi_dadd>
 800625a:	0002      	movs	r2, r0
 800625c:	000b      	movs	r3, r1
 800625e:	0014      	movs	r4, r2
 8006260:	001d      	movs	r5, r3
}
 8006262:	0022      	movs	r2, r4
 8006264:	002b      	movs	r3, r5
 8006266:	0010      	movs	r0, r2
 8006268:	0019      	movs	r1, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b006      	add	sp, #24
 800626e:	bdb0      	pop	{r4, r5, r7, pc}
 8006270:	0800b838 	.word	0x0800b838
 8006274:	40590000 	.word	0x40590000
 8006278:	40240000 	.word	0x40240000
 800627c:	40180000 	.word	0x40180000

08006280 <get_my_nmea_gngll_coordinates_s>:
    //double c = ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
    //return ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
}
*/
void get_my_nmea_gngll_coordinates_s ( const char* m , char* latitude , char* longitude )
{
 8006280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006282:	b091      	sub	sp, #68	; 0x44
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	212c      	movs	r1, #44	; 0x2c
 8006292:	0018      	movs	r0, r3
 8006294:	f7ff fe36 	bl	8005f04 <my_find_char_position>
 8006298:	0003      	movs	r3, r0
 800629a:	001a      	movs	r2, r3
 800629c:	2537      	movs	r5, #55	; 0x37
 800629e:	197b      	adds	r3, r7, r5
 80062a0:	3201      	adds	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2202      	movs	r2, #2
 80062a8:	212c      	movs	r1, #44	; 0x2c
 80062aa:	0018      	movs	r0, r3
 80062ac:	f7ff fe2a 	bl	8005f04 <my_find_char_position>
 80062b0:	0003      	movs	r3, r0
 80062b2:	0019      	movs	r1, r3
 80062b4:	2436      	movs	r4, #54	; 0x36
 80062b6:	193b      	adds	r3, r7, r4
 80062b8:	197a      	adds	r2, r7, r5
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	1a8a      	subs	r2, r1, r2
 80062be:	701a      	strb	r2, [r3, #0]

	char* latitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80062c0:	193b      	adds	r3, r7, r4
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 f8bc 	bl	8006444 <malloc>
 80062cc:	0003      	movs	r3, r0
 80062ce:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80062d0:	197b      	adds	r3, r7, r5
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	18d1      	adds	r1, r2, r3
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	0018      	movs	r0, r3
 80062e0:	f002 f873 	bl	80083ca <strncpy>
	latitude_s[coordinate_length] = '\0';
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80062f0:	197b      	adds	r3, r7, r5
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	18d3      	adds	r3, r2, r3
 80062fa:	3301      	adds	r3, #1
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	18d2      	adds	r2, r2, r3
 8006300:	262f      	movs	r6, #47	; 0x2f
 8006302:	19bb      	adds	r3, r7, r6
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s , direction ) ;
 8006308:	19bb      	adds	r3, r7, r6
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	0011      	movs	r1, r2
 8006310:	0018      	movs	r0, r3
 8006312:	f7ff ff45 	bl	80061a0 <nmea2decimal>
 8006316:	0002      	movs	r2, r0
 8006318:	000b      	movs	r3, r1
 800631a:	623a      	str	r2, [r7, #32]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s ) ;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	0018      	movs	r0, r3
 8006322:	f000 f899 	bl	8006458 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8006326:	2200      	movs	r2, #0
 8006328:	4b44      	ldr	r3, [pc, #272]	; (800643c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 800632a:	6a38      	ldr	r0, [r7, #32]
 800632c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800632e:	f7fb f96f 	bl	8001610 <__aeabi_dmul>
 8006332:	0002      	movs	r2, r0
 8006334:	000b      	movs	r3, r1
 8006336:	0010      	movs	r0, r2
 8006338:	0019      	movs	r1, r3
 800633a:	f005 f9e9 	bl	800b710 <round>
 800633e:	2200      	movs	r2, #0
 8006340:	4b3e      	ldr	r3, [pc, #248]	; (800643c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006342:	f7fa fd6b 	bl	8000e1c <__aeabi_ddiv>
 8006346:	0002      	movs	r2, r0
 8006348:	000b      	movs	r3, r1
 800634a:	623a      	str	r2, [r7, #32]
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude , 12 , "%.6lf" , latitude_d ) ;
 800634e:	493c      	ldr	r1, [pc, #240]	; (8006440 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006350:	68b8      	ldr	r0, [r7, #8]
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	9200      	str	r2, [sp, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	000a      	movs	r2, r1
 800635c:	210c      	movs	r1, #12
 800635e:	f001 ff51 	bl	8008204 <sniprintf>

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2203      	movs	r2, #3
 8006366:	212c      	movs	r1, #44	; 0x2c
 8006368:	0018      	movs	r0, r3
 800636a:	f7ff fdcb 	bl	8005f04 <my_find_char_position>
 800636e:	0003      	movs	r3, r0
 8006370:	001a      	movs	r2, r3
 8006372:	197b      	adds	r3, r7, r5
 8006374:	3201      	adds	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
	//coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2204      	movs	r2, #4
 800637c:	212c      	movs	r1, #44	; 0x2c
 800637e:	0018      	movs	r0, r3
 8006380:	f7ff fdc0 	bl	8005f04 <my_find_char_position>
 8006384:	0003      	movs	r3, r0
 8006386:	0019      	movs	r1, r3
 8006388:	193b      	adds	r3, r7, r4
 800638a:	197a      	adds	r2, r7, r5
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	1a8a      	subs	r2, r1, r2
 8006390:	701a      	strb	r2, [r3, #0]

	char* longitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8006392:	193b      	adds	r3, r7, r4
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	0018      	movs	r0, r3
 800639a:	f000 f853 	bl	8006444 <malloc>
 800639e:	0003      	movs	r3, r0
 80063a0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80063a2:	197b      	adds	r3, r7, r5
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	18d1      	adds	r1, r2, r3
 80063aa:	193b      	adds	r3, r7, r4
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f002 f80a 	bl	80083ca <strncpy>
	longitude_s[coordinate_length] = '\0';
 80063b6:	193b      	adds	r3, r7, r4
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	18d3      	adds	r3, r2, r3
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80063c2:	197b      	adds	r3, r7, r5
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	18d3      	adds	r3, r2, r3
 80063cc:	3301      	adds	r3, #1
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	18d2      	adds	r2, r2, r3
 80063d2:	19bb      	adds	r3, r7, r6
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s , direction ) ;
 80063d8:	19bb      	adds	r3, r7, r6
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	0011      	movs	r1, r2
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7ff fedd 	bl	80061a0 <nmea2decimal>
 80063e6:	0002      	movs	r2, r0
 80063e8:	000b      	movs	r3, r1
 80063ea:	613a      	str	r2, [r7, #16]
 80063ec:	617b      	str	r3, [r7, #20]
	free ( longitude_s ) ;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 f831 	bl	8006458 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b10      	ldr	r3, [pc, #64]	; (800643c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	f7fb f907 	bl	8001610 <__aeabi_dmul>
 8006402:	0002      	movs	r2, r0
 8006404:	000b      	movs	r3, r1
 8006406:	0010      	movs	r0, r2
 8006408:	0019      	movs	r1, r3
 800640a:	f005 f981 	bl	800b710 <round>
 800640e:	2200      	movs	r2, #0
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006412:	f7fa fd03 	bl	8000e1c <__aeabi_ddiv>
 8006416:	0002      	movs	r2, r0
 8006418:	000b      	movs	r3, r1
 800641a:	613a      	str	r2, [r7, #16]
 800641c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude , 12 , "%.6lf" , longitude_d ) ;
 800641e:	4908      	ldr	r1, [pc, #32]	; (8006440 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	9200      	str	r2, [sp, #0]
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	000a      	movs	r2, r1
 800642c:	210c      	movs	r1, #12
 800642e:	f001 fee9 	bl	8008204 <sniprintf>
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b00f      	add	sp, #60	; 0x3c
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	412e8480 	.word	0x412e8480
 8006440:	0800b83c 	.word	0x0800b83c

08006444 <malloc>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <malloc+0x10>)
 8006448:	0001      	movs	r1, r0
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f000 f830 	bl	80064b0 <_malloc_r>
 8006450:	bd10      	pop	{r4, pc}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	200001dc 	.word	0x200001dc

08006458 <free>:
 8006458:	b510      	push	{r4, lr}
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <free+0x10>)
 800645c:	0001      	movs	r1, r0
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	f002 ff2c 	bl	80092bc <_free_r>
 8006464:	bd10      	pop	{r4, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	200001dc 	.word	0x200001dc

0800646c <sbrk_aligned>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0f      	ldr	r6, [pc, #60]	; (80064ac <sbrk_aligned+0x40>)
 8006470:	000d      	movs	r5, r1
 8006472:	6831      	ldr	r1, [r6, #0]
 8006474:	0004      	movs	r4, r0
 8006476:	2900      	cmp	r1, #0
 8006478:	d102      	bne.n	8006480 <sbrk_aligned+0x14>
 800647a:	f002 f80f 	bl	800849c <_sbrk_r>
 800647e:	6030      	str	r0, [r6, #0]
 8006480:	0029      	movs	r1, r5
 8006482:	0020      	movs	r0, r4
 8006484:	f002 f80a 	bl	800849c <_sbrk_r>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d00a      	beq.n	80064a2 <sbrk_aligned+0x36>
 800648c:	2303      	movs	r3, #3
 800648e:	1cc5      	adds	r5, r0, #3
 8006490:	439d      	bics	r5, r3
 8006492:	42a8      	cmp	r0, r5
 8006494:	d007      	beq.n	80064a6 <sbrk_aligned+0x3a>
 8006496:	1a29      	subs	r1, r5, r0
 8006498:	0020      	movs	r0, r4
 800649a:	f001 ffff 	bl	800849c <_sbrk_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	d101      	bne.n	80064a6 <sbrk_aligned+0x3a>
 80064a2:	2501      	movs	r5, #1
 80064a4:	426d      	negs	r5, r5
 80064a6:	0028      	movs	r0, r5
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	20000590 	.word	0x20000590

080064b0 <_malloc_r>:
 80064b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b2:	2203      	movs	r2, #3
 80064b4:	1ccb      	adds	r3, r1, #3
 80064b6:	4393      	bics	r3, r2
 80064b8:	3308      	adds	r3, #8
 80064ba:	0006      	movs	r6, r0
 80064bc:	001f      	movs	r7, r3
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d238      	bcs.n	8006534 <_malloc_r+0x84>
 80064c2:	270c      	movs	r7, #12
 80064c4:	42b9      	cmp	r1, r7
 80064c6:	d837      	bhi.n	8006538 <_malloc_r+0x88>
 80064c8:	0030      	movs	r0, r6
 80064ca:	f000 f873 	bl	80065b4 <__malloc_lock>
 80064ce:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <_malloc_r+0x100>)
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	001c      	movs	r4, r3
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d133      	bne.n	8006542 <_malloc_r+0x92>
 80064da:	0039      	movs	r1, r7
 80064dc:	0030      	movs	r0, r6
 80064de:	f7ff ffc5 	bl	800646c <sbrk_aligned>
 80064e2:	0004      	movs	r4, r0
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d15e      	bne.n	80065a6 <_malloc_r+0xf6>
 80064e8:	9b00      	ldr	r3, [sp, #0]
 80064ea:	681c      	ldr	r4, [r3, #0]
 80064ec:	0025      	movs	r5, r4
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	d14e      	bne.n	8006590 <_malloc_r+0xe0>
 80064f2:	2c00      	cmp	r4, #0
 80064f4:	d051      	beq.n	800659a <_malloc_r+0xea>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0029      	movs	r1, r5
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	0030      	movs	r0, r6
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	f001 ffcc 	bl	800849c <_sbrk_r>
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	4283      	cmp	r3, r0
 8006508:	d147      	bne.n	800659a <_malloc_r+0xea>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	0030      	movs	r0, r6
 800650e:	1aff      	subs	r7, r7, r3
 8006510:	0039      	movs	r1, r7
 8006512:	f7ff ffab 	bl	800646c <sbrk_aligned>
 8006516:	3001      	adds	r0, #1
 8006518:	d03f      	beq.n	800659a <_malloc_r+0xea>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	19db      	adds	r3, r3, r7
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d040      	beq.n	80065aa <_malloc_r+0xfa>
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	42a2      	cmp	r2, r4
 800652c:	d133      	bne.n	8006596 <_malloc_r+0xe6>
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e014      	b.n	800655e <_malloc_r+0xae>
 8006534:	2b00      	cmp	r3, #0
 8006536:	dac5      	bge.n	80064c4 <_malloc_r+0x14>
 8006538:	230c      	movs	r3, #12
 800653a:	2500      	movs	r5, #0
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	0028      	movs	r0, r5
 8006540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	1bc9      	subs	r1, r1, r7
 8006546:	d420      	bmi.n	800658a <_malloc_r+0xda>
 8006548:	290b      	cmp	r1, #11
 800654a:	d918      	bls.n	800657e <_malloc_r+0xce>
 800654c:	19e2      	adds	r2, r4, r7
 800654e:	6027      	str	r7, [r4, #0]
 8006550:	42a3      	cmp	r3, r4
 8006552:	d112      	bne.n	800657a <_malloc_r+0xca>
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	6053      	str	r3, [r2, #4]
 800655e:	0030      	movs	r0, r6
 8006560:	0025      	movs	r5, r4
 8006562:	f000 f82f 	bl	80065c4 <__malloc_unlock>
 8006566:	2207      	movs	r2, #7
 8006568:	350b      	adds	r5, #11
 800656a:	1d23      	adds	r3, r4, #4
 800656c:	4395      	bics	r5, r2
 800656e:	1aea      	subs	r2, r5, r3
 8006570:	429d      	cmp	r5, r3
 8006572:	d0e4      	beq.n	800653e <_malloc_r+0x8e>
 8006574:	1b5b      	subs	r3, r3, r5
 8006576:	50a3      	str	r3, [r4, r2]
 8006578:	e7e1      	b.n	800653e <_malloc_r+0x8e>
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e7ec      	b.n	8006558 <_malloc_r+0xa8>
 800657e:	6862      	ldr	r2, [r4, #4]
 8006580:	42a3      	cmp	r3, r4
 8006582:	d1d5      	bne.n	8006530 <_malloc_r+0x80>
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e7e9      	b.n	800655e <_malloc_r+0xae>
 800658a:	0023      	movs	r3, r4
 800658c:	6864      	ldr	r4, [r4, #4]
 800658e:	e7a2      	b.n	80064d6 <_malloc_r+0x26>
 8006590:	002c      	movs	r4, r5
 8006592:	686d      	ldr	r5, [r5, #4]
 8006594:	e7ab      	b.n	80064ee <_malloc_r+0x3e>
 8006596:	0013      	movs	r3, r2
 8006598:	e7c4      	b.n	8006524 <_malloc_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	0030      	movs	r0, r6
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	f000 f810 	bl	80065c4 <__malloc_unlock>
 80065a4:	e7cb      	b.n	800653e <_malloc_r+0x8e>
 80065a6:	6027      	str	r7, [r4, #0]
 80065a8:	e7d9      	b.n	800655e <_malloc_r+0xae>
 80065aa:	605b      	str	r3, [r3, #4]
 80065ac:	deff      	udf	#255	; 0xff
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	2000058c 	.word	0x2000058c

080065b4 <__malloc_lock>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4802      	ldr	r0, [pc, #8]	; (80065c0 <__malloc_lock+0xc>)
 80065b8:	f001 ffc1 	bl	800853e <__retarget_lock_acquire_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	200006d4 	.word	0x200006d4

080065c4 <__malloc_unlock>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4802      	ldr	r0, [pc, #8]	; (80065d0 <__malloc_unlock+0xc>)
 80065c8:	f001 ffba 	bl	8008540 <__retarget_lock_release_recursive>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	200006d4 	.word	0x200006d4

080065d4 <sulp>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	0016      	movs	r6, r2
 80065d8:	000d      	movs	r5, r1
 80065da:	f003 fdad 	bl	800a138 <__ulp>
 80065de:	2e00      	cmp	r6, #0
 80065e0:	d00d      	beq.n	80065fe <sulp+0x2a>
 80065e2:	236b      	movs	r3, #107	; 0x6b
 80065e4:	006a      	lsls	r2, r5, #1
 80065e6:	0d52      	lsrs	r2, r2, #21
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dd07      	ble.n	80065fe <sulp+0x2a>
 80065ee:	2400      	movs	r4, #0
 80065f0:	4a03      	ldr	r2, [pc, #12]	; (8006600 <sulp+0x2c>)
 80065f2:	051b      	lsls	r3, r3, #20
 80065f4:	189d      	adds	r5, r3, r2
 80065f6:	002b      	movs	r3, r5
 80065f8:	0022      	movs	r2, r4
 80065fa:	f7fb f809 	bl	8001610 <__aeabi_dmul>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	3ff00000 	.word	0x3ff00000

08006604 <_strtod_l>:
 8006604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006606:	b0a1      	sub	sp, #132	; 0x84
 8006608:	9219      	str	r2, [sp, #100]	; 0x64
 800660a:	2200      	movs	r2, #0
 800660c:	2600      	movs	r6, #0
 800660e:	2700      	movs	r7, #0
 8006610:	9004      	str	r0, [sp, #16]
 8006612:	9107      	str	r1, [sp, #28]
 8006614:	921c      	str	r2, [sp, #112]	; 0x70
 8006616:	911b      	str	r1, [sp, #108]	; 0x6c
 8006618:	780a      	ldrb	r2, [r1, #0]
 800661a:	2a2b      	cmp	r2, #43	; 0x2b
 800661c:	d055      	beq.n	80066ca <_strtod_l+0xc6>
 800661e:	d841      	bhi.n	80066a4 <_strtod_l+0xa0>
 8006620:	2a0d      	cmp	r2, #13
 8006622:	d83b      	bhi.n	800669c <_strtod_l+0x98>
 8006624:	2a08      	cmp	r2, #8
 8006626:	d83b      	bhi.n	80066a0 <_strtod_l+0x9c>
 8006628:	2a00      	cmp	r2, #0
 800662a:	d044      	beq.n	80066b6 <_strtod_l+0xb2>
 800662c:	2200      	movs	r2, #0
 800662e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006630:	2100      	movs	r1, #0
 8006632:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006634:	9109      	str	r1, [sp, #36]	; 0x24
 8006636:	782a      	ldrb	r2, [r5, #0]
 8006638:	2a30      	cmp	r2, #48	; 0x30
 800663a:	d000      	beq.n	800663e <_strtod_l+0x3a>
 800663c:	e085      	b.n	800674a <_strtod_l+0x146>
 800663e:	786a      	ldrb	r2, [r5, #1]
 8006640:	3120      	adds	r1, #32
 8006642:	438a      	bics	r2, r1
 8006644:	2a58      	cmp	r2, #88	; 0x58
 8006646:	d000      	beq.n	800664a <_strtod_l+0x46>
 8006648:	e075      	b.n	8006736 <_strtod_l+0x132>
 800664a:	9302      	str	r3, [sp, #8]
 800664c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800664e:	4a97      	ldr	r2, [pc, #604]	; (80068ac <_strtod_l+0x2a8>)
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	ab1c      	add	r3, sp, #112	; 0x70
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	9804      	ldr	r0, [sp, #16]
 8006658:	ab1d      	add	r3, sp, #116	; 0x74
 800665a:	a91b      	add	r1, sp, #108	; 0x6c
 800665c:	f002 fee2 	bl	8009424 <__gethex>
 8006660:	230f      	movs	r3, #15
 8006662:	0002      	movs	r2, r0
 8006664:	401a      	ands	r2, r3
 8006666:	0004      	movs	r4, r0
 8006668:	9205      	str	r2, [sp, #20]
 800666a:	4218      	tst	r0, r3
 800666c:	d005      	beq.n	800667a <_strtod_l+0x76>
 800666e:	2a06      	cmp	r2, #6
 8006670:	d12d      	bne.n	80066ce <_strtod_l+0xca>
 8006672:	1c6b      	adds	r3, r5, #1
 8006674:	931b      	str	r3, [sp, #108]	; 0x6c
 8006676:	2300      	movs	r3, #0
 8006678:	930f      	str	r3, [sp, #60]	; 0x3c
 800667a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <_strtod_l+0x82>
 8006680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006682:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01b      	beq.n	80066c4 <_strtod_l+0xc0>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	0032      	movs	r2, r6
 8006690:	061b      	lsls	r3, r3, #24
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	0010      	movs	r0, r2
 8006696:	0019      	movs	r1, r3
 8006698:	b021      	add	sp, #132	; 0x84
 800669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669c:	2a20      	cmp	r2, #32
 800669e:	d1c5      	bne.n	800662c <_strtod_l+0x28>
 80066a0:	3101      	adds	r1, #1
 80066a2:	e7b8      	b.n	8006616 <_strtod_l+0x12>
 80066a4:	2a2d      	cmp	r2, #45	; 0x2d
 80066a6:	d1c1      	bne.n	800662c <_strtod_l+0x28>
 80066a8:	3a2c      	subs	r2, #44	; 0x2c
 80066aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80066ac:	1c4a      	adds	r2, r1, #1
 80066ae:	921b      	str	r2, [sp, #108]	; 0x6c
 80066b0:	784a      	ldrb	r2, [r1, #1]
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d1bc      	bne.n	8006630 <_strtod_l+0x2c>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80066ba:	2300      	movs	r3, #0
 80066bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1dd      	bne.n	8006680 <_strtod_l+0x7c>
 80066c4:	0032      	movs	r2, r6
 80066c6:	003b      	movs	r3, r7
 80066c8:	e7e4      	b.n	8006694 <_strtod_l+0x90>
 80066ca:	2200      	movs	r2, #0
 80066cc:	e7ed      	b.n	80066aa <_strtod_l+0xa6>
 80066ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d007      	beq.n	80066e4 <_strtod_l+0xe0>
 80066d4:	2135      	movs	r1, #53	; 0x35
 80066d6:	a81e      	add	r0, sp, #120	; 0x78
 80066d8:	f003 fe1f 	bl	800a31a <__copybits>
 80066dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066de:	9804      	ldr	r0, [sp, #16]
 80066e0:	f003 f9e8 	bl	8009ab4 <_Bfree>
 80066e4:	9805      	ldr	r0, [sp, #20]
 80066e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066e8:	3801      	subs	r0, #1
 80066ea:	2804      	cmp	r0, #4
 80066ec:	d806      	bhi.n	80066fc <_strtod_l+0xf8>
 80066ee:	f7f9 fd11 	bl	8000114 <__gnu_thumb1_case_uqi>
 80066f2:	0312      	.short	0x0312
 80066f4:	1e1c      	.short	0x1e1c
 80066f6:	12          	.byte	0x12
 80066f7:	00          	.byte	0x00
 80066f8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80066fa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80066fc:	05e4      	lsls	r4, r4, #23
 80066fe:	d502      	bpl.n	8006706 <_strtod_l+0x102>
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	061b      	lsls	r3, r3, #24
 8006704:	431f      	orrs	r7, r3
 8006706:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <_strtod_l+0x2ac>)
 8006708:	423b      	tst	r3, r7
 800670a:	d1b6      	bne.n	800667a <_strtod_l+0x76>
 800670c:	f001 feec 	bl	80084e8 <__errno>
 8006710:	2322      	movs	r3, #34	; 0x22
 8006712:	6003      	str	r3, [r0, #0]
 8006714:	e7b1      	b.n	800667a <_strtod_l+0x76>
 8006716:	4967      	ldr	r1, [pc, #412]	; (80068b4 <_strtod_l+0x2b0>)
 8006718:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800671a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800671c:	400a      	ands	r2, r1
 800671e:	4966      	ldr	r1, [pc, #408]	; (80068b8 <_strtod_l+0x2b4>)
 8006720:	185b      	adds	r3, r3, r1
 8006722:	051b      	lsls	r3, r3, #20
 8006724:	431a      	orrs	r2, r3
 8006726:	0017      	movs	r7, r2
 8006728:	e7e8      	b.n	80066fc <_strtod_l+0xf8>
 800672a:	4f61      	ldr	r7, [pc, #388]	; (80068b0 <_strtod_l+0x2ac>)
 800672c:	e7e6      	b.n	80066fc <_strtod_l+0xf8>
 800672e:	2601      	movs	r6, #1
 8006730:	4f62      	ldr	r7, [pc, #392]	; (80068bc <_strtod_l+0x2b8>)
 8006732:	4276      	negs	r6, r6
 8006734:	e7e2      	b.n	80066fc <_strtod_l+0xf8>
 8006736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	921b      	str	r2, [sp, #108]	; 0x6c
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b30      	cmp	r3, #48	; 0x30
 8006740:	d0f9      	beq.n	8006736 <_strtod_l+0x132>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d099      	beq.n	800667a <_strtod_l+0x76>
 8006746:	2301      	movs	r3, #1
 8006748:	9309      	str	r3, [sp, #36]	; 0x24
 800674a:	2500      	movs	r5, #0
 800674c:	220a      	movs	r2, #10
 800674e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006750:	950d      	str	r5, [sp, #52]	; 0x34
 8006752:	9310      	str	r3, [sp, #64]	; 0x40
 8006754:	9508      	str	r5, [sp, #32]
 8006756:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006758:	7804      	ldrb	r4, [r0, #0]
 800675a:	0023      	movs	r3, r4
 800675c:	3b30      	subs	r3, #48	; 0x30
 800675e:	b2d9      	uxtb	r1, r3
 8006760:	2909      	cmp	r1, #9
 8006762:	d927      	bls.n	80067b4 <_strtod_l+0x1b0>
 8006764:	2201      	movs	r2, #1
 8006766:	4956      	ldr	r1, [pc, #344]	; (80068c0 <_strtod_l+0x2bc>)
 8006768:	f001 fe1e 	bl	80083a8 <strncmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	d031      	beq.n	80067d4 <_strtod_l+0x1d0>
 8006770:	2000      	movs	r0, #0
 8006772:	0023      	movs	r3, r4
 8006774:	4684      	mov	ip, r0
 8006776:	9a08      	ldr	r2, [sp, #32]
 8006778:	900c      	str	r0, [sp, #48]	; 0x30
 800677a:	9205      	str	r2, [sp, #20]
 800677c:	2220      	movs	r2, #32
 800677e:	0019      	movs	r1, r3
 8006780:	4391      	bics	r1, r2
 8006782:	000a      	movs	r2, r1
 8006784:	2100      	movs	r1, #0
 8006786:	9106      	str	r1, [sp, #24]
 8006788:	2a45      	cmp	r2, #69	; 0x45
 800678a:	d000      	beq.n	800678e <_strtod_l+0x18a>
 800678c:	e0c2      	b.n	8006914 <_strtod_l+0x310>
 800678e:	9b05      	ldr	r3, [sp, #20]
 8006790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006792:	4303      	orrs	r3, r0
 8006794:	4313      	orrs	r3, r2
 8006796:	428b      	cmp	r3, r1
 8006798:	d08d      	beq.n	80066b6 <_strtod_l+0xb2>
 800679a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80067a2:	9b07      	ldr	r3, [sp, #28]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b2b      	cmp	r3, #43	; 0x2b
 80067a8:	d071      	beq.n	800688e <_strtod_l+0x28a>
 80067aa:	000c      	movs	r4, r1
 80067ac:	2b2d      	cmp	r3, #45	; 0x2d
 80067ae:	d174      	bne.n	800689a <_strtod_l+0x296>
 80067b0:	2401      	movs	r4, #1
 80067b2:	e06d      	b.n	8006890 <_strtod_l+0x28c>
 80067b4:	9908      	ldr	r1, [sp, #32]
 80067b6:	2908      	cmp	r1, #8
 80067b8:	dc09      	bgt.n	80067ce <_strtod_l+0x1ca>
 80067ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067bc:	4351      	muls	r1, r2
 80067be:	185b      	adds	r3, r3, r1
 80067c0:	930d      	str	r3, [sp, #52]	; 0x34
 80067c2:	9b08      	ldr	r3, [sp, #32]
 80067c4:	3001      	adds	r0, #1
 80067c6:	3301      	adds	r3, #1
 80067c8:	9308      	str	r3, [sp, #32]
 80067ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80067cc:	e7c3      	b.n	8006756 <_strtod_l+0x152>
 80067ce:	4355      	muls	r5, r2
 80067d0:	195d      	adds	r5, r3, r5
 80067d2:	e7f6      	b.n	80067c2 <_strtod_l+0x1be>
 80067d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80067da:	9a08      	ldr	r2, [sp, #32]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d03a      	beq.n	8006858 <_strtod_l+0x254>
 80067e2:	900c      	str	r0, [sp, #48]	; 0x30
 80067e4:	9205      	str	r2, [sp, #20]
 80067e6:	001a      	movs	r2, r3
 80067e8:	3a30      	subs	r2, #48	; 0x30
 80067ea:	2a09      	cmp	r2, #9
 80067ec:	d912      	bls.n	8006814 <_strtod_l+0x210>
 80067ee:	2201      	movs	r2, #1
 80067f0:	4694      	mov	ip, r2
 80067f2:	e7c3      	b.n	800677c <_strtod_l+0x178>
 80067f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067f6:	3001      	adds	r0, #1
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b30      	cmp	r3, #48	; 0x30
 8006800:	d0f8      	beq.n	80067f4 <_strtod_l+0x1f0>
 8006802:	001a      	movs	r2, r3
 8006804:	3a31      	subs	r2, #49	; 0x31
 8006806:	2a08      	cmp	r2, #8
 8006808:	d83c      	bhi.n	8006884 <_strtod_l+0x280>
 800680a:	900c      	str	r0, [sp, #48]	; 0x30
 800680c:	2000      	movs	r0, #0
 800680e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006810:	9005      	str	r0, [sp, #20]
 8006812:	9210      	str	r2, [sp, #64]	; 0x40
 8006814:	001a      	movs	r2, r3
 8006816:	1c41      	adds	r1, r0, #1
 8006818:	3a30      	subs	r2, #48	; 0x30
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	d016      	beq.n	800684c <_strtod_l+0x248>
 800681e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006820:	185b      	adds	r3, r3, r1
 8006822:	930c      	str	r3, [sp, #48]	; 0x30
 8006824:	9b05      	ldr	r3, [sp, #20]
 8006826:	210a      	movs	r1, #10
 8006828:	469c      	mov	ip, r3
 800682a:	4484      	add	ip, r0
 800682c:	4563      	cmp	r3, ip
 800682e:	d115      	bne.n	800685c <_strtod_l+0x258>
 8006830:	9905      	ldr	r1, [sp, #20]
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	3101      	adds	r1, #1
 8006836:	1809      	adds	r1, r1, r0
 8006838:	181b      	adds	r3, r3, r0
 800683a:	9105      	str	r1, [sp, #20]
 800683c:	2b08      	cmp	r3, #8
 800683e:	dc19      	bgt.n	8006874 <_strtod_l+0x270>
 8006840:	230a      	movs	r3, #10
 8006842:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006844:	434b      	muls	r3, r1
 8006846:	2100      	movs	r1, #0
 8006848:	18d3      	adds	r3, r2, r3
 800684a:	930d      	str	r3, [sp, #52]	; 0x34
 800684c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800684e:	0008      	movs	r0, r1
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	921b      	str	r2, [sp, #108]	; 0x6c
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	e7c6      	b.n	80067e6 <_strtod_l+0x1e2>
 8006858:	9808      	ldr	r0, [sp, #32]
 800685a:	e7d0      	b.n	80067fe <_strtod_l+0x1fa>
 800685c:	1c5c      	adds	r4, r3, #1
 800685e:	2b08      	cmp	r3, #8
 8006860:	dc04      	bgt.n	800686c <_strtod_l+0x268>
 8006862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006864:	434b      	muls	r3, r1
 8006866:	930d      	str	r3, [sp, #52]	; 0x34
 8006868:	0023      	movs	r3, r4
 800686a:	e7df      	b.n	800682c <_strtod_l+0x228>
 800686c:	2c10      	cmp	r4, #16
 800686e:	dcfb      	bgt.n	8006868 <_strtod_l+0x264>
 8006870:	434d      	muls	r5, r1
 8006872:	e7f9      	b.n	8006868 <_strtod_l+0x264>
 8006874:	9b05      	ldr	r3, [sp, #20]
 8006876:	2100      	movs	r1, #0
 8006878:	2b10      	cmp	r3, #16
 800687a:	dce7      	bgt.n	800684c <_strtod_l+0x248>
 800687c:	230a      	movs	r3, #10
 800687e:	435d      	muls	r5, r3
 8006880:	1955      	adds	r5, r2, r5
 8006882:	e7e3      	b.n	800684c <_strtod_l+0x248>
 8006884:	2200      	movs	r2, #0
 8006886:	920c      	str	r2, [sp, #48]	; 0x30
 8006888:	9205      	str	r2, [sp, #20]
 800688a:	3201      	adds	r2, #1
 800688c:	e7b0      	b.n	80067f0 <_strtod_l+0x1ec>
 800688e:	2400      	movs	r4, #0
 8006890:	9b07      	ldr	r3, [sp, #28]
 8006892:	3302      	adds	r3, #2
 8006894:	931b      	str	r3, [sp, #108]	; 0x6c
 8006896:	9b07      	ldr	r3, [sp, #28]
 8006898:	789b      	ldrb	r3, [r3, #2]
 800689a:	001a      	movs	r2, r3
 800689c:	3a30      	subs	r2, #48	; 0x30
 800689e:	2a09      	cmp	r2, #9
 80068a0:	d914      	bls.n	80068cc <_strtod_l+0x2c8>
 80068a2:	9a07      	ldr	r2, [sp, #28]
 80068a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80068a6:	2200      	movs	r2, #0
 80068a8:	e033      	b.n	8006912 <_strtod_l+0x30e>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	0800b91c 	.word	0x0800b91c
 80068b0:	7ff00000 	.word	0x7ff00000
 80068b4:	ffefffff 	.word	0xffefffff
 80068b8:	00000433 	.word	0x00000433
 80068bc:	7fffffff 	.word	0x7fffffff
 80068c0:	0800b918 	.word	0x0800b918
 80068c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d0f9      	beq.n	80068c4 <_strtod_l+0x2c0>
 80068d0:	2200      	movs	r2, #0
 80068d2:	9206      	str	r2, [sp, #24]
 80068d4:	001a      	movs	r2, r3
 80068d6:	3a31      	subs	r2, #49	; 0x31
 80068d8:	2a08      	cmp	r2, #8
 80068da:	d81b      	bhi.n	8006914 <_strtod_l+0x310>
 80068dc:	3b30      	subs	r3, #48	; 0x30
 80068de:	930e      	str	r3, [sp, #56]	; 0x38
 80068e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068e2:	9306      	str	r3, [sp, #24]
 80068e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	001a      	movs	r2, r3
 80068ee:	3a30      	subs	r2, #48	; 0x30
 80068f0:	2a09      	cmp	r2, #9
 80068f2:	d93a      	bls.n	800696a <_strtod_l+0x366>
 80068f4:	9a06      	ldr	r2, [sp, #24]
 80068f6:	1a8a      	subs	r2, r1, r2
 80068f8:	49b2      	ldr	r1, [pc, #712]	; (8006bc4 <_strtod_l+0x5c0>)
 80068fa:	9106      	str	r1, [sp, #24]
 80068fc:	2a08      	cmp	r2, #8
 80068fe:	dc04      	bgt.n	800690a <_strtod_l+0x306>
 8006900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006902:	9206      	str	r2, [sp, #24]
 8006904:	428a      	cmp	r2, r1
 8006906:	dd00      	ble.n	800690a <_strtod_l+0x306>
 8006908:	9106      	str	r1, [sp, #24]
 800690a:	2c00      	cmp	r4, #0
 800690c:	d002      	beq.n	8006914 <_strtod_l+0x310>
 800690e:	9a06      	ldr	r2, [sp, #24]
 8006910:	4252      	negs	r2, r2
 8006912:	9206      	str	r2, [sp, #24]
 8006914:	9a05      	ldr	r2, [sp, #20]
 8006916:	2a00      	cmp	r2, #0
 8006918:	d14d      	bne.n	80069b6 <_strtod_l+0x3b2>
 800691a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691c:	4310      	orrs	r0, r2
 800691e:	d000      	beq.n	8006922 <_strtod_l+0x31e>
 8006920:	e6ab      	b.n	800667a <_strtod_l+0x76>
 8006922:	4662      	mov	r2, ip
 8006924:	2a00      	cmp	r2, #0
 8006926:	d000      	beq.n	800692a <_strtod_l+0x326>
 8006928:	e6c5      	b.n	80066b6 <_strtod_l+0xb2>
 800692a:	2b69      	cmp	r3, #105	; 0x69
 800692c:	d027      	beq.n	800697e <_strtod_l+0x37a>
 800692e:	dc23      	bgt.n	8006978 <_strtod_l+0x374>
 8006930:	2b49      	cmp	r3, #73	; 0x49
 8006932:	d024      	beq.n	800697e <_strtod_l+0x37a>
 8006934:	2b4e      	cmp	r3, #78	; 0x4e
 8006936:	d000      	beq.n	800693a <_strtod_l+0x336>
 8006938:	e6bd      	b.n	80066b6 <_strtod_l+0xb2>
 800693a:	49a3      	ldr	r1, [pc, #652]	; (8006bc8 <_strtod_l+0x5c4>)
 800693c:	a81b      	add	r0, sp, #108	; 0x6c
 800693e:	f002 ffa7 	bl	8009890 <__match>
 8006942:	2800      	cmp	r0, #0
 8006944:	d100      	bne.n	8006948 <_strtod_l+0x344>
 8006946:	e6b6      	b.n	80066b6 <_strtod_l+0xb2>
 8006948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b28      	cmp	r3, #40	; 0x28
 800694e:	d12c      	bne.n	80069aa <_strtod_l+0x3a6>
 8006950:	499e      	ldr	r1, [pc, #632]	; (8006bcc <_strtod_l+0x5c8>)
 8006952:	aa1e      	add	r2, sp, #120	; 0x78
 8006954:	a81b      	add	r0, sp, #108	; 0x6c
 8006956:	f002 ffaf 	bl	80098b8 <__hexnan>
 800695a:	2805      	cmp	r0, #5
 800695c:	d125      	bne.n	80069aa <_strtod_l+0x3a6>
 800695e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006960:	4a9b      	ldr	r2, [pc, #620]	; (8006bd0 <_strtod_l+0x5cc>)
 8006962:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8006964:	431a      	orrs	r2, r3
 8006966:	0017      	movs	r7, r2
 8006968:	e687      	b.n	800667a <_strtod_l+0x76>
 800696a:	220a      	movs	r2, #10
 800696c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800696e:	434a      	muls	r2, r1
 8006970:	18d2      	adds	r2, r2, r3
 8006972:	3a30      	subs	r2, #48	; 0x30
 8006974:	920e      	str	r2, [sp, #56]	; 0x38
 8006976:	e7b5      	b.n	80068e4 <_strtod_l+0x2e0>
 8006978:	2b6e      	cmp	r3, #110	; 0x6e
 800697a:	d0de      	beq.n	800693a <_strtod_l+0x336>
 800697c:	e69b      	b.n	80066b6 <_strtod_l+0xb2>
 800697e:	4995      	ldr	r1, [pc, #596]	; (8006bd4 <_strtod_l+0x5d0>)
 8006980:	a81b      	add	r0, sp, #108	; 0x6c
 8006982:	f002 ff85 	bl	8009890 <__match>
 8006986:	2800      	cmp	r0, #0
 8006988:	d100      	bne.n	800698c <_strtod_l+0x388>
 800698a:	e694      	b.n	80066b6 <_strtod_l+0xb2>
 800698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800698e:	4992      	ldr	r1, [pc, #584]	; (8006bd8 <_strtod_l+0x5d4>)
 8006990:	3b01      	subs	r3, #1
 8006992:	a81b      	add	r0, sp, #108	; 0x6c
 8006994:	931b      	str	r3, [sp, #108]	; 0x6c
 8006996:	f002 ff7b 	bl	8009890 <__match>
 800699a:	2800      	cmp	r0, #0
 800699c:	d102      	bne.n	80069a4 <_strtod_l+0x3a0>
 800699e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069a0:	3301      	adds	r3, #1
 80069a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80069a4:	2600      	movs	r6, #0
 80069a6:	4f8a      	ldr	r7, [pc, #552]	; (8006bd0 <_strtod_l+0x5cc>)
 80069a8:	e667      	b.n	800667a <_strtod_l+0x76>
 80069aa:	488c      	ldr	r0, [pc, #560]	; (8006bdc <_strtod_l+0x5d8>)
 80069ac:	f001 fdde 	bl	800856c <nan>
 80069b0:	0006      	movs	r6, r0
 80069b2:	000f      	movs	r7, r1
 80069b4:	e661      	b.n	800667a <_strtod_l+0x76>
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	9309      	str	r3, [sp, #36]	; 0x24
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <_strtod_l+0x3c4>
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	9c05      	ldr	r4, [sp, #20]
 80069ca:	2c10      	cmp	r4, #16
 80069cc:	dd00      	ble.n	80069d0 <_strtod_l+0x3cc>
 80069ce:	2410      	movs	r4, #16
 80069d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069d2:	f7fb fce5 	bl	80023a0 <__aeabi_ui2d>
 80069d6:	9b05      	ldr	r3, [sp, #20]
 80069d8:	0006      	movs	r6, r0
 80069da:	000f      	movs	r7, r1
 80069dc:	2b09      	cmp	r3, #9
 80069de:	dd15      	ble.n	8006a0c <_strtod_l+0x408>
 80069e0:	0022      	movs	r2, r4
 80069e2:	4b7f      	ldr	r3, [pc, #508]	; (8006be0 <_strtod_l+0x5dc>)
 80069e4:	3a09      	subs	r2, #9
 80069e6:	00d2      	lsls	r2, r2, #3
 80069e8:	189b      	adds	r3, r3, r2
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f7fa fe0f 	bl	8001610 <__aeabi_dmul>
 80069f2:	0006      	movs	r6, r0
 80069f4:	0028      	movs	r0, r5
 80069f6:	000f      	movs	r7, r1
 80069f8:	f7fb fcd2 	bl	80023a0 <__aeabi_ui2d>
 80069fc:	0002      	movs	r2, r0
 80069fe:	000b      	movs	r3, r1
 8006a00:	0030      	movs	r0, r6
 8006a02:	0039      	movs	r1, r7
 8006a04:	f7f9 feaa 	bl	800075c <__aeabi_dadd>
 8006a08:	0006      	movs	r6, r0
 8006a0a:	000f      	movs	r7, r1
 8006a0c:	9b05      	ldr	r3, [sp, #20]
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	dc39      	bgt.n	8006a86 <_strtod_l+0x482>
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d100      	bne.n	8006a1a <_strtod_l+0x416>
 8006a18:	e62f      	b.n	800667a <_strtod_l+0x76>
 8006a1a:	dd24      	ble.n	8006a66 <_strtod_l+0x462>
 8006a1c:	2b16      	cmp	r3, #22
 8006a1e:	dc09      	bgt.n	8006a34 <_strtod_l+0x430>
 8006a20:	496f      	ldr	r1, [pc, #444]	; (8006be0 <_strtod_l+0x5dc>)
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	18c9      	adds	r1, r1, r3
 8006a26:	0032      	movs	r2, r6
 8006a28:	6808      	ldr	r0, [r1, #0]
 8006a2a:	6849      	ldr	r1, [r1, #4]
 8006a2c:	003b      	movs	r3, r7
 8006a2e:	f7fa fdef 	bl	8001610 <__aeabi_dmul>
 8006a32:	e7bd      	b.n	80069b0 <_strtod_l+0x3ac>
 8006a34:	2325      	movs	r3, #37	; 0x25
 8006a36:	9a05      	ldr	r2, [sp, #20]
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	db22      	blt.n	8006a86 <_strtod_l+0x482>
 8006a40:	240f      	movs	r4, #15
 8006a42:	9b05      	ldr	r3, [sp, #20]
 8006a44:	4d66      	ldr	r5, [pc, #408]	; (8006be0 <_strtod_l+0x5dc>)
 8006a46:	1ae4      	subs	r4, r4, r3
 8006a48:	00e1      	lsls	r1, r4, #3
 8006a4a:	1869      	adds	r1, r5, r1
 8006a4c:	0032      	movs	r2, r6
 8006a4e:	6808      	ldr	r0, [r1, #0]
 8006a50:	6849      	ldr	r1, [r1, #4]
 8006a52:	003b      	movs	r3, r7
 8006a54:	f7fa fddc 	bl	8001610 <__aeabi_dmul>
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	1b1c      	subs	r4, r3, r4
 8006a5c:	00e4      	lsls	r4, r4, #3
 8006a5e:	192d      	adds	r5, r5, r4
 8006a60:	682a      	ldr	r2, [r5, #0]
 8006a62:	686b      	ldr	r3, [r5, #4]
 8006a64:	e7e3      	b.n	8006a2e <_strtod_l+0x42a>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	3316      	adds	r3, #22
 8006a6a:	db0c      	blt.n	8006a86 <_strtod_l+0x482>
 8006a6c:	9906      	ldr	r1, [sp, #24]
 8006a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a70:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <_strtod_l+0x5dc>)
 8006a72:	1a52      	subs	r2, r2, r1
 8006a74:	00d2      	lsls	r2, r2, #3
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	0030      	movs	r0, r6
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	0039      	movs	r1, r7
 8006a80:	f7fa f9cc 	bl	8000e1c <__aeabi_ddiv>
 8006a84:	e794      	b.n	80069b0 <_strtod_l+0x3ac>
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	1b1c      	subs	r4, r3, r4
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	18e4      	adds	r4, r4, r3
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	dd72      	ble.n	8006b78 <_strtod_l+0x574>
 8006a92:	220f      	movs	r2, #15
 8006a94:	0023      	movs	r3, r4
 8006a96:	4013      	ands	r3, r2
 8006a98:	4214      	tst	r4, r2
 8006a9a:	d00a      	beq.n	8006ab2 <_strtod_l+0x4ae>
 8006a9c:	4950      	ldr	r1, [pc, #320]	; (8006be0 <_strtod_l+0x5dc>)
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	18c9      	adds	r1, r1, r3
 8006aa2:	0032      	movs	r2, r6
 8006aa4:	6808      	ldr	r0, [r1, #0]
 8006aa6:	6849      	ldr	r1, [r1, #4]
 8006aa8:	003b      	movs	r3, r7
 8006aaa:	f7fa fdb1 	bl	8001610 <__aeabi_dmul>
 8006aae:	0006      	movs	r6, r0
 8006ab0:	000f      	movs	r7, r1
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	439c      	bics	r4, r3
 8006ab6:	d04a      	beq.n	8006b4e <_strtod_l+0x54a>
 8006ab8:	3326      	adds	r3, #38	; 0x26
 8006aba:	33ff      	adds	r3, #255	; 0xff
 8006abc:	429c      	cmp	r4, r3
 8006abe:	dd22      	ble.n	8006b06 <_strtod_l+0x502>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	9306      	str	r3, [sp, #24]
 8006ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ac8:	9308      	str	r3, [sp, #32]
 8006aca:	2322      	movs	r3, #34	; 0x22
 8006acc:	2600      	movs	r6, #0
 8006ace:	9a04      	ldr	r2, [sp, #16]
 8006ad0:	4f3f      	ldr	r7, [pc, #252]	; (8006bd0 <_strtod_l+0x5cc>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad6:	42b3      	cmp	r3, r6
 8006ad8:	d100      	bne.n	8006adc <_strtod_l+0x4d8>
 8006ada:	e5ce      	b.n	800667a <_strtod_l+0x76>
 8006adc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ade:	9804      	ldr	r0, [sp, #16]
 8006ae0:	f002 ffe8 	bl	8009ab4 <_Bfree>
 8006ae4:	9908      	ldr	r1, [sp, #32]
 8006ae6:	9804      	ldr	r0, [sp, #16]
 8006ae8:	f002 ffe4 	bl	8009ab4 <_Bfree>
 8006aec:	9906      	ldr	r1, [sp, #24]
 8006aee:	9804      	ldr	r0, [sp, #16]
 8006af0:	f002 ffe0 	bl	8009ab4 <_Bfree>
 8006af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006af6:	9804      	ldr	r0, [sp, #16]
 8006af8:	f002 ffdc 	bl	8009ab4 <_Bfree>
 8006afc:	9905      	ldr	r1, [sp, #20]
 8006afe:	9804      	ldr	r0, [sp, #16]
 8006b00:	f002 ffd8 	bl	8009ab4 <_Bfree>
 8006b04:	e5b9      	b.n	800667a <_strtod_l+0x76>
 8006b06:	2300      	movs	r3, #0
 8006b08:	0030      	movs	r0, r6
 8006b0a:	0039      	movs	r1, r7
 8006b0c:	4d35      	ldr	r5, [pc, #212]	; (8006be4 <_strtod_l+0x5e0>)
 8006b0e:	1124      	asrs	r4, r4, #4
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	2c01      	cmp	r4, #1
 8006b14:	dc1e      	bgt.n	8006b54 <_strtod_l+0x550>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <_strtod_l+0x51a>
 8006b1a:	0006      	movs	r6, r0
 8006b1c:	000f      	movs	r7, r1
 8006b1e:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <_strtod_l+0x5e4>)
 8006b20:	9a07      	ldr	r2, [sp, #28]
 8006b22:	18ff      	adds	r7, r7, r3
 8006b24:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <_strtod_l+0x5e0>)
 8006b26:	00d2      	lsls	r2, r2, #3
 8006b28:	189d      	adds	r5, r3, r2
 8006b2a:	6828      	ldr	r0, [r5, #0]
 8006b2c:	6869      	ldr	r1, [r5, #4]
 8006b2e:	0032      	movs	r2, r6
 8006b30:	003b      	movs	r3, r7
 8006b32:	f7fa fd6d 	bl	8001610 <__aeabi_dmul>
 8006b36:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <_strtod_l+0x5cc>)
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <_strtod_l+0x5e8>)
 8006b3a:	0006      	movs	r6, r0
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d8be      	bhi.n	8006ac0 <_strtod_l+0x4bc>
 8006b42:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <_strtod_l+0x5ec>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d913      	bls.n	8006b70 <_strtod_l+0x56c>
 8006b48:	2601      	movs	r6, #1
 8006b4a:	4f2a      	ldr	r7, [pc, #168]	; (8006bf4 <_strtod_l+0x5f0>)
 8006b4c:	4276      	negs	r6, r6
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9307      	str	r3, [sp, #28]
 8006b52:	e088      	b.n	8006c66 <_strtod_l+0x662>
 8006b54:	2201      	movs	r2, #1
 8006b56:	4214      	tst	r4, r2
 8006b58:	d004      	beq.n	8006b64 <_strtod_l+0x560>
 8006b5a:	682a      	ldr	r2, [r5, #0]
 8006b5c:	686b      	ldr	r3, [r5, #4]
 8006b5e:	f7fa fd57 	bl	8001610 <__aeabi_dmul>
 8006b62:	2301      	movs	r3, #1
 8006b64:	9a07      	ldr	r2, [sp, #28]
 8006b66:	1064      	asrs	r4, r4, #1
 8006b68:	3201      	adds	r2, #1
 8006b6a:	9207      	str	r2, [sp, #28]
 8006b6c:	3508      	adds	r5, #8
 8006b6e:	e7d0      	b.n	8006b12 <_strtod_l+0x50e>
 8006b70:	23d4      	movs	r3, #212	; 0xd4
 8006b72:	049b      	lsls	r3, r3, #18
 8006b74:	18cf      	adds	r7, r1, r3
 8006b76:	e7ea      	b.n	8006b4e <_strtod_l+0x54a>
 8006b78:	2c00      	cmp	r4, #0
 8006b7a:	d0e8      	beq.n	8006b4e <_strtod_l+0x54a>
 8006b7c:	4264      	negs	r4, r4
 8006b7e:	230f      	movs	r3, #15
 8006b80:	0022      	movs	r2, r4
 8006b82:	401a      	ands	r2, r3
 8006b84:	421c      	tst	r4, r3
 8006b86:	d00a      	beq.n	8006b9e <_strtod_l+0x59a>
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <_strtod_l+0x5dc>)
 8006b8a:	00d2      	lsls	r2, r2, #3
 8006b8c:	189b      	adds	r3, r3, r2
 8006b8e:	0030      	movs	r0, r6
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	0039      	movs	r1, r7
 8006b96:	f7fa f941 	bl	8000e1c <__aeabi_ddiv>
 8006b9a:	0006      	movs	r6, r0
 8006b9c:	000f      	movs	r7, r1
 8006b9e:	1124      	asrs	r4, r4, #4
 8006ba0:	d0d5      	beq.n	8006b4e <_strtod_l+0x54a>
 8006ba2:	2c1f      	cmp	r4, #31
 8006ba4:	dd28      	ble.n	8006bf8 <_strtod_l+0x5f4>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	9306      	str	r3, [sp, #24]
 8006bac:	930d      	str	r3, [sp, #52]	; 0x34
 8006bae:	9308      	str	r3, [sp, #32]
 8006bb0:	2322      	movs	r3, #34	; 0x22
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bba:	2700      	movs	r7, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d18d      	bne.n	8006adc <_strtod_l+0x4d8>
 8006bc0:	e55b      	b.n	800667a <_strtod_l+0x76>
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	00004e1f 	.word	0x00004e1f
 8006bc8:	0800ba7e 	.word	0x0800ba7e
 8006bcc:	0800b930 	.word	0x0800b930
 8006bd0:	7ff00000 	.word	0x7ff00000
 8006bd4:	0800ba76 	.word	0x0800ba76
 8006bd8:	0800bab3 	.word	0x0800bab3
 8006bdc:	0800bd5b 	.word	0x0800bd5b
 8006be0:	0800bc20 	.word	0x0800bc20
 8006be4:	0800bbf8 	.word	0x0800bbf8
 8006be8:	fcb00000 	.word	0xfcb00000
 8006bec:	7ca00000 	.word	0x7ca00000
 8006bf0:	7c900000 	.word	0x7c900000
 8006bf4:	7fefffff 	.word	0x7fefffff
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	0022      	movs	r2, r4
 8006bfc:	401a      	ands	r2, r3
 8006bfe:	9207      	str	r2, [sp, #28]
 8006c00:	421c      	tst	r4, r3
 8006c02:	d001      	beq.n	8006c08 <_strtod_l+0x604>
 8006c04:	335a      	adds	r3, #90	; 0x5a
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	0030      	movs	r0, r6
 8006c0a:	0039      	movs	r1, r7
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4dc4      	ldr	r5, [pc, #784]	; (8006f20 <_strtod_l+0x91c>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	4214      	tst	r4, r2
 8006c14:	d004      	beq.n	8006c20 <_strtod_l+0x61c>
 8006c16:	682a      	ldr	r2, [r5, #0]
 8006c18:	686b      	ldr	r3, [r5, #4]
 8006c1a:	f7fa fcf9 	bl	8001610 <__aeabi_dmul>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	1064      	asrs	r4, r4, #1
 8006c22:	3508      	adds	r5, #8
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d1f3      	bne.n	8006c10 <_strtod_l+0x60c>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <_strtod_l+0x62c>
 8006c2c:	0006      	movs	r6, r0
 8006c2e:	000f      	movs	r7, r1
 8006c30:	9b07      	ldr	r3, [sp, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <_strtod_l+0x652>
 8006c36:	236b      	movs	r3, #107	; 0x6b
 8006c38:	007a      	lsls	r2, r7, #1
 8006c3a:	0d52      	lsrs	r2, r2, #21
 8006c3c:	0039      	movs	r1, r7
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dd08      	ble.n	8006c56 <_strtod_l+0x652>
 8006c44:	2b1f      	cmp	r3, #31
 8006c46:	dc00      	bgt.n	8006c4a <_strtod_l+0x646>
 8006c48:	e121      	b.n	8006e8e <_strtod_l+0x88a>
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	2b34      	cmp	r3, #52	; 0x34
 8006c4e:	dc00      	bgt.n	8006c52 <_strtod_l+0x64e>
 8006c50:	e116      	b.n	8006e80 <_strtod_l+0x87c>
 8006c52:	27dc      	movs	r7, #220	; 0xdc
 8006c54:	04bf      	lsls	r7, r7, #18
 8006c56:	2200      	movs	r2, #0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	0039      	movs	r1, r7
 8006c5e:	f7f9 fbf3 	bl	8000448 <__aeabi_dcmpeq>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d19f      	bne.n	8006ba6 <_strtod_l+0x5a2>
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	9a08      	ldr	r2, [sp, #32]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	9804      	ldr	r0, [sp, #16]
 8006c72:	f002 ff87 	bl	8009b84 <__s2b>
 8006c76:	900d      	str	r0, [sp, #52]	; 0x34
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d100      	bne.n	8006c7e <_strtod_l+0x67a>
 8006c7c:	e720      	b.n	8006ac0 <_strtod_l+0x4bc>
 8006c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c80:	9906      	ldr	r1, [sp, #24]
 8006c82:	17da      	asrs	r2, r3, #31
 8006c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c86:	1a5b      	subs	r3, r3, r1
 8006c88:	401a      	ands	r2, r3
 8006c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8c:	9215      	str	r2, [sp, #84]	; 0x54
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c92:	17db      	asrs	r3, r3, #31
 8006c94:	401a      	ands	r2, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	9218      	str	r2, [sp, #96]	; 0x60
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca0:	9804      	ldr	r0, [sp, #16]
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	f002 fec2 	bl	8009a2c <_Balloc>
 8006ca8:	9008      	str	r0, [sp, #32]
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d100      	bne.n	8006cb0 <_strtod_l+0x6ac>
 8006cae:	e70c      	b.n	8006aca <_strtod_l+0x4c6>
 8006cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb2:	300c      	adds	r0, #12
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	310c      	adds	r1, #12
 8006cba:	3202      	adds	r2, #2
 8006cbc:	0092      	lsls	r2, r2, #2
 8006cbe:	f001 fc4b 	bl	8008558 <memcpy>
 8006cc2:	ab1e      	add	r3, sp, #120	; 0x78
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	0032      	movs	r2, r6
 8006ccc:	003b      	movs	r3, r7
 8006cce:	9804      	ldr	r0, [sp, #16]
 8006cd0:	9610      	str	r6, [sp, #64]	; 0x40
 8006cd2:	9711      	str	r7, [sp, #68]	; 0x44
 8006cd4:	f003 fa98 	bl	800a208 <__d2b>
 8006cd8:	901c      	str	r0, [sp, #112]	; 0x70
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d100      	bne.n	8006ce0 <_strtod_l+0x6dc>
 8006cde:	e6f4      	b.n	8006aca <_strtod_l+0x4c6>
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	9804      	ldr	r0, [sp, #16]
 8006ce4:	f002 ffe2 	bl	8009cac <__i2b>
 8006ce8:	9006      	str	r0, [sp, #24]
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d100      	bne.n	8006cf0 <_strtod_l+0x6ec>
 8006cee:	e6ec      	b.n	8006aca <_strtod_l+0x4c6>
 8006cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cf4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006cf6:	1ad4      	subs	r4, r2, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db01      	blt.n	8006d00 <_strtod_l+0x6fc>
 8006cfc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006cfe:	195d      	adds	r5, r3, r5
 8006d00:	9907      	ldr	r1, [sp, #28]
 8006d02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d04:	1a5b      	subs	r3, r3, r1
 8006d06:	2136      	movs	r1, #54	; 0x36
 8006d08:	189b      	adds	r3, r3, r2
 8006d0a:	1a8a      	subs	r2, r1, r2
 8006d0c:	4985      	ldr	r1, [pc, #532]	; (8006f24 <_strtod_l+0x920>)
 8006d0e:	2001      	movs	r0, #1
 8006d10:	468c      	mov	ip, r1
 8006d12:	2100      	movs	r1, #0
 8006d14:	3b01      	subs	r3, #1
 8006d16:	9114      	str	r1, [sp, #80]	; 0x50
 8006d18:	9012      	str	r0, [sp, #72]	; 0x48
 8006d1a:	4563      	cmp	r3, ip
 8006d1c:	da07      	bge.n	8006d2e <_strtod_l+0x72a>
 8006d1e:	4661      	mov	r1, ip
 8006d20:	1ac9      	subs	r1, r1, r3
 8006d22:	1a52      	subs	r2, r2, r1
 8006d24:	291f      	cmp	r1, #31
 8006d26:	dd00      	ble.n	8006d2a <_strtod_l+0x726>
 8006d28:	e0b6      	b.n	8006e98 <_strtod_l+0x894>
 8006d2a:	4088      	lsls	r0, r1
 8006d2c:	9012      	str	r0, [sp, #72]	; 0x48
 8006d2e:	18ab      	adds	r3, r5, r2
 8006d30:	930c      	str	r3, [sp, #48]	; 0x30
 8006d32:	18a4      	adds	r4, r4, r2
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d38:	191c      	adds	r4, r3, r4
 8006d3a:	002b      	movs	r3, r5
 8006d3c:	4295      	cmp	r5, r2
 8006d3e:	dd00      	ble.n	8006d42 <_strtod_l+0x73e>
 8006d40:	0013      	movs	r3, r2
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	dd00      	ble.n	8006d48 <_strtod_l+0x744>
 8006d46:	0023      	movs	r3, r4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dd04      	ble.n	8006d56 <_strtod_l+0x752>
 8006d4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d4e:	1ae4      	subs	r4, r4, r3
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	920c      	str	r2, [sp, #48]	; 0x30
 8006d54:	1aed      	subs	r5, r5, r3
 8006d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd17      	ble.n	8006d8c <_strtod_l+0x788>
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	9906      	ldr	r1, [sp, #24]
 8006d60:	9804      	ldr	r0, [sp, #16]
 8006d62:	f003 f86b 	bl	8009e3c <__pow5mult>
 8006d66:	9006      	str	r0, [sp, #24]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d100      	bne.n	8006d6e <_strtod_l+0x76a>
 8006d6c:	e6ad      	b.n	8006aca <_strtod_l+0x4c6>
 8006d6e:	0001      	movs	r1, r0
 8006d70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d72:	9804      	ldr	r0, [sp, #16]
 8006d74:	f002 ffb2 	bl	8009cdc <__multiply>
 8006d78:	900e      	str	r0, [sp, #56]	; 0x38
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d100      	bne.n	8006d80 <_strtod_l+0x77c>
 8006d7e:	e6a4      	b.n	8006aca <_strtod_l+0x4c6>
 8006d80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d82:	9804      	ldr	r0, [sp, #16]
 8006d84:	f002 fe96 	bl	8009ab4 <_Bfree>
 8006d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d8a:	931c      	str	r3, [sp, #112]	; 0x70
 8006d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dd00      	ble.n	8006d94 <_strtod_l+0x790>
 8006d92:	e087      	b.n	8006ea4 <_strtod_l+0x8a0>
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd08      	ble.n	8006dac <_strtod_l+0x7a8>
 8006d9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d9c:	9908      	ldr	r1, [sp, #32]
 8006d9e:	9804      	ldr	r0, [sp, #16]
 8006da0:	f003 f84c 	bl	8009e3c <__pow5mult>
 8006da4:	9008      	str	r0, [sp, #32]
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d100      	bne.n	8006dac <_strtod_l+0x7a8>
 8006daa:	e68e      	b.n	8006aca <_strtod_l+0x4c6>
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	dd08      	ble.n	8006dc2 <_strtod_l+0x7be>
 8006db0:	0022      	movs	r2, r4
 8006db2:	9908      	ldr	r1, [sp, #32]
 8006db4:	9804      	ldr	r0, [sp, #16]
 8006db6:	f003 f89d 	bl	8009ef4 <__lshift>
 8006dba:	9008      	str	r0, [sp, #32]
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d100      	bne.n	8006dc2 <_strtod_l+0x7be>
 8006dc0:	e683      	b.n	8006aca <_strtod_l+0x4c6>
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	dd08      	ble.n	8006dd8 <_strtod_l+0x7d4>
 8006dc6:	002a      	movs	r2, r5
 8006dc8:	9906      	ldr	r1, [sp, #24]
 8006dca:	9804      	ldr	r0, [sp, #16]
 8006dcc:	f003 f892 	bl	8009ef4 <__lshift>
 8006dd0:	9006      	str	r0, [sp, #24]
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d100      	bne.n	8006dd8 <_strtod_l+0x7d4>
 8006dd6:	e678      	b.n	8006aca <_strtod_l+0x4c6>
 8006dd8:	9a08      	ldr	r2, [sp, #32]
 8006dda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ddc:	9804      	ldr	r0, [sp, #16]
 8006dde:	f003 f913 	bl	800a008 <__mdiff>
 8006de2:	9005      	str	r0, [sp, #20]
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d100      	bne.n	8006dea <_strtod_l+0x7e6>
 8006de8:	e66f      	b.n	8006aca <_strtod_l+0x4c6>
 8006dea:	2200      	movs	r2, #0
 8006dec:	68c3      	ldr	r3, [r0, #12]
 8006dee:	9906      	ldr	r1, [sp, #24]
 8006df0:	60c2      	str	r2, [r0, #12]
 8006df2:	930c      	str	r3, [sp, #48]	; 0x30
 8006df4:	f003 f8ec 	bl	8009fd0 <__mcmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	da5d      	bge.n	8006eb8 <_strtod_l+0x8b4>
 8006dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dfe:	4333      	orrs	r3, r6
 8006e00:	d000      	beq.n	8006e04 <_strtod_l+0x800>
 8006e02:	e088      	b.n	8006f16 <_strtod_l+0x912>
 8006e04:	033b      	lsls	r3, r7, #12
 8006e06:	d000      	beq.n	8006e0a <_strtod_l+0x806>
 8006e08:	e085      	b.n	8006f16 <_strtod_l+0x912>
 8006e0a:	22d6      	movs	r2, #214	; 0xd6
 8006e0c:	4b46      	ldr	r3, [pc, #280]	; (8006f28 <_strtod_l+0x924>)
 8006e0e:	04d2      	lsls	r2, r2, #19
 8006e10:	403b      	ands	r3, r7
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d97f      	bls.n	8006f16 <_strtod_l+0x912>
 8006e16:	9b05      	ldr	r3, [sp, #20]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <_strtod_l+0x822>
 8006e1e:	9b05      	ldr	r3, [sp, #20]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	dd77      	ble.n	8006f16 <_strtod_l+0x912>
 8006e26:	9905      	ldr	r1, [sp, #20]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	9804      	ldr	r0, [sp, #16]
 8006e2c:	f003 f862 	bl	8009ef4 <__lshift>
 8006e30:	9906      	ldr	r1, [sp, #24]
 8006e32:	9005      	str	r0, [sp, #20]
 8006e34:	f003 f8cc 	bl	8009fd0 <__mcmp>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	dd6c      	ble.n	8006f16 <_strtod_l+0x912>
 8006e3c:	9907      	ldr	r1, [sp, #28]
 8006e3e:	003b      	movs	r3, r7
 8006e40:	4a39      	ldr	r2, [pc, #228]	; (8006f28 <_strtod_l+0x924>)
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d100      	bne.n	8006e48 <_strtod_l+0x844>
 8006e46:	e094      	b.n	8006f72 <_strtod_l+0x96e>
 8006e48:	0011      	movs	r1, r2
 8006e4a:	20d6      	movs	r0, #214	; 0xd6
 8006e4c:	4039      	ands	r1, r7
 8006e4e:	04c0      	lsls	r0, r0, #19
 8006e50:	4281      	cmp	r1, r0
 8006e52:	dd00      	ble.n	8006e56 <_strtod_l+0x852>
 8006e54:	e08d      	b.n	8006f72 <_strtod_l+0x96e>
 8006e56:	23dc      	movs	r3, #220	; 0xdc
 8006e58:	049b      	lsls	r3, r3, #18
 8006e5a:	4299      	cmp	r1, r3
 8006e5c:	dc00      	bgt.n	8006e60 <_strtod_l+0x85c>
 8006e5e:	e6a7      	b.n	8006bb0 <_strtod_l+0x5ac>
 8006e60:	0030      	movs	r0, r6
 8006e62:	0039      	movs	r1, r7
 8006e64:	4b31      	ldr	r3, [pc, #196]	; (8006f2c <_strtod_l+0x928>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	f7fa fbd2 	bl	8001610 <__aeabi_dmul>
 8006e6c:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <_strtod_l+0x924>)
 8006e6e:	0006      	movs	r6, r0
 8006e70:	000f      	movs	r7, r1
 8006e72:	420b      	tst	r3, r1
 8006e74:	d000      	beq.n	8006e78 <_strtod_l+0x874>
 8006e76:	e631      	b.n	8006adc <_strtod_l+0x4d8>
 8006e78:	2322      	movs	r3, #34	; 0x22
 8006e7a:	9a04      	ldr	r2, [sp, #16]
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	e62d      	b.n	8006adc <_strtod_l+0x4d8>
 8006e80:	234b      	movs	r3, #75	; 0x4b
 8006e82:	1a9a      	subs	r2, r3, r2
 8006e84:	3b4c      	subs	r3, #76	; 0x4c
 8006e86:	4093      	lsls	r3, r2
 8006e88:	4019      	ands	r1, r3
 8006e8a:	000f      	movs	r7, r1
 8006e8c:	e6e3      	b.n	8006c56 <_strtod_l+0x652>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4252      	negs	r2, r2
 8006e92:	409a      	lsls	r2, r3
 8006e94:	4016      	ands	r6, r2
 8006e96:	e6de      	b.n	8006c56 <_strtod_l+0x652>
 8006e98:	4925      	ldr	r1, [pc, #148]	; (8006f30 <_strtod_l+0x92c>)
 8006e9a:	1acb      	subs	r3, r1, r3
 8006e9c:	0001      	movs	r1, r0
 8006e9e:	4099      	lsls	r1, r3
 8006ea0:	9114      	str	r1, [sp, #80]	; 0x50
 8006ea2:	e743      	b.n	8006d2c <_strtod_l+0x728>
 8006ea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ea8:	9804      	ldr	r0, [sp, #16]
 8006eaa:	f003 f823 	bl	8009ef4 <__lshift>
 8006eae:	901c      	str	r0, [sp, #112]	; 0x70
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d000      	beq.n	8006eb6 <_strtod_l+0x8b2>
 8006eb4:	e76e      	b.n	8006d94 <_strtod_l+0x790>
 8006eb6:	e608      	b.n	8006aca <_strtod_l+0x4c6>
 8006eb8:	970e      	str	r7, [sp, #56]	; 0x38
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d177      	bne.n	8006fae <_strtod_l+0x9aa>
 8006ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec0:	033b      	lsls	r3, r7, #12
 8006ec2:	0b1b      	lsrs	r3, r3, #12
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	d039      	beq.n	8006f3c <_strtod_l+0x938>
 8006ec8:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <_strtod_l+0x930>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d139      	bne.n	8006f42 <_strtod_l+0x93e>
 8006ece:	2101      	movs	r1, #1
 8006ed0:	9b07      	ldr	r3, [sp, #28]
 8006ed2:	4249      	negs	r1, r1
 8006ed4:	0032      	movs	r2, r6
 8006ed6:	0008      	movs	r0, r1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <_strtod_l+0x8f0>
 8006edc:	24d4      	movs	r4, #212	; 0xd4
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <_strtod_l+0x924>)
 8006ee0:	0008      	movs	r0, r1
 8006ee2:	403b      	ands	r3, r7
 8006ee4:	04e4      	lsls	r4, r4, #19
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	d804      	bhi.n	8006ef4 <_strtod_l+0x8f0>
 8006eea:	306c      	adds	r0, #108	; 0x6c
 8006eec:	0d1b      	lsrs	r3, r3, #20
 8006eee:	1ac3      	subs	r3, r0, r3
 8006ef0:	4099      	lsls	r1, r3
 8006ef2:	0008      	movs	r0, r1
 8006ef4:	4282      	cmp	r2, r0
 8006ef6:	d124      	bne.n	8006f42 <_strtod_l+0x93e>
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <_strtod_l+0x934>)
 8006efa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006efc:	4299      	cmp	r1, r3
 8006efe:	d102      	bne.n	8006f06 <_strtod_l+0x902>
 8006f00:	3201      	adds	r2, #1
 8006f02:	d100      	bne.n	8006f06 <_strtod_l+0x902>
 8006f04:	e5e1      	b.n	8006aca <_strtod_l+0x4c6>
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <_strtod_l+0x924>)
 8006f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	0013      	movs	r3, r2
 8006f10:	2280      	movs	r2, #128	; 0x80
 8006f12:	0352      	lsls	r2, r2, #13
 8006f14:	189f      	adds	r7, r3, r2
 8006f16:	9b07      	ldr	r3, [sp, #28]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1a1      	bne.n	8006e60 <_strtod_l+0x85c>
 8006f1c:	e5de      	b.n	8006adc <_strtod_l+0x4d8>
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	0800b948 	.word	0x0800b948
 8006f24:	fffffc02 	.word	0xfffffc02
 8006f28:	7ff00000 	.word	0x7ff00000
 8006f2c:	39500000 	.word	0x39500000
 8006f30:	fffffbe2 	.word	0xfffffbe2
 8006f34:	000fffff 	.word	0x000fffff
 8006f38:	7fefffff 	.word	0x7fefffff
 8006f3c:	4333      	orrs	r3, r6
 8006f3e:	d100      	bne.n	8006f42 <_strtod_l+0x93e>
 8006f40:	e77c      	b.n	8006e3c <_strtod_l+0x838>
 8006f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01d      	beq.n	8006f84 <_strtod_l+0x980>
 8006f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f4c:	4213      	tst	r3, r2
 8006f4e:	d0e2      	beq.n	8006f16 <_strtod_l+0x912>
 8006f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f52:	0030      	movs	r0, r6
 8006f54:	0039      	movs	r1, r7
 8006f56:	9a07      	ldr	r2, [sp, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <_strtod_l+0x988>
 8006f5c:	f7ff fb3a 	bl	80065d4 <sulp>
 8006f60:	0002      	movs	r2, r0
 8006f62:	000b      	movs	r3, r1
 8006f64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f68:	f7f9 fbf8 	bl	800075c <__aeabi_dadd>
 8006f6c:	0006      	movs	r6, r0
 8006f6e:	000f      	movs	r7, r1
 8006f70:	e7d1      	b.n	8006f16 <_strtod_l+0x912>
 8006f72:	2601      	movs	r6, #1
 8006f74:	4013      	ands	r3, r2
 8006f76:	4a98      	ldr	r2, [pc, #608]	; (80071d8 <_strtod_l+0xbd4>)
 8006f78:	4276      	negs	r6, r6
 8006f7a:	189b      	adds	r3, r3, r2
 8006f7c:	4a97      	ldr	r2, [pc, #604]	; (80071dc <_strtod_l+0xbd8>)
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	0017      	movs	r7, r2
 8006f82:	e7c8      	b.n	8006f16 <_strtod_l+0x912>
 8006f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f86:	4233      	tst	r3, r6
 8006f88:	d0c5      	beq.n	8006f16 <_strtod_l+0x912>
 8006f8a:	e7e1      	b.n	8006f50 <_strtod_l+0x94c>
 8006f8c:	f7ff fb22 	bl	80065d4 <sulp>
 8006f90:	0002      	movs	r2, r0
 8006f92:	000b      	movs	r3, r1
 8006f94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f98:	f7fa fdfc 	bl	8001b94 <__aeabi_dsub>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	0006      	movs	r6, r0
 8006fa2:	000f      	movs	r7, r1
 8006fa4:	f7f9 fa50 	bl	8000448 <__aeabi_dcmpeq>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d0b4      	beq.n	8006f16 <_strtod_l+0x912>
 8006fac:	e600      	b.n	8006bb0 <_strtod_l+0x5ac>
 8006fae:	9906      	ldr	r1, [sp, #24]
 8006fb0:	9805      	ldr	r0, [sp, #20]
 8006fb2:	f003 f989 	bl	800a2c8 <__ratio>
 8006fb6:	2380      	movs	r3, #128	; 0x80
 8006fb8:	2200      	movs	r2, #0
 8006fba:	05db      	lsls	r3, r3, #23
 8006fbc:	0004      	movs	r4, r0
 8006fbe:	000d      	movs	r5, r1
 8006fc0:	f7f9 fa52 	bl	8000468 <__aeabi_dcmple>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d06d      	beq.n	80070a4 <_strtod_l+0xaa0>
 8006fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d000      	beq.n	8006fd0 <_strtod_l+0x9cc>
 8006fce:	e07e      	b.n	80070ce <_strtod_l+0xaca>
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	d158      	bne.n	8007086 <_strtod_l+0xa82>
 8006fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fd6:	031b      	lsls	r3, r3, #12
 8006fd8:	d000      	beq.n	8006fdc <_strtod_l+0x9d8>
 8006fda:	e07f      	b.n	80070dc <_strtod_l+0xad8>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	0020      	movs	r0, r4
 8006fe0:	0029      	movs	r1, r5
 8006fe2:	4b7f      	ldr	r3, [pc, #508]	; (80071e0 <_strtod_l+0xbdc>)
 8006fe4:	f7f9 fa36 	bl	8000454 <__aeabi_dcmplt>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d158      	bne.n	800709e <_strtod_l+0xa9a>
 8006fec:	0020      	movs	r0, r4
 8006fee:	0029      	movs	r1, r5
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4b7c      	ldr	r3, [pc, #496]	; (80071e4 <_strtod_l+0xbe0>)
 8006ff4:	f7fa fb0c 	bl	8001610 <__aeabi_dmul>
 8006ff8:	0004      	movs	r4, r0
 8006ffa:	000d      	movs	r5, r1
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	940a      	str	r4, [sp, #40]	; 0x28
 8007002:	18eb      	adds	r3, r5, r3
 8007004:	930b      	str	r3, [sp, #44]	; 0x2c
 8007006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	9212      	str	r2, [sp, #72]	; 0x48
 800700c:	9313      	str	r3, [sp, #76]	; 0x4c
 800700e:	4a76      	ldr	r2, [pc, #472]	; (80071e8 <_strtod_l+0xbe4>)
 8007010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007012:	4013      	ands	r3, r2
 8007014:	9314      	str	r3, [sp, #80]	; 0x50
 8007016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007018:	4b74      	ldr	r3, [pc, #464]	; (80071ec <_strtod_l+0xbe8>)
 800701a:	429a      	cmp	r2, r3
 800701c:	d000      	beq.n	8007020 <_strtod_l+0xa1c>
 800701e:	e091      	b.n	8007144 <_strtod_l+0xb40>
 8007020:	4a73      	ldr	r2, [pc, #460]	; (80071f0 <_strtod_l+0xbec>)
 8007022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007024:	4694      	mov	ip, r2
 8007026:	4463      	add	r3, ip
 8007028:	001f      	movs	r7, r3
 800702a:	0030      	movs	r0, r6
 800702c:	0019      	movs	r1, r3
 800702e:	f003 f883 	bl	800a138 <__ulp>
 8007032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007036:	f7fa faeb 	bl	8001610 <__aeabi_dmul>
 800703a:	0032      	movs	r2, r6
 800703c:	003b      	movs	r3, r7
 800703e:	f7f9 fb8d 	bl	800075c <__aeabi_dadd>
 8007042:	4a69      	ldr	r2, [pc, #420]	; (80071e8 <_strtod_l+0xbe4>)
 8007044:	4b6b      	ldr	r3, [pc, #428]	; (80071f4 <_strtod_l+0xbf0>)
 8007046:	0006      	movs	r6, r0
 8007048:	400a      	ands	r2, r1
 800704a:	429a      	cmp	r2, r3
 800704c:	d949      	bls.n	80070e2 <_strtod_l+0xade>
 800704e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007050:	4b69      	ldr	r3, [pc, #420]	; (80071f8 <_strtod_l+0xbf4>)
 8007052:	429a      	cmp	r2, r3
 8007054:	d103      	bne.n	800705e <_strtod_l+0xa5a>
 8007056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007058:	3301      	adds	r3, #1
 800705a:	d100      	bne.n	800705e <_strtod_l+0xa5a>
 800705c:	e535      	b.n	8006aca <_strtod_l+0x4c6>
 800705e:	2601      	movs	r6, #1
 8007060:	4f65      	ldr	r7, [pc, #404]	; (80071f8 <_strtod_l+0xbf4>)
 8007062:	4276      	negs	r6, r6
 8007064:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007066:	9804      	ldr	r0, [sp, #16]
 8007068:	f002 fd24 	bl	8009ab4 <_Bfree>
 800706c:	9908      	ldr	r1, [sp, #32]
 800706e:	9804      	ldr	r0, [sp, #16]
 8007070:	f002 fd20 	bl	8009ab4 <_Bfree>
 8007074:	9906      	ldr	r1, [sp, #24]
 8007076:	9804      	ldr	r0, [sp, #16]
 8007078:	f002 fd1c 	bl	8009ab4 <_Bfree>
 800707c:	9905      	ldr	r1, [sp, #20]
 800707e:	9804      	ldr	r0, [sp, #16]
 8007080:	f002 fd18 	bl	8009ab4 <_Bfree>
 8007084:	e60b      	b.n	8006c9e <_strtod_l+0x69a>
 8007086:	2e01      	cmp	r6, #1
 8007088:	d103      	bne.n	8007092 <_strtod_l+0xa8e>
 800708a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d100      	bne.n	8007092 <_strtod_l+0xa8e>
 8007090:	e58e      	b.n	8006bb0 <_strtod_l+0x5ac>
 8007092:	2300      	movs	r3, #0
 8007094:	4c59      	ldr	r4, [pc, #356]	; (80071fc <_strtod_l+0xbf8>)
 8007096:	930a      	str	r3, [sp, #40]	; 0x28
 8007098:	940b      	str	r4, [sp, #44]	; 0x2c
 800709a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800709c:	e01c      	b.n	80070d8 <_strtod_l+0xad4>
 800709e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80070a0:	4d50      	ldr	r5, [pc, #320]	; (80071e4 <_strtod_l+0xbe0>)
 80070a2:	e7ab      	b.n	8006ffc <_strtod_l+0x9f8>
 80070a4:	2200      	movs	r2, #0
 80070a6:	0020      	movs	r0, r4
 80070a8:	0029      	movs	r1, r5
 80070aa:	4b4e      	ldr	r3, [pc, #312]	; (80071e4 <_strtod_l+0xbe0>)
 80070ac:	f7fa fab0 	bl	8001610 <__aeabi_dmul>
 80070b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070b2:	0004      	movs	r4, r0
 80070b4:	000b      	movs	r3, r1
 80070b6:	000d      	movs	r5, r1
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	d104      	bne.n	80070c6 <_strtod_l+0xac2>
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	0612      	lsls	r2, r2, #24
 80070c0:	900a      	str	r0, [sp, #40]	; 0x28
 80070c2:	188b      	adds	r3, r1, r2
 80070c4:	e79e      	b.n	8007004 <_strtod_l+0xa00>
 80070c6:	0002      	movs	r2, r0
 80070c8:	920a      	str	r2, [sp, #40]	; 0x28
 80070ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80070cc:	e79b      	b.n	8007006 <_strtod_l+0xa02>
 80070ce:	2300      	movs	r3, #0
 80070d0:	4c43      	ldr	r4, [pc, #268]	; (80071e0 <_strtod_l+0xbdc>)
 80070d2:	930a      	str	r3, [sp, #40]	; 0x28
 80070d4:	940b      	str	r4, [sp, #44]	; 0x2c
 80070d6:	2400      	movs	r4, #0
 80070d8:	4d41      	ldr	r5, [pc, #260]	; (80071e0 <_strtod_l+0xbdc>)
 80070da:	e794      	b.n	8007006 <_strtod_l+0xa02>
 80070dc:	2300      	movs	r3, #0
 80070de:	4c47      	ldr	r4, [pc, #284]	; (80071fc <_strtod_l+0xbf8>)
 80070e0:	e7f7      	b.n	80070d2 <_strtod_l+0xace>
 80070e2:	23d4      	movs	r3, #212	; 0xd4
 80070e4:	049b      	lsls	r3, r3, #18
 80070e6:	18cf      	adds	r7, r1, r3
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	970e      	str	r7, [sp, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1b9      	bne.n	8007064 <_strtod_l+0xa60>
 80070f0:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <_strtod_l+0xbe4>)
 80070f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070f4:	403b      	ands	r3, r7
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d1b4      	bne.n	8007064 <_strtod_l+0xa60>
 80070fa:	0020      	movs	r0, r4
 80070fc:	0029      	movs	r1, r5
 80070fe:	f7f9 fa0f 	bl	8000520 <__aeabi_d2lz>
 8007102:	f7f9 fa49 	bl	8000598 <__aeabi_l2d>
 8007106:	0002      	movs	r2, r0
 8007108:	000b      	movs	r3, r1
 800710a:	0020      	movs	r0, r4
 800710c:	0029      	movs	r1, r5
 800710e:	f7fa fd41 	bl	8001b94 <__aeabi_dsub>
 8007112:	033b      	lsls	r3, r7, #12
 8007114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007116:	0b1b      	lsrs	r3, r3, #12
 8007118:	4333      	orrs	r3, r6
 800711a:	4313      	orrs	r3, r2
 800711c:	0004      	movs	r4, r0
 800711e:	000d      	movs	r5, r1
 8007120:	4a37      	ldr	r2, [pc, #220]	; (8007200 <_strtod_l+0xbfc>)
 8007122:	2b00      	cmp	r3, #0
 8007124:	d054      	beq.n	80071d0 <_strtod_l+0xbcc>
 8007126:	4b37      	ldr	r3, [pc, #220]	; (8007204 <_strtod_l+0xc00>)
 8007128:	f7f9 f994 	bl	8000454 <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	d000      	beq.n	8007132 <_strtod_l+0xb2e>
 8007130:	e4d4      	b.n	8006adc <_strtod_l+0x4d8>
 8007132:	0020      	movs	r0, r4
 8007134:	0029      	movs	r1, r5
 8007136:	4a34      	ldr	r2, [pc, #208]	; (8007208 <_strtod_l+0xc04>)
 8007138:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <_strtod_l+0xbe0>)
 800713a:	f7f9 f99f 	bl	800047c <__aeabi_dcmpgt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d090      	beq.n	8007064 <_strtod_l+0xa60>
 8007142:	e4cb      	b.n	8006adc <_strtod_l+0x4d8>
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02b      	beq.n	80071a2 <_strtod_l+0xb9e>
 800714a:	23d4      	movs	r3, #212	; 0xd4
 800714c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800714e:	04db      	lsls	r3, r3, #19
 8007150:	429a      	cmp	r2, r3
 8007152:	d826      	bhi.n	80071a2 <_strtod_l+0xb9e>
 8007154:	0020      	movs	r0, r4
 8007156:	0029      	movs	r1, r5
 8007158:	4a2c      	ldr	r2, [pc, #176]	; (800720c <_strtod_l+0xc08>)
 800715a:	4b2d      	ldr	r3, [pc, #180]	; (8007210 <_strtod_l+0xc0c>)
 800715c:	f7f9 f984 	bl	8000468 <__aeabi_dcmple>
 8007160:	2800      	cmp	r0, #0
 8007162:	d017      	beq.n	8007194 <_strtod_l+0xb90>
 8007164:	0020      	movs	r0, r4
 8007166:	0029      	movs	r1, r5
 8007168:	f7f9 f9bc 	bl	80004e4 <__aeabi_d2uiz>
 800716c:	2800      	cmp	r0, #0
 800716e:	d100      	bne.n	8007172 <_strtod_l+0xb6e>
 8007170:	3001      	adds	r0, #1
 8007172:	f7fb f915 	bl	80023a0 <__aeabi_ui2d>
 8007176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007178:	0004      	movs	r4, r0
 800717a:	000b      	movs	r3, r1
 800717c:	000d      	movs	r5, r1
 800717e:	2a00      	cmp	r2, #0
 8007180:	d122      	bne.n	80071c8 <_strtod_l+0xbc4>
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	0612      	lsls	r2, r2, #24
 8007186:	188b      	adds	r3, r1, r2
 8007188:	9016      	str	r0, [sp, #88]	; 0x58
 800718a:	9317      	str	r3, [sp, #92]	; 0x5c
 800718c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800718e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007190:	9212      	str	r2, [sp, #72]	; 0x48
 8007192:	9313      	str	r3, [sp, #76]	; 0x4c
 8007194:	22d6      	movs	r2, #214	; 0xd6
 8007196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007198:	04d2      	lsls	r2, r2, #19
 800719a:	189b      	adds	r3, r3, r2
 800719c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80071a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80071a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80071a8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80071aa:	f002 ffc5 	bl	800a138 <__ulp>
 80071ae:	0002      	movs	r2, r0
 80071b0:	000b      	movs	r3, r1
 80071b2:	0030      	movs	r0, r6
 80071b4:	0039      	movs	r1, r7
 80071b6:	f7fa fa2b 	bl	8001610 <__aeabi_dmul>
 80071ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071be:	f7f9 facd 	bl	800075c <__aeabi_dadd>
 80071c2:	0006      	movs	r6, r0
 80071c4:	000f      	movs	r7, r1
 80071c6:	e78f      	b.n	80070e8 <_strtod_l+0xae4>
 80071c8:	0002      	movs	r2, r0
 80071ca:	9216      	str	r2, [sp, #88]	; 0x58
 80071cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80071ce:	e7dd      	b.n	800718c <_strtod_l+0xb88>
 80071d0:	4b10      	ldr	r3, [pc, #64]	; (8007214 <_strtod_l+0xc10>)
 80071d2:	f7f9 f93f 	bl	8000454 <__aeabi_dcmplt>
 80071d6:	e7b2      	b.n	800713e <_strtod_l+0xb3a>
 80071d8:	fff00000 	.word	0xfff00000
 80071dc:	000fffff 	.word	0x000fffff
 80071e0:	3ff00000 	.word	0x3ff00000
 80071e4:	3fe00000 	.word	0x3fe00000
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	7fe00000 	.word	0x7fe00000
 80071f0:	fcb00000 	.word	0xfcb00000
 80071f4:	7c9fffff 	.word	0x7c9fffff
 80071f8:	7fefffff 	.word	0x7fefffff
 80071fc:	bff00000 	.word	0xbff00000
 8007200:	94a03595 	.word	0x94a03595
 8007204:	3fdfffff 	.word	0x3fdfffff
 8007208:	35afe535 	.word	0x35afe535
 800720c:	ffc00000 	.word	0xffc00000
 8007210:	41dfffff 	.word	0x41dfffff
 8007214:	3fcfffff 	.word	0x3fcfffff

08007218 <_strtod_r>:
 8007218:	b510      	push	{r4, lr}
 800721a:	4b02      	ldr	r3, [pc, #8]	; (8007224 <_strtod_r+0xc>)
 800721c:	f7ff f9f2 	bl	8006604 <_strtod_l>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	20000024 	.word	0x20000024

08007228 <strtod>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4c04      	ldr	r4, [pc, #16]	; (800723c <strtod+0x14>)
 800722c:	000a      	movs	r2, r1
 800722e:	0001      	movs	r1, r0
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <strtod+0x18>)
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	f7ff f9e6 	bl	8006604 <_strtod_l>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	200001dc 	.word	0x200001dc
 8007240:	20000024 	.word	0x20000024

08007244 <_strtol_l.constprop.0>:
 8007244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007246:	b087      	sub	sp, #28
 8007248:	001e      	movs	r6, r3
 800724a:	9005      	str	r0, [sp, #20]
 800724c:	9101      	str	r1, [sp, #4]
 800724e:	9202      	str	r2, [sp, #8]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d048      	beq.n	80072e6 <_strtol_l.constprop.0+0xa2>
 8007254:	000b      	movs	r3, r1
 8007256:	2e24      	cmp	r6, #36	; 0x24
 8007258:	d845      	bhi.n	80072e6 <_strtol_l.constprop.0+0xa2>
 800725a:	4a3b      	ldr	r2, [pc, #236]	; (8007348 <_strtol_l.constprop.0+0x104>)
 800725c:	2108      	movs	r1, #8
 800725e:	4694      	mov	ip, r2
 8007260:	001a      	movs	r2, r3
 8007262:	4660      	mov	r0, ip
 8007264:	7814      	ldrb	r4, [r2, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	5d00      	ldrb	r0, [r0, r4]
 800726a:	001d      	movs	r5, r3
 800726c:	0007      	movs	r7, r0
 800726e:	400f      	ands	r7, r1
 8007270:	4208      	tst	r0, r1
 8007272:	d1f5      	bne.n	8007260 <_strtol_l.constprop.0+0x1c>
 8007274:	2c2d      	cmp	r4, #45	; 0x2d
 8007276:	d13d      	bne.n	80072f4 <_strtol_l.constprop.0+0xb0>
 8007278:	2701      	movs	r7, #1
 800727a:	781c      	ldrb	r4, [r3, #0]
 800727c:	1c95      	adds	r5, r2, #2
 800727e:	2e00      	cmp	r6, #0
 8007280:	d05e      	beq.n	8007340 <_strtol_l.constprop.0+0xfc>
 8007282:	2e10      	cmp	r6, #16
 8007284:	d109      	bne.n	800729a <_strtol_l.constprop.0+0x56>
 8007286:	2c30      	cmp	r4, #48	; 0x30
 8007288:	d107      	bne.n	800729a <_strtol_l.constprop.0+0x56>
 800728a:	2220      	movs	r2, #32
 800728c:	782b      	ldrb	r3, [r5, #0]
 800728e:	4393      	bics	r3, r2
 8007290:	2b58      	cmp	r3, #88	; 0x58
 8007292:	d150      	bne.n	8007336 <_strtol_l.constprop.0+0xf2>
 8007294:	2610      	movs	r6, #16
 8007296:	786c      	ldrb	r4, [r5, #1]
 8007298:	3502      	adds	r5, #2
 800729a:	4b2c      	ldr	r3, [pc, #176]	; (800734c <_strtol_l.constprop.0+0x108>)
 800729c:	0031      	movs	r1, r6
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	0018      	movs	r0, r3
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	f7f8 ffd0 	bl	8000248 <__aeabi_uidivmod>
 80072a8:	2200      	movs	r2, #0
 80072aa:	9104      	str	r1, [sp, #16]
 80072ac:	2101      	movs	r1, #1
 80072ae:	4684      	mov	ip, r0
 80072b0:	0010      	movs	r0, r2
 80072b2:	4249      	negs	r1, r1
 80072b4:	0023      	movs	r3, r4
 80072b6:	3b30      	subs	r3, #48	; 0x30
 80072b8:	2b09      	cmp	r3, #9
 80072ba:	d903      	bls.n	80072c4 <_strtol_l.constprop.0+0x80>
 80072bc:	3b11      	subs	r3, #17
 80072be:	2b19      	cmp	r3, #25
 80072c0:	d81d      	bhi.n	80072fe <_strtol_l.constprop.0+0xba>
 80072c2:	330a      	adds	r3, #10
 80072c4:	429e      	cmp	r6, r3
 80072c6:	dd1e      	ble.n	8007306 <_strtol_l.constprop.0+0xc2>
 80072c8:	1c54      	adds	r4, r2, #1
 80072ca:	d009      	beq.n	80072e0 <_strtol_l.constprop.0+0x9c>
 80072cc:	000a      	movs	r2, r1
 80072ce:	4584      	cmp	ip, r0
 80072d0:	d306      	bcc.n	80072e0 <_strtol_l.constprop.0+0x9c>
 80072d2:	d102      	bne.n	80072da <_strtol_l.constprop.0+0x96>
 80072d4:	9c04      	ldr	r4, [sp, #16]
 80072d6:	429c      	cmp	r4, r3
 80072d8:	db02      	blt.n	80072e0 <_strtol_l.constprop.0+0x9c>
 80072da:	2201      	movs	r2, #1
 80072dc:	4370      	muls	r0, r6
 80072de:	1818      	adds	r0, r3, r0
 80072e0:	782c      	ldrb	r4, [r5, #0]
 80072e2:	3501      	adds	r5, #1
 80072e4:	e7e6      	b.n	80072b4 <_strtol_l.constprop.0+0x70>
 80072e6:	f001 f8ff 	bl	80084e8 <__errno>
 80072ea:	2316      	movs	r3, #22
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	2000      	movs	r0, #0
 80072f0:	b007      	add	sp, #28
 80072f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f4:	2c2b      	cmp	r4, #43	; 0x2b
 80072f6:	d1c2      	bne.n	800727e <_strtol_l.constprop.0+0x3a>
 80072f8:	781c      	ldrb	r4, [r3, #0]
 80072fa:	1c95      	adds	r5, r2, #2
 80072fc:	e7bf      	b.n	800727e <_strtol_l.constprop.0+0x3a>
 80072fe:	0023      	movs	r3, r4
 8007300:	3b61      	subs	r3, #97	; 0x61
 8007302:	2b19      	cmp	r3, #25
 8007304:	d9dd      	bls.n	80072c2 <_strtol_l.constprop.0+0x7e>
 8007306:	1c53      	adds	r3, r2, #1
 8007308:	d109      	bne.n	800731e <_strtol_l.constprop.0+0xda>
 800730a:	2322      	movs	r3, #34	; 0x22
 800730c:	9a05      	ldr	r2, [sp, #20]
 800730e:	9803      	ldr	r0, [sp, #12]
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	9b02      	ldr	r3, [sp, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0eb      	beq.n	80072f0 <_strtol_l.constprop.0+0xac>
 8007318:	1e6b      	subs	r3, r5, #1
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	e007      	b.n	800732e <_strtol_l.constprop.0+0xea>
 800731e:	2f00      	cmp	r7, #0
 8007320:	d000      	beq.n	8007324 <_strtol_l.constprop.0+0xe0>
 8007322:	4240      	negs	r0, r0
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0e2      	beq.n	80072f0 <_strtol_l.constprop.0+0xac>
 800732a:	2a00      	cmp	r2, #0
 800732c:	d1f4      	bne.n	8007318 <_strtol_l.constprop.0+0xd4>
 800732e:	9b02      	ldr	r3, [sp, #8]
 8007330:	9a01      	ldr	r2, [sp, #4]
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e7dc      	b.n	80072f0 <_strtol_l.constprop.0+0xac>
 8007336:	2430      	movs	r4, #48	; 0x30
 8007338:	2e00      	cmp	r6, #0
 800733a:	d1ae      	bne.n	800729a <_strtol_l.constprop.0+0x56>
 800733c:	3608      	adds	r6, #8
 800733e:	e7ac      	b.n	800729a <_strtol_l.constprop.0+0x56>
 8007340:	2c30      	cmp	r4, #48	; 0x30
 8007342:	d0a2      	beq.n	800728a <_strtol_l.constprop.0+0x46>
 8007344:	260a      	movs	r6, #10
 8007346:	e7a8      	b.n	800729a <_strtol_l.constprop.0+0x56>
 8007348:	0800b971 	.word	0x0800b971
 800734c:	7fffffff 	.word	0x7fffffff

08007350 <_strtol_r>:
 8007350:	b510      	push	{r4, lr}
 8007352:	f7ff ff77 	bl	8007244 <_strtol_l.constprop.0>
 8007356:	bd10      	pop	{r4, pc}

08007358 <strtol>:
 8007358:	b510      	push	{r4, lr}
 800735a:	4c04      	ldr	r4, [pc, #16]	; (800736c <strtol+0x14>)
 800735c:	0013      	movs	r3, r2
 800735e:	000a      	movs	r2, r1
 8007360:	0001      	movs	r1, r0
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	f7ff ff6e 	bl	8007244 <_strtol_l.constprop.0>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	200001dc 	.word	0x200001dc

08007370 <__cvt>:
 8007370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007372:	001e      	movs	r6, r3
 8007374:	2300      	movs	r3, #0
 8007376:	0014      	movs	r4, r2
 8007378:	b08b      	sub	sp, #44	; 0x2c
 800737a:	429e      	cmp	r6, r3
 800737c:	da04      	bge.n	8007388 <__cvt+0x18>
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	0609      	lsls	r1, r1, #24
 8007382:	1873      	adds	r3, r6, r1
 8007384:	001e      	movs	r6, r3
 8007386:	232d      	movs	r3, #45	; 0x2d
 8007388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800738a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800738c:	7013      	strb	r3, [r2, #0]
 800738e:	2320      	movs	r3, #32
 8007390:	2203      	movs	r2, #3
 8007392:	439f      	bics	r7, r3
 8007394:	2f46      	cmp	r7, #70	; 0x46
 8007396:	d007      	beq.n	80073a8 <__cvt+0x38>
 8007398:	003b      	movs	r3, r7
 800739a:	3b45      	subs	r3, #69	; 0x45
 800739c:	4259      	negs	r1, r3
 800739e:	414b      	adcs	r3, r1
 80073a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073a2:	3a01      	subs	r2, #1
 80073a4:	18cb      	adds	r3, r1, r3
 80073a6:	9310      	str	r3, [sp, #64]	; 0x40
 80073a8:	ab09      	add	r3, sp, #36	; 0x24
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	ab08      	add	r3, sp, #32
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073b2:	9200      	str	r2, [sp, #0]
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073b8:	0022      	movs	r2, r4
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	0033      	movs	r3, r6
 80073be:	f001 f96f 	bl	80086a0 <_dtoa_r>
 80073c2:	0005      	movs	r5, r0
 80073c4:	2f47      	cmp	r7, #71	; 0x47
 80073c6:	d102      	bne.n	80073ce <__cvt+0x5e>
 80073c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d528      	bpl.n	8007420 <__cvt+0xb0>
 80073ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073d0:	18eb      	adds	r3, r5, r3
 80073d2:	9307      	str	r3, [sp, #28]
 80073d4:	2f46      	cmp	r7, #70	; 0x46
 80073d6:	d114      	bne.n	8007402 <__cvt+0x92>
 80073d8:	782b      	ldrb	r3, [r5, #0]
 80073da:	2b30      	cmp	r3, #48	; 0x30
 80073dc:	d10c      	bne.n	80073f8 <__cvt+0x88>
 80073de:	2200      	movs	r2, #0
 80073e0:	2300      	movs	r3, #0
 80073e2:	0020      	movs	r0, r4
 80073e4:	0031      	movs	r1, r6
 80073e6:	f7f9 f82f 	bl	8000448 <__aeabi_dcmpeq>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d104      	bne.n	80073f8 <__cvt+0x88>
 80073ee:	2301      	movs	r3, #1
 80073f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	18d3      	adds	r3, r2, r3
 8007400:	9307      	str	r3, [sp, #28]
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	0020      	movs	r0, r4
 8007408:	0031      	movs	r1, r6
 800740a:	f7f9 f81d 	bl	8000448 <__aeabi_dcmpeq>
 800740e:	2800      	cmp	r0, #0
 8007410:	d001      	beq.n	8007416 <__cvt+0xa6>
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	9309      	str	r3, [sp, #36]	; 0x24
 8007416:	2230      	movs	r2, #48	; 0x30
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	9907      	ldr	r1, [sp, #28]
 800741c:	428b      	cmp	r3, r1
 800741e:	d306      	bcc.n	800742e <__cvt+0xbe>
 8007420:	0028      	movs	r0, r5
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007426:	1b5b      	subs	r3, r3, r5
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	b00b      	add	sp, #44	; 0x2c
 800742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742e:	1c59      	adds	r1, r3, #1
 8007430:	9109      	str	r1, [sp, #36]	; 0x24
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e7f0      	b.n	8007418 <__cvt+0xa8>

08007436 <__exponent>:
 8007436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007438:	1c83      	adds	r3, r0, #2
 800743a:	b087      	sub	sp, #28
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	0005      	movs	r5, r0
 8007440:	000c      	movs	r4, r1
 8007442:	232b      	movs	r3, #43	; 0x2b
 8007444:	7002      	strb	r2, [r0, #0]
 8007446:	2900      	cmp	r1, #0
 8007448:	da01      	bge.n	800744e <__exponent+0x18>
 800744a:	424c      	negs	r4, r1
 800744c:	3302      	adds	r3, #2
 800744e:	706b      	strb	r3, [r5, #1]
 8007450:	2c09      	cmp	r4, #9
 8007452:	dd2f      	ble.n	80074b4 <__exponent+0x7e>
 8007454:	270a      	movs	r7, #10
 8007456:	ab04      	add	r3, sp, #16
 8007458:	1dde      	adds	r6, r3, #7
 800745a:	0020      	movs	r0, r4
 800745c:	0039      	movs	r1, r7
 800745e:	9601      	str	r6, [sp, #4]
 8007460:	f7f8 ffdc 	bl	800041c <__aeabi_idivmod>
 8007464:	3e01      	subs	r6, #1
 8007466:	3130      	adds	r1, #48	; 0x30
 8007468:	0020      	movs	r0, r4
 800746a:	7031      	strb	r1, [r6, #0]
 800746c:	0039      	movs	r1, r7
 800746e:	9402      	str	r4, [sp, #8]
 8007470:	f7f8 feee 	bl	8000250 <__divsi3>
 8007474:	9b02      	ldr	r3, [sp, #8]
 8007476:	0004      	movs	r4, r0
 8007478:	2b63      	cmp	r3, #99	; 0x63
 800747a:	dcee      	bgt.n	800745a <__exponent+0x24>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	3430      	adds	r4, #48	; 0x30
 8007480:	1e9a      	subs	r2, r3, #2
 8007482:	0013      	movs	r3, r2
 8007484:	9903      	ldr	r1, [sp, #12]
 8007486:	7014      	strb	r4, [r2, #0]
 8007488:	a804      	add	r0, sp, #16
 800748a:	3007      	adds	r0, #7
 800748c:	4298      	cmp	r0, r3
 800748e:	d80c      	bhi.n	80074aa <__exponent+0x74>
 8007490:	2300      	movs	r3, #0
 8007492:	4282      	cmp	r2, r0
 8007494:	d804      	bhi.n	80074a0 <__exponent+0x6a>
 8007496:	aa04      	add	r2, sp, #16
 8007498:	3309      	adds	r3, #9
 800749a:	189b      	adds	r3, r3, r2
 800749c:	9a01      	ldr	r2, [sp, #4]
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	9a03      	ldr	r2, [sp, #12]
 80074a2:	18d3      	adds	r3, r2, r3
 80074a4:	1b58      	subs	r0, r3, r5
 80074a6:	b007      	add	sp, #28
 80074a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074aa:	7818      	ldrb	r0, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	7008      	strb	r0, [r1, #0]
 80074b0:	3101      	adds	r1, #1
 80074b2:	e7e9      	b.n	8007488 <__exponent+0x52>
 80074b4:	2330      	movs	r3, #48	; 0x30
 80074b6:	3430      	adds	r4, #48	; 0x30
 80074b8:	70ab      	strb	r3, [r5, #2]
 80074ba:	70ec      	strb	r4, [r5, #3]
 80074bc:	1d2b      	adds	r3, r5, #4
 80074be:	e7f1      	b.n	80074a4 <__exponent+0x6e>

080074c0 <_printf_float>:
 80074c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074c2:	b095      	sub	sp, #84	; 0x54
 80074c4:	000c      	movs	r4, r1
 80074c6:	9208      	str	r2, [sp, #32]
 80074c8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80074ca:	9309      	str	r3, [sp, #36]	; 0x24
 80074cc:	0007      	movs	r7, r0
 80074ce:	f000 ffa7 	bl	8008420 <_localeconv_r>
 80074d2:	6803      	ldr	r3, [r0, #0]
 80074d4:	0018      	movs	r0, r3
 80074d6:	930c      	str	r3, [sp, #48]	; 0x30
 80074d8:	f7f8 fe14 	bl	8000104 <strlen>
 80074dc:	2300      	movs	r3, #0
 80074de:	9312      	str	r3, [sp, #72]	; 0x48
 80074e0:	7e23      	ldrb	r3, [r4, #24]
 80074e2:	2207      	movs	r2, #7
 80074e4:	930a      	str	r3, [sp, #40]	; 0x28
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	900d      	str	r0, [sp, #52]	; 0x34
 80074ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	05c9      	lsls	r1, r1, #23
 80074f2:	d547      	bpl.n	8007584 <_printf_float+0xc4>
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	4393      	bics	r3, r2
 80074f8:	001a      	movs	r2, r3
 80074fa:	3208      	adds	r2, #8
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	681e      	ldr	r6, [r3, #0]
 8007500:	685d      	ldr	r5, [r3, #4]
 8007502:	0032      	movs	r2, r6
 8007504:	002b      	movs	r3, r5
 8007506:	64a2      	str	r2, [r4, #72]	; 0x48
 8007508:	64e3      	str	r3, [r4, #76]	; 0x4c
 800750a:	2201      	movs	r2, #1
 800750c:	006b      	lsls	r3, r5, #1
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	930e      	str	r3, [sp, #56]	; 0x38
 8007512:	0030      	movs	r0, r6
 8007514:	4bab      	ldr	r3, [pc, #684]	; (80077c4 <_printf_float+0x304>)
 8007516:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007518:	4252      	negs	r2, r2
 800751a:	f7fa febd 	bl	8002298 <__aeabi_dcmpun>
 800751e:	2800      	cmp	r0, #0
 8007520:	d132      	bne.n	8007588 <_printf_float+0xc8>
 8007522:	2201      	movs	r2, #1
 8007524:	0030      	movs	r0, r6
 8007526:	4ba7      	ldr	r3, [pc, #668]	; (80077c4 <_printf_float+0x304>)
 8007528:	990e      	ldr	r1, [sp, #56]	; 0x38
 800752a:	4252      	negs	r2, r2
 800752c:	f7f8 ff9c 	bl	8000468 <__aeabi_dcmple>
 8007530:	2800      	cmp	r0, #0
 8007532:	d129      	bne.n	8007588 <_printf_float+0xc8>
 8007534:	2200      	movs	r2, #0
 8007536:	2300      	movs	r3, #0
 8007538:	0030      	movs	r0, r6
 800753a:	0029      	movs	r1, r5
 800753c:	f7f8 ff8a 	bl	8000454 <__aeabi_dcmplt>
 8007540:	2800      	cmp	r0, #0
 8007542:	d003      	beq.n	800754c <_printf_float+0x8c>
 8007544:	0023      	movs	r3, r4
 8007546:	222d      	movs	r2, #45	; 0x2d
 8007548:	3343      	adds	r3, #67	; 0x43
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754e:	4d9e      	ldr	r5, [pc, #632]	; (80077c8 <_printf_float+0x308>)
 8007550:	2b47      	cmp	r3, #71	; 0x47
 8007552:	d900      	bls.n	8007556 <_printf_float+0x96>
 8007554:	4d9d      	ldr	r5, [pc, #628]	; (80077cc <_printf_float+0x30c>)
 8007556:	2303      	movs	r3, #3
 8007558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	3301      	adds	r3, #1
 800755e:	439a      	bics	r2, r3
 8007560:	2300      	movs	r3, #0
 8007562:	6022      	str	r2, [r4, #0]
 8007564:	930b      	str	r3, [sp, #44]	; 0x2c
 8007566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007568:	0021      	movs	r1, r4
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	0038      	movs	r0, r7
 800756e:	9b08      	ldr	r3, [sp, #32]
 8007570:	aa13      	add	r2, sp, #76	; 0x4c
 8007572:	f000 f9fb 	bl	800796c <_printf_common>
 8007576:	3001      	adds	r0, #1
 8007578:	d000      	beq.n	800757c <_printf_float+0xbc>
 800757a:	e0a3      	b.n	80076c4 <_printf_float+0x204>
 800757c:	2001      	movs	r0, #1
 800757e:	4240      	negs	r0, r0
 8007580:	b015      	add	sp, #84	; 0x54
 8007582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007584:	3307      	adds	r3, #7
 8007586:	e7b6      	b.n	80074f6 <_printf_float+0x36>
 8007588:	0032      	movs	r2, r6
 800758a:	002b      	movs	r3, r5
 800758c:	0030      	movs	r0, r6
 800758e:	0029      	movs	r1, r5
 8007590:	f7fa fe82 	bl	8002298 <__aeabi_dcmpun>
 8007594:	2800      	cmp	r0, #0
 8007596:	d00b      	beq.n	80075b0 <_printf_float+0xf0>
 8007598:	2d00      	cmp	r5, #0
 800759a:	da03      	bge.n	80075a4 <_printf_float+0xe4>
 800759c:	0023      	movs	r3, r4
 800759e:	222d      	movs	r2, #45	; 0x2d
 80075a0:	3343      	adds	r3, #67	; 0x43
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a6:	4d8a      	ldr	r5, [pc, #552]	; (80077d0 <_printf_float+0x310>)
 80075a8:	2b47      	cmp	r3, #71	; 0x47
 80075aa:	d9d4      	bls.n	8007556 <_printf_float+0x96>
 80075ac:	4d89      	ldr	r5, [pc, #548]	; (80077d4 <_printf_float+0x314>)
 80075ae:	e7d2      	b.n	8007556 <_printf_float+0x96>
 80075b0:	2220      	movs	r2, #32
 80075b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	4391      	bics	r1, r2
 80075b8:	910e      	str	r1, [sp, #56]	; 0x38
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	d14a      	bne.n	8007654 <_printf_float+0x194>
 80075be:	3307      	adds	r3, #7
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	2380      	movs	r3, #128	; 0x80
 80075c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	9206      	str	r2, [sp, #24]
 80075ce:	aa12      	add	r2, sp, #72	; 0x48
 80075d0:	9205      	str	r2, [sp, #20]
 80075d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	9204      	str	r2, [sp, #16]
 80075d8:	aa11      	add	r2, sp, #68	; 0x44
 80075da:	9203      	str	r2, [sp, #12]
 80075dc:	2223      	movs	r2, #35	; 0x23
 80075de:	a908      	add	r1, sp, #32
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	1852      	adds	r2, r2, r1
 80075e6:	9202      	str	r2, [sp, #8]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	0032      	movs	r2, r6
 80075ec:	002b      	movs	r3, r5
 80075ee:	0038      	movs	r0, r7
 80075f0:	f7ff febe 	bl	8007370 <__cvt>
 80075f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f6:	0005      	movs	r5, r0
 80075f8:	2b47      	cmp	r3, #71	; 0x47
 80075fa:	d109      	bne.n	8007610 <_printf_float+0x150>
 80075fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075fe:	1cda      	adds	r2, r3, #3
 8007600:	db02      	blt.n	8007608 <_printf_float+0x148>
 8007602:	6862      	ldr	r2, [r4, #4]
 8007604:	4293      	cmp	r3, r2
 8007606:	dd49      	ble.n	800769c <_printf_float+0x1dc>
 8007608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760a:	3b02      	subs	r3, #2
 800760c:	b2db      	uxtb	r3, r3
 800760e:	930a      	str	r3, [sp, #40]	; 0x28
 8007610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007612:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007614:	2b65      	cmp	r3, #101	; 0x65
 8007616:	d824      	bhi.n	8007662 <_printf_float+0x1a2>
 8007618:	0020      	movs	r0, r4
 800761a:	001a      	movs	r2, r3
 800761c:	3901      	subs	r1, #1
 800761e:	3050      	adds	r0, #80	; 0x50
 8007620:	9111      	str	r1, [sp, #68]	; 0x44
 8007622:	f7ff ff08 	bl	8007436 <__exponent>
 8007626:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007628:	900b      	str	r0, [sp, #44]	; 0x2c
 800762a:	1813      	adds	r3, r2, r0
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	2a01      	cmp	r2, #1
 8007630:	dc02      	bgt.n	8007638 <_printf_float+0x178>
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	07d2      	lsls	r2, r2, #31
 8007636:	d501      	bpl.n	800763c <_printf_float+0x17c>
 8007638:	3301      	adds	r3, #1
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	2323      	movs	r3, #35	; 0x23
 800763e:	aa08      	add	r2, sp, #32
 8007640:	189b      	adds	r3, r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d100      	bne.n	800764a <_printf_float+0x18a>
 8007648:	e78d      	b.n	8007566 <_printf_float+0xa6>
 800764a:	0023      	movs	r3, r4
 800764c:	222d      	movs	r2, #45	; 0x2d
 800764e:	3343      	adds	r3, #67	; 0x43
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e788      	b.n	8007566 <_printf_float+0xa6>
 8007654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007656:	2a47      	cmp	r2, #71	; 0x47
 8007658:	d1b3      	bne.n	80075c2 <_printf_float+0x102>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1b1      	bne.n	80075c2 <_printf_float+0x102>
 800765e:	3301      	adds	r3, #1
 8007660:	e7ae      	b.n	80075c0 <_printf_float+0x100>
 8007662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007664:	2b66      	cmp	r3, #102	; 0x66
 8007666:	d11b      	bne.n	80076a0 <_printf_float+0x1e0>
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	2900      	cmp	r1, #0
 800766c:	dd09      	ble.n	8007682 <_printf_float+0x1c2>
 800766e:	6121      	str	r1, [r4, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <_printf_float+0x1ba>
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	07d2      	lsls	r2, r2, #31
 8007678:	d50b      	bpl.n	8007692 <_printf_float+0x1d2>
 800767a:	3301      	adds	r3, #1
 800767c:	185b      	adds	r3, r3, r1
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	e007      	b.n	8007692 <_printf_float+0x1d2>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <_printf_float+0x1ce>
 8007686:	2201      	movs	r2, #1
 8007688:	6821      	ldr	r1, [r4, #0]
 800768a:	4211      	tst	r1, r2
 800768c:	d000      	beq.n	8007690 <_printf_float+0x1d0>
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	6122      	str	r2, [r4, #16]
 8007692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007694:	65a3      	str	r3, [r4, #88]	; 0x58
 8007696:	2300      	movs	r3, #0
 8007698:	930b      	str	r3, [sp, #44]	; 0x2c
 800769a:	e7cf      	b.n	800763c <_printf_float+0x17c>
 800769c:	2367      	movs	r3, #103	; 0x67
 800769e:	930a      	str	r3, [sp, #40]	; 0x28
 80076a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076a4:	4299      	cmp	r1, r3
 80076a6:	db06      	blt.n	80076b6 <_printf_float+0x1f6>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	6121      	str	r1, [r4, #16]
 80076ac:	07db      	lsls	r3, r3, #31
 80076ae:	d5f0      	bpl.n	8007692 <_printf_float+0x1d2>
 80076b0:	3101      	adds	r1, #1
 80076b2:	6121      	str	r1, [r4, #16]
 80076b4:	e7ed      	b.n	8007692 <_printf_float+0x1d2>
 80076b6:	2201      	movs	r2, #1
 80076b8:	2900      	cmp	r1, #0
 80076ba:	dc01      	bgt.n	80076c0 <_printf_float+0x200>
 80076bc:	1892      	adds	r2, r2, r2
 80076be:	1a52      	subs	r2, r2, r1
 80076c0:	189b      	adds	r3, r3, r2
 80076c2:	e7dc      	b.n	800767e <_printf_float+0x1be>
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	0553      	lsls	r3, r2, #21
 80076c8:	d408      	bmi.n	80076dc <_printf_float+0x21c>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	002a      	movs	r2, r5
 80076ce:	0038      	movs	r0, r7
 80076d0:	9908      	ldr	r1, [sp, #32]
 80076d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076d4:	47a8      	blx	r5
 80076d6:	3001      	adds	r0, #1
 80076d8:	d12a      	bne.n	8007730 <_printf_float+0x270>
 80076da:	e74f      	b.n	800757c <_printf_float+0xbc>
 80076dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076de:	2b65      	cmp	r3, #101	; 0x65
 80076e0:	d800      	bhi.n	80076e4 <_printf_float+0x224>
 80076e2:	e0ec      	b.n	80078be <_printf_float+0x3fe>
 80076e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80076e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80076e8:	2200      	movs	r2, #0
 80076ea:	2300      	movs	r3, #0
 80076ec:	f7f8 feac 	bl	8000448 <__aeabi_dcmpeq>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d034      	beq.n	800775e <_printf_float+0x29e>
 80076f4:	2301      	movs	r3, #1
 80076f6:	0038      	movs	r0, r7
 80076f8:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <_printf_float+0x318>)
 80076fa:	9908      	ldr	r1, [sp, #32]
 80076fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076fe:	47a8      	blx	r5
 8007700:	3001      	adds	r0, #1
 8007702:	d100      	bne.n	8007706 <_printf_float+0x246>
 8007704:	e73a      	b.n	800757c <_printf_float+0xbc>
 8007706:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770a:	429a      	cmp	r2, r3
 800770c:	db02      	blt.n	8007714 <_printf_float+0x254>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	07db      	lsls	r3, r3, #31
 8007712:	d50d      	bpl.n	8007730 <_printf_float+0x270>
 8007714:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007716:	0038      	movs	r0, r7
 8007718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800771a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800771c:	9908      	ldr	r1, [sp, #32]
 800771e:	47a8      	blx	r5
 8007720:	2500      	movs	r5, #0
 8007722:	3001      	adds	r0, #1
 8007724:	d100      	bne.n	8007728 <_printf_float+0x268>
 8007726:	e729      	b.n	800757c <_printf_float+0xbc>
 8007728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800772a:	3b01      	subs	r3, #1
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc0a      	bgt.n	8007746 <_printf_float+0x286>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	d500      	bpl.n	8007738 <_printf_float+0x278>
 8007736:	e116      	b.n	8007966 <_printf_float+0x4a6>
 8007738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800773a:	68e0      	ldr	r0, [r4, #12]
 800773c:	4298      	cmp	r0, r3
 800773e:	db00      	blt.n	8007742 <_printf_float+0x282>
 8007740:	e71e      	b.n	8007580 <_printf_float+0xc0>
 8007742:	0018      	movs	r0, r3
 8007744:	e71c      	b.n	8007580 <_printf_float+0xc0>
 8007746:	0022      	movs	r2, r4
 8007748:	2301      	movs	r3, #1
 800774a:	0038      	movs	r0, r7
 800774c:	9908      	ldr	r1, [sp, #32]
 800774e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007750:	321a      	adds	r2, #26
 8007752:	47b0      	blx	r6
 8007754:	3001      	adds	r0, #1
 8007756:	d100      	bne.n	800775a <_printf_float+0x29a>
 8007758:	e710      	b.n	800757c <_printf_float+0xbc>
 800775a:	3501      	adds	r5, #1
 800775c:	e7e4      	b.n	8007728 <_printf_float+0x268>
 800775e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007760:	2b00      	cmp	r3, #0
 8007762:	dc3b      	bgt.n	80077dc <_printf_float+0x31c>
 8007764:	2301      	movs	r3, #1
 8007766:	0038      	movs	r0, r7
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <_printf_float+0x318>)
 800776a:	9908      	ldr	r1, [sp, #32]
 800776c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800776e:	47b0      	blx	r6
 8007770:	3001      	adds	r0, #1
 8007772:	d100      	bne.n	8007776 <_printf_float+0x2b6>
 8007774:	e702      	b.n	800757c <_printf_float+0xbc>
 8007776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800777a:	4313      	orrs	r3, r2
 800777c:	d102      	bne.n	8007784 <_printf_float+0x2c4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07db      	lsls	r3, r3, #31
 8007782:	d5d5      	bpl.n	8007730 <_printf_float+0x270>
 8007784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007786:	0038      	movs	r0, r7
 8007788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800778a:	9908      	ldr	r1, [sp, #32]
 800778c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800778e:	47b0      	blx	r6
 8007790:	2300      	movs	r3, #0
 8007792:	3001      	adds	r0, #1
 8007794:	d100      	bne.n	8007798 <_printf_float+0x2d8>
 8007796:	e6f1      	b.n	800757c <_printf_float+0xbc>
 8007798:	930a      	str	r3, [sp, #40]	; 0x28
 800779a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800779c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800779e:	425b      	negs	r3, r3
 80077a0:	4293      	cmp	r3, r2
 80077a2:	dc01      	bgt.n	80077a8 <_printf_float+0x2e8>
 80077a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077a6:	e791      	b.n	80076cc <_printf_float+0x20c>
 80077a8:	0022      	movs	r2, r4
 80077aa:	2301      	movs	r3, #1
 80077ac:	0038      	movs	r0, r7
 80077ae:	9908      	ldr	r1, [sp, #32]
 80077b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077b2:	321a      	adds	r2, #26
 80077b4:	47b0      	blx	r6
 80077b6:	3001      	adds	r0, #1
 80077b8:	d100      	bne.n	80077bc <_printf_float+0x2fc>
 80077ba:	e6df      	b.n	800757c <_printf_float+0xbc>
 80077bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077be:	3301      	adds	r3, #1
 80077c0:	e7ea      	b.n	8007798 <_printf_float+0x2d8>
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	0800ba71 	.word	0x0800ba71
 80077cc:	0800ba75 	.word	0x0800ba75
 80077d0:	0800ba79 	.word	0x0800ba79
 80077d4:	0800ba7d 	.word	0x0800ba7d
 80077d8:	0800bd1b 	.word	0x0800bd1b
 80077dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077e0:	920a      	str	r2, [sp, #40]	; 0x28
 80077e2:	429a      	cmp	r2, r3
 80077e4:	dd00      	ble.n	80077e8 <_printf_float+0x328>
 80077e6:	930a      	str	r3, [sp, #40]	; 0x28
 80077e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dc3d      	bgt.n	800786a <_printf_float+0x3aa>
 80077ee:	2300      	movs	r3, #0
 80077f0:	930e      	str	r3, [sp, #56]	; 0x38
 80077f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f4:	43db      	mvns	r3, r3
 80077f6:	17db      	asrs	r3, r3, #31
 80077f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007802:	4013      	ands	r3, r2
 8007804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800780a:	4293      	cmp	r3, r2
 800780c:	dc36      	bgt.n	800787c <_printf_float+0x3bc>
 800780e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007812:	429a      	cmp	r2, r3
 8007814:	db40      	blt.n	8007898 <_printf_float+0x3d8>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	07db      	lsls	r3, r3, #31
 800781a:	d43d      	bmi.n	8007898 <_printf_float+0x3d8>
 800781c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800781e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007822:	1af3      	subs	r3, r6, r3
 8007824:	1ab6      	subs	r6, r6, r2
 8007826:	429e      	cmp	r6, r3
 8007828:	dd00      	ble.n	800782c <_printf_float+0x36c>
 800782a:	001e      	movs	r6, r3
 800782c:	2e00      	cmp	r6, #0
 800782e:	dc3c      	bgt.n	80078aa <_printf_float+0x3ea>
 8007830:	2300      	movs	r3, #0
 8007832:	930a      	str	r3, [sp, #40]	; 0x28
 8007834:	43f3      	mvns	r3, r6
 8007836:	17db      	asrs	r3, r3, #31
 8007838:	930b      	str	r3, [sp, #44]	; 0x2c
 800783a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800783c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007842:	4032      	ands	r2, r6
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007848:	4293      	cmp	r3, r2
 800784a:	dc00      	bgt.n	800784e <_printf_float+0x38e>
 800784c:	e770      	b.n	8007730 <_printf_float+0x270>
 800784e:	0022      	movs	r2, r4
 8007850:	2301      	movs	r3, #1
 8007852:	0038      	movs	r0, r7
 8007854:	9908      	ldr	r1, [sp, #32]
 8007856:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007858:	321a      	adds	r2, #26
 800785a:	47a8      	blx	r5
 800785c:	3001      	adds	r0, #1
 800785e:	d100      	bne.n	8007862 <_printf_float+0x3a2>
 8007860:	e68c      	b.n	800757c <_printf_float+0xbc>
 8007862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007864:	3301      	adds	r3, #1
 8007866:	930a      	str	r3, [sp, #40]	; 0x28
 8007868:	e7e7      	b.n	800783a <_printf_float+0x37a>
 800786a:	002a      	movs	r2, r5
 800786c:	0038      	movs	r0, r7
 800786e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007870:	9908      	ldr	r1, [sp, #32]
 8007872:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007874:	47b0      	blx	r6
 8007876:	3001      	adds	r0, #1
 8007878:	d1b9      	bne.n	80077ee <_printf_float+0x32e>
 800787a:	e67f      	b.n	800757c <_printf_float+0xbc>
 800787c:	0022      	movs	r2, r4
 800787e:	2301      	movs	r3, #1
 8007880:	0038      	movs	r0, r7
 8007882:	9908      	ldr	r1, [sp, #32]
 8007884:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007886:	321a      	adds	r2, #26
 8007888:	47b0      	blx	r6
 800788a:	3001      	adds	r0, #1
 800788c:	d100      	bne.n	8007890 <_printf_float+0x3d0>
 800788e:	e675      	b.n	800757c <_printf_float+0xbc>
 8007890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007892:	3301      	adds	r3, #1
 8007894:	930e      	str	r3, [sp, #56]	; 0x38
 8007896:	e7b0      	b.n	80077fa <_printf_float+0x33a>
 8007898:	0038      	movs	r0, r7
 800789a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800789c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800789e:	9908      	ldr	r1, [sp, #32]
 80078a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078a2:	47b0      	blx	r6
 80078a4:	3001      	adds	r0, #1
 80078a6:	d1b9      	bne.n	800781c <_printf_float+0x35c>
 80078a8:	e668      	b.n	800757c <_printf_float+0xbc>
 80078aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ac:	0038      	movs	r0, r7
 80078ae:	18ea      	adds	r2, r5, r3
 80078b0:	9908      	ldr	r1, [sp, #32]
 80078b2:	0033      	movs	r3, r6
 80078b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078b6:	47a8      	blx	r5
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1b9      	bne.n	8007830 <_printf_float+0x370>
 80078bc:	e65e      	b.n	800757c <_printf_float+0xbc>
 80078be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	dc02      	bgt.n	80078ca <_printf_float+0x40a>
 80078c4:	2301      	movs	r3, #1
 80078c6:	421a      	tst	r2, r3
 80078c8:	d03a      	beq.n	8007940 <_printf_float+0x480>
 80078ca:	2301      	movs	r3, #1
 80078cc:	002a      	movs	r2, r5
 80078ce:	0038      	movs	r0, r7
 80078d0:	9908      	ldr	r1, [sp, #32]
 80078d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078d4:	47b0      	blx	r6
 80078d6:	3001      	adds	r0, #1
 80078d8:	d100      	bne.n	80078dc <_printf_float+0x41c>
 80078da:	e64f      	b.n	800757c <_printf_float+0xbc>
 80078dc:	0038      	movs	r0, r7
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078e2:	9908      	ldr	r1, [sp, #32]
 80078e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078e6:	47b0      	blx	r6
 80078e8:	3001      	adds	r0, #1
 80078ea:	d100      	bne.n	80078ee <_printf_float+0x42e>
 80078ec:	e646      	b.n	800757c <_printf_float+0xbc>
 80078ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80078f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80078f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f4:	2200      	movs	r2, #0
 80078f6:	001e      	movs	r6, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	f7f8 fda5 	bl	8000448 <__aeabi_dcmpeq>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d11c      	bne.n	800793c <_printf_float+0x47c>
 8007902:	0033      	movs	r3, r6
 8007904:	1c6a      	adds	r2, r5, #1
 8007906:	3b01      	subs	r3, #1
 8007908:	0038      	movs	r0, r7
 800790a:	9908      	ldr	r1, [sp, #32]
 800790c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800790e:	47a8      	blx	r5
 8007910:	3001      	adds	r0, #1
 8007912:	d10f      	bne.n	8007934 <_printf_float+0x474>
 8007914:	e632      	b.n	800757c <_printf_float+0xbc>
 8007916:	0022      	movs	r2, r4
 8007918:	2301      	movs	r3, #1
 800791a:	0038      	movs	r0, r7
 800791c:	9908      	ldr	r1, [sp, #32]
 800791e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007920:	321a      	adds	r2, #26
 8007922:	47b0      	blx	r6
 8007924:	3001      	adds	r0, #1
 8007926:	d100      	bne.n	800792a <_printf_float+0x46a>
 8007928:	e628      	b.n	800757c <_printf_float+0xbc>
 800792a:	3501      	adds	r5, #1
 800792c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800792e:	3b01      	subs	r3, #1
 8007930:	42ab      	cmp	r3, r5
 8007932:	dcf0      	bgt.n	8007916 <_printf_float+0x456>
 8007934:	0022      	movs	r2, r4
 8007936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007938:	3250      	adds	r2, #80	; 0x50
 800793a:	e6c8      	b.n	80076ce <_printf_float+0x20e>
 800793c:	2500      	movs	r5, #0
 800793e:	e7f5      	b.n	800792c <_printf_float+0x46c>
 8007940:	002a      	movs	r2, r5
 8007942:	e7e1      	b.n	8007908 <_printf_float+0x448>
 8007944:	0022      	movs	r2, r4
 8007946:	2301      	movs	r3, #1
 8007948:	0038      	movs	r0, r7
 800794a:	9908      	ldr	r1, [sp, #32]
 800794c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800794e:	3219      	adds	r2, #25
 8007950:	47b0      	blx	r6
 8007952:	3001      	adds	r0, #1
 8007954:	d100      	bne.n	8007958 <_printf_float+0x498>
 8007956:	e611      	b.n	800757c <_printf_float+0xbc>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcef      	bgt.n	8007944 <_printf_float+0x484>
 8007964:	e6e8      	b.n	8007738 <_printf_float+0x278>
 8007966:	2500      	movs	r5, #0
 8007968:	e7f7      	b.n	800795a <_printf_float+0x49a>
 800796a:	46c0      	nop			; (mov r8, r8)

0800796c <_printf_common>:
 800796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800796e:	0016      	movs	r6, r2
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	688a      	ldr	r2, [r1, #8]
 8007974:	690b      	ldr	r3, [r1, #16]
 8007976:	000c      	movs	r4, r1
 8007978:	9000      	str	r0, [sp, #0]
 800797a:	4293      	cmp	r3, r2
 800797c:	da00      	bge.n	8007980 <_printf_common+0x14>
 800797e:	0013      	movs	r3, r2
 8007980:	0022      	movs	r2, r4
 8007982:	6033      	str	r3, [r6, #0]
 8007984:	3243      	adds	r2, #67	; 0x43
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	2a00      	cmp	r2, #0
 800798a:	d001      	beq.n	8007990 <_printf_common+0x24>
 800798c:	3301      	adds	r3, #1
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	069b      	lsls	r3, r3, #26
 8007994:	d502      	bpl.n	800799c <_printf_common+0x30>
 8007996:	6833      	ldr	r3, [r6, #0]
 8007998:	3302      	adds	r3, #2
 800799a:	6033      	str	r3, [r6, #0]
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	2306      	movs	r3, #6
 80079a0:	0015      	movs	r5, r2
 80079a2:	401d      	ands	r5, r3
 80079a4:	421a      	tst	r2, r3
 80079a6:	d027      	beq.n	80079f8 <_printf_common+0x8c>
 80079a8:	0023      	movs	r3, r4
 80079aa:	3343      	adds	r3, #67	; 0x43
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	4193      	sbcs	r3, r2
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	0692      	lsls	r2, r2, #26
 80079b6:	d430      	bmi.n	8007a1a <_printf_common+0xae>
 80079b8:	0022      	movs	r2, r4
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	9800      	ldr	r0, [sp, #0]
 80079be:	9d08      	ldr	r5, [sp, #32]
 80079c0:	3243      	adds	r2, #67	; 0x43
 80079c2:	47a8      	blx	r5
 80079c4:	3001      	adds	r0, #1
 80079c6:	d025      	beq.n	8007a14 <_printf_common+0xa8>
 80079c8:	2206      	movs	r2, #6
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	2500      	movs	r5, #0
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d105      	bne.n	80079e0 <_printf_common+0x74>
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	68e5      	ldr	r5, [r4, #12]
 80079d8:	1aed      	subs	r5, r5, r3
 80079da:	43eb      	mvns	r3, r5
 80079dc:	17db      	asrs	r3, r3, #31
 80079de:	401d      	ands	r5, r3
 80079e0:	68a3      	ldr	r3, [r4, #8]
 80079e2:	6922      	ldr	r2, [r4, #16]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	dd01      	ble.n	80079ec <_printf_common+0x80>
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	18ed      	adds	r5, r5, r3
 80079ec:	2600      	movs	r6, #0
 80079ee:	42b5      	cmp	r5, r6
 80079f0:	d120      	bne.n	8007a34 <_printf_common+0xc8>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e010      	b.n	8007a18 <_printf_common+0xac>
 80079f6:	3501      	adds	r5, #1
 80079f8:	68e3      	ldr	r3, [r4, #12]
 80079fa:	6832      	ldr	r2, [r6, #0]
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	42ab      	cmp	r3, r5
 8007a00:	ddd2      	ble.n	80079a8 <_printf_common+0x3c>
 8007a02:	0022      	movs	r2, r4
 8007a04:	2301      	movs	r3, #1
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	9800      	ldr	r0, [sp, #0]
 8007a0a:	9f08      	ldr	r7, [sp, #32]
 8007a0c:	3219      	adds	r2, #25
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1f0      	bne.n	80079f6 <_printf_common+0x8a>
 8007a14:	2001      	movs	r0, #1
 8007a16:	4240      	negs	r0, r0
 8007a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a1a:	2030      	movs	r0, #48	; 0x30
 8007a1c:	18e1      	adds	r1, r4, r3
 8007a1e:	3143      	adds	r1, #67	; 0x43
 8007a20:	7008      	strb	r0, [r1, #0]
 8007a22:	0021      	movs	r1, r4
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	3145      	adds	r1, #69	; 0x45
 8007a28:	7809      	ldrb	r1, [r1, #0]
 8007a2a:	18a2      	adds	r2, r4, r2
 8007a2c:	3243      	adds	r2, #67	; 0x43
 8007a2e:	3302      	adds	r3, #2
 8007a30:	7011      	strb	r1, [r2, #0]
 8007a32:	e7c1      	b.n	80079b8 <_printf_common+0x4c>
 8007a34:	0022      	movs	r2, r4
 8007a36:	2301      	movs	r3, #1
 8007a38:	9901      	ldr	r1, [sp, #4]
 8007a3a:	9800      	ldr	r0, [sp, #0]
 8007a3c:	9f08      	ldr	r7, [sp, #32]
 8007a3e:	321a      	adds	r2, #26
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	d0e6      	beq.n	8007a14 <_printf_common+0xa8>
 8007a46:	3601      	adds	r6, #1
 8007a48:	e7d1      	b.n	80079ee <_printf_common+0x82>
	...

08007a4c <_printf_i>:
 8007a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4e:	b08b      	sub	sp, #44	; 0x2c
 8007a50:	9206      	str	r2, [sp, #24]
 8007a52:	000a      	movs	r2, r1
 8007a54:	3243      	adds	r2, #67	; 0x43
 8007a56:	9307      	str	r3, [sp, #28]
 8007a58:	9005      	str	r0, [sp, #20]
 8007a5a:	9204      	str	r2, [sp, #16]
 8007a5c:	7e0a      	ldrb	r2, [r1, #24]
 8007a5e:	000c      	movs	r4, r1
 8007a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a62:	2a78      	cmp	r2, #120	; 0x78
 8007a64:	d809      	bhi.n	8007a7a <_printf_i+0x2e>
 8007a66:	2a62      	cmp	r2, #98	; 0x62
 8007a68:	d80b      	bhi.n	8007a82 <_printf_i+0x36>
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d100      	bne.n	8007a70 <_printf_i+0x24>
 8007a6e:	e0be      	b.n	8007bee <_printf_i+0x1a2>
 8007a70:	497c      	ldr	r1, [pc, #496]	; (8007c64 <_printf_i+0x218>)
 8007a72:	9103      	str	r1, [sp, #12]
 8007a74:	2a58      	cmp	r2, #88	; 0x58
 8007a76:	d100      	bne.n	8007a7a <_printf_i+0x2e>
 8007a78:	e093      	b.n	8007ba2 <_printf_i+0x156>
 8007a7a:	0026      	movs	r6, r4
 8007a7c:	3642      	adds	r6, #66	; 0x42
 8007a7e:	7032      	strb	r2, [r6, #0]
 8007a80:	e022      	b.n	8007ac8 <_printf_i+0x7c>
 8007a82:	0010      	movs	r0, r2
 8007a84:	3863      	subs	r0, #99	; 0x63
 8007a86:	2815      	cmp	r0, #21
 8007a88:	d8f7      	bhi.n	8007a7a <_printf_i+0x2e>
 8007a8a:	f7f8 fb4d 	bl	8000128 <__gnu_thumb1_case_shi>
 8007a8e:	0016      	.short	0x0016
 8007a90:	fff6001f 	.word	0xfff6001f
 8007a94:	fff6fff6 	.word	0xfff6fff6
 8007a98:	001ffff6 	.word	0x001ffff6
 8007a9c:	fff6fff6 	.word	0xfff6fff6
 8007aa0:	fff6fff6 	.word	0xfff6fff6
 8007aa4:	003600a3 	.word	0x003600a3
 8007aa8:	fff60083 	.word	0xfff60083
 8007aac:	00b4fff6 	.word	0x00b4fff6
 8007ab0:	0036fff6 	.word	0x0036fff6
 8007ab4:	fff6fff6 	.word	0xfff6fff6
 8007ab8:	0087      	.short	0x0087
 8007aba:	0026      	movs	r6, r4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	3642      	adds	r6, #66	; 0x42
 8007ac0:	1d11      	adds	r1, r2, #4
 8007ac2:	6019      	str	r1, [r3, #0]
 8007ac4:	6813      	ldr	r3, [r2, #0]
 8007ac6:	7033      	strb	r3, [r6, #0]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0a2      	b.n	8007c12 <_printf_i+0x1c6>
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	6809      	ldr	r1, [r1, #0]
 8007ad0:	1d02      	adds	r2, r0, #4
 8007ad2:	060d      	lsls	r5, r1, #24
 8007ad4:	d50b      	bpl.n	8007aee <_printf_i+0xa2>
 8007ad6:	6805      	ldr	r5, [r0, #0]
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	da03      	bge.n	8007ae6 <_printf_i+0x9a>
 8007ade:	232d      	movs	r3, #45	; 0x2d
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	426d      	negs	r5, r5
 8007ae4:	7013      	strb	r3, [r2, #0]
 8007ae6:	4b5f      	ldr	r3, [pc, #380]	; (8007c64 <_printf_i+0x218>)
 8007ae8:	270a      	movs	r7, #10
 8007aea:	9303      	str	r3, [sp, #12]
 8007aec:	e01b      	b.n	8007b26 <_printf_i+0xda>
 8007aee:	6805      	ldr	r5, [r0, #0]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	0649      	lsls	r1, r1, #25
 8007af4:	d5f1      	bpl.n	8007ada <_printf_i+0x8e>
 8007af6:	b22d      	sxth	r5, r5
 8007af8:	e7ef      	b.n	8007ada <_printf_i+0x8e>
 8007afa:	680d      	ldr	r5, [r1, #0]
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	1d08      	adds	r0, r1, #4
 8007b00:	6018      	str	r0, [r3, #0]
 8007b02:	062e      	lsls	r6, r5, #24
 8007b04:	d501      	bpl.n	8007b0a <_printf_i+0xbe>
 8007b06:	680d      	ldr	r5, [r1, #0]
 8007b08:	e003      	b.n	8007b12 <_printf_i+0xc6>
 8007b0a:	066d      	lsls	r5, r5, #25
 8007b0c:	d5fb      	bpl.n	8007b06 <_printf_i+0xba>
 8007b0e:	680d      	ldr	r5, [r1, #0]
 8007b10:	b2ad      	uxth	r5, r5
 8007b12:	4b54      	ldr	r3, [pc, #336]	; (8007c64 <_printf_i+0x218>)
 8007b14:	2708      	movs	r7, #8
 8007b16:	9303      	str	r3, [sp, #12]
 8007b18:	2a6f      	cmp	r2, #111	; 0x6f
 8007b1a:	d000      	beq.n	8007b1e <_printf_i+0xd2>
 8007b1c:	3702      	adds	r7, #2
 8007b1e:	0023      	movs	r3, r4
 8007b20:	2200      	movs	r2, #0
 8007b22:	3343      	adds	r3, #67	; 0x43
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	db03      	blt.n	8007b36 <_printf_i+0xea>
 8007b2e:	2104      	movs	r1, #4
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	438a      	bics	r2, r1
 8007b34:	6022      	str	r2, [r4, #0]
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	d102      	bne.n	8007b40 <_printf_i+0xf4>
 8007b3a:	9e04      	ldr	r6, [sp, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <_printf_i+0x10e>
 8007b40:	9e04      	ldr	r6, [sp, #16]
 8007b42:	0028      	movs	r0, r5
 8007b44:	0039      	movs	r1, r7
 8007b46:	f7f8 fb7f 	bl	8000248 <__aeabi_uidivmod>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	3e01      	subs	r6, #1
 8007b4e:	5c5b      	ldrb	r3, [r3, r1]
 8007b50:	7033      	strb	r3, [r6, #0]
 8007b52:	002b      	movs	r3, r5
 8007b54:	0005      	movs	r5, r0
 8007b56:	429f      	cmp	r7, r3
 8007b58:	d9f3      	bls.n	8007b42 <_printf_i+0xf6>
 8007b5a:	2f08      	cmp	r7, #8
 8007b5c:	d109      	bne.n	8007b72 <_printf_i+0x126>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	07db      	lsls	r3, r3, #31
 8007b62:	d506      	bpl.n	8007b72 <_printf_i+0x126>
 8007b64:	6862      	ldr	r2, [r4, #4]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	dc02      	bgt.n	8007b72 <_printf_i+0x126>
 8007b6c:	2330      	movs	r3, #48	; 0x30
 8007b6e:	3e01      	subs	r6, #1
 8007b70:	7033      	strb	r3, [r6, #0]
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	1b9b      	subs	r3, r3, r6
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	0021      	movs	r1, r4
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	9805      	ldr	r0, [sp, #20]
 8007b80:	9b06      	ldr	r3, [sp, #24]
 8007b82:	aa09      	add	r2, sp, #36	; 0x24
 8007b84:	f7ff fef2 	bl	800796c <_printf_common>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d147      	bne.n	8007c1c <_printf_i+0x1d0>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	4240      	negs	r0, r0
 8007b90:	b00b      	add	sp, #44	; 0x2c
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b94:	2220      	movs	r2, #32
 8007b96:	6809      	ldr	r1, [r1, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	6022      	str	r2, [r4, #0]
 8007b9c:	2278      	movs	r2, #120	; 0x78
 8007b9e:	4932      	ldr	r1, [pc, #200]	; (8007c68 <_printf_i+0x21c>)
 8007ba0:	9103      	str	r1, [sp, #12]
 8007ba2:	0021      	movs	r1, r4
 8007ba4:	3145      	adds	r1, #69	; 0x45
 8007ba6:	700a      	strb	r2, [r1, #0]
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	c920      	ldmia	r1!, {r5}
 8007bae:	0610      	lsls	r0, r2, #24
 8007bb0:	d402      	bmi.n	8007bb8 <_printf_i+0x16c>
 8007bb2:	0650      	lsls	r0, r2, #25
 8007bb4:	d500      	bpl.n	8007bb8 <_printf_i+0x16c>
 8007bb6:	b2ad      	uxth	r5, r5
 8007bb8:	6019      	str	r1, [r3, #0]
 8007bba:	07d3      	lsls	r3, r2, #31
 8007bbc:	d502      	bpl.n	8007bc4 <_printf_i+0x178>
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	2710      	movs	r7, #16
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d1a9      	bne.n	8007b1e <_printf_i+0xd2>
 8007bca:	2220      	movs	r2, #32
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	4393      	bics	r3, r2
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	e7a4      	b.n	8007b1e <_printf_i+0xd2>
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	680d      	ldr	r5, [r1, #0]
 8007bd8:	1d10      	adds	r0, r2, #4
 8007bda:	6949      	ldr	r1, [r1, #20]
 8007bdc:	6018      	str	r0, [r3, #0]
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	062e      	lsls	r6, r5, #24
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0x19c>
 8007be4:	6019      	str	r1, [r3, #0]
 8007be6:	e002      	b.n	8007bee <_printf_i+0x1a2>
 8007be8:	066d      	lsls	r5, r5, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0x198>
 8007bec:	8019      	strh	r1, [r3, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9e04      	ldr	r6, [sp, #16]
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	e7c0      	b.n	8007b78 <_printf_i+0x12c>
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	1d11      	adds	r1, r2, #4
 8007bfa:	6019      	str	r1, [r3, #0]
 8007bfc:	6816      	ldr	r6, [r2, #0]
 8007bfe:	2100      	movs	r1, #0
 8007c00:	0030      	movs	r0, r6
 8007c02:	6862      	ldr	r2, [r4, #4]
 8007c04:	f000 fc9d 	bl	8008542 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d001      	beq.n	8007c10 <_printf_i+0x1c4>
 8007c0c:	1b80      	subs	r0, r0, r6
 8007c0e:	6060      	str	r0, [r4, #4]
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	6123      	str	r3, [r4, #16]
 8007c14:	2300      	movs	r3, #0
 8007c16:	9a04      	ldr	r2, [sp, #16]
 8007c18:	7013      	strb	r3, [r2, #0]
 8007c1a:	e7ad      	b.n	8007b78 <_printf_i+0x12c>
 8007c1c:	0032      	movs	r2, r6
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	9906      	ldr	r1, [sp, #24]
 8007c22:	9805      	ldr	r0, [sp, #20]
 8007c24:	9d07      	ldr	r5, [sp, #28]
 8007c26:	47a8      	blx	r5
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d0af      	beq.n	8007b8c <_printf_i+0x140>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	079b      	lsls	r3, r3, #30
 8007c30:	d415      	bmi.n	8007c5e <_printf_i+0x212>
 8007c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c34:	68e0      	ldr	r0, [r4, #12]
 8007c36:	4298      	cmp	r0, r3
 8007c38:	daaa      	bge.n	8007b90 <_printf_i+0x144>
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	e7a8      	b.n	8007b90 <_printf_i+0x144>
 8007c3e:	0022      	movs	r2, r4
 8007c40:	2301      	movs	r3, #1
 8007c42:	9906      	ldr	r1, [sp, #24]
 8007c44:	9805      	ldr	r0, [sp, #20]
 8007c46:	9e07      	ldr	r6, [sp, #28]
 8007c48:	3219      	adds	r2, #25
 8007c4a:	47b0      	blx	r6
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d09d      	beq.n	8007b8c <_printf_i+0x140>
 8007c50:	3501      	adds	r5, #1
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	dcf0      	bgt.n	8007c3e <_printf_i+0x1f2>
 8007c5c:	e7e9      	b.n	8007c32 <_printf_i+0x1e6>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	e7f7      	b.n	8007c52 <_printf_i+0x206>
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	0800ba81 	.word	0x0800ba81
 8007c68:	0800ba92 	.word	0x0800ba92

08007c6c <_scanf_float>:
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b08b      	sub	sp, #44	; 0x2c
 8007c70:	0016      	movs	r6, r2
 8007c72:	9002      	str	r0, [sp, #8]
 8007c74:	22ae      	movs	r2, #174	; 0xae
 8007c76:	2000      	movs	r0, #0
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	688b      	ldr	r3, [r1, #8]
 8007c7c:	000f      	movs	r7, r1
 8007c7e:	1e59      	subs	r1, r3, #1
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	9006      	str	r0, [sp, #24]
 8007c84:	4291      	cmp	r1, r2
 8007c86:	d905      	bls.n	8007c94 <_scanf_float+0x28>
 8007c88:	3b5e      	subs	r3, #94	; 0x5e
 8007c8a:	3bff      	subs	r3, #255	; 0xff
 8007c8c:	9306      	str	r3, [sp, #24]
 8007c8e:	235e      	movs	r3, #94	; 0x5e
 8007c90:	33ff      	adds	r3, #255	; 0xff
 8007c92:	60bb      	str	r3, [r7, #8]
 8007c94:	23f0      	movs	r3, #240	; 0xf0
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	003b      	movs	r3, r7
 8007ca0:	2400      	movs	r4, #0
 8007ca2:	331c      	adds	r3, #28
 8007ca4:	001d      	movs	r5, r3
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	9403      	str	r4, [sp, #12]
 8007caa:	9409      	str	r4, [sp, #36]	; 0x24
 8007cac:	9408      	str	r4, [sp, #32]
 8007cae:	9401      	str	r4, [sp, #4]
 8007cb0:	9405      	str	r4, [sp, #20]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d00a      	beq.n	8007cce <_scanf_float+0x62>
 8007cb8:	6833      	ldr	r3, [r6, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b4e      	cmp	r3, #78	; 0x4e
 8007cbe:	d844      	bhi.n	8007d4a <_scanf_float+0xde>
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d82c      	bhi.n	8007d20 <_scanf_float+0xb4>
 8007cc6:	382b      	subs	r0, #43	; 0x2b
 8007cc8:	b2c1      	uxtb	r1, r0
 8007cca:	290e      	cmp	r1, #14
 8007ccc:	d92a      	bls.n	8007d24 <_scanf_float+0xb8>
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <_scanf_float+0x70>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	4aa3      	ldr	r2, [pc, #652]	; (8007f64 <_scanf_float+0x2f8>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d900      	bls.n	8007ce6 <_scanf_float+0x7a>
 8007ce4:	e0f9      	b.n	8007eda <_scanf_float+0x26e>
 8007ce6:	24be      	movs	r4, #190	; 0xbe
 8007ce8:	0064      	lsls	r4, r4, #1
 8007cea:	9b04      	ldr	r3, [sp, #16]
 8007cec:	429d      	cmp	r5, r3
 8007cee:	d900      	bls.n	8007cf2 <_scanf_float+0x86>
 8007cf0:	e0e9      	b.n	8007ec6 <_scanf_float+0x25a>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	e183      	b.n	8008000 <_scanf_float+0x394>
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	3861      	subs	r0, #97	; 0x61
 8007cfc:	280d      	cmp	r0, #13
 8007cfe:	d8e6      	bhi.n	8007cce <_scanf_float+0x62>
 8007d00:	f7f8 fa12 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d04:	ffe50083 	.word	0xffe50083
 8007d08:	ffe5ffe5 	.word	0xffe5ffe5
 8007d0c:	00a200b6 	.word	0x00a200b6
 8007d10:	ffe5ffe5 	.word	0xffe5ffe5
 8007d14:	ffe50089 	.word	0xffe50089
 8007d18:	ffe5ffe5 	.word	0xffe5ffe5
 8007d1c:	0065ffe5 	.word	0x0065ffe5
 8007d20:	3841      	subs	r0, #65	; 0x41
 8007d22:	e7eb      	b.n	8007cfc <_scanf_float+0x90>
 8007d24:	280e      	cmp	r0, #14
 8007d26:	d8d2      	bhi.n	8007cce <_scanf_float+0x62>
 8007d28:	f7f8 f9fe 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d2c:	ffd1004b 	.word	0xffd1004b
 8007d30:	0098004b 	.word	0x0098004b
 8007d34:	0020ffd1 	.word	0x0020ffd1
 8007d38:	00400040 	.word	0x00400040
 8007d3c:	00400040 	.word	0x00400040
 8007d40:	00400040 	.word	0x00400040
 8007d44:	00400040 	.word	0x00400040
 8007d48:	0040      	.short	0x0040
 8007d4a:	2b6e      	cmp	r3, #110	; 0x6e
 8007d4c:	d809      	bhi.n	8007d62 <_scanf_float+0xf6>
 8007d4e:	2b60      	cmp	r3, #96	; 0x60
 8007d50:	d8d2      	bhi.n	8007cf8 <_scanf_float+0x8c>
 8007d52:	2b54      	cmp	r3, #84	; 0x54
 8007d54:	d07d      	beq.n	8007e52 <_scanf_float+0x1e6>
 8007d56:	2b59      	cmp	r3, #89	; 0x59
 8007d58:	d1b9      	bne.n	8007cce <_scanf_float+0x62>
 8007d5a:	2c07      	cmp	r4, #7
 8007d5c:	d1b7      	bne.n	8007cce <_scanf_float+0x62>
 8007d5e:	2408      	movs	r4, #8
 8007d60:	e02c      	b.n	8007dbc <_scanf_float+0x150>
 8007d62:	2b74      	cmp	r3, #116	; 0x74
 8007d64:	d075      	beq.n	8007e52 <_scanf_float+0x1e6>
 8007d66:	2b79      	cmp	r3, #121	; 0x79
 8007d68:	d0f7      	beq.n	8007d5a <_scanf_float+0xee>
 8007d6a:	e7b0      	b.n	8007cce <_scanf_float+0x62>
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	05c8      	lsls	r0, r1, #23
 8007d70:	d51c      	bpl.n	8007dac <_scanf_float+0x140>
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	4399      	bics	r1, r3
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9b06      	ldr	r3, [sp, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <_scanf_float+0x120>
 8007d84:	3b01      	subs	r3, #1
 8007d86:	3201      	adds	r2, #1
 8007d88:	9306      	str	r3, [sp, #24]
 8007d8a:	60ba      	str	r2, [r7, #8]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	6873      	ldr	r3, [r6, #4]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6073      	str	r3, [r6, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dc00      	bgt.n	8007da4 <_scanf_float+0x138>
 8007da2:	e086      	b.n	8007eb2 <_scanf_float+0x246>
 8007da4:	6833      	ldr	r3, [r6, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	e782      	b.n	8007cb2 <_scanf_float+0x46>
 8007dac:	9a03      	ldr	r2, [sp, #12]
 8007dae:	1912      	adds	r2, r2, r4
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d18c      	bne.n	8007cce <_scanf_float+0x62>
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	496c      	ldr	r1, [pc, #432]	; (8007f68 <_scanf_float+0x2fc>)
 8007db8:	400a      	ands	r2, r1
 8007dba:	603a      	str	r2, [r7, #0]
 8007dbc:	702b      	strb	r3, [r5, #0]
 8007dbe:	3501      	adds	r5, #1
 8007dc0:	e7e4      	b.n	8007d8c <_scanf_float+0x120>
 8007dc2:	2180      	movs	r1, #128	; 0x80
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	420a      	tst	r2, r1
 8007dc8:	d081      	beq.n	8007cce <_scanf_float+0x62>
 8007dca:	438a      	bics	r2, r1
 8007dcc:	e7f5      	b.n	8007dba <_scanf_float+0x14e>
 8007dce:	9a03      	ldr	r2, [sp, #12]
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	d10f      	bne.n	8007df4 <_scanf_float+0x188>
 8007dd4:	9a01      	ldr	r2, [sp, #4]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	d10f      	bne.n	8007dfa <_scanf_float+0x18e>
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	21e0      	movs	r1, #224	; 0xe0
 8007dde:	0010      	movs	r0, r2
 8007de0:	00c9      	lsls	r1, r1, #3
 8007de2:	4008      	ands	r0, r1
 8007de4:	4288      	cmp	r0, r1
 8007de6:	d108      	bne.n	8007dfa <_scanf_float+0x18e>
 8007de8:	4960      	ldr	r1, [pc, #384]	; (8007f6c <_scanf_float+0x300>)
 8007dea:	400a      	ands	r2, r1
 8007dec:	603a      	str	r2, [r7, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	9203      	str	r2, [sp, #12]
 8007df2:	e7e3      	b.n	8007dbc <_scanf_float+0x150>
 8007df4:	9a03      	ldr	r2, [sp, #12]
 8007df6:	2a02      	cmp	r2, #2
 8007df8:	d059      	beq.n	8007eae <_scanf_float+0x242>
 8007dfa:	2c01      	cmp	r4, #1
 8007dfc:	d002      	beq.n	8007e04 <_scanf_float+0x198>
 8007dfe:	2c04      	cmp	r4, #4
 8007e00:	d000      	beq.n	8007e04 <_scanf_float+0x198>
 8007e02:	e764      	b.n	8007cce <_scanf_float+0x62>
 8007e04:	3401      	adds	r4, #1
 8007e06:	b2e4      	uxtb	r4, r4
 8007e08:	e7d8      	b.n	8007dbc <_scanf_float+0x150>
 8007e0a:	9a03      	ldr	r2, [sp, #12]
 8007e0c:	2a01      	cmp	r2, #1
 8007e0e:	d000      	beq.n	8007e12 <_scanf_float+0x1a6>
 8007e10:	e75d      	b.n	8007cce <_scanf_float+0x62>
 8007e12:	2202      	movs	r2, #2
 8007e14:	e7ec      	b.n	8007df0 <_scanf_float+0x184>
 8007e16:	2c00      	cmp	r4, #0
 8007e18:	d110      	bne.n	8007e3c <_scanf_float+0x1d0>
 8007e1a:	9a01      	ldr	r2, [sp, #4]
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	d000      	beq.n	8007e22 <_scanf_float+0x1b6>
 8007e20:	e758      	b.n	8007cd4 <_scanf_float+0x68>
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	21e0      	movs	r1, #224	; 0xe0
 8007e26:	0010      	movs	r0, r2
 8007e28:	00c9      	lsls	r1, r1, #3
 8007e2a:	4008      	ands	r0, r1
 8007e2c:	4288      	cmp	r0, r1
 8007e2e:	d000      	beq.n	8007e32 <_scanf_float+0x1c6>
 8007e30:	e754      	b.n	8007cdc <_scanf_float+0x70>
 8007e32:	494e      	ldr	r1, [pc, #312]	; (8007f6c <_scanf_float+0x300>)
 8007e34:	3401      	adds	r4, #1
 8007e36:	400a      	ands	r2, r1
 8007e38:	603a      	str	r2, [r7, #0]
 8007e3a:	e7bf      	b.n	8007dbc <_scanf_float+0x150>
 8007e3c:	21fd      	movs	r1, #253	; 0xfd
 8007e3e:	1ee2      	subs	r2, r4, #3
 8007e40:	420a      	tst	r2, r1
 8007e42:	d000      	beq.n	8007e46 <_scanf_float+0x1da>
 8007e44:	e743      	b.n	8007cce <_scanf_float+0x62>
 8007e46:	e7dd      	b.n	8007e04 <_scanf_float+0x198>
 8007e48:	2c02      	cmp	r4, #2
 8007e4a:	d000      	beq.n	8007e4e <_scanf_float+0x1e2>
 8007e4c:	e73f      	b.n	8007cce <_scanf_float+0x62>
 8007e4e:	2403      	movs	r4, #3
 8007e50:	e7b4      	b.n	8007dbc <_scanf_float+0x150>
 8007e52:	2c06      	cmp	r4, #6
 8007e54:	d000      	beq.n	8007e58 <_scanf_float+0x1ec>
 8007e56:	e73a      	b.n	8007cce <_scanf_float+0x62>
 8007e58:	2407      	movs	r4, #7
 8007e5a:	e7af      	b.n	8007dbc <_scanf_float+0x150>
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	0591      	lsls	r1, r2, #22
 8007e60:	d400      	bmi.n	8007e64 <_scanf_float+0x1f8>
 8007e62:	e734      	b.n	8007cce <_scanf_float+0x62>
 8007e64:	4942      	ldr	r1, [pc, #264]	; (8007f70 <_scanf_float+0x304>)
 8007e66:	400a      	ands	r2, r1
 8007e68:	603a      	str	r2, [r7, #0]
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	9205      	str	r2, [sp, #20]
 8007e6e:	e7a5      	b.n	8007dbc <_scanf_float+0x150>
 8007e70:	21a0      	movs	r1, #160	; 0xa0
 8007e72:	2080      	movs	r0, #128	; 0x80
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	00c9      	lsls	r1, r1, #3
 8007e78:	4011      	ands	r1, r2
 8007e7a:	00c0      	lsls	r0, r0, #3
 8007e7c:	4281      	cmp	r1, r0
 8007e7e:	d006      	beq.n	8007e8e <_scanf_float+0x222>
 8007e80:	4202      	tst	r2, r0
 8007e82:	d100      	bne.n	8007e86 <_scanf_float+0x21a>
 8007e84:	e723      	b.n	8007cce <_scanf_float+0x62>
 8007e86:	9901      	ldr	r1, [sp, #4]
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	d100      	bne.n	8007e8e <_scanf_float+0x222>
 8007e8c:	e726      	b.n	8007cdc <_scanf_float+0x70>
 8007e8e:	0591      	lsls	r1, r2, #22
 8007e90:	d404      	bmi.n	8007e9c <_scanf_float+0x230>
 8007e92:	9901      	ldr	r1, [sp, #4]
 8007e94:	9805      	ldr	r0, [sp, #20]
 8007e96:	9509      	str	r5, [sp, #36]	; 0x24
 8007e98:	1a09      	subs	r1, r1, r0
 8007e9a:	9108      	str	r1, [sp, #32]
 8007e9c:	4933      	ldr	r1, [pc, #204]	; (8007f6c <_scanf_float+0x300>)
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	21c0      	movs	r1, #192	; 0xc0
 8007ea2:	0049      	lsls	r1, r1, #1
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	603a      	str	r2, [r7, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	e786      	b.n	8007dbc <_scanf_float+0x150>
 8007eae:	2203      	movs	r2, #3
 8007eb0:	e79e      	b.n	8007df0 <_scanf_float+0x184>
 8007eb2:	23c0      	movs	r3, #192	; 0xc0
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	0031      	movs	r1, r6
 8007eb8:	58fb      	ldr	r3, [r7, r3]
 8007eba:	9802      	ldr	r0, [sp, #8]
 8007ebc:	4798      	blx	r3
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d100      	bne.n	8007ec4 <_scanf_float+0x258>
 8007ec2:	e6f6      	b.n	8007cb2 <_scanf_float+0x46>
 8007ec4:	e703      	b.n	8007cce <_scanf_float+0x62>
 8007ec6:	3d01      	subs	r5, #1
 8007ec8:	593b      	ldr	r3, [r7, r4]
 8007eca:	0032      	movs	r2, r6
 8007ecc:	7829      	ldrb	r1, [r5, #0]
 8007ece:	9802      	ldr	r0, [sp, #8]
 8007ed0:	4798      	blx	r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	e707      	b.n	8007cea <_scanf_float+0x7e>
 8007eda:	1e63      	subs	r3, r4, #1
 8007edc:	2b06      	cmp	r3, #6
 8007ede:	d80e      	bhi.n	8007efe <_scanf_float+0x292>
 8007ee0:	9503      	str	r5, [sp, #12]
 8007ee2:	2c02      	cmp	r4, #2
 8007ee4:	d920      	bls.n	8007f28 <_scanf_float+0x2bc>
 8007ee6:	1b63      	subs	r3, r4, r5
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	9306      	str	r3, [sp, #24]
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	9a06      	ldr	r2, [sp, #24]
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d827      	bhi.n	8007f48 <_scanf_float+0x2dc>
 8007ef8:	3c03      	subs	r4, #3
 8007efa:	b2e4      	uxtb	r4, r4
 8007efc:	1b2d      	subs	r5, r5, r4
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	05da      	lsls	r2, r3, #23
 8007f02:	d552      	bpl.n	8007faa <_scanf_float+0x33e>
 8007f04:	055b      	lsls	r3, r3, #21
 8007f06:	d535      	bpl.n	8007f74 <_scanf_float+0x308>
 8007f08:	24be      	movs	r4, #190	; 0xbe
 8007f0a:	0064      	lsls	r4, r4, #1
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	d800      	bhi.n	8007f14 <_scanf_float+0x2a8>
 8007f12:	e6ee      	b.n	8007cf2 <_scanf_float+0x86>
 8007f14:	3d01      	subs	r5, #1
 8007f16:	593b      	ldr	r3, [r7, r4]
 8007f18:	0032      	movs	r2, r6
 8007f1a:	7829      	ldrb	r1, [r5, #0]
 8007f1c:	9802      	ldr	r0, [sp, #8]
 8007f1e:	4798      	blx	r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	e7f1      	b.n	8007f0c <_scanf_float+0x2a0>
 8007f28:	24be      	movs	r4, #190	; 0xbe
 8007f2a:	0064      	lsls	r4, r4, #1
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	d800      	bhi.n	8007f34 <_scanf_float+0x2c8>
 8007f32:	e6de      	b.n	8007cf2 <_scanf_float+0x86>
 8007f34:	3d01      	subs	r5, #1
 8007f36:	593b      	ldr	r3, [r7, r4]
 8007f38:	0032      	movs	r2, r6
 8007f3a:	7829      	ldrb	r1, [r5, #0]
 8007f3c:	9802      	ldr	r0, [sp, #8]
 8007f3e:	4798      	blx	r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	e7f1      	b.n	8007f2c <_scanf_float+0x2c0>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	0032      	movs	r2, r6
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	7819      	ldrb	r1, [r3, #0]
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	23be      	movs	r3, #190	; 0xbe
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	58fb      	ldr	r3, [r7, r3]
 8007f58:	9802      	ldr	r0, [sp, #8]
 8007f5a:	4798      	blx	r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	e7c3      	b.n	8007eec <_scanf_float+0x280>
 8007f64:	fffffeff 	.word	0xfffffeff
 8007f68:	fffffe7f 	.word	0xfffffe7f
 8007f6c:	fffff87f 	.word	0xfffff87f
 8007f70:	fffffd7f 	.word	0xfffffd7f
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1e6c      	subs	r4, r5, #1
 8007f78:	7821      	ldrb	r1, [r4, #0]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	2965      	cmp	r1, #101	; 0x65
 8007f80:	d00c      	beq.n	8007f9c <_scanf_float+0x330>
 8007f82:	2945      	cmp	r1, #69	; 0x45
 8007f84:	d00a      	beq.n	8007f9c <_scanf_float+0x330>
 8007f86:	23be      	movs	r3, #190	; 0xbe
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	58fb      	ldr	r3, [r7, r3]
 8007f8c:	0032      	movs	r2, r6
 8007f8e:	9802      	ldr	r0, [sp, #8]
 8007f90:	4798      	blx	r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1eac      	subs	r4, r5, #2
 8007f96:	3b01      	subs	r3, #1
 8007f98:	7821      	ldrb	r1, [r4, #0]
 8007f9a:	613b      	str	r3, [r7, #16]
 8007f9c:	23be      	movs	r3, #190	; 0xbe
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	0032      	movs	r2, r6
 8007fa2:	58fb      	ldr	r3, [r7, r3]
 8007fa4:	9802      	ldr	r0, [sp, #8]
 8007fa6:	4798      	blx	r3
 8007fa8:	0025      	movs	r5, r4
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	2310      	movs	r3, #16
 8007fae:	0011      	movs	r1, r2
 8007fb0:	4019      	ands	r1, r3
 8007fb2:	9103      	str	r1, [sp, #12]
 8007fb4:	421a      	tst	r2, r3
 8007fb6:	d15b      	bne.n	8008070 <_scanf_float+0x404>
 8007fb8:	22c0      	movs	r2, #192	; 0xc0
 8007fba:	7029      	strb	r1, [r5, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	00d2      	lsls	r2, r2, #3
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2280      	movs	r2, #128	; 0x80
 8007fc4:	00d2      	lsls	r2, r2, #3
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d11d      	bne.n	8008006 <_scanf_float+0x39a>
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	9a01      	ldr	r2, [sp, #4]
 8007fce:	9901      	ldr	r1, [sp, #4]
 8007fd0:	1a9a      	subs	r2, r3, r2
 8007fd2:	428b      	cmp	r3, r1
 8007fd4:	d124      	bne.n	8008020 <_scanf_float+0x3b4>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	9904      	ldr	r1, [sp, #16]
 8007fda:	9802      	ldr	r0, [sp, #8]
 8007fdc:	f7ff f91c 	bl	8007218 <_strtod_r>
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	0004      	movs	r4, r0
 8007fe6:	000d      	movs	r5, r1
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	0791      	lsls	r1, r2, #30
 8007fec:	d525      	bpl.n	800803a <_scanf_float+0x3ce>
 8007fee:	9907      	ldr	r1, [sp, #28]
 8007ff0:	1d1a      	adds	r2, r3, #4
 8007ff2:	600a      	str	r2, [r1, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	601c      	str	r4, [r3, #0]
 8007ff8:	605d      	str	r5, [r3, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	9803      	ldr	r0, [sp, #12]
 8008002:	b00b      	add	sp, #44	; 0x2c
 8008004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008006:	9b08      	ldr	r3, [sp, #32]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0e4      	beq.n	8007fd6 <_scanf_float+0x36a>
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	9a03      	ldr	r2, [sp, #12]
 8008010:	1c59      	adds	r1, r3, #1
 8008012:	9802      	ldr	r0, [sp, #8]
 8008014:	230a      	movs	r3, #10
 8008016:	f7ff f99b 	bl	8007350 <_strtol_r>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800801e:	1ac2      	subs	r2, r0, r3
 8008020:	003b      	movs	r3, r7
 8008022:	3370      	adds	r3, #112	; 0x70
 8008024:	33ff      	adds	r3, #255	; 0xff
 8008026:	429d      	cmp	r5, r3
 8008028:	d302      	bcc.n	8008030 <_scanf_float+0x3c4>
 800802a:	003d      	movs	r5, r7
 800802c:	356f      	adds	r5, #111	; 0x6f
 800802e:	35ff      	adds	r5, #255	; 0xff
 8008030:	0028      	movs	r0, r5
 8008032:	4910      	ldr	r1, [pc, #64]	; (8008074 <_scanf_float+0x408>)
 8008034:	f000 f91a 	bl	800826c <siprintf>
 8008038:	e7cd      	b.n	8007fd6 <_scanf_float+0x36a>
 800803a:	1d19      	adds	r1, r3, #4
 800803c:	0752      	lsls	r2, r2, #29
 800803e:	d502      	bpl.n	8008046 <_scanf_float+0x3da>
 8008040:	9a07      	ldr	r2, [sp, #28]
 8008042:	6011      	str	r1, [r2, #0]
 8008044:	e7d6      	b.n	8007ff4 <_scanf_float+0x388>
 8008046:	9a07      	ldr	r2, [sp, #28]
 8008048:	0020      	movs	r0, r4
 800804a:	6011      	str	r1, [r2, #0]
 800804c:	681e      	ldr	r6, [r3, #0]
 800804e:	0022      	movs	r2, r4
 8008050:	002b      	movs	r3, r5
 8008052:	0029      	movs	r1, r5
 8008054:	f7fa f920 	bl	8002298 <__aeabi_dcmpun>
 8008058:	2800      	cmp	r0, #0
 800805a:	d004      	beq.n	8008066 <_scanf_float+0x3fa>
 800805c:	4806      	ldr	r0, [pc, #24]	; (8008078 <_scanf_float+0x40c>)
 800805e:	f000 fa8b 	bl	8008578 <nanf>
 8008062:	6030      	str	r0, [r6, #0]
 8008064:	e7c9      	b.n	8007ffa <_scanf_float+0x38e>
 8008066:	0020      	movs	r0, r4
 8008068:	0029      	movs	r1, r5
 800806a:	f7fa f9bf 	bl	80023ec <__aeabi_d2f>
 800806e:	e7f8      	b.n	8008062 <_scanf_float+0x3f6>
 8008070:	2300      	movs	r3, #0
 8008072:	e63f      	b.n	8007cf4 <_scanf_float+0x88>
 8008074:	0800baa3 	.word	0x0800baa3
 8008078:	0800bd5b 	.word	0x0800bd5b

0800807c <std>:
 800807c:	2300      	movs	r3, #0
 800807e:	b510      	push	{r4, lr}
 8008080:	0004      	movs	r4, r0
 8008082:	6003      	str	r3, [r0, #0]
 8008084:	6043      	str	r3, [r0, #4]
 8008086:	6083      	str	r3, [r0, #8]
 8008088:	8181      	strh	r1, [r0, #12]
 800808a:	6643      	str	r3, [r0, #100]	; 0x64
 800808c:	81c2      	strh	r2, [r0, #14]
 800808e:	6103      	str	r3, [r0, #16]
 8008090:	6143      	str	r3, [r0, #20]
 8008092:	6183      	str	r3, [r0, #24]
 8008094:	0019      	movs	r1, r3
 8008096:	2208      	movs	r2, #8
 8008098:	305c      	adds	r0, #92	; 0x5c
 800809a:	f000 f97d 	bl	8008398 <memset>
 800809e:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <std+0x50>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	6263      	str	r3, [r4, #36]	; 0x24
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <std+0x54>)
 80080a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <std+0x58>)
 80080aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <std+0x5c>)
 80080ae:	6323      	str	r3, [r4, #48]	; 0x30
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <std+0x60>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d005      	beq.n	80080c2 <std+0x46>
 80080b6:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <std+0x64>)
 80080b8:	429c      	cmp	r4, r3
 80080ba:	d002      	beq.n	80080c2 <std+0x46>
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <std+0x68>)
 80080be:	429c      	cmp	r4, r3
 80080c0:	d103      	bne.n	80080ca <std+0x4e>
 80080c2:	0020      	movs	r0, r4
 80080c4:	3058      	adds	r0, #88	; 0x58
 80080c6:	f000 fa39 	bl	800853c <__retarget_lock_init_recursive>
 80080ca:	bd10      	pop	{r4, pc}
 80080cc:	080082fd 	.word	0x080082fd
 80080d0:	08008329 	.word	0x08008329
 80080d4:	08008361 	.word	0x08008361
 80080d8:	0800838d 	.word	0x0800838d
 80080dc:	20000594 	.word	0x20000594
 80080e0:	200005fc 	.word	0x200005fc
 80080e4:	20000664 	.word	0x20000664

080080e8 <stdio_exit_handler>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <stdio_exit_handler+0x10>)
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <stdio_exit_handler+0x14>)
 80080ee:	4804      	ldr	r0, [pc, #16]	; (8008100 <stdio_exit_handler+0x18>)
 80080f0:	f000 f86c 	bl	80081cc <_fwalk_sglue>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	20000018 	.word	0x20000018
 80080fc:	0800ade5 	.word	0x0800ade5
 8008100:	20000190 	.word	0x20000190

08008104 <cleanup_stdio>:
 8008104:	6841      	ldr	r1, [r0, #4]
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <cleanup_stdio+0x30>)
 8008108:	b510      	push	{r4, lr}
 800810a:	0004      	movs	r4, r0
 800810c:	4299      	cmp	r1, r3
 800810e:	d001      	beq.n	8008114 <cleanup_stdio+0x10>
 8008110:	f002 fe68 	bl	800ade4 <_fflush_r>
 8008114:	68a1      	ldr	r1, [r4, #8]
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <cleanup_stdio+0x34>)
 8008118:	4299      	cmp	r1, r3
 800811a:	d002      	beq.n	8008122 <cleanup_stdio+0x1e>
 800811c:	0020      	movs	r0, r4
 800811e:	f002 fe61 	bl	800ade4 <_fflush_r>
 8008122:	68e1      	ldr	r1, [r4, #12]
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <cleanup_stdio+0x38>)
 8008126:	4299      	cmp	r1, r3
 8008128:	d002      	beq.n	8008130 <cleanup_stdio+0x2c>
 800812a:	0020      	movs	r0, r4
 800812c:	f002 fe5a 	bl	800ade4 <_fflush_r>
 8008130:	bd10      	pop	{r4, pc}
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	20000594 	.word	0x20000594
 8008138:	200005fc 	.word	0x200005fc
 800813c:	20000664 	.word	0x20000664

08008140 <global_stdio_init.part.0>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <global_stdio_init.part.0+0x28>)
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <global_stdio_init.part.0+0x2c>)
 8008146:	2104      	movs	r1, #4
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	4809      	ldr	r0, [pc, #36]	; (8008170 <global_stdio_init.part.0+0x30>)
 800814c:	2200      	movs	r2, #0
 800814e:	f7ff ff95 	bl	800807c <std>
 8008152:	2201      	movs	r2, #1
 8008154:	2109      	movs	r1, #9
 8008156:	4807      	ldr	r0, [pc, #28]	; (8008174 <global_stdio_init.part.0+0x34>)
 8008158:	f7ff ff90 	bl	800807c <std>
 800815c:	2202      	movs	r2, #2
 800815e:	2112      	movs	r1, #18
 8008160:	4805      	ldr	r0, [pc, #20]	; (8008178 <global_stdio_init.part.0+0x38>)
 8008162:	f7ff ff8b 	bl	800807c <std>
 8008166:	bd10      	pop	{r4, pc}
 8008168:	200006cc 	.word	0x200006cc
 800816c:	080080e9 	.word	0x080080e9
 8008170:	20000594 	.word	0x20000594
 8008174:	200005fc 	.word	0x200005fc
 8008178:	20000664 	.word	0x20000664

0800817c <__sfp_lock_acquire>:
 800817c:	b510      	push	{r4, lr}
 800817e:	4802      	ldr	r0, [pc, #8]	; (8008188 <__sfp_lock_acquire+0xc>)
 8008180:	f000 f9dd 	bl	800853e <__retarget_lock_acquire_recursive>
 8008184:	bd10      	pop	{r4, pc}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	200006d5 	.word	0x200006d5

0800818c <__sfp_lock_release>:
 800818c:	b510      	push	{r4, lr}
 800818e:	4802      	ldr	r0, [pc, #8]	; (8008198 <__sfp_lock_release+0xc>)
 8008190:	f000 f9d6 	bl	8008540 <__retarget_lock_release_recursive>
 8008194:	bd10      	pop	{r4, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	200006d5 	.word	0x200006d5

0800819c <__sinit>:
 800819c:	b510      	push	{r4, lr}
 800819e:	0004      	movs	r4, r0
 80081a0:	f7ff ffec 	bl	800817c <__sfp_lock_acquire>
 80081a4:	6a23      	ldr	r3, [r4, #32]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <__sinit+0x14>
 80081aa:	f7ff ffef 	bl	800818c <__sfp_lock_release>
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <__sinit+0x28>)
 80081b2:	6223      	str	r3, [r4, #32]
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <__sinit+0x2c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f6      	bne.n	80081aa <__sinit+0xe>
 80081bc:	f7ff ffc0 	bl	8008140 <global_stdio_init.part.0>
 80081c0:	e7f3      	b.n	80081aa <__sinit+0xe>
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	08008105 	.word	0x08008105
 80081c8:	200006cc 	.word	0x200006cc

080081cc <_fwalk_sglue>:
 80081cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ce:	0014      	movs	r4, r2
 80081d0:	2600      	movs	r6, #0
 80081d2:	9000      	str	r0, [sp, #0]
 80081d4:	9101      	str	r1, [sp, #4]
 80081d6:	68a5      	ldr	r5, [r4, #8]
 80081d8:	6867      	ldr	r7, [r4, #4]
 80081da:	3f01      	subs	r7, #1
 80081dc:	d504      	bpl.n	80081e8 <_fwalk_sglue+0x1c>
 80081de:	6824      	ldr	r4, [r4, #0]
 80081e0:	2c00      	cmp	r4, #0
 80081e2:	d1f8      	bne.n	80081d6 <_fwalk_sglue+0xa>
 80081e4:	0030      	movs	r0, r6
 80081e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081e8:	89ab      	ldrh	r3, [r5, #12]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d908      	bls.n	8008200 <_fwalk_sglue+0x34>
 80081ee:	220e      	movs	r2, #14
 80081f0:	5eab      	ldrsh	r3, [r5, r2]
 80081f2:	3301      	adds	r3, #1
 80081f4:	d004      	beq.n	8008200 <_fwalk_sglue+0x34>
 80081f6:	0029      	movs	r1, r5
 80081f8:	9800      	ldr	r0, [sp, #0]
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	4798      	blx	r3
 80081fe:	4306      	orrs	r6, r0
 8008200:	3568      	adds	r5, #104	; 0x68
 8008202:	e7ea      	b.n	80081da <_fwalk_sglue+0xe>

08008204 <sniprintf>:
 8008204:	b40c      	push	{r2, r3}
 8008206:	b530      	push	{r4, r5, lr}
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <sniprintf+0x64>)
 800820a:	000c      	movs	r4, r1
 800820c:	681d      	ldr	r5, [r3, #0]
 800820e:	b09d      	sub	sp, #116	; 0x74
 8008210:	2900      	cmp	r1, #0
 8008212:	da08      	bge.n	8008226 <sniprintf+0x22>
 8008214:	238b      	movs	r3, #139	; 0x8b
 8008216:	2001      	movs	r0, #1
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	4240      	negs	r0, r0
 800821c:	b01d      	add	sp, #116	; 0x74
 800821e:	bc30      	pop	{r4, r5}
 8008220:	bc08      	pop	{r3}
 8008222:	b002      	add	sp, #8
 8008224:	4718      	bx	r3
 8008226:	2382      	movs	r3, #130	; 0x82
 8008228:	466a      	mov	r2, sp
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	8293      	strh	r3, [r2, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9006      	str	r0, [sp, #24]
 8008234:	4299      	cmp	r1, r3
 8008236:	d000      	beq.n	800823a <sniprintf+0x36>
 8008238:	1e4b      	subs	r3, r1, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	2301      	movs	r3, #1
 8008240:	466a      	mov	r2, sp
 8008242:	425b      	negs	r3, r3
 8008244:	82d3      	strh	r3, [r2, #22]
 8008246:	0028      	movs	r0, r5
 8008248:	ab21      	add	r3, sp, #132	; 0x84
 800824a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800824c:	a902      	add	r1, sp, #8
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	f002 f916 	bl	800a480 <_svfiprintf_r>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	da01      	bge.n	800825c <sniprintf+0x58>
 8008258:	238b      	movs	r3, #139	; 0x8b
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	2c00      	cmp	r4, #0
 800825e:	d0dd      	beq.n	800821c <sniprintf+0x18>
 8008260:	2200      	movs	r2, #0
 8008262:	9b02      	ldr	r3, [sp, #8]
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e7d9      	b.n	800821c <sniprintf+0x18>
 8008268:	200001dc 	.word	0x200001dc

0800826c <siprintf>:
 800826c:	b40e      	push	{r1, r2, r3}
 800826e:	b500      	push	{lr}
 8008270:	490b      	ldr	r1, [pc, #44]	; (80082a0 <siprintf+0x34>)
 8008272:	b09c      	sub	sp, #112	; 0x70
 8008274:	ab1d      	add	r3, sp, #116	; 0x74
 8008276:	9002      	str	r0, [sp, #8]
 8008278:	9006      	str	r0, [sp, #24]
 800827a:	9107      	str	r1, [sp, #28]
 800827c:	9104      	str	r1, [sp, #16]
 800827e:	4809      	ldr	r0, [pc, #36]	; (80082a4 <siprintf+0x38>)
 8008280:	4909      	ldr	r1, [pc, #36]	; (80082a8 <siprintf+0x3c>)
 8008282:	cb04      	ldmia	r3!, {r2}
 8008284:	9105      	str	r1, [sp, #20]
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	a902      	add	r1, sp, #8
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	f002 f8f8 	bl	800a480 <_svfiprintf_r>
 8008290:	2200      	movs	r2, #0
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	b01c      	add	sp, #112	; 0x70
 8008298:	bc08      	pop	{r3}
 800829a:	b003      	add	sp, #12
 800829c:	4718      	bx	r3
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	7fffffff 	.word	0x7fffffff
 80082a4:	200001dc 	.word	0x200001dc
 80082a8:	ffff0208 	.word	0xffff0208

080082ac <siscanf>:
 80082ac:	b40e      	push	{r1, r2, r3}
 80082ae:	b530      	push	{r4, r5, lr}
 80082b0:	2381      	movs	r3, #129	; 0x81
 80082b2:	b09c      	sub	sp, #112	; 0x70
 80082b4:	466a      	mov	r2, sp
 80082b6:	ac1f      	add	r4, sp, #124	; 0x7c
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	cc20      	ldmia	r4!, {r5}
 80082bc:	8293      	strh	r3, [r2, #20]
 80082be:	9002      	str	r0, [sp, #8]
 80082c0:	9006      	str	r0, [sp, #24]
 80082c2:	f7f7 ff1f 	bl	8000104 <strlen>
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <siscanf+0x48>)
 80082c8:	466a      	mov	r2, sp
 80082ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80082cc:	2300      	movs	r3, #0
 80082ce:	9003      	str	r0, [sp, #12]
 80082d0:	9007      	str	r0, [sp, #28]
 80082d2:	4809      	ldr	r0, [pc, #36]	; (80082f8 <siscanf+0x4c>)
 80082d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082d6:	9314      	str	r3, [sp, #80]	; 0x50
 80082d8:	3b01      	subs	r3, #1
 80082da:	82d3      	strh	r3, [r2, #22]
 80082dc:	a902      	add	r1, sp, #8
 80082de:	0023      	movs	r3, r4
 80082e0:	002a      	movs	r2, r5
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	9401      	str	r4, [sp, #4]
 80082e6:	f002 fa27 	bl	800a738 <__ssvfiscanf_r>
 80082ea:	b01c      	add	sp, #112	; 0x70
 80082ec:	bc30      	pop	{r4, r5}
 80082ee:	bc08      	pop	{r3}
 80082f0:	b003      	add	sp, #12
 80082f2:	4718      	bx	r3
 80082f4:	08008325 	.word	0x08008325
 80082f8:	200001dc 	.word	0x200001dc

080082fc <__sread>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	000c      	movs	r4, r1
 8008300:	250e      	movs	r5, #14
 8008302:	5f49      	ldrsh	r1, [r1, r5]
 8008304:	f000 f8b6 	bl	8008474 <_read_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	db03      	blt.n	8008314 <__sread+0x18>
 800830c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800830e:	181b      	adds	r3, r3, r0
 8008310:	6563      	str	r3, [r4, #84]	; 0x54
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	4a02      	ldr	r2, [pc, #8]	; (8008320 <__sread+0x24>)
 8008318:	4013      	ands	r3, r2
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	e7f9      	b.n	8008312 <__sread+0x16>
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	ffffefff 	.word	0xffffefff

08008324 <__seofread>:
 8008324:	2000      	movs	r0, #0
 8008326:	4770      	bx	lr

08008328 <__swrite>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	001f      	movs	r7, r3
 800832c:	898b      	ldrh	r3, [r1, #12]
 800832e:	0005      	movs	r5, r0
 8008330:	000c      	movs	r4, r1
 8008332:	0016      	movs	r6, r2
 8008334:	05db      	lsls	r3, r3, #23
 8008336:	d505      	bpl.n	8008344 <__swrite+0x1c>
 8008338:	230e      	movs	r3, #14
 800833a:	5ec9      	ldrsh	r1, [r1, r3]
 800833c:	2200      	movs	r2, #0
 800833e:	2302      	movs	r3, #2
 8008340:	f000 f884 	bl	800844c <_lseek_r>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	4a05      	ldr	r2, [pc, #20]	; (800835c <__swrite+0x34>)
 8008348:	0028      	movs	r0, r5
 800834a:	4013      	ands	r3, r2
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	0032      	movs	r2, r6
 8008350:	230e      	movs	r3, #14
 8008352:	5ee1      	ldrsh	r1, [r4, r3]
 8008354:	003b      	movs	r3, r7
 8008356:	f000 f8b3 	bl	80084c0 <_write_r>
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	ffffefff 	.word	0xffffefff

08008360 <__sseek>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	000c      	movs	r4, r1
 8008364:	250e      	movs	r5, #14
 8008366:	5f49      	ldrsh	r1, [r1, r5]
 8008368:	f000 f870 	bl	800844c <_lseek_r>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	1c42      	adds	r2, r0, #1
 8008370:	d103      	bne.n	800837a <__sseek+0x1a>
 8008372:	4a05      	ldr	r2, [pc, #20]	; (8008388 <__sseek+0x28>)
 8008374:	4013      	ands	r3, r2
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	0152      	lsls	r2, r2, #5
 800837e:	4313      	orrs	r3, r2
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	6560      	str	r0, [r4, #84]	; 0x54
 8008384:	e7f8      	b.n	8008378 <__sseek+0x18>
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	ffffefff 	.word	0xffffefff

0800838c <__sclose>:
 800838c:	b510      	push	{r4, lr}
 800838e:	230e      	movs	r3, #14
 8008390:	5ec9      	ldrsh	r1, [r1, r3]
 8008392:	f000 f849 	bl	8008428 <_close_r>
 8008396:	bd10      	pop	{r4, pc}

08008398 <memset>:
 8008398:	0003      	movs	r3, r0
 800839a:	1882      	adds	r2, r0, r2
 800839c:	4293      	cmp	r3, r2
 800839e:	d100      	bne.n	80083a2 <memset+0xa>
 80083a0:	4770      	bx	lr
 80083a2:	7019      	strb	r1, [r3, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	e7f9      	b.n	800839c <memset+0x4>

080083a8 <strncmp>:
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	0005      	movs	r5, r0
 80083ac:	1e10      	subs	r0, r2, #0
 80083ae:	d00b      	beq.n	80083c8 <strncmp+0x20>
 80083b0:	2400      	movs	r4, #0
 80083b2:	3a01      	subs	r2, #1
 80083b4:	5d2b      	ldrb	r3, [r5, r4]
 80083b6:	5d08      	ldrb	r0, [r1, r4]
 80083b8:	4283      	cmp	r3, r0
 80083ba:	d104      	bne.n	80083c6 <strncmp+0x1e>
 80083bc:	42a2      	cmp	r2, r4
 80083be:	d002      	beq.n	80083c6 <strncmp+0x1e>
 80083c0:	3401      	adds	r4, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f6      	bne.n	80083b4 <strncmp+0xc>
 80083c6:	1a18      	subs	r0, r3, r0
 80083c8:	bd30      	pop	{r4, r5, pc}

080083ca <strncpy>:
 80083ca:	0003      	movs	r3, r0
 80083cc:	b530      	push	{r4, r5, lr}
 80083ce:	001d      	movs	r5, r3
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d006      	beq.n	80083e2 <strncpy+0x18>
 80083d4:	780c      	ldrb	r4, [r1, #0]
 80083d6:	3a01      	subs	r2, #1
 80083d8:	3301      	adds	r3, #1
 80083da:	702c      	strb	r4, [r5, #0]
 80083dc:	3101      	adds	r1, #1
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d1f5      	bne.n	80083ce <strncpy+0x4>
 80083e2:	2100      	movs	r1, #0
 80083e4:	189a      	adds	r2, r3, r2
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d100      	bne.n	80083ec <strncpy+0x22>
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	7019      	strb	r1, [r3, #0]
 80083ee:	3301      	adds	r3, #1
 80083f0:	e7f9      	b.n	80083e6 <strncpy+0x1c>

080083f2 <strstr>:
 80083f2:	780a      	ldrb	r2, [r1, #0]
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	d10c      	bne.n	8008414 <strstr+0x22>
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d108      	bne.n	8008412 <strstr+0x20>
 8008400:	2301      	movs	r3, #1
 8008402:	5ccc      	ldrb	r4, [r1, r3]
 8008404:	2c00      	cmp	r4, #0
 8008406:	d0f8      	beq.n	80083fa <strstr+0x8>
 8008408:	5cc5      	ldrb	r5, [r0, r3]
 800840a:	42a5      	cmp	r5, r4
 800840c:	d101      	bne.n	8008412 <strstr+0x20>
 800840e:	3301      	adds	r3, #1
 8008410:	e7f7      	b.n	8008402 <strstr+0x10>
 8008412:	3001      	adds	r0, #1
 8008414:	7803      	ldrb	r3, [r0, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f0      	bne.n	80083fc <strstr+0xa>
 800841a:	0018      	movs	r0, r3
 800841c:	e7ed      	b.n	80083fa <strstr+0x8>
	...

08008420 <_localeconv_r>:
 8008420:	4800      	ldr	r0, [pc, #0]	; (8008424 <_localeconv_r+0x4>)
 8008422:	4770      	bx	lr
 8008424:	20000114 	.word	0x20000114

08008428 <_close_r>:
 8008428:	2300      	movs	r3, #0
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_close_r+0x20>)
 800842e:	0004      	movs	r4, r0
 8008430:	0008      	movs	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7fa fe23 	bl	800307e <_close>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d103      	bne.n	8008444 <_close_r+0x1c>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d000      	beq.n	8008444 <_close_r+0x1c>
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	200006d0 	.word	0x200006d0

0800844c <_lseek_r>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	0004      	movs	r4, r0
 8008450:	0008      	movs	r0, r1
 8008452:	0011      	movs	r1, r2
 8008454:	001a      	movs	r2, r3
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_lseek_r+0x24>)
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	f7fa fe30 	bl	80030c0 <_lseek>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d103      	bne.n	800846c <_lseek_r+0x20>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d000      	beq.n	800846c <_lseek_r+0x20>
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	200006d0 	.word	0x200006d0

08008474 <_read_r>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	0004      	movs	r4, r0
 8008478:	0008      	movs	r0, r1
 800847a:	0011      	movs	r1, r2
 800847c:	001a      	movs	r2, r3
 800847e:	2300      	movs	r3, #0
 8008480:	4d05      	ldr	r5, [pc, #20]	; (8008498 <_read_r+0x24>)
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7fa fdc2 	bl	800300c <_read>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d103      	bne.n	8008494 <_read_r+0x20>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d000      	beq.n	8008494 <_read_r+0x20>
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	bd70      	pop	{r4, r5, r6, pc}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	200006d0 	.word	0x200006d0

0800849c <_sbrk_r>:
 800849c:	2300      	movs	r3, #0
 800849e:	b570      	push	{r4, r5, r6, lr}
 80084a0:	4d06      	ldr	r5, [pc, #24]	; (80084bc <_sbrk_r+0x20>)
 80084a2:	0004      	movs	r4, r0
 80084a4:	0008      	movs	r0, r1
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	f7fa fe16 	bl	80030d8 <_sbrk>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d103      	bne.n	80084b8 <_sbrk_r+0x1c>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d000      	beq.n	80084b8 <_sbrk_r+0x1c>
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	200006d0 	.word	0x200006d0

080084c0 <_write_r>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	0004      	movs	r4, r0
 80084c4:	0008      	movs	r0, r1
 80084c6:	0011      	movs	r1, r2
 80084c8:	001a      	movs	r2, r3
 80084ca:	2300      	movs	r3, #0
 80084cc:	4d05      	ldr	r5, [pc, #20]	; (80084e4 <_write_r+0x24>)
 80084ce:	602b      	str	r3, [r5, #0]
 80084d0:	f7fa fdb9 	bl	8003046 <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d103      	bne.n	80084e0 <_write_r+0x20>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d000      	beq.n	80084e0 <_write_r+0x20>
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	bd70      	pop	{r4, r5, r6, pc}
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	200006d0 	.word	0x200006d0

080084e8 <__errno>:
 80084e8:	4b01      	ldr	r3, [pc, #4]	; (80084f0 <__errno+0x8>)
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	4770      	bx	lr
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	200001dc 	.word	0x200001dc

080084f4 <__libc_init_array>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	2600      	movs	r6, #0
 80084f8:	4c0c      	ldr	r4, [pc, #48]	; (800852c <__libc_init_array+0x38>)
 80084fa:	4d0d      	ldr	r5, [pc, #52]	; (8008530 <__libc_init_array+0x3c>)
 80084fc:	1b64      	subs	r4, r4, r5
 80084fe:	10a4      	asrs	r4, r4, #2
 8008500:	42a6      	cmp	r6, r4
 8008502:	d109      	bne.n	8008518 <__libc_init_array+0x24>
 8008504:	2600      	movs	r6, #0
 8008506:	f003 f94f 	bl	800b7a8 <_init>
 800850a:	4c0a      	ldr	r4, [pc, #40]	; (8008534 <__libc_init_array+0x40>)
 800850c:	4d0a      	ldr	r5, [pc, #40]	; (8008538 <__libc_init_array+0x44>)
 800850e:	1b64      	subs	r4, r4, r5
 8008510:	10a4      	asrs	r4, r4, #2
 8008512:	42a6      	cmp	r6, r4
 8008514:	d105      	bne.n	8008522 <__libc_init_array+0x2e>
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	00b3      	lsls	r3, r6, #2
 800851a:	58eb      	ldr	r3, [r5, r3]
 800851c:	4798      	blx	r3
 800851e:	3601      	adds	r6, #1
 8008520:	e7ee      	b.n	8008500 <__libc_init_array+0xc>
 8008522:	00b3      	lsls	r3, r6, #2
 8008524:	58eb      	ldr	r3, [r5, r3]
 8008526:	4798      	blx	r3
 8008528:	3601      	adds	r6, #1
 800852a:	e7f2      	b.n	8008512 <__libc_init_array+0x1e>
 800852c:	0800bd64 	.word	0x0800bd64
 8008530:	0800bd64 	.word	0x0800bd64
 8008534:	0800bd68 	.word	0x0800bd68
 8008538:	0800bd64 	.word	0x0800bd64

0800853c <__retarget_lock_init_recursive>:
 800853c:	4770      	bx	lr

0800853e <__retarget_lock_acquire_recursive>:
 800853e:	4770      	bx	lr

08008540 <__retarget_lock_release_recursive>:
 8008540:	4770      	bx	lr

08008542 <memchr>:
 8008542:	b2c9      	uxtb	r1, r1
 8008544:	1882      	adds	r2, r0, r2
 8008546:	4290      	cmp	r0, r2
 8008548:	d101      	bne.n	800854e <memchr+0xc>
 800854a:	2000      	movs	r0, #0
 800854c:	4770      	bx	lr
 800854e:	7803      	ldrb	r3, [r0, #0]
 8008550:	428b      	cmp	r3, r1
 8008552:	d0fb      	beq.n	800854c <memchr+0xa>
 8008554:	3001      	adds	r0, #1
 8008556:	e7f6      	b.n	8008546 <memchr+0x4>

08008558 <memcpy>:
 8008558:	2300      	movs	r3, #0
 800855a:	b510      	push	{r4, lr}
 800855c:	429a      	cmp	r2, r3
 800855e:	d100      	bne.n	8008562 <memcpy+0xa>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	5ccc      	ldrb	r4, [r1, r3]
 8008564:	54c4      	strb	r4, [r0, r3]
 8008566:	3301      	adds	r3, #1
 8008568:	e7f8      	b.n	800855c <memcpy+0x4>
	...

0800856c <nan>:
 800856c:	2000      	movs	r0, #0
 800856e:	4901      	ldr	r1, [pc, #4]	; (8008574 <nan+0x8>)
 8008570:	4770      	bx	lr
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	7ff80000 	.word	0x7ff80000

08008578 <nanf>:
 8008578:	4800      	ldr	r0, [pc, #0]	; (800857c <nanf+0x4>)
 800857a:	4770      	bx	lr
 800857c:	7fc00000 	.word	0x7fc00000

08008580 <quorem>:
 8008580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008582:	6902      	ldr	r2, [r0, #16]
 8008584:	690b      	ldr	r3, [r1, #16]
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	0007      	movs	r7, r0
 800858a:	9104      	str	r1, [sp, #16]
 800858c:	2000      	movs	r0, #0
 800858e:	429a      	cmp	r2, r3
 8008590:	db69      	blt.n	8008666 <quorem+0xe6>
 8008592:	3b01      	subs	r3, #1
 8008594:	009c      	lsls	r4, r3, #2
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	000b      	movs	r3, r1
 800859a:	3314      	adds	r3, #20
 800859c:	9306      	str	r3, [sp, #24]
 800859e:	191b      	adds	r3, r3, r4
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	003b      	movs	r3, r7
 80085a4:	3314      	adds	r3, #20
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	191c      	adds	r4, r3, r4
 80085aa:	9b05      	ldr	r3, [sp, #20]
 80085ac:	6826      	ldr	r6, [r4, #0]
 80085ae:	681d      	ldr	r5, [r3, #0]
 80085b0:	0030      	movs	r0, r6
 80085b2:	3501      	adds	r5, #1
 80085b4:	0029      	movs	r1, r5
 80085b6:	f7f7 fdc1 	bl	800013c <__udivsi3>
 80085ba:	9002      	str	r0, [sp, #8]
 80085bc:	42ae      	cmp	r6, r5
 80085be:	d329      	bcc.n	8008614 <quorem+0x94>
 80085c0:	9b06      	ldr	r3, [sp, #24]
 80085c2:	2600      	movs	r6, #0
 80085c4:	469c      	mov	ip, r3
 80085c6:	9d03      	ldr	r5, [sp, #12]
 80085c8:	9606      	str	r6, [sp, #24]
 80085ca:	4662      	mov	r2, ip
 80085cc:	ca08      	ldmia	r2!, {r3}
 80085ce:	6828      	ldr	r0, [r5, #0]
 80085d0:	4694      	mov	ip, r2
 80085d2:	9a02      	ldr	r2, [sp, #8]
 80085d4:	b299      	uxth	r1, r3
 80085d6:	4351      	muls	r1, r2
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	4353      	muls	r3, r2
 80085dc:	1989      	adds	r1, r1, r6
 80085de:	0c0a      	lsrs	r2, r1, #16
 80085e0:	189b      	adds	r3, r3, r2
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	0c1e      	lsrs	r6, r3, #16
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	b282      	uxth	r2, r0
 80085ea:	18d2      	adds	r2, r2, r3
 80085ec:	466b      	mov	r3, sp
 80085ee:	b289      	uxth	r1, r1
 80085f0:	8b9b      	ldrh	r3, [r3, #28]
 80085f2:	1a52      	subs	r2, r2, r1
 80085f4:	0c01      	lsrs	r1, r0, #16
 80085f6:	1ac9      	subs	r1, r1, r3
 80085f8:	1413      	asrs	r3, r2, #16
 80085fa:	18cb      	adds	r3, r1, r3
 80085fc:	1419      	asrs	r1, r3, #16
 80085fe:	b292      	uxth	r2, r2
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	4313      	orrs	r3, r2
 8008604:	c508      	stmia	r5!, {r3}
 8008606:	9b05      	ldr	r3, [sp, #20]
 8008608:	9106      	str	r1, [sp, #24]
 800860a:	4563      	cmp	r3, ip
 800860c:	d2dd      	bcs.n	80085ca <quorem+0x4a>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d030      	beq.n	8008676 <quorem+0xf6>
 8008614:	0038      	movs	r0, r7
 8008616:	9904      	ldr	r1, [sp, #16]
 8008618:	f001 fcda 	bl	8009fd0 <__mcmp>
 800861c:	2800      	cmp	r0, #0
 800861e:	db21      	blt.n	8008664 <quorem+0xe4>
 8008620:	0038      	movs	r0, r7
 8008622:	2600      	movs	r6, #0
 8008624:	9b02      	ldr	r3, [sp, #8]
 8008626:	9c04      	ldr	r4, [sp, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	9302      	str	r3, [sp, #8]
 800862c:	3014      	adds	r0, #20
 800862e:	3414      	adds	r4, #20
 8008630:	6803      	ldr	r3, [r0, #0]
 8008632:	cc02      	ldmia	r4!, {r1}
 8008634:	b29d      	uxth	r5, r3
 8008636:	19ad      	adds	r5, r5, r6
 8008638:	b28a      	uxth	r2, r1
 800863a:	1aaa      	subs	r2, r5, r2
 800863c:	0c09      	lsrs	r1, r1, #16
 800863e:	0c1b      	lsrs	r3, r3, #16
 8008640:	1a5b      	subs	r3, r3, r1
 8008642:	1411      	asrs	r1, r2, #16
 8008644:	185b      	adds	r3, r3, r1
 8008646:	141e      	asrs	r6, r3, #16
 8008648:	b292      	uxth	r2, r2
 800864a:	041b      	lsls	r3, r3, #16
 800864c:	4313      	orrs	r3, r2
 800864e:	c008      	stmia	r0!, {r3}
 8008650:	9b05      	ldr	r3, [sp, #20]
 8008652:	42a3      	cmp	r3, r4
 8008654:	d2ec      	bcs.n	8008630 <quorem+0xb0>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	9a03      	ldr	r2, [sp, #12]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	2a00      	cmp	r2, #0
 8008662:	d015      	beq.n	8008690 <quorem+0x110>
 8008664:	9802      	ldr	r0, [sp, #8]
 8008666:	b009      	add	sp, #36	; 0x24
 8008668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d106      	bne.n	800867e <quorem+0xfe>
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	3b01      	subs	r3, #1
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	3c04      	subs	r4, #4
 800867a:	42a3      	cmp	r3, r4
 800867c:	d3f5      	bcc.n	800866a <quorem+0xea>
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	e7c7      	b.n	8008614 <quorem+0x94>
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	2a00      	cmp	r2, #0
 8008688:	d106      	bne.n	8008698 <quorem+0x118>
 800868a:	9a01      	ldr	r2, [sp, #4]
 800868c:	3a01      	subs	r2, #1
 800868e:	9201      	str	r2, [sp, #4]
 8008690:	9a03      	ldr	r2, [sp, #12]
 8008692:	3b04      	subs	r3, #4
 8008694:	429a      	cmp	r2, r3
 8008696:	d3f5      	bcc.n	8008684 <quorem+0x104>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	e7e2      	b.n	8008664 <quorem+0xe4>
	...

080086a0 <_dtoa_r>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	0014      	movs	r4, r2
 80086a4:	001d      	movs	r5, r3
 80086a6:	69c6      	ldr	r6, [r0, #28]
 80086a8:	b09d      	sub	sp, #116	; 0x74
 80086aa:	9408      	str	r4, [sp, #32]
 80086ac:	9509      	str	r5, [sp, #36]	; 0x24
 80086ae:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80086b0:	9004      	str	r0, [sp, #16]
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d10f      	bne.n	80086d6 <_dtoa_r+0x36>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7fd fec4 	bl	8006444 <malloc>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	1e02      	subs	r2, r0, #0
 80086c0:	61d8      	str	r0, [r3, #28]
 80086c2:	d104      	bne.n	80086ce <_dtoa_r+0x2e>
 80086c4:	21ef      	movs	r1, #239	; 0xef
 80086c6:	4bc6      	ldr	r3, [pc, #792]	; (80089e0 <_dtoa_r+0x340>)
 80086c8:	48c6      	ldr	r0, [pc, #792]	; (80089e4 <_dtoa_r+0x344>)
 80086ca:	f002 fc45 	bl	800af58 <__assert_func>
 80086ce:	6046      	str	r6, [r0, #4]
 80086d0:	6086      	str	r6, [r0, #8]
 80086d2:	6006      	str	r6, [r0, #0]
 80086d4:	60c6      	str	r6, [r0, #12]
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	2900      	cmp	r1, #0
 80086de:	d00b      	beq.n	80086f8 <_dtoa_r+0x58>
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	2301      	movs	r3, #1
 80086e4:	4093      	lsls	r3, r2
 80086e6:	604a      	str	r2, [r1, #4]
 80086e8:	608b      	str	r3, [r1, #8]
 80086ea:	9804      	ldr	r0, [sp, #16]
 80086ec:	f001 f9e2 	bl	8009ab4 <_Bfree>
 80086f0:	2200      	movs	r2, #0
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	da1e      	bge.n	800873a <_dtoa_r+0x9a>
 80086fc:	2301      	movs	r3, #1
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	006b      	lsls	r3, r5, #1
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	9309      	str	r3, [sp, #36]	; 0x24
 8008706:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008708:	4bb7      	ldr	r3, [pc, #732]	; (80089e8 <_dtoa_r+0x348>)
 800870a:	4ab7      	ldr	r2, [pc, #732]	; (80089e8 <_dtoa_r+0x348>)
 800870c:	403b      	ands	r3, r7
 800870e:	4293      	cmp	r3, r2
 8008710:	d116      	bne.n	8008740 <_dtoa_r+0xa0>
 8008712:	4bb6      	ldr	r3, [pc, #728]	; (80089ec <_dtoa_r+0x34c>)
 8008714:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	033b      	lsls	r3, r7, #12
 800871a:	0b1b      	lsrs	r3, r3, #12
 800871c:	4323      	orrs	r3, r4
 800871e:	d101      	bne.n	8008724 <_dtoa_r+0x84>
 8008720:	f000 fdb5 	bl	800928e <_dtoa_r+0xbee>
 8008724:	4bb2      	ldr	r3, [pc, #712]	; (80089f0 <_dtoa_r+0x350>)
 8008726:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008728:	9306      	str	r3, [sp, #24]
 800872a:	2a00      	cmp	r2, #0
 800872c:	d002      	beq.n	8008734 <_dtoa_r+0x94>
 800872e:	4bb1      	ldr	r3, [pc, #708]	; (80089f4 <_dtoa_r+0x354>)
 8008730:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	9806      	ldr	r0, [sp, #24]
 8008736:	b01d      	add	sp, #116	; 0x74
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873a:	2300      	movs	r3, #0
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	e7e2      	b.n	8008706 <_dtoa_r+0x66>
 8008740:	9a08      	ldr	r2, [sp, #32]
 8008742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008744:	9210      	str	r2, [sp, #64]	; 0x40
 8008746:	9311      	str	r3, [sp, #68]	; 0x44
 8008748:	9810      	ldr	r0, [sp, #64]	; 0x40
 800874a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	f7f7 fe7a 	bl	8000448 <__aeabi_dcmpeq>
 8008754:	1e06      	subs	r6, r0, #0
 8008756:	d009      	beq.n	800876c <_dtoa_r+0xcc>
 8008758:	2301      	movs	r3, #1
 800875a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	4ba6      	ldr	r3, [pc, #664]	; (80089f8 <_dtoa_r+0x358>)
 8008760:	9306      	str	r3, [sp, #24]
 8008762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0e5      	beq.n	8008734 <_dtoa_r+0x94>
 8008768:	4ba4      	ldr	r3, [pc, #656]	; (80089fc <_dtoa_r+0x35c>)
 800876a:	e7e1      	b.n	8008730 <_dtoa_r+0x90>
 800876c:	ab1a      	add	r3, sp, #104	; 0x68
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	ab1b      	add	r3, sp, #108	; 0x6c
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	9804      	ldr	r0, [sp, #16]
 8008776:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800877a:	f001 fd45 	bl	800a208 <__d2b>
 800877e:	007a      	lsls	r2, r7, #1
 8008780:	9005      	str	r0, [sp, #20]
 8008782:	0d52      	lsrs	r2, r2, #21
 8008784:	d100      	bne.n	8008788 <_dtoa_r+0xe8>
 8008786:	e07b      	b.n	8008880 <_dtoa_r+0x1e0>
 8008788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800878a:	9617      	str	r6, [sp, #92]	; 0x5c
 800878c:	0319      	lsls	r1, r3, #12
 800878e:	4b9c      	ldr	r3, [pc, #624]	; (8008a00 <_dtoa_r+0x360>)
 8008790:	0b09      	lsrs	r1, r1, #12
 8008792:	430b      	orrs	r3, r1
 8008794:	499b      	ldr	r1, [pc, #620]	; (8008a04 <_dtoa_r+0x364>)
 8008796:	1857      	adds	r7, r2, r1
 8008798:	9810      	ldr	r0, [sp, #64]	; 0x40
 800879a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800879c:	0019      	movs	r1, r3
 800879e:	2200      	movs	r2, #0
 80087a0:	4b99      	ldr	r3, [pc, #612]	; (8008a08 <_dtoa_r+0x368>)
 80087a2:	f7f9 f9f7 	bl	8001b94 <__aeabi_dsub>
 80087a6:	4a99      	ldr	r2, [pc, #612]	; (8008a0c <_dtoa_r+0x36c>)
 80087a8:	4b99      	ldr	r3, [pc, #612]	; (8008a10 <_dtoa_r+0x370>)
 80087aa:	f7f8 ff31 	bl	8001610 <__aeabi_dmul>
 80087ae:	4a99      	ldr	r2, [pc, #612]	; (8008a14 <_dtoa_r+0x374>)
 80087b0:	4b99      	ldr	r3, [pc, #612]	; (8008a18 <_dtoa_r+0x378>)
 80087b2:	f7f7 ffd3 	bl	800075c <__aeabi_dadd>
 80087b6:	0004      	movs	r4, r0
 80087b8:	0038      	movs	r0, r7
 80087ba:	000d      	movs	r5, r1
 80087bc:	f7f9 fdc0 	bl	8002340 <__aeabi_i2d>
 80087c0:	4a96      	ldr	r2, [pc, #600]	; (8008a1c <_dtoa_r+0x37c>)
 80087c2:	4b97      	ldr	r3, [pc, #604]	; (8008a20 <_dtoa_r+0x380>)
 80087c4:	f7f8 ff24 	bl	8001610 <__aeabi_dmul>
 80087c8:	0002      	movs	r2, r0
 80087ca:	000b      	movs	r3, r1
 80087cc:	0020      	movs	r0, r4
 80087ce:	0029      	movs	r1, r5
 80087d0:	f7f7 ffc4 	bl	800075c <__aeabi_dadd>
 80087d4:	0004      	movs	r4, r0
 80087d6:	000d      	movs	r5, r1
 80087d8:	f7f9 fd7c 	bl	80022d4 <__aeabi_d2iz>
 80087dc:	2200      	movs	r2, #0
 80087de:	9003      	str	r0, [sp, #12]
 80087e0:	2300      	movs	r3, #0
 80087e2:	0020      	movs	r0, r4
 80087e4:	0029      	movs	r1, r5
 80087e6:	f7f7 fe35 	bl	8000454 <__aeabi_dcmplt>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d00b      	beq.n	8008806 <_dtoa_r+0x166>
 80087ee:	9803      	ldr	r0, [sp, #12]
 80087f0:	f7f9 fda6 	bl	8002340 <__aeabi_i2d>
 80087f4:	002b      	movs	r3, r5
 80087f6:	0022      	movs	r2, r4
 80087f8:	f7f7 fe26 	bl	8000448 <__aeabi_dcmpeq>
 80087fc:	4243      	negs	r3, r0
 80087fe:	4158      	adcs	r0, r3
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1a1b      	subs	r3, r3, r0
 8008804:	9303      	str	r3, [sp, #12]
 8008806:	2301      	movs	r3, #1
 8008808:	9316      	str	r3, [sp, #88]	; 0x58
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	2b16      	cmp	r3, #22
 800880e:	d810      	bhi.n	8008832 <_dtoa_r+0x192>
 8008810:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008812:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008814:	9a03      	ldr	r2, [sp, #12]
 8008816:	4b83      	ldr	r3, [pc, #524]	; (8008a24 <_dtoa_r+0x384>)
 8008818:	00d2      	lsls	r2, r2, #3
 800881a:	189b      	adds	r3, r3, r2
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f7f7 fe18 	bl	8000454 <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	d047      	beq.n	80088b8 <_dtoa_r+0x218>
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	3b01      	subs	r3, #1
 800882c:	9303      	str	r3, [sp, #12]
 800882e:	2300      	movs	r3, #0
 8008830:	9316      	str	r3, [sp, #88]	; 0x58
 8008832:	2200      	movs	r2, #0
 8008834:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008836:	920a      	str	r2, [sp, #40]	; 0x28
 8008838:	1bdb      	subs	r3, r3, r7
 800883a:	1e5a      	subs	r2, r3, #1
 800883c:	d53e      	bpl.n	80088bc <_dtoa_r+0x21c>
 800883e:	2201      	movs	r2, #1
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	930a      	str	r3, [sp, #40]	; 0x28
 8008844:	2300      	movs	r3, #0
 8008846:	930c      	str	r3, [sp, #48]	; 0x30
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	db38      	blt.n	80088c0 <_dtoa_r+0x220>
 800884e:	9a03      	ldr	r2, [sp, #12]
 8008850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008852:	4694      	mov	ip, r2
 8008854:	4463      	add	r3, ip
 8008856:	930c      	str	r3, [sp, #48]	; 0x30
 8008858:	2300      	movs	r3, #0
 800885a:	9213      	str	r2, [sp, #76]	; 0x4c
 800885c:	930d      	str	r3, [sp, #52]	; 0x34
 800885e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008860:	2401      	movs	r4, #1
 8008862:	2b09      	cmp	r3, #9
 8008864:	d867      	bhi.n	8008936 <_dtoa_r+0x296>
 8008866:	2b05      	cmp	r3, #5
 8008868:	dd02      	ble.n	8008870 <_dtoa_r+0x1d0>
 800886a:	2400      	movs	r4, #0
 800886c:	3b04      	subs	r3, #4
 800886e:	9322      	str	r3, [sp, #136]	; 0x88
 8008870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008872:	1e98      	subs	r0, r3, #2
 8008874:	2803      	cmp	r0, #3
 8008876:	d867      	bhi.n	8008948 <_dtoa_r+0x2a8>
 8008878:	f7f7 fc4c 	bl	8000114 <__gnu_thumb1_case_uqi>
 800887c:	5b383a2b 	.word	0x5b383a2b
 8008880:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008882:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008884:	18f6      	adds	r6, r6, r3
 8008886:	4b68      	ldr	r3, [pc, #416]	; (8008a28 <_dtoa_r+0x388>)
 8008888:	18f2      	adds	r2, r6, r3
 800888a:	2a20      	cmp	r2, #32
 800888c:	dd0f      	ble.n	80088ae <_dtoa_r+0x20e>
 800888e:	2340      	movs	r3, #64	; 0x40
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	409f      	lsls	r7, r3
 8008894:	4b65      	ldr	r3, [pc, #404]	; (8008a2c <_dtoa_r+0x38c>)
 8008896:	0038      	movs	r0, r7
 8008898:	18f3      	adds	r3, r6, r3
 800889a:	40dc      	lsrs	r4, r3
 800889c:	4320      	orrs	r0, r4
 800889e:	f7f9 fd7f 	bl	80023a0 <__aeabi_ui2d>
 80088a2:	2201      	movs	r2, #1
 80088a4:	4b62      	ldr	r3, [pc, #392]	; (8008a30 <_dtoa_r+0x390>)
 80088a6:	1e77      	subs	r7, r6, #1
 80088a8:	18cb      	adds	r3, r1, r3
 80088aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80088ac:	e776      	b.n	800879c <_dtoa_r+0xfc>
 80088ae:	2320      	movs	r3, #32
 80088b0:	0020      	movs	r0, r4
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	4098      	lsls	r0, r3
 80088b6:	e7f2      	b.n	800889e <_dtoa_r+0x1fe>
 80088b8:	9016      	str	r0, [sp, #88]	; 0x58
 80088ba:	e7ba      	b.n	8008832 <_dtoa_r+0x192>
 80088bc:	920c      	str	r2, [sp, #48]	; 0x30
 80088be:	e7c3      	b.n	8008848 <_dtoa_r+0x1a8>
 80088c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c2:	9a03      	ldr	r2, [sp, #12]
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	4253      	negs	r3, r2
 80088ca:	930d      	str	r3, [sp, #52]	; 0x34
 80088cc:	2300      	movs	r3, #0
 80088ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80088d0:	e7c5      	b.n	800885e <_dtoa_r+0x1be>
 80088d2:	2300      	movs	r3, #0
 80088d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dc13      	bgt.n	8008908 <_dtoa_r+0x268>
 80088e0:	2301      	movs	r3, #1
 80088e2:	001a      	movs	r2, r3
 80088e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80088ea:	e00d      	b.n	8008908 <_dtoa_r+0x268>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e7f1      	b.n	80088d4 <_dtoa_r+0x234>
 80088f0:	2300      	movs	r3, #0
 80088f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80088f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f6:	4694      	mov	ip, r2
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	4463      	add	r3, ip
 80088fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80088fe:	3301      	adds	r3, #1
 8008900:	9307      	str	r3, [sp, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dc00      	bgt.n	8008908 <_dtoa_r+0x268>
 8008906:	2301      	movs	r3, #1
 8008908:	9a04      	ldr	r2, [sp, #16]
 800890a:	2100      	movs	r1, #0
 800890c:	69d0      	ldr	r0, [r2, #28]
 800890e:	2204      	movs	r2, #4
 8008910:	0015      	movs	r5, r2
 8008912:	3514      	adds	r5, #20
 8008914:	429d      	cmp	r5, r3
 8008916:	d91b      	bls.n	8008950 <_dtoa_r+0x2b0>
 8008918:	6041      	str	r1, [r0, #4]
 800891a:	9804      	ldr	r0, [sp, #16]
 800891c:	f001 f886 	bl	8009a2c <_Balloc>
 8008920:	9006      	str	r0, [sp, #24]
 8008922:	2800      	cmp	r0, #0
 8008924:	d117      	bne.n	8008956 <_dtoa_r+0x2b6>
 8008926:	21b0      	movs	r1, #176	; 0xb0
 8008928:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <_dtoa_r+0x394>)
 800892a:	482e      	ldr	r0, [pc, #184]	; (80089e4 <_dtoa_r+0x344>)
 800892c:	9a06      	ldr	r2, [sp, #24]
 800892e:	31ff      	adds	r1, #255	; 0xff
 8008930:	e6cb      	b.n	80086ca <_dtoa_r+0x2a>
 8008932:	2301      	movs	r3, #1
 8008934:	e7dd      	b.n	80088f2 <_dtoa_r+0x252>
 8008936:	2300      	movs	r3, #0
 8008938:	940f      	str	r4, [sp, #60]	; 0x3c
 800893a:	9322      	str	r3, [sp, #136]	; 0x88
 800893c:	3b01      	subs	r3, #1
 800893e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008940:	9307      	str	r3, [sp, #28]
 8008942:	2200      	movs	r2, #0
 8008944:	3313      	adds	r3, #19
 8008946:	e7cf      	b.n	80088e8 <_dtoa_r+0x248>
 8008948:	2301      	movs	r3, #1
 800894a:	930f      	str	r3, [sp, #60]	; 0x3c
 800894c:	3b02      	subs	r3, #2
 800894e:	e7f6      	b.n	800893e <_dtoa_r+0x29e>
 8008950:	3101      	adds	r1, #1
 8008952:	0052      	lsls	r2, r2, #1
 8008954:	e7dc      	b.n	8008910 <_dtoa_r+0x270>
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	9a06      	ldr	r2, [sp, #24]
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	9b07      	ldr	r3, [sp, #28]
 8008960:	2b0e      	cmp	r3, #14
 8008962:	d900      	bls.n	8008966 <_dtoa_r+0x2c6>
 8008964:	e0e5      	b.n	8008b32 <_dtoa_r+0x492>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d100      	bne.n	800896c <_dtoa_r+0x2cc>
 800896a:	e0e2      	b.n	8008b32 <_dtoa_r+0x492>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	dd64      	ble.n	8008a3c <_dtoa_r+0x39c>
 8008972:	210f      	movs	r1, #15
 8008974:	9a03      	ldr	r2, [sp, #12]
 8008976:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <_dtoa_r+0x384>)
 8008978:	400a      	ands	r2, r1
 800897a:	00d2      	lsls	r2, r2, #3
 800897c:	189b      	adds	r3, r3, r2
 800897e:	681e      	ldr	r6, [r3, #0]
 8008980:	685f      	ldr	r7, [r3, #4]
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	2402      	movs	r4, #2
 8008986:	111d      	asrs	r5, r3, #4
 8008988:	05db      	lsls	r3, r3, #23
 800898a:	d50a      	bpl.n	80089a2 <_dtoa_r+0x302>
 800898c:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <_dtoa_r+0x398>)
 800898e:	400d      	ands	r5, r1
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008996:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008998:	f7f8 fa40 	bl	8000e1c <__aeabi_ddiv>
 800899c:	9008      	str	r0, [sp, #32]
 800899e:	9109      	str	r1, [sp, #36]	; 0x24
 80089a0:	3401      	adds	r4, #1
 80089a2:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <_dtoa_r+0x398>)
 80089a4:	930e      	str	r3, [sp, #56]	; 0x38
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	d108      	bne.n	80089bc <_dtoa_r+0x31c>
 80089aa:	9808      	ldr	r0, [sp, #32]
 80089ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ae:	0032      	movs	r2, r6
 80089b0:	003b      	movs	r3, r7
 80089b2:	f7f8 fa33 	bl	8000e1c <__aeabi_ddiv>
 80089b6:	9008      	str	r0, [sp, #32]
 80089b8:	9109      	str	r1, [sp, #36]	; 0x24
 80089ba:	e05a      	b.n	8008a72 <_dtoa_r+0x3d2>
 80089bc:	2301      	movs	r3, #1
 80089be:	421d      	tst	r5, r3
 80089c0:	d009      	beq.n	80089d6 <_dtoa_r+0x336>
 80089c2:	18e4      	adds	r4, r4, r3
 80089c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c6:	0030      	movs	r0, r6
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	0039      	movs	r1, r7
 80089ce:	f7f8 fe1f 	bl	8001610 <__aeabi_dmul>
 80089d2:	0006      	movs	r6, r0
 80089d4:	000f      	movs	r7, r1
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	106d      	asrs	r5, r5, #1
 80089da:	3308      	adds	r3, #8
 80089dc:	e7e2      	b.n	80089a4 <_dtoa_r+0x304>
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	0800babd 	.word	0x0800babd
 80089e4:	0800bad4 	.word	0x0800bad4
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	0000270f 	.word	0x0000270f
 80089f0:	0800bab9 	.word	0x0800bab9
 80089f4:	0800babc 	.word	0x0800babc
 80089f8:	0800bd1b 	.word	0x0800bd1b
 80089fc:	0800bd1c 	.word	0x0800bd1c
 8008a00:	3ff00000 	.word	0x3ff00000
 8008a04:	fffffc01 	.word	0xfffffc01
 8008a08:	3ff80000 	.word	0x3ff80000
 8008a0c:	636f4361 	.word	0x636f4361
 8008a10:	3fd287a7 	.word	0x3fd287a7
 8008a14:	8b60c8b3 	.word	0x8b60c8b3
 8008a18:	3fc68a28 	.word	0x3fc68a28
 8008a1c:	509f79fb 	.word	0x509f79fb
 8008a20:	3fd34413 	.word	0x3fd34413
 8008a24:	0800bc20 	.word	0x0800bc20
 8008a28:	00000432 	.word	0x00000432
 8008a2c:	00000412 	.word	0x00000412
 8008a30:	fe100000 	.word	0xfe100000
 8008a34:	0800bb2c 	.word	0x0800bb2c
 8008a38:	0800bbf8 	.word	0x0800bbf8
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	2402      	movs	r4, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d016      	beq.n	8008a72 <_dtoa_r+0x3d2>
 8008a44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a48:	220f      	movs	r2, #15
 8008a4a:	425d      	negs	r5, r3
 8008a4c:	402a      	ands	r2, r5
 8008a4e:	4bdd      	ldr	r3, [pc, #884]	; (8008dc4 <_dtoa_r+0x724>)
 8008a50:	00d2      	lsls	r2, r2, #3
 8008a52:	189b      	adds	r3, r3, r2
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f7f8 fdda 	bl	8001610 <__aeabi_dmul>
 8008a5c:	2701      	movs	r7, #1
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9008      	str	r0, [sp, #32]
 8008a62:	9109      	str	r1, [sp, #36]	; 0x24
 8008a64:	4ed8      	ldr	r6, [pc, #864]	; (8008dc8 <_dtoa_r+0x728>)
 8008a66:	112d      	asrs	r5, r5, #4
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d000      	beq.n	8008a6e <_dtoa_r+0x3ce>
 8008a6c:	e091      	b.n	8008b92 <_dtoa_r+0x4f2>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1a1      	bne.n	80089b6 <_dtoa_r+0x316>
 8008a72:	9e08      	ldr	r6, [sp, #32]
 8008a74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d100      	bne.n	8008a7e <_dtoa_r+0x3de>
 8008a7c:	e094      	b.n	8008ba8 <_dtoa_r+0x508>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	0030      	movs	r0, r6
 8008a82:	0039      	movs	r1, r7
 8008a84:	4bd1      	ldr	r3, [pc, #836]	; (8008dcc <_dtoa_r+0x72c>)
 8008a86:	f7f7 fce5 	bl	8000454 <__aeabi_dcmplt>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d100      	bne.n	8008a90 <_dtoa_r+0x3f0>
 8008a8e:	e08b      	b.n	8008ba8 <_dtoa_r+0x508>
 8008a90:	9b07      	ldr	r3, [sp, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d100      	bne.n	8008a98 <_dtoa_r+0x3f8>
 8008a96:	e087      	b.n	8008ba8 <_dtoa_r+0x508>
 8008a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd45      	ble.n	8008b2a <_dtoa_r+0x48a>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa6:	0030      	movs	r0, r6
 8008aa8:	4bc9      	ldr	r3, [pc, #804]	; (8008dd0 <_dtoa_r+0x730>)
 8008aaa:	0039      	movs	r1, r7
 8008aac:	f7f8 fdb0 	bl	8001610 <__aeabi_dmul>
 8008ab0:	9008      	str	r0, [sp, #32]
 8008ab2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ab6:	3401      	adds	r4, #1
 8008ab8:	0020      	movs	r0, r4
 8008aba:	9e08      	ldr	r6, [sp, #32]
 8008abc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008abe:	9312      	str	r3, [sp, #72]	; 0x48
 8008ac0:	f7f9 fc3e 	bl	8002340 <__aeabi_i2d>
 8008ac4:	0032      	movs	r2, r6
 8008ac6:	003b      	movs	r3, r7
 8008ac8:	f7f8 fda2 	bl	8001610 <__aeabi_dmul>
 8008acc:	2200      	movs	r2, #0
 8008ace:	4bc1      	ldr	r3, [pc, #772]	; (8008dd4 <_dtoa_r+0x734>)
 8008ad0:	f7f7 fe44 	bl	800075c <__aeabi_dadd>
 8008ad4:	4ac0      	ldr	r2, [pc, #768]	; (8008dd8 <_dtoa_r+0x738>)
 8008ad6:	9014      	str	r0, [sp, #80]	; 0x50
 8008ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8008ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008adc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008ade:	4694      	mov	ip, r2
 8008ae0:	9308      	str	r3, [sp, #32]
 8008ae2:	9409      	str	r4, [sp, #36]	; 0x24
 8008ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ae6:	4463      	add	r3, ip
 8008ae8:	9318      	str	r3, [sp, #96]	; 0x60
 8008aea:	9309      	str	r3, [sp, #36]	; 0x24
 8008aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d15e      	bne.n	8008bb0 <_dtoa_r+0x510>
 8008af2:	2200      	movs	r2, #0
 8008af4:	4bb9      	ldr	r3, [pc, #740]	; (8008ddc <_dtoa_r+0x73c>)
 8008af6:	0030      	movs	r0, r6
 8008af8:	0039      	movs	r1, r7
 8008afa:	f7f9 f84b 	bl	8001b94 <__aeabi_dsub>
 8008afe:	9a08      	ldr	r2, [sp, #32]
 8008b00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b02:	0004      	movs	r4, r0
 8008b04:	000d      	movs	r5, r1
 8008b06:	f7f7 fcb9 	bl	800047c <__aeabi_dcmpgt>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d000      	beq.n	8008b10 <_dtoa_r+0x470>
 8008b0e:	e2b3      	b.n	8009078 <_dtoa_r+0x9d8>
 8008b10:	48b3      	ldr	r0, [pc, #716]	; (8008de0 <_dtoa_r+0x740>)
 8008b12:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008b14:	4684      	mov	ip, r0
 8008b16:	4461      	add	r1, ip
 8008b18:	000b      	movs	r3, r1
 8008b1a:	0020      	movs	r0, r4
 8008b1c:	0029      	movs	r1, r5
 8008b1e:	9a08      	ldr	r2, [sp, #32]
 8008b20:	f7f7 fc98 	bl	8000454 <__aeabi_dcmplt>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d000      	beq.n	8008b2a <_dtoa_r+0x48a>
 8008b28:	e2a3      	b.n	8009072 <_dtoa_r+0x9d2>
 8008b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	9409      	str	r4, [sp, #36]	; 0x24
 8008b32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da00      	bge.n	8008b3a <_dtoa_r+0x49a>
 8008b38:	e179      	b.n	8008e2e <_dtoa_r+0x78e>
 8008b3a:	9a03      	ldr	r2, [sp, #12]
 8008b3c:	2a0e      	cmp	r2, #14
 8008b3e:	dd00      	ble.n	8008b42 <_dtoa_r+0x4a2>
 8008b40:	e175      	b.n	8008e2e <_dtoa_r+0x78e>
 8008b42:	4ba0      	ldr	r3, [pc, #640]	; (8008dc4 <_dtoa_r+0x724>)
 8008b44:	00d2      	lsls	r2, r2, #3
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	681e      	ldr	r6, [r3, #0]
 8008b4a:	685f      	ldr	r7, [r3, #4]
 8008b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	db00      	blt.n	8008b54 <_dtoa_r+0x4b4>
 8008b52:	e0e5      	b.n	8008d20 <_dtoa_r+0x680>
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dd00      	ble.n	8008b5c <_dtoa_r+0x4bc>
 8008b5a:	e0e1      	b.n	8008d20 <_dtoa_r+0x680>
 8008b5c:	d000      	beq.n	8008b60 <_dtoa_r+0x4c0>
 8008b5e:	e288      	b.n	8009072 <_dtoa_r+0x9d2>
 8008b60:	2200      	movs	r2, #0
 8008b62:	0030      	movs	r0, r6
 8008b64:	0039      	movs	r1, r7
 8008b66:	4b9d      	ldr	r3, [pc, #628]	; (8008ddc <_dtoa_r+0x73c>)
 8008b68:	f7f8 fd52 	bl	8001610 <__aeabi_dmul>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	f7f7 fc8e 	bl	8000490 <__aeabi_dcmpge>
 8008b74:	9e07      	ldr	r6, [sp, #28]
 8008b76:	0037      	movs	r7, r6
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d000      	beq.n	8008b7e <_dtoa_r+0x4de>
 8008b7c:	e25f      	b.n	800903e <_dtoa_r+0x99e>
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	9a06      	ldr	r2, [sp, #24]
 8008b82:	3301      	adds	r3, #1
 8008b84:	9308      	str	r3, [sp, #32]
 8008b86:	2331      	movs	r3, #49	; 0x31
 8008b88:	7013      	strb	r3, [r2, #0]
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	9303      	str	r3, [sp, #12]
 8008b90:	e25a      	b.n	8009048 <_dtoa_r+0x9a8>
 8008b92:	423d      	tst	r5, r7
 8008b94:	d005      	beq.n	8008ba2 <_dtoa_r+0x502>
 8008b96:	6832      	ldr	r2, [r6, #0]
 8008b98:	6873      	ldr	r3, [r6, #4]
 8008b9a:	f7f8 fd39 	bl	8001610 <__aeabi_dmul>
 8008b9e:	003b      	movs	r3, r7
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	106d      	asrs	r5, r5, #1
 8008ba4:	3608      	adds	r6, #8
 8008ba6:	e75f      	b.n	8008a68 <_dtoa_r+0x3c8>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	930e      	str	r3, [sp, #56]	; 0x38
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	e783      	b.n	8008ab8 <_dtoa_r+0x418>
 8008bb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bb2:	4b84      	ldr	r3, [pc, #528]	; (8008dc4 <_dtoa_r+0x724>)
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	00d2      	lsls	r2, r2, #3
 8008bb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	9c08      	ldr	r4, [sp, #32]
 8008bbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d051      	beq.n	8008c6c <_dtoa_r+0x5cc>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4986      	ldr	r1, [pc, #536]	; (8008de4 <_dtoa_r+0x744>)
 8008bcc:	f7f8 f926 	bl	8000e1c <__aeabi_ddiv>
 8008bd0:	0022      	movs	r2, r4
 8008bd2:	002b      	movs	r3, r5
 8008bd4:	f7f8 ffde 	bl	8001b94 <__aeabi_dsub>
 8008bd8:	9a06      	ldr	r2, [sp, #24]
 8008bda:	0004      	movs	r4, r0
 8008bdc:	4694      	mov	ip, r2
 8008bde:	000d      	movs	r5, r1
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	9314      	str	r3, [sp, #80]	; 0x50
 8008be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008be6:	4463      	add	r3, ip
 8008be8:	9318      	str	r3, [sp, #96]	; 0x60
 8008bea:	0039      	movs	r1, r7
 8008bec:	0030      	movs	r0, r6
 8008bee:	f7f9 fb71 	bl	80022d4 <__aeabi_d2iz>
 8008bf2:	9012      	str	r0, [sp, #72]	; 0x48
 8008bf4:	f7f9 fba4 	bl	8002340 <__aeabi_i2d>
 8008bf8:	0002      	movs	r2, r0
 8008bfa:	000b      	movs	r3, r1
 8008bfc:	0030      	movs	r0, r6
 8008bfe:	0039      	movs	r1, r7
 8008c00:	f7f8 ffc8 	bl	8001b94 <__aeabi_dsub>
 8008c04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c08:	3301      	adds	r3, #1
 8008c0a:	9308      	str	r3, [sp, #32]
 8008c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c0e:	0006      	movs	r6, r0
 8008c10:	3330      	adds	r3, #48	; 0x30
 8008c12:	7013      	strb	r3, [r2, #0]
 8008c14:	0022      	movs	r2, r4
 8008c16:	002b      	movs	r3, r5
 8008c18:	000f      	movs	r7, r1
 8008c1a:	f7f7 fc1b 	bl	8000454 <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d174      	bne.n	8008d0c <_dtoa_r+0x66c>
 8008c22:	0032      	movs	r2, r6
 8008c24:	003b      	movs	r3, r7
 8008c26:	2000      	movs	r0, #0
 8008c28:	4968      	ldr	r1, [pc, #416]	; (8008dcc <_dtoa_r+0x72c>)
 8008c2a:	f7f8 ffb3 	bl	8001b94 <__aeabi_dsub>
 8008c2e:	0022      	movs	r2, r4
 8008c30:	002b      	movs	r3, r5
 8008c32:	f7f7 fc0f 	bl	8000454 <__aeabi_dcmplt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d000      	beq.n	8008c3c <_dtoa_r+0x59c>
 8008c3a:	e0d7      	b.n	8008dec <_dtoa_r+0x74c>
 8008c3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008c3e:	9a08      	ldr	r2, [sp, #32]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d100      	bne.n	8008c46 <_dtoa_r+0x5a6>
 8008c44:	e771      	b.n	8008b2a <_dtoa_r+0x48a>
 8008c46:	2200      	movs	r2, #0
 8008c48:	0020      	movs	r0, r4
 8008c4a:	0029      	movs	r1, r5
 8008c4c:	4b60      	ldr	r3, [pc, #384]	; (8008dd0 <_dtoa_r+0x730>)
 8008c4e:	f7f8 fcdf 	bl	8001610 <__aeabi_dmul>
 8008c52:	4b5f      	ldr	r3, [pc, #380]	; (8008dd0 <_dtoa_r+0x730>)
 8008c54:	0004      	movs	r4, r0
 8008c56:	000d      	movs	r5, r1
 8008c58:	0030      	movs	r0, r6
 8008c5a:	0039      	movs	r1, r7
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f7f8 fcd7 	bl	8001610 <__aeabi_dmul>
 8008c62:	9b08      	ldr	r3, [sp, #32]
 8008c64:	0006      	movs	r6, r0
 8008c66:	000f      	movs	r7, r1
 8008c68:	9314      	str	r3, [sp, #80]	; 0x50
 8008c6a:	e7be      	b.n	8008bea <_dtoa_r+0x54a>
 8008c6c:	0020      	movs	r0, r4
 8008c6e:	0029      	movs	r1, r5
 8008c70:	f7f8 fcce 	bl	8001610 <__aeabi_dmul>
 8008c74:	9a06      	ldr	r2, [sp, #24]
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	4694      	mov	ip, r2
 8008c7a:	9308      	str	r3, [sp, #32]
 8008c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c7e:	9014      	str	r0, [sp, #80]	; 0x50
 8008c80:	9115      	str	r1, [sp, #84]	; 0x54
 8008c82:	4463      	add	r3, ip
 8008c84:	9319      	str	r3, [sp, #100]	; 0x64
 8008c86:	0030      	movs	r0, r6
 8008c88:	0039      	movs	r1, r7
 8008c8a:	f7f9 fb23 	bl	80022d4 <__aeabi_d2iz>
 8008c8e:	9018      	str	r0, [sp, #96]	; 0x60
 8008c90:	f7f9 fb56 	bl	8002340 <__aeabi_i2d>
 8008c94:	0002      	movs	r2, r0
 8008c96:	000b      	movs	r3, r1
 8008c98:	0030      	movs	r0, r6
 8008c9a:	0039      	movs	r1, r7
 8008c9c:	f7f8 ff7a 	bl	8001b94 <__aeabi_dsub>
 8008ca0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008ca2:	9b08      	ldr	r3, [sp, #32]
 8008ca4:	3630      	adds	r6, #48	; 0x30
 8008ca6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ca8:	701e      	strb	r6, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	0004      	movs	r4, r0
 8008cae:	000d      	movs	r5, r1
 8008cb0:	9308      	str	r3, [sp, #32]
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d12d      	bne.n	8008d12 <_dtoa_r+0x672>
 8008cb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008cb8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cbe:	4694      	mov	ip, r2
 8008cc0:	4463      	add	r3, ip
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	9308      	str	r3, [sp, #32]
 8008cc6:	4b47      	ldr	r3, [pc, #284]	; (8008de4 <_dtoa_r+0x744>)
 8008cc8:	f7f7 fd48 	bl	800075c <__aeabi_dadd>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	000b      	movs	r3, r1
 8008cd0:	0020      	movs	r0, r4
 8008cd2:	0029      	movs	r1, r5
 8008cd4:	f7f7 fbd2 	bl	800047c <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d000      	beq.n	8008cde <_dtoa_r+0x63e>
 8008cdc:	e086      	b.n	8008dec <_dtoa_r+0x74c>
 8008cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	493f      	ldr	r1, [pc, #252]	; (8008de4 <_dtoa_r+0x744>)
 8008ce6:	f7f8 ff55 	bl	8001b94 <__aeabi_dsub>
 8008cea:	0002      	movs	r2, r0
 8008cec:	000b      	movs	r3, r1
 8008cee:	0020      	movs	r0, r4
 8008cf0:	0029      	movs	r1, r5
 8008cf2:	f7f7 fbaf 	bl	8000454 <__aeabi_dcmplt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d100      	bne.n	8008cfc <_dtoa_r+0x65c>
 8008cfa:	e716      	b.n	8008b2a <_dtoa_r+0x48a>
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	001a      	movs	r2, r3
 8008d00:	3a01      	subs	r2, #1
 8008d02:	9208      	str	r2, [sp, #32]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	2a30      	cmp	r2, #48	; 0x30
 8008d08:	d0f8      	beq.n	8008cfc <_dtoa_r+0x65c>
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	e046      	b.n	8008da0 <_dtoa_r+0x700>
 8008d12:	2200      	movs	r2, #0
 8008d14:	4b2e      	ldr	r3, [pc, #184]	; (8008dd0 <_dtoa_r+0x730>)
 8008d16:	f7f8 fc7b 	bl	8001610 <__aeabi_dmul>
 8008d1a:	0006      	movs	r6, r0
 8008d1c:	000f      	movs	r7, r1
 8008d1e:	e7b2      	b.n	8008c86 <_dtoa_r+0x5e6>
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	9a06      	ldr	r2, [sp, #24]
 8008d24:	930a      	str	r3, [sp, #40]	; 0x28
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	9c08      	ldr	r4, [sp, #32]
 8008d2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d32:	0032      	movs	r2, r6
 8008d34:	003b      	movs	r3, r7
 8008d36:	0020      	movs	r0, r4
 8008d38:	0029      	movs	r1, r5
 8008d3a:	f7f8 f86f 	bl	8000e1c <__aeabi_ddiv>
 8008d3e:	f7f9 fac9 	bl	80022d4 <__aeabi_d2iz>
 8008d42:	9007      	str	r0, [sp, #28]
 8008d44:	f7f9 fafc 	bl	8002340 <__aeabi_i2d>
 8008d48:	0032      	movs	r2, r6
 8008d4a:	003b      	movs	r3, r7
 8008d4c:	f7f8 fc60 	bl	8001610 <__aeabi_dmul>
 8008d50:	0002      	movs	r2, r0
 8008d52:	000b      	movs	r3, r1
 8008d54:	0020      	movs	r0, r4
 8008d56:	0029      	movs	r1, r5
 8008d58:	f7f8 ff1c 	bl	8001b94 <__aeabi_dsub>
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5e:	001a      	movs	r2, r3
 8008d60:	3201      	adds	r2, #1
 8008d62:	920a      	str	r2, [sp, #40]	; 0x28
 8008d64:	9208      	str	r2, [sp, #32]
 8008d66:	9a07      	ldr	r2, [sp, #28]
 8008d68:	3230      	adds	r2, #48	; 0x30
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d14f      	bne.n	8008e12 <_dtoa_r+0x772>
 8008d72:	0002      	movs	r2, r0
 8008d74:	000b      	movs	r3, r1
 8008d76:	f7f7 fcf1 	bl	800075c <__aeabi_dadd>
 8008d7a:	0032      	movs	r2, r6
 8008d7c:	003b      	movs	r3, r7
 8008d7e:	0004      	movs	r4, r0
 8008d80:	000d      	movs	r5, r1
 8008d82:	f7f7 fb7b 	bl	800047c <__aeabi_dcmpgt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d12e      	bne.n	8008de8 <_dtoa_r+0x748>
 8008d8a:	0032      	movs	r2, r6
 8008d8c:	003b      	movs	r3, r7
 8008d8e:	0020      	movs	r0, r4
 8008d90:	0029      	movs	r1, r5
 8008d92:	f7f7 fb59 	bl	8000448 <__aeabi_dcmpeq>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d002      	beq.n	8008da0 <_dtoa_r+0x700>
 8008d9a:	9b07      	ldr	r3, [sp, #28]
 8008d9c:	07de      	lsls	r6, r3, #31
 8008d9e:	d423      	bmi.n	8008de8 <_dtoa_r+0x748>
 8008da0:	9905      	ldr	r1, [sp, #20]
 8008da2:	9804      	ldr	r0, [sp, #16]
 8008da4:	f000 fe86 	bl	8009ab4 <_Bfree>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9a08      	ldr	r2, [sp, #32]
 8008dac:	7013      	strb	r3, [r2, #0]
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008db2:	3301      	adds	r3, #1
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d100      	bne.n	8008dbe <_dtoa_r+0x71e>
 8008dbc:	e4ba      	b.n	8008734 <_dtoa_r+0x94>
 8008dbe:	9a08      	ldr	r2, [sp, #32]
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e4b7      	b.n	8008734 <_dtoa_r+0x94>
 8008dc4:	0800bc20 	.word	0x0800bc20
 8008dc8:	0800bbf8 	.word	0x0800bbf8
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	401c0000 	.word	0x401c0000
 8008dd8:	fcc00000 	.word	0xfcc00000
 8008ddc:	40140000 	.word	0x40140000
 8008de0:	7cc00000 	.word	0x7cc00000
 8008de4:	3fe00000 	.word	0x3fe00000
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	930e      	str	r3, [sp, #56]	; 0x38
 8008dec:	9b08      	ldr	r3, [sp, #32]
 8008dee:	9308      	str	r3, [sp, #32]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	2a39      	cmp	r2, #57	; 0x39
 8008df6:	d108      	bne.n	8008e0a <_dtoa_r+0x76a>
 8008df8:	9a06      	ldr	r2, [sp, #24]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d1f7      	bne.n	8008dee <_dtoa_r+0x74e>
 8008dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e00:	9906      	ldr	r1, [sp, #24]
 8008e02:	3201      	adds	r2, #1
 8008e04:	920e      	str	r2, [sp, #56]	; 0x38
 8008e06:	2230      	movs	r2, #48	; 0x30
 8008e08:	700a      	strb	r2, [r1, #0]
 8008e0a:	781a      	ldrb	r2, [r3, #0]
 8008e0c:	3201      	adds	r2, #1
 8008e0e:	701a      	strb	r2, [r3, #0]
 8008e10:	e77c      	b.n	8008d0c <_dtoa_r+0x66c>
 8008e12:	2200      	movs	r2, #0
 8008e14:	4ba9      	ldr	r3, [pc, #676]	; (80090bc <_dtoa_r+0xa1c>)
 8008e16:	f7f8 fbfb 	bl	8001610 <__aeabi_dmul>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	0004      	movs	r4, r0
 8008e20:	000d      	movs	r5, r1
 8008e22:	f7f7 fb11 	bl	8000448 <__aeabi_dcmpeq>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d100      	bne.n	8008e2c <_dtoa_r+0x78c>
 8008e2a:	e782      	b.n	8008d32 <_dtoa_r+0x692>
 8008e2c:	e7b8      	b.n	8008da0 <_dtoa_r+0x700>
 8008e2e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008e30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	d012      	beq.n	8008e5e <_dtoa_r+0x7be>
 8008e38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	dc6e      	bgt.n	8008f1c <_dtoa_r+0x87c>
 8008e3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	d065      	beq.n	8008f10 <_dtoa_r+0x870>
 8008e44:	4a9e      	ldr	r2, [pc, #632]	; (80090c0 <_dtoa_r+0xa20>)
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	18d2      	adds	r2, r2, r3
 8008e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e52:	9804      	ldr	r0, [sp, #16]
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	930c      	str	r3, [sp, #48]	; 0x30
 8008e58:	f000 ff28 	bl	8009cac <__i2b>
 8008e5c:	0007      	movs	r7, r0
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d00e      	beq.n	8008e80 <_dtoa_r+0x7e0>
 8008e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dd0b      	ble.n	8008e80 <_dtoa_r+0x7e0>
 8008e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e6a:	0023      	movs	r3, r4
 8008e6c:	4294      	cmp	r4, r2
 8008e6e:	dd00      	ble.n	8008e72 <_dtoa_r+0x7d2>
 8008e70:	0013      	movs	r3, r2
 8008e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e74:	1ae4      	subs	r4, r4, r3
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	920a      	str	r2, [sp, #40]	; 0x28
 8008e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01e      	beq.n	8008ec4 <_dtoa_r+0x824>
 8008e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d05c      	beq.n	8008f46 <_dtoa_r+0x8a6>
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	dd10      	ble.n	8008eb2 <_dtoa_r+0x812>
 8008e90:	0039      	movs	r1, r7
 8008e92:	002a      	movs	r2, r5
 8008e94:	9804      	ldr	r0, [sp, #16]
 8008e96:	f000 ffd1 	bl	8009e3c <__pow5mult>
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	0001      	movs	r1, r0
 8008e9e:	0007      	movs	r7, r0
 8008ea0:	9804      	ldr	r0, [sp, #16]
 8008ea2:	f000 ff1b 	bl	8009cdc <__multiply>
 8008ea6:	0006      	movs	r6, r0
 8008ea8:	9905      	ldr	r1, [sp, #20]
 8008eaa:	9804      	ldr	r0, [sp, #16]
 8008eac:	f000 fe02 	bl	8009ab4 <_Bfree>
 8008eb0:	9605      	str	r6, [sp, #20]
 8008eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb4:	1b5a      	subs	r2, r3, r5
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	d004      	beq.n	8008ec4 <_dtoa_r+0x824>
 8008eba:	9905      	ldr	r1, [sp, #20]
 8008ebc:	9804      	ldr	r0, [sp, #16]
 8008ebe:	f000 ffbd 	bl	8009e3c <__pow5mult>
 8008ec2:	9005      	str	r0, [sp, #20]
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	9804      	ldr	r0, [sp, #16]
 8008ec8:	f000 fef0 	bl	8009cac <__i2b>
 8008ecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ece:	0006      	movs	r6, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dd3a      	ble.n	8008f4a <_dtoa_r+0x8aa>
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	0001      	movs	r1, r0
 8008ed8:	9804      	ldr	r0, [sp, #16]
 8008eda:	f000 ffaf 	bl	8009e3c <__pow5mult>
 8008ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ee0:	0006      	movs	r6, r0
 8008ee2:	2500      	movs	r5, #0
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	dc38      	bgt.n	8008f5a <_dtoa_r+0x8ba>
 8008ee8:	2500      	movs	r5, #0
 8008eea:	9b08      	ldr	r3, [sp, #32]
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	d130      	bne.n	8008f52 <_dtoa_r+0x8b2>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	031b      	lsls	r3, r3, #12
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	d12c      	bne.n	8008f52 <_dtoa_r+0x8b2>
 8008ef8:	4b72      	ldr	r3, [pc, #456]	; (80090c4 <_dtoa_r+0xa24>)
 8008efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efc:	4213      	tst	r3, r2
 8008efe:	d028      	beq.n	8008f52 <_dtoa_r+0x8b2>
 8008f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f02:	3501      	adds	r5, #1
 8008f04:	3301      	adds	r3, #1
 8008f06:	930a      	str	r3, [sp, #40]	; 0x28
 8008f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f0e:	e020      	b.n	8008f52 <_dtoa_r+0x8b2>
 8008f10:	2336      	movs	r3, #54	; 0x36
 8008f12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008f16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	e795      	b.n	8008e48 <_dtoa_r+0x7a8>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	1e5d      	subs	r5, r3, #1
 8008f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f22:	42ab      	cmp	r3, r5
 8008f24:	db07      	blt.n	8008f36 <_dtoa_r+0x896>
 8008f26:	1b5d      	subs	r5, r3, r5
 8008f28:	9b07      	ldr	r3, [sp, #28]
 8008f2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	da8b      	bge.n	8008e48 <_dtoa_r+0x7a8>
 8008f30:	1ae4      	subs	r4, r4, r3
 8008f32:	2300      	movs	r3, #0
 8008f34:	e788      	b.n	8008e48 <_dtoa_r+0x7a8>
 8008f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f3a:	1aeb      	subs	r3, r5, r3
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	950d      	str	r5, [sp, #52]	; 0x34
 8008f40:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f42:	2500      	movs	r5, #0
 8008f44:	e7f0      	b.n	8008f28 <_dtoa_r+0x888>
 8008f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f48:	e7b7      	b.n	8008eba <_dtoa_r+0x81a>
 8008f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	ddca      	ble.n	8008ee8 <_dtoa_r+0x848>
 8008f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f54:	2001      	movs	r0, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <_dtoa_r+0x8cc>
 8008f5a:	6933      	ldr	r3, [r6, #16]
 8008f5c:	3303      	adds	r3, #3
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	18f3      	adds	r3, r6, r3
 8008f62:	6858      	ldr	r0, [r3, #4]
 8008f64:	f000 fe5a 	bl	8009c1c <__hi0bits>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	1a18      	subs	r0, r3, r0
 8008f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f6e:	1818      	adds	r0, r3, r0
 8008f70:	0002      	movs	r2, r0
 8008f72:	231f      	movs	r3, #31
 8008f74:	401a      	ands	r2, r3
 8008f76:	4218      	tst	r0, r3
 8008f78:	d047      	beq.n	800900a <_dtoa_r+0x96a>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	dd3f      	ble.n	8009002 <_dtoa_r+0x962>
 8008f82:	231c      	movs	r3, #28
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f88:	18e4      	adds	r4, r4, r3
 8008f8a:	18d2      	adds	r2, r2, r3
 8008f8c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f90:	18d3      	adds	r3, r2, r3
 8008f92:	930c      	str	r3, [sp, #48]	; 0x30
 8008f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd05      	ble.n	8008fa6 <_dtoa_r+0x906>
 8008f9a:	001a      	movs	r2, r3
 8008f9c:	9905      	ldr	r1, [sp, #20]
 8008f9e:	9804      	ldr	r0, [sp, #16]
 8008fa0:	f000 ffa8 	bl	8009ef4 <__lshift>
 8008fa4:	9005      	str	r0, [sp, #20]
 8008fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	dd05      	ble.n	8008fb8 <_dtoa_r+0x918>
 8008fac:	0031      	movs	r1, r6
 8008fae:	001a      	movs	r2, r3
 8008fb0:	9804      	ldr	r0, [sp, #16]
 8008fb2:	f000 ff9f 	bl	8009ef4 <__lshift>
 8008fb6:	0006      	movs	r6, r0
 8008fb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d027      	beq.n	800900e <_dtoa_r+0x96e>
 8008fbe:	0031      	movs	r1, r6
 8008fc0:	9805      	ldr	r0, [sp, #20]
 8008fc2:	f001 f805 	bl	8009fd0 <__mcmp>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	da21      	bge.n	800900e <_dtoa_r+0x96e>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	220a      	movs	r2, #10
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	9905      	ldr	r1, [sp, #20]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9804      	ldr	r0, [sp, #16]
 8008fd8:	f000 fd90 	bl	8009afc <__multadd>
 8008fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fde:	9005      	str	r0, [sp, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d100      	bne.n	8008fe6 <_dtoa_r+0x946>
 8008fe4:	e15d      	b.n	80092a2 <_dtoa_r+0xc02>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	0039      	movs	r1, r7
 8008fea:	220a      	movs	r2, #10
 8008fec:	9804      	ldr	r0, [sp, #16]
 8008fee:	f000 fd85 	bl	8009afc <__multadd>
 8008ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff4:	0007      	movs	r7, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dc49      	bgt.n	800908e <_dtoa_r+0x9ee>
 8008ffa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	dc0e      	bgt.n	800901e <_dtoa_r+0x97e>
 8009000:	e045      	b.n	800908e <_dtoa_r+0x9ee>
 8009002:	2b04      	cmp	r3, #4
 8009004:	d0c6      	beq.n	8008f94 <_dtoa_r+0x8f4>
 8009006:	331c      	adds	r3, #28
 8009008:	e7bd      	b.n	8008f86 <_dtoa_r+0x8e6>
 800900a:	0013      	movs	r3, r2
 800900c:	e7fb      	b.n	8009006 <_dtoa_r+0x966>
 800900e:	9b07      	ldr	r3, [sp, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc36      	bgt.n	8009082 <_dtoa_r+0x9e2>
 8009014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009016:	2b02      	cmp	r3, #2
 8009018:	dd33      	ble.n	8009082 <_dtoa_r+0x9e2>
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	930b      	str	r3, [sp, #44]	; 0x2c
 800901e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10c      	bne.n	800903e <_dtoa_r+0x99e>
 8009024:	0031      	movs	r1, r6
 8009026:	2205      	movs	r2, #5
 8009028:	9804      	ldr	r0, [sp, #16]
 800902a:	f000 fd67 	bl	8009afc <__multadd>
 800902e:	0006      	movs	r6, r0
 8009030:	0001      	movs	r1, r0
 8009032:	9805      	ldr	r0, [sp, #20]
 8009034:	f000 ffcc 	bl	8009fd0 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	dd00      	ble.n	800903e <_dtoa_r+0x99e>
 800903c:	e59f      	b.n	8008b7e <_dtoa_r+0x4de>
 800903e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009040:	43db      	mvns	r3, r3
 8009042:	9303      	str	r3, [sp, #12]
 8009044:	9b06      	ldr	r3, [sp, #24]
 8009046:	9308      	str	r3, [sp, #32]
 8009048:	2500      	movs	r5, #0
 800904a:	0031      	movs	r1, r6
 800904c:	9804      	ldr	r0, [sp, #16]
 800904e:	f000 fd31 	bl	8009ab4 <_Bfree>
 8009052:	2f00      	cmp	r7, #0
 8009054:	d100      	bne.n	8009058 <_dtoa_r+0x9b8>
 8009056:	e6a3      	b.n	8008da0 <_dtoa_r+0x700>
 8009058:	2d00      	cmp	r5, #0
 800905a:	d005      	beq.n	8009068 <_dtoa_r+0x9c8>
 800905c:	42bd      	cmp	r5, r7
 800905e:	d003      	beq.n	8009068 <_dtoa_r+0x9c8>
 8009060:	0029      	movs	r1, r5
 8009062:	9804      	ldr	r0, [sp, #16]
 8009064:	f000 fd26 	bl	8009ab4 <_Bfree>
 8009068:	0039      	movs	r1, r7
 800906a:	9804      	ldr	r0, [sp, #16]
 800906c:	f000 fd22 	bl	8009ab4 <_Bfree>
 8009070:	e696      	b.n	8008da0 <_dtoa_r+0x700>
 8009072:	2600      	movs	r6, #0
 8009074:	0037      	movs	r7, r6
 8009076:	e7e2      	b.n	800903e <_dtoa_r+0x99e>
 8009078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800907a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	0037      	movs	r7, r6
 8009080:	e57d      	b.n	8008b7e <_dtoa_r+0x4de>
 8009082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009084:	2b00      	cmp	r3, #0
 8009086:	d100      	bne.n	800908a <_dtoa_r+0x9ea>
 8009088:	e0c3      	b.n	8009212 <_dtoa_r+0xb72>
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	930b      	str	r3, [sp, #44]	; 0x2c
 800908e:	2c00      	cmp	r4, #0
 8009090:	dd05      	ble.n	800909e <_dtoa_r+0x9fe>
 8009092:	0039      	movs	r1, r7
 8009094:	0022      	movs	r2, r4
 8009096:	9804      	ldr	r0, [sp, #16]
 8009098:	f000 ff2c 	bl	8009ef4 <__lshift>
 800909c:	0007      	movs	r7, r0
 800909e:	0038      	movs	r0, r7
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	d024      	beq.n	80090ee <_dtoa_r+0xa4e>
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	9804      	ldr	r0, [sp, #16]
 80090a8:	f000 fcc0 	bl	8009a2c <_Balloc>
 80090ac:	1e04      	subs	r4, r0, #0
 80090ae:	d111      	bne.n	80090d4 <_dtoa_r+0xa34>
 80090b0:	0022      	movs	r2, r4
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <_dtoa_r+0xa28>)
 80090b4:	4805      	ldr	r0, [pc, #20]	; (80090cc <_dtoa_r+0xa2c>)
 80090b6:	4906      	ldr	r1, [pc, #24]	; (80090d0 <_dtoa_r+0xa30>)
 80090b8:	f7ff fb07 	bl	80086ca <_dtoa_r+0x2a>
 80090bc:	40240000 	.word	0x40240000
 80090c0:	00000433 	.word	0x00000433
 80090c4:	7ff00000 	.word	0x7ff00000
 80090c8:	0800bb2c 	.word	0x0800bb2c
 80090cc:	0800bad4 	.word	0x0800bad4
 80090d0:	000002ef 	.word	0x000002ef
 80090d4:	0039      	movs	r1, r7
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	310c      	adds	r1, #12
 80090da:	3202      	adds	r2, #2
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	300c      	adds	r0, #12
 80090e0:	f7ff fa3a 	bl	8008558 <memcpy>
 80090e4:	2201      	movs	r2, #1
 80090e6:	0021      	movs	r1, r4
 80090e8:	9804      	ldr	r0, [sp, #16]
 80090ea:	f000 ff03 	bl	8009ef4 <__lshift>
 80090ee:	9b06      	ldr	r3, [sp, #24]
 80090f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	2201      	movs	r2, #1
 80090fa:	003d      	movs	r5, r7
 80090fc:	0007      	movs	r7, r0
 80090fe:	930e      	str	r3, [sp, #56]	; 0x38
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	4013      	ands	r3, r2
 8009104:	930d      	str	r3, [sp, #52]	; 0x34
 8009106:	0031      	movs	r1, r6
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	f7ff fa39 	bl	8008580 <quorem>
 800910e:	0029      	movs	r1, r5
 8009110:	0004      	movs	r4, r0
 8009112:	900b      	str	r0, [sp, #44]	; 0x2c
 8009114:	9805      	ldr	r0, [sp, #20]
 8009116:	f000 ff5b 	bl	8009fd0 <__mcmp>
 800911a:	003a      	movs	r2, r7
 800911c:	900c      	str	r0, [sp, #48]	; 0x30
 800911e:	0031      	movs	r1, r6
 8009120:	9804      	ldr	r0, [sp, #16]
 8009122:	f000 ff71 	bl	800a008 <__mdiff>
 8009126:	2201      	movs	r2, #1
 8009128:	68c3      	ldr	r3, [r0, #12]
 800912a:	3430      	adds	r4, #48	; 0x30
 800912c:	9008      	str	r0, [sp, #32]
 800912e:	920a      	str	r2, [sp, #40]	; 0x28
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <_dtoa_r+0xa9e>
 8009134:	0001      	movs	r1, r0
 8009136:	9805      	ldr	r0, [sp, #20]
 8009138:	f000 ff4a 	bl	8009fd0 <__mcmp>
 800913c:	900a      	str	r0, [sp, #40]	; 0x28
 800913e:	9908      	ldr	r1, [sp, #32]
 8009140:	9804      	ldr	r0, [sp, #16]
 8009142:	f000 fcb7 	bl	8009ab4 <_Bfree>
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800914a:	3301      	adds	r3, #1
 800914c:	9308      	str	r3, [sp, #32]
 800914e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009150:	4313      	orrs	r3, r2
 8009152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009154:	4313      	orrs	r3, r2
 8009156:	d109      	bne.n	800916c <_dtoa_r+0xacc>
 8009158:	2c39      	cmp	r4, #57	; 0x39
 800915a:	d022      	beq.n	80091a2 <_dtoa_r+0xb02>
 800915c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd01      	ble.n	8009166 <_dtoa_r+0xac6>
 8009162:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009164:	3431      	adds	r4, #49	; 0x31
 8009166:	9b07      	ldr	r3, [sp, #28]
 8009168:	701c      	strb	r4, [r3, #0]
 800916a:	e76e      	b.n	800904a <_dtoa_r+0x9aa>
 800916c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	db04      	blt.n	800917c <_dtoa_r+0xadc>
 8009172:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009174:	4313      	orrs	r3, r2
 8009176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009178:	4313      	orrs	r3, r2
 800917a:	d11e      	bne.n	80091ba <_dtoa_r+0xb1a>
 800917c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	ddf1      	ble.n	8009166 <_dtoa_r+0xac6>
 8009182:	9905      	ldr	r1, [sp, #20]
 8009184:	2201      	movs	r2, #1
 8009186:	9804      	ldr	r0, [sp, #16]
 8009188:	f000 feb4 	bl	8009ef4 <__lshift>
 800918c:	0031      	movs	r1, r6
 800918e:	9005      	str	r0, [sp, #20]
 8009190:	f000 ff1e 	bl	8009fd0 <__mcmp>
 8009194:	2800      	cmp	r0, #0
 8009196:	dc02      	bgt.n	800919e <_dtoa_r+0xafe>
 8009198:	d1e5      	bne.n	8009166 <_dtoa_r+0xac6>
 800919a:	07e3      	lsls	r3, r4, #31
 800919c:	d5e3      	bpl.n	8009166 <_dtoa_r+0xac6>
 800919e:	2c39      	cmp	r4, #57	; 0x39
 80091a0:	d1df      	bne.n	8009162 <_dtoa_r+0xac2>
 80091a2:	2339      	movs	r3, #57	; 0x39
 80091a4:	9a07      	ldr	r2, [sp, #28]
 80091a6:	7013      	strb	r3, [r2, #0]
 80091a8:	9b08      	ldr	r3, [sp, #32]
 80091aa:	9308      	str	r3, [sp, #32]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	781a      	ldrb	r2, [r3, #0]
 80091b0:	2a39      	cmp	r2, #57	; 0x39
 80091b2:	d063      	beq.n	800927c <_dtoa_r+0xbdc>
 80091b4:	3201      	adds	r2, #1
 80091b6:	701a      	strb	r2, [r3, #0]
 80091b8:	e747      	b.n	800904a <_dtoa_r+0x9aa>
 80091ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd03      	ble.n	80091c8 <_dtoa_r+0xb28>
 80091c0:	2c39      	cmp	r4, #57	; 0x39
 80091c2:	d0ee      	beq.n	80091a2 <_dtoa_r+0xb02>
 80091c4:	3401      	adds	r4, #1
 80091c6:	e7ce      	b.n	8009166 <_dtoa_r+0xac6>
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	9a07      	ldr	r2, [sp, #28]
 80091cc:	701c      	strb	r4, [r3, #0]
 80091ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d03e      	beq.n	8009252 <_dtoa_r+0xbb2>
 80091d4:	2300      	movs	r3, #0
 80091d6:	220a      	movs	r2, #10
 80091d8:	9905      	ldr	r1, [sp, #20]
 80091da:	9804      	ldr	r0, [sp, #16]
 80091dc:	f000 fc8e 	bl	8009afc <__multadd>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9005      	str	r0, [sp, #20]
 80091e4:	220a      	movs	r2, #10
 80091e6:	0029      	movs	r1, r5
 80091e8:	9804      	ldr	r0, [sp, #16]
 80091ea:	42bd      	cmp	r5, r7
 80091ec:	d106      	bne.n	80091fc <_dtoa_r+0xb5c>
 80091ee:	f000 fc85 	bl	8009afc <__multadd>
 80091f2:	0005      	movs	r5, r0
 80091f4:	0007      	movs	r7, r0
 80091f6:	9b08      	ldr	r3, [sp, #32]
 80091f8:	9307      	str	r3, [sp, #28]
 80091fa:	e784      	b.n	8009106 <_dtoa_r+0xa66>
 80091fc:	f000 fc7e 	bl	8009afc <__multadd>
 8009200:	0039      	movs	r1, r7
 8009202:	0005      	movs	r5, r0
 8009204:	2300      	movs	r3, #0
 8009206:	220a      	movs	r2, #10
 8009208:	9804      	ldr	r0, [sp, #16]
 800920a:	f000 fc77 	bl	8009afc <__multadd>
 800920e:	0007      	movs	r7, r0
 8009210:	e7f1      	b.n	80091f6 <_dtoa_r+0xb56>
 8009212:	9b07      	ldr	r3, [sp, #28]
 8009214:	930b      	str	r3, [sp, #44]	; 0x2c
 8009216:	2500      	movs	r5, #0
 8009218:	0031      	movs	r1, r6
 800921a:	9805      	ldr	r0, [sp, #20]
 800921c:	f7ff f9b0 	bl	8008580 <quorem>
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	3030      	adds	r0, #48	; 0x30
 8009224:	5558      	strb	r0, [r3, r5]
 8009226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009228:	3501      	adds	r5, #1
 800922a:	0004      	movs	r4, r0
 800922c:	42ab      	cmp	r3, r5
 800922e:	dd07      	ble.n	8009240 <_dtoa_r+0xba0>
 8009230:	2300      	movs	r3, #0
 8009232:	220a      	movs	r2, #10
 8009234:	9905      	ldr	r1, [sp, #20]
 8009236:	9804      	ldr	r0, [sp, #16]
 8009238:	f000 fc60 	bl	8009afc <__multadd>
 800923c:	9005      	str	r0, [sp, #20]
 800923e:	e7eb      	b.n	8009218 <_dtoa_r+0xb78>
 8009240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009242:	2301      	movs	r3, #1
 8009244:	2a00      	cmp	r2, #0
 8009246:	dd00      	ble.n	800924a <_dtoa_r+0xbaa>
 8009248:	0013      	movs	r3, r2
 800924a:	2500      	movs	r5, #0
 800924c:	9a06      	ldr	r2, [sp, #24]
 800924e:	18d3      	adds	r3, r2, r3
 8009250:	9308      	str	r3, [sp, #32]
 8009252:	9905      	ldr	r1, [sp, #20]
 8009254:	2201      	movs	r2, #1
 8009256:	9804      	ldr	r0, [sp, #16]
 8009258:	f000 fe4c 	bl	8009ef4 <__lshift>
 800925c:	0031      	movs	r1, r6
 800925e:	9005      	str	r0, [sp, #20]
 8009260:	f000 feb6 	bl	8009fd0 <__mcmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	dc9f      	bgt.n	80091a8 <_dtoa_r+0xb08>
 8009268:	d101      	bne.n	800926e <_dtoa_r+0xbce>
 800926a:	07e4      	lsls	r4, r4, #31
 800926c:	d49c      	bmi.n	80091a8 <_dtoa_r+0xb08>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	3b01      	subs	r3, #1
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	2a30      	cmp	r2, #48	; 0x30
 8009278:	d0fa      	beq.n	8009270 <_dtoa_r+0xbd0>
 800927a:	e6e6      	b.n	800904a <_dtoa_r+0x9aa>
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	429a      	cmp	r2, r3
 8009280:	d193      	bne.n	80091aa <_dtoa_r+0xb0a>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	2331      	movs	r3, #49	; 0x31
 800928a:	7013      	strb	r3, [r2, #0]
 800928c:	e6dd      	b.n	800904a <_dtoa_r+0x9aa>
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <_dtoa_r+0xc14>)
 8009290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <_dtoa_r+0xc18>)
 8009296:	2a00      	cmp	r2, #0
 8009298:	d001      	beq.n	800929e <_dtoa_r+0xbfe>
 800929a:	f7ff fa49 	bl	8008730 <_dtoa_r+0x90>
 800929e:	f7ff fa49 	bl	8008734 <_dtoa_r+0x94>
 80092a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dcb6      	bgt.n	8009216 <_dtoa_r+0xb76>
 80092a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	dd00      	ble.n	80092b0 <_dtoa_r+0xc10>
 80092ae:	e6b6      	b.n	800901e <_dtoa_r+0x97e>
 80092b0:	e7b1      	b.n	8009216 <_dtoa_r+0xb76>
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	0800bab0 	.word	0x0800bab0
 80092b8:	0800bab8 	.word	0x0800bab8

080092bc <_free_r>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	0005      	movs	r5, r0
 80092c0:	2900      	cmp	r1, #0
 80092c2:	d010      	beq.n	80092e6 <_free_r+0x2a>
 80092c4:	1f0c      	subs	r4, r1, #4
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da00      	bge.n	80092ce <_free_r+0x12>
 80092cc:	18e4      	adds	r4, r4, r3
 80092ce:	0028      	movs	r0, r5
 80092d0:	f7fd f970 	bl	80065b4 <__malloc_lock>
 80092d4:	4a1d      	ldr	r2, [pc, #116]	; (800934c <_free_r+0x90>)
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <_free_r+0x2c>
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6014      	str	r4, [r2, #0]
 80092e0:	0028      	movs	r0, r5
 80092e2:	f7fd f96f 	bl	80065c4 <__malloc_unlock>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d908      	bls.n	80092fe <_free_r+0x42>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	1821      	adds	r1, r4, r0
 80092f0:	428b      	cmp	r3, r1
 80092f2:	d1f3      	bne.n	80092dc <_free_r+0x20>
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	1809      	adds	r1, r1, r0
 80092fa:	6021      	str	r1, [r4, #0]
 80092fc:	e7ee      	b.n	80092dc <_free_r+0x20>
 80092fe:	001a      	movs	r2, r3
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <_free_r+0x4e>
 8009306:	42a3      	cmp	r3, r4
 8009308:	d9f9      	bls.n	80092fe <_free_r+0x42>
 800930a:	6811      	ldr	r1, [r2, #0]
 800930c:	1850      	adds	r0, r2, r1
 800930e:	42a0      	cmp	r0, r4
 8009310:	d10b      	bne.n	800932a <_free_r+0x6e>
 8009312:	6820      	ldr	r0, [r4, #0]
 8009314:	1809      	adds	r1, r1, r0
 8009316:	1850      	adds	r0, r2, r1
 8009318:	6011      	str	r1, [r2, #0]
 800931a:	4283      	cmp	r3, r0
 800931c:	d1e0      	bne.n	80092e0 <_free_r+0x24>
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	1841      	adds	r1, r0, r1
 8009324:	6011      	str	r1, [r2, #0]
 8009326:	6053      	str	r3, [r2, #4]
 8009328:	e7da      	b.n	80092e0 <_free_r+0x24>
 800932a:	42a0      	cmp	r0, r4
 800932c:	d902      	bls.n	8009334 <_free_r+0x78>
 800932e:	230c      	movs	r3, #12
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	e7d5      	b.n	80092e0 <_free_r+0x24>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	1821      	adds	r1, r4, r0
 8009338:	428b      	cmp	r3, r1
 800933a:	d103      	bne.n	8009344 <_free_r+0x88>
 800933c:	6819      	ldr	r1, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	1809      	adds	r1, r1, r0
 8009342:	6021      	str	r1, [r4, #0]
 8009344:	6063      	str	r3, [r4, #4]
 8009346:	6054      	str	r4, [r2, #4]
 8009348:	e7ca      	b.n	80092e0 <_free_r+0x24>
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	2000058c 	.word	0x2000058c

08009350 <rshift>:
 8009350:	0002      	movs	r2, r0
 8009352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009354:	6904      	ldr	r4, [r0, #16]
 8009356:	114b      	asrs	r3, r1, #5
 8009358:	b085      	sub	sp, #20
 800935a:	3214      	adds	r2, #20
 800935c:	9302      	str	r3, [sp, #8]
 800935e:	114d      	asrs	r5, r1, #5
 8009360:	0013      	movs	r3, r2
 8009362:	42ac      	cmp	r4, r5
 8009364:	dd32      	ble.n	80093cc <rshift+0x7c>
 8009366:	261f      	movs	r6, #31
 8009368:	000f      	movs	r7, r1
 800936a:	114b      	asrs	r3, r1, #5
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	00a5      	lsls	r5, r4, #2
 8009370:	18d3      	adds	r3, r2, r3
 8009372:	4037      	ands	r7, r6
 8009374:	1955      	adds	r5, r2, r5
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	9701      	str	r7, [sp, #4]
 800937a:	4231      	tst	r1, r6
 800937c:	d10d      	bne.n	800939a <rshift+0x4a>
 800937e:	0016      	movs	r6, r2
 8009380:	0019      	movs	r1, r3
 8009382:	428d      	cmp	r5, r1
 8009384:	d836      	bhi.n	80093f4 <rshift+0xa4>
 8009386:	9900      	ldr	r1, [sp, #0]
 8009388:	2300      	movs	r3, #0
 800938a:	3903      	subs	r1, #3
 800938c:	428d      	cmp	r5, r1
 800938e:	d302      	bcc.n	8009396 <rshift+0x46>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	1ae4      	subs	r4, r4, r3
 8009394:	00a3      	lsls	r3, r4, #2
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	e018      	b.n	80093cc <rshift+0x7c>
 800939a:	2120      	movs	r1, #32
 800939c:	9e01      	ldr	r6, [sp, #4]
 800939e:	9f01      	ldr	r7, [sp, #4]
 80093a0:	1b89      	subs	r1, r1, r6
 80093a2:	9e00      	ldr	r6, [sp, #0]
 80093a4:	9103      	str	r1, [sp, #12]
 80093a6:	ce02      	ldmia	r6!, {r1}
 80093a8:	4694      	mov	ip, r2
 80093aa:	40f9      	lsrs	r1, r7
 80093ac:	42b5      	cmp	r5, r6
 80093ae:	d816      	bhi.n	80093de <rshift+0x8e>
 80093b0:	9e00      	ldr	r6, [sp, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	3601      	adds	r6, #1
 80093b6:	42b5      	cmp	r5, r6
 80093b8:	d303      	bcc.n	80093c2 <rshift+0x72>
 80093ba:	9b02      	ldr	r3, [sp, #8]
 80093bc:	1ae3      	subs	r3, r4, r3
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	3b04      	subs	r3, #4
 80093c2:	18d3      	adds	r3, r2, r3
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d000      	beq.n	80093cc <rshift+0x7c>
 80093ca:	3304      	adds	r3, #4
 80093cc:	1a99      	subs	r1, r3, r2
 80093ce:	1089      	asrs	r1, r1, #2
 80093d0:	6101      	str	r1, [r0, #16]
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d101      	bne.n	80093da <rshift+0x8a>
 80093d6:	2300      	movs	r3, #0
 80093d8:	6143      	str	r3, [r0, #20]
 80093da:	b005      	add	sp, #20
 80093dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093de:	6837      	ldr	r7, [r6, #0]
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	409f      	lsls	r7, r3
 80093e4:	430f      	orrs	r7, r1
 80093e6:	4661      	mov	r1, ip
 80093e8:	c180      	stmia	r1!, {r7}
 80093ea:	468c      	mov	ip, r1
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	ce02      	ldmia	r6!, {r1}
 80093f0:	40d9      	lsrs	r1, r3
 80093f2:	e7db      	b.n	80093ac <rshift+0x5c>
 80093f4:	c980      	ldmia	r1!, {r7}
 80093f6:	c680      	stmia	r6!, {r7}
 80093f8:	e7c3      	b.n	8009382 <rshift+0x32>

080093fa <__hexdig_fun>:
 80093fa:	0002      	movs	r2, r0
 80093fc:	3a30      	subs	r2, #48	; 0x30
 80093fe:	0003      	movs	r3, r0
 8009400:	2a09      	cmp	r2, #9
 8009402:	d802      	bhi.n	800940a <__hexdig_fun+0x10>
 8009404:	3b20      	subs	r3, #32
 8009406:	b2d8      	uxtb	r0, r3
 8009408:	4770      	bx	lr
 800940a:	0002      	movs	r2, r0
 800940c:	3a61      	subs	r2, #97	; 0x61
 800940e:	2a05      	cmp	r2, #5
 8009410:	d801      	bhi.n	8009416 <__hexdig_fun+0x1c>
 8009412:	3b47      	subs	r3, #71	; 0x47
 8009414:	e7f7      	b.n	8009406 <__hexdig_fun+0xc>
 8009416:	001a      	movs	r2, r3
 8009418:	3a41      	subs	r2, #65	; 0x41
 800941a:	2000      	movs	r0, #0
 800941c:	2a05      	cmp	r2, #5
 800941e:	d8f3      	bhi.n	8009408 <__hexdig_fun+0xe>
 8009420:	3b27      	subs	r3, #39	; 0x27
 8009422:	e7f0      	b.n	8009406 <__hexdig_fun+0xc>

08009424 <__gethex>:
 8009424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009426:	b089      	sub	sp, #36	; 0x24
 8009428:	9307      	str	r3, [sp, #28]
 800942a:	2302      	movs	r3, #2
 800942c:	9201      	str	r2, [sp, #4]
 800942e:	680a      	ldr	r2, [r1, #0]
 8009430:	425b      	negs	r3, r3
 8009432:	9003      	str	r0, [sp, #12]
 8009434:	9106      	str	r1, [sp, #24]
 8009436:	1c96      	adds	r6, r2, #2
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	199a      	adds	r2, r3, r6
 800943c:	9600      	str	r6, [sp, #0]
 800943e:	9205      	str	r2, [sp, #20]
 8009440:	9a00      	ldr	r2, [sp, #0]
 8009442:	3601      	adds	r6, #1
 8009444:	7810      	ldrb	r0, [r2, #0]
 8009446:	2830      	cmp	r0, #48	; 0x30
 8009448:	d0f7      	beq.n	800943a <__gethex+0x16>
 800944a:	f7ff ffd6 	bl	80093fa <__hexdig_fun>
 800944e:	2300      	movs	r3, #0
 8009450:	001d      	movs	r5, r3
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	4298      	cmp	r0, r3
 8009456:	d11d      	bne.n	8009494 <__gethex+0x70>
 8009458:	2201      	movs	r2, #1
 800945a:	49a6      	ldr	r1, [pc, #664]	; (80096f4 <__gethex+0x2d0>)
 800945c:	9800      	ldr	r0, [sp, #0]
 800945e:	f7fe ffa3 	bl	80083a8 <strncmp>
 8009462:	0007      	movs	r7, r0
 8009464:	42a8      	cmp	r0, r5
 8009466:	d169      	bne.n	800953c <__gethex+0x118>
 8009468:	9b00      	ldr	r3, [sp, #0]
 800946a:	0034      	movs	r4, r6
 800946c:	7858      	ldrb	r0, [r3, #1]
 800946e:	f7ff ffc4 	bl	80093fa <__hexdig_fun>
 8009472:	2301      	movs	r3, #1
 8009474:	9302      	str	r3, [sp, #8]
 8009476:	42a8      	cmp	r0, r5
 8009478:	d02f      	beq.n	80094da <__gethex+0xb6>
 800947a:	9600      	str	r6, [sp, #0]
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	7818      	ldrb	r0, [r3, #0]
 8009480:	2830      	cmp	r0, #48	; 0x30
 8009482:	d009      	beq.n	8009498 <__gethex+0x74>
 8009484:	f7ff ffb9 	bl	80093fa <__hexdig_fun>
 8009488:	4242      	negs	r2, r0
 800948a:	4142      	adcs	r2, r0
 800948c:	2301      	movs	r3, #1
 800948e:	0035      	movs	r5, r6
 8009490:	9202      	str	r2, [sp, #8]
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	9c00      	ldr	r4, [sp, #0]
 8009496:	e004      	b.n	80094a2 <__gethex+0x7e>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	e7ed      	b.n	800947c <__gethex+0x58>
 80094a0:	3401      	adds	r4, #1
 80094a2:	7820      	ldrb	r0, [r4, #0]
 80094a4:	f7ff ffa9 	bl	80093fa <__hexdig_fun>
 80094a8:	1e07      	subs	r7, r0, #0
 80094aa:	d1f9      	bne.n	80094a0 <__gethex+0x7c>
 80094ac:	2201      	movs	r2, #1
 80094ae:	0020      	movs	r0, r4
 80094b0:	4990      	ldr	r1, [pc, #576]	; (80096f4 <__gethex+0x2d0>)
 80094b2:	f7fe ff79 	bl	80083a8 <strncmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d10d      	bne.n	80094d6 <__gethex+0xb2>
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	d106      	bne.n	80094cc <__gethex+0xa8>
 80094be:	3401      	adds	r4, #1
 80094c0:	0025      	movs	r5, r4
 80094c2:	7820      	ldrb	r0, [r4, #0]
 80094c4:	f7ff ff99 	bl	80093fa <__hexdig_fun>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d102      	bne.n	80094d2 <__gethex+0xae>
 80094cc:	1b2d      	subs	r5, r5, r4
 80094ce:	00af      	lsls	r7, r5, #2
 80094d0:	e003      	b.n	80094da <__gethex+0xb6>
 80094d2:	3401      	adds	r4, #1
 80094d4:	e7f5      	b.n	80094c2 <__gethex+0x9e>
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	d1f8      	bne.n	80094cc <__gethex+0xa8>
 80094da:	2220      	movs	r2, #32
 80094dc:	7823      	ldrb	r3, [r4, #0]
 80094de:	0026      	movs	r6, r4
 80094e0:	4393      	bics	r3, r2
 80094e2:	2b50      	cmp	r3, #80	; 0x50
 80094e4:	d11d      	bne.n	8009522 <__gethex+0xfe>
 80094e6:	7863      	ldrb	r3, [r4, #1]
 80094e8:	2b2b      	cmp	r3, #43	; 0x2b
 80094ea:	d02c      	beq.n	8009546 <__gethex+0x122>
 80094ec:	2b2d      	cmp	r3, #45	; 0x2d
 80094ee:	d02e      	beq.n	800954e <__gethex+0x12a>
 80094f0:	2300      	movs	r3, #0
 80094f2:	1c66      	adds	r6, r4, #1
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	7830      	ldrb	r0, [r6, #0]
 80094f8:	f7ff ff7f 	bl	80093fa <__hexdig_fun>
 80094fc:	1e43      	subs	r3, r0, #1
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b18      	cmp	r3, #24
 8009502:	d82b      	bhi.n	800955c <__gethex+0x138>
 8009504:	3810      	subs	r0, #16
 8009506:	0005      	movs	r5, r0
 8009508:	7870      	ldrb	r0, [r6, #1]
 800950a:	f7ff ff76 	bl	80093fa <__hexdig_fun>
 800950e:	1e43      	subs	r3, r0, #1
 8009510:	b2db      	uxtb	r3, r3
 8009512:	3601      	adds	r6, #1
 8009514:	2b18      	cmp	r3, #24
 8009516:	d91c      	bls.n	8009552 <__gethex+0x12e>
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d000      	beq.n	8009520 <__gethex+0xfc>
 800951e:	426d      	negs	r5, r5
 8009520:	197f      	adds	r7, r7, r5
 8009522:	9b06      	ldr	r3, [sp, #24]
 8009524:	601e      	str	r6, [r3, #0]
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d019      	beq.n	8009560 <__gethex+0x13c>
 800952c:	2600      	movs	r6, #0
 800952e:	9b05      	ldr	r3, [sp, #20]
 8009530:	42b3      	cmp	r3, r6
 8009532:	d100      	bne.n	8009536 <__gethex+0x112>
 8009534:	3606      	adds	r6, #6
 8009536:	0030      	movs	r0, r6
 8009538:	b009      	add	sp, #36	; 0x24
 800953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800953c:	2301      	movs	r3, #1
 800953e:	2700      	movs	r7, #0
 8009540:	9c00      	ldr	r4, [sp, #0]
 8009542:	9302      	str	r3, [sp, #8]
 8009544:	e7c9      	b.n	80094da <__gethex+0xb6>
 8009546:	2300      	movs	r3, #0
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	1ca6      	adds	r6, r4, #2
 800954c:	e7d3      	b.n	80094f6 <__gethex+0xd2>
 800954e:	2301      	movs	r3, #1
 8009550:	e7fa      	b.n	8009548 <__gethex+0x124>
 8009552:	230a      	movs	r3, #10
 8009554:	435d      	muls	r5, r3
 8009556:	182d      	adds	r5, r5, r0
 8009558:	3d10      	subs	r5, #16
 800955a:	e7d5      	b.n	8009508 <__gethex+0xe4>
 800955c:	0026      	movs	r6, r4
 800955e:	e7e0      	b.n	8009522 <__gethex+0xfe>
 8009560:	9b00      	ldr	r3, [sp, #0]
 8009562:	9902      	ldr	r1, [sp, #8]
 8009564:	1ae3      	subs	r3, r4, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	2b07      	cmp	r3, #7
 800956a:	dc0a      	bgt.n	8009582 <__gethex+0x15e>
 800956c:	9803      	ldr	r0, [sp, #12]
 800956e:	f000 fa5d 	bl	8009a2c <_Balloc>
 8009572:	1e05      	subs	r5, r0, #0
 8009574:	d108      	bne.n	8009588 <__gethex+0x164>
 8009576:	002a      	movs	r2, r5
 8009578:	21e4      	movs	r1, #228	; 0xe4
 800957a:	4b5f      	ldr	r3, [pc, #380]	; (80096f8 <__gethex+0x2d4>)
 800957c:	485f      	ldr	r0, [pc, #380]	; (80096fc <__gethex+0x2d8>)
 800957e:	f001 fceb 	bl	800af58 <__assert_func>
 8009582:	3101      	adds	r1, #1
 8009584:	105b      	asrs	r3, r3, #1
 8009586:	e7ef      	b.n	8009568 <__gethex+0x144>
 8009588:	0003      	movs	r3, r0
 800958a:	3314      	adds	r3, #20
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	2300      	movs	r3, #0
 8009592:	001e      	movs	r6, r3
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	42a3      	cmp	r3, r4
 800959a:	d33f      	bcc.n	800961c <__gethex+0x1f8>
 800959c:	9c05      	ldr	r4, [sp, #20]
 800959e:	9b02      	ldr	r3, [sp, #8]
 80095a0:	c440      	stmia	r4!, {r6}
 80095a2:	1ae4      	subs	r4, r4, r3
 80095a4:	10a4      	asrs	r4, r4, #2
 80095a6:	0030      	movs	r0, r6
 80095a8:	612c      	str	r4, [r5, #16]
 80095aa:	f000 fb37 	bl	8009c1c <__hi0bits>
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	0164      	lsls	r4, r4, #5
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	1a26      	subs	r6, r4, r0
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	429e      	cmp	r6, r3
 80095ba:	dd51      	ble.n	8009660 <__gethex+0x23c>
 80095bc:	1af6      	subs	r6, r6, r3
 80095be:	0031      	movs	r1, r6
 80095c0:	0028      	movs	r0, r5
 80095c2:	f000 fecb 	bl	800a35c <__any_on>
 80095c6:	1e04      	subs	r4, r0, #0
 80095c8:	d016      	beq.n	80095f8 <__gethex+0x1d4>
 80095ca:	2401      	movs	r4, #1
 80095cc:	231f      	movs	r3, #31
 80095ce:	0020      	movs	r0, r4
 80095d0:	1e72      	subs	r2, r6, #1
 80095d2:	4013      	ands	r3, r2
 80095d4:	4098      	lsls	r0, r3
 80095d6:	0003      	movs	r3, r0
 80095d8:	1151      	asrs	r1, r2, #5
 80095da:	9802      	ldr	r0, [sp, #8]
 80095dc:	0089      	lsls	r1, r1, #2
 80095de:	5809      	ldr	r1, [r1, r0]
 80095e0:	4219      	tst	r1, r3
 80095e2:	d009      	beq.n	80095f8 <__gethex+0x1d4>
 80095e4:	42a2      	cmp	r2, r4
 80095e6:	dd06      	ble.n	80095f6 <__gethex+0x1d2>
 80095e8:	0028      	movs	r0, r5
 80095ea:	1eb1      	subs	r1, r6, #2
 80095ec:	f000 feb6 	bl	800a35c <__any_on>
 80095f0:	3402      	adds	r4, #2
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d100      	bne.n	80095f8 <__gethex+0x1d4>
 80095f6:	2402      	movs	r4, #2
 80095f8:	0031      	movs	r1, r6
 80095fa:	0028      	movs	r0, r5
 80095fc:	f7ff fea8 	bl	8009350 <rshift>
 8009600:	19bf      	adds	r7, r7, r6
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	42bb      	cmp	r3, r7
 8009608:	da3a      	bge.n	8009680 <__gethex+0x25c>
 800960a:	0029      	movs	r1, r5
 800960c:	9803      	ldr	r0, [sp, #12]
 800960e:	f000 fa51 	bl	8009ab4 <_Bfree>
 8009612:	2300      	movs	r3, #0
 8009614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009616:	26a3      	movs	r6, #163	; 0xa3
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	e78c      	b.n	8009536 <__gethex+0x112>
 800961c:	3c01      	subs	r4, #1
 800961e:	7823      	ldrb	r3, [r4, #0]
 8009620:	2b2e      	cmp	r3, #46	; 0x2e
 8009622:	d012      	beq.n	800964a <__gethex+0x226>
 8009624:	9b04      	ldr	r3, [sp, #16]
 8009626:	2b20      	cmp	r3, #32
 8009628:	d104      	bne.n	8009634 <__gethex+0x210>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	c340      	stmia	r3!, {r6}
 800962e:	2600      	movs	r6, #0
 8009630:	9305      	str	r3, [sp, #20]
 8009632:	9604      	str	r6, [sp, #16]
 8009634:	7820      	ldrb	r0, [r4, #0]
 8009636:	f7ff fee0 	bl	80093fa <__hexdig_fun>
 800963a:	230f      	movs	r3, #15
 800963c:	4018      	ands	r0, r3
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	4098      	lsls	r0, r3
 8009642:	3304      	adds	r3, #4
 8009644:	4306      	orrs	r6, r0
 8009646:	9304      	str	r3, [sp, #16]
 8009648:	e7a5      	b.n	8009596 <__gethex+0x172>
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	42a3      	cmp	r3, r4
 800964e:	d8e9      	bhi.n	8009624 <__gethex+0x200>
 8009650:	2201      	movs	r2, #1
 8009652:	0020      	movs	r0, r4
 8009654:	4927      	ldr	r1, [pc, #156]	; (80096f4 <__gethex+0x2d0>)
 8009656:	f7fe fea7 	bl	80083a8 <strncmp>
 800965a:	2800      	cmp	r0, #0
 800965c:	d1e2      	bne.n	8009624 <__gethex+0x200>
 800965e:	e79a      	b.n	8009596 <__gethex+0x172>
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	2400      	movs	r4, #0
 8009664:	429e      	cmp	r6, r3
 8009666:	dacc      	bge.n	8009602 <__gethex+0x1de>
 8009668:	1b9e      	subs	r6, r3, r6
 800966a:	0029      	movs	r1, r5
 800966c:	0032      	movs	r2, r6
 800966e:	9803      	ldr	r0, [sp, #12]
 8009670:	f000 fc40 	bl	8009ef4 <__lshift>
 8009674:	0003      	movs	r3, r0
 8009676:	3314      	adds	r3, #20
 8009678:	0005      	movs	r5, r0
 800967a:	1bbf      	subs	r7, r7, r6
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	e7c0      	b.n	8009602 <__gethex+0x1de>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	685e      	ldr	r6, [r3, #4]
 8009684:	42be      	cmp	r6, r7
 8009686:	dd70      	ble.n	800976a <__gethex+0x346>
 8009688:	9b00      	ldr	r3, [sp, #0]
 800968a:	1bf6      	subs	r6, r6, r7
 800968c:	42b3      	cmp	r3, r6
 800968e:	dc37      	bgt.n	8009700 <__gethex+0x2dc>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d024      	beq.n	80096e2 <__gethex+0x2be>
 8009698:	2b03      	cmp	r3, #3
 800969a:	d026      	beq.n	80096ea <__gethex+0x2c6>
 800969c:	2b01      	cmp	r3, #1
 800969e:	d117      	bne.n	80096d0 <__gethex+0x2ac>
 80096a0:	9b00      	ldr	r3, [sp, #0]
 80096a2:	42b3      	cmp	r3, r6
 80096a4:	d114      	bne.n	80096d0 <__gethex+0x2ac>
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d10b      	bne.n	80096c2 <__gethex+0x29e>
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	9a07      	ldr	r2, [sp, #28]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2662      	movs	r6, #98	; 0x62
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	2301      	movs	r3, #1
 80096b6:	9a02      	ldr	r2, [sp, #8]
 80096b8:	612b      	str	r3, [r5, #16]
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096be:	601d      	str	r5, [r3, #0]
 80096c0:	e739      	b.n	8009536 <__gethex+0x112>
 80096c2:	9900      	ldr	r1, [sp, #0]
 80096c4:	0028      	movs	r0, r5
 80096c6:	3901      	subs	r1, #1
 80096c8:	f000 fe48 	bl	800a35c <__any_on>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d1ec      	bne.n	80096aa <__gethex+0x286>
 80096d0:	0029      	movs	r1, r5
 80096d2:	9803      	ldr	r0, [sp, #12]
 80096d4:	f000 f9ee 	bl	8009ab4 <_Bfree>
 80096d8:	2300      	movs	r3, #0
 80096da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096dc:	2650      	movs	r6, #80	; 0x50
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	e729      	b.n	8009536 <__gethex+0x112>
 80096e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f3      	bne.n	80096d0 <__gethex+0x2ac>
 80096e8:	e7df      	b.n	80096aa <__gethex+0x286>
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1dc      	bne.n	80096aa <__gethex+0x286>
 80096f0:	e7ee      	b.n	80096d0 <__gethex+0x2ac>
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	0800b918 	.word	0x0800b918
 80096f8:	0800bb2c 	.word	0x0800bb2c
 80096fc:	0800bb3d 	.word	0x0800bb3d
 8009700:	1e77      	subs	r7, r6, #1
 8009702:	2c00      	cmp	r4, #0
 8009704:	d12f      	bne.n	8009766 <__gethex+0x342>
 8009706:	2f00      	cmp	r7, #0
 8009708:	d004      	beq.n	8009714 <__gethex+0x2f0>
 800970a:	0039      	movs	r1, r7
 800970c:	0028      	movs	r0, r5
 800970e:	f000 fe25 	bl	800a35c <__any_on>
 8009712:	0004      	movs	r4, r0
 8009714:	231f      	movs	r3, #31
 8009716:	117a      	asrs	r2, r7, #5
 8009718:	401f      	ands	r7, r3
 800971a:	3b1e      	subs	r3, #30
 800971c:	40bb      	lsls	r3, r7
 800971e:	9902      	ldr	r1, [sp, #8]
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	5852      	ldr	r2, [r2, r1]
 8009724:	421a      	tst	r2, r3
 8009726:	d001      	beq.n	800972c <__gethex+0x308>
 8009728:	2302      	movs	r3, #2
 800972a:	431c      	orrs	r4, r3
 800972c:	9b00      	ldr	r3, [sp, #0]
 800972e:	0031      	movs	r1, r6
 8009730:	1b9b      	subs	r3, r3, r6
 8009732:	2602      	movs	r6, #2
 8009734:	0028      	movs	r0, r5
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	f7ff fe0a 	bl	8009350 <rshift>
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	685f      	ldr	r7, [r3, #4]
 8009740:	2c00      	cmp	r4, #0
 8009742:	d041      	beq.n	80097c8 <__gethex+0x3a4>
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d010      	beq.n	800976e <__gethex+0x34a>
 800974c:	2b03      	cmp	r3, #3
 800974e:	d012      	beq.n	8009776 <__gethex+0x352>
 8009750:	2b01      	cmp	r3, #1
 8009752:	d106      	bne.n	8009762 <__gethex+0x33e>
 8009754:	07a2      	lsls	r2, r4, #30
 8009756:	d504      	bpl.n	8009762 <__gethex+0x33e>
 8009758:	9a02      	ldr	r2, [sp, #8]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	4314      	orrs	r4, r2
 800975e:	421c      	tst	r4, r3
 8009760:	d10c      	bne.n	800977c <__gethex+0x358>
 8009762:	2310      	movs	r3, #16
 8009764:	e02f      	b.n	80097c6 <__gethex+0x3a2>
 8009766:	2401      	movs	r4, #1
 8009768:	e7d4      	b.n	8009714 <__gethex+0x2f0>
 800976a:	2601      	movs	r6, #1
 800976c:	e7e8      	b.n	8009740 <__gethex+0x31c>
 800976e:	2301      	movs	r3, #1
 8009770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009772:	1a9b      	subs	r3, r3, r2
 8009774:	930f      	str	r3, [sp, #60]	; 0x3c
 8009776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0f2      	beq.n	8009762 <__gethex+0x33e>
 800977c:	692b      	ldr	r3, [r5, #16]
 800977e:	2000      	movs	r0, #0
 8009780:	9302      	str	r3, [sp, #8]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	002b      	movs	r3, r5
 8009788:	9a04      	ldr	r2, [sp, #16]
 800978a:	3314      	adds	r3, #20
 800978c:	1899      	adds	r1, r3, r2
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	1c54      	adds	r4, r2, #1
 8009792:	d01e      	beq.n	80097d2 <__gethex+0x3ae>
 8009794:	3201      	adds	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	002b      	movs	r3, r5
 800979a:	3314      	adds	r3, #20
 800979c:	2e02      	cmp	r6, #2
 800979e:	d141      	bne.n	8009824 <__gethex+0x400>
 80097a0:	9a01      	ldr	r2, [sp, #4]
 80097a2:	9900      	ldr	r1, [sp, #0]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	3a01      	subs	r2, #1
 80097a8:	428a      	cmp	r2, r1
 80097aa:	d10b      	bne.n	80097c4 <__gethex+0x3a0>
 80097ac:	221f      	movs	r2, #31
 80097ae:	9800      	ldr	r0, [sp, #0]
 80097b0:	1149      	asrs	r1, r1, #5
 80097b2:	4002      	ands	r2, r0
 80097b4:	2001      	movs	r0, #1
 80097b6:	0004      	movs	r4, r0
 80097b8:	4094      	lsls	r4, r2
 80097ba:	0089      	lsls	r1, r1, #2
 80097bc:	58cb      	ldr	r3, [r1, r3]
 80097be:	4223      	tst	r3, r4
 80097c0:	d000      	beq.n	80097c4 <__gethex+0x3a0>
 80097c2:	2601      	movs	r6, #1
 80097c4:	2320      	movs	r3, #32
 80097c6:	431e      	orrs	r6, r3
 80097c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ca:	601d      	str	r5, [r3, #0]
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	601f      	str	r7, [r3, #0]
 80097d0:	e6b1      	b.n	8009536 <__gethex+0x112>
 80097d2:	c301      	stmia	r3!, {r0}
 80097d4:	4299      	cmp	r1, r3
 80097d6:	d8da      	bhi.n	800978e <__gethex+0x36a>
 80097d8:	68ab      	ldr	r3, [r5, #8]
 80097da:	9a02      	ldr	r2, [sp, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	db18      	blt.n	8009812 <__gethex+0x3ee>
 80097e0:	6869      	ldr	r1, [r5, #4]
 80097e2:	9803      	ldr	r0, [sp, #12]
 80097e4:	3101      	adds	r1, #1
 80097e6:	f000 f921 	bl	8009a2c <_Balloc>
 80097ea:	1e04      	subs	r4, r0, #0
 80097ec:	d104      	bne.n	80097f8 <__gethex+0x3d4>
 80097ee:	0022      	movs	r2, r4
 80097f0:	2184      	movs	r1, #132	; 0x84
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <__gethex+0x440>)
 80097f4:	481c      	ldr	r0, [pc, #112]	; (8009868 <__gethex+0x444>)
 80097f6:	e6c2      	b.n	800957e <__gethex+0x15a>
 80097f8:	0029      	movs	r1, r5
 80097fa:	692a      	ldr	r2, [r5, #16]
 80097fc:	310c      	adds	r1, #12
 80097fe:	3202      	adds	r2, #2
 8009800:	0092      	lsls	r2, r2, #2
 8009802:	300c      	adds	r0, #12
 8009804:	f7fe fea8 	bl	8008558 <memcpy>
 8009808:	0029      	movs	r1, r5
 800980a:	9803      	ldr	r0, [sp, #12]
 800980c:	f000 f952 	bl	8009ab4 <_Bfree>
 8009810:	0025      	movs	r5, r4
 8009812:	692b      	ldr	r3, [r5, #16]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	612a      	str	r2, [r5, #16]
 8009818:	2201      	movs	r2, #1
 800981a:	3304      	adds	r3, #4
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	18eb      	adds	r3, r5, r3
 8009820:	605a      	str	r2, [r3, #4]
 8009822:	e7b9      	b.n	8009798 <__gethex+0x374>
 8009824:	692a      	ldr	r2, [r5, #16]
 8009826:	9902      	ldr	r1, [sp, #8]
 8009828:	428a      	cmp	r2, r1
 800982a:	dd09      	ble.n	8009840 <__gethex+0x41c>
 800982c:	2101      	movs	r1, #1
 800982e:	0028      	movs	r0, r5
 8009830:	f7ff fd8e 	bl	8009350 <rshift>
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	3701      	adds	r7, #1
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	42bb      	cmp	r3, r7
 800983c:	dac1      	bge.n	80097c2 <__gethex+0x39e>
 800983e:	e6e4      	b.n	800960a <__gethex+0x1e6>
 8009840:	221f      	movs	r2, #31
 8009842:	9c00      	ldr	r4, [sp, #0]
 8009844:	9900      	ldr	r1, [sp, #0]
 8009846:	2601      	movs	r6, #1
 8009848:	4014      	ands	r4, r2
 800984a:	4211      	tst	r1, r2
 800984c:	d0ba      	beq.n	80097c4 <__gethex+0x3a0>
 800984e:	9a04      	ldr	r2, [sp, #16]
 8009850:	189b      	adds	r3, r3, r2
 8009852:	3b04      	subs	r3, #4
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f000 f9e1 	bl	8009c1c <__hi0bits>
 800985a:	2320      	movs	r3, #32
 800985c:	1b1b      	subs	r3, r3, r4
 800985e:	4298      	cmp	r0, r3
 8009860:	dbe4      	blt.n	800982c <__gethex+0x408>
 8009862:	e7af      	b.n	80097c4 <__gethex+0x3a0>
 8009864:	0800bb2c 	.word	0x0800bb2c
 8009868:	0800bb3d 	.word	0x0800bb3d

0800986c <L_shift>:
 800986c:	2308      	movs	r3, #8
 800986e:	b570      	push	{r4, r5, r6, lr}
 8009870:	2520      	movs	r5, #32
 8009872:	1a9a      	subs	r2, r3, r2
 8009874:	0092      	lsls	r2, r2, #2
 8009876:	1aad      	subs	r5, r5, r2
 8009878:	6843      	ldr	r3, [r0, #4]
 800987a:	6804      	ldr	r4, [r0, #0]
 800987c:	001e      	movs	r6, r3
 800987e:	40ae      	lsls	r6, r5
 8009880:	40d3      	lsrs	r3, r2
 8009882:	4334      	orrs	r4, r6
 8009884:	6004      	str	r4, [r0, #0]
 8009886:	6043      	str	r3, [r0, #4]
 8009888:	3004      	adds	r0, #4
 800988a:	4288      	cmp	r0, r1
 800988c:	d3f4      	bcc.n	8009878 <L_shift+0xc>
 800988e:	bd70      	pop	{r4, r5, r6, pc}

08009890 <__match>:
 8009890:	b530      	push	{r4, r5, lr}
 8009892:	6803      	ldr	r3, [r0, #0]
 8009894:	780c      	ldrb	r4, [r1, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	2c00      	cmp	r4, #0
 800989a:	d102      	bne.n	80098a2 <__match+0x12>
 800989c:	6003      	str	r3, [r0, #0]
 800989e:	2001      	movs	r0, #1
 80098a0:	bd30      	pop	{r4, r5, pc}
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	0015      	movs	r5, r2
 80098a6:	3d41      	subs	r5, #65	; 0x41
 80098a8:	2d19      	cmp	r5, #25
 80098aa:	d800      	bhi.n	80098ae <__match+0x1e>
 80098ac:	3220      	adds	r2, #32
 80098ae:	3101      	adds	r1, #1
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d0ef      	beq.n	8009894 <__match+0x4>
 80098b4:	2000      	movs	r0, #0
 80098b6:	e7f3      	b.n	80098a0 <__match+0x10>

080098b8 <__hexnan>:
 80098b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ba:	680b      	ldr	r3, [r1, #0]
 80098bc:	b08b      	sub	sp, #44	; 0x2c
 80098be:	9201      	str	r2, [sp, #4]
 80098c0:	9901      	ldr	r1, [sp, #4]
 80098c2:	115a      	asrs	r2, r3, #5
 80098c4:	0092      	lsls	r2, r2, #2
 80098c6:	188a      	adds	r2, r1, r2
 80098c8:	9202      	str	r2, [sp, #8]
 80098ca:	0019      	movs	r1, r3
 80098cc:	221f      	movs	r2, #31
 80098ce:	4011      	ands	r1, r2
 80098d0:	9008      	str	r0, [sp, #32]
 80098d2:	9106      	str	r1, [sp, #24]
 80098d4:	4213      	tst	r3, r2
 80098d6:	d002      	beq.n	80098de <__hexnan+0x26>
 80098d8:	9b02      	ldr	r3, [sp, #8]
 80098da:	3304      	adds	r3, #4
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	2500      	movs	r5, #0
 80098e2:	1f1f      	subs	r7, r3, #4
 80098e4:	003e      	movs	r6, r7
 80098e6:	003c      	movs	r4, r7
 80098e8:	9b08      	ldr	r3, [sp, #32]
 80098ea:	603d      	str	r5, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9507      	str	r5, [sp, #28]
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	9503      	str	r5, [sp, #12]
 80098f4:	9b05      	ldr	r3, [sp, #20]
 80098f6:	3301      	adds	r3, #1
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	9b05      	ldr	r3, [sp, #20]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	9304      	str	r3, [sp, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d028      	beq.n	8009956 <__hexnan+0x9e>
 8009904:	9804      	ldr	r0, [sp, #16]
 8009906:	f7ff fd78 	bl	80093fa <__hexdig_fun>
 800990a:	2800      	cmp	r0, #0
 800990c:	d154      	bne.n	80099b8 <__hexnan+0x100>
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	2b20      	cmp	r3, #32
 8009912:	d819      	bhi.n	8009948 <__hexnan+0x90>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	9a07      	ldr	r2, [sp, #28]
 8009918:	4293      	cmp	r3, r2
 800991a:	dd12      	ble.n	8009942 <__hexnan+0x8a>
 800991c:	42b4      	cmp	r4, r6
 800991e:	d206      	bcs.n	800992e <__hexnan+0x76>
 8009920:	2d07      	cmp	r5, #7
 8009922:	dc04      	bgt.n	800992e <__hexnan+0x76>
 8009924:	002a      	movs	r2, r5
 8009926:	0031      	movs	r1, r6
 8009928:	0020      	movs	r0, r4
 800992a:	f7ff ff9f 	bl	800986c <L_shift>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	2508      	movs	r5, #8
 8009932:	429c      	cmp	r4, r3
 8009934:	d905      	bls.n	8009942 <__hexnan+0x8a>
 8009936:	1f26      	subs	r6, r4, #4
 8009938:	2500      	movs	r5, #0
 800993a:	0034      	movs	r4, r6
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	6035      	str	r5, [r6, #0]
 8009940:	9307      	str	r3, [sp, #28]
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	9305      	str	r3, [sp, #20]
 8009946:	e7d5      	b.n	80098f4 <__hexnan+0x3c>
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	2b29      	cmp	r3, #41	; 0x29
 800994c:	d159      	bne.n	8009a02 <__hexnan+0x14a>
 800994e:	9b05      	ldr	r3, [sp, #20]
 8009950:	9a08      	ldr	r2, [sp, #32]
 8009952:	3302      	adds	r3, #2
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d052      	beq.n	8009a02 <__hexnan+0x14a>
 800995c:	42b4      	cmp	r4, r6
 800995e:	d206      	bcs.n	800996e <__hexnan+0xb6>
 8009960:	2d07      	cmp	r5, #7
 8009962:	dc04      	bgt.n	800996e <__hexnan+0xb6>
 8009964:	002a      	movs	r2, r5
 8009966:	0031      	movs	r1, r6
 8009968:	0020      	movs	r0, r4
 800996a:	f7ff ff7f 	bl	800986c <L_shift>
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	429c      	cmp	r4, r3
 8009972:	d935      	bls.n	80099e0 <__hexnan+0x128>
 8009974:	001a      	movs	r2, r3
 8009976:	0023      	movs	r3, r4
 8009978:	cb02      	ldmia	r3!, {r1}
 800997a:	c202      	stmia	r2!, {r1}
 800997c:	429f      	cmp	r7, r3
 800997e:	d2fb      	bcs.n	8009978 <__hexnan+0xc0>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	1c62      	adds	r2, r4, #1
 8009984:	1ed9      	subs	r1, r3, #3
 8009986:	2304      	movs	r3, #4
 8009988:	4291      	cmp	r1, r2
 800998a:	d305      	bcc.n	8009998 <__hexnan+0xe0>
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	3b04      	subs	r3, #4
 8009990:	1b1b      	subs	r3, r3, r4
 8009992:	089b      	lsrs	r3, r3, #2
 8009994:	3301      	adds	r3, #1
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	9a01      	ldr	r2, [sp, #4]
 800999a:	18d3      	adds	r3, r2, r3
 800999c:	2200      	movs	r2, #0
 800999e:	c304      	stmia	r3!, {r2}
 80099a0:	429f      	cmp	r7, r3
 80099a2:	d2fc      	bcs.n	800999e <__hexnan+0xe6>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d104      	bne.n	80099b4 <__hexnan+0xfc>
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	429f      	cmp	r7, r3
 80099ae:	d126      	bne.n	80099fe <__hexnan+0x146>
 80099b0:	2301      	movs	r3, #1
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	2005      	movs	r0, #5
 80099b6:	e025      	b.n	8009a04 <__hexnan+0x14c>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	3501      	adds	r5, #1
 80099bc:	3301      	adds	r3, #1
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	2d08      	cmp	r5, #8
 80099c2:	dd06      	ble.n	80099d2 <__hexnan+0x11a>
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	429c      	cmp	r4, r3
 80099c8:	d9bb      	bls.n	8009942 <__hexnan+0x8a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2501      	movs	r5, #1
 80099ce:	3c04      	subs	r4, #4
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	220f      	movs	r2, #15
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	4010      	ands	r0, r2
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	4303      	orrs	r3, r0
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	e7b0      	b.n	8009942 <__hexnan+0x8a>
 80099e0:	9b06      	ldr	r3, [sp, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0de      	beq.n	80099a4 <__hexnan+0xec>
 80099e6:	2320      	movs	r3, #32
 80099e8:	9a06      	ldr	r2, [sp, #24]
 80099ea:	9902      	ldr	r1, [sp, #8]
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	2201      	movs	r2, #1
 80099f0:	4252      	negs	r2, r2
 80099f2:	40da      	lsrs	r2, r3
 80099f4:	3904      	subs	r1, #4
 80099f6:	680b      	ldr	r3, [r1, #0]
 80099f8:	4013      	ands	r3, r2
 80099fa:	600b      	str	r3, [r1, #0]
 80099fc:	e7d2      	b.n	80099a4 <__hexnan+0xec>
 80099fe:	3f04      	subs	r7, #4
 8009a00:	e7d0      	b.n	80099a4 <__hexnan+0xec>
 8009a02:	2004      	movs	r0, #4
 8009a04:	b00b      	add	sp, #44	; 0x2c
 8009a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a08 <__ascii_mbtowc>:
 8009a08:	b082      	sub	sp, #8
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d100      	bne.n	8009a10 <__ascii_mbtowc+0x8>
 8009a0e:	a901      	add	r1, sp, #4
 8009a10:	1e10      	subs	r0, r2, #0
 8009a12:	d006      	beq.n	8009a22 <__ascii_mbtowc+0x1a>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d006      	beq.n	8009a26 <__ascii_mbtowc+0x1e>
 8009a18:	7813      	ldrb	r3, [r2, #0]
 8009a1a:	600b      	str	r3, [r1, #0]
 8009a1c:	7810      	ldrb	r0, [r2, #0]
 8009a1e:	1e43      	subs	r3, r0, #1
 8009a20:	4198      	sbcs	r0, r3
 8009a22:	b002      	add	sp, #8
 8009a24:	4770      	bx	lr
 8009a26:	2002      	movs	r0, #2
 8009a28:	4240      	negs	r0, r0
 8009a2a:	e7fa      	b.n	8009a22 <__ascii_mbtowc+0x1a>

08009a2c <_Balloc>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	69c5      	ldr	r5, [r0, #28]
 8009a30:	0006      	movs	r6, r0
 8009a32:	000c      	movs	r4, r1
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d10e      	bne.n	8009a56 <_Balloc+0x2a>
 8009a38:	2010      	movs	r0, #16
 8009a3a:	f7fc fd03 	bl	8006444 <malloc>
 8009a3e:	1e02      	subs	r2, r0, #0
 8009a40:	61f0      	str	r0, [r6, #28]
 8009a42:	d104      	bne.n	8009a4e <_Balloc+0x22>
 8009a44:	216b      	movs	r1, #107	; 0x6b
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <_Balloc+0x80>)
 8009a48:	4819      	ldr	r0, [pc, #100]	; (8009ab0 <_Balloc+0x84>)
 8009a4a:	f001 fa85 	bl	800af58 <__assert_func>
 8009a4e:	6045      	str	r5, [r0, #4]
 8009a50:	6085      	str	r5, [r0, #8]
 8009a52:	6005      	str	r5, [r0, #0]
 8009a54:	60c5      	str	r5, [r0, #12]
 8009a56:	69f5      	ldr	r5, [r6, #28]
 8009a58:	68eb      	ldr	r3, [r5, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d013      	beq.n	8009a86 <_Balloc+0x5a>
 8009a5e:	69f3      	ldr	r3, [r6, #28]
 8009a60:	00a2      	lsls	r2, r4, #2
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	189b      	adds	r3, r3, r2
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d118      	bne.n	8009a9e <_Balloc+0x72>
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	000d      	movs	r5, r1
 8009a70:	40a5      	lsls	r5, r4
 8009a72:	1d6a      	adds	r2, r5, #5
 8009a74:	0030      	movs	r0, r6
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	f001 fa8c 	bl	800af94 <_calloc_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d00c      	beq.n	8009a9a <_Balloc+0x6e>
 8009a80:	6044      	str	r4, [r0, #4]
 8009a82:	6085      	str	r5, [r0, #8]
 8009a84:	e00d      	b.n	8009aa2 <_Balloc+0x76>
 8009a86:	2221      	movs	r2, #33	; 0x21
 8009a88:	2104      	movs	r1, #4
 8009a8a:	0030      	movs	r0, r6
 8009a8c:	f001 fa82 	bl	800af94 <_calloc_r>
 8009a90:	69f3      	ldr	r3, [r6, #28]
 8009a92:	60e8      	str	r0, [r5, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e1      	bne.n	8009a5e <_Balloc+0x32>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	6802      	ldr	r2, [r0, #0]
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6103      	str	r3, [r0, #16]
 8009aa6:	60c3      	str	r3, [r0, #12]
 8009aa8:	e7f8      	b.n	8009a9c <_Balloc+0x70>
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	0800babd 	.word	0x0800babd
 8009ab0:	0800bb9d 	.word	0x0800bb9d

08009ab4 <_Bfree>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	69c6      	ldr	r6, [r0, #28]
 8009ab8:	0005      	movs	r5, r0
 8009aba:	000c      	movs	r4, r1
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	d10e      	bne.n	8009ade <_Bfree+0x2a>
 8009ac0:	2010      	movs	r0, #16
 8009ac2:	f7fc fcbf 	bl	8006444 <malloc>
 8009ac6:	1e02      	subs	r2, r0, #0
 8009ac8:	61e8      	str	r0, [r5, #28]
 8009aca:	d104      	bne.n	8009ad6 <_Bfree+0x22>
 8009acc:	218f      	movs	r1, #143	; 0x8f
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <_Bfree+0x40>)
 8009ad0:	4809      	ldr	r0, [pc, #36]	; (8009af8 <_Bfree+0x44>)
 8009ad2:	f001 fa41 	bl	800af58 <__assert_func>
 8009ad6:	6046      	str	r6, [r0, #4]
 8009ad8:	6086      	str	r6, [r0, #8]
 8009ada:	6006      	str	r6, [r0, #0]
 8009adc:	60c6      	str	r6, [r0, #12]
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	d007      	beq.n	8009af2 <_Bfree+0x3e>
 8009ae2:	69eb      	ldr	r3, [r5, #28]
 8009ae4:	6862      	ldr	r2, [r4, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	189b      	adds	r3, r3, r2
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	601c      	str	r4, [r3, #0]
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	0800babd 	.word	0x0800babd
 8009af8:	0800bb9d 	.word	0x0800bb9d

08009afc <__multadd>:
 8009afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009afe:	000e      	movs	r6, r1
 8009b00:	9001      	str	r0, [sp, #4]
 8009b02:	000c      	movs	r4, r1
 8009b04:	001d      	movs	r5, r3
 8009b06:	2000      	movs	r0, #0
 8009b08:	690f      	ldr	r7, [r1, #16]
 8009b0a:	3614      	adds	r6, #20
 8009b0c:	6833      	ldr	r3, [r6, #0]
 8009b0e:	3001      	adds	r0, #1
 8009b10:	b299      	uxth	r1, r3
 8009b12:	4351      	muls	r1, r2
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	4353      	muls	r3, r2
 8009b18:	1949      	adds	r1, r1, r5
 8009b1a:	0c0d      	lsrs	r5, r1, #16
 8009b1c:	195b      	adds	r3, r3, r5
 8009b1e:	0c1d      	lsrs	r5, r3, #16
 8009b20:	b289      	uxth	r1, r1
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	185b      	adds	r3, r3, r1
 8009b26:	c608      	stmia	r6!, {r3}
 8009b28:	4287      	cmp	r7, r0
 8009b2a:	dcef      	bgt.n	8009b0c <__multadd+0x10>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d022      	beq.n	8009b76 <__multadd+0x7a>
 8009b30:	68a3      	ldr	r3, [r4, #8]
 8009b32:	42bb      	cmp	r3, r7
 8009b34:	dc19      	bgt.n	8009b6a <__multadd+0x6e>
 8009b36:	6861      	ldr	r1, [r4, #4]
 8009b38:	9801      	ldr	r0, [sp, #4]
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	f7ff ff76 	bl	8009a2c <_Balloc>
 8009b40:	1e06      	subs	r6, r0, #0
 8009b42:	d105      	bne.n	8009b50 <__multadd+0x54>
 8009b44:	0032      	movs	r2, r6
 8009b46:	21ba      	movs	r1, #186	; 0xba
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <__multadd+0x80>)
 8009b4a:	480d      	ldr	r0, [pc, #52]	; (8009b80 <__multadd+0x84>)
 8009b4c:	f001 fa04 	bl	800af58 <__assert_func>
 8009b50:	0021      	movs	r1, r4
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	310c      	adds	r1, #12
 8009b56:	3202      	adds	r2, #2
 8009b58:	0092      	lsls	r2, r2, #2
 8009b5a:	300c      	adds	r0, #12
 8009b5c:	f7fe fcfc 	bl	8008558 <memcpy>
 8009b60:	0021      	movs	r1, r4
 8009b62:	9801      	ldr	r0, [sp, #4]
 8009b64:	f7ff ffa6 	bl	8009ab4 <_Bfree>
 8009b68:	0034      	movs	r4, r6
 8009b6a:	1d3b      	adds	r3, r7, #4
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	18e3      	adds	r3, r4, r3
 8009b70:	605d      	str	r5, [r3, #4]
 8009b72:	1c7b      	adds	r3, r7, #1
 8009b74:	6123      	str	r3, [r4, #16]
 8009b76:	0020      	movs	r0, r4
 8009b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	0800bb2c 	.word	0x0800bb2c
 8009b80:	0800bb9d 	.word	0x0800bb9d

08009b84 <__s2b>:
 8009b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b86:	0006      	movs	r6, r0
 8009b88:	0018      	movs	r0, r3
 8009b8a:	000c      	movs	r4, r1
 8009b8c:	3008      	adds	r0, #8
 8009b8e:	2109      	movs	r1, #9
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	0015      	movs	r5, r2
 8009b94:	f7f6 fb5c 	bl	8000250 <__divsi3>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	db0a      	blt.n	8009bb6 <__s2b+0x32>
 8009ba0:	0030      	movs	r0, r6
 8009ba2:	f7ff ff43 	bl	8009a2c <_Balloc>
 8009ba6:	1e01      	subs	r1, r0, #0
 8009ba8:	d108      	bne.n	8009bbc <__s2b+0x38>
 8009baa:	000a      	movs	r2, r1
 8009bac:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <__s2b+0x90>)
 8009bae:	481a      	ldr	r0, [pc, #104]	; (8009c18 <__s2b+0x94>)
 8009bb0:	31d3      	adds	r1, #211	; 0xd3
 8009bb2:	f001 f9d1 	bl	800af58 <__assert_func>
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	3101      	adds	r1, #1
 8009bba:	e7ef      	b.n	8009b9c <__s2b+0x18>
 8009bbc:	9b08      	ldr	r3, [sp, #32]
 8009bbe:	6143      	str	r3, [r0, #20]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	6103      	str	r3, [r0, #16]
 8009bc4:	2d09      	cmp	r5, #9
 8009bc6:	dd18      	ble.n	8009bfa <__s2b+0x76>
 8009bc8:	0023      	movs	r3, r4
 8009bca:	3309      	adds	r3, #9
 8009bcc:	001f      	movs	r7, r3
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	1964      	adds	r4, r4, r5
 8009bd2:	783b      	ldrb	r3, [r7, #0]
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	0030      	movs	r0, r6
 8009bd8:	3b30      	subs	r3, #48	; 0x30
 8009bda:	f7ff ff8f 	bl	8009afc <__multadd>
 8009bde:	3701      	adds	r7, #1
 8009be0:	0001      	movs	r1, r0
 8009be2:	42a7      	cmp	r7, r4
 8009be4:	d1f5      	bne.n	8009bd2 <__s2b+0x4e>
 8009be6:	002c      	movs	r4, r5
 8009be8:	9b00      	ldr	r3, [sp, #0]
 8009bea:	3c08      	subs	r4, #8
 8009bec:	191c      	adds	r4, r3, r4
 8009bee:	002f      	movs	r7, r5
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	429f      	cmp	r7, r3
 8009bf4:	db04      	blt.n	8009c00 <__s2b+0x7c>
 8009bf6:	0008      	movs	r0, r1
 8009bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bfa:	2509      	movs	r5, #9
 8009bfc:	340a      	adds	r4, #10
 8009bfe:	e7f6      	b.n	8009bee <__s2b+0x6a>
 8009c00:	1b63      	subs	r3, r4, r5
 8009c02:	5ddb      	ldrb	r3, [r3, r7]
 8009c04:	220a      	movs	r2, #10
 8009c06:	0030      	movs	r0, r6
 8009c08:	3b30      	subs	r3, #48	; 0x30
 8009c0a:	f7ff ff77 	bl	8009afc <__multadd>
 8009c0e:	3701      	adds	r7, #1
 8009c10:	0001      	movs	r1, r0
 8009c12:	e7ed      	b.n	8009bf0 <__s2b+0x6c>
 8009c14:	0800bb2c 	.word	0x0800bb2c
 8009c18:	0800bb9d 	.word	0x0800bb9d

08009c1c <__hi0bits>:
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	0c02      	lsrs	r2, r0, #16
 8009c20:	2000      	movs	r0, #0
 8009c22:	4282      	cmp	r2, r0
 8009c24:	d101      	bne.n	8009c2a <__hi0bits+0xe>
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	3010      	adds	r0, #16
 8009c2a:	0e1a      	lsrs	r2, r3, #24
 8009c2c:	d101      	bne.n	8009c32 <__hi0bits+0x16>
 8009c2e:	3008      	adds	r0, #8
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	0f1a      	lsrs	r2, r3, #28
 8009c34:	d101      	bne.n	8009c3a <__hi0bits+0x1e>
 8009c36:	3004      	adds	r0, #4
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	0f9a      	lsrs	r2, r3, #30
 8009c3c:	d101      	bne.n	8009c42 <__hi0bits+0x26>
 8009c3e:	3002      	adds	r0, #2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db03      	blt.n	8009c4e <__hi0bits+0x32>
 8009c46:	3001      	adds	r0, #1
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	d400      	bmi.n	8009c4e <__hi0bits+0x32>
 8009c4c:	2020      	movs	r0, #32
 8009c4e:	4770      	bx	lr

08009c50 <__lo0bits>:
 8009c50:	6803      	ldr	r3, [r0, #0]
 8009c52:	0001      	movs	r1, r0
 8009c54:	2207      	movs	r2, #7
 8009c56:	0018      	movs	r0, r3
 8009c58:	4010      	ands	r0, r2
 8009c5a:	4213      	tst	r3, r2
 8009c5c:	d00d      	beq.n	8009c7a <__lo0bits+0x2a>
 8009c5e:	3a06      	subs	r2, #6
 8009c60:	2000      	movs	r0, #0
 8009c62:	4213      	tst	r3, r2
 8009c64:	d105      	bne.n	8009c72 <__lo0bits+0x22>
 8009c66:	3002      	adds	r0, #2
 8009c68:	4203      	tst	r3, r0
 8009c6a:	d003      	beq.n	8009c74 <__lo0bits+0x24>
 8009c6c:	40d3      	lsrs	r3, r2
 8009c6e:	0010      	movs	r0, r2
 8009c70:	600b      	str	r3, [r1, #0]
 8009c72:	4770      	bx	lr
 8009c74:	089b      	lsrs	r3, r3, #2
 8009c76:	600b      	str	r3, [r1, #0]
 8009c78:	e7fb      	b.n	8009c72 <__lo0bits+0x22>
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d101      	bne.n	8009c84 <__lo0bits+0x34>
 8009c80:	2010      	movs	r0, #16
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	d101      	bne.n	8009c8e <__lo0bits+0x3e>
 8009c8a:	3008      	adds	r0, #8
 8009c8c:	0a1b      	lsrs	r3, r3, #8
 8009c8e:	071a      	lsls	r2, r3, #28
 8009c90:	d101      	bne.n	8009c96 <__lo0bits+0x46>
 8009c92:	3004      	adds	r0, #4
 8009c94:	091b      	lsrs	r3, r3, #4
 8009c96:	079a      	lsls	r2, r3, #30
 8009c98:	d101      	bne.n	8009c9e <__lo0bits+0x4e>
 8009c9a:	3002      	adds	r0, #2
 8009c9c:	089b      	lsrs	r3, r3, #2
 8009c9e:	07da      	lsls	r2, r3, #31
 8009ca0:	d4e9      	bmi.n	8009c76 <__lo0bits+0x26>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	d1e6      	bne.n	8009c76 <__lo0bits+0x26>
 8009ca8:	2020      	movs	r0, #32
 8009caa:	e7e2      	b.n	8009c72 <__lo0bits+0x22>

08009cac <__i2b>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	000c      	movs	r4, r1
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	f7ff febb 	bl	8009a2c <_Balloc>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d107      	bne.n	8009cca <__i2b+0x1e>
 8009cba:	2146      	movs	r1, #70	; 0x46
 8009cbc:	4c05      	ldr	r4, [pc, #20]	; (8009cd4 <__i2b+0x28>)
 8009cbe:	0002      	movs	r2, r0
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <__i2b+0x2c>)
 8009cc2:	0020      	movs	r0, r4
 8009cc4:	31ff      	adds	r1, #255	; 0xff
 8009cc6:	f001 f947 	bl	800af58 <__assert_func>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	6144      	str	r4, [r0, #20]
 8009cce:	6103      	str	r3, [r0, #16]
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	0800bb9d 	.word	0x0800bb9d
 8009cd8:	0800bb2c 	.word	0x0800bb2c

08009cdc <__multiply>:
 8009cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cde:	0015      	movs	r5, r2
 8009ce0:	690a      	ldr	r2, [r1, #16]
 8009ce2:	692b      	ldr	r3, [r5, #16]
 8009ce4:	000c      	movs	r4, r1
 8009ce6:	b08b      	sub	sp, #44	; 0x2c
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	da01      	bge.n	8009cf0 <__multiply+0x14>
 8009cec:	002c      	movs	r4, r5
 8009cee:	000d      	movs	r5, r1
 8009cf0:	6927      	ldr	r7, [r4, #16]
 8009cf2:	692e      	ldr	r6, [r5, #16]
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	19bb      	adds	r3, r7, r6
 8009cf8:	9303      	str	r3, [sp, #12]
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	19ba      	adds	r2, r7, r6
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	da00      	bge.n	8009d04 <__multiply+0x28>
 8009d02:	3101      	adds	r1, #1
 8009d04:	f7ff fe92 	bl	8009a2c <_Balloc>
 8009d08:	9002      	str	r0, [sp, #8]
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d106      	bne.n	8009d1c <__multiply+0x40>
 8009d0e:	21b1      	movs	r1, #177	; 0xb1
 8009d10:	4b48      	ldr	r3, [pc, #288]	; (8009e34 <__multiply+0x158>)
 8009d12:	4849      	ldr	r0, [pc, #292]	; (8009e38 <__multiply+0x15c>)
 8009d14:	9a02      	ldr	r2, [sp, #8]
 8009d16:	0049      	lsls	r1, r1, #1
 8009d18:	f001 f91e 	bl	800af58 <__assert_func>
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	3314      	adds	r3, #20
 8009d22:	469c      	mov	ip, r3
 8009d24:	19bb      	adds	r3, r7, r6
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4463      	add	r3, ip
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	4663      	mov	r3, ip
 8009d2e:	9904      	ldr	r1, [sp, #16]
 8009d30:	428b      	cmp	r3, r1
 8009d32:	d32a      	bcc.n	8009d8a <__multiply+0xae>
 8009d34:	0023      	movs	r3, r4
 8009d36:	00bf      	lsls	r7, r7, #2
 8009d38:	3314      	adds	r3, #20
 8009d3a:	3514      	adds	r5, #20
 8009d3c:	9308      	str	r3, [sp, #32]
 8009d3e:	00b6      	lsls	r6, r6, #2
 8009d40:	19db      	adds	r3, r3, r7
 8009d42:	9305      	str	r3, [sp, #20]
 8009d44:	19ab      	adds	r3, r5, r6
 8009d46:	9309      	str	r3, [sp, #36]	; 0x24
 8009d48:	2304      	movs	r3, #4
 8009d4a:	9306      	str	r3, [sp, #24]
 8009d4c:	0023      	movs	r3, r4
 8009d4e:	9a05      	ldr	r2, [sp, #20]
 8009d50:	3315      	adds	r3, #21
 8009d52:	9501      	str	r5, [sp, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d305      	bcc.n	8009d64 <__multiply+0x88>
 8009d58:	1b13      	subs	r3, r2, r4
 8009d5a:	3b15      	subs	r3, #21
 8009d5c:	089b      	lsrs	r3, r3, #2
 8009d5e:	3301      	adds	r3, #1
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	9306      	str	r3, [sp, #24]
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d310      	bcc.n	8009d8e <__multiply+0xb2>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dd05      	ble.n	8009d7e <__multiply+0xa2>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	3b04      	subs	r3, #4
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d056      	beq.n	8009e2c <__multiply+0x150>
 8009d7e:	9b02      	ldr	r3, [sp, #8]
 8009d80:	9a03      	ldr	r2, [sp, #12]
 8009d82:	0018      	movs	r0, r3
 8009d84:	611a      	str	r2, [r3, #16]
 8009d86:	b00b      	add	sp, #44	; 0x2c
 8009d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8a:	c304      	stmia	r3!, {r2}
 8009d8c:	e7cf      	b.n	8009d2e <__multiply+0x52>
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	b280      	uxth	r0, r0
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d01e      	beq.n	8009dd6 <__multiply+0xfa>
 8009d98:	4667      	mov	r7, ip
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	9e08      	ldr	r6, [sp, #32]
 8009d9e:	ce02      	ldmia	r6!, {r1}
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	b28b      	uxth	r3, r1
 8009da6:	4343      	muls	r3, r0
 8009da8:	001a      	movs	r2, r3
 8009daa:	466b      	mov	r3, sp
 8009dac:	8b9b      	ldrh	r3, [r3, #28]
 8009dae:	18d3      	adds	r3, r2, r3
 8009db0:	195b      	adds	r3, r3, r5
 8009db2:	0c0d      	lsrs	r5, r1, #16
 8009db4:	4345      	muls	r5, r0
 8009db6:	9a07      	ldr	r2, [sp, #28]
 8009db8:	0c11      	lsrs	r1, r2, #16
 8009dba:	1869      	adds	r1, r5, r1
 8009dbc:	0c1a      	lsrs	r2, r3, #16
 8009dbe:	188a      	adds	r2, r1, r2
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	0c15      	lsrs	r5, r2, #16
 8009dc4:	0412      	lsls	r2, r2, #16
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	c704      	stmia	r7!, {r2}
 8009dcc:	42b3      	cmp	r3, r6
 8009dce:	d8e6      	bhi.n	8009d9e <__multiply+0xc2>
 8009dd0:	4663      	mov	r3, ip
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	509d      	str	r5, [r3, r2]
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	0c00      	lsrs	r0, r0, #16
 8009ddc:	d020      	beq.n	8009e20 <__multiply+0x144>
 8009dde:	4663      	mov	r3, ip
 8009de0:	0025      	movs	r5, r4
 8009de2:	4661      	mov	r1, ip
 8009de4:	2700      	movs	r7, #0
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3514      	adds	r5, #20
 8009dea:	682a      	ldr	r2, [r5, #0]
 8009dec:	680e      	ldr	r6, [r1, #0]
 8009dee:	b292      	uxth	r2, r2
 8009df0:	4342      	muls	r2, r0
 8009df2:	0c36      	lsrs	r6, r6, #16
 8009df4:	1992      	adds	r2, r2, r6
 8009df6:	19d2      	adds	r2, r2, r7
 8009df8:	0416      	lsls	r6, r2, #16
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	431e      	orrs	r6, r3
 8009dfe:	600e      	str	r6, [r1, #0]
 8009e00:	cd40      	ldmia	r5!, {r6}
 8009e02:	684b      	ldr	r3, [r1, #4]
 8009e04:	0c36      	lsrs	r6, r6, #16
 8009e06:	4346      	muls	r6, r0
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	0c12      	lsrs	r2, r2, #16
 8009e0c:	18f3      	adds	r3, r6, r3
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	9a05      	ldr	r2, [sp, #20]
 8009e12:	0c1f      	lsrs	r7, r3, #16
 8009e14:	3104      	adds	r1, #4
 8009e16:	42aa      	cmp	r2, r5
 8009e18:	d8e7      	bhi.n	8009dea <__multiply+0x10e>
 8009e1a:	4662      	mov	r2, ip
 8009e1c:	9906      	ldr	r1, [sp, #24]
 8009e1e:	5053      	str	r3, [r2, r1]
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	3304      	adds	r3, #4
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	2304      	movs	r3, #4
 8009e28:	449c      	add	ip, r3
 8009e2a:	e79b      	b.n	8009d64 <__multiply+0x88>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	9303      	str	r3, [sp, #12]
 8009e32:	e79b      	b.n	8009d6c <__multiply+0x90>
 8009e34:	0800bb2c 	.word	0x0800bb2c
 8009e38:	0800bb9d 	.word	0x0800bb9d

08009e3c <__pow5mult>:
 8009e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e3e:	2303      	movs	r3, #3
 8009e40:	0015      	movs	r5, r2
 8009e42:	0007      	movs	r7, r0
 8009e44:	000e      	movs	r6, r1
 8009e46:	401a      	ands	r2, r3
 8009e48:	421d      	tst	r5, r3
 8009e4a:	d008      	beq.n	8009e5e <__pow5mult+0x22>
 8009e4c:	4925      	ldr	r1, [pc, #148]	; (8009ee4 <__pow5mult+0xa8>)
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	0092      	lsls	r2, r2, #2
 8009e52:	5852      	ldr	r2, [r2, r1]
 8009e54:	2300      	movs	r3, #0
 8009e56:	0031      	movs	r1, r6
 8009e58:	f7ff fe50 	bl	8009afc <__multadd>
 8009e5c:	0006      	movs	r6, r0
 8009e5e:	10ad      	asrs	r5, r5, #2
 8009e60:	d03d      	beq.n	8009ede <__pow5mult+0xa2>
 8009e62:	69fc      	ldr	r4, [r7, #28]
 8009e64:	2c00      	cmp	r4, #0
 8009e66:	d10f      	bne.n	8009e88 <__pow5mult+0x4c>
 8009e68:	2010      	movs	r0, #16
 8009e6a:	f7fc faeb 	bl	8006444 <malloc>
 8009e6e:	1e02      	subs	r2, r0, #0
 8009e70:	61f8      	str	r0, [r7, #28]
 8009e72:	d105      	bne.n	8009e80 <__pow5mult+0x44>
 8009e74:	21b4      	movs	r1, #180	; 0xb4
 8009e76:	4b1c      	ldr	r3, [pc, #112]	; (8009ee8 <__pow5mult+0xac>)
 8009e78:	481c      	ldr	r0, [pc, #112]	; (8009eec <__pow5mult+0xb0>)
 8009e7a:	31ff      	adds	r1, #255	; 0xff
 8009e7c:	f001 f86c 	bl	800af58 <__assert_func>
 8009e80:	6044      	str	r4, [r0, #4]
 8009e82:	6084      	str	r4, [r0, #8]
 8009e84:	6004      	str	r4, [r0, #0]
 8009e86:	60c4      	str	r4, [r0, #12]
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	689c      	ldr	r4, [r3, #8]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	2c00      	cmp	r4, #0
 8009e90:	d108      	bne.n	8009ea4 <__pow5mult+0x68>
 8009e92:	0038      	movs	r0, r7
 8009e94:	4916      	ldr	r1, [pc, #88]	; (8009ef0 <__pow5mult+0xb4>)
 8009e96:	f7ff ff09 	bl	8009cac <__i2b>
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	0004      	movs	r4, r0
 8009e9e:	6098      	str	r0, [r3, #8]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	6003      	str	r3, [r0, #0]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	421d      	tst	r5, r3
 8009ea8:	d00a      	beq.n	8009ec0 <__pow5mult+0x84>
 8009eaa:	0031      	movs	r1, r6
 8009eac:	0022      	movs	r2, r4
 8009eae:	0038      	movs	r0, r7
 8009eb0:	f7ff ff14 	bl	8009cdc <__multiply>
 8009eb4:	0031      	movs	r1, r6
 8009eb6:	9001      	str	r0, [sp, #4]
 8009eb8:	0038      	movs	r0, r7
 8009eba:	f7ff fdfb 	bl	8009ab4 <_Bfree>
 8009ebe:	9e01      	ldr	r6, [sp, #4]
 8009ec0:	106d      	asrs	r5, r5, #1
 8009ec2:	d00c      	beq.n	8009ede <__pow5mult+0xa2>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d107      	bne.n	8009eda <__pow5mult+0x9e>
 8009eca:	0022      	movs	r2, r4
 8009ecc:	0021      	movs	r1, r4
 8009ece:	0038      	movs	r0, r7
 8009ed0:	f7ff ff04 	bl	8009cdc <__multiply>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	6020      	str	r0, [r4, #0]
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	0004      	movs	r4, r0
 8009edc:	e7e2      	b.n	8009ea4 <__pow5mult+0x68>
 8009ede:	0030      	movs	r0, r6
 8009ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	0800bce8 	.word	0x0800bce8
 8009ee8:	0800babd 	.word	0x0800babd
 8009eec:	0800bb9d 	.word	0x0800bb9d
 8009ef0:	00000271 	.word	0x00000271

08009ef4 <__lshift>:
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	000c      	movs	r4, r1
 8009ef8:	0017      	movs	r7, r2
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	1155      	asrs	r5, r2, #5
 8009efe:	b087      	sub	sp, #28
 8009f00:	18eb      	adds	r3, r5, r3
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	3301      	adds	r3, #1
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6849      	ldr	r1, [r1, #4]
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	9004      	str	r0, [sp, #16]
 8009f0e:	9a01      	ldr	r2, [sp, #4]
 8009f10:	4293      	cmp	r3, r2
 8009f12:	db10      	blt.n	8009f36 <__lshift+0x42>
 8009f14:	9804      	ldr	r0, [sp, #16]
 8009f16:	f7ff fd89 	bl	8009a2c <_Balloc>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	0002      	movs	r2, r0
 8009f1e:	0006      	movs	r6, r0
 8009f20:	0019      	movs	r1, r3
 8009f22:	3214      	adds	r2, #20
 8009f24:	4298      	cmp	r0, r3
 8009f26:	d10c      	bne.n	8009f42 <__lshift+0x4e>
 8009f28:	31df      	adds	r1, #223	; 0xdf
 8009f2a:	0032      	movs	r2, r6
 8009f2c:	4b26      	ldr	r3, [pc, #152]	; (8009fc8 <__lshift+0xd4>)
 8009f2e:	4827      	ldr	r0, [pc, #156]	; (8009fcc <__lshift+0xd8>)
 8009f30:	31ff      	adds	r1, #255	; 0xff
 8009f32:	f001 f811 	bl	800af58 <__assert_func>
 8009f36:	3101      	adds	r1, #1
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	e7e8      	b.n	8009f0e <__lshift+0x1a>
 8009f3c:	0098      	lsls	r0, r3, #2
 8009f3e:	5011      	str	r1, [r2, r0]
 8009f40:	3301      	adds	r3, #1
 8009f42:	42ab      	cmp	r3, r5
 8009f44:	dbfa      	blt.n	8009f3c <__lshift+0x48>
 8009f46:	43eb      	mvns	r3, r5
 8009f48:	17db      	asrs	r3, r3, #31
 8009f4a:	401d      	ands	r5, r3
 8009f4c:	211f      	movs	r1, #31
 8009f4e:	0023      	movs	r3, r4
 8009f50:	0038      	movs	r0, r7
 8009f52:	00ad      	lsls	r5, r5, #2
 8009f54:	1955      	adds	r5, r2, r5
 8009f56:	6922      	ldr	r2, [r4, #16]
 8009f58:	3314      	adds	r3, #20
 8009f5a:	0092      	lsls	r2, r2, #2
 8009f5c:	4008      	ands	r0, r1
 8009f5e:	4684      	mov	ip, r0
 8009f60:	189a      	adds	r2, r3, r2
 8009f62:	420f      	tst	r7, r1
 8009f64:	d02a      	beq.n	8009fbc <__lshift+0xc8>
 8009f66:	3101      	adds	r1, #1
 8009f68:	1a09      	subs	r1, r1, r0
 8009f6a:	9105      	str	r1, [sp, #20]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	9503      	str	r5, [sp, #12]
 8009f70:	4667      	mov	r7, ip
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	40b8      	lsls	r0, r7
 8009f76:	4308      	orrs	r0, r1
 8009f78:	9903      	ldr	r1, [sp, #12]
 8009f7a:	c101      	stmia	r1!, {r0}
 8009f7c:	9103      	str	r1, [sp, #12]
 8009f7e:	9805      	ldr	r0, [sp, #20]
 8009f80:	cb02      	ldmia	r3!, {r1}
 8009f82:	40c1      	lsrs	r1, r0
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d8f3      	bhi.n	8009f70 <__lshift+0x7c>
 8009f88:	0020      	movs	r0, r4
 8009f8a:	3015      	adds	r0, #21
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	4282      	cmp	r2, r0
 8009f90:	d304      	bcc.n	8009f9c <__lshift+0xa8>
 8009f92:	1b13      	subs	r3, r2, r4
 8009f94:	3b15      	subs	r3, #21
 8009f96:	089b      	lsrs	r3, r3, #2
 8009f98:	3301      	adds	r3, #1
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	50e9      	str	r1, [r5, r3]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d002      	beq.n	8009fa8 <__lshift+0xb4>
 8009fa2:	9b02      	ldr	r3, [sp, #8]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	9804      	ldr	r0, [sp, #16]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	0021      	movs	r1, r4
 8009fb0:	6133      	str	r3, [r6, #16]
 8009fb2:	f7ff fd7f 	bl	8009ab4 <_Bfree>
 8009fb6:	0030      	movs	r0, r6
 8009fb8:	b007      	add	sp, #28
 8009fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fbc:	cb02      	ldmia	r3!, {r1}
 8009fbe:	c502      	stmia	r5!, {r1}
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d8fb      	bhi.n	8009fbc <__lshift+0xc8>
 8009fc4:	e7f0      	b.n	8009fa8 <__lshift+0xb4>
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	0800bb2c 	.word	0x0800bb2c
 8009fcc:	0800bb9d 	.word	0x0800bb9d

08009fd0 <__mcmp>:
 8009fd0:	b530      	push	{r4, r5, lr}
 8009fd2:	690b      	ldr	r3, [r1, #16]
 8009fd4:	6904      	ldr	r4, [r0, #16]
 8009fd6:	0002      	movs	r2, r0
 8009fd8:	1ae0      	subs	r0, r4, r3
 8009fda:	429c      	cmp	r4, r3
 8009fdc:	d10e      	bne.n	8009ffc <__mcmp+0x2c>
 8009fde:	3214      	adds	r2, #20
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	3114      	adds	r1, #20
 8009fe4:	0014      	movs	r4, r2
 8009fe6:	18c9      	adds	r1, r1, r3
 8009fe8:	18d2      	adds	r2, r2, r3
 8009fea:	3a04      	subs	r2, #4
 8009fec:	3904      	subs	r1, #4
 8009fee:	6815      	ldr	r5, [r2, #0]
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	429d      	cmp	r5, r3
 8009ff4:	d003      	beq.n	8009ffe <__mcmp+0x2e>
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	d303      	bcc.n	800a004 <__mcmp+0x34>
 8009ffc:	bd30      	pop	{r4, r5, pc}
 8009ffe:	4294      	cmp	r4, r2
 800a000:	d3f3      	bcc.n	8009fea <__mcmp+0x1a>
 800a002:	e7fb      	b.n	8009ffc <__mcmp+0x2c>
 800a004:	4240      	negs	r0, r0
 800a006:	e7f9      	b.n	8009ffc <__mcmp+0x2c>

0800a008 <__mdiff>:
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	000e      	movs	r6, r1
 800a00c:	0007      	movs	r7, r0
 800a00e:	0011      	movs	r1, r2
 800a010:	0030      	movs	r0, r6
 800a012:	b087      	sub	sp, #28
 800a014:	0014      	movs	r4, r2
 800a016:	f7ff ffdb 	bl	8009fd0 <__mcmp>
 800a01a:	1e05      	subs	r5, r0, #0
 800a01c:	d110      	bne.n	800a040 <__mdiff+0x38>
 800a01e:	0001      	movs	r1, r0
 800a020:	0038      	movs	r0, r7
 800a022:	f7ff fd03 	bl	8009a2c <_Balloc>
 800a026:	1e02      	subs	r2, r0, #0
 800a028:	d104      	bne.n	800a034 <__mdiff+0x2c>
 800a02a:	4b3f      	ldr	r3, [pc, #252]	; (800a128 <__mdiff+0x120>)
 800a02c:	483f      	ldr	r0, [pc, #252]	; (800a12c <__mdiff+0x124>)
 800a02e:	4940      	ldr	r1, [pc, #256]	; (800a130 <__mdiff+0x128>)
 800a030:	f000 ff92 	bl	800af58 <__assert_func>
 800a034:	2301      	movs	r3, #1
 800a036:	6145      	str	r5, [r0, #20]
 800a038:	6103      	str	r3, [r0, #16]
 800a03a:	0010      	movs	r0, r2
 800a03c:	b007      	add	sp, #28
 800a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a040:	2301      	movs	r3, #1
 800a042:	9301      	str	r3, [sp, #4]
 800a044:	2800      	cmp	r0, #0
 800a046:	db04      	blt.n	800a052 <__mdiff+0x4a>
 800a048:	0023      	movs	r3, r4
 800a04a:	0034      	movs	r4, r6
 800a04c:	001e      	movs	r6, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	0038      	movs	r0, r7
 800a054:	6861      	ldr	r1, [r4, #4]
 800a056:	f7ff fce9 	bl	8009a2c <_Balloc>
 800a05a:	1e02      	subs	r2, r0, #0
 800a05c:	d103      	bne.n	800a066 <__mdiff+0x5e>
 800a05e:	4b32      	ldr	r3, [pc, #200]	; (800a128 <__mdiff+0x120>)
 800a060:	4832      	ldr	r0, [pc, #200]	; (800a12c <__mdiff+0x124>)
 800a062:	4934      	ldr	r1, [pc, #208]	; (800a134 <__mdiff+0x12c>)
 800a064:	e7e4      	b.n	800a030 <__mdiff+0x28>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	2700      	movs	r7, #0
 800a06a:	60c3      	str	r3, [r0, #12]
 800a06c:	6920      	ldr	r0, [r4, #16]
 800a06e:	3414      	adds	r4, #20
 800a070:	0083      	lsls	r3, r0, #2
 800a072:	18e3      	adds	r3, r4, r3
 800a074:	0021      	movs	r1, r4
 800a076:	9401      	str	r4, [sp, #4]
 800a078:	0034      	movs	r4, r6
 800a07a:	9302      	str	r3, [sp, #8]
 800a07c:	6933      	ldr	r3, [r6, #16]
 800a07e:	3414      	adds	r4, #20
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	18e3      	adds	r3, r4, r3
 800a084:	9303      	str	r3, [sp, #12]
 800a086:	0013      	movs	r3, r2
 800a088:	3314      	adds	r3, #20
 800a08a:	469c      	mov	ip, r3
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	9104      	str	r1, [sp, #16]
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	cc02      	ldmia	r4!, {r1}
 800a094:	cb20      	ldmia	r3!, {r5}
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	b2ab      	uxth	r3, r5
 800a09a:	19df      	adds	r7, r3, r7
 800a09c:	b28b      	uxth	r3, r1
 800a09e:	1afb      	subs	r3, r7, r3
 800a0a0:	0c09      	lsrs	r1, r1, #16
 800a0a2:	0c2d      	lsrs	r5, r5, #16
 800a0a4:	1a6d      	subs	r5, r5, r1
 800a0a6:	1419      	asrs	r1, r3, #16
 800a0a8:	1869      	adds	r1, r5, r1
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	140f      	asrs	r7, r1, #16
 800a0ae:	0409      	lsls	r1, r1, #16
 800a0b0:	4319      	orrs	r1, r3
 800a0b2:	4663      	mov	r3, ip
 800a0b4:	c302      	stmia	r3!, {r1}
 800a0b6:	469c      	mov	ip, r3
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	d8e8      	bhi.n	800a090 <__mdiff+0x88>
 800a0be:	0031      	movs	r1, r6
 800a0c0:	9c03      	ldr	r4, [sp, #12]
 800a0c2:	3115      	adds	r1, #21
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	428c      	cmp	r4, r1
 800a0c8:	d304      	bcc.n	800a0d4 <__mdiff+0xcc>
 800a0ca:	1ba3      	subs	r3, r4, r6
 800a0cc:	3b15      	subs	r3, #21
 800a0ce:	089b      	lsrs	r3, r3, #2
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	9901      	ldr	r1, [sp, #4]
 800a0d6:	18cd      	adds	r5, r1, r3
 800a0d8:	9905      	ldr	r1, [sp, #20]
 800a0da:	002e      	movs	r6, r5
 800a0dc:	18cb      	adds	r3, r1, r3
 800a0de:	469c      	mov	ip, r3
 800a0e0:	9902      	ldr	r1, [sp, #8]
 800a0e2:	428e      	cmp	r6, r1
 800a0e4:	d310      	bcc.n	800a108 <__mdiff+0x100>
 800a0e6:	9e02      	ldr	r6, [sp, #8]
 800a0e8:	1ee9      	subs	r1, r5, #3
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	428e      	cmp	r6, r1
 800a0ee:	d304      	bcc.n	800a0fa <__mdiff+0xf2>
 800a0f0:	0031      	movs	r1, r6
 800a0f2:	3103      	adds	r1, #3
 800a0f4:	1b49      	subs	r1, r1, r5
 800a0f6:	0889      	lsrs	r1, r1, #2
 800a0f8:	008c      	lsls	r4, r1, #2
 800a0fa:	191b      	adds	r3, r3, r4
 800a0fc:	3b04      	subs	r3, #4
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	2900      	cmp	r1, #0
 800a102:	d00f      	beq.n	800a124 <__mdiff+0x11c>
 800a104:	6110      	str	r0, [r2, #16]
 800a106:	e798      	b.n	800a03a <__mdiff+0x32>
 800a108:	ce02      	ldmia	r6!, {r1}
 800a10a:	b28c      	uxth	r4, r1
 800a10c:	19e4      	adds	r4, r4, r7
 800a10e:	0c0f      	lsrs	r7, r1, #16
 800a110:	1421      	asrs	r1, r4, #16
 800a112:	1879      	adds	r1, r7, r1
 800a114:	b2a4      	uxth	r4, r4
 800a116:	140f      	asrs	r7, r1, #16
 800a118:	0409      	lsls	r1, r1, #16
 800a11a:	4321      	orrs	r1, r4
 800a11c:	4664      	mov	r4, ip
 800a11e:	c402      	stmia	r4!, {r1}
 800a120:	46a4      	mov	ip, r4
 800a122:	e7dd      	b.n	800a0e0 <__mdiff+0xd8>
 800a124:	3801      	subs	r0, #1
 800a126:	e7e9      	b.n	800a0fc <__mdiff+0xf4>
 800a128:	0800bb2c 	.word	0x0800bb2c
 800a12c:	0800bb9d 	.word	0x0800bb9d
 800a130:	00000237 	.word	0x00000237
 800a134:	00000245 	.word	0x00000245

0800a138 <__ulp>:
 800a138:	2000      	movs	r0, #0
 800a13a:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <__ulp+0x30>)
 800a13c:	4019      	ands	r1, r3
 800a13e:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <__ulp+0x34>)
 800a140:	18c9      	adds	r1, r1, r3
 800a142:	4281      	cmp	r1, r0
 800a144:	dc06      	bgt.n	800a154 <__ulp+0x1c>
 800a146:	4249      	negs	r1, r1
 800a148:	150b      	asrs	r3, r1, #20
 800a14a:	2b13      	cmp	r3, #19
 800a14c:	dc03      	bgt.n	800a156 <__ulp+0x1e>
 800a14e:	2180      	movs	r1, #128	; 0x80
 800a150:	0309      	lsls	r1, r1, #12
 800a152:	4119      	asrs	r1, r3
 800a154:	4770      	bx	lr
 800a156:	3b14      	subs	r3, #20
 800a158:	2001      	movs	r0, #1
 800a15a:	2b1e      	cmp	r3, #30
 800a15c:	dc02      	bgt.n	800a164 <__ulp+0x2c>
 800a15e:	2080      	movs	r0, #128	; 0x80
 800a160:	0600      	lsls	r0, r0, #24
 800a162:	40d8      	lsrs	r0, r3
 800a164:	2100      	movs	r1, #0
 800a166:	e7f5      	b.n	800a154 <__ulp+0x1c>
 800a168:	7ff00000 	.word	0x7ff00000
 800a16c:	fcc00000 	.word	0xfcc00000

0800a170 <__b2d>:
 800a170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a172:	0006      	movs	r6, r0
 800a174:	6903      	ldr	r3, [r0, #16]
 800a176:	3614      	adds	r6, #20
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	18f3      	adds	r3, r6, r3
 800a17c:	1f1d      	subs	r5, r3, #4
 800a17e:	682c      	ldr	r4, [r5, #0]
 800a180:	000f      	movs	r7, r1
 800a182:	0020      	movs	r0, r4
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	f7ff fd49 	bl	8009c1c <__hi0bits>
 800a18a:	2220      	movs	r2, #32
 800a18c:	1a12      	subs	r2, r2, r0
 800a18e:	603a      	str	r2, [r7, #0]
 800a190:	0003      	movs	r3, r0
 800a192:	4a1c      	ldr	r2, [pc, #112]	; (800a204 <__b2d+0x94>)
 800a194:	280a      	cmp	r0, #10
 800a196:	dc15      	bgt.n	800a1c4 <__b2d+0x54>
 800a198:	210b      	movs	r1, #11
 800a19a:	0027      	movs	r7, r4
 800a19c:	1a09      	subs	r1, r1, r0
 800a19e:	40cf      	lsrs	r7, r1
 800a1a0:	433a      	orrs	r2, r7
 800a1a2:	468c      	mov	ip, r1
 800a1a4:	0011      	movs	r1, r2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	42ae      	cmp	r6, r5
 800a1aa:	d202      	bcs.n	800a1b2 <__b2d+0x42>
 800a1ac:	9a01      	ldr	r2, [sp, #4]
 800a1ae:	3a08      	subs	r2, #8
 800a1b0:	6812      	ldr	r2, [r2, #0]
 800a1b2:	3315      	adds	r3, #21
 800a1b4:	409c      	lsls	r4, r3
 800a1b6:	4663      	mov	r3, ip
 800a1b8:	0027      	movs	r7, r4
 800a1ba:	40da      	lsrs	r2, r3
 800a1bc:	4317      	orrs	r7, r2
 800a1be:	0038      	movs	r0, r7
 800a1c0:	b003      	add	sp, #12
 800a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c4:	2700      	movs	r7, #0
 800a1c6:	42ae      	cmp	r6, r5
 800a1c8:	d202      	bcs.n	800a1d0 <__b2d+0x60>
 800a1ca:	9d01      	ldr	r5, [sp, #4]
 800a1cc:	3d08      	subs	r5, #8
 800a1ce:	682f      	ldr	r7, [r5, #0]
 800a1d0:	210b      	movs	r1, #11
 800a1d2:	4249      	negs	r1, r1
 800a1d4:	468c      	mov	ip, r1
 800a1d6:	449c      	add	ip, r3
 800a1d8:	2b0b      	cmp	r3, #11
 800a1da:	d010      	beq.n	800a1fe <__b2d+0x8e>
 800a1dc:	4661      	mov	r1, ip
 800a1de:	2320      	movs	r3, #32
 800a1e0:	408c      	lsls	r4, r1
 800a1e2:	1a5b      	subs	r3, r3, r1
 800a1e4:	0039      	movs	r1, r7
 800a1e6:	40d9      	lsrs	r1, r3
 800a1e8:	430c      	orrs	r4, r1
 800a1ea:	4322      	orrs	r2, r4
 800a1ec:	0011      	movs	r1, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	42b5      	cmp	r5, r6
 800a1f2:	d901      	bls.n	800a1f8 <__b2d+0x88>
 800a1f4:	3d04      	subs	r5, #4
 800a1f6:	682a      	ldr	r2, [r5, #0]
 800a1f8:	4664      	mov	r4, ip
 800a1fa:	40a7      	lsls	r7, r4
 800a1fc:	e7dd      	b.n	800a1ba <__b2d+0x4a>
 800a1fe:	4322      	orrs	r2, r4
 800a200:	0011      	movs	r1, r2
 800a202:	e7dc      	b.n	800a1be <__b2d+0x4e>
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <__d2b>:
 800a208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a20a:	2101      	movs	r1, #1
 800a20c:	0014      	movs	r4, r2
 800a20e:	001d      	movs	r5, r3
 800a210:	9f08      	ldr	r7, [sp, #32]
 800a212:	f7ff fc0b 	bl	8009a2c <_Balloc>
 800a216:	1e06      	subs	r6, r0, #0
 800a218:	d105      	bne.n	800a226 <__d2b+0x1e>
 800a21a:	0032      	movs	r2, r6
 800a21c:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <__d2b+0xa8>)
 800a21e:	4825      	ldr	r0, [pc, #148]	; (800a2b4 <__d2b+0xac>)
 800a220:	4925      	ldr	r1, [pc, #148]	; (800a2b8 <__d2b+0xb0>)
 800a222:	f000 fe99 	bl	800af58 <__assert_func>
 800a226:	032b      	lsls	r3, r5, #12
 800a228:	006d      	lsls	r5, r5, #1
 800a22a:	0b1b      	lsrs	r3, r3, #12
 800a22c:	0d6d      	lsrs	r5, r5, #21
 800a22e:	d125      	bne.n	800a27c <__d2b+0x74>
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	2c00      	cmp	r4, #0
 800a234:	d028      	beq.n	800a288 <__d2b+0x80>
 800a236:	4668      	mov	r0, sp
 800a238:	9400      	str	r4, [sp, #0]
 800a23a:	f7ff fd09 	bl	8009c50 <__lo0bits>
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	9900      	ldr	r1, [sp, #0]
 800a242:	2800      	cmp	r0, #0
 800a244:	d01e      	beq.n	800a284 <__d2b+0x7c>
 800a246:	2220      	movs	r2, #32
 800a248:	001c      	movs	r4, r3
 800a24a:	1a12      	subs	r2, r2, r0
 800a24c:	4094      	lsls	r4, r2
 800a24e:	0022      	movs	r2, r4
 800a250:	40c3      	lsrs	r3, r0
 800a252:	430a      	orrs	r2, r1
 800a254:	6172      	str	r2, [r6, #20]
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	9c01      	ldr	r4, [sp, #4]
 800a25a:	61b4      	str	r4, [r6, #24]
 800a25c:	1e63      	subs	r3, r4, #1
 800a25e:	419c      	sbcs	r4, r3
 800a260:	3401      	adds	r4, #1
 800a262:	6134      	str	r4, [r6, #16]
 800a264:	2d00      	cmp	r5, #0
 800a266:	d017      	beq.n	800a298 <__d2b+0x90>
 800a268:	2435      	movs	r4, #53	; 0x35
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <__d2b+0xb4>)
 800a26c:	18ed      	adds	r5, r5, r3
 800a26e:	182d      	adds	r5, r5, r0
 800a270:	603d      	str	r5, [r7, #0]
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	1a24      	subs	r4, r4, r0
 800a276:	601c      	str	r4, [r3, #0]
 800a278:	0030      	movs	r0, r6
 800a27a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a27c:	2280      	movs	r2, #128	; 0x80
 800a27e:	0352      	lsls	r2, r2, #13
 800a280:	4313      	orrs	r3, r2
 800a282:	e7d5      	b.n	800a230 <__d2b+0x28>
 800a284:	6171      	str	r1, [r6, #20]
 800a286:	e7e7      	b.n	800a258 <__d2b+0x50>
 800a288:	a801      	add	r0, sp, #4
 800a28a:	f7ff fce1 	bl	8009c50 <__lo0bits>
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	2401      	movs	r4, #1
 800a292:	6173      	str	r3, [r6, #20]
 800a294:	3020      	adds	r0, #32
 800a296:	e7e4      	b.n	800a262 <__d2b+0x5a>
 800a298:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <__d2b+0xb8>)
 800a29a:	18c0      	adds	r0, r0, r3
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <__d2b+0xbc>)
 800a29e:	6038      	str	r0, [r7, #0]
 800a2a0:	18e3      	adds	r3, r4, r3
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	18f3      	adds	r3, r6, r3
 800a2a6:	6958      	ldr	r0, [r3, #20]
 800a2a8:	f7ff fcb8 	bl	8009c1c <__hi0bits>
 800a2ac:	0164      	lsls	r4, r4, #5
 800a2ae:	e7e0      	b.n	800a272 <__d2b+0x6a>
 800a2b0:	0800bb2c 	.word	0x0800bb2c
 800a2b4:	0800bb9d 	.word	0x0800bb9d
 800a2b8:	0000030f 	.word	0x0000030f
 800a2bc:	fffffbcd 	.word	0xfffffbcd
 800a2c0:	fffffbce 	.word	0xfffffbce
 800a2c4:	3fffffff 	.word	0x3fffffff

0800a2c8 <__ratio>:
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	000f      	movs	r7, r1
 800a2ce:	a904      	add	r1, sp, #16
 800a2d0:	0006      	movs	r6, r0
 800a2d2:	f7ff ff4d 	bl	800a170 <__b2d>
 800a2d6:	9000      	str	r0, [sp, #0]
 800a2d8:	9101      	str	r1, [sp, #4]
 800a2da:	9c00      	ldr	r4, [sp, #0]
 800a2dc:	9d01      	ldr	r5, [sp, #4]
 800a2de:	0038      	movs	r0, r7
 800a2e0:	a905      	add	r1, sp, #20
 800a2e2:	f7ff ff45 	bl	800a170 <__b2d>
 800a2e6:	9002      	str	r0, [sp, #8]
 800a2e8:	9103      	str	r1, [sp, #12]
 800a2ea:	9a02      	ldr	r2, [sp, #8]
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	6930      	ldr	r0, [r6, #16]
 800a2f0:	6939      	ldr	r1, [r7, #16]
 800a2f2:	9e04      	ldr	r6, [sp, #16]
 800a2f4:	1a40      	subs	r0, r0, r1
 800a2f6:	9905      	ldr	r1, [sp, #20]
 800a2f8:	0140      	lsls	r0, r0, #5
 800a2fa:	1a71      	subs	r1, r6, r1
 800a2fc:	1841      	adds	r1, r0, r1
 800a2fe:	0508      	lsls	r0, r1, #20
 800a300:	2900      	cmp	r1, #0
 800a302:	dd07      	ble.n	800a314 <__ratio+0x4c>
 800a304:	9901      	ldr	r1, [sp, #4]
 800a306:	1845      	adds	r5, r0, r1
 800a308:	0020      	movs	r0, r4
 800a30a:	0029      	movs	r1, r5
 800a30c:	f7f6 fd86 	bl	8000e1c <__aeabi_ddiv>
 800a310:	b007      	add	sp, #28
 800a312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a314:	9903      	ldr	r1, [sp, #12]
 800a316:	1a0b      	subs	r3, r1, r0
 800a318:	e7f6      	b.n	800a308 <__ratio+0x40>

0800a31a <__copybits>:
 800a31a:	b570      	push	{r4, r5, r6, lr}
 800a31c:	0014      	movs	r4, r2
 800a31e:	0005      	movs	r5, r0
 800a320:	3901      	subs	r1, #1
 800a322:	6913      	ldr	r3, [r2, #16]
 800a324:	1149      	asrs	r1, r1, #5
 800a326:	3101      	adds	r1, #1
 800a328:	0089      	lsls	r1, r1, #2
 800a32a:	3414      	adds	r4, #20
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	1841      	adds	r1, r0, r1
 800a330:	18e3      	adds	r3, r4, r3
 800a332:	42a3      	cmp	r3, r4
 800a334:	d80d      	bhi.n	800a352 <__copybits+0x38>
 800a336:	0014      	movs	r4, r2
 800a338:	3411      	adds	r4, #17
 800a33a:	2500      	movs	r5, #0
 800a33c:	429c      	cmp	r4, r3
 800a33e:	d803      	bhi.n	800a348 <__copybits+0x2e>
 800a340:	1a9b      	subs	r3, r3, r2
 800a342:	3b11      	subs	r3, #17
 800a344:	089b      	lsrs	r3, r3, #2
 800a346:	009d      	lsls	r5, r3, #2
 800a348:	2300      	movs	r3, #0
 800a34a:	1940      	adds	r0, r0, r5
 800a34c:	4281      	cmp	r1, r0
 800a34e:	d803      	bhi.n	800a358 <__copybits+0x3e>
 800a350:	bd70      	pop	{r4, r5, r6, pc}
 800a352:	cc40      	ldmia	r4!, {r6}
 800a354:	c540      	stmia	r5!, {r6}
 800a356:	e7ec      	b.n	800a332 <__copybits+0x18>
 800a358:	c008      	stmia	r0!, {r3}
 800a35a:	e7f7      	b.n	800a34c <__copybits+0x32>

0800a35c <__any_on>:
 800a35c:	0002      	movs	r2, r0
 800a35e:	6900      	ldr	r0, [r0, #16]
 800a360:	b510      	push	{r4, lr}
 800a362:	3214      	adds	r2, #20
 800a364:	114b      	asrs	r3, r1, #5
 800a366:	4298      	cmp	r0, r3
 800a368:	db13      	blt.n	800a392 <__any_on+0x36>
 800a36a:	dd0c      	ble.n	800a386 <__any_on+0x2a>
 800a36c:	241f      	movs	r4, #31
 800a36e:	0008      	movs	r0, r1
 800a370:	4020      	ands	r0, r4
 800a372:	4221      	tst	r1, r4
 800a374:	d007      	beq.n	800a386 <__any_on+0x2a>
 800a376:	0099      	lsls	r1, r3, #2
 800a378:	588c      	ldr	r4, [r1, r2]
 800a37a:	0021      	movs	r1, r4
 800a37c:	40c1      	lsrs	r1, r0
 800a37e:	4081      	lsls	r1, r0
 800a380:	2001      	movs	r0, #1
 800a382:	428c      	cmp	r4, r1
 800a384:	d104      	bne.n	800a390 <__any_on+0x34>
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	18d3      	adds	r3, r2, r3
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d803      	bhi.n	800a396 <__any_on+0x3a>
 800a38e:	2000      	movs	r0, #0
 800a390:	bd10      	pop	{r4, pc}
 800a392:	0003      	movs	r3, r0
 800a394:	e7f7      	b.n	800a386 <__any_on+0x2a>
 800a396:	3b04      	subs	r3, #4
 800a398:	6819      	ldr	r1, [r3, #0]
 800a39a:	2900      	cmp	r1, #0
 800a39c:	d0f5      	beq.n	800a38a <__any_on+0x2e>
 800a39e:	2001      	movs	r0, #1
 800a3a0:	e7f6      	b.n	800a390 <__any_on+0x34>

0800a3a2 <__ascii_wctomb>:
 800a3a2:	0003      	movs	r3, r0
 800a3a4:	1e08      	subs	r0, r1, #0
 800a3a6:	d005      	beq.n	800a3b4 <__ascii_wctomb+0x12>
 800a3a8:	2aff      	cmp	r2, #255	; 0xff
 800a3aa:	d904      	bls.n	800a3b6 <__ascii_wctomb+0x14>
 800a3ac:	228a      	movs	r2, #138	; 0x8a
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	4240      	negs	r0, r0
 800a3b4:	4770      	bx	lr
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	700a      	strb	r2, [r1, #0]
 800a3ba:	e7fb      	b.n	800a3b4 <__ascii_wctomb+0x12>

0800a3bc <__ssputs_r>:
 800a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	688e      	ldr	r6, [r1, #8]
 800a3c6:	9a01      	ldr	r2, [sp, #4]
 800a3c8:	0007      	movs	r7, r0
 800a3ca:	000c      	movs	r4, r1
 800a3cc:	680b      	ldr	r3, [r1, #0]
 800a3ce:	4296      	cmp	r6, r2
 800a3d0:	d831      	bhi.n	800a436 <__ssputs_r+0x7a>
 800a3d2:	898a      	ldrh	r2, [r1, #12]
 800a3d4:	2190      	movs	r1, #144	; 0x90
 800a3d6:	00c9      	lsls	r1, r1, #3
 800a3d8:	420a      	tst	r2, r1
 800a3da:	d029      	beq.n	800a430 <__ssputs_r+0x74>
 800a3dc:	2003      	movs	r0, #3
 800a3de:	6921      	ldr	r1, [r4, #16]
 800a3e0:	1a5b      	subs	r3, r3, r1
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	6963      	ldr	r3, [r4, #20]
 800a3e6:	4343      	muls	r3, r0
 800a3e8:	0fdd      	lsrs	r5, r3, #31
 800a3ea:	18ed      	adds	r5, r5, r3
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	9802      	ldr	r0, [sp, #8]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	181b      	adds	r3, r3, r0
 800a3f4:	106d      	asrs	r5, r5, #1
 800a3f6:	42ab      	cmp	r3, r5
 800a3f8:	d900      	bls.n	800a3fc <__ssputs_r+0x40>
 800a3fa:	001d      	movs	r5, r3
 800a3fc:	0552      	lsls	r2, r2, #21
 800a3fe:	d529      	bpl.n	800a454 <__ssputs_r+0x98>
 800a400:	0029      	movs	r1, r5
 800a402:	0038      	movs	r0, r7
 800a404:	f7fc f854 	bl	80064b0 <_malloc_r>
 800a408:	1e06      	subs	r6, r0, #0
 800a40a:	d02d      	beq.n	800a468 <__ssputs_r+0xac>
 800a40c:	9a02      	ldr	r2, [sp, #8]
 800a40e:	6921      	ldr	r1, [r4, #16]
 800a410:	f7fe f8a2 	bl	8008558 <memcpy>
 800a414:	89a2      	ldrh	r2, [r4, #12]
 800a416:	4b19      	ldr	r3, [pc, #100]	; (800a47c <__ssputs_r+0xc0>)
 800a418:	401a      	ands	r2, r3
 800a41a:	2380      	movs	r3, #128	; 0x80
 800a41c:	4313      	orrs	r3, r2
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	6126      	str	r6, [r4, #16]
 800a424:	18f6      	adds	r6, r6, r3
 800a426:	6026      	str	r6, [r4, #0]
 800a428:	6165      	str	r5, [r4, #20]
 800a42a:	9e01      	ldr	r6, [sp, #4]
 800a42c:	1aed      	subs	r5, r5, r3
 800a42e:	60a5      	str	r5, [r4, #8]
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	429e      	cmp	r6, r3
 800a434:	d900      	bls.n	800a438 <__ssputs_r+0x7c>
 800a436:	9e01      	ldr	r6, [sp, #4]
 800a438:	0032      	movs	r2, r6
 800a43a:	9903      	ldr	r1, [sp, #12]
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	f000 fd77 	bl	800af30 <memmove>
 800a442:	2000      	movs	r0, #0
 800a444:	68a3      	ldr	r3, [r4, #8]
 800a446:	1b9b      	subs	r3, r3, r6
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	199b      	adds	r3, r3, r6
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	b005      	add	sp, #20
 800a452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a454:	002a      	movs	r2, r5
 800a456:	0038      	movs	r0, r7
 800a458:	f000 fdc9 	bl	800afee <_realloc_r>
 800a45c:	1e06      	subs	r6, r0, #0
 800a45e:	d1df      	bne.n	800a420 <__ssputs_r+0x64>
 800a460:	0038      	movs	r0, r7
 800a462:	6921      	ldr	r1, [r4, #16]
 800a464:	f7fe ff2a 	bl	80092bc <_free_r>
 800a468:	230c      	movs	r3, #12
 800a46a:	2001      	movs	r0, #1
 800a46c:	603b      	str	r3, [r7, #0]
 800a46e:	89a2      	ldrh	r2, [r4, #12]
 800a470:	3334      	adds	r3, #52	; 0x34
 800a472:	4313      	orrs	r3, r2
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	4240      	negs	r0, r0
 800a478:	e7ea      	b.n	800a450 <__ssputs_r+0x94>
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	fffffb7f 	.word	0xfffffb7f

0800a480 <_svfiprintf_r>:
 800a480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a482:	b0a1      	sub	sp, #132	; 0x84
 800a484:	9003      	str	r0, [sp, #12]
 800a486:	001d      	movs	r5, r3
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	000f      	movs	r7, r1
 800a48c:	0016      	movs	r6, r2
 800a48e:	061b      	lsls	r3, r3, #24
 800a490:	d511      	bpl.n	800a4b6 <_svfiprintf_r+0x36>
 800a492:	690b      	ldr	r3, [r1, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10e      	bne.n	800a4b6 <_svfiprintf_r+0x36>
 800a498:	2140      	movs	r1, #64	; 0x40
 800a49a:	f7fc f809 	bl	80064b0 <_malloc_r>
 800a49e:	6038      	str	r0, [r7, #0]
 800a4a0:	6138      	str	r0, [r7, #16]
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d105      	bne.n	800a4b2 <_svfiprintf_r+0x32>
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	9a03      	ldr	r2, [sp, #12]
 800a4aa:	3801      	subs	r0, #1
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	b021      	add	sp, #132	; 0x84
 800a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b2:	2340      	movs	r3, #64	; 0x40
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	ac08      	add	r4, sp, #32
 800a4ba:	6163      	str	r3, [r4, #20]
 800a4bc:	3320      	adds	r3, #32
 800a4be:	7663      	strb	r3, [r4, #25]
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	76a3      	strb	r3, [r4, #26]
 800a4c4:	9507      	str	r5, [sp, #28]
 800a4c6:	0035      	movs	r5, r6
 800a4c8:	782b      	ldrb	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <_svfiprintf_r+0x52>
 800a4ce:	2b25      	cmp	r3, #37	; 0x25
 800a4d0:	d148      	bne.n	800a564 <_svfiprintf_r+0xe4>
 800a4d2:	1bab      	subs	r3, r5, r6
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	42b5      	cmp	r5, r6
 800a4d8:	d00b      	beq.n	800a4f2 <_svfiprintf_r+0x72>
 800a4da:	0032      	movs	r2, r6
 800a4dc:	0039      	movs	r1, r7
 800a4de:	9803      	ldr	r0, [sp, #12]
 800a4e0:	f7ff ff6c 	bl	800a3bc <__ssputs_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d100      	bne.n	800a4ea <_svfiprintf_r+0x6a>
 800a4e8:	e0af      	b.n	800a64a <_svfiprintf_r+0x1ca>
 800a4ea:	6963      	ldr	r3, [r4, #20]
 800a4ec:	9a05      	ldr	r2, [sp, #20]
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	6163      	str	r3, [r4, #20]
 800a4f2:	782b      	ldrb	r3, [r5, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d100      	bne.n	800a4fa <_svfiprintf_r+0x7a>
 800a4f8:	e0a7      	b.n	800a64a <_svfiprintf_r+0x1ca>
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4252      	negs	r2, r2
 800a500:	6062      	str	r2, [r4, #4]
 800a502:	a904      	add	r1, sp, #16
 800a504:	3254      	adds	r2, #84	; 0x54
 800a506:	1852      	adds	r2, r2, r1
 800a508:	1c6e      	adds	r6, r5, #1
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	60e3      	str	r3, [r4, #12]
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	7013      	strb	r3, [r2, #0]
 800a512:	65a3      	str	r3, [r4, #88]	; 0x58
 800a514:	4b55      	ldr	r3, [pc, #340]	; (800a66c <_svfiprintf_r+0x1ec>)
 800a516:	2205      	movs	r2, #5
 800a518:	0018      	movs	r0, r3
 800a51a:	7831      	ldrb	r1, [r6, #0]
 800a51c:	9305      	str	r3, [sp, #20]
 800a51e:	f7fe f810 	bl	8008542 <memchr>
 800a522:	1c75      	adds	r5, r6, #1
 800a524:	2800      	cmp	r0, #0
 800a526:	d11f      	bne.n	800a568 <_svfiprintf_r+0xe8>
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	06d3      	lsls	r3, r2, #27
 800a52c:	d504      	bpl.n	800a538 <_svfiprintf_r+0xb8>
 800a52e:	2353      	movs	r3, #83	; 0x53
 800a530:	a904      	add	r1, sp, #16
 800a532:	185b      	adds	r3, r3, r1
 800a534:	2120      	movs	r1, #32
 800a536:	7019      	strb	r1, [r3, #0]
 800a538:	0713      	lsls	r3, r2, #28
 800a53a:	d504      	bpl.n	800a546 <_svfiprintf_r+0xc6>
 800a53c:	2353      	movs	r3, #83	; 0x53
 800a53e:	a904      	add	r1, sp, #16
 800a540:	185b      	adds	r3, r3, r1
 800a542:	212b      	movs	r1, #43	; 0x2b
 800a544:	7019      	strb	r1, [r3, #0]
 800a546:	7833      	ldrb	r3, [r6, #0]
 800a548:	2b2a      	cmp	r3, #42	; 0x2a
 800a54a:	d016      	beq.n	800a57a <_svfiprintf_r+0xfa>
 800a54c:	0035      	movs	r5, r6
 800a54e:	2100      	movs	r1, #0
 800a550:	200a      	movs	r0, #10
 800a552:	68e3      	ldr	r3, [r4, #12]
 800a554:	782a      	ldrb	r2, [r5, #0]
 800a556:	1c6e      	adds	r6, r5, #1
 800a558:	3a30      	subs	r2, #48	; 0x30
 800a55a:	2a09      	cmp	r2, #9
 800a55c:	d94e      	bls.n	800a5fc <_svfiprintf_r+0x17c>
 800a55e:	2900      	cmp	r1, #0
 800a560:	d111      	bne.n	800a586 <_svfiprintf_r+0x106>
 800a562:	e017      	b.n	800a594 <_svfiprintf_r+0x114>
 800a564:	3501      	adds	r5, #1
 800a566:	e7af      	b.n	800a4c8 <_svfiprintf_r+0x48>
 800a568:	9b05      	ldr	r3, [sp, #20]
 800a56a:	6822      	ldr	r2, [r4, #0]
 800a56c:	1ac0      	subs	r0, r0, r3
 800a56e:	2301      	movs	r3, #1
 800a570:	4083      	lsls	r3, r0
 800a572:	4313      	orrs	r3, r2
 800a574:	002e      	movs	r6, r5
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	e7cc      	b.n	800a514 <_svfiprintf_r+0x94>
 800a57a:	9b07      	ldr	r3, [sp, #28]
 800a57c:	1d19      	adds	r1, r3, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	9107      	str	r1, [sp, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	db01      	blt.n	800a58a <_svfiprintf_r+0x10a>
 800a586:	930b      	str	r3, [sp, #44]	; 0x2c
 800a588:	e004      	b.n	800a594 <_svfiprintf_r+0x114>
 800a58a:	425b      	negs	r3, r3
 800a58c:	60e3      	str	r3, [r4, #12]
 800a58e:	2302      	movs	r3, #2
 800a590:	4313      	orrs	r3, r2
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	782b      	ldrb	r3, [r5, #0]
 800a596:	2b2e      	cmp	r3, #46	; 0x2e
 800a598:	d10a      	bne.n	800a5b0 <_svfiprintf_r+0x130>
 800a59a:	786b      	ldrb	r3, [r5, #1]
 800a59c:	2b2a      	cmp	r3, #42	; 0x2a
 800a59e:	d135      	bne.n	800a60c <_svfiprintf_r+0x18c>
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	3502      	adds	r5, #2
 800a5a4:	1d1a      	adds	r2, r3, #4
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	9207      	str	r2, [sp, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db2b      	blt.n	800a606 <_svfiprintf_r+0x186>
 800a5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b0:	4e2f      	ldr	r6, [pc, #188]	; (800a670 <_svfiprintf_r+0x1f0>)
 800a5b2:	2203      	movs	r2, #3
 800a5b4:	0030      	movs	r0, r6
 800a5b6:	7829      	ldrb	r1, [r5, #0]
 800a5b8:	f7fd ffc3 	bl	8008542 <memchr>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d006      	beq.n	800a5ce <_svfiprintf_r+0x14e>
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	1b80      	subs	r0, r0, r6
 800a5c4:	4083      	lsls	r3, r0
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	7829      	ldrb	r1, [r5, #0]
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	4828      	ldr	r0, [pc, #160]	; (800a674 <_svfiprintf_r+0x1f4>)
 800a5d4:	1c6e      	adds	r6, r5, #1
 800a5d6:	7621      	strb	r1, [r4, #24]
 800a5d8:	f7fd ffb3 	bl	8008542 <memchr>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d03c      	beq.n	800a65a <_svfiprintf_r+0x1da>
 800a5e0:	4b25      	ldr	r3, [pc, #148]	; (800a678 <_svfiprintf_r+0x1f8>)
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d125      	bne.n	800a632 <_svfiprintf_r+0x1b2>
 800a5e6:	2207      	movs	r2, #7
 800a5e8:	9b07      	ldr	r3, [sp, #28]
 800a5ea:	3307      	adds	r3, #7
 800a5ec:	4393      	bics	r3, r2
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	6963      	ldr	r3, [r4, #20]
 800a5f4:	9a04      	ldr	r2, [sp, #16]
 800a5f6:	189b      	adds	r3, r3, r2
 800a5f8:	6163      	str	r3, [r4, #20]
 800a5fa:	e764      	b.n	800a4c6 <_svfiprintf_r+0x46>
 800a5fc:	4343      	muls	r3, r0
 800a5fe:	0035      	movs	r5, r6
 800a600:	2101      	movs	r1, #1
 800a602:	189b      	adds	r3, r3, r2
 800a604:	e7a6      	b.n	800a554 <_svfiprintf_r+0xd4>
 800a606:	2301      	movs	r3, #1
 800a608:	425b      	negs	r3, r3
 800a60a:	e7d0      	b.n	800a5ae <_svfiprintf_r+0x12e>
 800a60c:	2300      	movs	r3, #0
 800a60e:	200a      	movs	r0, #10
 800a610:	001a      	movs	r2, r3
 800a612:	3501      	adds	r5, #1
 800a614:	6063      	str	r3, [r4, #4]
 800a616:	7829      	ldrb	r1, [r5, #0]
 800a618:	1c6e      	adds	r6, r5, #1
 800a61a:	3930      	subs	r1, #48	; 0x30
 800a61c:	2909      	cmp	r1, #9
 800a61e:	d903      	bls.n	800a628 <_svfiprintf_r+0x1a8>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0c5      	beq.n	800a5b0 <_svfiprintf_r+0x130>
 800a624:	9209      	str	r2, [sp, #36]	; 0x24
 800a626:	e7c3      	b.n	800a5b0 <_svfiprintf_r+0x130>
 800a628:	4342      	muls	r2, r0
 800a62a:	0035      	movs	r5, r6
 800a62c:	2301      	movs	r3, #1
 800a62e:	1852      	adds	r2, r2, r1
 800a630:	e7f1      	b.n	800a616 <_svfiprintf_r+0x196>
 800a632:	aa07      	add	r2, sp, #28
 800a634:	9200      	str	r2, [sp, #0]
 800a636:	0021      	movs	r1, r4
 800a638:	003a      	movs	r2, r7
 800a63a:	4b10      	ldr	r3, [pc, #64]	; (800a67c <_svfiprintf_r+0x1fc>)
 800a63c:	9803      	ldr	r0, [sp, #12]
 800a63e:	f7fc ff3f 	bl	80074c0 <_printf_float>
 800a642:	9004      	str	r0, [sp, #16]
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	3301      	adds	r3, #1
 800a648:	d1d3      	bne.n	800a5f2 <_svfiprintf_r+0x172>
 800a64a:	89bb      	ldrh	r3, [r7, #12]
 800a64c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a64e:	065b      	lsls	r3, r3, #25
 800a650:	d400      	bmi.n	800a654 <_svfiprintf_r+0x1d4>
 800a652:	e72c      	b.n	800a4ae <_svfiprintf_r+0x2e>
 800a654:	2001      	movs	r0, #1
 800a656:	4240      	negs	r0, r0
 800a658:	e729      	b.n	800a4ae <_svfiprintf_r+0x2e>
 800a65a:	aa07      	add	r2, sp, #28
 800a65c:	9200      	str	r2, [sp, #0]
 800a65e:	0021      	movs	r1, r4
 800a660:	003a      	movs	r2, r7
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <_svfiprintf_r+0x1fc>)
 800a664:	9803      	ldr	r0, [sp, #12]
 800a666:	f7fd f9f1 	bl	8007a4c <_printf_i>
 800a66a:	e7ea      	b.n	800a642 <_svfiprintf_r+0x1c2>
 800a66c:	0800bcf4 	.word	0x0800bcf4
 800a670:	0800bcfa 	.word	0x0800bcfa
 800a674:	0800bcfe 	.word	0x0800bcfe
 800a678:	080074c1 	.word	0x080074c1
 800a67c:	0800a3bd 	.word	0x0800a3bd

0800a680 <_sungetc_r>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	0014      	movs	r4, r2
 800a684:	1c4b      	adds	r3, r1, #1
 800a686:	d103      	bne.n	800a690 <_sungetc_r+0x10>
 800a688:	2501      	movs	r5, #1
 800a68a:	426d      	negs	r5, r5
 800a68c:	0028      	movs	r0, r5
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	8993      	ldrh	r3, [r2, #12]
 800a692:	2220      	movs	r2, #32
 800a694:	4393      	bics	r3, r2
 800a696:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	b2ce      	uxtb	r6, r1
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	b2cd      	uxtb	r5, r1
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	d010      	beq.n	800a6c6 <_sungetc_r+0x46>
 800a6a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	dd07      	ble.n	800a6ba <_sungetc_r+0x3a>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	701e      	strb	r6, [r3, #0]
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	6063      	str	r3, [r4, #4]
 800a6b8:	e7e8      	b.n	800a68c <_sungetc_r+0xc>
 800a6ba:	0021      	movs	r1, r4
 800a6bc:	f000 fbfa 	bl	800aeb4 <__submore>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d0f2      	beq.n	800a6aa <_sungetc_r+0x2a>
 800a6c4:	e7e0      	b.n	800a688 <_sungetc_r+0x8>
 800a6c6:	6921      	ldr	r1, [r4, #16]
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	d007      	beq.n	800a6de <_sungetc_r+0x5e>
 800a6ce:	4291      	cmp	r1, r2
 800a6d0:	d205      	bcs.n	800a6de <_sungetc_r+0x5e>
 800a6d2:	1e51      	subs	r1, r2, #1
 800a6d4:	7808      	ldrb	r0, [r1, #0]
 800a6d6:	42a8      	cmp	r0, r5
 800a6d8:	d101      	bne.n	800a6de <_sungetc_r+0x5e>
 800a6da:	6021      	str	r1, [r4, #0]
 800a6dc:	e7ea      	b.n	800a6b4 <_sungetc_r+0x34>
 800a6de:	6423      	str	r3, [r4, #64]	; 0x40
 800a6e0:	0023      	movs	r3, r4
 800a6e2:	3344      	adds	r3, #68	; 0x44
 800a6e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6ea:	0023      	movs	r3, r4
 800a6ec:	3346      	adds	r3, #70	; 0x46
 800a6ee:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a6f0:	701e      	strb	r6, [r3, #0]
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e7de      	b.n	800a6b6 <_sungetc_r+0x36>

0800a6f8 <__ssrefill_r>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	000c      	movs	r4, r1
 800a6fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a6fe:	2900      	cmp	r1, #0
 800a700:	d00e      	beq.n	800a720 <__ssrefill_r+0x28>
 800a702:	0023      	movs	r3, r4
 800a704:	3344      	adds	r3, #68	; 0x44
 800a706:	4299      	cmp	r1, r3
 800a708:	d001      	beq.n	800a70e <__ssrefill_r+0x16>
 800a70a:	f7fe fdd7 	bl	80092bc <_free_r>
 800a70e:	2000      	movs	r0, #0
 800a710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a712:	6360      	str	r0, [r4, #52]	; 0x34
 800a714:	6063      	str	r3, [r4, #4]
 800a716:	4283      	cmp	r3, r0
 800a718:	d002      	beq.n	800a720 <__ssrefill_r+0x28>
 800a71a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd10      	pop	{r4, pc}
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	2001      	movs	r0, #1
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	89a2      	ldrh	r2, [r4, #12]
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	3320      	adds	r3, #32
 800a72e:	4313      	orrs	r3, r2
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	4240      	negs	r0, r0
 800a734:	e7f3      	b.n	800a71e <__ssrefill_r+0x26>
	...

0800a738 <__ssvfiscanf_r>:
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	4cae      	ldr	r4, [pc, #696]	; (800a9f4 <__ssvfiscanf_r+0x2bc>)
 800a73c:	0006      	movs	r6, r0
 800a73e:	44a5      	add	sp, r4
 800a740:	000c      	movs	r4, r1
 800a742:	2100      	movs	r1, #0
 800a744:	20be      	movs	r0, #190	; 0xbe
 800a746:	9146      	str	r1, [sp, #280]	; 0x118
 800a748:	9147      	str	r1, [sp, #284]	; 0x11c
 800a74a:	a903      	add	r1, sp, #12
 800a74c:	9148      	str	r1, [sp, #288]	; 0x120
 800a74e:	49aa      	ldr	r1, [pc, #680]	; (800a9f8 <__ssvfiscanf_r+0x2c0>)
 800a750:	0040      	lsls	r0, r0, #1
 800a752:	ad43      	add	r5, sp, #268	; 0x10c
 800a754:	5029      	str	r1, [r5, r0]
 800a756:	25c0      	movs	r5, #192	; 0xc0
 800a758:	49a8      	ldr	r1, [pc, #672]	; (800a9fc <__ssvfiscanf_r+0x2c4>)
 800a75a:	006d      	lsls	r5, r5, #1
 800a75c:	a843      	add	r0, sp, #268	; 0x10c
 800a75e:	5141      	str	r1, [r0, r5]
 800a760:	9302      	str	r3, [sp, #8]
 800a762:	7815      	ldrb	r5, [r2, #0]
 800a764:	2d00      	cmp	r5, #0
 800a766:	d100      	bne.n	800a76a <__ssvfiscanf_r+0x32>
 800a768:	e141      	b.n	800a9ee <__ssvfiscanf_r+0x2b6>
 800a76a:	4ba5      	ldr	r3, [pc, #660]	; (800aa00 <__ssvfiscanf_r+0x2c8>)
 800a76c:	2008      	movs	r0, #8
 800a76e:	5d59      	ldrb	r1, [r3, r5]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2308      	movs	r3, #8
 800a774:	1c57      	adds	r7, r2, #1
 800a776:	400b      	ands	r3, r1
 800a778:	4201      	tst	r1, r0
 800a77a:	d01e      	beq.n	800a7ba <__ssvfiscanf_r+0x82>
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	dd11      	ble.n	800a7a6 <__ssvfiscanf_r+0x6e>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	9900      	ldr	r1, [sp, #0]
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	5c8a      	ldrb	r2, [r1, r2]
 800a78a:	2108      	movs	r1, #8
 800a78c:	420a      	tst	r2, r1
 800a78e:	d101      	bne.n	800a794 <__ssvfiscanf_r+0x5c>
 800a790:	003a      	movs	r2, r7
 800a792:	e7e6      	b.n	800a762 <__ssvfiscanf_r+0x2a>
 800a794:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a796:	3301      	adds	r3, #1
 800a798:	3201      	adds	r2, #1
 800a79a:	9247      	str	r2, [sp, #284]	; 0x11c
 800a79c:	6862      	ldr	r2, [r4, #4]
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	3a01      	subs	r2, #1
 800a7a2:	6062      	str	r2, [r4, #4]
 800a7a4:	e7ea      	b.n	800a77c <__ssvfiscanf_r+0x44>
 800a7a6:	22c0      	movs	r2, #192	; 0xc0
 800a7a8:	ab43      	add	r3, sp, #268	; 0x10c
 800a7aa:	0052      	lsls	r2, r2, #1
 800a7ac:	0021      	movs	r1, r4
 800a7ae:	0030      	movs	r0, r6
 800a7b0:	589b      	ldr	r3, [r3, r2]
 800a7b2:	4798      	blx	r3
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d0e4      	beq.n	800a782 <__ssvfiscanf_r+0x4a>
 800a7b8:	e7ea      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a7ba:	2d25      	cmp	r5, #37	; 0x25
 800a7bc:	d162      	bne.n	800a884 <__ssvfiscanf_r+0x14c>
 800a7be:	9345      	str	r3, [sp, #276]	; 0x114
 800a7c0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7c2:	7853      	ldrb	r3, [r2, #1]
 800a7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c6:	d102      	bne.n	800a7ce <__ssvfiscanf_r+0x96>
 800a7c8:	3b1a      	subs	r3, #26
 800a7ca:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7cc:	1c97      	adds	r7, r2, #2
 800a7ce:	003d      	movs	r5, r7
 800a7d0:	220a      	movs	r2, #10
 800a7d2:	7829      	ldrb	r1, [r5, #0]
 800a7d4:	1c6b      	adds	r3, r5, #1
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	000b      	movs	r3, r1
 800a7da:	3b30      	subs	r3, #48	; 0x30
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d91e      	bls.n	800a81e <__ssvfiscanf_r+0xe6>
 800a7e0:	4f88      	ldr	r7, [pc, #544]	; (800aa04 <__ssvfiscanf_r+0x2cc>)
 800a7e2:	2203      	movs	r2, #3
 800a7e4:	0038      	movs	r0, r7
 800a7e6:	f7fd feac 	bl	8008542 <memchr>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d006      	beq.n	800a7fc <__ssvfiscanf_r+0xc4>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	1bc0      	subs	r0, r0, r7
 800a7f2:	4083      	lsls	r3, r0
 800a7f4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a7f6:	9d01      	ldr	r5, [sp, #4]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7fc:	1c6f      	adds	r7, r5, #1
 800a7fe:	782d      	ldrb	r5, [r5, #0]
 800a800:	2d78      	cmp	r5, #120	; 0x78
 800a802:	d807      	bhi.n	800a814 <__ssvfiscanf_r+0xdc>
 800a804:	2d57      	cmp	r5, #87	; 0x57
 800a806:	d811      	bhi.n	800a82c <__ssvfiscanf_r+0xf4>
 800a808:	2d25      	cmp	r5, #37	; 0x25
 800a80a:	d03b      	beq.n	800a884 <__ssvfiscanf_r+0x14c>
 800a80c:	d835      	bhi.n	800a87a <__ssvfiscanf_r+0x142>
 800a80e:	2d00      	cmp	r5, #0
 800a810:	d100      	bne.n	800a814 <__ssvfiscanf_r+0xdc>
 800a812:	e0e9      	b.n	800a9e8 <__ssvfiscanf_r+0x2b0>
 800a814:	2303      	movs	r3, #3
 800a816:	9349      	str	r3, [sp, #292]	; 0x124
 800a818:	3307      	adds	r3, #7
 800a81a:	9344      	str	r3, [sp, #272]	; 0x110
 800a81c:	e06d      	b.n	800a8fa <__ssvfiscanf_r+0x1c2>
 800a81e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a820:	9d01      	ldr	r5, [sp, #4]
 800a822:	4353      	muls	r3, r2
 800a824:	3b30      	subs	r3, #48	; 0x30
 800a826:	185b      	adds	r3, r3, r1
 800a828:	9345      	str	r3, [sp, #276]	; 0x114
 800a82a:	e7d2      	b.n	800a7d2 <__ssvfiscanf_r+0x9a>
 800a82c:	0028      	movs	r0, r5
 800a82e:	3858      	subs	r0, #88	; 0x58
 800a830:	2820      	cmp	r0, #32
 800a832:	d8ef      	bhi.n	800a814 <__ssvfiscanf_r+0xdc>
 800a834:	f7f5 fc78 	bl	8000128 <__gnu_thumb1_case_shi>
 800a838:	ffee004d 	.word	0xffee004d
 800a83c:	007fffee 	.word	0x007fffee
 800a840:	ffeeffee 	.word	0xffeeffee
 800a844:	ffeeffee 	.word	0xffeeffee
 800a848:	ffeeffee 	.word	0xffeeffee
 800a84c:	008affee 	.word	0x008affee
 800a850:	0024007d 	.word	0x0024007d
 800a854:	00240024 	.word	0x00240024
 800a858:	0059ffee 	.word	0x0059ffee
 800a85c:	ffeeffee 	.word	0xffeeffee
 800a860:	ffeeffee 	.word	0xffeeffee
 800a864:	005d0092 	.word	0x005d0092
 800a868:	ffee0049 	.word	0xffee0049
 800a86c:	0090ffee 	.word	0x0090ffee
 800a870:	007dffee 	.word	0x007dffee
 800a874:	ffeeffee 	.word	0xffeeffee
 800a878:	004d      	.short	0x004d
 800a87a:	3d45      	subs	r5, #69	; 0x45
 800a87c:	2d02      	cmp	r5, #2
 800a87e:	d8c9      	bhi.n	800a814 <__ssvfiscanf_r+0xdc>
 800a880:	2305      	movs	r3, #5
 800a882:	e039      	b.n	800a8f8 <__ssvfiscanf_r+0x1c0>
 800a884:	6863      	ldr	r3, [r4, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd0d      	ble.n	800a8a6 <__ssvfiscanf_r+0x16e>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	781a      	ldrb	r2, [r3, #0]
 800a88e:	42aa      	cmp	r2, r5
 800a890:	d000      	beq.n	800a894 <__ssvfiscanf_r+0x15c>
 800a892:	e0ac      	b.n	800a9ee <__ssvfiscanf_r+0x2b6>
 800a894:	3301      	adds	r3, #1
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a89c:	3a01      	subs	r2, #1
 800a89e:	3301      	adds	r3, #1
 800a8a0:	6062      	str	r2, [r4, #4]
 800a8a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a8a4:	e774      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a8a6:	22c0      	movs	r2, #192	; 0xc0
 800a8a8:	ab43      	add	r3, sp, #268	; 0x10c
 800a8aa:	0052      	lsls	r2, r2, #1
 800a8ac:	0021      	movs	r1, r4
 800a8ae:	0030      	movs	r0, r6
 800a8b0:	589b      	ldr	r3, [r3, r2]
 800a8b2:	4798      	blx	r3
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d0e8      	beq.n	800a88a <__ssvfiscanf_r+0x152>
 800a8b8:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d000      	beq.n	800a8c0 <__ssvfiscanf_r+0x188>
 800a8be:	e08f      	b.n	800a9e0 <__ssvfiscanf_r+0x2a8>
 800a8c0:	3801      	subs	r0, #1
 800a8c2:	23a5      	movs	r3, #165	; 0xa5
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	449d      	add	sp, r3
 800a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ca:	2320      	movs	r3, #32
 800a8cc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8d2:	2380      	movs	r3, #128	; 0x80
 800a8d4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8dc:	2310      	movs	r3, #16
 800a8de:	9344      	str	r3, [sp, #272]	; 0x110
 800a8e0:	236e      	movs	r3, #110	; 0x6e
 800a8e2:	42ab      	cmp	r3, r5
 800a8e4:	419b      	sbcs	r3, r3
 800a8e6:	425b      	negs	r3, r3
 800a8e8:	e001      	b.n	800a8ee <__ssvfiscanf_r+0x1b6>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9344      	str	r3, [sp, #272]	; 0x110
 800a8ee:	3303      	adds	r3, #3
 800a8f0:	e002      	b.n	800a8f8 <__ssvfiscanf_r+0x1c0>
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	9344      	str	r3, [sp, #272]	; 0x110
 800a8f6:	3b04      	subs	r3, #4
 800a8f8:	9349      	str	r3, [sp, #292]	; 0x124
 800a8fa:	6863      	ldr	r3, [r4, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd3c      	ble.n	800a97a <__ssvfiscanf_r+0x242>
 800a900:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a902:	065b      	lsls	r3, r3, #25
 800a904:	d406      	bmi.n	800a914 <__ssvfiscanf_r+0x1dc>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	9900      	ldr	r1, [sp, #0]
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	5c8a      	ldrb	r2, [r1, r2]
 800a90e:	2108      	movs	r1, #8
 800a910:	420a      	tst	r2, r1
 800a912:	d13c      	bne.n	800a98e <__ssvfiscanf_r+0x256>
 800a914:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a916:	2b02      	cmp	r3, #2
 800a918:	dc4e      	bgt.n	800a9b8 <__ssvfiscanf_r+0x280>
 800a91a:	0022      	movs	r2, r4
 800a91c:	0030      	movs	r0, r6
 800a91e:	ab02      	add	r3, sp, #8
 800a920:	a943      	add	r1, sp, #268	; 0x10c
 800a922:	f000 f873 	bl	800aa0c <_scanf_chars>
 800a926:	2801      	cmp	r0, #1
 800a928:	d061      	beq.n	800a9ee <__ssvfiscanf_r+0x2b6>
 800a92a:	2802      	cmp	r0, #2
 800a92c:	d000      	beq.n	800a930 <__ssvfiscanf_r+0x1f8>
 800a92e:	e72f      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a930:	e7c2      	b.n	800a8b8 <__ssvfiscanf_r+0x180>
 800a932:	230a      	movs	r3, #10
 800a934:	e7d3      	b.n	800a8de <__ssvfiscanf_r+0x1a6>
 800a936:	0039      	movs	r1, r7
 800a938:	a803      	add	r0, sp, #12
 800a93a:	f000 fa7e 	bl	800ae3a <__sccl>
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a942:	0007      	movs	r7, r0
 800a944:	4313      	orrs	r3, r2
 800a946:	9343      	str	r3, [sp, #268]	; 0x10c
 800a948:	2301      	movs	r3, #1
 800a94a:	e7d5      	b.n	800a8f8 <__ssvfiscanf_r+0x1c0>
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a950:	4313      	orrs	r3, r2
 800a952:	9343      	str	r3, [sp, #268]	; 0x10c
 800a954:	2300      	movs	r3, #0
 800a956:	e7cf      	b.n	800a8f8 <__ssvfiscanf_r+0x1c0>
 800a958:	2302      	movs	r3, #2
 800a95a:	e7cd      	b.n	800a8f8 <__ssvfiscanf_r+0x1c0>
 800a95c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a95e:	06d3      	lsls	r3, r2, #27
 800a960:	d500      	bpl.n	800a964 <__ssvfiscanf_r+0x22c>
 800a962:	e715      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a968:	1d18      	adds	r0, r3, #4
 800a96a:	9002      	str	r0, [sp, #8]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	07d5      	lsls	r5, r2, #31
 800a970:	d501      	bpl.n	800a976 <__ssvfiscanf_r+0x23e>
 800a972:	8019      	strh	r1, [r3, #0]
 800a974:	e70c      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a976:	6019      	str	r1, [r3, #0]
 800a978:	e70a      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a97a:	22c0      	movs	r2, #192	; 0xc0
 800a97c:	ab43      	add	r3, sp, #268	; 0x10c
 800a97e:	0052      	lsls	r2, r2, #1
 800a980:	0021      	movs	r1, r4
 800a982:	0030      	movs	r0, r6
 800a984:	589b      	ldr	r3, [r3, r2]
 800a986:	4798      	blx	r3
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0b9      	beq.n	800a900 <__ssvfiscanf_r+0x1c8>
 800a98c:	e794      	b.n	800a8b8 <__ssvfiscanf_r+0x180>
 800a98e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a990:	3201      	adds	r2, #1
 800a992:	9247      	str	r2, [sp, #284]	; 0x11c
 800a994:	6862      	ldr	r2, [r4, #4]
 800a996:	3a01      	subs	r2, #1
 800a998:	6062      	str	r2, [r4, #4]
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	dd02      	ble.n	800a9a4 <__ssvfiscanf_r+0x26c>
 800a99e:	3301      	adds	r3, #1
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	e7b0      	b.n	800a906 <__ssvfiscanf_r+0x1ce>
 800a9a4:	22c0      	movs	r2, #192	; 0xc0
 800a9a6:	ab43      	add	r3, sp, #268	; 0x10c
 800a9a8:	0052      	lsls	r2, r2, #1
 800a9aa:	0021      	movs	r1, r4
 800a9ac:	0030      	movs	r0, r6
 800a9ae:	589b      	ldr	r3, [r3, r2]
 800a9b0:	4798      	blx	r3
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d0a7      	beq.n	800a906 <__ssvfiscanf_r+0x1ce>
 800a9b6:	e77f      	b.n	800a8b8 <__ssvfiscanf_r+0x180>
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	dc06      	bgt.n	800a9ca <__ssvfiscanf_r+0x292>
 800a9bc:	0022      	movs	r2, r4
 800a9be:	0030      	movs	r0, r6
 800a9c0:	ab02      	add	r3, sp, #8
 800a9c2:	a943      	add	r1, sp, #268	; 0x10c
 800a9c4:	f000 f880 	bl	800aac8 <_scanf_i>
 800a9c8:	e7ad      	b.n	800a926 <__ssvfiscanf_r+0x1ee>
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <__ssvfiscanf_r+0x2d0>)
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d100      	bne.n	800a9d2 <__ssvfiscanf_r+0x29a>
 800a9d0:	e6de      	b.n	800a790 <__ssvfiscanf_r+0x58>
 800a9d2:	0022      	movs	r2, r4
 800a9d4:	0030      	movs	r0, r6
 800a9d6:	ab02      	add	r3, sp, #8
 800a9d8:	a943      	add	r1, sp, #268	; 0x10c
 800a9da:	f7fd f947 	bl	8007c6c <_scanf_float>
 800a9de:	e7a2      	b.n	800a926 <__ssvfiscanf_r+0x1ee>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	065b      	lsls	r3, r3, #25
 800a9e4:	d400      	bmi.n	800a9e8 <__ssvfiscanf_r+0x2b0>
 800a9e6:	e76c      	b.n	800a8c2 <__ssvfiscanf_r+0x18a>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	4240      	negs	r0, r0
 800a9ec:	e769      	b.n	800a8c2 <__ssvfiscanf_r+0x18a>
 800a9ee:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a9f0:	e767      	b.n	800a8c2 <__ssvfiscanf_r+0x18a>
 800a9f2:	46c0      	nop			; (mov r8, r8)
 800a9f4:	fffffd6c 	.word	0xfffffd6c
 800a9f8:	0800a681 	.word	0x0800a681
 800a9fc:	0800a6f9 	.word	0x0800a6f9
 800aa00:	0800b971 	.word	0x0800b971
 800aa04:	0800bcfa 	.word	0x0800bcfa
 800aa08:	08007c6d 	.word	0x08007c6d

0800aa0c <_scanf_chars>:
 800aa0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa0e:	0015      	movs	r5, r2
 800aa10:	688a      	ldr	r2, [r1, #8]
 800aa12:	000c      	movs	r4, r1
 800aa14:	9001      	str	r0, [sp, #4]
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	d105      	bne.n	800aa26 <_scanf_chars+0x1a>
 800aa1a:	6989      	ldr	r1, [r1, #24]
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	d000      	beq.n	800aa24 <_scanf_chars+0x18>
 800aa22:	3a02      	subs	r2, #2
 800aa24:	60a2      	str	r2, [r4, #8]
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	06d2      	lsls	r2, r2, #27
 800aa2a:	d403      	bmi.n	800aa34 <_scanf_chars+0x28>
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	1d11      	adds	r1, r2, #4
 800aa30:	6019      	str	r1, [r3, #0]
 800aa32:	6817      	ldr	r7, [r2, #0]
 800aa34:	2600      	movs	r6, #0
 800aa36:	69a0      	ldr	r0, [r4, #24]
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d013      	beq.n	800aa64 <_scanf_chars+0x58>
 800aa3c:	2801      	cmp	r0, #1
 800aa3e:	d108      	bne.n	800aa52 <_scanf_chars+0x46>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	6962      	ldr	r2, [r4, #20]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	5cd3      	ldrb	r3, [r2, r3]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10b      	bne.n	800aa64 <_scanf_chars+0x58>
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	d038      	beq.n	800aac2 <_scanf_chars+0xb6>
 800aa50:	e026      	b.n	800aaa0 <_scanf_chars+0x94>
 800aa52:	2802      	cmp	r0, #2
 800aa54:	d124      	bne.n	800aaa0 <_scanf_chars+0x94>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	4a1a      	ldr	r2, [pc, #104]	; (800aac4 <_scanf_chars+0xb8>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	5cd3      	ldrb	r3, [r2, r3]
 800aa5e:	2208      	movs	r2, #8
 800aa60:	4213      	tst	r3, r2
 800aa62:	d11d      	bne.n	800aaa0 <_scanf_chars+0x94>
 800aa64:	2210      	movs	r2, #16
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	3601      	adds	r6, #1
 800aa6a:	4213      	tst	r3, r2
 800aa6c:	d103      	bne.n	800aa76 <_scanf_chars+0x6a>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	703b      	strb	r3, [r7, #0]
 800aa74:	3701      	adds	r7, #1
 800aa76:	682a      	ldr	r2, [r5, #0]
 800aa78:	686b      	ldr	r3, [r5, #4]
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	68a2      	ldr	r2, [r4, #8]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	3a01      	subs	r2, #1
 800aa84:	606b      	str	r3, [r5, #4]
 800aa86:	60a2      	str	r2, [r4, #8]
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	d009      	beq.n	800aaa0 <_scanf_chars+0x94>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dcd2      	bgt.n	800aa36 <_scanf_chars+0x2a>
 800aa90:	23c0      	movs	r3, #192	; 0xc0
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	0029      	movs	r1, r5
 800aa96:	58e3      	ldr	r3, [r4, r3]
 800aa98:	9801      	ldr	r0, [sp, #4]
 800aa9a:	4798      	blx	r3
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d0ca      	beq.n	800aa36 <_scanf_chars+0x2a>
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	2310      	movs	r3, #16
 800aaa4:	0011      	movs	r1, r2
 800aaa6:	4019      	ands	r1, r3
 800aaa8:	421a      	tst	r2, r3
 800aaaa:	d106      	bne.n	800aaba <_scanf_chars+0xae>
 800aaac:	68e3      	ldr	r3, [r4, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60e3      	str	r3, [r4, #12]
 800aab2:	69a3      	ldr	r3, [r4, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d000      	beq.n	800aaba <_scanf_chars+0xae>
 800aab8:	7039      	strb	r1, [r7, #0]
 800aaba:	2000      	movs	r0, #0
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	199b      	adds	r3, r3, r6
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac4:	0800b971 	.word	0x0800b971

0800aac8 <_scanf_i>:
 800aac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaca:	b08b      	sub	sp, #44	; 0x2c
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	4b7a      	ldr	r3, [pc, #488]	; (800acb8 <_scanf_i+0x1f0>)
 800aad0:	0016      	movs	r6, r2
 800aad2:	9004      	str	r0, [sp, #16]
 800aad4:	aa07      	add	r2, sp, #28
 800aad6:	cba1      	ldmia	r3!, {r0, r5, r7}
 800aad8:	c2a1      	stmia	r2!, {r0, r5, r7}
 800aada:	4a78      	ldr	r2, [pc, #480]	; (800acbc <_scanf_i+0x1f4>)
 800aadc:	698b      	ldr	r3, [r1, #24]
 800aade:	000c      	movs	r4, r1
 800aae0:	9205      	str	r2, [sp, #20]
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d001      	beq.n	800aaea <_scanf_i+0x22>
 800aae6:	4b76      	ldr	r3, [pc, #472]	; (800acc0 <_scanf_i+0x1f8>)
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	22ae      	movs	r2, #174	; 0xae
 800aaec:	2000      	movs	r0, #0
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	0052      	lsls	r2, r2, #1
 800aaf2:	1e59      	subs	r1, r3, #1
 800aaf4:	9003      	str	r0, [sp, #12]
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	d905      	bls.n	800ab06 <_scanf_i+0x3e>
 800aafa:	3b5e      	subs	r3, #94	; 0x5e
 800aafc:	3bff      	subs	r3, #255	; 0xff
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	235e      	movs	r3, #94	; 0x5e
 800ab02:	33ff      	adds	r3, #255	; 0xff
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	0023      	movs	r3, r4
 800ab08:	331c      	adds	r3, #28
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	23d0      	movs	r3, #208	; 0xd0
 800ab0e:	2700      	movs	r7, #0
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	4313      	orrs	r3, r2
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	9b00      	ldr	r3, [sp, #0]
 800ab1a:	9302      	str	r3, [sp, #8]
 800ab1c:	6833      	ldr	r3, [r6, #0]
 800ab1e:	a807      	add	r0, sp, #28
 800ab20:	7819      	ldrb	r1, [r3, #0]
 800ab22:	00bb      	lsls	r3, r7, #2
 800ab24:	2202      	movs	r2, #2
 800ab26:	5818      	ldr	r0, [r3, r0]
 800ab28:	f7fd fd0b 	bl	8008542 <memchr>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d02a      	beq.n	800ab86 <_scanf_i+0xbe>
 800ab30:	2f01      	cmp	r7, #1
 800ab32:	d161      	bne.n	800abf8 <_scanf_i+0x130>
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <_scanf_i+0x80>
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	6822      	ldr	r2, [r4, #0]
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	33f9      	adds	r3, #249	; 0xf9
 800ab42:	33ff      	adds	r3, #255	; 0xff
 800ab44:	4313      	orrs	r3, r2
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	4a5e      	ldr	r2, [pc, #376]	; (800acc4 <_scanf_i+0x1fc>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	1e5a      	subs	r2, r3, #1
 800ab54:	60a2      	str	r2, [r4, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d015      	beq.n	800ab86 <_scanf_i+0xbe>
 800ab5a:	6833      	ldr	r3, [r6, #0]
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	6032      	str	r2, [r6, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	9a02      	ldr	r2, [sp, #8]
 800ab64:	7013      	strb	r3, [r2, #0]
 800ab66:	6873      	ldr	r3, [r6, #4]
 800ab68:	1c55      	adds	r5, r2, #1
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	6073      	str	r3, [r6, #4]
 800ab6e:	9502      	str	r5, [sp, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dc08      	bgt.n	800ab86 <_scanf_i+0xbe>
 800ab74:	23c0      	movs	r3, #192	; 0xc0
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	0031      	movs	r1, r6
 800ab7a:	58e3      	ldr	r3, [r4, r3]
 800ab7c:	9804      	ldr	r0, [sp, #16]
 800ab7e:	4798      	blx	r3
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d000      	beq.n	800ab86 <_scanf_i+0xbe>
 800ab84:	e080      	b.n	800ac88 <_scanf_i+0x1c0>
 800ab86:	3701      	adds	r7, #1
 800ab88:	2f03      	cmp	r7, #3
 800ab8a:	d1c7      	bne.n	800ab1c <_scanf_i+0x54>
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <_scanf_i+0xce>
 800ab92:	330a      	adds	r3, #10
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	2110      	movs	r1, #16
 800ab98:	2700      	movs	r7, #0
 800ab9a:	6863      	ldr	r3, [r4, #4]
 800ab9c:	6960      	ldr	r0, [r4, #20]
 800ab9e:	1ac9      	subs	r1, r1, r3
 800aba0:	4b49      	ldr	r3, [pc, #292]	; (800acc8 <_scanf_i+0x200>)
 800aba2:	18c9      	adds	r1, r1, r3
 800aba4:	f000 f949 	bl	800ae3a <__sccl>
 800aba8:	9d02      	ldr	r5, [sp, #8]
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d040      	beq.n	800ac36 <_scanf_i+0x16e>
 800abb4:	6831      	ldr	r1, [r6, #0]
 800abb6:	6963      	ldr	r3, [r4, #20]
 800abb8:	780a      	ldrb	r2, [r1, #0]
 800abba:	5c9b      	ldrb	r3, [r3, r2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d03a      	beq.n	800ac36 <_scanf_i+0x16e>
 800abc0:	2a30      	cmp	r2, #48	; 0x30
 800abc2:	d129      	bne.n	800ac18 <_scanf_i+0x150>
 800abc4:	2380      	movs	r3, #128	; 0x80
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	4218      	tst	r0, r3
 800abca:	d025      	beq.n	800ac18 <_scanf_i+0x150>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	3701      	adds	r7, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <_scanf_i+0x118>
 800abd4:	001a      	movs	r2, r3
 800abd6:	9b02      	ldr	r3, [sp, #8]
 800abd8:	3a01      	subs	r2, #1
 800abda:	3301      	adds	r3, #1
 800abdc:	9203      	str	r2, [sp, #12]
 800abde:	60a3      	str	r3, [r4, #8]
 800abe0:	6873      	ldr	r3, [r6, #4]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	6073      	str	r3, [r6, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dd1d      	ble.n	800ac26 <_scanf_i+0x15e>
 800abea:	6833      	ldr	r3, [r6, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	6033      	str	r3, [r6, #0]
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	e7d8      	b.n	800abaa <_scanf_i+0xe2>
 800abf8:	2f02      	cmp	r7, #2
 800abfa:	d1a9      	bne.n	800ab50 <_scanf_i+0x88>
 800abfc:	21c0      	movs	r1, #192	; 0xc0
 800abfe:	2380      	movs	r3, #128	; 0x80
 800ac00:	6822      	ldr	r2, [r4, #0]
 800ac02:	00c9      	lsls	r1, r1, #3
 800ac04:	4011      	ands	r1, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4299      	cmp	r1, r3
 800ac0a:	d1bf      	bne.n	800ab8c <_scanf_i+0xc4>
 800ac0c:	3bf1      	subs	r3, #241	; 0xf1
 800ac0e:	3bff      	subs	r3, #255	; 0xff
 800ac10:	6063      	str	r3, [r4, #4]
 800ac12:	33f0      	adds	r3, #240	; 0xf0
 800ac14:	4313      	orrs	r3, r2
 800ac16:	e79a      	b.n	800ab4e <_scanf_i+0x86>
 800ac18:	4b2c      	ldr	r3, [pc, #176]	; (800accc <_scanf_i+0x204>)
 800ac1a:	4003      	ands	r3, r0
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	780b      	ldrb	r3, [r1, #0]
 800ac20:	702b      	strb	r3, [r5, #0]
 800ac22:	3501      	adds	r5, #1
 800ac24:	e7dc      	b.n	800abe0 <_scanf_i+0x118>
 800ac26:	23c0      	movs	r3, #192	; 0xc0
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	0031      	movs	r1, r6
 800ac2c:	58e3      	ldr	r3, [r4, r3]
 800ac2e:	9804      	ldr	r0, [sp, #16]
 800ac30:	4798      	blx	r3
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0dc      	beq.n	800abf0 <_scanf_i+0x128>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	05db      	lsls	r3, r3, #23
 800ac3a:	d50e      	bpl.n	800ac5a <_scanf_i+0x192>
 800ac3c:	9b00      	ldr	r3, [sp, #0]
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	d907      	bls.n	800ac52 <_scanf_i+0x18a>
 800ac42:	23be      	movs	r3, #190	; 0xbe
 800ac44:	3d01      	subs	r5, #1
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	0032      	movs	r2, r6
 800ac4a:	7829      	ldrb	r1, [r5, #0]
 800ac4c:	58e3      	ldr	r3, [r4, r3]
 800ac4e:	9804      	ldr	r0, [sp, #16]
 800ac50:	4798      	blx	r3
 800ac52:	9b00      	ldr	r3, [sp, #0]
 800ac54:	2001      	movs	r0, #1
 800ac56:	429d      	cmp	r5, r3
 800ac58:	d029      	beq.n	800acae <_scanf_i+0x1e6>
 800ac5a:	6821      	ldr	r1, [r4, #0]
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	000a      	movs	r2, r1
 800ac60:	401a      	ands	r2, r3
 800ac62:	4219      	tst	r1, r3
 800ac64:	d11c      	bne.n	800aca0 <_scanf_i+0x1d8>
 800ac66:	702a      	strb	r2, [r5, #0]
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	9900      	ldr	r1, [sp, #0]
 800ac6c:	9804      	ldr	r0, [sp, #16]
 800ac6e:	9e05      	ldr	r6, [sp, #20]
 800ac70:	47b0      	blx	r6
 800ac72:	9b01      	ldr	r3, [sp, #4]
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	0691      	lsls	r1, r2, #26
 800ac7a:	d507      	bpl.n	800ac8c <_scanf_i+0x1c4>
 800ac7c:	9901      	ldr	r1, [sp, #4]
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	600a      	str	r2, [r1, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6018      	str	r0, [r3, #0]
 800ac86:	e008      	b.n	800ac9a <_scanf_i+0x1d2>
 800ac88:	2700      	movs	r7, #0
 800ac8a:	e7d4      	b.n	800ac36 <_scanf_i+0x16e>
 800ac8c:	1d19      	adds	r1, r3, #4
 800ac8e:	07d6      	lsls	r6, r2, #31
 800ac90:	d50f      	bpl.n	800acb2 <_scanf_i+0x1ea>
 800ac92:	9a01      	ldr	r2, [sp, #4]
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	8018      	strh	r0, [r3, #0]
 800ac9a:	68e3      	ldr	r3, [r4, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60e3      	str	r3, [r4, #12]
 800aca0:	2000      	movs	r0, #0
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	1aed      	subs	r5, r5, r3
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	19ed      	adds	r5, r5, r7
 800acaa:	195b      	adds	r3, r3, r5
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	b00b      	add	sp, #44	; 0x2c
 800acb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	6011      	str	r1, [r2, #0]
 800acb6:	e7e4      	b.n	800ac82 <_scanf_i+0x1ba>
 800acb8:	0800b844 	.word	0x0800b844
 800acbc:	08007351 	.word	0x08007351
 800acc0:	0800b151 	.word	0x0800b151
 800acc4:	fffffaff 	.word	0xfffffaff
 800acc8:	0800bd05 	.word	0x0800bd05
 800accc:	fffff6ff 	.word	0xfffff6ff

0800acd0 <__sflush_r>:
 800acd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acd2:	898b      	ldrh	r3, [r1, #12]
 800acd4:	0005      	movs	r5, r0
 800acd6:	000c      	movs	r4, r1
 800acd8:	071a      	lsls	r2, r3, #28
 800acda:	d45c      	bmi.n	800ad96 <__sflush_r+0xc6>
 800acdc:	684a      	ldr	r2, [r1, #4]
 800acde:	2a00      	cmp	r2, #0
 800ace0:	dc04      	bgt.n	800acec <__sflush_r+0x1c>
 800ace2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	dc01      	bgt.n	800acec <__sflush_r+0x1c>
 800ace8:	2000      	movs	r0, #0
 800acea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800acee:	2f00      	cmp	r7, #0
 800acf0:	d0fa      	beq.n	800ace8 <__sflush_r+0x18>
 800acf2:	2200      	movs	r2, #0
 800acf4:	2080      	movs	r0, #128	; 0x80
 800acf6:	682e      	ldr	r6, [r5, #0]
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	001a      	movs	r2, r3
 800acfc:	0140      	lsls	r0, r0, #5
 800acfe:	6a21      	ldr	r1, [r4, #32]
 800ad00:	4002      	ands	r2, r0
 800ad02:	4203      	tst	r3, r0
 800ad04:	d034      	beq.n	800ad70 <__sflush_r+0xa0>
 800ad06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	075b      	lsls	r3, r3, #29
 800ad0c:	d506      	bpl.n	800ad1c <__sflush_r+0x4c>
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	1ac0      	subs	r0, r0, r3
 800ad12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <__sflush_r+0x4c>
 800ad18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad1a:	1ac0      	subs	r0, r0, r3
 800ad1c:	0002      	movs	r2, r0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	0028      	movs	r0, r5
 800ad22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad24:	6a21      	ldr	r1, [r4, #32]
 800ad26:	47b8      	blx	r7
 800ad28:	89a2      	ldrh	r2, [r4, #12]
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d106      	bne.n	800ad3c <__sflush_r+0x6c>
 800ad2e:	6829      	ldr	r1, [r5, #0]
 800ad30:	291d      	cmp	r1, #29
 800ad32:	d82c      	bhi.n	800ad8e <__sflush_r+0xbe>
 800ad34:	4b2a      	ldr	r3, [pc, #168]	; (800ade0 <__sflush_r+0x110>)
 800ad36:	410b      	asrs	r3, r1
 800ad38:	07db      	lsls	r3, r3, #31
 800ad3a:	d428      	bmi.n	800ad8e <__sflush_r+0xbe>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6063      	str	r3, [r4, #4]
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	04d2      	lsls	r2, r2, #19
 800ad46:	d505      	bpl.n	800ad54 <__sflush_r+0x84>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <__sflush_r+0x82>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d100      	bne.n	800ad54 <__sflush_r+0x84>
 800ad52:	6560      	str	r0, [r4, #84]	; 0x54
 800ad54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad56:	602e      	str	r6, [r5, #0]
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	d0c5      	beq.n	800ace8 <__sflush_r+0x18>
 800ad5c:	0023      	movs	r3, r4
 800ad5e:	3344      	adds	r3, #68	; 0x44
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d002      	beq.n	800ad6a <__sflush_r+0x9a>
 800ad64:	0028      	movs	r0, r5
 800ad66:	f7fe faa9 	bl	80092bc <_free_r>
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad6e:	e7bc      	b.n	800acea <__sflush_r+0x1a>
 800ad70:	2301      	movs	r3, #1
 800ad72:	0028      	movs	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d1c6      	bne.n	800ad08 <__sflush_r+0x38>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0c3      	beq.n	800ad08 <__sflush_r+0x38>
 800ad80:	2b1d      	cmp	r3, #29
 800ad82:	d001      	beq.n	800ad88 <__sflush_r+0xb8>
 800ad84:	2b16      	cmp	r3, #22
 800ad86:	d101      	bne.n	800ad8c <__sflush_r+0xbc>
 800ad88:	602e      	str	r6, [r5, #0]
 800ad8a:	e7ad      	b.n	800ace8 <__sflush_r+0x18>
 800ad8c:	89a2      	ldrh	r2, [r4, #12]
 800ad8e:	2340      	movs	r3, #64	; 0x40
 800ad90:	4313      	orrs	r3, r2
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	e7a9      	b.n	800acea <__sflush_r+0x1a>
 800ad96:	690e      	ldr	r6, [r1, #16]
 800ad98:	2e00      	cmp	r6, #0
 800ad9a:	d0a5      	beq.n	800ace8 <__sflush_r+0x18>
 800ad9c:	680f      	ldr	r7, [r1, #0]
 800ad9e:	600e      	str	r6, [r1, #0]
 800ada0:	1bba      	subs	r2, r7, r6
 800ada2:	9201      	str	r2, [sp, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	079b      	lsls	r3, r3, #30
 800ada8:	d100      	bne.n	800adac <__sflush_r+0xdc>
 800adaa:	694a      	ldr	r2, [r1, #20]
 800adac:	60a2      	str	r2, [r4, #8]
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dd99      	ble.n	800ace8 <__sflush_r+0x18>
 800adb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adb6:	0032      	movs	r2, r6
 800adb8:	001f      	movs	r7, r3
 800adba:	0028      	movs	r0, r5
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	6a21      	ldr	r1, [r4, #32]
 800adc0:	47b8      	blx	r7
 800adc2:	2800      	cmp	r0, #0
 800adc4:	dc06      	bgt.n	800add4 <__sflush_r+0x104>
 800adc6:	2340      	movs	r3, #64	; 0x40
 800adc8:	2001      	movs	r0, #1
 800adca:	89a2      	ldrh	r2, [r4, #12]
 800adcc:	4240      	negs	r0, r0
 800adce:	4313      	orrs	r3, r2
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	e78a      	b.n	800acea <__sflush_r+0x1a>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	1836      	adds	r6, r6, r0
 800add8:	1a1b      	subs	r3, r3, r0
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	e7e7      	b.n	800adae <__sflush_r+0xde>
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	dfbffffe 	.word	0xdfbffffe

0800ade4 <_fflush_r>:
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	0005      	movs	r5, r0
 800adea:	000c      	movs	r4, r1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <_fflush_r+0x12>
 800adf0:	2500      	movs	r5, #0
 800adf2:	0028      	movs	r0, r5
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d004      	beq.n	800ae04 <_fflush_r+0x20>
 800adfa:	6a03      	ldr	r3, [r0, #32]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <_fflush_r+0x20>
 800ae00:	f7fd f9cc 	bl	800819c <__sinit>
 800ae04:	220c      	movs	r2, #12
 800ae06:	5ea3      	ldrsh	r3, [r4, r2]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f1      	beq.n	800adf0 <_fflush_r+0xc>
 800ae0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae0e:	07d2      	lsls	r2, r2, #31
 800ae10:	d404      	bmi.n	800ae1c <_fflush_r+0x38>
 800ae12:	059b      	lsls	r3, r3, #22
 800ae14:	d402      	bmi.n	800ae1c <_fflush_r+0x38>
 800ae16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae18:	f7fd fb91 	bl	800853e <__retarget_lock_acquire_recursive>
 800ae1c:	0028      	movs	r0, r5
 800ae1e:	0021      	movs	r1, r4
 800ae20:	f7ff ff56 	bl	800acd0 <__sflush_r>
 800ae24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae26:	0005      	movs	r5, r0
 800ae28:	07db      	lsls	r3, r3, #31
 800ae2a:	d4e2      	bmi.n	800adf2 <_fflush_r+0xe>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	059b      	lsls	r3, r3, #22
 800ae30:	d4df      	bmi.n	800adf2 <_fflush_r+0xe>
 800ae32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae34:	f7fd fb84 	bl	8008540 <__retarget_lock_release_recursive>
 800ae38:	e7db      	b.n	800adf2 <_fflush_r+0xe>

0800ae3a <__sccl>:
 800ae3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3c:	780b      	ldrb	r3, [r1, #0]
 800ae3e:	0004      	movs	r4, r0
 800ae40:	2b5e      	cmp	r3, #94	; 0x5e
 800ae42:	d019      	beq.n	800ae78 <__sccl+0x3e>
 800ae44:	2200      	movs	r2, #0
 800ae46:	1c4d      	adds	r5, r1, #1
 800ae48:	0021      	movs	r1, r4
 800ae4a:	1c60      	adds	r0, r4, #1
 800ae4c:	30ff      	adds	r0, #255	; 0xff
 800ae4e:	700a      	strb	r2, [r1, #0]
 800ae50:	3101      	adds	r1, #1
 800ae52:	4281      	cmp	r1, r0
 800ae54:	d1fb      	bne.n	800ae4e <__sccl+0x14>
 800ae56:	1e68      	subs	r0, r5, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00c      	beq.n	800ae76 <__sccl+0x3c>
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	262d      	movs	r6, #45	; 0x2d
 800ae60:	404a      	eors	r2, r1
 800ae62:	0028      	movs	r0, r5
 800ae64:	54e2      	strb	r2, [r4, r3]
 800ae66:	7801      	ldrb	r1, [r0, #0]
 800ae68:	1c45      	adds	r5, r0, #1
 800ae6a:	292d      	cmp	r1, #45	; 0x2d
 800ae6c:	d00c      	beq.n	800ae88 <__sccl+0x4e>
 800ae6e:	295d      	cmp	r1, #93	; 0x5d
 800ae70:	d01d      	beq.n	800aeae <__sccl+0x74>
 800ae72:	2900      	cmp	r1, #0
 800ae74:	d104      	bne.n	800ae80 <__sccl+0x46>
 800ae76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae78:	2201      	movs	r2, #1
 800ae7a:	784b      	ldrb	r3, [r1, #1]
 800ae7c:	1c8d      	adds	r5, r1, #2
 800ae7e:	e7e3      	b.n	800ae48 <__sccl+0xe>
 800ae80:	000b      	movs	r3, r1
 800ae82:	e7ee      	b.n	800ae62 <__sccl+0x28>
 800ae84:	0033      	movs	r3, r6
 800ae86:	e7ec      	b.n	800ae62 <__sccl+0x28>
 800ae88:	7841      	ldrb	r1, [r0, #1]
 800ae8a:	295d      	cmp	r1, #93	; 0x5d
 800ae8c:	d0fa      	beq.n	800ae84 <__sccl+0x4a>
 800ae8e:	428b      	cmp	r3, r1
 800ae90:	dcf8      	bgt.n	800ae84 <__sccl+0x4a>
 800ae92:	001d      	movs	r5, r3
 800ae94:	3002      	adds	r0, #2
 800ae96:	3501      	adds	r5, #1
 800ae98:	5562      	strb	r2, [r4, r5]
 800ae9a:	42a9      	cmp	r1, r5
 800ae9c:	dcfb      	bgt.n	800ae96 <__sccl+0x5c>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	1c5f      	adds	r7, r3, #1
 800aea2:	428b      	cmp	r3, r1
 800aea4:	da01      	bge.n	800aeaa <__sccl+0x70>
 800aea6:	1acd      	subs	r5, r1, r3
 800aea8:	3d01      	subs	r5, #1
 800aeaa:	197b      	adds	r3, r7, r5
 800aeac:	e7db      	b.n	800ae66 <__sccl+0x2c>
 800aeae:	0028      	movs	r0, r5
 800aeb0:	e7e1      	b.n	800ae76 <__sccl+0x3c>
	...

0800aeb4 <__submore>:
 800aeb4:	000b      	movs	r3, r1
 800aeb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800aeba:	3344      	adds	r3, #68	; 0x44
 800aebc:	000c      	movs	r4, r1
 800aebe:	429d      	cmp	r5, r3
 800aec0:	d11c      	bne.n	800aefc <__submore+0x48>
 800aec2:	2680      	movs	r6, #128	; 0x80
 800aec4:	00f6      	lsls	r6, r6, #3
 800aec6:	0031      	movs	r1, r6
 800aec8:	f7fb faf2 	bl	80064b0 <_malloc_r>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d102      	bne.n	800aed6 <__submore+0x22>
 800aed0:	2001      	movs	r0, #1
 800aed2:	4240      	negs	r0, r0
 800aed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aed6:	0023      	movs	r3, r4
 800aed8:	6360      	str	r0, [r4, #52]	; 0x34
 800aeda:	63a6      	str	r6, [r4, #56]	; 0x38
 800aedc:	3346      	adds	r3, #70	; 0x46
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	4b10      	ldr	r3, [pc, #64]	; (800af24 <__submore+0x70>)
 800aee2:	54c2      	strb	r2, [r0, r3]
 800aee4:	0023      	movs	r3, r4
 800aee6:	3345      	adds	r3, #69	; 0x45
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <__submore+0x74>)
 800aeec:	54c2      	strb	r2, [r0, r3]
 800aeee:	782a      	ldrb	r2, [r5, #0]
 800aef0:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <__submore+0x78>)
 800aef2:	54c2      	strb	r2, [r0, r3]
 800aef4:	18c0      	adds	r0, r0, r3
 800aef6:	6020      	str	r0, [r4, #0]
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7eb      	b.n	800aed4 <__submore+0x20>
 800aefc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800aefe:	0029      	movs	r1, r5
 800af00:	0073      	lsls	r3, r6, #1
 800af02:	001a      	movs	r2, r3
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	f000 f872 	bl	800afee <_realloc_r>
 800af0a:	1e05      	subs	r5, r0, #0
 800af0c:	d0e0      	beq.n	800aed0 <__submore+0x1c>
 800af0e:	1987      	adds	r7, r0, r6
 800af10:	0001      	movs	r1, r0
 800af12:	0032      	movs	r2, r6
 800af14:	0038      	movs	r0, r7
 800af16:	f7fd fb1f 	bl	8008558 <memcpy>
 800af1a:	9b01      	ldr	r3, [sp, #4]
 800af1c:	6027      	str	r7, [r4, #0]
 800af1e:	6365      	str	r5, [r4, #52]	; 0x34
 800af20:	63a3      	str	r3, [r4, #56]	; 0x38
 800af22:	e7e9      	b.n	800aef8 <__submore+0x44>
 800af24:	000003ff 	.word	0x000003ff
 800af28:	000003fe 	.word	0x000003fe
 800af2c:	000003fd 	.word	0x000003fd

0800af30 <memmove>:
 800af30:	b510      	push	{r4, lr}
 800af32:	4288      	cmp	r0, r1
 800af34:	d902      	bls.n	800af3c <memmove+0xc>
 800af36:	188b      	adds	r3, r1, r2
 800af38:	4298      	cmp	r0, r3
 800af3a:	d303      	bcc.n	800af44 <memmove+0x14>
 800af3c:	2300      	movs	r3, #0
 800af3e:	e007      	b.n	800af50 <memmove+0x20>
 800af40:	5c8b      	ldrb	r3, [r1, r2]
 800af42:	5483      	strb	r3, [r0, r2]
 800af44:	3a01      	subs	r2, #1
 800af46:	d2fb      	bcs.n	800af40 <memmove+0x10>
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	5ccc      	ldrb	r4, [r1, r3]
 800af4c:	54c4      	strb	r4, [r0, r3]
 800af4e:	3301      	adds	r3, #1
 800af50:	429a      	cmp	r2, r3
 800af52:	d1fa      	bne.n	800af4a <memmove+0x1a>
 800af54:	e7f8      	b.n	800af48 <memmove+0x18>
	...

0800af58 <__assert_func>:
 800af58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af5a:	0014      	movs	r4, r2
 800af5c:	001a      	movs	r2, r3
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <__assert_func+0x2c>)
 800af60:	0005      	movs	r5, r0
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	000e      	movs	r6, r1
 800af66:	68d8      	ldr	r0, [r3, #12]
 800af68:	4b07      	ldr	r3, [pc, #28]	; (800af88 <__assert_func+0x30>)
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	d101      	bne.n	800af72 <__assert_func+0x1a>
 800af6e:	4b07      	ldr	r3, [pc, #28]	; (800af8c <__assert_func+0x34>)
 800af70:	001c      	movs	r4, r3
 800af72:	4907      	ldr	r1, [pc, #28]	; (800af90 <__assert_func+0x38>)
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	9402      	str	r4, [sp, #8]
 800af78:	002b      	movs	r3, r5
 800af7a:	9600      	str	r6, [sp, #0]
 800af7c:	f000 f8ec 	bl	800b158 <fiprintf>
 800af80:	f000 f8fa 	bl	800b178 <abort>
 800af84:	200001dc 	.word	0x200001dc
 800af88:	0800bd20 	.word	0x0800bd20
 800af8c:	0800bd5b 	.word	0x0800bd5b
 800af90:	0800bd2d 	.word	0x0800bd2d

0800af94 <_calloc_r>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	0c0b      	lsrs	r3, r1, #16
 800af98:	0c15      	lsrs	r5, r2, #16
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d11e      	bne.n	800afdc <_calloc_r+0x48>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	d10c      	bne.n	800afbc <_calloc_r+0x28>
 800afa2:	b289      	uxth	r1, r1
 800afa4:	b294      	uxth	r4, r2
 800afa6:	434c      	muls	r4, r1
 800afa8:	0021      	movs	r1, r4
 800afaa:	f7fb fa81 	bl	80064b0 <_malloc_r>
 800afae:	1e05      	subs	r5, r0, #0
 800afb0:	d01b      	beq.n	800afea <_calloc_r+0x56>
 800afb2:	0022      	movs	r2, r4
 800afb4:	2100      	movs	r1, #0
 800afb6:	f7fd f9ef 	bl	8008398 <memset>
 800afba:	e016      	b.n	800afea <_calloc_r+0x56>
 800afbc:	1c2b      	adds	r3, r5, #0
 800afbe:	1c0c      	adds	r4, r1, #0
 800afc0:	b289      	uxth	r1, r1
 800afc2:	b292      	uxth	r2, r2
 800afc4:	434a      	muls	r2, r1
 800afc6:	b2a1      	uxth	r1, r4
 800afc8:	b29c      	uxth	r4, r3
 800afca:	434c      	muls	r4, r1
 800afcc:	0c13      	lsrs	r3, r2, #16
 800afce:	18e4      	adds	r4, r4, r3
 800afd0:	0c23      	lsrs	r3, r4, #16
 800afd2:	d107      	bne.n	800afe4 <_calloc_r+0x50>
 800afd4:	0424      	lsls	r4, r4, #16
 800afd6:	b292      	uxth	r2, r2
 800afd8:	4314      	orrs	r4, r2
 800afda:	e7e5      	b.n	800afa8 <_calloc_r+0x14>
 800afdc:	2d00      	cmp	r5, #0
 800afde:	d101      	bne.n	800afe4 <_calloc_r+0x50>
 800afe0:	1c14      	adds	r4, r2, #0
 800afe2:	e7ed      	b.n	800afc0 <_calloc_r+0x2c>
 800afe4:	230c      	movs	r3, #12
 800afe6:	2500      	movs	r5, #0
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	0028      	movs	r0, r5
 800afec:	bd70      	pop	{r4, r5, r6, pc}

0800afee <_realloc_r>:
 800afee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aff0:	0007      	movs	r7, r0
 800aff2:	000e      	movs	r6, r1
 800aff4:	0014      	movs	r4, r2
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d105      	bne.n	800b006 <_realloc_r+0x18>
 800affa:	0011      	movs	r1, r2
 800affc:	f7fb fa58 	bl	80064b0 <_malloc_r>
 800b000:	0005      	movs	r5, r0
 800b002:	0028      	movs	r0, r5
 800b004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b006:	2a00      	cmp	r2, #0
 800b008:	d103      	bne.n	800b012 <_realloc_r+0x24>
 800b00a:	f7fe f957 	bl	80092bc <_free_r>
 800b00e:	0025      	movs	r5, r4
 800b010:	e7f7      	b.n	800b002 <_realloc_r+0x14>
 800b012:	f000 f8b8 	bl	800b186 <_malloc_usable_size_r>
 800b016:	9001      	str	r0, [sp, #4]
 800b018:	4284      	cmp	r4, r0
 800b01a:	d803      	bhi.n	800b024 <_realloc_r+0x36>
 800b01c:	0035      	movs	r5, r6
 800b01e:	0843      	lsrs	r3, r0, #1
 800b020:	42a3      	cmp	r3, r4
 800b022:	d3ee      	bcc.n	800b002 <_realloc_r+0x14>
 800b024:	0021      	movs	r1, r4
 800b026:	0038      	movs	r0, r7
 800b028:	f7fb fa42 	bl	80064b0 <_malloc_r>
 800b02c:	1e05      	subs	r5, r0, #0
 800b02e:	d0e8      	beq.n	800b002 <_realloc_r+0x14>
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	0022      	movs	r2, r4
 800b034:	429c      	cmp	r4, r3
 800b036:	d900      	bls.n	800b03a <_realloc_r+0x4c>
 800b038:	001a      	movs	r2, r3
 800b03a:	0031      	movs	r1, r6
 800b03c:	0028      	movs	r0, r5
 800b03e:	f7fd fa8b 	bl	8008558 <memcpy>
 800b042:	0031      	movs	r1, r6
 800b044:	0038      	movs	r0, r7
 800b046:	f7fe f939 	bl	80092bc <_free_r>
 800b04a:	e7da      	b.n	800b002 <_realloc_r+0x14>

0800b04c <_strtoul_l.constprop.0>:
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	9202      	str	r2, [sp, #8]
 800b052:	4a3e      	ldr	r2, [pc, #248]	; (800b14c <_strtoul_l.constprop.0+0x100>)
 800b054:	001e      	movs	r6, r3
 800b056:	9101      	str	r1, [sp, #4]
 800b058:	000b      	movs	r3, r1
 800b05a:	4694      	mov	ip, r2
 800b05c:	2108      	movs	r1, #8
 800b05e:	9005      	str	r0, [sp, #20]
 800b060:	001a      	movs	r2, r3
 800b062:	4660      	mov	r0, ip
 800b064:	7814      	ldrb	r4, [r2, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	5d00      	ldrb	r0, [r0, r4]
 800b06a:	001d      	movs	r5, r3
 800b06c:	0007      	movs	r7, r0
 800b06e:	400f      	ands	r7, r1
 800b070:	4208      	tst	r0, r1
 800b072:	d1f5      	bne.n	800b060 <_strtoul_l.constprop.0+0x14>
 800b074:	2c2d      	cmp	r4, #45	; 0x2d
 800b076:	d13d      	bne.n	800b0f4 <_strtoul_l.constprop.0+0xa8>
 800b078:	2701      	movs	r7, #1
 800b07a:	781c      	ldrb	r4, [r3, #0]
 800b07c:	1c95      	adds	r5, r2, #2
 800b07e:	2e00      	cmp	r6, #0
 800b080:	d05f      	beq.n	800b142 <_strtoul_l.constprop.0+0xf6>
 800b082:	2e10      	cmp	r6, #16
 800b084:	d109      	bne.n	800b09a <_strtoul_l.constprop.0+0x4e>
 800b086:	2c30      	cmp	r4, #48	; 0x30
 800b088:	d107      	bne.n	800b09a <_strtoul_l.constprop.0+0x4e>
 800b08a:	2220      	movs	r2, #32
 800b08c:	782b      	ldrb	r3, [r5, #0]
 800b08e:	4393      	bics	r3, r2
 800b090:	2b58      	cmp	r3, #88	; 0x58
 800b092:	d151      	bne.n	800b138 <_strtoul_l.constprop.0+0xec>
 800b094:	2610      	movs	r6, #16
 800b096:	786c      	ldrb	r4, [r5, #1]
 800b098:	3502      	adds	r5, #2
 800b09a:	2001      	movs	r0, #1
 800b09c:	0031      	movs	r1, r6
 800b09e:	4240      	negs	r0, r0
 800b0a0:	f7f5 f84c 	bl	800013c <__udivsi3>
 800b0a4:	9003      	str	r0, [sp, #12]
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	0031      	movs	r1, r6
 800b0aa:	4240      	negs	r0, r0
 800b0ac:	f7f5 f8cc 	bl	8000248 <__aeabi_uidivmod>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	9104      	str	r1, [sp, #16]
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	4694      	mov	ip, r2
 800b0bc:	4249      	negs	r1, r1
 800b0be:	0022      	movs	r2, r4
 800b0c0:	3a30      	subs	r2, #48	; 0x30
 800b0c2:	2a09      	cmp	r2, #9
 800b0c4:	d903      	bls.n	800b0ce <_strtoul_l.constprop.0+0x82>
 800b0c6:	3a11      	subs	r2, #17
 800b0c8:	2a19      	cmp	r2, #25
 800b0ca:	d818      	bhi.n	800b0fe <_strtoul_l.constprop.0+0xb2>
 800b0cc:	320a      	adds	r2, #10
 800b0ce:	4296      	cmp	r6, r2
 800b0d0:	dd19      	ble.n	800b106 <_strtoul_l.constprop.0+0xba>
 800b0d2:	1c5c      	adds	r4, r3, #1
 800b0d4:	d00b      	beq.n	800b0ee <_strtoul_l.constprop.0+0xa2>
 800b0d6:	9c03      	ldr	r4, [sp, #12]
 800b0d8:	000b      	movs	r3, r1
 800b0da:	4284      	cmp	r4, r0
 800b0dc:	d307      	bcc.n	800b0ee <_strtoul_l.constprop.0+0xa2>
 800b0de:	d103      	bne.n	800b0e8 <_strtoul_l.constprop.0+0x9c>
 800b0e0:	9c04      	ldr	r4, [sp, #16]
 800b0e2:	000b      	movs	r3, r1
 800b0e4:	4294      	cmp	r4, r2
 800b0e6:	db02      	blt.n	800b0ee <_strtoul_l.constprop.0+0xa2>
 800b0e8:	4663      	mov	r3, ip
 800b0ea:	4370      	muls	r0, r6
 800b0ec:	1810      	adds	r0, r2, r0
 800b0ee:	782c      	ldrb	r4, [r5, #0]
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	e7e4      	b.n	800b0be <_strtoul_l.constprop.0+0x72>
 800b0f4:	2c2b      	cmp	r4, #43	; 0x2b
 800b0f6:	d1c2      	bne.n	800b07e <_strtoul_l.constprop.0+0x32>
 800b0f8:	781c      	ldrb	r4, [r3, #0]
 800b0fa:	1c95      	adds	r5, r2, #2
 800b0fc:	e7bf      	b.n	800b07e <_strtoul_l.constprop.0+0x32>
 800b0fe:	0022      	movs	r2, r4
 800b100:	3a61      	subs	r2, #97	; 0x61
 800b102:	2a19      	cmp	r2, #25
 800b104:	d9e2      	bls.n	800b0cc <_strtoul_l.constprop.0+0x80>
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	d108      	bne.n	800b11c <_strtoul_l.constprop.0+0xd0>
 800b10a:	2222      	movs	r2, #34	; 0x22
 800b10c:	9905      	ldr	r1, [sp, #20]
 800b10e:	0018      	movs	r0, r3
 800b110:	600a      	str	r2, [r1, #0]
 800b112:	9a02      	ldr	r2, [sp, #8]
 800b114:	2a00      	cmp	r2, #0
 800b116:	d109      	bne.n	800b12c <_strtoul_l.constprop.0+0xe0>
 800b118:	b007      	add	sp, #28
 800b11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b11c:	2f00      	cmp	r7, #0
 800b11e:	d000      	beq.n	800b122 <_strtoul_l.constprop.0+0xd6>
 800b120:	4240      	negs	r0, r0
 800b122:	9a02      	ldr	r2, [sp, #8]
 800b124:	2a00      	cmp	r2, #0
 800b126:	d0f7      	beq.n	800b118 <_strtoul_l.constprop.0+0xcc>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <_strtoul_l.constprop.0+0xe4>
 800b12c:	1e6b      	subs	r3, r5, #1
 800b12e:	9301      	str	r3, [sp, #4]
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	9a01      	ldr	r2, [sp, #4]
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	e7ef      	b.n	800b118 <_strtoul_l.constprop.0+0xcc>
 800b138:	2430      	movs	r4, #48	; 0x30
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	d1ad      	bne.n	800b09a <_strtoul_l.constprop.0+0x4e>
 800b13e:	3608      	adds	r6, #8
 800b140:	e7ab      	b.n	800b09a <_strtoul_l.constprop.0+0x4e>
 800b142:	2c30      	cmp	r4, #48	; 0x30
 800b144:	d0a1      	beq.n	800b08a <_strtoul_l.constprop.0+0x3e>
 800b146:	260a      	movs	r6, #10
 800b148:	e7a7      	b.n	800b09a <_strtoul_l.constprop.0+0x4e>
 800b14a:	46c0      	nop			; (mov r8, r8)
 800b14c:	0800b971 	.word	0x0800b971

0800b150 <_strtoul_r>:
 800b150:	b510      	push	{r4, lr}
 800b152:	f7ff ff7b 	bl	800b04c <_strtoul_l.constprop.0>
 800b156:	bd10      	pop	{r4, pc}

0800b158 <fiprintf>:
 800b158:	b40e      	push	{r1, r2, r3}
 800b15a:	b517      	push	{r0, r1, r2, r4, lr}
 800b15c:	4c05      	ldr	r4, [pc, #20]	; (800b174 <fiprintf+0x1c>)
 800b15e:	ab05      	add	r3, sp, #20
 800b160:	cb04      	ldmia	r3!, {r2}
 800b162:	0001      	movs	r1, r0
 800b164:	6820      	ldr	r0, [r4, #0]
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	f000 f83c 	bl	800b1e4 <_vfiprintf_r>
 800b16c:	bc1e      	pop	{r1, r2, r3, r4}
 800b16e:	bc08      	pop	{r3}
 800b170:	b003      	add	sp, #12
 800b172:	4718      	bx	r3
 800b174:	200001dc 	.word	0x200001dc

0800b178 <abort>:
 800b178:	2006      	movs	r0, #6
 800b17a:	b510      	push	{r4, lr}
 800b17c:	f000 fa1e 	bl	800b5bc <raise>
 800b180:	2001      	movs	r0, #1
 800b182:	f7f7 ff37 	bl	8002ff4 <_exit>

0800b186 <_malloc_usable_size_r>:
 800b186:	1f0b      	subs	r3, r1, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	1f18      	subs	r0, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	da01      	bge.n	800b194 <_malloc_usable_size_r+0xe>
 800b190:	580b      	ldr	r3, [r1, r0]
 800b192:	18c0      	adds	r0, r0, r3
 800b194:	4770      	bx	lr

0800b196 <__sfputc_r>:
 800b196:	6893      	ldr	r3, [r2, #8]
 800b198:	b510      	push	{r4, lr}
 800b19a:	3b01      	subs	r3, #1
 800b19c:	6093      	str	r3, [r2, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da04      	bge.n	800b1ac <__sfputc_r+0x16>
 800b1a2:	6994      	ldr	r4, [r2, #24]
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	db07      	blt.n	800b1b8 <__sfputc_r+0x22>
 800b1a8:	290a      	cmp	r1, #10
 800b1aa:	d005      	beq.n	800b1b8 <__sfputc_r+0x22>
 800b1ac:	6813      	ldr	r3, [r2, #0]
 800b1ae:	1c58      	adds	r0, r3, #1
 800b1b0:	6010      	str	r0, [r2, #0]
 800b1b2:	7019      	strb	r1, [r3, #0]
 800b1b4:	0008      	movs	r0, r1
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	f000 f930 	bl	800b41c <__swbuf_r>
 800b1bc:	0001      	movs	r1, r0
 800b1be:	e7f9      	b.n	800b1b4 <__sfputc_r+0x1e>

0800b1c0 <__sfputs_r>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	0006      	movs	r6, r0
 800b1c4:	000f      	movs	r7, r1
 800b1c6:	0014      	movs	r4, r2
 800b1c8:	18d5      	adds	r5, r2, r3
 800b1ca:	42ac      	cmp	r4, r5
 800b1cc:	d101      	bne.n	800b1d2 <__sfputs_r+0x12>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e007      	b.n	800b1e2 <__sfputs_r+0x22>
 800b1d2:	7821      	ldrb	r1, [r4, #0]
 800b1d4:	003a      	movs	r2, r7
 800b1d6:	0030      	movs	r0, r6
 800b1d8:	f7ff ffdd 	bl	800b196 <__sfputc_r>
 800b1dc:	3401      	adds	r4, #1
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d1f3      	bne.n	800b1ca <__sfputs_r+0xa>
 800b1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1e4 <_vfiprintf_r>:
 800b1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1e6:	b0a1      	sub	sp, #132	; 0x84
 800b1e8:	000f      	movs	r7, r1
 800b1ea:	0015      	movs	r5, r2
 800b1ec:	001e      	movs	r6, r3
 800b1ee:	9003      	str	r0, [sp, #12]
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d004      	beq.n	800b1fe <_vfiprintf_r+0x1a>
 800b1f4:	6a03      	ldr	r3, [r0, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <_vfiprintf_r+0x1a>
 800b1fa:	f7fc ffcf 	bl	800819c <__sinit>
 800b1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b200:	07db      	lsls	r3, r3, #31
 800b202:	d405      	bmi.n	800b210 <_vfiprintf_r+0x2c>
 800b204:	89bb      	ldrh	r3, [r7, #12]
 800b206:	059b      	lsls	r3, r3, #22
 800b208:	d402      	bmi.n	800b210 <_vfiprintf_r+0x2c>
 800b20a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b20c:	f7fd f997 	bl	800853e <__retarget_lock_acquire_recursive>
 800b210:	89bb      	ldrh	r3, [r7, #12]
 800b212:	071b      	lsls	r3, r3, #28
 800b214:	d502      	bpl.n	800b21c <_vfiprintf_r+0x38>
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d113      	bne.n	800b244 <_vfiprintf_r+0x60>
 800b21c:	0039      	movs	r1, r7
 800b21e:	9803      	ldr	r0, [sp, #12]
 800b220:	f000 f93e 	bl	800b4a0 <__swsetup_r>
 800b224:	2800      	cmp	r0, #0
 800b226:	d00d      	beq.n	800b244 <_vfiprintf_r+0x60>
 800b228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22a:	07db      	lsls	r3, r3, #31
 800b22c:	d503      	bpl.n	800b236 <_vfiprintf_r+0x52>
 800b22e:	2001      	movs	r0, #1
 800b230:	4240      	negs	r0, r0
 800b232:	b021      	add	sp, #132	; 0x84
 800b234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b236:	89bb      	ldrh	r3, [r7, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d4f8      	bmi.n	800b22e <_vfiprintf_r+0x4a>
 800b23c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b23e:	f7fd f97f 	bl	8008540 <__retarget_lock_release_recursive>
 800b242:	e7f4      	b.n	800b22e <_vfiprintf_r+0x4a>
 800b244:	2300      	movs	r3, #0
 800b246:	ac08      	add	r4, sp, #32
 800b248:	6163      	str	r3, [r4, #20]
 800b24a:	3320      	adds	r3, #32
 800b24c:	7663      	strb	r3, [r4, #25]
 800b24e:	3310      	adds	r3, #16
 800b250:	76a3      	strb	r3, [r4, #26]
 800b252:	9607      	str	r6, [sp, #28]
 800b254:	002e      	movs	r6, r5
 800b256:	7833      	ldrb	r3, [r6, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <_vfiprintf_r+0x7c>
 800b25c:	2b25      	cmp	r3, #37	; 0x25
 800b25e:	d148      	bne.n	800b2f2 <_vfiprintf_r+0x10e>
 800b260:	1b73      	subs	r3, r6, r5
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	42ae      	cmp	r6, r5
 800b266:	d00b      	beq.n	800b280 <_vfiprintf_r+0x9c>
 800b268:	002a      	movs	r2, r5
 800b26a:	0039      	movs	r1, r7
 800b26c:	9803      	ldr	r0, [sp, #12]
 800b26e:	f7ff ffa7 	bl	800b1c0 <__sfputs_r>
 800b272:	3001      	adds	r0, #1
 800b274:	d100      	bne.n	800b278 <_vfiprintf_r+0x94>
 800b276:	e0af      	b.n	800b3d8 <_vfiprintf_r+0x1f4>
 800b278:	6963      	ldr	r3, [r4, #20]
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	189b      	adds	r3, r3, r2
 800b27e:	6163      	str	r3, [r4, #20]
 800b280:	7833      	ldrb	r3, [r6, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d100      	bne.n	800b288 <_vfiprintf_r+0xa4>
 800b286:	e0a7      	b.n	800b3d8 <_vfiprintf_r+0x1f4>
 800b288:	2201      	movs	r2, #1
 800b28a:	2300      	movs	r3, #0
 800b28c:	4252      	negs	r2, r2
 800b28e:	6062      	str	r2, [r4, #4]
 800b290:	a904      	add	r1, sp, #16
 800b292:	3254      	adds	r2, #84	; 0x54
 800b294:	1852      	adds	r2, r2, r1
 800b296:	1c75      	adds	r5, r6, #1
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	60e3      	str	r3, [r4, #12]
 800b29c:	60a3      	str	r3, [r4, #8]
 800b29e:	7013      	strb	r3, [r2, #0]
 800b2a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2a2:	4b59      	ldr	r3, [pc, #356]	; (800b408 <_vfiprintf_r+0x224>)
 800b2a4:	2205      	movs	r2, #5
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	7829      	ldrb	r1, [r5, #0]
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	f7fd f949 	bl	8008542 <memchr>
 800b2b0:	1c6e      	adds	r6, r5, #1
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d11f      	bne.n	800b2f6 <_vfiprintf_r+0x112>
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	06d3      	lsls	r3, r2, #27
 800b2ba:	d504      	bpl.n	800b2c6 <_vfiprintf_r+0xe2>
 800b2bc:	2353      	movs	r3, #83	; 0x53
 800b2be:	a904      	add	r1, sp, #16
 800b2c0:	185b      	adds	r3, r3, r1
 800b2c2:	2120      	movs	r1, #32
 800b2c4:	7019      	strb	r1, [r3, #0]
 800b2c6:	0713      	lsls	r3, r2, #28
 800b2c8:	d504      	bpl.n	800b2d4 <_vfiprintf_r+0xf0>
 800b2ca:	2353      	movs	r3, #83	; 0x53
 800b2cc:	a904      	add	r1, sp, #16
 800b2ce:	185b      	adds	r3, r3, r1
 800b2d0:	212b      	movs	r1, #43	; 0x2b
 800b2d2:	7019      	strb	r1, [r3, #0]
 800b2d4:	782b      	ldrb	r3, [r5, #0]
 800b2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d8:	d016      	beq.n	800b308 <_vfiprintf_r+0x124>
 800b2da:	002e      	movs	r6, r5
 800b2dc:	2100      	movs	r1, #0
 800b2de:	200a      	movs	r0, #10
 800b2e0:	68e3      	ldr	r3, [r4, #12]
 800b2e2:	7832      	ldrb	r2, [r6, #0]
 800b2e4:	1c75      	adds	r5, r6, #1
 800b2e6:	3a30      	subs	r2, #48	; 0x30
 800b2e8:	2a09      	cmp	r2, #9
 800b2ea:	d94e      	bls.n	800b38a <_vfiprintf_r+0x1a6>
 800b2ec:	2900      	cmp	r1, #0
 800b2ee:	d111      	bne.n	800b314 <_vfiprintf_r+0x130>
 800b2f0:	e017      	b.n	800b322 <_vfiprintf_r+0x13e>
 800b2f2:	3601      	adds	r6, #1
 800b2f4:	e7af      	b.n	800b256 <_vfiprintf_r+0x72>
 800b2f6:	9b05      	ldr	r3, [sp, #20]
 800b2f8:	6822      	ldr	r2, [r4, #0]
 800b2fa:	1ac0      	subs	r0, r0, r3
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4083      	lsls	r3, r0
 800b300:	4313      	orrs	r3, r2
 800b302:	0035      	movs	r5, r6
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	e7cc      	b.n	800b2a2 <_vfiprintf_r+0xbe>
 800b308:	9b07      	ldr	r3, [sp, #28]
 800b30a:	1d19      	adds	r1, r3, #4
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	9107      	str	r1, [sp, #28]
 800b310:	2b00      	cmp	r3, #0
 800b312:	db01      	blt.n	800b318 <_vfiprintf_r+0x134>
 800b314:	930b      	str	r3, [sp, #44]	; 0x2c
 800b316:	e004      	b.n	800b322 <_vfiprintf_r+0x13e>
 800b318:	425b      	negs	r3, r3
 800b31a:	60e3      	str	r3, [r4, #12]
 800b31c:	2302      	movs	r3, #2
 800b31e:	4313      	orrs	r3, r2
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	7833      	ldrb	r3, [r6, #0]
 800b324:	2b2e      	cmp	r3, #46	; 0x2e
 800b326:	d10a      	bne.n	800b33e <_vfiprintf_r+0x15a>
 800b328:	7873      	ldrb	r3, [r6, #1]
 800b32a:	2b2a      	cmp	r3, #42	; 0x2a
 800b32c:	d135      	bne.n	800b39a <_vfiprintf_r+0x1b6>
 800b32e:	9b07      	ldr	r3, [sp, #28]
 800b330:	3602      	adds	r6, #2
 800b332:	1d1a      	adds	r2, r3, #4
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	9207      	str	r2, [sp, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	db2b      	blt.n	800b394 <_vfiprintf_r+0x1b0>
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	4d33      	ldr	r5, [pc, #204]	; (800b40c <_vfiprintf_r+0x228>)
 800b340:	2203      	movs	r2, #3
 800b342:	0028      	movs	r0, r5
 800b344:	7831      	ldrb	r1, [r6, #0]
 800b346:	f7fd f8fc 	bl	8008542 <memchr>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d006      	beq.n	800b35c <_vfiprintf_r+0x178>
 800b34e:	2340      	movs	r3, #64	; 0x40
 800b350:	1b40      	subs	r0, r0, r5
 800b352:	4083      	lsls	r3, r0
 800b354:	6822      	ldr	r2, [r4, #0]
 800b356:	3601      	adds	r6, #1
 800b358:	4313      	orrs	r3, r2
 800b35a:	6023      	str	r3, [r4, #0]
 800b35c:	7831      	ldrb	r1, [r6, #0]
 800b35e:	2206      	movs	r2, #6
 800b360:	482b      	ldr	r0, [pc, #172]	; (800b410 <_vfiprintf_r+0x22c>)
 800b362:	1c75      	adds	r5, r6, #1
 800b364:	7621      	strb	r1, [r4, #24]
 800b366:	f7fd f8ec 	bl	8008542 <memchr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d043      	beq.n	800b3f6 <_vfiprintf_r+0x212>
 800b36e:	4b29      	ldr	r3, [pc, #164]	; (800b414 <_vfiprintf_r+0x230>)
 800b370:	2b00      	cmp	r3, #0
 800b372:	d125      	bne.n	800b3c0 <_vfiprintf_r+0x1dc>
 800b374:	2207      	movs	r2, #7
 800b376:	9b07      	ldr	r3, [sp, #28]
 800b378:	3307      	adds	r3, #7
 800b37a:	4393      	bics	r3, r2
 800b37c:	3308      	adds	r3, #8
 800b37e:	9307      	str	r3, [sp, #28]
 800b380:	6963      	ldr	r3, [r4, #20]
 800b382:	9a04      	ldr	r2, [sp, #16]
 800b384:	189b      	adds	r3, r3, r2
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	e764      	b.n	800b254 <_vfiprintf_r+0x70>
 800b38a:	4343      	muls	r3, r0
 800b38c:	002e      	movs	r6, r5
 800b38e:	2101      	movs	r1, #1
 800b390:	189b      	adds	r3, r3, r2
 800b392:	e7a6      	b.n	800b2e2 <_vfiprintf_r+0xfe>
 800b394:	2301      	movs	r3, #1
 800b396:	425b      	negs	r3, r3
 800b398:	e7d0      	b.n	800b33c <_vfiprintf_r+0x158>
 800b39a:	2300      	movs	r3, #0
 800b39c:	200a      	movs	r0, #10
 800b39e:	001a      	movs	r2, r3
 800b3a0:	3601      	adds	r6, #1
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	7831      	ldrb	r1, [r6, #0]
 800b3a6:	1c75      	adds	r5, r6, #1
 800b3a8:	3930      	subs	r1, #48	; 0x30
 800b3aa:	2909      	cmp	r1, #9
 800b3ac:	d903      	bls.n	800b3b6 <_vfiprintf_r+0x1d2>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0c5      	beq.n	800b33e <_vfiprintf_r+0x15a>
 800b3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3b4:	e7c3      	b.n	800b33e <_vfiprintf_r+0x15a>
 800b3b6:	4342      	muls	r2, r0
 800b3b8:	002e      	movs	r6, r5
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	1852      	adds	r2, r2, r1
 800b3be:	e7f1      	b.n	800b3a4 <_vfiprintf_r+0x1c0>
 800b3c0:	aa07      	add	r2, sp, #28
 800b3c2:	9200      	str	r2, [sp, #0]
 800b3c4:	0021      	movs	r1, r4
 800b3c6:	003a      	movs	r2, r7
 800b3c8:	4b13      	ldr	r3, [pc, #76]	; (800b418 <_vfiprintf_r+0x234>)
 800b3ca:	9803      	ldr	r0, [sp, #12]
 800b3cc:	f7fc f878 	bl	80074c0 <_printf_float>
 800b3d0:	9004      	str	r0, [sp, #16]
 800b3d2:	9b04      	ldr	r3, [sp, #16]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	d1d3      	bne.n	800b380 <_vfiprintf_r+0x19c>
 800b3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3da:	07db      	lsls	r3, r3, #31
 800b3dc:	d405      	bmi.n	800b3ea <_vfiprintf_r+0x206>
 800b3de:	89bb      	ldrh	r3, [r7, #12]
 800b3e0:	059b      	lsls	r3, r3, #22
 800b3e2:	d402      	bmi.n	800b3ea <_vfiprintf_r+0x206>
 800b3e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3e6:	f7fd f8ab 	bl	8008540 <__retarget_lock_release_recursive>
 800b3ea:	89bb      	ldrh	r3, [r7, #12]
 800b3ec:	065b      	lsls	r3, r3, #25
 800b3ee:	d500      	bpl.n	800b3f2 <_vfiprintf_r+0x20e>
 800b3f0:	e71d      	b.n	800b22e <_vfiprintf_r+0x4a>
 800b3f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3f4:	e71d      	b.n	800b232 <_vfiprintf_r+0x4e>
 800b3f6:	aa07      	add	r2, sp, #28
 800b3f8:	9200      	str	r2, [sp, #0]
 800b3fa:	0021      	movs	r1, r4
 800b3fc:	003a      	movs	r2, r7
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <_vfiprintf_r+0x234>)
 800b400:	9803      	ldr	r0, [sp, #12]
 800b402:	f7fc fb23 	bl	8007a4c <_printf_i>
 800b406:	e7e3      	b.n	800b3d0 <_vfiprintf_r+0x1ec>
 800b408:	0800bcf4 	.word	0x0800bcf4
 800b40c:	0800bcfa 	.word	0x0800bcfa
 800b410:	0800bcfe 	.word	0x0800bcfe
 800b414:	080074c1 	.word	0x080074c1
 800b418:	0800b1c1 	.word	0x0800b1c1

0800b41c <__swbuf_r>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	0006      	movs	r6, r0
 800b420:	000d      	movs	r5, r1
 800b422:	0014      	movs	r4, r2
 800b424:	2800      	cmp	r0, #0
 800b426:	d004      	beq.n	800b432 <__swbuf_r+0x16>
 800b428:	6a03      	ldr	r3, [r0, #32]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <__swbuf_r+0x16>
 800b42e:	f7fc feb5 	bl	800819c <__sinit>
 800b432:	69a3      	ldr	r3, [r4, #24]
 800b434:	60a3      	str	r3, [r4, #8]
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	071b      	lsls	r3, r3, #28
 800b43a:	d528      	bpl.n	800b48e <__swbuf_r+0x72>
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d025      	beq.n	800b48e <__swbuf_r+0x72>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	6820      	ldr	r0, [r4, #0]
 800b446:	b2ef      	uxtb	r7, r5
 800b448:	1ac0      	subs	r0, r0, r3
 800b44a:	6963      	ldr	r3, [r4, #20]
 800b44c:	b2ed      	uxtb	r5, r5
 800b44e:	4283      	cmp	r3, r0
 800b450:	dc05      	bgt.n	800b45e <__swbuf_r+0x42>
 800b452:	0021      	movs	r1, r4
 800b454:	0030      	movs	r0, r6
 800b456:	f7ff fcc5 	bl	800ade4 <_fflush_r>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d11d      	bne.n	800b49a <__swbuf_r+0x7e>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	3001      	adds	r0, #1
 800b462:	3b01      	subs	r3, #1
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	701f      	strb	r7, [r3, #0]
 800b46e:	6963      	ldr	r3, [r4, #20]
 800b470:	4283      	cmp	r3, r0
 800b472:	d004      	beq.n	800b47e <__swbuf_r+0x62>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	07db      	lsls	r3, r3, #31
 800b478:	d507      	bpl.n	800b48a <__swbuf_r+0x6e>
 800b47a:	2d0a      	cmp	r5, #10
 800b47c:	d105      	bne.n	800b48a <__swbuf_r+0x6e>
 800b47e:	0021      	movs	r1, r4
 800b480:	0030      	movs	r0, r6
 800b482:	f7ff fcaf 	bl	800ade4 <_fflush_r>
 800b486:	2800      	cmp	r0, #0
 800b488:	d107      	bne.n	800b49a <__swbuf_r+0x7e>
 800b48a:	0028      	movs	r0, r5
 800b48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48e:	0021      	movs	r1, r4
 800b490:	0030      	movs	r0, r6
 800b492:	f000 f805 	bl	800b4a0 <__swsetup_r>
 800b496:	2800      	cmp	r0, #0
 800b498:	d0d3      	beq.n	800b442 <__swbuf_r+0x26>
 800b49a:	2501      	movs	r5, #1
 800b49c:	426d      	negs	r5, r5
 800b49e:	e7f4      	b.n	800b48a <__swbuf_r+0x6e>

0800b4a0 <__swsetup_r>:
 800b4a0:	4b30      	ldr	r3, [pc, #192]	; (800b564 <__swsetup_r+0xc4>)
 800b4a2:	b570      	push	{r4, r5, r6, lr}
 800b4a4:	0005      	movs	r5, r0
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	000c      	movs	r4, r1
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d004      	beq.n	800b4b8 <__swsetup_r+0x18>
 800b4ae:	6a03      	ldr	r3, [r0, #32]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <__swsetup_r+0x18>
 800b4b4:	f7fc fe72 	bl	800819c <__sinit>
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	5ee2      	ldrsh	r2, [r4, r3]
 800b4bc:	b293      	uxth	r3, r2
 800b4be:	0711      	lsls	r1, r2, #28
 800b4c0:	d423      	bmi.n	800b50a <__swsetup_r+0x6a>
 800b4c2:	06d9      	lsls	r1, r3, #27
 800b4c4:	d407      	bmi.n	800b4d6 <__swsetup_r+0x36>
 800b4c6:	2309      	movs	r3, #9
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	602b      	str	r3, [r5, #0]
 800b4cc:	3337      	adds	r3, #55	; 0x37
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	4240      	negs	r0, r0
 800b4d4:	bd70      	pop	{r4, r5, r6, pc}
 800b4d6:	075b      	lsls	r3, r3, #29
 800b4d8:	d513      	bpl.n	800b502 <__swsetup_r+0x62>
 800b4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d008      	beq.n	800b4f2 <__swsetup_r+0x52>
 800b4e0:	0023      	movs	r3, r4
 800b4e2:	3344      	adds	r3, #68	; 0x44
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	d002      	beq.n	800b4ee <__swsetup_r+0x4e>
 800b4e8:	0028      	movs	r0, r5
 800b4ea:	f7fd fee7 	bl	80092bc <_free_r>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4f2:	2224      	movs	r2, #36	; 0x24
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	4393      	bics	r3, r2
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6063      	str	r3, [r4, #4]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	2308      	movs	r3, #8
 800b504:	89a2      	ldrh	r2, [r4, #12]
 800b506:	4313      	orrs	r3, r2
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10b      	bne.n	800b528 <__swsetup_r+0x88>
 800b510:	21a0      	movs	r1, #160	; 0xa0
 800b512:	2280      	movs	r2, #128	; 0x80
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	0089      	lsls	r1, r1, #2
 800b518:	0092      	lsls	r2, r2, #2
 800b51a:	400b      	ands	r3, r1
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d003      	beq.n	800b528 <__swsetup_r+0x88>
 800b520:	0021      	movs	r1, r4
 800b522:	0028      	movs	r0, r5
 800b524:	f000 f892 	bl	800b64c <__smakebuf_r>
 800b528:	220c      	movs	r2, #12
 800b52a:	5ea3      	ldrsh	r3, [r4, r2]
 800b52c:	2001      	movs	r0, #1
 800b52e:	001a      	movs	r2, r3
 800b530:	b299      	uxth	r1, r3
 800b532:	4002      	ands	r2, r0
 800b534:	4203      	tst	r3, r0
 800b536:	d00f      	beq.n	800b558 <__swsetup_r+0xb8>
 800b538:	2200      	movs	r2, #0
 800b53a:	60a2      	str	r2, [r4, #8]
 800b53c:	6962      	ldr	r2, [r4, #20]
 800b53e:	4252      	negs	r2, r2
 800b540:	61a2      	str	r2, [r4, #24]
 800b542:	2000      	movs	r0, #0
 800b544:	6922      	ldr	r2, [r4, #16]
 800b546:	4282      	cmp	r2, r0
 800b548:	d1c4      	bne.n	800b4d4 <__swsetup_r+0x34>
 800b54a:	0609      	lsls	r1, r1, #24
 800b54c:	d5c2      	bpl.n	800b4d4 <__swsetup_r+0x34>
 800b54e:	2240      	movs	r2, #64	; 0x40
 800b550:	4313      	orrs	r3, r2
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	3801      	subs	r0, #1
 800b556:	e7bd      	b.n	800b4d4 <__swsetup_r+0x34>
 800b558:	0788      	lsls	r0, r1, #30
 800b55a:	d400      	bmi.n	800b55e <__swsetup_r+0xbe>
 800b55c:	6962      	ldr	r2, [r4, #20]
 800b55e:	60a2      	str	r2, [r4, #8]
 800b560:	e7ef      	b.n	800b542 <__swsetup_r+0xa2>
 800b562:	46c0      	nop			; (mov r8, r8)
 800b564:	200001dc 	.word	0x200001dc

0800b568 <_raise_r>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	0004      	movs	r4, r0
 800b56c:	000d      	movs	r5, r1
 800b56e:	291f      	cmp	r1, #31
 800b570:	d904      	bls.n	800b57c <_raise_r+0x14>
 800b572:	2316      	movs	r3, #22
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	2001      	movs	r0, #1
 800b578:	4240      	negs	r0, r0
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <_raise_r+0x24>
 800b582:	008a      	lsls	r2, r1, #2
 800b584:	189b      	adds	r3, r3, r2
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	2a00      	cmp	r2, #0
 800b58a:	d108      	bne.n	800b59e <_raise_r+0x36>
 800b58c:	0020      	movs	r0, r4
 800b58e:	f000 f831 	bl	800b5f4 <_getpid_r>
 800b592:	002a      	movs	r2, r5
 800b594:	0001      	movs	r1, r0
 800b596:	0020      	movs	r0, r4
 800b598:	f000 f81a 	bl	800b5d0 <_kill_r>
 800b59c:	e7ed      	b.n	800b57a <_raise_r+0x12>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	2a01      	cmp	r2, #1
 800b5a2:	d0ea      	beq.n	800b57a <_raise_r+0x12>
 800b5a4:	1c51      	adds	r1, r2, #1
 800b5a6:	d103      	bne.n	800b5b0 <_raise_r+0x48>
 800b5a8:	2316      	movs	r3, #22
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	e7e4      	b.n	800b57a <_raise_r+0x12>
 800b5b0:	2400      	movs	r4, #0
 800b5b2:	0028      	movs	r0, r5
 800b5b4:	601c      	str	r4, [r3, #0]
 800b5b6:	4790      	blx	r2
 800b5b8:	0020      	movs	r0, r4
 800b5ba:	e7de      	b.n	800b57a <_raise_r+0x12>

0800b5bc <raise>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <raise+0x10>)
 800b5c0:	0001      	movs	r1, r0
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	f7ff ffd0 	bl	800b568 <_raise_r>
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	200001dc 	.word	0x200001dc

0800b5d0 <_kill_r>:
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	b570      	push	{r4, r5, r6, lr}
 800b5d4:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_kill_r+0x20>)
 800b5d6:	0004      	movs	r4, r0
 800b5d8:	0008      	movs	r0, r1
 800b5da:	0011      	movs	r1, r2
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f7f7 fcf9 	bl	8002fd4 <_kill>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d103      	bne.n	800b5ee <_kill_r+0x1e>
 800b5e6:	682b      	ldr	r3, [r5, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d000      	beq.n	800b5ee <_kill_r+0x1e>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	200006d0 	.word	0x200006d0

0800b5f4 <_getpid_r>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	f7f7 fce7 	bl	8002fc8 <_getpid>
 800b5fa:	bd10      	pop	{r4, pc}

0800b5fc <__swhatbuf_r>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	000e      	movs	r6, r1
 800b600:	001d      	movs	r5, r3
 800b602:	230e      	movs	r3, #14
 800b604:	5ec9      	ldrsh	r1, [r1, r3]
 800b606:	0014      	movs	r4, r2
 800b608:	b096      	sub	sp, #88	; 0x58
 800b60a:	2900      	cmp	r1, #0
 800b60c:	da0c      	bge.n	800b628 <__swhatbuf_r+0x2c>
 800b60e:	89b2      	ldrh	r2, [r6, #12]
 800b610:	2380      	movs	r3, #128	; 0x80
 800b612:	0011      	movs	r1, r2
 800b614:	4019      	ands	r1, r3
 800b616:	421a      	tst	r2, r3
 800b618:	d013      	beq.n	800b642 <__swhatbuf_r+0x46>
 800b61a:	2100      	movs	r1, #0
 800b61c:	3b40      	subs	r3, #64	; 0x40
 800b61e:	2000      	movs	r0, #0
 800b620:	6029      	str	r1, [r5, #0]
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	b016      	add	sp, #88	; 0x58
 800b626:	bd70      	pop	{r4, r5, r6, pc}
 800b628:	466a      	mov	r2, sp
 800b62a:	f000 f84d 	bl	800b6c8 <_fstat_r>
 800b62e:	2800      	cmp	r0, #0
 800b630:	dbed      	blt.n	800b60e <__swhatbuf_r+0x12>
 800b632:	23f0      	movs	r3, #240	; 0xf0
 800b634:	9901      	ldr	r1, [sp, #4]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	4019      	ands	r1, r3
 800b63a:	4b03      	ldr	r3, [pc, #12]	; (800b648 <__swhatbuf_r+0x4c>)
 800b63c:	18c9      	adds	r1, r1, r3
 800b63e:	424b      	negs	r3, r1
 800b640:	4159      	adcs	r1, r3
 800b642:	2380      	movs	r3, #128	; 0x80
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	e7ea      	b.n	800b61e <__swhatbuf_r+0x22>
 800b648:	ffffe000 	.word	0xffffe000

0800b64c <__smakebuf_r>:
 800b64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b64e:	2602      	movs	r6, #2
 800b650:	898b      	ldrh	r3, [r1, #12]
 800b652:	0005      	movs	r5, r0
 800b654:	000c      	movs	r4, r1
 800b656:	4233      	tst	r3, r6
 800b658:	d006      	beq.n	800b668 <__smakebuf_r+0x1c>
 800b65a:	0023      	movs	r3, r4
 800b65c:	3347      	adds	r3, #71	; 0x47
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	2301      	movs	r3, #1
 800b664:	6163      	str	r3, [r4, #20]
 800b666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b668:	466a      	mov	r2, sp
 800b66a:	ab01      	add	r3, sp, #4
 800b66c:	f7ff ffc6 	bl	800b5fc <__swhatbuf_r>
 800b670:	9900      	ldr	r1, [sp, #0]
 800b672:	0007      	movs	r7, r0
 800b674:	0028      	movs	r0, r5
 800b676:	f7fa ff1b 	bl	80064b0 <_malloc_r>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d108      	bne.n	800b690 <__smakebuf_r+0x44>
 800b67e:	220c      	movs	r2, #12
 800b680:	5ea3      	ldrsh	r3, [r4, r2]
 800b682:	059a      	lsls	r2, r3, #22
 800b684:	d4ef      	bmi.n	800b666 <__smakebuf_r+0x1a>
 800b686:	2203      	movs	r2, #3
 800b688:	4393      	bics	r3, r2
 800b68a:	431e      	orrs	r6, r3
 800b68c:	81a6      	strh	r6, [r4, #12]
 800b68e:	e7e4      	b.n	800b65a <__smakebuf_r+0xe>
 800b690:	2380      	movs	r3, #128	; 0x80
 800b692:	89a2      	ldrh	r2, [r4, #12]
 800b694:	6020      	str	r0, [r4, #0]
 800b696:	4313      	orrs	r3, r2
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	6120      	str	r0, [r4, #16]
 800b69e:	6163      	str	r3, [r4, #20]
 800b6a0:	9b01      	ldr	r3, [sp, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00c      	beq.n	800b6c0 <__smakebuf_r+0x74>
 800b6a6:	0028      	movs	r0, r5
 800b6a8:	230e      	movs	r3, #14
 800b6aa:	5ee1      	ldrsh	r1, [r4, r3]
 800b6ac:	f000 f81e 	bl	800b6ec <_isatty_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d005      	beq.n	800b6c0 <__smakebuf_r+0x74>
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	89a2      	ldrh	r2, [r4, #12]
 800b6b8:	439a      	bics	r2, r3
 800b6ba:	3b02      	subs	r3, #2
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	433b      	orrs	r3, r7
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	e7ce      	b.n	800b666 <__smakebuf_r+0x1a>

0800b6c8 <_fstat_r>:
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	b570      	push	{r4, r5, r6, lr}
 800b6cc:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_fstat_r+0x20>)
 800b6ce:	0004      	movs	r4, r0
 800b6d0:	0008      	movs	r0, r1
 800b6d2:	0011      	movs	r1, r2
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	f7f7 fcdc 	bl	8003092 <_fstat>
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	d103      	bne.n	800b6e6 <_fstat_r+0x1e>
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d000      	beq.n	800b6e6 <_fstat_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}
 800b6e8:	200006d0 	.word	0x200006d0

0800b6ec <_isatty_r>:
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	b570      	push	{r4, r5, r6, lr}
 800b6f0:	4d06      	ldr	r5, [pc, #24]	; (800b70c <_isatty_r+0x20>)
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	0008      	movs	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f7 fcd9 	bl	80030ae <_isatty>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d103      	bne.n	800b708 <_isatty_r+0x1c>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d000      	beq.n	800b708 <_isatty_r+0x1c>
 800b706:	6023      	str	r3, [r4, #0]
 800b708:	bd70      	pop	{r4, r5, r6, pc}
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	200006d0 	.word	0x200006d0

0800b710 <round>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	004a      	lsls	r2, r1, #1
 800b714:	000d      	movs	r5, r1
 800b716:	4920      	ldr	r1, [pc, #128]	; (800b798 <round+0x88>)
 800b718:	0d52      	lsrs	r2, r2, #21
 800b71a:	1851      	adds	r1, r2, r1
 800b71c:	0006      	movs	r6, r0
 800b71e:	2913      	cmp	r1, #19
 800b720:	dc18      	bgt.n	800b754 <round+0x44>
 800b722:	2900      	cmp	r1, #0
 800b724:	da09      	bge.n	800b73a <round+0x2a>
 800b726:	0feb      	lsrs	r3, r5, #31
 800b728:	2200      	movs	r2, #0
 800b72a:	07db      	lsls	r3, r3, #31
 800b72c:	3101      	adds	r1, #1
 800b72e:	d101      	bne.n	800b734 <round+0x24>
 800b730:	491a      	ldr	r1, [pc, #104]	; (800b79c <round+0x8c>)
 800b732:	430b      	orrs	r3, r1
 800b734:	0019      	movs	r1, r3
 800b736:	0010      	movs	r0, r2
 800b738:	e017      	b.n	800b76a <round+0x5a>
 800b73a:	4c19      	ldr	r4, [pc, #100]	; (800b7a0 <round+0x90>)
 800b73c:	410c      	asrs	r4, r1
 800b73e:	0022      	movs	r2, r4
 800b740:	402a      	ands	r2, r5
 800b742:	4302      	orrs	r2, r0
 800b744:	d013      	beq.n	800b76e <round+0x5e>
 800b746:	2280      	movs	r2, #128	; 0x80
 800b748:	0312      	lsls	r2, r2, #12
 800b74a:	410a      	asrs	r2, r1
 800b74c:	1953      	adds	r3, r2, r5
 800b74e:	43a3      	bics	r3, r4
 800b750:	2200      	movs	r2, #0
 800b752:	e7ef      	b.n	800b734 <round+0x24>
 800b754:	2933      	cmp	r1, #51	; 0x33
 800b756:	dd0d      	ble.n	800b774 <round+0x64>
 800b758:	2380      	movs	r3, #128	; 0x80
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d106      	bne.n	800b76e <round+0x5e>
 800b760:	0002      	movs	r2, r0
 800b762:	002b      	movs	r3, r5
 800b764:	0029      	movs	r1, r5
 800b766:	f7f4 fff9 	bl	800075c <__aeabi_dadd>
 800b76a:	0006      	movs	r6, r0
 800b76c:	000d      	movs	r5, r1
 800b76e:	0030      	movs	r0, r6
 800b770:	0029      	movs	r1, r5
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	4c0b      	ldr	r4, [pc, #44]	; (800b7a4 <round+0x94>)
 800b776:	1912      	adds	r2, r2, r4
 800b778:	2401      	movs	r4, #1
 800b77a:	4264      	negs	r4, r4
 800b77c:	40d4      	lsrs	r4, r2
 800b77e:	4220      	tst	r0, r4
 800b780:	d0f5      	beq.n	800b76e <round+0x5e>
 800b782:	2233      	movs	r2, #51	; 0x33
 800b784:	1a51      	subs	r1, r2, r1
 800b786:	3a32      	subs	r2, #50	; 0x32
 800b788:	408a      	lsls	r2, r1
 800b78a:	1812      	adds	r2, r2, r0
 800b78c:	4282      	cmp	r2, r0
 800b78e:	4180      	sbcs	r0, r0
 800b790:	4240      	negs	r0, r0
 800b792:	182b      	adds	r3, r5, r0
 800b794:	43a2      	bics	r2, r4
 800b796:	e7cd      	b.n	800b734 <round+0x24>
 800b798:	fffffc01 	.word	0xfffffc01
 800b79c:	3ff00000 	.word	0x3ff00000
 800b7a0:	000fffff 	.word	0x000fffff
 800b7a4:	fffffbed 	.word	0xfffffbed

0800b7a8 <_init>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_fini>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr
