
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800373c  0800373c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003744  08003744  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800374c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000010  0800375c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800375c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcc7  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa1  00000000  00000000  0002dd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f7  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018415  00000000  00000000  00031157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f73f  00000000  00000000  0004956c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009924a  00000000  00000000  00058cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028e4  00000000  00000000  000f1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f47dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003634 	.word	0x08003634

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003634 	.word	0x08003634

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fc78 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f844 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f99a 	bl	8000970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f916 	bl	800086c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f8c6 	bl	80007d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f960 	bl	8000908 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000648:	f000 f882 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , DBG_TX_TIMEOUT ) ;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x80>)
 800064e:	681c      	ldr	r4, [r3, #0]
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0x80>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fd55 	bl	8000104 <strlen>
 800065a:	0003      	movs	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	23fa      	movs	r3, #250	; 0xfa
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x84>)
 8000664:	0021      	movs	r1, r4
 8000666:	f002 f899 	bl	800279c <HAL_UART_Transmit>
  my_astro_off () ;
 800066a:	f000 fa0f 	bl	8000a8c <my_astro_off>
  astronode_send_mpn_rr () ;
  astronode_send_msn_rr () ;
  astronode_send_mgi_rr () ;
  my_astro_off () ;
  */
  my_lx6_off () ;
 800066e:	f000 fa37 	bl	8000ae0 <my_lx6_off>
  HAL_Delay ( 5000 ) ;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0x88>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fcdb 	bl	8001030 <HAL_Delay>
  my_lx6_on () ;
 800067a:	f000 fa19 	bl	8000ab0 <my_lx6_on>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive ( HUART_Lx6 , &uart1_rx , 1 , 1000 ) ;
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	490d      	ldr	r1, [pc, #52]	; (80006b8 <main+0x8c>)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <main+0x90>)
 8000686:	2201      	movs	r2, #1
 8000688:	f002 f924 	bl	80028d4 <HAL_UART_Receive>
	  if ( uart1_rx )
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <main+0x8c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <main+0x76>
	  {
		  HAL_UART_Transmit ( HUART_DBG , &uart1_rx , 1/*rxl*/ , 1000 ) ;
 8000694:	23fa      	movs	r3, #250	; 0xfa
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <main+0x8c>)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <main+0x84>)
 800069c:	2201      	movs	r2, #1
 800069e:	f002 f87d 	bl	800279c <HAL_UART_Transmit>
	  }
	  uart1_rx = 0 ;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <main+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive ( HUART_Lx6 , &uart1_rx , 1 , 1000 ) ;
 80006a8:	e7e9      	b.n	800067e <main+0x52>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000114 	.word	0x20000114
 80006b4:	00001388 	.word	0x00001388
 80006b8:	2000023c 	.word	0x2000023c
 80006bc:	200001a8 	.word	0x200001a8

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b093      	sub	sp, #76	; 0x4c
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	2410      	movs	r4, #16
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2338      	movs	r3, #56	; 0x38
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 ff83 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	2310      	movs	r3, #16
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f002 ff7c 	bl	80035dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 f8f9 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2240      	movs	r2, #64	; 0x40
 8000706:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f931 	bl	8001978 <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800071a:	f000 f9fd 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	003b      	movs	r3, r7
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	003b      	movs	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	003b      	movs	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000736:	003b      	movs	r3, r7
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fc36 	bl	8001fac <HAL_RCC_ClockConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000744:	f000 f9e8 	bl	8000b18 <Error_Handler>
  }
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b013      	add	sp, #76	; 0x4c
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C1_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C1_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 ff79 	bl	8001684 <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f9bf 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f806 	bl	80017b0 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f9b6 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_I2C1_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 f849 	bl	8001848 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f9ad 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00303d5b 	.word	0x00303d5b

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007d6:	4a24      	ldr	r2, [pc, #144]	; (8000868 <MX_USART1_UART_Init+0x98>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007dc:	2296      	movs	r2, #150	; 0x96
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_USART1_UART_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_USART1_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_USART1_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART1_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USART1_UART_Init+0x94>)
 800081a:	0018      	movs	r0, r3
 800081c:	f001 ff28 	bl	8002670 <HAL_UART_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f978 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x94>)
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fdf5 	bl	800341c <HAL_UARTEx_SetTxFifoThreshold>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f96f 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_USART1_UART_Init+0x94>)
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f002 fe2c 	bl	800349c <HAL_UARTEx_SetRxFifoThreshold>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f966 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x94>)
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fdaa 	bl	80033a8 <HAL_UARTEx_DisableFifoMode>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f95e 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000080 	.word	0x20000080
 8000868:	40013800 	.word	0x40013800

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_USART2_UART_Init+0x98>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000878:	22e1      	movs	r2, #225	; 0xe1
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART2_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_USART2_UART_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 feda 	bl	8002670 <HAL_UART_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f92a 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fda7 	bl	800341c <HAL_UARTEx_SetTxFifoThreshold>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f921 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008d8:	2100      	movs	r1, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fdde 	bl	800349c <HAL_UARTEx_SetRxFifoThreshold>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f918 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fd5c 	bl	80033a8 <HAL_UARTEx_DisableFifoMode>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f910 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000114 	.word	0x20000114
 8000904:	40004400 	.word	0x40004400

08000908 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_USART3_UART_Init+0x60>)
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_USART3_UART_Init+0x64>)
 8000910:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000914:	2296      	movs	r2, #150	; 0x96
 8000916:	0192      	lsls	r2, r2, #6
 8000918:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x60>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x60>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_USART3_UART_Init+0x60>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x60>)
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fe8c 	bl	8002670 <HAL_UART_Init>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800095c:	f000 f8dc 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	200001a8 	.word	0x200001a8
 800096c:	40004800 	.word	0x40004800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b08b      	sub	sp, #44	; 0x2c
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	2414      	movs	r4, #20
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f002 fe2b 	bl	80035dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <MX_GPIO_Init+0x10c>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098a:	4b3c      	ldr	r3, [pc, #240]	; (8000a7c <MX_GPIO_Init+0x10c>)
 800098c:	2104      	movs	r1, #4
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <MX_GPIO_Init+0x10c>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000996:	2204      	movs	r2, #4
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009a4:	2120      	movs	r1, #32
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2220      	movs	r2, #32
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009d4:	2102      	movs	r1, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x10c>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2202      	movs	r2, #2
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 80009e6:	238c      	movs	r3, #140	; 0x8c
 80009e8:	015b      	lsls	r3, r3, #5
 80009ea:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_GPIO_Init+0x110>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	0019      	movs	r1, r3
 80009f0:	f000 fe2a 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 80009f4:	4923      	ldr	r1, [pc, #140]	; (8000a84 <MX_GPIO_Init+0x114>)
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2200      	movs	r2, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fe23 	bl	8001648 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	228c      	movs	r2, #140	; 0x8c
 8000a06:	0152      	lsls	r2, r2, #5
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_GPIO_Init+0x110>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f000 fbdc 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_GPIO_Init+0x114>)
 8000a2c:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	193a      	adds	r2, r7, r4
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fbc9 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8000a4e:	0021      	movs	r1, r4
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	22c0      	movs	r2, #192	; 0xc0
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2288      	movs	r2, #136	; 0x88
 8000a5c:	0352      	lsls	r2, r2, #13
 8000a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <MX_GPIO_Init+0x118>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f000 fbb7 	bl	80011e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b00b      	add	sp, #44	; 0x2c
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	50000800 	.word	0x50000800
 8000a84:	00009860 	.word	0x00009860
 8000a88:	50000400 	.word	0x50000400

08000a8c <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fdd5 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	; (8000aac <my_astro_off+0x20>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fe3b 	bl	800271c <HAL_UART_DeInit>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000080 	.word	0x20000080

08000ab0 <my_lx6_on>:
void my_lx6_on ( void )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <my_lx6_on+0x2c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	0019      	movs	r1, r3
 8000abe:	f000 fdc3 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	015b      	lsls	r3, r3, #5
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <my_lx6_on+0x2c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	0019      	movs	r1, r3
 8000acc:	f000 fdbc 	bl	8001648 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8000ad0:	f7ff ff1a 	bl	8000908 <MX_USART3_UART_Init>
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	50000800 	.word	0x50000800

08000ae0 <my_lx6_off>:
void my_lx6_off ( void )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <my_lx6_off+0x30>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	0019      	movs	r1, r3
 8000aee:	f000 fdab 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	015b      	lsls	r3, r3, #5
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <my_lx6_off+0x30>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 fda4 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <my_lx6_off+0x34>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fe0a 	bl	800271c <HAL_UART_DeInit>
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	50000800 	.word	0x50000800
 8000b14:	200001a8 	.word	0x200001a8

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	430a      	orrs	r2, r1
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0549      	lsls	r1, r1, #21
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_MspInit+0x44>)
 8000b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	055b      	lsls	r3, r3, #21
 8000b58:	4013      	ands	r3, r2
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b097      	sub	sp, #92	; 0x5c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2344      	movs	r3, #68	; 0x44
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f002 fd2c 	bl	80035dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	2410      	movs	r4, #16
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2334      	movs	r3, #52	; 0x34
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fd24 	bl	80035dc <memset>
  if(hi2c->Instance==I2C1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <HAL_I2C_MspInit+0xb8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d13d      	bne.n	8000c1a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2220      	movs	r2, #32
 8000ba2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fba7 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bb6:	f7ff ffaf 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8000bd2:	2144      	movs	r1, #68	; 0x44
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22c0      	movs	r2, #192	; 0xc0
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2212      	movs	r2, #18
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2206      	movs	r2, #6
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_I2C_MspInit+0xc0>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f000 faf1 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0389      	lsls	r1, r1, #14
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_I2C_MspInit+0xbc>)
 8000c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	039b      	lsls	r3, r3, #14
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b017      	add	sp, #92	; 0x5c
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	50000400 	.word	0x50000400

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b09b      	sub	sp, #108	; 0x6c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	2354      	movs	r3, #84	; 0x54
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2314      	movs	r3, #20
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f002 fcca 	bl	80035dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	2420      	movs	r4, #32
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2334      	movs	r3, #52	; 0x34
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f002 fcc2 	bl	80035dc <memset>
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a61      	ldr	r2, [pc, #388]	; (8000de4 <HAL_UART_MspInit+0x1b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d140      	bne.n	8000ce4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fb45 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c7a:	f7ff ff4d 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c82:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	01c9      	lsls	r1, r1, #7
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c8c:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	01db      	lsls	r3, r3, #7
 8000c94:	4013      	ands	r3, r2
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9e:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8000cb2:	2154      	movs	r1, #84	; 0x54
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	22c0      	movs	r2, #192	; 0xc0
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	187a      	adds	r2, r7, r1
 8000cd6:	23a0      	movs	r3, #160	; 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fa7f 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce2:	e07b      	b.n	8000ddc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_UART_MspInit+0x1bc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d140      	bne.n	8000d70 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cee:	2120      	movs	r1, #32
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 fafe 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8000d08:	f7ff ff06 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0289      	lsls	r1, r1, #10
 8000d16:	430a      	orrs	r2, r1
 8000d18:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8000d40:	2154      	movs	r1, #84	; 0x54
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	220c      	movs	r2, #12
 8000d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2201      	movs	r2, #1
 8000d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	187a      	adds	r2, r7, r1
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fa39 	bl	80011e0 <HAL_GPIO_Init>
}
 8000d6e:	e035      	b.n	8000ddc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_UART_MspInit+0x1c0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d130      	bne.n	8000ddc <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	02c9      	lsls	r1, r1, #11
 8000d84:	430a      	orrs	r2, r1
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	02db      	lsls	r3, r3, #11
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x1b8>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8000dae:	2154      	movs	r1, #84	; 0x54
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	22c0      	movs	r2, #192	; 0xc0
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2202      	movs	r2, #2
 8000dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_UART_MspInit+0x1c4>)
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	f000 fa02 	bl	80011e0 <HAL_GPIO_Init>
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b01b      	add	sp, #108	; 0x6c
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40004800 	.word	0x40004800
 8000df4:	50000800 	.word	0x50000800

08000df8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <HAL_UART_MspDeInit+0x80>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10e      	bne.n	8000e28 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e10:	491b      	ldr	r1, [pc, #108]	; (8000e80 <HAL_UART_MspDeInit+0x88>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	00da      	lsls	r2, r3, #3
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 fb41 	bl	80014a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000e26:	e023      	b.n	8000e70 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <HAL_UART_MspDeInit+0x8c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10c      	bne.n	8000e4c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e38:	4913      	ldr	r1, [pc, #76]	; (8000e88 <HAL_UART_MspDeInit+0x90>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8000e3e:	23a0      	movs	r3, #160	; 0xa0
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	210c      	movs	r1, #12
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 fb2f 	bl	80014a8 <HAL_GPIO_DeInit>
}
 8000e4a:	e011      	b.n	8000e70 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_UART_MspDeInit+0x94>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10c      	bne.n	8000e70 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_UART_MspDeInit+0x84>)
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <HAL_UART_MspDeInit+0x98>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_UART_MspDeInit+0x9c>)
 8000e68:	0019      	movs	r1, r3
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	f000 fb1c 	bl	80014a8 <HAL_GPIO_DeInit>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	ffffbfff 	.word	0xffffbfff
 8000e84:	40004400 	.word	0x40004400
 8000e88:	fffdffff 	.word	0xfffdffff
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	fffbffff 	.word	0xfffbffff
 8000e94:	50000800 	.word	0x50000800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f89c 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f7ff fff7 	bl	8000ec6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f002 fb75 	bl	80035ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f02:	f7ff fb93 	bl	800062c <main>

08000f06 <LoopForever>:

LoopForever:
  b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f14:	0800374c 	.word	0x0800374c
  ldr r2, =_sbss
 8000f18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f1c:	20000244 	.word	0x20000244

08000f20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_COMP_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x3c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Init+0x3c>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0049      	lsls	r1, r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f810 	bl	8000f64 <HAL_InitTick>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fde8 	bl	8000b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_InitTick+0x88>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d02b      	beq.n	8000fd4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_InitTick+0x8c>)
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_InitTick+0x88>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	0019      	movs	r1, r3
 8000f86:	23fa      	movs	r3, #250	; 0xfa
 8000f88:	0098      	lsls	r0, r3, #2
 8000f8a:	f7ff f8c3 	bl	8000114 <__udivsi3>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0019      	movs	r1, r3
 8000f92:	0020      	movs	r0, r4
 8000f94:	f7ff f8be 	bl	8000114 <__udivsi3>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f913 	bl	80011c6 <HAL_SYSTICK_Config>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d112      	bne.n	8000fca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d80a      	bhi.n	8000fc0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2301      	movs	r3, #1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f8f2 	bl	800119c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_InitTick+0x90>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00d      	b.n	8000fdc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e008      	b.n	8000fdc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b005      	add	sp, #20
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_IncTick+0x1c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x20>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	18d2      	adds	r2, r2, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_IncTick+0x20>)
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000240 	.word	0x20000240

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <HAL_GetTick+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000240 	.word	0x20000240

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff fff0 	bl	800101c <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	001a      	movs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	189b      	adds	r3, r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	f7ff ffe0 	bl	800101c <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	2000000c 	.word	0x2000000c

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	d828      	bhi.n	80010e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <__NVIC_SetPriority+0xd4>)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	33c0      	adds	r3, #192	; 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	589b      	ldr	r3, [r3, r2]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <__NVIC_SetPriority+0xd4>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010de:	e031      	b.n	8001144 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0019      	movs	r1, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	400b      	ands	r3, r1
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3306      	adds	r3, #6
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	3304      	adds	r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	0011      	movs	r1, r2
 8001100:	2203      	movs	r2, #3
 8001102:	400a      	ands	r2, r1
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	21ff      	movs	r1, #255	; 0xff
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	401a      	ands	r2, r3
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4003      	ands	r3, r0
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	001c      	movs	r4, r3
 8001130:	230f      	movs	r3, #15
 8001132:	4023      	ands	r3, r4
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	430a      	orrs	r2, r1
 800113a:	3306      	adds	r3, #6
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b003      	add	sp, #12
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	045b      	lsls	r3, r3, #17
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2301      	movs	r3, #1
 800116a:	e010      	b.n	800118e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SysTick_Config+0x44>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	3a01      	subs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2103      	movs	r1, #3
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff7c 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x44>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x44>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	210f      	movs	r1, #15
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ffbf 	bl	8001154 <SysTick_Config>
 80011d6:	0003      	movs	r3, r0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	e147      	b.n	8001480 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x28>
 8001206:	e138      	b.n	800147a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
 8001210:	2b01      	cmp	r3, #1
 8001212:	d005      	beq.n	8001220 <HAL_GPIO_Init+0x40>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	4013      	ands	r3, r2
 800121c:	2b02      	cmp	r3, #2
 800121e:	d130      	bne.n	8001282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001256:	2201      	movs	r2, #1
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	2201      	movs	r2, #1
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	2b03      	cmp	r3, #3
 800128c:	d017      	beq.n	80012be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d123      	bne.n	8001312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	58d3      	ldr	r3, [r2, r3]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2207      	movs	r2, #7
 80012dc:	4013      	ands	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2107      	movs	r1, #7
 80012f6:	400b      	ands	r3, r1
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	029b      	lsls	r3, r3, #10
 800134e:	4013      	ands	r3, r2
 8001350:	d100      	bne.n	8001354 <HAL_GPIO_Init+0x174>
 8001352:	e092      	b.n	800147a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001354:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3318      	adds	r3, #24
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	589b      	ldr	r3, [r3, r2]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	220f      	movs	r2, #15
 800136c:	409a      	lsls	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	23a0      	movs	r3, #160	; 0xa0
 800137c:	05db      	lsls	r3, r3, #23
 800137e:	429a      	cmp	r2, r3
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x1ca>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_GPIO_Init+0x2bc>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x1c6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <HAL_GPIO_Init+0x2c0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x1c2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <HAL_GPIO_Init+0x2c4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x1be>
 800139a:	2303      	movs	r3, #3
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x1cc>
 800139e:	2305      	movs	r3, #5
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x1cc>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x1cc>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x1cc>
 80013aa:	2300      	movs	r3, #0
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	2103      	movs	r1, #3
 80013b0:	400a      	ands	r2, r1
 80013b2:	00d2      	lsls	r2, r2, #3
 80013b4:	4093      	lsls	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013bc:	4936      	ldr	r1, [pc, #216]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3318      	adds	r3, #24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	035b      	lsls	r3, r3, #13
 80013e2:	4013      	ands	r3, r2
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43da      	mvns	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	039b      	lsls	r3, r3, #14
 800140c:	4013      	ands	r3, r2
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800141e:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 8001420:	2384      	movs	r3, #132	; 0x84
 8001422:	58d3      	ldr	r3, [r2, r3]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001444:	4914      	ldr	r1, [pc, #80]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 8001446:	2284      	movs	r2, #132	; 0x84
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	58d3      	ldr	r3, [r2, r3]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	4013      	ands	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001472:	4909      	ldr	r1, [pc, #36]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	40da      	lsrs	r2, r3
 8001488:	1e13      	subs	r3, r2, #0
 800148a:	d000      	beq.n	800148e <HAL_GPIO_Init+0x2ae>
 800148c:	e6b0      	b.n	80011f0 <HAL_GPIO_Init+0x10>
  }
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021800 	.word	0x40021800
 800149c:	50000400 	.word	0x50000400
 80014a0:	50000800 	.word	0x50000800
 80014a4:	50000c00 	.word	0x50000c00

080014a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80014b6:	e0b4      	b.n	8001622 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	409a      	lsls	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_DeInit+0x24>
 80014ca:	e0a7      	b.n	800161c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80014cc:	4a5a      	ldr	r2, [pc, #360]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3318      	adds	r3, #24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	589b      	ldr	r3, [r3, r2]
 80014d8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	220f      	movs	r2, #15
 80014e4:	409a      	lsls	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_DeInit+0x76>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_DeInit+0x194>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_DeInit+0x72>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_DeInit+0x198>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_DeInit+0x6e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <HAL_GPIO_DeInit+0x19c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_DeInit+0x6a>
 800150e:	2303      	movs	r3, #3
 8001510:	e006      	b.n	8001520 <HAL_GPIO_DeInit+0x78>
 8001512:	2305      	movs	r3, #5
 8001514:	e004      	b.n	8001520 <HAL_GPIO_DeInit+0x78>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_DeInit+0x78>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_DeInit+0x78>
 800151e:	2300      	movs	r3, #0
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	2103      	movs	r1, #3
 8001524:	400a      	ands	r2, r1
 8001526:	00d2      	lsls	r2, r2, #3
 8001528:	4093      	lsls	r3, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d136      	bne.n	800159e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001530:	4a41      	ldr	r2, [pc, #260]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	58d3      	ldr	r3, [r2, r3]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	43d2      	mvns	r2, r2
 800153a:	493f      	ldr	r1, [pc, #252]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 800153c:	4013      	ands	r3, r2
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001542:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001544:	2384      	movs	r3, #132	; 0x84
 8001546:	58d3      	ldr	r3, [r2, r3]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	43d2      	mvns	r2, r2
 800154c:	493a      	ldr	r1, [pc, #232]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 800154e:	4013      	ands	r3, r2
 8001550:	2284      	movs	r2, #132	; 0x84
 8001552:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43d9      	mvns	r1, r3
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 800155e:	400a      	ands	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43d9      	mvns	r1, r3
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2203      	movs	r2, #3
 8001574:	4013      	ands	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	220f      	movs	r2, #15
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001580:	4a2d      	ldr	r2, [pc, #180]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3318      	adds	r3, #24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	589a      	ldr	r2, [r3, r2]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	4829      	ldr	r0, [pc, #164]	; (8001638 <HAL_GPIO_DeInit+0x190>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	400a      	ands	r2, r1
 8001598:	3318      	adds	r3, #24
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2103      	movs	r1, #3
 80015a8:	4099      	lsls	r1, r3
 80015aa:	000b      	movs	r3, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	58d3      	ldr	r3, [r2, r3]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	2107      	movs	r1, #7
 80015c2:	400a      	ands	r2, r1
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	210f      	movs	r1, #15
 80015c8:	4091      	lsls	r1, r2
 80015ca:	000a      	movs	r2, r1
 80015cc:	43d1      	mvns	r1, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	08d2      	lsrs	r2, r2, #3
 80015d2:	4019      	ands	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	0052      	lsls	r2, r2, #1
 80015e4:	2103      	movs	r1, #3
 80015e6:	4091      	lsls	r1, r2
 80015e8:	000a      	movs	r2, r1
 80015ea:	43d2      	mvns	r2, r2
 80015ec:	401a      	ands	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2101      	movs	r1, #1
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4091      	lsls	r1, r2
 80015fc:	000a      	movs	r2, r1
 80015fe:	43d2      	mvns	r2, r2
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	0052      	lsls	r2, r2, #1
 800160e:	2103      	movs	r1, #3
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	40da      	lsrs	r2, r3
 8001628:	1e13      	subs	r3, r2, #0
 800162a:	d000      	beq.n	800162e <HAL_GPIO_DeInit+0x186>
 800162c:	e744      	b.n	80014b8 <HAL_GPIO_DeInit+0x10>
  }
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b006      	add	sp, #24
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021800 	.word	0x40021800
 800163c:	50000400 	.word	0x50000400
 8001640:	50000800 	.word	0x50000800
 8001644:	50000c00 	.word	0x50000c00

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	0008      	movs	r0, r1
 8001652:	0011      	movs	r1, r2
 8001654:	1cbb      	adds	r3, r7, #2
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	1c7b      	adds	r3, r7, #1
 800165c:	1c0a      	adds	r2, r1, #0
 800165e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001660:	1c7b      	adds	r3, r7, #1
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001668:	1cbb      	adds	r3, r7, #2
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001672:	1cbb      	adds	r3, r7, #2
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e082      	b.n	800179c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2241      	movs	r2, #65	; 0x41
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d107      	bne.n	80016b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	2100      	movs	r1, #0
 80016a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fa5d 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2241      	movs	r2, #65	; 0x41
 80016b6:	2124      	movs	r1, #36	; 0x24
 80016b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	438a      	bics	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4934      	ldr	r1, [pc, #208]	; (80017a4 <HAL_I2C_Init+0x120>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4931      	ldr	r1, [pc, #196]	; (80017a8 <HAL_I2C_Init+0x124>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d108      	bne.n	8001702 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0209      	lsls	r1, r1, #8
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	e007      	b.n	8001712 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2184      	movs	r1, #132	; 0x84
 800170c:	0209      	lsls	r1, r1, #8
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d104      	bne.n	8001724 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <HAL_I2C_Init+0x128>)
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	491a      	ldr	r1, [pc, #104]	; (80017a8 <HAL_I2C_Init+0x124>)
 8001740:	400a      	ands	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	431a      	orrs	r2, r3
 800174e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69d9      	ldr	r1, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2241      	movs	r2, #65	; 0x41
 8001788:	2120      	movs	r1, #32
 800178a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2242      	movs	r2, #66	; 0x42
 8001796:	2100      	movs	r1, #0
 8001798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	f0ffffff 	.word	0xf0ffffff
 80017a8:	ffff7fff 	.word	0xffff7fff
 80017ac:	02008000 	.word	0x02008000

080017b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2241      	movs	r2, #65	; 0x41
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d138      	bne.n	8001838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	5c9b      	ldrb	r3, [r3, r2]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e032      	b.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2241      	movs	r2, #65	; 0x41
 80017e0:	2124      	movs	r1, #36	; 0x24
 80017e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2101      	movs	r1, #1
 80017f0:	438a      	bics	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4911      	ldr	r1, [pc, #68]	; (8001844 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001800:	400a      	ands	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2101      	movs	r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2241      	movs	r2, #65	; 0x41
 8001828:	2120      	movs	r1, #32
 800182a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	ffffefff 	.word	0xffffefff

08001848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2241      	movs	r2, #65	; 0x41
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d139      	bne.n	80018d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001868:	2302      	movs	r3, #2
 800186a:	e033      	b.n	80018d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2124      	movs	r1, #36	; 0x24
 800187a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2101      	movs	r1, #1
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2241      	movs	r2, #65	; 0x41
 80018c2:	2120      	movs	r1, #32
 80018c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	fffff0ff 	.word	0xfffff0ff

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d11f      	bne.n	8001944 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	0013      	movs	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	189b      	adds	r3, r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4912      	ldr	r1, [pc, #72]	; (800195c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001912:	0018      	movs	r0, r3
 8001914:	f7fe fbfe 	bl	8000114 <__udivsi3>
 8001918:	0003      	movs	r3, r0
 800191a:	3301      	adds	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800191e:	e008      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e001      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e009      	b.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	401a      	ands	r2, r3
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	429a      	cmp	r2, r3
 8001942:	d0ed      	beq.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40007000 	.word	0x40007000
 8001954:	fffff9ff 	.word	0xfffff9ff
 8001958:	20000004 	.word	0x20000004
 800195c:	000f4240 	.word	0x000f4240

08001960 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	23e0      	movs	r3, #224	; 0xe0
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	4013      	ands	r3, r2
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e2fe      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x1e>
 8001994:	e07c      	b.n	8001a90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001996:	4bc3      	ldr	r3, [pc, #780]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2238      	movs	r2, #56	; 0x38
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a0:	4bc0      	ldr	r3, [pc, #768]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4013      	ands	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3e>
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4bb9      	ldr	r3, [pc, #740]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	4013      	ands	r3, r2
 80019c6:	d062      	beq.n	8001a8e <HAL_RCC_OscConfig+0x116>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d15e      	bne.n	8001a8e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e2d9      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x78>
 80019e0:	4bb0      	ldr	r3, [pc, #704]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4baf      	ldr	r3, [pc, #700]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	0249      	lsls	r1, r1, #9
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e020      	b.n	8001a32 <HAL_RCC_OscConfig+0xba>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	23a0      	movs	r3, #160	; 0xa0
 80019f6:	02db      	lsls	r3, r3, #11
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10e      	bne.n	8001a1a <HAL_RCC_OscConfig+0xa2>
 80019fc:	4ba9      	ldr	r3, [pc, #676]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4ba8      	ldr	r3, [pc, #672]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	02c9      	lsls	r1, r1, #11
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4ba5      	ldr	r3, [pc, #660]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	0249      	lsls	r1, r1, #9
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0xba>
 8001a1a:	4ba2      	ldr	r3, [pc, #648]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4ba1      	ldr	r3, [pc, #644]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	49a1      	ldr	r1, [pc, #644]	; (8001ca8 <HAL_RCC_OscConfig+0x330>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4b9f      	ldr	r3, [pc, #636]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b9e      	ldr	r3, [pc, #632]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	499f      	ldr	r1, [pc, #636]	; (8001cac <HAL_RCC_OscConfig+0x334>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d014      	beq.n	8001a64 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff faef 	bl	800101c <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff faea 	bl	800101c <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e298      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xcc>
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fada 	bl	800101c <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fad5 	bl	800101c <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e283      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a80:	4b88      	ldr	r3, [pc, #544]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0xf6>
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_RCC_OscConfig+0x124>
 8001a9a:	e099      	b.n	8001bd0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_OscConfig+0x144>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d002      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d135      	bne.n	8001b2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4013      	ands	r3, r2
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x162>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e256      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4a74      	ldr	r2, [pc, #464]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	021a      	lsls	r2, r3, #8
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001af6:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x33c>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0adb      	lsrs	r3, r3, #11
 8001b10:	2207      	movs	r2, #7
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x340>)
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x344>)
 8001b1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x348>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fa1f 	bl	8000f64 <HAL_InitTick>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d051      	beq.n	8001bce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e22c      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d030      	beq.n	8001b98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b36:	4b5b      	ldr	r3, [pc, #364]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x33c>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0049      	lsls	r1, r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fa60 	bl	800101c <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa5b 	bl	800101c <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e209      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b74:	4b4b      	ldr	r3, [pc, #300]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	021a      	lsls	r2, r3, #8
 8001b90:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e01b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	4949      	ldr	r1, [pc, #292]	; (8001cc4 <HAL_RCC_OscConfig+0x34c>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fa3a 	bl	800101c <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa35 	bl	800101c <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1e3      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc0:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x236>
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d047      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2238      	movs	r2, #56	; 0x38
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b18      	cmp	r3, #24
 8001be4:	d10a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d03c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d138      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e1c5      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d019      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fa04 	bl	800101c <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f9ff 	bl	800101c <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1ad      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f1      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2a2>
 8001c36:	e018      	b.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f9ea 	bl	800101c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f9e5 	bl	800101c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e193      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f1      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4013      	ands	r3, r2
 8001c72:	d100      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2fe>
 8001c74:	e0c6      	b.n	8001e04 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	231f      	movs	r3, #31
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2238      	movs	r2, #56	; 0x38
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d11e      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_OscConfig+0x31e>
 8001c94:	e0b6      	b.n	8001e04 <HAL_RCC_OscConfig+0x48c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d000      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x328>
 8001c9e:	e0b1      	b.n	8001e04 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e171      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	fffeffff 	.word	0xfffeffff
 8001cac:	fffbffff 	.word	0xfffbffff
 8001cb0:	ffff80ff 	.word	0xffff80ff
 8001cb4:	ffffc7ff 	.word	0xffffc7ff
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cc8:	4bb1      	ldr	r3, [pc, #708]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x360>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x362>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d011      	beq.n	8001d02 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4bac      	ldr	r3, [pc, #688]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce2:	4bab      	ldr	r3, [pc, #684]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0549      	lsls	r1, r1, #21
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cec:	4ba8      	ldr	r3, [pc, #672]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	055b      	lsls	r3, r3, #21
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d02:	4ba4      	ldr	r3, [pc, #656]	; (8001f94 <HAL_RCC_OscConfig+0x61c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0e:	4ba1      	ldr	r3, [pc, #644]	; (8001f94 <HAL_RCC_OscConfig+0x61c>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <HAL_RCC_OscConfig+0x61c>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	0049      	lsls	r1, r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f97e 	bl	800101c <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff f979 	bl	800101c <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e127      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	4b96      	ldr	r3, [pc, #600]	; (8001f94 <HAL_RCC_OscConfig+0x61c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3e2>
 8001d4c:	4b90      	ldr	r3, [pc, #576]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x41c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x404>
 8001d62:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d66:	4b8a      	ldr	r3, [pc, #552]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d68:	2104      	movs	r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d6e:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d72:	4b87      	ldr	r3, [pc, #540]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0x41c>
 8001d7c:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d80:	4b83      	ldr	r3, [pc, #524]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d88:	4b81      	ldr	r3, [pc, #516]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8c:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	2104      	movs	r1, #4
 8001d90:	438a      	bics	r2, r1
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d014      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f93e 	bl	800101c <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff f939 	bl	800101c <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a79      	ldr	r2, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0e6      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dba:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x42e>
 8001dc4:	e013      	b.n	8001dee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f929 	bl	800101c <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f924 	bl	800101c <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0d1      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dee:	231f      	movs	r3, #31
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	4967      	ldr	r1, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x624>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCC_OscConfig+0x496>
 8001e0c:	e0bb      	b.n	8001f86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2238      	movs	r2, #56	; 0x38
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d100      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4a4>
 8001e1a:	e07b      	b.n	8001f14 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d156      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	495d      	ldr	r1, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x628>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f8f4 	bl	800101c <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff f8ef 	bl	800101c <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e09d      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	049b      	lsls	r3, r3, #18
 8001e54:	4013      	ands	r3, r2
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_RCC_OscConfig+0x62c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0449      	lsls	r1, r1, #17
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0549      	lsls	r1, r1, #21
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f8b8 	bl	800101c <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff f8b3 	bl	800101c <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e061      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	049b      	lsls	r3, r3, #18
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x53a>
 8001ed0:	e059      	b.n	8001f86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001ed8:	4931      	ldr	r1, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x628>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f89d 	bl	800101c <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f898 	bl	800101c <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e046      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	049b      	lsls	r3, r3, #18
 8001f02:	4013      	ands	r3, r2
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001f0c:	4926      	ldr	r1, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x630>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	e038      	b.n	8001f86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e033      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_RCC_OscConfig+0x618>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d126      	bne.n	8001f82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2270      	movs	r2, #112	; 0x70
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	23fe      	movs	r3, #254	; 0xfe
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	401a      	ands	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d116      	bne.n	8001f82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	23f8      	movs	r3, #248	; 0xf8
 8001f58:	039b      	lsls	r3, r3, #14
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d10e      	bne.n	8001f82 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	23e0      	movs	r3, #224	; 0xe0
 8001f68:	051b      	lsls	r3, r3, #20
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0f5b      	lsrs	r3, r3, #29
 8001f78:	075a      	lsls	r2, r3, #29
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b008      	add	sp, #32
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	efffffff 	.word	0xefffffff
 8001fa0:	feffffff 	.word	0xfeffffff
 8001fa4:	11c1808c 	.word	0x11c1808c
 8001fa8:	eefefffc 	.word	0xeefefffc

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0e9      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d91e      	bls.n	800200c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fe0:	f7ff f81c 	bl	800101c <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7ff f817 	bl	800101c <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0ca      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2207      	movs	r2, #7
 8002004:	4013      	ands	r3, r2
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d015      	beq.n	8002042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2204      	movs	r2, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d006      	beq.n	800202e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002020:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	21e0      	movs	r1, #224	; 0xe0
 8002028:	01c9      	lsls	r1, r1, #7
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002034:	4013      	ands	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d057      	beq.n	80020fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d12b      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e097      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	049b      	lsls	r3, r3, #18
 8002074:	4013      	ands	r3, r2
 8002076:	d11f      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e08b      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4013      	ands	r3, r2
 800208e:	d113      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e07f      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e074      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e06d      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2207      	movs	r2, #7
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7fe ffa6 	bl	800101c <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe ffa1 	bl	800101c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e054      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2238      	movs	r2, #56	; 0x38
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1ec      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2207      	movs	r2, #7
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d21e      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2207      	movs	r2, #7
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800211c:	f7fe ff7e 	bl	800101c <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002124:	e009      	b.n	800213a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7fe ff79 	bl	800101c <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e02c      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2207      	movs	r2, #7
 8002140:	4013      	ands	r3, r2
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <HAL_RCC_ClockConfig+0x200>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002166:	f000 f829 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800216a:	0001      	movs	r1, r0
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	220f      	movs	r2, #15
 8002174:	401a      	ands	r2, r3
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x204>)
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	58d3      	ldr	r3, [r2, r3]
 800217c:	221f      	movs	r2, #31
 800217e:	4013      	ands	r3, r2
 8002180:	000a      	movs	r2, r1
 8002182:	40da      	lsrs	r2, r3
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x208>)
 8002186:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x20c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fee9 	bl	8000f64 <HAL_InitTick>
 8002192:	0003      	movs	r3, r0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40022000 	.word	0x40022000
 80021a0:	00001388 	.word	0x00001388
 80021a4:	40021000 	.word	0x40021000
 80021a8:	fffff0ff 	.word	0xfffff0ff
 80021ac:	ffff8fff 	.word	0xffff8fff
 80021b0:	080036b4 	.word	0x080036b4
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2238      	movs	r2, #56	; 0x38
 80021c8:	4013      	ands	r3, r2
 80021ca:	d10f      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0adb      	lsrs	r3, r3, #11
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	4835      	ldr	r0, [pc, #212]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021e2:	f7fd ff97 	bl	8000114 <__udivsi3>
 80021e6:	0003      	movs	r3, r0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	e05d      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2238      	movs	r2, #56	; 0x38
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCC_GetSysClockFreq+0x100>)
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e054      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2238      	movs	r2, #56	; 0x38
 8002204:	4013      	ands	r3, r2
 8002206:	2b10      	cmp	r3, #16
 8002208:	d138      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2203      	movs	r2, #3
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	2207      	movs	r2, #7
 800221c:	4013      	ands	r3, r2
 800221e:	3301      	adds	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d10d      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4824      	ldr	r0, [pc, #144]	; (80022bc <HAL_RCC_GetSysClockFreq+0x100>)
 800222c:	f7fd ff72 	bl	8000114 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	0019      	movs	r1, r3
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	227f      	movs	r2, #127	; 0x7f
 800223c:	4013      	ands	r3, r2
 800223e:	434b      	muls	r3, r1
 8002240:	617b      	str	r3, [r7, #20]
        break;
 8002242:	e00d      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	481c      	ldr	r0, [pc, #112]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002248:	f7fd ff64 	bl	8000114 <__udivsi3>
 800224c:	0003      	movs	r3, r0
 800224e:	0019      	movs	r1, r3
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	227f      	movs	r2, #127	; 0x7f
 8002258:	4013      	ands	r3, r2
 800225a:	434b      	muls	r3, r1
 800225c:	617b      	str	r3, [r7, #20]
        break;
 800225e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0f5b      	lsrs	r3, r3, #29
 8002266:	2207      	movs	r2, #7
 8002268:	4013      	ands	r3, r2
 800226a:	3301      	adds	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	f7fd ff4f 	bl	8000114 <__udivsi3>
 8002276:	0003      	movs	r3, r0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e015      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	4013      	ands	r3, r2
 8002284:	2b20      	cmp	r3, #32
 8002286:	d103      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2238      	movs	r2, #56	; 0x38
 8002296:	4013      	ands	r3, r2
 8002298:	2b18      	cmp	r3, #24
 800229a:	d103      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800229c:	23fa      	movs	r3, #250	; 0xfa
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e001      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022a8:	693b      	ldr	r3, [r7, #16]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b006      	add	sp, #24
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40021000 	.word	0x40021000
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022d8:	f7ff fff2 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022dc:	0004      	movs	r4, r0
 80022de:	f7ff fb3f 	bl	8001960 <LL_RCC_GetAPB1Prescaler>
 80022e2:	0003      	movs	r3, r0
 80022e4:	0b1a      	lsrs	r2, r3, #12
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	58d3      	ldr	r3, [r2, r3]
 80022ec:	221f      	movs	r2, #31
 80022ee:	4013      	ands	r3, r2
 80022f0:	40dc      	lsrs	r4, r3
 80022f2:	0023      	movs	r3, r4
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bdb0      	pop	{r4, r5, r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	080036f4 	.word	0x080036f4

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002308:	2313      	movs	r3, #19
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002310:	2312      	movs	r3, #18
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002324:	e0a3      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2011      	movs	r0, #17
 8002328:	183b      	adds	r3, r7, r0
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4bc3      	ldr	r3, [pc, #780]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	055b      	lsls	r3, r3, #21
 8002336:	4013      	ands	r3, r2
 8002338:	d110      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4bc0      	ldr	r3, [pc, #768]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233e:	4bbf      	ldr	r3, [pc, #764]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0549      	lsls	r1, r1, #21
 8002344:	430a      	orrs	r2, r1
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
 8002348:	4bbc      	ldr	r3, [pc, #752]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	055b      	lsls	r3, r3, #21
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	183b      	adds	r3, r7, r0
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	4bb8      	ldr	r3, [pc, #736]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4bb7      	ldr	r3, [pc, #732]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	0049      	lsls	r1, r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800236a:	f7fe fe57 	bl	800101c <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002372:	e00b      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fe52 	bl	800101c <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d904      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002382:	2313      	movs	r3, #19
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2203      	movs	r2, #3
 8002388:	701a      	strb	r2, [r3, #0]
        break;
 800238a:	e005      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238c:	4bac      	ldr	r3, [pc, #688]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d0ed      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002398:	2313      	movs	r3, #19
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d154      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023a2:	4ba6      	ldr	r3, [pc, #664]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a6:	23c0      	movs	r3, #192	; 0xc0
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d019      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d014      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023be:	4b9f      	ldr	r3, [pc, #636]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	4aa0      	ldr	r2, [pc, #640]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023c8:	4b9c      	ldr	r3, [pc, #624]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023cc:	4b9b      	ldr	r3, [pc, #620]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	0249      	lsls	r1, r1, #9
 80023d2:	430a      	orrs	r2, r1
 80023d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023d6:	4b99      	ldr	r3, [pc, #612]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023da:	4b98      	ldr	r3, [pc, #608]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023dc:	499a      	ldr	r1, [pc, #616]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80023de:	400a      	ands	r2, r1
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023e2:	4b96      	ldr	r3, [pc, #600]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe14 	bl	800101c <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f8:	e00c      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fe0f 	bl	800101c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a91      	ldr	r2, [pc, #580]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d904      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800240a:	2313      	movs	r3, #19
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2203      	movs	r2, #3
 8002410:	701a      	strb	r2, [r3, #0]
            break;
 8002412:	e004      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002414:	4b89      	ldr	r3, [pc, #548]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d0ed      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800241e:	2313      	movs	r3, #19
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002428:	4b84      	ldr	r3, [pc, #528]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	4a85      	ldr	r2, [pc, #532]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002436:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	430a      	orrs	r2, r1
 800243a:	65da      	str	r2, [r3, #92]	; 0x5c
 800243c:	e00c      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243e:	2312      	movs	r3, #18
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2213      	movs	r2, #19
 8002444:	18ba      	adds	r2, r7, r2
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e005      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	2312      	movs	r3, #18
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2213      	movs	r2, #19
 8002452:	18ba      	adds	r2, r7, r2
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002458:	2311      	movs	r3, #17
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002466:	4b75      	ldr	r3, [pc, #468]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	4979      	ldr	r1, [pc, #484]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800246a:	400a      	ands	r2, r1
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	2203      	movs	r2, #3
 800247e:	4393      	bics	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002488:	430a      	orrs	r2, r1
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002496:	4b69      	ldr	r3, [pc, #420]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	220c      	movs	r2, #12
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2210      	movs	r2, #16
 80024b0:	4013      	ands	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	4a5f      	ldr	r2, [pc, #380]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e4:	430a      	orrs	r2, r1
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f4:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	4b4e      	ldr	r3, [pc, #312]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	4013      	ands	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002518:	4013      	ands	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002522:	430a      	orrs	r2, r1
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	4013      	ands	r3, r2
 8002530:	d015      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	0899      	lsrs	r1, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002540:	430a      	orrs	r2, r1
 8002542:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	05db      	lsls	r3, r3, #23
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0249      	lsls	r1, r1, #9
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	031b      	lsls	r3, r3, #12
 8002566:	4013      	ands	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800256a:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	4393      	bics	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257a:	430a      	orrs	r2, r1
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	039b      	lsls	r3, r3, #14
 8002586:	4013      	ands	r3, r2
 8002588:	d016      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800258a:	4b2c      	ldr	r3, [pc, #176]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	03db      	lsls	r3, r3, #15
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0449      	lsls	r1, r1, #17
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	03db      	lsls	r3, r3, #15
 80025c0:	4013      	ands	r3, r2
 80025c2:	d016      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	4a27      	ldr	r2, [pc, #156]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	045b      	lsls	r3, r3, #17
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0449      	lsls	r1, r1, #17
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d016      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	429a      	cmp	r2, r3
 800261c:	d106      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0249      	lsls	r1, r1, #9
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800262c:	2312      	movs	r3, #18
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b006      	add	sp, #24
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	fffffcff 	.word	0xfffffcff
 8002648:	fffeffff 	.word	0xfffeffff
 800264c:	00001388 	.word	0x00001388
 8002650:	efffffff 	.word	0xefffffff
 8002654:	fffff3ff 	.word	0xfffff3ff
 8002658:	fff3ffff 	.word	0xfff3ffff
 800265c:	ffcfffff 	.word	0xffcfffff
 8002660:	ffffcfff 	.word	0xffffcfff
 8002664:	ffbfffff 	.word	0xffbfffff
 8002668:	feffffff 	.word	0xfeffffff
 800266c:	ffff3fff 	.word	0xffff3fff

08002670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e046      	b.n	8002710 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2288      	movs	r2, #136	; 0x88
 8002686:	589b      	ldr	r3, [r3, r2]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2284      	movs	r2, #132	; 0x84
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f7fe faca 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2288      	movs	r2, #136	; 0x88
 80026a0:	2124      	movs	r1, #36	; 0x24
 80026a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 f9ee 	bl	8002a98 <UART_SetConfig>
 80026bc:	0003      	movs	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e024      	b.n	8002710 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fc9f 	bl	8003014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	490d      	ldr	r1, [pc, #52]	; (8002718 <HAL_UART_Init+0xa8>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	212a      	movs	r1, #42	; 0x2a
 80026f2:	438a      	bics	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 fd37 	bl	800317c <UART_CheckIdleState>
 800270e:	0003      	movs	r3, r0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}
 8002718:	ffffb7ff 	.word	0xffffb7ff

0800271c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e032      	b.n	8002794 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2288      	movs	r2, #136	; 0x88
 8002732:	2124      	movs	r1, #36	; 0x24
 8002734:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	438a      	bics	r2, r1
 8002744:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe fb49 	bl	8000df8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2290      	movs	r2, #144	; 0x90
 800276a:	2100      	movs	r1, #0
 800276c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2288      	movs	r2, #136	; 0x88
 8002772:	2100      	movs	r1, #0
 8002774:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	228c      	movs	r2, #140	; 0x8c
 800277a:	2100      	movs	r1, #0
 800277c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2284      	movs	r2, #132	; 0x84
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	1dbb      	adds	r3, r7, #6
 80027aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2288      	movs	r2, #136	; 0x88
 80027b0:	589b      	ldr	r3, [r3, r2]
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d000      	beq.n	80027b8 <HAL_UART_Transmit+0x1c>
 80027b6:	e088      	b.n	80028ca <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_UART_Transmit+0x2a>
 80027be:	1dbb      	adds	r3, r7, #6
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e080      	b.n	80028cc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d109      	bne.n	80027ea <HAL_UART_Transmit+0x4e>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d001      	beq.n	80027ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e070      	b.n	80028cc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2290      	movs	r2, #144	; 0x90
 80027ee:	2100      	movs	r1, #0
 80027f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2288      	movs	r2, #136	; 0x88
 80027f6:	2121      	movs	r1, #33	; 0x21
 80027f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fa:	f7fe fc0f 	bl	800101c <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1dba      	adds	r2, r7, #6
 8002806:	2154      	movs	r1, #84	; 0x54
 8002808:	8812      	ldrh	r2, [r2, #0]
 800280a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1dba      	adds	r2, r7, #6
 8002810:	2156      	movs	r1, #86	; 0x56
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	429a      	cmp	r2, r3
 8002820:	d108      	bne.n	8002834 <HAL_UART_Transmit+0x98>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e003      	b.n	800283c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800283c:	e02c      	b.n	8002898 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0013      	movs	r3, r2
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	f000 fce4 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e039      	b.n	80028cc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	001a      	movs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	05d2      	lsls	r2, r2, #23
 800286a:	0dd2      	lsrs	r2, r2, #23
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3302      	adds	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e007      	b.n	8002886 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2256      	movs	r2, #86	; 0x56
 800288a:	5a9b      	ldrh	r3, [r3, r2]
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b299      	uxth	r1, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2256      	movs	r2, #86	; 0x56
 8002896:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2256      	movs	r2, #86	; 0x56
 800289c:	5a9b      	ldrh	r3, [r3, r2]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1cc      	bne.n	800283e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	0013      	movs	r3, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	f000 fcb1 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d001      	beq.n	80028be <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e006      	b.n	80028cc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2288      	movs	r2, #136	; 0x88
 80028c2:	2120      	movs	r1, #32
 80028c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b008      	add	sp, #32
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	228c      	movs	r2, #140	; 0x8c
 80028e8:	589b      	ldr	r3, [r3, r2]
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d000      	beq.n	80028f0 <HAL_UART_Receive+0x1c>
 80028ee:	e0cc      	b.n	8002a8a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_UART_Receive+0x2a>
 80028f6:	1dbb      	adds	r3, r7, #6
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0c4      	b.n	8002a8c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	429a      	cmp	r2, r3
 800290c:	d109      	bne.n	8002922 <HAL_UART_Receive+0x4e>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d001      	beq.n	8002922 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0b4      	b.n	8002a8c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2290      	movs	r2, #144	; 0x90
 8002926:	2100      	movs	r1, #0
 8002928:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	228c      	movs	r2, #140	; 0x8c
 800292e:	2122      	movs	r1, #34	; 0x22
 8002930:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002938:	f7fe fb70 	bl	800101c <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1dba      	adds	r2, r7, #6
 8002944:	215c      	movs	r1, #92	; 0x5c
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1dba      	adds	r2, r7, #6
 800294e:	215e      	movs	r1, #94	; 0x5e
 8002950:	8812      	ldrh	r2, [r2, #0]
 8002952:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	429a      	cmp	r2, r3
 800295e:	d10d      	bne.n	800297c <HAL_UART_Receive+0xa8>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_UART_Receive+0x9e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2260      	movs	r2, #96	; 0x60
 800296c:	4949      	ldr	r1, [pc, #292]	; (8002a94 <HAL_UART_Receive+0x1c0>)
 800296e:	5299      	strh	r1, [r3, r2]
 8002970:	e02e      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2260      	movs	r2, #96	; 0x60
 8002976:	21ff      	movs	r1, #255	; 0xff
 8002978:	5299      	strh	r1, [r3, r2]
 800297a:	e029      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <HAL_UART_Receive+0xcc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_UART_Receive+0xc2>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2260      	movs	r2, #96	; 0x60
 8002990:	21ff      	movs	r1, #255	; 0xff
 8002992:	5299      	strh	r1, [r3, r2]
 8002994:	e01c      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2260      	movs	r2, #96	; 0x60
 800299a:	217f      	movs	r1, #127	; 0x7f
 800299c:	5299      	strh	r1, [r3, r2]
 800299e:	e017      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	055b      	lsls	r3, r3, #21
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10d      	bne.n	80029c8 <HAL_UART_Receive+0xf4>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <HAL_UART_Receive+0xea>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2260      	movs	r2, #96	; 0x60
 80029b8:	217f      	movs	r1, #127	; 0x7f
 80029ba:	5299      	strh	r1, [r3, r2]
 80029bc:	e008      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2260      	movs	r2, #96	; 0x60
 80029c2:	213f      	movs	r1, #63	; 0x3f
 80029c4:	5299      	strh	r1, [r3, r2]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Receive+0xfc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2260      	movs	r2, #96	; 0x60
 80029cc:	2100      	movs	r1, #0
 80029ce:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80029d0:	2312      	movs	r3, #18
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	2160      	movs	r1, #96	; 0x60
 80029d8:	5a52      	ldrh	r2, [r2, r1]
 80029da:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d108      	bne.n	80029fa <HAL_UART_Receive+0x126>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e003      	b.n	8002a02 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a02:	e036      	b.n	8002a72 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2120      	movs	r1, #32
 8002a12:	f000 fc01 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e036      	b.n	8002a8c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10e      	bne.n	8002a42 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2212      	movs	r2, #18
 8002a2e:	18ba      	adds	r2, r7, r2
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e00e      	b.n	8002a60 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2212      	movs	r2, #18
 8002a4c:	18ba      	adds	r2, r7, r2
 8002a4e:	8812      	ldrh	r2, [r2, #0]
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	225e      	movs	r2, #94	; 0x5e
 8002a64:	5a9b      	ldrh	r3, [r3, r2]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b299      	uxth	r1, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	225e      	movs	r2, #94	; 0x5e
 8002a70:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	225e      	movs	r2, #94	; 0x5e
 8002a76:	5a9b      	ldrh	r3, [r3, r2]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1c2      	bne.n	8002a04 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	228c      	movs	r2, #140	; 0x8c
 8002a82:	2120      	movs	r1, #32
 8002a84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b008      	add	sp, #32
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	000001ff 	.word	0x000001ff

08002a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b090      	sub	sp, #64	; 0x40
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aa0:	231a      	movs	r3, #26
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	189b      	adds	r3, r3, r2
 8002aa6:	19db      	adds	r3, r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4aaf      	ldr	r2, [pc, #700]	; (8002d88 <UART_SetConfig+0x2f0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4aaa      	ldr	r2, [pc, #680]	; (8002d8c <UART_SetConfig+0x2f4>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	0003      	movs	r3, r0
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4aa4      	ldr	r2, [pc, #656]	; (8002d90 <UART_SetConfig+0x2f8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a9f      	ldr	r2, [pc, #636]	; (8002d94 <UART_SetConfig+0x2fc>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	0003      	movs	r3, r0
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a95      	ldr	r2, [pc, #596]	; (8002d98 <UART_SetConfig+0x300>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d131      	bne.n	8002bac <UART_SetConfig+0x114>
 8002b48:	4b94      	ldr	r3, [pc, #592]	; (8002d9c <UART_SetConfig+0x304>)
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d01d      	beq.n	8002b90 <UART_SetConfig+0xf8>
 8002b54:	d823      	bhi.n	8002b9e <UART_SetConfig+0x106>
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d00c      	beq.n	8002b74 <UART_SetConfig+0xdc>
 8002b5a:	d820      	bhi.n	8002b9e <UART_SetConfig+0x106>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <UART_SetConfig+0xce>
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d00e      	beq.n	8002b82 <UART_SetConfig+0xea>
 8002b64:	e01b      	b.n	8002b9e <UART_SetConfig+0x106>
 8002b66:	231b      	movs	r3, #27
 8002b68:	2220      	movs	r2, #32
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	19db      	adds	r3, r3, r7
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e0b4      	b.n	8002cde <UART_SetConfig+0x246>
 8002b74:	231b      	movs	r3, #27
 8002b76:	2220      	movs	r2, #32
 8002b78:	189b      	adds	r3, r3, r2
 8002b7a:	19db      	adds	r3, r3, r7
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e0ad      	b.n	8002cde <UART_SetConfig+0x246>
 8002b82:	231b      	movs	r3, #27
 8002b84:	2220      	movs	r2, #32
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	19db      	adds	r3, r3, r7
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e0a6      	b.n	8002cde <UART_SetConfig+0x246>
 8002b90:	231b      	movs	r3, #27
 8002b92:	2220      	movs	r2, #32
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	19db      	adds	r3, r3, r7
 8002b98:	2208      	movs	r2, #8
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e09f      	b.n	8002cde <UART_SetConfig+0x246>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e098      	b.n	8002cde <UART_SetConfig+0x246>
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7b      	ldr	r2, [pc, #492]	; (8002da0 <UART_SetConfig+0x308>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d131      	bne.n	8002c1a <UART_SetConfig+0x182>
 8002bb6:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <UART_SetConfig+0x304>)
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	220c      	movs	r2, #12
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d01d      	beq.n	8002bfe <UART_SetConfig+0x166>
 8002bc2:	d823      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d00c      	beq.n	8002be2 <UART_SetConfig+0x14a>
 8002bc8:	d820      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <UART_SetConfig+0x13c>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00e      	beq.n	8002bf0 <UART_SetConfig+0x158>
 8002bd2:	e01b      	b.n	8002c0c <UART_SetConfig+0x174>
 8002bd4:	231b      	movs	r3, #27
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	19db      	adds	r3, r3, r7
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e07d      	b.n	8002cde <UART_SetConfig+0x246>
 8002be2:	231b      	movs	r3, #27
 8002be4:	2220      	movs	r2, #32
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	19db      	adds	r3, r3, r7
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e076      	b.n	8002cde <UART_SetConfig+0x246>
 8002bf0:	231b      	movs	r3, #27
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	189b      	adds	r3, r3, r2
 8002bf6:	19db      	adds	r3, r3, r7
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e06f      	b.n	8002cde <UART_SetConfig+0x246>
 8002bfe:	231b      	movs	r3, #27
 8002c00:	2220      	movs	r2, #32
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	19db      	adds	r3, r3, r7
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e068      	b.n	8002cde <UART_SetConfig+0x246>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2220      	movs	r2, #32
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2210      	movs	r2, #16
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e061      	b.n	8002cde <UART_SetConfig+0x246>
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a61      	ldr	r2, [pc, #388]	; (8002da4 <UART_SetConfig+0x30c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d106      	bne.n	8002c32 <UART_SetConfig+0x19a>
 8002c24:	231b      	movs	r3, #27
 8002c26:	2220      	movs	r2, #32
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e055      	b.n	8002cde <UART_SetConfig+0x246>
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <UART_SetConfig+0x310>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d106      	bne.n	8002c4a <UART_SetConfig+0x1b2>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2220      	movs	r2, #32
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e049      	b.n	8002cde <UART_SetConfig+0x246>
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <UART_SetConfig+0x2f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d13e      	bne.n	8002cd2 <UART_SetConfig+0x23a>
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <UART_SetConfig+0x304>)
 8002c56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <UART_SetConfig+0x21e>
 8002c66:	22c0      	movs	r2, #192	; 0xc0
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d82a      	bhi.n	8002cc4 <UART_SetConfig+0x22c>
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d011      	beq.n	8002c9a <UART_SetConfig+0x202>
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d822      	bhi.n	8002cc4 <UART_SetConfig+0x22c>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <UART_SetConfig+0x1f4>
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00e      	beq.n	8002ca8 <UART_SetConfig+0x210>
 8002c8a:	e01b      	b.n	8002cc4 <UART_SetConfig+0x22c>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e021      	b.n	8002cde <UART_SetConfig+0x246>
 8002c9a:	231b      	movs	r3, #27
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	19db      	adds	r3, r3, r7
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e01a      	b.n	8002cde <UART_SetConfig+0x246>
 8002ca8:	231b      	movs	r3, #27
 8002caa:	2220      	movs	r2, #32
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e013      	b.n	8002cde <UART_SetConfig+0x246>
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	2220      	movs	r2, #32
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e00c      	b.n	8002cde <UART_SetConfig+0x246>
 8002cc4:	231b      	movs	r3, #27
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	2210      	movs	r2, #16
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e005      	b.n	8002cde <UART_SetConfig+0x246>
 8002cd2:	231b      	movs	r3, #27
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	19db      	adds	r3, r3, r7
 8002cda:	2210      	movs	r2, #16
 8002cdc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <UART_SetConfig+0x2f8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d000      	beq.n	8002cea <UART_SetConfig+0x252>
 8002ce8:	e0a9      	b.n	8002e3e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cea:	231b      	movs	r3, #27
 8002cec:	2220      	movs	r2, #32
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d015      	beq.n	8002d24 <UART_SetConfig+0x28c>
 8002cf8:	dc18      	bgt.n	8002d2c <UART_SetConfig+0x294>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00d      	beq.n	8002d1a <UART_SetConfig+0x282>
 8002cfe:	dc15      	bgt.n	8002d2c <UART_SetConfig+0x294>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <UART_SetConfig+0x272>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d005      	beq.n	8002d14 <UART_SetConfig+0x27c>
 8002d08:	e010      	b.n	8002d2c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0a:	f7ff fae3 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d12:	e014      	b.n	8002d3e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <UART_SetConfig+0x314>)
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d18:	e011      	b.n	8002d3e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff fa4f 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d22:	e00c      	b.n	8002d3e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d2a:	e008      	b.n	8002d3e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002d30:	231a      	movs	r3, #26
 8002d32:	2220      	movs	r2, #32
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	19db      	adds	r3, r3, r7
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
        break;
 8002d3c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <UART_SetConfig+0x2ae>
 8002d44:	e14b      	b.n	8002fde <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <UART_SetConfig+0x318>)
 8002d4c:	0052      	lsls	r2, r2, #1
 8002d4e:	5ad3      	ldrh	r3, [r2, r3]
 8002d50:	0019      	movs	r1, r3
 8002d52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d54:	f7fd f9de 	bl	8000114 <__udivsi3>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	0013      	movs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d305      	bcc.n	8002d78 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d91d      	bls.n	8002db4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002d78:	231a      	movs	r3, #26
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	19db      	adds	r3, r3, r7
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e12b      	b.n	8002fde <UART_SetConfig+0x546>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	cfff69f3 	.word	0xcfff69f3
 8002d8c:	ffffcfff 	.word	0xffffcfff
 8002d90:	40008000 	.word	0x40008000
 8002d94:	11fff4ff 	.word	0x11fff4ff
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40004400 	.word	0x40004400
 8002da4:	40004800 	.word	0x40004800
 8002da8:	40004c00 	.word	0x40004c00
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	08003714 	.word	0x08003714
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc0:	4b92      	ldr	r3, [pc, #584]	; (800300c <UART_SetConfig+0x574>)
 8002dc2:	0052      	lsls	r2, r2, #1
 8002dc4:	5ad3      	ldrh	r3, [r2, r3]
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	69b8      	ldr	r0, [r7, #24]
 8002dd2:	69f9      	ldr	r1, [r7, #28]
 8002dd4:	f7fd fb14 	bl	8000400 <__aeabi_uldivmod>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	000b      	movs	r3, r1
 8002ddc:	0e11      	lsrs	r1, r2, #24
 8002dde:	021d      	lsls	r5, r3, #8
 8002de0:	430d      	orrs	r5, r1
 8002de2:	0214      	lsls	r4, r2, #8
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68b8      	ldr	r0, [r7, #8]
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	1900      	adds	r0, r0, r4
 8002df6:	4169      	adcs	r1, r5
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f7fd fafb 	bl	8000400 <__aeabi_uldivmod>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	000b      	movs	r3, r1
 8002e0e:	0013      	movs	r3, r2
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e14:	23c0      	movs	r3, #192	; 0xc0
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d309      	bcc.n	8002e30 <UART_SetConfig+0x398>
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	035b      	lsls	r3, r3, #13
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d204      	bcs.n	8002e30 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e0d6      	b.n	8002fde <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002e30:	231a      	movs	r3, #26
 8002e32:	2220      	movs	r2, #32
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e0cf      	b.n	8002fde <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d000      	beq.n	8002e4c <UART_SetConfig+0x3b4>
 8002e4a:	e070      	b.n	8002f2e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	2220      	movs	r2, #32
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	19db      	adds	r3, r3, r7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d015      	beq.n	8002e86 <UART_SetConfig+0x3ee>
 8002e5a:	dc18      	bgt.n	8002e8e <UART_SetConfig+0x3f6>
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00d      	beq.n	8002e7c <UART_SetConfig+0x3e4>
 8002e60:	dc15      	bgt.n	8002e8e <UART_SetConfig+0x3f6>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <UART_SetConfig+0x3d4>
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d005      	beq.n	8002e76 <UART_SetConfig+0x3de>
 8002e6a:	e010      	b.n	8002e8e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7ff fa32 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002e70:	0003      	movs	r3, r0
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e74:	e014      	b.n	8002ea0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e76:	4b66      	ldr	r3, [pc, #408]	; (8003010 <UART_SetConfig+0x578>)
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e7a:	e011      	b.n	8002ea0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7c:	f7ff f99e 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002e80:	0003      	movs	r3, r0
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e84:	e00c      	b.n	8002ea0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e8c:	e008      	b.n	8002ea0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e92:	231a      	movs	r3, #26
 8002e94:	2220      	movs	r2, #32
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	19db      	adds	r3, r3, r7
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <UART_SetConfig+0x410>
 8002ea6:	e09a      	b.n	8002fde <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <UART_SetConfig+0x574>)
 8002eae:	0052      	lsls	r2, r2, #1
 8002eb0:	5ad3      	ldrh	r3, [r2, r3]
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eb6:	f7fd f92d 	bl	8000114 <__udivsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	18d2      	adds	r2, r2, r3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	0010      	movs	r0, r2
 8002ece:	f7fd f921 	bl	8000114 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2b0f      	cmp	r3, #15
 8002eda:	d921      	bls.n	8002f20 <UART_SetConfig+0x488>
 8002edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d21c      	bcs.n	8002f20 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	200e      	movs	r0, #14
 8002eec:	2420      	movs	r4, #32
 8002eee:	1903      	adds	r3, r0, r4
 8002ef0:	19db      	adds	r3, r3, r7
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2207      	movs	r2, #7
 8002f00:	4013      	ands	r3, r2
 8002f02:	b299      	uxth	r1, r3
 8002f04:	1903      	adds	r3, r0, r4
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	1902      	adds	r2, r0, r4
 8002f0a:	19d2      	adds	r2, r2, r7
 8002f0c:	8812      	ldrh	r2, [r2, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1902      	adds	r2, r0, r4
 8002f18:	19d2      	adds	r2, r2, r7
 8002f1a:	8812      	ldrh	r2, [r2, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	e05e      	b.n	8002fde <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f20:	231a      	movs	r3, #26
 8002f22:	2220      	movs	r2, #32
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	19db      	adds	r3, r3, r7
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e057      	b.n	8002fde <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f2e:	231b      	movs	r3, #27
 8002f30:	2220      	movs	r2, #32
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	19db      	adds	r3, r3, r7
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d015      	beq.n	8002f68 <UART_SetConfig+0x4d0>
 8002f3c:	dc18      	bgt.n	8002f70 <UART_SetConfig+0x4d8>
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00d      	beq.n	8002f5e <UART_SetConfig+0x4c6>
 8002f42:	dc15      	bgt.n	8002f70 <UART_SetConfig+0x4d8>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <UART_SetConfig+0x4b6>
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d005      	beq.n	8002f58 <UART_SetConfig+0x4c0>
 8002f4c:	e010      	b.n	8002f70 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4e:	f7ff f9c1 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002f52:	0003      	movs	r3, r0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f56:	e014      	b.n	8002f82 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <UART_SetConfig+0x578>)
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f5c:	e011      	b.n	8002f82 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5e:	f7ff f92d 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002f62:	0003      	movs	r3, r0
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f66:	e00c      	b.n	8002f82 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f6e:	e008      	b.n	8002f82 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f74:	231a      	movs	r3, #26
 8002f76:	2220      	movs	r2, #32
 8002f78:	189b      	adds	r3, r3, r2
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
        break;
 8002f80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02a      	beq.n	8002fde <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <UART_SetConfig+0x574>)
 8002f8e:	0052      	lsls	r2, r2, #1
 8002f90:	5ad3      	ldrh	r3, [r2, r3]
 8002f92:	0019      	movs	r1, r3
 8002f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f96:	f7fd f8bd 	bl	8000114 <__udivsi3>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	18d2      	adds	r2, r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0019      	movs	r1, r3
 8002fac:	0010      	movs	r0, r2
 8002fae:	f7fd f8b1 	bl	8000114 <__udivsi3>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d90a      	bls.n	8002fd2 <UART_SetConfig+0x53a>
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d205      	bcs.n	8002fd2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e005      	b.n	8002fde <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd2:	231a      	movs	r3, #26
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	226a      	movs	r2, #106	; 0x6a
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2268      	movs	r2, #104	; 0x68
 8002fea:	2101      	movs	r1, #1
 8002fec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002ffa:	231a      	movs	r3, #26
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	19db      	adds	r3, r3, r7
 8003002:	781b      	ldrb	r3, [r3, #0]
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b010      	add	sp, #64	; 0x40
 800300a:	bdb0      	pop	{r4, r5, r7, pc}
 800300c:	08003714 	.word	0x08003714
 8003010:	00f42400 	.word	0x00f42400

08003014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d00b      	beq.n	800303e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <UART_AdvFeatureConfig+0x144>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d00b      	beq.n	8003060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a43      	ldr	r2, [pc, #268]	; (800315c <UART_AdvFeatureConfig+0x148>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2204      	movs	r2, #4
 8003066:	4013      	ands	r3, r2
 8003068:	d00b      	beq.n	8003082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a3b      	ldr	r2, [pc, #236]	; (8003160 <UART_AdvFeatureConfig+0x14c>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	2208      	movs	r2, #8
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a34      	ldr	r2, [pc, #208]	; (8003164 <UART_AdvFeatureConfig+0x150>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	2210      	movs	r2, #16
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <UART_AdvFeatureConfig+0x154>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2220      	movs	r2, #32
 80030cc:	4013      	ands	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <UART_AdvFeatureConfig+0x158>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	4013      	ands	r3, r2
 80030f0:	d01d      	beq.n	800312e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <UART_AdvFeatureConfig+0x15c>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	035b      	lsls	r3, r3, #13
 8003112:	429a      	cmp	r2, r3
 8003114:	d10b      	bne.n	800312e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <UART_AdvFeatureConfig+0x160>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	4013      	ands	r3, r2
 8003136:	d00b      	beq.n	8003150 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <UART_AdvFeatureConfig+0x164>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}
 8003158:	fffdffff 	.word	0xfffdffff
 800315c:	fffeffff 	.word	0xfffeffff
 8003160:	fffbffff 	.word	0xfffbffff
 8003164:	ffff7fff 	.word	0xffff7fff
 8003168:	ffffefff 	.word	0xffffefff
 800316c:	ffffdfff 	.word	0xffffdfff
 8003170:	ffefffff 	.word	0xffefffff
 8003174:	ff9fffff 	.word	0xff9fffff
 8003178:	fff7ffff 	.word	0xfff7ffff

0800317c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2290      	movs	r2, #144	; 0x90
 8003188:	2100      	movs	r1, #0
 800318a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800318c:	f7fd ff46 	bl	800101c <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2208      	movs	r2, #8
 800319c:	4013      	ands	r3, r2
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d10c      	bne.n	80031bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0391      	lsls	r1, r2, #14
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <UART_CheckIdleState+0x98>)
 80031ac:	9200      	str	r2, [sp, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f000 f832 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e026      	b.n	800320a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2204      	movs	r2, #4
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d10c      	bne.n	80031e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	03d1      	lsls	r1, r2, #15
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <UART_CheckIdleState+0x98>)
 80031d4:	9200      	str	r2, [sp, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f000 f81e 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e012      	b.n	800320a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2288      	movs	r2, #136	; 0x88
 80031e8:	2120      	movs	r1, #32
 80031ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	228c      	movs	r2, #140	; 0x8c
 80031f0:	2120      	movs	r1, #32
 80031f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2284      	movs	r2, #132	; 0x84
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	01ffffff 	.word	0x01ffffff

08003218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b094      	sub	sp, #80	; 0x50
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	e0a7      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322c:	3301      	adds	r3, #1
 800322e:	d100      	bne.n	8003232 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003230:	e0a3      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fd fef3 	bl	800101c <HAL_GetTick>
 8003236:	0002      	movs	r2, r0
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <UART_WaitOnFlagUntilTimeout+0x30>
 8003242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13f      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003248:	f3ef 8310 	mrs	r3, PRIMASK
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
 8003252:	2301      	movs	r3, #1
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	494e      	ldr	r1, [pc, #312]	; (80033a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	643b      	str	r3, [r7, #64]	; 0x40
 8003284:	2301      	movs	r3, #1
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2288      	movs	r2, #136	; 0x88
 80032b0:	2120      	movs	r1, #32
 80032b2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	228c      	movs	r2, #140	; 0x8c
 80032b8:	2120      	movs	r1, #32
 80032ba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2284      	movs	r2, #132	; 0x84
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e069      	b.n	800339c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	d052      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	401a      	ands	r2, r3
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d148      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f2:	f3ef 8310 	mrs	r3, PRIMASK
 80032f6:	613b      	str	r3, [r7, #16]
  return(result);
 80032f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	2301      	movs	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4924      	ldr	r1, [pc, #144]	; (80033a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	61fb      	str	r3, [r7, #28]
  return(result);
 800332a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
 800332e:	2301      	movs	r3, #1
 8003330:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2288      	movs	r2, #136	; 0x88
 800335a:	2120      	movs	r1, #32
 800335c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	228c      	movs	r2, #140	; 0x8c
 8003362:	2120      	movs	r1, #32
 8003364:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2290      	movs	r2, #144	; 0x90
 800336a:	2120      	movs	r1, #32
 800336c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2284      	movs	r2, #132	; 0x84
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e010      	b.n	800339c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	425a      	negs	r2, r3
 800338a:	4153      	adcs	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	001a      	movs	r2, r3
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d100      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x182>
 8003398:	e747      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b014      	add	sp, #80	; 0x50
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	fffffe5f 	.word	0xfffffe5f

080033a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2284      	movs	r2, #132	; 0x84
 80033b4:	5c9b      	ldrb	r3, [r3, r2]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_UARTEx_DisableFifoMode+0x16>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e027      	b.n	800340e <HAL_UARTEx_DisableFifoMode+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2284      	movs	r2, #132	; 0x84
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2288      	movs	r2, #136	; 0x88
 80033ca:	2124      	movs	r1, #36	; 0x24
 80033cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	438a      	bics	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_UARTEx_DisableFifoMode+0x70>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2288      	movs	r2, #136	; 0x88
 8003400:	2120      	movs	r1, #32
 8003402:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2284      	movs	r2, #132	; 0x84
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	dfffffff 	.word	0xdfffffff

0800341c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2284      	movs	r2, #132	; 0x84
 800342a:	5c9b      	ldrb	r3, [r3, r2]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003430:	2302      	movs	r3, #2
 8003432:	e02e      	b.n	8003492 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2284      	movs	r2, #132	; 0x84
 8003438:	2101      	movs	r1, #1
 800343a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2288      	movs	r2, #136	; 0x88
 8003440:	2124      	movs	r1, #36	; 0x24
 8003442:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	438a      	bics	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	08d9      	lsrs	r1, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 f854 	bl	8003520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2288      	movs	r2, #136	; 0x88
 8003484:	2120      	movs	r1, #32
 8003486:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2284      	movs	r2, #132	; 0x84
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	0018      	movs	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	b004      	add	sp, #16
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2284      	movs	r2, #132	; 0x84
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e02f      	b.n	8003514 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2284      	movs	r2, #132	; 0x84
 80034b8:	2101      	movs	r1, #1
 80034ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2288      	movs	r2, #136	; 0x88
 80034c0:	2124      	movs	r1, #36	; 0x24
 80034c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	438a      	bics	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f813 	bl	8003520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2288      	movs	r2, #136	; 0x88
 8003506:	2120      	movs	r1, #32
 8003508:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2284      	movs	r2, #132	; 0x84
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}
 800351c:	f1ffffff 	.word	0xf1ffffff

08003520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	226a      	movs	r2, #106	; 0x6a
 8003534:	2101      	movs	r1, #1
 8003536:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2268      	movs	r2, #104	; 0x68
 800353c:	2101      	movs	r1, #1
 800353e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003540:	e043      	b.n	80035ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003542:	260f      	movs	r6, #15
 8003544:	19bb      	adds	r3, r7, r6
 8003546:	2208      	movs	r2, #8
 8003548:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800354a:	200e      	movs	r0, #14
 800354c:	183b      	adds	r3, r7, r0
 800354e:	2208      	movs	r2, #8
 8003550:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	0e5b      	lsrs	r3, r3, #25
 800355a:	b2da      	uxtb	r2, r3
 800355c:	240d      	movs	r4, #13
 800355e:	193b      	adds	r3, r7, r4
 8003560:	2107      	movs	r1, #7
 8003562:	400a      	ands	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	0f5b      	lsrs	r3, r3, #29
 800356e:	b2da      	uxtb	r2, r3
 8003570:	250c      	movs	r5, #12
 8003572:	197b      	adds	r3, r7, r5
 8003574:	2107      	movs	r1, #7
 8003576:	400a      	ands	r2, r1
 8003578:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800357a:	183b      	adds	r3, r7, r0
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	197a      	adds	r2, r7, r5
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	4914      	ldr	r1, [pc, #80]	; (80035d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003584:	5c8a      	ldrb	r2, [r1, r2]
 8003586:	435a      	muls	r2, r3
 8003588:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800358a:	197b      	adds	r3, r7, r5
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003592:	0019      	movs	r1, r3
 8003594:	f7fc fe48 	bl	8000228 <__divsi3>
 8003598:	0003      	movs	r3, r0
 800359a:	b299      	uxth	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	226a      	movs	r2, #106	; 0x6a
 80035a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035a2:	19bb      	adds	r3, r7, r6
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	193a      	adds	r2, r7, r4
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80035ac:	5c8a      	ldrb	r2, [r1, r2]
 80035ae:	435a      	muls	r2, r3
 80035b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80035b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035ba:	0019      	movs	r1, r3
 80035bc:	f7fc fe34 	bl	8000228 <__divsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	b299      	uxth	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2268      	movs	r2, #104	; 0x68
 80035c8:	5299      	strh	r1, [r3, r2]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b005      	add	sp, #20
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	0800372c 	.word	0x0800372c
 80035d8:	08003734 	.word	0x08003734

080035dc <memset>:
 80035dc:	0003      	movs	r3, r0
 80035de:	1882      	adds	r2, r0, r2
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	7019      	strb	r1, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <__libc_init_array>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	2600      	movs	r6, #0
 80035f0:	4c0c      	ldr	r4, [pc, #48]	; (8003624 <__libc_init_array+0x38>)
 80035f2:	4d0d      	ldr	r5, [pc, #52]	; (8003628 <__libc_init_array+0x3c>)
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	42a6      	cmp	r6, r4
 80035fa:	d109      	bne.n	8003610 <__libc_init_array+0x24>
 80035fc:	2600      	movs	r6, #0
 80035fe:	f000 f819 	bl	8003634 <_init>
 8003602:	4c0a      	ldr	r4, [pc, #40]	; (800362c <__libc_init_array+0x40>)
 8003604:	4d0a      	ldr	r5, [pc, #40]	; (8003630 <__libc_init_array+0x44>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	42a6      	cmp	r6, r4
 800360c:	d105      	bne.n	800361a <__libc_init_array+0x2e>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	00b3      	lsls	r3, r6, #2
 8003612:	58eb      	ldr	r3, [r5, r3]
 8003614:	4798      	blx	r3
 8003616:	3601      	adds	r6, #1
 8003618:	e7ee      	b.n	80035f8 <__libc_init_array+0xc>
 800361a:	00b3      	lsls	r3, r6, #2
 800361c:	58eb      	ldr	r3, [r5, r3]
 800361e:	4798      	blx	r3
 8003620:	3601      	adds	r6, #1
 8003622:	e7f2      	b.n	800360a <__libc_init_array+0x1e>
 8003624:	08003744 	.word	0x08003744
 8003628:	08003744 	.word	0x08003744
 800362c:	08003748 	.word	0x08003748
 8003630:	08003744 	.word	0x08003744

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
