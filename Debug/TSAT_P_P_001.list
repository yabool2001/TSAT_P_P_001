
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dd4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  08012e90  08012e90  00022e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d0c  08014d0c  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014d0c  08014d0c  00024d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d14  08014d14  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d14  08014d14  00024d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d1c  08014d1c  00024d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08014d20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  200006e0  08015400  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  08015400  00030ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d7c1  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d33  00000000  00000000  0004df0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00051c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ae  00000000  00000000  000536b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dea9  00000000  00000000  00054b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e43d  00000000  00000000  00072a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16fc  00000000  00000000  00090e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bc8  00000000  00000000  00142540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012e78 	.word	0x08012e78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012e78 	.word	0x08012e78

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080147bc 	.word	0x080147bc
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f98d 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f95b 	bl	800286c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb95 	bl	8002ce4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fb11 	bl	8002be0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fac1 	bl	8002b44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fb5b 	bl	8002c7c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa7f 	bl	8002ac8 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f99b 	bl	8002904 <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 fa3d 	bl	8002a4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <main+0x240>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <main+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4880      	ldr	r0, [pc, #512]	; (80027ec <main+0x244>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fc34 	bl	8006e58 <HAL_UART_Transmit>

  // Is system initialized?
  if ( ! is_system_initialized () )
 80025f0:	f000 fdd2 	bl	8003198 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	4053      	eors	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01b      	beq.n	800263a <main+0x92>
  {
	  // ASTRO INIT
	  my_astro_on () ;
 8002602:	f000 fccf 	bl	8002fa4 <my_astro_on>
	  if ( !my_astro_init () )
 8002606:	f007 fafd 	bl	8009c04 <my_astro_init>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4053      	eors	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <main+0x74>
	  {
		  HAL_NVIC_SystemReset () ;
 8002618:	f001 fae5 	bl	8003be6 <HAL_NVIC_SystemReset>
	  }
	  my_astro_off () ;
 800261c:	f000 fcea 	bl	8002ff4 <my_astro_off>

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 8002620:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <main+0x248>)
 8002622:	4a74      	ldr	r2, [pc, #464]	; (80027f4 <main+0x24c>)
 8002624:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <main+0x248>)
 8002628:	4a73      	ldr	r2, [pc, #460]	; (80027f8 <main+0x250>)
 800262a:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <main+0x248>)
 800262e:	4a73      	ldr	r2, [pc, #460]	; (80027fc <main+0x254>)
 8002630:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <main+0x248>)
 8002634:	0018      	movs	r0, r3
 8002636:	f007 fbb2 	bl	8009d9e <my_lis2dw12_init>
  }

  // GNSS INIT AND ACQ
  astro_geo_wr_latitude = 0 ;
 800263a:	4b71      	ldr	r3, [pc, #452]	; (8002800 <main+0x258>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <main+0x25c>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002646:	4b70      	ldr	r3, [pc, #448]	; (8002808 <main+0x260>)
 8002648:	8818      	ldrh	r0, [r3, #0]
 800264a:	4b70      	ldr	r3, [pc, #448]	; (800280c <main+0x264>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	496c      	ldr	r1, [pc, #432]	; (8002804 <main+0x25c>)
 8002652:	9102      	str	r1, [sp, #8]
 8002654:	496a      	ldr	r1, [pc, #424]	; (8002800 <main+0x258>)
 8002656:	9101      	str	r1, [sp, #4]
 8002658:	496d      	ldr	r1, [pc, #436]	; (8002810 <main+0x268>)
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	f007 fc2e 	bl	8009ebc <my_lx6_get_coordinates>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d040      	beq.n	80026e6 <main+0x13e>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <main+0x258>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <main+0x25c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f007 fb86 	bl	8009d80 <my_astro_write_coordinates>
	  my_rtc_get_time_s ( rtc_dt_s ) ;
 8002674:	4b67      	ldr	r3, [pc, #412]	; (8002814 <main+0x26c>)
 8002676:	0018      	movs	r0, r3
 8002678:	f007 fe76 	bl	800a368 <my_rtc_get_time_s>

	  // Update ts of last fix
	  my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <main+0x270>)
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <main+0x274>)
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f007 fe58 	bl	800a338 <my_rtc_get_dt>
	  last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <main+0x270>)
 800268a:	4b64      	ldr	r3, [pc, #400]	; (800281c <main+0x274>)
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f007 ff04 	bl	800a49c <my_conv_rtc2timestamp>
 8002694:	0002      	movs	r2, r0
 8002696:	4b62      	ldr	r3, [pc, #392]	; (8002820 <main+0x278>)
 8002698:	601a      	str	r2, [r3, #0]
	  dbg_buff[0] = 0 ;
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <main+0x27c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
	  sprintf ( dbg_buff , "Last fix timestap: %lu" , last_fix_ts ) ;
 80026a0:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <main+0x278>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4960      	ldr	r1, [pc, #384]	; (8002828 <main+0x280>)
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <main+0x27c>)
 80026a8:	0018      	movs	r0, r3
 80026aa:	f009 fdcd 	bl	800c248 <sprintf>
	  send_debug_logs ( dbg_buff ) ;
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <main+0x27c>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fbdb 	bl	8002e6c <send_debug_logs>

	  send_debug_logs ( rtc_dt_s ) ;
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <main+0x26c>)
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fbd7 	bl	8002e6c <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 80026be:	4b54      	ldr	r3, [pc, #336]	; (8002810 <main+0x268>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	4b59      	ldr	r3, [pc, #356]	; (800282c <main+0x284>)
 80026c8:	f7fd fec4 	bl	8000454 <__aeabi_dcmplt>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d00a      	beq.n	80026e6 <main+0x13e>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 80026d0:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <main+0x268>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4956      	ldr	r1, [pc, #344]	; (8002830 <main+0x288>)
 80026d8:	4856      	ldr	r0, [pc, #344]	; (8002834 <main+0x28c>)
 80026da:	9200      	str	r2, [sp, #0]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	000a      	movs	r2, r1
 80026e0:	2105      	movs	r1, #5
 80026e2:	f009 fd7d 	bl	800c1e0 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <main+0x290>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	001a      	movs	r2, r3
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <main+0x294>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	18d2      	adds	r2, r2, r3
 80026f2:	4b52      	ldr	r3, [pc, #328]	; (800283c <main+0x294>)
 80026f4:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 80026f6:	4b50      	ldr	r3, [pc, #320]	; (8002838 <main+0x290>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	001c      	movs	r4, r3
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <main+0x294>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <main+0x28c>)
 8002702:	494f      	ldr	r1, [pc, #316]	; (8002840 <main+0x298>)
 8002704:	484f      	ldr	r0, [pc, #316]	; (8002844 <main+0x29c>)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	0023      	movs	r3, r4
 800270a:	f009 fd9d 	bl	800c248 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 800270e:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <main+0x29c>)
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <main+0x2a0>)
 8002712:	4b4e      	ldr	r3, [pc, #312]	; (800284c <main+0x2a4>)
 8002714:	0018      	movs	r0, r3
 8002716:	f009 fd97 	bl	800c248 <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 800271a:	4b4c      	ldr	r3, [pc, #304]	; (800284c <main+0x2a4>)
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fba5 	bl	8002e6c <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 8002722:	4b48      	ldr	r3, [pc, #288]	; (8002844 <main+0x29c>)
 8002724:	0018      	movs	r0, r3
 8002726:	f007 fac3 	bl	8009cb0 <my_astro_add_payload_2_queue>

  // ACC INT1 WAKEUP ENABLE
  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <main+0x248>)
 800272c:	0018      	movs	r0, r3
 800272e:	f007 fb8f 	bl	8009e50 <my_lis2dw12_int1_wu_enable>
  //my_astro_on () ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 8002732:	f000 fc19 	bl	8002f68 <get_systick>
 8002736:	0002      	movs	r2, r0
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <main+0x2a8>)
 800273a:	601a      	str	r2, [r3, #0]
  // MAIN STATE MACHINE
  while (1)
  {
	  if ( is_astro_evt_flag )
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <main+0x2ac>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <main+0x1a6>
	  {
		  my_astro_read_evt_reg () ;
 8002744:	f007 fadc 	bl	8009d00 <my_astro_read_evt_reg>
		  is_astro_evt_flag = false ;
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <main+0x2ac>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
	  if ( is_evt_pin_high() )
	  {
		  my_astro_read_evt_reg () ;
	  }
	  */
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 800274e:	f000 fc0b 	bl	8002f68 <get_systick>
 8002752:	0002      	movs	r2, r0
 8002754:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <main+0x2a8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <main+0x2b0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d913      	bls.n	8002788 <main+0x1e0>
	  {
		  my_astro_log ();
 8002760:	f007 fb04 	bl	8009d6c <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 8002764:	f000 fc00 	bl	8002f68 <get_systick>
 8002768:	0002      	movs	r2, r0
 800276a:	4b39      	ldr	r3, [pc, #228]	; (8002850 <main+0x2a8>)
 800276c:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <main+0x2b4>)
 8002770:	881c      	ldrh	r4, [r3, #0]
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <main+0x29c>)
 8002774:	0018      	movs	r0, r3
 8002776:	f7fd fcc5 	bl	8000104 <strlen>
 800277a:	0003      	movs	r3, r0
 800277c:	b29a      	uxth	r2, r3
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <main+0x29c>)
 8002780:	0019      	movs	r1, r3
 8002782:	0020      	movs	r0, r4
 8002784:	f005 fe60 	bl	8008448 <astronode_send_pld_er>
	  }
	  if ( is_acc_int1_wkup_flag )
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <main+0x2b8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0d5      	beq.n	800273c <main+0x194>
	  {
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <main+0x248>)
 8002792:	0018      	movs	r0, r3
 8002794:	f007 fb77 	bl	8009e86 <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <main+0x2b8>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

		  my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <main+0x270>)
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <main+0x274>)
 80027a2:	0011      	movs	r1, r2
 80027a4:	0018      	movs	r0, r3
 80027a6:	f007 fdc7 	bl	800a338 <my_rtc_get_dt>
		  current_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 80027aa:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <main+0x270>)
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <main+0x274>)
 80027ae:	0011      	movs	r1, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f007 fe73 	bl	800a49c <my_conv_rtc2timestamp>
 80027b6:	0002      	movs	r2, r0
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <main+0x2bc>)
 80027ba:	601a      	str	r2, [r3, #0]
		  dbg_buff[0] = 0 ;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <main+0x27c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
		  sprintf ( dbg_buff , "Seconds elapsed from last fix: %lu" , current_ts - last_fix_ts ) ;
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <main+0x2bc>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <main+0x278>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	4926      	ldr	r1, [pc, #152]	; (8002868 <main+0x2c0>)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <main+0x27c>)
 80027d0:	0018      	movs	r0, r3
 80027d2:	f009 fd39 	bl	800c248 <sprintf>
		  send_debug_logs ( dbg_buff ) ;
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <main+0x27c>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 fb47 	bl	8002e6c <send_debug_logs>

		  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <main+0x248>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f007 fb35 	bl	8009e50 <my_lis2dw12_int1_wu_enable>
	  if ( is_astro_evt_flag )
 80027e6:	e7a9      	b.n	800273c <main+0x194>
 80027e8:	20000000 	.word	0x20000000
 80027ec:	2000086c 	.word	0x2000086c
 80027f0:	20000b8c 	.word	0x20000b8c
 80027f4:	080030a9 	.word	0x080030a9
 80027f8:	08003119 	.word	0x08003119
 80027fc:	20000728 	.word	0x20000728
 8002800:	20000a10 	.word	0x20000a10
 8002804:	20000a14 	.word	0x20000a14
 8002808:	20000010 	.word	0x20000010
 800280c:	20000008 	.word	0x20000008
 8002810:	20000018 	.word	0x20000018
 8002814:	200009f8 	.word	0x200009f8
 8002818:	20000b9c 	.word	0x20000b9c
 800281c:	20000bb0 	.word	0x20000bb0
 8002820:	20000a20 	.word	0x20000a20
 8002824:	20000994 	.word	0x20000994
 8002828:	08012ea8 	.word	0x08012ea8
 800282c:	40590000 	.word	0x40590000
 8002830:	08012ec0 	.word	0x08012ec0
 8002834:	20000a18 	.word	0x20000a18
 8002838:	20000a24 	.word	0x20000a24
 800283c:	20000a28 	.word	0x20000a28
 8002840:	08012ec8 	.word	0x08012ec8
 8002844:	20000a34 	.word	0x20000a34
 8002848:	08012ed4 	.word	0x08012ed4
 800284c:	20000ad4 	.word	0x20000ad4
 8002850:	20000a2c 	.word	0x20000a2c
 8002854:	20000bb5 	.word	0x20000bb5
 8002858:	0000ea60 	.word	0x0000ea60
 800285c:	20000a30 	.word	0x20000a30
 8002860:	20000bb4 	.word	0x20000bb4
 8002864:	20000a0c 	.word	0x20000a0c
 8002868:	08012eec 	.word	0x08012eec

0800286c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b093      	sub	sp, #76	; 0x4c
 8002870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002872:	2410      	movs	r4, #16
 8002874:	193b      	adds	r3, r7, r4
 8002876:	0018      	movs	r0, r3
 8002878:	2338      	movs	r3, #56	; 0x38
 800287a:	001a      	movs	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	f009 fd79 	bl	800c374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002882:	003b      	movs	r3, r7
 8002884:	0018      	movs	r0, r3
 8002886:	2310      	movs	r3, #16
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f009 fd72 	bl	800c374 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	0018      	movs	r0, r3
 8002896:	f001 fc3d 	bl	8004114 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800289a:	193b      	adds	r3, r7, r4
 800289c:	220a      	movs	r2, #10
 800289e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028a8:	0021      	movs	r1, r4
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2201      	movs	r2, #1
 80028ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 fc71 	bl	80041ac <HAL_RCC_OscConfig>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80028ce:	f000 fcc9 	bl	8003264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d2:	003b      	movs	r3, r7
 80028d4:	2207      	movs	r2, #7
 80028d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028d8:	003b      	movs	r3, r7
 80028da:	2200      	movs	r2, #0
 80028dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028de:	003b      	movs	r3, r7
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028e4:	003b      	movs	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028ea:	003b      	movs	r3, r7
 80028ec:	2100      	movs	r1, #0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f001 ff76 	bl	80047e0 <HAL_RCC_ClockConfig>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80028f8:	f000 fcb4 	bl	8003264 <Error_Handler>
  }
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b013      	add	sp, #76	; 0x4c
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b090      	sub	sp, #64	; 0x40
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800290a:	232c      	movs	r3, #44	; 0x2c
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	0018      	movs	r0, r3
 8002910:	2314      	movs	r3, #20
 8002912:	001a      	movs	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	f009 fd2d 	bl	800c374 <memset>
  RTC_DateTypeDef sDate = {0};
 800291a:	2328      	movs	r3, #40	; 0x28
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002922:	003b      	movs	r3, r7
 8002924:	0018      	movs	r0, r3
 8002926:	2328      	movs	r3, #40	; 0x28
 8002928:	001a      	movs	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	f009 fd22 	bl	800c374 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002930:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <MX_RTC_Init+0x140>)
 8002932:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <MX_RTC_Init+0x144>)
 8002934:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <MX_RTC_Init+0x140>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <MX_RTC_Init+0x140>)
 800293e:	227f      	movs	r2, #127	; 0x7f
 8002940:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <MX_RTC_Init+0x140>)
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <MX_RTC_Init+0x140>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <MX_RTC_Init+0x140>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <MX_RTC_Init+0x140>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <MX_RTC_Init+0x140>)
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	05d2      	lsls	r2, r2, #23
 8002960:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_RTC_Init+0x140>)
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <MX_RTC_Init+0x140>)
 800296a:	0018      	movs	r0, r3
 800296c:	f002 fa9a 	bl	8004ea4 <HAL_RTC_Init>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002974:	f000 fc76 	bl	8003264 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800299e:	1879      	adds	r1, r7, r1
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <MX_RTC_Init+0x140>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	0018      	movs	r0, r3
 80029a6:	f002 fb1f 	bl	8004fe8 <HAL_RTC_SetTime>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80029ae:	f000 fc59 	bl	8003264 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80029b2:	2128      	movs	r1, #40	; 0x28
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2206      	movs	r2, #6
 80029b8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2201      	movs	r2, #1
 80029be:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2201      	movs	r2, #1
 80029c4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80029cc:	1879      	adds	r1, r7, r1
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_RTC_Init+0x140>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	0018      	movs	r0, r3
 80029d4:	f002 fc0c 	bl	80051f0 <HAL_RTC_SetDate>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80029dc:	f000 fc42 	bl	8003264 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80029e0:	003b      	movs	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80029e6:	003b      	movs	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80029ec:	003b      	movs	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80029f2:	003b      	movs	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029f8:	003b      	movs	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029fe:	003b      	movs	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a04:	003b      	movs	r3, r7
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a0a:	003b      	movs	r3, r7
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a10:	003b      	movs	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002a16:	003b      	movs	r3, r7
 8002a18:	2220      	movs	r2, #32
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a1e:	003b      	movs	r3, r7
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002a26:	0039      	movs	r1, r7
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_RTC_Init+0x140>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 fcbf 	bl	80053b0 <HAL_RTC_SetAlarm>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002a36:	f000 fc15 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b010      	add	sp, #64	; 0x40
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200006fc 	.word	0x200006fc
 8002a48:	40002800 	.word	0x40002800

08002a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <MX_SPI1_Init+0x78>)
 8002a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a58:	2282      	movs	r2, #130	; 0x82
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a66:	22e0      	movs	r2, #224	; 0xe0
 8002a68:	00d2      	lsls	r2, r2, #3
 8002a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0092      	lsls	r2, r2, #2
 8002a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f002 ff01 	bl	80058b4 <HAL_SPI_Init>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ab6:	f000 fbd5 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000728 	.word	0x20000728
 8002ac4:	40013000 	.word	0x40013000

08002ac8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f009 fc4c 	bl	800c374 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <MX_TIM6_Init+0x70>)
 8002ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <MX_TIM6_Init+0x74>)
 8002ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <MX_TIM6_Init+0x78>)
 8002af2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002afc:	0018      	movs	r0, r3
 8002afe:	f003 fddb 	bl	80066b8 <HAL_TIM_Base_Init>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b06:	f000 fbad 	bl	8003264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b16:	1d3a      	adds	r2, r7, #4
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f004 f87f 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002b26:	f000 fb9d 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	2000078c 	.word	0x2000078c
 8002b38:	40001000 	.word	0x40001000
 8002b3c:	00003e7f 	.word	0x00003e7f
 8002b40:	000003e7 	.word	0x000003e7

08002b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b4a:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <MX_USART1_UART_Init+0x98>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b50:	2296      	movs	r2, #150	; 0x96
 8002b52:	0192      	lsls	r2, r2, #6
 8002b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f004 f8cc 	bl	8006d2c <HAL_UART_Init>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d001      	beq.n	8002b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b98:	f000 fb64 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f004 ff99 	bl	8007ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002baa:	f000 fb5b 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f004 ffd0 	bl	8007b58 <HAL_UARTEx_SetRxFifoThreshold>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bbc:	f000 fb52 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f004 ff4e 	bl	8007a64 <HAL_UARTEx_DisableFifoMode>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bcc:	f000 fb4a 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	200007d8 	.word	0x200007d8
 8002bdc:	40013800 	.word	0x40013800

08002be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <MX_USART2_UART_Init+0x98>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bec:	22e1      	movs	r2, #225	; 0xe1
 8002bee:	0252      	lsls	r2, r2, #9
 8002bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f004 f87e 	bl	8006d2c <HAL_UART_Init>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c34:	f000 fb16 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f004 ff4b 	bl	8007ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c46:	f000 fb0d 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f004 ff82 	bl	8007b58 <HAL_UARTEx_SetRxFifoThreshold>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c58:	f000 fb04 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f004 ff00 	bl	8007a64 <HAL_UARTEx_DisableFifoMode>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c68:	f000 fafc 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	2000086c 	.word	0x2000086c
 8002c78:	40004400 	.word	0x40004400

08002c7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <MX_USART3_UART_Init+0x64>)
 8002c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002c88:	2296      	movs	r2, #150	; 0x96
 8002c8a:	0192      	lsls	r2, r2, #6
 8002c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <MX_USART3_UART_Init+0x60>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f004 f830 	bl	8006d2c <HAL_UART_Init>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002cd0:	f000 fac8 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000900 	.word	0x20000900
 8002ce0:	40004800 	.word	0x40004800

08002ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b08b      	sub	sp, #44	; 0x2c
 8002ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cea:	2414      	movs	r4, #20
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	0018      	movs	r0, r3
 8002cf0:	2314      	movs	r3, #20
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f009 fb3d 	bl	800c374 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d00:	2104      	movs	r1, #4
 8002d02:	430a      	orrs	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d12:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d18:	2120      	movs	r1, #32
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d1e:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	2220      	movs	r2, #32
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	430a      	orrs	r2, r1
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d48:	2102      	movs	r1, #2
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <MX_GPIO_Init+0x178>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	2202      	movs	r2, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002d5a:	2388      	movs	r3, #136	; 0x88
 8002d5c:	015b      	lsls	r3, r3, #5
 8002d5e:	4840      	ldr	r0, [pc, #256]	; (8002e60 <MX_GPIO_Init+0x17c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	0019      	movs	r1, r3
 8002d64:	f001 f984 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002d68:	493e      	ldr	r1, [pc, #248]	; (8002e64 <MX_GPIO_Init+0x180>)
 8002d6a:	23a0      	movs	r3, #160	; 0xa0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	2200      	movs	r2, #0
 8002d70:	0018      	movs	r0, r3
 8002d72:	f001 f97d 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	01db      	lsls	r3, r3, #7
 8002d7a:	483b      	ldr	r0, [pc, #236]	; (8002e68 <MX_GPIO_Init+0x184>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	0019      	movs	r1, r3
 8002d80:	f001 f976 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2288      	movs	r2, #136	; 0x88
 8002d88:	0152      	lsls	r2, r2, #5
 8002d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	193b      	adds	r3, r7, r4
 8002d8e:	2201      	movs	r2, #1
 8002d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <MX_GPIO_Init+0x17c>)
 8002da2:	0019      	movs	r1, r3
 8002da4:	0010      	movs	r0, r2
 8002da6:	f000 ff2f 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <MX_GPIO_Init+0x180>)
 8002dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	2201      	movs	r2, #1
 8002db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	193a      	adds	r2, r7, r4
 8002dc4:	23a0      	movs	r3, #160	; 0xa0
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 ff1c 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002dd0:	0021      	movs	r1, r4
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	01d2      	lsls	r2, r2, #7
 8002dd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dda:	000c      	movs	r4, r1
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	2201      	movs	r2, #1
 8002de0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <MX_GPIO_Init+0x184>)
 8002df2:	0019      	movs	r1, r3
 8002df4:	0010      	movs	r0, r2
 8002df6:	f000 ff07 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	0152      	lsls	r2, r2, #5
 8002e00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	2288      	movs	r2, #136	; 0x88
 8002e06:	0352      	lsls	r2, r2, #13
 8002e08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002e10:	193a      	adds	r2, r7, r4
 8002e12:	23a0      	movs	r3, #160	; 0xa0
 8002e14:	05db      	lsls	r3, r3, #23
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fef5 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002e1e:	0021      	movs	r1, r4
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	22c0      	movs	r2, #192	; 0xc0
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2288      	movs	r2, #136	; 0x88
 8002e2c:	0352      	lsls	r2, r2, #13
 8002e2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <MX_GPIO_Init+0x184>)
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	f000 fee3 	bl	8003c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2101      	movs	r1, #1
 8002e46:	2007      	movs	r0, #7
 8002e48:	f000 fea8 	bl	8003b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e4c:	2007      	movs	r0, #7
 8002e4e:	f000 feba 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b00b      	add	sp, #44	; 0x2c
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	50000800 	.word	0x50000800
 8002e64:	00008860 	.word	0x00008860
 8002e68:	50000400 	.word	0x50000400

08002e6c <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f944 	bl	8000104 <strlen>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2bfa      	cmp	r3, #250	; 0xfa
 8002e84:	d908      	bls.n	8002e98 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002e86:	23fa      	movs	r3, #250	; 0xfa
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <send_debug_logs+0x54>)
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <send_debug_logs+0x58>)
 8002e8e:	222a      	movs	r2, #42	; 0x2a
 8002e90:	f003 ffe2 	bl	8006e58 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002e94:	23fa      	movs	r3, #250	; 0xfa
 8002e96:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	23fa      	movs	r3, #250	; 0xfa
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <send_debug_logs+0x58>)
 8002ea4:	f003 ffd8 	bl	8006e58 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002ea8:	23fa      	movs	r3, #250	; 0xfa
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <send_debug_logs+0x5c>)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <send_debug_logs+0x58>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f003 ffd1 	bl	8006e58 <HAL_UART_Transmit>
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	08012f10 	.word	0x08012f10
 8002ec4:	2000086c 	.word	0x2000086c
 8002ec8:	08012f3c 	.word	0x08012f3c

08002ecc <reset_astronode>:
void reset_astronode ( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	0119      	lsls	r1, r3, #4
 8002ed4:	23a0      	movs	r3, #160	; 0xa0
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	2201      	movs	r2, #1
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 f8c8 	bl	8004070 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f000 fd79 	bl	80039d8 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	0119      	lsls	r1, r3, #4
 8002eea:	23a0      	movs	r3, #160	; 0xa0
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	2200      	movs	r2, #0
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f001 f8bd 	bl	8004070 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002ef6:	20fa      	movs	r0, #250	; 0xfa
 8002ef8:	f000 fd6e 	bl	80039d8 <HAL_Delay>
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <send_astronode_request+0x34>)
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff ffab 	bl	8002e6c <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff ffa7 	bl	8002e6c <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	23fa      	movs	r3, #250	; 0xfa
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4804      	ldr	r0, [pc, #16]	; (8002f3c <send_astronode_request+0x38>)
 8002f2a:	f003 ff95 	bl	8006e58 <HAL_UART_Transmit>
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	08012f40 	.word	0x08012f40
 8002f3c:	200007d8 	.word	0x200007d8

08002f40 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4806      	ldr	r0, [pc, #24]	; (8002f64 <is_astronode_character_received+0x24>)
 8002f4c:	2364      	movs	r3, #100	; 0x64
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f004 f81e 	bl	8006f90 <HAL_UART_Receive>
 8002f54:	0003      	movs	r3, r0
 8002f56:	425a      	negs	r2, r3
 8002f58:	4153      	adcs	r3, r2
 8002f5a:	b2db      	uxtb	r3, r3
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200007d8 	.word	0x200007d8

08002f68 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002f6c:	f000 fd2a 	bl	80039c4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	000a      	movs	r2, r1
 8002f82:	1cbb      	adds	r3, r7, #2
 8002f84:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002f86:	f7ff ffef 	bl	8002f68 <get_systick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	1cba      	adds	r2, r7, #2
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	419b      	sbcs	r3, r3
 8002f98:	425b      	negs	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <my_astro_on+0x4c>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f003 ff14 	bl	8006dd8 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	0219      	lsls	r1, r3, #8
 8002fb4:	23a0      	movs	r3, #160	; 0xa0
 8002fb6:	05db      	lsls	r3, r3, #23
 8002fb8:	2200      	movs	r2, #0
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f001 f858 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	0119      	lsls	r1, r3, #4
 8002fc4:	23a0      	movs	r3, #160	; 0xa0
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	2200      	movs	r2, #0
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 f850 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002fd0:	23a0      	movs	r3, #160	; 0xa0
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f001 f849 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f000 fcfa 	bl	80039d8 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002fe4:	f7ff fdae 	bl	8002b44 <MX_USART1_UART_Init>
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	200007d8 	.word	0x200007d8

08002ff4 <my_astro_off>:
void my_astro_off ( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <my_astro_off+0x48>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f003 feec 	bl	8006dd8 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	0219      	lsls	r1, r3, #8
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	05db      	lsls	r3, r3, #23
 8003008:	2200      	movs	r2, #0
 800300a:	0018      	movs	r0, r3
 800300c:	f001 f830 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	0119      	lsls	r1, r3, #4
 8003014:	23a0      	movs	r3, #160	; 0xa0
 8003016:	05db      	lsls	r3, r3, #23
 8003018:	2200      	movs	r2, #0
 800301a:	0018      	movs	r0, r3
 800301c:	f001 f828 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8003020:	2001      	movs	r0, #1
 8003022:	f000 fcd9 	bl	80039d8 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003026:	23a0      	movs	r3, #160	; 0xa0
 8003028:	05db      	lsls	r3, r3, #23
 800302a:	2200      	movs	r2, #0
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	0018      	movs	r0, r3
 8003030:	f001 f81e 	bl	8004070 <HAL_GPIO_WritePin>
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	200007d8 	.word	0x200007d8

08003040 <my_lx6_on>:
void my_lx6_on ( void )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <my_lx6_on+0x2c>)
 800304a:	2201      	movs	r2, #1
 800304c:	0019      	movs	r1, r3
 800304e:	f001 f80f 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <my_lx6_on+0x2c>)
 8003058:	2201      	movs	r2, #1
 800305a:	0019      	movs	r1, r3
 800305c:	f001 f808 	bl	8004070 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003060:	f7ff fe0c 	bl	8002c7c <MX_USART3_UART_Init>
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	50000800 	.word	0x50000800

08003070 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <my_lx6_off+0x30>)
 800307a:	2200      	movs	r2, #0
 800307c:	0019      	movs	r1, r3
 800307e:	f000 fff7 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	015b      	lsls	r3, r3, #5
 8003086:	4806      	ldr	r0, [pc, #24]	; (80030a0 <my_lx6_off+0x30>)
 8003088:	2200      	movs	r2, #0
 800308a:	0019      	movs	r1, r3
 800308c:	f000 fff0 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <my_lx6_off+0x34>)
 8003092:	0018      	movs	r0, r3
 8003094:	f003 fea0 	bl	8006dd8 <HAL_UART_DeInit>
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	50000800 	.word	0x50000800
 80030a4:	20000900 	.word	0x20000900

080030a8 <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	0008      	movs	r0, r1
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	0019      	movs	r1, r3
 80030b6:	240b      	movs	r4, #11
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	1c02      	adds	r2, r0, #0
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	2508      	movs	r5, #8
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	1c0a      	adds	r2, r1, #0
 80030c4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	01db      	lsls	r3, r3, #7
 80030ca:	4812      	ldr	r0, [pc, #72]	; (8003114 <my_lis2dw12_platform_write+0x6c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	0019      	movs	r1, r3
 80030d0:	f000 ffce 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030d4:	2014      	movs	r0, #20
 80030d6:	f000 fc7f 	bl	80039d8 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80030da:	23fa      	movs	r3, #250	; 0xfa
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	1939      	adds	r1, r7, r4
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f002 fc9e 	bl	8005a24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009c      	lsls	r4, r3, #2
 80030ec:	197b      	adds	r3, r7, r5
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f002 fc95 	bl	8005a24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	01db      	lsls	r3, r3, #7
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <my_lis2dw12_platform_write+0x6c>)
 8003100:	2201      	movs	r2, #1
 8003102:	0019      	movs	r1, r3
 8003104:	f000 ffb4 	bl	8004070 <HAL_GPIO_WritePin>

	return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bdb0      	pop	{r4, r5, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	50000400 	.word	0x50000400

08003118 <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	0008      	movs	r0, r1
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	0019      	movs	r1, r3
 8003126:	240b      	movs	r4, #11
 8003128:	193b      	adds	r3, r7, r4
 800312a:	1c02      	adds	r2, r0, #0
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	2508      	movs	r5, #8
 8003130:	197b      	adds	r3, r7, r5
 8003132:	1c0a      	adds	r2, r1, #0
 8003134:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	4252      	negs	r2, r2
 800313e:	4313      	orrs	r3, r2
 8003140:	b2da      	uxtb	r2, r3
 8003142:	193b      	adds	r3, r7, r4
 8003144:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	4812      	ldr	r0, [pc, #72]	; (8003194 <my_lis2dw12_platform_read+0x7c>)
 800314c:	2200      	movs	r2, #0
 800314e:	0019      	movs	r1, r3
 8003150:	f000 ff8e 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003154:	2014      	movs	r0, #20
 8003156:	f000 fc3f 	bl	80039d8 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 800315a:	23fa      	movs	r3, #250	; 0xfa
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	1939      	adds	r1, r7, r4
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f002 fc5e 	bl	8005a24 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003168:	23fa      	movs	r3, #250	; 0xfa
 800316a:	009c      	lsls	r4, r3, #2
 800316c:	197b      	adds	r3, r7, r5
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	0023      	movs	r3, r4
 8003176:	f002 fdad 	bl	8005cd4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4805      	ldr	r0, [pc, #20]	; (8003194 <my_lis2dw12_platform_read+0x7c>)
 8003180:	2201      	movs	r2, #1
 8003182:	0019      	movs	r1, r3
 8003184:	f000 ff74 	bl	8004070 <HAL_GPIO_WritePin>

	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bdb0      	pop	{r4, r5, r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	50000400 	.word	0x50000400

08003198 <is_system_initialized>:
bool is_system_initialized ( void )
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 800319e:	f005 fa73 	bl	8008688 <astronode_send_rtc_rr>
 80031a2:	0003      	movs	r3, r0
 80031a4:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 80031a6:	1cbc      	adds	r4, r7, #2
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <is_system_initialized+0x44>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f007 f8dc 	bl	800a368 <my_rtc_get_time_s>
 80031b0:	0003      	movs	r3, r0
 80031b2:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <is_system_initialized+0x44>)
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fe58 	bl	8002e6c <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 80031bc:	1cbb      	adds	r3, r7, #2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <is_system_initialized+0x48>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d802      	bhi.n	80031cc <is_system_initialized+0x34>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <is_system_initialized+0x38>
	{
		return true ;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <is_system_initialized+0x3a>
	}
	return false ;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b003      	add	sp, #12
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	200009f8 	.word	0x200009f8
 80031e0:	000007e6 	.word	0x000007e6

080031e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10d      	bne.n	8003212 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003200:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	23e1      	movs	r3, #225	; 0xe1
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	429a      	cmp	r2, r3
 800320c:	d901      	bls.n	8003212 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 800320e:	f000 fcea 	bl	8003be6 <HAL_NVIC_SystemReset>
		  }
	}
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40001000 	.word	0x40001000
 8003220:	20000a24 	.word	0x20000a24

08003224 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	0002      	movs	r2, r0
 800322c:	1dbb      	adds	r3, r7, #6
 800322e:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 ) // LIS_INT1_EXTI8_Pin = 0x100
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	429a      	cmp	r2, r3
 800323a:	d102      	bne.n	8003242 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
	{
		is_acc_int1_wkup_flag = true ;
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
		send_debug_logs ( dbg_buff ) ;
		*/
	}
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x1000 ) // ASTRO_EVT_Pin = 0x1000
 8003242:	1dbb      	adds	r3, r7, #6
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	429a      	cmp	r2, r3
 800324c:	d102      	bne.n	8003254 <HAL_GPIO_EXTI_Rising_Callback+0x30>
	{
		is_astro_evt_flag = true ;
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
	}
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000bb4 	.word	0x20000bb4
 8003260:	20000bb5 	.word	0x20000bb5

08003264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003268:	b672      	cpsid	i
}
 800326a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800326c:	e7fe      	b.n	800326c <Error_Handler+0x8>
	...

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_MspInit+0x44>)
 8003278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_MspInit+0x44>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_MspInit+0x44>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2201      	movs	r2, #1
 8003288:	4013      	ands	r3, r2
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_MspInit+0x44>)
 8003290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_MspInit+0x44>)
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	0549      	lsls	r1, r1, #21
 8003298:	430a      	orrs	r2, r1
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_MspInit+0x44>)
 800329e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	055b      	lsls	r3, r3, #21
 80032a4:	4013      	ands	r3, r2
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b091      	sub	sp, #68	; 0x44
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c0:	240c      	movs	r4, #12
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	0018      	movs	r0, r3
 80032c6:	2334      	movs	r3, #52	; 0x34
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f009 f852 	bl	800c374 <memset>
  if(hrtc->Instance==RTC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_RTC_MspInit+0x74>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d124      	bne.n	8003324 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0292      	lsls	r2, r2, #10
 80032e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	0018      	movs	r0, r3
 80032ee:	f001 fc21 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80032f6:	f7ff ffb5 	bl	8003264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_RTC_MspInit+0x78>)
 80032fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RTC_MspInit+0x78>)
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	0209      	lsls	r1, r1, #8
 8003304:	430a      	orrs	r2, r1
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RTC_MspInit+0x78>)
 800330a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RTC_MspInit+0x78>)
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	00c9      	lsls	r1, r1, #3
 8003312:	430a      	orrs	r2, r1
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RTC_MspInit+0x78>)
 8003318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4013      	ands	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b011      	add	sp, #68	; 0x44
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	40002800 	.word	0x40002800
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b08b      	sub	sp, #44	; 0x2c
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	2414      	movs	r4, #20
 800333e:	193b      	adds	r3, r7, r4
 8003340:	0018      	movs	r0, r3
 8003342:	2314      	movs	r3, #20
 8003344:	001a      	movs	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	f009 f814 	bl	800c374 <memset>
  if(hspi->Instance==SPI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_SPI_MspInit+0x8c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12f      	bne.n	80033b6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0149      	lsls	r1, r1, #5
 8003360:	430a      	orrs	r2, r1
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 8003366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 8003378:	2102      	movs	r1, #2
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_SPI_MspInit+0x90>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800338a:	0021      	movs	r1, r4
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2238      	movs	r2, #56	; 0x38
 8003390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2202      	movs	r2, #2
 8003396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <HAL_SPI_MspInit+0x94>)
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f000 fc29 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00b      	add	sp, #44	; 0x2c
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40013000 	.word	0x40013000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	50000400 	.word	0x50000400

080033cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <HAL_TIM_Base_MspInit+0x44>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d113      	bne.n	8003406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_TIM_Base_MspInit+0x48>)
 80033e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <HAL_TIM_Base_MspInit+0x48>)
 80033e4:	2110      	movs	r1, #16
 80033e6:	430a      	orrs	r2, r1
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_TIM_Base_MspInit+0x48>)
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2210      	movs	r2, #16
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2011      	movs	r0, #17
 80033fc:	f000 fbce 	bl	8003b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003400:	2011      	movs	r0, #17
 8003402:	f000 fbe0 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b004      	add	sp, #16
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	40001000 	.word	0x40001000
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b09b      	sub	sp, #108	; 0x6c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	2354      	movs	r3, #84	; 0x54
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	0018      	movs	r0, r3
 8003426:	2314      	movs	r3, #20
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f008 ffa2 	bl	800c374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	2420      	movs	r4, #32
 8003432:	193b      	adds	r3, r7, r4
 8003434:	0018      	movs	r0, r3
 8003436:	2334      	movs	r3, #52	; 0x34
 8003438:	001a      	movs	r2, r3
 800343a:	2100      	movs	r1, #0
 800343c:	f008 ff9a 	bl	800c374 <memset>
  if(huart->Instance==USART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a61      	ldr	r2, [pc, #388]	; (80035cc <HAL_UART_MspInit+0x1b4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d140      	bne.n	80034cc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800344a:	193b      	adds	r3, r7, r4
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003456:	193b      	adds	r3, r7, r4
 8003458:	0018      	movs	r0, r3
 800345a:	f001 fb6b 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d001      	beq.n	8003466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003462:	f7ff feff 	bl	8003264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003466:	4b5a      	ldr	r3, [pc, #360]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	01c9      	lsls	r1, r1, #7
 8003470:	430a      	orrs	r2, r1
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
 8003474:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	01db      	lsls	r3, r3, #7
 800347c:	4013      	ands	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003486:	4b52      	ldr	r3, [pc, #328]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
 800348e:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800349a:	2154      	movs	r1, #84	; 0x54
 800349c:	187b      	adds	r3, r7, r1
 800349e:	22c0      	movs	r2, #192	; 0xc0
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2202      	movs	r2, #2
 80034a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2200      	movs	r2, #0
 80034b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2201      	movs	r2, #1
 80034ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034bc:	187a      	adds	r2, r7, r1
 80034be:	23a0      	movs	r3, #160	; 0xa0
 80034c0:	05db      	lsls	r3, r3, #23
 80034c2:	0011      	movs	r1, r2
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 fb9f 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034ca:	e07b      	b.n	80035c4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a40      	ldr	r2, [pc, #256]	; (80035d4 <HAL_UART_MspInit+0x1bc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d140      	bne.n	8003558 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034d6:	2120      	movs	r1, #32
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fb24 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80034f0:	f7ff feb8 	bl	8003264 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 80034f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f8:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	0289      	lsls	r1, r1, #10
 80034fe:	430a      	orrs	r2, r1
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
 8003502:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	4013      	ands	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003516:	2101      	movs	r1, #1
 8003518:	430a      	orrs	r2, r1
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
 800351c:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	2201      	movs	r2, #1
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003528:	2154      	movs	r1, #84	; 0x54
 800352a:	187b      	adds	r3, r7, r1
 800352c:	220c      	movs	r2, #12
 800352e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2202      	movs	r2, #2
 8003534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2201      	movs	r2, #1
 800353a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2201      	movs	r2, #1
 8003546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	187a      	adds	r2, r7, r1
 800354a:	23a0      	movs	r3, #160	; 0xa0
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f000 fb59 	bl	8003c08 <HAL_GPIO_Init>
}
 8003556:	e035      	b.n	80035c4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1e      	ldr	r2, [pc, #120]	; (80035d8 <HAL_UART_MspInit+0x1c0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d130      	bne.n	80035c4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	02c9      	lsls	r1, r1, #11
 800356c:	430a      	orrs	r2, r1
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	02db      	lsls	r3, r3, #11
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 8003584:	2104      	movs	r1, #4
 8003586:	430a      	orrs	r2, r1
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_UART_MspInit+0x1b8>)
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	2204      	movs	r2, #4
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8003596:	2154      	movs	r1, #84	; 0x54
 8003598:	187b      	adds	r3, r7, r1
 800359a:	22c0      	movs	r2, #192	; 0xc0
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2202      	movs	r2, #2
 80035a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_UART_MspInit+0x1c4>)
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f000 fb22 	bl	8003c08 <HAL_GPIO_Init>
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b01b      	add	sp, #108	; 0x6c
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	40013800 	.word	0x40013800
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40004800 	.word	0x40004800
 80035dc:	50000800 	.word	0x50000800

080035e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_UART_MspDeInit+0x80>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10e      	bne.n	8003610 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 80035f8:	491b      	ldr	r1, [pc, #108]	; (8003668 <HAL_UART_MspDeInit+0x88>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80035fe:	23c0      	movs	r3, #192	; 0xc0
 8003600:	00da      	lsls	r2, r3, #3
 8003602:	23a0      	movs	r3, #160	; 0xa0
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f000 fc61 	bl	8003ed0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800360e:	e023      	b.n	8003658 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_UART_MspDeInit+0x8c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 800361c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 8003620:	4913      	ldr	r1, [pc, #76]	; (8003670 <HAL_UART_MspDeInit+0x90>)
 8003622:	400a      	ands	r2, r1
 8003624:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8003626:	23a0      	movs	r3, #160	; 0xa0
 8003628:	05db      	lsls	r3, r3, #23
 800362a:	210c      	movs	r1, #12
 800362c:	0018      	movs	r0, r3
 800362e:	f000 fc4f 	bl	8003ed0 <HAL_GPIO_DeInit>
}
 8003632:	e011      	b.n	8003658 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_UART_MspDeInit+0x94>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10c      	bne.n	8003658 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 8003640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_UART_MspDeInit+0x84>)
 8003644:	490c      	ldr	r1, [pc, #48]	; (8003678 <HAL_UART_MspDeInit+0x98>)
 8003646:	400a      	ands	r2, r1
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800364a:	23c0      	movs	r3, #192	; 0xc0
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_UART_MspDeInit+0x9c>)
 8003650:	0019      	movs	r1, r3
 8003652:	0010      	movs	r0, r2
 8003654:	f000 fc3c 	bl	8003ed0 <HAL_GPIO_DeInit>
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	ffffbfff 	.word	0xffffbfff
 800366c:	40004400 	.word	0x40004400
 8003670:	fffdffff 	.word	0xfffdffff
 8003674:	40004800 	.word	0x40004800
 8003678:	fffbffff 	.word	0xfffbffff
 800367c:	50000800 	.word	0x50000800

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <NMI_Handler+0x4>

08003686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <HardFault_Handler+0x4>

0800368c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a4:	f000 f97c 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fcf8 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fcf3 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 fcee 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f003 f8cc 	bl	800687c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	2000078c 	.word	0x2000078c

080036f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  return 1;
 80036f4:	2301      	movs	r3, #1
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_kill>:

int _kill(int pid, int sig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003706:	f008 fee1 	bl	800c4cc <__errno>
 800370a:	0003      	movs	r3, r0
 800370c:	2216      	movs	r2, #22
 800370e:	601a      	str	r2, [r3, #0]
  return -1;
 8003710:	2301      	movs	r3, #1
 8003712:	425b      	negs	r3, r3
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <_exit>:

void _exit (int status)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003724:	2301      	movs	r3, #1
 8003726:	425a      	negs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff ffe5 	bl	80036fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003732:	e7fe      	b.n	8003732 <_exit+0x16>

08003734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e00a      	b.n	800375c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003746:	e000      	b.n	800374a <_read+0x16>
 8003748:	bf00      	nop
 800374a:	0001      	movs	r1, r0
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	60ba      	str	r2, [r7, #8]
 8003752:	b2ca      	uxtb	r2, r1
 8003754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	dbf0      	blt.n	8003746 <_read+0x12>
  }

  return len;
 8003764:	687b      	ldr	r3, [r7, #4]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}

0800376e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e009      	b.n	8003794 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	e000      	b.n	800378e <_write+0x20>
 800378c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	dbf1      	blt.n	8003780 <_write+0x12>
  }
  return len;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_close>:

int _close(int file)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	425b      	negs	r3, r3
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b002      	add	sp, #8
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	0192      	lsls	r2, r2, #6
 80037ca:	605a      	str	r2, [r3, #4]
  return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_isatty>:

int _isatty(int file)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <_sbrk+0x5c>)
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_sbrk+0x60>)
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <_sbrk+0x64>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <_sbrk+0x68>)
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003830:	f008 fe4c 	bl	800c4cc <__errno>
 8003834:	0003      	movs	r3, r0
 8003836:	220c      	movs	r2, #12
 8003838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383a:	2301      	movs	r3, #1
 800383c:	425b      	negs	r3, r3
 800383e:	e009      	b.n	8003854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <_sbrk+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_sbrk+0x64>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	18d2      	adds	r2, r2, r3
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <_sbrk+0x64>)
 8003850:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b006      	add	sp, #24
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20009000 	.word	0x20009000
 8003860:	00000400 	.word	0x00000400
 8003864:	20000bb8 	.word	0x20000bb8
 8003868:	20000ed0 	.word	0x20000ed0

0800386c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800387a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800387c:	f7ff fff6 	bl	800386c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <LoopForever+0xe>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <LoopForever+0x16>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038a6:	f008 fe17 	bl	800c4d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038aa:	f7fe fe7d 	bl	80025a8 <main>

080038ae <LoopForever>:

LoopForever:
  b LoopForever
 80038ae:	e7fe      	b.n	80038ae <LoopForever>
  ldr   r0, =_estack
 80038b0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 80038bc:	08014d20 	.word	0x08014d20
  ldr r2, =_sbss
 80038c0:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 80038c4:	20000ed0 	.word	0x20000ed0

080038c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_COMP_IRQHandler>
	...

080038cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_Init+0x3c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Init+0x3c>)
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	0049      	lsls	r1, r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e6:	2000      	movs	r0, #0
 80038e8:	f000 f810 	bl	800390c <HAL_InitTick>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e001      	b.n	80038fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038f8:	f7ff fcba 	bl	8003270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	781b      	ldrb	r3, [r3, #0]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40022000 	.word	0x40022000

0800390c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003914:	230f      	movs	r3, #15
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_InitTick+0x88>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_InitTick+0x8c>)
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_InitTick+0x88>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	23fa      	movs	r3, #250	; 0xfa
 8003930:	0098      	lsls	r0, r3, #2
 8003932:	f7fc fc03 	bl	800013c <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbfe 	bl	800013c <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f953 	bl	8003bee <HAL_SYSTICK_Config>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d112      	bne.n	8003972 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d80a      	bhi.n	8003968 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	2301      	movs	r3, #1
 8003956:	425b      	negs	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f91e 	bl	8003b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_InitTick+0x90>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00d      	b.n	8003984 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003972:	230f      	movs	r3, #15
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e003      	b.n	8003984 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b005      	add	sp, #20
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000028 	.word	0x20000028
 8003998:	20000020 	.word	0x20000020
 800399c:	20000024 	.word	0x20000024

080039a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x1c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	001a      	movs	r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_IncTick+0x20>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	18d2      	adds	r2, r2, r3
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_IncTick+0x20>)
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000028 	.word	0x20000028
 80039c0:	20000bbc 	.word	0x20000bbc

080039c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  return uwTick;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_GetTick+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000bbc 	.word	0x20000bbc

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	001a      	movs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	f7ff ffe0 	bl	80039c4 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000028 	.word	0x20000028

08003a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	0002      	movs	r2, r0
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b7f      	cmp	r3, #127	; 0x7f
 8003a32:	d809      	bhi.n	8003a48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	001a      	movs	r2, r3
 8003a3a:	231f      	movs	r3, #31
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <__NVIC_EnableIRQ+0x30>)
 8003a40:	2101      	movs	r1, #1
 8003a42:	4091      	lsls	r1, r2
 8003a44:	000a      	movs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b7f      	cmp	r3, #127	; 0x7f
 8003a68:	d828      	bhi.n	8003abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a6a:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <__NVIC_SetPriority+0xd4>)
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	33c0      	adds	r3, #192	; 0xc0
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	589b      	ldr	r3, [r3, r2]
 8003a7a:	1dfa      	adds	r2, r7, #7
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	2203      	movs	r2, #3
 8003a82:	400a      	ands	r2, r1
 8003a84:	00d2      	lsls	r2, r2, #3
 8003a86:	21ff      	movs	r1, #255	; 0xff
 8003a88:	4091      	lsls	r1, r2
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	43d2      	mvns	r2, r2
 8003a8e:	401a      	ands	r2, r3
 8003a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	401a      	ands	r2, r3
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	4003      	ands	r3, r0
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa8:	481f      	ldr	r0, [pc, #124]	; (8003b28 <__NVIC_SetPriority+0xd4>)
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	33c0      	adds	r3, #192	; 0xc0
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003aba:	e031      	b.n	8003b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <__NVIC_SetPriority+0xd8>)
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	3b08      	subs	r3, #8
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3306      	adds	r3, #6
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1dfa      	adds	r2, r7, #7
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	0011      	movs	r1, r2
 8003adc:	2203      	movs	r2, #3
 8003ade:	400a      	ands	r2, r1
 8003ae0:	00d2      	lsls	r2, r2, #3
 8003ae2:	21ff      	movs	r1, #255	; 0xff
 8003ae4:	4091      	lsls	r1, r2
 8003ae6:	000a      	movs	r2, r1
 8003ae8:	43d2      	mvns	r2, r2
 8003aea:	401a      	ands	r2, r3
 8003aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	22ff      	movs	r2, #255	; 0xff
 8003af4:	401a      	ands	r2, r3
 8003af6:	1dfb      	adds	r3, r7, #7
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	0018      	movs	r0, r3
 8003afc:	2303      	movs	r3, #3
 8003afe:	4003      	ands	r3, r0
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b04:	4809      	ldr	r0, [pc, #36]	; (8003b2c <__NVIC_SetPriority+0xd8>)
 8003b06:	1dfb      	adds	r3, r7, #7
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	001c      	movs	r4, r3
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	4023      	ands	r3, r4
 8003b10:	3b08      	subs	r3, #8
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	430a      	orrs	r2, r1
 8003b16:	3306      	adds	r3, #6
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	18c3      	adds	r3, r0, r3
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b003      	add	sp, #12
 8003b26:	bd90      	pop	{r4, r7, pc}
 8003b28:	e000e100 	.word	0xe000e100
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b34:	f3bf 8f4f 	dsb	sy
}
 8003b38:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <__NVIC_SystemReset+0x1c>)
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SystemReset+0x20>)
 8003b3e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b40:	f3bf 8f4f 	dsb	sy
}
 8003b44:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	e7fd      	b.n	8003b46 <__NVIC_SystemReset+0x16>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	e000ed00 	.word	0xe000ed00
 8003b50:	05fa0004 	.word	0x05fa0004

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	045b      	lsls	r3, r3, #17
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d301      	bcc.n	8003b6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e010      	b.n	8003b8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <SysTick_Config+0x44>)
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	3a01      	subs	r2, #1
 8003b72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b74:	2301      	movs	r3, #1
 8003b76:	425b      	negs	r3, r3
 8003b78:	2103      	movs	r1, #3
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff ff6a 	bl	8003a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SysTick_Config+0x44>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SysTick_Config+0x44>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff ff4b 	bl	8003a54 <__NVIC_SetPriority>
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	0002      	movs	r2, r0
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff ff21 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003bea:	f7ff ffa1 	bl	8003b30 <__NVIC_SystemReset>

08003bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff ffab 	bl	8003b54 <SysTick_Config>
 8003bfe:	0003      	movs	r3, r0
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c16:	e147      	b.n	8003ea8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4091      	lsls	r1, r2
 8003c22:	000a      	movs	r2, r1
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d100      	bne.n	8003c30 <HAL_GPIO_Init+0x28>
 8003c2e:	e138      	b.n	8003ea2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d005      	beq.n	8003c48 <HAL_GPIO_Init+0x40>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2203      	movs	r2, #3
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d130      	bne.n	8003caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	409a      	lsls	r2, r3
 8003c56:	0013      	movs	r3, r2
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7e:	2201      	movs	r2, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
 8003c84:	0013      	movs	r3, r2
 8003c86:	43da      	mvns	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	2201      	movs	r2, #1
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d017      	beq.n	8003ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2203      	movs	r2, #3
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d123      	bne.n	8003d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	08da      	lsrs	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	58d3      	ldr	r3, [r2, r3]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2207      	movs	r2, #7
 8003d04:	4013      	ands	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2107      	movs	r1, #7
 8003d1e:	400b      	ands	r3, r1
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	409a      	lsls	r2, r3
 8003d24:	0013      	movs	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	08da      	lsrs	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3208      	adds	r2, #8
 8003d34:	0092      	lsls	r2, r2, #2
 8003d36:	6939      	ldr	r1, [r7, #16]
 8003d38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2203      	movs	r2, #3
 8003d46:	409a      	lsls	r2, r3
 8003d48:	0013      	movs	r3, r2
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2203      	movs	r2, #3
 8003d58:	401a      	ands	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	0013      	movs	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	23c0      	movs	r3, #192	; 0xc0
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	4013      	ands	r3, r2
 8003d78:	d100      	bne.n	8003d7c <HAL_GPIO_Init+0x174>
 8003d7a:	e092      	b.n	8003ea2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d7c:	4a50      	ldr	r2, [pc, #320]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3318      	adds	r3, #24
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	589b      	ldr	r3, [r3, r2]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	4013      	ands	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	220f      	movs	r2, #15
 8003d94:	409a      	lsls	r2, r3
 8003d96:	0013      	movs	r3, r2
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	23a0      	movs	r3, #160	; 0xa0
 8003da4:	05db      	lsls	r3, r3, #23
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x1ca>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a45      	ldr	r2, [pc, #276]	; (8003ec4 <HAL_GPIO_Init+0x2bc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x1c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x1c2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_GPIO_Init+0x2c4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x1be>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x1cc>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e004      	b.n	8003dd4 <HAL_GPIO_Init+0x1cc>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x1cc>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x1cc>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	400a      	ands	r2, r1
 8003dda:	00d2      	lsls	r2, r2, #3
 8003ddc:	4093      	lsls	r3, r2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003de4:	4936      	ldr	r1, [pc, #216]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3318      	adds	r3, #24
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003df2:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	035b      	lsls	r3, r3, #13
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e16:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	039b      	lsls	r3, r3, #14
 8003e34:	4013      	ands	r3, r2
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e40:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e48:	2384      	movs	r3, #132	; 0x84
 8003e4a:	58d3      	ldr	r3, [r2, r3]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	029b      	lsls	r3, r3, #10
 8003e60:	4013      	ands	r3, r2
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e6c:	4914      	ldr	r1, [pc, #80]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e6e:	2284      	movs	r2, #132	; 0x84
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	58d3      	ldr	r3, [r2, r3]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e9a:	4909      	ldr	r1, [pc, #36]	; (8003ec0 <HAL_GPIO_Init+0x2b8>)
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	40da      	lsrs	r2, r3
 8003eb0:	1e13      	subs	r3, r2, #0
 8003eb2:	d000      	beq.n	8003eb6 <HAL_GPIO_Init+0x2ae>
 8003eb4:	e6b0      	b.n	8003c18 <HAL_GPIO_Init+0x10>
  }
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b006      	add	sp, #24
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021800 	.word	0x40021800
 8003ec4:	50000400 	.word	0x50000400
 8003ec8:	50000800 	.word	0x50000800
 8003ecc:	50000c00 	.word	0x50000c00

08003ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ede:	e0b4      	b.n	800404a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d100      	bne.n	8003ef4 <HAL_GPIO_DeInit+0x24>
 8003ef2:	e0a7      	b.n	8004044 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003ef4:	4a5a      	ldr	r2, [pc, #360]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3318      	adds	r3, #24
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	589b      	ldr	r3, [r3, r2]
 8003f00:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2203      	movs	r2, #3
 8003f06:	4013      	ands	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	23a0      	movs	r3, #160	; 0xa0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_DeInit+0x76>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_GPIO_DeInit+0x194>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_DeInit+0x72>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <HAL_GPIO_DeInit+0x198>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_DeInit+0x6e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4e      	ldr	r2, [pc, #312]	; (800406c <HAL_GPIO_DeInit+0x19c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_DeInit+0x6a>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e006      	b.n	8003f48 <HAL_GPIO_DeInit+0x78>
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	e004      	b.n	8003f48 <HAL_GPIO_DeInit+0x78>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e002      	b.n	8003f48 <HAL_GPIO_DeInit+0x78>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_GPIO_DeInit+0x78>
 8003f46:	2300      	movs	r3, #0
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	2103      	movs	r1, #3
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	00d2      	lsls	r2, r2, #3
 8003f50:	4093      	lsls	r3, r2
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d136      	bne.n	8003fc6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f58:	4a41      	ldr	r2, [pc, #260]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	58d3      	ldr	r3, [r2, r3]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	43d2      	mvns	r2, r2
 8003f62:	493f      	ldr	r1, [pc, #252]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f6c:	2384      	movs	r3, #132	; 0x84
 8003f6e:	58d3      	ldr	r3, [r2, r3]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	43d2      	mvns	r2, r2
 8003f74:	493a      	ldr	r1, [pc, #232]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	2284      	movs	r2, #132	; 0x84
 8003f7a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f7c:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43d9      	mvns	r1, r3
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f86:	400a      	ands	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f8a:	4b35      	ldr	r3, [pc, #212]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43d9      	mvns	r1, r3
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	0013      	movs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3318      	adds	r3, #24
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	589a      	ldr	r2, [r3, r2]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43d9      	mvns	r1, r3
 8003fb8:	4829      	ldr	r0, [pc, #164]	; (8004060 <HAL_GPIO_DeInit+0x190>)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2103      	movs	r1, #3
 8003fd0:	4099      	lsls	r1, r3
 8003fd2:	000b      	movs	r3, r1
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	08da      	lsrs	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3208      	adds	r2, #8
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	58d3      	ldr	r3, [r2, r3]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	2107      	movs	r1, #7
 8003fea:	400a      	ands	r2, r1
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	210f      	movs	r1, #15
 8003ff0:	4091      	lsls	r1, r2
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	43d1      	mvns	r1, r2
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	08d2      	lsrs	r2, r2, #3
 8003ffa:	4019      	ands	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	0092      	lsls	r2, r2, #2
 8004002:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	0052      	lsls	r2, r2, #1
 800400c:	2103      	movs	r1, #3
 800400e:	4091      	lsls	r1, r2
 8004010:	000a      	movs	r2, r1
 8004012:	43d2      	mvns	r2, r2
 8004014:	401a      	ands	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2101      	movs	r1, #1
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4091      	lsls	r1, r2
 8004024:	000a      	movs	r2, r1
 8004026:	43d2      	mvns	r2, r2
 8004028:	401a      	ands	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	0052      	lsls	r2, r2, #1
 8004036:	2103      	movs	r1, #3
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	43d2      	mvns	r2, r2
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	40da      	lsrs	r2, r3
 8004050:	1e13      	subs	r3, r2, #0
 8004052:	d000      	beq.n	8004056 <HAL_GPIO_DeInit+0x186>
 8004054:	e744      	b.n	8003ee0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b006      	add	sp, #24
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021800 	.word	0x40021800
 8004064:	50000400 	.word	0x50000400
 8004068:	50000800 	.word	0x50000800
 800406c:	50000c00 	.word	0x50000c00

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	0008      	movs	r0, r1
 800407a:	0011      	movs	r1, r2
 800407c:	1cbb      	adds	r3, r7, #2
 800407e:	1c02      	adds	r2, r0, #0
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	1c7b      	adds	r3, r7, #1
 8004084:	1c0a      	adds	r2, r1, #0
 8004086:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	1c7b      	adds	r3, r7, #1
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004090:	1cbb      	adds	r3, r7, #2
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004098:	e003      	b.n	80040a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409a:	1cbb      	adds	r3, r7, #2
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	0002      	movs	r2, r0
 80040b4:	1dbb      	adds	r3, r7, #6
 80040b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	1dba      	adds	r2, r7, #6
 80040be:	8812      	ldrh	r2, [r2, #0]
 80040c0:	4013      	ands	r3, r2
 80040c2:	d008      	beq.n	80040d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040c6:	1dba      	adds	r2, r7, #6
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040cc:	1dbb      	adds	r3, r7, #6
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff f8a7 	bl	8003224 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	1dba      	adds	r2, r7, #6
 80040dc:	8812      	ldrh	r2, [r2, #0]
 80040de:	4013      	ands	r3, r2
 80040e0:	d008      	beq.n	80040f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040e4:	1dba      	adds	r2, r7, #6
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040ea:	1dbb      	adds	r3, r7, #6
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f806 	bl	8004100 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021800 	.word	0x40021800

08004100 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	0002      	movs	r2, r0
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004122:	4013      	ands	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d11f      	bne.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	0013      	movs	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	189b      	adds	r3, r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004146:	0018      	movs	r0, r3
 8004148:	f7fb fff8 	bl	800013c <__udivsi3>
 800414c:	0003      	movs	r3, r0
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	e008      	b.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b01      	subs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e001      	b.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e009      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	401a      	ands	r2, r3
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	429a      	cmp	r2, r3
 8004176:	d0ed      	beq.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b004      	add	sp, #16
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	40007000 	.word	0x40007000
 8004188:	fffff9ff 	.word	0xfffff9ff
 800418c:	20000020 	.word	0x20000020
 8004190:	000f4240 	.word	0x000f4240

08004194 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	23e0      	movs	r3, #224	; 0xe0
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	4013      	ands	r3, r2
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e2fe      	b.n	80047bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d100      	bne.n	80041ca <HAL_RCC_OscConfig+0x1e>
 80041c8:	e07c      	b.n	80042c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ca:	4bc3      	ldr	r3, [pc, #780]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2238      	movs	r2, #56	; 0x38
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d4:	4bc0      	ldr	r3, [pc, #768]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	4013      	ands	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_OscConfig+0x3e>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4bb9      	ldr	r3, [pc, #740]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	4013      	ands	r3, r2
 80041fa:	d062      	beq.n	80042c2 <HAL_RCC_OscConfig+0x116>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d15e      	bne.n	80042c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e2d9      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	025b      	lsls	r3, r3, #9
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x78>
 8004214:	4bb0      	ldr	r3, [pc, #704]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4baf      	ldr	r3, [pc, #700]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	0249      	lsls	r1, r1, #9
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e020      	b.n	8004266 <HAL_RCC_OscConfig+0xba>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	23a0      	movs	r3, #160	; 0xa0
 800422a:	02db      	lsls	r3, r3, #11
 800422c:	429a      	cmp	r2, r3
 800422e:	d10e      	bne.n	800424e <HAL_RCC_OscConfig+0xa2>
 8004230:	4ba9      	ldr	r3, [pc, #676]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4ba8      	ldr	r3, [pc, #672]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	02c9      	lsls	r1, r1, #11
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	4ba6      	ldr	r3, [pc, #664]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4ba5      	ldr	r3, [pc, #660]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004244:	2180      	movs	r1, #128	; 0x80
 8004246:	0249      	lsls	r1, r1, #9
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0xba>
 800424e:	4ba2      	ldr	r3, [pc, #648]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4ba1      	ldr	r3, [pc, #644]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004254:	49a1      	ldr	r1, [pc, #644]	; (80044dc <HAL_RCC_OscConfig+0x330>)
 8004256:	400a      	ands	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4b9f      	ldr	r3, [pc, #636]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b9e      	ldr	r3, [pc, #632]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004260:	499f      	ldr	r1, [pc, #636]	; (80044e0 <HAL_RCC_OscConfig+0x334>)
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7ff fba9 	bl	80039c4 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7ff fba4 	bl	80039c4 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e298      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	4b93      	ldr	r3, [pc, #588]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	029b      	lsls	r3, r3, #10
 8004292:	4013      	ands	r3, r2
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xcc>
 8004296:	e015      	b.n	80042c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7ff fb94 	bl	80039c4 <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a2:	f7ff fb8f 	bl	80039c4 <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b64      	cmp	r3, #100	; 0x64
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e283      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b4:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	4013      	ands	r3, r2
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0xf6>
 80042c0:	e000      	b.n	80042c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2202      	movs	r2, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d100      	bne.n	80042d0 <HAL_RCC_OscConfig+0x124>
 80042ce:	e099      	b.n	8004404 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d0:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2238      	movs	r2, #56	; 0x38
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042da:	4b7f      	ldr	r3, [pc, #508]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2203      	movs	r2, #3
 80042e0:	4013      	ands	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d102      	bne.n	80042f0 <HAL_RCC_OscConfig+0x144>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d002      	beq.n	80042f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d135      	bne.n	8004362 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f6:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4013      	ands	r3, r2
 8004300:	d005      	beq.n	800430e <HAL_RCC_OscConfig+0x162>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e256      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a74      	ldr	r2, [pc, #464]	; (80044e4 <HAL_RCC_OscConfig+0x338>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	021a      	lsls	r2, r3, #8
 800431e:	4b6e      	ldr	r3, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d112      	bne.n	8004350 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800432a:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_RCC_OscConfig+0x33c>)
 8004330:	4013      	ands	r3, r2
 8004332:	0019      	movs	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	4b67      	ldr	r3, [pc, #412]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800433e:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	2207      	movs	r2, #7
 8004346:	4013      	ands	r3, r2
 8004348:	4a68      	ldr	r2, [pc, #416]	; (80044ec <HAL_RCC_OscConfig+0x340>)
 800434a:	40da      	lsrs	r2, r3
 800434c:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x344>)
 800434e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x348>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0018      	movs	r0, r3
 8004356:	f7ff fad9 	bl	800390c <HAL_InitTick>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d051      	beq.n	8004402 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e22c      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d030      	beq.n	80043cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800436a:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a5e      	ldr	r2, [pc, #376]	; (80044e8 <HAL_RCC_OscConfig+0x33c>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	4b57      	ldr	r3, [pc, #348]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800437e:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	0049      	lsls	r1, r1, #1
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7ff fb1a 	bl	80039c4 <HAL_GetTick>
 8004390:	0003      	movs	r3, r0
 8004392:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7ff fb15 	bl	80039c4 <HAL_GetTick>
 800439a:	0002      	movs	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e209      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4013      	ands	r3, r2
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a4a      	ldr	r2, [pc, #296]	; (80044e4 <HAL_RCC_OscConfig+0x338>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	4b44      	ldr	r3, [pc, #272]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	e01b      	b.n	8004404 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043d2:	4949      	ldr	r1, [pc, #292]	; (80044f8 <HAL_RCC_OscConfig+0x34c>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7ff faf4 	bl	80039c4 <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e2:	f7ff faef 	bl	80039c4 <HAL_GetTick>
 80043e6:	0002      	movs	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1e3      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f4:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4013      	ands	r3, r2
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x236>
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004402:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	4013      	ands	r3, r2
 800440c:	d047      	beq.n	800449e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2238      	movs	r2, #56	; 0x38
 8004414:	4013      	ands	r3, r2
 8004416:	2b18      	cmp	r3, #24
 8004418:	d10a      	bne.n	8004430 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	2202      	movs	r2, #2
 8004420:	4013      	ands	r3, r2
 8004422:	d03c      	beq.n	800449e <HAL_RCC_OscConfig+0x2f2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d138      	bne.n	800449e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e1c5      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d019      	beq.n	800446c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800443a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800443e:	2101      	movs	r1, #1
 8004440:	430a      	orrs	r2, r1
 8004442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7ff fabe 	bl	80039c4 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444e:	f7ff fab9 	bl	80039c4 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1ad      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	2202      	movs	r2, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d0f1      	beq.n	800444e <HAL_RCC_OscConfig+0x2a2>
 800446a:	e018      	b.n	800449e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 800446e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004472:	2101      	movs	r1, #1
 8004474:	438a      	bics	r2, r1
 8004476:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7ff faa4 	bl	80039c4 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7ff fa9f 	bl	80039c4 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e193      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 8004496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d1f1      	bne.n	8004482 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2204      	movs	r2, #4
 80044a4:	4013      	ands	r3, r2
 80044a6:	d100      	bne.n	80044aa <HAL_RCC_OscConfig+0x2fe>
 80044a8:	e0c6      	b.n	8004638 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	231f      	movs	r3, #31
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2238      	movs	r2, #56	; 0x38
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d11e      	bne.n	80044fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_OscConfig+0x32c>)
 80044c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d100      	bne.n	80044ca <HAL_RCC_OscConfig+0x31e>
 80044c8:	e0b6      	b.n	8004638 <HAL_RCC_OscConfig+0x48c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d000      	beq.n	80044d4 <HAL_RCC_OscConfig+0x328>
 80044d2:	e0b1      	b.n	8004638 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e171      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	fffeffff 	.word	0xfffeffff
 80044e0:	fffbffff 	.word	0xfffbffff
 80044e4:	ffff80ff 	.word	0xffff80ff
 80044e8:	ffffc7ff 	.word	0xffffc7ff
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	20000020 	.word	0x20000020
 80044f4:	20000024 	.word	0x20000024
 80044f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044fc:	4bb1      	ldr	r3, [pc, #708]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80044fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	055b      	lsls	r3, r3, #21
 8004504:	4013      	ands	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_RCC_OscConfig+0x360>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x362>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d011      	beq.n	8004536 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	4bac      	ldr	r3, [pc, #688]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004516:	4bab      	ldr	r3, [pc, #684]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	0549      	lsls	r1, r1, #21
 800451c:	430a      	orrs	r2, r1
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004520:	4ba8      	ldr	r3, [pc, #672]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	055b      	lsls	r3, r3, #21
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800452e:	231f      	movs	r3, #31
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004536:	4ba4      	ldr	r3, [pc, #656]	; (80047c8 <HAL_RCC_OscConfig+0x61c>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4013      	ands	r3, r2
 8004540:	d11a      	bne.n	8004578 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004542:	4ba1      	ldr	r3, [pc, #644]	; (80047c8 <HAL_RCC_OscConfig+0x61c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4ba0      	ldr	r3, [pc, #640]	; (80047c8 <HAL_RCC_OscConfig+0x61c>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0049      	lsls	r1, r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004550:	f7ff fa38 	bl	80039c4 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7ff fa33 	bl	80039c4 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e127      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456c:	4b96      	ldr	r3, [pc, #600]	; (80047c8 <HAL_RCC_OscConfig+0x61c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x3e2>
 8004580:	4b90      	ldr	r3, [pc, #576]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004584:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004586:	2101      	movs	r1, #1
 8004588:	430a      	orrs	r2, r1
 800458a:	65da      	str	r2, [r3, #92]	; 0x5c
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x41c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x404>
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800459a:	4b8a      	ldr	r3, [pc, #552]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800459c:	2104      	movs	r1, #4
 800459e:	430a      	orrs	r2, r1
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80045a2:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045a6:	4b87      	ldr	r3, [pc, #540]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x41c>
 80045b0:	4b84      	ldr	r3, [pc, #528]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b4:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045b6:	2101      	movs	r1, #1
 80045b8:	438a      	bics	r2, r1
 80045ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80045bc:	4b81      	ldr	r3, [pc, #516]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045c0:	4b80      	ldr	r3, [pc, #512]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045c2:	2104      	movs	r1, #4
 80045c4:	438a      	bics	r2, r1
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d014      	beq.n	80045fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7ff f9f8 	bl	80039c4 <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d8:	e009      	b.n	80045ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7ff f9f3 	bl	80039c4 <HAL_GetTick>
 80045de:	0002      	movs	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	4a79      	ldr	r2, [pc, #484]	; (80047cc <HAL_RCC_OscConfig+0x620>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0e6      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2202      	movs	r2, #2
 80045f4:	4013      	ands	r3, r2
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x42e>
 80045f8:	e013      	b.n	8004622 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7ff f9e3 	bl	80039c4 <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004602:	e009      	b.n	8004618 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7ff f9de 	bl	80039c4 <HAL_GetTick>
 8004608:	0002      	movs	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	4a6f      	ldr	r2, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x620>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0d1      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004618:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2202      	movs	r2, #2
 800461e:	4013      	ands	r3, r2
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004622:	231f      	movs	r3, #31
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800462c:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800462e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004630:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004632:	4967      	ldr	r1, [pc, #412]	; (80047d0 <HAL_RCC_OscConfig+0x624>)
 8004634:	400a      	ands	r2, r1
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d100      	bne.n	8004642 <HAL_RCC_OscConfig+0x496>
 8004640:	e0bb      	b.n	80047ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004642:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2238      	movs	r2, #56	; 0x38
 8004648:	4013      	ands	r3, r2
 800464a:	2b10      	cmp	r3, #16
 800464c:	d100      	bne.n	8004650 <HAL_RCC_OscConfig+0x4a4>
 800464e:	e07b      	b.n	8004748 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d156      	bne.n	8004706 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800465e:	495d      	ldr	r1, [pc, #372]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 8004660:	400a      	ands	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7ff f9ae 	bl	80039c4 <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7ff f9a9 	bl	80039c4 <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e09d      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	049b      	lsls	r3, r3, #18
 8004688:	4013      	ands	r3, r2
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468c:	4b4d      	ldr	r3, [pc, #308]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_RCC_OscConfig+0x62c>)
 8004692:	4013      	ands	r3, r2
 8004694:	0019      	movs	r1, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	431a      	orrs	r2, r3
 80046ba:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046bc:	430a      	orrs	r2, r1
 80046be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	0449      	lsls	r1, r1, #17
 80046ca:	430a      	orrs	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046ce:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	0549      	lsls	r1, r1, #21
 80046d8:	430a      	orrs	r2, r1
 80046da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7ff f972 	bl	80039c4 <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7ff f96d 	bl	80039c4 <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e061      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f8:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	049b      	lsls	r3, r3, #18
 8004700:	4013      	ands	r3, r2
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x53a>
 8004704:	e059      	b.n	80047ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800470c:	4931      	ldr	r1, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800470e:	400a      	ands	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7ff f957 	bl	80039c4 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7ff f952 	bl	80039c4 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e046      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	049b      	lsls	r3, r3, #18
 8004736:	4013      	ands	r3, r2
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004740:	4926      	ldr	r1, [pc, #152]	; (80047dc <HAL_RCC_OscConfig+0x630>)
 8004742:	400a      	ands	r2, r1
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	e038      	b.n	80047ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e033      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2203      	movs	r2, #3
 800475e:	401a      	ands	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	429a      	cmp	r2, r3
 8004766:	d126      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2270      	movs	r2, #112	; 0x70
 800476c:	401a      	ands	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d11f      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	23fe      	movs	r3, #254	; 0xfe
 800477a:	01db      	lsls	r3, r3, #7
 800477c:	401a      	ands	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d116      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	23f8      	movs	r3, #248	; 0xf8
 800478c:	039b      	lsls	r3, r3, #14
 800478e:	401a      	ands	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d10e      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	23e0      	movs	r3, #224	; 0xe0
 800479c:	051b      	lsls	r3, r3, #20
 800479e:	401a      	ands	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	0f5b      	lsrs	r3, r3, #29
 80047ac:	075a      	lsls	r2, r3, #29
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b008      	add	sp, #32
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	00001388 	.word	0x00001388
 80047d0:	efffffff 	.word	0xefffffff
 80047d4:	feffffff 	.word	0xfeffffff
 80047d8:	11c1808c 	.word	0x11c1808c
 80047dc:	eefefffc 	.word	0xeefefffc

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0e9      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2207      	movs	r2, #7
 80047fa:	4013      	ands	r3, r2
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d91e      	bls.n	8004840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b73      	ldr	r3, [pc, #460]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2207      	movs	r2, #7
 8004808:	4393      	bics	r3, r2
 800480a:	0019      	movs	r1, r3
 800480c:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004814:	f7ff f8d6 	bl	80039c4 <HAL_GetTick>
 8004818:	0003      	movs	r3, r0
 800481a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800481c:	e009      	b.n	8004832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7ff f8d1 	bl	80039c4 <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a6a      	ldr	r2, [pc, #424]	; (80049d4 <HAL_RCC_ClockConfig+0x1f4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0ca      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004832:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2207      	movs	r2, #7
 8004838:	4013      	ands	r3, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d1ee      	bne.n	800481e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2202      	movs	r2, #2
 8004846:	4013      	ands	r3, r2
 8004848:	d015      	beq.n	8004876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2204      	movs	r2, #4
 8004850:	4013      	ands	r3, r2
 8004852:	d006      	beq.n	8004862 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004854:	4b60      	ldr	r3, [pc, #384]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	4b5f      	ldr	r3, [pc, #380]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 800485a:	21e0      	movs	r1, #224	; 0xe0
 800485c:	01c9      	lsls	r1, r1, #7
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004862:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	4a5d      	ldr	r2, [pc, #372]	; (80049dc <HAL_RCC_ClockConfig+0x1fc>)
 8004868:	4013      	ands	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d057      	beq.n	8004930 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	4013      	ands	r3, r2
 8004892:	d12b      	bne.n	80048ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e097      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a0:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	049b      	lsls	r3, r3, #18
 80048a8:	4013      	ands	r3, r2
 80048aa:	d11f      	bne.n	80048ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e08b      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b8:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4013      	ands	r3, r2
 80048c2:	d113      	bne.n	80048ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e07f      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d106      	bne.n	80048de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d108      	bne.n	80048ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e074      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	2202      	movs	r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e06d      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ec:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2207      	movs	r2, #7
 80048f2:	4393      	bics	r3, r2
 80048f4:	0019      	movs	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004900:	f7ff f860 	bl	80039c4 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004908:	e009      	b.n	800491e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490a:	f7ff f85b 	bl	80039c4 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e054      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2238      	movs	r2, #56	; 0x38
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	429a      	cmp	r2, r3
 800492e:	d1ec      	bne.n	800490a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2207      	movs	r2, #7
 8004936:	4013      	ands	r3, r2
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d21e      	bcs.n	800497c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2207      	movs	r2, #7
 8004944:	4393      	bics	r3, r2
 8004946:	0019      	movs	r1, r3
 8004948:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004950:	f7ff f838 	bl	80039c4 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004958:	e009      	b.n	800496e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495a:	f7ff f833 	bl	80039c4 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e02c      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800496e:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2207      	movs	r2, #7
 8004974:	4013      	ands	r3, r2
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d1ee      	bne.n	800495a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2204      	movs	r2, #4
 8004982:	4013      	ands	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <HAL_RCC_ClockConfig+0x200>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800499a:	f000 f829 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 800499e:	0001      	movs	r1, r0
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	220f      	movs	r2, #15
 80049a8:	401a      	ands	r2, r3
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_RCC_ClockConfig+0x204>)
 80049ac:	0092      	lsls	r2, r2, #2
 80049ae:	58d3      	ldr	r3, [r2, r3]
 80049b0:	221f      	movs	r2, #31
 80049b2:	4013      	ands	r3, r2
 80049b4:	000a      	movs	r2, r1
 80049b6:	40da      	lsrs	r2, r3
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_ClockConfig+0x208>)
 80049ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_ClockConfig+0x20c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fe ffa3 	bl	800390c <HAL_InitTick>
 80049c6:	0003      	movs	r3, r0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40022000 	.word	0x40022000
 80049d4:	00001388 	.word	0x00001388
 80049d8:	40021000 	.word	0x40021000
 80049dc:	fffff0ff 	.word	0xfffff0ff
 80049e0:	ffff8fff 	.word	0xffff8fff
 80049e4:	080147fc 	.word	0x080147fc
 80049e8:	20000020 	.word	0x20000020
 80049ec:	20000024 	.word	0x20000024

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f6:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2238      	movs	r2, #56	; 0x38
 80049fc:	4013      	ands	r3, r2
 80049fe:	d10f      	bne.n	8004a20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0adb      	lsrs	r3, r3, #11
 8004a06:	2207      	movs	r2, #7
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	0013      	movs	r3, r2
 8004a10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	4835      	ldr	r0, [pc, #212]	; (8004aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a16:	f7fb fb91 	bl	800013c <__udivsi3>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e05d      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a20:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2238      	movs	r2, #56	; 0x38
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d102      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a2c:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e054      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2238      	movs	r2, #56	; 0x38
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d138      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2203      	movs	r2, #3
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	3301      	adds	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	4824      	ldr	r0, [pc, #144]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a60:	f7fb fb6c 	bl	800013c <__udivsi3>
 8004a64:	0003      	movs	r3, r0
 8004a66:	0019      	movs	r1, r3
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	227f      	movs	r2, #127	; 0x7f
 8004a70:	4013      	ands	r3, r2
 8004a72:	434b      	muls	r3, r1
 8004a74:	617b      	str	r3, [r7, #20]
        break;
 8004a76:	e00d      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	481c      	ldr	r0, [pc, #112]	; (8004aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a7c:	f7fb fb5e 	bl	800013c <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	0019      	movs	r1, r3
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	227f      	movs	r2, #127	; 0x7f
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	434b      	muls	r3, r1
 8004a90:	617b      	str	r3, [r7, #20]
        break;
 8004a92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0f5b      	lsrs	r3, r3, #29
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	f7fb fb49 	bl	800013c <__udivsi3>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e015      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2238      	movs	r2, #56	; 0x38
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d103      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2238      	movs	r2, #56	; 0x38
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b18      	cmp	r3, #24
 8004ace:	d103      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ad0:	23fa      	movs	r3, #250	; 0xfa
 8004ad2:	01db      	lsls	r3, r3, #7
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e001      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004adc:	693b      	ldr	r3, [r7, #16]
}
 8004ade:	0018      	movs	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b006      	add	sp, #24
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	007a1200 	.word	0x007a1200

08004af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20000020 	.word	0x20000020

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b0c:	f7ff fff2 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b10:	0004      	movs	r4, r0
 8004b12:	f7ff fb3f 	bl	8004194 <LL_RCC_GetAPB1Prescaler>
 8004b16:	0003      	movs	r3, r0
 8004b18:	0b1a      	lsrs	r2, r3, #12
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b1c:	0092      	lsls	r2, r2, #2
 8004b1e:	58d3      	ldr	r3, [r2, r3]
 8004b20:	221f      	movs	r2, #31
 8004b22:	4013      	ands	r3, r2
 8004b24:	40dc      	lsrs	r4, r3
 8004b26:	0023      	movs	r3, r4
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	0801483c 	.word	0x0801483c

08004b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b3c:	2313      	movs	r3, #19
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b44:	2312      	movs	r3, #18
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	4013      	ands	r3, r2
 8004b56:	d100      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b58:	e0a3      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5a:	2011      	movs	r0, #17
 8004b5c:	183b      	adds	r3, r7, r0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b62:	4bc3      	ldr	r3, [pc, #780]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	055b      	lsls	r3, r3, #21
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d110      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	4bc0      	ldr	r3, [pc, #768]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b72:	4bbf      	ldr	r3, [pc, #764]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b74:	2180      	movs	r1, #128	; 0x80
 8004b76:	0549      	lsls	r1, r1, #21
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b7c:	4bbc      	ldr	r3, [pc, #752]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	055b      	lsls	r3, r3, #21
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b90:	4bb8      	ldr	r3, [pc, #736]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4bb7      	ldr	r3, [pc, #732]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	0049      	lsls	r1, r1, #1
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b9e:	f7fe ff11 	bl	80039c4 <HAL_GetTick>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba8:	f7fe ff0c 	bl	80039c4 <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d904      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004bb6:	2313      	movs	r3, #19
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2203      	movs	r2, #3
 8004bbc:	701a      	strb	r2, [r3, #0]
        break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bc0:	4bac      	ldr	r3, [pc, #688]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d0ed      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004bcc:	2313      	movs	r3, #19
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d154      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bd6:	4ba6      	ldr	r3, [pc, #664]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bda:	23c0      	movs	r3, #192	; 0xc0
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4013      	ands	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d019      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d014      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	4aa0      	ldr	r2, [pc, #640]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfc:	4b9c      	ldr	r3, [pc, #624]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c00:	4b9b      	ldr	r3, [pc, #620]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0249      	lsls	r1, r1, #9
 8004c06:	430a      	orrs	r2, r1
 8004c08:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0a:	4b99      	ldr	r3, [pc, #612]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c0e:	4b98      	ldr	r3, [pc, #608]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c10:	499a      	ldr	r1, [pc, #616]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c16:	4b96      	ldr	r3, [pc, #600]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4013      	ands	r3, r2
 8004c22:	d016      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fe fece 	bl	80039c4 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2c:	e00c      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2e:	f7fe fec9 	bl	80039c4 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	4a91      	ldr	r2, [pc, #580]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d904      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c3e:	2313      	movs	r3, #19
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	2203      	movs	r2, #3
 8004c44:	701a      	strb	r2, [r3, #0]
            break;
 8004c46:	e004      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c48:	4b89      	ldr	r3, [pc, #548]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d0ed      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c52:	2313      	movs	r3, #19
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c5c:	4b84      	ldr	r3, [pc, #528]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	4a85      	ldr	r2, [pc, #532]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6a:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c70:	e00c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c72:	2312      	movs	r3, #18
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	2213      	movs	r2, #19
 8004c78:	18ba      	adds	r2, r7, r2
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e005      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	2312      	movs	r3, #18
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2213      	movs	r2, #19
 8004c86:	18ba      	adds	r2, r7, r2
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c8c:	2311      	movs	r3, #17
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9a:	4b75      	ldr	r3, [pc, #468]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c9c:	4979      	ldr	r1, [pc, #484]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cac:	4b70      	ldr	r3, [pc, #448]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cca:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	220c      	movs	r2, #12
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b65      	ldr	r3, [pc, #404]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce8:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	4a66      	ldr	r2, [pc, #408]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4013      	ands	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d08:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	4a5f      	ldr	r2, [pc, #380]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4013      	ands	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d28:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2c:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	4b4e      	ldr	r3, [pc, #312]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2220      	movs	r2, #32
 8004d42:	4013      	ands	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d46:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	4a52      	ldr	r2, [pc, #328]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	01db      	lsls	r3, r3, #7
 8004d62:	4013      	ands	r3, r2
 8004d64:	d015      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d66:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	0899      	lsrs	r1, r3, #2
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	05db      	lsls	r3, r3, #23
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d106      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d84:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	0249      	lsls	r1, r1, #9
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	031b      	lsls	r3, r3, #12
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	4393      	bics	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dac:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dae:	430a      	orrs	r2, r1
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	039b      	lsls	r3, r3, #14
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d016      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dbe:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	4a35      	ldr	r2, [pc, #212]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	03db      	lsls	r3, r3, #15
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d106      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0449      	lsls	r1, r1, #17
 8004de8:	430a      	orrs	r2, r1
 8004dea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	03db      	lsls	r3, r3, #15
 8004df4:	4013      	ands	r3, r2
 8004df6:	d016      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	045b      	lsls	r3, r3, #17
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d106      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	0449      	lsls	r1, r1, #17
 8004e22:	430a      	orrs	r2, r1
 8004e24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d016      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e42:	430a      	orrs	r2, r1
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	01db      	lsls	r3, r3, #7
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d106      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	0249      	lsls	r1, r1, #9
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004e60:	2312      	movs	r3, #18
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b006      	add	sp, #24
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
 8004e78:	fffffcff 	.word	0xfffffcff
 8004e7c:	fffeffff 	.word	0xfffeffff
 8004e80:	00001388 	.word	0x00001388
 8004e84:	efffffff 	.word	0xefffffff
 8004e88:	fffff3ff 	.word	0xfffff3ff
 8004e8c:	fff3ffff 	.word	0xfff3ffff
 8004e90:	ffcfffff 	.word	0xffcfffff
 8004e94:	ffffcfff 	.word	0xffffcfff
 8004e98:	ffbfffff 	.word	0xffbfffff
 8004e9c:	feffffff 	.word	0xfeffffff
 8004ea0:	ffff3fff 	.word	0xffff3fff

08004ea4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004eac:	230f      	movs	r3, #15
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d100      	bne.n	8004ebc <HAL_RTC_Init+0x18>
 8004eba:	e08c      	b.n	8004fd6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2229      	movs	r2, #41	; 0x29
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2228      	movs	r2, #40	; 0x28
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2288      	movs	r2, #136	; 0x88
 8004ed4:	0212      	lsls	r2, r2, #8
 8004ed6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f7fe f9ec 	bl	80032b8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2229      	movs	r2, #41	; 0x29
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2210      	movs	r2, #16
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d062      	beq.n	8004fbc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	22ca      	movs	r2, #202	; 0xca
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2253      	movs	r2, #83	; 0x53
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fb9c 	bl	800564a <RTC_EnterInitMode>
 8004f12:	0003      	movs	r3, r0
 8004f14:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004f16:	0028      	movs	r0, r5
 8004f18:	183b      	adds	r3, r7, r0
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d12c      	bne.n	8004f7a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	492e      	ldr	r1, [pc, #184]	; (8004fe4 <HAL_RTC_Init+0x140>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6912      	ldr	r2, [r2, #16]
 8004f56:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6919      	ldr	r1, [r3, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	041a      	lsls	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004f6c:	183c      	adds	r4, r7, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fbad 	bl	80056d0 <RTC_ExitInitMode>
 8004f76:	0003      	movs	r3, r0
 8004f78:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004f7a:	230f      	movs	r3, #15
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d116      	bne.n	8004fb2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	00d2      	lsls	r2, r2, #3
 8004f90:	08d2      	lsrs	r2, r2, #3
 8004f92:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	22ff      	movs	r2, #255	; 0xff
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fba:	e003      	b.n	8004fc4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004fbc:	230f      	movs	r3, #15
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004fc4:	230f      	movs	r3, #15
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2229      	movs	r2, #41	; 0x29
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	781b      	ldrb	r3, [r3, #0]
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b004      	add	sp, #16
 8004fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe4:	fb8fffbf 	.word	0xfb8fffbf

08004fe8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fe8:	b5b0      	push	{r4, r5, r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2228      	movs	r2, #40	; 0x28
 8004ff8:	5c9b      	ldrb	r3, [r3, r2]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_RTC_SetTime+0x1a>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e092      	b.n	8005128 <HAL_RTC_SetTime+0x140>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2228      	movs	r2, #40	; 0x28
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2229      	movs	r2, #41	; 0x29
 800500e:	2102      	movs	r1, #2
 8005010:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22ca      	movs	r2, #202	; 0xca
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2253      	movs	r2, #83	; 0x53
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005022:	2513      	movs	r5, #19
 8005024:	197c      	adds	r4, r7, r5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0018      	movs	r0, r3
 800502a:	f000 fb0e 	bl	800564a <RTC_EnterInitMode>
 800502e:	0003      	movs	r3, r0
 8005030:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005032:	197b      	adds	r3, r7, r5
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d162      	bne.n	8005100 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d125      	bne.n	800508c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2240      	movs	r2, #64	; 0x40
 8005048:	4013      	ands	r3, r2
 800504a:	d102      	bne.n	8005052 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fb7e 	bl	8005758 <RTC_ByteToBcd2>
 800505c:	0003      	movs	r3, r0
 800505e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 fb77 	bl	8005758 <RTC_ByteToBcd2>
 800506a:	0003      	movs	r3, r0
 800506c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800506e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	789b      	ldrb	r3, [r3, #2]
 8005074:	0018      	movs	r0, r3
 8005076:	f000 fb6f 	bl	8005758 <RTC_ByteToBcd2>
 800507a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800507c:	0022      	movs	r2, r4
 800507e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	78db      	ldrb	r3, [r3, #3]
 8005084:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e017      	b.n	80050bc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	4013      	ands	r3, r2
 8005096:	d102      	bne.n	800509e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	78db      	ldrb	r3, [r3, #3]
 80050b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	491b      	ldr	r1, [pc, #108]	; (8005130 <HAL_RTC_SetTime+0x148>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4918      	ldr	r1, [pc, #96]	; (8005134 <HAL_RTC_SetTime+0x14c>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050f0:	2313      	movs	r3, #19
 80050f2:	18fc      	adds	r4, r7, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 faea 	bl	80056d0 <RTC_ExitInitMode>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005108:	2313      	movs	r3, #19
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2229      	movs	r2, #41	; 0x29
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2228      	movs	r2, #40	; 0x28
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

  return status;
 8005122:	2313      	movs	r3, #19
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	781b      	ldrb	r3, [r3, #0]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bdb0      	pop	{r4, r5, r7, pc}
 8005130:	007f7f7f 	.word	0x007f7f7f
 8005134:	fffbffff 	.word	0xfffbffff

08005138 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	045b      	lsls	r3, r3, #17
 8005156:	0c5a      	lsrs	r2, r3, #17
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_RTC_GetTime+0xb4>)
 8005164:	4013      	ands	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	b2db      	uxtb	r3, r3
 800516e:	223f      	movs	r2, #63	; 0x3f
 8005170:	4013      	ands	r3, r2
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b2db      	uxtb	r3, r3
 800517e:	227f      	movs	r2, #127	; 0x7f
 8005180:	4013      	ands	r3, r2
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	227f      	movs	r2, #127	; 0x7f
 800518e:	4013      	ands	r3, r2
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	0d9b      	lsrs	r3, r3, #22
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2201      	movs	r2, #1
 800519e:	4013      	ands	r3, r2
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11a      	bne.n	80051e2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 faf9 	bl	80057a8 <RTC_Bcd2ToByte>
 80051b6:	0003      	movs	r3, r0
 80051b8:	001a      	movs	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 faf0 	bl	80057a8 <RTC_Bcd2ToByte>
 80051c8:	0003      	movs	r3, r0
 80051ca:	001a      	movs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 fae7 	bl	80057a8 <RTC_Bcd2ToByte>
 80051da:	0003      	movs	r3, r0
 80051dc:	001a      	movs	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b006      	add	sp, #24
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	007f7f7f 	.word	0x007f7f7f

080051f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2228      	movs	r2, #40	; 0x28
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_RTC_SetDate+0x1a>
 8005206:	2302      	movs	r3, #2
 8005208:	e07e      	b.n	8005308 <HAL_RTC_SetDate+0x118>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2228      	movs	r2, #40	; 0x28
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2229      	movs	r2, #41	; 0x29
 8005216:	2102      	movs	r1, #2
 8005218:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10e      	bne.n	800523e <HAL_RTC_SetDate+0x4e>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	001a      	movs	r2, r3
 8005226:	2310      	movs	r3, #16
 8005228:	4013      	ands	r3, r2
 800522a:	d008      	beq.n	800523e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2210      	movs	r2, #16
 8005232:	4393      	bics	r3, r2
 8005234:	b2db      	uxtb	r3, r3
 8005236:	330a      	adds	r3, #10
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11c      	bne.n	800527e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	0018      	movs	r0, r3
 800524a:	f000 fa85 	bl	8005758 <RTC_ByteToBcd2>
 800524e:	0003      	movs	r3, r0
 8005250:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	785b      	ldrb	r3, [r3, #1]
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fa7e 	bl	8005758 <RTC_ByteToBcd2>
 800525c:	0003      	movs	r3, r0
 800525e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005260:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	789b      	ldrb	r3, [r3, #2]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fa76 	bl	8005758 <RTC_ByteToBcd2>
 800526c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800526e:	0022      	movs	r2, r4
 8005270:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e00e      	b.n	800529c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800528a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005290:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	22ca      	movs	r2, #202	; 0xca
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2253      	movs	r2, #83	; 0x53
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052ac:	2513      	movs	r5, #19
 80052ae:	197c      	adds	r4, r7, r5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 f9c9 	bl	800564a <RTC_EnterInitMode>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80052bc:	0028      	movs	r0, r5
 80052be:	183b      	adds	r3, r7, r0
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4910      	ldr	r1, [pc, #64]	; (8005310 <HAL_RTC_SetDate+0x120>)
 80052ce:	400a      	ands	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052d2:	183c      	adds	r4, r7, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	0018      	movs	r0, r3
 80052d8:	f000 f9fa 	bl	80056d0 <RTC_ExitInitMode>
 80052dc:	0003      	movs	r3, r0
 80052de:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	22ff      	movs	r2, #255	; 0xff
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80052e8:	2313      	movs	r3, #19
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2229      	movs	r2, #41	; 0x29
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2228      	movs	r2, #40	; 0x28
 80052fe:	2100      	movs	r1, #0
 8005300:	5499      	strb	r1, [r3, r2]

  return status;
 8005302:	2313      	movs	r3, #19
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	781b      	ldrb	r3, [r3, #0]
}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b006      	add	sp, #24
 800530e:	bdb0      	pop	{r4, r5, r7, pc}
 8005310:	00ffff3f 	.word	0x00ffff3f

08005314 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4a21      	ldr	r2, [pc, #132]	; (80053ac <HAL_RTC_GetDate+0x98>)
 8005328:	4013      	ands	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	b2db      	uxtb	r3, r3
 800533c:	221f      	movs	r2, #31
 800533e:	4013      	ands	r3, r2
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	223f      	movs	r2, #63	; 0x3f
 800534c:	4013      	ands	r3, r2
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	0b5b      	lsrs	r3, r3, #13
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2207      	movs	r2, #7
 800535c:	4013      	ands	r3, r2
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11a      	bne.n	80053a0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	78db      	ldrb	r3, [r3, #3]
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fa1a 	bl	80057a8 <RTC_Bcd2ToByte>
 8005374:	0003      	movs	r3, r0
 8005376:	001a      	movs	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 fa11 	bl	80057a8 <RTC_Bcd2ToByte>
 8005386:	0003      	movs	r3, r0
 8005388:	001a      	movs	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	789b      	ldrb	r3, [r3, #2]
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fa08 	bl	80057a8 <RTC_Bcd2ToByte>
 8005398:	0003      	movs	r3, r0
 800539a:	001a      	movs	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b006      	add	sp, #24
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	00ffff3f 	.word	0x00ffff3f

080053b0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2228      	movs	r2, #40	; 0x28
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_RTC_SetAlarm+0x1a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e10c      	b.n	80055e4 <HAL_RTC_SetAlarm+0x234>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2228      	movs	r2, #40	; 0x28
 80053ce:	2101      	movs	r1, #1
 80053d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2229      	movs	r2, #41	; 0x29
 80053d6:	2102      	movs	r1, #2
 80053d8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d136      	bne.n	800544e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2240      	movs	r2, #64	; 0x40
 80053e8:	4013      	ands	r3, r2
 80053ea:	d102      	bne.n	80053f2 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 f9ae 	bl	8005758 <RTC_ByteToBcd2>
 80053fc:	0003      	movs	r3, r0
 80053fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	0018      	movs	r0, r3
 8005406:	f000 f9a7 	bl	8005758 <RTC_ByteToBcd2>
 800540a:	0003      	movs	r3, r0
 800540c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800540e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	789b      	ldrb	r3, [r3, #2]
 8005414:	0018      	movs	r0, r3
 8005416:	f000 f99f 	bl	8005758 <RTC_ByteToBcd2>
 800541a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800541c:	0022      	movs	r2, r4
 800541e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005426:	431a      	orrs	r2, r3
 8005428:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2220      	movs	r2, #32
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 f991 	bl	8005758 <RTC_ByteToBcd2>
 8005436:	0003      	movs	r3, r0
 8005438:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800543a:	0022      	movs	r2, r4
 800543c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005442:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005448:	4313      	orrs	r3, r2
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e022      	b.n	8005494 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2240      	movs	r2, #64	; 0x40
 8005456:	4013      	ands	r3, r2
 8005458:	d102      	bne.n	8005460 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800546c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005472:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800547a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2120      	movs	r1, #32
 8005480:	5c5b      	ldrb	r3, [r3, r1]
 8005482:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005484:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800548a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005490:	4313      	orrs	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	22ca      	movs	r2, #202	; 0xca
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2253      	movs	r2, #83	; 0x53
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d143      	bne.n	8005544 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4949      	ldr	r1, [pc, #292]	; (80055ec <HAL_RTC_SetAlarm+0x23c>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4946      	ldr	r1, [pc, #280]	; (80055f0 <HAL_RTC_SetAlarm+0x240>)
 80054d8:	400a      	ands	r2, r1
 80054da:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80054dc:	f7fe fa72 	bl	80039c4 <HAL_GetTick>
 80054e0:	0003      	movs	r3, r0
 80054e2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80054e4:	e016      	b.n	8005514 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054e6:	f7fe fa6d 	bl	80039c4 <HAL_GetTick>
 80054ea:	0002      	movs	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	23fa      	movs	r3, #250	; 0xfa
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d90d      	bls.n	8005514 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	22ff      	movs	r2, #255	; 0xff
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2229      	movs	r2, #41	; 0x29
 8005504:	2103      	movs	r1, #3
 8005506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2228      	movs	r2, #40	; 0x28
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e067      	b.n	80055e4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	4013      	ands	r3, r2
 800551e:	d0e2      	beq.n	80054e6 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0049      	lsls	r1, r1, #1
 800553e:	430a      	orrs	r2, r1
 8005540:	619a      	str	r2, [r3, #24]
 8005542:	e042      	b.n	80055ca <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4929      	ldr	r1, [pc, #164]	; (80055f4 <HAL_RTC_SetAlarm+0x244>)
 8005550:	400a      	ands	r2, r1
 8005552:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4926      	ldr	r1, [pc, #152]	; (80055f8 <HAL_RTC_SetAlarm+0x248>)
 8005560:	400a      	ands	r2, r1
 8005562:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005564:	f7fe fa2e 	bl	80039c4 <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800556c:	e016      	b.n	800559c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800556e:	f7fe fa29 	bl	80039c4 <HAL_GetTick>
 8005572:	0002      	movs	r2, r0
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	23fa      	movs	r3, #250	; 0xfa
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d90d      	bls.n	800559c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2229      	movs	r2, #41	; 0x29
 800558c:	2103      	movs	r1, #3
 800558e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2228      	movs	r2, #40	; 0x28
 8005594:	2100      	movs	r1, #0
 8005596:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e023      	b.n	80055e4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	4013      	ands	r3, r2
 80055a6:	d0e2      	beq.n	800556e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0089      	lsls	r1, r1, #2
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	22ff      	movs	r2, #255	; 0xff
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2229      	movs	r2, #41	; 0x29
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2228      	movs	r2, #40	; 0x28
 80055de:	2100      	movs	r1, #0
 80055e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b009      	add	sp, #36	; 0x24
 80055ea:	bd90      	pop	{r4, r7, pc}
 80055ec:	fffffeff 	.word	0xfffffeff
 80055f0:	ffffefff 	.word	0xffffefff
 80055f4:	fffffdff 	.word	0xfffffdff
 80055f8:	ffffdfff 	.word	0xffffdfff

080055fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	21a0      	movs	r1, #160	; 0xa0
 8005610:	438a      	bics	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005614:	f7fe f9d6 	bl	80039c4 <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800561c:	e00a      	b.n	8005634 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800561e:	f7fe f9d1 	bl	80039c4 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	23fa      	movs	r3, #250	; 0xfa
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	429a      	cmp	r2, r3
 800562e:	d901      	bls.n	8005634 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	4013      	ands	r3, r2
 800563e:	d0ee      	beq.n	800561e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b004      	add	sp, #16
 8005648:	bd80      	pop	{r7, pc}

0800564a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2240      	movs	r2, #64	; 0x40
 8005662:	4013      	ands	r3, r2
 8005664:	d12c      	bne.n	80056c0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	430a      	orrs	r2, r1
 8005674:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005676:	f7fe f9a5 	bl	80039c4 <HAL_GetTick>
 800567a:	0003      	movs	r3, r0
 800567c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800567e:	e014      	b.n	80056aa <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005680:	f7fe f9a0 	bl	80039c4 <HAL_GetTick>
 8005684:	0002      	movs	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	200f      	movs	r0, #15
 800568c:	183b      	adds	r3, r7, r0
 800568e:	1839      	adds	r1, r7, r0
 8005690:	7809      	ldrb	r1, [r1, #0]
 8005692:	7019      	strb	r1, [r3, #0]
 8005694:	23fa      	movs	r3, #250	; 0xfa
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d906      	bls.n	80056aa <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800569c:	183b      	adds	r3, r7, r0
 800569e:	2203      	movs	r2, #3
 80056a0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2229      	movs	r2, #41	; 0x29
 80056a6:	2103      	movs	r1, #3
 80056a8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2240      	movs	r2, #64	; 0x40
 80056b2:	4013      	ands	r3, r2
 80056b4:	d104      	bne.n	80056c0 <RTC_EnterInitMode+0x76>
 80056b6:	230f      	movs	r3, #15
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d1df      	bne.n	8005680 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056c0:	230f      	movs	r3, #15
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	240f      	movs	r4, #15
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056e0:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <RTC_ExitInitMode+0x84>)
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <RTC_ExitInitMode+0x84>)
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	438a      	bics	r2, r1
 80056ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <RTC_ExitInitMode+0x84>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2220      	movs	r2, #32
 80056f2:	4013      	ands	r3, r2
 80056f4:	d10d      	bne.n	8005712 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff ff7f 	bl	80055fc <HAL_RTC_WaitForSynchro>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d021      	beq.n	8005746 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2229      	movs	r2, #41	; 0x29
 8005706:	2103      	movs	r1, #3
 8005708:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800570a:	193b      	adds	r3, r7, r4
 800570c:	2203      	movs	r2, #3
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e019      	b.n	8005746 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <RTC_ExitInitMode+0x84>)
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <RTC_ExitInitMode+0x84>)
 8005718:	2120      	movs	r1, #32
 800571a:	438a      	bics	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff ff6b 	bl	80055fc <HAL_RTC_WaitForSynchro>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d007      	beq.n	800573a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2229      	movs	r2, #41	; 0x29
 800572e:	2103      	movs	r1, #3
 8005730:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005732:	230f      	movs	r3, #15
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2203      	movs	r2, #3
 8005738:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <RTC_ExitInitMode+0x84>)
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <RTC_ExitInitMode+0x84>)
 8005740:	2120      	movs	r1, #32
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005746:	230f      	movs	r3, #15
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	781b      	ldrb	r3, [r3, #0]
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	b005      	add	sp, #20
 8005752:	bd90      	pop	{r4, r7, pc}
 8005754:	40002800 	.word	0x40002800

08005758 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	0002      	movs	r2, r0
 8005760:	1dfb      	adds	r3, r7, #7
 8005762:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005768:	230b      	movs	r3, #11
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	1dfa      	adds	r2, r7, #7
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005772:	e008      	b.n	8005786 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800577a:	220b      	movs	r2, #11
 800577c:	18bb      	adds	r3, r7, r2
 800577e:	18ba      	adds	r2, r7, r2
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	3a0a      	subs	r2, #10
 8005784:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005786:	210b      	movs	r1, #11
 8005788:	187b      	adds	r3, r7, r1
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b09      	cmp	r3, #9
 800578e:	d8f1      	bhi.n	8005774 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	b2da      	uxtb	r2, r3
 8005798:	187b      	adds	r3, r7, r1
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	b2db      	uxtb	r3, r3
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b004      	add	sp, #16
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	0002      	movs	r2, r0
 80057b0:	1dfb      	adds	r3, r7, #7
 80057b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80057b4:	1dfb      	adds	r3, r7, #7
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	001a      	movs	r2, r3
 80057be:	0013      	movs	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	1dfb      	adds	r3, r7, #7
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	210f      	movs	r1, #15
 80057d2:	400b      	ands	r3, r1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	b2db      	uxtb	r3, r3
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2228      	movs	r2, #40	; 0x28
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_RTCEx_EnableBypassShadow+0x16>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e024      	b.n	8005842 <HAL_RTCEx_EnableBypassShadow+0x60>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2228      	movs	r2, #40	; 0x28
 80057fc:	2101      	movs	r1, #1
 80057fe:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2229      	movs	r2, #41	; 0x29
 8005804:	2102      	movs	r1, #2
 8005806:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	22ca      	movs	r2, #202	; 0xca
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2253      	movs	r2, #83	; 0x53
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2120      	movs	r1, #32
 8005824:	430a      	orrs	r2, r1
 8005826:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2229      	movs	r2, #41	; 0x29
 8005834:	2101      	movs	r1, #1
 8005836:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2228      	movs	r2, #40	; 0x28
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2228      	movs	r2, #40	; 0x28
 8005856:	5c9b      	ldrb	r3, [r3, r2]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_RTCEx_DisableBypassShadow+0x16>
 800585c:	2302      	movs	r3, #2
 800585e:	e024      	b.n	80058aa <HAL_RTCEx_DisableBypassShadow+0x60>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2228      	movs	r2, #40	; 0x28
 8005864:	2101      	movs	r1, #1
 8005866:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2229      	movs	r2, #41	; 0x29
 800586c:	2102      	movs	r1, #2
 800586e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	22ca      	movs	r2, #202	; 0xca
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2253      	movs	r2, #83	; 0x53
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	21df      	movs	r1, #223	; 0xdf
 800588c:	400a      	ands	r2, r1
 800588e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2229      	movs	r2, #41	; 0x29
 800589c:	2101      	movs	r1, #1
 800589e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2228      	movs	r2, #40	; 0x28
 80058a4:	2100      	movs	r1, #0
 80058a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e0a8      	b.n	8005a18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	2382      	movs	r3, #130	; 0x82
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d009      	beq.n	80058ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	61da      	str	r2, [r3, #28]
 80058e0:	e005      	b.n	80058ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	225d      	movs	r2, #93	; 0x5d
 80058f8:	5c9b      	ldrb	r3, [r3, r2]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	225c      	movs	r2, #92	; 0x5c
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	0018      	movs	r0, r3
 800590c:	f7fd fd12 	bl	8003334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	225d      	movs	r2, #93	; 0x5d
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2140      	movs	r1, #64	; 0x40
 8005924:	438a      	bics	r2, r1
 8005926:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	23e0      	movs	r3, #224	; 0xe0
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	429a      	cmp	r2, r3
 8005932:	d902      	bls.n	800593a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e002      	b.n	8005940 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	015b      	lsls	r3, r3, #5
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	23f0      	movs	r3, #240	; 0xf0
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	429a      	cmp	r2, r3
 800594a:	d008      	beq.n	800595e <HAL_SPI_Init+0xaa>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	23e0      	movs	r3, #224	; 0xe0
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	429a      	cmp	r2, r3
 8005956:	d002      	beq.n	800595e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	2382      	movs	r3, #130	; 0x82
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6899      	ldr	r1, [r3, #8]
 800596c:	2384      	movs	r3, #132	; 0x84
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	400b      	ands	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2102      	movs	r1, #2
 800597a:	400b      	ands	r3, r1
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2101      	movs	r1, #1
 8005984:	400b      	ands	r3, r1
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6999      	ldr	r1, [r3, #24]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	400b      	ands	r3, r1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2138      	movs	r1, #56	; 0x38
 800599a:	400b      	ands	r3, r1
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	2180      	movs	r1, #128	; 0x80
 80059a4:	400b      	ands	r3, r1
 80059a6:	431a      	orrs	r2, r3
 80059a8:	0011      	movs	r1, r2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	401a      	ands	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	2204      	movs	r2, #4
 80059c4:	401a      	ands	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2110      	movs	r1, #16
 80059cc:	400b      	ands	r3, r1
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	2108      	movs	r1, #8
 80059d6:	400b      	ands	r3, r1
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	23f0      	movs	r3, #240	; 0xf0
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	400b      	ands	r3, r1
 80059e4:	431a      	orrs	r2, r3
 80059e6:	0011      	movs	r1, r2
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	015b      	lsls	r3, r3, #5
 80059ee:	401a      	ands	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4907      	ldr	r1, [pc, #28]	; (8005a20 <HAL_SPI_Init+0x16c>)
 8005a04:	400a      	ands	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	225d      	movs	r2, #93	; 0x5d
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b004      	add	sp, #16
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	fffff7ff 	.word	0xfffff7ff

08005a24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	1dbb      	adds	r3, r7, #6
 8005a32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a34:	231f      	movs	r3, #31
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	225c      	movs	r2, #92	; 0x5c
 8005a40:	5c9b      	ldrb	r3, [r3, r2]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_Transmit+0x26>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e140      	b.n	8005ccc <HAL_SPI_Transmit+0x2a8>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	225c      	movs	r2, #92	; 0x5c
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a52:	f7fd ffb7 	bl	80039c4 <HAL_GetTick>
 8005a56:	0003      	movs	r3, r0
 8005a58:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a5a:	2316      	movs	r3, #22
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	1dba      	adds	r2, r7, #6
 8005a60:	8812      	ldrh	r2, [r2, #0]
 8005a62:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	225d      	movs	r2, #93	; 0x5d
 8005a68:	5c9b      	ldrb	r3, [r3, r2]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d004      	beq.n	8005a7a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a70:	231f      	movs	r3, #31
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2202      	movs	r2, #2
 8005a76:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a78:	e11d      	b.n	8005cb6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_SPI_Transmit+0x64>
 8005a80:	1dbb      	adds	r3, r7, #6
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a88:	231f      	movs	r3, #31
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a90:	e111      	b.n	8005cb6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	225d      	movs	r2, #93	; 0x5d
 8005a96:	2103      	movs	r1, #3
 8005a98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1dba      	adds	r2, r7, #6
 8005aaa:	8812      	ldrh	r2, [r2, #0]
 8005aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1dba      	adds	r2, r7, #6
 8005ab2:	8812      	ldrh	r2, [r2, #0]
 8005ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2244      	movs	r2, #68	; 0x44
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2246      	movs	r2, #70	; 0x46
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d110      	bne.n	8005b06 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2140      	movs	r1, #64	; 0x40
 8005af0:	438a      	bics	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	01c9      	lsls	r1, r1, #7
 8005b02:	430a      	orrs	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2240      	movs	r2, #64	; 0x40
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d007      	beq.n	8005b24 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2140      	movs	r1, #64	; 0x40
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	23e0      	movs	r3, #224	; 0xe0
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d94e      	bls.n	8005bce <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_SPI_Transmit+0x11e>
 8005b38:	2316      	movs	r3, #22
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d13f      	bne.n	8005bc2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b66:	e02c      	b.n	8005bc2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d112      	bne.n	8005b9c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b9a:	e012      	b.n	8005bc2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9c:	f7fd ff12 	bl	80039c4 <HAL_GetTick>
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d802      	bhi.n	8005bb2 <HAL_SPI_Transmit+0x18e>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_Transmit+0x194>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005bb8:	231f      	movs	r3, #31
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	701a      	strb	r2, [r3, #0]
          goto error;
 8005bc0:	e079      	b.n	8005cb6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1cd      	bne.n	8005b68 <HAL_SPI_Transmit+0x144>
 8005bcc:	e04f      	b.n	8005c6e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_SPI_Transmit+0x1bc>
 8005bd6:	2316      	movs	r3, #22
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d141      	bne.n	8005c64 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c06:	e02d      	b.n	8005c64 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d113      	bne.n	8005c3e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3c:	e012      	b.n	8005c64 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fd fec1 	bl	80039c4 <HAL_GetTick>
 8005c42:	0002      	movs	r2, r0
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d802      	bhi.n	8005c54 <HAL_SPI_Transmit+0x230>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	d102      	bne.n	8005c5a <HAL_SPI_Transmit+0x236>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005c5a:	231f      	movs	r3, #31
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2203      	movs	r2, #3
 8005c60:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c62:	e028      	b.n	8005cb6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1cc      	bne.n	8005c08 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 fcd9 	bl	800662c <SPI_EndRxTxTransaction>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005caa:	231f      	movs	r3, #31
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e000      	b.n	8005cb6 <HAL_SPI_Transmit+0x292>
  }

error:
 8005cb4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	225d      	movs	r2, #93	; 0x5d
 8005cba:	2101      	movs	r1, #1
 8005cbc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	225c      	movs	r2, #92	; 0x5c
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005cc6:	231f      	movs	r3, #31
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	781b      	ldrb	r3, [r3, #0]
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b008      	add	sp, #32
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b089      	sub	sp, #36	; 0x24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	1dbb      	adds	r3, r7, #6
 8005ce2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ce4:	2317      	movs	r3, #23
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	2382      	movs	r3, #130	; 0x82
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d113      	bne.n	8005d20 <HAL_SPI_Receive+0x4c>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10f      	bne.n	8005d20 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	225d      	movs	r2, #93	; 0x5d
 8005d04:	2104      	movs	r1, #4
 8005d06:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d08:	1dbb      	adds	r3, r7, #6
 8005d0a:	881c      	ldrh	r4, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	0023      	movs	r3, r4
 8005d18:	f000 f928 	bl	8005f6c <HAL_SPI_TransmitReceive>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	e11c      	b.n	8005f5a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	225c      	movs	r2, #92	; 0x5c
 8005d24:	5c9b      	ldrb	r3, [r3, r2]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_SPI_Receive+0x5a>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e115      	b.n	8005f5a <HAL_SPI_Receive+0x286>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	225c      	movs	r2, #92	; 0x5c
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d36:	f7fd fe45 	bl	80039c4 <HAL_GetTick>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	225d      	movs	r2, #93	; 0x5d
 8005d42:	5c9b      	ldrb	r3, [r3, r2]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d004      	beq.n	8005d54 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005d4a:	2317      	movs	r3, #23
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	2202      	movs	r2, #2
 8005d50:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d52:	e0f7      	b.n	8005f44 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_SPI_Receive+0x8e>
 8005d5a:	1dbb      	adds	r3, r7, #6
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005d62:	2317      	movs	r3, #23
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d6a:	e0eb      	b.n	8005f44 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	225d      	movs	r2, #93	; 0x5d
 8005d70:	2104      	movs	r1, #4
 8005d72:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1dba      	adds	r2, r7, #6
 8005d84:	2144      	movs	r1, #68	; 0x44
 8005d86:	8812      	ldrh	r2, [r2, #0]
 8005d88:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1dba      	adds	r2, r7, #6
 8005d8e:	2146      	movs	r1, #70	; 0x46
 8005d90:	8812      	ldrh	r2, [r2, #0]
 8005d92:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	23e0      	movs	r3, #224	; 0xe0
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d908      	bls.n	8005dd0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4966      	ldr	r1, [pc, #408]	; (8005f64 <HAL_SPI_Receive+0x290>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	e008      	b.n	8005de2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	0149      	lsls	r1, r1, #5
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d10f      	bne.n	8005e0e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	438a      	bics	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4957      	ldr	r1, [pc, #348]	; (8005f68 <HAL_SPI_Receive+0x294>)
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2240      	movs	r2, #64	; 0x40
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d007      	beq.n	8005e2c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2140      	movs	r1, #64	; 0x40
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	23e0      	movs	r3, #224	; 0xe0
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d900      	bls.n	8005e3a <HAL_SPI_Receive+0x166>
 8005e38:	e069      	b.n	8005f0e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e3a:	e031      	b.n	8005ea0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2201      	movs	r2, #1
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d117      	bne.n	8005e7a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	001a      	movs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	7812      	ldrb	r2, [r2, #0]
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2246      	movs	r2, #70	; 0x46
 8005e6a:	5a9b      	ldrh	r3, [r3, r2]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b299      	uxth	r1, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2246      	movs	r2, #70	; 0x46
 8005e76:	5299      	strh	r1, [r3, r2]
 8005e78:	e012      	b.n	8005ea0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7a:	f7fd fda3 	bl	80039c4 <HAL_GetTick>
 8005e7e:	0002      	movs	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d802      	bhi.n	8005e90 <HAL_SPI_Receive+0x1bc>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <HAL_SPI_Receive+0x1c2>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005e96:	2317      	movs	r3, #23
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	701a      	strb	r2, [r3, #0]
          goto error;
 8005e9e:	e051      	b.n	8005f44 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2246      	movs	r2, #70	; 0x46
 8005ea4:	5a9b      	ldrh	r3, [r3, r2]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1c7      	bne.n	8005e3c <HAL_SPI_Receive+0x168>
 8005eac:	e035      	b.n	8005f1a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d115      	bne.n	8005ee8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	b292      	uxth	r2, r2
 8005ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	1c9a      	adds	r2, r3, #2
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2246      	movs	r2, #70	; 0x46
 8005ed8:	5a9b      	ldrh	r3, [r3, r2]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b299      	uxth	r1, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2246      	movs	r2, #70	; 0x46
 8005ee4:	5299      	strh	r1, [r3, r2]
 8005ee6:	e012      	b.n	8005f0e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee8:	f7fd fd6c 	bl	80039c4 <HAL_GetTick>
 8005eec:	0002      	movs	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d802      	bhi.n	8005efe <HAL_SPI_Receive+0x22a>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	d102      	bne.n	8005f04 <HAL_SPI_Receive+0x230>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005f04:	2317      	movs	r3, #23
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2203      	movs	r2, #3
 8005f0a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f0c:	e01a      	b.n	8005f44 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2246      	movs	r2, #70	; 0x46
 8005f12:	5a9b      	ldrh	r3, [r3, r2]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1c9      	bne.n	8005eae <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f000 fb25 	bl	8006570 <SPI_EndRxTransaction>
 8005f26:	1e03      	subs	r3, r0, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005f38:	2317      	movs	r3, #23
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e000      	b.n	8005f44 <HAL_SPI_Receive+0x270>
  }

error :
 8005f42:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	225d      	movs	r2, #93	; 0x5d
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	225c      	movs	r2, #92	; 0x5c
 8005f50:	2100      	movs	r1, #0
 8005f52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f54:	2317      	movs	r3, #23
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	781b      	ldrb	r3, [r3, #0]
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b007      	add	sp, #28
 8005f60:	bd90      	pop	{r4, r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	ffffefff 	.word	0xffffefff
 8005f68:	ffffbfff 	.word	0xffffbfff

08005f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	001a      	movs	r2, r3
 8005f7a:	1cbb      	adds	r3, r7, #2
 8005f7c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f82:	2323      	movs	r3, #35	; 0x23
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	225c      	movs	r2, #92	; 0x5c
 8005f8e:	5c9b      	ldrb	r3, [r3, r2]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x2c>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e1b5      	b.n	8006304 <HAL_SPI_TransmitReceive+0x398>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	225c      	movs	r2, #92	; 0x5c
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa0:	f7fd fd10 	bl	80039c4 <HAL_GetTick>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fa8:	201b      	movs	r0, #27
 8005faa:	183b      	adds	r3, r7, r0
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	215d      	movs	r1, #93	; 0x5d
 8005fb0:	5c52      	ldrb	r2, [r2, r1]
 8005fb2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fba:	2312      	movs	r3, #18
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	1cba      	adds	r2, r7, #2
 8005fc0:	8812      	ldrh	r2, [r2, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fc4:	183b      	adds	r3, r7, r0
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d011      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x84>
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	2382      	movs	r3, #130	; 0x82
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d107      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x7a>
 8005fde:	183b      	adds	r3, r7, r0
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d004      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005fe6:	2323      	movs	r3, #35	; 0x23
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fee:	e17e      	b.n	80062ee <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d006      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x98>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x98>
 8005ffc:	1cbb      	adds	r3, r7, #2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006004:	2323      	movs	r3, #35	; 0x23
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
    goto error;
 800600c:	e16f      	b.n	80062ee <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	225d      	movs	r2, #93	; 0x5d
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b04      	cmp	r3, #4
 8006018:	d003      	beq.n	8006022 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	225d      	movs	r2, #93	; 0x5d
 800601e:	2105      	movs	r1, #5
 8006020:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1cba      	adds	r2, r7, #2
 8006032:	2146      	movs	r1, #70	; 0x46
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1cba      	adds	r2, r7, #2
 800603c:	2144      	movs	r1, #68	; 0x44
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1cba      	adds	r2, r7, #2
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1cba      	adds	r2, r7, #2
 8006054:	8812      	ldrh	r2, [r2, #0]
 8006056:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	23e0      	movs	r3, #224	; 0xe0
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	429a      	cmp	r2, r3
 800606e:	d908      	bls.n	8006082 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	49a4      	ldr	r1, [pc, #656]	; (800630c <HAL_SPI_TransmitReceive+0x3a0>)
 800607c:	400a      	ands	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e008      	b.n	8006094 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2180      	movs	r1, #128	; 0x80
 800608e:	0149      	lsls	r1, r1, #5
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	4013      	ands	r3, r2
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d007      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	430a      	orrs	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	23e0      	movs	r3, #224	; 0xe0
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d800      	bhi.n	80060c0 <HAL_SPI_TransmitReceive+0x154>
 80060be:	e07f      	b.n	80061c0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x168>
 80060c8:	2312      	movs	r3, #18
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d000      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x168>
 80060d2:	e069      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	1c9a      	adds	r2, r3, #2
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f8:	e056      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2202      	movs	r2, #2
 8006102:	4013      	ands	r3, r2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d11b      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x1d4>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d016      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x1d4>
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	2b01      	cmp	r3, #1
 8006116:	d113      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	1c9a      	adds	r2, r3, #2
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2201      	movs	r2, #1
 8006148:	4013      	ands	r3, r2
 800614a:	2b01      	cmp	r3, #1
 800614c:	d11c      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x21c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2246      	movs	r2, #70	; 0x46
 8006152:	5a9b      	ldrh	r3, [r3, r2]
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	b292      	uxth	r2, r2
 8006166:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2246      	movs	r2, #70	; 0x46
 8006176:	5a9b      	ldrh	r3, [r3, r2]
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b299      	uxth	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2246      	movs	r2, #70	; 0x46
 8006182:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006184:	2301      	movs	r3, #1
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006188:	f7fd fc1c 	bl	80039c4 <HAL_GetTick>
 800618c:	0002      	movs	r2, r0
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006194:	429a      	cmp	r2, r3
 8006196:	d807      	bhi.n	80061a8 <HAL_SPI_TransmitReceive+0x23c>
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	3301      	adds	r3, #1
 800619c:	d004      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800619e:	2323      	movs	r3, #35	; 0x23
 80061a0:	18fb      	adds	r3, r7, r3
 80061a2:	2203      	movs	r2, #3
 80061a4:	701a      	strb	r2, [r3, #0]
        goto error;
 80061a6:	e0a2      	b.n	80062ee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1a3      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x18e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2246      	movs	r2, #70	; 0x46
 80061b6:	5a9b      	ldrh	r3, [r3, r2]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d19d      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x18e>
 80061be:	e085      	b.n	80062cc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_SPI_TransmitReceive+0x268>
 80061c8:	2312      	movs	r3, #18
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d000      	beq.n	80061d4 <HAL_SPI_TransmitReceive+0x268>
 80061d2:	e070      	b.n	80062b6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061fa:	e05c      	b.n	80062b6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2202      	movs	r2, #2
 8006204:	4013      	ands	r3, r2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d11c      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x2d8>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x2d8>
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	2b01      	cmp	r3, #1
 8006218:	d114      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2201      	movs	r2, #1
 800624c:	4013      	ands	r3, r2
 800624e:	2b01      	cmp	r3, #1
 8006250:	d11e      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x324>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2246      	movs	r2, #70	; 0x46
 8006256:	5a9b      	ldrh	r3, [r3, r2]
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	001a      	movs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2246      	movs	r2, #70	; 0x46
 800627e:	5a9b      	ldrh	r3, [r3, r2]
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b299      	uxth	r1, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2246      	movs	r2, #70	; 0x46
 800628a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800628c:	2301      	movs	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006290:	f7fd fb98 	bl	80039c4 <HAL_GetTick>
 8006294:	0002      	movs	r2, r0
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629c:	429a      	cmp	r2, r3
 800629e:	d802      	bhi.n	80062a6 <HAL_SPI_TransmitReceive+0x33a>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	3301      	adds	r3, #1
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x340>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80062ac:	2323      	movs	r3, #35	; 0x23
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2203      	movs	r2, #3
 80062b2:	701a      	strb	r2, [r3, #0]
        goto error;
 80062b4:	e01b      	b.n	80062ee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d19d      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x290>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2246      	movs	r2, #70	; 0x46
 80062c4:	5a9b      	ldrh	r3, [r3, r2]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d197      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0018      	movs	r0, r3
 80062d4:	f000 f9aa 	bl	800662c <SPI_EndRxTxTransaction>
 80062d8:	1e03      	subs	r3, r0, #0
 80062da:	d007      	beq.n	80062ec <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80062dc:	2323      	movs	r3, #35	; 0x23
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	661a      	str	r2, [r3, #96]	; 0x60
 80062ea:	e000      	b.n	80062ee <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80062ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	225d      	movs	r2, #93	; 0x5d
 80062f2:	2101      	movs	r1, #1
 80062f4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	225c      	movs	r2, #92	; 0x5c
 80062fa:	2100      	movs	r1, #0
 80062fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80062fe:	2323      	movs	r3, #35	; 0x23
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	781b      	ldrb	r3, [r3, #0]
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b00a      	add	sp, #40	; 0x28
 800630a:	bd80      	pop	{r7, pc}
 800630c:	ffffefff 	.word	0xffffefff

08006310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	1dfb      	adds	r3, r7, #7
 800631e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006320:	f7fd fb50 	bl	80039c4 <HAL_GetTick>
 8006324:	0002      	movs	r2, r0
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	18d3      	adds	r3, r2, r3
 800632e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006330:	f7fd fb48 	bl	80039c4 <HAL_GetTick>
 8006334:	0003      	movs	r3, r0
 8006336:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006338:	4b3a      	ldr	r3, [pc, #232]	; (8006424 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	015b      	lsls	r3, r3, #5
 800633e:	0d1b      	lsrs	r3, r3, #20
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	4353      	muls	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006346:	e058      	b.n	80063fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	d055      	beq.n	80063fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800634e:	f7fd fb39 	bl	80039c4 <HAL_GetTick>
 8006352:	0002      	movs	r2, r0
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	429a      	cmp	r2, r3
 800635c:	d902      	bls.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x54>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d142      	bne.n	80063ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	21e0      	movs	r1, #224	; 0xe0
 8006370:	438a      	bics	r2, r1
 8006372:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	2382      	movs	r3, #130	; 0x82
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	429a      	cmp	r2, r3
 800637e:	d113      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	429a      	cmp	r2, r3
 800638a:	d005      	beq.n	8006398 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	429a      	cmp	r2, r3
 8006396:	d107      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2140      	movs	r1, #64	; 0x40
 80063a4:	438a      	bics	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	019b      	lsls	r3, r3, #6
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d110      	bne.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	491a      	ldr	r1, [pc, #104]	; (8006428 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80063c0:	400a      	ands	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	0189      	lsls	r1, r1, #6
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	225d      	movs	r2, #93	; 0x5d
 80063da:	2101      	movs	r1, #1
 80063dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	225c      	movs	r2, #92	; 0x5c
 80063e2:	2100      	movs	r1, #0
 80063e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e017      	b.n	800641a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4013      	ands	r3, r2
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	425a      	negs	r2, r3
 800640a:	4153      	adcs	r3, r2
 800640c:	b2db      	uxtb	r3, r3
 800640e:	001a      	movs	r2, r3
 8006410:	1dfb      	adds	r3, r7, #7
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d197      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b008      	add	sp, #32
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	20000020 	.word	0x20000020
 8006428:	ffffdfff 	.word	0xffffdfff

0800642c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800643a:	2317      	movs	r3, #23
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006442:	f7fd fabf 	bl	80039c4 <HAL_GetTick>
 8006446:	0002      	movs	r2, r0
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	18d3      	adds	r3, r2, r3
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006452:	f7fd fab7 	bl	80039c4 <HAL_GetTick>
 8006456:	0003      	movs	r3, r0
 8006458:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006462:	4b41      	ldr	r3, [pc, #260]	; (8006568 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	0013      	movs	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	189b      	adds	r3, r3, r2
 800646c:	00da      	lsls	r2, r3, #3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	0d1b      	lsrs	r3, r3, #20
 8006472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006474:	4353      	muls	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006478:	e068      	b.n	800654c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	23c0      	movs	r3, #192	; 0xc0
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	429a      	cmp	r2, r3
 8006482:	d10a      	bne.n	800649a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	2117      	movs	r1, #23
 8006492:	187b      	adds	r3, r7, r1
 8006494:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006496:	187b      	adds	r3, r7, r1
 8006498:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	d055      	beq.n	800654c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064a0:	f7fd fa90 	bl	80039c4 <HAL_GetTick>
 80064a4:	0002      	movs	r2, r0
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d902      	bls.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d142      	bne.n	800653c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	21e0      	movs	r1, #224	; 0xe0
 80064c2:	438a      	bics	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	2382      	movs	r3, #130	; 0x82
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d113      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	429a      	cmp	r2, r3
 80064dc:	d005      	beq.n	80064ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d107      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2140      	movs	r1, #64	; 0x40
 80064f6:	438a      	bics	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	019b      	lsls	r3, r3, #6
 8006502:	429a      	cmp	r2, r3
 8006504:	d110      	bne.n	8006528 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4916      	ldr	r1, [pc, #88]	; (800656c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006512:	400a      	ands	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	0189      	lsls	r1, r1, #6
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	225d      	movs	r2, #93	; 0x5d
 800652c:	2101      	movs	r1, #1
 800652e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	225c      	movs	r2, #92	; 0x5c
 8006534:	2100      	movs	r1, #0
 8006536:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e010      	b.n	800655e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	3b01      	subs	r3, #1
 800654a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d18e      	bne.n	800647a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	0018      	movs	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	b00a      	add	sp, #40	; 0x28
 8006564:	bd80      	pop	{r7, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	20000020 	.word	0x20000020
 800656c:	ffffdfff 	.word	0xffffdfff

08006570 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	2382      	movs	r3, #130	; 0x82
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	429a      	cmp	r2, r3
 8006586:	d113      	bne.n	80065b0 <SPI_EndRxTransaction+0x40>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	429a      	cmp	r2, r3
 8006592:	d005      	beq.n	80065a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	429a      	cmp	r2, r3
 800659e:	d107      	bne.n	80065b0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2140      	movs	r1, #64	; 0x40
 80065ac:	438a      	bics	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	0013      	movs	r3, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	2180      	movs	r1, #128	; 0x80
 80065be:	f7ff fea7 	bl	8006310 <SPI_WaitFlagStateUntilTimeout>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d007      	beq.n	80065d6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	2220      	movs	r2, #32
 80065cc:	431a      	orrs	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e026      	b.n	8006624 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	2382      	movs	r3, #130	; 0x82
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	429a      	cmp	r2, r3
 80065e0:	d11f      	bne.n	8006622 <SPI_EndRxTransaction+0xb2>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d005      	beq.n	80065fa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d113      	bne.n	8006622 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	23c0      	movs	r3, #192	; 0xc0
 80065fe:	00d9      	lsls	r1, r3, #3
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	0013      	movs	r3, r2
 8006608:	2200      	movs	r2, #0
 800660a:	f7ff ff0f 	bl	800642c <SPI_WaitFifoStateUntilTimeout>
 800660e:	1e03      	subs	r3, r0, #0
 8006610:	d007      	beq.n	8006622 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	2220      	movs	r2, #32
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e000      	b.n	8006624 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b004      	add	sp, #16
 800662a:	bd80      	pop	{r7, pc}

0800662c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	23c0      	movs	r3, #192	; 0xc0
 800663c:	0159      	lsls	r1, r3, #5
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	0013      	movs	r3, r2
 8006646:	2200      	movs	r2, #0
 8006648:	f7ff fef0 	bl	800642c <SPI_WaitFifoStateUntilTimeout>
 800664c:	1e03      	subs	r3, r0, #0
 800664e:	d007      	beq.n	8006660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	2220      	movs	r2, #32
 8006656:	431a      	orrs	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e027      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	0013      	movs	r3, r2
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	f7ff fe4f 	bl	8006310 <SPI_WaitFlagStateUntilTimeout>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d007      	beq.n	8006686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	2220      	movs	r2, #32
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e014      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	23c0      	movs	r3, #192	; 0xc0
 800668a:	00d9      	lsls	r1, r3, #3
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	0013      	movs	r3, r2
 8006694:	2200      	movs	r2, #0
 8006696:	f7ff fec9 	bl	800642c <SPI_WaitFifoStateUntilTimeout>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d007      	beq.n	80066ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	2220      	movs	r2, #32
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e000      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b004      	add	sp, #16
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e04a      	b.n	8006760 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	223d      	movs	r2, #61	; 0x3d
 80066ce:	5c9b      	ldrb	r3, [r3, r2]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	223c      	movs	r2, #60	; 0x3c
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7fc fe73 	bl	80033cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	223d      	movs	r2, #61	; 0x3d
 80066ea:	2102      	movs	r1, #2
 80066ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	0019      	movs	r1, r3
 80066f8:	0010      	movs	r0, r2
 80066fa:	f000 fa11 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2248      	movs	r2, #72	; 0x48
 8006702:	2101      	movs	r1, #1
 8006704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	223e      	movs	r2, #62	; 0x3e
 800670a:	2101      	movs	r1, #1
 800670c:	5499      	strb	r1, [r3, r2]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	223f      	movs	r2, #63	; 0x3f
 8006712:	2101      	movs	r1, #1
 8006714:	5499      	strb	r1, [r3, r2]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	2101      	movs	r1, #1
 800671c:	5499      	strb	r1, [r3, r2]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2241      	movs	r2, #65	; 0x41
 8006722:	2101      	movs	r1, #1
 8006724:	5499      	strb	r1, [r3, r2]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2242      	movs	r2, #66	; 0x42
 800672a:	2101      	movs	r1, #1
 800672c:	5499      	strb	r1, [r3, r2]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2243      	movs	r2, #67	; 0x43
 8006732:	2101      	movs	r1, #1
 8006734:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2244      	movs	r2, #68	; 0x44
 800673a:	2101      	movs	r1, #1
 800673c:	5499      	strb	r1, [r3, r2]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2245      	movs	r2, #69	; 0x45
 8006742:	2101      	movs	r1, #1
 8006744:	5499      	strb	r1, [r3, r2]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2246      	movs	r2, #70	; 0x46
 800674a:	2101      	movs	r1, #1
 800674c:	5499      	strb	r1, [r3, r2]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2247      	movs	r2, #71	; 0x47
 8006752:	2101      	movs	r1, #1
 8006754:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	223d      	movs	r2, #61	; 0x3d
 800675a:	2101      	movs	r1, #1
 800675c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	0018      	movs	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	223d      	movs	r2, #61	; 0x3d
 8006774:	5c9b      	ldrb	r3, [r3, r2]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d001      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e042      	b.n	8006806 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	223d      	movs	r2, #61	; 0x3d
 8006784:	2102      	movs	r1, #2
 8006786:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2101      	movs	r1, #1
 8006794:	430a      	orrs	r2, r1
 8006796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1c      	ldr	r2, [pc, #112]	; (8006810 <HAL_TIM_Base_Start_IT+0xa8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00f      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x5a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	05db      	lsls	r3, r3, #23
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d009      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x5a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_TIM_Base_Start_IT+0xac>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x5a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a16      	ldr	r2, [pc, #88]	; (8006818 <HAL_TIM_Base_Start_IT+0xb0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d116      	bne.n	80067f0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <HAL_TIM_Base_Start_IT+0xb4>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d016      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x9a>
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	429a      	cmp	r2, r3
 80067dc:	d011      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2101      	movs	r1, #1
 80067ea:	430a      	orrs	r2, r1
 80067ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	e008      	b.n	8006802 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2101      	movs	r1, #1
 80067fc:	430a      	orrs	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e000      	b.n	8006804 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40000400 	.word	0x40000400
 8006818:	40014000 	.word	0x40014000
 800681c:	00010007 	.word	0x00010007

08006820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2101      	movs	r1, #1
 8006834:	438a      	bics	r2, r1
 8006836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <HAL_TIM_Base_Stop_IT+0x54>)
 8006840:	4013      	ands	r3, r2
 8006842:	d10d      	bne.n	8006860 <HAL_TIM_Base_Stop_IT+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	4a0b      	ldr	r2, [pc, #44]	; (8006878 <HAL_TIM_Base_Stop_IT+0x58>)
 800684c:	4013      	ands	r3, r2
 800684e:	d107      	bne.n	8006860 <HAL_TIM_Base_Stop_IT+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	438a      	bics	r2, r1
 800685e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	223d      	movs	r2, #61	; 0x3d
 8006864:	2101      	movs	r1, #1
 8006866:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b002      	add	sp, #8
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	00001111 	.word	0x00001111
 8006878:	00000444 	.word	0x00000444

0800687c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2202      	movs	r2, #2
 800688c:	4013      	ands	r3, r2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d124      	bne.n	80068dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2202      	movs	r2, #2
 800689a:	4013      	ands	r3, r2
 800689c:	2b02      	cmp	r3, #2
 800689e:	d11d      	bne.n	80068dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2203      	movs	r2, #3
 80068a6:	4252      	negs	r2, r2
 80068a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2203      	movs	r2, #3
 80068b8:	4013      	ands	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 f916 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e007      	b.n	80068d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 f909 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f915 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2204      	movs	r2, #4
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d125      	bne.n	8006936 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2204      	movs	r2, #4
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d11e      	bne.n	8006936 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2205      	movs	r2, #5
 80068fe:	4252      	negs	r2, r2
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	23c0      	movs	r3, #192	; 0xc0
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4013      	ands	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	0018      	movs	r0, r3
 800691a:	f000 f8e9 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 800691e:	e007      	b.n	8006930 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	0018      	movs	r0, r3
 8006924:	f000 f8dc 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	f000 f8e8 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2208      	movs	r2, #8
 800693e:	4013      	ands	r3, r2
 8006940:	2b08      	cmp	r3, #8
 8006942:	d124      	bne.n	800698e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2208      	movs	r2, #8
 800694c:	4013      	ands	r3, r2
 800694e:	2b08      	cmp	r3, #8
 8006950:	d11d      	bne.n	800698e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2209      	movs	r2, #9
 8006958:	4252      	negs	r2, r2
 800695a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2204      	movs	r2, #4
 8006960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	2203      	movs	r2, #3
 800696a:	4013      	ands	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0018      	movs	r0, r3
 8006972:	f000 f8bd 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 8006976:	e007      	b.n	8006988 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0018      	movs	r0, r3
 800697c:	f000 f8b0 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f8bc 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2210      	movs	r2, #16
 8006996:	4013      	ands	r3, r2
 8006998:	2b10      	cmp	r3, #16
 800699a:	d125      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2210      	movs	r2, #16
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d11e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2211      	movs	r2, #17
 80069b0:	4252      	negs	r2, r2
 80069b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2208      	movs	r2, #8
 80069b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	23c0      	movs	r3, #192	; 0xc0
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4013      	ands	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0018      	movs	r0, r3
 80069cc:	f000 f890 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e007      	b.n	80069e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f000 f883 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 f88f 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2201      	movs	r2, #1
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10f      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d108      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	4252      	negs	r2, r2
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7fc fbe7 	bl	80031e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d10f      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2280      	movs	r2, #128	; 0x80
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d108      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2281      	movs	r2, #129	; 0x81
 8006a38:	4252      	negs	r2, r2
 8006a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 f964 	bl	8006d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	401a      	ands	r2, r3
 8006a50:	2380      	movs	r3, #128	; 0x80
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d10e      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	2280      	movs	r2, #128	; 0x80
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <HAL_TIM_IRQHandler+0x260>)
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f000 f953 	bl	8006d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2240      	movs	r2, #64	; 0x40
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d10f      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2240      	movs	r2, #64	; 0x40
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d108      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2241      	movs	r2, #65	; 0x41
 8006a98:	4252      	negs	r2, r2
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 f836 	bl	8006b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d108      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	4252      	negs	r2, r2
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f915 	bl	8006cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	fffffeff 	.word	0xfffffeff

08006ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b002      	add	sp, #8
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a34      	ldr	r2, [pc, #208]	; (8006c04 <TIM_Base_SetConfig+0xe4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d008      	beq.n	8006b4a <TIM_Base_SetConfig+0x2a>
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	05db      	lsls	r3, r3, #23
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0x2a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <TIM_Base_SetConfig+0xe8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2270      	movs	r2, #112	; 0x70
 8006b4e:	4393      	bics	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <TIM_Base_SetConfig+0xe4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	05db      	lsls	r3, r3, #23
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <TIM_Base_SetConfig+0xe8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <TIM_Base_SetConfig+0xec>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <TIM_Base_SetConfig+0xf0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <TIM_Base_SetConfig+0xf4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x76>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_Base_SetConfig+0xf8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <TIM_Base_SetConfig+0xfc>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	4393      	bics	r3, r2
 8006bae:	001a      	movs	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <TIM_Base_SetConfig+0xe4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0xce>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <TIM_Base_SetConfig+0xf0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0xce>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a0c      	ldr	r2, [pc, #48]	; (8006c14 <TIM_Base_SetConfig+0xf4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0xce>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a0b      	ldr	r2, [pc, #44]	; (8006c18 <TIM_Base_SetConfig+0xf8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d103      	bne.n	8006bf6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	615a      	str	r2, [r3, #20]
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b004      	add	sp, #16
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40002000 	.word	0x40002000
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800
 8006c1c:	fffffcff 	.word	0xfffffcff

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	223c      	movs	r2, #60	; 0x3c
 8006c2e:	5c9b      	ldrb	r3, [r3, r2]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e055      	b.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	223c      	movs	r2, #60	; 0x3c
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	223d      	movs	r2, #61	; 0x3d
 8006c44:	2102      	movs	r1, #2
 8006c46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d108      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2270      	movs	r2, #112	; 0x70
 8006c78:	4393      	bics	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a16      	ldr	r2, [pc, #88]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	05db      	lsls	r3, r3, #23
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d009      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	4393      	bics	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	223d      	movs	r2, #61	; 0x3d
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	223c      	movs	r2, #60	; 0x3c
 8006cde:	2100      	movs	r1, #0
 8006ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b004      	add	sp, #16
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	ff0fffff 	.word	0xff0fffff
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40014000 	.word	0x40014000

08006cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d04:	46c0      	nop			; (mov r8, r8)
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b002      	add	sp, #8
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d24:	46c0      	nop			; (mov r8, r8)
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e046      	b.n	8006dcc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2288      	movs	r2, #136	; 0x88
 8006d42:	589b      	ldr	r3, [r3, r2]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2284      	movs	r2, #132	; 0x84
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f7fc fb60 	bl	8003418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2288      	movs	r2, #136	; 0x88
 8006d5c:	2124      	movs	r1, #36	; 0x24
 8006d5e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	438a      	bics	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 f9ee 	bl	8007154 <UART_SetConfig>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e024      	b.n	8006dcc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 fc9f 	bl	80076d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	490d      	ldr	r1, [pc, #52]	; (8006dd4 <HAL_UART_Init+0xa8>)
 8006d9e:	400a      	ands	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	212a      	movs	r1, #42	; 0x2a
 8006dae:	438a      	bics	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 fd37 	bl	8007838 <UART_CheckIdleState>
 8006dca:	0003      	movs	r3, r0
}
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	ffffb7ff 	.word	0xffffb7ff

08006dd8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e032      	b.n	8006e50 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2288      	movs	r2, #136	; 0x88
 8006dee:	2124      	movs	r1, #36	; 0x24
 8006df0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	438a      	bics	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7fc fbdf 	bl	80035e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2290      	movs	r2, #144	; 0x90
 8006e26:	2100      	movs	r1, #0
 8006e28:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2288      	movs	r2, #136	; 0x88
 8006e2e:	2100      	movs	r1, #0
 8006e30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	228c      	movs	r2, #140	; 0x8c
 8006e36:	2100      	movs	r1, #0
 8006e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2284      	movs	r2, #132	; 0x84
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b002      	add	sp, #8
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2288      	movs	r2, #136	; 0x88
 8006e6c:	589b      	ldr	r3, [r3, r2]
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d000      	beq.n	8006e74 <HAL_UART_Transmit+0x1c>
 8006e72:	e088      	b.n	8006f86 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_UART_Transmit+0x2a>
 8006e7a:	1dbb      	adds	r3, r7, #6
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e080      	b.n	8006f88 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	015b      	lsls	r3, r3, #5
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d109      	bne.n	8006ea6 <HAL_UART_Transmit+0x4e>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d001      	beq.n	8006ea6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e070      	b.n	8006f88 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2290      	movs	r2, #144	; 0x90
 8006eaa:	2100      	movs	r1, #0
 8006eac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2288      	movs	r2, #136	; 0x88
 8006eb2:	2121      	movs	r1, #33	; 0x21
 8006eb4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb6:	f7fc fd85 	bl	80039c4 <HAL_GetTick>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1dba      	adds	r2, r7, #6
 8006ec2:	2154      	movs	r1, #84	; 0x54
 8006ec4:	8812      	ldrh	r2, [r2, #0]
 8006ec6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1dba      	adds	r2, r7, #6
 8006ecc:	2156      	movs	r1, #86	; 0x56
 8006ece:	8812      	ldrh	r2, [r2, #0]
 8006ed0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	2380      	movs	r3, #128	; 0x80
 8006ed8:	015b      	lsls	r3, r3, #5
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d108      	bne.n	8006ef0 <HAL_UART_Transmit+0x98>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e003      	b.n	8006ef8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ef8:	e02c      	b.n	8006f54 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	0013      	movs	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	2180      	movs	r1, #128	; 0x80
 8006f08:	f000 fce4 	bl	80078d4 <UART_WaitOnFlagUntilTimeout>
 8006f0c:	1e03      	subs	r3, r0, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e039      	b.n	8006f88 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	001a      	movs	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	05d2      	lsls	r2, r2, #23
 8006f26:	0dd2      	lsrs	r2, r2, #23
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e007      	b.n	8006f42 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2256      	movs	r2, #86	; 0x56
 8006f46:	5a9b      	ldrh	r3, [r3, r2]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b299      	uxth	r1, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2256      	movs	r2, #86	; 0x56
 8006f52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2256      	movs	r2, #86	; 0x56
 8006f58:	5a9b      	ldrh	r3, [r3, r2]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1cc      	bne.n	8006efa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	0013      	movs	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2140      	movs	r1, #64	; 0x40
 8006f6e:	f000 fcb1 	bl	80078d4 <UART_WaitOnFlagUntilTimeout>
 8006f72:	1e03      	subs	r3, r0, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e006      	b.n	8006f88 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2288      	movs	r2, #136	; 0x88
 8006f7e:	2120      	movs	r1, #32
 8006f80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e000      	b.n	8006f88 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
  }
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b008      	add	sp, #32
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	1dbb      	adds	r3, r7, #6
 8006f9e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	228c      	movs	r2, #140	; 0x8c
 8006fa4:	589b      	ldr	r3, [r3, r2]
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d000      	beq.n	8006fac <HAL_UART_Receive+0x1c>
 8006faa:	e0cc      	b.n	8007146 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_UART_Receive+0x2a>
 8006fb2:	1dbb      	adds	r3, r7, #6
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0c4      	b.n	8007148 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	015b      	lsls	r3, r3, #5
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d109      	bne.n	8006fde <HAL_UART_Receive+0x4e>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d001      	beq.n	8006fde <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0b4      	b.n	8007148 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2290      	movs	r2, #144	; 0x90
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	228c      	movs	r2, #140	; 0x8c
 8006fea:	2122      	movs	r1, #34	; 0x22
 8006fec:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff4:	f7fc fce6 	bl	80039c4 <HAL_GetTick>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1dba      	adds	r2, r7, #6
 8007000:	215c      	movs	r1, #92	; 0x5c
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1dba      	adds	r2, r7, #6
 800700a:	215e      	movs	r1, #94	; 0x5e
 800700c:	8812      	ldrh	r2, [r2, #0]
 800700e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	015b      	lsls	r3, r3, #5
 8007018:	429a      	cmp	r2, r3
 800701a:	d10d      	bne.n	8007038 <HAL_UART_Receive+0xa8>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_UART_Receive+0x9e>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2260      	movs	r2, #96	; 0x60
 8007028:	4949      	ldr	r1, [pc, #292]	; (8007150 <HAL_UART_Receive+0x1c0>)
 800702a:	5299      	strh	r1, [r3, r2]
 800702c:	e02e      	b.n	800708c <HAL_UART_Receive+0xfc>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2260      	movs	r2, #96	; 0x60
 8007032:	21ff      	movs	r1, #255	; 0xff
 8007034:	5299      	strh	r1, [r3, r2]
 8007036:	e029      	b.n	800708c <HAL_UART_Receive+0xfc>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10d      	bne.n	800705c <HAL_UART_Receive+0xcc>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <HAL_UART_Receive+0xc2>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2260      	movs	r2, #96	; 0x60
 800704c:	21ff      	movs	r1, #255	; 0xff
 800704e:	5299      	strh	r1, [r3, r2]
 8007050:	e01c      	b.n	800708c <HAL_UART_Receive+0xfc>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2260      	movs	r2, #96	; 0x60
 8007056:	217f      	movs	r1, #127	; 0x7f
 8007058:	5299      	strh	r1, [r3, r2]
 800705a:	e017      	b.n	800708c <HAL_UART_Receive+0xfc>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	055b      	lsls	r3, r3, #21
 8007064:	429a      	cmp	r2, r3
 8007066:	d10d      	bne.n	8007084 <HAL_UART_Receive+0xf4>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <HAL_UART_Receive+0xea>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2260      	movs	r2, #96	; 0x60
 8007074:	217f      	movs	r1, #127	; 0x7f
 8007076:	5299      	strh	r1, [r3, r2]
 8007078:	e008      	b.n	800708c <HAL_UART_Receive+0xfc>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2260      	movs	r2, #96	; 0x60
 800707e:	213f      	movs	r1, #63	; 0x3f
 8007080:	5299      	strh	r1, [r3, r2]
 8007082:	e003      	b.n	800708c <HAL_UART_Receive+0xfc>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2260      	movs	r2, #96	; 0x60
 8007088:	2100      	movs	r1, #0
 800708a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800708c:	2312      	movs	r3, #18
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	2160      	movs	r1, #96	; 0x60
 8007094:	5a52      	ldrh	r2, [r2, r1]
 8007096:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	015b      	lsls	r3, r3, #5
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d108      	bne.n	80070b6 <HAL_UART_Receive+0x126>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e003      	b.n	80070be <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80070be:	e036      	b.n	800712e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	0013      	movs	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	2120      	movs	r1, #32
 80070ce:	f000 fc01 	bl	80078d4 <UART_WaitOnFlagUntilTimeout>
 80070d2:	1e03      	subs	r3, r0, #0
 80070d4:	d001      	beq.n	80070da <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e036      	b.n	8007148 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10e      	bne.n	80070fe <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2212      	movs	r2, #18
 80070ea:	18ba      	adds	r2, r7, r2
 80070ec:	8812      	ldrh	r2, [r2, #0]
 80070ee:	4013      	ands	r3, r2
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3302      	adds	r3, #2
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e00e      	b.n	800711c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2212      	movs	r2, #18
 8007108:	18ba      	adds	r2, r7, r2
 800710a:	8812      	ldrh	r2, [r2, #0]
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	4013      	ands	r3, r2
 8007110:	b2da      	uxtb	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3301      	adds	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	225e      	movs	r2, #94	; 0x5e
 8007120:	5a9b      	ldrh	r3, [r3, r2]
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b299      	uxth	r1, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	225e      	movs	r2, #94	; 0x5e
 800712c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	225e      	movs	r2, #94	; 0x5e
 8007132:	5a9b      	ldrh	r3, [r3, r2]
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1c2      	bne.n	80070c0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	228c      	movs	r2, #140	; 0x8c
 800713e:	2120      	movs	r1, #32
 8007140:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e000      	b.n	8007148 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8007146:	2302      	movs	r3, #2
  }
}
 8007148:	0018      	movs	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	b008      	add	sp, #32
 800714e:	bd80      	pop	{r7, pc}
 8007150:	000001ff 	.word	0x000001ff

08007154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007154:	b5b0      	push	{r4, r5, r7, lr}
 8007156:	b090      	sub	sp, #64	; 0x40
 8007158:	af00      	add	r7, sp, #0
 800715a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715c:	231a      	movs	r3, #26
 800715e:	2220      	movs	r2, #32
 8007160:	189b      	adds	r3, r3, r2
 8007162:	19db      	adds	r3, r3, r7
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	431a      	orrs	r2, r3
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	4313      	orrs	r3, r2
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4aaf      	ldr	r2, [pc, #700]	; (8007444 <UART_SetConfig+0x2f0>)
 8007188:	4013      	ands	r3, r2
 800718a:	0019      	movs	r1, r3
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	430b      	orrs	r3, r1
 8007194:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4aaa      	ldr	r2, [pc, #680]	; (8007448 <UART_SetConfig+0x2f4>)
 800719e:	4013      	ands	r3, r2
 80071a0:	0018      	movs	r0, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	68d9      	ldr	r1, [r3, #12]
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	0003      	movs	r3, r0
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4aa4      	ldr	r2, [pc, #656]	; (800744c <UART_SetConfig+0x2f8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071c6:	4313      	orrs	r3, r2
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4a9f      	ldr	r2, [pc, #636]	; (8007450 <UART_SetConfig+0x2fc>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	0019      	movs	r1, r3
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071dc:	430b      	orrs	r3, r1
 80071de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	220f      	movs	r2, #15
 80071e8:	4393      	bics	r3, r2
 80071ea:	0018      	movs	r0, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	0003      	movs	r3, r0
 80071f6:	430b      	orrs	r3, r1
 80071f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a95      	ldr	r2, [pc, #596]	; (8007454 <UART_SetConfig+0x300>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d131      	bne.n	8007268 <UART_SetConfig+0x114>
 8007204:	4b94      	ldr	r3, [pc, #592]	; (8007458 <UART_SetConfig+0x304>)
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	2203      	movs	r2, #3
 800720a:	4013      	ands	r3, r2
 800720c:	2b03      	cmp	r3, #3
 800720e:	d01d      	beq.n	800724c <UART_SetConfig+0xf8>
 8007210:	d823      	bhi.n	800725a <UART_SetConfig+0x106>
 8007212:	2b02      	cmp	r3, #2
 8007214:	d00c      	beq.n	8007230 <UART_SetConfig+0xdc>
 8007216:	d820      	bhi.n	800725a <UART_SetConfig+0x106>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <UART_SetConfig+0xce>
 800721c:	2b01      	cmp	r3, #1
 800721e:	d00e      	beq.n	800723e <UART_SetConfig+0xea>
 8007220:	e01b      	b.n	800725a <UART_SetConfig+0x106>
 8007222:	231b      	movs	r3, #27
 8007224:	2220      	movs	r2, #32
 8007226:	189b      	adds	r3, r3, r2
 8007228:	19db      	adds	r3, r3, r7
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e0b4      	b.n	800739a <UART_SetConfig+0x246>
 8007230:	231b      	movs	r3, #27
 8007232:	2220      	movs	r2, #32
 8007234:	189b      	adds	r3, r3, r2
 8007236:	19db      	adds	r3, r3, r7
 8007238:	2202      	movs	r2, #2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e0ad      	b.n	800739a <UART_SetConfig+0x246>
 800723e:	231b      	movs	r3, #27
 8007240:	2220      	movs	r2, #32
 8007242:	189b      	adds	r3, r3, r2
 8007244:	19db      	adds	r3, r3, r7
 8007246:	2204      	movs	r2, #4
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e0a6      	b.n	800739a <UART_SetConfig+0x246>
 800724c:	231b      	movs	r3, #27
 800724e:	2220      	movs	r2, #32
 8007250:	189b      	adds	r3, r3, r2
 8007252:	19db      	adds	r3, r3, r7
 8007254:	2208      	movs	r2, #8
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e09f      	b.n	800739a <UART_SetConfig+0x246>
 800725a:	231b      	movs	r3, #27
 800725c:	2220      	movs	r2, #32
 800725e:	189b      	adds	r3, r3, r2
 8007260:	19db      	adds	r3, r3, r7
 8007262:	2210      	movs	r2, #16
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e098      	b.n	800739a <UART_SetConfig+0x246>
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7b      	ldr	r2, [pc, #492]	; (800745c <UART_SetConfig+0x308>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d131      	bne.n	80072d6 <UART_SetConfig+0x182>
 8007272:	4b79      	ldr	r3, [pc, #484]	; (8007458 <UART_SetConfig+0x304>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	220c      	movs	r2, #12
 8007278:	4013      	ands	r3, r2
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d01d      	beq.n	80072ba <UART_SetConfig+0x166>
 800727e:	d823      	bhi.n	80072c8 <UART_SetConfig+0x174>
 8007280:	2b08      	cmp	r3, #8
 8007282:	d00c      	beq.n	800729e <UART_SetConfig+0x14a>
 8007284:	d820      	bhi.n	80072c8 <UART_SetConfig+0x174>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <UART_SetConfig+0x13c>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d00e      	beq.n	80072ac <UART_SetConfig+0x158>
 800728e:	e01b      	b.n	80072c8 <UART_SetConfig+0x174>
 8007290:	231b      	movs	r3, #27
 8007292:	2220      	movs	r2, #32
 8007294:	189b      	adds	r3, r3, r2
 8007296:	19db      	adds	r3, r3, r7
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e07d      	b.n	800739a <UART_SetConfig+0x246>
 800729e:	231b      	movs	r3, #27
 80072a0:	2220      	movs	r2, #32
 80072a2:	189b      	adds	r3, r3, r2
 80072a4:	19db      	adds	r3, r3, r7
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e076      	b.n	800739a <UART_SetConfig+0x246>
 80072ac:	231b      	movs	r3, #27
 80072ae:	2220      	movs	r2, #32
 80072b0:	189b      	adds	r3, r3, r2
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	2204      	movs	r2, #4
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e06f      	b.n	800739a <UART_SetConfig+0x246>
 80072ba:	231b      	movs	r3, #27
 80072bc:	2220      	movs	r2, #32
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	19db      	adds	r3, r3, r7
 80072c2:	2208      	movs	r2, #8
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e068      	b.n	800739a <UART_SetConfig+0x246>
 80072c8:	231b      	movs	r3, #27
 80072ca:	2220      	movs	r2, #32
 80072cc:	189b      	adds	r3, r3, r2
 80072ce:	19db      	adds	r3, r3, r7
 80072d0:	2210      	movs	r2, #16
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e061      	b.n	800739a <UART_SetConfig+0x246>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a61      	ldr	r2, [pc, #388]	; (8007460 <UART_SetConfig+0x30c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d106      	bne.n	80072ee <UART_SetConfig+0x19a>
 80072e0:	231b      	movs	r3, #27
 80072e2:	2220      	movs	r2, #32
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	19db      	adds	r3, r3, r7
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e055      	b.n	800739a <UART_SetConfig+0x246>
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a5c      	ldr	r2, [pc, #368]	; (8007464 <UART_SetConfig+0x310>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d106      	bne.n	8007306 <UART_SetConfig+0x1b2>
 80072f8:	231b      	movs	r3, #27
 80072fa:	2220      	movs	r2, #32
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	19db      	adds	r3, r3, r7
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e049      	b.n	800739a <UART_SetConfig+0x246>
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a50      	ldr	r2, [pc, #320]	; (800744c <UART_SetConfig+0x2f8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d13e      	bne.n	800738e <UART_SetConfig+0x23a>
 8007310:	4b51      	ldr	r3, [pc, #324]	; (8007458 <UART_SetConfig+0x304>)
 8007312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007314:	23c0      	movs	r3, #192	; 0xc0
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	4013      	ands	r3, r2
 800731a:	22c0      	movs	r2, #192	; 0xc0
 800731c:	0112      	lsls	r2, r2, #4
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <UART_SetConfig+0x21e>
 8007322:	22c0      	movs	r2, #192	; 0xc0
 8007324:	0112      	lsls	r2, r2, #4
 8007326:	4293      	cmp	r3, r2
 8007328:	d82a      	bhi.n	8007380 <UART_SetConfig+0x22c>
 800732a:	2280      	movs	r2, #128	; 0x80
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	4293      	cmp	r3, r2
 8007330:	d011      	beq.n	8007356 <UART_SetConfig+0x202>
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	0112      	lsls	r2, r2, #4
 8007336:	4293      	cmp	r3, r2
 8007338:	d822      	bhi.n	8007380 <UART_SetConfig+0x22c>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <UART_SetConfig+0x1f4>
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	00d2      	lsls	r2, r2, #3
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <UART_SetConfig+0x210>
 8007346:	e01b      	b.n	8007380 <UART_SetConfig+0x22c>
 8007348:	231b      	movs	r3, #27
 800734a:	2220      	movs	r2, #32
 800734c:	189b      	adds	r3, r3, r2
 800734e:	19db      	adds	r3, r3, r7
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e021      	b.n	800739a <UART_SetConfig+0x246>
 8007356:	231b      	movs	r3, #27
 8007358:	2220      	movs	r2, #32
 800735a:	189b      	adds	r3, r3, r2
 800735c:	19db      	adds	r3, r3, r7
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e01a      	b.n	800739a <UART_SetConfig+0x246>
 8007364:	231b      	movs	r3, #27
 8007366:	2220      	movs	r2, #32
 8007368:	189b      	adds	r3, r3, r2
 800736a:	19db      	adds	r3, r3, r7
 800736c:	2204      	movs	r2, #4
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e013      	b.n	800739a <UART_SetConfig+0x246>
 8007372:	231b      	movs	r3, #27
 8007374:	2220      	movs	r2, #32
 8007376:	189b      	adds	r3, r3, r2
 8007378:	19db      	adds	r3, r3, r7
 800737a:	2208      	movs	r2, #8
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e00c      	b.n	800739a <UART_SetConfig+0x246>
 8007380:	231b      	movs	r3, #27
 8007382:	2220      	movs	r2, #32
 8007384:	189b      	adds	r3, r3, r2
 8007386:	19db      	adds	r3, r3, r7
 8007388:	2210      	movs	r2, #16
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e005      	b.n	800739a <UART_SetConfig+0x246>
 800738e:	231b      	movs	r3, #27
 8007390:	2220      	movs	r2, #32
 8007392:	189b      	adds	r3, r3, r2
 8007394:	19db      	adds	r3, r3, r7
 8007396:	2210      	movs	r2, #16
 8007398:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2b      	ldr	r2, [pc, #172]	; (800744c <UART_SetConfig+0x2f8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d000      	beq.n	80073a6 <UART_SetConfig+0x252>
 80073a4:	e0a9      	b.n	80074fa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073a6:	231b      	movs	r3, #27
 80073a8:	2220      	movs	r2, #32
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	19db      	adds	r3, r3, r7
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d015      	beq.n	80073e0 <UART_SetConfig+0x28c>
 80073b4:	dc18      	bgt.n	80073e8 <UART_SetConfig+0x294>
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d00d      	beq.n	80073d6 <UART_SetConfig+0x282>
 80073ba:	dc15      	bgt.n	80073e8 <UART_SetConfig+0x294>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <UART_SetConfig+0x272>
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d005      	beq.n	80073d0 <UART_SetConfig+0x27c>
 80073c4:	e010      	b.n	80073e8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7fd fb9f 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 80073ca:	0003      	movs	r3, r0
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ce:	e014      	b.n	80073fa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <UART_SetConfig+0x314>)
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d4:	e011      	b.n	80073fa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fd fb0b 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80073da:	0003      	movs	r3, r0
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073de:	e00c      	b.n	80073fa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e0:	2380      	movs	r3, #128	; 0x80
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e6:	e008      	b.n	80073fa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073ec:	231a      	movs	r3, #26
 80073ee:	2220      	movs	r2, #32
 80073f0:	189b      	adds	r3, r3, r2
 80073f2:	19db      	adds	r3, r3, r7
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
        break;
 80073f8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d100      	bne.n	8007402 <UART_SetConfig+0x2ae>
 8007400:	e14b      	b.n	800769a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007406:	4b19      	ldr	r3, [pc, #100]	; (800746c <UART_SetConfig+0x318>)
 8007408:	0052      	lsls	r2, r2, #1
 800740a:	5ad3      	ldrh	r3, [r2, r3]
 800740c:	0019      	movs	r1, r3
 800740e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007410:	f7f8 fe94 	bl	800013c <__udivsi3>
 8007414:	0003      	movs	r3, r0
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	0013      	movs	r3, r2
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	189b      	adds	r3, r3, r2
 8007422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007424:	429a      	cmp	r2, r3
 8007426:	d305      	bcc.n	8007434 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800742e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007430:	429a      	cmp	r2, r3
 8007432:	d91d      	bls.n	8007470 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007434:	231a      	movs	r3, #26
 8007436:	2220      	movs	r2, #32
 8007438:	189b      	adds	r3, r3, r2
 800743a:	19db      	adds	r3, r3, r7
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e12b      	b.n	800769a <UART_SetConfig+0x546>
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	cfff69f3 	.word	0xcfff69f3
 8007448:	ffffcfff 	.word	0xffffcfff
 800744c:	40008000 	.word	0x40008000
 8007450:	11fff4ff 	.word	0x11fff4ff
 8007454:	40013800 	.word	0x40013800
 8007458:	40021000 	.word	0x40021000
 800745c:	40004400 	.word	0x40004400
 8007460:	40004800 	.word	0x40004800
 8007464:	40004c00 	.word	0x40004c00
 8007468:	00f42400 	.word	0x00f42400
 800746c:	0801485c 	.word	0x0801485c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800747c:	4b92      	ldr	r3, [pc, #584]	; (80076c8 <UART_SetConfig+0x574>)
 800747e:	0052      	lsls	r2, r2, #1
 8007480:	5ad3      	ldrh	r3, [r2, r3]
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	69b8      	ldr	r0, [r7, #24]
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	f7f9 f808 	bl	80004a4 <__aeabi_uldivmod>
 8007494:	0002      	movs	r2, r0
 8007496:	000b      	movs	r3, r1
 8007498:	0e11      	lsrs	r1, r2, #24
 800749a:	021d      	lsls	r5, r3, #8
 800749c:	430d      	orrs	r5, r1
 800749e:	0214      	lsls	r4, r2, #8
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68b8      	ldr	r0, [r7, #8]
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	1900      	adds	r0, r0, r4
 80074b2:	4169      	adcs	r1, r5
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f7f8 ffef 	bl	80004a4 <__aeabi_uldivmod>
 80074c6:	0002      	movs	r2, r0
 80074c8:	000b      	movs	r3, r1
 80074ca:	0013      	movs	r3, r2
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d0:	23c0      	movs	r3, #192	; 0xc0
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d309      	bcc.n	80074ec <UART_SetConfig+0x398>
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	035b      	lsls	r3, r3, #13
 80074de:	429a      	cmp	r2, r3
 80074e0:	d204      	bcs.n	80074ec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e0d6      	b.n	800769a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80074ec:	231a      	movs	r3, #26
 80074ee:	2220      	movs	r2, #32
 80074f0:	189b      	adds	r3, r3, r2
 80074f2:	19db      	adds	r3, r3, r7
 80074f4:	2201      	movs	r2, #1
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e0cf      	b.n	800769a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	69da      	ldr	r2, [r3, #28]
 80074fe:	2380      	movs	r3, #128	; 0x80
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	429a      	cmp	r2, r3
 8007504:	d000      	beq.n	8007508 <UART_SetConfig+0x3b4>
 8007506:	e070      	b.n	80075ea <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007508:	231b      	movs	r3, #27
 800750a:	2220      	movs	r2, #32
 800750c:	189b      	adds	r3, r3, r2
 800750e:	19db      	adds	r3, r3, r7
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b08      	cmp	r3, #8
 8007514:	d015      	beq.n	8007542 <UART_SetConfig+0x3ee>
 8007516:	dc18      	bgt.n	800754a <UART_SetConfig+0x3f6>
 8007518:	2b04      	cmp	r3, #4
 800751a:	d00d      	beq.n	8007538 <UART_SetConfig+0x3e4>
 800751c:	dc15      	bgt.n	800754a <UART_SetConfig+0x3f6>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x3d4>
 8007522:	2b02      	cmp	r3, #2
 8007524:	d005      	beq.n	8007532 <UART_SetConfig+0x3de>
 8007526:	e010      	b.n	800754a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fd faee 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 800752c:	0003      	movs	r3, r0
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007530:	e014      	b.n	800755c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007532:	4b66      	ldr	r3, [pc, #408]	; (80076cc <UART_SetConfig+0x578>)
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007536:	e011      	b.n	800755c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007538:	f7fd fa5a 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 800753c:	0003      	movs	r3, r0
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007540:	e00c      	b.n	800755c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	2380      	movs	r3, #128	; 0x80
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007548:	e008      	b.n	800755c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800754e:	231a      	movs	r3, #26
 8007550:	2220      	movs	r2, #32
 8007552:	189b      	adds	r3, r3, r2
 8007554:	19db      	adds	r3, r3, r7
 8007556:	2201      	movs	r2, #1
 8007558:	701a      	strb	r2, [r3, #0]
        break;
 800755a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	2b00      	cmp	r3, #0
 8007560:	d100      	bne.n	8007564 <UART_SetConfig+0x410>
 8007562:	e09a      	b.n	800769a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007568:	4b57      	ldr	r3, [pc, #348]	; (80076c8 <UART_SetConfig+0x574>)
 800756a:	0052      	lsls	r2, r2, #1
 800756c:	5ad3      	ldrh	r3, [r2, r3]
 800756e:	0019      	movs	r1, r3
 8007570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007572:	f7f8 fde3 	bl	800013c <__udivsi3>
 8007576:	0003      	movs	r3, r0
 8007578:	005a      	lsls	r2, r3, #1
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	18d2      	adds	r2, r2, r3
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	0019      	movs	r1, r3
 8007588:	0010      	movs	r0, r2
 800758a:	f7f8 fdd7 	bl	800013c <__udivsi3>
 800758e:	0003      	movs	r3, r0
 8007590:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	2b0f      	cmp	r3, #15
 8007596:	d921      	bls.n	80075dc <UART_SetConfig+0x488>
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	429a      	cmp	r2, r3
 80075a0:	d21c      	bcs.n	80075dc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	200e      	movs	r0, #14
 80075a8:	2420      	movs	r4, #32
 80075aa:	1903      	adds	r3, r0, r4
 80075ac:	19db      	adds	r3, r3, r7
 80075ae:	210f      	movs	r1, #15
 80075b0:	438a      	bics	r2, r1
 80075b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2207      	movs	r2, #7
 80075bc:	4013      	ands	r3, r2
 80075be:	b299      	uxth	r1, r3
 80075c0:	1903      	adds	r3, r0, r4
 80075c2:	19db      	adds	r3, r3, r7
 80075c4:	1902      	adds	r2, r0, r4
 80075c6:	19d2      	adds	r2, r2, r7
 80075c8:	8812      	ldrh	r2, [r2, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	1902      	adds	r2, r0, r4
 80075d4:	19d2      	adds	r2, r2, r7
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	e05e      	b.n	800769a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80075dc:	231a      	movs	r3, #26
 80075de:	2220      	movs	r2, #32
 80075e0:	189b      	adds	r3, r3, r2
 80075e2:	19db      	adds	r3, r3, r7
 80075e4:	2201      	movs	r2, #1
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e057      	b.n	800769a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075ea:	231b      	movs	r3, #27
 80075ec:	2220      	movs	r2, #32
 80075ee:	189b      	adds	r3, r3, r2
 80075f0:	19db      	adds	r3, r3, r7
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d015      	beq.n	8007624 <UART_SetConfig+0x4d0>
 80075f8:	dc18      	bgt.n	800762c <UART_SetConfig+0x4d8>
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d00d      	beq.n	800761a <UART_SetConfig+0x4c6>
 80075fe:	dc15      	bgt.n	800762c <UART_SetConfig+0x4d8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <UART_SetConfig+0x4b6>
 8007604:	2b02      	cmp	r3, #2
 8007606:	d005      	beq.n	8007614 <UART_SetConfig+0x4c0>
 8007608:	e010      	b.n	800762c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760a:	f7fd fa7d 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 800760e:	0003      	movs	r3, r0
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007612:	e014      	b.n	800763e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007614:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <UART_SetConfig+0x578>)
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007618:	e011      	b.n	800763e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761a:	f7fd f9e9 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 800761e:	0003      	movs	r3, r0
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007622:	e00c      	b.n	800763e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800762a:	e008      	b.n	800763e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007630:	231a      	movs	r3, #26
 8007632:	2220      	movs	r2, #32
 8007634:	189b      	adds	r3, r3, r2
 8007636:	19db      	adds	r3, r3, r7
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
        break;
 800763c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02a      	beq.n	800769a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <UART_SetConfig+0x574>)
 800764a:	0052      	lsls	r2, r2, #1
 800764c:	5ad3      	ldrh	r3, [r2, r3]
 800764e:	0019      	movs	r1, r3
 8007650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007652:	f7f8 fd73 	bl	800013c <__udivsi3>
 8007656:	0003      	movs	r3, r0
 8007658:	001a      	movs	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	18d2      	adds	r2, r2, r3
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	0019      	movs	r1, r3
 8007668:	0010      	movs	r0, r2
 800766a:	f7f8 fd67 	bl	800013c <__udivsi3>
 800766e:	0003      	movs	r3, r0
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d90a      	bls.n	800768e <UART_SetConfig+0x53a>
 8007678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767a:	2380      	movs	r3, #128	; 0x80
 800767c:	025b      	lsls	r3, r3, #9
 800767e:	429a      	cmp	r2, r3
 8007680:	d205      	bcs.n	800768e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	b29a      	uxth	r2, r3
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60da      	str	r2, [r3, #12]
 800768c:	e005      	b.n	800769a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800768e:	231a      	movs	r3, #26
 8007690:	2220      	movs	r2, #32
 8007692:	189b      	adds	r3, r3, r2
 8007694:	19db      	adds	r3, r3, r7
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	226a      	movs	r2, #106	; 0x6a
 800769e:	2101      	movs	r1, #1
 80076a0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2268      	movs	r2, #104	; 0x68
 80076a6:	2101      	movs	r1, #1
 80076a8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2200      	movs	r2, #0
 80076ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	2200      	movs	r2, #0
 80076b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80076b6:	231a      	movs	r3, #26
 80076b8:	2220      	movs	r2, #32
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	19db      	adds	r3, r3, r7
 80076be:	781b      	ldrb	r3, [r3, #0]
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b010      	add	sp, #64	; 0x40
 80076c6:	bdb0      	pop	{r4, r5, r7, pc}
 80076c8:	0801485c 	.word	0x0801485c
 80076cc:	00f42400 	.word	0x00f42400

080076d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	2201      	movs	r2, #1
 80076de:	4013      	ands	r3, r2
 80076e0:	d00b      	beq.n	80076fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4a4a      	ldr	r2, [pc, #296]	; (8007814 <UART_AdvFeatureConfig+0x144>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	0019      	movs	r1, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	2202      	movs	r2, #2
 8007700:	4013      	ands	r3, r2
 8007702:	d00b      	beq.n	800771c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4a43      	ldr	r2, [pc, #268]	; (8007818 <UART_AdvFeatureConfig+0x148>)
 800770c:	4013      	ands	r3, r2
 800770e:	0019      	movs	r1, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	2204      	movs	r2, #4
 8007722:	4013      	ands	r3, r2
 8007724:	d00b      	beq.n	800773e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4a3b      	ldr	r2, [pc, #236]	; (800781c <UART_AdvFeatureConfig+0x14c>)
 800772e:	4013      	ands	r3, r2
 8007730:	0019      	movs	r1, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	2208      	movs	r2, #8
 8007744:	4013      	ands	r3, r2
 8007746:	d00b      	beq.n	8007760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	4a34      	ldr	r2, [pc, #208]	; (8007820 <UART_AdvFeatureConfig+0x150>)
 8007750:	4013      	ands	r3, r2
 8007752:	0019      	movs	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	2210      	movs	r2, #16
 8007766:	4013      	ands	r3, r2
 8007768:	d00b      	beq.n	8007782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	4a2c      	ldr	r2, [pc, #176]	; (8007824 <UART_AdvFeatureConfig+0x154>)
 8007772:	4013      	ands	r3, r2
 8007774:	0019      	movs	r1, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2220      	movs	r2, #32
 8007788:	4013      	ands	r3, r2
 800778a:	d00b      	beq.n	80077a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	4a25      	ldr	r2, [pc, #148]	; (8007828 <UART_AdvFeatureConfig+0x158>)
 8007794:	4013      	ands	r3, r2
 8007796:	0019      	movs	r1, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	2240      	movs	r2, #64	; 0x40
 80077aa:	4013      	ands	r3, r2
 80077ac:	d01d      	beq.n	80077ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a1d      	ldr	r2, [pc, #116]	; (800782c <UART_AdvFeatureConfig+0x15c>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	0019      	movs	r1, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ca:	2380      	movs	r3, #128	; 0x80
 80077cc:	035b      	lsls	r3, r3, #13
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d10b      	bne.n	80077ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4a15      	ldr	r2, [pc, #84]	; (8007830 <UART_AdvFeatureConfig+0x160>)
 80077da:	4013      	ands	r3, r2
 80077dc:	0019      	movs	r1, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	2280      	movs	r2, #128	; 0x80
 80077f0:	4013      	ands	r3, r2
 80077f2:	d00b      	beq.n	800780c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <UART_AdvFeatureConfig+0x164>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	0019      	movs	r1, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	605a      	str	r2, [r3, #4]
  }
}
 800780c:	46c0      	nop			; (mov r8, r8)
 800780e:	46bd      	mov	sp, r7
 8007810:	b002      	add	sp, #8
 8007812:	bd80      	pop	{r7, pc}
 8007814:	fffdffff 	.word	0xfffdffff
 8007818:	fffeffff 	.word	0xfffeffff
 800781c:	fffbffff 	.word	0xfffbffff
 8007820:	ffff7fff 	.word	0xffff7fff
 8007824:	ffffefff 	.word	0xffffefff
 8007828:	ffffdfff 	.word	0xffffdfff
 800782c:	ffefffff 	.word	0xffefffff
 8007830:	ff9fffff 	.word	0xff9fffff
 8007834:	fff7ffff 	.word	0xfff7ffff

08007838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2290      	movs	r2, #144	; 0x90
 8007844:	2100      	movs	r1, #0
 8007846:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007848:	f7fc f8bc 	bl	80039c4 <HAL_GetTick>
 800784c:	0003      	movs	r3, r0
 800784e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2208      	movs	r2, #8
 8007858:	4013      	ands	r3, r2
 800785a:	2b08      	cmp	r3, #8
 800785c:	d10c      	bne.n	8007878 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2280      	movs	r2, #128	; 0x80
 8007862:	0391      	lsls	r1, r2, #14
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4a1a      	ldr	r2, [pc, #104]	; (80078d0 <UART_CheckIdleState+0x98>)
 8007868:	9200      	str	r2, [sp, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	f000 f832 	bl	80078d4 <UART_WaitOnFlagUntilTimeout>
 8007870:	1e03      	subs	r3, r0, #0
 8007872:	d001      	beq.n	8007878 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e026      	b.n	80078c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2204      	movs	r2, #4
 8007880:	4013      	ands	r3, r2
 8007882:	2b04      	cmp	r3, #4
 8007884:	d10c      	bne.n	80078a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2280      	movs	r2, #128	; 0x80
 800788a:	03d1      	lsls	r1, r2, #15
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4a10      	ldr	r2, [pc, #64]	; (80078d0 <UART_CheckIdleState+0x98>)
 8007890:	9200      	str	r2, [sp, #0]
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f81e 	bl	80078d4 <UART_WaitOnFlagUntilTimeout>
 8007898:	1e03      	subs	r3, r0, #0
 800789a:	d001      	beq.n	80078a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e012      	b.n	80078c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2288      	movs	r2, #136	; 0x88
 80078a4:	2120      	movs	r1, #32
 80078a6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	228c      	movs	r2, #140	; 0x8c
 80078ac:	2120      	movs	r1, #32
 80078ae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2284      	movs	r2, #132	; 0x84
 80078c0:	2100      	movs	r1, #0
 80078c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	0018      	movs	r0, r3
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b004      	add	sp, #16
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	01ffffff 	.word	0x01ffffff

080078d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b094      	sub	sp, #80	; 0x50
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	1dfb      	adds	r3, r7, #7
 80078e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e4:	e0a7      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078e8:	3301      	adds	r3, #1
 80078ea:	d100      	bne.n	80078ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80078ec:	e0a3      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ee:	f7fc f869 	bl	80039c4 <HAL_GetTick>
 80078f2:	0002      	movs	r2, r0
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <UART_WaitOnFlagUntilTimeout+0x30>
 80078fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007900:	2b00      	cmp	r3, #0
 8007902:	d13f      	bne.n	8007984 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007904:	f3ef 8310 	mrs	r3, PRIMASK
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800790c:	647b      	str	r3, [r7, #68]	; 0x44
 800790e:	2301      	movs	r3, #1
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	f383 8810 	msr	PRIMASK, r3
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	494e      	ldr	r1, [pc, #312]	; (8007a60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007926:	400a      	ands	r2, r1
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800792c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f383 8810 	msr	PRIMASK, r3
}
 8007934:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007936:	f3ef 8310 	mrs	r3, PRIMASK
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	643b      	str	r3, [r7, #64]	; 0x40
 8007940:	2301      	movs	r3, #1
 8007942:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	f383 8810 	msr	PRIMASK, r3
}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2101      	movs	r1, #1
 8007958:	438a      	bics	r2, r1
 800795a:	609a      	str	r2, [r3, #8]
 800795c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	f383 8810 	msr	PRIMASK, r3
}
 8007966:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2288      	movs	r2, #136	; 0x88
 800796c:	2120      	movs	r1, #32
 800796e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	228c      	movs	r2, #140	; 0x8c
 8007974:	2120      	movs	r1, #32
 8007976:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2284      	movs	r2, #132	; 0x84
 800797c:	2100      	movs	r1, #0
 800797e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e069      	b.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2204      	movs	r2, #4
 800798c:	4013      	ands	r3, r2
 800798e:	d052      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69da      	ldr	r2, [r3, #28]
 8007996:	2380      	movs	r3, #128	; 0x80
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	401a      	ands	r2, r3
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d148      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2280      	movs	r2, #128	; 0x80
 80079aa:	0112      	lsls	r2, r2, #4
 80079ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ae:	f3ef 8310 	mrs	r3, PRIMASK
 80079b2:	613b      	str	r3, [r7, #16]
  return(result);
 80079b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4924      	ldr	r1, [pc, #144]	; (8007a60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80079d0:	400a      	ands	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f383 8810 	msr	PRIMASK, r3
}
 80079de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e0:	f3ef 8310 	mrs	r3, PRIMASK
 80079e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80079e6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ea:	2301      	movs	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	f383 8810 	msr	PRIMASK, r3
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2101      	movs	r1, #1
 8007a02:	438a      	bics	r2, r1
 8007a04:	609a      	str	r2, [r3, #8]
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	f383 8810 	msr	PRIMASK, r3
}
 8007a10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2288      	movs	r2, #136	; 0x88
 8007a16:	2120      	movs	r1, #32
 8007a18:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	228c      	movs	r2, #140	; 0x8c
 8007a1e:	2120      	movs	r1, #32
 8007a20:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2290      	movs	r2, #144	; 0x90
 8007a26:	2120      	movs	r1, #32
 8007a28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2284      	movs	r2, #132	; 0x84
 8007a2e:	2100      	movs	r1, #0
 8007a30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e010      	b.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	425a      	negs	r2, r3
 8007a46:	4153      	adcs	r3, r2
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	1dfb      	adds	r3, r7, #7
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d100      	bne.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x182>
 8007a54:	e747      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b014      	add	sp, #80	; 0x50
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	fffffe5f 	.word	0xfffffe5f

08007a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2284      	movs	r2, #132	; 0x84
 8007a70:	5c9b      	ldrb	r3, [r3, r2]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e027      	b.n	8007aca <HAL_UARTEx_DisableFifoMode+0x66>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2284      	movs	r2, #132	; 0x84
 8007a7e:	2101      	movs	r1, #1
 8007a80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2288      	movs	r2, #136	; 0x88
 8007a86:	2124      	movs	r1, #36	; 0x24
 8007a88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	438a      	bics	r2, r1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a0b      	ldr	r2, [pc, #44]	; (8007ad4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2288      	movs	r2, #136	; 0x88
 8007abc:	2120      	movs	r1, #32
 8007abe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2284      	movs	r2, #132	; 0x84
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	0018      	movs	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b004      	add	sp, #16
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	dfffffff 	.word	0xdfffffff

08007ad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2284      	movs	r2, #132	; 0x84
 8007ae6:	5c9b      	ldrb	r3, [r3, r2]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e02e      	b.n	8007b4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2284      	movs	r2, #132	; 0x84
 8007af4:	2101      	movs	r1, #1
 8007af6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2288      	movs	r2, #136	; 0x88
 8007afc:	2124      	movs	r1, #36	; 0x24
 8007afe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2101      	movs	r1, #1
 8007b14:	438a      	bics	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	08d9      	lsrs	r1, r3, #3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f000 f854 	bl	8007bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2288      	movs	r2, #136	; 0x88
 8007b40:	2120      	movs	r1, #32
 8007b42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2284      	movs	r2, #132	; 0x84
 8007b48:	2100      	movs	r1, #0
 8007b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b004      	add	sp, #16
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2284      	movs	r2, #132	; 0x84
 8007b66:	5c9b      	ldrb	r3, [r3, r2]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e02f      	b.n	8007bd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2284      	movs	r2, #132	; 0x84
 8007b74:	2101      	movs	r1, #1
 8007b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2288      	movs	r2, #136	; 0x88
 8007b7c:	2124      	movs	r1, #36	; 0x24
 8007b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2101      	movs	r1, #1
 8007b94:	438a      	bics	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f000 f813 	bl	8007bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2288      	movs	r2, #136	; 0x88
 8007bc2:	2120      	movs	r1, #32
 8007bc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2284      	movs	r2, #132	; 0x84
 8007bca:	2100      	movs	r1, #0
 8007bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b004      	add	sp, #16
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	f1ffffff 	.word	0xf1ffffff

08007bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	226a      	movs	r2, #106	; 0x6a
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2268      	movs	r2, #104	; 0x68
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bfc:	e043      	b.n	8007c86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bfe:	260f      	movs	r6, #15
 8007c00:	19bb      	adds	r3, r7, r6
 8007c02:	2208      	movs	r2, #8
 8007c04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c06:	200e      	movs	r0, #14
 8007c08:	183b      	adds	r3, r7, r0
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	0e5b      	lsrs	r3, r3, #25
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	240d      	movs	r4, #13
 8007c1a:	193b      	adds	r3, r7, r4
 8007c1c:	2107      	movs	r1, #7
 8007c1e:	400a      	ands	r2, r1
 8007c20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	0f5b      	lsrs	r3, r3, #29
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	250c      	movs	r5, #12
 8007c2e:	197b      	adds	r3, r7, r5
 8007c30:	2107      	movs	r1, #7
 8007c32:	400a      	ands	r2, r1
 8007c34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c36:	183b      	adds	r3, r7, r0
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	197a      	adds	r2, r7, r5
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	4914      	ldr	r1, [pc, #80]	; (8007c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c40:	5c8a      	ldrb	r2, [r1, r2]
 8007c42:	435a      	muls	r2, r3
 8007c44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c46:	197b      	adds	r3, r7, r5
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	4a12      	ldr	r2, [pc, #72]	; (8007c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c4e:	0019      	movs	r1, r3
 8007c50:	f7f8 fafe 	bl	8000250 <__divsi3>
 8007c54:	0003      	movs	r3, r0
 8007c56:	b299      	uxth	r1, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	226a      	movs	r2, #106	; 0x6a
 8007c5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c5e:	19bb      	adds	r3, r7, r6
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	193a      	adds	r2, r7, r4
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	490a      	ldr	r1, [pc, #40]	; (8007c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c68:	5c8a      	ldrb	r2, [r1, r2]
 8007c6a:	435a      	muls	r2, r3
 8007c6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c6e:	193b      	adds	r3, r7, r4
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	4a08      	ldr	r2, [pc, #32]	; (8007c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c76:	0019      	movs	r1, r3
 8007c78:	f7f8 faea 	bl	8000250 <__divsi3>
 8007c7c:	0003      	movs	r3, r0
 8007c7e:	b299      	uxth	r1, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2268      	movs	r2, #104	; 0x68
 8007c84:	5299      	strh	r1, [r3, r2]
}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	b005      	add	sp, #20
 8007c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	08014874 	.word	0x08014874
 8007c94:	0801487c 	.word	0x0801487c

08007c98 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b0e4      	sub	sp, #400	; 0x190
 8007c9c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c9e:	24c8      	movs	r4, #200	; 0xc8
 8007ca0:	193b      	adds	r3, r7, r4
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	23c6      	movs	r3, #198	; 0xc6
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f004 fb63 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <astronode_send_cfg_sr+0x64>)
 8007cb0:	25c8      	movs	r5, #200	; 0xc8
 8007cb2:	006d      	lsls	r5, r5, #1
 8007cb4:	195b      	adds	r3, r3, r5
 8007cb6:	19db      	adds	r3, r3, r7
 8007cb8:	0018      	movs	r0, r3
 8007cba:	23c6      	movs	r3, #198	; 0xc6
 8007cbc:	001a      	movs	r2, r3
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f004 fb58 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007cc4:	193b      	adds	r3, r7, r4
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007cca:	003a      	movs	r2, r7
 8007ccc:	193b      	adds	r3, r7, r4
 8007cce:	0011      	movs	r1, r2
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f001 faad 	bl	8009230 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <astronode_send_cfg_sr+0x64>)
 8007cd8:	195b      	adds	r3, r3, r5
 8007cda:	19db      	adds	r3, r3, r7
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b90      	cmp	r3, #144	; 0x90
 8007ce0:	d104      	bne.n	8007cec <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <astronode_send_cfg_sr+0x68>)
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7fb f8c1 	bl	8002e6c <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007cea:	e003      	b.n	8007cf4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <astronode_send_cfg_sr+0x6c>)
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7fb f8bc 	bl	8002e6c <send_debug_logs>
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b064      	add	sp, #400	; 0x190
 8007cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfc:	fffffe70 	.word	0xfffffe70
 8007d00:	080133e4 	.word	0x080133e4
 8007d04:	08013418 	.word	0x08013418

08007d08 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	b0e7      	sub	sp, #412	; 0x19c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	0005      	movs	r5, r0
 8007d10:	000c      	movs	r4, r1
 8007d12:	0010      	movs	r0, r2
 8007d14:	0019      	movs	r1, r3
 8007d16:	4b4b      	ldr	r3, [pc, #300]	; (8007e44 <astronode_send_cfg_wr+0x13c>)
 8007d18:	26cc      	movs	r6, #204	; 0xcc
 8007d1a:	0076      	lsls	r6, r6, #1
 8007d1c:	199b      	adds	r3, r3, r6
 8007d1e:	19db      	adds	r3, r3, r7
 8007d20:	1c2a      	adds	r2, r5, #0
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	4b48      	ldr	r3, [pc, #288]	; (8007e48 <astronode_send_cfg_wr+0x140>)
 8007d26:	0035      	movs	r5, r6
 8007d28:	195b      	adds	r3, r3, r5
 8007d2a:	19db      	adds	r3, r3, r7
 8007d2c:	1c22      	adds	r2, r4, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	4b46      	ldr	r3, [pc, #280]	; (8007e4c <astronode_send_cfg_wr+0x144>)
 8007d32:	002c      	movs	r4, r5
 8007d34:	191b      	adds	r3, r3, r4
 8007d36:	19db      	adds	r3, r3, r7
 8007d38:	1c02      	adds	r2, r0, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	4b44      	ldr	r3, [pc, #272]	; (8007e50 <astronode_send_cfg_wr+0x148>)
 8007d3e:	191b      	adds	r3, r3, r4
 8007d40:	19db      	adds	r3, r3, r7
 8007d42:	1c0a      	adds	r2, r1, #0
 8007d44:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007d46:	25d0      	movs	r5, #208	; 0xd0
 8007d48:	197b      	adds	r3, r7, r5
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	23c6      	movs	r3, #198	; 0xc6
 8007d4e:	001a      	movs	r2, r3
 8007d50:	2100      	movs	r1, #0
 8007d52:	f004 fb0f 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <astronode_send_cfg_wr+0x14c>)
 8007d58:	191b      	adds	r3, r3, r4
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	23c6      	movs	r3, #198	; 0xc6
 8007d60:	001a      	movs	r2, r3
 8007d62:	2100      	movs	r1, #0
 8007d64:	f004 fb06 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007d68:	0029      	movs	r1, r5
 8007d6a:	187b      	adds	r3, r7, r1
 8007d6c:	2205      	movs	r2, #5
 8007d6e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007d70:	4b34      	ldr	r3, [pc, #208]	; (8007e44 <astronode_send_cfg_wr+0x13c>)
 8007d72:	191b      	adds	r3, r3, r4
 8007d74:	19db      	adds	r3, r3, r7
 8007d76:	2200      	movs	r2, #0
 8007d78:	569a      	ldrsb	r2, [r3, r2]
 8007d7a:	4b33      	ldr	r3, [pc, #204]	; (8007e48 <astronode_send_cfg_wr+0x140>)
 8007d7c:	191b      	adds	r3, r3, r4
 8007d7e:	19db      	adds	r3, r3, r7
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007d8a:	4b30      	ldr	r3, [pc, #192]	; (8007e4c <astronode_send_cfg_wr+0x144>)
 8007d8c:	191b      	adds	r3, r3, r4
 8007d8e:	19db      	adds	r3, r3, r7
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007d9a:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <astronode_send_cfg_wr+0x148>)
 8007d9c:	191b      	adds	r3, r3, r4
 8007d9e:	19db      	adds	r3, r3, r7
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	4313      	orrs	r3, r2
 8007da8:	b25b      	sxtb	r3, r3
 8007daa:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007db0:	23d4      	movs	r3, #212	; 0xd4
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	2508      	movs	r5, #8
 8007db6:	195b      	adds	r3, r3, r5
 8007db8:	19db      	adds	r3, r3, r7
 8007dba:	2200      	movs	r2, #0
 8007dbc:	569a      	ldrsb	r2, [r3, r2]
 8007dbe:	23d6      	movs	r3, #214	; 0xd6
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	195b      	adds	r3, r3, r5
 8007dc4:	19db      	adds	r3, r3, r7
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007dd0:	23d8      	movs	r3, #216	; 0xd8
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	195b      	adds	r3, r3, r5
 8007dd6:	19db      	adds	r3, r3, r7
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007de2:	23da      	movs	r3, #218	; 0xda
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	195b      	adds	r3, r3, r5
 8007de8:	19db      	adds	r3, r3, r7
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007dfa:	0008      	movs	r0, r1
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	22c4      	movs	r2, #196	; 0xc4
 8007e00:	2103      	movs	r1, #3
 8007e02:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e04:	002b      	movs	r3, r5
 8007e06:	18fa      	adds	r2, r7, r3
 8007e08:	183b      	adds	r3, r7, r0
 8007e0a:	0011      	movs	r1, r2
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f001 fa0f 	bl	8009230 <astronode_transport_send_receive>
 8007e12:	0003      	movs	r3, r0
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10f      	bne.n	8007e38 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <astronode_send_cfg_wr+0x14c>)
 8007e1a:	191b      	adds	r3, r3, r4
 8007e1c:	19db      	adds	r3, r3, r7
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b85      	cmp	r3, #133	; 0x85
 8007e22:	d105      	bne.n	8007e30 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <astronode_send_cfg_wr+0x150>)
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7fb f820 	bl	8002e6c <send_debug_logs>
            return true ;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e004      	b.n	8007e3a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <astronode_send_cfg_wr+0x154>)
 8007e32:	0018      	movs	r0, r3
 8007e34:	f7fb f81a 	bl	8002e6c <send_debug_logs>
        }
    }
    return false ;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	b067      	add	sp, #412	; 0x19c
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	fffffe6f 	.word	0xfffffe6f
 8007e48:	fffffe6e 	.word	0xfffffe6e
 8007e4c:	fffffe6d 	.word	0xfffffe6d
 8007e50:	fffffe6c 	.word	0xfffffe6c
 8007e54:	fffffe70 	.word	0xfffffe70
 8007e58:	0801344c 	.word	0x0801344c
 8007e5c:	08013478 	.word	0x08013478

08007e60 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e62:	b0ed      	sub	sp, #436	; 0x1b4
 8007e64:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e66:	21c8      	movs	r1, #200	; 0xc8
 8007e68:	2318      	movs	r3, #24
 8007e6a:	18cb      	adds	r3, r1, r3
 8007e6c:	19db      	adds	r3, r3, r7
 8007e6e:	0018      	movs	r0, r3
 8007e70:	23c6      	movs	r3, #198	; 0xc6
 8007e72:	001a      	movs	r2, r3
 8007e74:	2100      	movs	r1, #0
 8007e76:	f004 fa7d 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8007e7a:	4b4a      	ldr	r3, [pc, #296]	; (8007fa4 <astronode_send_mgi_rr+0x144>)
 8007e7c:	26cc      	movs	r6, #204	; 0xcc
 8007e7e:	0076      	lsls	r6, r6, #1
 8007e80:	199b      	adds	r3, r3, r6
 8007e82:	2218      	movs	r2, #24
 8007e84:	4694      	mov	ip, r2
 8007e86:	44bc      	add	ip, r7
 8007e88:	4463      	add	r3, ip
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	23c6      	movs	r3, #198	; 0xc6
 8007e8e:	001a      	movs	r2, r3
 8007e90:	2100      	movs	r1, #0
 8007e92:	f004 fa6f 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007e96:	21c8      	movs	r1, #200	; 0xc8
 8007e98:	2318      	movs	r3, #24
 8007e9a:	18cb      	adds	r3, r1, r3
 8007e9c:	19db      	adds	r3, r3, r7
 8007e9e:	2219      	movs	r2, #25
 8007ea0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ea2:	2318      	movs	r3, #24
 8007ea4:	18fa      	adds	r2, r7, r3
 8007ea6:	2318      	movs	r3, #24
 8007ea8:	18cb      	adds	r3, r1, r3
 8007eaa:	19db      	adds	r3, r3, r7
 8007eac:	0011      	movs	r1, r2
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f001 f9be 	bl	8009230 <astronode_transport_send_receive>
 8007eb4:	0003      	movs	r3, r0
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d16f      	bne.n	8007f9a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007eba:	4b3a      	ldr	r3, [pc, #232]	; (8007fa4 <astronode_send_mgi_rr+0x144>)
 8007ebc:	0032      	movs	r2, r6
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	2118      	movs	r1, #24
 8007ec2:	468c      	mov	ip, r1
 8007ec4:	44bc      	add	ip, r7
 8007ec6:	4463      	add	r3, ip
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b99      	cmp	r3, #153	; 0x99
 8007ecc:	d161      	bne.n	8007f92 <astronode_send_mgi_rr+0x132>
        {
 8007ece:	466b      	mov	r3, sp
 8007ed0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007ed2:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <astronode_send_mgi_rr+0x144>)
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	2218      	movs	r2, #24
 8007ed8:	4694      	mov	ip, r2
 8007eda:	44bc      	add	ip, r7
 8007edc:	4463      	add	r3, ip
 8007ede:	22c4      	movs	r2, #196	; 0xc4
 8007ee0:	5a9b      	ldrh	r3, [r3, r2]
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	3a01      	subs	r2, #1
 8007ee6:	21ca      	movs	r1, #202	; 0xca
 8007ee8:	0049      	lsls	r1, r1, #1
 8007eea:	2018      	movs	r0, #24
 8007eec:	1809      	adds	r1, r1, r0
 8007eee:	19c9      	adds	r1, r1, r7
 8007ef0:	600a      	str	r2, [r1, #0]
 8007ef2:	001c      	movs	r4, r3
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	0015      	movs	r5, r2
 8007ef8:	0020      	movs	r0, r4
 8007efa:	0029      	movs	r1, r5
 8007efc:	0004      	movs	r4, r0
 8007efe:	0f62      	lsrs	r2, r4, #29
 8007f00:	000c      	movs	r4, r1
 8007f02:	00e4      	lsls	r4, r4, #3
 8007f04:	617c      	str	r4, [r7, #20]
 8007f06:	697c      	ldr	r4, [r7, #20]
 8007f08:	4314      	orrs	r4, r2
 8007f0a:	617c      	str	r4, [r7, #20]
 8007f0c:	0001      	movs	r1, r0
 8007f0e:	00c9      	lsls	r1, r1, #3
 8007f10:	6139      	str	r1, [r7, #16]
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	6838      	ldr	r0, [r7, #0]
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	0004      	movs	r4, r0
 8007f1e:	0f62      	lsrs	r2, r4, #29
 8007f20:	000c      	movs	r4, r1
 8007f22:	00e4      	lsls	r4, r4, #3
 8007f24:	60fc      	str	r4, [r7, #12]
 8007f26:	68fc      	ldr	r4, [r7, #12]
 8007f28:	4314      	orrs	r4, r2
 8007f2a:	60fc      	str	r4, [r7, #12]
 8007f2c:	0001      	movs	r1, r0
 8007f2e:	00ca      	lsls	r2, r1, #3
 8007f30:	60ba      	str	r2, [r7, #8]
 8007f32:	3307      	adds	r3, #7
 8007f34:	08db      	lsrs	r3, r3, #3
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4669      	mov	r1, sp
 8007f3a:	1acb      	subs	r3, r1, r3
 8007f3c:	469d      	mov	sp, r3
 8007f3e:	466b      	mov	r3, sp
 8007f40:	3300      	adds	r3, #0
 8007f42:	24c8      	movs	r4, #200	; 0xc8
 8007f44:	0064      	lsls	r4, r4, #1
 8007f46:	2218      	movs	r2, #24
 8007f48:	18a2      	adds	r2, r4, r2
 8007f4a:	19d1      	adds	r1, r2, r7
 8007f4c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007f4e:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <astronode_send_mgi_rr+0x148>)
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7fa ff8b 	bl	8002e6c <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <astronode_send_mgi_rr+0x144>)
 8007f58:	22cc      	movs	r2, #204	; 0xcc
 8007f5a:	0052      	lsls	r2, r2, #1
 8007f5c:	189b      	adds	r3, r3, r2
 8007f5e:	2218      	movs	r2, #24
 8007f60:	4694      	mov	ip, r2
 8007f62:	44bc      	add	ip, r7
 8007f64:	4463      	add	r3, ip
 8007f66:	22c4      	movs	r2, #196	; 0xc4
 8007f68:	5a9b      	ldrh	r3, [r3, r2]
 8007f6a:	0019      	movs	r1, r3
 8007f6c:	2318      	movs	r3, #24
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a0e      	ldr	r2, [pc, #56]	; (8007fac <astronode_send_mgi_rr+0x14c>)
 8007f74:	2018      	movs	r0, #24
 8007f76:	1820      	adds	r0, r4, r0
 8007f78:	19c0      	adds	r0, r0, r7
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	f004 f930 	bl	800c1e0 <snprintf>
            send_debug_logs(guid);
 8007f80:	2318      	movs	r3, #24
 8007f82:	18e3      	adds	r3, r4, r3
 8007f84:	19db      	adds	r3, r3, r7
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fa ff6f 	bl	8002e6c <send_debug_logs>
 8007f8e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007f90:	e003      	b.n	8007f9a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007f92:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <astronode_send_mgi_rr+0x150>)
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7fa ff69 	bl	8002e6c <send_debug_logs>
}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b06d      	add	sp, #436	; 0x1b4
 8007fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	fffffe68 	.word	0xfffffe68
 8007fa8:	08013504 	.word	0x08013504
 8007fac:	08013514 	.word	0x08013514
 8007fb0:	08013518 	.word	0x08013518

08007fb4 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b0ed      	sub	sp, #436	; 0x1b4
 8007fb8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fba:	21c8      	movs	r1, #200	; 0xc8
 8007fbc:	2318      	movs	r3, #24
 8007fbe:	18cb      	adds	r3, r1, r3
 8007fc0:	19db      	adds	r3, r3, r7
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	23c6      	movs	r3, #198	; 0xc6
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f004 f9d3 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8007fce:	4b4a      	ldr	r3, [pc, #296]	; (80080f8 <astronode_send_msn_rr+0x144>)
 8007fd0:	26cc      	movs	r6, #204	; 0xcc
 8007fd2:	0076      	lsls	r6, r6, #1
 8007fd4:	199b      	adds	r3, r3, r6
 8007fd6:	2218      	movs	r2, #24
 8007fd8:	4694      	mov	ip, r2
 8007fda:	44bc      	add	ip, r7
 8007fdc:	4463      	add	r3, ip
 8007fde:	0018      	movs	r0, r3
 8007fe0:	23c6      	movs	r3, #198	; 0xc6
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f004 f9c5 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007fea:	21c8      	movs	r1, #200	; 0xc8
 8007fec:	2318      	movs	r3, #24
 8007fee:	18cb      	adds	r3, r1, r3
 8007ff0:	19db      	adds	r3, r3, r7
 8007ff2:	221a      	movs	r2, #26
 8007ff4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ff6:	2318      	movs	r3, #24
 8007ff8:	18fa      	adds	r2, r7, r3
 8007ffa:	2318      	movs	r3, #24
 8007ffc:	18cb      	adds	r3, r1, r3
 8007ffe:	19db      	adds	r3, r3, r7
 8008000:	0011      	movs	r1, r2
 8008002:	0018      	movs	r0, r3
 8008004:	f001 f914 	bl	8009230 <astronode_transport_send_receive>
 8008008:	0003      	movs	r3, r0
 800800a:	2b01      	cmp	r3, #1
 800800c:	d16f      	bne.n	80080ee <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800800e:	4b3a      	ldr	r3, [pc, #232]	; (80080f8 <astronode_send_msn_rr+0x144>)
 8008010:	0032      	movs	r2, r6
 8008012:	189b      	adds	r3, r3, r2
 8008014:	2118      	movs	r1, #24
 8008016:	468c      	mov	ip, r1
 8008018:	44bc      	add	ip, r7
 800801a:	4463      	add	r3, ip
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b9a      	cmp	r3, #154	; 0x9a
 8008020:	d161      	bne.n	80080e6 <astronode_send_msn_rr+0x132>
        {
 8008022:	466b      	mov	r3, sp
 8008024:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8008026:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <astronode_send_msn_rr+0x144>)
 8008028:	189b      	adds	r3, r3, r2
 800802a:	2218      	movs	r2, #24
 800802c:	4694      	mov	ip, r2
 800802e:	44bc      	add	ip, r7
 8008030:	4463      	add	r3, ip
 8008032:	22c4      	movs	r2, #196	; 0xc4
 8008034:	5a9b      	ldrh	r3, [r3, r2]
 8008036:	001a      	movs	r2, r3
 8008038:	3a01      	subs	r2, #1
 800803a:	21ca      	movs	r1, #202	; 0xca
 800803c:	0049      	lsls	r1, r1, #1
 800803e:	2018      	movs	r0, #24
 8008040:	1809      	adds	r1, r1, r0
 8008042:	19c9      	adds	r1, r1, r7
 8008044:	600a      	str	r2, [r1, #0]
 8008046:	001c      	movs	r4, r3
 8008048:	2200      	movs	r2, #0
 800804a:	0015      	movs	r5, r2
 800804c:	0020      	movs	r0, r4
 800804e:	0029      	movs	r1, r5
 8008050:	0004      	movs	r4, r0
 8008052:	0f62      	lsrs	r2, r4, #29
 8008054:	000c      	movs	r4, r1
 8008056:	00e4      	lsls	r4, r4, #3
 8008058:	617c      	str	r4, [r7, #20]
 800805a:	697c      	ldr	r4, [r7, #20]
 800805c:	4314      	orrs	r4, r2
 800805e:	617c      	str	r4, [r7, #20]
 8008060:	0001      	movs	r1, r0
 8008062:	00c9      	lsls	r1, r1, #3
 8008064:	6139      	str	r1, [r7, #16]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	2200      	movs	r2, #0
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	6838      	ldr	r0, [r7, #0]
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	0004      	movs	r4, r0
 8008072:	0f62      	lsrs	r2, r4, #29
 8008074:	000c      	movs	r4, r1
 8008076:	00e4      	lsls	r4, r4, #3
 8008078:	60fc      	str	r4, [r7, #12]
 800807a:	68fc      	ldr	r4, [r7, #12]
 800807c:	4314      	orrs	r4, r2
 800807e:	60fc      	str	r4, [r7, #12]
 8008080:	0001      	movs	r1, r0
 8008082:	00ca      	lsls	r2, r1, #3
 8008084:	60ba      	str	r2, [r7, #8]
 8008086:	3307      	adds	r3, #7
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4669      	mov	r1, sp
 800808e:	1acb      	subs	r3, r1, r3
 8008090:	469d      	mov	sp, r3
 8008092:	466b      	mov	r3, sp
 8008094:	3300      	adds	r3, #0
 8008096:	24c8      	movs	r4, #200	; 0xc8
 8008098:	0064      	lsls	r4, r4, #1
 800809a:	2218      	movs	r2, #24
 800809c:	18a2      	adds	r2, r4, r2
 800809e:	19d1      	adds	r1, r2, r7
 80080a0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <astronode_send_msn_rr+0x148>)
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7fa fee1 	bl	8002e6c <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <astronode_send_msn_rr+0x144>)
 80080ac:	22cc      	movs	r2, #204	; 0xcc
 80080ae:	0052      	lsls	r2, r2, #1
 80080b0:	189b      	adds	r3, r3, r2
 80080b2:	2218      	movs	r2, #24
 80080b4:	4694      	mov	ip, r2
 80080b6:	44bc      	add	ip, r7
 80080b8:	4463      	add	r3, ip
 80080ba:	22c4      	movs	r2, #196	; 0xc4
 80080bc:	5a9b      	ldrh	r3, [r3, r2]
 80080be:	0019      	movs	r1, r3
 80080c0:	2318      	movs	r3, #24
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a0e      	ldr	r2, [pc, #56]	; (8008100 <astronode_send_msn_rr+0x14c>)
 80080c8:	2018      	movs	r0, #24
 80080ca:	1820      	adds	r0, r4, r0
 80080cc:	19c0      	adds	r0, r0, r7
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	f004 f886 	bl	800c1e0 <snprintf>
            send_debug_logs(serial_number);
 80080d4:	2318      	movs	r3, #24
 80080d6:	18e3      	adds	r3, r4, r3
 80080d8:	19db      	adds	r3, r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	0018      	movs	r0, r3
 80080de:	f7fa fec5 	bl	8002e6c <send_debug_logs>
 80080e2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80080e4:	e003      	b.n	80080ee <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80080e6:	4b07      	ldr	r3, [pc, #28]	; (8008104 <astronode_send_msn_rr+0x150>)
 80080e8:	0018      	movs	r0, r3
 80080ea:	f7fa febf 	bl	8002e6c <send_debug_logs>
}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b06d      	add	sp, #436	; 0x1b4
 80080f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	fffffe68 	.word	0xfffffe68
 80080fc:	08013534 	.word	0x08013534
 8008100:	08013514 	.word	0x08013514
 8008104:	08013550 	.word	0x08013550

08008108 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8008108:	b5b0      	push	{r4, r5, r7, lr}
 800810a:	b0fa      	sub	sp, #488	; 0x1e8
 800810c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800810e:	258e      	movs	r5, #142	; 0x8e
 8008110:	006d      	lsls	r5, r5, #1
 8008112:	197b      	adds	r3, r7, r5
 8008114:	0018      	movs	r0, r3
 8008116:	23c6      	movs	r3, #198	; 0xc6
 8008118:	001a      	movs	r2, r3
 800811a:	2100      	movs	r1, #0
 800811c:	f004 f92a 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8008120:	4b26      	ldr	r3, [pc, #152]	; (80081bc <astronode_send_nco_rr+0xb4>)
 8008122:	24f4      	movs	r4, #244	; 0xf4
 8008124:	0064      	lsls	r4, r4, #1
 8008126:	191b      	adds	r3, r3, r4
 8008128:	19db      	adds	r3, r3, r7
 800812a:	0018      	movs	r0, r3
 800812c:	23c6      	movs	r3, #198	; 0xc6
 800812e:	001a      	movs	r2, r3
 8008130:	2100      	movs	r1, #0
 8008132:	f004 f91f 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8008136:	197b      	adds	r3, r7, r5
 8008138:	2218      	movs	r2, #24
 800813a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800813c:	2354      	movs	r3, #84	; 0x54
 800813e:	18fa      	adds	r2, r7, r3
 8008140:	197b      	adds	r3, r7, r5
 8008142:	0011      	movs	r1, r2
 8008144:	0018      	movs	r0, r3
 8008146:	f001 f873 	bl	8009230 <astronode_transport_send_receive>
 800814a:	0003      	movs	r3, r0
 800814c:	2b01      	cmp	r3, #1
 800814e:	d131      	bne.n	80081b4 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <astronode_send_nco_rr+0xb4>)
 8008152:	0021      	movs	r1, r4
 8008154:	185b      	adds	r3, r3, r1
 8008156:	19db      	adds	r3, r3, r7
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b98      	cmp	r3, #152	; 0x98
 800815c:	d126      	bne.n	80081ac <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <astronode_send_nco_rr+0xb4>)
 8008160:	185b      	adds	r3, r3, r1
 8008162:	19db      	adds	r3, r3, r7
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008168:	4b14      	ldr	r3, [pc, #80]	; (80081bc <astronode_send_nco_rr+0xb4>)
 800816a:	185b      	adds	r3, r3, r1
 800816c:	19db      	adds	r3, r3, r7
 800816e:	789b      	ldrb	r3, [r3, #2]
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8008174:	4b11      	ldr	r3, [pc, #68]	; (80081bc <astronode_send_nco_rr+0xb4>)
 8008176:	185b      	adds	r3, r3, r1
 8008178:	19db      	adds	r3, r3, r7
 800817a:	78db      	ldrb	r3, [r3, #3]
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8008180:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <astronode_send_nco_rr+0xb4>)
 8008182:	185b      	adds	r3, r3, r1
 8008184:	19db      	adds	r3, r3, r7
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 800818c:	22f2      	movs	r2, #242	; 0xf2
 800818e:	0052      	lsls	r2, r2, #1
 8008190:	18b9      	adds	r1, r7, r2
 8008192:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 8008194:	18bb      	adds	r3, r7, r2
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	4909      	ldr	r1, [pc, #36]	; (80081c0 <astronode_send_nco_rr+0xb8>)
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	0018      	movs	r0, r3
 800819e:	f004 f853 	bl	800c248 <sprintf>
            send_debug_logs(str);
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	0018      	movs	r0, r3
 80081a6:	f7fa fe61 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 80081aa:	e003      	b.n	80081b4 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <astronode_send_nco_rr+0xbc>)
 80081ae:	0018      	movs	r0, r3
 80081b0:	f7fa fe5c 	bl	8002e6c <send_debug_logs>
}
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b07a      	add	sp, #488	; 0x1e8
 80081ba:	bdb0      	pop	{r4, r5, r7, pc}
 80081bc:	fffffe6c 	.word	0xfffffe6c
 80081c0:	08013578 	.word	0x08013578
 80081c4:	080135c0 	.word	0x080135c0

080081c8 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b0e4      	sub	sp, #400	; 0x190
 80081cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80081ce:	24c8      	movs	r4, #200	; 0xc8
 80081d0:	193b      	adds	r3, r7, r4
 80081d2:	0018      	movs	r0, r3
 80081d4:	23c6      	movs	r3, #198	; 0xc6
 80081d6:	001a      	movs	r2, r3
 80081d8:	2100      	movs	r1, #0
 80081da:	f004 f8cb 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 80081de:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 80081e0:	25c8      	movs	r5, #200	; 0xc8
 80081e2:	006d      	lsls	r5, r5, #1
 80081e4:	195b      	adds	r3, r3, r5
 80081e6:	19db      	adds	r3, r3, r7
 80081e8:	0018      	movs	r0, r3
 80081ea:	23c6      	movs	r3, #198	; 0xc6
 80081ec:	001a      	movs	r2, r3
 80081ee:	2100      	movs	r1, #0
 80081f0:	f004 f8c0 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80081f4:	193b      	adds	r3, r7, r4
 80081f6:	2265      	movs	r2, #101	; 0x65
 80081f8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80081fa:	003a      	movs	r2, r7
 80081fc:	193b      	adds	r3, r7, r4
 80081fe:	0011      	movs	r1, r2
 8008200:	0018      	movs	r0, r3
 8008202:	f001 f815 	bl	8009230 <astronode_transport_send_receive>
 8008206:	0003      	movs	r3, r0
 8008208:	2b01      	cmp	r3, #1
 800820a:	d147      	bne.n	800829c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 800820c:	4b25      	ldr	r3, [pc, #148]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 800820e:	195b      	adds	r3, r3, r5
 8008210:	19db      	adds	r3, r3, r7
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2be5      	cmp	r3, #229	; 0xe5
 8008216:	d141      	bne.n	800829c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8008218:	4b22      	ldr	r3, [pc, #136]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 800821a:	195b      	adds	r3, r3, r5
 800821c:	19db      	adds	r3, r3, r7
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	001a      	movs	r2, r3
 8008222:	2301      	movs	r3, #1
 8008224:	4013      	ands	r3, r2
 8008226:	d006      	beq.n	8008236 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8008228:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <astronode_send_evt_rr+0xe0>)
 800822a:	2201      	movs	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800822e:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <astronode_send_evt_rr+0xe4>)
 8008230:	0018      	movs	r0, r3
 8008232:	f7fa fe1b 	bl	8002e6c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 8008238:	22c8      	movs	r2, #200	; 0xc8
 800823a:	0052      	lsls	r2, r2, #1
 800823c:	189b      	adds	r3, r3, r2
 800823e:	19db      	adds	r3, r3, r7
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	001a      	movs	r2, r3
 8008244:	2302      	movs	r3, #2
 8008246:	4013      	ands	r3, r2
 8008248:	d006      	beq.n	8008258 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800824a:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <astronode_send_evt_rr+0xe8>)
 800824c:	2201      	movs	r2, #1
 800824e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8008250:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <astronode_send_evt_rr+0xec>)
 8008252:	0018      	movs	r0, r3
 8008254:	f7fa fe0a 	bl	8002e6c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 800825a:	22c8      	movs	r2, #200	; 0xc8
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	189b      	adds	r3, r3, r2
 8008260:	19db      	adds	r3, r3, r7
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	001a      	movs	r2, r3
 8008266:	2304      	movs	r3, #4
 8008268:	4013      	ands	r3, r2
 800826a:	d006      	beq.n	800827a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 800826c:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <astronode_send_evt_rr+0xf0>)
 800826e:	2201      	movs	r2, #1
 8008270:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <astronode_send_evt_rr+0xf4>)
 8008274:	0018      	movs	r0, r3
 8008276:	f7fa fdf9 	bl	8002e6c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <astronode_send_evt_rr+0xdc>)
 800827c:	22c8      	movs	r2, #200	; 0xc8
 800827e:	0052      	lsls	r2, r2, #1
 8008280:	189b      	adds	r3, r3, r2
 8008282:	19db      	adds	r3, r3, r7
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	001a      	movs	r2, r3
 8008288:	2308      	movs	r3, #8
 800828a:	4013      	ands	r3, r2
 800828c:	d006      	beq.n	800829c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <astronode_send_evt_rr+0xf8>)
 8008290:	2201      	movs	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008294:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <astronode_send_evt_rr+0xfc>)
 8008296:	0018      	movs	r0, r3
 8008298:	f7fa fde8 	bl	8002e6c <send_debug_logs>
            }

        }
    }
}
 800829c:	46c0      	nop			; (mov r8, r8)
 800829e:	46bd      	mov	sp, r7
 80082a0:	b064      	add	sp, #400	; 0x190
 80082a2:	bdb0      	pop	{r4, r5, r7, pc}
 80082a4:	fffffe70 	.word	0xfffffe70
 80082a8:	20000bc0 	.word	0x20000bc0
 80082ac:	080135f8 	.word	0x080135f8
 80082b0:	20000bc1 	.word	0x20000bc1
 80082b4:	0801361c 	.word	0x0801361c
 80082b8:	20000bc2 	.word	0x20000bc2
 80082bc:	08013634 	.word	0x08013634
 80082c0:	20000bc3 	.word	0x20000bc3
 80082c4:	08013648 	.word	0x08013648

080082c8 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80082c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ca:	b0e7      	sub	sp, #412	; 0x19c
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80082d2:	24d0      	movs	r4, #208	; 0xd0
 80082d4:	193b      	adds	r3, r7, r4
 80082d6:	0018      	movs	r0, r3
 80082d8:	23c6      	movs	r3, #198	; 0xc6
 80082da:	001a      	movs	r2, r3
 80082dc:	2100      	movs	r1, #0
 80082de:	f004 f849 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 80082e2:	4b56      	ldr	r3, [pc, #344]	; (800843c <astronode_send_geo_wr+0x174>)
 80082e4:	26cc      	movs	r6, #204	; 0xcc
 80082e6:	0076      	lsls	r6, r6, #1
 80082e8:	199b      	adds	r3, r3, r6
 80082ea:	19db      	adds	r3, r3, r7
 80082ec:	0018      	movs	r0, r3
 80082ee:	23c6      	movs	r3, #198	; 0xc6
 80082f0:	001a      	movs	r2, r3
 80082f2:	2100      	movs	r1, #0
 80082f4:	f004 f83e 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80082f8:	193b      	adds	r3, r7, r4
 80082fa:	2235      	movs	r2, #53	; 0x35
 80082fc:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80082fe:	193b      	adds	r3, r7, r4
 8008300:	22c4      	movs	r2, #196	; 0xc4
 8008302:	5a9b      	ldrh	r3, [r3, r2]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	b290      	uxth	r0, r2
 8008308:	193a      	adds	r2, r7, r4
 800830a:	21c4      	movs	r1, #196	; 0xc4
 800830c:	5250      	strh	r0, [r2, r1]
 800830e:	0019      	movs	r1, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	b2da      	uxtb	r2, r3
 8008314:	193b      	adds	r3, r7, r4
 8008316:	185b      	adds	r3, r3, r1
 8008318:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	1218      	asrs	r0, r3, #8
 800831e:	0025      	movs	r5, r4
 8008320:	197b      	adds	r3, r7, r5
 8008322:	22c4      	movs	r2, #196	; 0xc4
 8008324:	5a9b      	ldrh	r3, [r3, r2]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	b294      	uxth	r4, r2
 800832a:	197a      	adds	r2, r7, r5
 800832c:	21c4      	movs	r1, #196	; 0xc4
 800832e:	5254      	strh	r4, [r2, r1]
 8008330:	0019      	movs	r1, r3
 8008332:	b2c2      	uxtb	r2, r0
 8008334:	002c      	movs	r4, r5
 8008336:	193b      	adds	r3, r7, r4
 8008338:	185b      	adds	r3, r3, r1
 800833a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1418      	asrs	r0, r3, #16
 8008340:	0025      	movs	r5, r4
 8008342:	197b      	adds	r3, r7, r5
 8008344:	22c4      	movs	r2, #196	; 0xc4
 8008346:	5a9b      	ldrh	r3, [r3, r2]
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	b294      	uxth	r4, r2
 800834c:	197a      	adds	r2, r7, r5
 800834e:	21c4      	movs	r1, #196	; 0xc4
 8008350:	5254      	strh	r4, [r2, r1]
 8008352:	0019      	movs	r1, r3
 8008354:	b2c2      	uxtb	r2, r0
 8008356:	002c      	movs	r4, r5
 8008358:	193b      	adds	r3, r7, r4
 800835a:	185b      	adds	r3, r3, r1
 800835c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	1618      	asrs	r0, r3, #24
 8008362:	0025      	movs	r5, r4
 8008364:	197b      	adds	r3, r7, r5
 8008366:	22c4      	movs	r2, #196	; 0xc4
 8008368:	5a9b      	ldrh	r3, [r3, r2]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	b294      	uxth	r4, r2
 800836e:	197a      	adds	r2, r7, r5
 8008370:	21c4      	movs	r1, #196	; 0xc4
 8008372:	5254      	strh	r4, [r2, r1]
 8008374:	0019      	movs	r1, r3
 8008376:	b2c2      	uxtb	r2, r0
 8008378:	002c      	movs	r4, r5
 800837a:	193b      	adds	r3, r7, r4
 800837c:	185b      	adds	r3, r3, r1
 800837e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008380:	193b      	adds	r3, r7, r4
 8008382:	22c4      	movs	r2, #196	; 0xc4
 8008384:	5a9b      	ldrh	r3, [r3, r2]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	b290      	uxth	r0, r2
 800838a:	193a      	adds	r2, r7, r4
 800838c:	21c4      	movs	r1, #196	; 0xc4
 800838e:	5250      	strh	r0, [r2, r1]
 8008390:	0019      	movs	r1, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	b2da      	uxtb	r2, r3
 8008396:	193b      	adds	r3, r7, r4
 8008398:	185b      	adds	r3, r3, r1
 800839a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	1218      	asrs	r0, r3, #8
 80083a0:	0025      	movs	r5, r4
 80083a2:	197b      	adds	r3, r7, r5
 80083a4:	22c4      	movs	r2, #196	; 0xc4
 80083a6:	5a9b      	ldrh	r3, [r3, r2]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	b294      	uxth	r4, r2
 80083ac:	197a      	adds	r2, r7, r5
 80083ae:	21c4      	movs	r1, #196	; 0xc4
 80083b0:	5254      	strh	r4, [r2, r1]
 80083b2:	0019      	movs	r1, r3
 80083b4:	b2c2      	uxtb	r2, r0
 80083b6:	002c      	movs	r4, r5
 80083b8:	193b      	adds	r3, r7, r4
 80083ba:	185b      	adds	r3, r3, r1
 80083bc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	1418      	asrs	r0, r3, #16
 80083c2:	0025      	movs	r5, r4
 80083c4:	197b      	adds	r3, r7, r5
 80083c6:	22c4      	movs	r2, #196	; 0xc4
 80083c8:	5a9b      	ldrh	r3, [r3, r2]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	b294      	uxth	r4, r2
 80083ce:	197a      	adds	r2, r7, r5
 80083d0:	21c4      	movs	r1, #196	; 0xc4
 80083d2:	5254      	strh	r4, [r2, r1]
 80083d4:	0019      	movs	r1, r3
 80083d6:	b2c2      	uxtb	r2, r0
 80083d8:	002c      	movs	r4, r5
 80083da:	193b      	adds	r3, r7, r4
 80083dc:	185b      	adds	r3, r3, r1
 80083de:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	1618      	asrs	r0, r3, #24
 80083e4:	0025      	movs	r5, r4
 80083e6:	197b      	adds	r3, r7, r5
 80083e8:	22c4      	movs	r2, #196	; 0xc4
 80083ea:	5a9b      	ldrh	r3, [r3, r2]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	b294      	uxth	r4, r2
 80083f0:	197a      	adds	r2, r7, r5
 80083f2:	21c4      	movs	r1, #196	; 0xc4
 80083f4:	5254      	strh	r4, [r2, r1]
 80083f6:	0019      	movs	r1, r3
 80083f8:	b2c2      	uxtb	r2, r0
 80083fa:	0028      	movs	r0, r5
 80083fc:	183b      	adds	r3, r7, r0
 80083fe:	185b      	adds	r3, r3, r1
 8008400:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008402:	2308      	movs	r3, #8
 8008404:	18fa      	adds	r2, r7, r3
 8008406:	183b      	adds	r3, r7, r0
 8008408:	0011      	movs	r1, r2
 800840a:	0018      	movs	r0, r3
 800840c:	f000 ff10 	bl	8009230 <astronode_transport_send_receive>
 8008410:	0003      	movs	r3, r0
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10e      	bne.n	8008434 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <astronode_send_geo_wr+0x174>)
 8008418:	199b      	adds	r3, r3, r6
 800841a:	19db      	adds	r3, r3, r7
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2bb5      	cmp	r3, #181	; 0xb5
 8008420:	d104      	bne.n	800842c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <astronode_send_geo_wr+0x178>)
 8008424:	0018      	movs	r0, r3
 8008426:	f7fa fd21 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800842a:	e003      	b.n	8008434 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800842c:	4b05      	ldr	r3, [pc, #20]	; (8008444 <astronode_send_geo_wr+0x17c>)
 800842e:	0018      	movs	r0, r3
 8008430:	f7fa fd1c 	bl	8002e6c <send_debug_logs>
}
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b067      	add	sp, #412	; 0x19c
 800843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800843c:	fffffe70 	.word	0xfffffe70
 8008440:	0801365c 	.word	0x0801365c
 8008444:	08013688 	.word	0x08013688

08008448 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844a:	b0fb      	sub	sp, #492	; 0x1ec
 800844c:	af00      	add	r7, sp, #0
 800844e:	6039      	str	r1, [r7, #0]
 8008450:	0011      	movs	r1, r2
 8008452:	4b4a      	ldr	r3, [pc, #296]	; (800857c <astronode_send_pld_er+0x134>)
 8008454:	26f4      	movs	r6, #244	; 0xf4
 8008456:	0076      	lsls	r6, r6, #1
 8008458:	199b      	adds	r3, r3, r6
 800845a:	19db      	adds	r3, r3, r7
 800845c:	1c02      	adds	r2, r0, #0
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	4b47      	ldr	r3, [pc, #284]	; (8008580 <astronode_send_pld_er+0x138>)
 8008462:	199b      	adds	r3, r3, r6
 8008464:	19db      	adds	r3, r3, r7
 8008466:	1c0a      	adds	r2, r1, #0
 8008468:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800846a:	2490      	movs	r4, #144	; 0x90
 800846c:	0064      	lsls	r4, r4, #1
 800846e:	193b      	adds	r3, r7, r4
 8008470:	0018      	movs	r0, r3
 8008472:	23c6      	movs	r3, #198	; 0xc6
 8008474:	001a      	movs	r2, r3
 8008476:	2100      	movs	r1, #0
 8008478:	f003 ff7c 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 800847c:	4b41      	ldr	r3, [pc, #260]	; (8008584 <astronode_send_pld_er+0x13c>)
 800847e:	199b      	adds	r3, r3, r6
 8008480:	19db      	adds	r3, r3, r7
 8008482:	0018      	movs	r0, r3
 8008484:	23c6      	movs	r3, #198	; 0xc6
 8008486:	001a      	movs	r2, r3
 8008488:	2100      	movs	r1, #0
 800848a:	f003 ff73 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800848e:	193b      	adds	r3, r7, r4
 8008490:	2225      	movs	r2, #37	; 0x25
 8008492:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008494:	193b      	adds	r3, r7, r4
 8008496:	22c4      	movs	r2, #196	; 0xc4
 8008498:	5a9b      	ldrh	r3, [r3, r2]
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	b290      	uxth	r0, r2
 800849e:	193a      	adds	r2, r7, r4
 80084a0:	21c4      	movs	r1, #196	; 0xc4
 80084a2:	5250      	strh	r0, [r2, r1]
 80084a4:	0019      	movs	r1, r3
 80084a6:	4b35      	ldr	r3, [pc, #212]	; (800857c <astronode_send_pld_er+0x134>)
 80084a8:	199b      	adds	r3, r3, r6
 80084aa:	19db      	adds	r3, r3, r7
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	193b      	adds	r3, r7, r4
 80084b2:	185b      	adds	r3, r3, r1
 80084b4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80084b6:	4b31      	ldr	r3, [pc, #196]	; (800857c <astronode_send_pld_er+0x134>)
 80084b8:	199b      	adds	r3, r3, r6
 80084ba:	19db      	adds	r3, r3, r7
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	b298      	uxth	r0, r3
 80084c2:	0025      	movs	r5, r4
 80084c4:	197b      	adds	r3, r7, r5
 80084c6:	22c4      	movs	r2, #196	; 0xc4
 80084c8:	5a9b      	ldrh	r3, [r3, r2]
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	b294      	uxth	r4, r2
 80084ce:	197a      	adds	r2, r7, r5
 80084d0:	21c4      	movs	r1, #196	; 0xc4
 80084d2:	5254      	strh	r4, [r2, r1]
 80084d4:	0019      	movs	r1, r3
 80084d6:	b2c2      	uxtb	r2, r0
 80084d8:	002c      	movs	r4, r5
 80084da:	193b      	adds	r3, r7, r4
 80084dc:	185b      	adds	r3, r3, r1
 80084de:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80084e0:	193b      	adds	r3, r7, r4
 80084e2:	22c4      	movs	r2, #196	; 0xc4
 80084e4:	5a9b      	ldrh	r3, [r3, r2]
 80084e6:	001a      	movs	r2, r3
 80084e8:	193b      	adds	r3, r7, r4
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	1c58      	adds	r0, r3, #1
 80084ee:	4b24      	ldr	r3, [pc, #144]	; (8008580 <astronode_send_pld_er+0x138>)
 80084f0:	199b      	adds	r3, r3, r6
 80084f2:	19db      	adds	r3, r3, r7
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	0019      	movs	r1, r3
 80084fa:	f004 f820 	bl	800c53e <memcpy>
    request.payload_len = 2 + payload_length;
 80084fe:	4b20      	ldr	r3, [pc, #128]	; (8008580 <astronode_send_pld_er+0x138>)
 8008500:	199b      	adds	r3, r3, r6
 8008502:	19db      	adds	r3, r3, r7
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	3302      	adds	r3, #2
 8008508:	b299      	uxth	r1, r3
 800850a:	193b      	adds	r3, r7, r4
 800850c:	22c4      	movs	r2, #196	; 0xc4
 800850e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008510:	2358      	movs	r3, #88	; 0x58
 8008512:	18fa      	adds	r2, r7, r3
 8008514:	193b      	adds	r3, r7, r4
 8008516:	0011      	movs	r1, r2
 8008518:	0018      	movs	r0, r3
 800851a:	f000 fe89 	bl	8009230 <astronode_transport_send_receive>
 800851e:	0003      	movs	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d125      	bne.n	8008570 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <astronode_send_pld_er+0x13c>)
 8008526:	199b      	adds	r3, r3, r6
 8008528:	19db      	adds	r3, r3, r7
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2ba5      	cmp	r3, #165	; 0xa5
 800852e:	d10f      	bne.n	8008550 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008530:	4b12      	ldr	r3, [pc, #72]	; (800857c <astronode_send_pld_er+0x134>)
 8008532:	199b      	adds	r3, r3, r6
 8008534:	19db      	adds	r3, r3, r7
 8008536:	881a      	ldrh	r2, [r3, #0]
 8008538:	4913      	ldr	r1, [pc, #76]	; (8008588 <astronode_send_pld_er+0x140>)
 800853a:	2408      	movs	r4, #8
 800853c:	193b      	adds	r3, r7, r4
 800853e:	0018      	movs	r0, r3
 8008540:	f003 fe82 	bl	800c248 <sprintf>
            send_debug_logs ( s ) ;
 8008544:	193b      	adds	r3, r7, r4
 8008546:	0018      	movs	r0, r3
 8008548:	f7fa fc90 	bl	8002e6c <send_debug_logs>
            return true ;
 800854c:	2301      	movs	r3, #1
 800854e:	e010      	b.n	8008572 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <astronode_send_pld_er+0x134>)
 8008552:	22f4      	movs	r2, #244	; 0xf4
 8008554:	0052      	lsls	r2, r2, #1
 8008556:	189b      	adds	r3, r3, r2
 8008558:	19db      	adds	r3, r3, r7
 800855a:	881a      	ldrh	r2, [r3, #0]
 800855c:	490b      	ldr	r1, [pc, #44]	; (800858c <astronode_send_pld_er+0x144>)
 800855e:	2408      	movs	r4, #8
 8008560:	193b      	adds	r3, r7, r4
 8008562:	0018      	movs	r0, r3
 8008564:	f003 fe70 	bl	800c248 <sprintf>
            send_debug_logs ( s ) ;
 8008568:	193b      	adds	r3, r7, r4
 800856a:	0018      	movs	r0, r3
 800856c:	f7fa fc7e 	bl	8002e6c <send_debug_logs>
        }
    }
    return false ;
 8008570:	2300      	movs	r3, #0
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b07b      	add	sp, #492	; 0x1ec
 8008578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	fffffe1e 	.word	0xfffffe1e
 8008580:	fffffe1c 	.word	0xfffffe1c
 8008584:	fffffe70 	.word	0xfffffe70
 8008588:	08013700 	.word	0x08013700
 800858c:	0801372c 	.word	0x0801372c

08008590 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008590:	b5b0      	push	{r4, r5, r7, lr}
 8008592:	b0e4      	sub	sp, #400	; 0x190
 8008594:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008596:	24c8      	movs	r4, #200	; 0xc8
 8008598:	193b      	adds	r3, r7, r4
 800859a:	0018      	movs	r0, r3
 800859c:	23c6      	movs	r3, #198	; 0xc6
 800859e:	001a      	movs	r2, r3
 80085a0:	2100      	movs	r1, #0
 80085a2:	f003 fee7 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 80085a6:	4b15      	ldr	r3, [pc, #84]	; (80085fc <astronode_send_pld_fr+0x6c>)
 80085a8:	25c8      	movs	r5, #200	; 0xc8
 80085aa:	006d      	lsls	r5, r5, #1
 80085ac:	195b      	adds	r3, r3, r5
 80085ae:	19db      	adds	r3, r3, r7
 80085b0:	0018      	movs	r0, r3
 80085b2:	23c6      	movs	r3, #198	; 0xc6
 80085b4:	001a      	movs	r2, r3
 80085b6:	2100      	movs	r1, #0
 80085b8:	f003 fedc 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80085bc:	193b      	adds	r3, r7, r4
 80085be:	2227      	movs	r2, #39	; 0x27
 80085c0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085c2:	003a      	movs	r2, r7
 80085c4:	193b      	adds	r3, r7, r4
 80085c6:	0011      	movs	r1, r2
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fe31 	bl	8009230 <astronode_transport_send_receive>
 80085ce:	0003      	movs	r3, r0
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10e      	bne.n	80085f2 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80085d4:	4b09      	ldr	r3, [pc, #36]	; (80085fc <astronode_send_pld_fr+0x6c>)
 80085d6:	195b      	adds	r3, r3, r5
 80085d8:	19db      	adds	r3, r3, r7
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2ba7      	cmp	r3, #167	; 0xa7
 80085de:	d104      	bne.n	80085ea <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <astronode_send_pld_fr+0x70>)
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7fa fc42 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80085e8:	e003      	b.n	80085f2 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <astronode_send_pld_fr+0x74>)
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7fa fc3d 	bl	8002e6c <send_debug_logs>
}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b064      	add	sp, #400	; 0x190
 80085f8:	bdb0      	pop	{r4, r5, r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	fffffe70 	.word	0xfffffe70
 8008600:	0801375c 	.word	0x0801375c
 8008604:	08013794 	.word	0x08013794

08008608 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008608:	b5b0      	push	{r4, r5, r7, lr}
 800860a:	b0e4      	sub	sp, #400	; 0x190
 800860c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800860e:	24c8      	movs	r4, #200	; 0xc8
 8008610:	193b      	adds	r3, r7, r4
 8008612:	0018      	movs	r0, r3
 8008614:	23c6      	movs	r3, #198	; 0xc6
 8008616:	001a      	movs	r2, r3
 8008618:	2100      	movs	r1, #0
 800861a:	f003 feab 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 800861e:	4b16      	ldr	r3, [pc, #88]	; (8008678 <astronode_send_res_cr+0x70>)
 8008620:	25c8      	movs	r5, #200	; 0xc8
 8008622:	006d      	lsls	r5, r5, #1
 8008624:	195b      	adds	r3, r3, r5
 8008626:	19db      	adds	r3, r3, r7
 8008628:	0018      	movs	r0, r3
 800862a:	23c6      	movs	r3, #198	; 0xc6
 800862c:	001a      	movs	r2, r3
 800862e:	2100      	movs	r1, #0
 8008630:	f003 fea0 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008634:	193b      	adds	r3, r7, r4
 8008636:	2255      	movs	r2, #85	; 0x55
 8008638:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800863a:	003a      	movs	r2, r7
 800863c:	193b      	adds	r3, r7, r4
 800863e:	0011      	movs	r1, r2
 8008640:	0018      	movs	r0, r3
 8008642:	f000 fdf5 	bl	8009230 <astronode_transport_send_receive>
 8008646:	0003      	movs	r3, r0
 8008648:	2b01      	cmp	r3, #1
 800864a:	d111      	bne.n	8008670 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <astronode_send_res_cr+0x70>)
 800864e:	195b      	adds	r3, r3, r5
 8008650:	19db      	adds	r3, r3, r7
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2bd5      	cmp	r3, #213	; 0xd5
 8008656:	d107      	bne.n	8008668 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008658:	4b08      	ldr	r3, [pc, #32]	; (800867c <astronode_send_res_cr+0x74>)
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800865e:	4b08      	ldr	r3, [pc, #32]	; (8008680 <astronode_send_res_cr+0x78>)
 8008660:	0018      	movs	r0, r3
 8008662:	f7fa fc03 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008666:	e003      	b.n	8008670 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <astronode_send_res_cr+0x7c>)
 800866a:	0018      	movs	r0, r3
 800866c:	f7fa fbfe 	bl	8002e6c <send_debug_logs>
}
 8008670:	46c0      	nop			; (mov r8, r8)
 8008672:	46bd      	mov	sp, r7
 8008674:	b064      	add	sp, #400	; 0x190
 8008676:	bdb0      	pop	{r4, r5, r7, pc}
 8008678:	fffffe70 	.word	0xfffffe70
 800867c:	20000bc1 	.word	0x20000bc1
 8008680:	080137d0 	.word	0x080137d0
 8008684:	08013804 	.word	0x08013804

08008688 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008688:	b5b0      	push	{r4, r5, r7, lr}
 800868a:	b0fa      	sub	sp, #488	; 0x1e8
 800868c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800868e:	258e      	movs	r5, #142	; 0x8e
 8008690:	006d      	lsls	r5, r5, #1
 8008692:	197b      	adds	r3, r7, r5
 8008694:	0018      	movs	r0, r3
 8008696:	23c6      	movs	r3, #198	; 0xc6
 8008698:	001a      	movs	r2, r3
 800869a:	2100      	movs	r1, #0
 800869c:	f003 fe6a 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0} ;
 80086a0:	4b28      	ldr	r3, [pc, #160]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 80086a2:	24f4      	movs	r4, #244	; 0xf4
 80086a4:	0064      	lsls	r4, r4, #1
 80086a6:	191b      	adds	r3, r3, r4
 80086a8:	19db      	adds	r3, r3, r7
 80086aa:	0018      	movs	r0, r3
 80086ac:	23c6      	movs	r3, #198	; 0xc6
 80086ae:	001a      	movs	r2, r3
 80086b0:	2100      	movs	r1, #0
 80086b2:	f003 fe5f 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80086b6:	197b      	adds	r3, r7, r5
 80086b8:	2217      	movs	r2, #23
 80086ba:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80086bc:	2354      	movs	r3, #84	; 0x54
 80086be:	18fa      	adds	r2, r7, r3
 80086c0:	197b      	adds	r3, r7, r5
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f000 fdb3 	bl	8009230 <astronode_transport_send_receive>
 80086ca:	0003      	movs	r3, r0
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d133      	bne.n	8008738 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 80086d2:	0021      	movs	r1, r4
 80086d4:	185b      	adds	r3, r3, r1
 80086d6:	19db      	adds	r3, r3, r7
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b97      	cmp	r3, #151	; 0x97
 80086dc:	d128      	bne.n	8008730 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 80086e0:	185b      	adds	r3, r3, r1
 80086e2:	19db      	adds	r3, r3, r7
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80086e8:	4b16      	ldr	r3, [pc, #88]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 80086ea:	185b      	adds	r3, r3, r1
 80086ec:	19db      	adds	r3, r3, r7
 80086ee:	789b      	ldrb	r3, [r3, #2]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80086f4:	4b13      	ldr	r3, [pc, #76]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 80086f6:	185b      	adds	r3, r3, r1
 80086f8:	19db      	adds	r3, r3, r7
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	041b      	lsls	r3, r3, #16
 80086fe:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <astronode_send_rtc_rr+0xbc>)
 8008702:	185b      	adds	r3, r3, r1
 8008704:	19db      	adds	r3, r3, r7
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	061b      	lsls	r3, r3, #24
 800870a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800870c:	24f2      	movs	r4, #242	; 0xf2
 800870e:	0064      	lsls	r4, r4, #1
 8008710:	193a      	adds	r2, r7, r4
 8008712:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008714:	193b      	adds	r3, r7, r4
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	490b      	ldr	r1, [pc, #44]	; (8008748 <astronode_send_rtc_rr+0xc0>)
 800871a:	1d3b      	adds	r3, r7, #4
 800871c:	0018      	movs	r0, r3
 800871e:	f003 fd93 	bl	800c248 <sprintf>
            send_debug_logs ( str ) ;
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	0018      	movs	r0, r3
 8008726:	f7fa fba1 	bl	8002e6c <send_debug_logs>
            return rtc_time ;
 800872a:	193b      	adds	r3, r7, r4
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	e004      	b.n	800873a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <astronode_send_rtc_rr+0xc4>)
 8008732:	0018      	movs	r0, r3
 8008734:	f7fa fb9a 	bl	8002e6c <send_debug_logs>
        }
    }
    return 0 ;
 8008738:	2300      	movs	r3, #0
}
 800873a:	0018      	movs	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	b07a      	add	sp, #488	; 0x1e8
 8008740:	bdb0      	pop	{r4, r5, r7, pc}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	fffffe6c 	.word	0xfffffe6c
 8008748:	08013830 	.word	0x08013830
 800874c:	08013870 	.word	0x08013870

08008750 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b0f8      	sub	sp, #480	; 0x1e0
 8008754:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008756:	258c      	movs	r5, #140	; 0x8c
 8008758:	006d      	lsls	r5, r5, #1
 800875a:	197b      	adds	r3, r7, r5
 800875c:	0018      	movs	r0, r3
 800875e:	23c6      	movs	r3, #198	; 0xc6
 8008760:	001a      	movs	r2, r3
 8008762:	2100      	movs	r1, #0
 8008764:	f003 fe06 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8008768:	4b21      	ldr	r3, [pc, #132]	; (80087f0 <astronode_send_sak_rr+0xa0>)
 800876a:	24f0      	movs	r4, #240	; 0xf0
 800876c:	0064      	lsls	r4, r4, #1
 800876e:	191b      	adds	r3, r3, r4
 8008770:	19db      	adds	r3, r3, r7
 8008772:	0018      	movs	r0, r3
 8008774:	23c6      	movs	r3, #198	; 0xc6
 8008776:	001a      	movs	r2, r3
 8008778:	2100      	movs	r1, #0
 800877a:	f003 fdfb 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800877e:	197b      	adds	r3, r7, r5
 8008780:	2245      	movs	r2, #69	; 0x45
 8008782:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008784:	2350      	movs	r3, #80	; 0x50
 8008786:	18fa      	adds	r2, r7, r3
 8008788:	197b      	adds	r3, r7, r5
 800878a:	0011      	movs	r1, r2
 800878c:	0018      	movs	r0, r3
 800878e:	f000 fd4f 	bl	8009230 <astronode_transport_send_receive>
 8008792:	0003      	movs	r3, r0
 8008794:	2b01      	cmp	r3, #1
 8008796:	d126      	bne.n	80087e6 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <astronode_send_sak_rr+0xa0>)
 800879a:	191b      	adds	r3, r3, r4
 800879c:	19db      	adds	r3, r3, r7
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2bc5      	cmp	r3, #197	; 0xc5
 80087a2:	d11c      	bne.n	80087de <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80087a4:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <astronode_send_sak_rr+0xa0>)
 80087a6:	191b      	adds	r3, r3, r4
 80087a8:	19db      	adds	r3, r3, r7
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	b299      	uxth	r1, r3
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <astronode_send_sak_rr+0xa0>)
 80087b0:	191b      	adds	r3, r3, r4
 80087b2:	19db      	adds	r3, r3, r7
 80087b4:	789b      	ldrb	r3, [r3, #2]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	20ef      	movs	r0, #239	; 0xef
 80087be:	0040      	lsls	r0, r0, #1
 80087c0:	183b      	adds	r3, r7, r0
 80087c2:	188a      	adds	r2, r1, r2
 80087c4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80087c6:	183b      	adds	r3, r7, r0
 80087c8:	881a      	ldrh	r2, [r3, #0]
 80087ca:	490a      	ldr	r1, [pc, #40]	; (80087f4 <astronode_send_sak_rr+0xa4>)
 80087cc:	003b      	movs	r3, r7
 80087ce:	0018      	movs	r0, r3
 80087d0:	f003 fd3a 	bl	800c248 <sprintf>
            send_debug_logs(str);
 80087d4:	003b      	movs	r3, r7
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7fa fb48 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80087dc:	e003      	b.n	80087e6 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <astronode_send_sak_rr+0xa8>)
 80087e0:	0018      	movs	r0, r3
 80087e2:	f7fa fb43 	bl	8002e6c <send_debug_logs>
}
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	46bd      	mov	sp, r7
 80087ea:	b078      	add	sp, #480	; 0x1e0
 80087ec:	bdb0      	pop	{r4, r5, r7, pc}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	fffffe70 	.word	0xfffffe70
 80087f4:	0801388c 	.word	0x0801388c
 80087f8:	080138b8 	.word	0x080138b8

080087fc <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80087fc:	b5b0      	push	{r4, r5, r7, lr}
 80087fe:	b0e4      	sub	sp, #400	; 0x190
 8008800:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008802:	24c8      	movs	r4, #200	; 0xc8
 8008804:	193b      	adds	r3, r7, r4
 8008806:	0018      	movs	r0, r3
 8008808:	23c6      	movs	r3, #198	; 0xc6
 800880a:	001a      	movs	r2, r3
 800880c:	2100      	movs	r1, #0
 800880e:	f003 fdb1 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <astronode_send_sak_cr+0x70>)
 8008814:	25c8      	movs	r5, #200	; 0xc8
 8008816:	006d      	lsls	r5, r5, #1
 8008818:	195b      	adds	r3, r3, r5
 800881a:	19db      	adds	r3, r3, r7
 800881c:	0018      	movs	r0, r3
 800881e:	23c6      	movs	r3, #198	; 0xc6
 8008820:	001a      	movs	r2, r3
 8008822:	2100      	movs	r1, #0
 8008824:	f003 fda6 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008828:	193b      	adds	r3, r7, r4
 800882a:	2246      	movs	r2, #70	; 0x46
 800882c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800882e:	003a      	movs	r2, r7
 8008830:	193b      	adds	r3, r7, r4
 8008832:	0011      	movs	r1, r2
 8008834:	0018      	movs	r0, r3
 8008836:	f000 fcfb 	bl	8009230 <astronode_transport_send_receive>
 800883a:	0003      	movs	r3, r0
 800883c:	2b01      	cmp	r3, #1
 800883e:	d111      	bne.n	8008864 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <astronode_send_sak_cr+0x70>)
 8008842:	195b      	adds	r3, r3, r5
 8008844:	19db      	adds	r3, r3, r7
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2bc6      	cmp	r3, #198	; 0xc6
 800884a:	d107      	bne.n	800885c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <astronode_send_sak_cr+0x74>)
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <astronode_send_sak_cr+0x78>)
 8008854:	0018      	movs	r0, r3
 8008856:	f7fa fb09 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800885a:	e003      	b.n	8008864 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <astronode_send_sak_cr+0x7c>)
 800885e:	0018      	movs	r0, r3
 8008860:	f7fa fb04 	bl	8002e6c <send_debug_logs>
}
 8008864:	46c0      	nop			; (mov r8, r8)
 8008866:	46bd      	mov	sp, r7
 8008868:	b064      	add	sp, #400	; 0x190
 800886a:	bdb0      	pop	{r4, r5, r7, pc}
 800886c:	fffffe70 	.word	0xfffffe70
 8008870:	20000bc0 	.word	0x20000bc0
 8008874:	080138ec 	.word	0x080138ec
 8008878:	08013914 	.word	0x08013914

0800887c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887e:	b0ed      	sub	sp, #436	; 0x1b4
 8008880:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008882:	21c8      	movs	r1, #200	; 0xc8
 8008884:	2318      	movs	r3, #24
 8008886:	18cb      	adds	r3, r1, r3
 8008888:	19db      	adds	r3, r3, r7
 800888a:	0018      	movs	r0, r3
 800888c:	23c6      	movs	r3, #198	; 0xc6
 800888e:	001a      	movs	r2, r3
 8008890:	2100      	movs	r1, #0
 8008892:	f003 fd6f 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8008896:	4b4a      	ldr	r3, [pc, #296]	; (80089c0 <astronode_send_mpn_rr+0x144>)
 8008898:	26cc      	movs	r6, #204	; 0xcc
 800889a:	0076      	lsls	r6, r6, #1
 800889c:	199b      	adds	r3, r3, r6
 800889e:	2218      	movs	r2, #24
 80088a0:	4694      	mov	ip, r2
 80088a2:	44bc      	add	ip, r7
 80088a4:	4463      	add	r3, ip
 80088a6:	0018      	movs	r0, r3
 80088a8:	23c6      	movs	r3, #198	; 0xc6
 80088aa:	001a      	movs	r2, r3
 80088ac:	2100      	movs	r1, #0
 80088ae:	f003 fd61 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80088b2:	21c8      	movs	r1, #200	; 0xc8
 80088b4:	2318      	movs	r3, #24
 80088b6:	18cb      	adds	r3, r1, r3
 80088b8:	19db      	adds	r3, r3, r7
 80088ba:	221b      	movs	r2, #27
 80088bc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088be:	2318      	movs	r3, #24
 80088c0:	18fa      	adds	r2, r7, r3
 80088c2:	2318      	movs	r3, #24
 80088c4:	18cb      	adds	r3, r1, r3
 80088c6:	19db      	adds	r3, r3, r7
 80088c8:	0011      	movs	r1, r2
 80088ca:	0018      	movs	r0, r3
 80088cc:	f000 fcb0 	bl	8009230 <astronode_transport_send_receive>
 80088d0:	0003      	movs	r3, r0
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d16f      	bne.n	80089b6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80088d6:	4b3a      	ldr	r3, [pc, #232]	; (80089c0 <astronode_send_mpn_rr+0x144>)
 80088d8:	0032      	movs	r2, r6
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	2118      	movs	r1, #24
 80088de:	468c      	mov	ip, r1
 80088e0:	44bc      	add	ip, r7
 80088e2:	4463      	add	r3, ip
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b9b      	cmp	r3, #155	; 0x9b
 80088e8:	d161      	bne.n	80089ae <astronode_send_mpn_rr+0x132>
        {
 80088ea:	466b      	mov	r3, sp
 80088ec:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 80088ee:	4b34      	ldr	r3, [pc, #208]	; (80089c0 <astronode_send_mpn_rr+0x144>)
 80088f0:	189b      	adds	r3, r3, r2
 80088f2:	2218      	movs	r2, #24
 80088f4:	4694      	mov	ip, r2
 80088f6:	44bc      	add	ip, r7
 80088f8:	4463      	add	r3, ip
 80088fa:	22c4      	movs	r2, #196	; 0xc4
 80088fc:	5a9b      	ldrh	r3, [r3, r2]
 80088fe:	001a      	movs	r2, r3
 8008900:	3a01      	subs	r2, #1
 8008902:	21ca      	movs	r1, #202	; 0xca
 8008904:	0049      	lsls	r1, r1, #1
 8008906:	2018      	movs	r0, #24
 8008908:	1809      	adds	r1, r1, r0
 800890a:	19c9      	adds	r1, r1, r7
 800890c:	600a      	str	r2, [r1, #0]
 800890e:	001c      	movs	r4, r3
 8008910:	2200      	movs	r2, #0
 8008912:	0015      	movs	r5, r2
 8008914:	0020      	movs	r0, r4
 8008916:	0029      	movs	r1, r5
 8008918:	0004      	movs	r4, r0
 800891a:	0f62      	lsrs	r2, r4, #29
 800891c:	000c      	movs	r4, r1
 800891e:	00e4      	lsls	r4, r4, #3
 8008920:	617c      	str	r4, [r7, #20]
 8008922:	697c      	ldr	r4, [r7, #20]
 8008924:	4314      	orrs	r4, r2
 8008926:	617c      	str	r4, [r7, #20]
 8008928:	0001      	movs	r1, r0
 800892a:	00c9      	lsls	r1, r1, #3
 800892c:	6139      	str	r1, [r7, #16]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	6838      	ldr	r0, [r7, #0]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	0004      	movs	r4, r0
 800893a:	0f62      	lsrs	r2, r4, #29
 800893c:	000c      	movs	r4, r1
 800893e:	00e4      	lsls	r4, r4, #3
 8008940:	60fc      	str	r4, [r7, #12]
 8008942:	68fc      	ldr	r4, [r7, #12]
 8008944:	4314      	orrs	r4, r2
 8008946:	60fc      	str	r4, [r7, #12]
 8008948:	0001      	movs	r1, r0
 800894a:	00ca      	lsls	r2, r1, #3
 800894c:	60ba      	str	r2, [r7, #8]
 800894e:	3307      	adds	r3, #7
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	4669      	mov	r1, sp
 8008956:	1acb      	subs	r3, r1, r3
 8008958:	469d      	mov	sp, r3
 800895a:	466b      	mov	r3, sp
 800895c:	3300      	adds	r3, #0
 800895e:	24c8      	movs	r4, #200	; 0xc8
 8008960:	0064      	lsls	r4, r4, #1
 8008962:	2218      	movs	r2, #24
 8008964:	18a2      	adds	r2, r4, r2
 8008966:	19d1      	adds	r1, r2, r7
 8008968:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <astronode_send_mpn_rr+0x148>)
 800896c:	0018      	movs	r0, r3
 800896e:	f7fa fa7d 	bl	8002e6c <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <astronode_send_mpn_rr+0x144>)
 8008974:	22cc      	movs	r2, #204	; 0xcc
 8008976:	0052      	lsls	r2, r2, #1
 8008978:	189b      	adds	r3, r3, r2
 800897a:	2218      	movs	r2, #24
 800897c:	4694      	mov	ip, r2
 800897e:	44bc      	add	ip, r7
 8008980:	4463      	add	r3, ip
 8008982:	22c4      	movs	r2, #196	; 0xc4
 8008984:	5a9b      	ldrh	r3, [r3, r2]
 8008986:	0019      	movs	r1, r3
 8008988:	2318      	movs	r3, #24
 800898a:	18fb      	adds	r3, r7, r3
 800898c:	3301      	adds	r3, #1
 800898e:	4a0e      	ldr	r2, [pc, #56]	; (80089c8 <astronode_send_mpn_rr+0x14c>)
 8008990:	2018      	movs	r0, #24
 8008992:	1820      	adds	r0, r4, r0
 8008994:	19c0      	adds	r0, r0, r7
 8008996:	6800      	ldr	r0, [r0, #0]
 8008998:	f003 fc22 	bl	800c1e0 <snprintf>
            send_debug_logs(product_number);
 800899c:	2318      	movs	r3, #24
 800899e:	18e3      	adds	r3, r4, r3
 80089a0:	19db      	adds	r3, r3, r7
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7fa fa61 	bl	8002e6c <send_debug_logs>
 80089aa:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80089ac:	e003      	b.n	80089b6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <astronode_send_mpn_rr+0x150>)
 80089b0:	0018      	movs	r0, r3
 80089b2:	f7fa fa5b 	bl	8002e6c <send_debug_logs>
}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	46bd      	mov	sp, r7
 80089ba:	b06d      	add	sp, #436	; 0x1b4
 80089bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	fffffe68 	.word	0xfffffe68
 80089c4:	080139dc 	.word	0x080139dc
 80089c8:	08013514 	.word	0x08013514
 80089cc:	08013550 	.word	0x08013550

080089d0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80089d0:	b5b0      	push	{r4, r5, r7, lr}
 80089d2:	b0e4      	sub	sp, #400	; 0x190
 80089d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80089d6:	24c8      	movs	r4, #200	; 0xc8
 80089d8:	193b      	adds	r3, r7, r4
 80089da:	0018      	movs	r0, r3
 80089dc:	23c6      	movs	r3, #198	; 0xc6
 80089de:	001a      	movs	r2, r3
 80089e0:	2100      	movs	r1, #0
 80089e2:	f003 fcc7 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 80089e6:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <astronode_send_cmd_cr+0x70>)
 80089e8:	25c8      	movs	r5, #200	; 0xc8
 80089ea:	006d      	lsls	r5, r5, #1
 80089ec:	195b      	adds	r3, r3, r5
 80089ee:	19db      	adds	r3, r3, r7
 80089f0:	0018      	movs	r0, r3
 80089f2:	23c6      	movs	r3, #198	; 0xc6
 80089f4:	001a      	movs	r2, r3
 80089f6:	2100      	movs	r1, #0
 80089f8:	f003 fcbc 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 80089fc:	193b      	adds	r3, r7, r4
 80089fe:	2248      	movs	r2, #72	; 0x48
 8008a00:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a02:	003a      	movs	r2, r7
 8008a04:	193b      	adds	r3, r7, r4
 8008a06:	0011      	movs	r1, r2
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f000 fc11 	bl	8009230 <astronode_transport_send_receive>
 8008a0e:	0003      	movs	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d111      	bne.n	8008a38 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <astronode_send_cmd_cr+0x70>)
 8008a16:	195b      	adds	r3, r3, r5
 8008a18:	19db      	adds	r3, r3, r7
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2bc8      	cmp	r3, #200	; 0xc8
 8008a1e:	d107      	bne.n	8008a30 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <astronode_send_cmd_cr+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008a26:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <astronode_send_cmd_cr+0x78>)
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f7fa fa1f 	bl	8002e6c <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008a2e:	e003      	b.n	8008a38 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <astronode_send_cmd_cr+0x7c>)
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7fa fa1a 	bl	8002e6c <send_debug_logs>
}
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b064      	add	sp, #400	; 0x190
 8008a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a40:	fffffe70 	.word	0xfffffe70
 8008a44:	20000bc2 	.word	0x20000bc2
 8008a48:	08013e2c 	.word	0x08013e2c
 8008a4c:	08013e50 	.word	0x08013e50

08008a50 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a52:	4cac      	ldr	r4, [pc, #688]	; (8008d04 <astronode_send_cmd_rr+0x2b4>)
 8008a54:	44a5      	add	sp, r4
 8008a56:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a58:	218c      	movs	r1, #140	; 0x8c
 8008a5a:	0049      	lsls	r1, r1, #1
 8008a5c:	2318      	movs	r3, #24
 8008a5e:	18cb      	adds	r3, r1, r3
 8008a60:	19db      	adds	r3, r3, r7
 8008a62:	0018      	movs	r0, r3
 8008a64:	23c6      	movs	r3, #198	; 0xc6
 8008a66:	001a      	movs	r2, r3
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f003 fc83 	bl	800c374 <memset>
    astronode_app_msg_t answer = {0};
 8008a6e:	4ba6      	ldr	r3, [pc, #664]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008a70:	26f8      	movs	r6, #248	; 0xf8
 8008a72:	0076      	lsls	r6, r6, #1
 8008a74:	199b      	adds	r3, r3, r6
 8008a76:	2218      	movs	r2, #24
 8008a78:	4694      	mov	ip, r2
 8008a7a:	44bc      	add	ip, r7
 8008a7c:	4463      	add	r3, ip
 8008a7e:	0018      	movs	r0, r3
 8008a80:	23c6      	movs	r3, #198	; 0xc6
 8008a82:	001a      	movs	r2, r3
 8008a84:	2100      	movs	r1, #0
 8008a86:	f003 fc75 	bl	800c374 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008a8a:	218c      	movs	r1, #140	; 0x8c
 8008a8c:	0049      	lsls	r1, r1, #1
 8008a8e:	2318      	movs	r3, #24
 8008a90:	18cb      	adds	r3, r1, r3
 8008a92:	19db      	adds	r3, r3, r7
 8008a94:	2247      	movs	r2, #71	; 0x47
 8008a96:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a98:	2350      	movs	r3, #80	; 0x50
 8008a9a:	2218      	movs	r2, #24
 8008a9c:	189b      	adds	r3, r3, r2
 8008a9e:	19da      	adds	r2, r3, r7
 8008aa0:	2318      	movs	r3, #24
 8008aa2:	18cb      	adds	r3, r1, r3
 8008aa4:	19db      	adds	r3, r3, r7
 8008aa6:	0011      	movs	r1, r2
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 fbc1 	bl	8009230 <astronode_transport_send_receive>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d000      	beq.n	8008ab6 <astronode_send_cmd_rr+0x66>
 8008ab4:	e121      	b.n	8008cfa <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008ab6:	4b94      	ldr	r3, [pc, #592]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008ab8:	199b      	adds	r3, r3, r6
 8008aba:	2218      	movs	r2, #24
 8008abc:	4694      	mov	ip, r2
 8008abe:	44bc      	add	ip, r7
 8008ac0:	4463      	add	r3, ip
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2bc7      	cmp	r3, #199	; 0xc7
 8008ac6:	d000      	beq.n	8008aca <astronode_send_cmd_rr+0x7a>
 8008ac8:	e113      	b.n	8008cf2 <astronode_send_cmd_rr+0x2a2>
        {
 8008aca:	466b      	mov	r3, sp
 8008acc:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008ace:	4b8f      	ldr	r3, [pc, #572]	; (8008d0c <astronode_send_cmd_rr+0x2bc>)
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7fa f9cb 	bl	8002e6c <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008ad6:	4b8c      	ldr	r3, [pc, #560]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008ad8:	21f8      	movs	r1, #248	; 0xf8
 8008ada:	0049      	lsls	r1, r1, #1
 8008adc:	185b      	adds	r3, r3, r1
 8008ade:	2218      	movs	r2, #24
 8008ae0:	4694      	mov	ip, r2
 8008ae2:	44bc      	add	ip, r7
 8008ae4:	4463      	add	r3, ip
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008aea:	4b87      	ldr	r3, [pc, #540]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008aec:	185b      	adds	r3, r3, r1
 8008aee:	2018      	movs	r0, #24
 8008af0:	4684      	mov	ip, r0
 8008af2:	44bc      	add	ip, r7
 8008af4:	4463      	add	r3, ip
 8008af6:	789b      	ldrb	r3, [r3, #2]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008afc:	4b82      	ldr	r3, [pc, #520]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008afe:	185b      	adds	r3, r3, r1
 8008b00:	2018      	movs	r0, #24
 8008b02:	4684      	mov	ip, r0
 8008b04:	44bc      	add	ip, r7
 8008b06:	4463      	add	r3, ip
 8008b08:	78db      	ldrb	r3, [r3, #3]
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008b0e:	4b7e      	ldr	r3, [pc, #504]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008b10:	185b      	adds	r3, r3, r1
 8008b12:	2118      	movs	r1, #24
 8008b14:	468c      	mov	ip, r1
 8008b16:	44bc      	add	ip, r7
 8008b18:	4463      	add	r3, ip
 8008b1a:	791b      	ldrb	r3, [r3, #4]
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008b20:	22f4      	movs	r2, #244	; 0xf4
 8008b22:	0052      	lsls	r2, r2, #1
 8008b24:	2118      	movs	r1, #24
 8008b26:	1851      	adds	r1, r2, r1
 8008b28:	19c8      	adds	r0, r1, r7
 8008b2a:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008b2c:	2318      	movs	r3, #24
 8008b2e:	18d3      	adds	r3, r2, r3
 8008b30:	19db      	adds	r3, r3, r7
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	4976      	ldr	r1, [pc, #472]	; (8008d10 <astronode_send_cmd_rr+0x2c0>)
 8008b36:	2318      	movs	r3, #24
 8008b38:	18fb      	adds	r3, r7, r3
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f003 fb84 	bl	800c248 <sprintf>
            send_debug_logs(str);
 8008b40:	2318      	movs	r3, #24
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	0018      	movs	r0, r3
 8008b46:	f7fa f991 	bl	8002e6c <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008b4a:	4b6f      	ldr	r3, [pc, #444]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008b4c:	21f8      	movs	r1, #248	; 0xf8
 8008b4e:	0049      	lsls	r1, r1, #1
 8008b50:	185b      	adds	r3, r3, r1
 8008b52:	2218      	movs	r2, #24
 8008b54:	4694      	mov	ip, r2
 8008b56:	44bc      	add	ip, r7
 8008b58:	4463      	add	r3, ip
 8008b5a:	22c4      	movs	r2, #196	; 0xc4
 8008b5c:	5a9b      	ldrh	r3, [r3, r2]
 8008b5e:	2b2c      	cmp	r3, #44	; 0x2c
 8008b60:	d00e      	beq.n	8008b80 <astronode_send_cmd_rr+0x130>
 8008b62:	4b69      	ldr	r3, [pc, #420]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008b64:	185b      	adds	r3, r3, r1
 8008b66:	2218      	movs	r2, #24
 8008b68:	4694      	mov	ip, r2
 8008b6a:	44bc      	add	ip, r7
 8008b6c:	4463      	add	r3, ip
 8008b6e:	22c4      	movs	r2, #196	; 0xc4
 8008b70:	5a9b      	ldrh	r3, [r3, r2]
 8008b72:	2b0c      	cmp	r3, #12
 8008b74:	d004      	beq.n	8008b80 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008b76:	4b67      	ldr	r3, [pc, #412]	; (8008d14 <astronode_send_cmd_rr+0x2c4>)
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7fa f977 	bl	8002e6c <send_debug_logs>
                return;
 8008b7e:	e0b6      	b.n	8008cee <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008b80:	4b61      	ldr	r3, [pc, #388]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008b82:	22f8      	movs	r2, #248	; 0xf8
 8008b84:	0052      	lsls	r2, r2, #1
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	2218      	movs	r2, #24
 8008b8a:	4694      	mov	ip, r2
 8008b8c:	44bc      	add	ip, r7
 8008b8e:	4463      	add	r3, ip
 8008b90:	22c4      	movs	r2, #196	; 0xc4
 8008b92:	5a9b      	ldrh	r3, [r3, r2]
 8008b94:	001a      	movs	r2, r3
 8008b96:	3a01      	subs	r2, #1
 8008b98:	21f2      	movs	r1, #242	; 0xf2
 8008b9a:	0049      	lsls	r1, r1, #1
 8008b9c:	2018      	movs	r0, #24
 8008b9e:	1809      	adds	r1, r1, r0
 8008ba0:	19c9      	adds	r1, r1, r7
 8008ba2:	600a      	str	r2, [r1, #0]
 8008ba4:	001c      	movs	r4, r3
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	0015      	movs	r5, r2
 8008baa:	0020      	movs	r0, r4
 8008bac:	0029      	movs	r1, r5
 8008bae:	0004      	movs	r4, r0
 8008bb0:	0f62      	lsrs	r2, r4, #29
 8008bb2:	000c      	movs	r4, r1
 8008bb4:	00e4      	lsls	r4, r4, #3
 8008bb6:	617c      	str	r4, [r7, #20]
 8008bb8:	697c      	ldr	r4, [r7, #20]
 8008bba:	4314      	orrs	r4, r2
 8008bbc:	617c      	str	r4, [r7, #20]
 8008bbe:	0001      	movs	r1, r0
 8008bc0:	00c9      	lsls	r1, r1, #3
 8008bc2:	6139      	str	r1, [r7, #16]
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	6838      	ldr	r0, [r7, #0]
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	0004      	movs	r4, r0
 8008bd0:	0f62      	lsrs	r2, r4, #29
 8008bd2:	000c      	movs	r4, r1
 8008bd4:	00e4      	lsls	r4, r4, #3
 8008bd6:	60fc      	str	r4, [r7, #12]
 8008bd8:	68fc      	ldr	r4, [r7, #12]
 8008bda:	4314      	orrs	r4, r2
 8008bdc:	60fc      	str	r4, [r7, #12]
 8008bde:	0001      	movs	r1, r0
 8008be0:	00ca      	lsls	r2, r1, #3
 8008be2:	60ba      	str	r2, [r7, #8]
 8008be4:	3307      	adds	r3, #7
 8008be6:	08db      	lsrs	r3, r3, #3
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4669      	mov	r1, sp
 8008bec:	1acb      	subs	r3, r1, r3
 8008bee:	469d      	mov	sp, r3
 8008bf0:	466b      	mov	r3, sp
 8008bf2:	3300      	adds	r3, #0
 8008bf4:	20f0      	movs	r0, #240	; 0xf0
 8008bf6:	0040      	lsls	r0, r0, #1
 8008bf8:	2218      	movs	r2, #24
 8008bfa:	1882      	adds	r2, r0, r2
 8008bfc:	19d1      	adds	r1, r2, r7
 8008bfe:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008c00:	4b41      	ldr	r3, [pc, #260]	; (8008d08 <astronode_send_cmd_rr+0x2b8>)
 8008c02:	22f8      	movs	r2, #248	; 0xf8
 8008c04:	0052      	lsls	r2, r2, #1
 8008c06:	189b      	adds	r3, r3, r2
 8008c08:	2218      	movs	r2, #24
 8008c0a:	4694      	mov	ip, r2
 8008c0c:	44bc      	add	ip, r7
 8008c0e:	4463      	add	r3, ip
 8008c10:	22c4      	movs	r2, #196	; 0xc4
 8008c12:	5a9b      	ldrh	r3, [r3, r2]
 8008c14:	3b03      	subs	r3, #3
 8008c16:	0019      	movs	r1, r3
 8008c18:	2350      	movs	r3, #80	; 0x50
 8008c1a:	2218      	movs	r2, #24
 8008c1c:	189b      	adds	r3, r3, r2
 8008c1e:	19db      	adds	r3, r3, r7
 8008c20:	3305      	adds	r3, #5
 8008c22:	4a3d      	ldr	r2, [pc, #244]	; (8008d18 <astronode_send_cmd_rr+0x2c8>)
 8008c24:	2418      	movs	r4, #24
 8008c26:	1900      	adds	r0, r0, r4
 8008c28:	19c0      	adds	r0, r0, r7
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	f003 fad8 	bl	800c1e0 <snprintf>
 8008c30:	0002      	movs	r2, r0
 8008c32:	23ef      	movs	r3, #239	; 0xef
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	2118      	movs	r1, #24
 8008c38:	185b      	adds	r3, r3, r1
 8008c3a:	19db      	adds	r3, r3, r7
 8008c3c:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c3e:	23f0      	movs	r3, #240	; 0xf0
 8008c40:	33ff      	adds	r3, #255	; 0xff
 8008c42:	2218      	movs	r2, #24
 8008c44:	189b      	adds	r3, r3, r2
 8008c46:	19db      	adds	r3, r3, r7
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
 8008c4c:	e024      	b.n	8008c98 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008c4e:	23f0      	movs	r3, #240	; 0xf0
 8008c50:	33ff      	adds	r3, #255	; 0xff
 8008c52:	2218      	movs	r2, #24
 8008c54:	189b      	adds	r3, r3, r2
 8008c56:	19db      	adds	r3, r3, r7
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	22f0      	movs	r2, #240	; 0xf0
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	2118      	movs	r1, #24
 8008c60:	1852      	adds	r2, r2, r1
 8008c62:	19d2      	adds	r2, r2, r7
 8008c64:	6812      	ldr	r2, [r2, #0]
 8008c66:	5cd3      	ldrb	r3, [r2, r3]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	4b2c      	ldr	r3, [pc, #176]	; (8008d1c <astronode_send_cmd_rr+0x2cc>)
 8008c6c:	18d3      	adds	r3, r2, r3
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	001a      	movs	r2, r3
 8008c72:	2397      	movs	r3, #151	; 0x97
 8008c74:	4013      	ands	r3, r2
 8008c76:	d104      	bne.n	8008c82 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008c78:	4b29      	ldr	r3, [pc, #164]	; (8008d20 <astronode_send_cmd_rr+0x2d0>)
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7fa f8f6 	bl	8002e6c <send_debug_logs>
                    return;
 8008c80:	e035      	b.n	8008cee <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c82:	21f0      	movs	r1, #240	; 0xf0
 8008c84:	31ff      	adds	r1, #255	; 0xff
 8008c86:	2318      	movs	r3, #24
 8008c88:	18cb      	adds	r3, r1, r3
 8008c8a:	19db      	adds	r3, r3, r7
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	2318      	movs	r3, #24
 8008c90:	18cb      	adds	r3, r1, r3
 8008c92:	19db      	adds	r3, r3, r7
 8008c94:	3201      	adds	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	23f0      	movs	r3, #240	; 0xf0
 8008c9a:	33ff      	adds	r3, #255	; 0xff
 8008c9c:	2218      	movs	r2, #24
 8008c9e:	189b      	adds	r3, r3, r2
 8008ca0:	19db      	adds	r3, r3, r7
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	22ef      	movs	r2, #239	; 0xef
 8008ca8:	0052      	lsls	r2, r2, #1
 8008caa:	2118      	movs	r1, #24
 8008cac:	1852      	adds	r2, r2, r1
 8008cae:	19d2      	adds	r2, r2, r7
 8008cb0:	8812      	ldrh	r2, [r2, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d8cb      	bhi.n	8008c4e <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <astronode_send_cmd_rr+0x2d4>)
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7fa f8d7 	bl	8002e6c <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008cbe:	2350      	movs	r3, #80	; 0x50
 8008cc0:	2218      	movs	r2, #24
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	19db      	adds	r3, r3, r7
 8008cc6:	1d5a      	adds	r2, r3, #5
 8008cc8:	4917      	ldr	r1, [pc, #92]	; (8008d28 <astronode_send_cmd_rr+0x2d8>)
 8008cca:	24f0      	movs	r4, #240	; 0xf0
 8008ccc:	0064      	lsls	r4, r4, #1
 8008cce:	2318      	movs	r3, #24
 8008cd0:	18e3      	adds	r3, r4, r3
 8008cd2:	19db      	adds	r3, r3, r7
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f003 fab6 	bl	800c248 <sprintf>
            send_debug_logs(command_content);
 8008cdc:	2318      	movs	r3, #24
 8008cde:	18e3      	adds	r3, r4, r3
 8008ce0:	19db      	adds	r3, r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f7fa f8c1 	bl	8002e6c <send_debug_logs>
 8008cea:	46b5      	mov	sp, r6
 8008cec:	e005      	b.n	8008cfa <astronode_send_cmd_rr+0x2aa>
                return;
 8008cee:	46b5      	mov	sp, r6
 8008cf0:	e003      	b.n	8008cfa <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <astronode_send_cmd_rr+0x2dc>)
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f7fa f8b9 	bl	8002e6c <send_debug_logs>
        }
    }
}
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	2383      	movs	r3, #131	; 0x83
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	449d      	add	sp, r3
 8008d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d04:	fffffdf4 	.word	0xfffffdf4
 8008d08:	fffffe60 	.word	0xfffffe60
 8008d0c:	08013e68 	.word	0x08013e68
 8008d10:	08013e84 	.word	0x08013e84
 8008d14:	08013ed4 	.word	0x08013ed4
 8008d18:	08013514 	.word	0x08013514
 8008d1c:	080148f8 	.word	0x080148f8
 8008d20:	08013ee8 	.word	0x08013ee8
 8008d24:	08013f14 	.word	0x08013f14
 8008d28:	08013f2c 	.word	0x08013f2c
 8008d2c:	08013f30 	.word	0x08013f30

08008d30 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <is_sak_available+0x10>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
}
 8008d38:	0018      	movs	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	20000bc0 	.word	0x20000bc0

08008d44 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <is_astronode_reset+0x10>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	20000bc1 	.word	0x20000bc1

08008d58 <is_command_available>:

bool is_command_available()
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <is_command_available+0x10>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
}
 8008d60:	0018      	movs	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	20000bc2 	.word	0x20000bc2

08008d6c <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	0002      	movs	r2, r0
 8008d74:	6039      	str	r1, [r7, #0]
 8008d76:	1dfb      	adds	r3, r7, #7
 8008d78:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008d7a:	1dfb      	adds	r3, r7, #7
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8008d80:	d90b      	bls.n	8008d9a <ascii_to_value+0x2e>
 8008d82:	1dfb      	adds	r3, r7, #7
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b39      	cmp	r3, #57	; 0x39
 8008d88:	d807      	bhi.n	8008d9a <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008d8a:	1dfb      	adds	r3, r7, #7
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	701a      	strb	r2, [r3, #0]
        return true;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e010      	b.n	8008dbc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008d9a:	1dfb      	adds	r3, r7, #7
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d90b      	bls.n	8008dba <ascii_to_value+0x4e>
 8008da2:	1dfb      	adds	r3, r7, #7
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b46      	cmp	r3, #70	; 0x46
 8008da8:	d807      	bhi.n	8008dba <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008daa:	1dfb      	adds	r3, r7, #7
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	3b37      	subs	r3, #55	; 0x37
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	701a      	strb	r2, [r3, #0]
        return true;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008dba:	2300      	movs	r3, #0
    }
}
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008dce:	250e      	movs	r5, #14
 8008dd0:	197b      	adds	r3, r7, r5
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008dd6:	197b      	adds	r3, r7, r5
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	197a      	adds	r2, r7, r5
 8008ddc:	1c59      	adds	r1, r3, #1
 8008dde:	8011      	strh	r1, [r2, #0]
 8008de0:	001a      	movs	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	189b      	adds	r3, r3, r2
 8008de6:	2202      	movs	r2, #2
 8008de8:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	260a      	movs	r6, #10
 8008dee:	19bc      	adds	r4, r7, r6
 8008df0:	4a44      	ldr	r2, [pc, #272]	; (8008f04 <astronode_create_request_transport+0x140>)
 8008df2:	2101      	movs	r1, #1
 8008df4:	0018      	movs	r0, r3
 8008df6:	f000 fa7d 	bl	80092f4 <calculate_crc>
 8008dfa:	0003      	movs	r3, r0
 8008dfc:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	1c58      	adds	r0, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	22c4      	movs	r2, #196	; 0xc4
 8008e06:	5a99      	ldrh	r1, [r3, r2]
 8008e08:	19bc      	adds	r4, r7, r6
 8008e0a:	19bb      	adds	r3, r7, r6
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	001a      	movs	r2, r3
 8008e10:	f000 fa70 	bl	80092f4 <calculate_crc>
 8008e14:	0003      	movs	r3, r0
 8008e16:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008e18:	19bb      	adds	r3, r7, r6
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	b21a      	sxth	r2, r3
 8008e20:	0031      	movs	r1, r6
 8008e22:	19bb      	adds	r3, r7, r6
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	b21a      	sxth	r2, r3
 8008e30:	187b      	adds	r3, r7, r1
 8008e32:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7818      	ldrb	r0, [r3, #0]
 8008e38:	197b      	adds	r3, r7, r5
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	18d3      	adds	r3, r2, r3
 8008e40:	0019      	movs	r1, r3
 8008e42:	f000 fbeb 	bl	800961c <uint8_to_ascii_buffer>
    index += 2;
 8008e46:	197b      	adds	r3, r7, r5
 8008e48:	197a      	adds	r2, r7, r5
 8008e4a:	8812      	ldrh	r2, [r2, #0]
 8008e4c:	3202      	adds	r2, #2
 8008e4e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008e50:	230c      	movs	r3, #12
 8008e52:	18fb      	adds	r3, r7, r3
 8008e54:	2200      	movs	r2, #0
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e017      	b.n	8008e8a <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008e5a:	240c      	movs	r4, #12
 8008e5c:	193b      	adds	r3, r7, r4
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	18d3      	adds	r3, r2, r3
 8008e64:	7858      	ldrb	r0, [r3, #1]
 8008e66:	250e      	movs	r5, #14
 8008e68:	197b      	adds	r3, r7, r5
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	18d3      	adds	r3, r2, r3
 8008e70:	0019      	movs	r1, r3
 8008e72:	f000 fbd3 	bl	800961c <uint8_to_ascii_buffer>
        index += 2;
 8008e76:	197b      	adds	r3, r7, r5
 8008e78:	197a      	adds	r2, r7, r5
 8008e7a:	8812      	ldrh	r2, [r2, #0]
 8008e7c:	3202      	adds	r2, #2
 8008e7e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008e80:	193b      	adds	r3, r7, r4
 8008e82:	881a      	ldrh	r2, [r3, #0]
 8008e84:	193b      	adds	r3, r7, r4
 8008e86:	3201      	adds	r2, #1
 8008e88:	801a      	strh	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	22c4      	movs	r2, #196	; 0xc4
 8008e8e:	5a9b      	ldrh	r3, [r3, r2]
 8008e90:	220c      	movs	r2, #12
 8008e92:	18ba      	adds	r2, r7, r2
 8008e94:	8812      	ldrh	r2, [r2, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3df      	bcc.n	8008e5a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008e9a:	250a      	movs	r5, #10
 8008e9c:	197b      	adds	r3, r7, r5
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	b2d8      	uxtb	r0, r3
 8008ea6:	240e      	movs	r4, #14
 8008ea8:	193b      	adds	r3, r7, r4
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	18d3      	adds	r3, r2, r3
 8008eb0:	0019      	movs	r1, r3
 8008eb2:	f000 fbb3 	bl	800961c <uint8_to_ascii_buffer>
    index += 2;
 8008eb6:	0021      	movs	r1, r4
 8008eb8:	187b      	adds	r3, r7, r1
 8008eba:	187a      	adds	r2, r7, r1
 8008ebc:	8812      	ldrh	r2, [r2, #0]
 8008ebe:	3202      	adds	r2, #2
 8008ec0:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b2d8      	uxtb	r0, r3
 8008ec8:	000c      	movs	r4, r1
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	18d3      	adds	r3, r2, r3
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	f000 fba2 	bl	800961c <uint8_to_ascii_buffer>
    index += 2;
 8008ed8:	0020      	movs	r0, r4
 8008eda:	183b      	adds	r3, r7, r0
 8008edc:	183a      	adds	r2, r7, r0
 8008ede:	8812      	ldrh	r2, [r2, #0]
 8008ee0:	3202      	adds	r2, #2
 8008ee2:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008ee4:	183b      	adds	r3, r7, r0
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	183a      	adds	r2, r7, r0
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	8011      	strh	r1, [r2, #0]
 8008eee:	001a      	movs	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	189b      	adds	r3, r3, r2
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	701a      	strb	r2, [r3, #0]

    return index;
 8008ef8:	183b      	adds	r3, r7, r0
 8008efa:	881b      	ldrh	r3, [r3, #0]
}
 8008efc:	0018      	movs	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b005      	add	sp, #20
 8008f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f04:	0000ffff 	.word	0x0000ffff

08008f08 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	b089      	sub	sp, #36	; 0x24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	607a      	str	r2, [r7, #4]
 8008f12:	230a      	movs	r3, #10
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	1c0a      	adds	r2, r1, #0
 8008f18:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d005      	beq.n	8008f2e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008f22:	4bbd      	ldr	r3, [pc, #756]	; (8009218 <astronode_decode_answer_transport+0x310>)
 8008f24:	0018      	movs	r0, r3
 8008f26:	f7f9 ffa1 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e170      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008f2e:	210a      	movs	r1, #10
 8008f30:	187b      	adds	r3, r7, r1
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	2201      	movs	r2, #1
 8008f36:	4013      	ands	r3, r2
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <astronode_decode_answer_transport+0x3e>
 8008f3e:	187b      	adds	r3, r7, r1
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	2b07      	cmp	r3, #7
 8008f44:	d805      	bhi.n	8008f52 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008f46:	4bb5      	ldr	r3, [pc, #724]	; (800921c <astronode_decode_answer_transport+0x314>)
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7f9 ff8f 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e15e      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008f52:	230a      	movs	r3, #10
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	3b08      	subs	r3, #8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da00      	bge.n	8008f60 <astronode_decode_answer_transport+0x58>
 8008f5e:	3301      	adds	r3, #1
 8008f60:	105b      	asrs	r3, r3, #1
 8008f62:	b299      	uxth	r1, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	22c4      	movs	r2, #196	; 0xc4
 8008f68:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	18d3      	adds	r3, r2, r3
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d005      	beq.n	8008f88 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008f7c:	4ba8      	ldr	r3, [pc, #672]	; (8009220 <astronode_decode_answer_transport+0x318>)
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f7f9 ff74 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e143      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008f88:	2117      	movs	r1, #23
 8008f8a:	187b      	adds	r3, r7, r1
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008f90:	2416      	movs	r4, #22
 8008f92:	193b      	adds	r3, r7, r4
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	187a      	adds	r2, r7, r1
 8008fa0:	0011      	movs	r1, r2
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f7ff fee2 	bl	8008d6c <ascii_to_value>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	001a      	movs	r2, r3
 8008fac:	2301      	movs	r3, #1
 8008fae:	4053      	eors	r3, r2
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10e      	bne.n	8008fd4 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3302      	adds	r3, #2
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	193a      	adds	r2, r7, r4
 8008fbe:	0011      	movs	r1, r2
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f7ff fed3 	bl	8008d6c <ascii_to_value>
 8008fc6:	0003      	movs	r3, r0
 8008fc8:	001a      	movs	r2, r3
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4053      	eors	r3, r2
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fd4:	4b93      	ldr	r3, [pc, #588]	; (8009224 <astronode_decode_answer_transport+0x31c>)
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f7f9 ff48 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e117      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008fe0:	2317      	movs	r3, #23
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	2316      	movs	r3, #22
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	18d3      	adds	r3, r2, r3
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008ff8:	231e      	movs	r3, #30
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	231c      	movs	r3, #28
 8009002:	18fb      	adds	r3, r7, r3
 8009004:	2200      	movs	r2, #0
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e045      	b.n	8009096 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800900a:	241e      	movs	r4, #30
 800900c:	193b      	adds	r3, r7, r4
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	18d3      	adds	r3, r2, r3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2217      	movs	r2, #23
 8009018:	18ba      	adds	r2, r7, r2
 800901a:	0011      	movs	r1, r2
 800901c:	0018      	movs	r0, r3
 800901e:	f7ff fea5 	bl	8008d6c <ascii_to_value>
 8009022:	0003      	movs	r3, r0
 8009024:	001a      	movs	r2, r3
 8009026:	2301      	movs	r3, #1
 8009028:	4053      	eors	r3, r2
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d112      	bne.n	8009056 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009030:	193b      	adds	r3, r7, r4
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	18d3      	adds	r3, r2, r3
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2216      	movs	r2, #22
 800903e:	18ba      	adds	r2, r7, r2
 8009040:	0011      	movs	r1, r2
 8009042:	0018      	movs	r0, r3
 8009044:	f7ff fe92 	bl	8008d6c <ascii_to_value>
 8009048:	0003      	movs	r3, r0
 800904a:	001a      	movs	r2, r3
 800904c:	2301      	movs	r3, #1
 800904e:	4053      	eors	r3, r2
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009056:	4b73      	ldr	r3, [pc, #460]	; (8009224 <astronode_decode_answer_transport+0x31c>)
 8009058:	0018      	movs	r0, r3
 800905a:	f7f9 ff07 	bl	8002e6c <send_debug_logs>
            return RS_FAILURE;
 800905e:	2300      	movs	r3, #0
 8009060:	e0d6      	b.n	8009210 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8009062:	2317      	movs	r3, #23
 8009064:	18fb      	adds	r3, r7, r3
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	b2d9      	uxtb	r1, r3
 800906c:	2316      	movs	r3, #22
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	781a      	ldrb	r2, [r3, #0]
 8009072:	201c      	movs	r0, #28
 8009074:	183b      	adds	r3, r7, r0
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	1838      	adds	r0, r7, r0
 800907a:	1c5c      	adds	r4, r3, #1
 800907c:	8004      	strh	r4, [r0, #0]
 800907e:	0018      	movs	r0, r3
 8009080:	188b      	adds	r3, r1, r2
 8009082:	b2da      	uxtb	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	181b      	adds	r3, r3, r0
 8009088:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800908a:	221e      	movs	r2, #30
 800908c:	18bb      	adds	r3, r7, r2
 800908e:	18ba      	adds	r2, r7, r2
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	3202      	adds	r2, #2
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	231e      	movs	r3, #30
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	881a      	ldrh	r2, [r3, #0]
 800909c:	260a      	movs	r6, #10
 800909e:	19bb      	adds	r3, r7, r6
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	3b05      	subs	r3, #5
 80090a4:	429a      	cmp	r2, r3
 80090a6:	dbb0      	blt.n	800900a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	251a      	movs	r5, #26
 80090ac:	197c      	adds	r4, r7, r5
 80090ae:	4a5e      	ldr	r2, [pc, #376]	; (8009228 <astronode_decode_answer_transport+0x320>)
 80090b0:	2101      	movs	r1, #1
 80090b2:	0018      	movs	r0, r3
 80090b4:	f000 f91e 	bl	80092f4 <calculate_crc>
 80090b8:	0003      	movs	r3, r0
 80090ba:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	1c58      	adds	r0, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	22c4      	movs	r2, #196	; 0xc4
 80090c4:	5a99      	ldrh	r1, [r3, r2]
 80090c6:	197c      	adds	r4, r7, r5
 80090c8:	197b      	adds	r3, r7, r5
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	001a      	movs	r2, r3
 80090ce:	f000 f911 	bl	80092f4 <calculate_crc>
 80090d2:	0003      	movs	r3, r0
 80090d4:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80090d6:	197b      	adds	r3, r7, r5
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	b21a      	sxth	r2, r3
 80090de:	0029      	movs	r1, r5
 80090e0:	197b      	adds	r3, r7, r5
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	0a1b      	lsrs	r3, r3, #8
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	b21a      	sxth	r2, r3
 80090ee:	187b      	adds	r3, r7, r1
 80090f0:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80090f2:	19bb      	adds	r3, r7, r6
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	3b05      	subs	r3, #5
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	18d3      	adds	r3, r2, r3
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2217      	movs	r2, #23
 8009100:	18ba      	adds	r2, r7, r2
 8009102:	0011      	movs	r1, r2
 8009104:	0018      	movs	r0, r3
 8009106:	f7ff fe31 	bl	8008d6c <ascii_to_value>
 800910a:	0003      	movs	r3, r0
 800910c:	001a      	movs	r2, r3
 800910e:	2301      	movs	r3, #1
 8009110:	4053      	eors	r3, r2
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d112      	bne.n	800913e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8009118:	19bb      	adds	r3, r7, r6
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	3b04      	subs	r3, #4
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	18d3      	adds	r3, r2, r3
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2216      	movs	r2, #22
 8009126:	18ba      	adds	r2, r7, r2
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fe1e 	bl	8008d6c <ascii_to_value>
 8009130:	0003      	movs	r3, r0
 8009132:	001a      	movs	r2, r3
 8009134:	2301      	movs	r3, #1
 8009136:	4053      	eors	r3, r2
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <astronode_decode_answer_transport+0x31c>)
 8009140:	0018      	movs	r0, r3
 8009142:	f7f9 fe93 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 8009146:	2300      	movs	r3, #0
 8009148:	e062      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800914a:	2017      	movs	r0, #23
 800914c:	183b      	adds	r3, r7, r0
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	031b      	lsls	r3, r3, #12
 8009154:	b299      	uxth	r1, r3
 8009156:	2416      	movs	r4, #22
 8009158:	193b      	adds	r3, r7, r4
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	b29a      	uxth	r2, r3
 8009162:	2318      	movs	r3, #24
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	188a      	adds	r2, r1, r2
 8009168:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800916a:	250a      	movs	r5, #10
 800916c:	197b      	adds	r3, r7, r5
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	3b03      	subs	r3, #3
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	18d3      	adds	r3, r2, r3
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	183a      	adds	r2, r7, r0
 800917a:	0011      	movs	r1, r2
 800917c:	0018      	movs	r0, r3
 800917e:	f7ff fdf5 	bl	8008d6c <ascii_to_value>
 8009182:	0003      	movs	r3, r0
 8009184:	001a      	movs	r2, r3
 8009186:	2301      	movs	r3, #1
 8009188:	4053      	eors	r3, r2
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d111      	bne.n	80091b4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009190:	197b      	adds	r3, r7, r5
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	3b02      	subs	r3, #2
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	18d3      	adds	r3, r2, r3
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	193a      	adds	r2, r7, r4
 800919e:	0011      	movs	r1, r2
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff fde3 	bl	8008d6c <ascii_to_value>
 80091a6:	0003      	movs	r3, r0
 80091a8:	001a      	movs	r2, r3
 80091aa:	2301      	movs	r3, #1
 80091ac:	4053      	eors	r3, r2
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <astronode_decode_answer_transport+0x31c>)
 80091b6:	0018      	movs	r0, r3
 80091b8:	f7f9 fe58 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 80091bc:	2300      	movs	r3, #0
 80091be:	e027      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80091c0:	2317      	movs	r3, #23
 80091c2:	18fb      	adds	r3, r7, r3
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	2316      	movs	r3, #22
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	18d3      	adds	r3, r2, r3
 80091d6:	b299      	uxth	r1, r3
 80091d8:	2018      	movs	r0, #24
 80091da:	183b      	adds	r3, r7, r0
 80091dc:	183a      	adds	r2, r7, r0
 80091de:	8812      	ldrh	r2, [r2, #0]
 80091e0:	188a      	adds	r2, r1, r2
 80091e2:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80091e4:	183a      	adds	r2, r7, r0
 80091e6:	231a      	movs	r3, #26
 80091e8:	18fb      	adds	r3, r7, r3
 80091ea:	8812      	ldrh	r2, [r2, #0]
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d005      	beq.n	80091fe <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80091f2:	4b0e      	ldr	r3, [pc, #56]	; (800922c <astronode_decode_answer_transport+0x324>)
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7f9 fe39 	bl	8002e6c <send_debug_logs>
        return RS_FAILURE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e008      	b.n	8009210 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2bff      	cmp	r3, #255	; 0xff
 8009204:	d103      	bne.n	800920e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	0018      	movs	r0, r3
 800920a:	f000 f8c3 	bl	8009394 <check_for_error>
    }

    return RS_SUCCESS;
 800920e:	2301      	movs	r3, #1
}
 8009210:	0018      	movs	r0, r3
 8009212:	46bd      	mov	sp, r7
 8009214:	b009      	add	sp, #36	; 0x24
 8009216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009218:	08013fc0 	.word	0x08013fc0
 800921c:	08014010 	.word	0x08014010
 8009220:	08014060 	.word	0x08014060
 8009224:	080140b0 	.word	0x080140b0
 8009228:	0000ffff 	.word	0x0000ffff
 800922c:	080140fc 	.word	0x080140fc

08009230 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009232:	4c2b      	ldr	r4, [pc, #172]	; (80092e0 <astronode_transport_send_receive+0xb0>)
 8009234:	44a5      	add	sp, r4
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <astronode_transport_send_receive+0xb4>)
 800923e:	25ca      	movs	r5, #202	; 0xca
 8009240:	00ad      	lsls	r5, r5, #2
 8009242:	195b      	adds	r3, r3, r5
 8009244:	19db      	adds	r3, r3, r7
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	22c4      	movs	r2, #196	; 0xc4
 800924e:	0052      	lsls	r2, r2, #1
 8009250:	2100      	movs	r1, #0
 8009252:	0018      	movs	r0, r3
 8009254:	f003 f88e 	bl	800c374 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009258:	4b23      	ldr	r3, [pc, #140]	; (80092e8 <astronode_transport_send_receive+0xb8>)
 800925a:	195b      	adds	r3, r3, r5
 800925c:	19db      	adds	r3, r3, r7
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	3304      	adds	r3, #4
 8009264:	22c4      	movs	r2, #196	; 0xc4
 8009266:	0052      	lsls	r2, r2, #1
 8009268:	2100      	movs	r1, #0
 800926a:	0018      	movs	r0, r3
 800926c:	f003 f882 	bl	800c374 <memset>
    uint16_t answer_length =  0;
 8009270:	4b1e      	ldr	r3, [pc, #120]	; (80092ec <astronode_transport_send_receive+0xbc>)
 8009272:	195b      	adds	r3, r3, r5
 8009274:	19db      	adds	r3, r3, r7
 8009276:	2200      	movs	r2, #0
 8009278:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800927a:	4e1d      	ldr	r6, [pc, #116]	; (80092f0 <astronode_transport_send_receive+0xc0>)
 800927c:	19bc      	adds	r4, r7, r6
 800927e:	23cc      	movs	r3, #204	; 0xcc
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	18fa      	adds	r2, r7, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	0011      	movs	r1, r2
 8009288:	0018      	movs	r0, r3
 800928a:	f7ff fd9b 	bl	8008dc4 <astronode_create_request_transport>
 800928e:	0003      	movs	r3, r0
 8009290:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009292:	19bb      	adds	r3, r7, r6
 8009294:	881a      	ldrh	r2, [r3, #0]
 8009296:	23cc      	movs	r3, #204	; 0xcc
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	18fb      	adds	r3, r7, r3
 800929c:	0011      	movs	r1, r2
 800929e:	0018      	movs	r0, r3
 80092a0:	f7f9 fe30 	bl	8002f04 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80092a4:	230a      	movs	r3, #10
 80092a6:	18fa      	adds	r2, r7, r3
 80092a8:	240c      	movs	r4, #12
 80092aa:	193b      	adds	r3, r7, r4
 80092ac:	0011      	movs	r1, r2
 80092ae:	0018      	movs	r0, r3
 80092b0:	f000 f92c 	bl	800950c <receive_astronode_answer>
 80092b4:	0003      	movs	r3, r0
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d10a      	bne.n	80092d0 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <astronode_transport_send_receive+0xbc>)
 80092bc:	195b      	adds	r3, r3, r5
 80092be:	19db      	adds	r3, r3, r7
 80092c0:	8819      	ldrh	r1, [r3, #0]
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	193b      	adds	r3, r7, r4
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7ff fe1e 	bl	8008f08 <astronode_decode_answer_transport>
 80092cc:	0003      	movs	r3, r0
 80092ce:	e000      	b.n	80092d2 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80092d0:	2300      	movs	r3, #0
    }
}
 80092d2:	0018      	movs	r0, r3
 80092d4:	46bd      	mov	sp, r7
 80092d6:	23cb      	movs	r3, #203	; 0xcb
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	449d      	add	sp, r3
 80092dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	fffffcd4 	.word	0xfffffcd4
 80092e4:	fffffe70 	.word	0xfffffe70
 80092e8:	fffffce4 	.word	0xfffffce4
 80092ec:	fffffce2 	.word	0xfffffce2
 80092f0:	00000326 	.word	0x00000326

080092f4 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	0008      	movs	r0, r1
 80092fe:	0011      	movs	r1, r2
 8009300:	1cbb      	adds	r3, r7, #2
 8009302:	1c02      	adds	r2, r0, #0
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	003b      	movs	r3, r7
 8009308:	1c0a      	adds	r2, r1, #0
 800930a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800930c:	230e      	movs	r3, #14
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	003a      	movs	r2, r7
 8009312:	8812      	ldrh	r2, [r2, #0]
 8009314:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8009316:	e02e      	b.n	8009376 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009318:	240e      	movs	r4, #14
 800931a:	193b      	adds	r3, r7, r4
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	0a1b      	lsrs	r3, r3, #8
 8009320:	b299      	uxth	r1, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	b29a      	uxth	r2, r3
 800932c:	200c      	movs	r0, #12
 800932e:	183b      	adds	r3, r7, r0
 8009330:	404a      	eors	r2, r1
 8009332:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009334:	183b      	adds	r3, r7, r0
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	091b      	lsrs	r3, r3, #4
 800933a:	b299      	uxth	r1, r3
 800933c:	183b      	adds	r3, r7, r0
 800933e:	183a      	adds	r2, r7, r0
 8009340:	8812      	ldrh	r2, [r2, #0]
 8009342:	404a      	eors	r2, r1
 8009344:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8009346:	0021      	movs	r1, r4
 8009348:	187b      	adds	r3, r7, r1
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	b21a      	sxth	r2, r3
 8009350:	183b      	adds	r3, r7, r0
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	031b      	lsls	r3, r3, #12
 8009356:	b21b      	sxth	r3, r3
 8009358:	4053      	eors	r3, r2
 800935a:	b21a      	sxth	r2, r3
 800935c:	183b      	adds	r3, r7, r0
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	015b      	lsls	r3, r3, #5
 8009362:	b21b      	sxth	r3, r3
 8009364:	4053      	eors	r3, r2
 8009366:	b21a      	sxth	r2, r3
 8009368:	183b      	adds	r3, r7, r0
 800936a:	2000      	movs	r0, #0
 800936c:	5e1b      	ldrsh	r3, [r3, r0]
 800936e:	4053      	eors	r3, r2
 8009370:	b21a      	sxth	r2, r3
 8009372:	187b      	adds	r3, r7, r1
 8009374:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8009376:	1cbb      	adds	r3, r7, #2
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	1cba      	adds	r2, r7, #2
 800937c:	1e59      	subs	r1, r3, #1
 800937e:	8011      	strh	r1, [r2, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1c9      	bne.n	8009318 <calculate_crc+0x24>
    }
    return crc;
 8009384:	230e      	movs	r3, #14
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	881b      	ldrh	r3, [r3, #0]
}
 800938a:	0018      	movs	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	b005      	add	sp, #20
 8009390:	bd90      	pop	{r4, r7, pc}
	...

08009394 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	b299      	uxth	r1, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	789b      	ldrb	r3, [r3, #2]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	200e      	movs	r0, #14
 80093ae:	183b      	adds	r3, r7, r0
 80093b0:	188a      	adds	r2, r1, r2
 80093b2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80093b4:	183b      	adds	r3, r7, r0
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	4a40      	ldr	r2, [pc, #256]	; (80094bc <check_for_error+0x128>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d100      	bne.n	80093c0 <check_for_error+0x2c>
 80093be:	e06f      	b.n	80094a0 <check_for_error+0x10c>
 80093c0:	4a3e      	ldr	r2, [pc, #248]	; (80094bc <check_for_error+0x128>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	dd00      	ble.n	80093c8 <check_for_error+0x34>
 80093c6:	e070      	b.n	80094aa <check_for_error+0x116>
 80093c8:	4a3d      	ldr	r2, [pc, #244]	; (80094c0 <check_for_error+0x12c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d100      	bne.n	80093d0 <check_for_error+0x3c>
 80093ce:	e062      	b.n	8009496 <check_for_error+0x102>
 80093d0:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <check_for_error+0x12c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	dd00      	ble.n	80093d8 <check_for_error+0x44>
 80093d6:	e068      	b.n	80094aa <check_for_error+0x116>
 80093d8:	4a3a      	ldr	r2, [pc, #232]	; (80094c4 <check_for_error+0x130>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d056      	beq.n	800948c <check_for_error+0xf8>
 80093de:	4a39      	ldr	r2, [pc, #228]	; (80094c4 <check_for_error+0x130>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	dd00      	ble.n	80093e6 <check_for_error+0x52>
 80093e4:	e061      	b.n	80094aa <check_for_error+0x116>
 80093e6:	4a38      	ldr	r2, [pc, #224]	; (80094c8 <check_for_error+0x134>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d04a      	beq.n	8009482 <check_for_error+0xee>
 80093ec:	4a36      	ldr	r2, [pc, #216]	; (80094c8 <check_for_error+0x134>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	dc5b      	bgt.n	80094aa <check_for_error+0x116>
 80093f2:	4a36      	ldr	r2, [pc, #216]	; (80094cc <check_for_error+0x138>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d03f      	beq.n	8009478 <check_for_error+0xe4>
 80093f8:	4a34      	ldr	r2, [pc, #208]	; (80094cc <check_for_error+0x138>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	dc55      	bgt.n	80094aa <check_for_error+0x116>
 80093fe:	4a34      	ldr	r2, [pc, #208]	; (80094d0 <check_for_error+0x13c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d034      	beq.n	800946e <check_for_error+0xda>
 8009404:	4a32      	ldr	r2, [pc, #200]	; (80094d0 <check_for_error+0x13c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	dc4f      	bgt.n	80094aa <check_for_error+0x116>
 800940a:	4a32      	ldr	r2, [pc, #200]	; (80094d4 <check_for_error+0x140>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d029      	beq.n	8009464 <check_for_error+0xd0>
 8009410:	4a30      	ldr	r2, [pc, #192]	; (80094d4 <check_for_error+0x140>)
 8009412:	4293      	cmp	r3, r2
 8009414:	dc49      	bgt.n	80094aa <check_for_error+0x116>
 8009416:	4a30      	ldr	r2, [pc, #192]	; (80094d8 <check_for_error+0x144>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d01e      	beq.n	800945a <check_for_error+0xc6>
 800941c:	4a2e      	ldr	r2, [pc, #184]	; (80094d8 <check_for_error+0x144>)
 800941e:	4293      	cmp	r3, r2
 8009420:	dc43      	bgt.n	80094aa <check_for_error+0x116>
 8009422:	2222      	movs	r2, #34	; 0x22
 8009424:	32ff      	adds	r2, #255	; 0xff
 8009426:	4293      	cmp	r3, r2
 8009428:	d012      	beq.n	8009450 <check_for_error+0xbc>
 800942a:	2291      	movs	r2, #145	; 0x91
 800942c:	0052      	lsls	r2, r2, #1
 800942e:	4293      	cmp	r3, r2
 8009430:	da3b      	bge.n	80094aa <check_for_error+0x116>
 8009432:	2b01      	cmp	r3, #1
 8009434:	d002      	beq.n	800943c <check_for_error+0xa8>
 8009436:	2b11      	cmp	r3, #17
 8009438:	d005      	beq.n	8009446 <check_for_error+0xb2>
 800943a:	e036      	b.n	80094aa <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <check_for_error+0x148>)
 800943e:	0018      	movs	r0, r3
 8009440:	f7f9 fd14 	bl	8002e6c <send_debug_logs>
            break;
 8009444:	e036      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8009446:	4b26      	ldr	r3, [pc, #152]	; (80094e0 <check_for_error+0x14c>)
 8009448:	0018      	movs	r0, r3
 800944a:	f7f9 fd0f 	bl	8002e6c <send_debug_logs>
            break;
 800944e:	e031      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009450:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <check_for_error+0x150>)
 8009452:	0018      	movs	r0, r3
 8009454:	f7f9 fd0a 	bl	8002e6c <send_debug_logs>
            break;
 8009458:	e02c      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800945a:	4b23      	ldr	r3, [pc, #140]	; (80094e8 <check_for_error+0x154>)
 800945c:	0018      	movs	r0, r3
 800945e:	f7f9 fd05 	bl	8002e6c <send_debug_logs>
            break;
 8009462:	e027      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009464:	4b21      	ldr	r3, [pc, #132]	; (80094ec <check_for_error+0x158>)
 8009466:	0018      	movs	r0, r3
 8009468:	f7f9 fd00 	bl	8002e6c <send_debug_logs>
            break;
 800946c:	e022      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800946e:	4b20      	ldr	r3, [pc, #128]	; (80094f0 <check_for_error+0x15c>)
 8009470:	0018      	movs	r0, r3
 8009472:	f7f9 fcfb 	bl	8002e6c <send_debug_logs>
            break;
 8009476:	e01d      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009478:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <check_for_error+0x160>)
 800947a:	0018      	movs	r0, r3
 800947c:	f7f9 fcf6 	bl	8002e6c <send_debug_logs>
            break;
 8009480:	e018      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009482:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <check_for_error+0x164>)
 8009484:	0018      	movs	r0, r3
 8009486:	f7f9 fcf1 	bl	8002e6c <send_debug_logs>
            break;
 800948a:	e013      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800948c:	4b1b      	ldr	r3, [pc, #108]	; (80094fc <check_for_error+0x168>)
 800948e:	0018      	movs	r0, r3
 8009490:	f7f9 fcec 	bl	8002e6c <send_debug_logs>
            break;
 8009494:	e00e      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <check_for_error+0x16c>)
 8009498:	0018      	movs	r0, r3
 800949a:	f7f9 fce7 	bl	8002e6c <send_debug_logs>
            break;
 800949e:	e009      	b.n	80094b4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80094a0:	4b18      	ldr	r3, [pc, #96]	; (8009504 <check_for_error+0x170>)
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7f9 fce2 	bl	8002e6c <send_debug_logs>
            break;
 80094a8:	e004      	b.n	80094b4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80094aa:	4b17      	ldr	r3, [pc, #92]	; (8009508 <check_for_error+0x174>)
 80094ac:	0018      	movs	r0, r3
 80094ae:	f7f9 fcdd 	bl	8002e6c <send_debug_logs>
            break;
 80094b2:	46c0      	nop			; (mov r8, r8)
    }
}
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b004      	add	sp, #16
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	00004601 	.word	0x00004601
 80094c0:	00004501 	.word	0x00004501
 80094c4:	00003501 	.word	0x00003501
 80094c8:	00002601 	.word	0x00002601
 80094cc:	00002511 	.word	0x00002511
 80094d0:	00002501 	.word	0x00002501
 80094d4:	00000611 	.word	0x00000611
 80094d8:	00000601 	.word	0x00000601
 80094dc:	08014140 	.word	0x08014140
 80094e0:	0801418c 	.word	0x0801418c
 80094e4:	080141f0 	.word	0x080141f0
 80094e8:	08014228 	.word	0x08014228
 80094ec:	080142cc 	.word	0x080142cc
 80094f0:	08014334 	.word	0x08014334
 80094f4:	08014394 	.word	0x08014394
 80094f8:	08014420 	.word	0x08014420
 80094fc:	08014480 	.word	0x08014480
 8009500:	0801452c 	.word	0x0801452c
 8009504:	08014578 	.word	0x08014578
 8009508:	080145c0 	.word	0x080145c0

0800950c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800950c:	b5b0      	push	{r4, r5, r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009516:	230f      	movs	r3, #15
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800951e:	2316      	movs	r3, #22
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	2200      	movs	r2, #0
 8009524:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009526:	f7f9 fd1f 	bl	8002f68 <get_systick>
 800952a:	0003      	movs	r3, r0
 800952c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800952e:	2315      	movs	r3, #21
 8009530:	18fb      	adds	r3, r7, r3
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8009536:	e054      	b.n	80095e2 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009538:	4a34      	ldr	r2, [pc, #208]	; (800960c <receive_astronode_answer+0x100>)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	0011      	movs	r1, r2
 800953e:	0018      	movs	r0, r3
 8009540:	f7f9 fd1a 	bl	8002f78 <is_systick_timeout_over>
 8009544:	1e03      	subs	r3, r0, #0
 8009546:	d005      	beq.n	8009554 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009548:	4b31      	ldr	r3, [pc, #196]	; (8009610 <receive_astronode_answer+0x104>)
 800954a:	0018      	movs	r0, r3
 800954c:	f7f9 fc8e 	bl	8002e6c <send_debug_logs>
            return RS_FAILURE;
 8009550:	2300      	movs	r3, #0
 8009552:	e057      	b.n	8009604 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009554:	250f      	movs	r5, #15
 8009556:	197b      	adds	r3, r7, r5
 8009558:	0018      	movs	r0, r3
 800955a:	f7f9 fcf1 	bl	8002f40 <is_astronode_character_received>
 800955e:	0003      	movs	r3, r0
 8009560:	0019      	movs	r1, r3
 8009562:	2016      	movs	r0, #22
 8009564:	183b      	adds	r3, r7, r0
 8009566:	183a      	adds	r2, r7, r0
 8009568:	8812      	ldrh	r2, [r2, #0]
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	2415      	movs	r4, #21
 800956e:	193b      	adds	r3, r7, r4
 8009570:	193a      	adds	r2, r7, r4
 8009572:	7812      	ldrb	r2, [r2, #0]
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	2900      	cmp	r1, #0
 8009578:	d033      	beq.n	80095e2 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800957a:	197b      	adds	r3, r7, r5
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d105      	bne.n	800958e <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009582:	193b      	adds	r3, r7, r4
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009588:	183b      	adds	r3, r7, r0
 800958a:	2200      	movs	r2, #0
 800958c:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800958e:	2116      	movs	r1, #22
 8009590:	187b      	adds	r3, r7, r1
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	18d3      	adds	r3, r2, r3
 8009598:	220f      	movs	r2, #15
 800959a:	18ba      	adds	r2, r7, r2
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	701a      	strb	r2, [r3, #0]
            length++;
 80095a0:	187b      	adds	r3, r7, r1
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	187b      	adds	r3, r7, r1
 80095a6:	3201      	adds	r2, #1
 80095a8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80095aa:	187b      	adds	r3, r7, r1
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2bb2      	cmp	r3, #178	; 0xb2
 80095b0:	d905      	bls.n	80095be <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80095b2:	4b18      	ldr	r3, [pc, #96]	; (8009614 <receive_astronode_answer+0x108>)
 80095b4:	0018      	movs	r0, r3
 80095b6:	f7f9 fc59 	bl	8002e6c <send_debug_logs>
                return RS_FAILURE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e022      	b.n	8009604 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80095be:	230f      	movs	r3, #15
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d10c      	bne.n	80095e2 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80095c8:	2216      	movs	r2, #22
 80095ca:	18bb      	adds	r3, r7, r2
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d907      	bls.n	80095e2 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	18ba      	adds	r2, r7, r2
 80095d6:	8812      	ldrh	r2, [r2, #0]
 80095d8:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80095da:	2315      	movs	r3, #21
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	2201      	movs	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80095e2:	2315      	movs	r3, #21
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2201      	movs	r2, #1
 80095ea:	4053      	eors	r3, r2
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1a2      	bne.n	8009538 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80095f2:	4b09      	ldr	r3, [pc, #36]	; (8009618 <receive_astronode_answer+0x10c>)
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f9 fc39 	bl	8002e6c <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7f9 fc35 	bl	8002e6c <send_debug_logs>

    return RS_SUCCESS;
 8009602:	2301      	movs	r3, #1
}
 8009604:	0018      	movs	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	b006      	add	sp, #24
 800960a:	bdb0      	pop	{r4, r5, r7, pc}
 800960c:	000005dc 	.word	0x000005dc
 8009610:	080145e4 	.word	0x080145e4
 8009614:	08014608 	.word	0x08014608
 8009618:	08014654 	.word	0x08014654

0800961c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	0002      	movs	r2, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	1dfb      	adds	r3, r7, #7
 8009628:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800962a:	1dfb      	adds	r3, r7, #7
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	091b      	lsrs	r3, r3, #4
 8009630:	b2db      	uxtb	r3, r3
 8009632:	001a      	movs	r2, r3
 8009634:	4b08      	ldr	r3, [pc, #32]	; (8009658 <uint8_to_ascii_buffer+0x3c>)
 8009636:	5c9a      	ldrb	r2, [r3, r2]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800963c:	1dfb      	adds	r3, r7, #7
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	220f      	movs	r2, #15
 8009642:	401a      	ands	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	4903      	ldr	r1, [pc, #12]	; (8009658 <uint8_to_ascii_buffer+0x3c>)
 800964a:	5c8a      	ldrb	r2, [r1, r2]
 800964c:	701a      	strb	r2, [r3, #0]
}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	46bd      	mov	sp, r7
 8009652:	b002      	add	sp, #8
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	08014884 	.word	0x08014884

0800965c <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	0008      	movs	r0, r1
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	0019      	movs	r1, r3
 800966a:	260b      	movs	r6, #11
 800966c:	19bb      	adds	r3, r7, r6
 800966e:	1c02      	adds	r2, r0, #0
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	2508      	movs	r5, #8
 8009674:	197b      	adds	r3, r7, r5
 8009676:	1c0a      	adds	r2, r1, #0
 8009678:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685c      	ldr	r4, [r3, #4]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68d8      	ldr	r0, [r3, #12]
 8009682:	197b      	adds	r3, r7, r5
 8009684:	881d      	ldrh	r5, [r3, #0]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	19bb      	adds	r3, r7, r6
 800968a:	7819      	ldrb	r1, [r3, #0]
 800968c:	002b      	movs	r3, r5
 800968e:	47a0      	blx	r4
 8009690:	0003      	movs	r3, r0
 8009692:	617b      	str	r3, [r7, #20]

  return ret;
 8009694:	697b      	ldr	r3, [r7, #20]
}
 8009696:	0018      	movs	r0, r3
 8009698:	46bd      	mov	sp, r7
 800969a:	b007      	add	sp, #28
 800969c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800969e <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 800969e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a0:	b087      	sub	sp, #28
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	0008      	movs	r0, r1
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	0019      	movs	r1, r3
 80096ac:	260b      	movs	r6, #11
 80096ae:	19bb      	adds	r3, r7, r6
 80096b0:	1c02      	adds	r2, r0, #0
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	2508      	movs	r5, #8
 80096b6:	197b      	adds	r3, r7, r5
 80096b8:	1c0a      	adds	r2, r1, #0
 80096ba:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681c      	ldr	r4, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68d8      	ldr	r0, [r3, #12]
 80096c4:	197b      	adds	r3, r7, r5
 80096c6:	881d      	ldrh	r5, [r3, #0]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	19bb      	adds	r3, r7, r6
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	002b      	movs	r3, r5
 80096d0:	47a0      	blx	r4
 80096d2:	0003      	movs	r3, r0
 80096d4:	617b      	str	r3, [r7, #20]

  return ret;
 80096d6:	697b      	ldr	r3, [r7, #20]
}
 80096d8:	0018      	movs	r0, r3
 80096da:	46bd      	mov	sp, r7
 80096dc:	b007      	add	sp, #28
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096e0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	000a      	movs	r2, r1
 80096ea:	1cfb      	adds	r3, r7, #3
 80096ec:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80096ee:	2410      	movs	r4, #16
 80096f0:	193a      	adds	r2, r7, r4
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	2301      	movs	r3, #1
 80096f6:	2120      	movs	r1, #32
 80096f8:	f7ff ffb0 	bl	800965c <lis2dw12_read_reg>
 80096fc:	0003      	movs	r3, r0
 80096fe:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d129      	bne.n	800975a <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8009706:	1cfb      	adds	r3, r7, #3
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	089b      	lsrs	r3, r3, #2
 800970c:	1c1a      	adds	r2, r3, #0
 800970e:	2303      	movs	r3, #3
 8009710:	4013      	ands	r3, r2
 8009712:	b2da      	uxtb	r2, r3
 8009714:	193b      	adds	r3, r7, r4
 8009716:	2103      	movs	r1, #3
 8009718:	400a      	ands	r2, r1
 800971a:	0090      	lsls	r0, r2, #2
 800971c:	781a      	ldrb	r2, [r3, #0]
 800971e:	210c      	movs	r1, #12
 8009720:	438a      	bics	r2, r1
 8009722:	1c11      	adds	r1, r2, #0
 8009724:	1c02      	adds	r2, r0, #0
 8009726:	430a      	orrs	r2, r1
 8009728:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800972a:	1cfb      	adds	r3, r7, #3
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2203      	movs	r2, #3
 8009730:	4013      	ands	r3, r2
 8009732:	b2da      	uxtb	r2, r3
 8009734:	193b      	adds	r3, r7, r4
 8009736:	2103      	movs	r1, #3
 8009738:	400a      	ands	r2, r1
 800973a:	0010      	movs	r0, r2
 800973c:	781a      	ldrb	r2, [r3, #0]
 800973e:	2103      	movs	r1, #3
 8009740:	438a      	bics	r2, r1
 8009742:	1c11      	adds	r1, r2, #0
 8009744:	1c02      	adds	r2, r0, #0
 8009746:	430a      	orrs	r2, r1
 8009748:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800974a:	193a      	adds	r2, r7, r4
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	2301      	movs	r3, #1
 8009750:	2120      	movs	r1, #32
 8009752:	f7ff ffa4 	bl	800969e <lis2dw12_write_reg>
 8009756:	0003      	movs	r3, r0
 8009758:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d108      	bne.n	8009772 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009760:	230c      	movs	r3, #12
 8009762:	18fa      	adds	r2, r7, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	2301      	movs	r3, #1
 8009768:	2125      	movs	r1, #37	; 0x25
 800976a:	f7ff ff77 	bl	800965c <lis2dw12_read_reg>
 800976e:	0003      	movs	r3, r0
 8009770:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11a      	bne.n	80097ae <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8009778:	1cfb      	adds	r3, r7, #3
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	1c1a      	adds	r2, r3, #0
 8009780:	2301      	movs	r3, #1
 8009782:	4013      	ands	r3, r2
 8009784:	b2da      	uxtb	r2, r3
 8009786:	240c      	movs	r4, #12
 8009788:	193b      	adds	r3, r7, r4
 800978a:	2101      	movs	r1, #1
 800978c:	400a      	ands	r2, r1
 800978e:	0090      	lsls	r0, r2, #2
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	2104      	movs	r1, #4
 8009794:	438a      	bics	r2, r1
 8009796:	1c11      	adds	r1, r2, #0
 8009798:	1c02      	adds	r2, r0, #0
 800979a:	430a      	orrs	r2, r1
 800979c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800979e:	193a      	adds	r2, r7, r4
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	2301      	movs	r3, #1
 80097a4:	2125      	movs	r1, #37	; 0x25
 80097a6:	f7ff ff7a 	bl	800969e <lis2dw12_write_reg>
 80097aa:	0003      	movs	r3, r0
 80097ac:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80097ae:	697b      	ldr	r3, [r7, #20]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b007      	add	sp, #28
 80097b6:	bd90      	pop	{r4, r7, pc}

080097b8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	000a      	movs	r2, r1
 80097c2:	1cfb      	adds	r3, r7, #3
 80097c4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80097c6:	2410      	movs	r4, #16
 80097c8:	193a      	adds	r2, r7, r4
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	2301      	movs	r3, #1
 80097ce:	2120      	movs	r1, #32
 80097d0:	f7ff ff44 	bl	800965c <lis2dw12_read_reg>
 80097d4:	0003      	movs	r3, r0
 80097d6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d115      	bne.n	800980a <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80097de:	1cfb      	adds	r3, r7, #3
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	220f      	movs	r2, #15
 80097e4:	4013      	ands	r3, r2
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	193b      	adds	r3, r7, r4
 80097ea:	0110      	lsls	r0, r2, #4
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	210f      	movs	r1, #15
 80097f0:	400a      	ands	r2, r1
 80097f2:	1c11      	adds	r1, r2, #0
 80097f4:	1c02      	adds	r2, r0, #0
 80097f6:	430a      	orrs	r2, r1
 80097f8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80097fa:	193a      	adds	r2, r7, r4
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	2301      	movs	r3, #1
 8009800:	2120      	movs	r1, #32
 8009802:	f7ff ff4c 	bl	800969e <lis2dw12_write_reg>
 8009806:	0003      	movs	r3, r0
 8009808:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009810:	230c      	movs	r3, #12
 8009812:	18fa      	adds	r2, r7, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	2301      	movs	r3, #1
 8009818:	2122      	movs	r1, #34	; 0x22
 800981a:	f7ff ff1f 	bl	800965c <lis2dw12_read_reg>
 800981e:	0003      	movs	r3, r0
 8009820:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d11a      	bne.n	800985e <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8009828:	1cfb      	adds	r3, r7, #3
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	091b      	lsrs	r3, r3, #4
 800982e:	1c1a      	adds	r2, r3, #0
 8009830:	2303      	movs	r3, #3
 8009832:	4013      	ands	r3, r2
 8009834:	b2da      	uxtb	r2, r3
 8009836:	240c      	movs	r4, #12
 8009838:	193b      	adds	r3, r7, r4
 800983a:	2103      	movs	r1, #3
 800983c:	400a      	ands	r2, r1
 800983e:	0010      	movs	r0, r2
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	2103      	movs	r1, #3
 8009844:	438a      	bics	r2, r1
 8009846:	1c11      	adds	r1, r2, #0
 8009848:	1c02      	adds	r2, r0, #0
 800984a:	430a      	orrs	r2, r1
 800984c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800984e:	193a      	adds	r2, r7, r4
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	2301      	movs	r3, #1
 8009854:	2122      	movs	r1, #34	; 0x22
 8009856:	f7ff ff22 	bl	800969e <lis2dw12_write_reg>
 800985a:	0003      	movs	r3, r0
 800985c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	0018      	movs	r0, r3
 8009862:	46bd      	mov	sp, r7
 8009864:	b007      	add	sp, #28
 8009866:	bd90      	pop	{r4, r7, pc}

08009868 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	000a      	movs	r2, r1
 8009872:	1cfb      	adds	r3, r7, #3
 8009874:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009876:	2408      	movs	r4, #8
 8009878:	193a      	adds	r2, r7, r4
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	2301      	movs	r3, #1
 800987e:	2125      	movs	r1, #37	; 0x25
 8009880:	f7ff feec 	bl	800965c <lis2dw12_read_reg>
 8009884:	0003      	movs	r3, r0
 8009886:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d117      	bne.n	80098be <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 800988e:	1cfb      	adds	r3, r7, #3
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2203      	movs	r2, #3
 8009894:	4013      	ands	r3, r2
 8009896:	b2da      	uxtb	r2, r3
 8009898:	193b      	adds	r3, r7, r4
 800989a:	2103      	movs	r1, #3
 800989c:	400a      	ands	r2, r1
 800989e:	0110      	lsls	r0, r2, #4
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	2130      	movs	r1, #48	; 0x30
 80098a4:	438a      	bics	r2, r1
 80098a6:	1c11      	adds	r1, r2, #0
 80098a8:	1c02      	adds	r2, r0, #0
 80098aa:	430a      	orrs	r2, r1
 80098ac:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80098ae:	193a      	adds	r2, r7, r4
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	2301      	movs	r3, #1
 80098b4:	2125      	movs	r1, #37	; 0x25
 80098b6:	f7ff fef2 	bl	800969e <lis2dw12_write_reg>
 80098ba:	0003      	movs	r3, r0
 80098bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b005      	add	sp, #20
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	2301      	movs	r3, #1
 80098d8:	210f      	movs	r1, #15
 80098da:	f7ff febf 	bl	800965c <lis2dw12_read_reg>
 80098de:	0003      	movs	r3, r0
 80098e0:	60fb      	str	r3, [r7, #12]

  return ret;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	0018      	movs	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b004      	add	sp, #16
 80098ea:	bd80      	pop	{r7, pc}

080098ec <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	000a      	movs	r2, r1
 80098f6:	1cfb      	adds	r3, r7, #3
 80098f8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80098fa:	2408      	movs	r4, #8
 80098fc:	193a      	adds	r2, r7, r4
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	2301      	movs	r3, #1
 8009902:	2121      	movs	r1, #33	; 0x21
 8009904:	f7ff feaa 	bl	800965c <lis2dw12_read_reg>
 8009908:	0003      	movs	r3, r0
 800990a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d117      	bne.n	8009942 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009912:	1cfb      	adds	r3, r7, #3
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2201      	movs	r2, #1
 8009918:	4013      	ands	r3, r2
 800991a:	b2da      	uxtb	r2, r3
 800991c:	193b      	adds	r3, r7, r4
 800991e:	2101      	movs	r1, #1
 8009920:	400a      	ands	r2, r1
 8009922:	0190      	lsls	r0, r2, #6
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	2140      	movs	r1, #64	; 0x40
 8009928:	438a      	bics	r2, r1
 800992a:	1c11      	adds	r1, r2, #0
 800992c:	1c02      	adds	r2, r0, #0
 800992e:	430a      	orrs	r2, r1
 8009930:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009932:	193a      	adds	r2, r7, r4
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	2301      	movs	r3, #1
 8009938:	2121      	movs	r1, #33	; 0x21
 800993a:	f7ff feb0 	bl	800969e <lis2dw12_write_reg>
 800993e:	0003      	movs	r3, r0
 8009940:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b005      	add	sp, #20
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009956:	2408      	movs	r4, #8
 8009958:	193a      	adds	r2, r7, r4
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	2301      	movs	r3, #1
 800995e:	2121      	movs	r1, #33	; 0x21
 8009960:	f7ff fe7c 	bl	800965c <lis2dw12_read_reg>
 8009964:	0003      	movs	r3, r0
 8009966:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8009968:	193b      	adds	r3, r7, r4
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	065b      	lsls	r3, r3, #25
 800996e:	0fdb      	lsrs	r3, r3, #31
 8009970:	b2db      	uxtb	r3, r3
 8009972:	001a      	movs	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	701a      	strb	r2, [r3, #0]

  return ret;
 8009978:	68fb      	ldr	r3, [r7, #12]
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b005      	add	sp, #20
 8009980:	bd90      	pop	{r4, r7, pc}

08009982 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8009982:	b590      	push	{r4, r7, lr}
 8009984:	b087      	sub	sp, #28
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	000a      	movs	r2, r1
 800998c:	1cfb      	adds	r3, r7, #3
 800998e:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009990:	2410      	movs	r4, #16
 8009992:	193a      	adds	r2, r7, r4
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	2301      	movs	r3, #1
 8009998:	2125      	movs	r1, #37	; 0x25
 800999a:	f7ff fe5f 	bl	800965c <lis2dw12_read_reg>
 800999e:	0003      	movs	r3, r0
 80099a0:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d119      	bne.n	80099dc <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80099a8:	1cfb      	adds	r3, r7, #3
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	091b      	lsrs	r3, r3, #4
 80099ae:	1c1a      	adds	r2, r3, #0
 80099b0:	2301      	movs	r3, #1
 80099b2:	4013      	ands	r3, r2
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	193b      	adds	r3, r7, r4
 80099b8:	2101      	movs	r1, #1
 80099ba:	400a      	ands	r2, r1
 80099bc:	00d0      	lsls	r0, r2, #3
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	2108      	movs	r1, #8
 80099c2:	438a      	bics	r2, r1
 80099c4:	1c11      	adds	r1, r2, #0
 80099c6:	1c02      	adds	r2, r0, #0
 80099c8:	430a      	orrs	r2, r1
 80099ca:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80099cc:	193a      	adds	r2, r7, r4
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	2301      	movs	r3, #1
 80099d2:	2125      	movs	r1, #37	; 0x25
 80099d4:	f7ff fe63 	bl	800969e <lis2dw12_write_reg>
 80099d8:	0003      	movs	r3, r0
 80099da:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d108      	bne.n	80099f4 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 80099e2:	230c      	movs	r3, #12
 80099e4:	18fa      	adds	r2, r7, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	213f      	movs	r1, #63	; 0x3f
 80099ec:	f7ff fe36 	bl	800965c <lis2dw12_read_reg>
 80099f0:	0003      	movs	r3, r0
 80099f2:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d118      	bne.n	8009a2c <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 80099fa:	1cfb      	adds	r3, r7, #3
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2201      	movs	r2, #1
 8009a00:	4013      	ands	r3, r2
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	240c      	movs	r4, #12
 8009a06:	193b      	adds	r3, r7, r4
 8009a08:	2101      	movs	r1, #1
 8009a0a:	400a      	ands	r2, r1
 8009a0c:	0110      	lsls	r0, r2, #4
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	2110      	movs	r1, #16
 8009a12:	438a      	bics	r2, r1
 8009a14:	1c11      	adds	r1, r2, #0
 8009a16:	1c02      	adds	r2, r0, #0
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a1c:	193a      	adds	r2, r7, r4
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	2301      	movs	r3, #1
 8009a22:	213f      	movs	r1, #63	; 0x3f
 8009a24:	f7ff fe3b 	bl	800969e <lis2dw12_write_reg>
 8009a28:	0003      	movs	r3, r0
 8009a2a:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009a2c:	697b      	ldr	r3, [r7, #20]
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b007      	add	sp, #28
 8009a34:	bd90      	pop	{r4, r7, pc}

08009a36 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009a40:	2310      	movs	r3, #16
 8009a42:	18fa      	adds	r2, r7, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	2301      	movs	r3, #1
 8009a48:	2124      	movs	r1, #36	; 0x24
 8009a4a:	f7ff fe07 	bl	800965c <lis2dw12_read_reg>
 8009a4e:	0003      	movs	r3, r0
 8009a50:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d108      	bne.n	8009a6a <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009a58:	230c      	movs	r3, #12
 8009a5a:	18fa      	adds	r2, r7, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	213f      	movs	r1, #63	; 0x3f
 8009a62:	f7ff fdfb 	bl	800965c <lis2dw12_read_reg>
 8009a66:	0003      	movs	r3, r0
 8009a68:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d146      	bne.n	8009afe <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	071b      	lsls	r3, r3, #28
 8009a76:	0fdb      	lsrs	r3, r3, #31
 8009a78:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	06db      	lsls	r3, r3, #27
 8009a80:	0fdb      	lsrs	r3, r3, #31
 8009a82:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009a84:	4313      	orrs	r3, r2
 8009a86:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	069b      	lsls	r3, r3, #26
 8009a8e:	0fdb      	lsrs	r3, r3, #31
 8009a90:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009a92:	4313      	orrs	r3, r2
 8009a94:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	065b      	lsls	r3, r3, #25
 8009a9c:	0fdb      	lsrs	r3, r3, #31
 8009a9e:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	061b      	lsls	r3, r3, #24
 8009aaa:	0fdb      	lsrs	r3, r3, #31
 8009aac:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009ab2:	2110      	movs	r1, #16
 8009ab4:	187b      	adds	r3, r7, r1
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	061b      	lsls	r3, r3, #24
 8009aba:	0fdb      	lsrs	r3, r3, #31
 8009abc:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009ac2:	187b      	adds	r3, r7, r1
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	065b      	lsls	r3, r3, #25
 8009ac8:	0fdb      	lsrs	r3, r3, #31
 8009aca:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009acc:	4313      	orrs	r3, r2
 8009ace:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d006      	beq.n	8009ae2 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009ad4:	230c      	movs	r3, #12
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	781a      	ldrb	r2, [r3, #0]
 8009ada:	2120      	movs	r1, #32
 8009adc:	430a      	orrs	r2, r1
 8009ade:	701a      	strb	r2, [r3, #0]
 8009ae0:	e005      	b.n	8009aee <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	2120      	movs	r1, #32
 8009aea:	438a      	bics	r2, r1
 8009aec:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	2301      	movs	r3, #1
 8009af4:	2123      	movs	r1, #35	; 0x23
 8009af6:	f7ff fdd2 	bl	800969e <lis2dw12_write_reg>
 8009afa:	0003      	movs	r3, r0
 8009afc:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d108      	bne.n	8009b16 <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009b04:	230c      	movs	r3, #12
 8009b06:	18fa      	adds	r2, r7, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	213f      	movs	r1, #63	; 0x3f
 8009b0e:	f7ff fdc6 	bl	800969e <lis2dw12_write_reg>
 8009b12:	0003      	movs	r3, r0
 8009b14:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b006      	add	sp, #24
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	2123      	movs	r1, #35	; 0x23
 8009b32:	f7ff fd93 	bl	800965c <lis2dw12_read_reg>
 8009b36:	0003      	movs	r3, r0
 8009b38:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
}
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b004      	add	sp, #16
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	000a      	movs	r2, r1
 8009b4e:	1cfb      	adds	r3, r7, #3
 8009b50:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009b52:	2408      	movs	r4, #8
 8009b54:	193a      	adds	r2, r7, r4
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	2134      	movs	r1, #52	; 0x34
 8009b5c:	f7ff fd7e 	bl	800965c <lis2dw12_read_reg>
 8009b60:	0003      	movs	r3, r0
 8009b62:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d117      	bne.n	8009b9a <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009b6a:	1cfb      	adds	r3, r7, #3
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	223f      	movs	r2, #63	; 0x3f
 8009b70:	4013      	ands	r3, r2
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	193b      	adds	r3, r7, r4
 8009b76:	213f      	movs	r1, #63	; 0x3f
 8009b78:	400a      	ands	r2, r1
 8009b7a:	0010      	movs	r0, r2
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	213f      	movs	r1, #63	; 0x3f
 8009b80:	438a      	bics	r2, r1
 8009b82:	1c11      	adds	r1, r2, #0
 8009b84:	1c02      	adds	r2, r0, #0
 8009b86:	430a      	orrs	r2, r1
 8009b88:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009b8a:	193a      	adds	r2, r7, r4
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	2134      	movs	r1, #52	; 0x34
 8009b92:	f7ff fd84 	bl	800969e <lis2dw12_write_reg>
 8009b96:	0003      	movs	r3, r0
 8009b98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b005      	add	sp, #20
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	000a      	movs	r2, r1
 8009bae:	1cfb      	adds	r3, r7, #3
 8009bb0:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009bb2:	2408      	movs	r4, #8
 8009bb4:	193a      	adds	r2, r7, r4
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	2135      	movs	r1, #53	; 0x35
 8009bbc:	f7ff fd4e 	bl	800965c <lis2dw12_read_reg>
 8009bc0:	0003      	movs	r3, r0
 8009bc2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d117      	bne.n	8009bfa <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009bca:	1cfb      	adds	r3, r7, #3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2203      	movs	r2, #3
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	400a      	ands	r2, r1
 8009bda:	0150      	lsls	r0, r2, #5
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	2160      	movs	r1, #96	; 0x60
 8009be0:	438a      	bics	r2, r1
 8009be2:	1c11      	adds	r1, r2, #0
 8009be4:	1c02      	adds	r2, r0, #0
 8009be6:	430a      	orrs	r2, r1
 8009be8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009bea:	193a      	adds	r2, r7, r4
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	2301      	movs	r3, #1
 8009bf0:	2135      	movs	r1, #53	; 0x35
 8009bf2:	f7ff fd54 	bl	800969e <lis2dw12_write_reg>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b005      	add	sp, #20
 8009c02:	bd90      	pop	{r4, r7, pc}

08009c04 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009c0a:	1dfb      	adds	r3, r7, #7
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009c10:	4b25      	ldr	r3, [pc, #148]	; (8009ca8 <my_astro_init+0xa4>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009c16:	4b25      	ldr	r3, [pc, #148]	; (8009cac <my_astro_init+0xa8>)
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7fc fda5 	bl	8006768 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c1e:	e019      	b.n	8009c54 <my_astro_init+0x50>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009c20:	1dfc      	adds	r4, r7, #7
 8009c22:	2300      	movs	r3, #0
 8009c24:	9303      	str	r3, [sp, #12]
 8009c26:	2301      	movs	r3, #1
 8009c28:	9302      	str	r3, [sp, #8]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	2301      	movs	r3, #1
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	2300      	movs	r3, #0
 8009c34:	2201      	movs	r2, #1
 8009c36:	2101      	movs	r1, #1
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f7fe f865 	bl	8007d08 <astronode_send_cfg_wr>
 8009c3e:	0003      	movs	r3, r0
 8009c40:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 8009c42:	f7f9 f9d7 	bl	8002ff4 <my_astro_off>
		HAL_Delay ( 100 ) ;
 8009c46:	2064      	movs	r0, #100	; 0x64
 8009c48:	f7f9 fec6 	bl	80039d8 <HAL_Delay>
		my_astro_on () ;
 8009c4c:	f7f9 f9aa 	bl	8002fa4 <my_astro_on>
		reset_astronode () ;
 8009c50:	f7f9 f93c 	bl	8002ecc <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c54:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <my_astro_init+0xa4>)
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	2b3b      	cmp	r3, #59	; 0x3b
 8009c5a:	d806      	bhi.n	8009c6a <my_astro_init+0x66>
 8009c5c:	1dfb      	adds	r3, r7, #7
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2201      	movs	r2, #1
 8009c62:	4053      	eors	r3, r2
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1da      	bne.n	8009c20 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <my_astro_init+0xa4>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009c70:	4b0e      	ldr	r3, [pc, #56]	; (8009cac <my_astro_init+0xa8>)
 8009c72:	0018      	movs	r0, r3
 8009c74:	f7fc fdd4 	bl	8006820 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009c78:	1dfb      	adds	r3, r7, #7
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00d      	beq.n	8009c9c <my_astro_init+0x98>
	{
		astronode_send_rtc_rr () ;
 8009c80:	f7fe fd02 	bl	8008688 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009c84:	f7fe f808 	bl	8007c98 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009c88:	f7fe fdf8 	bl	800887c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009c8c:	f7fe f992 	bl	8007fb4 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009c90:	f7fe f8e6 	bl	8007e60 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009c94:	f7fe fc7c 	bl	8008590 <astronode_send_pld_fr>
		return true ;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e000      	b.n	8009c9e <my_astro_init+0x9a>
	}
	else
	{
		return false ;
 8009c9c:	2300      	movs	r3, #0
	}
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bd90      	pop	{r4, r7, pc}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	20000a24 	.word	0x20000a24
 8009cac:	2000078c 	.word	0x2000078c

08009cb0 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8009cb8:	240e      	movs	r4, #14
 8009cba:	193b      	adds	r3, r7, r4
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7f6 fa1e 	bl	8000104 <strlen>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2ba0      	cmp	r3, #160	; 0xa0
 8009cd0:	d80b      	bhi.n	8009cea <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	193b      	adds	r3, r7, r4
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7fe fbb3 	bl	8008448 <astronode_send_pld_er>
 8009ce2:	1e03      	subs	r3, r0, #0
 8009ce4:	d005      	beq.n	8009cf2 <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e004      	b.n	8009cf4 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009cea:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <my_astro_add_payload_2_queue+0x4c>)
 8009cec:	0018      	movs	r0, r3
 8009cee:	f7f9 f8bd 	bl	8002e6c <send_debug_logs>
	}
	return false ;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b005      	add	sp, #20
 8009cfa:	bd90      	pop	{r4, r7, pc}
 8009cfc:	08014680 	.word	0x08014680

08009d00 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009d04:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <my_astro_read_evt_reg+0x5c>)
 8009d06:	0018      	movs	r0, r3
 8009d08:	f7f9 f8b0 	bl	8002e6c <send_debug_logs>
	astronode_send_evt_rr () ;
 8009d0c:	f7fe fa5c 	bl	80081c8 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009d10:	f7ff f80e 	bl	8008d30 <is_sak_available>
 8009d14:	1e03      	subs	r3, r0, #0
 8009d16:	d007      	beq.n	8009d28 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009d18:	f7fe fd1a 	bl	8008750 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009d1c:	f7fe fd6e 	bl	80087fc <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009d20:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <my_astro_read_evt_reg+0x60>)
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7f9 f8a2 	bl	8002e6c <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009d28:	f7ff f80c 	bl	8008d44 <is_astronode_reset>
 8009d2c:	1e03      	subs	r3, r0, #0
 8009d2e:	d005      	beq.n	8009d3c <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009d30:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <my_astro_read_evt_reg+0x64>)
 8009d32:	0018      	movs	r0, r3
 8009d34:	f7f9 f89a 	bl	8002e6c <send_debug_logs>
	  astronode_send_res_cr () ;
 8009d38:	f7fe fc66 	bl	8008608 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009d3c:	f7ff f80c 	bl	8008d58 <is_command_available>
 8009d40:	1e03      	subs	r3, r0, #0
 8009d42:	d007      	beq.n	8009d54 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009d44:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <my_astro_read_evt_reg+0x68>)
 8009d46:	0018      	movs	r0, r3
 8009d48:	f7f9 f890 	bl	8002e6c <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009d4c:	f7fe fe80 	bl	8008a50 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009d50:	f7fe fe3e 	bl	80089d0 <astronode_send_cmd_cr>
	}
	return true ;
 8009d54:	2301      	movs	r3, #1
}
 8009d56:	0018      	movs	r0, r3
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	080146c4 	.word	0x080146c4
 8009d60:	080146e0 	.word	0x080146e0
 8009d64:	0801470c 	.word	0x0801470c
 8009d68:	08014730 	.word	0x08014730

08009d6c <my_astro_log>:
bool my_astro_log ( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 8009d70:	f7fe fc8a 	bl	8008688 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8009d74:	f7fe f9c8 	bl	8008108 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8009d78:	2301      	movs	r3, #1
}
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	0011      	movs	r1, r2
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7fe fa99 	bl	80082c8 <astronode_send_geo_wr>
}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b002      	add	sp, #8
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8009d9e:	b590      	push	{r4, r7, lr}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8009da6:	230f      	movs	r3, #15
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2101      	movs	r1, #1
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7ff fd9a 	bl	80098ec <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8009db8:	240f      	movs	r4, #15
 8009dba:	193a      	adds	r2, r7, r4
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	0011      	movs	r1, r2
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	f7ff fdc3 	bl	800994c <lis2dw12_reset_get>
	} while ( rst ) ;
 8009dc6:	193b      	adds	r3, r7, r4
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1f4      	bne.n	8009db8 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f000 f828 	bl	8009e26 <my_lis2dw12_get_id>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	2b44      	cmp	r3, #68	; 0x44
 8009dda:	d11f      	bne.n	8009e1c <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2100      	movs	r1, #0
 8009de0:	0018      	movs	r0, r3
 8009de2:	f7ff fd41 	bl	8009868 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2110      	movs	r1, #16
 8009dea:	0018      	movs	r0, r3
 8009dec:	f7ff fc78 	bl	80096e0 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2106      	movs	r1, #6
 8009df4:	0018      	movs	r0, r3
 8009df6:	f7ff fcdf 	bl	80097b8 <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2110      	movs	r1, #16
 8009dfe:	0018      	movs	r0, r3
 8009e00:	f7ff fdbf 	bl	8009982 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2100      	movs	r1, #0
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f7ff fecb 	bl	8009ba4 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2102      	movs	r1, #2
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7ff fe96 	bl	8009b44 <lis2dw12_wkup_threshold_set>
		return true ;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <my_lis2dw12_init+0x80>
	}

	return false ;
 8009e1c:	2300      	movs	r3, #0

}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b005      	add	sp, #20
 8009e24:	bd90      	pop	{r4, r7, pc}

08009e26 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8009e26:	b590      	push	{r4, r7, lr}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8009e2e:	210f      	movs	r1, #15
 8009e30:	187b      	adds	r3, r7, r1
 8009e32:	2200      	movs	r2, #0
 8009e34:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8009e36:	000c      	movs	r4, r1
 8009e38:	187a      	adds	r2, r7, r1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0011      	movs	r1, r2
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f7ff fd42 	bl	80098c8 <lis2dw12_device_id_get>
	return id ;
 8009e44:	193b      	adds	r3, r7, r4
 8009e46:	781b      	ldrb	r3, [r3, #0]
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b005      	add	sp, #20
 8009e4e:	bd90      	pop	{r4, r7, pc}

08009e50 <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8009e50:	b590      	push	{r4, r7, lr}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e58:	240c      	movs	r4, #12
 8009e5a:	193a      	adds	r2, r7, r4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	0011      	movs	r1, r2
 8009e60:	0018      	movs	r0, r3
 8009e62:	f7ff fe5d 	bl	8009b20 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8009e66:	0020      	movs	r0, r4
 8009e68:	183b      	adds	r3, r7, r0
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	2120      	movs	r1, #32
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e72:	183a      	adds	r2, r7, r0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f7ff fddc 	bl	8009a36 <lis2dw12_pin_int1_route_set>
}
 8009e7e:	46c0      	nop			; (mov r8, r8)
 8009e80:	46bd      	mov	sp, r7
 8009e82:	b005      	add	sp, #20
 8009e84:	bd90      	pop	{r4, r7, pc}

08009e86 <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e8e:	240c      	movs	r4, #12
 8009e90:	193a      	adds	r2, r7, r4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	0011      	movs	r1, r2
 8009e96:	0018      	movs	r0, r3
 8009e98:	f7ff fe42 	bl	8009b20 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 8009e9c:	0020      	movs	r0, r4
 8009e9e:	183b      	adds	r3, r7, r0
 8009ea0:	781a      	ldrb	r2, [r3, #0]
 8009ea2:	2120      	movs	r1, #32
 8009ea4:	438a      	bics	r2, r1
 8009ea6:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009ea8:	183a      	adds	r2, r7, r0
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	0011      	movs	r1, r2
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f7ff fdc1 	bl	8009a36 <lis2dw12_pin_int1_route_set>
}
 8009eb4:	46c0      	nop			; (mov r8, r8)
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b005      	add	sp, #20
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ebe:	4cde      	ldr	r4, [pc, #888]	; (800a238 <my_lx6_get_coordinates+0x37c>)
 8009ec0:	44a5      	add	sp, r4
 8009ec2:	af02      	add	r7, sp, #8
 8009ec4:	0001      	movs	r1, r0
 8009ec6:	603a      	str	r2, [r7, #0]
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	4bdc      	ldr	r3, [pc, #880]	; (800a23c <my_lx6_get_coordinates+0x380>)
 8009ecc:	20da      	movs	r0, #218	; 0xda
 8009ece:	0080      	lsls	r0, r0, #2
 8009ed0:	181b      	adds	r3, r3, r0
 8009ed2:	19db      	adds	r3, r3, r7
 8009ed4:	1c0a      	adds	r2, r1, #0
 8009ed6:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009ed8:	4bd9      	ldr	r3, [pc, #868]	; (800a240 <my_lx6_get_coordinates+0x384>)
 8009eda:	18fb      	adds	r3, r7, r3
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009ee0:	4bd8      	ldr	r3, [pc, #864]	; (800a244 <my_lx6_get_coordinates+0x388>)
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009ee8:	4bd7      	ldr	r3, [pc, #860]	; (800a248 <my_lx6_get_coordinates+0x38c>)
 8009eea:	0004      	movs	r4, r0
 8009eec:	191b      	adds	r3, r3, r4
 8009eee:	19db      	adds	r3, r3, r7
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	22f6      	movs	r2, #246	; 0xf6
 8009ef8:	2100      	movs	r1, #0
 8009efa:	0018      	movs	r0, r3
 8009efc:	f002 fa3a 	bl	800c374 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f00:	4bd2      	ldr	r3, [pc, #840]	; (800a24c <my_lx6_get_coordinates+0x390>)
 8009f02:	191b      	adds	r3, r3, r4
 8009f04:	19db      	adds	r3, r3, r7
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	22f6      	movs	r2, #246	; 0xf6
 8009f0e:	2100      	movs	r1, #0
 8009f10:	0018      	movs	r0, r3
 8009f12:	f002 fa2f 	bl	800c374 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f16:	4bce      	ldr	r3, [pc, #824]	; (800a250 <my_lx6_get_coordinates+0x394>)
 8009f18:	191b      	adds	r3, r3, r4
 8009f1a:	19db      	adds	r3, r3, r7
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	3304      	adds	r3, #4
 8009f22:	22f6      	movs	r2, #246	; 0xf6
 8009f24:	2100      	movs	r1, #0
 8009f26:	0018      	movs	r0, r3
 8009f28:	f002 fa24 	bl	800c374 <memset>
	uint8_t		i_nmea = 0 ;
 8009f2c:	4bc9      	ldr	r3, [pc, #804]	; (800a254 <my_lx6_get_coordinates+0x398>)
 8009f2e:	0021      	movs	r1, r4
 8009f30:	185b      	adds	r3, r3, r1
 8009f32:	19db      	adds	r3, r3, r7
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009f38:	4bc7      	ldr	r3, [pc, #796]	; (800a258 <my_lx6_get_coordinates+0x39c>)
 8009f3a:	18fb      	adds	r3, r7, r3
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009f40:	4bc6      	ldr	r3, [pc, #792]	; (800a25c <my_lx6_get_coordinates+0x3a0>)
 8009f42:	000c      	movs	r4, r1
 8009f44:	185b      	adds	r3, r3, r1
 8009f46:	19db      	adds	r3, r3, r7
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	2208      	movs	r2, #8
 8009f50:	2100      	movs	r1, #0
 8009f52:	0018      	movs	r0, r3
 8009f54:	f002 fa0e 	bl	800c374 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009f58:	4bc1      	ldr	r3, [pc, #772]	; (800a260 <my_lx6_get_coordinates+0x3a4>)
 8009f5a:	191b      	adds	r3, r3, r4
 8009f5c:	19db      	adds	r3, r3, r7
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	3304      	adds	r3, #4
 8009f64:	2208      	movs	r2, #8
 8009f66:	2100      	movs	r1, #0
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f002 fa03 	bl	800c374 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009f6e:	4bbd      	ldr	r3, [pc, #756]	; (800a264 <my_lx6_get_coordinates+0x3a8>)
 8009f70:	22d8      	movs	r2, #216	; 0xd8
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	18ba      	adds	r2, r7, r2
 8009f76:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009f78:	4bbb      	ldr	r3, [pc, #748]	; (800a268 <my_lx6_get_coordinates+0x3ac>)
 8009f7a:	22d7      	movs	r2, #215	; 0xd7
 8009f7c:	0092      	lsls	r2, r2, #2
 8009f7e:	18ba      	adds	r2, r7, r2
 8009f80:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8009f82:	4bba      	ldr	r3, [pc, #744]	; (800a26c <my_lx6_get_coordinates+0x3b0>)
 8009f84:	22d6      	movs	r2, #214	; 0xd6
 8009f86:	0092      	lsls	r2, r2, #2
 8009f88:	18ba      	adds	r2, r7, r2
 8009f8a:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8009f8c:	4bb8      	ldr	r3, [pc, #736]	; (800a270 <my_lx6_get_coordinates+0x3b4>)
 8009f8e:	22d5      	movs	r2, #213	; 0xd5
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	18ba      	adds	r2, r7, r2
 8009f94:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 8009f96:	4bb7      	ldr	r3, [pc, #732]	; (800a274 <my_lx6_get_coordinates+0x3b8>)
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 8009f9e:	4bb6      	ldr	r3, [pc, #728]	; (800a278 <my_lx6_get_coordinates+0x3bc>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8009fa4:	4bb5      	ldr	r3, [pc, #724]	; (800a27c <my_lx6_get_coordinates+0x3c0>)
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f7fc fbde 	bl	8006768 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 8009fac:	f7f9 f848 	bl	8003040 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8009fb0:	e0ea      	b.n	800a188 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8009fb2:	23fa      	movs	r3, #250	; 0xfa
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4ca3      	ldr	r4, [pc, #652]	; (800a244 <my_lx6_get_coordinates+0x388>)
 8009fb8:	1939      	adds	r1, r7, r4
 8009fba:	48b1      	ldr	r0, [pc, #708]	; (800a280 <my_lx6_get_coordinates+0x3c4>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f7fc ffe7 	bl	8006f90 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8009fc2:	23fa      	movs	r3, #250	; 0xfa
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	1939      	adds	r1, r7, r4
 8009fc8:	48ae      	ldr	r0, [pc, #696]	; (800a284 <my_lx6_get_coordinates+0x3c8>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f7fc ff44 	bl	8006e58 <HAL_UART_Transmit>
		if ( rxd_byte )
 8009fd0:	0020      	movs	r0, r4
 8009fd2:	193b      	adds	r3, r7, r4
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	4ca0      	ldr	r4, [pc, #640]	; (800a258 <my_lx6_get_coordinates+0x39c>)
 8009fd8:	193a      	adds	r2, r7, r4
 8009fda:	1939      	adds	r1, r7, r4
 8009fdc:	7809      	ldrb	r1, [r1, #0]
 8009fde:	7011      	strb	r1, [r2, #0]
 8009fe0:	4da4      	ldr	r5, [pc, #656]	; (800a274 <my_lx6_get_coordinates+0x3b8>)
 8009fe2:	197a      	adds	r2, r7, r5
 8009fe4:	1979      	adds	r1, r7, r5
 8009fe6:	7809      	ldrb	r1, [r1, #0]
 8009fe8:	7011      	strb	r1, [r2, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d100      	bne.n	8009ff0 <my_lx6_get_coordinates+0x134>
 8009fee:	e0cb      	b.n	800a188 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8009ff0:	235f      	movs	r3, #95	; 0x5f
 8009ff2:	18fa      	adds	r2, r7, r3
 8009ff4:	2696      	movs	r6, #150	; 0x96
 8009ff6:	00b6      	lsls	r6, r6, #2
 8009ff8:	19b9      	adds	r1, r7, r6
 8009ffa:	183b      	adds	r3, r7, r0
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f000 fadf 	bl	800a5c0 <my_nmea_message>
 800a002:	0001      	movs	r1, r0
 800a004:	193b      	adds	r3, r7, r4
 800a006:	193a      	adds	r2, r7, r4
 800a008:	7812      	ldrb	r2, [r2, #0]
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	197b      	adds	r3, r7, r5
 800a00e:	197a      	adds	r2, r7, r5
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	701a      	strb	r2, [r3, #0]
 800a014:	2902      	cmp	r1, #2
 800a016:	d000      	beq.n	800a01a <my_lx6_get_coordinates+0x15e>
 800a018:	e0b6      	b.n	800a188 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a01a:	19bb      	adds	r3, r7, r6
 800a01c:	0018      	movs	r0, r3
 800a01e:	f000 fb8f 	bl	800a740 <is_my_nmea_checksum_ok>
 800a022:	0003      	movs	r3, r0
 800a024:	0019      	movs	r1, r3
 800a026:	193b      	adds	r3, r7, r4
 800a028:	193a      	adds	r2, r7, r4
 800a02a:	7812      	ldrb	r2, [r2, #0]
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	197b      	adds	r3, r7, r5
 800a030:	197a      	adds	r2, r7, r5
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	2900      	cmp	r1, #0
 800a038:	d100      	bne.n	800a03c <my_lx6_get_coordinates+0x180>
 800a03a:	e0a5      	b.n	800a188 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a03c:	23d6      	movs	r3, #214	; 0xd6
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	19bb      	adds	r3, r7, r6
 800a046:	0011      	movs	r1, r2
 800a048:	0018      	movs	r0, r3
 800a04a:	f002 f9c0 	bl	800c3ce <strstr>
 800a04e:	1e03      	subs	r3, r0, #0
 800a050:	d00d      	beq.n	800a06e <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a052:	4b7f      	ldr	r3, [pc, #508]	; (800a250 <my_lx6_get_coordinates+0x394>)
 800a054:	21da      	movs	r1, #218	; 0xda
 800a056:	0089      	lsls	r1, r1, #2
 800a058:	185b      	adds	r3, r3, r1
 800a05a:	19da      	adds	r2, r3, r7
 800a05c:	4b7a      	ldr	r3, [pc, #488]	; (800a248 <my_lx6_get_coordinates+0x38c>)
 800a05e:	185b      	adds	r3, r3, r1
 800a060:	19db      	adds	r3, r3, r7
 800a062:	0010      	movs	r0, r2
 800a064:	0019      	movs	r1, r3
 800a066:	23fa      	movs	r3, #250	; 0xfa
 800a068:	001a      	movs	r2, r3
 800a06a:	f002 fa68 	bl	800c53e <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a06e:	23d5      	movs	r3, #213	; 0xd5
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	2496      	movs	r4, #150	; 0x96
 800a078:	00a4      	lsls	r4, r4, #2
 800a07a:	193b      	adds	r3, r7, r4
 800a07c:	0011      	movs	r1, r2
 800a07e:	0018      	movs	r0, r3
 800a080:	f002 f9a5 	bl	800c3ce <strstr>
 800a084:	1e03      	subs	r3, r0, #0
 800a086:	d011      	beq.n	800a0ac <my_lx6_get_coordinates+0x1f0>
 800a088:	4d73      	ldr	r5, [pc, #460]	; (800a258 <my_lx6_get_coordinates+0x39c>)
 800a08a:	197b      	adds	r3, r7, r5
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d80c      	bhi.n	800a0ac <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a092:	4b79      	ldr	r3, [pc, #484]	; (800a278 <my_lx6_get_coordinates+0x3bc>)
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	2b0a      	cmp	r3, #10
 800a098:	d900      	bls.n	800a09c <my_lx6_get_coordinates+0x1e0>
 800a09a:	e081      	b.n	800a1a0 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a09c:	193b      	adds	r3, r7, r4
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f000 fd0c 	bl	800aabc <my_nmea_get_gsv_tns>
 800a0a4:	0003      	movs	r3, r0
 800a0a6:	001a      	movs	r2, r3
 800a0a8:	197b      	adds	r3, r7, r5
 800a0aa:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a0ac:	23d8      	movs	r3, #216	; 0xd8
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	18fb      	adds	r3, r7, r3
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	2596      	movs	r5, #150	; 0x96
 800a0b6:	00ad      	lsls	r5, r5, #2
 800a0b8:	197b      	adds	r3, r7, r5
 800a0ba:	0011      	movs	r1, r2
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f002 f986 	bl	800c3ce <strstr>
 800a0c2:	1e03      	subs	r3, r0, #0
 800a0c4:	d015      	beq.n	800a0f2 <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a0c6:	4b6b      	ldr	r3, [pc, #428]	; (800a274 <my_lx6_get_coordinates+0x3b8>)
 800a0c8:	18fc      	adds	r4, r7, r3
 800a0ca:	197b      	adds	r3, r7, r5
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f000 fae3 	bl	800a698 <get_my_nmea_gngsa_fixed_mode_s>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a0d6:	197b      	adds	r3, r7, r5
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 fae8 	bl	800a6ae <get_my_nmea_gngsa_pdop_d>
 800a0de:	0002      	movs	r2, r0
 800a0e0:	000b      	movs	r3, r1
 800a0e2:	21de      	movs	r1, #222	; 0xde
 800a0e4:	0089      	lsls	r1, r1, #2
 800a0e6:	2008      	movs	r0, #8
 800a0e8:	1809      	adds	r1, r1, r0
 800a0ea:	19c9      	adds	r1, r1, r7
 800a0ec:	6809      	ldr	r1, [r1, #0]
 800a0ee:	600a      	str	r2, [r1, #0]
 800a0f0:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a0f2:	23d7      	movs	r3, #215	; 0xd7
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	2596      	movs	r5, #150	; 0x96
 800a0fc:	00ad      	lsls	r5, r5, #2
 800a0fe:	197b      	adds	r3, r7, r5
 800a100:	0011      	movs	r1, r2
 800a102:	0018      	movs	r0, r3
 800a104:	f002 f963 	bl	800c3ce <strstr>
 800a108:	1e03      	subs	r3, r0, #0
 800a10a:	d03d      	beq.n	800a188 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a10c:	23de      	movs	r3, #222	; 0xde
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	2408      	movs	r4, #8
 800a112:	191b      	adds	r3, r3, r4
 800a114:	19db      	adds	r3, r3, r7
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	6838      	ldr	r0, [r7, #0]
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	f7f6 f9b6 	bl	8000490 <__aeabi_dcmpge>
 800a124:	1e03      	subs	r3, r0, #0
 800a126:	d021      	beq.n	800a16c <my_lx6_get_coordinates+0x2b0>
 800a128:	4b52      	ldr	r3, [pc, #328]	; (800a274 <my_lx6_get_coordinates+0x3b8>)
 800a12a:	18fb      	adds	r3, r7, r3
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b33      	cmp	r3, #51	; 0x33
 800a130:	d11c      	bne.n	800a16c <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a132:	23df      	movs	r3, #223	; 0xdf
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	0026      	movs	r6, r4
 800a138:	191b      	adds	r3, r3, r4
 800a13a:	19db      	adds	r3, r3, r7
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	2344      	movs	r3, #68	; 0x44
 800a140:	18fa      	adds	r2, r7, r3
 800a142:	2350      	movs	r3, #80	; 0x50
 800a144:	18f9      	adds	r1, r7, r3
 800a146:	1978      	adds	r0, r7, r5
 800a148:	23e0      	movs	r3, #224	; 0xe0
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	199b      	adds	r3, r3, r6
 800a14e:	19db      	adds	r3, r3, r7
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	0023      	movs	r3, r4
 800a156:	f000 fbaf 	bl	800a8b8 <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a15a:	197b      	adds	r3, r7, r5
 800a15c:	0018      	movs	r0, r3
 800a15e:	f000 f895 	bl	800a28c <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a162:	4b37      	ldr	r3, [pc, #220]	; (800a240 <my_lx6_get_coordinates+0x384>)
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2201      	movs	r2, #1
 800a168:	701a      	strb	r2, [r3, #0]
							break ;
 800a16a:	e01a      	b.n	800a1a2 <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a16c:	4b37      	ldr	r3, [pc, #220]	; (800a24c <my_lx6_get_coordinates+0x390>)
 800a16e:	21da      	movs	r1, #218	; 0xda
 800a170:	0089      	lsls	r1, r1, #2
 800a172:	185b      	adds	r3, r3, r1
 800a174:	19da      	adds	r2, r3, r7
 800a176:	4b34      	ldr	r3, [pc, #208]	; (800a248 <my_lx6_get_coordinates+0x38c>)
 800a178:	185b      	adds	r3, r3, r1
 800a17a:	19db      	adds	r3, r3, r7
 800a17c:	0010      	movs	r0, r2
 800a17e:	0019      	movs	r1, r3
 800a180:	23fa      	movs	r3, #250	; 0xfa
 800a182:	001a      	movs	r2, r3
 800a184:	f002 f9db 	bl	800c53e <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a188:	4b3b      	ldr	r3, [pc, #236]	; (800a278 <my_lx6_get_coordinates+0x3bc>)
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	4a2b      	ldr	r2, [pc, #172]	; (800a23c <my_lx6_get_coordinates+0x380>)
 800a18e:	21da      	movs	r1, #218	; 0xda
 800a190:	0089      	lsls	r1, r1, #2
 800a192:	1852      	adds	r2, r2, r1
 800a194:	19d2      	adds	r2, r2, r7
 800a196:	8812      	ldrh	r2, [r2, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d900      	bls.n	800a19e <my_lx6_get_coordinates+0x2e2>
 800a19c:	e709      	b.n	8009fb2 <my_lx6_get_coordinates+0xf6>
 800a19e:	e000      	b.n	800a1a2 <my_lx6_get_coordinates+0x2e6>
							break ;
 800a1a0:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a1a2:	4b36      	ldr	r3, [pc, #216]	; (800a27c <my_lx6_get_coordinates+0x3c0>)
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f7fc fb3b 	bl	8006820 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a1aa:	f7f8 ff61 	bl	8003070 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a1ae:	4b2b      	ldr	r3, [pc, #172]	; (800a25c <my_lx6_get_coordinates+0x3a0>)
 800a1b0:	22da      	movs	r2, #218	; 0xda
 800a1b2:	0092      	lsls	r2, r2, #2
 800a1b4:	189b      	adds	r3, r3, r2
 800a1b6:	19db      	adds	r3, r3, r7
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d125      	bne.n	800a20a <my_lx6_get_coordinates+0x34e>
 800a1be:	4b23      	ldr	r3, [pc, #140]	; (800a24c <my_lx6_get_coordinates+0x390>)
 800a1c0:	189b      	adds	r3, r3, r2
 800a1c2:	19db      	adds	r3, r3, r7
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01f      	beq.n	800a20a <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a1ca:	23df      	movs	r3, #223	; 0xdf
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	2508      	movs	r5, #8
 800a1d0:	195b      	adds	r3, r3, r5
 800a1d2:	19db      	adds	r3, r3, r7
 800a1d4:	681c      	ldr	r4, [r3, #0]
 800a1d6:	2344      	movs	r3, #68	; 0x44
 800a1d8:	18fa      	adds	r2, r7, r3
 800a1da:	2350      	movs	r3, #80	; 0x50
 800a1dc:	18f9      	adds	r1, r7, r3
 800a1de:	23ae      	movs	r3, #174	; 0xae
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	18f8      	adds	r0, r7, r3
 800a1e4:	23e0      	movs	r3, #224	; 0xe0
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	195b      	adds	r3, r3, r5
 800a1ea:	19db      	adds	r3, r3, r7
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	0023      	movs	r3, r4
 800a1f2:	f000 fb61 	bl	800a8b8 <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a1f6:	2396      	movs	r3, #150	; 0x96
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	18fb      	adds	r3, r7, r3
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 f845 	bl	800a28c <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <my_lx6_get_coordinates+0x384>)
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	2201      	movs	r2, #1
 800a208:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 800a20a:	2344      	movs	r3, #68	; 0x44
 800a20c:	18fb      	adds	r3, r7, r3
 800a20e:	2250      	movs	r2, #80	; 0x50
 800a210:	18ba      	adds	r2, r7, r2
 800a212:	491d      	ldr	r1, [pc, #116]	; (800a288 <my_lx6_get_coordinates+0x3cc>)
 800a214:	2410      	movs	r4, #16
 800a216:	1938      	adds	r0, r7, r4
 800a218:	f002 f816 	bl	800c248 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 800a21c:	193b      	adds	r3, r7, r4
 800a21e:	0018      	movs	r0, r3
 800a220:	f7f8 fe24 	bl	8002e6c <send_debug_logs>
	return r ;
 800a224:	4b06      	ldr	r3, [pc, #24]	; (800a240 <my_lx6_get_coordinates+0x384>)
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	781b      	ldrb	r3, [r3, #0]
}
 800a22a:	0018      	movs	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	23db      	movs	r3, #219	; 0xdb
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	449d      	add	sp, r3
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	fffffc8c 	.word	0xfffffc8c
 800a23c:	fffffca6 	.word	0xfffffca6
 800a240:	00000367 	.word	0x00000367
 800a244:	00000353 	.word	0x00000353
 800a248:	fffffef0 	.word	0xfffffef0
 800a24c:	fffffdf4 	.word	0xfffffdf4
 800a250:	fffffcf8 	.word	0xfffffcf8
 800a254:	fffffcf7 	.word	0xfffffcf7
 800a258:	00000366 	.word	0x00000366
 800a25c:	fffffce8 	.word	0xfffffce8
 800a260:	fffffcdc 	.word	0xfffffcdc
 800a264:	08014758 	.word	0x08014758
 800a268:	08014760 	.word	0x08014760
 800a26c:	08014768 	.word	0x08014768
 800a270:	0801476c 	.word	0x0801476c
 800a274:	00000365 	.word	0x00000365
 800a278:	20000a24 	.word	0x20000a24
 800a27c:	2000078c 	.word	0x2000078c
 800a280:	20000900 	.word	0x20000900
 800a284:	2000086c 	.word	0x2000086c
 800a288:	08014770 	.word	0x08014770

0800a28c <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a28c:	b5b0      	push	{r4, r5, r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a294:	2508      	movs	r5, #8
 800a296:	197b      	adds	r3, r7, r5
 800a298:	1cda      	adds	r2, r3, #3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	0011      	movs	r1, r2
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f000 fc44 	bl	800ab2c <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a2a4:	197b      	adds	r3, r7, r5
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	0011      	movs	r1, r2
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f000 fc77 	bl	800aba0 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a2b2:	197b      	adds	r3, r7, r5
 800a2b4:	1c9a      	adds	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0011      	movs	r1, r2
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f000 fcaa 	bl	800ac14 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a2c0:	240c      	movs	r4, #12
 800a2c2:	193a      	adds	r2, r7, r4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	0011      	movs	r1, r2
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f000 fcdd 	bl	800ac88 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a2ce:	193b      	adds	r3, r7, r4
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0011      	movs	r1, r2
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f000 fd10 	bl	800acfc <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a2dc:	193b      	adds	r3, r7, r4
 800a2de:	1c9a      	adds	r2, r3, #2
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0011      	movs	r1, r2
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 fd43 	bl	800ad70 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a2ea:	193b      	adds	r3, r7, r4
 800a2ec:	1d1a      	adds	r2, r3, #4
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 fd76 	bl	800ade4 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a2f8:	193b      	adds	r3, r7, r4
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a2fe:	193b      	adds	r3, r7, r4
 800a300:	2200      	movs	r2, #0
 800a302:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a304:	4b0b      	ldr	r3, [pc, #44]	; (800a334 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a306:	0018      	movs	r0, r3
 800a308:	f7fb fa6b 	bl	80057e2 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a30c:	1939      	adds	r1, r7, r4
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a310:	2200      	movs	r2, #0
 800a312:	0018      	movs	r0, r3
 800a314:	f7fa fe68 	bl	8004fe8 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a318:	1979      	adds	r1, r7, r5
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	0018      	movs	r0, r3
 800a320:	f7fa ff66 	bl	80051f0 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a324:	4b03      	ldr	r3, [pc, #12]	; (800a334 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a326:	0018      	movs	r0, r3
 800a328:	f7fb fa8f 	bl	800584a <HAL_RTCEx_DisableBypassShadow>
}
 800a32c:	46c0      	nop			; (mov r8, r8)
 800a32e:	46bd      	mov	sp, r7
 800a330:	b008      	add	sp, #32
 800a332:	bdb0      	pop	{r4, r5, r7, pc}
 800a334:	200006fc 	.word	0x200006fc

0800a338 <my_rtc_get_dt>:
void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4b07      	ldr	r3, [pc, #28]	; (800a364 <my_rtc_get_dt+0x2c>)
 800a346:	2200      	movs	r2, #0
 800a348:	0018      	movs	r0, r3
 800a34a:	f7fa ffe3 	bl	8005314 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <my_rtc_get_dt+0x2c>)
 800a352:	2200      	movs	r2, #0
 800a354:	0018      	movs	r0, r3
 800a356:	f7fa feef 	bl	8005138 <HAL_RTC_GetTime>
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b002      	add	sp, #8
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	200006fc 	.word	0x200006fc

0800a368 <my_rtc_get_time_s>:
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a36a:	b08d      	sub	sp, #52	; 0x34
 800a36c:	af04      	add	r7, sp, #16
 800a36e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a370:	2508      	movs	r5, #8
 800a372:	1979      	adds	r1, r7, r5
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <my_rtc_get_time_s+0x7c>)
 800a376:	2200      	movs	r2, #0
 800a378:	0018      	movs	r0, r3
 800a37a:	f7fa fedd 	bl	8005138 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a37e:	241c      	movs	r4, #28
 800a380:	1939      	adds	r1, r7, r4
 800a382:	4b18      	ldr	r3, [pc, #96]	; (800a3e4 <my_rtc_get_time_s+0x7c>)
 800a384:	2200      	movs	r2, #0
 800a386:	0018      	movs	r0, r3
 800a388:	f7fa ffc4 	bl	8005314 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a38c:	0021      	movs	r1, r4
 800a38e:	187b      	adds	r3, r7, r1
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	22fa      	movs	r2, #250	; 0xfa
 800a394:	00d2      	lsls	r2, r2, #3
 800a396:	189a      	adds	r2, r3, r2
 800a398:	187b      	adds	r3, r7, r1
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	469c      	mov	ip, r3
 800a39e:	187b      	adds	r3, r7, r1
 800a3a0:	789b      	ldrb	r3, [r3, #2]
 800a3a2:	001c      	movs	r4, r3
 800a3a4:	0028      	movs	r0, r5
 800a3a6:	183b      	adds	r3, r7, r0
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	001d      	movs	r5, r3
 800a3ac:	183b      	adds	r3, r7, r0
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	001e      	movs	r6, r3
 800a3b2:	183b      	adds	r3, r7, r0
 800a3b4:	789b      	ldrb	r3, [r3, #2]
 800a3b6:	490c      	ldr	r1, [pc, #48]	; (800a3e8 <my_rtc_get_time_s+0x80>)
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	9303      	str	r3, [sp, #12]
 800a3bc:	9602      	str	r6, [sp, #8]
 800a3be:	9501      	str	r5, [sp, #4]
 800a3c0:	9400      	str	r4, [sp, #0]
 800a3c2:	4663      	mov	r3, ip
 800a3c4:	f001 ff40 	bl	800c248 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a3c8:	211c      	movs	r1, #28
 800a3ca:	187b      	adds	r3, r7, r1
 800a3cc:	78db      	ldrb	r3, [r3, #3]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	22fa      	movs	r2, #250	; 0xfa
 800a3d2:	00d2      	lsls	r2, r2, #3
 800a3d4:	4694      	mov	ip, r2
 800a3d6:	4463      	add	r3, ip
 800a3d8:	b29b      	uxth	r3, r3
}
 800a3da:	0018      	movs	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b009      	add	sp, #36	; 0x24
 800a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e2:	46c0      	nop			; (mov r8, r8)
 800a3e4:	200006fc 	.word	0x200006fc
 800a3e8:	08014788 	.word	0x08014788

0800a3ec <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f001 fd89 	bl	800bf10 <strtod>
 800a3fe:	0002      	movs	r2, r0
 800a400:	000b      	movs	r3, r1
 800a402:	60ba      	str	r2, [r7, #8]
 800a404:	60fb      	str	r3, [r7, #12]
    return d ;
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	68fb      	ldr	r3, [r7, #12]
}
 800a40a:	0010      	movs	r0, r2
 800a40c:	0019      	movs	r1, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	b004      	add	sp, #16
 800a412:	bd80      	pop	{r7, pc}

0800a414 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	0008      	movs	r0, r1
 800a41e:	0011      	movs	r1, r2
 800a420:	1cfb      	adds	r3, r7, #3
 800a422:	1c02      	adds	r2, r0, #0
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	1cbb      	adds	r3, r7, #2
 800a428:	1c0a      	adds	r2, r1, #0
 800a42a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a42c:	230f      	movs	r3, #15
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	2200      	movs	r2, #0
 800a432:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a434:	230e      	movs	r3, #14
 800a436:	18fb      	adds	r3, r7, r3
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a43c:	e01c      	b.n	800a478 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a43e:	230f      	movs	r3, #15
 800a440:	18fb      	adds	r3, r7, r3
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	18d3      	adds	r3, r2, r3
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	1cfa      	adds	r2, r7, #3
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d105      	bne.n	800a45e <my_find_char_position+0x4a>
			p++ ;
 800a452:	210e      	movs	r1, #14
 800a454:	187b      	adds	r3, r7, r1
 800a456:	781a      	ldrb	r2, [r3, #0]
 800a458:	187b      	adds	r3, r7, r1
 800a45a:	3201      	adds	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a45e:	230e      	movs	r3, #14
 800a460:	18fa      	adds	r2, r7, r3
 800a462:	1cbb      	adds	r3, r7, #2
 800a464:	7812      	ldrb	r2, [r2, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d00e      	beq.n	800a48a <my_find_char_position+0x76>
			break ;
		i++ ;
 800a46c:	210f      	movs	r1, #15
 800a46e:	187b      	adds	r3, r7, r1
 800a470:	781a      	ldrb	r2, [r3, #0]
 800a472:	187b      	adds	r3, r7, r1
 800a474:	3201      	adds	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a478:	230f      	movs	r3, #15
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	18d3      	adds	r3, r2, r3
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1da      	bne.n	800a43e <my_find_char_position+0x2a>
 800a488:	e000      	b.n	800a48c <my_find_char_position+0x78>
			break ;
 800a48a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a48c:	230f      	movs	r3, #15
 800a48e:	18fb      	adds	r3, r7, r3
 800a490:	781b      	ldrb	r3, [r3, #0]
}
 800a492:	0018      	movs	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	b004      	add	sp, #16
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	78db      	ldrb	r3, [r3, #3]
 800a4aa:	22fa      	movs	r2, #250	; 0xfa
 800a4ac:	00d2      	lsls	r2, r2, #3
 800a4ae:	4694      	mov	ip, r2
 800a4b0:	4463      	add	r3, ip
 800a4b2:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	0013      	movs	r3, r2
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	189b      	adds	r3, r3, r2
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	189b      	adds	r3, r3, r2
 800a4c0:	009a      	lsls	r2, r3, #2
 800a4c2:	189a      	adds	r2, r3, r2
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	492c      	ldr	r1, [pc, #176]	; (800a578 <my_conv_rtc2timestamp+0xdc>)
 800a4c8:	468c      	mov	ip, r1
 800a4ca:	4463      	add	r3, ip
 800a4cc:	089b      	lsrs	r3, r3, #2
 800a4ce:	18d3      	adds	r3, r2, r3
 800a4d0:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <my_conv_rtc2timestamp+0xe0>)
 800a4d2:	4694      	mov	ip, r2
 800a4d4:	4463      	add	r3, ip
 800a4d6:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a4d8:	2300      	movs	r3, #0
 800a4da:	613b      	str	r3, [r7, #16]
 800a4dc:	e00a      	b.n	800a4f4 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a4de:	4a28      	ldr	r2, [pc, #160]	; (800a580 <my_conv_rtc2timestamp+0xe4>)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	18d3      	adds	r3, r2, r3
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	001a      	movs	r2, r3
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	785b      	ldrb	r3, [r3, #1]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	dbee      	blt.n	800a4de <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	2b02      	cmp	r3, #2
 800a506:	d908      	bls.n	800a51a <my_conv_rtc2timestamp+0x7e>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	0018      	movs	r0, r3
 800a50c:	f000 f83a 	bl	800a584 <my_conv_is_leap_year>
 800a510:	1e03      	subs	r3, r0, #0
 800a512:	d002      	beq.n	800a51a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	3301      	adds	r3, #1
 800a518:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	001a      	movs	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	3b01      	subs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	0013      	movs	r3, r2
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	189b      	adds	r3, r3, r2
 800a530:	011a      	lsls	r2, r3, #4
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	0113      	lsls	r3, r2, #4
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	01db      	lsls	r3, r3, #7
 800a53a:	0019      	movs	r1, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	001a      	movs	r2, r3
 800a542:	0013      	movs	r3, r2
 800a544:	011b      	lsls	r3, r3, #4
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	011a      	lsls	r2, r3, #4
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	0113      	lsls	r3, r2, #4
 800a54e:	001a      	movs	r2, r3
 800a550:	0013      	movs	r3, r2
 800a552:	18ca      	adds	r2, r1, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	0019      	movs	r1, r3
 800a55a:	000b      	movs	r3, r1
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	1a5b      	subs	r3, r3, r1
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	18d3      	adds	r3, r2, r3
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	7892      	ldrb	r2, [r2, #2]
 800a568:	189b      	adds	r3, r3, r2
 800a56a:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a56c:	68bb      	ldr	r3, [r7, #8]
}
 800a56e:	0018      	movs	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	b006      	add	sp, #24
 800a574:	bd80      	pop	{r7, pc}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	fffff84f 	.word	0xfffff84f
 800a57c:	fff50736 	.word	0xfff50736
 800a580:	08014894 	.word	0x08014894

0800a584 <my_conv_is_leap_year>:
	t->Seconds = seconds ;
}

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2203      	movs	r2, #3
 800a590:	4013      	ands	r3, r2
 800a592:	d106      	bne.n	800a5a2 <my_conv_is_leap_year+0x1e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2164      	movs	r1, #100	; 0x64
 800a598:	0018      	movs	r0, r3
 800a59a:	f7f5 ff3f 	bl	800041c <__aeabi_idivmod>
 800a59e:	1e0b      	subs	r3, r1, #0
 800a5a0:	d107      	bne.n	800a5b2 <my_conv_is_leap_year+0x2e>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	22c8      	movs	r2, #200	; 0xc8
 800a5a6:	0051      	lsls	r1, r2, #1
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7f5 ff37 	bl	800041c <__aeabi_idivmod>
 800a5ae:	1e0b      	subs	r3, r1, #0
 800a5b0:	d101      	bne.n	800a5b6 <my_conv_is_leap_year+0x32>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <my_conv_is_leap_year+0x34>
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b002      	add	sp, #8
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b24      	cmp	r3, #36	; 0x24
 800a5d2:	d117      	bne.n	800a604 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	b2d1      	uxtb	r1, r2
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	7011      	strb	r1, [r2, #0]
 800a5e6:	001a      	movs	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	189b      	adds	r3, r3, r2
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	189b      	adds	r3, r3, r2
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a600:	2300      	movs	r3, #0
 800a602:	e045      	b.n	800a690 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b1f      	cmp	r3, #31
 800a60a:	d907      	bls.n	800a61c <my_nmea_message+0x5c>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b7e      	cmp	r3, #126	; 0x7e
 800a612:	d803      	bhi.n	800a61c <my_nmea_message+0x5c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d103      	bne.n	800a624 <my_nmea_message+0x64>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b0d      	cmp	r3, #13
 800a622:	d114      	bne.n	800a64e <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	b2d1      	uxtb	r1, r2
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	7011      	strb	r1, [r2, #0]
 800a630:	001a      	movs	r2, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	189b      	adds	r3, r3, r2
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	7812      	ldrb	r2, [r2, #0]
 800a63a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	001a      	movs	r2, r3
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	189b      	adds	r3, r3, r2
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e020      	b.n	800a690 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b0a      	cmp	r3, #10
 800a654:	d11a      	bne.n	800a68c <my_nmea_message+0xcc>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d916      	bls.n	800a68c <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	3b01      	subs	r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	001a      	movs	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	189b      	adds	r3, r3, r2
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b0d      	cmp	r3, #13
 800a678:	d108      	bne.n	800a68c <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	001a      	movs	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	189b      	adds	r3, r3, r2
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a688:	2302      	movs	r3, #2
 800a68a:	e001      	b.n	800a690 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a68c:	2301      	movs	r3, #1
 800a68e:	425b      	negs	r3, r3
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b004      	add	sp, #16
 800a696:	bd80      	pop	{r7, pc}

0800a698 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3309      	adds	r3, #9
 800a6a4:	781b      	ldrb	r3, [r3, #0]
}
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b002      	add	sp, #8
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a6ae:	b5b0      	push	{r4, r5, r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	220f      	movs	r2, #15
 800a6ba:	212c      	movs	r1, #44	; 0x2c
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7ff fea9 	bl	800a414 <my_find_char_position>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	001a      	movs	r2, r3
 800a6c6:	2517      	movs	r5, #23
 800a6c8:	197b      	adds	r3, r7, r5
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2210      	movs	r2, #16
 800a6d2:	212c      	movs	r1, #44	; 0x2c
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f7ff fe9d 	bl	800a414 <my_find_char_position>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	0019      	movs	r1, r3
 800a6de:	2416      	movs	r4, #22
 800a6e0:	193b      	adds	r3, r7, r4
 800a6e2:	197a      	adds	r2, r7, r5
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	1a8a      	subs	r2, r1, r2
 800a6e8:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a6ea:	193b      	adds	r3, r7, r4
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 fbab 	bl	800ae4c <malloc>
 800a6f6:	0003      	movs	r3, r0
 800a6f8:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a6fa:	197b      	adds	r3, r7, r5
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	18d1      	adds	r1, r2, r3
 800a702:	193b      	adds	r3, r7, r4
 800a704:	781a      	ldrb	r2, [r3, #0]
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	0018      	movs	r0, r3
 800a70a:	f001 fe4c 	bl	800c3a6 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a70e:	193b      	adds	r3, r7, r4
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	18d3      	adds	r3, r2, r3
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	0018      	movs	r0, r3
 800a71e:	f7ff fe65 	bl	800a3ec <my_string2double_conv>
 800a722:	0002      	movs	r2, r0
 800a724:	000b      	movs	r3, r1
 800a726:	60ba      	str	r2, [r7, #8]
 800a728:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	0018      	movs	r0, r3
 800a72e:	f000 fb97 	bl	800ae60 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
}
 800a736:	0010      	movs	r0, r2
 800a738:	0019      	movs	r1, r3
 800a73a:	46bd      	mov	sp, r7
 800a73c:	b006      	add	sp, #24
 800a73e:	bdb0      	pop	{r4, r5, r7, pc}

0800a740 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a748:	230f      	movs	r3, #15
 800a74a:	18fb      	adds	r3, r7, r3
 800a74c:	2200      	movs	r2, #0
 800a74e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a750:	230e      	movs	r3, #14
 800a752:	18fb      	adds	r3, r7, r3
 800a754:	2201      	movs	r2, #1
 800a756:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a758:	e00f      	b.n	800a77a <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a75a:	220e      	movs	r2, #14
 800a75c:	18bb      	adds	r3, r7, r2
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	18ba      	adds	r2, r7, r2
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	7011      	strb	r1, [r2, #0]
 800a766:	001a      	movs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	189b      	adds	r3, r3, r2
 800a76c:	7819      	ldrb	r1, [r3, #0]
 800a76e:	220f      	movs	r2, #15
 800a770:	18bb      	adds	r3, r7, r2
 800a772:	18ba      	adds	r2, r7, r2
 800a774:	7812      	ldrb	r2, [r2, #0]
 800a776:	404a      	eors	r2, r1
 800a778:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a77a:	210e      	movs	r1, #14
 800a77c:	187b      	adds	r3, r7, r1
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b2a      	cmp	r3, #42	; 0x2a
 800a788:	d00a      	beq.n	800a7a0 <is_my_nmea_checksum_ok+0x60>
 800a78a:	187b      	adds	r3, r7, r1
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	18d3      	adds	r3, r2, r3
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <is_my_nmea_checksum_ok+0x60>
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1dc      	bne.n	800a75a <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a7a0:	230f      	movs	r3, #15
 800a7a2:	18fb      	adds	r3, r7, r3
 800a7a4:	781c      	ldrb	r4, [r3, #0]
 800a7a6:	210e      	movs	r1, #14
 800a7a8:	187b      	adds	r3, r7, r1
 800a7aa:	187a      	adds	r2, r7, r1
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	3201      	adds	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	187b      	adds	r3, r7, r1
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	18d3      	adds	r3, r2, r3
 800a7ba:	2210      	movs	r2, #16
 800a7bc:	2100      	movs	r1, #0
 800a7be:	0018      	movs	r0, r3
 800a7c0:	f001 fc3e 	bl	800c040 <strtol>
 800a7c4:	0003      	movs	r3, r0
 800a7c6:	1ae3      	subs	r3, r4, r3
 800a7c8:	425a      	negs	r2, r3
 800a7ca:	4153      	adcs	r3, r2
 800a7cc:	b2db      	uxtb	r3, r3
}
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b005      	add	sp, #20
 800a7d4:	bd90      	pop	{r4, r7, pc}
	...

0800a7d8 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a7d8:	b5b0      	push	{r4, r5, r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	000a      	movs	r2, r1
 800a7e2:	1cfb      	adds	r3, r7, #3
 800a7e4:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a7e6:	2308      	movs	r3, #8
 800a7e8:	18fa      	adds	r2, r7, r3
 800a7ea:	492f      	ldr	r1, [pc, #188]	; (800a8a8 <nmea2decimal+0xd0>)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f001 fd4a 	bl	800c288 <sscanf>
    min = deg / 100 ;
 800a7f4:	68b8      	ldr	r0, [r7, #8]
 800a7f6:	68f9      	ldr	r1, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4b2c      	ldr	r3, [pc, #176]	; (800a8ac <nmea2decimal+0xd4>)
 800a7fc:	f7f6 fb3c 	bl	8000e78 <__aeabi_ddiv>
 800a800:	0002      	movs	r2, r0
 800a802:	000b      	movs	r3, r1
 800a804:	613a      	str	r2, [r7, #16]
 800a806:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a808:	6938      	ldr	r0, [r7, #16]
 800a80a:	6979      	ldr	r1, [r7, #20]
 800a80c:	f7f7 fd90 	bl	8002330 <__aeabi_d2iz>
 800a810:	0003      	movs	r3, r0
 800a812:	0018      	movs	r0, r3
 800a814:	f7f7 fdc2 	bl	800239c <__aeabi_i2d>
 800a818:	0002      	movs	r2, r0
 800a81a:	000b      	movs	r3, r1
 800a81c:	60ba      	str	r2, [r7, #8]
 800a81e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6938      	ldr	r0, [r7, #16]
 800a826:	6979      	ldr	r1, [r7, #20]
 800a828:	f7f7 f9e2 	bl	8001bf0 <__aeabi_dsub>
 800a82c:	0002      	movs	r2, r0
 800a82e:	000b      	movs	r3, r1
 800a830:	0010      	movs	r0, r2
 800a832:	0019      	movs	r1, r3
 800a834:	2200      	movs	r2, #0
 800a836:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <nmea2decimal+0xd8>)
 800a838:	f7f6 ff18 	bl	800166c <__aeabi_dmul>
 800a83c:	0002      	movs	r2, r0
 800a83e:	000b      	movs	r3, r1
 800a840:	613a      	str	r2, [r7, #16]
 800a842:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a844:	2200      	movs	r2, #0
 800a846:	4b1b      	ldr	r3, [pc, #108]	; (800a8b4 <nmea2decimal+0xdc>)
 800a848:	6938      	ldr	r0, [r7, #16]
 800a84a:	6979      	ldr	r1, [r7, #20]
 800a84c:	f7f6 fb14 	bl	8000e78 <__aeabi_ddiv>
 800a850:	0002      	movs	r2, r0
 800a852:	000b      	movs	r3, r1
 800a854:	613a      	str	r2, [r7, #16]
 800a856:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a858:	1cfb      	adds	r3, r7, #3
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b53      	cmp	r3, #83	; 0x53
 800a85e:	d003      	beq.n	800a868 <nmea2decimal+0x90>
 800a860:	1cfb      	adds	r3, r7, #3
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b57      	cmp	r3, #87	; 0x57
 800a866:	d10e      	bne.n	800a886 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f7f5 ffa2 	bl	80007b8 <__aeabi_dadd>
 800a874:	0002      	movs	r2, r0
 800a876:	000b      	movs	r3, r1
 800a878:	0011      	movs	r1, r2
 800a87a:	000c      	movs	r4, r1
 800a87c:	2180      	movs	r1, #128	; 0x80
 800a87e:	0609      	lsls	r1, r1, #24
 800a880:	4059      	eors	r1, r3
 800a882:	000d      	movs	r5, r1
 800a884:	e009      	b.n	800a89a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a886:	68b8      	ldr	r0, [r7, #8]
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f7f5 ff93 	bl	80007b8 <__aeabi_dadd>
 800a892:	0002      	movs	r2, r0
 800a894:	000b      	movs	r3, r1
 800a896:	0014      	movs	r4, r2
 800a898:	001d      	movs	r5, r3
}
 800a89a:	0022      	movs	r2, r4
 800a89c:	002b      	movs	r3, r5
 800a89e:	0010      	movs	r0, r2
 800a8a0:	0019      	movs	r1, r3
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	b006      	add	sp, #24
 800a8a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a8:	080147a8 	.word	0x080147a8
 800a8ac:	40590000 	.word	0x40590000
 800a8b0:	40240000 	.word	0x40240000
 800a8b4:	40180000 	.word	0x40180000

0800a8b8 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ba:	b091      	sub	sp, #68	; 0x44
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	212c      	movs	r1, #44	; 0x2c
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	f7ff fda1 	bl	800a414 <my_find_char_position>
 800a8d2:	0003      	movs	r3, r0
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	2537      	movs	r5, #55	; 0x37
 800a8d8:	197b      	adds	r3, r7, r5
 800a8da:	3201      	adds	r2, #1
 800a8dc:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	212c      	movs	r1, #44	; 0x2c
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f7ff fd95 	bl	800a414 <my_find_char_position>
 800a8ea:	0003      	movs	r3, r0
 800a8ec:	0019      	movs	r1, r3
 800a8ee:	2436      	movs	r4, #54	; 0x36
 800a8f0:	193b      	adds	r3, r7, r4
 800a8f2:	197a      	adds	r2, r7, r5
 800a8f4:	7812      	ldrb	r2, [r2, #0]
 800a8f6:	1a8a      	subs	r2, r1, r2
 800a8f8:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a8fa:	193b      	adds	r3, r7, r4
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	3301      	adds	r3, #1
 800a900:	0018      	movs	r0, r3
 800a902:	f000 faa3 	bl	800ae4c <malloc>
 800a906:	0003      	movs	r3, r0
 800a908:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a90a:	197b      	adds	r3, r7, r5
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	18d1      	adds	r1, r2, r3
 800a912:	193b      	adds	r3, r7, r4
 800a914:	781a      	ldrb	r2, [r3, #0]
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	0018      	movs	r0, r3
 800a91a:	f001 fd44 	bl	800c3a6 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a91e:	193b      	adds	r3, r7, r4
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a924:	18d3      	adds	r3, r2, r3
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a92a:	197b      	adds	r3, r7, r5
 800a92c:	781a      	ldrb	r2, [r3, #0]
 800a92e:	193b      	adds	r3, r7, r4
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	18d3      	adds	r3, r2, r3
 800a934:	3301      	adds	r3, #1
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	18d2      	adds	r2, r2, r3
 800a93a:	262f      	movs	r6, #47	; 0x2f
 800a93c:	19bb      	adds	r3, r7, r6
 800a93e:	7812      	ldrb	r2, [r2, #0]
 800a940:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a942:	19bb      	adds	r3, r7, r6
 800a944:	781a      	ldrb	r2, [r3, #0]
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	0011      	movs	r1, r2
 800a94a:	0018      	movs	r0, r3
 800a94c:	f7ff ff44 	bl	800a7d8 <nmea2decimal>
 800a950:	0002      	movs	r2, r0
 800a952:	000b      	movs	r3, r1
 800a954:	623a      	str	r2, [r7, #32]
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	0018      	movs	r0, r3
 800a95c:	f000 fa80 	bl	800ae60 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a960:	2200      	movs	r2, #0
 800a962:	4b53      	ldr	r3, [pc, #332]	; (800aab0 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a964:	6a38      	ldr	r0, [r7, #32]
 800a966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a968:	f7f6 fe80 	bl	800166c <__aeabi_dmul>
 800a96c:	0002      	movs	r2, r0
 800a96e:	000b      	movs	r3, r1
 800a970:	0010      	movs	r0, r2
 800a972:	0019      	movs	r1, r3
 800a974:	f008 fa34 	bl	8012de0 <round>
 800a978:	2200      	movs	r2, #0
 800a97a:	4b4d      	ldr	r3, [pc, #308]	; (800aab0 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a97c:	f7f6 fa7c 	bl	8000e78 <__aeabi_ddiv>
 800a980:	0002      	movs	r2, r0
 800a982:	000b      	movs	r3, r1
 800a984:	623a      	str	r2, [r7, #32]
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a988:	494a      	ldr	r1, [pc, #296]	; (800aab4 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	6a3a      	ldr	r2, [r7, #32]
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	9200      	str	r2, [sp, #0]
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	000a      	movs	r2, r1
 800a996:	210c      	movs	r1, #12
 800a998:	f001 fc22 	bl	800c1e0 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a99c:	2200      	movs	r2, #0
 800a99e:	4b46      	ldr	r3, [pc, #280]	; (800aab8 <get_my_nmea_gngll_coordinates+0x200>)
 800a9a0:	6a38      	ldr	r0, [r7, #32]
 800a9a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9a4:	f7f6 fe62 	bl	800166c <__aeabi_dmul>
 800a9a8:	0002      	movs	r2, r0
 800a9aa:	000b      	movs	r3, r1
 800a9ac:	0010      	movs	r0, r2
 800a9ae:	0019      	movs	r1, r3
 800a9b0:	f7f7 fcbe 	bl	8002330 <__aeabi_d2iz>
 800a9b4:	0002      	movs	r2, r0
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	212c      	movs	r1, #44	; 0x2c
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	f7ff fd27 	bl	800a414 <my_find_char_position>
 800a9c6:	0003      	movs	r3, r0
 800a9c8:	001a      	movs	r2, r3
 800a9ca:	197b      	adds	r3, r7, r5
 800a9cc:	3201      	adds	r2, #1
 800a9ce:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2204      	movs	r2, #4
 800a9d4:	212c      	movs	r1, #44	; 0x2c
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	f7ff fd1c 	bl	800a414 <my_find_char_position>
 800a9dc:	0003      	movs	r3, r0
 800a9de:	0019      	movs	r1, r3
 800a9e0:	193b      	adds	r3, r7, r4
 800a9e2:	197a      	adds	r2, r7, r5
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	1a8a      	subs	r2, r1, r2
 800a9e8:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a9ea:	193b      	adds	r3, r7, r4
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f000 fa2b 	bl	800ae4c <malloc>
 800a9f6:	0003      	movs	r3, r0
 800a9f8:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a9fa:	197b      	adds	r3, r7, r5
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	18d1      	adds	r1, r2, r3
 800aa02:	193b      	adds	r3, r7, r4
 800aa04:	781a      	ldrb	r2, [r3, #0]
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f001 fccc 	bl	800c3a6 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800aa0e:	193b      	adds	r3, r7, r4
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	18d3      	adds	r3, r2, r3
 800aa16:	2200      	movs	r2, #0
 800aa18:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800aa1a:	197b      	adds	r3, r7, r5
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	193b      	adds	r3, r7, r4
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	18d3      	adds	r3, r2, r3
 800aa24:	3301      	adds	r3, #1
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	18d2      	adds	r2, r2, r3
 800aa2a:	19bb      	adds	r3, r7, r6
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800aa30:	19bb      	adds	r3, r7, r6
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	0011      	movs	r1, r2
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f7ff fecd 	bl	800a7d8 <nmea2decimal>
 800aa3e:	0002      	movs	r2, r0
 800aa40:	000b      	movs	r3, r1
 800aa42:	613a      	str	r2, [r7, #16]
 800aa44:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 fa09 	bl	800ae60 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <get_my_nmea_gngll_coordinates+0x1f8>)
 800aa52:	6938      	ldr	r0, [r7, #16]
 800aa54:	6979      	ldr	r1, [r7, #20]
 800aa56:	f7f6 fe09 	bl	800166c <__aeabi_dmul>
 800aa5a:	0002      	movs	r2, r0
 800aa5c:	000b      	movs	r3, r1
 800aa5e:	0010      	movs	r0, r2
 800aa60:	0019      	movs	r1, r3
 800aa62:	f008 f9bd 	bl	8012de0 <round>
 800aa66:	2200      	movs	r2, #0
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <get_my_nmea_gngll_coordinates+0x1f8>)
 800aa6a:	f7f6 fa05 	bl	8000e78 <__aeabi_ddiv>
 800aa6e:	0002      	movs	r2, r0
 800aa70:	000b      	movs	r3, r1
 800aa72:	613a      	str	r2, [r7, #16]
 800aa74:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800aa76:	490f      	ldr	r1, [pc, #60]	; (800aab4 <get_my_nmea_gngll_coordinates+0x1fc>)
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	9200      	str	r2, [sp, #0]
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	000a      	movs	r2, r1
 800aa84:	210c      	movs	r1, #12
 800aa86:	f001 fbab 	bl	800c1e0 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <get_my_nmea_gngll_coordinates+0x200>)
 800aa8e:	6938      	ldr	r0, [r7, #16]
 800aa90:	6979      	ldr	r1, [r7, #20]
 800aa92:	f7f6 fdeb 	bl	800166c <__aeabi_dmul>
 800aa96:	0002      	movs	r2, r0
 800aa98:	000b      	movs	r3, r1
 800aa9a:	0010      	movs	r0, r2
 800aa9c:	0019      	movs	r1, r3
 800aa9e:	f7f7 fc47 	bl	8002330 <__aeabi_d2iz>
 800aaa2:	0002      	movs	r2, r0
 800aaa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa6:	601a      	str	r2, [r3, #0]
}
 800aaa8:	46c0      	nop			; (mov r8, r8)
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	b00f      	add	sp, #60	; 0x3c
 800aaae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aab0:	412e8480 	.word	0x412e8480
 800aab4:	080147ac 	.word	0x080147ac
 800aab8:	416312d0 	.word	0x416312d0

0800aabc <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800aabc:	b5b0      	push	{r4, r5, r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800aac4:	240e      	movs	r4, #14
 800aac6:	193b      	adds	r3, r7, r4
 800aac8:	2200      	movs	r2, #0
 800aaca:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2203      	movs	r2, #3
 800aad0:	212c      	movs	r1, #44	; 0x2c
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7ff fc9e 	bl	800a414 <my_find_char_position>
 800aad8:	0003      	movs	r3, r0
 800aada:	001a      	movs	r2, r3
 800aadc:	2517      	movs	r5, #23
 800aade:	197b      	adds	r3, r7, r5
 800aae0:	3201      	adds	r2, #1
 800aae2:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aae4:	2003      	movs	r0, #3
 800aae6:	f000 f9b1 	bl	800ae4c <malloc>
 800aaea:	0003      	movs	r3, r0
 800aaec:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aaee:	197b      	adds	r3, r7, r5
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	18d1      	adds	r1, r2, r3
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	0018      	movs	r0, r3
 800aafc:	f001 fc53 	bl	800c3a6 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3302      	adds	r3, #2
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800ab08:	193a      	adds	r2, r7, r4
 800ab0a:	4907      	ldr	r1, [pc, #28]	; (800ab28 <my_nmea_get_gsv_tns+0x6c>)
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f001 fbba 	bl	800c288 <sscanf>
	free ( s ) ;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	0018      	movs	r0, r3
 800ab18:	f000 f9a2 	bl	800ae60 <free>
	return tns ;
 800ab1c:	193b      	adds	r3, r7, r4
 800ab1e:	881b      	ldrh	r3, [r3, #0]
}
 800ab20:	0018      	movs	r0, r3
 800ab22:	46bd      	mov	sp, r7
 800ab24:	b006      	add	sp, #24
 800ab26:	bdb0      	pop	{r4, r5, r7, pc}
 800ab28:	080147b4 	.word	0x080147b4

0800ab2c <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800ab2c:	b590      	push	{r4, r7, lr}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2209      	movs	r2, #9
 800ab3a:	212c      	movs	r1, #44	; 0x2c
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f7ff fc69 	bl	800a414 <my_find_char_position>
 800ab42:	0003      	movs	r3, r0
 800ab44:	001a      	movs	r2, r3
 800ab46:	2417      	movs	r4, #23
 800ab48:	193b      	adds	r3, r7, r4
 800ab4a:	3205      	adds	r2, #5
 800ab4c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab4e:	2003      	movs	r0, #3
 800ab50:	f000 f97c 	bl	800ae4c <malloc>
 800ab54:	0003      	movs	r3, r0
 800ab56:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab58:	193b      	adds	r3, r7, r4
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	18d1      	adds	r1, r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2202      	movs	r2, #2
 800ab64:	0018      	movs	r0, r3
 800ab66:	f001 fc1e 	bl	800c3a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3302      	adds	r3, #2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ab72:	240e      	movs	r4, #14
 800ab74:	193a      	adds	r2, r7, r4
 800ab76:	4909      	ldr	r1, [pc, #36]	; (800ab9c <my_nmea_get_rmc_date_yy+0x70>)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f001 fb84 	bl	800c288 <sscanf>
	free ( s ) ;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	0018      	movs	r0, r3
 800ab84:	f000 f96c 	bl	800ae60 <free>
	*yy = (uint8_t) temp ;
 800ab88:	193b      	adds	r3, r7, r4
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	701a      	strb	r2, [r3, #0]

}
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b007      	add	sp, #28
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	080147b4 	.word	0x080147b4

0800aba0 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800aba0:	b590      	push	{r4, r7, lr}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2209      	movs	r2, #9
 800abae:	212c      	movs	r1, #44	; 0x2c
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff fc2f 	bl	800a414 <my_find_char_position>
 800abb6:	0003      	movs	r3, r0
 800abb8:	001a      	movs	r2, r3
 800abba:	2417      	movs	r4, #23
 800abbc:	193b      	adds	r3, r7, r4
 800abbe:	3203      	adds	r2, #3
 800abc0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800abc2:	2003      	movs	r0, #3
 800abc4:	f000 f942 	bl	800ae4c <malloc>
 800abc8:	0003      	movs	r3, r0
 800abca:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800abcc:	193b      	adds	r3, r7, r4
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	18d1      	adds	r1, r2, r3
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2202      	movs	r2, #2
 800abd8:	0018      	movs	r0, r3
 800abda:	f001 fbe4 	bl	800c3a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	3302      	adds	r3, #2
 800abe2:	2200      	movs	r2, #0
 800abe4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800abe6:	240e      	movs	r4, #14
 800abe8:	193a      	adds	r2, r7, r4
 800abea:	4909      	ldr	r1, [pc, #36]	; (800ac10 <my_nmea_get_rmc_date_mm+0x70>)
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	0018      	movs	r0, r3
 800abf0:	f001 fb4a 	bl	800c288 <sscanf>
	free ( s ) ;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	0018      	movs	r0, r3
 800abf8:	f000 f932 	bl	800ae60 <free>
	*mm = (uint8_t) temp ;
 800abfc:	193b      	adds	r3, r7, r4
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	701a      	strb	r2, [r3, #0]

}
 800ac06:	46c0      	nop			; (mov r8, r8)
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	b007      	add	sp, #28
 800ac0c:	bd90      	pop	{r4, r7, pc}
 800ac0e:	46c0      	nop			; (mov r8, r8)
 800ac10:	080147b4 	.word	0x080147b4

0800ac14 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800ac14:	b590      	push	{r4, r7, lr}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2209      	movs	r2, #9
 800ac22:	212c      	movs	r1, #44	; 0x2c
 800ac24:	0018      	movs	r0, r3
 800ac26:	f7ff fbf5 	bl	800a414 <my_find_char_position>
 800ac2a:	0003      	movs	r3, r0
 800ac2c:	001a      	movs	r2, r3
 800ac2e:	2417      	movs	r4, #23
 800ac30:	193b      	adds	r3, r7, r4
 800ac32:	3201      	adds	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac36:	2003      	movs	r0, #3
 800ac38:	f000 f908 	bl	800ae4c <malloc>
 800ac3c:	0003      	movs	r3, r0
 800ac3e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ac40:	193b      	adds	r3, r7, r4
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	18d1      	adds	r1, r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f001 fbaa 	bl	800c3a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3302      	adds	r3, #2
 800ac56:	2200      	movs	r2, #0
 800ac58:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ac5a:	240e      	movs	r4, #14
 800ac5c:	193a      	adds	r2, r7, r4
 800ac5e:	4909      	ldr	r1, [pc, #36]	; (800ac84 <my_nmea_get_rmc_date_dd+0x70>)
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	0018      	movs	r0, r3
 800ac64:	f001 fb10 	bl	800c288 <sscanf>
	free ( s ) ;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	f000 f8f8 	bl	800ae60 <free>
	*dd = (uint8_t) temp ;
 800ac70:	193b      	adds	r3, r7, r4
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	701a      	strb	r2, [r3, #0]

}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	b007      	add	sp, #28
 800ac80:	bd90      	pop	{r4, r7, pc}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	080147b4 	.word	0x080147b4

0800ac88 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	212c      	movs	r1, #44	; 0x2c
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7ff fbbb 	bl	800a414 <my_find_char_position>
 800ac9e:	0003      	movs	r3, r0
 800aca0:	001a      	movs	r2, r3
 800aca2:	2417      	movs	r4, #23
 800aca4:	193b      	adds	r3, r7, r4
 800aca6:	3201      	adds	r2, #1
 800aca8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800acaa:	2003      	movs	r0, #3
 800acac:	f000 f8ce 	bl	800ae4c <malloc>
 800acb0:	0003      	movs	r3, r0
 800acb2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800acb4:	193b      	adds	r3, r7, r4
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	18d1      	adds	r1, r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2202      	movs	r2, #2
 800acc0:	0018      	movs	r0, r3
 800acc2:	f001 fb70 	bl	800c3a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	3302      	adds	r3, #2
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800acce:	240e      	movs	r4, #14
 800acd0:	193a      	adds	r2, r7, r4
 800acd2:	4909      	ldr	r1, [pc, #36]	; (800acf8 <my_nmea_get_rmc_utc_hh+0x70>)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	0018      	movs	r0, r3
 800acd8:	f001 fad6 	bl	800c288 <sscanf>
	free ( s ) ;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	0018      	movs	r0, r3
 800ace0:	f000 f8be 	bl	800ae60 <free>
	*hh = (uint8_t) temp ;
 800ace4:	193b      	adds	r3, r7, r4
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	701a      	strb	r2, [r3, #0]

}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	46bd      	mov	sp, r7
 800acf2:	b007      	add	sp, #28
 800acf4:	bd90      	pop	{r4, r7, pc}
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	080147b4 	.word	0x080147b4

0800acfc <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	212c      	movs	r1, #44	; 0x2c
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f7ff fb81 	bl	800a414 <my_find_char_position>
 800ad12:	0003      	movs	r3, r0
 800ad14:	001a      	movs	r2, r3
 800ad16:	2417      	movs	r4, #23
 800ad18:	193b      	adds	r3, r7, r4
 800ad1a:	3203      	adds	r2, #3
 800ad1c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad1e:	2003      	movs	r0, #3
 800ad20:	f000 f894 	bl	800ae4c <malloc>
 800ad24:	0003      	movs	r3, r0
 800ad26:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad28:	193b      	adds	r3, r7, r4
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	18d1      	adds	r1, r2, r3
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2202      	movs	r2, #2
 800ad34:	0018      	movs	r0, r3
 800ad36:	f001 fb36 	bl	800c3a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ad42:	240e      	movs	r4, #14
 800ad44:	193a      	adds	r2, r7, r4
 800ad46:	4909      	ldr	r1, [pc, #36]	; (800ad6c <my_nmea_get_rmc_utc_mm+0x70>)
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f001 fa9c 	bl	800c288 <sscanf>
	free ( s ) ;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	0018      	movs	r0, r3
 800ad54:	f000 f884 	bl	800ae60 <free>
	*mm = (uint8_t) temp ;
 800ad58:	193b      	adds	r3, r7, r4
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	701a      	strb	r2, [r3, #0]

}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	46bd      	mov	sp, r7
 800ad66:	b007      	add	sp, #28
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	080147b4 	.word	0x080147b4

0800ad70 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800ad70:	b590      	push	{r4, r7, lr}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	212c      	movs	r1, #44	; 0x2c
 800ad80:	0018      	movs	r0, r3
 800ad82:	f7ff fb47 	bl	800a414 <my_find_char_position>
 800ad86:	0003      	movs	r3, r0
 800ad88:	001a      	movs	r2, r3
 800ad8a:	2417      	movs	r4, #23
 800ad8c:	193b      	adds	r3, r7, r4
 800ad8e:	3205      	adds	r2, #5
 800ad90:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad92:	2003      	movs	r0, #3
 800ad94:	f000 f85a 	bl	800ae4c <malloc>
 800ad98:	0003      	movs	r3, r0
 800ad9a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad9c:	193b      	adds	r3, r7, r4
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	18d1      	adds	r1, r2, r3
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2202      	movs	r2, #2
 800ada8:	0018      	movs	r0, r3
 800adaa:	f001 fafc 	bl	800c3a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	3302      	adds	r3, #2
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800adb6:	240e      	movs	r4, #14
 800adb8:	193a      	adds	r2, r7, r4
 800adba:	4909      	ldr	r1, [pc, #36]	; (800ade0 <my_nmea_get_rmc_utc_ss+0x70>)
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	0018      	movs	r0, r3
 800adc0:	f001 fa62 	bl	800c288 <sscanf>
	free ( s ) ;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	0018      	movs	r0, r3
 800adc8:	f000 f84a 	bl	800ae60 <free>
	*ss = (uint8_t) temp ;
 800adcc:	193b      	adds	r3, r7, r4
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b2da      	uxtb	r2, r3
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	701a      	strb	r2, [r3, #0]

}
 800add6:	46c0      	nop			; (mov r8, r8)
 800add8:	46bd      	mov	sp, r7
 800adda:	b007      	add	sp, #28
 800addc:	bd90      	pop	{r4, r7, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	080147b4 	.word	0x080147b4

0800ade4 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800ade4:	b590      	push	{r4, r7, lr}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	212c      	movs	r1, #44	; 0x2c
 800adf4:	0018      	movs	r0, r3
 800adf6:	f7ff fb0d 	bl	800a414 <my_find_char_position>
 800adfa:	0003      	movs	r3, r0
 800adfc:	001a      	movs	r2, r3
 800adfe:	240f      	movs	r4, #15
 800ae00:	193b      	adds	r3, r7, r4
 800ae02:	3208      	adds	r2, #8
 800ae04:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ae06:	2004      	movs	r0, #4
 800ae08:	f000 f820 	bl	800ae4c <malloc>
 800ae0c:	0003      	movs	r3, r0
 800ae0e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ae10:	193b      	adds	r3, r7, r4
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	18d1      	adds	r1, r2, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	f001 fac2 	bl	800c3a6 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	3303      	adds	r3, #3
 800ae26:	2200      	movs	r2, #0
 800ae28:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	4906      	ldr	r1, [pc, #24]	; (800ae48 <my_nmea_get_rmc_utc_sss+0x64>)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	0018      	movs	r0, r3
 800ae32:	f001 fa29 	bl	800c288 <sscanf>
	free ( s ) ;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	0018      	movs	r0, r3
 800ae3a:	f000 f811 	bl	800ae60 <free>
}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	46bd      	mov	sp, r7
 800ae42:	b005      	add	sp, #20
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	46c0      	nop			; (mov r8, r8)
 800ae48:	080147b8 	.word	0x080147b8

0800ae4c <malloc>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	4b03      	ldr	r3, [pc, #12]	; (800ae5c <malloc+0x10>)
 800ae50:	0001      	movs	r1, r0
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	f000 f80e 	bl	800ae74 <_malloc_r>
 800ae58:	bd10      	pop	{r4, pc}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	200006d8 	.word	0x200006d8

0800ae60 <free>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <free+0x10>)
 800ae64:	0001      	movs	r1, r0
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	f001 fbe4 	bl	800c634 <_free_r>
 800ae6c:	bd10      	pop	{r4, pc}
 800ae6e:	46c0      	nop			; (mov r8, r8)
 800ae70:	200006d8 	.word	0x200006d8

0800ae74 <_malloc_r>:
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	000d      	movs	r5, r1
 800ae78:	b087      	sub	sp, #28
 800ae7a:	350b      	adds	r5, #11
 800ae7c:	9001      	str	r0, [sp, #4]
 800ae7e:	2d16      	cmp	r5, #22
 800ae80:	d908      	bls.n	800ae94 <_malloc_r+0x20>
 800ae82:	2207      	movs	r2, #7
 800ae84:	4395      	bics	r5, r2
 800ae86:	d506      	bpl.n	800ae96 <_malloc_r+0x22>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	2000      	movs	r0, #0
 800ae90:	b007      	add	sp, #28
 800ae92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae94:	2510      	movs	r5, #16
 800ae96:	42a9      	cmp	r1, r5
 800ae98:	d8f6      	bhi.n	800ae88 <_malloc_r+0x14>
 800ae9a:	9801      	ldr	r0, [sp, #4]
 800ae9c:	f000 f9fe 	bl	800b29c <__malloc_lock>
 800aea0:	23fc      	movs	r3, #252	; 0xfc
 800aea2:	4ebe      	ldr	r6, [pc, #760]	; (800b19c <_malloc_r+0x328>)
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	429d      	cmp	r5, r3
 800aea8:	d219      	bcs.n	800aede <_malloc_r+0x6a>
 800aeaa:	002a      	movs	r2, r5
 800aeac:	3208      	adds	r2, #8
 800aeae:	18b2      	adds	r2, r6, r2
 800aeb0:	0011      	movs	r1, r2
 800aeb2:	6854      	ldr	r4, [r2, #4]
 800aeb4:	3908      	subs	r1, #8
 800aeb6:	08eb      	lsrs	r3, r5, #3
 800aeb8:	428c      	cmp	r4, r1
 800aeba:	d103      	bne.n	800aec4 <_malloc_r+0x50>
 800aebc:	68d4      	ldr	r4, [r2, #12]
 800aebe:	3302      	adds	r3, #2
 800aec0:	42a2      	cmp	r2, r4
 800aec2:	d022      	beq.n	800af0a <_malloc_r+0x96>
 800aec4:	2203      	movs	r2, #3
 800aec6:	6863      	ldr	r3, [r4, #4]
 800aec8:	68a1      	ldr	r1, [r4, #8]
 800aeca:	4393      	bics	r3, r2
 800aecc:	68e2      	ldr	r2, [r4, #12]
 800aece:	18e3      	adds	r3, r4, r3
 800aed0:	60ca      	str	r2, [r1, #12]
 800aed2:	6091      	str	r1, [r2, #8]
 800aed4:	2201      	movs	r2, #1
 800aed6:	6859      	ldr	r1, [r3, #4]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	605a      	str	r2, [r3, #4]
 800aedc:	e02a      	b.n	800af34 <_malloc_r+0xc0>
 800aede:	233f      	movs	r3, #63	; 0x3f
 800aee0:	0a6a      	lsrs	r2, r5, #9
 800aee2:	d003      	beq.n	800aeec <_malloc_r+0x78>
 800aee4:	2a04      	cmp	r2, #4
 800aee6:	d82b      	bhi.n	800af40 <_malloc_r+0xcc>
 800aee8:	09ab      	lsrs	r3, r5, #6
 800aeea:	3338      	adds	r3, #56	; 0x38
 800aeec:	2203      	movs	r2, #3
 800aeee:	4694      	mov	ip, r2
 800aef0:	00d9      	lsls	r1, r3, #3
 800aef2:	1989      	adds	r1, r1, r6
 800aef4:	68cc      	ldr	r4, [r1, #12]
 800aef6:	428c      	cmp	r4, r1
 800aef8:	d006      	beq.n	800af08 <_malloc_r+0x94>
 800aefa:	4660      	mov	r0, ip
 800aefc:	6862      	ldr	r2, [r4, #4]
 800aefe:	4382      	bics	r2, r0
 800af00:	1b57      	subs	r7, r2, r5
 800af02:	2f0f      	cmp	r7, #15
 800af04:	dd34      	ble.n	800af70 <_malloc_r+0xfc>
 800af06:	3b01      	subs	r3, #1
 800af08:	3301      	adds	r3, #1
 800af0a:	6934      	ldr	r4, [r6, #16]
 800af0c:	49a4      	ldr	r1, [pc, #656]	; (800b1a0 <_malloc_r+0x32c>)
 800af0e:	428c      	cmp	r4, r1
 800af10:	d055      	beq.n	800afbe <_malloc_r+0x14a>
 800af12:	2003      	movs	r0, #3
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	4382      	bics	r2, r0
 800af18:	1b50      	subs	r0, r2, r5
 800af1a:	280f      	cmp	r0, #15
 800af1c:	dd36      	ble.n	800af8c <_malloc_r+0x118>
 800af1e:	2301      	movs	r3, #1
 800af20:	1967      	adds	r7, r4, r5
 800af22:	431d      	orrs	r5, r3
 800af24:	4303      	orrs	r3, r0
 800af26:	6065      	str	r5, [r4, #4]
 800af28:	6177      	str	r7, [r6, #20]
 800af2a:	6137      	str	r7, [r6, #16]
 800af2c:	60f9      	str	r1, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	607b      	str	r3, [r7, #4]
 800af32:	50a0      	str	r0, [r4, r2]
 800af34:	9801      	ldr	r0, [sp, #4]
 800af36:	f000 f9b9 	bl	800b2ac <__malloc_unlock>
 800af3a:	0020      	movs	r0, r4
 800af3c:	3008      	adds	r0, #8
 800af3e:	e7a7      	b.n	800ae90 <_malloc_r+0x1c>
 800af40:	2a14      	cmp	r2, #20
 800af42:	d802      	bhi.n	800af4a <_malloc_r+0xd6>
 800af44:	0013      	movs	r3, r2
 800af46:	335b      	adds	r3, #91	; 0x5b
 800af48:	e7d0      	b.n	800aeec <_malloc_r+0x78>
 800af4a:	2a54      	cmp	r2, #84	; 0x54
 800af4c:	d802      	bhi.n	800af54 <_malloc_r+0xe0>
 800af4e:	0b2b      	lsrs	r3, r5, #12
 800af50:	336e      	adds	r3, #110	; 0x6e
 800af52:	e7cb      	b.n	800aeec <_malloc_r+0x78>
 800af54:	23aa      	movs	r3, #170	; 0xaa
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	429a      	cmp	r2, r3
 800af5a:	d802      	bhi.n	800af62 <_malloc_r+0xee>
 800af5c:	0beb      	lsrs	r3, r5, #15
 800af5e:	3377      	adds	r3, #119	; 0x77
 800af60:	e7c4      	b.n	800aeec <_malloc_r+0x78>
 800af62:	4990      	ldr	r1, [pc, #576]	; (800b1a4 <_malloc_r+0x330>)
 800af64:	237e      	movs	r3, #126	; 0x7e
 800af66:	428a      	cmp	r2, r1
 800af68:	d8c0      	bhi.n	800aeec <_malloc_r+0x78>
 800af6a:	0cab      	lsrs	r3, r5, #18
 800af6c:	337c      	adds	r3, #124	; 0x7c
 800af6e:	e7bd      	b.n	800aeec <_malloc_r+0x78>
 800af70:	68e0      	ldr	r0, [r4, #12]
 800af72:	2f00      	cmp	r7, #0
 800af74:	db08      	blt.n	800af88 <_malloc_r+0x114>
 800af76:	68a3      	ldr	r3, [r4, #8]
 800af78:	60d8      	str	r0, [r3, #12]
 800af7a:	6083      	str	r3, [r0, #8]
 800af7c:	2301      	movs	r3, #1
 800af7e:	18a2      	adds	r2, r4, r2
 800af80:	6851      	ldr	r1, [r2, #4]
 800af82:	430b      	orrs	r3, r1
 800af84:	6053      	str	r3, [r2, #4]
 800af86:	e7d5      	b.n	800af34 <_malloc_r+0xc0>
 800af88:	0004      	movs	r4, r0
 800af8a:	e7b4      	b.n	800aef6 <_malloc_r+0x82>
 800af8c:	6171      	str	r1, [r6, #20]
 800af8e:	6131      	str	r1, [r6, #16]
 800af90:	2800      	cmp	r0, #0
 800af92:	daf3      	bge.n	800af7c <_malloc_r+0x108>
 800af94:	6871      	ldr	r1, [r6, #4]
 800af96:	468c      	mov	ip, r1
 800af98:	2180      	movs	r1, #128	; 0x80
 800af9a:	0089      	lsls	r1, r1, #2
 800af9c:	428a      	cmp	r2, r1
 800af9e:	d300      	bcc.n	800afa2 <_malloc_r+0x12e>
 800afa0:	e08c      	b.n	800b0bc <_malloc_r+0x248>
 800afa2:	08d1      	lsrs	r1, r2, #3
 800afa4:	0950      	lsrs	r0, r2, #5
 800afa6:	2201      	movs	r2, #1
 800afa8:	4082      	lsls	r2, r0
 800afaa:	4660      	mov	r0, ip
 800afac:	4302      	orrs	r2, r0
 800afae:	6072      	str	r2, [r6, #4]
 800afb0:	00ca      	lsls	r2, r1, #3
 800afb2:	1992      	adds	r2, r2, r6
 800afb4:	6891      	ldr	r1, [r2, #8]
 800afb6:	60e2      	str	r2, [r4, #12]
 800afb8:	60a1      	str	r1, [r4, #8]
 800afba:	6094      	str	r4, [r2, #8]
 800afbc:	60cc      	str	r4, [r1, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	4876      	ldr	r0, [pc, #472]	; (800b19c <_malloc_r+0x328>)
 800afc2:	1099      	asrs	r1, r3, #2
 800afc4:	408a      	lsls	r2, r1
 800afc6:	6841      	ldr	r1, [r0, #4]
 800afc8:	4291      	cmp	r1, r2
 800afca:	d328      	bcc.n	800b01e <_malloc_r+0x1aa>
 800afcc:	420a      	tst	r2, r1
 800afce:	d105      	bne.n	800afdc <_malloc_r+0x168>
 800afd0:	2403      	movs	r4, #3
 800afd2:	43a3      	bics	r3, r4
 800afd4:	0052      	lsls	r2, r2, #1
 800afd6:	3304      	adds	r3, #4
 800afd8:	420a      	tst	r2, r1
 800afda:	d0fb      	beq.n	800afd4 <_malloc_r+0x160>
 800afdc:	496f      	ldr	r1, [pc, #444]	; (800b19c <_malloc_r+0x328>)
 800afde:	9104      	str	r1, [sp, #16]
 800afe0:	00d9      	lsls	r1, r3, #3
 800afe2:	1841      	adds	r1, r0, r1
 800afe4:	468c      	mov	ip, r1
 800afe6:	000f      	movs	r7, r1
 800afe8:	9302      	str	r3, [sp, #8]
 800afea:	68fc      	ldr	r4, [r7, #12]
 800afec:	42bc      	cmp	r4, r7
 800afee:	d000      	beq.n	800aff2 <_malloc_r+0x17e>
 800aff0:	e09b      	b.n	800b12a <_malloc_r+0x2b6>
 800aff2:	2403      	movs	r4, #3
 800aff4:	9902      	ldr	r1, [sp, #8]
 800aff6:	3708      	adds	r7, #8
 800aff8:	3101      	adds	r1, #1
 800affa:	9102      	str	r1, [sp, #8]
 800affc:	4221      	tst	r1, r4
 800affe:	d1f4      	bne.n	800afea <_malloc_r+0x176>
 800b000:	2103      	movs	r1, #3
 800b002:	420b      	tst	r3, r1
 800b004:	d000      	beq.n	800b008 <_malloc_r+0x194>
 800b006:	e0b7      	b.n	800b178 <_malloc_r+0x304>
 800b008:	6843      	ldr	r3, [r0, #4]
 800b00a:	4393      	bics	r3, r2
 800b00c:	6043      	str	r3, [r0, #4]
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	0052      	lsls	r2, r2, #1
 800b012:	6859      	ldr	r1, [r3, #4]
 800b014:	4291      	cmp	r1, r2
 800b016:	d302      	bcc.n	800b01e <_malloc_r+0x1aa>
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d000      	beq.n	800b01e <_malloc_r+0x1aa>
 800b01c:	e0bb      	b.n	800b196 <_malloc_r+0x322>
 800b01e:	2203      	movs	r2, #3
 800b020:	6883      	ldr	r3, [r0, #8]
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4393      	bics	r3, r2
 800b028:	9303      	str	r3, [sp, #12]
 800b02a:	42ab      	cmp	r3, r5
 800b02c:	d303      	bcc.n	800b036 <_malloc_r+0x1c2>
 800b02e:	1b59      	subs	r1, r3, r5
 800b030:	290f      	cmp	r1, #15
 800b032:	dd00      	ble.n	800b036 <_malloc_r+0x1c2>
 800b034:	e123      	b.n	800b27e <_malloc_r+0x40a>
 800b036:	9b02      	ldr	r3, [sp, #8]
 800b038:	9a03      	ldr	r2, [sp, #12]
 800b03a:	2008      	movs	r0, #8
 800b03c:	189e      	adds	r6, r3, r2
 800b03e:	4b5a      	ldr	r3, [pc, #360]	; (800b1a8 <_malloc_r+0x334>)
 800b040:	681f      	ldr	r7, [r3, #0]
 800b042:	f001 fa71 	bl	800c528 <sysconf>
 800b046:	4b59      	ldr	r3, [pc, #356]	; (800b1ac <_malloc_r+0x338>)
 800b048:	3710      	adds	r7, #16
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	197f      	adds	r7, r7, r5
 800b04e:	9004      	str	r0, [sp, #16]
 800b050:	3301      	adds	r3, #1
 800b052:	d003      	beq.n	800b05c <_malloc_r+0x1e8>
 800b054:	1e7b      	subs	r3, r7, #1
 800b056:	181b      	adds	r3, r3, r0
 800b058:	4247      	negs	r7, r0
 800b05a:	401f      	ands	r7, r3
 800b05c:	0039      	movs	r1, r7
 800b05e:	9801      	ldr	r0, [sp, #4]
 800b060:	f001 fa0e 	bl	800c480 <_sbrk_r>
 800b064:	0004      	movs	r4, r0
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d100      	bne.n	800b06c <_malloc_r+0x1f8>
 800b06a:	e0de      	b.n	800b22a <_malloc_r+0x3b6>
 800b06c:	4286      	cmp	r6, r0
 800b06e:	d904      	bls.n	800b07a <_malloc_r+0x206>
 800b070:	4b4a      	ldr	r3, [pc, #296]	; (800b19c <_malloc_r+0x328>)
 800b072:	9a02      	ldr	r2, [sp, #8]
 800b074:	429a      	cmp	r2, r3
 800b076:	d000      	beq.n	800b07a <_malloc_r+0x206>
 800b078:	e0d7      	b.n	800b22a <_malloc_r+0x3b6>
 800b07a:	4a4d      	ldr	r2, [pc, #308]	; (800b1b0 <_malloc_r+0x33c>)
 800b07c:	6813      	ldr	r3, [r2, #0]
 800b07e:	18fb      	adds	r3, r7, r3
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	9a04      	ldr	r2, [sp, #16]
 800b084:	3a01      	subs	r2, #1
 800b086:	42a6      	cmp	r6, r4
 800b088:	d000      	beq.n	800b08c <_malloc_r+0x218>
 800b08a:	e097      	b.n	800b1bc <_malloc_r+0x348>
 800b08c:	4216      	tst	r6, r2
 800b08e:	d000      	beq.n	800b092 <_malloc_r+0x21e>
 800b090:	e094      	b.n	800b1bc <_malloc_r+0x348>
 800b092:	4b42      	ldr	r3, [pc, #264]	; (800b19c <_malloc_r+0x328>)
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	19df      	adds	r7, r3, r7
 800b09a:	2301      	movs	r3, #1
 800b09c:	433b      	orrs	r3, r7
 800b09e:	6053      	str	r3, [r2, #4]
 800b0a0:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <_malloc_r+0x33c>)
 800b0a2:	4a44      	ldr	r2, [pc, #272]	; (800b1b4 <_malloc_r+0x340>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6811      	ldr	r1, [r2, #0]
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	d900      	bls.n	800b0ae <_malloc_r+0x23a>
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	4a42      	ldr	r2, [pc, #264]	; (800b1b8 <_malloc_r+0x344>)
 800b0b0:	6811      	ldr	r1, [r2, #0]
 800b0b2:	428b      	cmp	r3, r1
 800b0b4:	d800      	bhi.n	800b0b8 <_malloc_r+0x244>
 800b0b6:	e0b8      	b.n	800b22a <_malloc_r+0x3b6>
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	e0b6      	b.n	800b22a <_malloc_r+0x3b6>
 800b0bc:	0a50      	lsrs	r0, r2, #9
 800b0be:	2804      	cmp	r0, #4
 800b0c0:	d811      	bhi.n	800b0e6 <_malloc_r+0x272>
 800b0c2:	0991      	lsrs	r1, r2, #6
 800b0c4:	3138      	adds	r1, #56	; 0x38
 800b0c6:	00cf      	lsls	r7, r1, #3
 800b0c8:	19bf      	adds	r7, r7, r6
 800b0ca:	68b8      	ldr	r0, [r7, #8]
 800b0cc:	4287      	cmp	r7, r0
 800b0ce:	d125      	bne.n	800b11c <_malloc_r+0x2a8>
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	1089      	asrs	r1, r1, #2
 800b0d4:	408a      	lsls	r2, r1
 800b0d6:	4661      	mov	r1, ip
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	6072      	str	r2, [r6, #4]
 800b0dc:	60e7      	str	r7, [r4, #12]
 800b0de:	60a0      	str	r0, [r4, #8]
 800b0e0:	60bc      	str	r4, [r7, #8]
 800b0e2:	60c4      	str	r4, [r0, #12]
 800b0e4:	e76b      	b.n	800afbe <_malloc_r+0x14a>
 800b0e6:	2814      	cmp	r0, #20
 800b0e8:	d802      	bhi.n	800b0f0 <_malloc_r+0x27c>
 800b0ea:	0001      	movs	r1, r0
 800b0ec:	315b      	adds	r1, #91	; 0x5b
 800b0ee:	e7ea      	b.n	800b0c6 <_malloc_r+0x252>
 800b0f0:	2854      	cmp	r0, #84	; 0x54
 800b0f2:	d802      	bhi.n	800b0fa <_malloc_r+0x286>
 800b0f4:	0b11      	lsrs	r1, r2, #12
 800b0f6:	316e      	adds	r1, #110	; 0x6e
 800b0f8:	e7e5      	b.n	800b0c6 <_malloc_r+0x252>
 800b0fa:	21aa      	movs	r1, #170	; 0xaa
 800b0fc:	0049      	lsls	r1, r1, #1
 800b0fe:	4288      	cmp	r0, r1
 800b100:	d802      	bhi.n	800b108 <_malloc_r+0x294>
 800b102:	0bd1      	lsrs	r1, r2, #15
 800b104:	3177      	adds	r1, #119	; 0x77
 800b106:	e7de      	b.n	800b0c6 <_malloc_r+0x252>
 800b108:	4f26      	ldr	r7, [pc, #152]	; (800b1a4 <_malloc_r+0x330>)
 800b10a:	217e      	movs	r1, #126	; 0x7e
 800b10c:	42b8      	cmp	r0, r7
 800b10e:	d8da      	bhi.n	800b0c6 <_malloc_r+0x252>
 800b110:	0c91      	lsrs	r1, r2, #18
 800b112:	317c      	adds	r1, #124	; 0x7c
 800b114:	e7d7      	b.n	800b0c6 <_malloc_r+0x252>
 800b116:	6880      	ldr	r0, [r0, #8]
 800b118:	4287      	cmp	r7, r0
 800b11a:	d004      	beq.n	800b126 <_malloc_r+0x2b2>
 800b11c:	2603      	movs	r6, #3
 800b11e:	6841      	ldr	r1, [r0, #4]
 800b120:	43b1      	bics	r1, r6
 800b122:	4291      	cmp	r1, r2
 800b124:	d8f7      	bhi.n	800b116 <_malloc_r+0x2a2>
 800b126:	68c7      	ldr	r7, [r0, #12]
 800b128:	e7d8      	b.n	800b0dc <_malloc_r+0x268>
 800b12a:	2603      	movs	r6, #3
 800b12c:	6861      	ldr	r1, [r4, #4]
 800b12e:	43b1      	bics	r1, r6
 800b130:	9103      	str	r1, [sp, #12]
 800b132:	68e6      	ldr	r6, [r4, #12]
 800b134:	1b49      	subs	r1, r1, r5
 800b136:	290f      	cmp	r1, #15
 800b138:	dd10      	ble.n	800b15c <_malloc_r+0x2e8>
 800b13a:	2201      	movs	r2, #1
 800b13c:	1963      	adds	r3, r4, r5
 800b13e:	4315      	orrs	r5, r2
 800b140:	6065      	str	r5, [r4, #4]
 800b142:	68a5      	ldr	r5, [r4, #8]
 800b144:	430a      	orrs	r2, r1
 800b146:	60ee      	str	r6, [r5, #12]
 800b148:	60b5      	str	r5, [r6, #8]
 800b14a:	6143      	str	r3, [r0, #20]
 800b14c:	6103      	str	r3, [r0, #16]
 800b14e:	4814      	ldr	r0, [pc, #80]	; (800b1a0 <_malloc_r+0x32c>)
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	60d8      	str	r0, [r3, #12]
 800b154:	6098      	str	r0, [r3, #8]
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	50e1      	str	r1, [r4, r3]
 800b15a:	e6eb      	b.n	800af34 <_malloc_r+0xc0>
 800b15c:	2900      	cmp	r1, #0
 800b15e:	db09      	blt.n	800b174 <_malloc_r+0x300>
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	18e1      	adds	r1, r4, r3
 800b164:	2301      	movs	r3, #1
 800b166:	684a      	ldr	r2, [r1, #4]
 800b168:	4313      	orrs	r3, r2
 800b16a:	604b      	str	r3, [r1, #4]
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	60de      	str	r6, [r3, #12]
 800b170:	60b3      	str	r3, [r6, #8]
 800b172:	e6df      	b.n	800af34 <_malloc_r+0xc0>
 800b174:	0034      	movs	r4, r6
 800b176:	e739      	b.n	800afec <_malloc_r+0x178>
 800b178:	2108      	movs	r1, #8
 800b17a:	4249      	negs	r1, r1
 800b17c:	448c      	add	ip, r1
 800b17e:	4661      	mov	r1, ip
 800b180:	6889      	ldr	r1, [r1, #8]
 800b182:	3b01      	subs	r3, #1
 800b184:	4561      	cmp	r1, ip
 800b186:	d100      	bne.n	800b18a <_malloc_r+0x316>
 800b188:	e73a      	b.n	800b000 <_malloc_r+0x18c>
 800b18a:	e740      	b.n	800b00e <_malloc_r+0x19a>
 800b18c:	3304      	adds	r3, #4
 800b18e:	0052      	lsls	r2, r2, #1
 800b190:	420a      	tst	r2, r1
 800b192:	d0fb      	beq.n	800b18c <_malloc_r+0x318>
 800b194:	e724      	b.n	800afe0 <_malloc_r+0x16c>
 800b196:	9b02      	ldr	r3, [sp, #8]
 800b198:	e7fa      	b.n	800b190 <_malloc_r+0x31c>
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	2000002c 	.word	0x2000002c
 800b1a0:	20000034 	.word	0x20000034
 800b1a4:	00000554 	.word	0x00000554
 800b1a8:	20000bf4 	.word	0x20000bf4
 800b1ac:	20000434 	.word	0x20000434
 800b1b0:	20000bc4 	.word	0x20000bc4
 800b1b4:	20000bec 	.word	0x20000bec
 800b1b8:	20000bf0 	.word	0x20000bf0
 800b1bc:	4934      	ldr	r1, [pc, #208]	; (800b290 <_malloc_r+0x41c>)
 800b1be:	6808      	ldr	r0, [r1, #0]
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d140      	bne.n	800b246 <_malloc_r+0x3d2>
 800b1c4:	600c      	str	r4, [r1, #0]
 800b1c6:	2107      	movs	r1, #7
 800b1c8:	0026      	movs	r6, r4
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	400e      	ands	r6, r1
 800b1ce:	420c      	tst	r4, r1
 800b1d0:	d002      	beq.n	800b1d8 <_malloc_r+0x364>
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	1b9b      	subs	r3, r3, r6
 800b1d6:	18e4      	adds	r4, r4, r3
 800b1d8:	19e1      	adds	r1, r4, r7
 800b1da:	9105      	str	r1, [sp, #20]
 800b1dc:	9f05      	ldr	r7, [sp, #20]
 800b1de:	9904      	ldr	r1, [sp, #16]
 800b1e0:	4017      	ands	r7, r2
 800b1e2:	18cb      	adds	r3, r1, r3
 800b1e4:	1bdf      	subs	r7, r3, r7
 800b1e6:	4017      	ands	r7, r2
 800b1e8:	0039      	movs	r1, r7
 800b1ea:	9801      	ldr	r0, [sp, #4]
 800b1ec:	f001 f948 	bl	800c480 <_sbrk_r>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d107      	bne.n	800b204 <_malloc_r+0x390>
 800b1f4:	1e37      	subs	r7, r6, #0
 800b1f6:	9805      	ldr	r0, [sp, #20]
 800b1f8:	d004      	beq.n	800b204 <_malloc_r+0x390>
 800b1fa:	0030      	movs	r0, r6
 800b1fc:	2700      	movs	r7, #0
 800b1fe:	9b05      	ldr	r3, [sp, #20]
 800b200:	3808      	subs	r0, #8
 800b202:	1818      	adds	r0, r3, r0
 800b204:	4a23      	ldr	r2, [pc, #140]	; (800b294 <_malloc_r+0x420>)
 800b206:	1b00      	subs	r0, r0, r4
 800b208:	6813      	ldr	r3, [r2, #0]
 800b20a:	19c0      	adds	r0, r0, r7
 800b20c:	19db      	adds	r3, r3, r7
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	2201      	movs	r2, #1
 800b212:	4b21      	ldr	r3, [pc, #132]	; (800b298 <_malloc_r+0x424>)
 800b214:	9902      	ldr	r1, [sp, #8]
 800b216:	4310      	orrs	r0, r2
 800b218:	609c      	str	r4, [r3, #8]
 800b21a:	6060      	str	r0, [r4, #4]
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d100      	bne.n	800b222 <_malloc_r+0x3ae>
 800b220:	e73e      	b.n	800b0a0 <_malloc_r+0x22c>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	2b0f      	cmp	r3, #15
 800b226:	d813      	bhi.n	800b250 <_malloc_r+0x3dc>
 800b228:	6062      	str	r2, [r4, #4]
 800b22a:	2203      	movs	r2, #3
 800b22c:	4b1a      	ldr	r3, [pc, #104]	; (800b298 <_malloc_r+0x424>)
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	4393      	bics	r3, r2
 800b234:	1b59      	subs	r1, r3, r5
 800b236:	42ab      	cmp	r3, r5
 800b238:	d301      	bcc.n	800b23e <_malloc_r+0x3ca>
 800b23a:	290f      	cmp	r1, #15
 800b23c:	dc1f      	bgt.n	800b27e <_malloc_r+0x40a>
 800b23e:	9801      	ldr	r0, [sp, #4]
 800b240:	f000 f834 	bl	800b2ac <__malloc_unlock>
 800b244:	e623      	b.n	800ae8e <_malloc_r+0x1a>
 800b246:	4913      	ldr	r1, [pc, #76]	; (800b294 <_malloc_r+0x420>)
 800b248:	1ba6      	subs	r6, r4, r6
 800b24a:	18f6      	adds	r6, r6, r3
 800b24c:	600e      	str	r6, [r1, #0]
 800b24e:	e7ba      	b.n	800b1c6 <_malloc_r+0x352>
 800b250:	2107      	movs	r1, #7
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	3b0c      	subs	r3, #12
 800b256:	438b      	bics	r3, r1
 800b258:	9902      	ldr	r1, [sp, #8]
 800b25a:	6849      	ldr	r1, [r1, #4]
 800b25c:	400a      	ands	r2, r1
 800b25e:	9902      	ldr	r1, [sp, #8]
 800b260:	431a      	orrs	r2, r3
 800b262:	604a      	str	r2, [r1, #4]
 800b264:	18ca      	adds	r2, r1, r3
 800b266:	2105      	movs	r1, #5
 800b268:	6051      	str	r1, [r2, #4]
 800b26a:	6091      	str	r1, [r2, #8]
 800b26c:	2b0f      	cmp	r3, #15
 800b26e:	d800      	bhi.n	800b272 <_malloc_r+0x3fe>
 800b270:	e716      	b.n	800b0a0 <_malloc_r+0x22c>
 800b272:	9902      	ldr	r1, [sp, #8]
 800b274:	9801      	ldr	r0, [sp, #4]
 800b276:	3108      	adds	r1, #8
 800b278:	f001 f9dc 	bl	800c634 <_free_r>
 800b27c:	e710      	b.n	800b0a0 <_malloc_r+0x22c>
 800b27e:	2201      	movs	r2, #1
 800b280:	0013      	movs	r3, r2
 800b282:	4805      	ldr	r0, [pc, #20]	; (800b298 <_malloc_r+0x424>)
 800b284:	432b      	orrs	r3, r5
 800b286:	6884      	ldr	r4, [r0, #8]
 800b288:	6063      	str	r3, [r4, #4]
 800b28a:	1963      	adds	r3, r4, r5
 800b28c:	6083      	str	r3, [r0, #8]
 800b28e:	e623      	b.n	800aed8 <_malloc_r+0x64>
 800b290:	20000434 	.word	0x20000434
 800b294:	20000bc4 	.word	0x20000bc4
 800b298:	2000002c 	.word	0x2000002c

0800b29c <__malloc_lock>:
 800b29c:	b510      	push	{r4, lr}
 800b29e:	4802      	ldr	r0, [pc, #8]	; (800b2a8 <__malloc_lock+0xc>)
 800b2a0:	f001 f940 	bl	800c524 <__retarget_lock_acquire_recursive>
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	20000d39 	.word	0x20000d39

0800b2ac <__malloc_unlock>:
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	4802      	ldr	r0, [pc, #8]	; (800b2b8 <__malloc_unlock+0xc>)
 800b2b0:	f001 f939 	bl	800c526 <__retarget_lock_release_recursive>
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	46c0      	nop			; (mov r8, r8)
 800b2b8:	20000d39 	.word	0x20000d39

0800b2bc <sulp>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	0016      	movs	r6, r2
 800b2c0:	000d      	movs	r5, r1
 800b2c2:	f002 f90d 	bl	800d4e0 <__ulp>
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	d00d      	beq.n	800b2e6 <sulp+0x2a>
 800b2ca:	236b      	movs	r3, #107	; 0x6b
 800b2cc:	006a      	lsls	r2, r5, #1
 800b2ce:	0d52      	lsrs	r2, r2, #21
 800b2d0:	1a9b      	subs	r3, r3, r2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dd07      	ble.n	800b2e6 <sulp+0x2a>
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	4a03      	ldr	r2, [pc, #12]	; (800b2e8 <sulp+0x2c>)
 800b2da:	051b      	lsls	r3, r3, #20
 800b2dc:	189d      	adds	r5, r3, r2
 800b2de:	002b      	movs	r3, r5
 800b2e0:	0022      	movs	r2, r4
 800b2e2:	f7f6 f9c3 	bl	800166c <__aeabi_dmul>
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	3ff00000 	.word	0x3ff00000

0800b2ec <_strtod_l>:
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	b0a1      	sub	sp, #132	; 0x84
 800b2f0:	9219      	str	r2, [sp, #100]	; 0x64
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2600      	movs	r6, #0
 800b2f6:	2700      	movs	r7, #0
 800b2f8:	9004      	str	r0, [sp, #16]
 800b2fa:	9107      	str	r1, [sp, #28]
 800b2fc:	921c      	str	r2, [sp, #112]	; 0x70
 800b2fe:	911b      	str	r1, [sp, #108]	; 0x6c
 800b300:	780a      	ldrb	r2, [r1, #0]
 800b302:	2a2b      	cmp	r2, #43	; 0x2b
 800b304:	d055      	beq.n	800b3b2 <_strtod_l+0xc6>
 800b306:	d841      	bhi.n	800b38c <_strtod_l+0xa0>
 800b308:	2a0d      	cmp	r2, #13
 800b30a:	d83b      	bhi.n	800b384 <_strtod_l+0x98>
 800b30c:	2a08      	cmp	r2, #8
 800b30e:	d83b      	bhi.n	800b388 <_strtod_l+0x9c>
 800b310:	2a00      	cmp	r2, #0
 800b312:	d044      	beq.n	800b39e <_strtod_l+0xb2>
 800b314:	2200      	movs	r2, #0
 800b316:	920f      	str	r2, [sp, #60]	; 0x3c
 800b318:	2100      	movs	r1, #0
 800b31a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b31c:	9109      	str	r1, [sp, #36]	; 0x24
 800b31e:	782a      	ldrb	r2, [r5, #0]
 800b320:	2a30      	cmp	r2, #48	; 0x30
 800b322:	d000      	beq.n	800b326 <_strtod_l+0x3a>
 800b324:	e085      	b.n	800b432 <_strtod_l+0x146>
 800b326:	786a      	ldrb	r2, [r5, #1]
 800b328:	3120      	adds	r1, #32
 800b32a:	438a      	bics	r2, r1
 800b32c:	2a58      	cmp	r2, #88	; 0x58
 800b32e:	d000      	beq.n	800b332 <_strtod_l+0x46>
 800b330:	e075      	b.n	800b41e <_strtod_l+0x132>
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b336:	4a97      	ldr	r2, [pc, #604]	; (800b594 <_strtod_l+0x2a8>)
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	ab1c      	add	r3, sp, #112	; 0x70
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	9804      	ldr	r0, [sp, #16]
 800b340:	ab1d      	add	r3, sp, #116	; 0x74
 800b342:	a91b      	add	r1, sp, #108	; 0x6c
 800b344:	f001 fa92 	bl	800c86c <__gethex>
 800b348:	230f      	movs	r3, #15
 800b34a:	0002      	movs	r2, r0
 800b34c:	401a      	ands	r2, r3
 800b34e:	0004      	movs	r4, r0
 800b350:	9205      	str	r2, [sp, #20]
 800b352:	4218      	tst	r0, r3
 800b354:	d005      	beq.n	800b362 <_strtod_l+0x76>
 800b356:	2a06      	cmp	r2, #6
 800b358:	d12d      	bne.n	800b3b6 <_strtod_l+0xca>
 800b35a:	1c6b      	adds	r3, r5, #1
 800b35c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b35e:	2300      	movs	r3, #0
 800b360:	930f      	str	r3, [sp, #60]	; 0x3c
 800b362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <_strtod_l+0x82>
 800b368:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b36a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d01b      	beq.n	800b3ac <_strtod_l+0xc0>
 800b374:	2380      	movs	r3, #128	; 0x80
 800b376:	0032      	movs	r2, r6
 800b378:	061b      	lsls	r3, r3, #24
 800b37a:	18fb      	adds	r3, r7, r3
 800b37c:	0010      	movs	r0, r2
 800b37e:	0019      	movs	r1, r3
 800b380:	b021      	add	sp, #132	; 0x84
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b384:	2a20      	cmp	r2, #32
 800b386:	d1c5      	bne.n	800b314 <_strtod_l+0x28>
 800b388:	3101      	adds	r1, #1
 800b38a:	e7b8      	b.n	800b2fe <_strtod_l+0x12>
 800b38c:	2a2d      	cmp	r2, #45	; 0x2d
 800b38e:	d1c1      	bne.n	800b314 <_strtod_l+0x28>
 800b390:	3a2c      	subs	r2, #44	; 0x2c
 800b392:	920f      	str	r2, [sp, #60]	; 0x3c
 800b394:	1c4a      	adds	r2, r1, #1
 800b396:	921b      	str	r2, [sp, #108]	; 0x6c
 800b398:	784a      	ldrb	r2, [r1, #1]
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	d1bc      	bne.n	800b318 <_strtod_l+0x2c>
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1dd      	bne.n	800b368 <_strtod_l+0x7c>
 800b3ac:	0032      	movs	r2, r6
 800b3ae:	003b      	movs	r3, r7
 800b3b0:	e7e4      	b.n	800b37c <_strtod_l+0x90>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	e7ed      	b.n	800b392 <_strtod_l+0xa6>
 800b3b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d007      	beq.n	800b3cc <_strtod_l+0xe0>
 800b3bc:	2135      	movs	r1, #53	; 0x35
 800b3be:	a81e      	add	r0, sp, #120	; 0x78
 800b3c0:	f002 f97f 	bl	800d6c2 <__copybits>
 800b3c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3c6:	9804      	ldr	r0, [sp, #16]
 800b3c8:	f001 fd7c 	bl	800cec4 <_Bfree>
 800b3cc:	9805      	ldr	r0, [sp, #20]
 800b3ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3d0:	3801      	subs	r0, #1
 800b3d2:	2804      	cmp	r0, #4
 800b3d4:	d806      	bhi.n	800b3e4 <_strtod_l+0xf8>
 800b3d6:	f7f4 fe9d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b3da:	0312      	.short	0x0312
 800b3dc:	1e1c      	.short	0x1e1c
 800b3de:	12          	.byte	0x12
 800b3df:	00          	.byte	0x00
 800b3e0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b3e2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b3e4:	05e4      	lsls	r4, r4, #23
 800b3e6:	d502      	bpl.n	800b3ee <_strtod_l+0x102>
 800b3e8:	2380      	movs	r3, #128	; 0x80
 800b3ea:	061b      	lsls	r3, r3, #24
 800b3ec:	431f      	orrs	r7, r3
 800b3ee:	4b6a      	ldr	r3, [pc, #424]	; (800b598 <_strtod_l+0x2ac>)
 800b3f0:	423b      	tst	r3, r7
 800b3f2:	d1b6      	bne.n	800b362 <_strtod_l+0x76>
 800b3f4:	f001 f86a 	bl	800c4cc <__errno>
 800b3f8:	2322      	movs	r3, #34	; 0x22
 800b3fa:	6003      	str	r3, [r0, #0]
 800b3fc:	e7b1      	b.n	800b362 <_strtod_l+0x76>
 800b3fe:	4967      	ldr	r1, [pc, #412]	; (800b59c <_strtod_l+0x2b0>)
 800b400:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b402:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b404:	400a      	ands	r2, r1
 800b406:	4966      	ldr	r1, [pc, #408]	; (800b5a0 <_strtod_l+0x2b4>)
 800b408:	185b      	adds	r3, r3, r1
 800b40a:	051b      	lsls	r3, r3, #20
 800b40c:	431a      	orrs	r2, r3
 800b40e:	0017      	movs	r7, r2
 800b410:	e7e8      	b.n	800b3e4 <_strtod_l+0xf8>
 800b412:	4f61      	ldr	r7, [pc, #388]	; (800b598 <_strtod_l+0x2ac>)
 800b414:	e7e6      	b.n	800b3e4 <_strtod_l+0xf8>
 800b416:	2601      	movs	r6, #1
 800b418:	4f62      	ldr	r7, [pc, #392]	; (800b5a4 <_strtod_l+0x2b8>)
 800b41a:	4276      	negs	r6, r6
 800b41c:	e7e2      	b.n	800b3e4 <_strtod_l+0xf8>
 800b41e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	921b      	str	r2, [sp, #108]	; 0x6c
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b30      	cmp	r3, #48	; 0x30
 800b428:	d0f9      	beq.n	800b41e <_strtod_l+0x132>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d099      	beq.n	800b362 <_strtod_l+0x76>
 800b42e:	2301      	movs	r3, #1
 800b430:	9309      	str	r3, [sp, #36]	; 0x24
 800b432:	2500      	movs	r5, #0
 800b434:	220a      	movs	r2, #10
 800b436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b438:	950d      	str	r5, [sp, #52]	; 0x34
 800b43a:	9310      	str	r3, [sp, #64]	; 0x40
 800b43c:	9508      	str	r5, [sp, #32]
 800b43e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b440:	7804      	ldrb	r4, [r0, #0]
 800b442:	0023      	movs	r3, r4
 800b444:	3b30      	subs	r3, #48	; 0x30
 800b446:	b2d9      	uxtb	r1, r3
 800b448:	2909      	cmp	r1, #9
 800b44a:	d927      	bls.n	800b49c <_strtod_l+0x1b0>
 800b44c:	2201      	movs	r2, #1
 800b44e:	4956      	ldr	r1, [pc, #344]	; (800b5a8 <_strtod_l+0x2bc>)
 800b450:	f000 ff98 	bl	800c384 <strncmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	d031      	beq.n	800b4bc <_strtod_l+0x1d0>
 800b458:	2000      	movs	r0, #0
 800b45a:	0023      	movs	r3, r4
 800b45c:	4684      	mov	ip, r0
 800b45e:	9a08      	ldr	r2, [sp, #32]
 800b460:	900c      	str	r0, [sp, #48]	; 0x30
 800b462:	9205      	str	r2, [sp, #20]
 800b464:	2220      	movs	r2, #32
 800b466:	0019      	movs	r1, r3
 800b468:	4391      	bics	r1, r2
 800b46a:	000a      	movs	r2, r1
 800b46c:	2100      	movs	r1, #0
 800b46e:	9106      	str	r1, [sp, #24]
 800b470:	2a45      	cmp	r2, #69	; 0x45
 800b472:	d000      	beq.n	800b476 <_strtod_l+0x18a>
 800b474:	e0c2      	b.n	800b5fc <_strtod_l+0x310>
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47a:	4303      	orrs	r3, r0
 800b47c:	4313      	orrs	r3, r2
 800b47e:	428b      	cmp	r3, r1
 800b480:	d08d      	beq.n	800b39e <_strtod_l+0xb2>
 800b482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	3301      	adds	r3, #1
 800b488:	931b      	str	r3, [sp, #108]	; 0x6c
 800b48a:	9b07      	ldr	r3, [sp, #28]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b2b      	cmp	r3, #43	; 0x2b
 800b490:	d071      	beq.n	800b576 <_strtod_l+0x28a>
 800b492:	000c      	movs	r4, r1
 800b494:	2b2d      	cmp	r3, #45	; 0x2d
 800b496:	d174      	bne.n	800b582 <_strtod_l+0x296>
 800b498:	2401      	movs	r4, #1
 800b49a:	e06d      	b.n	800b578 <_strtod_l+0x28c>
 800b49c:	9908      	ldr	r1, [sp, #32]
 800b49e:	2908      	cmp	r1, #8
 800b4a0:	dc09      	bgt.n	800b4b6 <_strtod_l+0x1ca>
 800b4a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4a4:	4351      	muls	r1, r2
 800b4a6:	185b      	adds	r3, r3, r1
 800b4a8:	930d      	str	r3, [sp, #52]	; 0x34
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b4b4:	e7c3      	b.n	800b43e <_strtod_l+0x152>
 800b4b6:	4355      	muls	r5, r2
 800b4b8:	195d      	adds	r5, r3, r5
 800b4ba:	e7f6      	b.n	800b4aa <_strtod_l+0x1be>
 800b4bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4c2:	9a08      	ldr	r2, [sp, #32]
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	d03a      	beq.n	800b540 <_strtod_l+0x254>
 800b4ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b4cc:	9205      	str	r2, [sp, #20]
 800b4ce:	001a      	movs	r2, r3
 800b4d0:	3a30      	subs	r2, #48	; 0x30
 800b4d2:	2a09      	cmp	r2, #9
 800b4d4:	d912      	bls.n	800b4fc <_strtod_l+0x210>
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4694      	mov	ip, r2
 800b4da:	e7c3      	b.n	800b464 <_strtod_l+0x178>
 800b4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4de:	3001      	adds	r0, #1
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4e4:	785b      	ldrb	r3, [r3, #1]
 800b4e6:	2b30      	cmp	r3, #48	; 0x30
 800b4e8:	d0f8      	beq.n	800b4dc <_strtod_l+0x1f0>
 800b4ea:	001a      	movs	r2, r3
 800b4ec:	3a31      	subs	r2, #49	; 0x31
 800b4ee:	2a08      	cmp	r2, #8
 800b4f0:	d83c      	bhi.n	800b56c <_strtod_l+0x280>
 800b4f2:	900c      	str	r0, [sp, #48]	; 0x30
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b4f8:	9005      	str	r0, [sp, #20]
 800b4fa:	9210      	str	r2, [sp, #64]	; 0x40
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	1c41      	adds	r1, r0, #1
 800b500:	3a30      	subs	r2, #48	; 0x30
 800b502:	2b30      	cmp	r3, #48	; 0x30
 800b504:	d016      	beq.n	800b534 <_strtod_l+0x248>
 800b506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b508:	185b      	adds	r3, r3, r1
 800b50a:	930c      	str	r3, [sp, #48]	; 0x30
 800b50c:	9b05      	ldr	r3, [sp, #20]
 800b50e:	210a      	movs	r1, #10
 800b510:	469c      	mov	ip, r3
 800b512:	4484      	add	ip, r0
 800b514:	4563      	cmp	r3, ip
 800b516:	d115      	bne.n	800b544 <_strtod_l+0x258>
 800b518:	9905      	ldr	r1, [sp, #20]
 800b51a:	9b05      	ldr	r3, [sp, #20]
 800b51c:	3101      	adds	r1, #1
 800b51e:	1809      	adds	r1, r1, r0
 800b520:	181b      	adds	r3, r3, r0
 800b522:	9105      	str	r1, [sp, #20]
 800b524:	2b08      	cmp	r3, #8
 800b526:	dc19      	bgt.n	800b55c <_strtod_l+0x270>
 800b528:	230a      	movs	r3, #10
 800b52a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b52c:	434b      	muls	r3, r1
 800b52e:	2100      	movs	r1, #0
 800b530:	18d3      	adds	r3, r2, r3
 800b532:	930d      	str	r3, [sp, #52]	; 0x34
 800b534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b536:	0008      	movs	r0, r1
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	e7c6      	b.n	800b4ce <_strtod_l+0x1e2>
 800b540:	9808      	ldr	r0, [sp, #32]
 800b542:	e7d0      	b.n	800b4e6 <_strtod_l+0x1fa>
 800b544:	1c5c      	adds	r4, r3, #1
 800b546:	2b08      	cmp	r3, #8
 800b548:	dc04      	bgt.n	800b554 <_strtod_l+0x268>
 800b54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54c:	434b      	muls	r3, r1
 800b54e:	930d      	str	r3, [sp, #52]	; 0x34
 800b550:	0023      	movs	r3, r4
 800b552:	e7df      	b.n	800b514 <_strtod_l+0x228>
 800b554:	2c10      	cmp	r4, #16
 800b556:	dcfb      	bgt.n	800b550 <_strtod_l+0x264>
 800b558:	434d      	muls	r5, r1
 800b55a:	e7f9      	b.n	800b550 <_strtod_l+0x264>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	2100      	movs	r1, #0
 800b560:	2b10      	cmp	r3, #16
 800b562:	dce7      	bgt.n	800b534 <_strtod_l+0x248>
 800b564:	230a      	movs	r3, #10
 800b566:	435d      	muls	r5, r3
 800b568:	1955      	adds	r5, r2, r5
 800b56a:	e7e3      	b.n	800b534 <_strtod_l+0x248>
 800b56c:	2200      	movs	r2, #0
 800b56e:	920c      	str	r2, [sp, #48]	; 0x30
 800b570:	9205      	str	r2, [sp, #20]
 800b572:	3201      	adds	r2, #1
 800b574:	e7b0      	b.n	800b4d8 <_strtod_l+0x1ec>
 800b576:	2400      	movs	r4, #0
 800b578:	9b07      	ldr	r3, [sp, #28]
 800b57a:	3302      	adds	r3, #2
 800b57c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	789b      	ldrb	r3, [r3, #2]
 800b582:	001a      	movs	r2, r3
 800b584:	3a30      	subs	r2, #48	; 0x30
 800b586:	2a09      	cmp	r2, #9
 800b588:	d914      	bls.n	800b5b4 <_strtod_l+0x2c8>
 800b58a:	9a07      	ldr	r2, [sp, #28]
 800b58c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b58e:	2200      	movs	r2, #0
 800b590:	e033      	b.n	800b5fa <_strtod_l+0x30e>
 800b592:	46c0      	nop			; (mov r8, r8)
 800b594:	080148a4 	.word	0x080148a4
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	ffefffff 	.word	0xffefffff
 800b5a0:	00000433 	.word	0x00000433
 800b5a4:	7fffffff 	.word	0x7fffffff
 800b5a8:	080148a0 	.word	0x080148a0
 800b5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	2b30      	cmp	r3, #48	; 0x30
 800b5b6:	d0f9      	beq.n	800b5ac <_strtod_l+0x2c0>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	9206      	str	r2, [sp, #24]
 800b5bc:	001a      	movs	r2, r3
 800b5be:	3a31      	subs	r2, #49	; 0x31
 800b5c0:	2a08      	cmp	r2, #8
 800b5c2:	d81b      	bhi.n	800b5fc <_strtod_l+0x310>
 800b5c4:	3b30      	subs	r3, #48	; 0x30
 800b5c6:	930e      	str	r3, [sp, #56]	; 0x38
 800b5c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	911b      	str	r1, [sp, #108]	; 0x6c
 800b5d2:	785b      	ldrb	r3, [r3, #1]
 800b5d4:	001a      	movs	r2, r3
 800b5d6:	3a30      	subs	r2, #48	; 0x30
 800b5d8:	2a09      	cmp	r2, #9
 800b5da:	d93a      	bls.n	800b652 <_strtod_l+0x366>
 800b5dc:	9a06      	ldr	r2, [sp, #24]
 800b5de:	1a8a      	subs	r2, r1, r2
 800b5e0:	49b2      	ldr	r1, [pc, #712]	; (800b8ac <_strtod_l+0x5c0>)
 800b5e2:	9106      	str	r1, [sp, #24]
 800b5e4:	2a08      	cmp	r2, #8
 800b5e6:	dc04      	bgt.n	800b5f2 <_strtod_l+0x306>
 800b5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5ea:	9206      	str	r2, [sp, #24]
 800b5ec:	428a      	cmp	r2, r1
 800b5ee:	dd00      	ble.n	800b5f2 <_strtod_l+0x306>
 800b5f0:	9106      	str	r1, [sp, #24]
 800b5f2:	2c00      	cmp	r4, #0
 800b5f4:	d002      	beq.n	800b5fc <_strtod_l+0x310>
 800b5f6:	9a06      	ldr	r2, [sp, #24]
 800b5f8:	4252      	negs	r2, r2
 800b5fa:	9206      	str	r2, [sp, #24]
 800b5fc:	9a05      	ldr	r2, [sp, #20]
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	d14d      	bne.n	800b69e <_strtod_l+0x3b2>
 800b602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b604:	4310      	orrs	r0, r2
 800b606:	d000      	beq.n	800b60a <_strtod_l+0x31e>
 800b608:	e6ab      	b.n	800b362 <_strtod_l+0x76>
 800b60a:	4662      	mov	r2, ip
 800b60c:	2a00      	cmp	r2, #0
 800b60e:	d000      	beq.n	800b612 <_strtod_l+0x326>
 800b610:	e6c5      	b.n	800b39e <_strtod_l+0xb2>
 800b612:	2b69      	cmp	r3, #105	; 0x69
 800b614:	d027      	beq.n	800b666 <_strtod_l+0x37a>
 800b616:	dc23      	bgt.n	800b660 <_strtod_l+0x374>
 800b618:	2b49      	cmp	r3, #73	; 0x49
 800b61a:	d024      	beq.n	800b666 <_strtod_l+0x37a>
 800b61c:	2b4e      	cmp	r3, #78	; 0x4e
 800b61e:	d000      	beq.n	800b622 <_strtod_l+0x336>
 800b620:	e6bd      	b.n	800b39e <_strtod_l+0xb2>
 800b622:	49a3      	ldr	r1, [pc, #652]	; (800b8b0 <_strtod_l+0x5c4>)
 800b624:	a81b      	add	r0, sp, #108	; 0x6c
 800b626:	f001 fb57 	bl	800ccd8 <__match>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d100      	bne.n	800b630 <_strtod_l+0x344>
 800b62e:	e6b6      	b.n	800b39e <_strtod_l+0xb2>
 800b630:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b28      	cmp	r3, #40	; 0x28
 800b636:	d12c      	bne.n	800b692 <_strtod_l+0x3a6>
 800b638:	499e      	ldr	r1, [pc, #632]	; (800b8b4 <_strtod_l+0x5c8>)
 800b63a:	aa1e      	add	r2, sp, #120	; 0x78
 800b63c:	a81b      	add	r0, sp, #108	; 0x6c
 800b63e:	f001 fb5f 	bl	800cd00 <__hexnan>
 800b642:	2805      	cmp	r0, #5
 800b644:	d125      	bne.n	800b692 <_strtod_l+0x3a6>
 800b646:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b648:	4a9b      	ldr	r2, [pc, #620]	; (800b8b8 <_strtod_l+0x5cc>)
 800b64a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b64c:	431a      	orrs	r2, r3
 800b64e:	0017      	movs	r7, r2
 800b650:	e687      	b.n	800b362 <_strtod_l+0x76>
 800b652:	220a      	movs	r2, #10
 800b654:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b656:	434a      	muls	r2, r1
 800b658:	18d2      	adds	r2, r2, r3
 800b65a:	3a30      	subs	r2, #48	; 0x30
 800b65c:	920e      	str	r2, [sp, #56]	; 0x38
 800b65e:	e7b5      	b.n	800b5cc <_strtod_l+0x2e0>
 800b660:	2b6e      	cmp	r3, #110	; 0x6e
 800b662:	d0de      	beq.n	800b622 <_strtod_l+0x336>
 800b664:	e69b      	b.n	800b39e <_strtod_l+0xb2>
 800b666:	4995      	ldr	r1, [pc, #596]	; (800b8bc <_strtod_l+0x5d0>)
 800b668:	a81b      	add	r0, sp, #108	; 0x6c
 800b66a:	f001 fb35 	bl	800ccd8 <__match>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d100      	bne.n	800b674 <_strtod_l+0x388>
 800b672:	e694      	b.n	800b39e <_strtod_l+0xb2>
 800b674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b676:	4992      	ldr	r1, [pc, #584]	; (800b8c0 <_strtod_l+0x5d4>)
 800b678:	3b01      	subs	r3, #1
 800b67a:	a81b      	add	r0, sp, #108	; 0x6c
 800b67c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b67e:	f001 fb2b 	bl	800ccd8 <__match>
 800b682:	2800      	cmp	r0, #0
 800b684:	d102      	bne.n	800b68c <_strtod_l+0x3a0>
 800b686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b688:	3301      	adds	r3, #1
 800b68a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b68c:	2600      	movs	r6, #0
 800b68e:	4f8a      	ldr	r7, [pc, #552]	; (800b8b8 <_strtod_l+0x5cc>)
 800b690:	e667      	b.n	800b362 <_strtod_l+0x76>
 800b692:	488c      	ldr	r0, [pc, #560]	; (800b8c4 <_strtod_l+0x5d8>)
 800b694:	f000 ff5c 	bl	800c550 <nan>
 800b698:	0006      	movs	r6, r0
 800b69a:	000f      	movs	r7, r1
 800b69c:	e661      	b.n	800b362 <_strtod_l+0x76>
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6a2:	1a9b      	subs	r3, r3, r2
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	9b08      	ldr	r3, [sp, #32]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <_strtod_l+0x3c4>
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	9308      	str	r3, [sp, #32]
 800b6b0:	9c05      	ldr	r4, [sp, #20]
 800b6b2:	2c10      	cmp	r4, #16
 800b6b4:	dd00      	ble.n	800b6b8 <_strtod_l+0x3cc>
 800b6b6:	2410      	movs	r4, #16
 800b6b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b6ba:	f7f6 fe9f 	bl	80023fc <__aeabi_ui2d>
 800b6be:	9b05      	ldr	r3, [sp, #20]
 800b6c0:	0006      	movs	r6, r0
 800b6c2:	000f      	movs	r7, r1
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	dd15      	ble.n	800b6f4 <_strtod_l+0x408>
 800b6c8:	0022      	movs	r2, r4
 800b6ca:	4b7f      	ldr	r3, [pc, #508]	; (800b8c8 <_strtod_l+0x5dc>)
 800b6cc:	3a09      	subs	r2, #9
 800b6ce:	00d2      	lsls	r2, r2, #3
 800b6d0:	189b      	adds	r3, r3, r2
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f7f5 ffc9 	bl	800166c <__aeabi_dmul>
 800b6da:	0006      	movs	r6, r0
 800b6dc:	0028      	movs	r0, r5
 800b6de:	000f      	movs	r7, r1
 800b6e0:	f7f6 fe8c 	bl	80023fc <__aeabi_ui2d>
 800b6e4:	0002      	movs	r2, r0
 800b6e6:	000b      	movs	r3, r1
 800b6e8:	0030      	movs	r0, r6
 800b6ea:	0039      	movs	r1, r7
 800b6ec:	f7f5 f864 	bl	80007b8 <__aeabi_dadd>
 800b6f0:	0006      	movs	r6, r0
 800b6f2:	000f      	movs	r7, r1
 800b6f4:	9b05      	ldr	r3, [sp, #20]
 800b6f6:	2b0f      	cmp	r3, #15
 800b6f8:	dc39      	bgt.n	800b76e <_strtod_l+0x482>
 800b6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d100      	bne.n	800b702 <_strtod_l+0x416>
 800b700:	e62f      	b.n	800b362 <_strtod_l+0x76>
 800b702:	dd24      	ble.n	800b74e <_strtod_l+0x462>
 800b704:	2b16      	cmp	r3, #22
 800b706:	dc09      	bgt.n	800b71c <_strtod_l+0x430>
 800b708:	496f      	ldr	r1, [pc, #444]	; (800b8c8 <_strtod_l+0x5dc>)
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	18c9      	adds	r1, r1, r3
 800b70e:	0032      	movs	r2, r6
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	6849      	ldr	r1, [r1, #4]
 800b714:	003b      	movs	r3, r7
 800b716:	f7f5 ffa9 	bl	800166c <__aeabi_dmul>
 800b71a:	e7bd      	b.n	800b698 <_strtod_l+0x3ac>
 800b71c:	2325      	movs	r3, #37	; 0x25
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	1a9b      	subs	r3, r3, r2
 800b722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b724:	4293      	cmp	r3, r2
 800b726:	db22      	blt.n	800b76e <_strtod_l+0x482>
 800b728:	240f      	movs	r4, #15
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	4d66      	ldr	r5, [pc, #408]	; (800b8c8 <_strtod_l+0x5dc>)
 800b72e:	1ae4      	subs	r4, r4, r3
 800b730:	00e1      	lsls	r1, r4, #3
 800b732:	1869      	adds	r1, r5, r1
 800b734:	0032      	movs	r2, r6
 800b736:	6808      	ldr	r0, [r1, #0]
 800b738:	6849      	ldr	r1, [r1, #4]
 800b73a:	003b      	movs	r3, r7
 800b73c:	f7f5 ff96 	bl	800166c <__aeabi_dmul>
 800b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b742:	1b1c      	subs	r4, r3, r4
 800b744:	00e4      	lsls	r4, r4, #3
 800b746:	192d      	adds	r5, r5, r4
 800b748:	682a      	ldr	r2, [r5, #0]
 800b74a:	686b      	ldr	r3, [r5, #4]
 800b74c:	e7e3      	b.n	800b716 <_strtod_l+0x42a>
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	3316      	adds	r3, #22
 800b752:	db0c      	blt.n	800b76e <_strtod_l+0x482>
 800b754:	9906      	ldr	r1, [sp, #24]
 800b756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b758:	4b5b      	ldr	r3, [pc, #364]	; (800b8c8 <_strtod_l+0x5dc>)
 800b75a:	1a52      	subs	r2, r2, r1
 800b75c:	00d2      	lsls	r2, r2, #3
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	0030      	movs	r0, r6
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	0039      	movs	r1, r7
 800b768:	f7f5 fb86 	bl	8000e78 <__aeabi_ddiv>
 800b76c:	e794      	b.n	800b698 <_strtod_l+0x3ac>
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	1b1c      	subs	r4, r3, r4
 800b772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b774:	18e4      	adds	r4, r4, r3
 800b776:	2c00      	cmp	r4, #0
 800b778:	dd72      	ble.n	800b860 <_strtod_l+0x574>
 800b77a:	220f      	movs	r2, #15
 800b77c:	0023      	movs	r3, r4
 800b77e:	4013      	ands	r3, r2
 800b780:	4214      	tst	r4, r2
 800b782:	d00a      	beq.n	800b79a <_strtod_l+0x4ae>
 800b784:	4950      	ldr	r1, [pc, #320]	; (800b8c8 <_strtod_l+0x5dc>)
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	18c9      	adds	r1, r1, r3
 800b78a:	0032      	movs	r2, r6
 800b78c:	6808      	ldr	r0, [r1, #0]
 800b78e:	6849      	ldr	r1, [r1, #4]
 800b790:	003b      	movs	r3, r7
 800b792:	f7f5 ff6b 	bl	800166c <__aeabi_dmul>
 800b796:	0006      	movs	r6, r0
 800b798:	000f      	movs	r7, r1
 800b79a:	230f      	movs	r3, #15
 800b79c:	439c      	bics	r4, r3
 800b79e:	d04a      	beq.n	800b836 <_strtod_l+0x54a>
 800b7a0:	3326      	adds	r3, #38	; 0x26
 800b7a2:	33ff      	adds	r3, #255	; 0xff
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	dd22      	ble.n	800b7ee <_strtod_l+0x502>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b7b0:	9308      	str	r3, [sp, #32]
 800b7b2:	2322      	movs	r3, #34	; 0x22
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	9a04      	ldr	r2, [sp, #16]
 800b7b8:	4f3f      	ldr	r7, [pc, #252]	; (800b8b8 <_strtod_l+0x5cc>)
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7be:	42b3      	cmp	r3, r6
 800b7c0:	d100      	bne.n	800b7c4 <_strtod_l+0x4d8>
 800b7c2:	e5ce      	b.n	800b362 <_strtod_l+0x76>
 800b7c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7c6:	9804      	ldr	r0, [sp, #16]
 800b7c8:	f001 fb7c 	bl	800cec4 <_Bfree>
 800b7cc:	9908      	ldr	r1, [sp, #32]
 800b7ce:	9804      	ldr	r0, [sp, #16]
 800b7d0:	f001 fb78 	bl	800cec4 <_Bfree>
 800b7d4:	9906      	ldr	r1, [sp, #24]
 800b7d6:	9804      	ldr	r0, [sp, #16]
 800b7d8:	f001 fb74 	bl	800cec4 <_Bfree>
 800b7dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7de:	9804      	ldr	r0, [sp, #16]
 800b7e0:	f001 fb70 	bl	800cec4 <_Bfree>
 800b7e4:	9905      	ldr	r1, [sp, #20]
 800b7e6:	9804      	ldr	r0, [sp, #16]
 800b7e8:	f001 fb6c 	bl	800cec4 <_Bfree>
 800b7ec:	e5b9      	b.n	800b362 <_strtod_l+0x76>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	0030      	movs	r0, r6
 800b7f2:	0039      	movs	r1, r7
 800b7f4:	4d35      	ldr	r5, [pc, #212]	; (800b8cc <_strtod_l+0x5e0>)
 800b7f6:	1124      	asrs	r4, r4, #4
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	2c01      	cmp	r4, #1
 800b7fc:	dc1e      	bgt.n	800b83c <_strtod_l+0x550>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <_strtod_l+0x51a>
 800b802:	0006      	movs	r6, r0
 800b804:	000f      	movs	r7, r1
 800b806:	4b32      	ldr	r3, [pc, #200]	; (800b8d0 <_strtod_l+0x5e4>)
 800b808:	9a07      	ldr	r2, [sp, #28]
 800b80a:	18ff      	adds	r7, r7, r3
 800b80c:	4b2f      	ldr	r3, [pc, #188]	; (800b8cc <_strtod_l+0x5e0>)
 800b80e:	00d2      	lsls	r2, r2, #3
 800b810:	189d      	adds	r5, r3, r2
 800b812:	6828      	ldr	r0, [r5, #0]
 800b814:	6869      	ldr	r1, [r5, #4]
 800b816:	0032      	movs	r2, r6
 800b818:	003b      	movs	r3, r7
 800b81a:	f7f5 ff27 	bl	800166c <__aeabi_dmul>
 800b81e:	4b26      	ldr	r3, [pc, #152]	; (800b8b8 <_strtod_l+0x5cc>)
 800b820:	4a2c      	ldr	r2, [pc, #176]	; (800b8d4 <_strtod_l+0x5e8>)
 800b822:	0006      	movs	r6, r0
 800b824:	400b      	ands	r3, r1
 800b826:	4293      	cmp	r3, r2
 800b828:	d8be      	bhi.n	800b7a8 <_strtod_l+0x4bc>
 800b82a:	4a2b      	ldr	r2, [pc, #172]	; (800b8d8 <_strtod_l+0x5ec>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d913      	bls.n	800b858 <_strtod_l+0x56c>
 800b830:	2601      	movs	r6, #1
 800b832:	4f2a      	ldr	r7, [pc, #168]	; (800b8dc <_strtod_l+0x5f0>)
 800b834:	4276      	negs	r6, r6
 800b836:	2300      	movs	r3, #0
 800b838:	9307      	str	r3, [sp, #28]
 800b83a:	e088      	b.n	800b94e <_strtod_l+0x662>
 800b83c:	2201      	movs	r2, #1
 800b83e:	4214      	tst	r4, r2
 800b840:	d004      	beq.n	800b84c <_strtod_l+0x560>
 800b842:	682a      	ldr	r2, [r5, #0]
 800b844:	686b      	ldr	r3, [r5, #4]
 800b846:	f7f5 ff11 	bl	800166c <__aeabi_dmul>
 800b84a:	2301      	movs	r3, #1
 800b84c:	9a07      	ldr	r2, [sp, #28]
 800b84e:	1064      	asrs	r4, r4, #1
 800b850:	3201      	adds	r2, #1
 800b852:	9207      	str	r2, [sp, #28]
 800b854:	3508      	adds	r5, #8
 800b856:	e7d0      	b.n	800b7fa <_strtod_l+0x50e>
 800b858:	23d4      	movs	r3, #212	; 0xd4
 800b85a:	049b      	lsls	r3, r3, #18
 800b85c:	18cf      	adds	r7, r1, r3
 800b85e:	e7ea      	b.n	800b836 <_strtod_l+0x54a>
 800b860:	2c00      	cmp	r4, #0
 800b862:	d0e8      	beq.n	800b836 <_strtod_l+0x54a>
 800b864:	4264      	negs	r4, r4
 800b866:	230f      	movs	r3, #15
 800b868:	0022      	movs	r2, r4
 800b86a:	401a      	ands	r2, r3
 800b86c:	421c      	tst	r4, r3
 800b86e:	d00a      	beq.n	800b886 <_strtod_l+0x59a>
 800b870:	4b15      	ldr	r3, [pc, #84]	; (800b8c8 <_strtod_l+0x5dc>)
 800b872:	00d2      	lsls	r2, r2, #3
 800b874:	189b      	adds	r3, r3, r2
 800b876:	0030      	movs	r0, r6
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	0039      	movs	r1, r7
 800b87e:	f7f5 fafb 	bl	8000e78 <__aeabi_ddiv>
 800b882:	0006      	movs	r6, r0
 800b884:	000f      	movs	r7, r1
 800b886:	1124      	asrs	r4, r4, #4
 800b888:	d0d5      	beq.n	800b836 <_strtod_l+0x54a>
 800b88a:	2c1f      	cmp	r4, #31
 800b88c:	dd28      	ble.n	800b8e0 <_strtod_l+0x5f4>
 800b88e:	2300      	movs	r3, #0
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	9306      	str	r3, [sp, #24]
 800b894:	930d      	str	r3, [sp, #52]	; 0x34
 800b896:	9308      	str	r3, [sp, #32]
 800b898:	2322      	movs	r3, #34	; 0x22
 800b89a:	9a04      	ldr	r2, [sp, #16]
 800b89c:	2600      	movs	r6, #0
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8a2:	2700      	movs	r7, #0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d18d      	bne.n	800b7c4 <_strtod_l+0x4d8>
 800b8a8:	e55b      	b.n	800b362 <_strtod_l+0x76>
 800b8aa:	46c0      	nop			; (mov r8, r8)
 800b8ac:	00004e1f 	.word	0x00004e1f
 800b8b0:	08014bd9 	.word	0x08014bd9
 800b8b4:	080148b8 	.word	0x080148b8
 800b8b8:	7ff00000 	.word	0x7ff00000
 800b8bc:	08014bd1 	.word	0x08014bd1
 800b8c0:	08014c87 	.word	0x08014c87
 800b8c4:	08014c83 	.word	0x08014c83
 800b8c8:	08014af8 	.word	0x08014af8
 800b8cc:	08014ad0 	.word	0x08014ad0
 800b8d0:	fcb00000 	.word	0xfcb00000
 800b8d4:	7ca00000 	.word	0x7ca00000
 800b8d8:	7c900000 	.word	0x7c900000
 800b8dc:	7fefffff 	.word	0x7fefffff
 800b8e0:	2310      	movs	r3, #16
 800b8e2:	0022      	movs	r2, r4
 800b8e4:	401a      	ands	r2, r3
 800b8e6:	9207      	str	r2, [sp, #28]
 800b8e8:	421c      	tst	r4, r3
 800b8ea:	d001      	beq.n	800b8f0 <_strtod_l+0x604>
 800b8ec:	335a      	adds	r3, #90	; 0x5a
 800b8ee:	9307      	str	r3, [sp, #28]
 800b8f0:	0030      	movs	r0, r6
 800b8f2:	0039      	movs	r1, r7
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4dc4      	ldr	r5, [pc, #784]	; (800bc08 <_strtod_l+0x91c>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	4214      	tst	r4, r2
 800b8fc:	d004      	beq.n	800b908 <_strtod_l+0x61c>
 800b8fe:	682a      	ldr	r2, [r5, #0]
 800b900:	686b      	ldr	r3, [r5, #4]
 800b902:	f7f5 feb3 	bl	800166c <__aeabi_dmul>
 800b906:	2301      	movs	r3, #1
 800b908:	1064      	asrs	r4, r4, #1
 800b90a:	3508      	adds	r5, #8
 800b90c:	2c00      	cmp	r4, #0
 800b90e:	d1f3      	bne.n	800b8f8 <_strtod_l+0x60c>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <_strtod_l+0x62c>
 800b914:	0006      	movs	r6, r0
 800b916:	000f      	movs	r7, r1
 800b918:	9b07      	ldr	r3, [sp, #28]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00f      	beq.n	800b93e <_strtod_l+0x652>
 800b91e:	236b      	movs	r3, #107	; 0x6b
 800b920:	007a      	lsls	r2, r7, #1
 800b922:	0d52      	lsrs	r2, r2, #21
 800b924:	0039      	movs	r1, r7
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dd08      	ble.n	800b93e <_strtod_l+0x652>
 800b92c:	2b1f      	cmp	r3, #31
 800b92e:	dc00      	bgt.n	800b932 <_strtod_l+0x646>
 800b930:	e121      	b.n	800bb76 <_strtod_l+0x88a>
 800b932:	2600      	movs	r6, #0
 800b934:	2b34      	cmp	r3, #52	; 0x34
 800b936:	dc00      	bgt.n	800b93a <_strtod_l+0x64e>
 800b938:	e116      	b.n	800bb68 <_strtod_l+0x87c>
 800b93a:	27dc      	movs	r7, #220	; 0xdc
 800b93c:	04bf      	lsls	r7, r7, #18
 800b93e:	2200      	movs	r2, #0
 800b940:	2300      	movs	r3, #0
 800b942:	0030      	movs	r0, r6
 800b944:	0039      	movs	r1, r7
 800b946:	f7f4 fd7f 	bl	8000448 <__aeabi_dcmpeq>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d19f      	bne.n	800b88e <_strtod_l+0x5a2>
 800b94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b950:	9a08      	ldr	r2, [sp, #32]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b956:	9b05      	ldr	r3, [sp, #20]
 800b958:	9804      	ldr	r0, [sp, #16]
 800b95a:	f001 fb01 	bl	800cf60 <__s2b>
 800b95e:	900d      	str	r0, [sp, #52]	; 0x34
 800b960:	2800      	cmp	r0, #0
 800b962:	d100      	bne.n	800b966 <_strtod_l+0x67a>
 800b964:	e720      	b.n	800b7a8 <_strtod_l+0x4bc>
 800b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b968:	9906      	ldr	r1, [sp, #24]
 800b96a:	17da      	asrs	r2, r3, #31
 800b96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b96e:	1a5b      	subs	r3, r3, r1
 800b970:	401a      	ands	r2, r3
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	9215      	str	r2, [sp, #84]	; 0x54
 800b976:	43db      	mvns	r3, r3
 800b978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b97a:	17db      	asrs	r3, r3, #31
 800b97c:	401a      	ands	r2, r3
 800b97e:	2300      	movs	r3, #0
 800b980:	9218      	str	r2, [sp, #96]	; 0x60
 800b982:	9305      	str	r3, [sp, #20]
 800b984:	9306      	str	r3, [sp, #24]
 800b986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b988:	9804      	ldr	r0, [sp, #16]
 800b98a:	6859      	ldr	r1, [r3, #4]
 800b98c:	f001 fa72 	bl	800ce74 <_Balloc>
 800b990:	9008      	str	r0, [sp, #32]
 800b992:	2800      	cmp	r0, #0
 800b994:	d100      	bne.n	800b998 <_strtod_l+0x6ac>
 800b996:	e70c      	b.n	800b7b2 <_strtod_l+0x4c6>
 800b998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b99a:	300c      	adds	r0, #12
 800b99c:	0019      	movs	r1, r3
 800b99e:	691a      	ldr	r2, [r3, #16]
 800b9a0:	310c      	adds	r1, #12
 800b9a2:	3202      	adds	r2, #2
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	f000 fdca 	bl	800c53e <memcpy>
 800b9aa:	ab1e      	add	r3, sp, #120	; 0x78
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	0032      	movs	r2, r6
 800b9b4:	003b      	movs	r3, r7
 800b9b6:	9804      	ldr	r0, [sp, #16]
 800b9b8:	9610      	str	r6, [sp, #64]	; 0x40
 800b9ba:	9711      	str	r7, [sp, #68]	; 0x44
 800b9bc:	f001 fdf8 	bl	800d5b0 <__d2b>
 800b9c0:	901c      	str	r0, [sp, #112]	; 0x70
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d100      	bne.n	800b9c8 <_strtod_l+0x6dc>
 800b9c6:	e6f4      	b.n	800b7b2 <_strtod_l+0x4c6>
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	9804      	ldr	r0, [sp, #16]
 800b9cc:	f001 fb5c 	bl	800d088 <__i2b>
 800b9d0:	9006      	str	r0, [sp, #24]
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d100      	bne.n	800b9d8 <_strtod_l+0x6ec>
 800b9d6:	e6ec      	b.n	800b7b2 <_strtod_l+0x4c6>
 800b9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b9de:	1ad4      	subs	r4, r2, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	db01      	blt.n	800b9e8 <_strtod_l+0x6fc>
 800b9e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b9e6:	195d      	adds	r5, r3, r5
 800b9e8:	9907      	ldr	r1, [sp, #28]
 800b9ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b9ec:	1a5b      	subs	r3, r3, r1
 800b9ee:	2136      	movs	r1, #54	; 0x36
 800b9f0:	189b      	adds	r3, r3, r2
 800b9f2:	1a8a      	subs	r2, r1, r2
 800b9f4:	4985      	ldr	r1, [pc, #532]	; (800bc0c <_strtod_l+0x920>)
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	468c      	mov	ip, r1
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	9114      	str	r1, [sp, #80]	; 0x50
 800ba00:	9012      	str	r0, [sp, #72]	; 0x48
 800ba02:	4563      	cmp	r3, ip
 800ba04:	da07      	bge.n	800ba16 <_strtod_l+0x72a>
 800ba06:	4661      	mov	r1, ip
 800ba08:	1ac9      	subs	r1, r1, r3
 800ba0a:	1a52      	subs	r2, r2, r1
 800ba0c:	291f      	cmp	r1, #31
 800ba0e:	dd00      	ble.n	800ba12 <_strtod_l+0x726>
 800ba10:	e0b6      	b.n	800bb80 <_strtod_l+0x894>
 800ba12:	4088      	lsls	r0, r1
 800ba14:	9012      	str	r0, [sp, #72]	; 0x48
 800ba16:	18ab      	adds	r3, r5, r2
 800ba18:	930c      	str	r3, [sp, #48]	; 0x30
 800ba1a:	18a4      	adds	r4, r4, r2
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba20:	191c      	adds	r4, r3, r4
 800ba22:	002b      	movs	r3, r5
 800ba24:	4295      	cmp	r5, r2
 800ba26:	dd00      	ble.n	800ba2a <_strtod_l+0x73e>
 800ba28:	0013      	movs	r3, r2
 800ba2a:	42a3      	cmp	r3, r4
 800ba2c:	dd00      	ble.n	800ba30 <_strtod_l+0x744>
 800ba2e:	0023      	movs	r3, r4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dd04      	ble.n	800ba3e <_strtod_l+0x752>
 800ba34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba36:	1ae4      	subs	r4, r4, r3
 800ba38:	1ad2      	subs	r2, r2, r3
 800ba3a:	920c      	str	r2, [sp, #48]	; 0x30
 800ba3c:	1aed      	subs	r5, r5, r3
 800ba3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dd17      	ble.n	800ba74 <_strtod_l+0x788>
 800ba44:	001a      	movs	r2, r3
 800ba46:	9906      	ldr	r1, [sp, #24]
 800ba48:	9804      	ldr	r0, [sp, #16]
 800ba4a:	f001 fbe5 	bl	800d218 <__pow5mult>
 800ba4e:	9006      	str	r0, [sp, #24]
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d100      	bne.n	800ba56 <_strtod_l+0x76a>
 800ba54:	e6ad      	b.n	800b7b2 <_strtod_l+0x4c6>
 800ba56:	0001      	movs	r1, r0
 800ba58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba5a:	9804      	ldr	r0, [sp, #16]
 800ba5c:	f001 fb2c 	bl	800d0b8 <__multiply>
 800ba60:	900e      	str	r0, [sp, #56]	; 0x38
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d100      	bne.n	800ba68 <_strtod_l+0x77c>
 800ba66:	e6a4      	b.n	800b7b2 <_strtod_l+0x4c6>
 800ba68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba6a:	9804      	ldr	r0, [sp, #16]
 800ba6c:	f001 fa2a 	bl	800cec4 <_Bfree>
 800ba70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba72:	931c      	str	r3, [sp, #112]	; 0x70
 800ba74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dd00      	ble.n	800ba7c <_strtod_l+0x790>
 800ba7a:	e087      	b.n	800bb8c <_strtod_l+0x8a0>
 800ba7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd08      	ble.n	800ba94 <_strtod_l+0x7a8>
 800ba82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba84:	9908      	ldr	r1, [sp, #32]
 800ba86:	9804      	ldr	r0, [sp, #16]
 800ba88:	f001 fbc6 	bl	800d218 <__pow5mult>
 800ba8c:	9008      	str	r0, [sp, #32]
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d100      	bne.n	800ba94 <_strtod_l+0x7a8>
 800ba92:	e68e      	b.n	800b7b2 <_strtod_l+0x4c6>
 800ba94:	2c00      	cmp	r4, #0
 800ba96:	dd08      	ble.n	800baaa <_strtod_l+0x7be>
 800ba98:	0022      	movs	r2, r4
 800ba9a:	9908      	ldr	r1, [sp, #32]
 800ba9c:	9804      	ldr	r0, [sp, #16]
 800ba9e:	f001 fbfd 	bl	800d29c <__lshift>
 800baa2:	9008      	str	r0, [sp, #32]
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d100      	bne.n	800baaa <_strtod_l+0x7be>
 800baa8:	e683      	b.n	800b7b2 <_strtod_l+0x4c6>
 800baaa:	2d00      	cmp	r5, #0
 800baac:	dd08      	ble.n	800bac0 <_strtod_l+0x7d4>
 800baae:	002a      	movs	r2, r5
 800bab0:	9906      	ldr	r1, [sp, #24]
 800bab2:	9804      	ldr	r0, [sp, #16]
 800bab4:	f001 fbf2 	bl	800d29c <__lshift>
 800bab8:	9006      	str	r0, [sp, #24]
 800baba:	2800      	cmp	r0, #0
 800babc:	d100      	bne.n	800bac0 <_strtod_l+0x7d4>
 800babe:	e678      	b.n	800b7b2 <_strtod_l+0x4c6>
 800bac0:	9a08      	ldr	r2, [sp, #32]
 800bac2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bac4:	9804      	ldr	r0, [sp, #16]
 800bac6:	f001 fc73 	bl	800d3b0 <__mdiff>
 800baca:	9005      	str	r0, [sp, #20]
 800bacc:	2800      	cmp	r0, #0
 800bace:	d100      	bne.n	800bad2 <_strtod_l+0x7e6>
 800bad0:	e66f      	b.n	800b7b2 <_strtod_l+0x4c6>
 800bad2:	2200      	movs	r2, #0
 800bad4:	68c3      	ldr	r3, [r0, #12]
 800bad6:	9906      	ldr	r1, [sp, #24]
 800bad8:	60c2      	str	r2, [r0, #12]
 800bada:	930c      	str	r3, [sp, #48]	; 0x30
 800badc:	f001 fc4c 	bl	800d378 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	da5d      	bge.n	800bba0 <_strtod_l+0x8b4>
 800bae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bae6:	4333      	orrs	r3, r6
 800bae8:	d000      	beq.n	800baec <_strtod_l+0x800>
 800baea:	e088      	b.n	800bbfe <_strtod_l+0x912>
 800baec:	033b      	lsls	r3, r7, #12
 800baee:	d000      	beq.n	800baf2 <_strtod_l+0x806>
 800baf0:	e085      	b.n	800bbfe <_strtod_l+0x912>
 800baf2:	22d6      	movs	r2, #214	; 0xd6
 800baf4:	4b46      	ldr	r3, [pc, #280]	; (800bc10 <_strtod_l+0x924>)
 800baf6:	04d2      	lsls	r2, r2, #19
 800baf8:	403b      	ands	r3, r7
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d97f      	bls.n	800bbfe <_strtod_l+0x912>
 800bafe:	9b05      	ldr	r3, [sp, #20]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d103      	bne.n	800bb0e <_strtod_l+0x822>
 800bb06:	9b05      	ldr	r3, [sp, #20]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	dd77      	ble.n	800bbfe <_strtod_l+0x912>
 800bb0e:	9905      	ldr	r1, [sp, #20]
 800bb10:	2201      	movs	r2, #1
 800bb12:	9804      	ldr	r0, [sp, #16]
 800bb14:	f001 fbc2 	bl	800d29c <__lshift>
 800bb18:	9906      	ldr	r1, [sp, #24]
 800bb1a:	9005      	str	r0, [sp, #20]
 800bb1c:	f001 fc2c 	bl	800d378 <__mcmp>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	dd6c      	ble.n	800bbfe <_strtod_l+0x912>
 800bb24:	9907      	ldr	r1, [sp, #28]
 800bb26:	003b      	movs	r3, r7
 800bb28:	4a39      	ldr	r2, [pc, #228]	; (800bc10 <_strtod_l+0x924>)
 800bb2a:	2900      	cmp	r1, #0
 800bb2c:	d100      	bne.n	800bb30 <_strtod_l+0x844>
 800bb2e:	e094      	b.n	800bc5a <_strtod_l+0x96e>
 800bb30:	0011      	movs	r1, r2
 800bb32:	20d6      	movs	r0, #214	; 0xd6
 800bb34:	4039      	ands	r1, r7
 800bb36:	04c0      	lsls	r0, r0, #19
 800bb38:	4281      	cmp	r1, r0
 800bb3a:	dd00      	ble.n	800bb3e <_strtod_l+0x852>
 800bb3c:	e08d      	b.n	800bc5a <_strtod_l+0x96e>
 800bb3e:	23dc      	movs	r3, #220	; 0xdc
 800bb40:	049b      	lsls	r3, r3, #18
 800bb42:	4299      	cmp	r1, r3
 800bb44:	dc00      	bgt.n	800bb48 <_strtod_l+0x85c>
 800bb46:	e6a7      	b.n	800b898 <_strtod_l+0x5ac>
 800bb48:	0030      	movs	r0, r6
 800bb4a:	0039      	movs	r1, r7
 800bb4c:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <_strtod_l+0x928>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f7f5 fd8c 	bl	800166c <__aeabi_dmul>
 800bb54:	4b2e      	ldr	r3, [pc, #184]	; (800bc10 <_strtod_l+0x924>)
 800bb56:	0006      	movs	r6, r0
 800bb58:	000f      	movs	r7, r1
 800bb5a:	420b      	tst	r3, r1
 800bb5c:	d000      	beq.n	800bb60 <_strtod_l+0x874>
 800bb5e:	e631      	b.n	800b7c4 <_strtod_l+0x4d8>
 800bb60:	2322      	movs	r3, #34	; 0x22
 800bb62:	9a04      	ldr	r2, [sp, #16]
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	e62d      	b.n	800b7c4 <_strtod_l+0x4d8>
 800bb68:	234b      	movs	r3, #75	; 0x4b
 800bb6a:	1a9a      	subs	r2, r3, r2
 800bb6c:	3b4c      	subs	r3, #76	; 0x4c
 800bb6e:	4093      	lsls	r3, r2
 800bb70:	4019      	ands	r1, r3
 800bb72:	000f      	movs	r7, r1
 800bb74:	e6e3      	b.n	800b93e <_strtod_l+0x652>
 800bb76:	2201      	movs	r2, #1
 800bb78:	4252      	negs	r2, r2
 800bb7a:	409a      	lsls	r2, r3
 800bb7c:	4016      	ands	r6, r2
 800bb7e:	e6de      	b.n	800b93e <_strtod_l+0x652>
 800bb80:	4925      	ldr	r1, [pc, #148]	; (800bc18 <_strtod_l+0x92c>)
 800bb82:	1acb      	subs	r3, r1, r3
 800bb84:	0001      	movs	r1, r0
 800bb86:	4099      	lsls	r1, r3
 800bb88:	9114      	str	r1, [sp, #80]	; 0x50
 800bb8a:	e743      	b.n	800ba14 <_strtod_l+0x728>
 800bb8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb90:	9804      	ldr	r0, [sp, #16]
 800bb92:	f001 fb83 	bl	800d29c <__lshift>
 800bb96:	901c      	str	r0, [sp, #112]	; 0x70
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d000      	beq.n	800bb9e <_strtod_l+0x8b2>
 800bb9c:	e76e      	b.n	800ba7c <_strtod_l+0x790>
 800bb9e:	e608      	b.n	800b7b2 <_strtod_l+0x4c6>
 800bba0:	970e      	str	r7, [sp, #56]	; 0x38
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d177      	bne.n	800bc96 <_strtod_l+0x9aa>
 800bba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bba8:	033b      	lsls	r3, r7, #12
 800bbaa:	0b1b      	lsrs	r3, r3, #12
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	d039      	beq.n	800bc24 <_strtod_l+0x938>
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	; (800bc1c <_strtod_l+0x930>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d139      	bne.n	800bc2a <_strtod_l+0x93e>
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	4249      	negs	r1, r1
 800bbbc:	0032      	movs	r2, r6
 800bbbe:	0008      	movs	r0, r1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <_strtod_l+0x8f0>
 800bbc4:	24d4      	movs	r4, #212	; 0xd4
 800bbc6:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <_strtod_l+0x924>)
 800bbc8:	0008      	movs	r0, r1
 800bbca:	403b      	ands	r3, r7
 800bbcc:	04e4      	lsls	r4, r4, #19
 800bbce:	42a3      	cmp	r3, r4
 800bbd0:	d804      	bhi.n	800bbdc <_strtod_l+0x8f0>
 800bbd2:	306c      	adds	r0, #108	; 0x6c
 800bbd4:	0d1b      	lsrs	r3, r3, #20
 800bbd6:	1ac3      	subs	r3, r0, r3
 800bbd8:	4099      	lsls	r1, r3
 800bbda:	0008      	movs	r0, r1
 800bbdc:	4282      	cmp	r2, r0
 800bbde:	d124      	bne.n	800bc2a <_strtod_l+0x93e>
 800bbe0:	4b0f      	ldr	r3, [pc, #60]	; (800bc20 <_strtod_l+0x934>)
 800bbe2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bbe4:	4299      	cmp	r1, r3
 800bbe6:	d102      	bne.n	800bbee <_strtod_l+0x902>
 800bbe8:	3201      	adds	r2, #1
 800bbea:	d100      	bne.n	800bbee <_strtod_l+0x902>
 800bbec:	e5e1      	b.n	800b7b2 <_strtod_l+0x4c6>
 800bbee:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <_strtod_l+0x924>)
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	401a      	ands	r2, r3
 800bbf6:	0013      	movs	r3, r2
 800bbf8:	2280      	movs	r2, #128	; 0x80
 800bbfa:	0352      	lsls	r2, r2, #13
 800bbfc:	189f      	adds	r7, r3, r2
 800bbfe:	9b07      	ldr	r3, [sp, #28]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1a1      	bne.n	800bb48 <_strtod_l+0x85c>
 800bc04:	e5de      	b.n	800b7c4 <_strtod_l+0x4d8>
 800bc06:	46c0      	nop			; (mov r8, r8)
 800bc08:	080148d0 	.word	0x080148d0
 800bc0c:	fffffc02 	.word	0xfffffc02
 800bc10:	7ff00000 	.word	0x7ff00000
 800bc14:	39500000 	.word	0x39500000
 800bc18:	fffffbe2 	.word	0xfffffbe2
 800bc1c:	000fffff 	.word	0x000fffff
 800bc20:	7fefffff 	.word	0x7fefffff
 800bc24:	4333      	orrs	r3, r6
 800bc26:	d100      	bne.n	800bc2a <_strtod_l+0x93e>
 800bc28:	e77c      	b.n	800bb24 <_strtod_l+0x838>
 800bc2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d01d      	beq.n	800bc6c <_strtod_l+0x980>
 800bc30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc34:	4213      	tst	r3, r2
 800bc36:	d0e2      	beq.n	800bbfe <_strtod_l+0x912>
 800bc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc3a:	0030      	movs	r0, r6
 800bc3c:	0039      	movs	r1, r7
 800bc3e:	9a07      	ldr	r2, [sp, #28]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d017      	beq.n	800bc74 <_strtod_l+0x988>
 800bc44:	f7ff fb3a 	bl	800b2bc <sulp>
 800bc48:	0002      	movs	r2, r0
 800bc4a:	000b      	movs	r3, r1
 800bc4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc50:	f7f4 fdb2 	bl	80007b8 <__aeabi_dadd>
 800bc54:	0006      	movs	r6, r0
 800bc56:	000f      	movs	r7, r1
 800bc58:	e7d1      	b.n	800bbfe <_strtod_l+0x912>
 800bc5a:	2601      	movs	r6, #1
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	4a98      	ldr	r2, [pc, #608]	; (800bec0 <_strtod_l+0xbd4>)
 800bc60:	4276      	negs	r6, r6
 800bc62:	189b      	adds	r3, r3, r2
 800bc64:	4a97      	ldr	r2, [pc, #604]	; (800bec4 <_strtod_l+0xbd8>)
 800bc66:	431a      	orrs	r2, r3
 800bc68:	0017      	movs	r7, r2
 800bc6a:	e7c8      	b.n	800bbfe <_strtod_l+0x912>
 800bc6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc6e:	4233      	tst	r3, r6
 800bc70:	d0c5      	beq.n	800bbfe <_strtod_l+0x912>
 800bc72:	e7e1      	b.n	800bc38 <_strtod_l+0x94c>
 800bc74:	f7ff fb22 	bl	800b2bc <sulp>
 800bc78:	0002      	movs	r2, r0
 800bc7a:	000b      	movs	r3, r1
 800bc7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc80:	f7f5 ffb6 	bl	8001bf0 <__aeabi_dsub>
 800bc84:	2200      	movs	r2, #0
 800bc86:	2300      	movs	r3, #0
 800bc88:	0006      	movs	r6, r0
 800bc8a:	000f      	movs	r7, r1
 800bc8c:	f7f4 fbdc 	bl	8000448 <__aeabi_dcmpeq>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d0b4      	beq.n	800bbfe <_strtod_l+0x912>
 800bc94:	e600      	b.n	800b898 <_strtod_l+0x5ac>
 800bc96:	9906      	ldr	r1, [sp, #24]
 800bc98:	9805      	ldr	r0, [sp, #20]
 800bc9a:	f001 fce9 	bl	800d670 <__ratio>
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	2200      	movs	r2, #0
 800bca2:	05db      	lsls	r3, r3, #23
 800bca4:	0004      	movs	r4, r0
 800bca6:	000d      	movs	r5, r1
 800bca8:	f7f4 fbde 	bl	8000468 <__aeabi_dcmple>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d06d      	beq.n	800bd8c <_strtod_l+0xaa0>
 800bcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d000      	beq.n	800bcb8 <_strtod_l+0x9cc>
 800bcb6:	e07e      	b.n	800bdb6 <_strtod_l+0xaca>
 800bcb8:	2e00      	cmp	r6, #0
 800bcba:	d158      	bne.n	800bd6e <_strtod_l+0xa82>
 800bcbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcbe:	031b      	lsls	r3, r3, #12
 800bcc0:	d000      	beq.n	800bcc4 <_strtod_l+0x9d8>
 800bcc2:	e07f      	b.n	800bdc4 <_strtod_l+0xad8>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	0020      	movs	r0, r4
 800bcc8:	0029      	movs	r1, r5
 800bcca:	4b7f      	ldr	r3, [pc, #508]	; (800bec8 <_strtod_l+0xbdc>)
 800bccc:	f7f4 fbc2 	bl	8000454 <__aeabi_dcmplt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d158      	bne.n	800bd86 <_strtod_l+0xa9a>
 800bcd4:	0020      	movs	r0, r4
 800bcd6:	0029      	movs	r1, r5
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4b7c      	ldr	r3, [pc, #496]	; (800becc <_strtod_l+0xbe0>)
 800bcdc:	f7f5 fcc6 	bl	800166c <__aeabi_dmul>
 800bce0:	0004      	movs	r4, r0
 800bce2:	000d      	movs	r5, r1
 800bce4:	2380      	movs	r3, #128	; 0x80
 800bce6:	061b      	lsls	r3, r3, #24
 800bce8:	940a      	str	r4, [sp, #40]	; 0x28
 800bcea:	18eb      	adds	r3, r5, r3
 800bcec:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf2:	9212      	str	r2, [sp, #72]	; 0x48
 800bcf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcf6:	4a76      	ldr	r2, [pc, #472]	; (800bed0 <_strtod_l+0xbe4>)
 800bcf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	9314      	str	r3, [sp, #80]	; 0x50
 800bcfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd00:	4b74      	ldr	r3, [pc, #464]	; (800bed4 <_strtod_l+0xbe8>)
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d000      	beq.n	800bd08 <_strtod_l+0xa1c>
 800bd06:	e091      	b.n	800be2c <_strtod_l+0xb40>
 800bd08:	4a73      	ldr	r2, [pc, #460]	; (800bed8 <_strtod_l+0xbec>)
 800bd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd0c:	4694      	mov	ip, r2
 800bd0e:	4463      	add	r3, ip
 800bd10:	001f      	movs	r7, r3
 800bd12:	0030      	movs	r0, r6
 800bd14:	0019      	movs	r1, r3
 800bd16:	f001 fbe3 	bl	800d4e0 <__ulp>
 800bd1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd1e:	f7f5 fca5 	bl	800166c <__aeabi_dmul>
 800bd22:	0032      	movs	r2, r6
 800bd24:	003b      	movs	r3, r7
 800bd26:	f7f4 fd47 	bl	80007b8 <__aeabi_dadd>
 800bd2a:	4a69      	ldr	r2, [pc, #420]	; (800bed0 <_strtod_l+0xbe4>)
 800bd2c:	4b6b      	ldr	r3, [pc, #428]	; (800bedc <_strtod_l+0xbf0>)
 800bd2e:	0006      	movs	r6, r0
 800bd30:	400a      	ands	r2, r1
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d949      	bls.n	800bdca <_strtod_l+0xade>
 800bd36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd38:	4b69      	ldr	r3, [pc, #420]	; (800bee0 <_strtod_l+0xbf4>)
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d103      	bne.n	800bd46 <_strtod_l+0xa5a>
 800bd3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd40:	3301      	adds	r3, #1
 800bd42:	d100      	bne.n	800bd46 <_strtod_l+0xa5a>
 800bd44:	e535      	b.n	800b7b2 <_strtod_l+0x4c6>
 800bd46:	2601      	movs	r6, #1
 800bd48:	4f65      	ldr	r7, [pc, #404]	; (800bee0 <_strtod_l+0xbf4>)
 800bd4a:	4276      	negs	r6, r6
 800bd4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd4e:	9804      	ldr	r0, [sp, #16]
 800bd50:	f001 f8b8 	bl	800cec4 <_Bfree>
 800bd54:	9908      	ldr	r1, [sp, #32]
 800bd56:	9804      	ldr	r0, [sp, #16]
 800bd58:	f001 f8b4 	bl	800cec4 <_Bfree>
 800bd5c:	9906      	ldr	r1, [sp, #24]
 800bd5e:	9804      	ldr	r0, [sp, #16]
 800bd60:	f001 f8b0 	bl	800cec4 <_Bfree>
 800bd64:	9905      	ldr	r1, [sp, #20]
 800bd66:	9804      	ldr	r0, [sp, #16]
 800bd68:	f001 f8ac 	bl	800cec4 <_Bfree>
 800bd6c:	e60b      	b.n	800b986 <_strtod_l+0x69a>
 800bd6e:	2e01      	cmp	r6, #1
 800bd70:	d103      	bne.n	800bd7a <_strtod_l+0xa8e>
 800bd72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d100      	bne.n	800bd7a <_strtod_l+0xa8e>
 800bd78:	e58e      	b.n	800b898 <_strtod_l+0x5ac>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	4c59      	ldr	r4, [pc, #356]	; (800bee4 <_strtod_l+0xbf8>)
 800bd7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd80:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bd84:	e01c      	b.n	800bdc0 <_strtod_l+0xad4>
 800bd86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bd88:	4d50      	ldr	r5, [pc, #320]	; (800becc <_strtod_l+0xbe0>)
 800bd8a:	e7ab      	b.n	800bce4 <_strtod_l+0x9f8>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	0020      	movs	r0, r4
 800bd90:	0029      	movs	r1, r5
 800bd92:	4b4e      	ldr	r3, [pc, #312]	; (800becc <_strtod_l+0xbe0>)
 800bd94:	f7f5 fc6a 	bl	800166c <__aeabi_dmul>
 800bd98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd9a:	0004      	movs	r4, r0
 800bd9c:	000b      	movs	r3, r1
 800bd9e:	000d      	movs	r5, r1
 800bda0:	2a00      	cmp	r2, #0
 800bda2:	d104      	bne.n	800bdae <_strtod_l+0xac2>
 800bda4:	2280      	movs	r2, #128	; 0x80
 800bda6:	0612      	lsls	r2, r2, #24
 800bda8:	900a      	str	r0, [sp, #40]	; 0x28
 800bdaa:	188b      	adds	r3, r1, r2
 800bdac:	e79e      	b.n	800bcec <_strtod_l+0xa00>
 800bdae:	0002      	movs	r2, r0
 800bdb0:	920a      	str	r2, [sp, #40]	; 0x28
 800bdb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdb4:	e79b      	b.n	800bcee <_strtod_l+0xa02>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4c43      	ldr	r4, [pc, #268]	; (800bec8 <_strtod_l+0xbdc>)
 800bdba:	930a      	str	r3, [sp, #40]	; 0x28
 800bdbc:	940b      	str	r4, [sp, #44]	; 0x2c
 800bdbe:	2400      	movs	r4, #0
 800bdc0:	4d41      	ldr	r5, [pc, #260]	; (800bec8 <_strtod_l+0xbdc>)
 800bdc2:	e794      	b.n	800bcee <_strtod_l+0xa02>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4c47      	ldr	r4, [pc, #284]	; (800bee4 <_strtod_l+0xbf8>)
 800bdc8:	e7f7      	b.n	800bdba <_strtod_l+0xace>
 800bdca:	23d4      	movs	r3, #212	; 0xd4
 800bdcc:	049b      	lsls	r3, r3, #18
 800bdce:	18cf      	adds	r7, r1, r3
 800bdd0:	9b07      	ldr	r3, [sp, #28]
 800bdd2:	970e      	str	r7, [sp, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1b9      	bne.n	800bd4c <_strtod_l+0xa60>
 800bdd8:	4b3d      	ldr	r3, [pc, #244]	; (800bed0 <_strtod_l+0xbe4>)
 800bdda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bddc:	403b      	ands	r3, r7
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d1b4      	bne.n	800bd4c <_strtod_l+0xa60>
 800bde2:	0020      	movs	r0, r4
 800bde4:	0029      	movs	r1, r5
 800bde6:	f7f4 fbc9 	bl	800057c <__aeabi_d2lz>
 800bdea:	f7f4 fc03 	bl	80005f4 <__aeabi_l2d>
 800bdee:	0002      	movs	r2, r0
 800bdf0:	000b      	movs	r3, r1
 800bdf2:	0020      	movs	r0, r4
 800bdf4:	0029      	movs	r1, r5
 800bdf6:	f7f5 fefb 	bl	8001bf0 <__aeabi_dsub>
 800bdfa:	033b      	lsls	r3, r7, #12
 800bdfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdfe:	0b1b      	lsrs	r3, r3, #12
 800be00:	4333      	orrs	r3, r6
 800be02:	4313      	orrs	r3, r2
 800be04:	0004      	movs	r4, r0
 800be06:	000d      	movs	r5, r1
 800be08:	4a37      	ldr	r2, [pc, #220]	; (800bee8 <_strtod_l+0xbfc>)
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d054      	beq.n	800beb8 <_strtod_l+0xbcc>
 800be0e:	4b37      	ldr	r3, [pc, #220]	; (800beec <_strtod_l+0xc00>)
 800be10:	f7f4 fb20 	bl	8000454 <__aeabi_dcmplt>
 800be14:	2800      	cmp	r0, #0
 800be16:	d000      	beq.n	800be1a <_strtod_l+0xb2e>
 800be18:	e4d4      	b.n	800b7c4 <_strtod_l+0x4d8>
 800be1a:	0020      	movs	r0, r4
 800be1c:	0029      	movs	r1, r5
 800be1e:	4a34      	ldr	r2, [pc, #208]	; (800bef0 <_strtod_l+0xc04>)
 800be20:	4b2a      	ldr	r3, [pc, #168]	; (800becc <_strtod_l+0xbe0>)
 800be22:	f7f4 fb2b 	bl	800047c <__aeabi_dcmpgt>
 800be26:	2800      	cmp	r0, #0
 800be28:	d090      	beq.n	800bd4c <_strtod_l+0xa60>
 800be2a:	e4cb      	b.n	800b7c4 <_strtod_l+0x4d8>
 800be2c:	9b07      	ldr	r3, [sp, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d02b      	beq.n	800be8a <_strtod_l+0xb9e>
 800be32:	23d4      	movs	r3, #212	; 0xd4
 800be34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be36:	04db      	lsls	r3, r3, #19
 800be38:	429a      	cmp	r2, r3
 800be3a:	d826      	bhi.n	800be8a <_strtod_l+0xb9e>
 800be3c:	0020      	movs	r0, r4
 800be3e:	0029      	movs	r1, r5
 800be40:	4a2c      	ldr	r2, [pc, #176]	; (800bef4 <_strtod_l+0xc08>)
 800be42:	4b2d      	ldr	r3, [pc, #180]	; (800bef8 <_strtod_l+0xc0c>)
 800be44:	f7f4 fb10 	bl	8000468 <__aeabi_dcmple>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d017      	beq.n	800be7c <_strtod_l+0xb90>
 800be4c:	0020      	movs	r0, r4
 800be4e:	0029      	movs	r1, r5
 800be50:	f7f4 fb76 	bl	8000540 <__aeabi_d2uiz>
 800be54:	2800      	cmp	r0, #0
 800be56:	d100      	bne.n	800be5a <_strtod_l+0xb6e>
 800be58:	3001      	adds	r0, #1
 800be5a:	f7f6 facf 	bl	80023fc <__aeabi_ui2d>
 800be5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be60:	0004      	movs	r4, r0
 800be62:	000b      	movs	r3, r1
 800be64:	000d      	movs	r5, r1
 800be66:	2a00      	cmp	r2, #0
 800be68:	d122      	bne.n	800beb0 <_strtod_l+0xbc4>
 800be6a:	2280      	movs	r2, #128	; 0x80
 800be6c:	0612      	lsls	r2, r2, #24
 800be6e:	188b      	adds	r3, r1, r2
 800be70:	9016      	str	r0, [sp, #88]	; 0x58
 800be72:	9317      	str	r3, [sp, #92]	; 0x5c
 800be74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be78:	9212      	str	r2, [sp, #72]	; 0x48
 800be7a:	9313      	str	r3, [sp, #76]	; 0x4c
 800be7c:	22d6      	movs	r2, #214	; 0xd6
 800be7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be80:	04d2      	lsls	r2, r2, #19
 800be82:	189b      	adds	r3, r3, r2
 800be84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be86:	1a9b      	subs	r3, r3, r2
 800be88:	9313      	str	r3, [sp, #76]	; 0x4c
 800be8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be8e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800be90:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800be92:	f001 fb25 	bl	800d4e0 <__ulp>
 800be96:	0002      	movs	r2, r0
 800be98:	000b      	movs	r3, r1
 800be9a:	0030      	movs	r0, r6
 800be9c:	0039      	movs	r1, r7
 800be9e:	f7f5 fbe5 	bl	800166c <__aeabi_dmul>
 800bea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea6:	f7f4 fc87 	bl	80007b8 <__aeabi_dadd>
 800beaa:	0006      	movs	r6, r0
 800beac:	000f      	movs	r7, r1
 800beae:	e78f      	b.n	800bdd0 <_strtod_l+0xae4>
 800beb0:	0002      	movs	r2, r0
 800beb2:	9216      	str	r2, [sp, #88]	; 0x58
 800beb4:	9317      	str	r3, [sp, #92]	; 0x5c
 800beb6:	e7dd      	b.n	800be74 <_strtod_l+0xb88>
 800beb8:	4b10      	ldr	r3, [pc, #64]	; (800befc <_strtod_l+0xc10>)
 800beba:	f7f4 facb 	bl	8000454 <__aeabi_dcmplt>
 800bebe:	e7b2      	b.n	800be26 <_strtod_l+0xb3a>
 800bec0:	fff00000 	.word	0xfff00000
 800bec4:	000fffff 	.word	0x000fffff
 800bec8:	3ff00000 	.word	0x3ff00000
 800becc:	3fe00000 	.word	0x3fe00000
 800bed0:	7ff00000 	.word	0x7ff00000
 800bed4:	7fe00000 	.word	0x7fe00000
 800bed8:	fcb00000 	.word	0xfcb00000
 800bedc:	7c9fffff 	.word	0x7c9fffff
 800bee0:	7fefffff 	.word	0x7fefffff
 800bee4:	bff00000 	.word	0xbff00000
 800bee8:	94a03595 	.word	0x94a03595
 800beec:	3fdfffff 	.word	0x3fdfffff
 800bef0:	35afe535 	.word	0x35afe535
 800bef4:	ffc00000 	.word	0xffc00000
 800bef8:	41dfffff 	.word	0x41dfffff
 800befc:	3fcfffff 	.word	0x3fcfffff

0800bf00 <_strtod_r>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <_strtod_r+0xc>)
 800bf04:	f7ff f9f2 	bl	800b2ec <_strtod_l>
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	20000448 	.word	0x20000448

0800bf10 <strtod>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4c04      	ldr	r4, [pc, #16]	; (800bf24 <strtod+0x14>)
 800bf14:	000a      	movs	r2, r1
 800bf16:	0001      	movs	r1, r0
 800bf18:	4b03      	ldr	r3, [pc, #12]	; (800bf28 <strtod+0x18>)
 800bf1a:	6820      	ldr	r0, [r4, #0]
 800bf1c:	f7ff f9e6 	bl	800b2ec <_strtod_l>
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	200006d8 	.word	0x200006d8
 800bf28:	20000448 	.word	0x20000448

0800bf2c <_strtol_l.constprop.0>:
 800bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	001e      	movs	r6, r3
 800bf32:	9005      	str	r0, [sp, #20]
 800bf34:	9101      	str	r1, [sp, #4]
 800bf36:	9202      	str	r2, [sp, #8]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d048      	beq.n	800bfce <_strtol_l.constprop.0+0xa2>
 800bf3c:	000b      	movs	r3, r1
 800bf3e:	2e24      	cmp	r6, #36	; 0x24
 800bf40:	d845      	bhi.n	800bfce <_strtol_l.constprop.0+0xa2>
 800bf42:	4a3b      	ldr	r2, [pc, #236]	; (800c030 <_strtol_l.constprop.0+0x104>)
 800bf44:	2108      	movs	r1, #8
 800bf46:	4694      	mov	ip, r2
 800bf48:	001a      	movs	r2, r3
 800bf4a:	4660      	mov	r0, ip
 800bf4c:	7814      	ldrb	r4, [r2, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	5d00      	ldrb	r0, [r0, r4]
 800bf52:	001d      	movs	r5, r3
 800bf54:	0007      	movs	r7, r0
 800bf56:	400f      	ands	r7, r1
 800bf58:	4208      	tst	r0, r1
 800bf5a:	d1f5      	bne.n	800bf48 <_strtol_l.constprop.0+0x1c>
 800bf5c:	2c2d      	cmp	r4, #45	; 0x2d
 800bf5e:	d13d      	bne.n	800bfdc <_strtol_l.constprop.0+0xb0>
 800bf60:	2701      	movs	r7, #1
 800bf62:	781c      	ldrb	r4, [r3, #0]
 800bf64:	1c95      	adds	r5, r2, #2
 800bf66:	2e00      	cmp	r6, #0
 800bf68:	d05e      	beq.n	800c028 <_strtol_l.constprop.0+0xfc>
 800bf6a:	2e10      	cmp	r6, #16
 800bf6c:	d109      	bne.n	800bf82 <_strtol_l.constprop.0+0x56>
 800bf6e:	2c30      	cmp	r4, #48	; 0x30
 800bf70:	d107      	bne.n	800bf82 <_strtol_l.constprop.0+0x56>
 800bf72:	2220      	movs	r2, #32
 800bf74:	782b      	ldrb	r3, [r5, #0]
 800bf76:	4393      	bics	r3, r2
 800bf78:	2b58      	cmp	r3, #88	; 0x58
 800bf7a:	d150      	bne.n	800c01e <_strtol_l.constprop.0+0xf2>
 800bf7c:	2610      	movs	r6, #16
 800bf7e:	786c      	ldrb	r4, [r5, #1]
 800bf80:	3502      	adds	r5, #2
 800bf82:	4b2c      	ldr	r3, [pc, #176]	; (800c034 <_strtol_l.constprop.0+0x108>)
 800bf84:	0031      	movs	r1, r6
 800bf86:	18fb      	adds	r3, r7, r3
 800bf88:	0018      	movs	r0, r3
 800bf8a:	9303      	str	r3, [sp, #12]
 800bf8c:	f7f4 f95c 	bl	8000248 <__aeabi_uidivmod>
 800bf90:	2200      	movs	r2, #0
 800bf92:	9104      	str	r1, [sp, #16]
 800bf94:	2101      	movs	r1, #1
 800bf96:	4684      	mov	ip, r0
 800bf98:	0010      	movs	r0, r2
 800bf9a:	4249      	negs	r1, r1
 800bf9c:	0023      	movs	r3, r4
 800bf9e:	3b30      	subs	r3, #48	; 0x30
 800bfa0:	2b09      	cmp	r3, #9
 800bfa2:	d903      	bls.n	800bfac <_strtol_l.constprop.0+0x80>
 800bfa4:	3b11      	subs	r3, #17
 800bfa6:	2b19      	cmp	r3, #25
 800bfa8:	d81d      	bhi.n	800bfe6 <_strtol_l.constprop.0+0xba>
 800bfaa:	330a      	adds	r3, #10
 800bfac:	429e      	cmp	r6, r3
 800bfae:	dd1e      	ble.n	800bfee <_strtol_l.constprop.0+0xc2>
 800bfb0:	1c54      	adds	r4, r2, #1
 800bfb2:	d009      	beq.n	800bfc8 <_strtol_l.constprop.0+0x9c>
 800bfb4:	000a      	movs	r2, r1
 800bfb6:	4584      	cmp	ip, r0
 800bfb8:	d306      	bcc.n	800bfc8 <_strtol_l.constprop.0+0x9c>
 800bfba:	d102      	bne.n	800bfc2 <_strtol_l.constprop.0+0x96>
 800bfbc:	9c04      	ldr	r4, [sp, #16]
 800bfbe:	429c      	cmp	r4, r3
 800bfc0:	db02      	blt.n	800bfc8 <_strtol_l.constprop.0+0x9c>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4370      	muls	r0, r6
 800bfc6:	1818      	adds	r0, r3, r0
 800bfc8:	782c      	ldrb	r4, [r5, #0]
 800bfca:	3501      	adds	r5, #1
 800bfcc:	e7e6      	b.n	800bf9c <_strtol_l.constprop.0+0x70>
 800bfce:	f000 fa7d 	bl	800c4cc <__errno>
 800bfd2:	2316      	movs	r3, #22
 800bfd4:	6003      	str	r3, [r0, #0]
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	b007      	add	sp, #28
 800bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfdc:	2c2b      	cmp	r4, #43	; 0x2b
 800bfde:	d1c2      	bne.n	800bf66 <_strtol_l.constprop.0+0x3a>
 800bfe0:	781c      	ldrb	r4, [r3, #0]
 800bfe2:	1c95      	adds	r5, r2, #2
 800bfe4:	e7bf      	b.n	800bf66 <_strtol_l.constprop.0+0x3a>
 800bfe6:	0023      	movs	r3, r4
 800bfe8:	3b61      	subs	r3, #97	; 0x61
 800bfea:	2b19      	cmp	r3, #25
 800bfec:	d9dd      	bls.n	800bfaa <_strtol_l.constprop.0+0x7e>
 800bfee:	1c53      	adds	r3, r2, #1
 800bff0:	d109      	bne.n	800c006 <_strtol_l.constprop.0+0xda>
 800bff2:	2322      	movs	r3, #34	; 0x22
 800bff4:	9a05      	ldr	r2, [sp, #20]
 800bff6:	9803      	ldr	r0, [sp, #12]
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	9b02      	ldr	r3, [sp, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0eb      	beq.n	800bfd8 <_strtol_l.constprop.0+0xac>
 800c000:	1e6b      	subs	r3, r5, #1
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	e007      	b.n	800c016 <_strtol_l.constprop.0+0xea>
 800c006:	2f00      	cmp	r7, #0
 800c008:	d000      	beq.n	800c00c <_strtol_l.constprop.0+0xe0>
 800c00a:	4240      	negs	r0, r0
 800c00c:	9b02      	ldr	r3, [sp, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0e2      	beq.n	800bfd8 <_strtol_l.constprop.0+0xac>
 800c012:	2a00      	cmp	r2, #0
 800c014:	d1f4      	bne.n	800c000 <_strtol_l.constprop.0+0xd4>
 800c016:	9b02      	ldr	r3, [sp, #8]
 800c018:	9a01      	ldr	r2, [sp, #4]
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	e7dc      	b.n	800bfd8 <_strtol_l.constprop.0+0xac>
 800c01e:	2430      	movs	r4, #48	; 0x30
 800c020:	2e00      	cmp	r6, #0
 800c022:	d1ae      	bne.n	800bf82 <_strtol_l.constprop.0+0x56>
 800c024:	3608      	adds	r6, #8
 800c026:	e7ac      	b.n	800bf82 <_strtol_l.constprop.0+0x56>
 800c028:	2c30      	cmp	r4, #48	; 0x30
 800c02a:	d0a2      	beq.n	800bf72 <_strtol_l.constprop.0+0x46>
 800c02c:	260a      	movs	r6, #10
 800c02e:	e7a8      	b.n	800bf82 <_strtol_l.constprop.0+0x56>
 800c030:	080148f9 	.word	0x080148f9
 800c034:	7fffffff 	.word	0x7fffffff

0800c038 <_strtol_r>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	f7ff ff77 	bl	800bf2c <_strtol_l.constprop.0>
 800c03e:	bd10      	pop	{r4, pc}

0800c040 <strtol>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4c04      	ldr	r4, [pc, #16]	; (800c054 <strtol+0x14>)
 800c044:	0013      	movs	r3, r2
 800c046:	000a      	movs	r2, r1
 800c048:	0001      	movs	r1, r0
 800c04a:	6820      	ldr	r0, [r4, #0]
 800c04c:	f7ff ff6e 	bl	800bf2c <_strtol_l.constprop.0>
 800c050:	bd10      	pop	{r4, pc}
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	200006d8 	.word	0x200006d8

0800c058 <std>:
 800c058:	2300      	movs	r3, #0
 800c05a:	b510      	push	{r4, lr}
 800c05c:	0004      	movs	r4, r0
 800c05e:	6003      	str	r3, [r0, #0]
 800c060:	6043      	str	r3, [r0, #4]
 800c062:	6083      	str	r3, [r0, #8]
 800c064:	8181      	strh	r1, [r0, #12]
 800c066:	6643      	str	r3, [r0, #100]	; 0x64
 800c068:	81c2      	strh	r2, [r0, #14]
 800c06a:	6103      	str	r3, [r0, #16]
 800c06c:	6143      	str	r3, [r0, #20]
 800c06e:	6183      	str	r3, [r0, #24]
 800c070:	0019      	movs	r1, r3
 800c072:	2208      	movs	r2, #8
 800c074:	305c      	adds	r0, #92	; 0x5c
 800c076:	f000 f97d 	bl	800c374 <memset>
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <std+0x50>)
 800c07c:	61e4      	str	r4, [r4, #28]
 800c07e:	6223      	str	r3, [r4, #32]
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <std+0x54>)
 800c082:	6263      	str	r3, [r4, #36]	; 0x24
 800c084:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <std+0x58>)
 800c086:	62a3      	str	r3, [r4, #40]	; 0x28
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <std+0x5c>)
 800c08a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c08c:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <std+0x60>)
 800c08e:	429c      	cmp	r4, r3
 800c090:	d005      	beq.n	800c09e <std+0x46>
 800c092:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <std+0x64>)
 800c094:	429c      	cmp	r4, r3
 800c096:	d002      	beq.n	800c09e <std+0x46>
 800c098:	4b09      	ldr	r3, [pc, #36]	; (800c0c0 <std+0x68>)
 800c09a:	429c      	cmp	r4, r3
 800c09c:	d103      	bne.n	800c0a6 <std+0x4e>
 800c09e:	0020      	movs	r0, r4
 800c0a0:	3058      	adds	r0, #88	; 0x58
 800c0a2:	f000 fa3d 	bl	800c520 <__retarget_lock_init_recursive>
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	0800c2d9 	.word	0x0800c2d9
 800c0ac:	0800c305 	.word	0x0800c305
 800c0b0:	0800c33d 	.word	0x0800c33d
 800c0b4:	0800c369 	.word	0x0800c369
 800c0b8:	20000bf8 	.word	0x20000bf8
 800c0bc:	20000c60 	.word	0x20000c60
 800c0c0:	20000cc8 	.word	0x20000cc8

0800c0c4 <stdio_exit_handler>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	4a03      	ldr	r2, [pc, #12]	; (800c0d4 <stdio_exit_handler+0x10>)
 800c0c8:	4903      	ldr	r1, [pc, #12]	; (800c0d8 <stdio_exit_handler+0x14>)
 800c0ca:	4804      	ldr	r0, [pc, #16]	; (800c0dc <stdio_exit_handler+0x18>)
 800c0cc:	f000 f86c 	bl	800c1a8 <_fwalk_sglue>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	2000043c 	.word	0x2000043c
 800c0d8:	08010021 	.word	0x08010021
 800c0dc:	200005b8 	.word	0x200005b8

0800c0e0 <cleanup_stdio>:
 800c0e0:	6841      	ldr	r1, [r0, #4]
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <cleanup_stdio+0x30>)
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	0004      	movs	r4, r0
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	d001      	beq.n	800c0f0 <cleanup_stdio+0x10>
 800c0ec:	f003 ff98 	bl	8010020 <_fclose_r>
 800c0f0:	68a1      	ldr	r1, [r4, #8]
 800c0f2:	4b08      	ldr	r3, [pc, #32]	; (800c114 <cleanup_stdio+0x34>)
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d002      	beq.n	800c0fe <cleanup_stdio+0x1e>
 800c0f8:	0020      	movs	r0, r4
 800c0fa:	f003 ff91 	bl	8010020 <_fclose_r>
 800c0fe:	68e1      	ldr	r1, [r4, #12]
 800c100:	4b05      	ldr	r3, [pc, #20]	; (800c118 <cleanup_stdio+0x38>)
 800c102:	4299      	cmp	r1, r3
 800c104:	d002      	beq.n	800c10c <cleanup_stdio+0x2c>
 800c106:	0020      	movs	r0, r4
 800c108:	f003 ff8a 	bl	8010020 <_fclose_r>
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	20000bf8 	.word	0x20000bf8
 800c114:	20000c60 	.word	0x20000c60
 800c118:	20000cc8 	.word	0x20000cc8

0800c11c <global_stdio_init.part.0>:
 800c11c:	b510      	push	{r4, lr}
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <global_stdio_init.part.0+0x28>)
 800c120:	4a09      	ldr	r2, [pc, #36]	; (800c148 <global_stdio_init.part.0+0x2c>)
 800c122:	2104      	movs	r1, #4
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	4809      	ldr	r0, [pc, #36]	; (800c14c <global_stdio_init.part.0+0x30>)
 800c128:	2200      	movs	r2, #0
 800c12a:	f7ff ff95 	bl	800c058 <std>
 800c12e:	2201      	movs	r2, #1
 800c130:	2109      	movs	r1, #9
 800c132:	4807      	ldr	r0, [pc, #28]	; (800c150 <global_stdio_init.part.0+0x34>)
 800c134:	f7ff ff90 	bl	800c058 <std>
 800c138:	2202      	movs	r2, #2
 800c13a:	2112      	movs	r1, #18
 800c13c:	4805      	ldr	r0, [pc, #20]	; (800c154 <global_stdio_init.part.0+0x38>)
 800c13e:	f7ff ff8b 	bl	800c058 <std>
 800c142:	bd10      	pop	{r4, pc}
 800c144:	20000d30 	.word	0x20000d30
 800c148:	0800c0c5 	.word	0x0800c0c5
 800c14c:	20000bf8 	.word	0x20000bf8
 800c150:	20000c60 	.word	0x20000c60
 800c154:	20000cc8 	.word	0x20000cc8

0800c158 <__sfp_lock_acquire>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	4802      	ldr	r0, [pc, #8]	; (800c164 <__sfp_lock_acquire+0xc>)
 800c15c:	f000 f9e2 	bl	800c524 <__retarget_lock_acquire_recursive>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	20000d3a 	.word	0x20000d3a

0800c168 <__sfp_lock_release>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4802      	ldr	r0, [pc, #8]	; (800c174 <__sfp_lock_release+0xc>)
 800c16c:	f000 f9db 	bl	800c526 <__retarget_lock_release_recursive>
 800c170:	bd10      	pop	{r4, pc}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	20000d3a 	.word	0x20000d3a

0800c178 <__sinit>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	0004      	movs	r4, r0
 800c17c:	f7ff ffec 	bl	800c158 <__sfp_lock_acquire>
 800c180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <__sinit+0x14>
 800c186:	f7ff ffef 	bl	800c168 <__sfp_lock_release>
 800c18a:	bd10      	pop	{r4, pc}
 800c18c:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <__sinit+0x28>)
 800c18e:	6363      	str	r3, [r4, #52]	; 0x34
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <__sinit+0x2c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1f6      	bne.n	800c186 <__sinit+0xe>
 800c198:	f7ff ffc0 	bl	800c11c <global_stdio_init.part.0>
 800c19c:	e7f3      	b.n	800c186 <__sinit+0xe>
 800c19e:	46c0      	nop			; (mov r8, r8)
 800c1a0:	0800c0e1 	.word	0x0800c0e1
 800c1a4:	20000d30 	.word	0x20000d30

0800c1a8 <_fwalk_sglue>:
 800c1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1aa:	0014      	movs	r4, r2
 800c1ac:	2600      	movs	r6, #0
 800c1ae:	9000      	str	r0, [sp, #0]
 800c1b0:	9101      	str	r1, [sp, #4]
 800c1b2:	68a5      	ldr	r5, [r4, #8]
 800c1b4:	6867      	ldr	r7, [r4, #4]
 800c1b6:	3f01      	subs	r7, #1
 800c1b8:	d504      	bpl.n	800c1c4 <_fwalk_sglue+0x1c>
 800c1ba:	6824      	ldr	r4, [r4, #0]
 800c1bc:	2c00      	cmp	r4, #0
 800c1be:	d1f8      	bne.n	800c1b2 <_fwalk_sglue+0xa>
 800c1c0:	0030      	movs	r0, r6
 800c1c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1c4:	89ab      	ldrh	r3, [r5, #12]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d908      	bls.n	800c1dc <_fwalk_sglue+0x34>
 800c1ca:	220e      	movs	r2, #14
 800c1cc:	5eab      	ldrsh	r3, [r5, r2]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	d004      	beq.n	800c1dc <_fwalk_sglue+0x34>
 800c1d2:	0029      	movs	r1, r5
 800c1d4:	9800      	ldr	r0, [sp, #0]
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	4798      	blx	r3
 800c1da:	4306      	orrs	r6, r0
 800c1dc:	3568      	adds	r5, #104	; 0x68
 800c1de:	e7ea      	b.n	800c1b6 <_fwalk_sglue+0xe>

0800c1e0 <snprintf>:
 800c1e0:	b40c      	push	{r2, r3}
 800c1e2:	b530      	push	{r4, r5, lr}
 800c1e4:	4b17      	ldr	r3, [pc, #92]	; (800c244 <snprintf+0x64>)
 800c1e6:	000c      	movs	r4, r1
 800c1e8:	681d      	ldr	r5, [r3, #0]
 800c1ea:	b09d      	sub	sp, #116	; 0x74
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	da08      	bge.n	800c202 <snprintf+0x22>
 800c1f0:	238b      	movs	r3, #139	; 0x8b
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	4240      	negs	r0, r0
 800c1f8:	b01d      	add	sp, #116	; 0x74
 800c1fa:	bc30      	pop	{r4, r5}
 800c1fc:	bc08      	pop	{r3}
 800c1fe:	b002      	add	sp, #8
 800c200:	4718      	bx	r3
 800c202:	2382      	movs	r3, #130	; 0x82
 800c204:	466a      	mov	r2, sp
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	8293      	strh	r3, [r2, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	9002      	str	r0, [sp, #8]
 800c20e:	9006      	str	r0, [sp, #24]
 800c210:	4299      	cmp	r1, r3
 800c212:	d000      	beq.n	800c216 <snprintf+0x36>
 800c214:	1e4b      	subs	r3, r1, #1
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	9307      	str	r3, [sp, #28]
 800c21a:	2301      	movs	r3, #1
 800c21c:	466a      	mov	r2, sp
 800c21e:	425b      	negs	r3, r3
 800c220:	82d3      	strh	r3, [r2, #22]
 800c222:	0028      	movs	r0, r5
 800c224:	ab21      	add	r3, sp, #132	; 0x84
 800c226:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c228:	a902      	add	r1, sp, #8
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	f001 fa9a 	bl	800d764 <_svfprintf_r>
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	da01      	bge.n	800c238 <snprintf+0x58>
 800c234:	238b      	movs	r3, #139	; 0x8b
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	2c00      	cmp	r4, #0
 800c23a:	d0dd      	beq.n	800c1f8 <snprintf+0x18>
 800c23c:	2200      	movs	r2, #0
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	e7d9      	b.n	800c1f8 <snprintf+0x18>
 800c244:	200006d8 	.word	0x200006d8

0800c248 <sprintf>:
 800c248:	b40e      	push	{r1, r2, r3}
 800c24a:	b500      	push	{lr}
 800c24c:	490b      	ldr	r1, [pc, #44]	; (800c27c <sprintf+0x34>)
 800c24e:	b09c      	sub	sp, #112	; 0x70
 800c250:	ab1d      	add	r3, sp, #116	; 0x74
 800c252:	9002      	str	r0, [sp, #8]
 800c254:	9006      	str	r0, [sp, #24]
 800c256:	9107      	str	r1, [sp, #28]
 800c258:	9104      	str	r1, [sp, #16]
 800c25a:	4809      	ldr	r0, [pc, #36]	; (800c280 <sprintf+0x38>)
 800c25c:	4909      	ldr	r1, [pc, #36]	; (800c284 <sprintf+0x3c>)
 800c25e:	cb04      	ldmia	r3!, {r2}
 800c260:	9105      	str	r1, [sp, #20]
 800c262:	6800      	ldr	r0, [r0, #0]
 800c264:	a902      	add	r1, sp, #8
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f001 fa7c 	bl	800d764 <_svfprintf_r>
 800c26c:	2200      	movs	r2, #0
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	b01c      	add	sp, #112	; 0x70
 800c274:	bc08      	pop	{r3}
 800c276:	b003      	add	sp, #12
 800c278:	4718      	bx	r3
 800c27a:	46c0      	nop			; (mov r8, r8)
 800c27c:	7fffffff 	.word	0x7fffffff
 800c280:	200006d8 	.word	0x200006d8
 800c284:	ffff0208 	.word	0xffff0208

0800c288 <sscanf>:
 800c288:	b40e      	push	{r1, r2, r3}
 800c28a:	b530      	push	{r4, r5, lr}
 800c28c:	2381      	movs	r3, #129	; 0x81
 800c28e:	b09c      	sub	sp, #112	; 0x70
 800c290:	466a      	mov	r2, sp
 800c292:	ac1f      	add	r4, sp, #124	; 0x7c
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	cc20      	ldmia	r4!, {r5}
 800c298:	8293      	strh	r3, [r2, #20]
 800c29a:	9002      	str	r0, [sp, #8]
 800c29c:	9006      	str	r0, [sp, #24]
 800c29e:	f7f3 ff31 	bl	8000104 <strlen>
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <sscanf+0x48>)
 800c2a4:	466a      	mov	r2, sp
 800c2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9003      	str	r0, [sp, #12]
 800c2ac:	9007      	str	r0, [sp, #28]
 800c2ae:	4809      	ldr	r0, [pc, #36]	; (800c2d4 <sscanf+0x4c>)
 800c2b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c2b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	82d3      	strh	r3, [r2, #22]
 800c2b8:	a902      	add	r1, sp, #8
 800c2ba:	0023      	movs	r3, r4
 800c2bc:	002a      	movs	r2, r5
 800c2be:	6800      	ldr	r0, [r0, #0]
 800c2c0:	9401      	str	r4, [sp, #4]
 800c2c2:	f002 fc91 	bl	800ebe8 <__ssvfscanf_r>
 800c2c6:	b01c      	add	sp, #112	; 0x70
 800c2c8:	bc30      	pop	{r4, r5}
 800c2ca:	bc08      	pop	{r3}
 800c2cc:	b003      	add	sp, #12
 800c2ce:	4718      	bx	r3
 800c2d0:	0800c301 	.word	0x0800c301
 800c2d4:	200006d8 	.word	0x200006d8

0800c2d8 <__sread>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	000c      	movs	r4, r1
 800c2dc:	250e      	movs	r5, #14
 800c2de:	5f49      	ldrsh	r1, [r1, r5]
 800c2e0:	f000 f8ba 	bl	800c458 <_read_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	db03      	blt.n	800c2f0 <__sread+0x18>
 800c2e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2ea:	181b      	adds	r3, r3, r0
 800c2ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	4a02      	ldr	r2, [pc, #8]	; (800c2fc <__sread+0x24>)
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	81a3      	strh	r3, [r4, #12]
 800c2f8:	e7f9      	b.n	800c2ee <__sread+0x16>
 800c2fa:	46c0      	nop			; (mov r8, r8)
 800c2fc:	ffffefff 	.word	0xffffefff

0800c300 <__seofread>:
 800c300:	2000      	movs	r0, #0
 800c302:	4770      	bx	lr

0800c304 <__swrite>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	001f      	movs	r7, r3
 800c308:	898b      	ldrh	r3, [r1, #12]
 800c30a:	0005      	movs	r5, r0
 800c30c:	000c      	movs	r4, r1
 800c30e:	0016      	movs	r6, r2
 800c310:	05db      	lsls	r3, r3, #23
 800c312:	d505      	bpl.n	800c320 <__swrite+0x1c>
 800c314:	230e      	movs	r3, #14
 800c316:	5ec9      	ldrsh	r1, [r1, r3]
 800c318:	2200      	movs	r2, #0
 800c31a:	2302      	movs	r3, #2
 800c31c:	f000 f888 	bl	800c430 <_lseek_r>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	4a05      	ldr	r2, [pc, #20]	; (800c338 <__swrite+0x34>)
 800c324:	0028      	movs	r0, r5
 800c326:	4013      	ands	r3, r2
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	0032      	movs	r2, r6
 800c32c:	230e      	movs	r3, #14
 800c32e:	5ee1      	ldrsh	r1, [r4, r3]
 800c330:	003b      	movs	r3, r7
 800c332:	f000 f8b7 	bl	800c4a4 <_write_r>
 800c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c338:	ffffefff 	.word	0xffffefff

0800c33c <__sseek>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	000c      	movs	r4, r1
 800c340:	250e      	movs	r5, #14
 800c342:	5f49      	ldrsh	r1, [r1, r5]
 800c344:	f000 f874 	bl	800c430 <_lseek_r>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	1c42      	adds	r2, r0, #1
 800c34c:	d103      	bne.n	800c356 <__sseek+0x1a>
 800c34e:	4a05      	ldr	r2, [pc, #20]	; (800c364 <__sseek+0x28>)
 800c350:	4013      	ands	r3, r2
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	2280      	movs	r2, #128	; 0x80
 800c358:	0152      	lsls	r2, r2, #5
 800c35a:	4313      	orrs	r3, r2
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	6520      	str	r0, [r4, #80]	; 0x50
 800c360:	e7f8      	b.n	800c354 <__sseek+0x18>
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	ffffefff 	.word	0xffffefff

0800c368 <__sclose>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	230e      	movs	r3, #14
 800c36c:	5ec9      	ldrsh	r1, [r1, r3]
 800c36e:	f000 f84d 	bl	800c40c <_close_r>
 800c372:	bd10      	pop	{r4, pc}

0800c374 <memset>:
 800c374:	0003      	movs	r3, r0
 800c376:	1882      	adds	r2, r0, r2
 800c378:	4293      	cmp	r3, r2
 800c37a:	d100      	bne.n	800c37e <memset+0xa>
 800c37c:	4770      	bx	lr
 800c37e:	7019      	strb	r1, [r3, #0]
 800c380:	3301      	adds	r3, #1
 800c382:	e7f9      	b.n	800c378 <memset+0x4>

0800c384 <strncmp>:
 800c384:	b530      	push	{r4, r5, lr}
 800c386:	0005      	movs	r5, r0
 800c388:	1e10      	subs	r0, r2, #0
 800c38a:	d00b      	beq.n	800c3a4 <strncmp+0x20>
 800c38c:	2400      	movs	r4, #0
 800c38e:	3a01      	subs	r2, #1
 800c390:	5d2b      	ldrb	r3, [r5, r4]
 800c392:	5d08      	ldrb	r0, [r1, r4]
 800c394:	4283      	cmp	r3, r0
 800c396:	d104      	bne.n	800c3a2 <strncmp+0x1e>
 800c398:	42a2      	cmp	r2, r4
 800c39a:	d002      	beq.n	800c3a2 <strncmp+0x1e>
 800c39c:	3401      	adds	r4, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1f6      	bne.n	800c390 <strncmp+0xc>
 800c3a2:	1a18      	subs	r0, r3, r0
 800c3a4:	bd30      	pop	{r4, r5, pc}

0800c3a6 <strncpy>:
 800c3a6:	0003      	movs	r3, r0
 800c3a8:	b530      	push	{r4, r5, lr}
 800c3aa:	001d      	movs	r5, r3
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	d006      	beq.n	800c3be <strncpy+0x18>
 800c3b0:	780c      	ldrb	r4, [r1, #0]
 800c3b2:	3a01      	subs	r2, #1
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	702c      	strb	r4, [r5, #0]
 800c3b8:	3101      	adds	r1, #1
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	d1f5      	bne.n	800c3aa <strncpy+0x4>
 800c3be:	2100      	movs	r1, #0
 800c3c0:	189a      	adds	r2, r3, r2
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d100      	bne.n	800c3c8 <strncpy+0x22>
 800c3c6:	bd30      	pop	{r4, r5, pc}
 800c3c8:	7019      	strb	r1, [r3, #0]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	e7f9      	b.n	800c3c2 <strncpy+0x1c>

0800c3ce <strstr>:
 800c3ce:	780a      	ldrb	r2, [r1, #0]
 800c3d0:	b530      	push	{r4, r5, lr}
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	d10c      	bne.n	800c3f0 <strstr+0x22>
 800c3d6:	bd30      	pop	{r4, r5, pc}
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d108      	bne.n	800c3ee <strstr+0x20>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	5ccc      	ldrb	r4, [r1, r3]
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	d0f8      	beq.n	800c3d6 <strstr+0x8>
 800c3e4:	5cc5      	ldrb	r5, [r0, r3]
 800c3e6:	42a5      	cmp	r5, r4
 800c3e8:	d101      	bne.n	800c3ee <strstr+0x20>
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	e7f7      	b.n	800c3de <strstr+0x10>
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	7803      	ldrb	r3, [r0, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f0      	bne.n	800c3d8 <strstr+0xa>
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	e7ed      	b.n	800c3d6 <strstr+0x8>
	...

0800c3fc <__locale_mb_cur_max>:
 800c3fc:	2294      	movs	r2, #148	; 0x94
 800c3fe:	4b02      	ldr	r3, [pc, #8]	; (800c408 <__locale_mb_cur_max+0xc>)
 800c400:	0052      	lsls	r2, r2, #1
 800c402:	5c98      	ldrb	r0, [r3, r2]
 800c404:	4770      	bx	lr
 800c406:	46c0      	nop			; (mov r8, r8)
 800c408:	20000448 	.word	0x20000448

0800c40c <_close_r>:
 800c40c:	2300      	movs	r3, #0
 800c40e:	b570      	push	{r4, r5, r6, lr}
 800c410:	4d06      	ldr	r5, [pc, #24]	; (800c42c <_close_r+0x20>)
 800c412:	0004      	movs	r4, r0
 800c414:	0008      	movs	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f7 f9c5 	bl	80037a6 <_close>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d103      	bne.n	800c428 <_close_r+0x1c>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d000      	beq.n	800c428 <_close_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd70      	pop	{r4, r5, r6, pc}
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	20000d34 	.word	0x20000d34

0800c430 <_lseek_r>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	0004      	movs	r4, r0
 800c434:	0008      	movs	r0, r1
 800c436:	0011      	movs	r1, r2
 800c438:	001a      	movs	r2, r3
 800c43a:	2300      	movs	r3, #0
 800c43c:	4d05      	ldr	r5, [pc, #20]	; (800c454 <_lseek_r+0x24>)
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f7 f9d2 	bl	80037e8 <_lseek>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d103      	bne.n	800c450 <_lseek_r+0x20>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d000      	beq.n	800c450 <_lseek_r+0x20>
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	46c0      	nop			; (mov r8, r8)
 800c454:	20000d34 	.word	0x20000d34

0800c458 <_read_r>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	0004      	movs	r4, r0
 800c45c:	0008      	movs	r0, r1
 800c45e:	0011      	movs	r1, r2
 800c460:	001a      	movs	r2, r3
 800c462:	2300      	movs	r3, #0
 800c464:	4d05      	ldr	r5, [pc, #20]	; (800c47c <_read_r+0x24>)
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	f7f7 f964 	bl	8003734 <_read>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d103      	bne.n	800c478 <_read_r+0x20>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d000      	beq.n	800c478 <_read_r+0x20>
 800c476:	6023      	str	r3, [r4, #0]
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	20000d34 	.word	0x20000d34

0800c480 <_sbrk_r>:
 800c480:	2300      	movs	r3, #0
 800c482:	b570      	push	{r4, r5, r6, lr}
 800c484:	4d06      	ldr	r5, [pc, #24]	; (800c4a0 <_sbrk_r+0x20>)
 800c486:	0004      	movs	r4, r0
 800c488:	0008      	movs	r0, r1
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	f7f7 f9b8 	bl	8003800 <_sbrk>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d103      	bne.n	800c49c <_sbrk_r+0x1c>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d000      	beq.n	800c49c <_sbrk_r+0x1c>
 800c49a:	6023      	str	r3, [r4, #0]
 800c49c:	bd70      	pop	{r4, r5, r6, pc}
 800c49e:	46c0      	nop			; (mov r8, r8)
 800c4a0:	20000d34 	.word	0x20000d34

0800c4a4 <_write_r>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	0004      	movs	r4, r0
 800c4a8:	0008      	movs	r0, r1
 800c4aa:	0011      	movs	r1, r2
 800c4ac:	001a      	movs	r2, r3
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	4d05      	ldr	r5, [pc, #20]	; (800c4c8 <_write_r+0x24>)
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	f7f7 f95b 	bl	800376e <_write>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d103      	bne.n	800c4c4 <_write_r+0x20>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d000      	beq.n	800c4c4 <_write_r+0x20>
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	20000d34 	.word	0x20000d34

0800c4cc <__errno>:
 800c4cc:	4b01      	ldr	r3, [pc, #4]	; (800c4d4 <__errno+0x8>)
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	4770      	bx	lr
 800c4d2:	46c0      	nop			; (mov r8, r8)
 800c4d4:	200006d8 	.word	0x200006d8

0800c4d8 <__libc_init_array>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	2600      	movs	r6, #0
 800c4dc:	4c0c      	ldr	r4, [pc, #48]	; (800c510 <__libc_init_array+0x38>)
 800c4de:	4d0d      	ldr	r5, [pc, #52]	; (800c514 <__libc_init_array+0x3c>)
 800c4e0:	1b64      	subs	r4, r4, r5
 800c4e2:	10a4      	asrs	r4, r4, #2
 800c4e4:	42a6      	cmp	r6, r4
 800c4e6:	d109      	bne.n	800c4fc <__libc_init_array+0x24>
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	f006 fcc5 	bl	8012e78 <_init>
 800c4ee:	4c0a      	ldr	r4, [pc, #40]	; (800c518 <__libc_init_array+0x40>)
 800c4f0:	4d0a      	ldr	r5, [pc, #40]	; (800c51c <__libc_init_array+0x44>)
 800c4f2:	1b64      	subs	r4, r4, r5
 800c4f4:	10a4      	asrs	r4, r4, #2
 800c4f6:	42a6      	cmp	r6, r4
 800c4f8:	d105      	bne.n	800c506 <__libc_init_array+0x2e>
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	00b3      	lsls	r3, r6, #2
 800c4fe:	58eb      	ldr	r3, [r5, r3]
 800c500:	4798      	blx	r3
 800c502:	3601      	adds	r6, #1
 800c504:	e7ee      	b.n	800c4e4 <__libc_init_array+0xc>
 800c506:	00b3      	lsls	r3, r6, #2
 800c508:	58eb      	ldr	r3, [r5, r3]
 800c50a:	4798      	blx	r3
 800c50c:	3601      	adds	r6, #1
 800c50e:	e7f2      	b.n	800c4f6 <__libc_init_array+0x1e>
 800c510:	08014d14 	.word	0x08014d14
 800c514:	08014d14 	.word	0x08014d14
 800c518:	08014d1c 	.word	0x08014d1c
 800c51c:	08014d14 	.word	0x08014d14

0800c520 <__retarget_lock_init_recursive>:
 800c520:	4770      	bx	lr

0800c522 <__retarget_lock_close_recursive>:
 800c522:	4770      	bx	lr

0800c524 <__retarget_lock_acquire_recursive>:
 800c524:	4770      	bx	lr

0800c526 <__retarget_lock_release_recursive>:
 800c526:	4770      	bx	lr

0800c528 <sysconf>:
 800c528:	2380      	movs	r3, #128	; 0x80
 800c52a:	b510      	push	{r4, lr}
 800c52c:	2808      	cmp	r0, #8
 800c52e:	d004      	beq.n	800c53a <sysconf+0x12>
 800c530:	f7ff ffcc 	bl	800c4cc <__errno>
 800c534:	2316      	movs	r3, #22
 800c536:	6003      	str	r3, [r0, #0]
 800c538:	3b17      	subs	r3, #23
 800c53a:	0018      	movs	r0, r3
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <memcpy>:
 800c53e:	2300      	movs	r3, #0
 800c540:	b510      	push	{r4, lr}
 800c542:	429a      	cmp	r2, r3
 800c544:	d100      	bne.n	800c548 <memcpy+0xa>
 800c546:	bd10      	pop	{r4, pc}
 800c548:	5ccc      	ldrb	r4, [r1, r3]
 800c54a:	54c4      	strb	r4, [r0, r3]
 800c54c:	3301      	adds	r3, #1
 800c54e:	e7f8      	b.n	800c542 <memcpy+0x4>

0800c550 <nan>:
 800c550:	2000      	movs	r0, #0
 800c552:	4901      	ldr	r1, [pc, #4]	; (800c558 <nan+0x8>)
 800c554:	4770      	bx	lr
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	7ff80000 	.word	0x7ff80000

0800c55c <nanf>:
 800c55c:	4800      	ldr	r0, [pc, #0]	; (800c560 <nanf+0x4>)
 800c55e:	4770      	bx	lr
 800c560:	7fc00000 	.word	0x7fc00000

0800c564 <register_fini>:
 800c564:	4b03      	ldr	r3, [pc, #12]	; (800c574 <register_fini+0x10>)
 800c566:	b510      	push	{r4, lr}
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <register_fini+0xe>
 800c56c:	4802      	ldr	r0, [pc, #8]	; (800c578 <register_fini+0x14>)
 800c56e:	f000 f805 	bl	800c57c <atexit>
 800c572:	bd10      	pop	{r4, pc}
 800c574:	00000000 	.word	0x00000000
 800c578:	080102d9 	.word	0x080102d9

0800c57c <atexit>:
 800c57c:	2300      	movs	r3, #0
 800c57e:	b510      	push	{r4, lr}
 800c580:	0001      	movs	r1, r0
 800c582:	001a      	movs	r2, r3
 800c584:	0018      	movs	r0, r3
 800c586:	f003 fef9 	bl	801037c <__register_exitproc>
 800c58a:	bd10      	pop	{r4, pc}

0800c58c <_malloc_trim_r>:
 800c58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58e:	0004      	movs	r4, r0
 800c590:	2008      	movs	r0, #8
 800c592:	000d      	movs	r5, r1
 800c594:	f7ff ffc8 	bl	800c528 <sysconf>
 800c598:	0006      	movs	r6, r0
 800c59a:	0020      	movs	r0, r4
 800c59c:	f7fe fe7e 	bl	800b29c <__malloc_lock>
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4f21      	ldr	r7, [pc, #132]	; (800c628 <_malloc_trim_r+0x9c>)
 800c5a4:	0031      	movs	r1, r6
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	4393      	bics	r3, r2
 800c5ac:	1b58      	subs	r0, r3, r5
 800c5ae:	3811      	subs	r0, #17
 800c5b0:	1980      	adds	r0, r0, r6
 800c5b2:	9301      	str	r3, [sp, #4]
 800c5b4:	f7f3 fdc2 	bl	800013c <__udivsi3>
 800c5b8:	1e45      	subs	r5, r0, #1
 800c5ba:	4375      	muls	r5, r6
 800c5bc:	42ae      	cmp	r6, r5
 800c5be:	dd04      	ble.n	800c5ca <_malloc_trim_r+0x3e>
 800c5c0:	0020      	movs	r0, r4
 800c5c2:	f7fe fe73 	bl	800b2ac <__malloc_unlock>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	0020      	movs	r0, r4
 800c5ce:	f7ff ff57 	bl	800c480 <_sbrk_r>
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	9a01      	ldr	r2, [sp, #4]
 800c5d6:	189b      	adds	r3, r3, r2
 800c5d8:	4298      	cmp	r0, r3
 800c5da:	d1f1      	bne.n	800c5c0 <_malloc_trim_r+0x34>
 800c5dc:	0020      	movs	r0, r4
 800c5de:	4269      	negs	r1, r5
 800c5e0:	f7ff ff4e 	bl	800c480 <_sbrk_r>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d110      	bne.n	800c60a <_malloc_trim_r+0x7e>
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	0020      	movs	r0, r4
 800c5ec:	f7ff ff48 	bl	800c480 <_sbrk_r>
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	1a81      	subs	r1, r0, r2
 800c5f4:	290f      	cmp	r1, #15
 800c5f6:	dde3      	ble.n	800c5c0 <_malloc_trim_r+0x34>
 800c5f8:	4d0c      	ldr	r5, [pc, #48]	; (800c62c <_malloc_trim_r+0xa0>)
 800c5fa:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <_malloc_trim_r+0xa4>)
 800c5fc:	682d      	ldr	r5, [r5, #0]
 800c5fe:	1b40      	subs	r0, r0, r5
 800c600:	6018      	str	r0, [r3, #0]
 800c602:	2301      	movs	r3, #1
 800c604:	430b      	orrs	r3, r1
 800c606:	6053      	str	r3, [r2, #4]
 800c608:	e7da      	b.n	800c5c0 <_malloc_trim_r+0x34>
 800c60a:	2601      	movs	r6, #1
 800c60c:	9b01      	ldr	r3, [sp, #4]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	1b5b      	subs	r3, r3, r5
 800c612:	4333      	orrs	r3, r6
 800c614:	6053      	str	r3, [r2, #4]
 800c616:	4a06      	ldr	r2, [pc, #24]	; (800c630 <_malloc_trim_r+0xa4>)
 800c618:	0020      	movs	r0, r4
 800c61a:	6813      	ldr	r3, [r2, #0]
 800c61c:	1b5b      	subs	r3, r3, r5
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	f7fe fe44 	bl	800b2ac <__malloc_unlock>
 800c624:	0030      	movs	r0, r6
 800c626:	e7cf      	b.n	800c5c8 <_malloc_trim_r+0x3c>
 800c628:	2000002c 	.word	0x2000002c
 800c62c:	20000434 	.word	0x20000434
 800c630:	20000bc4 	.word	0x20000bc4

0800c634 <_free_r>:
 800c634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c636:	1e0d      	subs	r5, r1, #0
 800c638:	9001      	str	r0, [sp, #4]
 800c63a:	d02d      	beq.n	800c698 <_free_r+0x64>
 800c63c:	f7fe fe2e 	bl	800b29c <__malloc_lock>
 800c640:	2301      	movs	r3, #1
 800c642:	0029      	movs	r1, r5
 800c644:	469c      	mov	ip, r3
 800c646:	3908      	subs	r1, #8
 800c648:	684f      	ldr	r7, [r1, #4]
 800c64a:	4662      	mov	r2, ip
 800c64c:	003b      	movs	r3, r7
 800c64e:	4664      	mov	r4, ip
 800c650:	4393      	bics	r3, r2
 800c652:	18c8      	adds	r0, r1, r3
 800c654:	6845      	ldr	r5, [r0, #4]
 800c656:	3202      	adds	r2, #2
 800c658:	4395      	bics	r5, r2
 800c65a:	4a4a      	ldr	r2, [pc, #296]	; (800c784 <_free_r+0x150>)
 800c65c:	4027      	ands	r7, r4
 800c65e:	6896      	ldr	r6, [r2, #8]
 800c660:	4286      	cmp	r6, r0
 800c662:	d11a      	bne.n	800c69a <_free_r+0x66>
 800c664:	195b      	adds	r3, r3, r5
 800c666:	2f00      	cmp	r7, #0
 800c668:	d106      	bne.n	800c678 <_free_r+0x44>
 800c66a:	6808      	ldr	r0, [r1, #0]
 800c66c:	1a09      	subs	r1, r1, r0
 800c66e:	688d      	ldr	r5, [r1, #8]
 800c670:	181b      	adds	r3, r3, r0
 800c672:	68c8      	ldr	r0, [r1, #12]
 800c674:	60e8      	str	r0, [r5, #12]
 800c676:	6085      	str	r5, [r0, #8]
 800c678:	2001      	movs	r0, #1
 800c67a:	4318      	orrs	r0, r3
 800c67c:	6048      	str	r0, [r1, #4]
 800c67e:	6091      	str	r1, [r2, #8]
 800c680:	4a41      	ldr	r2, [pc, #260]	; (800c788 <_free_r+0x154>)
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d804      	bhi.n	800c692 <_free_r+0x5e>
 800c688:	4b40      	ldr	r3, [pc, #256]	; (800c78c <_free_r+0x158>)
 800c68a:	9801      	ldr	r0, [sp, #4]
 800c68c:	6819      	ldr	r1, [r3, #0]
 800c68e:	f7ff ff7d 	bl	800c58c <_malloc_trim_r>
 800c692:	9801      	ldr	r0, [sp, #4]
 800c694:	f7fe fe0a 	bl	800b2ac <__malloc_unlock>
 800c698:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c69a:	2600      	movs	r6, #0
 800c69c:	6045      	str	r5, [r0, #4]
 800c69e:	42b7      	cmp	r7, r6
 800c6a0:	d109      	bne.n	800c6b6 <_free_r+0x82>
 800c6a2:	680f      	ldr	r7, [r1, #0]
 800c6a4:	4c3a      	ldr	r4, [pc, #232]	; (800c790 <_free_r+0x15c>)
 800c6a6:	1bc9      	subs	r1, r1, r7
 800c6a8:	19db      	adds	r3, r3, r7
 800c6aa:	688f      	ldr	r7, [r1, #8]
 800c6ac:	42a7      	cmp	r7, r4
 800c6ae:	d02c      	beq.n	800c70a <_free_r+0xd6>
 800c6b0:	68cc      	ldr	r4, [r1, #12]
 800c6b2:	60fc      	str	r4, [r7, #12]
 800c6b4:	60a7      	str	r7, [r4, #8]
 800c6b6:	1947      	adds	r7, r0, r5
 800c6b8:	687c      	ldr	r4, [r7, #4]
 800c6ba:	2701      	movs	r7, #1
 800c6bc:	423c      	tst	r4, r7
 800c6be:	d10b      	bne.n	800c6d8 <_free_r+0xa4>
 800c6c0:	195b      	adds	r3, r3, r5
 800c6c2:	6885      	ldr	r5, [r0, #8]
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	d122      	bne.n	800c70e <_free_r+0xda>
 800c6c8:	4c31      	ldr	r4, [pc, #196]	; (800c790 <_free_r+0x15c>)
 800c6ca:	42a5      	cmp	r5, r4
 800c6cc:	d11f      	bne.n	800c70e <_free_r+0xda>
 800c6ce:	003e      	movs	r6, r7
 800c6d0:	6151      	str	r1, [r2, #20]
 800c6d2:	6111      	str	r1, [r2, #16]
 800c6d4:	60cd      	str	r5, [r1, #12]
 800c6d6:	608d      	str	r5, [r1, #8]
 800c6d8:	2501      	movs	r5, #1
 800c6da:	0028      	movs	r0, r5
 800c6dc:	4318      	orrs	r0, r3
 800c6de:	6048      	str	r0, [r1, #4]
 800c6e0:	50cb      	str	r3, [r1, r3]
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	d1d5      	bne.n	800c692 <_free_r+0x5e>
 800c6e6:	2080      	movs	r0, #128	; 0x80
 800c6e8:	0080      	lsls	r0, r0, #2
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	d213      	bcs.n	800c716 <_free_r+0xe2>
 800c6ee:	08d8      	lsrs	r0, r3, #3
 800c6f0:	095b      	lsrs	r3, r3, #5
 800c6f2:	409d      	lsls	r5, r3
 800c6f4:	6853      	ldr	r3, [r2, #4]
 800c6f6:	431d      	orrs	r5, r3
 800c6f8:	00c3      	lsls	r3, r0, #3
 800c6fa:	189b      	adds	r3, r3, r2
 800c6fc:	6055      	str	r5, [r2, #4]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	60cb      	str	r3, [r1, #12]
 800c702:	608a      	str	r2, [r1, #8]
 800c704:	6099      	str	r1, [r3, #8]
 800c706:	60d1      	str	r1, [r2, #12]
 800c708:	e7c3      	b.n	800c692 <_free_r+0x5e>
 800c70a:	4666      	mov	r6, ip
 800c70c:	e7d3      	b.n	800c6b6 <_free_r+0x82>
 800c70e:	68c0      	ldr	r0, [r0, #12]
 800c710:	60e8      	str	r0, [r5, #12]
 800c712:	6085      	str	r5, [r0, #8]
 800c714:	e7e0      	b.n	800c6d8 <_free_r+0xa4>
 800c716:	0a5d      	lsrs	r5, r3, #9
 800c718:	2d04      	cmp	r5, #4
 800c71a:	d812      	bhi.n	800c742 <_free_r+0x10e>
 800c71c:	0998      	lsrs	r0, r3, #6
 800c71e:	3038      	adds	r0, #56	; 0x38
 800c720:	00c6      	lsls	r6, r0, #3
 800c722:	18b6      	adds	r6, r6, r2
 800c724:	68b5      	ldr	r5, [r6, #8]
 800c726:	2703      	movs	r7, #3
 800c728:	42ae      	cmp	r6, r5
 800c72a:	d125      	bne.n	800c778 <_free_r+0x144>
 800c72c:	2301      	movs	r3, #1
 800c72e:	1080      	asrs	r0, r0, #2
 800c730:	4083      	lsls	r3, r0
 800c732:	6850      	ldr	r0, [r2, #4]
 800c734:	4303      	orrs	r3, r0
 800c736:	6053      	str	r3, [r2, #4]
 800c738:	60ce      	str	r6, [r1, #12]
 800c73a:	608d      	str	r5, [r1, #8]
 800c73c:	60b1      	str	r1, [r6, #8]
 800c73e:	60e9      	str	r1, [r5, #12]
 800c740:	e7a7      	b.n	800c692 <_free_r+0x5e>
 800c742:	2d14      	cmp	r5, #20
 800c744:	d802      	bhi.n	800c74c <_free_r+0x118>
 800c746:	0028      	movs	r0, r5
 800c748:	305b      	adds	r0, #91	; 0x5b
 800c74a:	e7e9      	b.n	800c720 <_free_r+0xec>
 800c74c:	2d54      	cmp	r5, #84	; 0x54
 800c74e:	d802      	bhi.n	800c756 <_free_r+0x122>
 800c750:	0b18      	lsrs	r0, r3, #12
 800c752:	306e      	adds	r0, #110	; 0x6e
 800c754:	e7e4      	b.n	800c720 <_free_r+0xec>
 800c756:	20aa      	movs	r0, #170	; 0xaa
 800c758:	0040      	lsls	r0, r0, #1
 800c75a:	4285      	cmp	r5, r0
 800c75c:	d802      	bhi.n	800c764 <_free_r+0x130>
 800c75e:	0bd8      	lsrs	r0, r3, #15
 800c760:	3077      	adds	r0, #119	; 0x77
 800c762:	e7dd      	b.n	800c720 <_free_r+0xec>
 800c764:	4e0b      	ldr	r6, [pc, #44]	; (800c794 <_free_r+0x160>)
 800c766:	207e      	movs	r0, #126	; 0x7e
 800c768:	42b5      	cmp	r5, r6
 800c76a:	d8d9      	bhi.n	800c720 <_free_r+0xec>
 800c76c:	0c98      	lsrs	r0, r3, #18
 800c76e:	307c      	adds	r0, #124	; 0x7c
 800c770:	e7d6      	b.n	800c720 <_free_r+0xec>
 800c772:	68ad      	ldr	r5, [r5, #8]
 800c774:	42ae      	cmp	r6, r5
 800c776:	d003      	beq.n	800c780 <_free_r+0x14c>
 800c778:	686a      	ldr	r2, [r5, #4]
 800c77a:	43ba      	bics	r2, r7
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d8f8      	bhi.n	800c772 <_free_r+0x13e>
 800c780:	68ee      	ldr	r6, [r5, #12]
 800c782:	e7d9      	b.n	800c738 <_free_r+0x104>
 800c784:	2000002c 	.word	0x2000002c
 800c788:	20000438 	.word	0x20000438
 800c78c:	20000bf4 	.word	0x20000bf4
 800c790:	20000034 	.word	0x20000034
 800c794:	00000554 	.word	0x00000554

0800c798 <rshift>:
 800c798:	0002      	movs	r2, r0
 800c79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c79c:	6904      	ldr	r4, [r0, #16]
 800c79e:	114b      	asrs	r3, r1, #5
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	3214      	adds	r2, #20
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	114d      	asrs	r5, r1, #5
 800c7a8:	0013      	movs	r3, r2
 800c7aa:	42ac      	cmp	r4, r5
 800c7ac:	dd32      	ble.n	800c814 <rshift+0x7c>
 800c7ae:	261f      	movs	r6, #31
 800c7b0:	000f      	movs	r7, r1
 800c7b2:	114b      	asrs	r3, r1, #5
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	00a5      	lsls	r5, r4, #2
 800c7b8:	18d3      	adds	r3, r2, r3
 800c7ba:	4037      	ands	r7, r6
 800c7bc:	1955      	adds	r5, r2, r5
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	9701      	str	r7, [sp, #4]
 800c7c2:	4231      	tst	r1, r6
 800c7c4:	d10d      	bne.n	800c7e2 <rshift+0x4a>
 800c7c6:	0016      	movs	r6, r2
 800c7c8:	0019      	movs	r1, r3
 800c7ca:	428d      	cmp	r5, r1
 800c7cc:	d836      	bhi.n	800c83c <rshift+0xa4>
 800c7ce:	9900      	ldr	r1, [sp, #0]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	3903      	subs	r1, #3
 800c7d4:	428d      	cmp	r5, r1
 800c7d6:	d302      	bcc.n	800c7de <rshift+0x46>
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	1ae4      	subs	r4, r4, r3
 800c7dc:	00a3      	lsls	r3, r4, #2
 800c7de:	18d3      	adds	r3, r2, r3
 800c7e0:	e018      	b.n	800c814 <rshift+0x7c>
 800c7e2:	2120      	movs	r1, #32
 800c7e4:	9e01      	ldr	r6, [sp, #4]
 800c7e6:	9f01      	ldr	r7, [sp, #4]
 800c7e8:	1b89      	subs	r1, r1, r6
 800c7ea:	9e00      	ldr	r6, [sp, #0]
 800c7ec:	9103      	str	r1, [sp, #12]
 800c7ee:	ce02      	ldmia	r6!, {r1}
 800c7f0:	4694      	mov	ip, r2
 800c7f2:	40f9      	lsrs	r1, r7
 800c7f4:	42b5      	cmp	r5, r6
 800c7f6:	d816      	bhi.n	800c826 <rshift+0x8e>
 800c7f8:	9e00      	ldr	r6, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	3601      	adds	r6, #1
 800c7fe:	42b5      	cmp	r5, r6
 800c800:	d303      	bcc.n	800c80a <rshift+0x72>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	1ae3      	subs	r3, r4, r3
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	3b04      	subs	r3, #4
 800c80a:	18d3      	adds	r3, r2, r3
 800c80c:	6019      	str	r1, [r3, #0]
 800c80e:	2900      	cmp	r1, #0
 800c810:	d000      	beq.n	800c814 <rshift+0x7c>
 800c812:	3304      	adds	r3, #4
 800c814:	1a99      	subs	r1, r3, r2
 800c816:	1089      	asrs	r1, r1, #2
 800c818:	6101      	str	r1, [r0, #16]
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d101      	bne.n	800c822 <rshift+0x8a>
 800c81e:	2300      	movs	r3, #0
 800c820:	6143      	str	r3, [r0, #20]
 800c822:	b005      	add	sp, #20
 800c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c826:	6837      	ldr	r7, [r6, #0]
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	409f      	lsls	r7, r3
 800c82c:	430f      	orrs	r7, r1
 800c82e:	4661      	mov	r1, ip
 800c830:	c180      	stmia	r1!, {r7}
 800c832:	468c      	mov	ip, r1
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	ce02      	ldmia	r6!, {r1}
 800c838:	40d9      	lsrs	r1, r3
 800c83a:	e7db      	b.n	800c7f4 <rshift+0x5c>
 800c83c:	c980      	ldmia	r1!, {r7}
 800c83e:	c680      	stmia	r6!, {r7}
 800c840:	e7c3      	b.n	800c7ca <rshift+0x32>

0800c842 <__hexdig_fun>:
 800c842:	0002      	movs	r2, r0
 800c844:	3a30      	subs	r2, #48	; 0x30
 800c846:	0003      	movs	r3, r0
 800c848:	2a09      	cmp	r2, #9
 800c84a:	d802      	bhi.n	800c852 <__hexdig_fun+0x10>
 800c84c:	3b20      	subs	r3, #32
 800c84e:	b2d8      	uxtb	r0, r3
 800c850:	4770      	bx	lr
 800c852:	0002      	movs	r2, r0
 800c854:	3a61      	subs	r2, #97	; 0x61
 800c856:	2a05      	cmp	r2, #5
 800c858:	d801      	bhi.n	800c85e <__hexdig_fun+0x1c>
 800c85a:	3b47      	subs	r3, #71	; 0x47
 800c85c:	e7f7      	b.n	800c84e <__hexdig_fun+0xc>
 800c85e:	001a      	movs	r2, r3
 800c860:	3a41      	subs	r2, #65	; 0x41
 800c862:	2000      	movs	r0, #0
 800c864:	2a05      	cmp	r2, #5
 800c866:	d8f3      	bhi.n	800c850 <__hexdig_fun+0xe>
 800c868:	3b27      	subs	r3, #39	; 0x27
 800c86a:	e7f0      	b.n	800c84e <__hexdig_fun+0xc>

0800c86c <__gethex>:
 800c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86e:	b089      	sub	sp, #36	; 0x24
 800c870:	9307      	str	r3, [sp, #28]
 800c872:	2302      	movs	r3, #2
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	680a      	ldr	r2, [r1, #0]
 800c878:	425b      	negs	r3, r3
 800c87a:	9003      	str	r0, [sp, #12]
 800c87c:	9106      	str	r1, [sp, #24]
 800c87e:	1c96      	adds	r6, r2, #2
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	199a      	adds	r2, r3, r6
 800c884:	9600      	str	r6, [sp, #0]
 800c886:	9205      	str	r2, [sp, #20]
 800c888:	9a00      	ldr	r2, [sp, #0]
 800c88a:	3601      	adds	r6, #1
 800c88c:	7810      	ldrb	r0, [r2, #0]
 800c88e:	2830      	cmp	r0, #48	; 0x30
 800c890:	d0f7      	beq.n	800c882 <__gethex+0x16>
 800c892:	f7ff ffd6 	bl	800c842 <__hexdig_fun>
 800c896:	2300      	movs	r3, #0
 800c898:	001d      	movs	r5, r3
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	4298      	cmp	r0, r3
 800c89e:	d11d      	bne.n	800c8dc <__gethex+0x70>
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	49a6      	ldr	r1, [pc, #664]	; (800cb3c <__gethex+0x2d0>)
 800c8a4:	9800      	ldr	r0, [sp, #0]
 800c8a6:	f7ff fd6d 	bl	800c384 <strncmp>
 800c8aa:	0007      	movs	r7, r0
 800c8ac:	42a8      	cmp	r0, r5
 800c8ae:	d169      	bne.n	800c984 <__gethex+0x118>
 800c8b0:	9b00      	ldr	r3, [sp, #0]
 800c8b2:	0034      	movs	r4, r6
 800c8b4:	7858      	ldrb	r0, [r3, #1]
 800c8b6:	f7ff ffc4 	bl	800c842 <__hexdig_fun>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	9302      	str	r3, [sp, #8]
 800c8be:	42a8      	cmp	r0, r5
 800c8c0:	d02f      	beq.n	800c922 <__gethex+0xb6>
 800c8c2:	9600      	str	r6, [sp, #0]
 800c8c4:	9b00      	ldr	r3, [sp, #0]
 800c8c6:	7818      	ldrb	r0, [r3, #0]
 800c8c8:	2830      	cmp	r0, #48	; 0x30
 800c8ca:	d009      	beq.n	800c8e0 <__gethex+0x74>
 800c8cc:	f7ff ffb9 	bl	800c842 <__hexdig_fun>
 800c8d0:	4242      	negs	r2, r0
 800c8d2:	4142      	adcs	r2, r0
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	0035      	movs	r5, r6
 800c8d8:	9202      	str	r2, [sp, #8]
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	9c00      	ldr	r4, [sp, #0]
 800c8de:	e004      	b.n	800c8ea <__gethex+0x7e>
 800c8e0:	9b00      	ldr	r3, [sp, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	e7ed      	b.n	800c8c4 <__gethex+0x58>
 800c8e8:	3401      	adds	r4, #1
 800c8ea:	7820      	ldrb	r0, [r4, #0]
 800c8ec:	f7ff ffa9 	bl	800c842 <__hexdig_fun>
 800c8f0:	1e07      	subs	r7, r0, #0
 800c8f2:	d1f9      	bne.n	800c8e8 <__gethex+0x7c>
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	0020      	movs	r0, r4
 800c8f8:	4990      	ldr	r1, [pc, #576]	; (800cb3c <__gethex+0x2d0>)
 800c8fa:	f7ff fd43 	bl	800c384 <strncmp>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d10d      	bne.n	800c91e <__gethex+0xb2>
 800c902:	2d00      	cmp	r5, #0
 800c904:	d106      	bne.n	800c914 <__gethex+0xa8>
 800c906:	3401      	adds	r4, #1
 800c908:	0025      	movs	r5, r4
 800c90a:	7820      	ldrb	r0, [r4, #0]
 800c90c:	f7ff ff99 	bl	800c842 <__hexdig_fun>
 800c910:	2800      	cmp	r0, #0
 800c912:	d102      	bne.n	800c91a <__gethex+0xae>
 800c914:	1b2d      	subs	r5, r5, r4
 800c916:	00af      	lsls	r7, r5, #2
 800c918:	e003      	b.n	800c922 <__gethex+0xb6>
 800c91a:	3401      	adds	r4, #1
 800c91c:	e7f5      	b.n	800c90a <__gethex+0x9e>
 800c91e:	2d00      	cmp	r5, #0
 800c920:	d1f8      	bne.n	800c914 <__gethex+0xa8>
 800c922:	2220      	movs	r2, #32
 800c924:	7823      	ldrb	r3, [r4, #0]
 800c926:	0026      	movs	r6, r4
 800c928:	4393      	bics	r3, r2
 800c92a:	2b50      	cmp	r3, #80	; 0x50
 800c92c:	d11d      	bne.n	800c96a <__gethex+0xfe>
 800c92e:	7863      	ldrb	r3, [r4, #1]
 800c930:	2b2b      	cmp	r3, #43	; 0x2b
 800c932:	d02c      	beq.n	800c98e <__gethex+0x122>
 800c934:	2b2d      	cmp	r3, #45	; 0x2d
 800c936:	d02e      	beq.n	800c996 <__gethex+0x12a>
 800c938:	2300      	movs	r3, #0
 800c93a:	1c66      	adds	r6, r4, #1
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	7830      	ldrb	r0, [r6, #0]
 800c940:	f7ff ff7f 	bl	800c842 <__hexdig_fun>
 800c944:	1e43      	subs	r3, r0, #1
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b18      	cmp	r3, #24
 800c94a:	d82b      	bhi.n	800c9a4 <__gethex+0x138>
 800c94c:	3810      	subs	r0, #16
 800c94e:	0005      	movs	r5, r0
 800c950:	7870      	ldrb	r0, [r6, #1]
 800c952:	f7ff ff76 	bl	800c842 <__hexdig_fun>
 800c956:	1e43      	subs	r3, r0, #1
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	3601      	adds	r6, #1
 800c95c:	2b18      	cmp	r3, #24
 800c95e:	d91c      	bls.n	800c99a <__gethex+0x12e>
 800c960:	9b04      	ldr	r3, [sp, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d000      	beq.n	800c968 <__gethex+0xfc>
 800c966:	426d      	negs	r5, r5
 800c968:	197f      	adds	r7, r7, r5
 800c96a:	9b06      	ldr	r3, [sp, #24]
 800c96c:	601e      	str	r6, [r3, #0]
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d019      	beq.n	800c9a8 <__gethex+0x13c>
 800c974:	2600      	movs	r6, #0
 800c976:	9b05      	ldr	r3, [sp, #20]
 800c978:	42b3      	cmp	r3, r6
 800c97a:	d100      	bne.n	800c97e <__gethex+0x112>
 800c97c:	3606      	adds	r6, #6
 800c97e:	0030      	movs	r0, r6
 800c980:	b009      	add	sp, #36	; 0x24
 800c982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c984:	2301      	movs	r3, #1
 800c986:	2700      	movs	r7, #0
 800c988:	9c00      	ldr	r4, [sp, #0]
 800c98a:	9302      	str	r3, [sp, #8]
 800c98c:	e7c9      	b.n	800c922 <__gethex+0xb6>
 800c98e:	2300      	movs	r3, #0
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	1ca6      	adds	r6, r4, #2
 800c994:	e7d3      	b.n	800c93e <__gethex+0xd2>
 800c996:	2301      	movs	r3, #1
 800c998:	e7fa      	b.n	800c990 <__gethex+0x124>
 800c99a:	230a      	movs	r3, #10
 800c99c:	435d      	muls	r5, r3
 800c99e:	182d      	adds	r5, r5, r0
 800c9a0:	3d10      	subs	r5, #16
 800c9a2:	e7d5      	b.n	800c950 <__gethex+0xe4>
 800c9a4:	0026      	movs	r6, r4
 800c9a6:	e7e0      	b.n	800c96a <__gethex+0xfe>
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	9902      	ldr	r1, [sp, #8]
 800c9ac:	1ae3      	subs	r3, r4, r3
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	2b07      	cmp	r3, #7
 800c9b2:	dc0a      	bgt.n	800c9ca <__gethex+0x15e>
 800c9b4:	9803      	ldr	r0, [sp, #12]
 800c9b6:	f000 fa5d 	bl	800ce74 <_Balloc>
 800c9ba:	1e05      	subs	r5, r0, #0
 800c9bc:	d108      	bne.n	800c9d0 <__gethex+0x164>
 800c9be:	002a      	movs	r2, r5
 800c9c0:	21e4      	movs	r1, #228	; 0xe4
 800c9c2:	4b5f      	ldr	r3, [pc, #380]	; (800cb40 <__gethex+0x2d4>)
 800c9c4:	485f      	ldr	r0, [pc, #380]	; (800cb44 <__gethex+0x2d8>)
 800c9c6:	f003 fd19 	bl	80103fc <__assert_func>
 800c9ca:	3101      	adds	r1, #1
 800c9cc:	105b      	asrs	r3, r3, #1
 800c9ce:	e7ef      	b.n	800c9b0 <__gethex+0x144>
 800c9d0:	0003      	movs	r3, r0
 800c9d2:	3314      	adds	r3, #20
 800c9d4:	9302      	str	r3, [sp, #8]
 800c9d6:	9305      	str	r3, [sp, #20]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	001e      	movs	r6, r3
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	9b00      	ldr	r3, [sp, #0]
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	d33f      	bcc.n	800ca64 <__gethex+0x1f8>
 800c9e4:	9c05      	ldr	r4, [sp, #20]
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	c440      	stmia	r4!, {r6}
 800c9ea:	1ae4      	subs	r4, r4, r3
 800c9ec:	10a4      	asrs	r4, r4, #2
 800c9ee:	0030      	movs	r0, r6
 800c9f0:	612c      	str	r4, [r5, #16]
 800c9f2:	f000 fb01 	bl	800cff8 <__hi0bits>
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	0164      	lsls	r4, r4, #5
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	1a26      	subs	r6, r4, r0
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	429e      	cmp	r6, r3
 800ca02:	dd51      	ble.n	800caa8 <__gethex+0x23c>
 800ca04:	1af6      	subs	r6, r6, r3
 800ca06:	0031      	movs	r1, r6
 800ca08:	0028      	movs	r0, r5
 800ca0a:	f000 fe7b 	bl	800d704 <__any_on>
 800ca0e:	1e04      	subs	r4, r0, #0
 800ca10:	d016      	beq.n	800ca40 <__gethex+0x1d4>
 800ca12:	2401      	movs	r4, #1
 800ca14:	231f      	movs	r3, #31
 800ca16:	0020      	movs	r0, r4
 800ca18:	1e72      	subs	r2, r6, #1
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	4098      	lsls	r0, r3
 800ca1e:	0003      	movs	r3, r0
 800ca20:	1151      	asrs	r1, r2, #5
 800ca22:	9802      	ldr	r0, [sp, #8]
 800ca24:	0089      	lsls	r1, r1, #2
 800ca26:	5809      	ldr	r1, [r1, r0]
 800ca28:	4219      	tst	r1, r3
 800ca2a:	d009      	beq.n	800ca40 <__gethex+0x1d4>
 800ca2c:	42a2      	cmp	r2, r4
 800ca2e:	dd06      	ble.n	800ca3e <__gethex+0x1d2>
 800ca30:	0028      	movs	r0, r5
 800ca32:	1eb1      	subs	r1, r6, #2
 800ca34:	f000 fe66 	bl	800d704 <__any_on>
 800ca38:	3402      	adds	r4, #2
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d100      	bne.n	800ca40 <__gethex+0x1d4>
 800ca3e:	2402      	movs	r4, #2
 800ca40:	0031      	movs	r1, r6
 800ca42:	0028      	movs	r0, r5
 800ca44:	f7ff fea8 	bl	800c798 <rshift>
 800ca48:	19bf      	adds	r7, r7, r6
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	42bb      	cmp	r3, r7
 800ca50:	da3a      	bge.n	800cac8 <__gethex+0x25c>
 800ca52:	0029      	movs	r1, r5
 800ca54:	9803      	ldr	r0, [sp, #12]
 800ca56:	f000 fa35 	bl	800cec4 <_Bfree>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca5e:	26a3      	movs	r6, #163	; 0xa3
 800ca60:	6013      	str	r3, [r2, #0]
 800ca62:	e78c      	b.n	800c97e <__gethex+0x112>
 800ca64:	3c01      	subs	r4, #1
 800ca66:	7823      	ldrb	r3, [r4, #0]
 800ca68:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6a:	d012      	beq.n	800ca92 <__gethex+0x226>
 800ca6c:	9b04      	ldr	r3, [sp, #16]
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d104      	bne.n	800ca7c <__gethex+0x210>
 800ca72:	9b05      	ldr	r3, [sp, #20]
 800ca74:	c340      	stmia	r3!, {r6}
 800ca76:	2600      	movs	r6, #0
 800ca78:	9305      	str	r3, [sp, #20]
 800ca7a:	9604      	str	r6, [sp, #16]
 800ca7c:	7820      	ldrb	r0, [r4, #0]
 800ca7e:	f7ff fee0 	bl	800c842 <__hexdig_fun>
 800ca82:	230f      	movs	r3, #15
 800ca84:	4018      	ands	r0, r3
 800ca86:	9b04      	ldr	r3, [sp, #16]
 800ca88:	4098      	lsls	r0, r3
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4306      	orrs	r6, r0
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	e7a5      	b.n	800c9de <__gethex+0x172>
 800ca92:	9b00      	ldr	r3, [sp, #0]
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d8e9      	bhi.n	800ca6c <__gethex+0x200>
 800ca98:	2201      	movs	r2, #1
 800ca9a:	0020      	movs	r0, r4
 800ca9c:	4927      	ldr	r1, [pc, #156]	; (800cb3c <__gethex+0x2d0>)
 800ca9e:	f7ff fc71 	bl	800c384 <strncmp>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d1e2      	bne.n	800ca6c <__gethex+0x200>
 800caa6:	e79a      	b.n	800c9de <__gethex+0x172>
 800caa8:	9b00      	ldr	r3, [sp, #0]
 800caaa:	2400      	movs	r4, #0
 800caac:	429e      	cmp	r6, r3
 800caae:	dacc      	bge.n	800ca4a <__gethex+0x1de>
 800cab0:	1b9e      	subs	r6, r3, r6
 800cab2:	0029      	movs	r1, r5
 800cab4:	0032      	movs	r2, r6
 800cab6:	9803      	ldr	r0, [sp, #12]
 800cab8:	f000 fbf0 	bl	800d29c <__lshift>
 800cabc:	0003      	movs	r3, r0
 800cabe:	3314      	adds	r3, #20
 800cac0:	0005      	movs	r5, r0
 800cac2:	1bbf      	subs	r7, r7, r6
 800cac4:	9302      	str	r3, [sp, #8]
 800cac6:	e7c0      	b.n	800ca4a <__gethex+0x1de>
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	685e      	ldr	r6, [r3, #4]
 800cacc:	42be      	cmp	r6, r7
 800cace:	dd70      	ble.n	800cbb2 <__gethex+0x346>
 800cad0:	9b00      	ldr	r3, [sp, #0]
 800cad2:	1bf6      	subs	r6, r6, r7
 800cad4:	42b3      	cmp	r3, r6
 800cad6:	dc37      	bgt.n	800cb48 <__gethex+0x2dc>
 800cad8:	9b01      	ldr	r3, [sp, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d024      	beq.n	800cb2a <__gethex+0x2be>
 800cae0:	2b03      	cmp	r3, #3
 800cae2:	d026      	beq.n	800cb32 <__gethex+0x2c6>
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d117      	bne.n	800cb18 <__gethex+0x2ac>
 800cae8:	9b00      	ldr	r3, [sp, #0]
 800caea:	42b3      	cmp	r3, r6
 800caec:	d114      	bne.n	800cb18 <__gethex+0x2ac>
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d10b      	bne.n	800cb0a <__gethex+0x29e>
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	9a07      	ldr	r2, [sp, #28]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	2662      	movs	r6, #98	; 0x62
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	2301      	movs	r3, #1
 800cafe:	9a02      	ldr	r2, [sp, #8]
 800cb00:	612b      	str	r3, [r5, #16]
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb06:	601d      	str	r5, [r3, #0]
 800cb08:	e739      	b.n	800c97e <__gethex+0x112>
 800cb0a:	9900      	ldr	r1, [sp, #0]
 800cb0c:	0028      	movs	r0, r5
 800cb0e:	3901      	subs	r1, #1
 800cb10:	f000 fdf8 	bl	800d704 <__any_on>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d1ec      	bne.n	800caf2 <__gethex+0x286>
 800cb18:	0029      	movs	r1, r5
 800cb1a:	9803      	ldr	r0, [sp, #12]
 800cb1c:	f000 f9d2 	bl	800cec4 <_Bfree>
 800cb20:	2300      	movs	r3, #0
 800cb22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb24:	2650      	movs	r6, #80	; 0x50
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	e729      	b.n	800c97e <__gethex+0x112>
 800cb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1f3      	bne.n	800cb18 <__gethex+0x2ac>
 800cb30:	e7df      	b.n	800caf2 <__gethex+0x286>
 800cb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1dc      	bne.n	800caf2 <__gethex+0x286>
 800cb38:	e7ee      	b.n	800cb18 <__gethex+0x2ac>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	080148a0 	.word	0x080148a0
 800cb40:	08014a01 	.word	0x08014a01
 800cb44:	08014a12 	.word	0x08014a12
 800cb48:	1e77      	subs	r7, r6, #1
 800cb4a:	2c00      	cmp	r4, #0
 800cb4c:	d12f      	bne.n	800cbae <__gethex+0x342>
 800cb4e:	2f00      	cmp	r7, #0
 800cb50:	d004      	beq.n	800cb5c <__gethex+0x2f0>
 800cb52:	0039      	movs	r1, r7
 800cb54:	0028      	movs	r0, r5
 800cb56:	f000 fdd5 	bl	800d704 <__any_on>
 800cb5a:	0004      	movs	r4, r0
 800cb5c:	231f      	movs	r3, #31
 800cb5e:	117a      	asrs	r2, r7, #5
 800cb60:	401f      	ands	r7, r3
 800cb62:	3b1e      	subs	r3, #30
 800cb64:	40bb      	lsls	r3, r7
 800cb66:	9902      	ldr	r1, [sp, #8]
 800cb68:	0092      	lsls	r2, r2, #2
 800cb6a:	5852      	ldr	r2, [r2, r1]
 800cb6c:	421a      	tst	r2, r3
 800cb6e:	d001      	beq.n	800cb74 <__gethex+0x308>
 800cb70:	2302      	movs	r3, #2
 800cb72:	431c      	orrs	r4, r3
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	0031      	movs	r1, r6
 800cb78:	1b9b      	subs	r3, r3, r6
 800cb7a:	2602      	movs	r6, #2
 800cb7c:	0028      	movs	r0, r5
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	f7ff fe0a 	bl	800c798 <rshift>
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	685f      	ldr	r7, [r3, #4]
 800cb88:	2c00      	cmp	r4, #0
 800cb8a:	d041      	beq.n	800cc10 <__gethex+0x3a4>
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d010      	beq.n	800cbb6 <__gethex+0x34a>
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d012      	beq.n	800cbbe <__gethex+0x352>
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d106      	bne.n	800cbaa <__gethex+0x33e>
 800cb9c:	07a2      	lsls	r2, r4, #30
 800cb9e:	d504      	bpl.n	800cbaa <__gethex+0x33e>
 800cba0:	9a02      	ldr	r2, [sp, #8]
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	4314      	orrs	r4, r2
 800cba6:	421c      	tst	r4, r3
 800cba8:	d10c      	bne.n	800cbc4 <__gethex+0x358>
 800cbaa:	2310      	movs	r3, #16
 800cbac:	e02f      	b.n	800cc0e <__gethex+0x3a2>
 800cbae:	2401      	movs	r4, #1
 800cbb0:	e7d4      	b.n	800cb5c <__gethex+0x2f0>
 800cbb2:	2601      	movs	r6, #1
 800cbb4:	e7e8      	b.n	800cb88 <__gethex+0x31c>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d0f2      	beq.n	800cbaa <__gethex+0x33e>
 800cbc4:	692b      	ldr	r3, [r5, #16]
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	9302      	str	r3, [sp, #8]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	9304      	str	r3, [sp, #16]
 800cbce:	002b      	movs	r3, r5
 800cbd0:	9a04      	ldr	r2, [sp, #16]
 800cbd2:	3314      	adds	r3, #20
 800cbd4:	1899      	adds	r1, r3, r2
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	1c54      	adds	r4, r2, #1
 800cbda:	d01e      	beq.n	800cc1a <__gethex+0x3ae>
 800cbdc:	3201      	adds	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	002b      	movs	r3, r5
 800cbe2:	3314      	adds	r3, #20
 800cbe4:	2e02      	cmp	r6, #2
 800cbe6:	d141      	bne.n	800cc6c <__gethex+0x400>
 800cbe8:	9a01      	ldr	r2, [sp, #4]
 800cbea:	9900      	ldr	r1, [sp, #0]
 800cbec:	6812      	ldr	r2, [r2, #0]
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	428a      	cmp	r2, r1
 800cbf2:	d10b      	bne.n	800cc0c <__gethex+0x3a0>
 800cbf4:	221f      	movs	r2, #31
 800cbf6:	9800      	ldr	r0, [sp, #0]
 800cbf8:	1149      	asrs	r1, r1, #5
 800cbfa:	4002      	ands	r2, r0
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	0004      	movs	r4, r0
 800cc00:	4094      	lsls	r4, r2
 800cc02:	0089      	lsls	r1, r1, #2
 800cc04:	58cb      	ldr	r3, [r1, r3]
 800cc06:	4223      	tst	r3, r4
 800cc08:	d000      	beq.n	800cc0c <__gethex+0x3a0>
 800cc0a:	2601      	movs	r6, #1
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	431e      	orrs	r6, r3
 800cc10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc12:	601d      	str	r5, [r3, #0]
 800cc14:	9b07      	ldr	r3, [sp, #28]
 800cc16:	601f      	str	r7, [r3, #0]
 800cc18:	e6b1      	b.n	800c97e <__gethex+0x112>
 800cc1a:	c301      	stmia	r3!, {r0}
 800cc1c:	4299      	cmp	r1, r3
 800cc1e:	d8da      	bhi.n	800cbd6 <__gethex+0x36a>
 800cc20:	68ab      	ldr	r3, [r5, #8]
 800cc22:	9a02      	ldr	r2, [sp, #8]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	db18      	blt.n	800cc5a <__gethex+0x3ee>
 800cc28:	6869      	ldr	r1, [r5, #4]
 800cc2a:	9803      	ldr	r0, [sp, #12]
 800cc2c:	3101      	adds	r1, #1
 800cc2e:	f000 f921 	bl	800ce74 <_Balloc>
 800cc32:	1e04      	subs	r4, r0, #0
 800cc34:	d104      	bne.n	800cc40 <__gethex+0x3d4>
 800cc36:	0022      	movs	r2, r4
 800cc38:	2184      	movs	r1, #132	; 0x84
 800cc3a:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <__gethex+0x440>)
 800cc3c:	481c      	ldr	r0, [pc, #112]	; (800ccb0 <__gethex+0x444>)
 800cc3e:	e6c2      	b.n	800c9c6 <__gethex+0x15a>
 800cc40:	0029      	movs	r1, r5
 800cc42:	692a      	ldr	r2, [r5, #16]
 800cc44:	310c      	adds	r1, #12
 800cc46:	3202      	adds	r2, #2
 800cc48:	0092      	lsls	r2, r2, #2
 800cc4a:	300c      	adds	r0, #12
 800cc4c:	f7ff fc77 	bl	800c53e <memcpy>
 800cc50:	0029      	movs	r1, r5
 800cc52:	9803      	ldr	r0, [sp, #12]
 800cc54:	f000 f936 	bl	800cec4 <_Bfree>
 800cc58:	0025      	movs	r5, r4
 800cc5a:	692b      	ldr	r3, [r5, #16]
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	612a      	str	r2, [r5, #16]
 800cc60:	2201      	movs	r2, #1
 800cc62:	3304      	adds	r3, #4
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	18eb      	adds	r3, r5, r3
 800cc68:	605a      	str	r2, [r3, #4]
 800cc6a:	e7b9      	b.n	800cbe0 <__gethex+0x374>
 800cc6c:	692a      	ldr	r2, [r5, #16]
 800cc6e:	9902      	ldr	r1, [sp, #8]
 800cc70:	428a      	cmp	r2, r1
 800cc72:	dd09      	ble.n	800cc88 <__gethex+0x41c>
 800cc74:	2101      	movs	r1, #1
 800cc76:	0028      	movs	r0, r5
 800cc78:	f7ff fd8e 	bl	800c798 <rshift>
 800cc7c:	9b01      	ldr	r3, [sp, #4]
 800cc7e:	3701      	adds	r7, #1
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	42bb      	cmp	r3, r7
 800cc84:	dac1      	bge.n	800cc0a <__gethex+0x39e>
 800cc86:	e6e4      	b.n	800ca52 <__gethex+0x1e6>
 800cc88:	221f      	movs	r2, #31
 800cc8a:	9c00      	ldr	r4, [sp, #0]
 800cc8c:	9900      	ldr	r1, [sp, #0]
 800cc8e:	2601      	movs	r6, #1
 800cc90:	4014      	ands	r4, r2
 800cc92:	4211      	tst	r1, r2
 800cc94:	d0ba      	beq.n	800cc0c <__gethex+0x3a0>
 800cc96:	9a04      	ldr	r2, [sp, #16]
 800cc98:	189b      	adds	r3, r3, r2
 800cc9a:	3b04      	subs	r3, #4
 800cc9c:	6818      	ldr	r0, [r3, #0]
 800cc9e:	f000 f9ab 	bl	800cff8 <__hi0bits>
 800cca2:	2320      	movs	r3, #32
 800cca4:	1b1b      	subs	r3, r3, r4
 800cca6:	4298      	cmp	r0, r3
 800cca8:	dbe4      	blt.n	800cc74 <__gethex+0x408>
 800ccaa:	e7af      	b.n	800cc0c <__gethex+0x3a0>
 800ccac:	08014a01 	.word	0x08014a01
 800ccb0:	08014a12 	.word	0x08014a12

0800ccb4 <L_shift>:
 800ccb4:	2308      	movs	r3, #8
 800ccb6:	b570      	push	{r4, r5, r6, lr}
 800ccb8:	2520      	movs	r5, #32
 800ccba:	1a9a      	subs	r2, r3, r2
 800ccbc:	0092      	lsls	r2, r2, #2
 800ccbe:	1aad      	subs	r5, r5, r2
 800ccc0:	6843      	ldr	r3, [r0, #4]
 800ccc2:	6804      	ldr	r4, [r0, #0]
 800ccc4:	001e      	movs	r6, r3
 800ccc6:	40ae      	lsls	r6, r5
 800ccc8:	40d3      	lsrs	r3, r2
 800ccca:	4334      	orrs	r4, r6
 800cccc:	6004      	str	r4, [r0, #0]
 800ccce:	6043      	str	r3, [r0, #4]
 800ccd0:	3004      	adds	r0, #4
 800ccd2:	4288      	cmp	r0, r1
 800ccd4:	d3f4      	bcc.n	800ccc0 <L_shift+0xc>
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}

0800ccd8 <__match>:
 800ccd8:	b530      	push	{r4, r5, lr}
 800ccda:	6803      	ldr	r3, [r0, #0]
 800ccdc:	780c      	ldrb	r4, [r1, #0]
 800ccde:	3301      	adds	r3, #1
 800cce0:	2c00      	cmp	r4, #0
 800cce2:	d102      	bne.n	800ccea <__match+0x12>
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	2001      	movs	r0, #1
 800cce8:	bd30      	pop	{r4, r5, pc}
 800ccea:	781a      	ldrb	r2, [r3, #0]
 800ccec:	0015      	movs	r5, r2
 800ccee:	3d41      	subs	r5, #65	; 0x41
 800ccf0:	2d19      	cmp	r5, #25
 800ccf2:	d800      	bhi.n	800ccf6 <__match+0x1e>
 800ccf4:	3220      	adds	r2, #32
 800ccf6:	3101      	adds	r1, #1
 800ccf8:	42a2      	cmp	r2, r4
 800ccfa:	d0ef      	beq.n	800ccdc <__match+0x4>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e7f3      	b.n	800cce8 <__match+0x10>

0800cd00 <__hexnan>:
 800cd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd02:	680b      	ldr	r3, [r1, #0]
 800cd04:	b08b      	sub	sp, #44	; 0x2c
 800cd06:	9201      	str	r2, [sp, #4]
 800cd08:	9901      	ldr	r1, [sp, #4]
 800cd0a:	115a      	asrs	r2, r3, #5
 800cd0c:	0092      	lsls	r2, r2, #2
 800cd0e:	188a      	adds	r2, r1, r2
 800cd10:	9202      	str	r2, [sp, #8]
 800cd12:	0019      	movs	r1, r3
 800cd14:	221f      	movs	r2, #31
 800cd16:	4011      	ands	r1, r2
 800cd18:	9008      	str	r0, [sp, #32]
 800cd1a:	9106      	str	r1, [sp, #24]
 800cd1c:	4213      	tst	r3, r2
 800cd1e:	d002      	beq.n	800cd26 <__hexnan+0x26>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	3304      	adds	r3, #4
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	9b02      	ldr	r3, [sp, #8]
 800cd28:	2500      	movs	r5, #0
 800cd2a:	1f1f      	subs	r7, r3, #4
 800cd2c:	003e      	movs	r6, r7
 800cd2e:	003c      	movs	r4, r7
 800cd30:	9b08      	ldr	r3, [sp, #32]
 800cd32:	603d      	str	r5, [r7, #0]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9507      	str	r5, [sp, #28]
 800cd38:	9305      	str	r3, [sp, #20]
 800cd3a:	9503      	str	r5, [sp, #12]
 800cd3c:	9b05      	ldr	r3, [sp, #20]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	9309      	str	r3, [sp, #36]	; 0x24
 800cd42:	9b05      	ldr	r3, [sp, #20]
 800cd44:	785b      	ldrb	r3, [r3, #1]
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d028      	beq.n	800cd9e <__hexnan+0x9e>
 800cd4c:	9804      	ldr	r0, [sp, #16]
 800cd4e:	f7ff fd78 	bl	800c842 <__hexdig_fun>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d154      	bne.n	800ce00 <__hexnan+0x100>
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	2b20      	cmp	r3, #32
 800cd5a:	d819      	bhi.n	800cd90 <__hexnan+0x90>
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	9a07      	ldr	r2, [sp, #28]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	dd12      	ble.n	800cd8a <__hexnan+0x8a>
 800cd64:	42b4      	cmp	r4, r6
 800cd66:	d206      	bcs.n	800cd76 <__hexnan+0x76>
 800cd68:	2d07      	cmp	r5, #7
 800cd6a:	dc04      	bgt.n	800cd76 <__hexnan+0x76>
 800cd6c:	002a      	movs	r2, r5
 800cd6e:	0031      	movs	r1, r6
 800cd70:	0020      	movs	r0, r4
 800cd72:	f7ff ff9f 	bl	800ccb4 <L_shift>
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	2508      	movs	r5, #8
 800cd7a:	429c      	cmp	r4, r3
 800cd7c:	d905      	bls.n	800cd8a <__hexnan+0x8a>
 800cd7e:	1f26      	subs	r6, r4, #4
 800cd80:	2500      	movs	r5, #0
 800cd82:	0034      	movs	r4, r6
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	6035      	str	r5, [r6, #0]
 800cd88:	9307      	str	r3, [sp, #28]
 800cd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8c:	9305      	str	r3, [sp, #20]
 800cd8e:	e7d5      	b.n	800cd3c <__hexnan+0x3c>
 800cd90:	9b04      	ldr	r3, [sp, #16]
 800cd92:	2b29      	cmp	r3, #41	; 0x29
 800cd94:	d159      	bne.n	800ce4a <__hexnan+0x14a>
 800cd96:	9b05      	ldr	r3, [sp, #20]
 800cd98:	9a08      	ldr	r2, [sp, #32]
 800cd9a:	3302      	adds	r3, #2
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d052      	beq.n	800ce4a <__hexnan+0x14a>
 800cda4:	42b4      	cmp	r4, r6
 800cda6:	d206      	bcs.n	800cdb6 <__hexnan+0xb6>
 800cda8:	2d07      	cmp	r5, #7
 800cdaa:	dc04      	bgt.n	800cdb6 <__hexnan+0xb6>
 800cdac:	002a      	movs	r2, r5
 800cdae:	0031      	movs	r1, r6
 800cdb0:	0020      	movs	r0, r4
 800cdb2:	f7ff ff7f 	bl	800ccb4 <L_shift>
 800cdb6:	9b01      	ldr	r3, [sp, #4]
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	d935      	bls.n	800ce28 <__hexnan+0x128>
 800cdbc:	001a      	movs	r2, r3
 800cdbe:	0023      	movs	r3, r4
 800cdc0:	cb02      	ldmia	r3!, {r1}
 800cdc2:	c202      	stmia	r2!, {r1}
 800cdc4:	429f      	cmp	r7, r3
 800cdc6:	d2fb      	bcs.n	800cdc0 <__hexnan+0xc0>
 800cdc8:	9b02      	ldr	r3, [sp, #8]
 800cdca:	1c62      	adds	r2, r4, #1
 800cdcc:	1ed9      	subs	r1, r3, #3
 800cdce:	2304      	movs	r3, #4
 800cdd0:	4291      	cmp	r1, r2
 800cdd2:	d305      	bcc.n	800cde0 <__hexnan+0xe0>
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	3b04      	subs	r3, #4
 800cdd8:	1b1b      	subs	r3, r3, r4
 800cdda:	089b      	lsrs	r3, r3, #2
 800cddc:	3301      	adds	r3, #1
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	9a01      	ldr	r2, [sp, #4]
 800cde2:	18d3      	adds	r3, r2, r3
 800cde4:	2200      	movs	r2, #0
 800cde6:	c304      	stmia	r3!, {r2}
 800cde8:	429f      	cmp	r7, r3
 800cdea:	d2fc      	bcs.n	800cde6 <__hexnan+0xe6>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d104      	bne.n	800cdfc <__hexnan+0xfc>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	429f      	cmp	r7, r3
 800cdf6:	d126      	bne.n	800ce46 <__hexnan+0x146>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	2005      	movs	r0, #5
 800cdfe:	e025      	b.n	800ce4c <__hexnan+0x14c>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	3501      	adds	r5, #1
 800ce04:	3301      	adds	r3, #1
 800ce06:	9303      	str	r3, [sp, #12]
 800ce08:	2d08      	cmp	r5, #8
 800ce0a:	dd06      	ble.n	800ce1a <__hexnan+0x11a>
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	d9bb      	bls.n	800cd8a <__hexnan+0x8a>
 800ce12:	2300      	movs	r3, #0
 800ce14:	2501      	movs	r5, #1
 800ce16:	3c04      	subs	r4, #4
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	220f      	movs	r2, #15
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	4010      	ands	r0, r2
 800ce20:	011b      	lsls	r3, r3, #4
 800ce22:	4303      	orrs	r3, r0
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	e7b0      	b.n	800cd8a <__hexnan+0x8a>
 800ce28:	9b06      	ldr	r3, [sp, #24]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0de      	beq.n	800cdec <__hexnan+0xec>
 800ce2e:	2320      	movs	r3, #32
 800ce30:	9a06      	ldr	r2, [sp, #24]
 800ce32:	9902      	ldr	r1, [sp, #8]
 800ce34:	1a9b      	subs	r3, r3, r2
 800ce36:	2201      	movs	r2, #1
 800ce38:	4252      	negs	r2, r2
 800ce3a:	40da      	lsrs	r2, r3
 800ce3c:	3904      	subs	r1, #4
 800ce3e:	680b      	ldr	r3, [r1, #0]
 800ce40:	4013      	ands	r3, r2
 800ce42:	600b      	str	r3, [r1, #0]
 800ce44:	e7d2      	b.n	800cdec <__hexnan+0xec>
 800ce46:	3f04      	subs	r7, #4
 800ce48:	e7d0      	b.n	800cdec <__hexnan+0xec>
 800ce4a:	2004      	movs	r0, #4
 800ce4c:	b00b      	add	sp, #44	; 0x2c
 800ce4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce50 <__ascii_mbtowc>:
 800ce50:	b082      	sub	sp, #8
 800ce52:	2900      	cmp	r1, #0
 800ce54:	d100      	bne.n	800ce58 <__ascii_mbtowc+0x8>
 800ce56:	a901      	add	r1, sp, #4
 800ce58:	1e10      	subs	r0, r2, #0
 800ce5a:	d006      	beq.n	800ce6a <__ascii_mbtowc+0x1a>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d006      	beq.n	800ce6e <__ascii_mbtowc+0x1e>
 800ce60:	7813      	ldrb	r3, [r2, #0]
 800ce62:	600b      	str	r3, [r1, #0]
 800ce64:	7810      	ldrb	r0, [r2, #0]
 800ce66:	1e43      	subs	r3, r0, #1
 800ce68:	4198      	sbcs	r0, r3
 800ce6a:	b002      	add	sp, #8
 800ce6c:	4770      	bx	lr
 800ce6e:	2002      	movs	r0, #2
 800ce70:	4240      	negs	r0, r0
 800ce72:	e7fa      	b.n	800ce6a <__ascii_mbtowc+0x1a>

0800ce74 <_Balloc>:
 800ce74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ce76:	b570      	push	{r4, r5, r6, lr}
 800ce78:	0006      	movs	r6, r0
 800ce7a:	000c      	movs	r4, r1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d012      	beq.n	800cea6 <_Balloc+0x32>
 800ce80:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ce82:	00a2      	lsls	r2, r4, #2
 800ce84:	189b      	adds	r3, r3, r2
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d115      	bne.n	800ceb8 <_Balloc+0x44>
 800ce8c:	2101      	movs	r1, #1
 800ce8e:	000d      	movs	r5, r1
 800ce90:	40a5      	lsls	r5, r4
 800ce92:	1d6a      	adds	r2, r5, #5
 800ce94:	0030      	movs	r0, r6
 800ce96:	0092      	lsls	r2, r2, #2
 800ce98:	f003 face 	bl	8010438 <_calloc_r>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d009      	beq.n	800ceb4 <_Balloc+0x40>
 800cea0:	6044      	str	r4, [r0, #4]
 800cea2:	6085      	str	r5, [r0, #8]
 800cea4:	e00a      	b.n	800cebc <_Balloc+0x48>
 800cea6:	2221      	movs	r2, #33	; 0x21
 800cea8:	2104      	movs	r1, #4
 800ceaa:	f003 fac5 	bl	8010438 <_calloc_r>
 800ceae:	6470      	str	r0, [r6, #68]	; 0x44
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d1e5      	bne.n	800ce80 <_Balloc+0xc>
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	6802      	ldr	r2, [r0, #0]
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	2300      	movs	r3, #0
 800cebe:	6103      	str	r3, [r0, #16]
 800cec0:	60c3      	str	r3, [r0, #12]
 800cec2:	e7f8      	b.n	800ceb6 <_Balloc+0x42>

0800cec4 <_Bfree>:
 800cec4:	2900      	cmp	r1, #0
 800cec6:	d006      	beq.n	800ced6 <_Bfree+0x12>
 800cec8:	684a      	ldr	r2, [r1, #4]
 800ceca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cecc:	0092      	lsls	r2, r2, #2
 800cece:	189b      	adds	r3, r3, r2
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	600a      	str	r2, [r1, #0]
 800ced4:	6019      	str	r1, [r3, #0]
 800ced6:	4770      	bx	lr

0800ced8 <__multadd>:
 800ced8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceda:	000e      	movs	r6, r1
 800cedc:	9001      	str	r0, [sp, #4]
 800cede:	000c      	movs	r4, r1
 800cee0:	001d      	movs	r5, r3
 800cee2:	2000      	movs	r0, #0
 800cee4:	690f      	ldr	r7, [r1, #16]
 800cee6:	3614      	adds	r6, #20
 800cee8:	6833      	ldr	r3, [r6, #0]
 800ceea:	3001      	adds	r0, #1
 800ceec:	b299      	uxth	r1, r3
 800ceee:	4351      	muls	r1, r2
 800cef0:	0c1b      	lsrs	r3, r3, #16
 800cef2:	4353      	muls	r3, r2
 800cef4:	1949      	adds	r1, r1, r5
 800cef6:	0c0d      	lsrs	r5, r1, #16
 800cef8:	195b      	adds	r3, r3, r5
 800cefa:	0c1d      	lsrs	r5, r3, #16
 800cefc:	b289      	uxth	r1, r1
 800cefe:	041b      	lsls	r3, r3, #16
 800cf00:	185b      	adds	r3, r3, r1
 800cf02:	c608      	stmia	r6!, {r3}
 800cf04:	4287      	cmp	r7, r0
 800cf06:	dcef      	bgt.n	800cee8 <__multadd+0x10>
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	d022      	beq.n	800cf52 <__multadd+0x7a>
 800cf0c:	68a3      	ldr	r3, [r4, #8]
 800cf0e:	42bb      	cmp	r3, r7
 800cf10:	dc19      	bgt.n	800cf46 <__multadd+0x6e>
 800cf12:	6861      	ldr	r1, [r4, #4]
 800cf14:	9801      	ldr	r0, [sp, #4]
 800cf16:	3101      	adds	r1, #1
 800cf18:	f7ff ffac 	bl	800ce74 <_Balloc>
 800cf1c:	1e06      	subs	r6, r0, #0
 800cf1e:	d105      	bne.n	800cf2c <__multadd+0x54>
 800cf20:	0032      	movs	r2, r6
 800cf22:	21ba      	movs	r1, #186	; 0xba
 800cf24:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <__multadd+0x80>)
 800cf26:	480d      	ldr	r0, [pc, #52]	; (800cf5c <__multadd+0x84>)
 800cf28:	f003 fa68 	bl	80103fc <__assert_func>
 800cf2c:	0021      	movs	r1, r4
 800cf2e:	6922      	ldr	r2, [r4, #16]
 800cf30:	310c      	adds	r1, #12
 800cf32:	3202      	adds	r2, #2
 800cf34:	0092      	lsls	r2, r2, #2
 800cf36:	300c      	adds	r0, #12
 800cf38:	f7ff fb01 	bl	800c53e <memcpy>
 800cf3c:	0021      	movs	r1, r4
 800cf3e:	9801      	ldr	r0, [sp, #4]
 800cf40:	f7ff ffc0 	bl	800cec4 <_Bfree>
 800cf44:	0034      	movs	r4, r6
 800cf46:	1d3b      	adds	r3, r7, #4
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	18e3      	adds	r3, r4, r3
 800cf4c:	605d      	str	r5, [r3, #4]
 800cf4e:	1c7b      	adds	r3, r7, #1
 800cf50:	6123      	str	r3, [r4, #16]
 800cf52:	0020      	movs	r0, r4
 800cf54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	08014a01 	.word	0x08014a01
 800cf5c:	08014a72 	.word	0x08014a72

0800cf60 <__s2b>:
 800cf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf62:	0006      	movs	r6, r0
 800cf64:	0018      	movs	r0, r3
 800cf66:	000c      	movs	r4, r1
 800cf68:	3008      	adds	r0, #8
 800cf6a:	2109      	movs	r1, #9
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	0015      	movs	r5, r2
 800cf70:	f7f3 f96e 	bl	8000250 <__divsi3>
 800cf74:	2301      	movs	r3, #1
 800cf76:	2100      	movs	r1, #0
 800cf78:	4283      	cmp	r3, r0
 800cf7a:	db0a      	blt.n	800cf92 <__s2b+0x32>
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	f7ff ff79 	bl	800ce74 <_Balloc>
 800cf82:	1e01      	subs	r1, r0, #0
 800cf84:	d108      	bne.n	800cf98 <__s2b+0x38>
 800cf86:	000a      	movs	r2, r1
 800cf88:	4b19      	ldr	r3, [pc, #100]	; (800cff0 <__s2b+0x90>)
 800cf8a:	481a      	ldr	r0, [pc, #104]	; (800cff4 <__s2b+0x94>)
 800cf8c:	31d3      	adds	r1, #211	; 0xd3
 800cf8e:	f003 fa35 	bl	80103fc <__assert_func>
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	3101      	adds	r1, #1
 800cf96:	e7ef      	b.n	800cf78 <__s2b+0x18>
 800cf98:	9b08      	ldr	r3, [sp, #32]
 800cf9a:	6143      	str	r3, [r0, #20]
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	6103      	str	r3, [r0, #16]
 800cfa0:	2d09      	cmp	r5, #9
 800cfa2:	dd18      	ble.n	800cfd6 <__s2b+0x76>
 800cfa4:	0023      	movs	r3, r4
 800cfa6:	3309      	adds	r3, #9
 800cfa8:	001f      	movs	r7, r3
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	1964      	adds	r4, r4, r5
 800cfae:	783b      	ldrb	r3, [r7, #0]
 800cfb0:	220a      	movs	r2, #10
 800cfb2:	0030      	movs	r0, r6
 800cfb4:	3b30      	subs	r3, #48	; 0x30
 800cfb6:	f7ff ff8f 	bl	800ced8 <__multadd>
 800cfba:	3701      	adds	r7, #1
 800cfbc:	0001      	movs	r1, r0
 800cfbe:	42a7      	cmp	r7, r4
 800cfc0:	d1f5      	bne.n	800cfae <__s2b+0x4e>
 800cfc2:	002c      	movs	r4, r5
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	3c08      	subs	r4, #8
 800cfc8:	191c      	adds	r4, r3, r4
 800cfca:	002f      	movs	r7, r5
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	429f      	cmp	r7, r3
 800cfd0:	db04      	blt.n	800cfdc <__s2b+0x7c>
 800cfd2:	0008      	movs	r0, r1
 800cfd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfd6:	2509      	movs	r5, #9
 800cfd8:	340a      	adds	r4, #10
 800cfda:	e7f6      	b.n	800cfca <__s2b+0x6a>
 800cfdc:	1b63      	subs	r3, r4, r5
 800cfde:	5ddb      	ldrb	r3, [r3, r7]
 800cfe0:	220a      	movs	r2, #10
 800cfe2:	0030      	movs	r0, r6
 800cfe4:	3b30      	subs	r3, #48	; 0x30
 800cfe6:	f7ff ff77 	bl	800ced8 <__multadd>
 800cfea:	3701      	adds	r7, #1
 800cfec:	0001      	movs	r1, r0
 800cfee:	e7ed      	b.n	800cfcc <__s2b+0x6c>
 800cff0:	08014a01 	.word	0x08014a01
 800cff4:	08014a72 	.word	0x08014a72

0800cff8 <__hi0bits>:
 800cff8:	0003      	movs	r3, r0
 800cffa:	0c02      	lsrs	r2, r0, #16
 800cffc:	2000      	movs	r0, #0
 800cffe:	4282      	cmp	r2, r0
 800d000:	d101      	bne.n	800d006 <__hi0bits+0xe>
 800d002:	041b      	lsls	r3, r3, #16
 800d004:	3010      	adds	r0, #16
 800d006:	0e1a      	lsrs	r2, r3, #24
 800d008:	d101      	bne.n	800d00e <__hi0bits+0x16>
 800d00a:	3008      	adds	r0, #8
 800d00c:	021b      	lsls	r3, r3, #8
 800d00e:	0f1a      	lsrs	r2, r3, #28
 800d010:	d101      	bne.n	800d016 <__hi0bits+0x1e>
 800d012:	3004      	adds	r0, #4
 800d014:	011b      	lsls	r3, r3, #4
 800d016:	0f9a      	lsrs	r2, r3, #30
 800d018:	d101      	bne.n	800d01e <__hi0bits+0x26>
 800d01a:	3002      	adds	r0, #2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	db03      	blt.n	800d02a <__hi0bits+0x32>
 800d022:	3001      	adds	r0, #1
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	d400      	bmi.n	800d02a <__hi0bits+0x32>
 800d028:	2020      	movs	r0, #32
 800d02a:	4770      	bx	lr

0800d02c <__lo0bits>:
 800d02c:	6803      	ldr	r3, [r0, #0]
 800d02e:	0001      	movs	r1, r0
 800d030:	2207      	movs	r2, #7
 800d032:	0018      	movs	r0, r3
 800d034:	4010      	ands	r0, r2
 800d036:	4213      	tst	r3, r2
 800d038:	d00d      	beq.n	800d056 <__lo0bits+0x2a>
 800d03a:	3a06      	subs	r2, #6
 800d03c:	2000      	movs	r0, #0
 800d03e:	4213      	tst	r3, r2
 800d040:	d105      	bne.n	800d04e <__lo0bits+0x22>
 800d042:	3002      	adds	r0, #2
 800d044:	4203      	tst	r3, r0
 800d046:	d003      	beq.n	800d050 <__lo0bits+0x24>
 800d048:	40d3      	lsrs	r3, r2
 800d04a:	0010      	movs	r0, r2
 800d04c:	600b      	str	r3, [r1, #0]
 800d04e:	4770      	bx	lr
 800d050:	089b      	lsrs	r3, r3, #2
 800d052:	600b      	str	r3, [r1, #0]
 800d054:	e7fb      	b.n	800d04e <__lo0bits+0x22>
 800d056:	b29a      	uxth	r2, r3
 800d058:	2a00      	cmp	r2, #0
 800d05a:	d101      	bne.n	800d060 <__lo0bits+0x34>
 800d05c:	2010      	movs	r0, #16
 800d05e:	0c1b      	lsrs	r3, r3, #16
 800d060:	b2da      	uxtb	r2, r3
 800d062:	2a00      	cmp	r2, #0
 800d064:	d101      	bne.n	800d06a <__lo0bits+0x3e>
 800d066:	3008      	adds	r0, #8
 800d068:	0a1b      	lsrs	r3, r3, #8
 800d06a:	071a      	lsls	r2, r3, #28
 800d06c:	d101      	bne.n	800d072 <__lo0bits+0x46>
 800d06e:	3004      	adds	r0, #4
 800d070:	091b      	lsrs	r3, r3, #4
 800d072:	079a      	lsls	r2, r3, #30
 800d074:	d101      	bne.n	800d07a <__lo0bits+0x4e>
 800d076:	3002      	adds	r0, #2
 800d078:	089b      	lsrs	r3, r3, #2
 800d07a:	07da      	lsls	r2, r3, #31
 800d07c:	d4e9      	bmi.n	800d052 <__lo0bits+0x26>
 800d07e:	3001      	adds	r0, #1
 800d080:	085b      	lsrs	r3, r3, #1
 800d082:	d1e6      	bne.n	800d052 <__lo0bits+0x26>
 800d084:	2020      	movs	r0, #32
 800d086:	e7e2      	b.n	800d04e <__lo0bits+0x22>

0800d088 <__i2b>:
 800d088:	b510      	push	{r4, lr}
 800d08a:	000c      	movs	r4, r1
 800d08c:	2101      	movs	r1, #1
 800d08e:	f7ff fef1 	bl	800ce74 <_Balloc>
 800d092:	2800      	cmp	r0, #0
 800d094:	d107      	bne.n	800d0a6 <__i2b+0x1e>
 800d096:	2146      	movs	r1, #70	; 0x46
 800d098:	4c05      	ldr	r4, [pc, #20]	; (800d0b0 <__i2b+0x28>)
 800d09a:	0002      	movs	r2, r0
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <__i2b+0x2c>)
 800d09e:	0020      	movs	r0, r4
 800d0a0:	31ff      	adds	r1, #255	; 0xff
 800d0a2:	f003 f9ab 	bl	80103fc <__assert_func>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	6144      	str	r4, [r0, #20]
 800d0aa:	6103      	str	r3, [r0, #16]
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	46c0      	nop			; (mov r8, r8)
 800d0b0:	08014a72 	.word	0x08014a72
 800d0b4:	08014a01 	.word	0x08014a01

0800d0b8 <__multiply>:
 800d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ba:	0015      	movs	r5, r2
 800d0bc:	690a      	ldr	r2, [r1, #16]
 800d0be:	692b      	ldr	r3, [r5, #16]
 800d0c0:	000c      	movs	r4, r1
 800d0c2:	b08b      	sub	sp, #44	; 0x2c
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	da01      	bge.n	800d0cc <__multiply+0x14>
 800d0c8:	002c      	movs	r4, r5
 800d0ca:	000d      	movs	r5, r1
 800d0cc:	6927      	ldr	r7, [r4, #16]
 800d0ce:	692e      	ldr	r6, [r5, #16]
 800d0d0:	6861      	ldr	r1, [r4, #4]
 800d0d2:	19bb      	adds	r3, r7, r6
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	68a3      	ldr	r3, [r4, #8]
 800d0d8:	19ba      	adds	r2, r7, r6
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	da00      	bge.n	800d0e0 <__multiply+0x28>
 800d0de:	3101      	adds	r1, #1
 800d0e0:	f7ff fec8 	bl	800ce74 <_Balloc>
 800d0e4:	9002      	str	r0, [sp, #8]
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d106      	bne.n	800d0f8 <__multiply+0x40>
 800d0ea:	21b1      	movs	r1, #177	; 0xb1
 800d0ec:	4b48      	ldr	r3, [pc, #288]	; (800d210 <__multiply+0x158>)
 800d0ee:	4849      	ldr	r0, [pc, #292]	; (800d214 <__multiply+0x15c>)
 800d0f0:	9a02      	ldr	r2, [sp, #8]
 800d0f2:	0049      	lsls	r1, r1, #1
 800d0f4:	f003 f982 	bl	80103fc <__assert_func>
 800d0f8:	9b02      	ldr	r3, [sp, #8]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	3314      	adds	r3, #20
 800d0fe:	469c      	mov	ip, r3
 800d100:	19bb      	adds	r3, r7, r6
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4463      	add	r3, ip
 800d106:	9304      	str	r3, [sp, #16]
 800d108:	4663      	mov	r3, ip
 800d10a:	9904      	ldr	r1, [sp, #16]
 800d10c:	428b      	cmp	r3, r1
 800d10e:	d32a      	bcc.n	800d166 <__multiply+0xae>
 800d110:	0023      	movs	r3, r4
 800d112:	00bf      	lsls	r7, r7, #2
 800d114:	3314      	adds	r3, #20
 800d116:	3514      	adds	r5, #20
 800d118:	9308      	str	r3, [sp, #32]
 800d11a:	00b6      	lsls	r6, r6, #2
 800d11c:	19db      	adds	r3, r3, r7
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	19ab      	adds	r3, r5, r6
 800d122:	9309      	str	r3, [sp, #36]	; 0x24
 800d124:	2304      	movs	r3, #4
 800d126:	9306      	str	r3, [sp, #24]
 800d128:	0023      	movs	r3, r4
 800d12a:	9a05      	ldr	r2, [sp, #20]
 800d12c:	3315      	adds	r3, #21
 800d12e:	9501      	str	r5, [sp, #4]
 800d130:	429a      	cmp	r2, r3
 800d132:	d305      	bcc.n	800d140 <__multiply+0x88>
 800d134:	1b13      	subs	r3, r2, r4
 800d136:	3b15      	subs	r3, #21
 800d138:	089b      	lsrs	r3, r3, #2
 800d13a:	3301      	adds	r3, #1
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	9306      	str	r3, [sp, #24]
 800d140:	9b01      	ldr	r3, [sp, #4]
 800d142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d144:	4293      	cmp	r3, r2
 800d146:	d310      	bcc.n	800d16a <__multiply+0xb2>
 800d148:	9b03      	ldr	r3, [sp, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dd05      	ble.n	800d15a <__multiply+0xa2>
 800d14e:	9b04      	ldr	r3, [sp, #16]
 800d150:	3b04      	subs	r3, #4
 800d152:	9304      	str	r3, [sp, #16]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d056      	beq.n	800d208 <__multiply+0x150>
 800d15a:	9b02      	ldr	r3, [sp, #8]
 800d15c:	9a03      	ldr	r2, [sp, #12]
 800d15e:	0018      	movs	r0, r3
 800d160:	611a      	str	r2, [r3, #16]
 800d162:	b00b      	add	sp, #44	; 0x2c
 800d164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d166:	c304      	stmia	r3!, {r2}
 800d168:	e7cf      	b.n	800d10a <__multiply+0x52>
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	b280      	uxth	r0, r0
 800d170:	2800      	cmp	r0, #0
 800d172:	d01e      	beq.n	800d1b2 <__multiply+0xfa>
 800d174:	4667      	mov	r7, ip
 800d176:	2500      	movs	r5, #0
 800d178:	9e08      	ldr	r6, [sp, #32]
 800d17a:	ce02      	ldmia	r6!, {r1}
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	9307      	str	r3, [sp, #28]
 800d180:	b28b      	uxth	r3, r1
 800d182:	4343      	muls	r3, r0
 800d184:	001a      	movs	r2, r3
 800d186:	466b      	mov	r3, sp
 800d188:	8b9b      	ldrh	r3, [r3, #28]
 800d18a:	18d3      	adds	r3, r2, r3
 800d18c:	195b      	adds	r3, r3, r5
 800d18e:	0c0d      	lsrs	r5, r1, #16
 800d190:	4345      	muls	r5, r0
 800d192:	9a07      	ldr	r2, [sp, #28]
 800d194:	0c11      	lsrs	r1, r2, #16
 800d196:	1869      	adds	r1, r5, r1
 800d198:	0c1a      	lsrs	r2, r3, #16
 800d19a:	188a      	adds	r2, r1, r2
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	0c15      	lsrs	r5, r2, #16
 800d1a0:	0412      	lsls	r2, r2, #16
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	9b05      	ldr	r3, [sp, #20]
 800d1a6:	c704      	stmia	r7!, {r2}
 800d1a8:	42b3      	cmp	r3, r6
 800d1aa:	d8e6      	bhi.n	800d17a <__multiply+0xc2>
 800d1ac:	4663      	mov	r3, ip
 800d1ae:	9a06      	ldr	r2, [sp, #24]
 800d1b0:	509d      	str	r5, [r3, r2]
 800d1b2:	9b01      	ldr	r3, [sp, #4]
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	0c00      	lsrs	r0, r0, #16
 800d1b8:	d020      	beq.n	800d1fc <__multiply+0x144>
 800d1ba:	4663      	mov	r3, ip
 800d1bc:	0025      	movs	r5, r4
 800d1be:	4661      	mov	r1, ip
 800d1c0:	2700      	movs	r7, #0
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3514      	adds	r5, #20
 800d1c6:	682a      	ldr	r2, [r5, #0]
 800d1c8:	680e      	ldr	r6, [r1, #0]
 800d1ca:	b292      	uxth	r2, r2
 800d1cc:	4342      	muls	r2, r0
 800d1ce:	0c36      	lsrs	r6, r6, #16
 800d1d0:	1992      	adds	r2, r2, r6
 800d1d2:	19d2      	adds	r2, r2, r7
 800d1d4:	0416      	lsls	r6, r2, #16
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	431e      	orrs	r6, r3
 800d1da:	600e      	str	r6, [r1, #0]
 800d1dc:	cd40      	ldmia	r5!, {r6}
 800d1de:	684b      	ldr	r3, [r1, #4]
 800d1e0:	0c36      	lsrs	r6, r6, #16
 800d1e2:	4346      	muls	r6, r0
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	0c12      	lsrs	r2, r2, #16
 800d1e8:	18f3      	adds	r3, r6, r3
 800d1ea:	189b      	adds	r3, r3, r2
 800d1ec:	9a05      	ldr	r2, [sp, #20]
 800d1ee:	0c1f      	lsrs	r7, r3, #16
 800d1f0:	3104      	adds	r1, #4
 800d1f2:	42aa      	cmp	r2, r5
 800d1f4:	d8e7      	bhi.n	800d1c6 <__multiply+0x10e>
 800d1f6:	4662      	mov	r2, ip
 800d1f8:	9906      	ldr	r1, [sp, #24]
 800d1fa:	5053      	str	r3, [r2, r1]
 800d1fc:	9b01      	ldr	r3, [sp, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	2304      	movs	r3, #4
 800d204:	449c      	add	ip, r3
 800d206:	e79b      	b.n	800d140 <__multiply+0x88>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	9303      	str	r3, [sp, #12]
 800d20e:	e79b      	b.n	800d148 <__multiply+0x90>
 800d210:	08014a01 	.word	0x08014a01
 800d214:	08014a72 	.word	0x08014a72

0800d218 <__pow5mult>:
 800d218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d21a:	2303      	movs	r3, #3
 800d21c:	0015      	movs	r5, r2
 800d21e:	0007      	movs	r7, r0
 800d220:	000e      	movs	r6, r1
 800d222:	401a      	ands	r2, r3
 800d224:	421d      	tst	r5, r3
 800d226:	d008      	beq.n	800d23a <__pow5mult+0x22>
 800d228:	491a      	ldr	r1, [pc, #104]	; (800d294 <__pow5mult+0x7c>)
 800d22a:	3a01      	subs	r2, #1
 800d22c:	0092      	lsls	r2, r2, #2
 800d22e:	5852      	ldr	r2, [r2, r1]
 800d230:	2300      	movs	r3, #0
 800d232:	0031      	movs	r1, r6
 800d234:	f7ff fe50 	bl	800ced8 <__multadd>
 800d238:	0006      	movs	r6, r0
 800d23a:	10ad      	asrs	r5, r5, #2
 800d23c:	d027      	beq.n	800d28e <__pow5mult+0x76>
 800d23e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d240:	2c00      	cmp	r4, #0
 800d242:	d107      	bne.n	800d254 <__pow5mult+0x3c>
 800d244:	0038      	movs	r0, r7
 800d246:	4914      	ldr	r1, [pc, #80]	; (800d298 <__pow5mult+0x80>)
 800d248:	f7ff ff1e 	bl	800d088 <__i2b>
 800d24c:	2300      	movs	r3, #0
 800d24e:	0004      	movs	r4, r0
 800d250:	6438      	str	r0, [r7, #64]	; 0x40
 800d252:	6003      	str	r3, [r0, #0]
 800d254:	2301      	movs	r3, #1
 800d256:	421d      	tst	r5, r3
 800d258:	d00a      	beq.n	800d270 <__pow5mult+0x58>
 800d25a:	0031      	movs	r1, r6
 800d25c:	0022      	movs	r2, r4
 800d25e:	0038      	movs	r0, r7
 800d260:	f7ff ff2a 	bl	800d0b8 <__multiply>
 800d264:	0031      	movs	r1, r6
 800d266:	9001      	str	r0, [sp, #4]
 800d268:	0038      	movs	r0, r7
 800d26a:	f7ff fe2b 	bl	800cec4 <_Bfree>
 800d26e:	9e01      	ldr	r6, [sp, #4]
 800d270:	106d      	asrs	r5, r5, #1
 800d272:	d00c      	beq.n	800d28e <__pow5mult+0x76>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	2800      	cmp	r0, #0
 800d278:	d107      	bne.n	800d28a <__pow5mult+0x72>
 800d27a:	0022      	movs	r2, r4
 800d27c:	0021      	movs	r1, r4
 800d27e:	0038      	movs	r0, r7
 800d280:	f7ff ff1a 	bl	800d0b8 <__multiply>
 800d284:	2300      	movs	r3, #0
 800d286:	6020      	str	r0, [r4, #0]
 800d288:	6003      	str	r3, [r0, #0]
 800d28a:	0004      	movs	r4, r0
 800d28c:	e7e2      	b.n	800d254 <__pow5mult+0x3c>
 800d28e:	0030      	movs	r0, r6
 800d290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d292:	46c0      	nop			; (mov r8, r8)
 800d294:	08014bc0 	.word	0x08014bc0
 800d298:	00000271 	.word	0x00000271

0800d29c <__lshift>:
 800d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29e:	000c      	movs	r4, r1
 800d2a0:	0017      	movs	r7, r2
 800d2a2:	6923      	ldr	r3, [r4, #16]
 800d2a4:	1155      	asrs	r5, r2, #5
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	18eb      	adds	r3, r5, r3
 800d2aa:	9302      	str	r3, [sp, #8]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	6849      	ldr	r1, [r1, #4]
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	9004      	str	r0, [sp, #16]
 800d2b6:	9a01      	ldr	r2, [sp, #4]
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	db10      	blt.n	800d2de <__lshift+0x42>
 800d2bc:	9804      	ldr	r0, [sp, #16]
 800d2be:	f7ff fdd9 	bl	800ce74 <_Balloc>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	0002      	movs	r2, r0
 800d2c6:	0006      	movs	r6, r0
 800d2c8:	0019      	movs	r1, r3
 800d2ca:	3214      	adds	r2, #20
 800d2cc:	4298      	cmp	r0, r3
 800d2ce:	d10c      	bne.n	800d2ea <__lshift+0x4e>
 800d2d0:	31df      	adds	r1, #223	; 0xdf
 800d2d2:	0032      	movs	r2, r6
 800d2d4:	4b26      	ldr	r3, [pc, #152]	; (800d370 <__lshift+0xd4>)
 800d2d6:	4827      	ldr	r0, [pc, #156]	; (800d374 <__lshift+0xd8>)
 800d2d8:	31ff      	adds	r1, #255	; 0xff
 800d2da:	f003 f88f 	bl	80103fc <__assert_func>
 800d2de:	3101      	adds	r1, #1
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	e7e8      	b.n	800d2b6 <__lshift+0x1a>
 800d2e4:	0098      	lsls	r0, r3, #2
 800d2e6:	5011      	str	r1, [r2, r0]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	42ab      	cmp	r3, r5
 800d2ec:	dbfa      	blt.n	800d2e4 <__lshift+0x48>
 800d2ee:	43eb      	mvns	r3, r5
 800d2f0:	17db      	asrs	r3, r3, #31
 800d2f2:	401d      	ands	r5, r3
 800d2f4:	211f      	movs	r1, #31
 800d2f6:	0023      	movs	r3, r4
 800d2f8:	0038      	movs	r0, r7
 800d2fa:	00ad      	lsls	r5, r5, #2
 800d2fc:	1955      	adds	r5, r2, r5
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	3314      	adds	r3, #20
 800d302:	0092      	lsls	r2, r2, #2
 800d304:	4008      	ands	r0, r1
 800d306:	4684      	mov	ip, r0
 800d308:	189a      	adds	r2, r3, r2
 800d30a:	420f      	tst	r7, r1
 800d30c:	d02a      	beq.n	800d364 <__lshift+0xc8>
 800d30e:	3101      	adds	r1, #1
 800d310:	1a09      	subs	r1, r1, r0
 800d312:	9105      	str	r1, [sp, #20]
 800d314:	2100      	movs	r1, #0
 800d316:	9503      	str	r5, [sp, #12]
 800d318:	4667      	mov	r7, ip
 800d31a:	6818      	ldr	r0, [r3, #0]
 800d31c:	40b8      	lsls	r0, r7
 800d31e:	4308      	orrs	r0, r1
 800d320:	9903      	ldr	r1, [sp, #12]
 800d322:	c101      	stmia	r1!, {r0}
 800d324:	9103      	str	r1, [sp, #12]
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	cb02      	ldmia	r3!, {r1}
 800d32a:	40c1      	lsrs	r1, r0
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d8f3      	bhi.n	800d318 <__lshift+0x7c>
 800d330:	0020      	movs	r0, r4
 800d332:	3015      	adds	r0, #21
 800d334:	2304      	movs	r3, #4
 800d336:	4282      	cmp	r2, r0
 800d338:	d304      	bcc.n	800d344 <__lshift+0xa8>
 800d33a:	1b13      	subs	r3, r2, r4
 800d33c:	3b15      	subs	r3, #21
 800d33e:	089b      	lsrs	r3, r3, #2
 800d340:	3301      	adds	r3, #1
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	50e9      	str	r1, [r5, r3]
 800d346:	2900      	cmp	r1, #0
 800d348:	d002      	beq.n	800d350 <__lshift+0xb4>
 800d34a:	9b02      	ldr	r3, [sp, #8]
 800d34c:	3302      	adds	r3, #2
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	9804      	ldr	r0, [sp, #16]
 800d354:	3b01      	subs	r3, #1
 800d356:	0021      	movs	r1, r4
 800d358:	6133      	str	r3, [r6, #16]
 800d35a:	f7ff fdb3 	bl	800cec4 <_Bfree>
 800d35e:	0030      	movs	r0, r6
 800d360:	b007      	add	sp, #28
 800d362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d364:	cb02      	ldmia	r3!, {r1}
 800d366:	c502      	stmia	r5!, {r1}
 800d368:	429a      	cmp	r2, r3
 800d36a:	d8fb      	bhi.n	800d364 <__lshift+0xc8>
 800d36c:	e7f0      	b.n	800d350 <__lshift+0xb4>
 800d36e:	46c0      	nop			; (mov r8, r8)
 800d370:	08014a01 	.word	0x08014a01
 800d374:	08014a72 	.word	0x08014a72

0800d378 <__mcmp>:
 800d378:	b530      	push	{r4, r5, lr}
 800d37a:	690b      	ldr	r3, [r1, #16]
 800d37c:	6904      	ldr	r4, [r0, #16]
 800d37e:	0002      	movs	r2, r0
 800d380:	1ae0      	subs	r0, r4, r3
 800d382:	429c      	cmp	r4, r3
 800d384:	d10e      	bne.n	800d3a4 <__mcmp+0x2c>
 800d386:	3214      	adds	r2, #20
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	3114      	adds	r1, #20
 800d38c:	0014      	movs	r4, r2
 800d38e:	18c9      	adds	r1, r1, r3
 800d390:	18d2      	adds	r2, r2, r3
 800d392:	3a04      	subs	r2, #4
 800d394:	3904      	subs	r1, #4
 800d396:	6815      	ldr	r5, [r2, #0]
 800d398:	680b      	ldr	r3, [r1, #0]
 800d39a:	429d      	cmp	r5, r3
 800d39c:	d003      	beq.n	800d3a6 <__mcmp+0x2e>
 800d39e:	2001      	movs	r0, #1
 800d3a0:	429d      	cmp	r5, r3
 800d3a2:	d303      	bcc.n	800d3ac <__mcmp+0x34>
 800d3a4:	bd30      	pop	{r4, r5, pc}
 800d3a6:	4294      	cmp	r4, r2
 800d3a8:	d3f3      	bcc.n	800d392 <__mcmp+0x1a>
 800d3aa:	e7fb      	b.n	800d3a4 <__mcmp+0x2c>
 800d3ac:	4240      	negs	r0, r0
 800d3ae:	e7f9      	b.n	800d3a4 <__mcmp+0x2c>

0800d3b0 <__mdiff>:
 800d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b2:	000e      	movs	r6, r1
 800d3b4:	0007      	movs	r7, r0
 800d3b6:	0011      	movs	r1, r2
 800d3b8:	0030      	movs	r0, r6
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	0014      	movs	r4, r2
 800d3be:	f7ff ffdb 	bl	800d378 <__mcmp>
 800d3c2:	1e05      	subs	r5, r0, #0
 800d3c4:	d110      	bne.n	800d3e8 <__mdiff+0x38>
 800d3c6:	0001      	movs	r1, r0
 800d3c8:	0038      	movs	r0, r7
 800d3ca:	f7ff fd53 	bl	800ce74 <_Balloc>
 800d3ce:	1e02      	subs	r2, r0, #0
 800d3d0:	d104      	bne.n	800d3dc <__mdiff+0x2c>
 800d3d2:	4b3f      	ldr	r3, [pc, #252]	; (800d4d0 <__mdiff+0x120>)
 800d3d4:	483f      	ldr	r0, [pc, #252]	; (800d4d4 <__mdiff+0x124>)
 800d3d6:	4940      	ldr	r1, [pc, #256]	; (800d4d8 <__mdiff+0x128>)
 800d3d8:	f003 f810 	bl	80103fc <__assert_func>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	6145      	str	r5, [r0, #20]
 800d3e0:	6103      	str	r3, [r0, #16]
 800d3e2:	0010      	movs	r0, r2
 800d3e4:	b007      	add	sp, #28
 800d3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	db04      	blt.n	800d3fa <__mdiff+0x4a>
 800d3f0:	0023      	movs	r3, r4
 800d3f2:	0034      	movs	r4, r6
 800d3f4:	001e      	movs	r6, r3
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	0038      	movs	r0, r7
 800d3fc:	6861      	ldr	r1, [r4, #4]
 800d3fe:	f7ff fd39 	bl	800ce74 <_Balloc>
 800d402:	1e02      	subs	r2, r0, #0
 800d404:	d103      	bne.n	800d40e <__mdiff+0x5e>
 800d406:	4b32      	ldr	r3, [pc, #200]	; (800d4d0 <__mdiff+0x120>)
 800d408:	4832      	ldr	r0, [pc, #200]	; (800d4d4 <__mdiff+0x124>)
 800d40a:	4934      	ldr	r1, [pc, #208]	; (800d4dc <__mdiff+0x12c>)
 800d40c:	e7e4      	b.n	800d3d8 <__mdiff+0x28>
 800d40e:	9b01      	ldr	r3, [sp, #4]
 800d410:	2700      	movs	r7, #0
 800d412:	60c3      	str	r3, [r0, #12]
 800d414:	6920      	ldr	r0, [r4, #16]
 800d416:	3414      	adds	r4, #20
 800d418:	0083      	lsls	r3, r0, #2
 800d41a:	18e3      	adds	r3, r4, r3
 800d41c:	0021      	movs	r1, r4
 800d41e:	9401      	str	r4, [sp, #4]
 800d420:	0034      	movs	r4, r6
 800d422:	9302      	str	r3, [sp, #8]
 800d424:	6933      	ldr	r3, [r6, #16]
 800d426:	3414      	adds	r4, #20
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	18e3      	adds	r3, r4, r3
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	0013      	movs	r3, r2
 800d430:	3314      	adds	r3, #20
 800d432:	469c      	mov	ip, r3
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	9104      	str	r1, [sp, #16]
 800d438:	9b04      	ldr	r3, [sp, #16]
 800d43a:	cc02      	ldmia	r4!, {r1}
 800d43c:	cb20      	ldmia	r3!, {r5}
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	b2ab      	uxth	r3, r5
 800d442:	19df      	adds	r7, r3, r7
 800d444:	b28b      	uxth	r3, r1
 800d446:	1afb      	subs	r3, r7, r3
 800d448:	0c09      	lsrs	r1, r1, #16
 800d44a:	0c2d      	lsrs	r5, r5, #16
 800d44c:	1a6d      	subs	r5, r5, r1
 800d44e:	1419      	asrs	r1, r3, #16
 800d450:	1869      	adds	r1, r5, r1
 800d452:	b29b      	uxth	r3, r3
 800d454:	140f      	asrs	r7, r1, #16
 800d456:	0409      	lsls	r1, r1, #16
 800d458:	4319      	orrs	r1, r3
 800d45a:	4663      	mov	r3, ip
 800d45c:	c302      	stmia	r3!, {r1}
 800d45e:	469c      	mov	ip, r3
 800d460:	9b03      	ldr	r3, [sp, #12]
 800d462:	42a3      	cmp	r3, r4
 800d464:	d8e8      	bhi.n	800d438 <__mdiff+0x88>
 800d466:	0031      	movs	r1, r6
 800d468:	9c03      	ldr	r4, [sp, #12]
 800d46a:	3115      	adds	r1, #21
 800d46c:	2304      	movs	r3, #4
 800d46e:	428c      	cmp	r4, r1
 800d470:	d304      	bcc.n	800d47c <__mdiff+0xcc>
 800d472:	1ba3      	subs	r3, r4, r6
 800d474:	3b15      	subs	r3, #21
 800d476:	089b      	lsrs	r3, r3, #2
 800d478:	3301      	adds	r3, #1
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	9901      	ldr	r1, [sp, #4]
 800d47e:	18cd      	adds	r5, r1, r3
 800d480:	9905      	ldr	r1, [sp, #20]
 800d482:	002e      	movs	r6, r5
 800d484:	18cb      	adds	r3, r1, r3
 800d486:	469c      	mov	ip, r3
 800d488:	9902      	ldr	r1, [sp, #8]
 800d48a:	428e      	cmp	r6, r1
 800d48c:	d310      	bcc.n	800d4b0 <__mdiff+0x100>
 800d48e:	9e02      	ldr	r6, [sp, #8]
 800d490:	1ee9      	subs	r1, r5, #3
 800d492:	2400      	movs	r4, #0
 800d494:	428e      	cmp	r6, r1
 800d496:	d304      	bcc.n	800d4a2 <__mdiff+0xf2>
 800d498:	0031      	movs	r1, r6
 800d49a:	3103      	adds	r1, #3
 800d49c:	1b49      	subs	r1, r1, r5
 800d49e:	0889      	lsrs	r1, r1, #2
 800d4a0:	008c      	lsls	r4, r1, #2
 800d4a2:	191b      	adds	r3, r3, r4
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	6819      	ldr	r1, [r3, #0]
 800d4a8:	2900      	cmp	r1, #0
 800d4aa:	d00f      	beq.n	800d4cc <__mdiff+0x11c>
 800d4ac:	6110      	str	r0, [r2, #16]
 800d4ae:	e798      	b.n	800d3e2 <__mdiff+0x32>
 800d4b0:	ce02      	ldmia	r6!, {r1}
 800d4b2:	b28c      	uxth	r4, r1
 800d4b4:	19e4      	adds	r4, r4, r7
 800d4b6:	0c0f      	lsrs	r7, r1, #16
 800d4b8:	1421      	asrs	r1, r4, #16
 800d4ba:	1879      	adds	r1, r7, r1
 800d4bc:	b2a4      	uxth	r4, r4
 800d4be:	140f      	asrs	r7, r1, #16
 800d4c0:	0409      	lsls	r1, r1, #16
 800d4c2:	4321      	orrs	r1, r4
 800d4c4:	4664      	mov	r4, ip
 800d4c6:	c402      	stmia	r4!, {r1}
 800d4c8:	46a4      	mov	ip, r4
 800d4ca:	e7dd      	b.n	800d488 <__mdiff+0xd8>
 800d4cc:	3801      	subs	r0, #1
 800d4ce:	e7e9      	b.n	800d4a4 <__mdiff+0xf4>
 800d4d0:	08014a01 	.word	0x08014a01
 800d4d4:	08014a72 	.word	0x08014a72
 800d4d8:	00000237 	.word	0x00000237
 800d4dc:	00000245 	.word	0x00000245

0800d4e0 <__ulp>:
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <__ulp+0x30>)
 800d4e4:	4019      	ands	r1, r3
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <__ulp+0x34>)
 800d4e8:	18c9      	adds	r1, r1, r3
 800d4ea:	4281      	cmp	r1, r0
 800d4ec:	dc06      	bgt.n	800d4fc <__ulp+0x1c>
 800d4ee:	4249      	negs	r1, r1
 800d4f0:	150b      	asrs	r3, r1, #20
 800d4f2:	2b13      	cmp	r3, #19
 800d4f4:	dc03      	bgt.n	800d4fe <__ulp+0x1e>
 800d4f6:	2180      	movs	r1, #128	; 0x80
 800d4f8:	0309      	lsls	r1, r1, #12
 800d4fa:	4119      	asrs	r1, r3
 800d4fc:	4770      	bx	lr
 800d4fe:	3b14      	subs	r3, #20
 800d500:	2001      	movs	r0, #1
 800d502:	2b1e      	cmp	r3, #30
 800d504:	dc02      	bgt.n	800d50c <__ulp+0x2c>
 800d506:	2080      	movs	r0, #128	; 0x80
 800d508:	0600      	lsls	r0, r0, #24
 800d50a:	40d8      	lsrs	r0, r3
 800d50c:	2100      	movs	r1, #0
 800d50e:	e7f5      	b.n	800d4fc <__ulp+0x1c>
 800d510:	7ff00000 	.word	0x7ff00000
 800d514:	fcc00000 	.word	0xfcc00000

0800d518 <__b2d>:
 800d518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d51a:	0006      	movs	r6, r0
 800d51c:	6903      	ldr	r3, [r0, #16]
 800d51e:	3614      	adds	r6, #20
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	18f3      	adds	r3, r6, r3
 800d524:	1f1d      	subs	r5, r3, #4
 800d526:	682c      	ldr	r4, [r5, #0]
 800d528:	000f      	movs	r7, r1
 800d52a:	0020      	movs	r0, r4
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	f7ff fd63 	bl	800cff8 <__hi0bits>
 800d532:	2220      	movs	r2, #32
 800d534:	1a12      	subs	r2, r2, r0
 800d536:	603a      	str	r2, [r7, #0]
 800d538:	0003      	movs	r3, r0
 800d53a:	4a1c      	ldr	r2, [pc, #112]	; (800d5ac <__b2d+0x94>)
 800d53c:	280a      	cmp	r0, #10
 800d53e:	dc15      	bgt.n	800d56c <__b2d+0x54>
 800d540:	210b      	movs	r1, #11
 800d542:	0027      	movs	r7, r4
 800d544:	1a09      	subs	r1, r1, r0
 800d546:	40cf      	lsrs	r7, r1
 800d548:	433a      	orrs	r2, r7
 800d54a:	468c      	mov	ip, r1
 800d54c:	0011      	movs	r1, r2
 800d54e:	2200      	movs	r2, #0
 800d550:	42ae      	cmp	r6, r5
 800d552:	d202      	bcs.n	800d55a <__b2d+0x42>
 800d554:	9a01      	ldr	r2, [sp, #4]
 800d556:	3a08      	subs	r2, #8
 800d558:	6812      	ldr	r2, [r2, #0]
 800d55a:	3315      	adds	r3, #21
 800d55c:	409c      	lsls	r4, r3
 800d55e:	4663      	mov	r3, ip
 800d560:	0027      	movs	r7, r4
 800d562:	40da      	lsrs	r2, r3
 800d564:	4317      	orrs	r7, r2
 800d566:	0038      	movs	r0, r7
 800d568:	b003      	add	sp, #12
 800d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d56c:	2700      	movs	r7, #0
 800d56e:	42ae      	cmp	r6, r5
 800d570:	d202      	bcs.n	800d578 <__b2d+0x60>
 800d572:	9d01      	ldr	r5, [sp, #4]
 800d574:	3d08      	subs	r5, #8
 800d576:	682f      	ldr	r7, [r5, #0]
 800d578:	210b      	movs	r1, #11
 800d57a:	4249      	negs	r1, r1
 800d57c:	468c      	mov	ip, r1
 800d57e:	449c      	add	ip, r3
 800d580:	2b0b      	cmp	r3, #11
 800d582:	d010      	beq.n	800d5a6 <__b2d+0x8e>
 800d584:	4661      	mov	r1, ip
 800d586:	2320      	movs	r3, #32
 800d588:	408c      	lsls	r4, r1
 800d58a:	1a5b      	subs	r3, r3, r1
 800d58c:	0039      	movs	r1, r7
 800d58e:	40d9      	lsrs	r1, r3
 800d590:	430c      	orrs	r4, r1
 800d592:	4322      	orrs	r2, r4
 800d594:	0011      	movs	r1, r2
 800d596:	2200      	movs	r2, #0
 800d598:	42b5      	cmp	r5, r6
 800d59a:	d901      	bls.n	800d5a0 <__b2d+0x88>
 800d59c:	3d04      	subs	r5, #4
 800d59e:	682a      	ldr	r2, [r5, #0]
 800d5a0:	4664      	mov	r4, ip
 800d5a2:	40a7      	lsls	r7, r4
 800d5a4:	e7dd      	b.n	800d562 <__b2d+0x4a>
 800d5a6:	4322      	orrs	r2, r4
 800d5a8:	0011      	movs	r1, r2
 800d5aa:	e7dc      	b.n	800d566 <__b2d+0x4e>
 800d5ac:	3ff00000 	.word	0x3ff00000

0800d5b0 <__d2b>:
 800d5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	0014      	movs	r4, r2
 800d5b6:	001d      	movs	r5, r3
 800d5b8:	9f08      	ldr	r7, [sp, #32]
 800d5ba:	f7ff fc5b 	bl	800ce74 <_Balloc>
 800d5be:	1e06      	subs	r6, r0, #0
 800d5c0:	d105      	bne.n	800d5ce <__d2b+0x1e>
 800d5c2:	0032      	movs	r2, r6
 800d5c4:	4b24      	ldr	r3, [pc, #144]	; (800d658 <__d2b+0xa8>)
 800d5c6:	4825      	ldr	r0, [pc, #148]	; (800d65c <__d2b+0xac>)
 800d5c8:	4925      	ldr	r1, [pc, #148]	; (800d660 <__d2b+0xb0>)
 800d5ca:	f002 ff17 	bl	80103fc <__assert_func>
 800d5ce:	032b      	lsls	r3, r5, #12
 800d5d0:	006d      	lsls	r5, r5, #1
 800d5d2:	0b1b      	lsrs	r3, r3, #12
 800d5d4:	0d6d      	lsrs	r5, r5, #21
 800d5d6:	d125      	bne.n	800d624 <__d2b+0x74>
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	2c00      	cmp	r4, #0
 800d5dc:	d028      	beq.n	800d630 <__d2b+0x80>
 800d5de:	4668      	mov	r0, sp
 800d5e0:	9400      	str	r4, [sp, #0]
 800d5e2:	f7ff fd23 	bl	800d02c <__lo0bits>
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	9900      	ldr	r1, [sp, #0]
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d01e      	beq.n	800d62c <__d2b+0x7c>
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	001c      	movs	r4, r3
 800d5f2:	1a12      	subs	r2, r2, r0
 800d5f4:	4094      	lsls	r4, r2
 800d5f6:	0022      	movs	r2, r4
 800d5f8:	40c3      	lsrs	r3, r0
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	6172      	str	r2, [r6, #20]
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	9c01      	ldr	r4, [sp, #4]
 800d602:	61b4      	str	r4, [r6, #24]
 800d604:	1e63      	subs	r3, r4, #1
 800d606:	419c      	sbcs	r4, r3
 800d608:	3401      	adds	r4, #1
 800d60a:	6134      	str	r4, [r6, #16]
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	d017      	beq.n	800d640 <__d2b+0x90>
 800d610:	2435      	movs	r4, #53	; 0x35
 800d612:	4b14      	ldr	r3, [pc, #80]	; (800d664 <__d2b+0xb4>)
 800d614:	18ed      	adds	r5, r5, r3
 800d616:	182d      	adds	r5, r5, r0
 800d618:	603d      	str	r5, [r7, #0]
 800d61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61c:	1a24      	subs	r4, r4, r0
 800d61e:	601c      	str	r4, [r3, #0]
 800d620:	0030      	movs	r0, r6
 800d622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d624:	2280      	movs	r2, #128	; 0x80
 800d626:	0352      	lsls	r2, r2, #13
 800d628:	4313      	orrs	r3, r2
 800d62a:	e7d5      	b.n	800d5d8 <__d2b+0x28>
 800d62c:	6171      	str	r1, [r6, #20]
 800d62e:	e7e7      	b.n	800d600 <__d2b+0x50>
 800d630:	a801      	add	r0, sp, #4
 800d632:	f7ff fcfb 	bl	800d02c <__lo0bits>
 800d636:	9b01      	ldr	r3, [sp, #4]
 800d638:	2401      	movs	r4, #1
 800d63a:	6173      	str	r3, [r6, #20]
 800d63c:	3020      	adds	r0, #32
 800d63e:	e7e4      	b.n	800d60a <__d2b+0x5a>
 800d640:	4b09      	ldr	r3, [pc, #36]	; (800d668 <__d2b+0xb8>)
 800d642:	18c0      	adds	r0, r0, r3
 800d644:	4b09      	ldr	r3, [pc, #36]	; (800d66c <__d2b+0xbc>)
 800d646:	6038      	str	r0, [r7, #0]
 800d648:	18e3      	adds	r3, r4, r3
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	18f3      	adds	r3, r6, r3
 800d64e:	6958      	ldr	r0, [r3, #20]
 800d650:	f7ff fcd2 	bl	800cff8 <__hi0bits>
 800d654:	0164      	lsls	r4, r4, #5
 800d656:	e7e0      	b.n	800d61a <__d2b+0x6a>
 800d658:	08014a01 	.word	0x08014a01
 800d65c:	08014a72 	.word	0x08014a72
 800d660:	0000030f 	.word	0x0000030f
 800d664:	fffffbcd 	.word	0xfffffbcd
 800d668:	fffffbce 	.word	0xfffffbce
 800d66c:	3fffffff 	.word	0x3fffffff

0800d670 <__ratio>:
 800d670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d672:	b087      	sub	sp, #28
 800d674:	000f      	movs	r7, r1
 800d676:	a904      	add	r1, sp, #16
 800d678:	0006      	movs	r6, r0
 800d67a:	f7ff ff4d 	bl	800d518 <__b2d>
 800d67e:	9000      	str	r0, [sp, #0]
 800d680:	9101      	str	r1, [sp, #4]
 800d682:	9c00      	ldr	r4, [sp, #0]
 800d684:	9d01      	ldr	r5, [sp, #4]
 800d686:	0038      	movs	r0, r7
 800d688:	a905      	add	r1, sp, #20
 800d68a:	f7ff ff45 	bl	800d518 <__b2d>
 800d68e:	9002      	str	r0, [sp, #8]
 800d690:	9103      	str	r1, [sp, #12]
 800d692:	9a02      	ldr	r2, [sp, #8]
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	6930      	ldr	r0, [r6, #16]
 800d698:	6939      	ldr	r1, [r7, #16]
 800d69a:	9e04      	ldr	r6, [sp, #16]
 800d69c:	1a40      	subs	r0, r0, r1
 800d69e:	9905      	ldr	r1, [sp, #20]
 800d6a0:	0140      	lsls	r0, r0, #5
 800d6a2:	1a71      	subs	r1, r6, r1
 800d6a4:	1841      	adds	r1, r0, r1
 800d6a6:	0508      	lsls	r0, r1, #20
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	dd07      	ble.n	800d6bc <__ratio+0x4c>
 800d6ac:	9901      	ldr	r1, [sp, #4]
 800d6ae:	1845      	adds	r5, r0, r1
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	0029      	movs	r1, r5
 800d6b4:	f7f3 fbe0 	bl	8000e78 <__aeabi_ddiv>
 800d6b8:	b007      	add	sp, #28
 800d6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6bc:	9903      	ldr	r1, [sp, #12]
 800d6be:	1a0b      	subs	r3, r1, r0
 800d6c0:	e7f6      	b.n	800d6b0 <__ratio+0x40>

0800d6c2 <__copybits>:
 800d6c2:	b570      	push	{r4, r5, r6, lr}
 800d6c4:	0014      	movs	r4, r2
 800d6c6:	0005      	movs	r5, r0
 800d6c8:	3901      	subs	r1, #1
 800d6ca:	6913      	ldr	r3, [r2, #16]
 800d6cc:	1149      	asrs	r1, r1, #5
 800d6ce:	3101      	adds	r1, #1
 800d6d0:	0089      	lsls	r1, r1, #2
 800d6d2:	3414      	adds	r4, #20
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	1841      	adds	r1, r0, r1
 800d6d8:	18e3      	adds	r3, r4, r3
 800d6da:	42a3      	cmp	r3, r4
 800d6dc:	d80d      	bhi.n	800d6fa <__copybits+0x38>
 800d6de:	0014      	movs	r4, r2
 800d6e0:	3411      	adds	r4, #17
 800d6e2:	2500      	movs	r5, #0
 800d6e4:	429c      	cmp	r4, r3
 800d6e6:	d803      	bhi.n	800d6f0 <__copybits+0x2e>
 800d6e8:	1a9b      	subs	r3, r3, r2
 800d6ea:	3b11      	subs	r3, #17
 800d6ec:	089b      	lsrs	r3, r3, #2
 800d6ee:	009d      	lsls	r5, r3, #2
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	1940      	adds	r0, r0, r5
 800d6f4:	4281      	cmp	r1, r0
 800d6f6:	d803      	bhi.n	800d700 <__copybits+0x3e>
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	cc40      	ldmia	r4!, {r6}
 800d6fc:	c540      	stmia	r5!, {r6}
 800d6fe:	e7ec      	b.n	800d6da <__copybits+0x18>
 800d700:	c008      	stmia	r0!, {r3}
 800d702:	e7f7      	b.n	800d6f4 <__copybits+0x32>

0800d704 <__any_on>:
 800d704:	0002      	movs	r2, r0
 800d706:	6900      	ldr	r0, [r0, #16]
 800d708:	b510      	push	{r4, lr}
 800d70a:	3214      	adds	r2, #20
 800d70c:	114b      	asrs	r3, r1, #5
 800d70e:	4298      	cmp	r0, r3
 800d710:	db13      	blt.n	800d73a <__any_on+0x36>
 800d712:	dd0c      	ble.n	800d72e <__any_on+0x2a>
 800d714:	241f      	movs	r4, #31
 800d716:	0008      	movs	r0, r1
 800d718:	4020      	ands	r0, r4
 800d71a:	4221      	tst	r1, r4
 800d71c:	d007      	beq.n	800d72e <__any_on+0x2a>
 800d71e:	0099      	lsls	r1, r3, #2
 800d720:	588c      	ldr	r4, [r1, r2]
 800d722:	0021      	movs	r1, r4
 800d724:	40c1      	lsrs	r1, r0
 800d726:	4081      	lsls	r1, r0
 800d728:	2001      	movs	r0, #1
 800d72a:	428c      	cmp	r4, r1
 800d72c:	d104      	bne.n	800d738 <__any_on+0x34>
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	18d3      	adds	r3, r2, r3
 800d732:	4293      	cmp	r3, r2
 800d734:	d803      	bhi.n	800d73e <__any_on+0x3a>
 800d736:	2000      	movs	r0, #0
 800d738:	bd10      	pop	{r4, pc}
 800d73a:	0003      	movs	r3, r0
 800d73c:	e7f7      	b.n	800d72e <__any_on+0x2a>
 800d73e:	3b04      	subs	r3, #4
 800d740:	6819      	ldr	r1, [r3, #0]
 800d742:	2900      	cmp	r1, #0
 800d744:	d0f5      	beq.n	800d732 <__any_on+0x2e>
 800d746:	2001      	movs	r0, #1
 800d748:	e7f6      	b.n	800d738 <__any_on+0x34>

0800d74a <__ascii_wctomb>:
 800d74a:	0003      	movs	r3, r0
 800d74c:	1e08      	subs	r0, r1, #0
 800d74e:	d005      	beq.n	800d75c <__ascii_wctomb+0x12>
 800d750:	2aff      	cmp	r2, #255	; 0xff
 800d752:	d904      	bls.n	800d75e <__ascii_wctomb+0x14>
 800d754:	228a      	movs	r2, #138	; 0x8a
 800d756:	2001      	movs	r0, #1
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	4240      	negs	r0, r0
 800d75c:	4770      	bx	lr
 800d75e:	2001      	movs	r0, #1
 800d760:	700a      	strb	r2, [r1, #0]
 800d762:	e7fb      	b.n	800d75c <__ascii_wctomb+0x12>

0800d764 <_svfprintf_r>:
 800d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d766:	b0d9      	sub	sp, #356	; 0x164
 800d768:	001c      	movs	r4, r3
 800d76a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d76c:	9208      	str	r2, [sp, #32]
 800d76e:	900a      	str	r0, [sp, #40]	; 0x28
 800d770:	f002 fdae 	bl	80102d0 <_localeconv_r>
 800d774:	6803      	ldr	r3, [r0, #0]
 800d776:	0018      	movs	r0, r3
 800d778:	931c      	str	r3, [sp, #112]	; 0x70
 800d77a:	f7f2 fcc3 	bl	8000104 <strlen>
 800d77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d780:	9016      	str	r0, [sp, #88]	; 0x58
 800d782:	899b      	ldrh	r3, [r3, #12]
 800d784:	061b      	lsls	r3, r3, #24
 800d786:	d517      	bpl.n	800d7b8 <_svfprintf_r+0x54>
 800d788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d113      	bne.n	800d7b8 <_svfprintf_r+0x54>
 800d790:	2140      	movs	r1, #64	; 0x40
 800d792:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d794:	f7fd fb6e 	bl	800ae74 <_malloc_r>
 800d798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d79a:	6018      	str	r0, [r3, #0]
 800d79c:	6118      	str	r0, [r3, #16]
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d107      	bne.n	800d7b2 <_svfprintf_r+0x4e>
 800d7a2:	230c      	movs	r3, #12
 800d7a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	3b0d      	subs	r3, #13
 800d7aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d7ae:	b059      	add	sp, #356	; 0x164
 800d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b2:	2340      	movs	r3, #64	; 0x40
 800d7b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7b6:	6153      	str	r3, [r2, #20]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7be:	932d      	str	r3, [sp, #180]	; 0xb4
 800d7c0:	930e      	str	r3, [sp, #56]	; 0x38
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	9214      	str	r2, [sp, #80]	; 0x50
 800d7c6:	9315      	str	r3, [sp, #84]	; 0x54
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	af2f      	add	r7, sp, #188	; 0xbc
 800d7cc:	972c      	str	r7, [sp, #176]	; 0xb0
 800d7ce:	931f      	str	r3, [sp, #124]	; 0x7c
 800d7d0:	931e      	str	r3, [sp, #120]	; 0x78
 800d7d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d7d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7d6:	931d      	str	r3, [sp, #116]	; 0x74
 800d7d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7da:	9d08      	ldr	r5, [sp, #32]
 800d7dc:	782b      	ldrb	r3, [r5, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <_svfprintf_r+0x84>
 800d7e2:	2b25      	cmp	r3, #37	; 0x25
 800d7e4:	d000      	beq.n	800d7e8 <_svfprintf_r+0x84>
 800d7e6:	e091      	b.n	800d90c <_svfprintf_r+0x1a8>
 800d7e8:	9b08      	ldr	r3, [sp, #32]
 800d7ea:	1aee      	subs	r6, r5, r3
 800d7ec:	429d      	cmp	r5, r3
 800d7ee:	d016      	beq.n	800d81e <_svfprintf_r+0xba>
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d7f4:	607e      	str	r6, [r7, #4]
 800d7f6:	199b      	adds	r3, r3, r6
 800d7f8:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	3301      	adds	r3, #1
 800d800:	932d      	str	r3, [sp, #180]	; 0xb4
 800d802:	2b07      	cmp	r3, #7
 800d804:	dd08      	ble.n	800d818 <_svfprintf_r+0xb4>
 800d806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d808:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d80a:	aa2c      	add	r2, sp, #176	; 0xb0
 800d80c:	f004 f8c0 	bl	8011990 <__ssprint_r>
 800d810:	2800      	cmp	r0, #0
 800d812:	d000      	beq.n	800d816 <_svfprintf_r+0xb2>
 800d814:	e1cf      	b.n	800dbb6 <_svfprintf_r+0x452>
 800d816:	af2f      	add	r7, sp, #188	; 0xbc
 800d818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d81a:	199b      	adds	r3, r3, r6
 800d81c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d81e:	782b      	ldrb	r3, [r5, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d101      	bne.n	800d828 <_svfprintf_r+0xc4>
 800d824:	f001 f99e 	bl	800eb64 <_svfprintf_r+0x1400>
 800d828:	221b      	movs	r2, #27
 800d82a:	2300      	movs	r3, #0
 800d82c:	a91e      	add	r1, sp, #120	; 0x78
 800d82e:	1852      	adds	r2, r2, r1
 800d830:	7013      	strb	r3, [r2, #0]
 800d832:	2201      	movs	r2, #1
 800d834:	001e      	movs	r6, r3
 800d836:	4252      	negs	r2, r2
 800d838:	3501      	adds	r5, #1
 800d83a:	9209      	str	r2, [sp, #36]	; 0x24
 800d83c:	9318      	str	r3, [sp, #96]	; 0x60
 800d83e:	1c6b      	adds	r3, r5, #1
 800d840:	9313      	str	r3, [sp, #76]	; 0x4c
 800d842:	782b      	ldrb	r3, [r5, #0]
 800d844:	930f      	str	r3, [sp, #60]	; 0x3c
 800d846:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d848:	3820      	subs	r0, #32
 800d84a:	285a      	cmp	r0, #90	; 0x5a
 800d84c:	d901      	bls.n	800d852 <_svfprintf_r+0xee>
 800d84e:	f000 fe20 	bl	800e492 <_svfprintf_r+0xd2e>
 800d852:	f7f2 fc69 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d856:	0078      	.short	0x0078
 800d858:	061e061e 	.word	0x061e061e
 800d85c:	061e0082 	.word	0x061e0082
 800d860:	061e061e 	.word	0x061e061e
 800d864:	061e005d 	.word	0x061e005d
 800d868:	0084061e 	.word	0x0084061e
 800d86c:	061e008c 	.word	0x061e008c
 800d870:	0091008a 	.word	0x0091008a
 800d874:	00b2061e 	.word	0x00b2061e
 800d878:	00b400b4 	.word	0x00b400b4
 800d87c:	00b400b4 	.word	0x00b400b4
 800d880:	00b400b4 	.word	0x00b400b4
 800d884:	00b400b4 	.word	0x00b400b4
 800d888:	061e00b4 	.word	0x061e00b4
 800d88c:	061e061e 	.word	0x061e061e
 800d890:	061e061e 	.word	0x061e061e
 800d894:	061e061e 	.word	0x061e061e
 800d898:	061e013b 	.word	0x061e013b
 800d89c:	00f400e0 	.word	0x00f400e0
 800d8a0:	013b013b 	.word	0x013b013b
 800d8a4:	061e013b 	.word	0x061e013b
 800d8a8:	061e061e 	.word	0x061e061e
 800d8ac:	00c7061e 	.word	0x00c7061e
 800d8b0:	061e061e 	.word	0x061e061e
 800d8b4:	061e04c7 	.word	0x061e04c7
 800d8b8:	061e061e 	.word	0x061e061e
 800d8bc:	061e050a 	.word	0x061e050a
 800d8c0:	061e052a 	.word	0x061e052a
 800d8c4:	055c061e 	.word	0x055c061e
 800d8c8:	061e061e 	.word	0x061e061e
 800d8cc:	061e061e 	.word	0x061e061e
 800d8d0:	061e061e 	.word	0x061e061e
 800d8d4:	061e061e 	.word	0x061e061e
 800d8d8:	061e013b 	.word	0x061e013b
 800d8dc:	00f600e0 	.word	0x00f600e0
 800d8e0:	013b013b 	.word	0x013b013b
 800d8e4:	00c9013b 	.word	0x00c9013b
 800d8e8:	00dc00f6 	.word	0x00dc00f6
 800d8ec:	00d5061e 	.word	0x00d5061e
 800d8f0:	04a7061e 	.word	0x04a7061e
 800d8f4:	04fa04c9 	.word	0x04fa04c9
 800d8f8:	061e00dc 	.word	0x061e00dc
 800d8fc:	0080050a 	.word	0x0080050a
 800d900:	061e052c 	.word	0x061e052c
 800d904:	057c061e 	.word	0x057c061e
 800d908:	0080061e 	.word	0x0080061e
 800d90c:	3501      	adds	r5, #1
 800d90e:	e765      	b.n	800d7dc <_svfprintf_r+0x78>
 800d910:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d912:	f002 fcdd 	bl	80102d0 <_localeconv_r>
 800d916:	6843      	ldr	r3, [r0, #4]
 800d918:	0018      	movs	r0, r3
 800d91a:	931d      	str	r3, [sp, #116]	; 0x74
 800d91c:	f7f2 fbf2 	bl	8000104 <strlen>
 800d920:	901b      	str	r0, [sp, #108]	; 0x6c
 800d922:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d924:	f002 fcd4 	bl	80102d0 <_localeconv_r>
 800d928:	6883      	ldr	r3, [r0, #8]
 800d92a:	9312      	str	r3, [sp, #72]	; 0x48
 800d92c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d011      	beq.n	800d956 <_svfprintf_r+0x1f2>
 800d932:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00e      	beq.n	800d956 <_svfprintf_r+0x1f2>
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00b      	beq.n	800d956 <_svfprintf_r+0x1f2>
 800d93e:	2380      	movs	r3, #128	; 0x80
 800d940:	00db      	lsls	r3, r3, #3
 800d942:	431e      	orrs	r6, r3
 800d944:	e007      	b.n	800d956 <_svfprintf_r+0x1f2>
 800d946:	231b      	movs	r3, #27
 800d948:	aa1e      	add	r2, sp, #120	; 0x78
 800d94a:	189b      	adds	r3, r3, r2
 800d94c:	781a      	ldrb	r2, [r3, #0]
 800d94e:	2a00      	cmp	r2, #0
 800d950:	d101      	bne.n	800d956 <_svfprintf_r+0x1f2>
 800d952:	3220      	adds	r2, #32
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d958:	e771      	b.n	800d83e <_svfprintf_r+0xda>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e7f1      	b.n	800d942 <_svfprintf_r+0x1de>
 800d95e:	cc08      	ldmia	r4!, {r3}
 800d960:	9318      	str	r3, [sp, #96]	; 0x60
 800d962:	2b00      	cmp	r3, #0
 800d964:	daf7      	bge.n	800d956 <_svfprintf_r+0x1f2>
 800d966:	425b      	negs	r3, r3
 800d968:	9318      	str	r3, [sp, #96]	; 0x60
 800d96a:	2304      	movs	r3, #4
 800d96c:	e7e9      	b.n	800d942 <_svfprintf_r+0x1de>
 800d96e:	231b      	movs	r3, #27
 800d970:	aa1e      	add	r2, sp, #120	; 0x78
 800d972:	189b      	adds	r3, r3, r2
 800d974:	222b      	movs	r2, #43	; 0x2b
 800d976:	e7ed      	b.n	800d954 <_svfprintf_r+0x1f0>
 800d978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d97a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d97c:	7812      	ldrb	r2, [r2, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	920f      	str	r2, [sp, #60]	; 0x3c
 800d982:	2a2a      	cmp	r2, #42	; 0x2a
 800d984:	d010      	beq.n	800d9a8 <_svfprintf_r+0x244>
 800d986:	2200      	movs	r2, #0
 800d988:	9209      	str	r2, [sp, #36]	; 0x24
 800d98a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d98c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d98e:	3a30      	subs	r2, #48	; 0x30
 800d990:	2a09      	cmp	r2, #9
 800d992:	d900      	bls.n	800d996 <_svfprintf_r+0x232>
 800d994:	e757      	b.n	800d846 <_svfprintf_r+0xe2>
 800d996:	200a      	movs	r0, #10
 800d998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d99a:	4341      	muls	r1, r0
 800d99c:	188a      	adds	r2, r1, r2
 800d99e:	9209      	str	r2, [sp, #36]	; 0x24
 800d9a0:	781a      	ldrb	r2, [r3, #0]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9a6:	e7f0      	b.n	800d98a <_svfprintf_r+0x226>
 800d9a8:	cc04      	ldmia	r4!, {r2}
 800d9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	da02      	bge.n	800d9b6 <_svfprintf_r+0x252>
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	4252      	negs	r2, r2
 800d9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9b8:	e7cd      	b.n	800d956 <_svfprintf_r+0x1f2>
 800d9ba:	2380      	movs	r3, #128	; 0x80
 800d9bc:	e7c1      	b.n	800d942 <_svfprintf_r+0x1de>
 800d9be:	2200      	movs	r2, #0
 800d9c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9c2:	9218      	str	r2, [sp, #96]	; 0x60
 800d9c4:	210a      	movs	r1, #10
 800d9c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9c8:	434a      	muls	r2, r1
 800d9ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d9cc:	3930      	subs	r1, #48	; 0x30
 800d9ce:	188a      	adds	r2, r1, r2
 800d9d0:	9218      	str	r2, [sp, #96]	; 0x60
 800d9d2:	001a      	movs	r2, r3
 800d9d4:	7812      	ldrb	r2, [r2, #0]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9da:	3a30      	subs	r2, #48	; 0x30
 800d9dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9de:	2a09      	cmp	r2, #9
 800d9e0:	d9f0      	bls.n	800d9c4 <_svfprintf_r+0x260>
 800d9e2:	e730      	b.n	800d846 <_svfprintf_r+0xe2>
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	e7ac      	b.n	800d942 <_svfprintf_r+0x1de>
 800d9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	2b68      	cmp	r3, #104	; 0x68
 800d9ee:	d105      	bne.n	800d9fc <_svfprintf_r+0x298>
 800d9f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9f6:	2380      	movs	r3, #128	; 0x80
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	e7a2      	b.n	800d942 <_svfprintf_r+0x1de>
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	e7a0      	b.n	800d942 <_svfprintf_r+0x1de>
 800da00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	2b6c      	cmp	r3, #108	; 0x6c
 800da06:	d104      	bne.n	800da12 <_svfprintf_r+0x2ae>
 800da08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da0a:	3301      	adds	r3, #1
 800da0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800da0e:	2320      	movs	r3, #32
 800da10:	e797      	b.n	800d942 <_svfprintf_r+0x1de>
 800da12:	2310      	movs	r3, #16
 800da14:	e795      	b.n	800d942 <_svfprintf_r+0x1de>
 800da16:	0021      	movs	r1, r4
 800da18:	c904      	ldmia	r1!, {r2}
 800da1a:	ab3f      	add	r3, sp, #252	; 0xfc
 800da1c:	910d      	str	r1, [sp, #52]	; 0x34
 800da1e:	211b      	movs	r1, #27
 800da20:	701a      	strb	r2, [r3, #0]
 800da22:	2200      	movs	r2, #0
 800da24:	a81e      	add	r0, sp, #120	; 0x78
 800da26:	1809      	adds	r1, r1, r0
 800da28:	700a      	strb	r2, [r1, #0]
 800da2a:	920c      	str	r2, [sp, #48]	; 0x30
 800da2c:	3201      	adds	r2, #1
 800da2e:	9209      	str	r2, [sp, #36]	; 0x24
 800da30:	2200      	movs	r2, #0
 800da32:	9308      	str	r3, [sp, #32]
 800da34:	0015      	movs	r5, r2
 800da36:	9219      	str	r2, [sp, #100]	; 0x64
 800da38:	9210      	str	r2, [sp, #64]	; 0x40
 800da3a:	9211      	str	r2, [sp, #68]	; 0x44
 800da3c:	e1f1      	b.n	800de22 <_svfprintf_r+0x6be>
 800da3e:	2310      	movs	r3, #16
 800da40:	431e      	orrs	r6, r3
 800da42:	06b3      	lsls	r3, r6, #26
 800da44:	d531      	bpl.n	800daaa <_svfprintf_r+0x346>
 800da46:	2307      	movs	r3, #7
 800da48:	3407      	adds	r4, #7
 800da4a:	439c      	bics	r4, r3
 800da4c:	0022      	movs	r2, r4
 800da4e:	ca18      	ldmia	r2!, {r3, r4}
 800da50:	9306      	str	r3, [sp, #24]
 800da52:	9407      	str	r4, [sp, #28]
 800da54:	920d      	str	r2, [sp, #52]	; 0x34
 800da56:	9a07      	ldr	r2, [sp, #28]
 800da58:	2301      	movs	r3, #1
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	da0b      	bge.n	800da76 <_svfprintf_r+0x312>
 800da5e:	9c06      	ldr	r4, [sp, #24]
 800da60:	9d07      	ldr	r5, [sp, #28]
 800da62:	2200      	movs	r2, #0
 800da64:	4261      	negs	r1, r4
 800da66:	41aa      	sbcs	r2, r5
 800da68:	9106      	str	r1, [sp, #24]
 800da6a:	9207      	str	r2, [sp, #28]
 800da6c:	221b      	movs	r2, #27
 800da6e:	a91e      	add	r1, sp, #120	; 0x78
 800da70:	1852      	adds	r2, r2, r1
 800da72:	212d      	movs	r1, #45	; 0x2d
 800da74:	7011      	strb	r1, [r2, #0]
 800da76:	9907      	ldr	r1, [sp, #28]
 800da78:	9a06      	ldr	r2, [sp, #24]
 800da7a:	430a      	orrs	r2, r1
 800da7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da7e:	3101      	adds	r1, #1
 800da80:	d101      	bne.n	800da86 <_svfprintf_r+0x322>
 800da82:	f001 f87b 	bl	800eb7c <_svfprintf_r+0x1418>
 800da86:	2180      	movs	r1, #128	; 0x80
 800da88:	0034      	movs	r4, r6
 800da8a:	438c      	bics	r4, r1
 800da8c:	2a00      	cmp	r2, #0
 800da8e:	d001      	beq.n	800da94 <_svfprintf_r+0x330>
 800da90:	f001 f879 	bl	800eb86 <_svfprintf_r+0x1422>
 800da94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da96:	2a00      	cmp	r2, #0
 800da98:	d101      	bne.n	800da9e <_svfprintf_r+0x33a>
 800da9a:	f000 fcef 	bl	800e47c <_svfprintf_r+0xd18>
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d001      	beq.n	800daa6 <_svfprintf_r+0x342>
 800daa2:	f001 f874 	bl	800eb8e <_svfprintf_r+0x142a>
 800daa6:	f000 fc79 	bl	800e39c <_svfprintf_r+0xc38>
 800daaa:	0022      	movs	r2, r4
 800daac:	ca08      	ldmia	r2!, {r3}
 800daae:	920d      	str	r2, [sp, #52]	; 0x34
 800dab0:	06f2      	lsls	r2, r6, #27
 800dab2:	d503      	bpl.n	800dabc <_svfprintf_r+0x358>
 800dab4:	9306      	str	r3, [sp, #24]
 800dab6:	17db      	asrs	r3, r3, #31
 800dab8:	9307      	str	r3, [sp, #28]
 800daba:	e7cc      	b.n	800da56 <_svfprintf_r+0x2f2>
 800dabc:	0672      	lsls	r2, r6, #25
 800dabe:	d501      	bpl.n	800dac4 <_svfprintf_r+0x360>
 800dac0:	b21b      	sxth	r3, r3
 800dac2:	e7f7      	b.n	800dab4 <_svfprintf_r+0x350>
 800dac4:	05b2      	lsls	r2, r6, #22
 800dac6:	d5f5      	bpl.n	800dab4 <_svfprintf_r+0x350>
 800dac8:	b25b      	sxtb	r3, r3
 800daca:	e7f3      	b.n	800dab4 <_svfprintf_r+0x350>
 800dacc:	2307      	movs	r3, #7
 800dace:	3407      	adds	r4, #7
 800dad0:	439c      	bics	r4, r3
 800dad2:	0022      	movs	r2, r4
 800dad4:	ca18      	ldmia	r2!, {r3, r4}
 800dad6:	920d      	str	r2, [sp, #52]	; 0x34
 800dad8:	2201      	movs	r2, #1
 800dada:	9314      	str	r3, [sp, #80]	; 0x50
 800dadc:	9415      	str	r4, [sp, #84]	; 0x54
 800dade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dae0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dae2:	005c      	lsls	r4, r3, #1
 800dae4:	0864      	lsrs	r4, r4, #1
 800dae6:	0028      	movs	r0, r5
 800dae8:	0021      	movs	r1, r4
 800daea:	4b3e      	ldr	r3, [pc, #248]	; (800dbe4 <_svfprintf_r+0x480>)
 800daec:	4252      	negs	r2, r2
 800daee:	f7f4 fc01 	bl	80022f4 <__aeabi_dcmpun>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d126      	bne.n	800db44 <_svfprintf_r+0x3e0>
 800daf6:	2201      	movs	r2, #1
 800daf8:	0028      	movs	r0, r5
 800dafa:	0021      	movs	r1, r4
 800dafc:	4b39      	ldr	r3, [pc, #228]	; (800dbe4 <_svfprintf_r+0x480>)
 800dafe:	4252      	negs	r2, r2
 800db00:	f7f2 fcb2 	bl	8000468 <__aeabi_dcmple>
 800db04:	2800      	cmp	r0, #0
 800db06:	d11d      	bne.n	800db44 <_svfprintf_r+0x3e0>
 800db08:	9814      	ldr	r0, [sp, #80]	; 0x50
 800db0a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	f7f2 fca0 	bl	8000454 <__aeabi_dcmplt>
 800db14:	2800      	cmp	r0, #0
 800db16:	d004      	beq.n	800db22 <_svfprintf_r+0x3be>
 800db18:	231b      	movs	r3, #27
 800db1a:	aa1e      	add	r2, sp, #120	; 0x78
 800db1c:	189b      	adds	r3, r3, r2
 800db1e:	222d      	movs	r2, #45	; 0x2d
 800db20:	701a      	strb	r2, [r3, #0]
 800db22:	4b31      	ldr	r3, [pc, #196]	; (800dbe8 <_svfprintf_r+0x484>)
 800db24:	9308      	str	r3, [sp, #32]
 800db26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db28:	2b47      	cmp	r3, #71	; 0x47
 800db2a:	dd01      	ble.n	800db30 <_svfprintf_r+0x3cc>
 800db2c:	4b2f      	ldr	r3, [pc, #188]	; (800dbec <_svfprintf_r+0x488>)
 800db2e:	9308      	str	r3, [sp, #32]
 800db30:	2380      	movs	r3, #128	; 0x80
 800db32:	439e      	bics	r6, r3
 800db34:	2300      	movs	r3, #0
 800db36:	930c      	str	r3, [sp, #48]	; 0x30
 800db38:	3303      	adds	r3, #3
 800db3a:	9309      	str	r3, [sp, #36]	; 0x24
 800db3c:	2300      	movs	r3, #0
 800db3e:	9319      	str	r3, [sp, #100]	; 0x64
 800db40:	f000 fc78 	bl	800e434 <_svfprintf_r+0xcd0>
 800db44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db48:	0010      	movs	r0, r2
 800db4a:	0019      	movs	r1, r3
 800db4c:	f7f4 fbd2 	bl	80022f4 <__aeabi_dcmpun>
 800db50:	2800      	cmp	r0, #0
 800db52:	d00e      	beq.n	800db72 <_svfprintf_r+0x40e>
 800db54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db56:	2b00      	cmp	r3, #0
 800db58:	da04      	bge.n	800db64 <_svfprintf_r+0x400>
 800db5a:	231b      	movs	r3, #27
 800db5c:	aa1e      	add	r2, sp, #120	; 0x78
 800db5e:	189b      	adds	r3, r3, r2
 800db60:	222d      	movs	r2, #45	; 0x2d
 800db62:	701a      	strb	r2, [r3, #0]
 800db64:	4b22      	ldr	r3, [pc, #136]	; (800dbf0 <_svfprintf_r+0x48c>)
 800db66:	9308      	str	r3, [sp, #32]
 800db68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db6a:	2b47      	cmp	r3, #71	; 0x47
 800db6c:	dde0      	ble.n	800db30 <_svfprintf_r+0x3cc>
 800db6e:	4b21      	ldr	r3, [pc, #132]	; (800dbf4 <_svfprintf_r+0x490>)
 800db70:	e7dd      	b.n	800db2e <_svfprintf_r+0x3ca>
 800db72:	2320      	movs	r3, #32
 800db74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db76:	439a      	bics	r2, r3
 800db78:	9210      	str	r2, [sp, #64]	; 0x40
 800db7a:	2a41      	cmp	r2, #65	; 0x41
 800db7c:	d123      	bne.n	800dbc6 <_svfprintf_r+0x462>
 800db7e:	2230      	movs	r2, #48	; 0x30
 800db80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800db82:	ab25      	add	r3, sp, #148	; 0x94
 800db84:	701a      	strb	r2, [r3, #0]
 800db86:	3248      	adds	r2, #72	; 0x48
 800db88:	2961      	cmp	r1, #97	; 0x61
 800db8a:	d000      	beq.n	800db8e <_svfprintf_r+0x42a>
 800db8c:	3a20      	subs	r2, #32
 800db8e:	705a      	strb	r2, [r3, #1]
 800db90:	2302      	movs	r3, #2
 800db92:	431e      	orrs	r6, r3
 800db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db96:	2b63      	cmp	r3, #99	; 0x63
 800db98:	dd2e      	ble.n	800dbf8 <_svfprintf_r+0x494>
 800db9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db9c:	1c59      	adds	r1, r3, #1
 800db9e:	f7fd f969 	bl	800ae74 <_malloc_r>
 800dba2:	9008      	str	r0, [sp, #32]
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d000      	beq.n	800dbaa <_svfprintf_r+0x446>
 800dba8:	e216      	b.n	800dfd8 <_svfprintf_r+0x874>
 800dbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbac:	899a      	ldrh	r2, [r3, #12]
 800dbae:	2340      	movs	r3, #64	; 0x40
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbb4:	8193      	strh	r3, [r2, #12]
 800dbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	065b      	lsls	r3, r3, #25
 800dbbc:	d400      	bmi.n	800dbc0 <_svfprintf_r+0x45c>
 800dbbe:	e5f5      	b.n	800d7ac <_svfprintf_r+0x48>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	425b      	negs	r3, r3
 800dbc4:	e5f1      	b.n	800d7aa <_svfprintf_r+0x46>
 800dbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc8:	900c      	str	r0, [sp, #48]	; 0x30
 800dbca:	3301      	adds	r3, #1
 800dbcc:	d100      	bne.n	800dbd0 <_svfprintf_r+0x46c>
 800dbce:	e206      	b.n	800dfde <_svfprintf_r+0x87a>
 800dbd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbd2:	2b47      	cmp	r3, #71	; 0x47
 800dbd4:	d114      	bne.n	800dc00 <_svfprintf_r+0x49c>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d111      	bne.n	800dc00 <_svfprintf_r+0x49c>
 800dbdc:	3301      	adds	r3, #1
 800dbde:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe0:	e00e      	b.n	800dc00 <_svfprintf_r+0x49c>
 800dbe2:	46c0      	nop			; (mov r8, r8)
 800dbe4:	7fefffff 	.word	0x7fefffff
 800dbe8:	08014bcc 	.word	0x08014bcc
 800dbec:	08014bd0 	.word	0x08014bd0
 800dbf0:	08014bd4 	.word	0x08014bd4
 800dbf4:	08014bd8 	.word	0x08014bd8
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	930c      	str	r3, [sp, #48]	; 0x30
 800dbfc:	ab3f      	add	r3, sp, #252	; 0xfc
 800dbfe:	9308      	str	r3, [sp, #32]
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4333      	orrs	r3, r6
 800dc06:	931a      	str	r3, [sp, #104]	; 0x68
 800dc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	db00      	blt.n	800dc12 <_svfprintf_r+0x4ae>
 800dc10:	e1e7      	b.n	800dfe2 <_svfprintf_r+0x87e>
 800dc12:	2280      	movs	r2, #128	; 0x80
 800dc14:	0612      	lsls	r2, r2, #24
 800dc16:	4694      	mov	ip, r2
 800dc18:	4463      	add	r3, ip
 800dc1a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc1c:	232d      	movs	r3, #45	; 0x2d
 800dc1e:	9322      	str	r3, [sp, #136]	; 0x88
 800dc20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc22:	2b41      	cmp	r3, #65	; 0x41
 800dc24:	d000      	beq.n	800dc28 <_svfprintf_r+0x4c4>
 800dc26:	e1f5      	b.n	800e014 <_svfprintf_r+0x8b0>
 800dc28:	0028      	movs	r0, r5
 800dc2a:	aa26      	add	r2, sp, #152	; 0x98
 800dc2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc2e:	f002 fb73 	bl	8010318 <frexp>
 800dc32:	23ff      	movs	r3, #255	; 0xff
 800dc34:	2200      	movs	r2, #0
 800dc36:	059b      	lsls	r3, r3, #22
 800dc38:	f7f3 fd18 	bl	800166c <__aeabi_dmul>
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2300      	movs	r3, #0
 800dc40:	0004      	movs	r4, r0
 800dc42:	000d      	movs	r5, r1
 800dc44:	f7f2 fc00 	bl	8000448 <__aeabi_dcmpeq>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d001      	beq.n	800dc50 <_svfprintf_r+0x4ec>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	9326      	str	r3, [sp, #152]	; 0x98
 800dc50:	4bda      	ldr	r3, [pc, #872]	; (800dfbc <_svfprintf_r+0x858>)
 800dc52:	9319      	str	r3, [sp, #100]	; 0x64
 800dc54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc56:	2b61      	cmp	r3, #97	; 0x61
 800dc58:	d001      	beq.n	800dc5e <_svfprintf_r+0x4fa>
 800dc5a:	4bd9      	ldr	r3, [pc, #868]	; (800dfc0 <_svfprintf_r+0x85c>)
 800dc5c:	9319      	str	r3, [sp, #100]	; 0x64
 800dc5e:	9b08      	ldr	r3, [sp, #32]
 800dc60:	930e      	str	r3, [sp, #56]	; 0x38
 800dc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc64:	3b01      	subs	r3, #1
 800dc66:	9311      	str	r3, [sp, #68]	; 0x44
 800dc68:	2200      	movs	r2, #0
 800dc6a:	4bd6      	ldr	r3, [pc, #856]	; (800dfc4 <_svfprintf_r+0x860>)
 800dc6c:	0020      	movs	r0, r4
 800dc6e:	0029      	movs	r1, r5
 800dc70:	f7f3 fcfc 	bl	800166c <__aeabi_dmul>
 800dc74:	000d      	movs	r5, r1
 800dc76:	0004      	movs	r4, r0
 800dc78:	f7f4 fb5a 	bl	8002330 <__aeabi_d2iz>
 800dc7c:	9021      	str	r0, [sp, #132]	; 0x84
 800dc7e:	f7f4 fb8d 	bl	800239c <__aeabi_i2d>
 800dc82:	0002      	movs	r2, r0
 800dc84:	000b      	movs	r3, r1
 800dc86:	0020      	movs	r0, r4
 800dc88:	0029      	movs	r1, r5
 800dc8a:	f7f3 ffb1 	bl	8001bf0 <__aeabi_dsub>
 800dc8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc90:	000d      	movs	r5, r1
 800dc92:	001a      	movs	r2, r3
 800dc94:	3201      	adds	r2, #1
 800dc96:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dc98:	920e      	str	r2, [sp, #56]	; 0x38
 800dc9a:	9223      	str	r2, [sp, #140]	; 0x8c
 800dc9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dc9e:	0004      	movs	r4, r0
 800dca0:	5c52      	ldrb	r2, [r2, r1]
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dca6:	9320      	str	r3, [sp, #128]	; 0x80
 800dca8:	3301      	adds	r3, #1
 800dcaa:	d00a      	beq.n	800dcc2 <_svfprintf_r+0x55e>
 800dcac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcae:	2200      	movs	r2, #0
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	9311      	str	r3, [sp, #68]	; 0x44
 800dcb4:	0020      	movs	r0, r4
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	0029      	movs	r1, r5
 800dcba:	f7f2 fbc5 	bl	8000448 <__aeabi_dcmpeq>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d0d2      	beq.n	800dc68 <_svfprintf_r+0x504>
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	0020      	movs	r0, r4
 800dcc6:	0029      	movs	r1, r5
 800dcc8:	4bbf      	ldr	r3, [pc, #764]	; (800dfc8 <_svfprintf_r+0x864>)
 800dcca:	f7f2 fbd7 	bl	800047c <__aeabi_dcmpgt>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d10c      	bne.n	800dcec <_svfprintf_r+0x588>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	0020      	movs	r0, r4
 800dcd6:	0029      	movs	r1, r5
 800dcd8:	4bbb      	ldr	r3, [pc, #748]	; (800dfc8 <_svfprintf_r+0x864>)
 800dcda:	f7f2 fbb5 	bl	8000448 <__aeabi_dcmpeq>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d100      	bne.n	800dce4 <_svfprintf_r+0x580>
 800dce2:	e191      	b.n	800e008 <_svfprintf_r+0x8a4>
 800dce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dce6:	07db      	lsls	r3, r3, #31
 800dce8:	d400      	bmi.n	800dcec <_svfprintf_r+0x588>
 800dcea:	e18d      	b.n	800e008 <_svfprintf_r+0x8a4>
 800dcec:	2030      	movs	r0, #48	; 0x30
 800dcee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcf0:	932a      	str	r3, [sp, #168]	; 0xa8
 800dcf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcf4:	7bdb      	ldrb	r3, [r3, #15]
 800dcf6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dcf8:	3a01      	subs	r2, #1
 800dcfa:	922a      	str	r2, [sp, #168]	; 0xa8
 800dcfc:	7811      	ldrb	r1, [r2, #0]
 800dcfe:	4299      	cmp	r1, r3
 800dd00:	d100      	bne.n	800dd04 <_svfprintf_r+0x5a0>
 800dd02:	e171      	b.n	800dfe8 <_svfprintf_r+0x884>
 800dd04:	1c4b      	adds	r3, r1, #1
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2939      	cmp	r1, #57	; 0x39
 800dd0a:	d101      	bne.n	800dd10 <_svfprintf_r+0x5ac>
 800dd0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd0e:	7a9b      	ldrb	r3, [r3, #10]
 800dd10:	7013      	strb	r3, [r2, #0]
 800dd12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd14:	9a08      	ldr	r2, [sp, #32]
 800dd16:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dd18:	1a9b      	subs	r3, r3, r2
 800dd1a:	930e      	str	r3, [sp, #56]	; 0x38
 800dd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd1e:	2b47      	cmp	r3, #71	; 0x47
 800dd20:	d000      	beq.n	800dd24 <_svfprintf_r+0x5c0>
 800dd22:	e1c4      	b.n	800e0ae <_svfprintf_r+0x94a>
 800dd24:	1ceb      	adds	r3, r5, #3
 800dd26:	db03      	blt.n	800dd30 <_svfprintf_r+0x5cc>
 800dd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd2a:	42ab      	cmp	r3, r5
 800dd2c:	db00      	blt.n	800dd30 <_svfprintf_r+0x5cc>
 800dd2e:	e1e6      	b.n	800e0fe <_svfprintf_r+0x99a>
 800dd30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd32:	3b02      	subs	r3, #2
 800dd34:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd36:	223c      	movs	r2, #60	; 0x3c
 800dd38:	466b      	mov	r3, sp
 800dd3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd3c:	189b      	adds	r3, r3, r2
 800dd3e:	1e6c      	subs	r4, r5, #1
 800dd40:	3a1c      	subs	r2, #28
 800dd42:	2000      	movs	r0, #0
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	9426      	str	r4, [sp, #152]	; 0x98
 800dd48:	4391      	bics	r1, r2
 800dd4a:	2941      	cmp	r1, #65	; 0x41
 800dd4c:	d102      	bne.n	800dd54 <_svfprintf_r+0x5f0>
 800dd4e:	330f      	adds	r3, #15
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	3001      	adds	r0, #1
 800dd54:	a928      	add	r1, sp, #160	; 0xa0
 800dd56:	700b      	strb	r3, [r1, #0]
 800dd58:	232b      	movs	r3, #43	; 0x2b
 800dd5a:	2c00      	cmp	r4, #0
 800dd5c:	da02      	bge.n	800dd64 <_svfprintf_r+0x600>
 800dd5e:	2401      	movs	r4, #1
 800dd60:	3302      	adds	r3, #2
 800dd62:	1b64      	subs	r4, r4, r5
 800dd64:	704b      	strb	r3, [r1, #1]
 800dd66:	2c09      	cmp	r4, #9
 800dd68:	dc00      	bgt.n	800dd6c <_svfprintf_r+0x608>
 800dd6a:	e1ba      	b.n	800e0e2 <_svfprintf_r+0x97e>
 800dd6c:	2337      	movs	r3, #55	; 0x37
 800dd6e:	250a      	movs	r5, #10
 800dd70:	aa1e      	add	r2, sp, #120	; 0x78
 800dd72:	189b      	adds	r3, r3, r2
 800dd74:	9310      	str	r3, [sp, #64]	; 0x40
 800dd76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd78:	0020      	movs	r0, r4
 800dd7a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd7c:	0029      	movs	r1, r5
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	9310      	str	r3, [sp, #64]	; 0x40
 800dd82:	f7f2 fb4b 	bl	800041c <__aeabi_idivmod>
 800dd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd88:	3130      	adds	r1, #48	; 0x30
 800dd8a:	7019      	strb	r1, [r3, #0]
 800dd8c:	0020      	movs	r0, r4
 800dd8e:	0029      	movs	r1, r5
 800dd90:	9411      	str	r4, [sp, #68]	; 0x44
 800dd92:	f7f2 fa5d 	bl	8000250 <__divsi3>
 800dd96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd98:	0004      	movs	r4, r0
 800dd9a:	2b63      	cmp	r3, #99	; 0x63
 800dd9c:	dceb      	bgt.n	800dd76 <_svfprintf_r+0x612>
 800dd9e:	222a      	movs	r2, #42	; 0x2a
 800dda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dda2:	a81e      	add	r0, sp, #120	; 0x78
 800dda4:	1e99      	subs	r1, r3, #2
 800dda6:	1812      	adds	r2, r2, r0
 800dda8:	2037      	movs	r0, #55	; 0x37
 800ddaa:	000b      	movs	r3, r1
 800ddac:	3430      	adds	r4, #48	; 0x30
 800ddae:	700c      	strb	r4, [r1, #0]
 800ddb0:	ac1e      	add	r4, sp, #120	; 0x78
 800ddb2:	1900      	adds	r0, r0, r4
 800ddb4:	4283      	cmp	r3, r0
 800ddb6:	d200      	bcs.n	800ddba <_svfprintf_r+0x656>
 800ddb8:	e18e      	b.n	800e0d8 <_svfprintf_r+0x974>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	4281      	cmp	r1, r0
 800ddbe:	d804      	bhi.n	800ddca <_svfprintf_r+0x666>
 800ddc0:	aa1e      	add	r2, sp, #120	; 0x78
 800ddc2:	3339      	adds	r3, #57	; 0x39
 800ddc4:	189b      	adds	r3, r3, r2
 800ddc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddc8:	1a9b      	subs	r3, r3, r2
 800ddca:	222a      	movs	r2, #42	; 0x2a
 800ddcc:	a91e      	add	r1, sp, #120	; 0x78
 800ddce:	1852      	adds	r2, r2, r1
 800ddd0:	18d3      	adds	r3, r2, r3
 800ddd2:	aa28      	add	r2, sp, #160	; 0xa0
 800ddd4:	1a9b      	subs	r3, r3, r2
 800ddd6:	931e      	str	r3, [sp, #120]	; 0x78
 800ddd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ddda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dddc:	4694      	mov	ip, r2
 800ddde:	4463      	add	r3, ip
 800dde0:	9309      	str	r3, [sp, #36]	; 0x24
 800dde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	dc01      	bgt.n	800ddec <_svfprintf_r+0x688>
 800dde8:	07f3      	lsls	r3, r6, #31
 800ddea:	d504      	bpl.n	800ddf6 <_svfprintf_r+0x692>
 800ddec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ddee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf0:	4694      	mov	ip, r2
 800ddf2:	4463      	add	r3, ip
 800ddf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf6:	2280      	movs	r2, #128	; 0x80
 800ddf8:	4b74      	ldr	r3, [pc, #464]	; (800dfcc <_svfprintf_r+0x868>)
 800ddfa:	0052      	lsls	r2, r2, #1
 800ddfc:	4033      	ands	r3, r6
 800ddfe:	431a      	orrs	r2, r3
 800de00:	2300      	movs	r3, #0
 800de02:	001d      	movs	r5, r3
 800de04:	921a      	str	r2, [sp, #104]	; 0x68
 800de06:	9310      	str	r3, [sp, #64]	; 0x40
 800de08:	9311      	str	r3, [sp, #68]	; 0x44
 800de0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de0c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800de0e:	9319      	str	r3, [sp, #100]	; 0x64
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <_svfprintf_r+0x6be>
 800de14:	231b      	movs	r3, #27
 800de16:	aa1e      	add	r2, sp, #120	; 0x78
 800de18:	189b      	adds	r3, r3, r2
 800de1a:	222d      	movs	r2, #45	; 0x2d
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	2300      	movs	r3, #0
 800de20:	9319      	str	r3, [sp, #100]	; 0x64
 800de22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de26:	931a      	str	r3, [sp, #104]	; 0x68
 800de28:	4293      	cmp	r3, r2
 800de2a:	da00      	bge.n	800de2e <_svfprintf_r+0x6ca>
 800de2c:	921a      	str	r2, [sp, #104]	; 0x68
 800de2e:	231b      	movs	r3, #27
 800de30:	aa1e      	add	r2, sp, #120	; 0x78
 800de32:	189b      	adds	r3, r3, r2
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	1e5a      	subs	r2, r3, #1
 800de38:	4193      	sbcs	r3, r2
 800de3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de3c:	18d3      	adds	r3, r2, r3
 800de3e:	931a      	str	r3, [sp, #104]	; 0x68
 800de40:	0032      	movs	r2, r6
 800de42:	2302      	movs	r3, #2
 800de44:	401a      	ands	r2, r3
 800de46:	9220      	str	r2, [sp, #128]	; 0x80
 800de48:	421e      	tst	r6, r3
 800de4a:	d002      	beq.n	800de52 <_svfprintf_r+0x6ee>
 800de4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800de4e:	3302      	adds	r3, #2
 800de50:	931a      	str	r3, [sp, #104]	; 0x68
 800de52:	2384      	movs	r3, #132	; 0x84
 800de54:	0032      	movs	r2, r6
 800de56:	401a      	ands	r2, r3
 800de58:	9221      	str	r2, [sp, #132]	; 0x84
 800de5a:	421e      	tst	r6, r3
 800de5c:	d11f      	bne.n	800de9e <_svfprintf_r+0x73a>
 800de5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de62:	1a9c      	subs	r4, r3, r2
 800de64:	2c00      	cmp	r4, #0
 800de66:	dd1a      	ble.n	800de9e <_svfprintf_r+0x73a>
 800de68:	0039      	movs	r1, r7
 800de6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de6c:	4858      	ldr	r0, [pc, #352]	; (800dfd0 <_svfprintf_r+0x86c>)
 800de6e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de70:	3301      	adds	r3, #1
 800de72:	3108      	adds	r1, #8
 800de74:	6038      	str	r0, [r7, #0]
 800de76:	2c10      	cmp	r4, #16
 800de78:	dd00      	ble.n	800de7c <_svfprintf_r+0x718>
 800de7a:	e31c      	b.n	800e4b6 <_svfprintf_r+0xd52>
 800de7c:	607c      	str	r4, [r7, #4]
 800de7e:	18a4      	adds	r4, r4, r2
 800de80:	000f      	movs	r7, r1
 800de82:	942e      	str	r4, [sp, #184]	; 0xb8
 800de84:	932d      	str	r3, [sp, #180]	; 0xb4
 800de86:	2b07      	cmp	r3, #7
 800de88:	dd09      	ble.n	800de9e <_svfprintf_r+0x73a>
 800de8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de8e:	aa2c      	add	r2, sp, #176	; 0xb0
 800de90:	f003 fd7e 	bl	8011990 <__ssprint_r>
 800de94:	2800      	cmp	r0, #0
 800de96:	d001      	beq.n	800de9c <_svfprintf_r+0x738>
 800de98:	f000 fe43 	bl	800eb22 <_svfprintf_r+0x13be>
 800de9c:	af2f      	add	r7, sp, #188	; 0xbc
 800de9e:	221b      	movs	r2, #27
 800dea0:	a91e      	add	r1, sp, #120	; 0x78
 800dea2:	1852      	adds	r2, r2, r1
 800dea4:	7811      	ldrb	r1, [r2, #0]
 800dea6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dea8:	2900      	cmp	r1, #0
 800deaa:	d014      	beq.n	800ded6 <_svfprintf_r+0x772>
 800deac:	603a      	str	r2, [r7, #0]
 800deae:	2201      	movs	r2, #1
 800deb0:	189b      	adds	r3, r3, r2
 800deb2:	932e      	str	r3, [sp, #184]	; 0xb8
 800deb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	189b      	adds	r3, r3, r2
 800deba:	932d      	str	r3, [sp, #180]	; 0xb4
 800debc:	3708      	adds	r7, #8
 800debe:	2b07      	cmp	r3, #7
 800dec0:	dd09      	ble.n	800ded6 <_svfprintf_r+0x772>
 800dec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dec4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dec6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dec8:	f003 fd62 	bl	8011990 <__ssprint_r>
 800decc:	2800      	cmp	r0, #0
 800dece:	d001      	beq.n	800ded4 <_svfprintf_r+0x770>
 800ded0:	f000 fe27 	bl	800eb22 <_svfprintf_r+0x13be>
 800ded4:	af2f      	add	r7, sp, #188	; 0xbc
 800ded6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ded8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800deda:	2a00      	cmp	r2, #0
 800dedc:	d015      	beq.n	800df0a <_svfprintf_r+0x7a6>
 800dede:	aa25      	add	r2, sp, #148	; 0x94
 800dee0:	603a      	str	r2, [r7, #0]
 800dee2:	2202      	movs	r2, #2
 800dee4:	189b      	adds	r3, r3, r2
 800dee6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dee8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	3301      	adds	r3, #1
 800deee:	932d      	str	r3, [sp, #180]	; 0xb4
 800def0:	3708      	adds	r7, #8
 800def2:	2b07      	cmp	r3, #7
 800def4:	dd09      	ble.n	800df0a <_svfprintf_r+0x7a6>
 800def6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800def8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800defa:	aa2c      	add	r2, sp, #176	; 0xb0
 800defc:	f003 fd48 	bl	8011990 <__ssprint_r>
 800df00:	2800      	cmp	r0, #0
 800df02:	d001      	beq.n	800df08 <_svfprintf_r+0x7a4>
 800df04:	f000 fe0d 	bl	800eb22 <_svfprintf_r+0x13be>
 800df08:	af2f      	add	r7, sp, #188	; 0xbc
 800df0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df0c:	2b80      	cmp	r3, #128	; 0x80
 800df0e:	d11f      	bne.n	800df50 <_svfprintf_r+0x7ec>
 800df10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df14:	1a9c      	subs	r4, r3, r2
 800df16:	2c00      	cmp	r4, #0
 800df18:	dd1a      	ble.n	800df50 <_svfprintf_r+0x7ec>
 800df1a:	0039      	movs	r1, r7
 800df1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df1e:	482d      	ldr	r0, [pc, #180]	; (800dfd4 <_svfprintf_r+0x870>)
 800df20:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df22:	3301      	adds	r3, #1
 800df24:	3108      	adds	r1, #8
 800df26:	6038      	str	r0, [r7, #0]
 800df28:	2c10      	cmp	r4, #16
 800df2a:	dd00      	ble.n	800df2e <_svfprintf_r+0x7ca>
 800df2c:	e2d6      	b.n	800e4dc <_svfprintf_r+0xd78>
 800df2e:	607c      	str	r4, [r7, #4]
 800df30:	18a4      	adds	r4, r4, r2
 800df32:	000f      	movs	r7, r1
 800df34:	942e      	str	r4, [sp, #184]	; 0xb8
 800df36:	932d      	str	r3, [sp, #180]	; 0xb4
 800df38:	2b07      	cmp	r3, #7
 800df3a:	dd09      	ble.n	800df50 <_svfprintf_r+0x7ec>
 800df3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df40:	aa2c      	add	r2, sp, #176	; 0xb0
 800df42:	f003 fd25 	bl	8011990 <__ssprint_r>
 800df46:	2800      	cmp	r0, #0
 800df48:	d001      	beq.n	800df4e <_svfprintf_r+0x7ea>
 800df4a:	f000 fdea 	bl	800eb22 <_svfprintf_r+0x13be>
 800df4e:	af2f      	add	r7, sp, #188	; 0xbc
 800df50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df54:	1a9c      	subs	r4, r3, r2
 800df56:	2c00      	cmp	r4, #0
 800df58:	dd1a      	ble.n	800df90 <_svfprintf_r+0x82c>
 800df5a:	0039      	movs	r1, r7
 800df5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df5e:	481d      	ldr	r0, [pc, #116]	; (800dfd4 <_svfprintf_r+0x870>)
 800df60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df62:	3301      	adds	r3, #1
 800df64:	3108      	adds	r1, #8
 800df66:	6038      	str	r0, [r7, #0]
 800df68:	2c10      	cmp	r4, #16
 800df6a:	dd00      	ble.n	800df6e <_svfprintf_r+0x80a>
 800df6c:	e2c9      	b.n	800e502 <_svfprintf_r+0xd9e>
 800df6e:	18a2      	adds	r2, r4, r2
 800df70:	607c      	str	r4, [r7, #4]
 800df72:	922e      	str	r2, [sp, #184]	; 0xb8
 800df74:	000f      	movs	r7, r1
 800df76:	932d      	str	r3, [sp, #180]	; 0xb4
 800df78:	2b07      	cmp	r3, #7
 800df7a:	dd09      	ble.n	800df90 <_svfprintf_r+0x82c>
 800df7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df80:	aa2c      	add	r2, sp, #176	; 0xb0
 800df82:	f003 fd05 	bl	8011990 <__ssprint_r>
 800df86:	2800      	cmp	r0, #0
 800df88:	d001      	beq.n	800df8e <_svfprintf_r+0x82a>
 800df8a:	f000 fdca 	bl	800eb22 <_svfprintf_r+0x13be>
 800df8e:	af2f      	add	r7, sp, #188	; 0xbc
 800df90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df92:	9319      	str	r3, [sp, #100]	; 0x64
 800df94:	05f3      	lsls	r3, r6, #23
 800df96:	d500      	bpl.n	800df9a <_svfprintf_r+0x836>
 800df98:	e2ce      	b.n	800e538 <_svfprintf_r+0xdd4>
 800df9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	4694      	mov	ip, r2
 800dfa0:	603b      	str	r3, [r7, #0]
 800dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa4:	607b      	str	r3, [r7, #4]
 800dfa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfa8:	4463      	add	r3, ip
 800dfaa:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfae:	3301      	adds	r3, #1
 800dfb0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfb2:	2b07      	cmp	r3, #7
 800dfb4:	dd00      	ble.n	800dfb8 <_svfprintf_r+0x854>
 800dfb6:	e3a3      	b.n	800e700 <_svfprintf_r+0xf9c>
 800dfb8:	3708      	adds	r7, #8
 800dfba:	e301      	b.n	800e5c0 <_svfprintf_r+0xe5c>
 800dfbc:	08014bdc 	.word	0x08014bdc
 800dfc0:	08014bed 	.word	0x08014bed
 800dfc4:	40300000 	.word	0x40300000
 800dfc8:	3fe00000 	.word	0x3fe00000
 800dfcc:	fffffbff 	.word	0xfffffbff
 800dfd0:	08014c00 	.word	0x08014c00
 800dfd4:	08014c10 	.word	0x08014c10
 800dfd8:	9b08      	ldr	r3, [sp, #32]
 800dfda:	930c      	str	r3, [sp, #48]	; 0x30
 800dfdc:	e610      	b.n	800dc00 <_svfprintf_r+0x49c>
 800dfde:	2306      	movs	r3, #6
 800dfe0:	e5fd      	b.n	800dbde <_svfprintf_r+0x47a>
 800dfe2:	930e      	str	r3, [sp, #56]	; 0x38
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e61a      	b.n	800dc1e <_svfprintf_r+0x4ba>
 800dfe8:	7010      	strb	r0, [r2, #0]
 800dfea:	e684      	b.n	800dcf6 <_svfprintf_r+0x592>
 800dfec:	7018      	strb	r0, [r3, #0]
 800dfee:	3301      	adds	r3, #1
 800dff0:	1aca      	subs	r2, r1, r3
 800dff2:	d5fb      	bpl.n	800dfec <_svfprintf_r+0x888>
 800dff4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dff6:	2300      	movs	r3, #0
 800dff8:	3201      	adds	r2, #1
 800dffa:	db01      	blt.n	800e000 <_svfprintf_r+0x89c>
 800dffc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dffe:	3301      	adds	r3, #1
 800e000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e002:	18d3      	adds	r3, r2, r3
 800e004:	9323      	str	r3, [sp, #140]	; 0x8c
 800e006:	e684      	b.n	800dd12 <_svfprintf_r+0x5ae>
 800e008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e00a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e00c:	2030      	movs	r0, #48	; 0x30
 800e00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e010:	1851      	adds	r1, r2, r1
 800e012:	e7ed      	b.n	800dff0 <_svfprintf_r+0x88c>
 800e014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e016:	2303      	movs	r3, #3
 800e018:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e01a:	2a46      	cmp	r2, #70	; 0x46
 800e01c:	d006      	beq.n	800e02c <_svfprintf_r+0x8c8>
 800e01e:	0014      	movs	r4, r2
 800e020:	3c45      	subs	r4, #69	; 0x45
 800e022:	4262      	negs	r2, r4
 800e024:	4154      	adcs	r4, r2
 800e026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e028:	3b01      	subs	r3, #1
 800e02a:	1914      	adds	r4, r2, r4
 800e02c:	aa2a      	add	r2, sp, #168	; 0xa8
 800e02e:	9204      	str	r2, [sp, #16]
 800e030:	aa27      	add	r2, sp, #156	; 0x9c
 800e032:	9203      	str	r2, [sp, #12]
 800e034:	aa26      	add	r2, sp, #152	; 0x98
 800e036:	9202      	str	r2, [sp, #8]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	002a      	movs	r2, r5
 800e03c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e03e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e040:	9401      	str	r4, [sp, #4]
 800e042:	f002 fad7 	bl	80105f4 <_dtoa_r>
 800e046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e048:	9008      	str	r0, [sp, #32]
 800e04a:	2b47      	cmp	r3, #71	; 0x47
 800e04c:	d103      	bne.n	800e056 <_svfprintf_r+0x8f2>
 800e04e:	07f3      	lsls	r3, r6, #31
 800e050:	d401      	bmi.n	800e056 <_svfprintf_r+0x8f2>
 800e052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e054:	e65e      	b.n	800dd14 <_svfprintf_r+0x5b0>
 800e056:	9b08      	ldr	r3, [sp, #32]
 800e058:	191b      	adds	r3, r3, r4
 800e05a:	9311      	str	r3, [sp, #68]	; 0x44
 800e05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e05e:	2b46      	cmp	r3, #70	; 0x46
 800e060:	d112      	bne.n	800e088 <_svfprintf_r+0x924>
 800e062:	9b08      	ldr	r3, [sp, #32]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b30      	cmp	r3, #48	; 0x30
 800e068:	d10a      	bne.n	800e080 <_svfprintf_r+0x91c>
 800e06a:	2200      	movs	r2, #0
 800e06c:	2300      	movs	r3, #0
 800e06e:	0028      	movs	r0, r5
 800e070:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e072:	f7f2 f9e9 	bl	8000448 <__aeabi_dcmpeq>
 800e076:	2800      	cmp	r0, #0
 800e078:	d102      	bne.n	800e080 <_svfprintf_r+0x91c>
 800e07a:	2301      	movs	r3, #1
 800e07c:	1b1b      	subs	r3, r3, r4
 800e07e:	9326      	str	r3, [sp, #152]	; 0x98
 800e080:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e084:	18d3      	adds	r3, r2, r3
 800e086:	9311      	str	r3, [sp, #68]	; 0x44
 800e088:	2200      	movs	r2, #0
 800e08a:	2300      	movs	r3, #0
 800e08c:	0028      	movs	r0, r5
 800e08e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e090:	f7f2 f9da 	bl	8000448 <__aeabi_dcmpeq>
 800e094:	2800      	cmp	r0, #0
 800e096:	d001      	beq.n	800e09c <_svfprintf_r+0x938>
 800e098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e09a:	932a      	str	r3, [sp, #168]	; 0xa8
 800e09c:	2230      	movs	r2, #48	; 0x30
 800e09e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0a2:	4299      	cmp	r1, r3
 800e0a4:	d9d5      	bls.n	800e052 <_svfprintf_r+0x8ee>
 800e0a6:	1c59      	adds	r1, r3, #1
 800e0a8:	912a      	str	r1, [sp, #168]	; 0xa8
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	e7f7      	b.n	800e09e <_svfprintf_r+0x93a>
 800e0ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0b0:	2b46      	cmp	r3, #70	; 0x46
 800e0b2:	d000      	beq.n	800e0b6 <_svfprintf_r+0x952>
 800e0b4:	e63f      	b.n	800dd36 <_svfprintf_r+0x5d2>
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	0033      	movs	r3, r6
 800e0ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0bc:	4013      	ands	r3, r2
 800e0be:	430b      	orrs	r3, r1
 800e0c0:	2d00      	cmp	r5, #0
 800e0c2:	dd2c      	ble.n	800e11e <_svfprintf_r+0x9ba>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d046      	beq.n	800e156 <_svfprintf_r+0x9f2>
 800e0c8:	000a      	movs	r2, r1
 800e0ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0cc:	18eb      	adds	r3, r5, r3
 800e0ce:	18d3      	adds	r3, r2, r3
 800e0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d2:	2366      	movs	r3, #102	; 0x66
 800e0d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0d6:	e030      	b.n	800e13a <_svfprintf_r+0x9d6>
 800e0d8:	781c      	ldrb	r4, [r3, #0]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	7014      	strb	r4, [r2, #0]
 800e0de:	3201      	adds	r2, #1
 800e0e0:	e668      	b.n	800ddb4 <_svfprintf_r+0x650>
 800e0e2:	222a      	movs	r2, #42	; 0x2a
 800e0e4:	ab1e      	add	r3, sp, #120	; 0x78
 800e0e6:	18d2      	adds	r2, r2, r3
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d104      	bne.n	800e0f6 <_svfprintf_r+0x992>
 800e0ec:	2330      	movs	r3, #48	; 0x30
 800e0ee:	222b      	movs	r2, #43	; 0x2b
 800e0f0:	708b      	strb	r3, [r1, #2]
 800e0f2:	ab1e      	add	r3, sp, #120	; 0x78
 800e0f4:	18d2      	adds	r2, r2, r3
 800e0f6:	3430      	adds	r4, #48	; 0x30
 800e0f8:	1c53      	adds	r3, r2, #1
 800e0fa:	7014      	strb	r4, [r2, #0]
 800e0fc:	e669      	b.n	800ddd2 <_svfprintf_r+0x66e>
 800e0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e100:	42ab      	cmp	r3, r5
 800e102:	dd12      	ble.n	800e12a <_svfprintf_r+0x9c6>
 800e104:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e108:	4694      	mov	ip, r2
 800e10a:	4463      	add	r3, ip
 800e10c:	9309      	str	r3, [sp, #36]	; 0x24
 800e10e:	2367      	movs	r3, #103	; 0x67
 800e110:	930f      	str	r3, [sp, #60]	; 0x3c
 800e112:	2d00      	cmp	r5, #0
 800e114:	dc11      	bgt.n	800e13a <_svfprintf_r+0x9d6>
 800e116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e118:	1b5b      	subs	r3, r3, r5
 800e11a:	3301      	adds	r3, #1
 800e11c:	e00c      	b.n	800e138 <_svfprintf_r+0x9d4>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d01b      	beq.n	800e15a <_svfprintf_r+0x9f6>
 800e122:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e126:	3301      	adds	r3, #1
 800e128:	e7d1      	b.n	800e0ce <_svfprintf_r+0x96a>
 800e12a:	2367      	movs	r3, #103	; 0x67
 800e12c:	9509      	str	r5, [sp, #36]	; 0x24
 800e12e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e130:	07f3      	lsls	r3, r6, #31
 800e132:	d502      	bpl.n	800e13a <_svfprintf_r+0x9d6>
 800e134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e136:	18eb      	adds	r3, r5, r3
 800e138:	9309      	str	r3, [sp, #36]	; 0x24
 800e13a:	2380      	movs	r3, #128	; 0x80
 800e13c:	0032      	movs	r2, r6
 800e13e:	00db      	lsls	r3, r3, #3
 800e140:	401a      	ands	r2, r3
 800e142:	9211      	str	r2, [sp, #68]	; 0x44
 800e144:	2200      	movs	r2, #0
 800e146:	9210      	str	r2, [sp, #64]	; 0x40
 800e148:	421e      	tst	r6, r3
 800e14a:	d100      	bne.n	800e14e <_svfprintf_r+0x9ea>
 800e14c:	e65d      	b.n	800de0a <_svfprintf_r+0x6a6>
 800e14e:	4295      	cmp	r5, r2
 800e150:	dc25      	bgt.n	800e19e <_svfprintf_r+0xa3a>
 800e152:	9211      	str	r2, [sp, #68]	; 0x44
 800e154:	e659      	b.n	800de0a <_svfprintf_r+0x6a6>
 800e156:	9509      	str	r5, [sp, #36]	; 0x24
 800e158:	e7bb      	b.n	800e0d2 <_svfprintf_r+0x96e>
 800e15a:	2366      	movs	r3, #102	; 0x66
 800e15c:	9209      	str	r2, [sp, #36]	; 0x24
 800e15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e160:	e7eb      	b.n	800e13a <_svfprintf_r+0x9d6>
 800e162:	42ab      	cmp	r3, r5
 800e164:	da0e      	bge.n	800e184 <_svfprintf_r+0xa20>
 800e166:	1aed      	subs	r5, r5, r3
 800e168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e16a:	785b      	ldrb	r3, [r3, #1]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d012      	beq.n	800e196 <_svfprintf_r+0xa32>
 800e170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e172:	3301      	adds	r3, #1
 800e174:	9311      	str	r3, [sp, #68]	; 0x44
 800e176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e178:	3301      	adds	r3, #1
 800e17a:	9312      	str	r3, [sp, #72]	; 0x48
 800e17c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	2bff      	cmp	r3, #255	; 0xff
 800e182:	d1ee      	bne.n	800e162 <_svfprintf_r+0x9fe>
 800e184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e188:	189b      	adds	r3, r3, r2
 800e18a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e18c:	4353      	muls	r3, r2
 800e18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e190:	189b      	adds	r3, r3, r2
 800e192:	9309      	str	r3, [sp, #36]	; 0x24
 800e194:	e639      	b.n	800de0a <_svfprintf_r+0x6a6>
 800e196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e198:	3301      	adds	r3, #1
 800e19a:	9310      	str	r3, [sp, #64]	; 0x40
 800e19c:	e7ee      	b.n	800e17c <_svfprintf_r+0xa18>
 800e19e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a0:	9311      	str	r3, [sp, #68]	; 0x44
 800e1a2:	e7eb      	b.n	800e17c <_svfprintf_r+0xa18>
 800e1a4:	1d23      	adds	r3, r4, #4
 800e1a6:	930d      	str	r3, [sp, #52]	; 0x34
 800e1a8:	06b3      	lsls	r3, r6, #26
 800e1aa:	d509      	bpl.n	800e1c0 <_svfprintf_r+0xa5c>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	17d2      	asrs	r2, r2, #31
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e1ba:	9308      	str	r3, [sp, #32]
 800e1bc:	f7ff fb0d 	bl	800d7da <_svfprintf_r+0x76>
 800e1c0:	06f3      	lsls	r3, r6, #27
 800e1c2:	d503      	bpl.n	800e1cc <_svfprintf_r+0xa68>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e7f4      	b.n	800e1b6 <_svfprintf_r+0xa52>
 800e1cc:	0673      	lsls	r3, r6, #25
 800e1ce:	d503      	bpl.n	800e1d8 <_svfprintf_r+0xa74>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1d4:	801a      	strh	r2, [r3, #0]
 800e1d6:	e7ee      	b.n	800e1b6 <_svfprintf_r+0xa52>
 800e1d8:	05b6      	lsls	r6, r6, #22
 800e1da:	d5f3      	bpl.n	800e1c4 <_svfprintf_r+0xa60>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1e0:	701a      	strb	r2, [r3, #0]
 800e1e2:	e7e8      	b.n	800e1b6 <_svfprintf_r+0xa52>
 800e1e4:	2310      	movs	r3, #16
 800e1e6:	431e      	orrs	r6, r3
 800e1e8:	2320      	movs	r3, #32
 800e1ea:	0030      	movs	r0, r6
 800e1ec:	4018      	ands	r0, r3
 800e1ee:	421e      	tst	r6, r3
 800e1f0:	d00f      	beq.n	800e212 <_svfprintf_r+0xaae>
 800e1f2:	3b19      	subs	r3, #25
 800e1f4:	3407      	adds	r4, #7
 800e1f6:	439c      	bics	r4, r3
 800e1f8:	0022      	movs	r2, r4
 800e1fa:	ca18      	ldmia	r2!, {r3, r4}
 800e1fc:	9306      	str	r3, [sp, #24]
 800e1fe:	9407      	str	r4, [sp, #28]
 800e200:	920d      	str	r2, [sp, #52]	; 0x34
 800e202:	4bc9      	ldr	r3, [pc, #804]	; (800e528 <_svfprintf_r+0xdc4>)
 800e204:	401e      	ands	r6, r3
 800e206:	2300      	movs	r3, #0
 800e208:	221b      	movs	r2, #27
 800e20a:	a91e      	add	r1, sp, #120	; 0x78
 800e20c:	1852      	adds	r2, r2, r1
 800e20e:	2100      	movs	r1, #0
 800e210:	e430      	b.n	800da74 <_svfprintf_r+0x310>
 800e212:	0022      	movs	r2, r4
 800e214:	ca08      	ldmia	r2!, {r3}
 800e216:	0031      	movs	r1, r6
 800e218:	920d      	str	r2, [sp, #52]	; 0x34
 800e21a:	2210      	movs	r2, #16
 800e21c:	4011      	ands	r1, r2
 800e21e:	4216      	tst	r6, r2
 800e220:	d002      	beq.n	800e228 <_svfprintf_r+0xac4>
 800e222:	9306      	str	r3, [sp, #24]
 800e224:	9007      	str	r0, [sp, #28]
 800e226:	e7ec      	b.n	800e202 <_svfprintf_r+0xa9e>
 800e228:	2240      	movs	r2, #64	; 0x40
 800e22a:	0030      	movs	r0, r6
 800e22c:	4010      	ands	r0, r2
 800e22e:	4216      	tst	r6, r2
 800e230:	d003      	beq.n	800e23a <_svfprintf_r+0xad6>
 800e232:	b29b      	uxth	r3, r3
 800e234:	9306      	str	r3, [sp, #24]
 800e236:	9107      	str	r1, [sp, #28]
 800e238:	e7e3      	b.n	800e202 <_svfprintf_r+0xa9e>
 800e23a:	2280      	movs	r2, #128	; 0x80
 800e23c:	0031      	movs	r1, r6
 800e23e:	0092      	lsls	r2, r2, #2
 800e240:	4011      	ands	r1, r2
 800e242:	4216      	tst	r6, r2
 800e244:	d0f6      	beq.n	800e234 <_svfprintf_r+0xad0>
 800e246:	b2db      	uxtb	r3, r3
 800e248:	e7eb      	b.n	800e222 <_svfprintf_r+0xabe>
 800e24a:	0023      	movs	r3, r4
 800e24c:	cb04      	ldmia	r3!, {r2}
 800e24e:	49b7      	ldr	r1, [pc, #732]	; (800e52c <_svfprintf_r+0xdc8>)
 800e250:	9206      	str	r2, [sp, #24]
 800e252:	aa25      	add	r2, sp, #148	; 0x94
 800e254:	8011      	strh	r1, [r2, #0]
 800e256:	4ab6      	ldr	r2, [pc, #728]	; (800e530 <_svfprintf_r+0xdcc>)
 800e258:	930d      	str	r3, [sp, #52]	; 0x34
 800e25a:	2300      	movs	r3, #0
 800e25c:	921f      	str	r2, [sp, #124]	; 0x7c
 800e25e:	2278      	movs	r2, #120	; 0x78
 800e260:	9307      	str	r3, [sp, #28]
 800e262:	3302      	adds	r3, #2
 800e264:	431e      	orrs	r6, r3
 800e266:	920f      	str	r2, [sp, #60]	; 0x3c
 800e268:	e7ce      	b.n	800e208 <_svfprintf_r+0xaa4>
 800e26a:	0023      	movs	r3, r4
 800e26c:	cb04      	ldmia	r3!, {r2}
 800e26e:	2400      	movs	r4, #0
 800e270:	930d      	str	r3, [sp, #52]	; 0x34
 800e272:	231b      	movs	r3, #27
 800e274:	9208      	str	r2, [sp, #32]
 800e276:	aa1e      	add	r2, sp, #120	; 0x78
 800e278:	189b      	adds	r3, r3, r2
 800e27a:	701c      	strb	r4, [r3, #0]
 800e27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e27e:	3301      	adds	r3, #1
 800e280:	d00e      	beq.n	800e2a0 <_svfprintf_r+0xb3c>
 800e282:	0021      	movs	r1, r4
 800e284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e286:	9808      	ldr	r0, [sp, #32]
 800e288:	f002 f83a 	bl	8010300 <memchr>
 800e28c:	900c      	str	r0, [sp, #48]	; 0x30
 800e28e:	42a0      	cmp	r0, r4
 800e290:	d100      	bne.n	800e294 <_svfprintf_r+0xb30>
 800e292:	e10d      	b.n	800e4b0 <_svfprintf_r+0xd4c>
 800e294:	9a08      	ldr	r2, [sp, #32]
 800e296:	1a83      	subs	r3, r0, r2
 800e298:	9309      	str	r3, [sp, #36]	; 0x24
 800e29a:	0023      	movs	r3, r4
 800e29c:	940c      	str	r4, [sp, #48]	; 0x30
 800e29e:	e44e      	b.n	800db3e <_svfprintf_r+0x3da>
 800e2a0:	9808      	ldr	r0, [sp, #32]
 800e2a2:	f7f1 ff2f 	bl	8000104 <strlen>
 800e2a6:	9009      	str	r0, [sp, #36]	; 0x24
 800e2a8:	e7f7      	b.n	800e29a <_svfprintf_r+0xb36>
 800e2aa:	2310      	movs	r3, #16
 800e2ac:	431e      	orrs	r6, r3
 800e2ae:	2320      	movs	r3, #32
 800e2b0:	0030      	movs	r0, r6
 800e2b2:	4018      	ands	r0, r3
 800e2b4:	421e      	tst	r6, r3
 800e2b6:	d009      	beq.n	800e2cc <_svfprintf_r+0xb68>
 800e2b8:	3b19      	subs	r3, #25
 800e2ba:	3407      	adds	r4, #7
 800e2bc:	439c      	bics	r4, r3
 800e2be:	0022      	movs	r2, r4
 800e2c0:	ca18      	ldmia	r2!, {r3, r4}
 800e2c2:	9306      	str	r3, [sp, #24]
 800e2c4:	9407      	str	r4, [sp, #28]
 800e2c6:	920d      	str	r2, [sp, #52]	; 0x34
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e79d      	b.n	800e208 <_svfprintf_r+0xaa4>
 800e2cc:	0023      	movs	r3, r4
 800e2ce:	cb04      	ldmia	r3!, {r2}
 800e2d0:	0031      	movs	r1, r6
 800e2d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e2d4:	2310      	movs	r3, #16
 800e2d6:	4019      	ands	r1, r3
 800e2d8:	421e      	tst	r6, r3
 800e2da:	d003      	beq.n	800e2e4 <_svfprintf_r+0xb80>
 800e2dc:	9206      	str	r2, [sp, #24]
 800e2de:	9007      	str	r0, [sp, #28]
 800e2e0:	3b0f      	subs	r3, #15
 800e2e2:	e791      	b.n	800e208 <_svfprintf_r+0xaa4>
 800e2e4:	2340      	movs	r3, #64	; 0x40
 800e2e6:	0030      	movs	r0, r6
 800e2e8:	4018      	ands	r0, r3
 800e2ea:	421e      	tst	r6, r3
 800e2ec:	d003      	beq.n	800e2f6 <_svfprintf_r+0xb92>
 800e2ee:	b293      	uxth	r3, r2
 800e2f0:	9306      	str	r3, [sp, #24]
 800e2f2:	9107      	str	r1, [sp, #28]
 800e2f4:	e7e8      	b.n	800e2c8 <_svfprintf_r+0xb64>
 800e2f6:	2380      	movs	r3, #128	; 0x80
 800e2f8:	0031      	movs	r1, r6
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4019      	ands	r1, r3
 800e2fe:	421e      	tst	r6, r3
 800e300:	d003      	beq.n	800e30a <_svfprintf_r+0xba6>
 800e302:	b2d3      	uxtb	r3, r2
 800e304:	9306      	str	r3, [sp, #24]
 800e306:	9007      	str	r0, [sp, #28]
 800e308:	e7de      	b.n	800e2c8 <_svfprintf_r+0xb64>
 800e30a:	9206      	str	r2, [sp, #24]
 800e30c:	e7f1      	b.n	800e2f2 <_svfprintf_r+0xb8e>
 800e30e:	4b89      	ldr	r3, [pc, #548]	; (800e534 <_svfprintf_r+0xdd0>)
 800e310:	0030      	movs	r0, r6
 800e312:	931f      	str	r3, [sp, #124]	; 0x7c
 800e314:	2320      	movs	r3, #32
 800e316:	4018      	ands	r0, r3
 800e318:	421e      	tst	r6, r3
 800e31a:	d01a      	beq.n	800e352 <_svfprintf_r+0xbee>
 800e31c:	3b19      	subs	r3, #25
 800e31e:	3407      	adds	r4, #7
 800e320:	439c      	bics	r4, r3
 800e322:	0022      	movs	r2, r4
 800e324:	ca18      	ldmia	r2!, {r3, r4}
 800e326:	9306      	str	r3, [sp, #24]
 800e328:	9407      	str	r4, [sp, #28]
 800e32a:	920d      	str	r2, [sp, #52]	; 0x34
 800e32c:	07f3      	lsls	r3, r6, #31
 800e32e:	d50a      	bpl.n	800e346 <_svfprintf_r+0xbe2>
 800e330:	9b06      	ldr	r3, [sp, #24]
 800e332:	9a07      	ldr	r2, [sp, #28]
 800e334:	4313      	orrs	r3, r2
 800e336:	d006      	beq.n	800e346 <_svfprintf_r+0xbe2>
 800e338:	2230      	movs	r2, #48	; 0x30
 800e33a:	ab25      	add	r3, sp, #148	; 0x94
 800e33c:	701a      	strb	r2, [r3, #0]
 800e33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e340:	705a      	strb	r2, [r3, #1]
 800e342:	2302      	movs	r3, #2
 800e344:	431e      	orrs	r6, r3
 800e346:	4b78      	ldr	r3, [pc, #480]	; (800e528 <_svfprintf_r+0xdc4>)
 800e348:	401e      	ands	r6, r3
 800e34a:	2302      	movs	r3, #2
 800e34c:	e75c      	b.n	800e208 <_svfprintf_r+0xaa4>
 800e34e:	4b78      	ldr	r3, [pc, #480]	; (800e530 <_svfprintf_r+0xdcc>)
 800e350:	e7de      	b.n	800e310 <_svfprintf_r+0xbac>
 800e352:	0023      	movs	r3, r4
 800e354:	cb04      	ldmia	r3!, {r2}
 800e356:	0031      	movs	r1, r6
 800e358:	930d      	str	r3, [sp, #52]	; 0x34
 800e35a:	2310      	movs	r3, #16
 800e35c:	4019      	ands	r1, r3
 800e35e:	421e      	tst	r6, r3
 800e360:	d002      	beq.n	800e368 <_svfprintf_r+0xc04>
 800e362:	9206      	str	r2, [sp, #24]
 800e364:	9007      	str	r0, [sp, #28]
 800e366:	e7e1      	b.n	800e32c <_svfprintf_r+0xbc8>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	0030      	movs	r0, r6
 800e36c:	4018      	ands	r0, r3
 800e36e:	421e      	tst	r6, r3
 800e370:	d003      	beq.n	800e37a <_svfprintf_r+0xc16>
 800e372:	b293      	uxth	r3, r2
 800e374:	9306      	str	r3, [sp, #24]
 800e376:	9107      	str	r1, [sp, #28]
 800e378:	e7d8      	b.n	800e32c <_svfprintf_r+0xbc8>
 800e37a:	2380      	movs	r3, #128	; 0x80
 800e37c:	0031      	movs	r1, r6
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4019      	ands	r1, r3
 800e382:	421e      	tst	r6, r3
 800e384:	d002      	beq.n	800e38c <_svfprintf_r+0xc28>
 800e386:	b2d3      	uxtb	r3, r2
 800e388:	9306      	str	r3, [sp, #24]
 800e38a:	e7eb      	b.n	800e364 <_svfprintf_r+0xc00>
 800e38c:	9206      	str	r2, [sp, #24]
 800e38e:	e7f2      	b.n	800e376 <_svfprintf_r+0xc12>
 800e390:	9b07      	ldr	r3, [sp, #28]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10a      	bne.n	800e3ac <_svfprintf_r+0xc48>
 800e396:	9b06      	ldr	r3, [sp, #24]
 800e398:	2b09      	cmp	r3, #9
 800e39a:	d807      	bhi.n	800e3ac <_svfprintf_r+0xc48>
 800e39c:	23e7      	movs	r3, #231	; 0xe7
 800e39e:	aa1e      	add	r2, sp, #120	; 0x78
 800e3a0:	189b      	adds	r3, r3, r2
 800e3a2:	9a06      	ldr	r2, [sp, #24]
 800e3a4:	3230      	adds	r2, #48	; 0x30
 800e3a6:	701a      	strb	r2, [r3, #0]
 800e3a8:	f000 fc18 	bl	800ebdc <_svfprintf_r+0x1478>
 800e3ac:	2680      	movs	r6, #128	; 0x80
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	00f6      	lsls	r6, r6, #3
 800e3b2:	930e      	str	r3, [sp, #56]	; 0x38
 800e3b4:	ad58      	add	r5, sp, #352	; 0x160
 800e3b6:	4026      	ands	r6, r4
 800e3b8:	220a      	movs	r2, #10
 800e3ba:	9806      	ldr	r0, [sp, #24]
 800e3bc:	9907      	ldr	r1, [sp, #28]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f7f2 f870 	bl	80004a4 <__aeabi_uldivmod>
 800e3c4:	1e6b      	subs	r3, r5, #1
 800e3c6:	3230      	adds	r2, #48	; 0x30
 800e3c8:	9308      	str	r3, [sp, #32]
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3ce:	900c      	str	r0, [sp, #48]	; 0x30
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	9110      	str	r1, [sp, #64]	; 0x40
 800e3d4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3d6:	2e00      	cmp	r6, #0
 800e3d8:	d01d      	beq.n	800e416 <_svfprintf_r+0xcb2>
 800e3da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d118      	bne.n	800e416 <_svfprintf_r+0xcb2>
 800e3e4:	2aff      	cmp	r2, #255	; 0xff
 800e3e6:	d016      	beq.n	800e416 <_svfprintf_r+0xcb2>
 800e3e8:	9b07      	ldr	r3, [sp, #28]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <_svfprintf_r+0xc90>
 800e3ee:	9b06      	ldr	r3, [sp, #24]
 800e3f0:	2b09      	cmp	r3, #9
 800e3f2:	d910      	bls.n	800e416 <_svfprintf_r+0xcb2>
 800e3f4:	9b08      	ldr	r3, [sp, #32]
 800e3f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e3f8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e3fa:	1a9b      	subs	r3, r3, r2
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	9308      	str	r3, [sp, #32]
 800e400:	f7fd ffd1 	bl	800c3a6 <strncpy>
 800e404:	2200      	movs	r2, #0
 800e406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e408:	920e      	str	r2, [sp, #56]	; 0x38
 800e40a:	785b      	ldrb	r3, [r3, #1]
 800e40c:	1e5a      	subs	r2, r3, #1
 800e40e:	4193      	sbcs	r3, r2
 800e410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e412:	18d3      	adds	r3, r2, r3
 800e414:	9312      	str	r3, [sp, #72]	; 0x48
 800e416:	9b07      	ldr	r3, [sp, #28]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10f      	bne.n	800e43c <_svfprintf_r+0xcd8>
 800e41c:	9b06      	ldr	r3, [sp, #24]
 800e41e:	2b09      	cmp	r3, #9
 800e420:	d80c      	bhi.n	800e43c <_svfprintf_r+0xcd8>
 800e422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e424:	9a08      	ldr	r2, [sp, #32]
 800e426:	9319      	str	r3, [sp, #100]	; 0x64
 800e428:	ab58      	add	r3, sp, #352	; 0x160
 800e42a:	1a9b      	subs	r3, r3, r2
 800e42c:	9309      	str	r3, [sp, #36]	; 0x24
 800e42e:	2300      	movs	r3, #0
 800e430:	0026      	movs	r6, r4
 800e432:	930c      	str	r3, [sp, #48]	; 0x30
 800e434:	001d      	movs	r5, r3
 800e436:	9310      	str	r3, [sp, #64]	; 0x40
 800e438:	9311      	str	r3, [sp, #68]	; 0x44
 800e43a:	e4f2      	b.n	800de22 <_svfprintf_r+0x6be>
 800e43c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e43e:	9d08      	ldr	r5, [sp, #32]
 800e440:	9306      	str	r3, [sp, #24]
 800e442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e444:	9307      	str	r3, [sp, #28]
 800e446:	e7b7      	b.n	800e3b8 <_svfprintf_r+0xc54>
 800e448:	200f      	movs	r0, #15
 800e44a:	ab58      	add	r3, sp, #352	; 0x160
 800e44c:	9308      	str	r3, [sp, #32]
 800e44e:	9b08      	ldr	r3, [sp, #32]
 800e450:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e452:	3b01      	subs	r3, #1
 800e454:	9308      	str	r3, [sp, #32]
 800e456:	9b06      	ldr	r3, [sp, #24]
 800e458:	4003      	ands	r3, r0
 800e45a:	5cd3      	ldrb	r3, [r2, r3]
 800e45c:	9a08      	ldr	r2, [sp, #32]
 800e45e:	7013      	strb	r3, [r2, #0]
 800e460:	9b07      	ldr	r3, [sp, #28]
 800e462:	0719      	lsls	r1, r3, #28
 800e464:	9b06      	ldr	r3, [sp, #24]
 800e466:	091a      	lsrs	r2, r3, #4
 800e468:	9b07      	ldr	r3, [sp, #28]
 800e46a:	4311      	orrs	r1, r2
 800e46c:	091b      	lsrs	r3, r3, #4
 800e46e:	9307      	str	r3, [sp, #28]
 800e470:	000b      	movs	r3, r1
 800e472:	9a07      	ldr	r2, [sp, #28]
 800e474:	9106      	str	r1, [sp, #24]
 800e476:	4313      	orrs	r3, r2
 800e478:	d1e9      	bne.n	800e44e <_svfprintf_r+0xcea>
 800e47a:	e7d2      	b.n	800e422 <_svfprintf_r+0xcbe>
 800e47c:	aa58      	add	r2, sp, #352	; 0x160
 800e47e:	9208      	str	r2, [sp, #32]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1ce      	bne.n	800e422 <_svfprintf_r+0xcbe>
 800e484:	07f6      	lsls	r6, r6, #31
 800e486:	d5cc      	bpl.n	800e422 <_svfprintf_r+0xcbe>
 800e488:	aa1e      	add	r2, sp, #120	; 0x78
 800e48a:	33e7      	adds	r3, #231	; 0xe7
 800e48c:	189b      	adds	r3, r3, r2
 800e48e:	2230      	movs	r2, #48	; 0x30
 800e490:	e789      	b.n	800e3a6 <_svfprintf_r+0xc42>
 800e492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e494:	2b00      	cmp	r3, #0
 800e496:	d100      	bne.n	800e49a <_svfprintf_r+0xd36>
 800e498:	e364      	b.n	800eb64 <_svfprintf_r+0x1400>
 800e49a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e49c:	211b      	movs	r1, #27
 800e49e:	ab3f      	add	r3, sp, #252	; 0xfc
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	a81e      	add	r0, sp, #120	; 0x78
 800e4a6:	1809      	adds	r1, r1, r0
 800e4a8:	700a      	strb	r2, [r1, #0]
 800e4aa:	940d      	str	r4, [sp, #52]	; 0x34
 800e4ac:	f7ff fabd 	bl	800da2a <_svfprintf_r+0x2c6>
 800e4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4b2:	f7ff fb44 	bl	800db3e <_svfprintf_r+0x3da>
 800e4b6:	2010      	movs	r0, #16
 800e4b8:	1812      	adds	r2, r2, r0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4be:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4c0:	2b07      	cmp	r3, #7
 800e4c2:	dd08      	ble.n	800e4d6 <_svfprintf_r+0xd72>
 800e4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ca:	f003 fa61 	bl	8011990 <__ssprint_r>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d000      	beq.n	800e4d4 <_svfprintf_r+0xd70>
 800e4d2:	e326      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e4d4:	a92f      	add	r1, sp, #188	; 0xbc
 800e4d6:	000f      	movs	r7, r1
 800e4d8:	3c10      	subs	r4, #16
 800e4da:	e4c5      	b.n	800de68 <_svfprintf_r+0x704>
 800e4dc:	2010      	movs	r0, #16
 800e4de:	1812      	adds	r2, r2, r0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4e6:	2b07      	cmp	r3, #7
 800e4e8:	dd08      	ble.n	800e4fc <_svfprintf_r+0xd98>
 800e4ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4f0:	f003 fa4e 	bl	8011990 <__ssprint_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d000      	beq.n	800e4fa <_svfprintf_r+0xd96>
 800e4f8:	e313      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e4fa:	a92f      	add	r1, sp, #188	; 0xbc
 800e4fc:	000f      	movs	r7, r1
 800e4fe:	3c10      	subs	r4, #16
 800e500:	e50b      	b.n	800df1a <_svfprintf_r+0x7b6>
 800e502:	2010      	movs	r0, #16
 800e504:	1812      	adds	r2, r2, r0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	922e      	str	r2, [sp, #184]	; 0xb8
 800e50a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e50c:	2b07      	cmp	r3, #7
 800e50e:	dd08      	ble.n	800e522 <_svfprintf_r+0xdbe>
 800e510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e512:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e514:	aa2c      	add	r2, sp, #176	; 0xb0
 800e516:	f003 fa3b 	bl	8011990 <__ssprint_r>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d000      	beq.n	800e520 <_svfprintf_r+0xdbc>
 800e51e:	e300      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e520:	a92f      	add	r1, sp, #188	; 0xbc
 800e522:	000f      	movs	r7, r1
 800e524:	3c10      	subs	r4, #16
 800e526:	e518      	b.n	800df5a <_svfprintf_r+0x7f6>
 800e528:	fffffbff 	.word	0xfffffbff
 800e52c:	00007830 	.word	0x00007830
 800e530:	08014bdc 	.word	0x08014bdc
 800e534:	08014bed 	.word	0x08014bed
 800e538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e53a:	2b65      	cmp	r3, #101	; 0x65
 800e53c:	dc00      	bgt.n	800e540 <_svfprintf_r+0xddc>
 800e53e:	e241      	b.n	800e9c4 <_svfprintf_r+0x1260>
 800e540:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e542:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e544:	2200      	movs	r2, #0
 800e546:	2300      	movs	r3, #0
 800e548:	f7f1 ff7e 	bl	8000448 <__aeabi_dcmpeq>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d077      	beq.n	800e640 <_svfprintf_r+0xedc>
 800e550:	4bca      	ldr	r3, [pc, #808]	; (800e87c <_svfprintf_r+0x1118>)
 800e552:	603b      	str	r3, [r7, #0]
 800e554:	2301      	movs	r3, #1
 800e556:	607b      	str	r3, [r7, #4]
 800e558:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e55a:	3708      	adds	r7, #8
 800e55c:	3301      	adds	r3, #1
 800e55e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e560:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e562:	3301      	adds	r3, #1
 800e564:	932d      	str	r3, [sp, #180]	; 0xb4
 800e566:	2b07      	cmp	r3, #7
 800e568:	dd08      	ble.n	800e57c <_svfprintf_r+0xe18>
 800e56a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e56c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e56e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e570:	f003 fa0e 	bl	8011990 <__ssprint_r>
 800e574:	2800      	cmp	r0, #0
 800e576:	d000      	beq.n	800e57a <_svfprintf_r+0xe16>
 800e578:	e2d3      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e57a:	af2f      	add	r7, sp, #188	; 0xbc
 800e57c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e57e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e580:	4293      	cmp	r3, r2
 800e582:	db01      	blt.n	800e588 <_svfprintf_r+0xe24>
 800e584:	07f3      	lsls	r3, r6, #31
 800e586:	d51b      	bpl.n	800e5c0 <_svfprintf_r+0xe5c>
 800e588:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e58a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e58c:	603b      	str	r3, [r7, #0]
 800e58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e590:	607b      	str	r3, [r7, #4]
 800e592:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e594:	3708      	adds	r7, #8
 800e596:	189b      	adds	r3, r3, r2
 800e598:	932e      	str	r3, [sp, #184]	; 0xb8
 800e59a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e59c:	3301      	adds	r3, #1
 800e59e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5a0:	2b07      	cmp	r3, #7
 800e5a2:	dd08      	ble.n	800e5b6 <_svfprintf_r+0xe52>
 800e5a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5a8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5aa:	f003 f9f1 	bl	8011990 <__ssprint_r>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d000      	beq.n	800e5b4 <_svfprintf_r+0xe50>
 800e5b2:	e2b6      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e5b4:	af2f      	add	r7, sp, #188	; 0xbc
 800e5b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5b8:	2510      	movs	r5, #16
 800e5ba:	1e5c      	subs	r4, r3, #1
 800e5bc:	2c00      	cmp	r4, #0
 800e5be:	dc2e      	bgt.n	800e61e <_svfprintf_r+0xeba>
 800e5c0:	0776      	lsls	r6, r6, #29
 800e5c2:	d500      	bpl.n	800e5c6 <_svfprintf_r+0xe62>
 800e5c4:	e290      	b.n	800eae8 <_svfprintf_r+0x1384>
 800e5c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e5c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	da00      	bge.n	800e5d0 <_svfprintf_r+0xe6c>
 800e5ce:	0013      	movs	r3, r2
 800e5d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e5d2:	18d3      	adds	r3, r2, r3
 800e5d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d007      	beq.n	800e5ec <_svfprintf_r+0xe88>
 800e5dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5e2:	f003 f9d5 	bl	8011990 <__ssprint_r>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d000      	beq.n	800e5ec <_svfprintf_r+0xe88>
 800e5ea:	e29a      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d000      	beq.n	800e5f8 <_svfprintf_r+0xe94>
 800e5f6:	e2b0      	b.n	800eb5a <_svfprintf_r+0x13f6>
 800e5f8:	af2f      	add	r7, sp, #188	; 0xbc
 800e5fa:	e5dc      	b.n	800e1b6 <_svfprintf_r+0xa52>
 800e5fc:	3210      	adds	r2, #16
 800e5fe:	607d      	str	r5, [r7, #4]
 800e600:	922e      	str	r2, [sp, #184]	; 0xb8
 800e602:	932d      	str	r3, [sp, #180]	; 0xb4
 800e604:	2b07      	cmp	r3, #7
 800e606:	dd08      	ble.n	800e61a <_svfprintf_r+0xeb6>
 800e608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e60a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e60c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e60e:	f003 f9bf 	bl	8011990 <__ssprint_r>
 800e612:	2800      	cmp	r0, #0
 800e614:	d000      	beq.n	800e618 <_svfprintf_r+0xeb4>
 800e616:	e284      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e618:	a92f      	add	r1, sp, #188	; 0xbc
 800e61a:	000f      	movs	r7, r1
 800e61c:	3c10      	subs	r4, #16
 800e61e:	0039      	movs	r1, r7
 800e620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e622:	4897      	ldr	r0, [pc, #604]	; (800e880 <_svfprintf_r+0x111c>)
 800e624:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e626:	3301      	adds	r3, #1
 800e628:	3108      	adds	r1, #8
 800e62a:	6038      	str	r0, [r7, #0]
 800e62c:	2c10      	cmp	r4, #16
 800e62e:	dce5      	bgt.n	800e5fc <_svfprintf_r+0xe98>
 800e630:	607c      	str	r4, [r7, #4]
 800e632:	18a4      	adds	r4, r4, r2
 800e634:	942e      	str	r4, [sp, #184]	; 0xb8
 800e636:	000f      	movs	r7, r1
 800e638:	932d      	str	r3, [sp, #180]	; 0xb4
 800e63a:	2b07      	cmp	r3, #7
 800e63c:	ddc0      	ble.n	800e5c0 <_svfprintf_r+0xe5c>
 800e63e:	e05f      	b.n	800e700 <_svfprintf_r+0xf9c>
 800e640:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e642:	2b00      	cmp	r3, #0
 800e644:	dc78      	bgt.n	800e738 <_svfprintf_r+0xfd4>
 800e646:	4b8d      	ldr	r3, [pc, #564]	; (800e87c <_svfprintf_r+0x1118>)
 800e648:	603b      	str	r3, [r7, #0]
 800e64a:	2301      	movs	r3, #1
 800e64c:	607b      	str	r3, [r7, #4]
 800e64e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e650:	3708      	adds	r7, #8
 800e652:	3301      	adds	r3, #1
 800e654:	932e      	str	r3, [sp, #184]	; 0xb8
 800e656:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e658:	3301      	adds	r3, #1
 800e65a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e65c:	2b07      	cmp	r3, #7
 800e65e:	dd08      	ble.n	800e672 <_svfprintf_r+0xf0e>
 800e660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e662:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e664:	aa2c      	add	r2, sp, #176	; 0xb0
 800e666:	f003 f993 	bl	8011990 <__ssprint_r>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d000      	beq.n	800e670 <_svfprintf_r+0xf0c>
 800e66e:	e258      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e670:	af2f      	add	r7, sp, #188	; 0xbc
 800e672:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e676:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e678:	430b      	orrs	r3, r1
 800e67a:	2101      	movs	r1, #1
 800e67c:	4031      	ands	r1, r6
 800e67e:	430b      	orrs	r3, r1
 800e680:	d09e      	beq.n	800e5c0 <_svfprintf_r+0xe5c>
 800e682:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e684:	603b      	str	r3, [r7, #0]
 800e686:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	189a      	adds	r2, r3, r2
 800e68c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e68e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e690:	3301      	adds	r3, #1
 800e692:	932d      	str	r3, [sp, #180]	; 0xb4
 800e694:	3708      	adds	r7, #8
 800e696:	2b07      	cmp	r3, #7
 800e698:	dd08      	ble.n	800e6ac <_svfprintf_r+0xf48>
 800e69a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e69c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e69e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6a0:	f003 f976 	bl	8011990 <__ssprint_r>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d000      	beq.n	800e6aa <_svfprintf_r+0xf46>
 800e6a8:	e23b      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e6aa:	af2f      	add	r7, sp, #188	; 0xbc
 800e6ac:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e6ae:	2c00      	cmp	r4, #0
 800e6b0:	da19      	bge.n	800e6e6 <_svfprintf_r+0xf82>
 800e6b2:	0038      	movs	r0, r7
 800e6b4:	2510      	movs	r5, #16
 800e6b6:	4264      	negs	r4, r4
 800e6b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e6ba:	4a71      	ldr	r2, [pc, #452]	; (800e880 <_svfprintf_r+0x111c>)
 800e6bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6be:	3101      	adds	r1, #1
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	6002      	str	r2, [r0, #0]
 800e6c4:	2c10      	cmp	r4, #16
 800e6c6:	dc25      	bgt.n	800e714 <_svfprintf_r+0xfb0>
 800e6c8:	6044      	str	r4, [r0, #4]
 800e6ca:	18e4      	adds	r4, r4, r3
 800e6cc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6ce:	912d      	str	r1, [sp, #180]	; 0xb4
 800e6d0:	2907      	cmp	r1, #7
 800e6d2:	dd08      	ble.n	800e6e6 <_svfprintf_r+0xf82>
 800e6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6d8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6da:	f003 f959 	bl	8011990 <__ssprint_r>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d000      	beq.n	800e6e4 <_svfprintf_r+0xf80>
 800e6e2:	e21e      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e6e4:	af2f      	add	r7, sp, #188	; 0xbc
 800e6e6:	9b08      	ldr	r3, [sp, #32]
 800e6e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e6ea:	603b      	str	r3, [r7, #0]
 800e6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6ee:	18d2      	adds	r2, r2, r3
 800e6f0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6f2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e6f4:	607b      	str	r3, [r7, #4]
 800e6f6:	3201      	adds	r2, #1
 800e6f8:	922d      	str	r2, [sp, #180]	; 0xb4
 800e6fa:	2a07      	cmp	r2, #7
 800e6fc:	dc00      	bgt.n	800e700 <_svfprintf_r+0xf9c>
 800e6fe:	e45b      	b.n	800dfb8 <_svfprintf_r+0x854>
 800e700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e702:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e704:	aa2c      	add	r2, sp, #176	; 0xb0
 800e706:	f003 f943 	bl	8011990 <__ssprint_r>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d000      	beq.n	800e710 <_svfprintf_r+0xfac>
 800e70e:	e208      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e710:	af2f      	add	r7, sp, #188	; 0xbc
 800e712:	e755      	b.n	800e5c0 <_svfprintf_r+0xe5c>
 800e714:	3310      	adds	r3, #16
 800e716:	6045      	str	r5, [r0, #4]
 800e718:	932e      	str	r3, [sp, #184]	; 0xb8
 800e71a:	912d      	str	r1, [sp, #180]	; 0xb4
 800e71c:	2907      	cmp	r1, #7
 800e71e:	dd08      	ble.n	800e732 <_svfprintf_r+0xfce>
 800e720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e722:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e724:	aa2c      	add	r2, sp, #176	; 0xb0
 800e726:	f003 f933 	bl	8011990 <__ssprint_r>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d000      	beq.n	800e730 <_svfprintf_r+0xfcc>
 800e72e:	e1f8      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e730:	af2f      	add	r7, sp, #188	; 0xbc
 800e732:	0038      	movs	r0, r7
 800e734:	3c10      	subs	r4, #16
 800e736:	e7bf      	b.n	800e6b8 <_svfprintf_r+0xf54>
 800e738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e73a:	002c      	movs	r4, r5
 800e73c:	429d      	cmp	r5, r3
 800e73e:	dd00      	ble.n	800e742 <_svfprintf_r+0xfde>
 800e740:	001c      	movs	r4, r3
 800e742:	2c00      	cmp	r4, #0
 800e744:	dd14      	ble.n	800e770 <_svfprintf_r+0x100c>
 800e746:	9b08      	ldr	r3, [sp, #32]
 800e748:	607c      	str	r4, [r7, #4]
 800e74a:	603b      	str	r3, [r7, #0]
 800e74c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e74e:	3708      	adds	r7, #8
 800e750:	18e3      	adds	r3, r4, r3
 800e752:	932e      	str	r3, [sp, #184]	; 0xb8
 800e754:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e756:	3301      	adds	r3, #1
 800e758:	932d      	str	r3, [sp, #180]	; 0xb4
 800e75a:	2b07      	cmp	r3, #7
 800e75c:	dd08      	ble.n	800e770 <_svfprintf_r+0x100c>
 800e75e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e760:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e762:	aa2c      	add	r2, sp, #176	; 0xb0
 800e764:	f003 f914 	bl	8011990 <__ssprint_r>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d000      	beq.n	800e76e <_svfprintf_r+0x100a>
 800e76c:	e1d9      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e76e:	af2f      	add	r7, sp, #188	; 0xbc
 800e770:	43e3      	mvns	r3, r4
 800e772:	17db      	asrs	r3, r3, #31
 800e774:	401c      	ands	r4, r3
 800e776:	1b2c      	subs	r4, r5, r4
 800e778:	2c00      	cmp	r4, #0
 800e77a:	dd18      	ble.n	800e7ae <_svfprintf_r+0x104a>
 800e77c:	0039      	movs	r1, r7
 800e77e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e780:	483f      	ldr	r0, [pc, #252]	; (800e880 <_svfprintf_r+0x111c>)
 800e782:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e784:	3301      	adds	r3, #1
 800e786:	3108      	adds	r1, #8
 800e788:	6038      	str	r0, [r7, #0]
 800e78a:	2c10      	cmp	r4, #16
 800e78c:	dc7a      	bgt.n	800e884 <_svfprintf_r+0x1120>
 800e78e:	607c      	str	r4, [r7, #4]
 800e790:	18a4      	adds	r4, r4, r2
 800e792:	000f      	movs	r7, r1
 800e794:	942e      	str	r4, [sp, #184]	; 0xb8
 800e796:	932d      	str	r3, [sp, #180]	; 0xb4
 800e798:	2b07      	cmp	r3, #7
 800e79a:	dd08      	ble.n	800e7ae <_svfprintf_r+0x104a>
 800e79c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e79e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7a0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7a2:	f003 f8f5 	bl	8011990 <__ssprint_r>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d000      	beq.n	800e7ac <_svfprintf_r+0x1048>
 800e7aa:	e1ba      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e7ac:	af2f      	add	r7, sp, #188	; 0xbc
 800e7ae:	9b08      	ldr	r3, [sp, #32]
 800e7b0:	195d      	adds	r5, r3, r5
 800e7b2:	0573      	lsls	r3, r6, #21
 800e7b4:	d50b      	bpl.n	800e7ce <_svfprintf_r+0x106a>
 800e7b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d176      	bne.n	800e8aa <_svfprintf_r+0x1146>
 800e7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d176      	bne.n	800e8b0 <_svfprintf_r+0x114c>
 800e7c2:	9b08      	ldr	r3, [sp, #32]
 800e7c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7c6:	189b      	adds	r3, r3, r2
 800e7c8:	429d      	cmp	r5, r3
 800e7ca:	d900      	bls.n	800e7ce <_svfprintf_r+0x106a>
 800e7cc:	001d      	movs	r5, r3
 800e7ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	db01      	blt.n	800e7da <_svfprintf_r+0x1076>
 800e7d6:	07f3      	lsls	r3, r6, #31
 800e7d8:	d516      	bpl.n	800e808 <_svfprintf_r+0x10a4>
 800e7da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e7dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7de:	603b      	str	r3, [r7, #0]
 800e7e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7e2:	607b      	str	r3, [r7, #4]
 800e7e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	189b      	adds	r3, r3, r2
 800e7ea:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7f2:	2b07      	cmp	r3, #7
 800e7f4:	dd08      	ble.n	800e808 <_svfprintf_r+0x10a4>
 800e7f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7fc:	f003 f8c8 	bl	8011990 <__ssprint_r>
 800e800:	2800      	cmp	r0, #0
 800e802:	d000      	beq.n	800e806 <_svfprintf_r+0x10a2>
 800e804:	e18d      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e806:	af2f      	add	r7, sp, #188	; 0xbc
 800e808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e80a:	9b08      	ldr	r3, [sp, #32]
 800e80c:	4694      	mov	ip, r2
 800e80e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e810:	4463      	add	r3, ip
 800e812:	1b5b      	subs	r3, r3, r5
 800e814:	1b14      	subs	r4, r2, r4
 800e816:	429c      	cmp	r4, r3
 800e818:	dd00      	ble.n	800e81c <_svfprintf_r+0x10b8>
 800e81a:	001c      	movs	r4, r3
 800e81c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e81e:	2c00      	cmp	r4, #0
 800e820:	dd12      	ble.n	800e848 <_svfprintf_r+0x10e4>
 800e822:	18e3      	adds	r3, r4, r3
 800e824:	932e      	str	r3, [sp, #184]	; 0xb8
 800e826:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e828:	603d      	str	r5, [r7, #0]
 800e82a:	3301      	adds	r3, #1
 800e82c:	607c      	str	r4, [r7, #4]
 800e82e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e830:	3708      	adds	r7, #8
 800e832:	2b07      	cmp	r3, #7
 800e834:	dd08      	ble.n	800e848 <_svfprintf_r+0x10e4>
 800e836:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e838:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e83a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e83c:	f003 f8a8 	bl	8011990 <__ssprint_r>
 800e840:	2800      	cmp	r0, #0
 800e842:	d000      	beq.n	800e846 <_svfprintf_r+0x10e2>
 800e844:	e16d      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e846:	af2f      	add	r7, sp, #188	; 0xbc
 800e848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e84a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e84c:	2510      	movs	r5, #16
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	43e2      	mvns	r2, r4
 800e852:	17d2      	asrs	r2, r2, #31
 800e854:	4014      	ands	r4, r2
 800e856:	1b1c      	subs	r4, r3, r4
 800e858:	2c00      	cmp	r4, #0
 800e85a:	dc00      	bgt.n	800e85e <_svfprintf_r+0x10fa>
 800e85c:	e6b0      	b.n	800e5c0 <_svfprintf_r+0xe5c>
 800e85e:	0039      	movs	r1, r7
 800e860:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e862:	4807      	ldr	r0, [pc, #28]	; (800e880 <_svfprintf_r+0x111c>)
 800e864:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e866:	3301      	adds	r3, #1
 800e868:	3108      	adds	r1, #8
 800e86a:	6038      	str	r0, [r7, #0]
 800e86c:	2c10      	cmp	r4, #16
 800e86e:	dd00      	ble.n	800e872 <_svfprintf_r+0x110e>
 800e870:	e096      	b.n	800e9a0 <_svfprintf_r+0x123c>
 800e872:	1912      	adds	r2, r2, r4
 800e874:	607c      	str	r4, [r7, #4]
 800e876:	922e      	str	r2, [sp, #184]	; 0xb8
 800e878:	e6dd      	b.n	800e636 <_svfprintf_r+0xed2>
 800e87a:	46c0      	nop			; (mov r8, r8)
 800e87c:	08014bfe 	.word	0x08014bfe
 800e880:	08014c10 	.word	0x08014c10
 800e884:	2010      	movs	r0, #16
 800e886:	1812      	adds	r2, r2, r0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e88c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e88e:	2b07      	cmp	r3, #7
 800e890:	dd08      	ble.n	800e8a4 <_svfprintf_r+0x1140>
 800e892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e894:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e896:	aa2c      	add	r2, sp, #176	; 0xb0
 800e898:	f003 f87a 	bl	8011990 <__ssprint_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d000      	beq.n	800e8a2 <_svfprintf_r+0x113e>
 800e8a0:	e13f      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e8a2:	a92f      	add	r1, sp, #188	; 0xbc
 800e8a4:	000f      	movs	r7, r1
 800e8a6:	3c10      	subs	r4, #16
 800e8a8:	e768      	b.n	800e77c <_svfprintf_r+0x1018>
 800e8aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d05d      	beq.n	800e96c <_svfprintf_r+0x1208>
 800e8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	9310      	str	r3, [sp, #64]	; 0x40
 800e8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8ba:	603b      	str	r3, [r7, #0]
 800e8bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	189b      	adds	r3, r3, r2
 800e8c6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8ce:	2b07      	cmp	r3, #7
 800e8d0:	dd08      	ble.n	800e8e4 <_svfprintf_r+0x1180>
 800e8d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8d8:	f003 f85a 	bl	8011990 <__ssprint_r>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d000      	beq.n	800e8e2 <_svfprintf_r+0x117e>
 800e8e0:	e11f      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e8e2:	af2f      	add	r7, sp, #188	; 0xbc
 800e8e4:	9b08      	ldr	r3, [sp, #32]
 800e8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8e8:	189c      	adds	r4, r3, r2
 800e8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8ec:	1b64      	subs	r4, r4, r5
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	dd00      	ble.n	800e8f6 <_svfprintf_r+0x1192>
 800e8f4:	001c      	movs	r4, r3
 800e8f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8f8:	2c00      	cmp	r4, #0
 800e8fa:	dd12      	ble.n	800e922 <_svfprintf_r+0x11be>
 800e8fc:	18e3      	adds	r3, r4, r3
 800e8fe:	932e      	str	r3, [sp, #184]	; 0xb8
 800e900:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e902:	603d      	str	r5, [r7, #0]
 800e904:	3301      	adds	r3, #1
 800e906:	607c      	str	r4, [r7, #4]
 800e908:	932d      	str	r3, [sp, #180]	; 0xb4
 800e90a:	3708      	adds	r7, #8
 800e90c:	2b07      	cmp	r3, #7
 800e90e:	dd08      	ble.n	800e922 <_svfprintf_r+0x11be>
 800e910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e912:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e914:	aa2c      	add	r2, sp, #176	; 0xb0
 800e916:	f003 f83b 	bl	8011990 <__ssprint_r>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d000      	beq.n	800e920 <_svfprintf_r+0x11bc>
 800e91e:	e100      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e920:	af2f      	add	r7, sp, #188	; 0xbc
 800e922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e924:	781a      	ldrb	r2, [r3, #0]
 800e926:	43e3      	mvns	r3, r4
 800e928:	17db      	asrs	r3, r3, #31
 800e92a:	401c      	ands	r4, r3
 800e92c:	1b14      	subs	r4, r2, r4
 800e92e:	2c00      	cmp	r4, #0
 800e930:	dd18      	ble.n	800e964 <_svfprintf_r+0x1200>
 800e932:	0039      	movs	r1, r7
 800e934:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e936:	48aa      	ldr	r0, [pc, #680]	; (800ebe0 <_svfprintf_r+0x147c>)
 800e938:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e93a:	3301      	adds	r3, #1
 800e93c:	3108      	adds	r1, #8
 800e93e:	6038      	str	r0, [r7, #0]
 800e940:	2c10      	cmp	r4, #16
 800e942:	dc1a      	bgt.n	800e97a <_svfprintf_r+0x1216>
 800e944:	1912      	adds	r2, r2, r4
 800e946:	607c      	str	r4, [r7, #4]
 800e948:	922e      	str	r2, [sp, #184]	; 0xb8
 800e94a:	000f      	movs	r7, r1
 800e94c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e94e:	2b07      	cmp	r3, #7
 800e950:	dd08      	ble.n	800e964 <_svfprintf_r+0x1200>
 800e952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e954:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e956:	aa2c      	add	r2, sp, #176	; 0xb0
 800e958:	f003 f81a 	bl	8011990 <__ssprint_r>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d000      	beq.n	800e962 <_svfprintf_r+0x11fe>
 800e960:	e0df      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e962:	af2f      	add	r7, sp, #188	; 0xbc
 800e964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	18ed      	adds	r5, r5, r3
 800e96a:	e724      	b.n	800e7b6 <_svfprintf_r+0x1052>
 800e96c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e96e:	3b01      	subs	r3, #1
 800e970:	9312      	str	r3, [sp, #72]	; 0x48
 800e972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e974:	3b01      	subs	r3, #1
 800e976:	9311      	str	r3, [sp, #68]	; 0x44
 800e978:	e79d      	b.n	800e8b6 <_svfprintf_r+0x1152>
 800e97a:	2010      	movs	r0, #16
 800e97c:	1812      	adds	r2, r2, r0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	922e      	str	r2, [sp, #184]	; 0xb8
 800e982:	932d      	str	r3, [sp, #180]	; 0xb4
 800e984:	2b07      	cmp	r3, #7
 800e986:	dd08      	ble.n	800e99a <_svfprintf_r+0x1236>
 800e988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e98a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e98c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e98e:	f002 ffff 	bl	8011990 <__ssprint_r>
 800e992:	2800      	cmp	r0, #0
 800e994:	d000      	beq.n	800e998 <_svfprintf_r+0x1234>
 800e996:	e0c4      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e998:	a92f      	add	r1, sp, #188	; 0xbc
 800e99a:	000f      	movs	r7, r1
 800e99c:	3c10      	subs	r4, #16
 800e99e:	e7c8      	b.n	800e932 <_svfprintf_r+0x11ce>
 800e9a0:	3210      	adds	r2, #16
 800e9a2:	607d      	str	r5, [r7, #4]
 800e9a4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	dd08      	ble.n	800e9be <_svfprintf_r+0x125a>
 800e9ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9b2:	f002 ffed 	bl	8011990 <__ssprint_r>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d000      	beq.n	800e9bc <_svfprintf_r+0x1258>
 800e9ba:	e0b2      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e9bc:	a92f      	add	r1, sp, #188	; 0xbc
 800e9be:	000f      	movs	r7, r1
 800e9c0:	3c10      	subs	r4, #16
 800e9c2:	e74c      	b.n	800e85e <_svfprintf_r+0x10fa>
 800e9c4:	003c      	movs	r4, r7
 800e9c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e9c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9cc:	3101      	adds	r1, #1
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	3408      	adds	r4, #8
 800e9d2:	2a01      	cmp	r2, #1
 800e9d4:	dc03      	bgt.n	800e9de <_svfprintf_r+0x127a>
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4216      	tst	r6, r2
 800e9da:	d100      	bne.n	800e9de <_svfprintf_r+0x127a>
 800e9dc:	e07f      	b.n	800eade <_svfprintf_r+0x137a>
 800e9de:	9a08      	ldr	r2, [sp, #32]
 800e9e0:	912e      	str	r1, [sp, #184]	; 0xb8
 800e9e2:	603a      	str	r2, [r7, #0]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9e8:	607a      	str	r2, [r7, #4]
 800e9ea:	2b07      	cmp	r3, #7
 800e9ec:	dd08      	ble.n	800ea00 <_svfprintf_r+0x129c>
 800e9ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9f4:	f002 ffcc 	bl	8011990 <__ssprint_r>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d000      	beq.n	800e9fe <_svfprintf_r+0x129a>
 800e9fc:	e091      	b.n	800eb22 <_svfprintf_r+0x13be>
 800e9fe:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea08:	6063      	str	r3, [r4, #4]
 800ea0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea0c:	3408      	adds	r4, #8
 800ea0e:	189b      	adds	r3, r3, r2
 800ea10:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea14:	3301      	adds	r3, #1
 800ea16:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea18:	2b07      	cmp	r3, #7
 800ea1a:	dd07      	ble.n	800ea2c <_svfprintf_r+0x12c8>
 800ea1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea20:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea22:	f002 ffb5 	bl	8011990 <__ssprint_r>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d17b      	bne.n	800eb22 <_svfprintf_r+0x13be>
 800ea2a:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea2e:	2200      	movs	r2, #0
 800ea30:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea32:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea34:	9309      	str	r3, [sp, #36]	; 0x24
 800ea36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea38:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ea3a:	1e5d      	subs	r5, r3, #1
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f7f1 fd03 	bl	8000448 <__aeabi_dcmpeq>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d126      	bne.n	800ea94 <_svfprintf_r+0x1330>
 800ea46:	9b08      	ldr	r3, [sp, #32]
 800ea48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	1e7b      	subs	r3, r7, #1
 800ea52:	3201      	adds	r2, #1
 800ea54:	185b      	adds	r3, r3, r1
 800ea56:	6065      	str	r5, [r4, #4]
 800ea58:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea5a:	922d      	str	r2, [sp, #180]	; 0xb4
 800ea5c:	3408      	adds	r4, #8
 800ea5e:	2a07      	cmp	r2, #7
 800ea60:	dd07      	ble.n	800ea72 <_svfprintf_r+0x130e>
 800ea62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea66:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea68:	f002 ff92 	bl	8011990 <__ssprint_r>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d158      	bne.n	800eb22 <_svfprintf_r+0x13be>
 800ea70:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea72:	ab28      	add	r3, sp, #160	; 0xa0
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea7a:	6063      	str	r3, [r4, #4]
 800ea7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea7e:	189b      	adds	r3, r3, r2
 800ea80:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea84:	3301      	adds	r3, #1
 800ea86:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea88:	2b07      	cmp	r3, #7
 800ea8a:	dd00      	ble.n	800ea8e <_svfprintf_r+0x132a>
 800ea8c:	e638      	b.n	800e700 <_svfprintf_r+0xf9c>
 800ea8e:	3408      	adds	r4, #8
 800ea90:	0027      	movs	r7, r4
 800ea92:	e595      	b.n	800e5c0 <_svfprintf_r+0xe5c>
 800ea94:	2710      	movs	r7, #16
 800ea96:	2d00      	cmp	r5, #0
 800ea98:	ddeb      	ble.n	800ea72 <_svfprintf_r+0x130e>
 800ea9a:	0021      	movs	r1, r4
 800ea9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea9e:	4850      	ldr	r0, [pc, #320]	; (800ebe0 <_svfprintf_r+0x147c>)
 800eaa0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	3108      	adds	r1, #8
 800eaa6:	6020      	str	r0, [r4, #0]
 800eaa8:	2d10      	cmp	r5, #16
 800eaaa:	dc07      	bgt.n	800eabc <_svfprintf_r+0x1358>
 800eaac:	6065      	str	r5, [r4, #4]
 800eaae:	000c      	movs	r4, r1
 800eab0:	18ad      	adds	r5, r5, r2
 800eab2:	952e      	str	r5, [sp, #184]	; 0xb8
 800eab4:	932d      	str	r3, [sp, #180]	; 0xb4
 800eab6:	2b07      	cmp	r3, #7
 800eab8:	dddb      	ble.n	800ea72 <_svfprintf_r+0x130e>
 800eaba:	e7d2      	b.n	800ea62 <_svfprintf_r+0x12fe>
 800eabc:	3210      	adds	r2, #16
 800eabe:	6067      	str	r7, [r4, #4]
 800eac0:	922e      	str	r2, [sp, #184]	; 0xb8
 800eac2:	932d      	str	r3, [sp, #180]	; 0xb4
 800eac4:	2b07      	cmp	r3, #7
 800eac6:	dd07      	ble.n	800ead8 <_svfprintf_r+0x1374>
 800eac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eaca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eacc:	aa2c      	add	r2, sp, #176	; 0xb0
 800eace:	f002 ff5f 	bl	8011990 <__ssprint_r>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d125      	bne.n	800eb22 <_svfprintf_r+0x13be>
 800ead6:	a92f      	add	r1, sp, #188	; 0xbc
 800ead8:	000c      	movs	r4, r1
 800eada:	3d10      	subs	r5, #16
 800eadc:	e7dd      	b.n	800ea9a <_svfprintf_r+0x1336>
 800eade:	9808      	ldr	r0, [sp, #32]
 800eae0:	912e      	str	r1, [sp, #184]	; 0xb8
 800eae2:	c705      	stmia	r7!, {r0, r2}
 800eae4:	932d      	str	r3, [sp, #180]	; 0xb4
 800eae6:	e7e6      	b.n	800eab6 <_svfprintf_r+0x1352>
 800eae8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eaea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eaec:	2510      	movs	r5, #16
 800eaee:	1a9c      	subs	r4, r3, r2
 800eaf0:	2c00      	cmp	r4, #0
 800eaf2:	dc00      	bgt.n	800eaf6 <_svfprintf_r+0x1392>
 800eaf4:	e567      	b.n	800e5c6 <_svfprintf_r+0xe62>
 800eaf6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eaf8:	493a      	ldr	r1, [pc, #232]	; (800ebe4 <_svfprintf_r+0x1480>)
 800eafa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eafc:	3301      	adds	r3, #1
 800eafe:	6039      	str	r1, [r7, #0]
 800eb00:	2c10      	cmp	r4, #16
 800eb02:	dc19      	bgt.n	800eb38 <_svfprintf_r+0x13d4>
 800eb04:	607c      	str	r4, [r7, #4]
 800eb06:	18a4      	adds	r4, r4, r2
 800eb08:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb0c:	2b07      	cmp	r3, #7
 800eb0e:	dc00      	bgt.n	800eb12 <_svfprintf_r+0x13ae>
 800eb10:	e559      	b.n	800e5c6 <_svfprintf_r+0xe62>
 800eb12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb16:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb18:	f002 ff3a 	bl	8011990 <__ssprint_r>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d100      	bne.n	800eb22 <_svfprintf_r+0x13be>
 800eb20:	e551      	b.n	800e5c6 <_svfprintf_r+0xe62>
 800eb22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <_svfprintf_r+0x13c8>
 800eb28:	f7ff f845 	bl	800dbb6 <_svfprintf_r+0x452>
 800eb2c:	0019      	movs	r1, r3
 800eb2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb30:	f7fd fd80 	bl	800c634 <_free_r>
 800eb34:	f7ff f83f 	bl	800dbb6 <_svfprintf_r+0x452>
 800eb38:	3210      	adds	r2, #16
 800eb3a:	607d      	str	r5, [r7, #4]
 800eb3c:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb40:	3708      	adds	r7, #8
 800eb42:	2b07      	cmp	r3, #7
 800eb44:	dd07      	ble.n	800eb56 <_svfprintf_r+0x13f2>
 800eb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb4c:	f002 ff20 	bl	8011990 <__ssprint_r>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d1e6      	bne.n	800eb22 <_svfprintf_r+0x13be>
 800eb54:	af2f      	add	r7, sp, #188	; 0xbc
 800eb56:	3c10      	subs	r4, #16
 800eb58:	e7cd      	b.n	800eaf6 <_svfprintf_r+0x1392>
 800eb5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb5e:	f7fd fd69 	bl	800c634 <_free_r>
 800eb62:	e549      	b.n	800e5f8 <_svfprintf_r+0xe94>
 800eb64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <_svfprintf_r+0x140a>
 800eb6a:	f7ff f824 	bl	800dbb6 <_svfprintf_r+0x452>
 800eb6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb70:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb72:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb74:	f002 ff0c 	bl	8011990 <__ssprint_r>
 800eb78:	f7ff f81d 	bl	800dbb6 <_svfprintf_r+0x452>
 800eb7c:	0034      	movs	r4, r6
 800eb7e:	2a00      	cmp	r2, #0
 800eb80:	d101      	bne.n	800eb86 <_svfprintf_r+0x1422>
 800eb82:	f7fe ff8c 	bl	800da9e <_svfprintf_r+0x33a>
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d101      	bne.n	800eb8e <_svfprintf_r+0x142a>
 800eb8a:	f7ff fc01 	bl	800e390 <_svfprintf_r+0xc2c>
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d100      	bne.n	800eb94 <_svfprintf_r+0x1430>
 800eb92:	e459      	b.n	800e448 <_svfprintf_r+0xce4>
 800eb94:	2507      	movs	r5, #7
 800eb96:	ab58      	add	r3, sp, #352	; 0x160
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	9a08      	ldr	r2, [sp, #32]
 800eb9c:	0013      	movs	r3, r2
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	9308      	str	r3, [sp, #32]
 800eba2:	9b06      	ldr	r3, [sp, #24]
 800eba4:	9908      	ldr	r1, [sp, #32]
 800eba6:	402b      	ands	r3, r5
 800eba8:	3330      	adds	r3, #48	; 0x30
 800ebaa:	700b      	strb	r3, [r1, #0]
 800ebac:	9907      	ldr	r1, [sp, #28]
 800ebae:	074e      	lsls	r6, r1, #29
 800ebb0:	9906      	ldr	r1, [sp, #24]
 800ebb2:	08c8      	lsrs	r0, r1, #3
 800ebb4:	9907      	ldr	r1, [sp, #28]
 800ebb6:	4306      	orrs	r6, r0
 800ebb8:	08c9      	lsrs	r1, r1, #3
 800ebba:	9107      	str	r1, [sp, #28]
 800ebbc:	0031      	movs	r1, r6
 800ebbe:	9807      	ldr	r0, [sp, #28]
 800ebc0:	9606      	str	r6, [sp, #24]
 800ebc2:	4301      	orrs	r1, r0
 800ebc4:	d1e9      	bne.n	800eb9a <_svfprintf_r+0x1436>
 800ebc6:	07e1      	lsls	r1, r4, #31
 800ebc8:	d400      	bmi.n	800ebcc <_svfprintf_r+0x1468>
 800ebca:	e42a      	b.n	800e422 <_svfprintf_r+0xcbe>
 800ebcc:	2b30      	cmp	r3, #48	; 0x30
 800ebce:	d100      	bne.n	800ebd2 <_svfprintf_r+0x146e>
 800ebd0:	e427      	b.n	800e422 <_svfprintf_r+0xcbe>
 800ebd2:	2130      	movs	r1, #48	; 0x30
 800ebd4:	9b08      	ldr	r3, [sp, #32]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	7019      	strb	r1, [r3, #0]
 800ebda:	1e93      	subs	r3, r2, #2
 800ebdc:	9308      	str	r3, [sp, #32]
 800ebde:	e420      	b.n	800e422 <_svfprintf_r+0xcbe>
 800ebe0:	08014c10 	.word	0x08014c10
 800ebe4:	08014c00 	.word	0x08014c00

0800ebe8 <__ssvfscanf_r>:
 800ebe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebea:	4ca7      	ldr	r4, [pc, #668]	; (800ee88 <__ssvfscanf_r+0x2a0>)
 800ebec:	44a5      	add	sp, r4
 800ebee:	af02      	add	r7, sp, #8
 800ebf0:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf2:	000b      	movs	r3, r1
 800ebf4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebf6:	6479      	str	r1, [r7, #68]	; 0x44
 800ebf8:	61ba      	str	r2, [r7, #24]
 800ebfa:	220c      	movs	r2, #12
 800ebfc:	5e9a      	ldrsh	r2, [r3, r2]
 800ebfe:	2380      	movs	r3, #128	; 0x80
 800ec00:	019b      	lsls	r3, r3, #6
 800ec02:	421a      	tst	r2, r3
 800ec04:	d105      	bne.n	800ec12 <__ssvfscanf_r+0x2a>
 800ec06:	4313      	orrs	r3, r2
 800ec08:	818b      	strh	r3, [r1, #12]
 800ec0a:	4aa0      	ldr	r2, [pc, #640]	; (800ee8c <__ssvfscanf_r+0x2a4>)
 800ec0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ec0e:	4013      	ands	r3, r2
 800ec10:	664b      	str	r3, [r1, #100]	; 0x64
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]
 800ec16:	643b      	str	r3, [r7, #64]	; 0x40
 800ec18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	69ba      	ldr	r2, [r7, #24]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	3201      	adds	r2, #1
 800ec28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec2a:	61ba      	str	r2, [r7, #24]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d100      	bne.n	800ec32 <__ssvfscanf_r+0x4a>
 800ec30:	e0d7      	b.n	800ede2 <__ssvfscanf_r+0x1fa>
 800ec32:	2608      	movs	r6, #8
 800ec34:	2108      	movs	r1, #8
 800ec36:	4a96      	ldr	r2, [pc, #600]	; (800ee90 <__ssvfscanf_r+0x2a8>)
 800ec38:	5cd2      	ldrb	r2, [r2, r3]
 800ec3a:	4016      	ands	r6, r2
 800ec3c:	420a      	tst	r2, r1
 800ec3e:	d01d      	beq.n	800ec7c <__ssvfscanf_r+0x94>
 800ec40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	dd12      	ble.n	800ec6e <__ssvfscanf_r+0x86>
 800ec48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4a:	4991      	ldr	r1, [pc, #580]	; (800ee90 <__ssvfscanf_r+0x2a8>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	781a      	ldrb	r2, [r3, #0]
 800ec50:	5c8a      	ldrb	r2, [r1, r2]
 800ec52:	2108      	movs	r1, #8
 800ec54:	420a      	tst	r2, r1
 800ec56:	d0e3      	beq.n	800ec20 <__ssvfscanf_r+0x38>
 800ec58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec5c:	3201      	adds	r2, #1
 800ec5e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ec60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec62:	3301      	adds	r3, #1
 800ec64:	6852      	ldr	r2, [r2, #4]
 800ec66:	600b      	str	r3, [r1, #0]
 800ec68:	3a01      	subs	r2, #1
 800ec6a:	604a      	str	r2, [r1, #4]
 800ec6c:	e7e8      	b.n	800ec40 <__ssvfscanf_r+0x58>
 800ec6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec72:	f002 ff4d 	bl	8011b10 <__ssrefill_r>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d0e6      	beq.n	800ec48 <__ssvfscanf_r+0x60>
 800ec7a:	e7d1      	b.n	800ec20 <__ssvfscanf_r+0x38>
 800ec7c:	2b25      	cmp	r3, #37	; 0x25
 800ec7e:	d165      	bne.n	800ed4c <__ssvfscanf_r+0x164>
 800ec80:	250a      	movs	r5, #10
 800ec82:	2480      	movs	r4, #128	; 0x80
 800ec84:	69ba      	ldr	r2, [r7, #24]
 800ec86:	63fe      	str	r6, [r7, #60]	; 0x3c
 800ec88:	3b16      	subs	r3, #22
 800ec8a:	69b9      	ldr	r1, [r7, #24]
 800ec8c:	3101      	adds	r1, #1
 800ec8e:	61b9      	str	r1, [r7, #24]
 800ec90:	7811      	ldrb	r1, [r2, #0]
 800ec92:	0008      	movs	r0, r1
 800ec94:	3825      	subs	r0, #37	; 0x25
 800ec96:	2855      	cmp	r0, #85	; 0x55
 800ec98:	d900      	bls.n	800ec9c <__ssvfscanf_r+0xb4>
 800ec9a:	e170      	b.n	800ef7e <__ssvfscanf_r+0x396>
 800ec9c:	f7f1 fa44 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eca0:	016f0056 	.word	0x016f0056
 800eca4:	016f016f 	.word	0x016f016f
 800eca8:	0081016f 	.word	0x0081016f
 800ecac:	016f016f 	.word	0x016f016f
 800ecb0:	016f016f 	.word	0x016f016f
 800ecb4:	00b8016f 	.word	0x00b8016f
 800ecb8:	00b800b8 	.word	0x00b800b8
 800ecbc:	00b800b8 	.word	0x00b800b8
 800ecc0:	00b800b8 	.word	0x00b800b8
 800ecc4:	00b800b8 	.word	0x00b800b8
 800ecc8:	016f00b8 	.word	0x016f00b8
 800eccc:	016f016f 	.word	0x016f016f
 800ecd0:	016f016f 	.word	0x016f016f
 800ecd4:	016f016f 	.word	0x016f016f
 800ecd8:	016f00d8 	.word	0x016f00d8
 800ecdc:	00c1010a 	.word	0x00c1010a
 800ece0:	00d800d8 	.word	0x00d800d8
 800ece4:	016f00d8 	.word	0x016f00d8
 800ece8:	016f016f 	.word	0x016f016f
 800ecec:	009f016f 	.word	0x009f016f
 800ecf0:	016f016f 	.word	0x016f016f
 800ecf4:	016f00c9 	.word	0x016f00c9
 800ecf8:	016f016f 	.word	0x016f016f
 800ecfc:	016f00f0 	.word	0x016f00f0
 800ed00:	016f016f 	.word	0x016f016f
 800ed04:	00d1016f 	.word	0x00d1016f
 800ed08:	016f016f 	.word	0x016f016f
 800ed0c:	016f00fe 	.word	0x016f00fe
 800ed10:	016f016f 	.word	0x016f016f
 800ed14:	016f016f 	.word	0x016f016f
 800ed18:	016f00d8 	.word	0x016f00d8
 800ed1c:	00c3010c 	.word	0x00c3010c
 800ed20:	00d800d8 	.word	0x00d800d8
 800ed24:	009400d8 	.word	0x009400d8
 800ed28:	009f012f 	.word	0x009f012f
 800ed2c:	0088016f 	.word	0x0088016f
 800ed30:	011200a9 	.word	0x011200a9
 800ed34:	011000cb 	.word	0x011000cb
 800ed38:	016f016f 	.word	0x016f016f
 800ed3c:	00a600f2 	.word	0x00a600f2
 800ed40:	016f00cf 	.word	0x016f00cf
 800ed44:	00d1016f 	.word	0x00d1016f
 800ed48:	00a6016f 	.word	0x00a6016f
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	dd12      	ble.n	800ed7a <__ssvfscanf_r+0x192>
 800ed54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	3a01      	subs	r2, #1
 800ed5c:	7819      	ldrb	r1, [r3, #0]
 800ed5e:	7812      	ldrb	r2, [r2, #0]
 800ed60:	4291      	cmp	r1, r2
 800ed62:	d13e      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800ed64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed68:	6852      	ldr	r2, [r2, #4]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	600b      	str	r3, [r1, #0]
 800ed6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed70:	3a01      	subs	r2, #1
 800ed72:	604a      	str	r2, [r1, #4]
 800ed74:	3301      	adds	r3, #1
 800ed76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed78:	e752      	b.n	800ec20 <__ssvfscanf_r+0x38>
 800ed7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed7e:	f002 fec7 	bl	8011b10 <__ssrefill_r>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d0e6      	beq.n	800ed54 <__ssvfscanf_r+0x16c>
 800ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d003      	beq.n	800ed94 <__ssvfscanf_r+0x1ac>
 800ed8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8e:	899b      	ldrh	r3, [r3, #12]
 800ed90:	065b      	lsls	r3, r3, #25
 800ed92:	d526      	bpl.n	800ede2 <__ssvfscanf_r+0x1fa>
 800ed94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d000      	beq.n	800ed9c <__ssvfscanf_r+0x1b4>
 800ed9a:	e0f6      	b.n	800ef8a <__ssvfscanf_r+0x3a2>
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eda0:	e104      	b.n	800efac <__ssvfscanf_r+0x3c4>
 800eda2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda4:	4332      	orrs	r2, r6
 800eda6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eda8:	d11b      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800edaa:	2610      	movs	r6, #16
 800edac:	69ba      	ldr	r2, [r7, #24]
 800edae:	e76c      	b.n	800ec8a <__ssvfscanf_r+0xa2>
 800edb0:	421e      	tst	r6, r3
 800edb2:	d116      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800edb4:	7851      	ldrb	r1, [r2, #1]
 800edb6:	296c      	cmp	r1, #108	; 0x6c
 800edb8:	d103      	bne.n	800edc2 <__ssvfscanf_r+0x1da>
 800edba:	3202      	adds	r2, #2
 800edbc:	61ba      	str	r2, [r7, #24]
 800edbe:	2202      	movs	r2, #2
 800edc0:	e000      	b.n	800edc4 <__ssvfscanf_r+0x1dc>
 800edc2:	2201      	movs	r2, #1
 800edc4:	4316      	orrs	r6, r2
 800edc6:	e7f1      	b.n	800edac <__ssvfscanf_r+0x1c4>
 800edc8:	421e      	tst	r6, r3
 800edca:	d10a      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800edcc:	7851      	ldrb	r1, [r2, #1]
 800edce:	2968      	cmp	r1, #104	; 0x68
 800edd0:	d103      	bne.n	800edda <__ssvfscanf_r+0x1f2>
 800edd2:	3202      	adds	r2, #2
 800edd4:	61ba      	str	r2, [r7, #24]
 800edd6:	2208      	movs	r2, #8
 800edd8:	e7f4      	b.n	800edc4 <__ssvfscanf_r+0x1dc>
 800edda:	2204      	movs	r2, #4
 800eddc:	e7f2      	b.n	800edc4 <__ssvfscanf_r+0x1dc>
 800edde:	421e      	tst	r6, r3
 800ede0:	d0ed      	beq.n	800edbe <__ssvfscanf_r+0x1d6>
 800ede2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d000      	beq.n	800edea <__ssvfscanf_r+0x202>
 800ede8:	e0da      	b.n	800efa0 <__ssvfscanf_r+0x3b8>
 800edea:	e0df      	b.n	800efac <__ssvfscanf_r+0x3c4>
 800edec:	421e      	tst	r6, r3
 800edee:	d0dd      	beq.n	800edac <__ssvfscanf_r+0x1c4>
 800edf0:	e7f7      	b.n	800ede2 <__ssvfscanf_r+0x1fa>
 800edf2:	228f      	movs	r2, #143	; 0x8f
 800edf4:	218f      	movs	r1, #143	; 0x8f
 800edf6:	4032      	ands	r2, r6
 800edf8:	420e      	tst	r6, r1
 800edfa:	d1f2      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800edfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800edfe:	2900      	cmp	r1, #0
 800ee00:	d104      	bne.n	800ee0c <__ssvfscanf_r+0x224>
 800ee02:	b082      	sub	sp, #8
 800ee04:	a902      	add	r1, sp, #8
 800ee06:	6439      	str	r1, [r7, #64]	; 0x40
 800ee08:	600a      	str	r2, [r1, #0]
 800ee0a:	604a      	str	r2, [r1, #4]
 800ee0c:	4326      	orrs	r6, r4
 800ee0e:	e7cd      	b.n	800edac <__ssvfscanf_r+0x1c4>
 800ee10:	228f      	movs	r2, #143	; 0x8f
 800ee12:	4216      	tst	r6, r2
 800ee14:	d1e5      	bne.n	800ede2 <__ssvfscanf_r+0x1fa>
 800ee16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee18:	436a      	muls	r2, r5
 800ee1a:	3a30      	subs	r2, #48	; 0x30
 800ee1c:	188a      	adds	r2, r1, r2
 800ee1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee20:	e7c4      	b.n	800edac <__ssvfscanf_r+0x1c4>
 800ee22:	2301      	movs	r3, #1
 800ee24:	431e      	orrs	r6, r3
 800ee26:	4b1b      	ldr	r3, [pc, #108]	; (800ee94 <__ssvfscanf_r+0x2ac>)
 800ee28:	617b      	str	r3, [r7, #20]
 800ee2a:	230a      	movs	r3, #10
 800ee2c:	2403      	movs	r4, #3
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	e00f      	b.n	800ee52 <__ssvfscanf_r+0x26a>
 800ee32:	2301      	movs	r3, #1
 800ee34:	431e      	orrs	r6, r3
 800ee36:	4b18      	ldr	r3, [pc, #96]	; (800ee98 <__ssvfscanf_r+0x2b0>)
 800ee38:	617b      	str	r3, [r7, #20]
 800ee3a:	2308      	movs	r3, #8
 800ee3c:	e7f6      	b.n	800ee2c <__ssvfscanf_r+0x244>
 800ee3e:	4b16      	ldr	r3, [pc, #88]	; (800ee98 <__ssvfscanf_r+0x2b0>)
 800ee40:	e7f2      	b.n	800ee28 <__ssvfscanf_r+0x240>
 800ee42:	2380      	movs	r3, #128	; 0x80
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	431e      	orrs	r6, r3
 800ee48:	4b13      	ldr	r3, [pc, #76]	; (800ee98 <__ssvfscanf_r+0x2b0>)
 800ee4a:	617b      	str	r3, [r7, #20]
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	e7ed      	b.n	800ee2c <__ssvfscanf_r+0x244>
 800ee50:	2404      	movs	r4, #4
 800ee52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	dd55      	ble.n	800ef06 <__ssvfscanf_r+0x31e>
 800ee5a:	0673      	lsls	r3, r6, #25
 800ee5c:	d407      	bmi.n	800ee6e <__ssvfscanf_r+0x286>
 800ee5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee60:	490b      	ldr	r1, [pc, #44]	; (800ee90 <__ssvfscanf_r+0x2a8>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	5c8a      	ldrb	r2, [r1, r2]
 800ee68:	2108      	movs	r1, #8
 800ee6a:	420a      	tst	r2, r1
 800ee6c:	d152      	bne.n	800ef14 <__ssvfscanf_r+0x32c>
 800ee6e:	1e60      	subs	r0, r4, #1
 800ee70:	2803      	cmp	r0, #3
 800ee72:	d863      	bhi.n	800ef3c <__ssvfscanf_r+0x354>
 800ee74:	f7f1 f958 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ee78:	03bd01da 	.word	0x03bd01da
 800ee7c:	068a0579 	.word	0x068a0579
 800ee80:	2301      	movs	r3, #1
 800ee82:	431e      	orrs	r6, r3
 800ee84:	2402      	movs	r4, #2
 800ee86:	e7e4      	b.n	800ee52 <__ssvfscanf_r+0x26a>
 800ee88:	fffffd34 	.word	0xfffffd34
 800ee8c:	ffffdfff 	.word	0xffffdfff
 800ee90:	080148f9 	.word	0x080148f9
 800ee94:	0800c039 	.word	0x0800c039
 800ee98:	08011641 	.word	0x08011641
 800ee9c:	2248      	movs	r2, #72	; 0x48
 800ee9e:	2318      	movs	r3, #24
 800eea0:	189b      	adds	r3, r3, r2
 800eea2:	19d8      	adds	r0, r3, r7
 800eea4:	69b9      	ldr	r1, [r7, #24]
 800eea6:	f001 f9d7 	bl	8010258 <__sccl>
 800eeaa:	2340      	movs	r3, #64	; 0x40
 800eeac:	2401      	movs	r4, #1
 800eeae:	61b8      	str	r0, [r7, #24]
 800eeb0:	431e      	orrs	r6, r3
 800eeb2:	e7ce      	b.n	800ee52 <__ssvfscanf_r+0x26a>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	431e      	orrs	r6, r3
 800eeb8:	2340      	movs	r3, #64	; 0x40
 800eeba:	2400      	movs	r4, #0
 800eebc:	431e      	orrs	r6, r3
 800eebe:	e7c8      	b.n	800ee52 <__ssvfscanf_r+0x26a>
 800eec0:	2388      	movs	r3, #136	; 0x88
 800eec2:	e7bf      	b.n	800ee44 <__ssvfscanf_r+0x25c>
 800eec4:	06f3      	lsls	r3, r6, #27
 800eec6:	d500      	bpl.n	800eeca <__ssvfscanf_r+0x2e2>
 800eec8:	e6aa      	b.n	800ec20 <__ssvfscanf_r+0x38>
 800eeca:	2108      	movs	r1, #8
 800eecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eece:	cb04      	ldmia	r3!, {r2}
 800eed0:	420e      	tst	r6, r1
 800eed2:	d003      	beq.n	800eedc <__ssvfscanf_r+0x2f4>
 800eed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eed6:	7011      	strb	r1, [r2, #0]
 800eed8:	633b      	str	r3, [r7, #48]	; 0x30
 800eeda:	e6a1      	b.n	800ec20 <__ssvfscanf_r+0x38>
 800eedc:	0771      	lsls	r1, r6, #29
 800eede:	d502      	bpl.n	800eee6 <__ssvfscanf_r+0x2fe>
 800eee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eee2:	8011      	strh	r1, [r2, #0]
 800eee4:	e7f8      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800eee6:	07f1      	lsls	r1, r6, #31
 800eee8:	d502      	bpl.n	800eef0 <__ssvfscanf_r+0x308>
 800eeea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eeec:	6011      	str	r1, [r2, #0]
 800eeee:	e7f3      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800eef0:	07b6      	lsls	r6, r6, #30
 800eef2:	d5fa      	bpl.n	800eeea <__ssvfscanf_r+0x302>
 800eef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eef6:	6011      	str	r1, [r2, #0]
 800eef8:	17c9      	asrs	r1, r1, #31
 800eefa:	6051      	str	r1, [r2, #4]
 800eefc:	e7ec      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800eefe:	4ba2      	ldr	r3, [pc, #648]	; (800f188 <__ssvfscanf_r+0x5a0>)
 800ef00:	617b      	str	r3, [r7, #20]
 800ef02:	2300      	movs	r3, #0
 800ef04:	e792      	b.n	800ee2c <__ssvfscanf_r+0x244>
 800ef06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef0a:	f002 fe01 	bl	8011b10 <__ssrefill_r>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d0a3      	beq.n	800ee5a <__ssvfscanf_r+0x272>
 800ef12:	e738      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800ef14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef18:	3201      	adds	r2, #1
 800ef1a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ef1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef1e:	6852      	ldr	r2, [r2, #4]
 800ef20:	3a01      	subs	r2, #1
 800ef22:	604a      	str	r2, [r1, #4]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	dd02      	ble.n	800ef2e <__ssvfscanf_r+0x346>
 800ef28:	3301      	adds	r3, #1
 800ef2a:	600b      	str	r3, [r1, #0]
 800ef2c:	e797      	b.n	800ee5e <__ssvfscanf_r+0x276>
 800ef2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef32:	f002 fded 	bl	8011b10 <__ssrefill_r>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d091      	beq.n	800ee5e <__ssvfscanf_r+0x276>
 800ef3a:	e724      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800ef3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef3e:	2301      	movs	r3, #1
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	d100      	bne.n	800ef46 <__ssvfscanf_r+0x35e>
 800ef44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef46:	2210      	movs	r2, #16
 800ef48:	0034      	movs	r4, r6
 800ef4a:	4032      	ands	r2, r6
 800ef4c:	623a      	str	r2, [r7, #32]
 800ef4e:	401c      	ands	r4, r3
 800ef50:	421e      	tst	r6, r3
 800ef52:	d100      	bne.n	800ef56 <__ssvfscanf_r+0x36e>
 800ef54:	e0f3      	b.n	800f13e <__ssvfscanf_r+0x556>
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	d000      	beq.n	800ef5c <__ssvfscanf_r+0x374>
 800ef5a:	e0b6      	b.n	800f0ca <__ssvfscanf_r+0x4e2>
 800ef5c:	2080      	movs	r0, #128	; 0x80
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	cb10      	ldmia	r3!, {r4}
 800ef62:	613b      	str	r3, [r7, #16]
 800ef64:	4206      	tst	r6, r0
 800ef66:	d100      	bne.n	800ef6a <__ssvfscanf_r+0x382>
 800ef68:	e0b7      	b.n	800f0da <__ssvfscanf_r+0x4f2>
 800ef6a:	2c00      	cmp	r4, #0
 800ef6c:	d007      	beq.n	800ef7e <__ssvfscanf_r+0x396>
 800ef6e:	f7fb ff6d 	bl	800ae4c <malloc>
 800ef72:	6338      	str	r0, [r7, #48]	; 0x30
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d11f      	bne.n	800efb8 <__ssvfscanf_r+0x3d0>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	425b      	negs	r3, r3
 800ef7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d013      	beq.n	800efac <__ssvfscanf_r+0x3c4>
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	3301      	adds	r3, #1
 800ef88:	d10a      	bne.n	800efa0 <__ssvfscanf_r+0x3b8>
 800ef8a:	2400      	movs	r4, #0
 800ef8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8e:	681d      	ldr	r5, [r3, #0]
 800ef90:	88db      	ldrh	r3, [r3, #6]
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	dd01      	ble.n	800ef9a <__ssvfscanf_r+0x3b2>
 800ef96:	f001 f82a 	bl	800ffee <__ssvfscanf_r+0x1406>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	425b      	negs	r3, r3
 800ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	6818      	ldr	r0, [r3, #0]
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d001      	beq.n	800efac <__ssvfscanf_r+0x3c4>
 800efa8:	f7fb ff5a 	bl	800ae60 <free>
 800efac:	46bd      	mov	sp, r7
 800efae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efb0:	23b1      	movs	r3, #177	; 0xb1
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	449d      	add	sp, r3
 800efb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efbe:	88de      	ldrh	r6, [r3, #6]
 800efc0:	889d      	ldrh	r5, [r3, #4]
 800efc2:	42ae      	cmp	r6, r5
 800efc4:	d30e      	bcc.n	800efe4 <__ssvfscanf_r+0x3fc>
 800efc6:	4b71      	ldr	r3, [pc, #452]	; (800f18c <__ssvfscanf_r+0x5a4>)
 800efc8:	429d      	cmp	r5, r3
 800efca:	d8d5      	bhi.n	800ef78 <__ssvfscanf_r+0x390>
 800efcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efce:	3508      	adds	r5, #8
 800efd0:	b2ad      	uxth	r5, r5
 800efd2:	6818      	ldr	r0, [r3, #0]
 800efd4:	00a9      	lsls	r1, r5, #2
 800efd6:	f002 f901 	bl	80111dc <realloc>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d0cc      	beq.n	800ef78 <__ssvfscanf_r+0x390>
 800efde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe0:	6018      	str	r0, [r3, #0]
 800efe2:	809d      	strh	r5, [r3, #4]
 800efe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe6:	1c72      	adds	r2, r6, #1
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	00b6      	lsls	r6, r6, #2
 800efec:	50f4      	str	r4, [r6, r3]
 800efee:	2320      	movs	r3, #32
 800eff0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eff2:	0026      	movs	r6, r4
 800eff4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eff6:	80ca      	strh	r2, [r1, #6]
 800eff8:	61fb      	str	r3, [r7, #28]
 800effa:	2500      	movs	r5, #0
 800effc:	f7fd f9fe 	bl	800c3fc <__locale_mb_cur_max>
 800f000:	42a8      	cmp	r0, r5
 800f002:	d100      	bne.n	800f006 <__ssvfscanf_r+0x41e>
 800f004:	e6bf      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f006:	1c6a      	adds	r2, r5, #1
 800f008:	60fa      	str	r2, [r7, #12]
 800f00a:	228c      	movs	r2, #140	; 0x8c
 800f00c:	2048      	movs	r0, #72	; 0x48
 800f00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f010:	0052      	lsls	r2, r2, #1
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	1812      	adds	r2, r2, r0
 800f016:	7819      	ldrb	r1, [r3, #0]
 800f018:	19d2      	adds	r2, r2, r7
 800f01a:	5551      	strb	r1, [r2, r5]
 800f01c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f01e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f020:	6852      	ldr	r2, [r2, #4]
 800f022:	3301      	adds	r3, #1
 800f024:	600b      	str	r3, [r1, #0]
 800f026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f028:	3a01      	subs	r2, #1
 800f02a:	604a      	str	r2, [r1, #4]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d102      	bne.n	800f036 <__ssvfscanf_r+0x44e>
 800f030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f032:	2b04      	cmp	r3, #4
 800f034:	d007      	beq.n	800f046 <__ssvfscanf_r+0x45e>
 800f036:	2048      	movs	r0, #72	; 0x48
 800f038:	2310      	movs	r3, #16
 800f03a:	181b      	adds	r3, r3, r0
 800f03c:	2208      	movs	r2, #8
 800f03e:	2100      	movs	r1, #0
 800f040:	19d8      	adds	r0, r3, r7
 800f042:	f7fd f997 	bl	800c374 <memset>
 800f046:	2148      	movs	r1, #72	; 0x48
 800f048:	2310      	movs	r3, #16
 800f04a:	228c      	movs	r2, #140	; 0x8c
 800f04c:	185b      	adds	r3, r3, r1
 800f04e:	0052      	lsls	r2, r2, #1
 800f050:	19db      	adds	r3, r3, r7
 800f052:	1852      	adds	r2, r2, r1
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	0021      	movs	r1, r4
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f05c:	19d2      	adds	r2, r2, r7
 800f05e:	f002 fc57 	bl	8011910 <_mbrtowc_r>
 800f062:	0003      	movs	r3, r0
 800f064:	62b8      	str	r0, [r7, #40]	; 0x28
 800f066:	3301      	adds	r3, #1
 800f068:	d100      	bne.n	800f06c <__ssvfscanf_r+0x484>
 800f06a:	e68c      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d139      	bne.n	800f0e4 <__ssvfscanf_r+0x4fc>
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d100      	bne.n	800f078 <__ssvfscanf_r+0x490>
 800f076:	6023      	str	r3, [r4, #0]
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	4694      	mov	ip, r2
 800f07e:	4463      	add	r3, ip
 800f080:	63bb      	str	r3, [r7, #56]	; 0x38
 800f082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f084:	2b03      	cmp	r3, #3
 800f086:	d102      	bne.n	800f08e <__ssvfscanf_r+0x4a6>
 800f088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f08a:	2b04      	cmp	r3, #4
 800f08c:	d002      	beq.n	800f094 <__ssvfscanf_r+0x4ac>
 800f08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f090:	3b01      	subs	r3, #1
 800f092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d115      	bne.n	800f0c6 <__ssvfscanf_r+0x4de>
 800f09a:	2e00      	cmp	r6, #0
 800f09c:	d012      	beq.n	800f0c4 <__ssvfscanf_r+0x4dc>
 800f09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a0:	69fa      	ldr	r2, [r7, #28]
 800f0a2:	1ae5      	subs	r5, r4, r3
 800f0a4:	10ab      	asrs	r3, r5, #2
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d30c      	bcc.n	800f0c4 <__ssvfscanf_r+0x4dc>
 800f0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ac:	00d1      	lsls	r1, r2, #3
 800f0ae:	f002 f895 	bl	80111dc <realloc>
 800f0b2:	6338      	str	r0, [r7, #48]	; 0x30
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d100      	bne.n	800f0ba <__ssvfscanf_r+0x4d2>
 800f0b8:	e75e      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	1944      	adds	r4, r0, r5
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	6030      	str	r0, [r6, #0]
 800f0c2:	61fb      	str	r3, [r7, #28]
 800f0c4:	3404      	adds	r4, #4
 800f0c6:	2500      	movs	r5, #0
 800f0c8:	e010      	b.n	800f0ec <__ssvfscanf_r+0x504>
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0cc:	613b      	str	r3, [r7, #16]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	001e      	movs	r6, r3
 800f0d2:	001c      	movs	r4, r3
 800f0d4:	61fb      	str	r3, [r7, #28]
 800f0d6:	633b      	str	r3, [r7, #48]	; 0x30
 800f0d8:	e78f      	b.n	800effa <__ssvfscanf_r+0x412>
 800f0da:	6a3b      	ldr	r3, [r7, #32]
 800f0dc:	001e      	movs	r6, r3
 800f0de:	61fb      	str	r3, [r7, #28]
 800f0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800f0e2:	e78a      	b.n	800effa <__ssvfscanf_r+0x412>
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	68fd      	ldr	r5, [r7, #12]
 800f0e8:	3302      	adds	r3, #2
 800f0ea:	d1c5      	bne.n	800f078 <__ssvfscanf_r+0x490>
 800f0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	dc12      	bgt.n	800f11a <__ssvfscanf_r+0x532>
 800f0f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0f8:	f002 fd0a 	bl	8011b10 <__ssrefill_r>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d00c      	beq.n	800f11a <__ssvfscanf_r+0x532>
 800f100:	2d00      	cmp	r5, #0
 800f102:	d000      	beq.n	800f106 <__ssvfscanf_r+0x51e>
 800f104:	e63f      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f106:	2e00      	cmp	r6, #0
 800f108:	d10c      	bne.n	800f124 <__ssvfscanf_r+0x53c>
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	425a      	negs	r2, r3
 800f10e:	4153      	adcs	r3, r2
 800f110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f112:	18d3      	adds	r3, r2, r3
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	e6de      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800f11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d000      	beq.n	800f122 <__ssvfscanf_r+0x53a>
 800f120:	e76c      	b.n	800effc <__ssvfscanf_r+0x414>
 800f122:	e7f0      	b.n	800f106 <__ssvfscanf_r+0x51e>
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	69fa      	ldr	r2, [r7, #28]
 800f128:	1ae1      	subs	r1, r4, r3
 800f12a:	108b      	asrs	r3, r1, #2
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d9ec      	bls.n	800f10a <__ssvfscanf_r+0x522>
 800f130:	6830      	ldr	r0, [r6, #0]
 800f132:	f002 f853 	bl	80111dc <realloc>
 800f136:	2800      	cmp	r0, #0
 800f138:	d0e7      	beq.n	800f10a <__ssvfscanf_r+0x522>
 800f13a:	6030      	str	r0, [r6, #0]
 800f13c:	e7e5      	b.n	800f10a <__ssvfscanf_r+0x522>
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d025      	beq.n	800f190 <__ssvfscanf_r+0x5a8>
 800f144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f14c:	6812      	ldr	r2, [r2, #0]
 800f14e:	4299      	cmp	r1, r3
 800f150:	dd11      	ble.n	800f176 <__ssvfscanf_r+0x58e>
 800f152:	1ac9      	subs	r1, r1, r3
 800f154:	18d2      	adds	r2, r2, r3
 800f156:	18e4      	adds	r4, r4, r3
 800f158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f15a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f15c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f15e:	0019      	movs	r1, r3
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	f002 fcd5 	bl	8011b10 <__ssrefill_r>
 800f166:	2800      	cmp	r0, #0
 800f168:	d0ec      	beq.n	800f144 <__ssvfscanf_r+0x55c>
 800f16a:	2c00      	cmp	r4, #0
 800f16c:	d100      	bne.n	800f170 <__ssvfscanf_r+0x588>
 800f16e:	e60a      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	191b      	adds	r3, r3, r4
 800f174:	e5ff      	b.n	800ed76 <__ssvfscanf_r+0x18e>
 800f176:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f178:	1a5b      	subs	r3, r3, r1
 800f17a:	1864      	adds	r4, r4, r1
 800f17c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f17e:	604b      	str	r3, [r1, #4]
 800f180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f182:	18d2      	adds	r2, r2, r3
 800f184:	600a      	str	r2, [r1, #0]
 800f186:	e7f3      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f188:	0800c039 	.word	0x0800c039
 800f18c:	0000fff6 	.word	0x0000fff6
 800f190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f192:	0034      	movs	r4, r6
 800f194:	cb20      	ldmia	r3!, {r5}
 800f196:	633b      	str	r3, [r7, #48]	; 0x30
 800f198:	2380      	movs	r3, #128	; 0x80
 800f19a:	401c      	ands	r4, r3
 800f19c:	421e      	tst	r6, r3
 800f19e:	d028      	beq.n	800f1f2 <__ssvfscanf_r+0x60a>
 800f1a0:	2d00      	cmp	r5, #0
 800f1a2:	d100      	bne.n	800f1a6 <__ssvfscanf_r+0x5be>
 800f1a4:	e61d      	b.n	800ede2 <__ssvfscanf_r+0x1fa>
 800f1a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1a8:	f7fb fe50 	bl	800ae4c <malloc>
 800f1ac:	6238      	str	r0, [r7, #32]
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d100      	bne.n	800f1b4 <__ssvfscanf_r+0x5cc>
 800f1b2:	e5ef      	b.n	800ed94 <__ssvfscanf_r+0x1ac>
 800f1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b6:	6028      	str	r0, [r5, #0]
 800f1b8:	88de      	ldrh	r6, [r3, #6]
 800f1ba:	889c      	ldrh	r4, [r3, #4]
 800f1bc:	6818      	ldr	r0, [r3, #0]
 800f1be:	42a6      	cmp	r6, r4
 800f1c0:	d30e      	bcc.n	800f1e0 <__ssvfscanf_r+0x5f8>
 800f1c2:	4bbf      	ldr	r3, [pc, #764]	; (800f4c0 <__ssvfscanf_r+0x8d8>)
 800f1c4:	429c      	cmp	r4, r3
 800f1c6:	d900      	bls.n	800f1ca <__ssvfscanf_r+0x5e2>
 800f1c8:	e6df      	b.n	800ef8a <__ssvfscanf_r+0x3a2>
 800f1ca:	3408      	adds	r4, #8
 800f1cc:	b2a4      	uxth	r4, r4
 800f1ce:	00a1      	lsls	r1, r4, #2
 800f1d0:	f002 f804 	bl	80111dc <realloc>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d100      	bne.n	800f1da <__ssvfscanf_r+0x5f2>
 800f1d8:	e6d7      	b.n	800ef8a <__ssvfscanf_r+0x3a2>
 800f1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1dc:	6018      	str	r0, [r3, #0]
 800f1de:	809c      	strh	r4, [r3, #4]
 800f1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e2:	1c72      	adds	r2, r6, #1
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1e8:	00b6      	lsls	r6, r6, #2
 800f1ea:	002c      	movs	r4, r5
 800f1ec:	50f5      	str	r5, [r6, r3]
 800f1ee:	6a3d      	ldr	r5, [r7, #32]
 800f1f0:	80ca      	strh	r2, [r1, #6]
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f4:	0029      	movs	r1, r5
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1fe:	f002 fca6 	bl	8011b4e <_sfread_r>
 800f202:	1e05      	subs	r5, r0, #0
 800f204:	d100      	bne.n	800f208 <__ssvfscanf_r+0x620>
 800f206:	e5be      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f208:	2c00      	cmp	r4, #0
 800f20a:	d009      	beq.n	800f220 <__ssvfscanf_r+0x638>
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	4283      	cmp	r3, r0
 800f210:	d906      	bls.n	800f220 <__ssvfscanf_r+0x638>
 800f212:	0001      	movs	r1, r0
 800f214:	6820      	ldr	r0, [r4, #0]
 800f216:	f001 ffe1 	bl	80111dc <realloc>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d000      	beq.n	800f220 <__ssvfscanf_r+0x638>
 800f21e:	6020      	str	r0, [r4, #0]
 800f220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f222:	195b      	adds	r3, r3, r5
 800f224:	63bb      	str	r3, [r7, #56]	; 0x38
 800f226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f228:	3301      	adds	r3, #1
 800f22a:	e4f8      	b.n	800ec1e <__ssvfscanf_r+0x36>
 800f22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <__ssvfscanf_r+0x64e>
 800f232:	3b01      	subs	r3, #1
 800f234:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f236:	2210      	movs	r2, #16
 800f238:	2301      	movs	r3, #1
 800f23a:	0034      	movs	r4, r6
 800f23c:	4032      	ands	r2, r6
 800f23e:	401c      	ands	r4, r3
 800f240:	623a      	str	r2, [r7, #32]
 800f242:	421e      	tst	r6, r3
 800f244:	d100      	bne.n	800f248 <__ssvfscanf_r+0x660>
 800f246:	e116      	b.n	800f476 <__ssvfscanf_r+0x88e>
 800f248:	2a00      	cmp	r2, #0
 800f24a:	d000      	beq.n	800f24e <__ssvfscanf_r+0x666>
 800f24c:	e0b0      	b.n	800f3b0 <__ssvfscanf_r+0x7c8>
 800f24e:	2080      	movs	r0, #128	; 0x80
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	cb10      	ldmia	r3!, {r4}
 800f254:	60fb      	str	r3, [r7, #12]
 800f256:	4206      	tst	r6, r0
 800f258:	d100      	bne.n	800f25c <__ssvfscanf_r+0x674>
 800f25a:	e0b2      	b.n	800f3c2 <__ssvfscanf_r+0x7da>
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d100      	bne.n	800f262 <__ssvfscanf_r+0x67a>
 800f260:	e68d      	b.n	800ef7e <__ssvfscanf_r+0x396>
 800f262:	f7fb fdf3 	bl	800ae4c <malloc>
 800f266:	6338      	str	r0, [r7, #48]	; 0x30
 800f268:	2800      	cmp	r0, #0
 800f26a:	d100      	bne.n	800f26e <__ssvfscanf_r+0x686>
 800f26c:	e684      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f274:	88de      	ldrh	r6, [r3, #6]
 800f276:	889d      	ldrh	r5, [r3, #4]
 800f278:	42ae      	cmp	r6, r5
 800f27a:	d310      	bcc.n	800f29e <__ssvfscanf_r+0x6b6>
 800f27c:	4b90      	ldr	r3, [pc, #576]	; (800f4c0 <__ssvfscanf_r+0x8d8>)
 800f27e:	429d      	cmp	r5, r3
 800f280:	d900      	bls.n	800f284 <__ssvfscanf_r+0x69c>
 800f282:	e679      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f286:	3508      	adds	r5, #8
 800f288:	b2ad      	uxth	r5, r5
 800f28a:	6818      	ldr	r0, [r3, #0]
 800f28c:	00a9      	lsls	r1, r5, #2
 800f28e:	f001 ffa5 	bl	80111dc <realloc>
 800f292:	2800      	cmp	r0, #0
 800f294:	d100      	bne.n	800f298 <__ssvfscanf_r+0x6b0>
 800f296:	e66f      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29a:	6018      	str	r0, [r3, #0]
 800f29c:	809d      	strh	r5, [r3, #4]
 800f29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a0:	1c72      	adds	r2, r6, #1
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	00b6      	lsls	r6, r6, #2
 800f2a6:	50f4      	str	r4, [r6, r3]
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2ac:	0026      	movs	r6, r4
 800f2ae:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f2b0:	80ca      	strh	r2, [r1, #6]
 800f2b2:	613b      	str	r3, [r7, #16]
 800f2b4:	2500      	movs	r5, #0
 800f2b6:	f7fd f8a1 	bl	800c3fc <__locale_mb_cur_max>
 800f2ba:	42a8      	cmp	r0, r5
 800f2bc:	d100      	bne.n	800f2c0 <__ssvfscanf_r+0x6d8>
 800f2be:	e562      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f2c0:	1c6a      	adds	r2, r5, #1
 800f2c2:	61fa      	str	r2, [r7, #28]
 800f2c4:	228c      	movs	r2, #140	; 0x8c
 800f2c6:	2048      	movs	r0, #72	; 0x48
 800f2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2ca:	0052      	lsls	r2, r2, #1
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	1812      	adds	r2, r2, r0
 800f2d0:	7819      	ldrb	r1, [r3, #0]
 800f2d2:	19d2      	adds	r2, r2, r7
 800f2d4:	5551      	strb	r1, [r2, r5]
 800f2d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2da:	6852      	ldr	r2, [r2, #4]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	600b      	str	r3, [r1, #0]
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	3a01      	subs	r2, #1
 800f2e4:	604a      	str	r2, [r1, #4]
 800f2e6:	2b03      	cmp	r3, #3
 800f2e8:	d102      	bne.n	800f2f0 <__ssvfscanf_r+0x708>
 800f2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ec:	2b04      	cmp	r3, #4
 800f2ee:	d006      	beq.n	800f2fe <__ssvfscanf_r+0x716>
 800f2f0:	2048      	movs	r0, #72	; 0x48
 800f2f2:	2208      	movs	r2, #8
 800f2f4:	1813      	adds	r3, r2, r0
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	19d8      	adds	r0, r3, r7
 800f2fa:	f7fd f83b 	bl	800c374 <memset>
 800f2fe:	2148      	movs	r1, #72	; 0x48
 800f300:	2308      	movs	r3, #8
 800f302:	228c      	movs	r2, #140	; 0x8c
 800f304:	185b      	adds	r3, r3, r1
 800f306:	0052      	lsls	r2, r2, #1
 800f308:	19db      	adds	r3, r3, r7
 800f30a:	1852      	adds	r2, r2, r1
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	0021      	movs	r1, r4
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f314:	19d2      	adds	r2, r2, r7
 800f316:	f002 fafb 	bl	8011910 <_mbrtowc_r>
 800f31a:	0003      	movs	r3, r0
 800f31c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f31e:	3301      	adds	r3, #1
 800f320:	d100      	bne.n	800f324 <__ssvfscanf_r+0x73c>
 800f322:	e530      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f324:	2800      	cmp	r0, #0
 800f326:	d151      	bne.n	800f3cc <__ssvfscanf_r+0x7e4>
 800f328:	6020      	str	r0, [r4, #0]
 800f32a:	2301      	movs	r3, #1
 800f32c:	6825      	ldr	r5, [r4, #0]
 800f32e:	425b      	negs	r3, r3
 800f330:	1c6a      	adds	r2, r5, #1
 800f332:	d01a      	beq.n	800f36a <__ssvfscanf_r+0x782>
 800f334:	2048      	movs	r0, #72	; 0x48
 800f336:	3311      	adds	r3, #17
 800f338:	181b      	adds	r3, r3, r0
 800f33a:	2208      	movs	r2, #8
 800f33c:	2100      	movs	r1, #0
 800f33e:	19d8      	adds	r0, r3, r7
 800f340:	f7fd f818 	bl	800c374 <memset>
 800f344:	4b5f      	ldr	r3, [pc, #380]	; (800f4c4 <__ssvfscanf_r+0x8dc>)
 800f346:	2148      	movs	r1, #72	; 0x48
 800f348:	33e0      	adds	r3, #224	; 0xe0
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	2310      	movs	r3, #16
 800f34e:	4694      	mov	ip, r2
 800f350:	185b      	adds	r3, r3, r1
 800f352:	002a      	movs	r2, r5
 800f354:	19db      	adds	r3, r3, r7
 800f356:	4665      	mov	r5, ip
 800f358:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f35a:	1879      	adds	r1, r7, r1
 800f35c:	47a8      	blx	r5
 800f35e:	2300      	movs	r3, #0
 800f360:	2801      	cmp	r0, #1
 800f362:	d102      	bne.n	800f36a <__ssvfscanf_r+0x782>
 800f364:	3348      	adds	r3, #72	; 0x48
 800f366:	18fb      	adds	r3, r7, r3
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2218      	movs	r2, #24
 800f36c:	2148      	movs	r1, #72	; 0x48
 800f36e:	1852      	adds	r2, r2, r1
 800f370:	19d2      	adds	r2, r2, r7
 800f372:	5cd3      	ldrb	r3, [r2, r3]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d149      	bne.n	800f40c <__ssvfscanf_r+0x824>
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d137      	bne.n	800f3ee <__ssvfscanf_r+0x806>
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d113      	bne.n	800f3ac <__ssvfscanf_r+0x7c4>
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	2e00      	cmp	r6, #0
 800f388:	d00d      	beq.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	693a      	ldr	r2, [r7, #16]
 800f38e:	1ae4      	subs	r4, r4, r3
 800f390:	10a3      	asrs	r3, r4, #2
 800f392:	3301      	adds	r3, #1
 800f394:	429a      	cmp	r2, r3
 800f396:	d906      	bls.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f398:	6830      	ldr	r0, [r6, #0]
 800f39a:	1d21      	adds	r1, r4, #4
 800f39c:	f001 ff1e 	bl	80111dc <realloc>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d000      	beq.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f3a4:	6030      	str	r0, [r6, #0]
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	e593      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	001e      	movs	r6, r3
 800f3b8:	613b      	str	r3, [r7, #16]
 800f3ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f3bc:	334c      	adds	r3, #76	; 0x4c
 800f3be:	18fc      	adds	r4, r7, r3
 800f3c0:	e778      	b.n	800f2b4 <__ssvfscanf_r+0x6cc>
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	001e      	movs	r6, r3
 800f3c6:	613b      	str	r3, [r7, #16]
 800f3c8:	633b      	str	r3, [r7, #48]	; 0x30
 800f3ca:	e773      	b.n	800f2b4 <__ssvfscanf_r+0x6cc>
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	69fd      	ldr	r5, [r7, #28]
 800f3d0:	3302      	adds	r3, #2
 800f3d2:	d1aa      	bne.n	800f32a <__ssvfscanf_r+0x742>
 800f3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dc47      	bgt.n	800f46c <__ssvfscanf_r+0x884>
 800f3dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3e0:	f002 fb96 	bl	8011b10 <__ssrefill_r>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d041      	beq.n	800f46c <__ssvfscanf_r+0x884>
 800f3e8:	2d00      	cmp	r5, #0
 800f3ea:	d0c8      	beq.n	800f37e <__ssvfscanf_r+0x796>
 800f3ec:	e4cb      	b.n	800ed86 <__ssvfscanf_r+0x19e>
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	2248      	movs	r2, #72	; 0x48
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	61fb      	str	r3, [r7, #28]
 800f3f6:	238c      	movs	r3, #140	; 0x8c
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	189b      	adds	r3, r3, r2
 800f3fc:	69fa      	ldr	r2, [r7, #28]
 800f3fe:	19db      	adds	r3, r3, r7
 800f400:	5cd1      	ldrb	r1, [r2, r3]
 800f402:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f406:	f002 fb47 	bl	8011a98 <_sungetc_r>
 800f40a:	e7b5      	b.n	800f378 <__ssvfscanf_r+0x790>
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	4694      	mov	ip, r2
 800f412:	4463      	add	r3, ip
 800f414:	63bb      	str	r3, [r7, #56]	; 0x38
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	2b03      	cmp	r3, #3
 800f41a:	d102      	bne.n	800f422 <__ssvfscanf_r+0x83a>
 800f41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41e:	2b04      	cmp	r3, #4
 800f420:	d002      	beq.n	800f428 <__ssvfscanf_r+0x840>
 800f422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f424:	3b01      	subs	r3, #1
 800f426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f428:	6a3b      	ldr	r3, [r7, #32]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d11a      	bne.n	800f464 <__ssvfscanf_r+0x87c>
 800f42e:	3404      	adds	r4, #4
 800f430:	2e00      	cmp	r6, #0
 800f432:	d019      	beq.n	800f468 <__ssvfscanf_r+0x880>
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	1ae3      	subs	r3, r4, r3
 800f43a:	61fb      	str	r3, [r7, #28]
 800f43c:	6a3d      	ldr	r5, [r7, #32]
 800f43e:	109b      	asrs	r3, r3, #2
 800f440:	4293      	cmp	r3, r2
 800f442:	d3c7      	bcc.n	800f3d4 <__ssvfscanf_r+0x7ec>
 800f444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f446:	00d1      	lsls	r1, r2, #3
 800f448:	f001 fec8 	bl	80111dc <realloc>
 800f44c:	6338      	str	r0, [r7, #48]	; 0x30
 800f44e:	2800      	cmp	r0, #0
 800f450:	d100      	bne.n	800f454 <__ssvfscanf_r+0x86c>
 800f452:	e591      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f454:	4684      	mov	ip, r0
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	69fc      	ldr	r4, [r7, #28]
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	4464      	add	r4, ip
 800f45e:	6030      	str	r0, [r6, #0]
 800f460:	613b      	str	r3, [r7, #16]
 800f462:	e7b7      	b.n	800f3d4 <__ssvfscanf_r+0x7ec>
 800f464:	2500      	movs	r5, #0
 800f466:	e7b5      	b.n	800f3d4 <__ssvfscanf_r+0x7ec>
 800f468:	0035      	movs	r5, r6
 800f46a:	e7b3      	b.n	800f3d4 <__ssvfscanf_r+0x7ec>
 800f46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d000      	beq.n	800f474 <__ssvfscanf_r+0x88c>
 800f472:	e720      	b.n	800f2b6 <__ssvfscanf_r+0x6ce>
 800f474:	e783      	b.n	800f37e <__ssvfscanf_r+0x796>
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d025      	beq.n	800f4c8 <__ssvfscanf_r+0x8e0>
 800f47c:	2118      	movs	r1, #24
 800f47e:	2048      	movs	r0, #72	; 0x48
 800f480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f482:	1809      	adds	r1, r1, r0
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	19c9      	adds	r1, r1, r7
 800f488:	781a      	ldrb	r2, [r3, #0]
 800f48a:	5c8a      	ldrb	r2, [r1, r2]
 800f48c:	2a00      	cmp	r2, #0
 800f48e:	d103      	bne.n	800f498 <__ssvfscanf_r+0x8b0>
 800f490:	2c00      	cmp	r4, #0
 800f492:	d000      	beq.n	800f496 <__ssvfscanf_r+0x8ae>
 800f494:	e66c      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f496:	e4a4      	b.n	800ede2 <__ssvfscanf_r+0x1fa>
 800f498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f49a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f49c:	6852      	ldr	r2, [r2, #4]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	600b      	str	r3, [r1, #0]
 800f4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a4:	3a01      	subs	r2, #1
 800f4a6:	3401      	adds	r4, #1
 800f4a8:	604a      	str	r2, [r1, #4]
 800f4aa:	429c      	cmp	r4, r3
 800f4ac:	d100      	bne.n	800f4b0 <__ssvfscanf_r+0x8c8>
 800f4ae:	e65f      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f4b0:	2a00      	cmp	r2, #0
 800f4b2:	dce3      	bgt.n	800f47c <__ssvfscanf_r+0x894>
 800f4b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4b6:	f002 fb2b 	bl	8011b10 <__ssrefill_r>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d0de      	beq.n	800f47c <__ssvfscanf_r+0x894>
 800f4be:	e657      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f4c0:	0000fff6 	.word	0x0000fff6
 800f4c4:	20000448 	.word	0x20000448
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	0032      	movs	r2, r6
 800f4cc:	cb20      	ldmia	r3!, {r5}
 800f4ce:	61fb      	str	r3, [r7, #28]
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	401a      	ands	r2, r3
 800f4d4:	421e      	tst	r6, r3
 800f4d6:	d100      	bne.n	800f4da <__ssvfscanf_r+0x8f2>
 800f4d8:	e086      	b.n	800f5e8 <__ssvfscanf_r+0xa00>
 800f4da:	2d00      	cmp	r5, #0
 800f4dc:	d100      	bne.n	800f4e0 <__ssvfscanf_r+0x8f8>
 800f4de:	e480      	b.n	800ede2 <__ssvfscanf_r+0x1fa>
 800f4e0:	2020      	movs	r0, #32
 800f4e2:	f7fb fcb3 	bl	800ae4c <malloc>
 800f4e6:	6338      	str	r0, [r7, #48]	; 0x30
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d100      	bne.n	800f4ee <__ssvfscanf_r+0x906>
 800f4ec:	e452      	b.n	800ed94 <__ssvfscanf_r+0x1ac>
 800f4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f0:	6028      	str	r0, [r5, #0]
 800f4f2:	88de      	ldrh	r6, [r3, #6]
 800f4f4:	889c      	ldrh	r4, [r3, #4]
 800f4f6:	6818      	ldr	r0, [r3, #0]
 800f4f8:	42a6      	cmp	r6, r4
 800f4fa:	d30e      	bcc.n	800f51a <__ssvfscanf_r+0x932>
 800f4fc:	4bc3      	ldr	r3, [pc, #780]	; (800f80c <__ssvfscanf_r+0xc24>)
 800f4fe:	429c      	cmp	r4, r3
 800f500:	d900      	bls.n	800f504 <__ssvfscanf_r+0x91c>
 800f502:	e542      	b.n	800ef8a <__ssvfscanf_r+0x3a2>
 800f504:	3408      	adds	r4, #8
 800f506:	b2a4      	uxth	r4, r4
 800f508:	00a1      	lsls	r1, r4, #2
 800f50a:	f001 fe67 	bl	80111dc <realloc>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d100      	bne.n	800f514 <__ssvfscanf_r+0x92c>
 800f512:	e53a      	b.n	800ef8a <__ssvfscanf_r+0x3a2>
 800f514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f516:	6018      	str	r0, [r3, #0]
 800f518:	809c      	strh	r4, [r3, #4]
 800f51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f51c:	1c72      	adds	r2, r6, #1
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	00b6      	lsls	r6, r6, #2
 800f522:	50f5      	str	r5, [r6, r3]
 800f524:	2320      	movs	r3, #32
 800f526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f528:	002e      	movs	r6, r5
 800f52a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f52c:	80ca      	strh	r2, [r1, #6]
 800f52e:	623b      	str	r3, [r7, #32]
 800f530:	002c      	movs	r4, r5
 800f532:	2118      	movs	r1, #24
 800f534:	2048      	movs	r0, #72	; 0x48
 800f536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f538:	1809      	adds	r1, r1, r0
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	19c9      	adds	r1, r1, r7
 800f53e:	781a      	ldrb	r2, [r3, #0]
 800f540:	5c8a      	ldrb	r2, [r1, r2]
 800f542:	2a00      	cmp	r2, #0
 800f544:	d101      	bne.n	800f54a <__ssvfscanf_r+0x962>
 800f546:	633d      	str	r5, [r7, #48]	; 0x30
 800f548:	e031      	b.n	800f5ae <__ssvfscanf_r+0x9c6>
 800f54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f54e:	6852      	ldr	r2, [r2, #4]
 800f550:	3a01      	subs	r2, #1
 800f552:	604a      	str	r2, [r1, #4]
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	600a      	str	r2, [r1, #0]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	1c6a      	adds	r2, r5, #1
 800f55c:	633a      	str	r2, [r7, #48]	; 0x30
 800f55e:	702b      	strb	r3, [r5, #0]
 800f560:	2e00      	cmp	r6, #0
 800f562:	d010      	beq.n	800f586 <__ssvfscanf_r+0x99e>
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	1b15      	subs	r5, r2, r4
 800f568:	429d      	cmp	r5, r3
 800f56a:	d30c      	bcc.n	800f586 <__ssvfscanf_r+0x99e>
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	0020      	movs	r0, r4
 800f570:	0019      	movs	r1, r3
 800f572:	623b      	str	r3, [r7, #32]
 800f574:	f001 fe32 	bl	80111dc <realloc>
 800f578:	1e04      	subs	r4, r0, #0
 800f57a:	d101      	bne.n	800f580 <__ssvfscanf_r+0x998>
 800f57c:	f7ff fc0a 	bl	800ed94 <__ssvfscanf_r+0x1ac>
 800f580:	1943      	adds	r3, r0, r5
 800f582:	633b      	str	r3, [r7, #48]	; 0x30
 800f584:	6030      	str	r0, [r6, #0]
 800f586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f588:	3b01      	subs	r3, #1
 800f58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00e      	beq.n	800f5ae <__ssvfscanf_r+0x9c6>
 800f590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dc2a      	bgt.n	800f5ee <__ssvfscanf_r+0xa06>
 800f598:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f59a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f59c:	f002 fab8 	bl	8011b10 <__ssrefill_r>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d024      	beq.n	800f5ee <__ssvfscanf_r+0xa06>
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	42a3      	cmp	r3, r4
 800f5a8:	d101      	bne.n	800f5ae <__ssvfscanf_r+0x9c6>
 800f5aa:	f7ff fbec 	bl	800ed86 <__ssvfscanf_r+0x19e>
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	1b1d      	subs	r5, r3, r4
 800f5b2:	42a3      	cmp	r3, r4
 800f5b4:	d101      	bne.n	800f5ba <__ssvfscanf_r+0x9d2>
 800f5b6:	f7ff fc14 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5be:	7013      	strb	r3, [r2, #0]
 800f5c0:	429e      	cmp	r6, r3
 800f5c2:	d009      	beq.n	800f5d8 <__ssvfscanf_r+0x9f0>
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	1c69      	adds	r1, r5, #1
 800f5c8:	428b      	cmp	r3, r1
 800f5ca:	d905      	bls.n	800f5d8 <__ssvfscanf_r+0x9f0>
 800f5cc:	6830      	ldr	r0, [r6, #0]
 800f5ce:	f001 fe05 	bl	80111dc <realloc>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d000      	beq.n	800f5d8 <__ssvfscanf_r+0x9f0>
 800f5d6:	6030      	str	r0, [r6, #0]
 800f5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5da:	3301      	adds	r3, #1
 800f5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	195b      	adds	r3, r3, r5
 800f5e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	e477      	b.n	800eed8 <__ssvfscanf_r+0x2f0>
 800f5e8:	0016      	movs	r6, r2
 800f5ea:	623a      	str	r2, [r7, #32]
 800f5ec:	e7a0      	b.n	800f530 <__ssvfscanf_r+0x948>
 800f5ee:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f5f0:	e79f      	b.n	800f532 <__ssvfscanf_r+0x94a>
 800f5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <__ssvfscanf_r+0xa14>
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5fc:	2210      	movs	r2, #16
 800f5fe:	2301      	movs	r3, #1
 800f600:	0034      	movs	r4, r6
 800f602:	4032      	ands	r2, r6
 800f604:	401c      	ands	r4, r3
 800f606:	61fa      	str	r2, [r7, #28]
 800f608:	421e      	tst	r6, r3
 800f60a:	d100      	bne.n	800f60e <__ssvfscanf_r+0xa26>
 800f60c:	e102      	b.n	800f814 <__ssvfscanf_r+0xc2c>
 800f60e:	2a00      	cmp	r2, #0
 800f610:	d000      	beq.n	800f614 <__ssvfscanf_r+0xa2c>
 800f612:	e09f      	b.n	800f754 <__ssvfscanf_r+0xb6c>
 800f614:	2080      	movs	r0, #128	; 0x80
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	cb10      	ldmia	r3!, {r4}
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	4206      	tst	r6, r0
 800f61e:	d100      	bne.n	800f622 <__ssvfscanf_r+0xa3a>
 800f620:	e0a1      	b.n	800f766 <__ssvfscanf_r+0xb7e>
 800f622:	2c00      	cmp	r4, #0
 800f624:	d100      	bne.n	800f628 <__ssvfscanf_r+0xa40>
 800f626:	e4aa      	b.n	800ef7e <__ssvfscanf_r+0x396>
 800f628:	f7fb fc10 	bl	800ae4c <malloc>
 800f62c:	6338      	str	r0, [r7, #48]	; 0x30
 800f62e:	2800      	cmp	r0, #0
 800f630:	d100      	bne.n	800f634 <__ssvfscanf_r+0xa4c>
 800f632:	e4a1      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	6023      	str	r3, [r4, #0]
 800f638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f63a:	88de      	ldrh	r6, [r3, #6]
 800f63c:	889d      	ldrh	r5, [r3, #4]
 800f63e:	42ae      	cmp	r6, r5
 800f640:	d310      	bcc.n	800f664 <__ssvfscanf_r+0xa7c>
 800f642:	4b72      	ldr	r3, [pc, #456]	; (800f80c <__ssvfscanf_r+0xc24>)
 800f644:	429d      	cmp	r5, r3
 800f646:	d900      	bls.n	800f64a <__ssvfscanf_r+0xa62>
 800f648:	e496      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f64c:	3508      	adds	r5, #8
 800f64e:	b2ad      	uxth	r5, r5
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	00a9      	lsls	r1, r5, #2
 800f654:	f001 fdc2 	bl	80111dc <realloc>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d100      	bne.n	800f65e <__ssvfscanf_r+0xa76>
 800f65c:	e48c      	b.n	800ef78 <__ssvfscanf_r+0x390>
 800f65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f660:	6018      	str	r0, [r3, #0]
 800f662:	809d      	strh	r5, [r3, #4]
 800f664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f666:	1c72      	adds	r2, r6, #1
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	00b6      	lsls	r6, r6, #2
 800f66c:	50f4      	str	r4, [r6, r3]
 800f66e:	2320      	movs	r3, #32
 800f670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f672:	0025      	movs	r5, r4
 800f674:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f676:	80ca      	strh	r2, [r1, #6]
 800f678:	613b      	str	r3, [r7, #16]
 800f67a:	2300      	movs	r3, #0
 800f67c:	623b      	str	r3, [r7, #32]
 800f67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f680:	4a63      	ldr	r2, [pc, #396]	; (800f810 <__ssvfscanf_r+0xc28>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	5cd3      	ldrb	r3, [r2, r3]
 800f688:	2208      	movs	r2, #8
 800f68a:	4213      	tst	r3, r2
 800f68c:	d149      	bne.n	800f722 <__ssvfscanf_r+0xb3a>
 800f68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f690:	2b00      	cmp	r3, #0
 800f692:	d046      	beq.n	800f722 <__ssvfscanf_r+0xb3a>
 800f694:	f7fc feb2 	bl	800c3fc <__locale_mb_cur_max>
 800f698:	6a3b      	ldr	r3, [r7, #32]
 800f69a:	4298      	cmp	r0, r3
 800f69c:	d101      	bne.n	800f6a2 <__ssvfscanf_r+0xaba>
 800f69e:	f7ff fb72 	bl	800ed86 <__ssvfscanf_r+0x19e>
 800f6a2:	6a3a      	ldr	r2, [r7, #32]
 800f6a4:	2048      	movs	r0, #72	; 0x48
 800f6a6:	1c56      	adds	r6, r2, #1
 800f6a8:	228c      	movs	r2, #140	; 0x8c
 800f6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6ac:	0052      	lsls	r2, r2, #1
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	1812      	adds	r2, r2, r0
 800f6b2:	7819      	ldrb	r1, [r3, #0]
 800f6b4:	6a38      	ldr	r0, [r7, #32]
 800f6b6:	19d2      	adds	r2, r2, r7
 800f6b8:	5411      	strb	r1, [r2, r0]
 800f6ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6be:	6852      	ldr	r2, [r2, #4]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	600b      	str	r3, [r1, #0]
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	3a01      	subs	r2, #1
 800f6c8:	604a      	str	r2, [r1, #4]
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	d102      	bne.n	800f6d4 <__ssvfscanf_r+0xaec>
 800f6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6d0:	2b04      	cmp	r3, #4
 800f6d2:	d007      	beq.n	800f6e4 <__ssvfscanf_r+0xafc>
 800f6d4:	2048      	movs	r0, #72	; 0x48
 800f6d6:	2310      	movs	r3, #16
 800f6d8:	181b      	adds	r3, r3, r0
 800f6da:	2208      	movs	r2, #8
 800f6dc:	2100      	movs	r1, #0
 800f6de:	19d8      	adds	r0, r3, r7
 800f6e0:	f7fc fe48 	bl	800c374 <memset>
 800f6e4:	2148      	movs	r1, #72	; 0x48
 800f6e6:	2310      	movs	r3, #16
 800f6e8:	228c      	movs	r2, #140	; 0x8c
 800f6ea:	185b      	adds	r3, r3, r1
 800f6ec:	0052      	lsls	r2, r2, #1
 800f6ee:	19db      	adds	r3, r3, r7
 800f6f0:	1852      	adds	r2, r2, r1
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	0021      	movs	r1, r4
 800f6f6:	0033      	movs	r3, r6
 800f6f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6fa:	19d2      	adds	r2, r2, r7
 800f6fc:	f002 f908 	bl	8011910 <_mbrtowc_r>
 800f700:	0003      	movs	r3, r0
 800f702:	62b8      	str	r0, [r7, #40]	; 0x28
 800f704:	3301      	adds	r3, #1
 800f706:	d101      	bne.n	800f70c <__ssvfscanf_r+0xb24>
 800f708:	f7ff fb3d 	bl	800ed86 <__ssvfscanf_r+0x19e>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d12f      	bne.n	800f770 <__ssvfscanf_r+0xb88>
 800f710:	6020      	str	r0, [r4, #0]
 800f712:	6820      	ldr	r0, [r4, #0]
 800f714:	f002 f91a 	bl	801194c <iswspace>
 800f718:	6238      	str	r0, [r7, #32]
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d04a      	beq.n	800f7b4 <__ssvfscanf_r+0xbcc>
 800f71e:	2e00      	cmp	r6, #0
 800f720:	d13c      	bne.n	800f79c <__ssvfscanf_r+0xbb4>
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d000      	beq.n	800f72a <__ssvfscanf_r+0xb42>
 800f728:	e640      	b.n	800f3ac <__ssvfscanf_r+0x7c4>
 800f72a:	6023      	str	r3, [r4, #0]
 800f72c:	2d00      	cmp	r5, #0
 800f72e:	d100      	bne.n	800f732 <__ssvfscanf_r+0xb4a>
 800f730:	e639      	b.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	1ae4      	subs	r4, r4, r3
 800f738:	10a3      	asrs	r3, r4, #2
 800f73a:	3301      	adds	r3, #1
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d800      	bhi.n	800f742 <__ssvfscanf_r+0xb5a>
 800f740:	e631      	b.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f742:	6828      	ldr	r0, [r5, #0]
 800f744:	1d21      	adds	r1, r4, #4
 800f746:	f001 fd49 	bl	80111dc <realloc>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d100      	bne.n	800f750 <__ssvfscanf_r+0xb68>
 800f74e:	e62a      	b.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f750:	6028      	str	r0, [r5, #0]
 800f752:	e628      	b.n	800f3a6 <__ssvfscanf_r+0x7be>
 800f754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	2300      	movs	r3, #0
 800f75a:	001d      	movs	r5, r3
 800f75c:	613b      	str	r3, [r7, #16]
 800f75e:	633b      	str	r3, [r7, #48]	; 0x30
 800f760:	334c      	adds	r3, #76	; 0x4c
 800f762:	18fc      	adds	r4, r7, r3
 800f764:	e789      	b.n	800f67a <__ssvfscanf_r+0xa92>
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	001d      	movs	r5, r3
 800f76a:	613b      	str	r3, [r7, #16]
 800f76c:	633b      	str	r3, [r7, #48]	; 0x30
 800f76e:	e784      	b.n	800f67a <__ssvfscanf_r+0xa92>
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	623e      	str	r6, [r7, #32]
 800f774:	3302      	adds	r3, #2
 800f776:	d1cc      	bne.n	800f712 <__ssvfscanf_r+0xb2a>
 800f778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	dd00      	ble.n	800f782 <__ssvfscanf_r+0xb9a>
 800f780:	e77d      	b.n	800f67e <__ssvfscanf_r+0xa96>
 800f782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f786:	f002 f9c3 	bl	8011b10 <__ssrefill_r>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d100      	bne.n	800f790 <__ssvfscanf_r+0xba8>
 800f78e:	e776      	b.n	800f67e <__ssvfscanf_r+0xa96>
 800f790:	6a3b      	ldr	r3, [r7, #32]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <__ssvfscanf_r+0xbb2>
 800f796:	f7ff faf6 	bl	800ed86 <__ssvfscanf_r+0x19e>
 800f79a:	e7c2      	b.n	800f722 <__ssvfscanf_r+0xb3a>
 800f79c:	238c      	movs	r3, #140	; 0x8c
 800f79e:	2248      	movs	r2, #72	; 0x48
 800f7a0:	005b      	lsls	r3, r3, #1
 800f7a2:	189b      	adds	r3, r3, r2
 800f7a4:	3e01      	subs	r6, #1
 800f7a6:	19db      	adds	r3, r3, r7
 800f7a8:	5cf1      	ldrb	r1, [r6, r3]
 800f7aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7ae:	f002 f973 	bl	8011a98 <_sungetc_r>
 800f7b2:	e7b4      	b.n	800f71e <__ssvfscanf_r+0xb36>
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b6:	199b      	adds	r3, r3, r6
 800f7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	d102      	bne.n	800f7c6 <__ssvfscanf_r+0xbde>
 800f7c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7c2:	2b04      	cmp	r3, #4
 800f7c4:	d002      	beq.n	800f7cc <__ssvfscanf_r+0xbe4>
 800f7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1d2      	bne.n	800f778 <__ssvfscanf_r+0xb90>
 800f7d2:	3404      	adds	r4, #4
 800f7d4:	2d00      	cmp	r5, #0
 800f7d6:	d016      	beq.n	800f806 <__ssvfscanf_r+0xc1e>
 800f7d8:	69fa      	ldr	r2, [r7, #28]
 800f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7dc:	623a      	str	r2, [r7, #32]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	1ae6      	subs	r6, r4, r3
 800f7e2:	10b3      	asrs	r3, r6, #2
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d3c7      	bcc.n	800f778 <__ssvfscanf_r+0xb90>
 800f7e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7ea:	00d1      	lsls	r1, r2, #3
 800f7ec:	f001 fcf6 	bl	80111dc <realloc>
 800f7f0:	6338      	str	r0, [r7, #48]	; 0x30
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d101      	bne.n	800f7fa <__ssvfscanf_r+0xc12>
 800f7f6:	f7ff fbbf 	bl	800ef78 <__ssvfscanf_r+0x390>
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	1984      	adds	r4, r0, r6
 800f7fe:	005b      	lsls	r3, r3, #1
 800f800:	6028      	str	r0, [r5, #0]
 800f802:	613b      	str	r3, [r7, #16]
 800f804:	e7b8      	b.n	800f778 <__ssvfscanf_r+0xb90>
 800f806:	623d      	str	r5, [r7, #32]
 800f808:	e7b6      	b.n	800f778 <__ssvfscanf_r+0xb90>
 800f80a:	46c0      	nop			; (mov r8, r8)
 800f80c:	0000fff6 	.word	0x0000fff6
 800f810:	080148f9 	.word	0x080148f9
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d01c      	beq.n	800f854 <__ssvfscanf_r+0xc6c>
 800f81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f81c:	49bf      	ldr	r1, [pc, #764]	; (800fb1c <__ssvfscanf_r+0xf34>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	781a      	ldrb	r2, [r3, #0]
 800f822:	5c8a      	ldrb	r2, [r1, r2]
 800f824:	2108      	movs	r1, #8
 800f826:	420a      	tst	r2, r1
 800f828:	d000      	beq.n	800f82c <__ssvfscanf_r+0xc44>
 800f82a:	e4a1      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f82e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f830:	6852      	ldr	r2, [r2, #4]
 800f832:	3301      	adds	r3, #1
 800f834:	600b      	str	r3, [r1, #0]
 800f836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f838:	3a01      	subs	r2, #1
 800f83a:	3401      	adds	r4, #1
 800f83c:	604a      	str	r2, [r1, #4]
 800f83e:	429c      	cmp	r4, r3
 800f840:	d100      	bne.n	800f844 <__ssvfscanf_r+0xc5c>
 800f842:	e495      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f844:	2a00      	cmp	r2, #0
 800f846:	dce8      	bgt.n	800f81a <__ssvfscanf_r+0xc32>
 800f848:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f84a:	f002 f961 	bl	8011b10 <__ssrefill_r>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d0e3      	beq.n	800f81a <__ssvfscanf_r+0xc32>
 800f852:	e48d      	b.n	800f170 <__ssvfscanf_r+0x588>
 800f854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f856:	0032      	movs	r2, r6
 800f858:	cb10      	ldmia	r3!, {r4}
 800f85a:	61fb      	str	r3, [r7, #28]
 800f85c:	2380      	movs	r3, #128	; 0x80
 800f85e:	401a      	ands	r2, r3
 800f860:	421e      	tst	r6, r3
 800f862:	d039      	beq.n	800f8d8 <__ssvfscanf_r+0xcf0>
 800f864:	2c00      	cmp	r4, #0
 800f866:	d101      	bne.n	800f86c <__ssvfscanf_r+0xc84>
 800f868:	f7ff fabb 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800f86c:	2020      	movs	r0, #32
 800f86e:	f7fb faed 	bl	800ae4c <malloc>
 800f872:	6338      	str	r0, [r7, #48]	; 0x30
 800f874:	2800      	cmp	r0, #0
 800f876:	d101      	bne.n	800f87c <__ssvfscanf_r+0xc94>
 800f878:	f7ff fa8c 	bl	800ed94 <__ssvfscanf_r+0x1ac>
 800f87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87e:	6020      	str	r0, [r4, #0]
 800f880:	88de      	ldrh	r6, [r3, #6]
 800f882:	889d      	ldrh	r5, [r3, #4]
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	42ae      	cmp	r6, r5
 800f888:	d310      	bcc.n	800f8ac <__ssvfscanf_r+0xcc4>
 800f88a:	4ba5      	ldr	r3, [pc, #660]	; (800fb20 <__ssvfscanf_r+0xf38>)
 800f88c:	429d      	cmp	r5, r3
 800f88e:	d901      	bls.n	800f894 <__ssvfscanf_r+0xcac>
 800f890:	f7ff fb7b 	bl	800ef8a <__ssvfscanf_r+0x3a2>
 800f894:	3508      	adds	r5, #8
 800f896:	b2ad      	uxth	r5, r5
 800f898:	00a9      	lsls	r1, r5, #2
 800f89a:	f001 fc9f 	bl	80111dc <realloc>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d101      	bne.n	800f8a6 <__ssvfscanf_r+0xcbe>
 800f8a2:	f7ff fb72 	bl	800ef8a <__ssvfscanf_r+0x3a2>
 800f8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a8:	6018      	str	r0, [r3, #0]
 800f8aa:	809d      	strh	r5, [r3, #4]
 800f8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ae:	1c72      	adds	r2, r6, #1
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	00b6      	lsls	r6, r6, #2
 800f8b4:	50f4      	str	r4, [r6, r3]
 800f8b6:	2320      	movs	r3, #32
 800f8b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8ba:	0026      	movs	r6, r4
 800f8bc:	80ca      	strh	r2, [r1, #6]
 800f8be:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f8c0:	633b      	str	r3, [r7, #48]	; 0x30
 800f8c2:	0025      	movs	r5, r4
 800f8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8c6:	4995      	ldr	r1, [pc, #596]	; (800fb1c <__ssvfscanf_r+0xf34>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	781a      	ldrb	r2, [r3, #0]
 800f8cc:	5c8a      	ldrb	r2, [r1, r2]
 800f8ce:	2108      	movs	r1, #8
 800f8d0:	420a      	tst	r2, r1
 800f8d2:	d004      	beq.n	800f8de <__ssvfscanf_r+0xcf6>
 800f8d4:	623c      	str	r4, [r7, #32]
 800f8d6:	e031      	b.n	800f93c <__ssvfscanf_r+0xd54>
 800f8d8:	0016      	movs	r6, r2
 800f8da:	633a      	str	r2, [r7, #48]	; 0x30
 800f8dc:	e7f1      	b.n	800f8c2 <__ssvfscanf_r+0xcda>
 800f8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8e2:	6852      	ldr	r2, [r2, #4]
 800f8e4:	3a01      	subs	r2, #1
 800f8e6:	604a      	str	r2, [r1, #4]
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	600a      	str	r2, [r1, #0]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	1c62      	adds	r2, r4, #1
 800f8f0:	623a      	str	r2, [r7, #32]
 800f8f2:	7023      	strb	r3, [r4, #0]
 800f8f4:	2e00      	cmp	r6, #0
 800f8f6:	d010      	beq.n	800f91a <__ssvfscanf_r+0xd32>
 800f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fa:	1b54      	subs	r4, r2, r5
 800f8fc:	429c      	cmp	r4, r3
 800f8fe:	d30c      	bcc.n	800f91a <__ssvfscanf_r+0xd32>
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	0028      	movs	r0, r5
 800f904:	0019      	movs	r1, r3
 800f906:	633b      	str	r3, [r7, #48]	; 0x30
 800f908:	f001 fc68 	bl	80111dc <realloc>
 800f90c:	1e05      	subs	r5, r0, #0
 800f90e:	d101      	bne.n	800f914 <__ssvfscanf_r+0xd2c>
 800f910:	f7ff fa40 	bl	800ed94 <__ssvfscanf_r+0x1ac>
 800f914:	1903      	adds	r3, r0, r4
 800f916:	623b      	str	r3, [r7, #32]
 800f918:	6030      	str	r0, [r6, #0]
 800f91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f91c:	3b01      	subs	r3, #1
 800f91e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00b      	beq.n	800f93c <__ssvfscanf_r+0xd54>
 800f924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	dd01      	ble.n	800f930 <__ssvfscanf_r+0xd48>
 800f92c:	6a3c      	ldr	r4, [r7, #32]
 800f92e:	e7c9      	b.n	800f8c4 <__ssvfscanf_r+0xcdc>
 800f930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f934:	f002 f8ec 	bl	8011b10 <__ssrefill_r>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d0f7      	beq.n	800f92c <__ssvfscanf_r+0xd44>
 800f93c:	2300      	movs	r3, #0
 800f93e:	6a3a      	ldr	r2, [r7, #32]
 800f940:	7013      	strb	r3, [r2, #0]
 800f942:	1b55      	subs	r5, r2, r5
 800f944:	2e00      	cmp	r6, #0
 800f946:	d009      	beq.n	800f95c <__ssvfscanf_r+0xd74>
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	1c69      	adds	r1, r5, #1
 800f94c:	428b      	cmp	r3, r1
 800f94e:	d905      	bls.n	800f95c <__ssvfscanf_r+0xd74>
 800f950:	6830      	ldr	r0, [r6, #0]
 800f952:	f001 fc43 	bl	80111dc <realloc>
 800f956:	2800      	cmp	r0, #0
 800f958:	d000      	beq.n	800f95c <__ssvfscanf_r+0xd74>
 800f95a:	6030      	str	r0, [r6, #0]
 800f95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95e:	195b      	adds	r3, r3, r5
 800f960:	63bb      	str	r3, [r7, #56]	; 0x38
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	3301      	adds	r3, #1
 800f966:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f968:	e63c      	b.n	800f5e4 <__ssvfscanf_r+0x9fc>
 800f96a:	22ae      	movs	r2, #174	; 0xae
 800f96c:	2100      	movs	r1, #0
 800f96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f970:	0052      	lsls	r2, r2, #1
 800f972:	3b01      	subs	r3, #1
 800f974:	6239      	str	r1, [r7, #32]
 800f976:	4293      	cmp	r3, r2
 800f978:	d906      	bls.n	800f988 <__ssvfscanf_r+0xda0>
 800f97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97c:	3b5e      	subs	r3, #94	; 0x5e
 800f97e:	3bff      	subs	r3, #255	; 0xff
 800f980:	623b      	str	r3, [r7, #32]
 800f982:	235e      	movs	r3, #94	; 0x5e
 800f984:	33ff      	adds	r3, #255	; 0xff
 800f986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f988:	24d8      	movs	r4, #216	; 0xd8
 800f98a:	2300      	movs	r3, #0
 800f98c:	2248      	movs	r2, #72	; 0x48
 800f98e:	0124      	lsls	r4, r4, #4
 800f990:	4334      	orrs	r4, r6
 800f992:	2680      	movs	r6, #128	; 0x80
 800f994:	61fb      	str	r3, [r7, #28]
 800f996:	3319      	adds	r3, #25
 800f998:	33ff      	adds	r3, #255	; 0xff
 800f99a:	189b      	adds	r3, r3, r2
 800f99c:	19dd      	adds	r5, r3, r7
 800f99e:	00b6      	lsls	r6, r6, #2
 800f9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	7813      	ldrb	r3, [r2, #0]
 800f9a6:	2b39      	cmp	r3, #57	; 0x39
 800f9a8:	d80f      	bhi.n	800f9ca <__ssvfscanf_r+0xde2>
 800f9aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ac:	d91b      	bls.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800f9ae:	0018      	movs	r0, r3
 800f9b0:	382b      	subs	r0, #43	; 0x2b
 800f9b2:	280e      	cmp	r0, #14
 800f9b4:	d817      	bhi.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800f9b6:	f7f0 fbad 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f9ba:	168f      	.short	0x168f
 800f9bc:	5416168f 	.word	0x5416168f
 800f9c0:	80808080 	.word	0x80808080
 800f9c4:	87808080 	.word	0x87808080
 800f9c8:	87          	.byte	0x87
 800f9c9:	00          	.byte	0x00
 800f9ca:	2b66      	cmp	r3, #102	; 0x66
 800f9cc:	d83a      	bhi.n	800fa44 <__ssvfscanf_r+0xe5c>
 800f9ce:	2b60      	cmp	r3, #96	; 0x60
 800f9d0:	d803      	bhi.n	800f9da <__ssvfscanf_r+0xdf2>
 800f9d2:	2b46      	cmp	r3, #70	; 0x46
 800f9d4:	d805      	bhi.n	800f9e2 <__ssvfscanf_r+0xdfa>
 800f9d6:	2b40      	cmp	r3, #64	; 0x40
 800f9d8:	d905      	bls.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800f9da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9dc:	290a      	cmp	r1, #10
 800f9de:	dc71      	bgt.n	800fac4 <__ssvfscanf_r+0xedc>
 800f9e0:	e001      	b.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800f9e2:	2b58      	cmp	r3, #88	; 0x58
 800f9e4:	d030      	beq.n	800fa48 <__ssvfscanf_r+0xe60>
 800f9e6:	05e3      	lsls	r3, r4, #23
 800f9e8:	d515      	bpl.n	800fa16 <__ssvfscanf_r+0xe2e>
 800f9ea:	238c      	movs	r3, #140	; 0x8c
 800f9ec:	2248      	movs	r2, #72	; 0x48
 800f9ee:	005b      	lsls	r3, r3, #1
 800f9f0:	189b      	adds	r3, r3, r2
 800f9f2:	19db      	adds	r3, r3, r7
 800f9f4:	429d      	cmp	r5, r3
 800f9f6:	d905      	bls.n	800fa04 <__ssvfscanf_r+0xe1c>
 800f9f8:	3d01      	subs	r5, #1
 800f9fa:	7829      	ldrb	r1, [r5, #0]
 800f9fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa00:	f002 f84a 	bl	8011a98 <_sungetc_r>
 800fa04:	238c      	movs	r3, #140	; 0x8c
 800fa06:	2248      	movs	r2, #72	; 0x48
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	189b      	adds	r3, r3, r2
 800fa0c:	19db      	adds	r3, r3, r7
 800fa0e:	429d      	cmp	r5, r3
 800fa10:	d101      	bne.n	800fa16 <__ssvfscanf_r+0xe2e>
 800fa12:	f7ff f9e6 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800fa16:	2310      	movs	r3, #16
 800fa18:	0022      	movs	r2, r4
 800fa1a:	401a      	ands	r2, r3
 800fa1c:	421c      	tst	r4, r3
 800fa1e:	d171      	bne.n	800fb04 <__ssvfscanf_r+0xf1c>
 800fa20:	218c      	movs	r1, #140	; 0x8c
 800fa22:	2048      	movs	r0, #72	; 0x48
 800fa24:	0049      	lsls	r1, r1, #1
 800fa26:	1809      	adds	r1, r1, r0
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	697e      	ldr	r6, [r7, #20]
 800fa2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa2e:	19c9      	adds	r1, r1, r7
 800fa30:	702a      	strb	r2, [r5, #0]
 800fa32:	47b0      	blx	r6
 800fa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa36:	1d1e      	adds	r6, r3, #4
 800fa38:	06a3      	lsls	r3, r4, #26
 800fa3a:	d559      	bpl.n	800faf0 <__ssvfscanf_r+0xf08>
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6018      	str	r0, [r3, #0]
 800fa42:	e05b      	b.n	800fafc <__ssvfscanf_r+0xf14>
 800fa44:	2b78      	cmp	r3, #120	; 0x78
 800fa46:	d1ce      	bne.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800fa48:	21c0      	movs	r1, #192	; 0xc0
 800fa4a:	00c9      	lsls	r1, r1, #3
 800fa4c:	4021      	ands	r1, r4
 800fa4e:	42b1      	cmp	r1, r6
 800fa50:	d1c9      	bne.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800fa52:	4934      	ldr	r1, [pc, #208]	; (800fb24 <__ssvfscanf_r+0xf3c>)
 800fa54:	4021      	ands	r1, r4
 800fa56:	24a0      	movs	r4, #160	; 0xa0
 800fa58:	00e4      	lsls	r4, r4, #3
 800fa5a:	430c      	orrs	r4, r1
 800fa5c:	2110      	movs	r1, #16
 800fa5e:	6279      	str	r1, [r7, #36]	; 0x24
 800fa60:	e00b      	b.n	800fa7a <__ssvfscanf_r+0xe92>
 800fa62:	0521      	lsls	r1, r4, #20
 800fa64:	d509      	bpl.n	800fa7a <__ssvfscanf_r+0xe92>
 800fa66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa68:	2900      	cmp	r1, #0
 800fa6a:	d102      	bne.n	800fa72 <__ssvfscanf_r+0xe8a>
 800fa6c:	3108      	adds	r1, #8
 800fa6e:	4334      	orrs	r4, r6
 800fa70:	6279      	str	r1, [r7, #36]	; 0x24
 800fa72:	0561      	lsls	r1, r4, #21
 800fa74:	d504      	bpl.n	800fa80 <__ssvfscanf_r+0xe98>
 800fa76:	492c      	ldr	r1, [pc, #176]	; (800fb28 <__ssvfscanf_r+0xf40>)
 800fa78:	400c      	ands	r4, r1
 800fa7a:	702b      	strb	r3, [r5, #0]
 800fa7c:	3501      	adds	r5, #1
 800fa7e:	e00c      	b.n	800fa9a <__ssvfscanf_r+0xeb2>
 800fa80:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <__ssvfscanf_r+0xf44>)
 800fa82:	401c      	ands	r4, r3
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d004      	beq.n	800fa94 <__ssvfscanf_r+0xeac>
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	623b      	str	r3, [r7, #32]
 800fa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa90:	3301      	adds	r3, #1
 800fa92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	3301      	adds	r3, #1
 800fa98:	61fb      	str	r3, [r7, #28]
 800fa9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	3b01      	subs	r3, #1
 800faa2:	604b      	str	r3, [r1, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dd1c      	ble.n	800fae2 <__ssvfscanf_r+0xefa>
 800faa8:	3201      	adds	r2, #1
 800faaa:	600a      	str	r2, [r1, #0]
 800faac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faae:	3b01      	subs	r3, #1
 800fab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d000      	beq.n	800fab8 <__ssvfscanf_r+0xed0>
 800fab6:	e773      	b.n	800f9a0 <__ssvfscanf_r+0xdb8>
 800fab8:	e795      	b.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800faba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fabc:	491c      	ldr	r1, [pc, #112]	; (800fb30 <__ssvfscanf_r+0xf48>)
 800fabe:	0040      	lsls	r0, r0, #1
 800fac0:	5e41      	ldrsh	r1, [r0, r1]
 800fac2:	6279      	str	r1, [r7, #36]	; 0x24
 800fac4:	491b      	ldr	r1, [pc, #108]	; (800fb34 <__ssvfscanf_r+0xf4c>)
 800fac6:	e7d7      	b.n	800fa78 <__ssvfscanf_r+0xe90>
 800fac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faca:	4919      	ldr	r1, [pc, #100]	; (800fb30 <__ssvfscanf_r+0xf48>)
 800facc:	0040      	lsls	r0, r0, #1
 800face:	5e41      	ldrsh	r1, [r0, r1]
 800fad0:	6279      	str	r1, [r7, #36]	; 0x24
 800fad2:	2908      	cmp	r1, #8
 800fad4:	dcf6      	bgt.n	800fac4 <__ssvfscanf_r+0xedc>
 800fad6:	e786      	b.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800fad8:	2180      	movs	r1, #128	; 0x80
 800fada:	420c      	tst	r4, r1
 800fadc:	d083      	beq.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800fade:	438c      	bics	r4, r1
 800fae0:	e7cb      	b.n	800fa7a <__ssvfscanf_r+0xe92>
 800fae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fae6:	f002 f813 	bl	8011b10 <__ssrefill_r>
 800faea:	2800      	cmp	r0, #0
 800faec:	d0de      	beq.n	800faac <__ssvfscanf_r+0xec4>
 800faee:	e77a      	b.n	800f9e6 <__ssvfscanf_r+0xdfe>
 800faf0:	2308      	movs	r3, #8
 800faf2:	421c      	tst	r4, r3
 800faf4:	d020      	beq.n	800fb38 <__ssvfscanf_r+0xf50>
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	7018      	strb	r0, [r3, #0]
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	633e      	str	r6, [r7, #48]	; 0x30
 800fb00:	3301      	adds	r3, #1
 800fb02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb04:	238c      	movs	r3, #140	; 0x8c
 800fb06:	2248      	movs	r2, #72	; 0x48
 800fb08:	005b      	lsls	r3, r3, #1
 800fb0a:	189b      	adds	r3, r3, r2
 800fb0c:	19db      	adds	r3, r3, r7
 800fb0e:	1aed      	subs	r5, r5, r3
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	18ed      	adds	r5, r5, r3
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	195b      	adds	r3, r3, r5
 800fb18:	f7ff f92d 	bl	800ed76 <__ssvfscanf_r+0x18e>
 800fb1c:	080148f9 	.word	0x080148f9
 800fb20:	0000fff6 	.word	0x0000fff6
 800fb24:	fffffdff 	.word	0xfffffdff
 800fb28:	fffffa7f 	.word	0xfffffa7f
 800fb2c:	fffffc7f 	.word	0xfffffc7f
 800fb30:	08014c26 	.word	0x08014c26
 800fb34:	fffff47f 	.word	0xfffff47f
 800fb38:	0763      	lsls	r3, r4, #29
 800fb3a:	d503      	bpl.n	800fb44 <__ssvfscanf_r+0xf5c>
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	8018      	strh	r0, [r3, #0]
 800fb42:	e7db      	b.n	800fafc <__ssvfscanf_r+0xf14>
 800fb44:	2301      	movs	r3, #1
 800fb46:	0022      	movs	r2, r4
 800fb48:	401a      	ands	r2, r3
 800fb4a:	421c      	tst	r4, r3
 800fb4c:	d000      	beq.n	800fb50 <__ssvfscanf_r+0xf68>
 800fb4e:	e775      	b.n	800fa3c <__ssvfscanf_r+0xe54>
 800fb50:	07a4      	lsls	r4, r4, #30
 800fb52:	d400      	bmi.n	800fb56 <__ssvfscanf_r+0xf6e>
 800fb54:	e772      	b.n	800fa3c <__ssvfscanf_r+0xe54>
 800fb56:	4ba8      	ldr	r3, [pc, #672]	; (800fdf8 <__ssvfscanf_r+0x1210>)
 800fb58:	6979      	ldr	r1, [r7, #20]
 800fb5a:	4299      	cmp	r1, r3
 800fb5c:	d10c      	bne.n	800fb78 <__ssvfscanf_r+0xf90>
 800fb5e:	218c      	movs	r1, #140	; 0x8c
 800fb60:	2048      	movs	r0, #72	; 0x48
 800fb62:	0049      	lsls	r1, r1, #1
 800fb64:	1809      	adds	r1, r1, r0
 800fb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb6a:	19c9      	adds	r1, r1, r7
 800fb6c:	f001 fecc 	bl	8011908 <_strtoull_r>
 800fb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	c303      	stmia	r3!, {r0, r1}
 800fb76:	e7c1      	b.n	800fafc <__ssvfscanf_r+0xf14>
 800fb78:	218c      	movs	r1, #140	; 0x8c
 800fb7a:	2048      	movs	r0, #72	; 0x48
 800fb7c:	0049      	lsls	r1, r1, #1
 800fb7e:	1809      	adds	r1, r1, r0
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb84:	19c9      	adds	r1, r1, r7
 800fb86:	f001 fe0d 	bl	80117a4 <_strtoll_r>
 800fb8a:	e7f1      	b.n	800fb70 <__ssvfscanf_r+0xf88>
 800fb8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb8e:	f000 fb9f 	bl	80102d0 <_localeconv_r>
 800fb92:	22ae      	movs	r2, #174	; 0xae
 800fb94:	2100      	movs	r1, #0
 800fb96:	6803      	ldr	r3, [r0, #0]
 800fb98:	0052      	lsls	r2, r2, #1
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9e:	60f9      	str	r1, [r7, #12]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d906      	bls.n	800fbb4 <__ssvfscanf_r+0xfcc>
 800fba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba8:	3b5e      	subs	r3, #94	; 0x5e
 800fbaa:	3bff      	subs	r3, #255	; 0xff
 800fbac:	60fb      	str	r3, [r7, #12]
 800fbae:	235e      	movs	r3, #94	; 0x5e
 800fbb0:	33ff      	adds	r3, #255	; 0xff
 800fbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbb4:	23f0      	movs	r3, #240	; 0xf0
 800fbb6:	00db      	lsls	r3, r3, #3
 800fbb8:	431e      	orrs	r6, r3
 800fbba:	238c      	movs	r3, #140	; 0x8c
 800fbbc:	2248      	movs	r2, #72	; 0x48
 800fbbe:	2400      	movs	r4, #0
 800fbc0:	005b      	lsls	r3, r3, #1
 800fbc2:	189b      	adds	r3, r3, r2
 800fbc4:	623c      	str	r4, [r7, #32]
 800fbc6:	607c      	str	r4, [r7, #4]
 800fbc8:	60bc      	str	r4, [r7, #8]
 800fbca:	61fc      	str	r4, [r7, #28]
 800fbcc:	613c      	str	r4, [r7, #16]
 800fbce:	19dd      	adds	r5, r3, r7
 800fbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	781a      	ldrb	r2, [r3, #0]
 800fbd6:	0010      	movs	r0, r2
 800fbd8:	382b      	subs	r0, #43	; 0x2b
 800fbda:	284e      	cmp	r0, #78	; 0x4e
 800fbdc:	d900      	bls.n	800fbe0 <__ssvfscanf_r+0xff8>
 800fbde:	e133      	b.n	800fe48 <__ssvfscanf_r+0x1260>
 800fbe0:	f7f0 faa2 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fbe4:	0132009b 	.word	0x0132009b
 800fbe8:	0132009b 	.word	0x0132009b
 800fbec:	004f0132 	.word	0x004f0132
 800fbf0:	00720072 	.word	0x00720072
 800fbf4:	00720072 	.word	0x00720072
 800fbf8:	00720072 	.word	0x00720072
 800fbfc:	00720072 	.word	0x00720072
 800fc00:	01320072 	.word	0x01320072
 800fc04:	01320132 	.word	0x01320132
 800fc08:	01320132 	.word	0x01320132
 800fc0c:	01320132 	.word	0x01320132
 800fc10:	007b00bc 	.word	0x007b00bc
 800fc14:	007b007b 	.word	0x007b007b
 800fc18:	00f7012f 	.word	0x00f7012f
 800fc1c:	01320132 	.word	0x01320132
 800fc20:	013200e3 	.word	0x013200e3
 800fc24:	01320132 	.word	0x01320132
 800fc28:	00a00132 	.word	0x00a00132
 800fc2c:	01120132 	.word	0x01120132
 800fc30:	01320132 	.word	0x01320132
 800fc34:	01010132 	.word	0x01010132
 800fc38:	01320132 	.word	0x01320132
 800fc3c:	00820132 	.word	0x00820132
 800fc40:	01320105 	.word	0x01320105
 800fc44:	01320132 	.word	0x01320132
 800fc48:	01320132 	.word	0x01320132
 800fc4c:	01320132 	.word	0x01320132
 800fc50:	007b00bc 	.word	0x007b00bc
 800fc54:	007b007b 	.word	0x007b007b
 800fc58:	00f7012f 	.word	0x00f7012f
 800fc5c:	01320132 	.word	0x01320132
 800fc60:	013200e3 	.word	0x013200e3
 800fc64:	01320132 	.word	0x01320132
 800fc68:	00a00132 	.word	0x00a00132
 800fc6c:	01120132 	.word	0x01120132
 800fc70:	01320132 	.word	0x01320132
 800fc74:	01010132 	.word	0x01010132
 800fc78:	01320132 	.word	0x01320132
 800fc7c:	00820132 	.word	0x00820132
 800fc80:	0105      	.short	0x0105
 800fc82:	05f1      	lsls	r1, r6, #23
 800fc84:	d520      	bpl.n	800fcc8 <__ssvfscanf_r+0x10e0>
 800fc86:	2280      	movs	r2, #128	; 0x80
 800fc88:	4396      	bics	r6, r2
 800fc8a:	69fa      	ldr	r2, [r7, #28]
 800fc8c:	3201      	adds	r2, #1
 800fc8e:	61fa      	str	r2, [r7, #28]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	2a00      	cmp	r2, #0
 800fc94:	d004      	beq.n	800fca0 <__ssvfscanf_r+0x10b8>
 800fc96:	3a01      	subs	r2, #1
 800fc98:	60fa      	str	r2, [r7, #12]
 800fc9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc9c:	3201      	adds	r2, #1
 800fc9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fca4:	3a01      	subs	r2, #1
 800fca6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcaa:	3201      	adds	r2, #1
 800fcac:	63ba      	str	r2, [r7, #56]	; 0x38
 800fcae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcb0:	6852      	ldr	r2, [r2, #4]
 800fcb2:	3a01      	subs	r2, #1
 800fcb4:	604a      	str	r2, [r1, #4]
 800fcb6:	2a00      	cmp	r2, #0
 800fcb8:	dc00      	bgt.n	800fcbc <__ssvfscanf_r+0x10d4>
 800fcba:	e0d6      	b.n	800fe6a <__ssvfscanf_r+0x1282>
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	600b      	str	r3, [r1, #0]
 800fcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d184      	bne.n	800fbd0 <__ssvfscanf_r+0xfe8>
 800fcc6:	e057      	b.n	800fd78 <__ssvfscanf_r+0x1190>
 800fcc8:	6a39      	ldr	r1, [r7, #32]
 800fcca:	1909      	adds	r1, r1, r4
 800fccc:	2900      	cmp	r1, #0
 800fcce:	d153      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fcd0:	494a      	ldr	r1, [pc, #296]	; (800fdfc <__ssvfscanf_r+0x1214>)
 800fcd2:	400e      	ands	r6, r1
 800fcd4:	702a      	strb	r2, [r5, #0]
 800fcd6:	3501      	adds	r5, #1
 800fcd8:	e7e2      	b.n	800fca0 <__ssvfscanf_r+0x10b8>
 800fcda:	0531      	lsls	r1, r6, #20
 800fcdc:	d54c      	bpl.n	800fd78 <__ssvfscanf_r+0x1190>
 800fcde:	6a39      	ldr	r1, [r7, #32]
 800fce0:	1909      	adds	r1, r1, r4
 800fce2:	2900      	cmp	r1, #0
 800fce4:	d040      	beq.n	800fd68 <__ssvfscanf_r+0x1180>
 800fce6:	e047      	b.n	800fd78 <__ssvfscanf_r+0x1190>
 800fce8:	2198      	movs	r1, #152	; 0x98
 800fcea:	2080      	movs	r0, #128	; 0x80
 800fcec:	0109      	lsls	r1, r1, #4
 800fcee:	4031      	ands	r1, r6
 800fcf0:	0040      	lsls	r0, r0, #1
 800fcf2:	4281      	cmp	r1, r0
 800fcf4:	d140      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fcf6:	69f9      	ldr	r1, [r7, #28]
 800fcf8:	2901      	cmp	r1, #1
 800fcfa:	d13d      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fcfc:	2080      	movs	r0, #128	; 0x80
 800fcfe:	4940      	ldr	r1, [pc, #256]	; (800fe00 <__ssvfscanf_r+0x1218>)
 800fd00:	0100      	lsls	r0, r0, #4
 800fd02:	400e      	ands	r6, r1
 800fd04:	3132      	adds	r1, #50	; 0x32
 800fd06:	31ff      	adds	r1, #255	; 0xff
 800fd08:	7029      	strb	r1, [r5, #0]
 800fd0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd0c:	4306      	orrs	r6, r0
 800fd0e:	3901      	subs	r1, #1
 800fd10:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fd12:	3501      	adds	r5, #1
 800fd14:	2100      	movs	r1, #0
 800fd16:	61f9      	str	r1, [r7, #28]
 800fd18:	e7dc      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fd1a:	2180      	movs	r1, #128	; 0x80
 800fd1c:	420e      	tst	r6, r1
 800fd1e:	d02b      	beq.n	800fd78 <__ssvfscanf_r+0x1190>
 800fd20:	438e      	bics	r6, r1
 800fd22:	e7d7      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fd24:	6a39      	ldr	r1, [r7, #32]
 800fd26:	2900      	cmp	r1, #0
 800fd28:	d10d      	bne.n	800fd46 <__ssvfscanf_r+0x115e>
 800fd2a:	69f9      	ldr	r1, [r7, #28]
 800fd2c:	2900      	cmp	r1, #0
 800fd2e:	d10e      	bne.n	800fd4e <__ssvfscanf_r+0x1166>
 800fd30:	21e0      	movs	r1, #224	; 0xe0
 800fd32:	0030      	movs	r0, r6
 800fd34:	00c9      	lsls	r1, r1, #3
 800fd36:	4008      	ands	r0, r1
 800fd38:	4288      	cmp	r0, r1
 800fd3a:	d108      	bne.n	800fd4e <__ssvfscanf_r+0x1166>
 800fd3c:	4931      	ldr	r1, [pc, #196]	; (800fe04 <__ssvfscanf_r+0x121c>)
 800fd3e:	400e      	ands	r6, r1
 800fd40:	2101      	movs	r1, #1
 800fd42:	6239      	str	r1, [r7, #32]
 800fd44:	e7c6      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fd46:	6a39      	ldr	r1, [r7, #32]
 800fd48:	2902      	cmp	r1, #2
 800fd4a:	d100      	bne.n	800fd4e <__ssvfscanf_r+0x1166>
 800fd4c:	e089      	b.n	800fe62 <__ssvfscanf_r+0x127a>
 800fd4e:	2c01      	cmp	r4, #1
 800fd50:	d001      	beq.n	800fd56 <__ssvfscanf_r+0x116e>
 800fd52:	2c04      	cmp	r4, #4
 800fd54:	d110      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fd56:	3401      	adds	r4, #1
 800fd58:	b2e4      	uxtb	r4, r4
 800fd5a:	e7bb      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fd5c:	0531      	lsls	r1, r6, #20
 800fd5e:	d508      	bpl.n	800fd72 <__ssvfscanf_r+0x118a>
 800fd60:	6a39      	ldr	r1, [r7, #32]
 800fd62:	1909      	adds	r1, r1, r4
 800fd64:	2900      	cmp	r1, #0
 800fd66:	d104      	bne.n	800fd72 <__ssvfscanf_r+0x118a>
 800fd68:	4824      	ldr	r0, [pc, #144]	; (800fdfc <__ssvfscanf_r+0x1214>)
 800fd6a:	000c      	movs	r4, r1
 800fd6c:	4006      	ands	r6, r0
 800fd6e:	6239      	str	r1, [r7, #32]
 800fd70:	e7b0      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fd72:	6a39      	ldr	r1, [r7, #32]
 800fd74:	2901      	cmp	r1, #1
 800fd76:	d076      	beq.n	800fe66 <__ssvfscanf_r+0x127e>
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <__ssvfscanf_r+0x119a>
 800fd7e:	4b20      	ldr	r3, [pc, #128]	; (800fe00 <__ssvfscanf_r+0x1218>)
 800fd80:	401e      	ands	r6, r3
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	3b01      	subs	r3, #1
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d877      	bhi.n	800fe7a <__ssvfscanf_r+0x1292>
 800fd8a:	238c      	movs	r3, #140	; 0x8c
 800fd8c:	2248      	movs	r2, #72	; 0x48
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	189b      	adds	r3, r3, r2
 800fd92:	19db      	adds	r3, r3, r7
 800fd94:	429d      	cmp	r5, r3
 800fd96:	d801      	bhi.n	800fd9c <__ssvfscanf_r+0x11b4>
 800fd98:	f7ff f823 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800fd9c:	3d01      	subs	r5, #1
 800fd9e:	7829      	ldrb	r1, [r5, #0]
 800fda0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fda2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fda4:	f001 fe78 	bl	8011a98 <_sungetc_r>
 800fda8:	e7ef      	b.n	800fd8a <__ssvfscanf_r+0x11a2>
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	d10c      	bne.n	800fdc8 <__ssvfscanf_r+0x11e0>
 800fdae:	69f9      	ldr	r1, [r7, #28]
 800fdb0:	2900      	cmp	r1, #0
 800fdb2:	d1e4      	bne.n	800fd7e <__ssvfscanf_r+0x1196>
 800fdb4:	21e0      	movs	r1, #224	; 0xe0
 800fdb6:	0030      	movs	r0, r6
 800fdb8:	00c9      	lsls	r1, r1, #3
 800fdba:	4008      	ands	r0, r1
 800fdbc:	4288      	cmp	r0, r1
 800fdbe:	d1e0      	bne.n	800fd82 <__ssvfscanf_r+0x119a>
 800fdc0:	4910      	ldr	r1, [pc, #64]	; (800fe04 <__ssvfscanf_r+0x121c>)
 800fdc2:	3401      	adds	r4, #1
 800fdc4:	400e      	ands	r6, r1
 800fdc6:	e785      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fdc8:	20fd      	movs	r0, #253	; 0xfd
 800fdca:	1ee1      	subs	r1, r4, #3
 800fdcc:	4201      	tst	r1, r0
 800fdce:	d1d3      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fdd0:	e7c1      	b.n	800fd56 <__ssvfscanf_r+0x116e>
 800fdd2:	0531      	lsls	r1, r6, #20
 800fdd4:	d503      	bpl.n	800fdde <__ssvfscanf_r+0x11f6>
 800fdd6:	6a39      	ldr	r1, [r7, #32]
 800fdd8:	1909      	adds	r1, r1, r4
 800fdda:	2900      	cmp	r1, #0
 800fddc:	d0c4      	beq.n	800fd68 <__ssvfscanf_r+0x1180>
 800fdde:	2c02      	cmp	r4, #2
 800fde0:	d1ca      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fde2:	2403      	movs	r4, #3
 800fde4:	e776      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fde6:	2c06      	cmp	r4, #6
 800fde8:	d1c6      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fdea:	2407      	movs	r4, #7
 800fdec:	e772      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fdee:	2c07      	cmp	r4, #7
 800fdf0:	d1c2      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fdf2:	2408      	movs	r4, #8
 800fdf4:	e76e      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fdf6:	46c0      	nop			; (mov r8, r8)
 800fdf8:	08011641 	.word	0x08011641
 800fdfc:	fffffe7f 	.word	0xfffffe7f
 800fe00:	fffffeff 	.word	0xfffffeff
 800fe04:	fffff87f 	.word	0xfffff87f
 800fe08:	0531      	lsls	r1, r6, #20
 800fe0a:	d5b5      	bpl.n	800fd78 <__ssvfscanf_r+0x1190>
 800fe0c:	21a0      	movs	r1, #160	; 0xa0
 800fe0e:	2080      	movs	r0, #128	; 0x80
 800fe10:	00c9      	lsls	r1, r1, #3
 800fe12:	00c0      	lsls	r0, r0, #3
 800fe14:	4031      	ands	r1, r6
 800fe16:	4281      	cmp	r1, r0
 800fe18:	d004      	beq.n	800fe24 <__ssvfscanf_r+0x123c>
 800fe1a:	4206      	tst	r6, r0
 800fe1c:	d0ac      	beq.n	800fd78 <__ssvfscanf_r+0x1190>
 800fe1e:	69f9      	ldr	r1, [r7, #28]
 800fe20:	2900      	cmp	r1, #0
 800fe22:	d0ae      	beq.n	800fd82 <__ssvfscanf_r+0x119a>
 800fe24:	2180      	movs	r1, #128	; 0x80
 800fe26:	0089      	lsls	r1, r1, #2
 800fe28:	420e      	tst	r6, r1
 800fe2a:	d104      	bne.n	800fe36 <__ssvfscanf_r+0x124e>
 800fe2c:	69f9      	ldr	r1, [r7, #28]
 800fe2e:	6938      	ldr	r0, [r7, #16]
 800fe30:	607d      	str	r5, [r7, #4]
 800fe32:	1a09      	subs	r1, r1, r0
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	20c0      	movs	r0, #192	; 0xc0
 800fe38:	4973      	ldr	r1, [pc, #460]	; (8010008 <__ssvfscanf_r+0x1420>)
 800fe3a:	0040      	lsls	r0, r0, #1
 800fe3c:	400e      	ands	r6, r1
 800fe3e:	4306      	orrs	r6, r0
 800fe40:	e768      	b.n	800fd14 <__ssvfscanf_r+0x112c>
 800fe42:	0531      	lsls	r1, r6, #20
 800fe44:	d5e2      	bpl.n	800fe0c <__ssvfscanf_r+0x1224>
 800fe46:	e74a      	b.n	800fcde <__ssvfscanf_r+0x10f6>
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	7809      	ldrb	r1, [r1, #0]
 800fe4c:	4291      	cmp	r1, r2
 800fe4e:	d193      	bne.n	800fd78 <__ssvfscanf_r+0x1190>
 800fe50:	2180      	movs	r1, #128	; 0x80
 800fe52:	0089      	lsls	r1, r1, #2
 800fe54:	420e      	tst	r6, r1
 800fe56:	d08f      	beq.n	800fd78 <__ssvfscanf_r+0x1190>
 800fe58:	496c      	ldr	r1, [pc, #432]	; (801000c <__ssvfscanf_r+0x1424>)
 800fe5a:	400e      	ands	r6, r1
 800fe5c:	69f9      	ldr	r1, [r7, #28]
 800fe5e:	6139      	str	r1, [r7, #16]
 800fe60:	e738      	b.n	800fcd4 <__ssvfscanf_r+0x10ec>
 800fe62:	2103      	movs	r1, #3
 800fe64:	e76d      	b.n	800fd42 <__ssvfscanf_r+0x115a>
 800fe66:	2102      	movs	r1, #2
 800fe68:	e76b      	b.n	800fd42 <__ssvfscanf_r+0x115a>
 800fe6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe6e:	f001 fe4f 	bl	8011b10 <__ssrefill_r>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d100      	bne.n	800fe78 <__ssvfscanf_r+0x1290>
 800fe76:	e723      	b.n	800fcc0 <__ssvfscanf_r+0x10d8>
 800fe78:	e77e      	b.n	800fd78 <__ssvfscanf_r+0x1190>
 800fe7a:	1e63      	subs	r3, r4, #1
 800fe7c:	2b06      	cmp	r3, #6
 800fe7e:	d825      	bhi.n	800fecc <__ssvfscanf_r+0x12e4>
 800fe80:	2c02      	cmp	r4, #2
 800fe82:	d837      	bhi.n	800fef4 <__ssvfscanf_r+0x130c>
 800fe84:	238c      	movs	r3, #140	; 0x8c
 800fe86:	2248      	movs	r2, #72	; 0x48
 800fe88:	005b      	lsls	r3, r3, #1
 800fe8a:	189b      	adds	r3, r3, r2
 800fe8c:	19db      	adds	r3, r3, r7
 800fe8e:	429d      	cmp	r5, r3
 800fe90:	d801      	bhi.n	800fe96 <__ssvfscanf_r+0x12ae>
 800fe92:	f7fe ffa6 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800fe96:	3d01      	subs	r5, #1
 800fe98:	7829      	ldrb	r1, [r5, #0]
 800fe9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe9e:	f001 fdfb 	bl	8011a98 <_sungetc_r>
 800fea2:	e7ef      	b.n	800fe84 <__ssvfscanf_r+0x129c>
 800fea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fea8:	3b01      	subs	r3, #1
 800feaa:	7819      	ldrb	r1, [r3, #0]
 800feac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800feae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feb0:	f001 fdf2 	bl	8011a98 <_sungetc_r>
 800feb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb6:	6a3a      	ldr	r2, [r7, #32]
 800feb8:	189b      	adds	r3, r3, r2
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b03      	cmp	r3, #3
 800febe:	d8f1      	bhi.n	800fea4 <__ssvfscanf_r+0x12bc>
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	3c03      	subs	r4, #3
 800fec4:	b2e4      	uxtb	r4, r4
 800fec6:	1b1b      	subs	r3, r3, r4
 800fec8:	1b2d      	subs	r5, r5, r4
 800feca:	63bb      	str	r3, [r7, #56]	; 0x38
 800fecc:	05f3      	lsls	r3, r6, #23
 800fece:	d52f      	bpl.n	800ff30 <__ssvfscanf_r+0x1348>
 800fed0:	0573      	lsls	r3, r6, #21
 800fed2:	d514      	bpl.n	800fefe <__ssvfscanf_r+0x1316>
 800fed4:	238c      	movs	r3, #140	; 0x8c
 800fed6:	2248      	movs	r2, #72	; 0x48
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	189b      	adds	r3, r3, r2
 800fedc:	19db      	adds	r3, r3, r7
 800fede:	429d      	cmp	r5, r3
 800fee0:	d801      	bhi.n	800fee6 <__ssvfscanf_r+0x12fe>
 800fee2:	f7fe ff7e 	bl	800ede2 <__ssvfscanf_r+0x1fa>
 800fee6:	3d01      	subs	r5, #1
 800fee8:	7829      	ldrb	r1, [r5, #0]
 800feea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800feee:	f001 fdd3 	bl	8011a98 <_sungetc_r>
 800fef2:	e7ef      	b.n	800fed4 <__ssvfscanf_r+0x12ec>
 800fef4:	1b63      	subs	r3, r4, r5
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fefa:	623b      	str	r3, [r7, #32]
 800fefc:	e7da      	b.n	800feb4 <__ssvfscanf_r+0x12cc>
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	1e6c      	subs	r4, r5, #1
 800ff02:	7821      	ldrb	r1, [r4, #0]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff08:	2965      	cmp	r1, #101	; 0x65
 800ff0a:	d00a      	beq.n	800ff22 <__ssvfscanf_r+0x133a>
 800ff0c:	2945      	cmp	r1, #69	; 0x45
 800ff0e:	d008      	beq.n	800ff22 <__ssvfscanf_r+0x133a>
 800ff10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff14:	f001 fdc0 	bl	8011a98 <_sungetc_r>
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	1eac      	subs	r4, r5, #2
 800ff1c:	3b02      	subs	r3, #2
 800ff1e:	7821      	ldrb	r1, [r4, #0]
 800ff20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff22:	0025      	movs	r5, r4
 800ff24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff28:	f001 fdb6 	bl	8011a98 <_sungetc_r>
 800ff2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff30:	2310      	movs	r3, #16
 800ff32:	0032      	movs	r2, r6
 800ff34:	401a      	ands	r2, r3
 800ff36:	421e      	tst	r6, r3
 800ff38:	d001      	beq.n	800ff3e <__ssvfscanf_r+0x1356>
 800ff3a:	f7fe fe71 	bl	800ec20 <__ssvfscanf_r+0x38>
 800ff3e:	23c0      	movs	r3, #192	; 0xc0
 800ff40:	2180      	movs	r1, #128	; 0x80
 800ff42:	00db      	lsls	r3, r3, #3
 800ff44:	702a      	strb	r2, [r5, #0]
 800ff46:	4033      	ands	r3, r6
 800ff48:	00c9      	lsls	r1, r1, #3
 800ff4a:	428b      	cmp	r3, r1
 800ff4c:	d11f      	bne.n	800ff8e <__ssvfscanf_r+0x13a6>
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	69fa      	ldr	r2, [r7, #28]
 800ff52:	69f9      	ldr	r1, [r7, #28]
 800ff54:	1a9a      	subs	r2, r3, r2
 800ff56:	428b      	cmp	r3, r1
 800ff58:	d125      	bne.n	800ffa6 <__ssvfscanf_r+0x13be>
 800ff5a:	238c      	movs	r3, #140	; 0x8c
 800ff5c:	2148      	movs	r1, #72	; 0x48
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	185b      	adds	r3, r3, r1
 800ff62:	19d9      	adds	r1, r3, r7
 800ff64:	2200      	movs	r2, #0
 800ff66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff68:	f7fb ffca 	bl	800bf00 <_strtod_r>
 800ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6e:	0004      	movs	r4, r0
 800ff70:	3304      	adds	r3, #4
 800ff72:	000d      	movs	r5, r1
 800ff74:	623b      	str	r3, [r7, #32]
 800ff76:	07f3      	lsls	r3, r6, #31
 800ff78:	d523      	bpl.n	800ffc2 <__ssvfscanf_r+0x13da>
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	601c      	str	r4, [r3, #0]
 800ff80:	605d      	str	r5, [r3, #4]
 800ff82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff84:	3301      	adds	r3, #1
 800ff86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	f7fe ffa5 	bl	800eed8 <__ssvfscanf_r+0x2f0>
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d0e2      	beq.n	800ff5a <__ssvfscanf_r+0x1372>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff98:	1c59      	adds	r1, r3, #1
 800ff9a:	230a      	movs	r3, #10
 800ff9c:	f7fc f84c 	bl	800c038 <_strtol_r>
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	687d      	ldr	r5, [r7, #4]
 800ffa4:	1ac2      	subs	r2, r0, r3
 800ffa6:	2148      	movs	r1, #72	; 0x48
 800ffa8:	4b19      	ldr	r3, [pc, #100]	; (8010010 <__ssvfscanf_r+0x1428>)
 800ffaa:	185b      	adds	r3, r3, r1
 800ffac:	19db      	adds	r3, r3, r7
 800ffae:	429d      	cmp	r5, r3
 800ffb0:	d302      	bcc.n	800ffb8 <__ssvfscanf_r+0x13d0>
 800ffb2:	4b18      	ldr	r3, [pc, #96]	; (8010014 <__ssvfscanf_r+0x142c>)
 800ffb4:	185b      	adds	r3, r3, r1
 800ffb6:	19dd      	adds	r5, r3, r7
 800ffb8:	0028      	movs	r0, r5
 800ffba:	4917      	ldr	r1, [pc, #92]	; (8010018 <__ssvfscanf_r+0x1430>)
 800ffbc:	f7fc f944 	bl	800c248 <sprintf>
 800ffc0:	e7cb      	b.n	800ff5a <__ssvfscanf_r+0x1372>
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffc8:	07b6      	lsls	r6, r6, #30
 800ffca:	d4d8      	bmi.n	800ff7e <__ssvfscanf_r+0x1396>
 800ffcc:	0002      	movs	r2, r0
 800ffce:	000b      	movs	r3, r1
 800ffd0:	f7f2 f990 	bl	80022f4 <__aeabi_dcmpun>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d005      	beq.n	800ffe4 <__ssvfscanf_r+0x13fc>
 800ffd8:	4810      	ldr	r0, [pc, #64]	; (801001c <__ssvfscanf_r+0x1434>)
 800ffda:	f7fc fabf 	bl	800c55c <nanf>
 800ffde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffe0:	6018      	str	r0, [r3, #0]
 800ffe2:	e7ce      	b.n	800ff82 <__ssvfscanf_r+0x139a>
 800ffe4:	0020      	movs	r0, r4
 800ffe6:	0029      	movs	r1, r5
 800ffe8:	f7f2 fa2e 	bl	8002448 <__aeabi_d2f>
 800ffec:	e7f7      	b.n	800ffde <__ssvfscanf_r+0x13f6>
 800ffee:	00a3      	lsls	r3, r4, #2
 800fff0:	18ed      	adds	r5, r5, r3
 800fff2:	682b      	ldr	r3, [r5, #0]
 800fff4:	3401      	adds	r4, #1
 800fff6:	6818      	ldr	r0, [r3, #0]
 800fff8:	f7fa ff32 	bl	800ae60 <free>
 800fffc:	2200      	movs	r2, #0
 800fffe:	682b      	ldr	r3, [r5, #0]
 8010000:	601a      	str	r2, [r3, #0]
 8010002:	f7fe ffc3 	bl	800ef8c <__ssvfscanf_r+0x3a4>
 8010006:	46c0      	nop			; (mov r8, r8)
 8010008:	fffff07f 	.word	0xfffff07f
 801000c:	fffffd7f 	.word	0xfffffd7f
 8010010:	0000026b 	.word	0x0000026b
 8010014:	0000026a 	.word	0x0000026a
 8010018:	08014c20 	.word	0x08014c20
 801001c:	08014c83 	.word	0x08014c83

08010020 <_fclose_r>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	0005      	movs	r5, r0
 8010024:	1e0c      	subs	r4, r1, #0
 8010026:	d102      	bne.n	801002e <_fclose_r+0xe>
 8010028:	2600      	movs	r6, #0
 801002a:	0030      	movs	r0, r6
 801002c:	bd70      	pop	{r4, r5, r6, pc}
 801002e:	2800      	cmp	r0, #0
 8010030:	d004      	beq.n	801003c <_fclose_r+0x1c>
 8010032:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010034:	2b00      	cmp	r3, #0
 8010036:	d101      	bne.n	801003c <_fclose_r+0x1c>
 8010038:	f7fc f89e 	bl	800c178 <__sinit>
 801003c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801003e:	07db      	lsls	r3, r3, #31
 8010040:	d405      	bmi.n	801004e <_fclose_r+0x2e>
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	059b      	lsls	r3, r3, #22
 8010046:	d402      	bmi.n	801004e <_fclose_r+0x2e>
 8010048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801004a:	f7fc fa6b 	bl	800c524 <__retarget_lock_acquire_recursive>
 801004e:	220c      	movs	r2, #12
 8010050:	5ea3      	ldrsh	r3, [r4, r2]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d109      	bne.n	801006a <_fclose_r+0x4a>
 8010056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010058:	3301      	adds	r3, #1
 801005a:	0016      	movs	r6, r2
 801005c:	401e      	ands	r6, r3
 801005e:	421a      	tst	r2, r3
 8010060:	d1e2      	bne.n	8010028 <_fclose_r+0x8>
 8010062:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010064:	f7fc fa5f 	bl	800c526 <__retarget_lock_release_recursive>
 8010068:	e7df      	b.n	801002a <_fclose_r+0xa>
 801006a:	0021      	movs	r1, r4
 801006c:	0028      	movs	r0, r5
 801006e:	f000 f837 	bl	80100e0 <__sflush_r>
 8010072:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010074:	0006      	movs	r6, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d006      	beq.n	8010088 <_fclose_r+0x68>
 801007a:	0028      	movs	r0, r5
 801007c:	69e1      	ldr	r1, [r4, #28]
 801007e:	4798      	blx	r3
 8010080:	2800      	cmp	r0, #0
 8010082:	da01      	bge.n	8010088 <_fclose_r+0x68>
 8010084:	2601      	movs	r6, #1
 8010086:	4276      	negs	r6, r6
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	061b      	lsls	r3, r3, #24
 801008c:	d503      	bpl.n	8010096 <_fclose_r+0x76>
 801008e:	0028      	movs	r0, r5
 8010090:	6921      	ldr	r1, [r4, #16]
 8010092:	f7fc facf 	bl	800c634 <_free_r>
 8010096:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010098:	2900      	cmp	r1, #0
 801009a:	d008      	beq.n	80100ae <_fclose_r+0x8e>
 801009c:	0023      	movs	r3, r4
 801009e:	3340      	adds	r3, #64	; 0x40
 80100a0:	4299      	cmp	r1, r3
 80100a2:	d002      	beq.n	80100aa <_fclose_r+0x8a>
 80100a4:	0028      	movs	r0, r5
 80100a6:	f7fc fac5 	bl	800c634 <_free_r>
 80100aa:	2300      	movs	r3, #0
 80100ac:	6323      	str	r3, [r4, #48]	; 0x30
 80100ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100b0:	2900      	cmp	r1, #0
 80100b2:	d004      	beq.n	80100be <_fclose_r+0x9e>
 80100b4:	0028      	movs	r0, r5
 80100b6:	f7fc fabd 	bl	800c634 <_free_r>
 80100ba:	2300      	movs	r3, #0
 80100bc:	6463      	str	r3, [r4, #68]	; 0x44
 80100be:	f7fc f84b 	bl	800c158 <__sfp_lock_acquire>
 80100c2:	2300      	movs	r3, #0
 80100c4:	81a3      	strh	r3, [r4, #12]
 80100c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100c8:	07db      	lsls	r3, r3, #31
 80100ca:	d402      	bmi.n	80100d2 <_fclose_r+0xb2>
 80100cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ce:	f7fc fa2a 	bl	800c526 <__retarget_lock_release_recursive>
 80100d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100d4:	f7fc fa25 	bl	800c522 <__retarget_lock_close_recursive>
 80100d8:	f7fc f846 	bl	800c168 <__sfp_lock_release>
 80100dc:	e7a5      	b.n	801002a <_fclose_r+0xa>
	...

080100e0 <__sflush_r>:
 80100e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100e2:	230c      	movs	r3, #12
 80100e4:	5eca      	ldrsh	r2, [r1, r3]
 80100e6:	000c      	movs	r4, r1
 80100e8:	0005      	movs	r5, r0
 80100ea:	b291      	uxth	r1, r2
 80100ec:	0713      	lsls	r3, r2, #28
 80100ee:	d464      	bmi.n	80101ba <__sflush_r+0xda>
 80100f0:	2380      	movs	r3, #128	; 0x80
 80100f2:	011b      	lsls	r3, r3, #4
 80100f4:	4313      	orrs	r3, r2
 80100f6:	6862      	ldr	r2, [r4, #4]
 80100f8:	81a3      	strh	r3, [r4, #12]
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	dc04      	bgt.n	8010108 <__sflush_r+0x28>
 80100fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010100:	2a00      	cmp	r2, #0
 8010102:	dc01      	bgt.n	8010108 <__sflush_r+0x28>
 8010104:	2000      	movs	r0, #0
 8010106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010108:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801010a:	2f00      	cmp	r7, #0
 801010c:	d0fa      	beq.n	8010104 <__sflush_r+0x24>
 801010e:	2200      	movs	r2, #0
 8010110:	2080      	movs	r0, #128	; 0x80
 8010112:	682e      	ldr	r6, [r5, #0]
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	001a      	movs	r2, r3
 8010118:	0140      	lsls	r0, r0, #5
 801011a:	69e1      	ldr	r1, [r4, #28]
 801011c:	4002      	ands	r2, r0
 801011e:	4203      	tst	r3, r0
 8010120:	d038      	beq.n	8010194 <__sflush_r+0xb4>
 8010122:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	075b      	lsls	r3, r3, #29
 8010128:	d506      	bpl.n	8010138 <__sflush_r+0x58>
 801012a:	6863      	ldr	r3, [r4, #4]
 801012c:	1ac0      	subs	r0, r0, r3
 801012e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <__sflush_r+0x58>
 8010134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010136:	1ac0      	subs	r0, r0, r3
 8010138:	0002      	movs	r2, r0
 801013a:	2300      	movs	r3, #0
 801013c:	0028      	movs	r0, r5
 801013e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010140:	69e1      	ldr	r1, [r4, #28]
 8010142:	47b8      	blx	r7
 8010144:	89a2      	ldrh	r2, [r4, #12]
 8010146:	1c43      	adds	r3, r0, #1
 8010148:	d106      	bne.n	8010158 <__sflush_r+0x78>
 801014a:	6829      	ldr	r1, [r5, #0]
 801014c:	291d      	cmp	r1, #29
 801014e:	d830      	bhi.n	80101b2 <__sflush_r+0xd2>
 8010150:	4b2c      	ldr	r3, [pc, #176]	; (8010204 <__sflush_r+0x124>)
 8010152:	410b      	asrs	r3, r1
 8010154:	07db      	lsls	r3, r3, #31
 8010156:	d42c      	bmi.n	80101b2 <__sflush_r+0xd2>
 8010158:	4b2b      	ldr	r3, [pc, #172]	; (8010208 <__sflush_r+0x128>)
 801015a:	4013      	ands	r3, r2
 801015c:	2200      	movs	r2, #0
 801015e:	6062      	str	r2, [r4, #4]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	b21b      	sxth	r3, r3
 8010164:	81a3      	strh	r3, [r4, #12]
 8010166:	6022      	str	r2, [r4, #0]
 8010168:	04db      	lsls	r3, r3, #19
 801016a:	d505      	bpl.n	8010178 <__sflush_r+0x98>
 801016c:	1c43      	adds	r3, r0, #1
 801016e:	d102      	bne.n	8010176 <__sflush_r+0x96>
 8010170:	682b      	ldr	r3, [r5, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d100      	bne.n	8010178 <__sflush_r+0x98>
 8010176:	6520      	str	r0, [r4, #80]	; 0x50
 8010178:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801017a:	602e      	str	r6, [r5, #0]
 801017c:	2900      	cmp	r1, #0
 801017e:	d0c1      	beq.n	8010104 <__sflush_r+0x24>
 8010180:	0023      	movs	r3, r4
 8010182:	3340      	adds	r3, #64	; 0x40
 8010184:	4299      	cmp	r1, r3
 8010186:	d002      	beq.n	801018e <__sflush_r+0xae>
 8010188:	0028      	movs	r0, r5
 801018a:	f7fc fa53 	bl	800c634 <_free_r>
 801018e:	2000      	movs	r0, #0
 8010190:	6320      	str	r0, [r4, #48]	; 0x30
 8010192:	e7b8      	b.n	8010106 <__sflush_r+0x26>
 8010194:	2301      	movs	r3, #1
 8010196:	0028      	movs	r0, r5
 8010198:	47b8      	blx	r7
 801019a:	1c43      	adds	r3, r0, #1
 801019c:	d1c2      	bne.n	8010124 <__sflush_r+0x44>
 801019e:	682b      	ldr	r3, [r5, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d0bf      	beq.n	8010124 <__sflush_r+0x44>
 80101a4:	2b1d      	cmp	r3, #29
 80101a6:	d001      	beq.n	80101ac <__sflush_r+0xcc>
 80101a8:	2b16      	cmp	r3, #22
 80101aa:	d101      	bne.n	80101b0 <__sflush_r+0xd0>
 80101ac:	602e      	str	r6, [r5, #0]
 80101ae:	e7a9      	b.n	8010104 <__sflush_r+0x24>
 80101b0:	89a2      	ldrh	r2, [r4, #12]
 80101b2:	2340      	movs	r3, #64	; 0x40
 80101b4:	4313      	orrs	r3, r2
 80101b6:	81a3      	strh	r3, [r4, #12]
 80101b8:	e7a5      	b.n	8010106 <__sflush_r+0x26>
 80101ba:	6926      	ldr	r6, [r4, #16]
 80101bc:	2e00      	cmp	r6, #0
 80101be:	d0a1      	beq.n	8010104 <__sflush_r+0x24>
 80101c0:	6827      	ldr	r7, [r4, #0]
 80101c2:	6026      	str	r6, [r4, #0]
 80101c4:	1bbb      	subs	r3, r7, r6
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	2300      	movs	r3, #0
 80101ca:	0789      	lsls	r1, r1, #30
 80101cc:	d100      	bne.n	80101d0 <__sflush_r+0xf0>
 80101ce:	6963      	ldr	r3, [r4, #20]
 80101d0:	60a3      	str	r3, [r4, #8]
 80101d2:	9b01      	ldr	r3, [sp, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dc00      	bgt.n	80101da <__sflush_r+0xfa>
 80101d8:	e794      	b.n	8010104 <__sflush_r+0x24>
 80101da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101dc:	0032      	movs	r2, r6
 80101de:	001f      	movs	r7, r3
 80101e0:	0028      	movs	r0, r5
 80101e2:	9b01      	ldr	r3, [sp, #4]
 80101e4:	69e1      	ldr	r1, [r4, #28]
 80101e6:	47b8      	blx	r7
 80101e8:	2800      	cmp	r0, #0
 80101ea:	dc06      	bgt.n	80101fa <__sflush_r+0x11a>
 80101ec:	2340      	movs	r3, #64	; 0x40
 80101ee:	2001      	movs	r0, #1
 80101f0:	89a2      	ldrh	r2, [r4, #12]
 80101f2:	4240      	negs	r0, r0
 80101f4:	4313      	orrs	r3, r2
 80101f6:	81a3      	strh	r3, [r4, #12]
 80101f8:	e785      	b.n	8010106 <__sflush_r+0x26>
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	1836      	adds	r6, r6, r0
 80101fe:	1a1b      	subs	r3, r3, r0
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	e7e6      	b.n	80101d2 <__sflush_r+0xf2>
 8010204:	dfbffffe 	.word	0xdfbffffe
 8010208:	fffff7ff 	.word	0xfffff7ff

0801020c <_fflush_r>:
 801020c:	b570      	push	{r4, r5, r6, lr}
 801020e:	0005      	movs	r5, r0
 8010210:	000c      	movs	r4, r1
 8010212:	2800      	cmp	r0, #0
 8010214:	d004      	beq.n	8010220 <_fflush_r+0x14>
 8010216:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010218:	2b00      	cmp	r3, #0
 801021a:	d101      	bne.n	8010220 <_fflush_r+0x14>
 801021c:	f7fb ffac 	bl	800c178 <__sinit>
 8010220:	220c      	movs	r2, #12
 8010222:	5ea3      	ldrsh	r3, [r4, r2]
 8010224:	1e1e      	subs	r6, r3, #0
 8010226:	d015      	beq.n	8010254 <_fflush_r+0x48>
 8010228:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801022a:	07d2      	lsls	r2, r2, #31
 801022c:	d404      	bmi.n	8010238 <_fflush_r+0x2c>
 801022e:	059b      	lsls	r3, r3, #22
 8010230:	d402      	bmi.n	8010238 <_fflush_r+0x2c>
 8010232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010234:	f7fc f976 	bl	800c524 <__retarget_lock_acquire_recursive>
 8010238:	0021      	movs	r1, r4
 801023a:	0028      	movs	r0, r5
 801023c:	f7ff ff50 	bl	80100e0 <__sflush_r>
 8010240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010242:	0006      	movs	r6, r0
 8010244:	07db      	lsls	r3, r3, #31
 8010246:	d405      	bmi.n	8010254 <_fflush_r+0x48>
 8010248:	89a3      	ldrh	r3, [r4, #12]
 801024a:	059b      	lsls	r3, r3, #22
 801024c:	d402      	bmi.n	8010254 <_fflush_r+0x48>
 801024e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010250:	f7fc f969 	bl	800c526 <__retarget_lock_release_recursive>
 8010254:	0030      	movs	r0, r6
 8010256:	bd70      	pop	{r4, r5, r6, pc}

08010258 <__sccl>:
 8010258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025a:	780b      	ldrb	r3, [r1, #0]
 801025c:	0004      	movs	r4, r0
 801025e:	2b5e      	cmp	r3, #94	; 0x5e
 8010260:	d019      	beq.n	8010296 <__sccl+0x3e>
 8010262:	2200      	movs	r2, #0
 8010264:	1c4d      	adds	r5, r1, #1
 8010266:	0021      	movs	r1, r4
 8010268:	1c60      	adds	r0, r4, #1
 801026a:	30ff      	adds	r0, #255	; 0xff
 801026c:	700a      	strb	r2, [r1, #0]
 801026e:	3101      	adds	r1, #1
 8010270:	4281      	cmp	r1, r0
 8010272:	d1fb      	bne.n	801026c <__sccl+0x14>
 8010274:	1e68      	subs	r0, r5, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00c      	beq.n	8010294 <__sccl+0x3c>
 801027a:	2101      	movs	r1, #1
 801027c:	262d      	movs	r6, #45	; 0x2d
 801027e:	404a      	eors	r2, r1
 8010280:	0028      	movs	r0, r5
 8010282:	54e2      	strb	r2, [r4, r3]
 8010284:	7801      	ldrb	r1, [r0, #0]
 8010286:	1c45      	adds	r5, r0, #1
 8010288:	292d      	cmp	r1, #45	; 0x2d
 801028a:	d00c      	beq.n	80102a6 <__sccl+0x4e>
 801028c:	295d      	cmp	r1, #93	; 0x5d
 801028e:	d01d      	beq.n	80102cc <__sccl+0x74>
 8010290:	2900      	cmp	r1, #0
 8010292:	d104      	bne.n	801029e <__sccl+0x46>
 8010294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010296:	2201      	movs	r2, #1
 8010298:	784b      	ldrb	r3, [r1, #1]
 801029a:	1c8d      	adds	r5, r1, #2
 801029c:	e7e3      	b.n	8010266 <__sccl+0xe>
 801029e:	000b      	movs	r3, r1
 80102a0:	e7ee      	b.n	8010280 <__sccl+0x28>
 80102a2:	0033      	movs	r3, r6
 80102a4:	e7ec      	b.n	8010280 <__sccl+0x28>
 80102a6:	7841      	ldrb	r1, [r0, #1]
 80102a8:	295d      	cmp	r1, #93	; 0x5d
 80102aa:	d0fa      	beq.n	80102a2 <__sccl+0x4a>
 80102ac:	428b      	cmp	r3, r1
 80102ae:	dcf8      	bgt.n	80102a2 <__sccl+0x4a>
 80102b0:	001d      	movs	r5, r3
 80102b2:	3002      	adds	r0, #2
 80102b4:	3501      	adds	r5, #1
 80102b6:	5562      	strb	r2, [r4, r5]
 80102b8:	42a9      	cmp	r1, r5
 80102ba:	dcfb      	bgt.n	80102b4 <__sccl+0x5c>
 80102bc:	2500      	movs	r5, #0
 80102be:	1c5f      	adds	r7, r3, #1
 80102c0:	428b      	cmp	r3, r1
 80102c2:	da01      	bge.n	80102c8 <__sccl+0x70>
 80102c4:	1acd      	subs	r5, r1, r3
 80102c6:	3d01      	subs	r5, #1
 80102c8:	197b      	adds	r3, r7, r5
 80102ca:	e7db      	b.n	8010284 <__sccl+0x2c>
 80102cc:	0028      	movs	r0, r5
 80102ce:	e7e1      	b.n	8010294 <__sccl+0x3c>

080102d0 <_localeconv_r>:
 80102d0:	4800      	ldr	r0, [pc, #0]	; (80102d4 <_localeconv_r+0x4>)
 80102d2:	4770      	bx	lr
 80102d4:	20000538 	.word	0x20000538

080102d8 <__libc_fini_array>:
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	4c07      	ldr	r4, [pc, #28]	; (80102f8 <__libc_fini_array+0x20>)
 80102dc:	4d07      	ldr	r5, [pc, #28]	; (80102fc <__libc_fini_array+0x24>)
 80102de:	1b64      	subs	r4, r4, r5
 80102e0:	10a4      	asrs	r4, r4, #2
 80102e2:	2c00      	cmp	r4, #0
 80102e4:	d102      	bne.n	80102ec <__libc_fini_array+0x14>
 80102e6:	f002 fdcd 	bl	8012e84 <_fini>
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	3c01      	subs	r4, #1
 80102ee:	00a3      	lsls	r3, r4, #2
 80102f0:	58eb      	ldr	r3, [r5, r3]
 80102f2:	4798      	blx	r3
 80102f4:	e7f5      	b.n	80102e2 <__libc_fini_array+0xa>
 80102f6:	46c0      	nop			; (mov r8, r8)
 80102f8:	08014d20 	.word	0x08014d20
 80102fc:	08014d1c 	.word	0x08014d1c

08010300 <memchr>:
 8010300:	b2c9      	uxtb	r1, r1
 8010302:	1882      	adds	r2, r0, r2
 8010304:	4290      	cmp	r0, r2
 8010306:	d101      	bne.n	801030c <memchr+0xc>
 8010308:	2000      	movs	r0, #0
 801030a:	4770      	bx	lr
 801030c:	7803      	ldrb	r3, [r0, #0]
 801030e:	428b      	cmp	r3, r1
 8010310:	d0fb      	beq.n	801030a <memchr+0xa>
 8010312:	3001      	adds	r0, #1
 8010314:	e7f6      	b.n	8010304 <memchr+0x4>
	...

08010318 <frexp>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	0014      	movs	r4, r2
 801031c:	2500      	movs	r5, #0
 801031e:	6025      	str	r5, [r4, #0]
 8010320:	4d10      	ldr	r5, [pc, #64]	; (8010364 <frexp+0x4c>)
 8010322:	004b      	lsls	r3, r1, #1
 8010324:	000a      	movs	r2, r1
 8010326:	085b      	lsrs	r3, r3, #1
 8010328:	42ab      	cmp	r3, r5
 801032a:	dc1a      	bgt.n	8010362 <frexp+0x4a>
 801032c:	001d      	movs	r5, r3
 801032e:	4305      	orrs	r5, r0
 8010330:	d017      	beq.n	8010362 <frexp+0x4a>
 8010332:	4d0d      	ldr	r5, [pc, #52]	; (8010368 <frexp+0x50>)
 8010334:	4229      	tst	r1, r5
 8010336:	d109      	bne.n	801034c <frexp+0x34>
 8010338:	2200      	movs	r2, #0
 801033a:	4b0c      	ldr	r3, [pc, #48]	; (801036c <frexp+0x54>)
 801033c:	f7f1 f996 	bl	800166c <__aeabi_dmul>
 8010340:	2536      	movs	r5, #54	; 0x36
 8010342:	000a      	movs	r2, r1
 8010344:	004b      	lsls	r3, r1, #1
 8010346:	426d      	negs	r5, r5
 8010348:	085b      	lsrs	r3, r3, #1
 801034a:	6025      	str	r5, [r4, #0]
 801034c:	4d08      	ldr	r5, [pc, #32]	; (8010370 <frexp+0x58>)
 801034e:	151b      	asrs	r3, r3, #20
 8010350:	195b      	adds	r3, r3, r5
 8010352:	6825      	ldr	r5, [r4, #0]
 8010354:	18eb      	adds	r3, r5, r3
 8010356:	6023      	str	r3, [r4, #0]
 8010358:	4b06      	ldr	r3, [pc, #24]	; (8010374 <frexp+0x5c>)
 801035a:	401a      	ands	r2, r3
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <frexp+0x60>)
 801035e:	4313      	orrs	r3, r2
 8010360:	0019      	movs	r1, r3
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	7fefffff 	.word	0x7fefffff
 8010368:	7ff00000 	.word	0x7ff00000
 801036c:	43500000 	.word	0x43500000
 8010370:	fffffc02 	.word	0xfffffc02
 8010374:	800fffff 	.word	0x800fffff
 8010378:	3fe00000 	.word	0x3fe00000

0801037c <__register_exitproc>:
 801037c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801037e:	4f1c      	ldr	r7, [pc, #112]	; (80103f0 <__register_exitproc+0x74>)
 8010380:	0004      	movs	r4, r0
 8010382:	6838      	ldr	r0, [r7, #0]
 8010384:	0016      	movs	r6, r2
 8010386:	9301      	str	r3, [sp, #4]
 8010388:	9100      	str	r1, [sp, #0]
 801038a:	f7fc f8cb 	bl	800c524 <__retarget_lock_acquire_recursive>
 801038e:	4a19      	ldr	r2, [pc, #100]	; (80103f4 <__register_exitproc+0x78>)
 8010390:	6813      	ldr	r3, [r2, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <__register_exitproc+0x1e>
 8010396:	4b18      	ldr	r3, [pc, #96]	; (80103f8 <__register_exitproc+0x7c>)
 8010398:	6013      	str	r3, [r2, #0]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	2a1f      	cmp	r2, #31
 80103a0:	dd04      	ble.n	80103ac <__register_exitproc+0x30>
 80103a2:	f7fc f8c0 	bl	800c526 <__retarget_lock_release_recursive>
 80103a6:	2001      	movs	r0, #1
 80103a8:	4240      	negs	r0, r0
 80103aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	d014      	beq.n	80103da <__register_exitproc+0x5e>
 80103b0:	0091      	lsls	r1, r2, #2
 80103b2:	1859      	adds	r1, r3, r1
 80103b4:	000f      	movs	r7, r1
 80103b6:	3788      	adds	r7, #136	; 0x88
 80103b8:	603e      	str	r6, [r7, #0]
 80103ba:	2701      	movs	r7, #1
 80103bc:	001e      	movs	r6, r3
 80103be:	4097      	lsls	r7, r2
 80103c0:	3685      	adds	r6, #133	; 0x85
 80103c2:	36ff      	adds	r6, #255	; 0xff
 80103c4:	6875      	ldr	r5, [r6, #4]
 80103c6:	31fc      	adds	r1, #252	; 0xfc
 80103c8:	433d      	orrs	r5, r7
 80103ca:	6075      	str	r5, [r6, #4]
 80103cc:	9d01      	ldr	r5, [sp, #4]
 80103ce:	60cd      	str	r5, [r1, #12]
 80103d0:	2c02      	cmp	r4, #2
 80103d2:	d102      	bne.n	80103da <__register_exitproc+0x5e>
 80103d4:	68b1      	ldr	r1, [r6, #8]
 80103d6:	4339      	orrs	r1, r7
 80103d8:	60b1      	str	r1, [r6, #8]
 80103da:	1c51      	adds	r1, r2, #1
 80103dc:	6059      	str	r1, [r3, #4]
 80103de:	3202      	adds	r2, #2
 80103e0:	9900      	ldr	r1, [sp, #0]
 80103e2:	0092      	lsls	r2, r2, #2
 80103e4:	50d1      	str	r1, [r2, r3]
 80103e6:	f7fc f89e 	bl	800c526 <__retarget_lock_release_recursive>
 80103ea:	2000      	movs	r0, #0
 80103ec:	e7dd      	b.n	80103aa <__register_exitproc+0x2e>
 80103ee:	46c0      	nop			; (mov r8, r8)
 80103f0:	200006dc 	.word	0x200006dc
 80103f4:	20000d3c 	.word	0x20000d3c
 80103f8:	20000d40 	.word	0x20000d40

080103fc <__assert_func>:
 80103fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80103fe:	0014      	movs	r4, r2
 8010400:	001a      	movs	r2, r3
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <__assert_func+0x2c>)
 8010404:	0005      	movs	r5, r0
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	000e      	movs	r6, r1
 801040a:	68d8      	ldr	r0, [r3, #12]
 801040c:	4b07      	ldr	r3, [pc, #28]	; (801042c <__assert_func+0x30>)
 801040e:	2c00      	cmp	r4, #0
 8010410:	d101      	bne.n	8010416 <__assert_func+0x1a>
 8010412:	4b07      	ldr	r3, [pc, #28]	; (8010430 <__assert_func+0x34>)
 8010414:	001c      	movs	r4, r3
 8010416:	4907      	ldr	r1, [pc, #28]	; (8010434 <__assert_func+0x38>)
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	9402      	str	r4, [sp, #8]
 801041c:	002b      	movs	r3, r5
 801041e:	9600      	str	r6, [sp, #0]
 8010420:	f001 faa6 	bl	8011970 <fiprintf>
 8010424:	f002 fb8e 	bl	8012b44 <abort>
 8010428:	200006d8 	.word	0x200006d8
 801042c:	08014c48 	.word	0x08014c48
 8010430:	08014c83 	.word	0x08014c83
 8010434:	08014c55 	.word	0x08014c55

08010438 <_calloc_r>:
 8010438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043a:	2400      	movs	r4, #0
 801043c:	0c0b      	lsrs	r3, r1, #16
 801043e:	0c16      	lsrs	r6, r2, #16
 8010440:	42a3      	cmp	r3, r4
 8010442:	d133      	bne.n	80104ac <_calloc_r+0x74>
 8010444:	42a6      	cmp	r6, r4
 8010446:	d121      	bne.n	801048c <_calloc_r+0x54>
 8010448:	b28b      	uxth	r3, r1
 801044a:	b291      	uxth	r1, r2
 801044c:	4359      	muls	r1, r3
 801044e:	f7fa fd11 	bl	800ae74 <_malloc_r>
 8010452:	1e05      	subs	r5, r0, #0
 8010454:	d033      	beq.n	80104be <_calloc_r+0x86>
 8010456:	0003      	movs	r3, r0
 8010458:	3b08      	subs	r3, #8
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	2303      	movs	r3, #3
 801045e:	439a      	bics	r2, r3
 8010460:	3a04      	subs	r2, #4
 8010462:	2a24      	cmp	r2, #36	; 0x24
 8010464:	d832      	bhi.n	80104cc <_calloc_r+0x94>
 8010466:	0003      	movs	r3, r0
 8010468:	2a13      	cmp	r2, #19
 801046a:	d90a      	bls.n	8010482 <_calloc_r+0x4a>
 801046c:	6004      	str	r4, [r0, #0]
 801046e:	6044      	str	r4, [r0, #4]
 8010470:	3308      	adds	r3, #8
 8010472:	2a1b      	cmp	r2, #27
 8010474:	d905      	bls.n	8010482 <_calloc_r+0x4a>
 8010476:	6084      	str	r4, [r0, #8]
 8010478:	60c4      	str	r4, [r0, #12]
 801047a:	2a24      	cmp	r2, #36	; 0x24
 801047c:	d021      	beq.n	80104c2 <_calloc_r+0x8a>
 801047e:	0003      	movs	r3, r0
 8010480:	3310      	adds	r3, #16
 8010482:	2200      	movs	r2, #0
 8010484:	601a      	str	r2, [r3, #0]
 8010486:	605a      	str	r2, [r3, #4]
 8010488:	609a      	str	r2, [r3, #8]
 801048a:	e018      	b.n	80104be <_calloc_r+0x86>
 801048c:	1c33      	adds	r3, r6, #0
 801048e:	1c0d      	adds	r5, r1, #0
 8010490:	b289      	uxth	r1, r1
 8010492:	b292      	uxth	r2, r2
 8010494:	434a      	muls	r2, r1
 8010496:	b2ad      	uxth	r5, r5
 8010498:	b299      	uxth	r1, r3
 801049a:	4369      	muls	r1, r5
 801049c:	0c13      	lsrs	r3, r2, #16
 801049e:	18c9      	adds	r1, r1, r3
 80104a0:	0c0b      	lsrs	r3, r1, #16
 80104a2:	d107      	bne.n	80104b4 <_calloc_r+0x7c>
 80104a4:	0409      	lsls	r1, r1, #16
 80104a6:	b292      	uxth	r2, r2
 80104a8:	4311      	orrs	r1, r2
 80104aa:	e7d0      	b.n	801044e <_calloc_r+0x16>
 80104ac:	2e00      	cmp	r6, #0
 80104ae:	d101      	bne.n	80104b4 <_calloc_r+0x7c>
 80104b0:	1c15      	adds	r5, r2, #0
 80104b2:	e7ed      	b.n	8010490 <_calloc_r+0x58>
 80104b4:	f7fc f80a 	bl	800c4cc <__errno>
 80104b8:	230c      	movs	r3, #12
 80104ba:	2500      	movs	r5, #0
 80104bc:	6003      	str	r3, [r0, #0]
 80104be:	0028      	movs	r0, r5
 80104c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c2:	0003      	movs	r3, r0
 80104c4:	6104      	str	r4, [r0, #16]
 80104c6:	3318      	adds	r3, #24
 80104c8:	6144      	str	r4, [r0, #20]
 80104ca:	e7da      	b.n	8010482 <_calloc_r+0x4a>
 80104cc:	2100      	movs	r1, #0
 80104ce:	f7fb ff51 	bl	800c374 <memset>
 80104d2:	e7f4      	b.n	80104be <_calloc_r+0x86>

080104d4 <quorem>:
 80104d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d6:	6902      	ldr	r2, [r0, #16]
 80104d8:	690b      	ldr	r3, [r1, #16]
 80104da:	b089      	sub	sp, #36	; 0x24
 80104dc:	0007      	movs	r7, r0
 80104de:	9104      	str	r1, [sp, #16]
 80104e0:	2000      	movs	r0, #0
 80104e2:	429a      	cmp	r2, r3
 80104e4:	db69      	blt.n	80105ba <quorem+0xe6>
 80104e6:	3b01      	subs	r3, #1
 80104e8:	009c      	lsls	r4, r3, #2
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	000b      	movs	r3, r1
 80104ee:	3314      	adds	r3, #20
 80104f0:	9306      	str	r3, [sp, #24]
 80104f2:	191b      	adds	r3, r3, r4
 80104f4:	9305      	str	r3, [sp, #20]
 80104f6:	003b      	movs	r3, r7
 80104f8:	3314      	adds	r3, #20
 80104fa:	9303      	str	r3, [sp, #12]
 80104fc:	191c      	adds	r4, r3, r4
 80104fe:	9b05      	ldr	r3, [sp, #20]
 8010500:	6826      	ldr	r6, [r4, #0]
 8010502:	681d      	ldr	r5, [r3, #0]
 8010504:	0030      	movs	r0, r6
 8010506:	3501      	adds	r5, #1
 8010508:	0029      	movs	r1, r5
 801050a:	f7ef fe17 	bl	800013c <__udivsi3>
 801050e:	9002      	str	r0, [sp, #8]
 8010510:	42ae      	cmp	r6, r5
 8010512:	d329      	bcc.n	8010568 <quorem+0x94>
 8010514:	9b06      	ldr	r3, [sp, #24]
 8010516:	2600      	movs	r6, #0
 8010518:	469c      	mov	ip, r3
 801051a:	9d03      	ldr	r5, [sp, #12]
 801051c:	9606      	str	r6, [sp, #24]
 801051e:	4662      	mov	r2, ip
 8010520:	ca08      	ldmia	r2!, {r3}
 8010522:	6828      	ldr	r0, [r5, #0]
 8010524:	4694      	mov	ip, r2
 8010526:	9a02      	ldr	r2, [sp, #8]
 8010528:	b299      	uxth	r1, r3
 801052a:	4351      	muls	r1, r2
 801052c:	0c1b      	lsrs	r3, r3, #16
 801052e:	4353      	muls	r3, r2
 8010530:	1989      	adds	r1, r1, r6
 8010532:	0c0a      	lsrs	r2, r1, #16
 8010534:	189b      	adds	r3, r3, r2
 8010536:	9307      	str	r3, [sp, #28]
 8010538:	0c1e      	lsrs	r6, r3, #16
 801053a:	9b06      	ldr	r3, [sp, #24]
 801053c:	b282      	uxth	r2, r0
 801053e:	18d2      	adds	r2, r2, r3
 8010540:	466b      	mov	r3, sp
 8010542:	b289      	uxth	r1, r1
 8010544:	8b9b      	ldrh	r3, [r3, #28]
 8010546:	1a52      	subs	r2, r2, r1
 8010548:	0c01      	lsrs	r1, r0, #16
 801054a:	1ac9      	subs	r1, r1, r3
 801054c:	1413      	asrs	r3, r2, #16
 801054e:	18cb      	adds	r3, r1, r3
 8010550:	1419      	asrs	r1, r3, #16
 8010552:	b292      	uxth	r2, r2
 8010554:	041b      	lsls	r3, r3, #16
 8010556:	4313      	orrs	r3, r2
 8010558:	c508      	stmia	r5!, {r3}
 801055a:	9b05      	ldr	r3, [sp, #20]
 801055c:	9106      	str	r1, [sp, #24]
 801055e:	4563      	cmp	r3, ip
 8010560:	d2dd      	bcs.n	801051e <quorem+0x4a>
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d030      	beq.n	80105ca <quorem+0xf6>
 8010568:	0038      	movs	r0, r7
 801056a:	9904      	ldr	r1, [sp, #16]
 801056c:	f7fc ff04 	bl	800d378 <__mcmp>
 8010570:	2800      	cmp	r0, #0
 8010572:	db21      	blt.n	80105b8 <quorem+0xe4>
 8010574:	0038      	movs	r0, r7
 8010576:	2600      	movs	r6, #0
 8010578:	9b02      	ldr	r3, [sp, #8]
 801057a:	9c04      	ldr	r4, [sp, #16]
 801057c:	3301      	adds	r3, #1
 801057e:	9302      	str	r3, [sp, #8]
 8010580:	3014      	adds	r0, #20
 8010582:	3414      	adds	r4, #20
 8010584:	6803      	ldr	r3, [r0, #0]
 8010586:	cc02      	ldmia	r4!, {r1}
 8010588:	b29d      	uxth	r5, r3
 801058a:	19ad      	adds	r5, r5, r6
 801058c:	b28a      	uxth	r2, r1
 801058e:	1aaa      	subs	r2, r5, r2
 8010590:	0c09      	lsrs	r1, r1, #16
 8010592:	0c1b      	lsrs	r3, r3, #16
 8010594:	1a5b      	subs	r3, r3, r1
 8010596:	1411      	asrs	r1, r2, #16
 8010598:	185b      	adds	r3, r3, r1
 801059a:	141e      	asrs	r6, r3, #16
 801059c:	b292      	uxth	r2, r2
 801059e:	041b      	lsls	r3, r3, #16
 80105a0:	4313      	orrs	r3, r2
 80105a2:	c008      	stmia	r0!, {r3}
 80105a4:	9b05      	ldr	r3, [sp, #20]
 80105a6:	42a3      	cmp	r3, r4
 80105a8:	d2ec      	bcs.n	8010584 <quorem+0xb0>
 80105aa:	9b01      	ldr	r3, [sp, #4]
 80105ac:	9a03      	ldr	r2, [sp, #12]
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	18d3      	adds	r3, r2, r3
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	2a00      	cmp	r2, #0
 80105b6:	d015      	beq.n	80105e4 <quorem+0x110>
 80105b8:	9802      	ldr	r0, [sp, #8]
 80105ba:	b009      	add	sp, #36	; 0x24
 80105bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105be:	6823      	ldr	r3, [r4, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <quorem+0xfe>
 80105c4:	9b01      	ldr	r3, [sp, #4]
 80105c6:	3b01      	subs	r3, #1
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	9b03      	ldr	r3, [sp, #12]
 80105cc:	3c04      	subs	r4, #4
 80105ce:	42a3      	cmp	r3, r4
 80105d0:	d3f5      	bcc.n	80105be <quorem+0xea>
 80105d2:	9b01      	ldr	r3, [sp, #4]
 80105d4:	613b      	str	r3, [r7, #16]
 80105d6:	e7c7      	b.n	8010568 <quorem+0x94>
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	2a00      	cmp	r2, #0
 80105dc:	d106      	bne.n	80105ec <quorem+0x118>
 80105de:	9a01      	ldr	r2, [sp, #4]
 80105e0:	3a01      	subs	r2, #1
 80105e2:	9201      	str	r2, [sp, #4]
 80105e4:	9a03      	ldr	r2, [sp, #12]
 80105e6:	3b04      	subs	r3, #4
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d3f5      	bcc.n	80105d8 <quorem+0x104>
 80105ec:	9b01      	ldr	r3, [sp, #4]
 80105ee:	613b      	str	r3, [r7, #16]
 80105f0:	e7e2      	b.n	80105b8 <quorem+0xe4>
	...

080105f4 <_dtoa_r>:
 80105f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f6:	0014      	movs	r4, r2
 80105f8:	001d      	movs	r5, r3
 80105fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80105fc:	b09d      	sub	sp, #116	; 0x74
 80105fe:	9408      	str	r4, [sp, #32]
 8010600:	9509      	str	r5, [sp, #36]	; 0x24
 8010602:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010604:	9004      	str	r0, [sp, #16]
 8010606:	2900      	cmp	r1, #0
 8010608:	d009      	beq.n	801061e <_dtoa_r+0x2a>
 801060a:	2301      	movs	r3, #1
 801060c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801060e:	4093      	lsls	r3, r2
 8010610:	604a      	str	r2, [r1, #4]
 8010612:	608b      	str	r3, [r1, #8]
 8010614:	f7fc fc56 	bl	800cec4 <_Bfree>
 8010618:	2300      	movs	r3, #0
 801061a:	9a04      	ldr	r2, [sp, #16]
 801061c:	6393      	str	r3, [r2, #56]	; 0x38
 801061e:	2d00      	cmp	r5, #0
 8010620:	da1e      	bge.n	8010660 <_dtoa_r+0x6c>
 8010622:	2301      	movs	r3, #1
 8010624:	6033      	str	r3, [r6, #0]
 8010626:	006b      	lsls	r3, r5, #1
 8010628:	085b      	lsrs	r3, r3, #1
 801062a:	9309      	str	r3, [sp, #36]	; 0x24
 801062c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801062e:	4bb5      	ldr	r3, [pc, #724]	; (8010904 <_dtoa_r+0x310>)
 8010630:	4ab4      	ldr	r2, [pc, #720]	; (8010904 <_dtoa_r+0x310>)
 8010632:	403b      	ands	r3, r7
 8010634:	4293      	cmp	r3, r2
 8010636:	d116      	bne.n	8010666 <_dtoa_r+0x72>
 8010638:	4bb3      	ldr	r3, [pc, #716]	; (8010908 <_dtoa_r+0x314>)
 801063a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801063c:	6013      	str	r3, [r2, #0]
 801063e:	033b      	lsls	r3, r7, #12
 8010640:	0b1b      	lsrs	r3, r3, #12
 8010642:	4323      	orrs	r3, r4
 8010644:	d101      	bne.n	801064a <_dtoa_r+0x56>
 8010646:	f000 fdb2 	bl	80111ae <_dtoa_r+0xbba>
 801064a:	4bb0      	ldr	r3, [pc, #704]	; (801090c <_dtoa_r+0x318>)
 801064c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801064e:	9306      	str	r3, [sp, #24]
 8010650:	2a00      	cmp	r2, #0
 8010652:	d002      	beq.n	801065a <_dtoa_r+0x66>
 8010654:	4bae      	ldr	r3, [pc, #696]	; (8010910 <_dtoa_r+0x31c>)
 8010656:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	9806      	ldr	r0, [sp, #24]
 801065c:	b01d      	add	sp, #116	; 0x74
 801065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010660:	2300      	movs	r3, #0
 8010662:	6033      	str	r3, [r6, #0]
 8010664:	e7e2      	b.n	801062c <_dtoa_r+0x38>
 8010666:	9a08      	ldr	r2, [sp, #32]
 8010668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066a:	9210      	str	r2, [sp, #64]	; 0x40
 801066c:	9311      	str	r3, [sp, #68]	; 0x44
 801066e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010670:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010672:	2200      	movs	r2, #0
 8010674:	2300      	movs	r3, #0
 8010676:	f7ef fee7 	bl	8000448 <__aeabi_dcmpeq>
 801067a:	1e06      	subs	r6, r0, #0
 801067c:	d009      	beq.n	8010692 <_dtoa_r+0x9e>
 801067e:	2301      	movs	r3, #1
 8010680:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010682:	6013      	str	r3, [r2, #0]
 8010684:	4ba3      	ldr	r3, [pc, #652]	; (8010914 <_dtoa_r+0x320>)
 8010686:	9306      	str	r3, [sp, #24]
 8010688:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801068a:	2b00      	cmp	r3, #0
 801068c:	d0e5      	beq.n	801065a <_dtoa_r+0x66>
 801068e:	4ba2      	ldr	r3, [pc, #648]	; (8010918 <_dtoa_r+0x324>)
 8010690:	e7e1      	b.n	8010656 <_dtoa_r+0x62>
 8010692:	ab1a      	add	r3, sp, #104	; 0x68
 8010694:	9301      	str	r3, [sp, #4]
 8010696:	ab1b      	add	r3, sp, #108	; 0x6c
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	9804      	ldr	r0, [sp, #16]
 801069c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801069e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106a0:	f7fc ff86 	bl	800d5b0 <__d2b>
 80106a4:	007a      	lsls	r2, r7, #1
 80106a6:	9005      	str	r0, [sp, #20]
 80106a8:	0d52      	lsrs	r2, r2, #21
 80106aa:	d100      	bne.n	80106ae <_dtoa_r+0xba>
 80106ac:	e07b      	b.n	80107a6 <_dtoa_r+0x1b2>
 80106ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106b0:	9617      	str	r6, [sp, #92]	; 0x5c
 80106b2:	0319      	lsls	r1, r3, #12
 80106b4:	4b99      	ldr	r3, [pc, #612]	; (801091c <_dtoa_r+0x328>)
 80106b6:	0b09      	lsrs	r1, r1, #12
 80106b8:	430b      	orrs	r3, r1
 80106ba:	4999      	ldr	r1, [pc, #612]	; (8010920 <_dtoa_r+0x32c>)
 80106bc:	1857      	adds	r7, r2, r1
 80106be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106c2:	0019      	movs	r1, r3
 80106c4:	2200      	movs	r2, #0
 80106c6:	4b97      	ldr	r3, [pc, #604]	; (8010924 <_dtoa_r+0x330>)
 80106c8:	f7f1 fa92 	bl	8001bf0 <__aeabi_dsub>
 80106cc:	4a96      	ldr	r2, [pc, #600]	; (8010928 <_dtoa_r+0x334>)
 80106ce:	4b97      	ldr	r3, [pc, #604]	; (801092c <_dtoa_r+0x338>)
 80106d0:	f7f0 ffcc 	bl	800166c <__aeabi_dmul>
 80106d4:	4a96      	ldr	r2, [pc, #600]	; (8010930 <_dtoa_r+0x33c>)
 80106d6:	4b97      	ldr	r3, [pc, #604]	; (8010934 <_dtoa_r+0x340>)
 80106d8:	f7f0 f86e 	bl	80007b8 <__aeabi_dadd>
 80106dc:	0004      	movs	r4, r0
 80106de:	0038      	movs	r0, r7
 80106e0:	000d      	movs	r5, r1
 80106e2:	f7f1 fe5b 	bl	800239c <__aeabi_i2d>
 80106e6:	4a94      	ldr	r2, [pc, #592]	; (8010938 <_dtoa_r+0x344>)
 80106e8:	4b94      	ldr	r3, [pc, #592]	; (801093c <_dtoa_r+0x348>)
 80106ea:	f7f0 ffbf 	bl	800166c <__aeabi_dmul>
 80106ee:	0002      	movs	r2, r0
 80106f0:	000b      	movs	r3, r1
 80106f2:	0020      	movs	r0, r4
 80106f4:	0029      	movs	r1, r5
 80106f6:	f7f0 f85f 	bl	80007b8 <__aeabi_dadd>
 80106fa:	0004      	movs	r4, r0
 80106fc:	000d      	movs	r5, r1
 80106fe:	f7f1 fe17 	bl	8002330 <__aeabi_d2iz>
 8010702:	2200      	movs	r2, #0
 8010704:	9003      	str	r0, [sp, #12]
 8010706:	2300      	movs	r3, #0
 8010708:	0020      	movs	r0, r4
 801070a:	0029      	movs	r1, r5
 801070c:	f7ef fea2 	bl	8000454 <__aeabi_dcmplt>
 8010710:	2800      	cmp	r0, #0
 8010712:	d00b      	beq.n	801072c <_dtoa_r+0x138>
 8010714:	9803      	ldr	r0, [sp, #12]
 8010716:	f7f1 fe41 	bl	800239c <__aeabi_i2d>
 801071a:	002b      	movs	r3, r5
 801071c:	0022      	movs	r2, r4
 801071e:	f7ef fe93 	bl	8000448 <__aeabi_dcmpeq>
 8010722:	4243      	negs	r3, r0
 8010724:	4158      	adcs	r0, r3
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	1a1b      	subs	r3, r3, r0
 801072a:	9303      	str	r3, [sp, #12]
 801072c:	2301      	movs	r3, #1
 801072e:	9316      	str	r3, [sp, #88]	; 0x58
 8010730:	9b03      	ldr	r3, [sp, #12]
 8010732:	2b16      	cmp	r3, #22
 8010734:	d810      	bhi.n	8010758 <_dtoa_r+0x164>
 8010736:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010738:	9911      	ldr	r1, [sp, #68]	; 0x44
 801073a:	9a03      	ldr	r2, [sp, #12]
 801073c:	4b80      	ldr	r3, [pc, #512]	; (8010940 <_dtoa_r+0x34c>)
 801073e:	00d2      	lsls	r2, r2, #3
 8010740:	189b      	adds	r3, r3, r2
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	f7ef fe85 	bl	8000454 <__aeabi_dcmplt>
 801074a:	2800      	cmp	r0, #0
 801074c:	d047      	beq.n	80107de <_dtoa_r+0x1ea>
 801074e:	9b03      	ldr	r3, [sp, #12]
 8010750:	3b01      	subs	r3, #1
 8010752:	9303      	str	r3, [sp, #12]
 8010754:	2300      	movs	r3, #0
 8010756:	9316      	str	r3, [sp, #88]	; 0x58
 8010758:	2200      	movs	r2, #0
 801075a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801075c:	920a      	str	r2, [sp, #40]	; 0x28
 801075e:	1bdb      	subs	r3, r3, r7
 8010760:	1e5a      	subs	r2, r3, #1
 8010762:	d53e      	bpl.n	80107e2 <_dtoa_r+0x1ee>
 8010764:	2201      	movs	r2, #1
 8010766:	1ad3      	subs	r3, r2, r3
 8010768:	930a      	str	r3, [sp, #40]	; 0x28
 801076a:	2300      	movs	r3, #0
 801076c:	930c      	str	r3, [sp, #48]	; 0x30
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	db38      	blt.n	80107e6 <_dtoa_r+0x1f2>
 8010774:	9a03      	ldr	r2, [sp, #12]
 8010776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010778:	4694      	mov	ip, r2
 801077a:	4463      	add	r3, ip
 801077c:	930c      	str	r3, [sp, #48]	; 0x30
 801077e:	2300      	movs	r3, #0
 8010780:	9213      	str	r2, [sp, #76]	; 0x4c
 8010782:	930d      	str	r3, [sp, #52]	; 0x34
 8010784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010786:	2401      	movs	r4, #1
 8010788:	2b09      	cmp	r3, #9
 801078a:	d867      	bhi.n	801085c <_dtoa_r+0x268>
 801078c:	2b05      	cmp	r3, #5
 801078e:	dd02      	ble.n	8010796 <_dtoa_r+0x1a2>
 8010790:	2400      	movs	r4, #0
 8010792:	3b04      	subs	r3, #4
 8010794:	9322      	str	r3, [sp, #136]	; 0x88
 8010796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010798:	1e98      	subs	r0, r3, #2
 801079a:	2803      	cmp	r0, #3
 801079c:	d867      	bhi.n	801086e <_dtoa_r+0x27a>
 801079e:	f7ef fcb9 	bl	8000114 <__gnu_thumb1_case_uqi>
 80107a2:	3a2b      	.short	0x3a2b
 80107a4:	5b38      	.short	0x5b38
 80107a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80107a8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80107aa:	18f6      	adds	r6, r6, r3
 80107ac:	4b65      	ldr	r3, [pc, #404]	; (8010944 <_dtoa_r+0x350>)
 80107ae:	18f2      	adds	r2, r6, r3
 80107b0:	2a20      	cmp	r2, #32
 80107b2:	dd0f      	ble.n	80107d4 <_dtoa_r+0x1e0>
 80107b4:	2340      	movs	r3, #64	; 0x40
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	409f      	lsls	r7, r3
 80107ba:	4b63      	ldr	r3, [pc, #396]	; (8010948 <_dtoa_r+0x354>)
 80107bc:	0038      	movs	r0, r7
 80107be:	18f3      	adds	r3, r6, r3
 80107c0:	40dc      	lsrs	r4, r3
 80107c2:	4320      	orrs	r0, r4
 80107c4:	f7f1 fe1a 	bl	80023fc <__aeabi_ui2d>
 80107c8:	2201      	movs	r2, #1
 80107ca:	4b60      	ldr	r3, [pc, #384]	; (801094c <_dtoa_r+0x358>)
 80107cc:	1e77      	subs	r7, r6, #1
 80107ce:	18cb      	adds	r3, r1, r3
 80107d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80107d2:	e776      	b.n	80106c2 <_dtoa_r+0xce>
 80107d4:	2320      	movs	r3, #32
 80107d6:	0020      	movs	r0, r4
 80107d8:	1a9b      	subs	r3, r3, r2
 80107da:	4098      	lsls	r0, r3
 80107dc:	e7f2      	b.n	80107c4 <_dtoa_r+0x1d0>
 80107de:	9016      	str	r0, [sp, #88]	; 0x58
 80107e0:	e7ba      	b.n	8010758 <_dtoa_r+0x164>
 80107e2:	920c      	str	r2, [sp, #48]	; 0x30
 80107e4:	e7c3      	b.n	801076e <_dtoa_r+0x17a>
 80107e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107e8:	9a03      	ldr	r2, [sp, #12]
 80107ea:	1a9b      	subs	r3, r3, r2
 80107ec:	930a      	str	r3, [sp, #40]	; 0x28
 80107ee:	4253      	negs	r3, r2
 80107f0:	930d      	str	r3, [sp, #52]	; 0x34
 80107f2:	2300      	movs	r3, #0
 80107f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80107f6:	e7c5      	b.n	8010784 <_dtoa_r+0x190>
 80107f8:	2300      	movs	r3, #0
 80107fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80107fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8010800:	9307      	str	r3, [sp, #28]
 8010802:	2b00      	cmp	r3, #0
 8010804:	dc13      	bgt.n	801082e <_dtoa_r+0x23a>
 8010806:	2301      	movs	r3, #1
 8010808:	001a      	movs	r2, r3
 801080a:	930b      	str	r3, [sp, #44]	; 0x2c
 801080c:	9307      	str	r3, [sp, #28]
 801080e:	9223      	str	r2, [sp, #140]	; 0x8c
 8010810:	e00d      	b.n	801082e <_dtoa_r+0x23a>
 8010812:	2301      	movs	r3, #1
 8010814:	e7f1      	b.n	80107fa <_dtoa_r+0x206>
 8010816:	2300      	movs	r3, #0
 8010818:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801081a:	930f      	str	r3, [sp, #60]	; 0x3c
 801081c:	4694      	mov	ip, r2
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	4463      	add	r3, ip
 8010822:	930b      	str	r3, [sp, #44]	; 0x2c
 8010824:	3301      	adds	r3, #1
 8010826:	9307      	str	r3, [sp, #28]
 8010828:	2b00      	cmp	r3, #0
 801082a:	dc00      	bgt.n	801082e <_dtoa_r+0x23a>
 801082c:	2301      	movs	r3, #1
 801082e:	2100      	movs	r1, #0
 8010830:	2204      	movs	r2, #4
 8010832:	0010      	movs	r0, r2
 8010834:	3014      	adds	r0, #20
 8010836:	4298      	cmp	r0, r3
 8010838:	d91d      	bls.n	8010876 <_dtoa_r+0x282>
 801083a:	9b04      	ldr	r3, [sp, #16]
 801083c:	0018      	movs	r0, r3
 801083e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010840:	f7fc fb18 	bl	800ce74 <_Balloc>
 8010844:	9006      	str	r0, [sp, #24]
 8010846:	2800      	cmp	r0, #0
 8010848:	d118      	bne.n	801087c <_dtoa_r+0x288>
 801084a:	21b0      	movs	r1, #176	; 0xb0
 801084c:	4b40      	ldr	r3, [pc, #256]	; (8010950 <_dtoa_r+0x35c>)
 801084e:	4841      	ldr	r0, [pc, #260]	; (8010954 <_dtoa_r+0x360>)
 8010850:	9a06      	ldr	r2, [sp, #24]
 8010852:	31ff      	adds	r1, #255	; 0xff
 8010854:	f7ff fdd2 	bl	80103fc <__assert_func>
 8010858:	2301      	movs	r3, #1
 801085a:	e7dd      	b.n	8010818 <_dtoa_r+0x224>
 801085c:	2300      	movs	r3, #0
 801085e:	940f      	str	r4, [sp, #60]	; 0x3c
 8010860:	9322      	str	r3, [sp, #136]	; 0x88
 8010862:	3b01      	subs	r3, #1
 8010864:	930b      	str	r3, [sp, #44]	; 0x2c
 8010866:	9307      	str	r3, [sp, #28]
 8010868:	2200      	movs	r2, #0
 801086a:	3313      	adds	r3, #19
 801086c:	e7cf      	b.n	801080e <_dtoa_r+0x21a>
 801086e:	2301      	movs	r3, #1
 8010870:	930f      	str	r3, [sp, #60]	; 0x3c
 8010872:	3b02      	subs	r3, #2
 8010874:	e7f6      	b.n	8010864 <_dtoa_r+0x270>
 8010876:	3101      	adds	r1, #1
 8010878:	0052      	lsls	r2, r2, #1
 801087a:	e7da      	b.n	8010832 <_dtoa_r+0x23e>
 801087c:	9b04      	ldr	r3, [sp, #16]
 801087e:	9a06      	ldr	r2, [sp, #24]
 8010880:	639a      	str	r2, [r3, #56]	; 0x38
 8010882:	9b07      	ldr	r3, [sp, #28]
 8010884:	2b0e      	cmp	r3, #14
 8010886:	d900      	bls.n	801088a <_dtoa_r+0x296>
 8010888:	e0e3      	b.n	8010a52 <_dtoa_r+0x45e>
 801088a:	2c00      	cmp	r4, #0
 801088c:	d100      	bne.n	8010890 <_dtoa_r+0x29c>
 801088e:	e0e0      	b.n	8010a52 <_dtoa_r+0x45e>
 8010890:	9b03      	ldr	r3, [sp, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	dd62      	ble.n	801095c <_dtoa_r+0x368>
 8010896:	210f      	movs	r1, #15
 8010898:	9a03      	ldr	r2, [sp, #12]
 801089a:	4b29      	ldr	r3, [pc, #164]	; (8010940 <_dtoa_r+0x34c>)
 801089c:	400a      	ands	r2, r1
 801089e:	00d2      	lsls	r2, r2, #3
 80108a0:	189b      	adds	r3, r3, r2
 80108a2:	681e      	ldr	r6, [r3, #0]
 80108a4:	685f      	ldr	r7, [r3, #4]
 80108a6:	9b03      	ldr	r3, [sp, #12]
 80108a8:	2402      	movs	r4, #2
 80108aa:	111d      	asrs	r5, r3, #4
 80108ac:	05db      	lsls	r3, r3, #23
 80108ae:	d50a      	bpl.n	80108c6 <_dtoa_r+0x2d2>
 80108b0:	4b29      	ldr	r3, [pc, #164]	; (8010958 <_dtoa_r+0x364>)
 80108b2:	400d      	ands	r5, r1
 80108b4:	6a1a      	ldr	r2, [r3, #32]
 80108b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80108ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80108bc:	f7f0 fadc 	bl	8000e78 <__aeabi_ddiv>
 80108c0:	9008      	str	r0, [sp, #32]
 80108c2:	9109      	str	r1, [sp, #36]	; 0x24
 80108c4:	3401      	adds	r4, #1
 80108c6:	4b24      	ldr	r3, [pc, #144]	; (8010958 <_dtoa_r+0x364>)
 80108c8:	930e      	str	r3, [sp, #56]	; 0x38
 80108ca:	2d00      	cmp	r5, #0
 80108cc:	d108      	bne.n	80108e0 <_dtoa_r+0x2ec>
 80108ce:	9808      	ldr	r0, [sp, #32]
 80108d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108d2:	0032      	movs	r2, r6
 80108d4:	003b      	movs	r3, r7
 80108d6:	f7f0 facf 	bl	8000e78 <__aeabi_ddiv>
 80108da:	9008      	str	r0, [sp, #32]
 80108dc:	9109      	str	r1, [sp, #36]	; 0x24
 80108de:	e058      	b.n	8010992 <_dtoa_r+0x39e>
 80108e0:	2301      	movs	r3, #1
 80108e2:	421d      	tst	r5, r3
 80108e4:	d009      	beq.n	80108fa <_dtoa_r+0x306>
 80108e6:	18e4      	adds	r4, r4, r3
 80108e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108ea:	0030      	movs	r0, r6
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	0039      	movs	r1, r7
 80108f2:	f7f0 febb 	bl	800166c <__aeabi_dmul>
 80108f6:	0006      	movs	r6, r0
 80108f8:	000f      	movs	r7, r1
 80108fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108fc:	106d      	asrs	r5, r5, #1
 80108fe:	3308      	adds	r3, #8
 8010900:	e7e2      	b.n	80108c8 <_dtoa_r+0x2d4>
 8010902:	46c0      	nop			; (mov r8, r8)
 8010904:	7ff00000 	.word	0x7ff00000
 8010908:	0000270f 	.word	0x0000270f
 801090c:	08014c8d 	.word	0x08014c8d
 8010910:	08014c90 	.word	0x08014c90
 8010914:	08014bfe 	.word	0x08014bfe
 8010918:	08014bff 	.word	0x08014bff
 801091c:	3ff00000 	.word	0x3ff00000
 8010920:	fffffc01 	.word	0xfffffc01
 8010924:	3ff80000 	.word	0x3ff80000
 8010928:	636f4361 	.word	0x636f4361
 801092c:	3fd287a7 	.word	0x3fd287a7
 8010930:	8b60c8b3 	.word	0x8b60c8b3
 8010934:	3fc68a28 	.word	0x3fc68a28
 8010938:	509f79fb 	.word	0x509f79fb
 801093c:	3fd34413 	.word	0x3fd34413
 8010940:	08014af8 	.word	0x08014af8
 8010944:	00000432 	.word	0x00000432
 8010948:	00000412 	.word	0x00000412
 801094c:	fe100000 	.word	0xfe100000
 8010950:	08014a01 	.word	0x08014a01
 8010954:	08014c91 	.word	0x08014c91
 8010958:	08014ad0 	.word	0x08014ad0
 801095c:	9b03      	ldr	r3, [sp, #12]
 801095e:	2402      	movs	r4, #2
 8010960:	2b00      	cmp	r3, #0
 8010962:	d016      	beq.n	8010992 <_dtoa_r+0x39e>
 8010964:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010966:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010968:	220f      	movs	r2, #15
 801096a:	425d      	negs	r5, r3
 801096c:	402a      	ands	r2, r5
 801096e:	4bdd      	ldr	r3, [pc, #884]	; (8010ce4 <_dtoa_r+0x6f0>)
 8010970:	00d2      	lsls	r2, r2, #3
 8010972:	189b      	adds	r3, r3, r2
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	f7f0 fe78 	bl	800166c <__aeabi_dmul>
 801097c:	2701      	movs	r7, #1
 801097e:	2300      	movs	r3, #0
 8010980:	9008      	str	r0, [sp, #32]
 8010982:	9109      	str	r1, [sp, #36]	; 0x24
 8010984:	4ed8      	ldr	r6, [pc, #864]	; (8010ce8 <_dtoa_r+0x6f4>)
 8010986:	112d      	asrs	r5, r5, #4
 8010988:	2d00      	cmp	r5, #0
 801098a:	d000      	beq.n	801098e <_dtoa_r+0x39a>
 801098c:	e091      	b.n	8010ab2 <_dtoa_r+0x4be>
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1a3      	bne.n	80108da <_dtoa_r+0x2e6>
 8010992:	9e08      	ldr	r6, [sp, #32]
 8010994:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010996:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010998:	2b00      	cmp	r3, #0
 801099a:	d100      	bne.n	801099e <_dtoa_r+0x3aa>
 801099c:	e094      	b.n	8010ac8 <_dtoa_r+0x4d4>
 801099e:	2200      	movs	r2, #0
 80109a0:	0030      	movs	r0, r6
 80109a2:	0039      	movs	r1, r7
 80109a4:	4bd1      	ldr	r3, [pc, #836]	; (8010cec <_dtoa_r+0x6f8>)
 80109a6:	f7ef fd55 	bl	8000454 <__aeabi_dcmplt>
 80109aa:	2800      	cmp	r0, #0
 80109ac:	d100      	bne.n	80109b0 <_dtoa_r+0x3bc>
 80109ae:	e08b      	b.n	8010ac8 <_dtoa_r+0x4d4>
 80109b0:	9b07      	ldr	r3, [sp, #28]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d100      	bne.n	80109b8 <_dtoa_r+0x3c4>
 80109b6:	e087      	b.n	8010ac8 <_dtoa_r+0x4d4>
 80109b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dd45      	ble.n	8010a4a <_dtoa_r+0x456>
 80109be:	9b03      	ldr	r3, [sp, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	3b01      	subs	r3, #1
 80109c4:	930e      	str	r3, [sp, #56]	; 0x38
 80109c6:	0030      	movs	r0, r6
 80109c8:	4bc9      	ldr	r3, [pc, #804]	; (8010cf0 <_dtoa_r+0x6fc>)
 80109ca:	0039      	movs	r1, r7
 80109cc:	f7f0 fe4e 	bl	800166c <__aeabi_dmul>
 80109d0:	9008      	str	r0, [sp, #32]
 80109d2:	9109      	str	r1, [sp, #36]	; 0x24
 80109d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109d6:	3401      	adds	r4, #1
 80109d8:	0020      	movs	r0, r4
 80109da:	9e08      	ldr	r6, [sp, #32]
 80109dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109de:	9312      	str	r3, [sp, #72]	; 0x48
 80109e0:	f7f1 fcdc 	bl	800239c <__aeabi_i2d>
 80109e4:	0032      	movs	r2, r6
 80109e6:	003b      	movs	r3, r7
 80109e8:	f7f0 fe40 	bl	800166c <__aeabi_dmul>
 80109ec:	2200      	movs	r2, #0
 80109ee:	4bc1      	ldr	r3, [pc, #772]	; (8010cf4 <_dtoa_r+0x700>)
 80109f0:	f7ef fee2 	bl	80007b8 <__aeabi_dadd>
 80109f4:	4ac0      	ldr	r2, [pc, #768]	; (8010cf8 <_dtoa_r+0x704>)
 80109f6:	9014      	str	r0, [sp, #80]	; 0x50
 80109f8:	9115      	str	r1, [sp, #84]	; 0x54
 80109fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80109fe:	4694      	mov	ip, r2
 8010a00:	9308      	str	r3, [sp, #32]
 8010a02:	9409      	str	r4, [sp, #36]	; 0x24
 8010a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a06:	4463      	add	r3, ip
 8010a08:	9318      	str	r3, [sp, #96]	; 0x60
 8010a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d15e      	bne.n	8010ad0 <_dtoa_r+0x4dc>
 8010a12:	2200      	movs	r2, #0
 8010a14:	4bb9      	ldr	r3, [pc, #740]	; (8010cfc <_dtoa_r+0x708>)
 8010a16:	0030      	movs	r0, r6
 8010a18:	0039      	movs	r1, r7
 8010a1a:	f7f1 f8e9 	bl	8001bf0 <__aeabi_dsub>
 8010a1e:	9a08      	ldr	r2, [sp, #32]
 8010a20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a22:	0004      	movs	r4, r0
 8010a24:	000d      	movs	r5, r1
 8010a26:	f7ef fd29 	bl	800047c <__aeabi_dcmpgt>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d000      	beq.n	8010a30 <_dtoa_r+0x43c>
 8010a2e:	e2b3      	b.n	8010f98 <_dtoa_r+0x9a4>
 8010a30:	48b3      	ldr	r0, [pc, #716]	; (8010d00 <_dtoa_r+0x70c>)
 8010a32:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a34:	4684      	mov	ip, r0
 8010a36:	4461      	add	r1, ip
 8010a38:	000b      	movs	r3, r1
 8010a3a:	0020      	movs	r0, r4
 8010a3c:	0029      	movs	r1, r5
 8010a3e:	9a08      	ldr	r2, [sp, #32]
 8010a40:	f7ef fd08 	bl	8000454 <__aeabi_dcmplt>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d000      	beq.n	8010a4a <_dtoa_r+0x456>
 8010a48:	e2a3      	b.n	8010f92 <_dtoa_r+0x99e>
 8010a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010a4e:	9308      	str	r3, [sp, #32]
 8010a50:	9409      	str	r4, [sp, #36]	; 0x24
 8010a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	da00      	bge.n	8010a5a <_dtoa_r+0x466>
 8010a58:	e179      	b.n	8010d4e <_dtoa_r+0x75a>
 8010a5a:	9a03      	ldr	r2, [sp, #12]
 8010a5c:	2a0e      	cmp	r2, #14
 8010a5e:	dd00      	ble.n	8010a62 <_dtoa_r+0x46e>
 8010a60:	e175      	b.n	8010d4e <_dtoa_r+0x75a>
 8010a62:	4ba0      	ldr	r3, [pc, #640]	; (8010ce4 <_dtoa_r+0x6f0>)
 8010a64:	00d2      	lsls	r2, r2, #3
 8010a66:	189b      	adds	r3, r3, r2
 8010a68:	681e      	ldr	r6, [r3, #0]
 8010a6a:	685f      	ldr	r7, [r3, #4]
 8010a6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	db00      	blt.n	8010a74 <_dtoa_r+0x480>
 8010a72:	e0e5      	b.n	8010c40 <_dtoa_r+0x64c>
 8010a74:	9b07      	ldr	r3, [sp, #28]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dd00      	ble.n	8010a7c <_dtoa_r+0x488>
 8010a7a:	e0e1      	b.n	8010c40 <_dtoa_r+0x64c>
 8010a7c:	d000      	beq.n	8010a80 <_dtoa_r+0x48c>
 8010a7e:	e288      	b.n	8010f92 <_dtoa_r+0x99e>
 8010a80:	2200      	movs	r2, #0
 8010a82:	0030      	movs	r0, r6
 8010a84:	0039      	movs	r1, r7
 8010a86:	4b9d      	ldr	r3, [pc, #628]	; (8010cfc <_dtoa_r+0x708>)
 8010a88:	f7f0 fdf0 	bl	800166c <__aeabi_dmul>
 8010a8c:	9a08      	ldr	r2, [sp, #32]
 8010a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a90:	f7ef fcfe 	bl	8000490 <__aeabi_dcmpge>
 8010a94:	9e07      	ldr	r6, [sp, #28]
 8010a96:	0037      	movs	r7, r6
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	d000      	beq.n	8010a9e <_dtoa_r+0x4aa>
 8010a9c:	e25f      	b.n	8010f5e <_dtoa_r+0x96a>
 8010a9e:	9b06      	ldr	r3, [sp, #24]
 8010aa0:	9a06      	ldr	r2, [sp, #24]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	9308      	str	r3, [sp, #32]
 8010aa6:	2331      	movs	r3, #49	; 0x31
 8010aa8:	7013      	strb	r3, [r2, #0]
 8010aaa:	9b03      	ldr	r3, [sp, #12]
 8010aac:	3301      	adds	r3, #1
 8010aae:	9303      	str	r3, [sp, #12]
 8010ab0:	e25a      	b.n	8010f68 <_dtoa_r+0x974>
 8010ab2:	423d      	tst	r5, r7
 8010ab4:	d005      	beq.n	8010ac2 <_dtoa_r+0x4ce>
 8010ab6:	6832      	ldr	r2, [r6, #0]
 8010ab8:	6873      	ldr	r3, [r6, #4]
 8010aba:	f7f0 fdd7 	bl	800166c <__aeabi_dmul>
 8010abe:	003b      	movs	r3, r7
 8010ac0:	3401      	adds	r4, #1
 8010ac2:	106d      	asrs	r5, r5, #1
 8010ac4:	3608      	adds	r6, #8
 8010ac6:	e75f      	b.n	8010988 <_dtoa_r+0x394>
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	930e      	str	r3, [sp, #56]	; 0x38
 8010acc:	9b07      	ldr	r3, [sp, #28]
 8010ace:	e783      	b.n	80109d8 <_dtoa_r+0x3e4>
 8010ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ad2:	4b84      	ldr	r3, [pc, #528]	; (8010ce4 <_dtoa_r+0x6f0>)
 8010ad4:	3a01      	subs	r2, #1
 8010ad6:	00d2      	lsls	r2, r2, #3
 8010ad8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ada:	189b      	adds	r3, r3, r2
 8010adc:	9c08      	ldr	r4, [sp, #32]
 8010ade:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	2900      	cmp	r1, #0
 8010ae6:	d051      	beq.n	8010b8c <_dtoa_r+0x598>
 8010ae8:	2000      	movs	r0, #0
 8010aea:	4986      	ldr	r1, [pc, #536]	; (8010d04 <_dtoa_r+0x710>)
 8010aec:	f7f0 f9c4 	bl	8000e78 <__aeabi_ddiv>
 8010af0:	0022      	movs	r2, r4
 8010af2:	002b      	movs	r3, r5
 8010af4:	f7f1 f87c 	bl	8001bf0 <__aeabi_dsub>
 8010af8:	9a06      	ldr	r2, [sp, #24]
 8010afa:	0004      	movs	r4, r0
 8010afc:	4694      	mov	ip, r2
 8010afe:	000d      	movs	r5, r1
 8010b00:	9b06      	ldr	r3, [sp, #24]
 8010b02:	9314      	str	r3, [sp, #80]	; 0x50
 8010b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b06:	4463      	add	r3, ip
 8010b08:	9318      	str	r3, [sp, #96]	; 0x60
 8010b0a:	0039      	movs	r1, r7
 8010b0c:	0030      	movs	r0, r6
 8010b0e:	f7f1 fc0f 	bl	8002330 <__aeabi_d2iz>
 8010b12:	9012      	str	r0, [sp, #72]	; 0x48
 8010b14:	f7f1 fc42 	bl	800239c <__aeabi_i2d>
 8010b18:	0002      	movs	r2, r0
 8010b1a:	000b      	movs	r3, r1
 8010b1c:	0030      	movs	r0, r6
 8010b1e:	0039      	movs	r1, r7
 8010b20:	f7f1 f866 	bl	8001bf0 <__aeabi_dsub>
 8010b24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b28:	3301      	adds	r3, #1
 8010b2a:	9308      	str	r3, [sp, #32]
 8010b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b2e:	0006      	movs	r6, r0
 8010b30:	3330      	adds	r3, #48	; 0x30
 8010b32:	7013      	strb	r3, [r2, #0]
 8010b34:	0022      	movs	r2, r4
 8010b36:	002b      	movs	r3, r5
 8010b38:	000f      	movs	r7, r1
 8010b3a:	f7ef fc8b 	bl	8000454 <__aeabi_dcmplt>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d174      	bne.n	8010c2c <_dtoa_r+0x638>
 8010b42:	0032      	movs	r2, r6
 8010b44:	003b      	movs	r3, r7
 8010b46:	2000      	movs	r0, #0
 8010b48:	4968      	ldr	r1, [pc, #416]	; (8010cec <_dtoa_r+0x6f8>)
 8010b4a:	f7f1 f851 	bl	8001bf0 <__aeabi_dsub>
 8010b4e:	0022      	movs	r2, r4
 8010b50:	002b      	movs	r3, r5
 8010b52:	f7ef fc7f 	bl	8000454 <__aeabi_dcmplt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d000      	beq.n	8010b5c <_dtoa_r+0x568>
 8010b5a:	e0d7      	b.n	8010d0c <_dtoa_r+0x718>
 8010b5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010b5e:	9a08      	ldr	r2, [sp, #32]
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d100      	bne.n	8010b66 <_dtoa_r+0x572>
 8010b64:	e771      	b.n	8010a4a <_dtoa_r+0x456>
 8010b66:	2200      	movs	r2, #0
 8010b68:	0020      	movs	r0, r4
 8010b6a:	0029      	movs	r1, r5
 8010b6c:	4b60      	ldr	r3, [pc, #384]	; (8010cf0 <_dtoa_r+0x6fc>)
 8010b6e:	f7f0 fd7d 	bl	800166c <__aeabi_dmul>
 8010b72:	4b5f      	ldr	r3, [pc, #380]	; (8010cf0 <_dtoa_r+0x6fc>)
 8010b74:	0004      	movs	r4, r0
 8010b76:	000d      	movs	r5, r1
 8010b78:	0030      	movs	r0, r6
 8010b7a:	0039      	movs	r1, r7
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f7f0 fd75 	bl	800166c <__aeabi_dmul>
 8010b82:	9b08      	ldr	r3, [sp, #32]
 8010b84:	0006      	movs	r6, r0
 8010b86:	000f      	movs	r7, r1
 8010b88:	9314      	str	r3, [sp, #80]	; 0x50
 8010b8a:	e7be      	b.n	8010b0a <_dtoa_r+0x516>
 8010b8c:	0020      	movs	r0, r4
 8010b8e:	0029      	movs	r1, r5
 8010b90:	f7f0 fd6c 	bl	800166c <__aeabi_dmul>
 8010b94:	9a06      	ldr	r2, [sp, #24]
 8010b96:	9b06      	ldr	r3, [sp, #24]
 8010b98:	4694      	mov	ip, r2
 8010b9a:	9308      	str	r3, [sp, #32]
 8010b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b9e:	9014      	str	r0, [sp, #80]	; 0x50
 8010ba0:	9115      	str	r1, [sp, #84]	; 0x54
 8010ba2:	4463      	add	r3, ip
 8010ba4:	9319      	str	r3, [sp, #100]	; 0x64
 8010ba6:	0030      	movs	r0, r6
 8010ba8:	0039      	movs	r1, r7
 8010baa:	f7f1 fbc1 	bl	8002330 <__aeabi_d2iz>
 8010bae:	9018      	str	r0, [sp, #96]	; 0x60
 8010bb0:	f7f1 fbf4 	bl	800239c <__aeabi_i2d>
 8010bb4:	0002      	movs	r2, r0
 8010bb6:	000b      	movs	r3, r1
 8010bb8:	0030      	movs	r0, r6
 8010bba:	0039      	movs	r1, r7
 8010bbc:	f7f1 f818 	bl	8001bf0 <__aeabi_dsub>
 8010bc0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010bc2:	9b08      	ldr	r3, [sp, #32]
 8010bc4:	3630      	adds	r6, #48	; 0x30
 8010bc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bc8:	701e      	strb	r6, [r3, #0]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	0004      	movs	r4, r0
 8010bce:	000d      	movs	r5, r1
 8010bd0:	9308      	str	r3, [sp, #32]
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d12d      	bne.n	8010c32 <_dtoa_r+0x63e>
 8010bd6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010bd8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010bda:	9a06      	ldr	r2, [sp, #24]
 8010bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bde:	4694      	mov	ip, r2
 8010be0:	4463      	add	r3, ip
 8010be2:	2200      	movs	r2, #0
 8010be4:	9308      	str	r3, [sp, #32]
 8010be6:	4b47      	ldr	r3, [pc, #284]	; (8010d04 <_dtoa_r+0x710>)
 8010be8:	f7ef fde6 	bl	80007b8 <__aeabi_dadd>
 8010bec:	0002      	movs	r2, r0
 8010bee:	000b      	movs	r3, r1
 8010bf0:	0020      	movs	r0, r4
 8010bf2:	0029      	movs	r1, r5
 8010bf4:	f7ef fc42 	bl	800047c <__aeabi_dcmpgt>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d000      	beq.n	8010bfe <_dtoa_r+0x60a>
 8010bfc:	e086      	b.n	8010d0c <_dtoa_r+0x718>
 8010bfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c02:	2000      	movs	r0, #0
 8010c04:	493f      	ldr	r1, [pc, #252]	; (8010d04 <_dtoa_r+0x710>)
 8010c06:	f7f0 fff3 	bl	8001bf0 <__aeabi_dsub>
 8010c0a:	0002      	movs	r2, r0
 8010c0c:	000b      	movs	r3, r1
 8010c0e:	0020      	movs	r0, r4
 8010c10:	0029      	movs	r1, r5
 8010c12:	f7ef fc1f 	bl	8000454 <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d100      	bne.n	8010c1c <_dtoa_r+0x628>
 8010c1a:	e716      	b.n	8010a4a <_dtoa_r+0x456>
 8010c1c:	9b08      	ldr	r3, [sp, #32]
 8010c1e:	001a      	movs	r2, r3
 8010c20:	3a01      	subs	r2, #1
 8010c22:	9208      	str	r2, [sp, #32]
 8010c24:	7812      	ldrb	r2, [r2, #0]
 8010c26:	2a30      	cmp	r2, #48	; 0x30
 8010c28:	d0f8      	beq.n	8010c1c <_dtoa_r+0x628>
 8010c2a:	9308      	str	r3, [sp, #32]
 8010c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c2e:	9303      	str	r3, [sp, #12]
 8010c30:	e046      	b.n	8010cc0 <_dtoa_r+0x6cc>
 8010c32:	2200      	movs	r2, #0
 8010c34:	4b2e      	ldr	r3, [pc, #184]	; (8010cf0 <_dtoa_r+0x6fc>)
 8010c36:	f7f0 fd19 	bl	800166c <__aeabi_dmul>
 8010c3a:	0006      	movs	r6, r0
 8010c3c:	000f      	movs	r7, r1
 8010c3e:	e7b2      	b.n	8010ba6 <_dtoa_r+0x5b2>
 8010c40:	9b06      	ldr	r3, [sp, #24]
 8010c42:	9a06      	ldr	r2, [sp, #24]
 8010c44:	930a      	str	r3, [sp, #40]	; 0x28
 8010c46:	9b07      	ldr	r3, [sp, #28]
 8010c48:	9c08      	ldr	r4, [sp, #32]
 8010c4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	189b      	adds	r3, r3, r2
 8010c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c52:	0032      	movs	r2, r6
 8010c54:	003b      	movs	r3, r7
 8010c56:	0020      	movs	r0, r4
 8010c58:	0029      	movs	r1, r5
 8010c5a:	f7f0 f90d 	bl	8000e78 <__aeabi_ddiv>
 8010c5e:	f7f1 fb67 	bl	8002330 <__aeabi_d2iz>
 8010c62:	9007      	str	r0, [sp, #28]
 8010c64:	f7f1 fb9a 	bl	800239c <__aeabi_i2d>
 8010c68:	0032      	movs	r2, r6
 8010c6a:	003b      	movs	r3, r7
 8010c6c:	f7f0 fcfe 	bl	800166c <__aeabi_dmul>
 8010c70:	0002      	movs	r2, r0
 8010c72:	000b      	movs	r3, r1
 8010c74:	0020      	movs	r0, r4
 8010c76:	0029      	movs	r1, r5
 8010c78:	f7f0 ffba 	bl	8001bf0 <__aeabi_dsub>
 8010c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c7e:	001a      	movs	r2, r3
 8010c80:	3201      	adds	r2, #1
 8010c82:	920a      	str	r2, [sp, #40]	; 0x28
 8010c84:	9208      	str	r2, [sp, #32]
 8010c86:	9a07      	ldr	r2, [sp, #28]
 8010c88:	3230      	adds	r2, #48	; 0x30
 8010c8a:	701a      	strb	r2, [r3, #0]
 8010c8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d14f      	bne.n	8010d32 <_dtoa_r+0x73e>
 8010c92:	0002      	movs	r2, r0
 8010c94:	000b      	movs	r3, r1
 8010c96:	f7ef fd8f 	bl	80007b8 <__aeabi_dadd>
 8010c9a:	0032      	movs	r2, r6
 8010c9c:	003b      	movs	r3, r7
 8010c9e:	0004      	movs	r4, r0
 8010ca0:	000d      	movs	r5, r1
 8010ca2:	f7ef fbeb 	bl	800047c <__aeabi_dcmpgt>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	d12e      	bne.n	8010d08 <_dtoa_r+0x714>
 8010caa:	0032      	movs	r2, r6
 8010cac:	003b      	movs	r3, r7
 8010cae:	0020      	movs	r0, r4
 8010cb0:	0029      	movs	r1, r5
 8010cb2:	f7ef fbc9 	bl	8000448 <__aeabi_dcmpeq>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d002      	beq.n	8010cc0 <_dtoa_r+0x6cc>
 8010cba:	9b07      	ldr	r3, [sp, #28]
 8010cbc:	07de      	lsls	r6, r3, #31
 8010cbe:	d423      	bmi.n	8010d08 <_dtoa_r+0x714>
 8010cc0:	9905      	ldr	r1, [sp, #20]
 8010cc2:	9804      	ldr	r0, [sp, #16]
 8010cc4:	f7fc f8fe 	bl	800cec4 <_Bfree>
 8010cc8:	2300      	movs	r3, #0
 8010cca:	9a08      	ldr	r2, [sp, #32]
 8010ccc:	7013      	strb	r3, [r2, #0]
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	6013      	str	r3, [r2, #0]
 8010cd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d100      	bne.n	8010cde <_dtoa_r+0x6ea>
 8010cdc:	e4bd      	b.n	801065a <_dtoa_r+0x66>
 8010cde:	9a08      	ldr	r2, [sp, #32]
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e4ba      	b.n	801065a <_dtoa_r+0x66>
 8010ce4:	08014af8 	.word	0x08014af8
 8010ce8:	08014ad0 	.word	0x08014ad0
 8010cec:	3ff00000 	.word	0x3ff00000
 8010cf0:	40240000 	.word	0x40240000
 8010cf4:	401c0000 	.word	0x401c0000
 8010cf8:	fcc00000 	.word	0xfcc00000
 8010cfc:	40140000 	.word	0x40140000
 8010d00:	7cc00000 	.word	0x7cc00000
 8010d04:	3fe00000 	.word	0x3fe00000
 8010d08:	9b03      	ldr	r3, [sp, #12]
 8010d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8010d0c:	9b08      	ldr	r3, [sp, #32]
 8010d0e:	9308      	str	r3, [sp, #32]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	781a      	ldrb	r2, [r3, #0]
 8010d14:	2a39      	cmp	r2, #57	; 0x39
 8010d16:	d108      	bne.n	8010d2a <_dtoa_r+0x736>
 8010d18:	9a06      	ldr	r2, [sp, #24]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d1f7      	bne.n	8010d0e <_dtoa_r+0x71a>
 8010d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d20:	9906      	ldr	r1, [sp, #24]
 8010d22:	3201      	adds	r2, #1
 8010d24:	920e      	str	r2, [sp, #56]	; 0x38
 8010d26:	2230      	movs	r2, #48	; 0x30
 8010d28:	700a      	strb	r2, [r1, #0]
 8010d2a:	781a      	ldrb	r2, [r3, #0]
 8010d2c:	3201      	adds	r2, #1
 8010d2e:	701a      	strb	r2, [r3, #0]
 8010d30:	e77c      	b.n	8010c2c <_dtoa_r+0x638>
 8010d32:	2200      	movs	r2, #0
 8010d34:	4ba9      	ldr	r3, [pc, #676]	; (8010fdc <_dtoa_r+0x9e8>)
 8010d36:	f7f0 fc99 	bl	800166c <__aeabi_dmul>
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	0004      	movs	r4, r0
 8010d40:	000d      	movs	r5, r1
 8010d42:	f7ef fb81 	bl	8000448 <__aeabi_dcmpeq>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	d100      	bne.n	8010d4c <_dtoa_r+0x758>
 8010d4a:	e782      	b.n	8010c52 <_dtoa_r+0x65e>
 8010d4c:	e7b8      	b.n	8010cc0 <_dtoa_r+0x6cc>
 8010d4e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010d50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d54:	2f00      	cmp	r7, #0
 8010d56:	d012      	beq.n	8010d7e <_dtoa_r+0x78a>
 8010d58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010d5a:	2a01      	cmp	r2, #1
 8010d5c:	dc6e      	bgt.n	8010e3c <_dtoa_r+0x848>
 8010d5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	d065      	beq.n	8010e30 <_dtoa_r+0x83c>
 8010d64:	4a9e      	ldr	r2, [pc, #632]	; (8010fe0 <_dtoa_r+0x9ec>)
 8010d66:	189b      	adds	r3, r3, r2
 8010d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	18d2      	adds	r2, r2, r3
 8010d6e:	920a      	str	r2, [sp, #40]	; 0x28
 8010d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d72:	9804      	ldr	r0, [sp, #16]
 8010d74:	18d3      	adds	r3, r2, r3
 8010d76:	930c      	str	r3, [sp, #48]	; 0x30
 8010d78:	f7fc f986 	bl	800d088 <__i2b>
 8010d7c:	0007      	movs	r7, r0
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	d00e      	beq.n	8010da0 <_dtoa_r+0x7ac>
 8010d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd0b      	ble.n	8010da0 <_dtoa_r+0x7ac>
 8010d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d8a:	0023      	movs	r3, r4
 8010d8c:	4294      	cmp	r4, r2
 8010d8e:	dd00      	ble.n	8010d92 <_dtoa_r+0x79e>
 8010d90:	0013      	movs	r3, r2
 8010d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d94:	1ae4      	subs	r4, r4, r3
 8010d96:	1ad2      	subs	r2, r2, r3
 8010d98:	920a      	str	r2, [sp, #40]	; 0x28
 8010d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8010da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d01e      	beq.n	8010de4 <_dtoa_r+0x7f0>
 8010da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d05c      	beq.n	8010e66 <_dtoa_r+0x872>
 8010dac:	2d00      	cmp	r5, #0
 8010dae:	dd10      	ble.n	8010dd2 <_dtoa_r+0x7de>
 8010db0:	0039      	movs	r1, r7
 8010db2:	002a      	movs	r2, r5
 8010db4:	9804      	ldr	r0, [sp, #16]
 8010db6:	f7fc fa2f 	bl	800d218 <__pow5mult>
 8010dba:	9a05      	ldr	r2, [sp, #20]
 8010dbc:	0001      	movs	r1, r0
 8010dbe:	0007      	movs	r7, r0
 8010dc0:	9804      	ldr	r0, [sp, #16]
 8010dc2:	f7fc f979 	bl	800d0b8 <__multiply>
 8010dc6:	0006      	movs	r6, r0
 8010dc8:	9905      	ldr	r1, [sp, #20]
 8010dca:	9804      	ldr	r0, [sp, #16]
 8010dcc:	f7fc f87a 	bl	800cec4 <_Bfree>
 8010dd0:	9605      	str	r6, [sp, #20]
 8010dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dd4:	1b5a      	subs	r2, r3, r5
 8010dd6:	42ab      	cmp	r3, r5
 8010dd8:	d004      	beq.n	8010de4 <_dtoa_r+0x7f0>
 8010dda:	9905      	ldr	r1, [sp, #20]
 8010ddc:	9804      	ldr	r0, [sp, #16]
 8010dde:	f7fc fa1b 	bl	800d218 <__pow5mult>
 8010de2:	9005      	str	r0, [sp, #20]
 8010de4:	2101      	movs	r1, #1
 8010de6:	9804      	ldr	r0, [sp, #16]
 8010de8:	f7fc f94e 	bl	800d088 <__i2b>
 8010dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010dee:	0006      	movs	r6, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dd3a      	ble.n	8010e6a <_dtoa_r+0x876>
 8010df4:	001a      	movs	r2, r3
 8010df6:	0001      	movs	r1, r0
 8010df8:	9804      	ldr	r0, [sp, #16]
 8010dfa:	f7fc fa0d 	bl	800d218 <__pow5mult>
 8010dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e00:	0006      	movs	r6, r0
 8010e02:	2500      	movs	r5, #0
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	dc38      	bgt.n	8010e7a <_dtoa_r+0x886>
 8010e08:	2500      	movs	r5, #0
 8010e0a:	9b08      	ldr	r3, [sp, #32]
 8010e0c:	42ab      	cmp	r3, r5
 8010e0e:	d130      	bne.n	8010e72 <_dtoa_r+0x87e>
 8010e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e12:	031b      	lsls	r3, r3, #12
 8010e14:	42ab      	cmp	r3, r5
 8010e16:	d12c      	bne.n	8010e72 <_dtoa_r+0x87e>
 8010e18:	4b72      	ldr	r3, [pc, #456]	; (8010fe4 <_dtoa_r+0x9f0>)
 8010e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e1c:	4213      	tst	r3, r2
 8010e1e:	d028      	beq.n	8010e72 <_dtoa_r+0x87e>
 8010e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e22:	3501      	adds	r5, #1
 8010e24:	3301      	adds	r3, #1
 8010e26:	930a      	str	r3, [sp, #40]	; 0x28
 8010e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8010e2e:	e020      	b.n	8010e72 <_dtoa_r+0x87e>
 8010e30:	2336      	movs	r3, #54	; 0x36
 8010e32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e38:	1a9b      	subs	r3, r3, r2
 8010e3a:	e795      	b.n	8010d68 <_dtoa_r+0x774>
 8010e3c:	9b07      	ldr	r3, [sp, #28]
 8010e3e:	1e5d      	subs	r5, r3, #1
 8010e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e42:	42ab      	cmp	r3, r5
 8010e44:	db07      	blt.n	8010e56 <_dtoa_r+0x862>
 8010e46:	1b5d      	subs	r5, r3, r5
 8010e48:	9b07      	ldr	r3, [sp, #28]
 8010e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	da8b      	bge.n	8010d68 <_dtoa_r+0x774>
 8010e50:	1ae4      	subs	r4, r4, r3
 8010e52:	2300      	movs	r3, #0
 8010e54:	e788      	b.n	8010d68 <_dtoa_r+0x774>
 8010e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e5a:	1aeb      	subs	r3, r5, r3
 8010e5c:	18d3      	adds	r3, r2, r3
 8010e5e:	950d      	str	r5, [sp, #52]	; 0x34
 8010e60:	9313      	str	r3, [sp, #76]	; 0x4c
 8010e62:	2500      	movs	r5, #0
 8010e64:	e7f0      	b.n	8010e48 <_dtoa_r+0x854>
 8010e66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e68:	e7b7      	b.n	8010dda <_dtoa_r+0x7e6>
 8010e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	ddca      	ble.n	8010e08 <_dtoa_r+0x814>
 8010e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e74:	2001      	movs	r0, #1
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d008      	beq.n	8010e8c <_dtoa_r+0x898>
 8010e7a:	6933      	ldr	r3, [r6, #16]
 8010e7c:	3303      	adds	r3, #3
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	18f3      	adds	r3, r6, r3
 8010e82:	6858      	ldr	r0, [r3, #4]
 8010e84:	f7fc f8b8 	bl	800cff8 <__hi0bits>
 8010e88:	2320      	movs	r3, #32
 8010e8a:	1a18      	subs	r0, r3, r0
 8010e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e8e:	1818      	adds	r0, r3, r0
 8010e90:	0002      	movs	r2, r0
 8010e92:	231f      	movs	r3, #31
 8010e94:	401a      	ands	r2, r3
 8010e96:	4218      	tst	r0, r3
 8010e98:	d047      	beq.n	8010f2a <_dtoa_r+0x936>
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	1a9b      	subs	r3, r3, r2
 8010e9e:	2b04      	cmp	r3, #4
 8010ea0:	dd3f      	ble.n	8010f22 <_dtoa_r+0x92e>
 8010ea2:	231c      	movs	r3, #28
 8010ea4:	1a9b      	subs	r3, r3, r2
 8010ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ea8:	18e4      	adds	r4, r4, r3
 8010eaa:	18d2      	adds	r2, r2, r3
 8010eac:	920a      	str	r2, [sp, #40]	; 0x28
 8010eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010eb0:	18d3      	adds	r3, r2, r3
 8010eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8010eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	dd05      	ble.n	8010ec6 <_dtoa_r+0x8d2>
 8010eba:	001a      	movs	r2, r3
 8010ebc:	9905      	ldr	r1, [sp, #20]
 8010ebe:	9804      	ldr	r0, [sp, #16]
 8010ec0:	f7fc f9ec 	bl	800d29c <__lshift>
 8010ec4:	9005      	str	r0, [sp, #20]
 8010ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dd05      	ble.n	8010ed8 <_dtoa_r+0x8e4>
 8010ecc:	0031      	movs	r1, r6
 8010ece:	001a      	movs	r2, r3
 8010ed0:	9804      	ldr	r0, [sp, #16]
 8010ed2:	f7fc f9e3 	bl	800d29c <__lshift>
 8010ed6:	0006      	movs	r6, r0
 8010ed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d027      	beq.n	8010f2e <_dtoa_r+0x93a>
 8010ede:	0031      	movs	r1, r6
 8010ee0:	9805      	ldr	r0, [sp, #20]
 8010ee2:	f7fc fa49 	bl	800d378 <__mcmp>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	da21      	bge.n	8010f2e <_dtoa_r+0x93a>
 8010eea:	9b03      	ldr	r3, [sp, #12]
 8010eec:	220a      	movs	r2, #10
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	9303      	str	r3, [sp, #12]
 8010ef2:	9905      	ldr	r1, [sp, #20]
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9804      	ldr	r0, [sp, #16]
 8010ef8:	f7fb ffee 	bl	800ced8 <__multadd>
 8010efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010efe:	9005      	str	r0, [sp, #20]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d100      	bne.n	8010f06 <_dtoa_r+0x912>
 8010f04:	e15d      	b.n	80111c2 <_dtoa_r+0xbce>
 8010f06:	2300      	movs	r3, #0
 8010f08:	0039      	movs	r1, r7
 8010f0a:	220a      	movs	r2, #10
 8010f0c:	9804      	ldr	r0, [sp, #16]
 8010f0e:	f7fb ffe3 	bl	800ced8 <__multadd>
 8010f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f14:	0007      	movs	r7, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	dc49      	bgt.n	8010fae <_dtoa_r+0x9ba>
 8010f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	dc0e      	bgt.n	8010f3e <_dtoa_r+0x94a>
 8010f20:	e045      	b.n	8010fae <_dtoa_r+0x9ba>
 8010f22:	2b04      	cmp	r3, #4
 8010f24:	d0c6      	beq.n	8010eb4 <_dtoa_r+0x8c0>
 8010f26:	331c      	adds	r3, #28
 8010f28:	e7bd      	b.n	8010ea6 <_dtoa_r+0x8b2>
 8010f2a:	0013      	movs	r3, r2
 8010f2c:	e7fb      	b.n	8010f26 <_dtoa_r+0x932>
 8010f2e:	9b07      	ldr	r3, [sp, #28]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dc36      	bgt.n	8010fa2 <_dtoa_r+0x9ae>
 8010f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	dd33      	ble.n	8010fa2 <_dtoa_r+0x9ae>
 8010f3a:	9b07      	ldr	r3, [sp, #28]
 8010f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10c      	bne.n	8010f5e <_dtoa_r+0x96a>
 8010f44:	0031      	movs	r1, r6
 8010f46:	2205      	movs	r2, #5
 8010f48:	9804      	ldr	r0, [sp, #16]
 8010f4a:	f7fb ffc5 	bl	800ced8 <__multadd>
 8010f4e:	0006      	movs	r6, r0
 8010f50:	0001      	movs	r1, r0
 8010f52:	9805      	ldr	r0, [sp, #20]
 8010f54:	f7fc fa10 	bl	800d378 <__mcmp>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	dd00      	ble.n	8010f5e <_dtoa_r+0x96a>
 8010f5c:	e59f      	b.n	8010a9e <_dtoa_r+0x4aa>
 8010f5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f60:	43db      	mvns	r3, r3
 8010f62:	9303      	str	r3, [sp, #12]
 8010f64:	9b06      	ldr	r3, [sp, #24]
 8010f66:	9308      	str	r3, [sp, #32]
 8010f68:	2500      	movs	r5, #0
 8010f6a:	0031      	movs	r1, r6
 8010f6c:	9804      	ldr	r0, [sp, #16]
 8010f6e:	f7fb ffa9 	bl	800cec4 <_Bfree>
 8010f72:	2f00      	cmp	r7, #0
 8010f74:	d100      	bne.n	8010f78 <_dtoa_r+0x984>
 8010f76:	e6a3      	b.n	8010cc0 <_dtoa_r+0x6cc>
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d005      	beq.n	8010f88 <_dtoa_r+0x994>
 8010f7c:	42bd      	cmp	r5, r7
 8010f7e:	d003      	beq.n	8010f88 <_dtoa_r+0x994>
 8010f80:	0029      	movs	r1, r5
 8010f82:	9804      	ldr	r0, [sp, #16]
 8010f84:	f7fb ff9e 	bl	800cec4 <_Bfree>
 8010f88:	0039      	movs	r1, r7
 8010f8a:	9804      	ldr	r0, [sp, #16]
 8010f8c:	f7fb ff9a 	bl	800cec4 <_Bfree>
 8010f90:	e696      	b.n	8010cc0 <_dtoa_r+0x6cc>
 8010f92:	2600      	movs	r6, #0
 8010f94:	0037      	movs	r7, r6
 8010f96:	e7e2      	b.n	8010f5e <_dtoa_r+0x96a>
 8010f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010f9c:	9303      	str	r3, [sp, #12]
 8010f9e:	0037      	movs	r7, r6
 8010fa0:	e57d      	b.n	8010a9e <_dtoa_r+0x4aa>
 8010fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d100      	bne.n	8010faa <_dtoa_r+0x9b6>
 8010fa8:	e0c3      	b.n	8011132 <_dtoa_r+0xb3e>
 8010faa:	9b07      	ldr	r3, [sp, #28]
 8010fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fae:	2c00      	cmp	r4, #0
 8010fb0:	dd05      	ble.n	8010fbe <_dtoa_r+0x9ca>
 8010fb2:	0039      	movs	r1, r7
 8010fb4:	0022      	movs	r2, r4
 8010fb6:	9804      	ldr	r0, [sp, #16]
 8010fb8:	f7fc f970 	bl	800d29c <__lshift>
 8010fbc:	0007      	movs	r7, r0
 8010fbe:	0038      	movs	r0, r7
 8010fc0:	2d00      	cmp	r5, #0
 8010fc2:	d024      	beq.n	801100e <_dtoa_r+0xa1a>
 8010fc4:	6879      	ldr	r1, [r7, #4]
 8010fc6:	9804      	ldr	r0, [sp, #16]
 8010fc8:	f7fb ff54 	bl	800ce74 <_Balloc>
 8010fcc:	1e04      	subs	r4, r0, #0
 8010fce:	d111      	bne.n	8010ff4 <_dtoa_r+0xa00>
 8010fd0:	0022      	movs	r2, r4
 8010fd2:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <_dtoa_r+0x9f4>)
 8010fd4:	4805      	ldr	r0, [pc, #20]	; (8010fec <_dtoa_r+0x9f8>)
 8010fd6:	4906      	ldr	r1, [pc, #24]	; (8010ff0 <_dtoa_r+0x9fc>)
 8010fd8:	e43c      	b.n	8010854 <_dtoa_r+0x260>
 8010fda:	46c0      	nop			; (mov r8, r8)
 8010fdc:	40240000 	.word	0x40240000
 8010fe0:	00000433 	.word	0x00000433
 8010fe4:	7ff00000 	.word	0x7ff00000
 8010fe8:	08014a01 	.word	0x08014a01
 8010fec:	08014c91 	.word	0x08014c91
 8010ff0:	000002ef 	.word	0x000002ef
 8010ff4:	0039      	movs	r1, r7
 8010ff6:	693a      	ldr	r2, [r7, #16]
 8010ff8:	310c      	adds	r1, #12
 8010ffa:	3202      	adds	r2, #2
 8010ffc:	0092      	lsls	r2, r2, #2
 8010ffe:	300c      	adds	r0, #12
 8011000:	f7fb fa9d 	bl	800c53e <memcpy>
 8011004:	2201      	movs	r2, #1
 8011006:	0021      	movs	r1, r4
 8011008:	9804      	ldr	r0, [sp, #16]
 801100a:	f7fc f947 	bl	800d29c <__lshift>
 801100e:	9b06      	ldr	r3, [sp, #24]
 8011010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011012:	9307      	str	r3, [sp, #28]
 8011014:	3b01      	subs	r3, #1
 8011016:	189b      	adds	r3, r3, r2
 8011018:	2201      	movs	r2, #1
 801101a:	003d      	movs	r5, r7
 801101c:	0007      	movs	r7, r0
 801101e:	930e      	str	r3, [sp, #56]	; 0x38
 8011020:	9b08      	ldr	r3, [sp, #32]
 8011022:	4013      	ands	r3, r2
 8011024:	930d      	str	r3, [sp, #52]	; 0x34
 8011026:	0031      	movs	r1, r6
 8011028:	9805      	ldr	r0, [sp, #20]
 801102a:	f7ff fa53 	bl	80104d4 <quorem>
 801102e:	0029      	movs	r1, r5
 8011030:	0004      	movs	r4, r0
 8011032:	900b      	str	r0, [sp, #44]	; 0x2c
 8011034:	9805      	ldr	r0, [sp, #20]
 8011036:	f7fc f99f 	bl	800d378 <__mcmp>
 801103a:	003a      	movs	r2, r7
 801103c:	900c      	str	r0, [sp, #48]	; 0x30
 801103e:	0031      	movs	r1, r6
 8011040:	9804      	ldr	r0, [sp, #16]
 8011042:	f7fc f9b5 	bl	800d3b0 <__mdiff>
 8011046:	2201      	movs	r2, #1
 8011048:	68c3      	ldr	r3, [r0, #12]
 801104a:	3430      	adds	r4, #48	; 0x30
 801104c:	9008      	str	r0, [sp, #32]
 801104e:	920a      	str	r2, [sp, #40]	; 0x28
 8011050:	2b00      	cmp	r3, #0
 8011052:	d104      	bne.n	801105e <_dtoa_r+0xa6a>
 8011054:	0001      	movs	r1, r0
 8011056:	9805      	ldr	r0, [sp, #20]
 8011058:	f7fc f98e 	bl	800d378 <__mcmp>
 801105c:	900a      	str	r0, [sp, #40]	; 0x28
 801105e:	9908      	ldr	r1, [sp, #32]
 8011060:	9804      	ldr	r0, [sp, #16]
 8011062:	f7fb ff2f 	bl	800cec4 <_Bfree>
 8011066:	9b07      	ldr	r3, [sp, #28]
 8011068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801106a:	3301      	adds	r3, #1
 801106c:	9308      	str	r3, [sp, #32]
 801106e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011070:	4313      	orrs	r3, r2
 8011072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011074:	4313      	orrs	r3, r2
 8011076:	d109      	bne.n	801108c <_dtoa_r+0xa98>
 8011078:	2c39      	cmp	r4, #57	; 0x39
 801107a:	d022      	beq.n	80110c2 <_dtoa_r+0xace>
 801107c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801107e:	2b00      	cmp	r3, #0
 8011080:	dd01      	ble.n	8011086 <_dtoa_r+0xa92>
 8011082:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011084:	3431      	adds	r4, #49	; 0x31
 8011086:	9b07      	ldr	r3, [sp, #28]
 8011088:	701c      	strb	r4, [r3, #0]
 801108a:	e76e      	b.n	8010f6a <_dtoa_r+0x976>
 801108c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801108e:	2b00      	cmp	r3, #0
 8011090:	db04      	blt.n	801109c <_dtoa_r+0xaa8>
 8011092:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011094:	4313      	orrs	r3, r2
 8011096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011098:	4313      	orrs	r3, r2
 801109a:	d11e      	bne.n	80110da <_dtoa_r+0xae6>
 801109c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801109e:	2b00      	cmp	r3, #0
 80110a0:	ddf1      	ble.n	8011086 <_dtoa_r+0xa92>
 80110a2:	9905      	ldr	r1, [sp, #20]
 80110a4:	2201      	movs	r2, #1
 80110a6:	9804      	ldr	r0, [sp, #16]
 80110a8:	f7fc f8f8 	bl	800d29c <__lshift>
 80110ac:	0031      	movs	r1, r6
 80110ae:	9005      	str	r0, [sp, #20]
 80110b0:	f7fc f962 	bl	800d378 <__mcmp>
 80110b4:	2800      	cmp	r0, #0
 80110b6:	dc02      	bgt.n	80110be <_dtoa_r+0xaca>
 80110b8:	d1e5      	bne.n	8011086 <_dtoa_r+0xa92>
 80110ba:	07e3      	lsls	r3, r4, #31
 80110bc:	d5e3      	bpl.n	8011086 <_dtoa_r+0xa92>
 80110be:	2c39      	cmp	r4, #57	; 0x39
 80110c0:	d1df      	bne.n	8011082 <_dtoa_r+0xa8e>
 80110c2:	2339      	movs	r3, #57	; 0x39
 80110c4:	9a07      	ldr	r2, [sp, #28]
 80110c6:	7013      	strb	r3, [r2, #0]
 80110c8:	9b08      	ldr	r3, [sp, #32]
 80110ca:	9308      	str	r3, [sp, #32]
 80110cc:	3b01      	subs	r3, #1
 80110ce:	781a      	ldrb	r2, [r3, #0]
 80110d0:	2a39      	cmp	r2, #57	; 0x39
 80110d2:	d063      	beq.n	801119c <_dtoa_r+0xba8>
 80110d4:	3201      	adds	r2, #1
 80110d6:	701a      	strb	r2, [r3, #0]
 80110d8:	e747      	b.n	8010f6a <_dtoa_r+0x976>
 80110da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110dc:	2b00      	cmp	r3, #0
 80110de:	dd03      	ble.n	80110e8 <_dtoa_r+0xaf4>
 80110e0:	2c39      	cmp	r4, #57	; 0x39
 80110e2:	d0ee      	beq.n	80110c2 <_dtoa_r+0xace>
 80110e4:	3401      	adds	r4, #1
 80110e6:	e7ce      	b.n	8011086 <_dtoa_r+0xa92>
 80110e8:	9b07      	ldr	r3, [sp, #28]
 80110ea:	9a07      	ldr	r2, [sp, #28]
 80110ec:	701c      	strb	r4, [r3, #0]
 80110ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d03e      	beq.n	8011172 <_dtoa_r+0xb7e>
 80110f4:	2300      	movs	r3, #0
 80110f6:	220a      	movs	r2, #10
 80110f8:	9905      	ldr	r1, [sp, #20]
 80110fa:	9804      	ldr	r0, [sp, #16]
 80110fc:	f7fb feec 	bl	800ced8 <__multadd>
 8011100:	2300      	movs	r3, #0
 8011102:	9005      	str	r0, [sp, #20]
 8011104:	220a      	movs	r2, #10
 8011106:	0029      	movs	r1, r5
 8011108:	9804      	ldr	r0, [sp, #16]
 801110a:	42bd      	cmp	r5, r7
 801110c:	d106      	bne.n	801111c <_dtoa_r+0xb28>
 801110e:	f7fb fee3 	bl	800ced8 <__multadd>
 8011112:	0005      	movs	r5, r0
 8011114:	0007      	movs	r7, r0
 8011116:	9b08      	ldr	r3, [sp, #32]
 8011118:	9307      	str	r3, [sp, #28]
 801111a:	e784      	b.n	8011026 <_dtoa_r+0xa32>
 801111c:	f7fb fedc 	bl	800ced8 <__multadd>
 8011120:	0039      	movs	r1, r7
 8011122:	0005      	movs	r5, r0
 8011124:	2300      	movs	r3, #0
 8011126:	220a      	movs	r2, #10
 8011128:	9804      	ldr	r0, [sp, #16]
 801112a:	f7fb fed5 	bl	800ced8 <__multadd>
 801112e:	0007      	movs	r7, r0
 8011130:	e7f1      	b.n	8011116 <_dtoa_r+0xb22>
 8011132:	9b07      	ldr	r3, [sp, #28]
 8011134:	930b      	str	r3, [sp, #44]	; 0x2c
 8011136:	2500      	movs	r5, #0
 8011138:	0031      	movs	r1, r6
 801113a:	9805      	ldr	r0, [sp, #20]
 801113c:	f7ff f9ca 	bl	80104d4 <quorem>
 8011140:	9b06      	ldr	r3, [sp, #24]
 8011142:	3030      	adds	r0, #48	; 0x30
 8011144:	5558      	strb	r0, [r3, r5]
 8011146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011148:	3501      	adds	r5, #1
 801114a:	0004      	movs	r4, r0
 801114c:	42ab      	cmp	r3, r5
 801114e:	dd07      	ble.n	8011160 <_dtoa_r+0xb6c>
 8011150:	2300      	movs	r3, #0
 8011152:	220a      	movs	r2, #10
 8011154:	9905      	ldr	r1, [sp, #20]
 8011156:	9804      	ldr	r0, [sp, #16]
 8011158:	f7fb febe 	bl	800ced8 <__multadd>
 801115c:	9005      	str	r0, [sp, #20]
 801115e:	e7eb      	b.n	8011138 <_dtoa_r+0xb44>
 8011160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011162:	2301      	movs	r3, #1
 8011164:	2a00      	cmp	r2, #0
 8011166:	dd00      	ble.n	801116a <_dtoa_r+0xb76>
 8011168:	0013      	movs	r3, r2
 801116a:	2500      	movs	r5, #0
 801116c:	9a06      	ldr	r2, [sp, #24]
 801116e:	18d3      	adds	r3, r2, r3
 8011170:	9308      	str	r3, [sp, #32]
 8011172:	9905      	ldr	r1, [sp, #20]
 8011174:	2201      	movs	r2, #1
 8011176:	9804      	ldr	r0, [sp, #16]
 8011178:	f7fc f890 	bl	800d29c <__lshift>
 801117c:	0031      	movs	r1, r6
 801117e:	9005      	str	r0, [sp, #20]
 8011180:	f7fc f8fa 	bl	800d378 <__mcmp>
 8011184:	2800      	cmp	r0, #0
 8011186:	dc9f      	bgt.n	80110c8 <_dtoa_r+0xad4>
 8011188:	d101      	bne.n	801118e <_dtoa_r+0xb9a>
 801118a:	07e4      	lsls	r4, r4, #31
 801118c:	d49c      	bmi.n	80110c8 <_dtoa_r+0xad4>
 801118e:	9b08      	ldr	r3, [sp, #32]
 8011190:	9308      	str	r3, [sp, #32]
 8011192:	3b01      	subs	r3, #1
 8011194:	781a      	ldrb	r2, [r3, #0]
 8011196:	2a30      	cmp	r2, #48	; 0x30
 8011198:	d0fa      	beq.n	8011190 <_dtoa_r+0xb9c>
 801119a:	e6e6      	b.n	8010f6a <_dtoa_r+0x976>
 801119c:	9a06      	ldr	r2, [sp, #24]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d193      	bne.n	80110ca <_dtoa_r+0xad6>
 80111a2:	9b03      	ldr	r3, [sp, #12]
 80111a4:	3301      	adds	r3, #1
 80111a6:	9303      	str	r3, [sp, #12]
 80111a8:	2331      	movs	r3, #49	; 0x31
 80111aa:	7013      	strb	r3, [r2, #0]
 80111ac:	e6dd      	b.n	8010f6a <_dtoa_r+0x976>
 80111ae:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <_dtoa_r+0xbe0>)
 80111b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80111b2:	9306      	str	r3, [sp, #24]
 80111b4:	4b08      	ldr	r3, [pc, #32]	; (80111d8 <_dtoa_r+0xbe4>)
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	d001      	beq.n	80111be <_dtoa_r+0xbca>
 80111ba:	f7ff fa4c 	bl	8010656 <_dtoa_r+0x62>
 80111be:	f7ff fa4c 	bl	801065a <_dtoa_r+0x66>
 80111c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	dcb6      	bgt.n	8011136 <_dtoa_r+0xb42>
 80111c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	dd00      	ble.n	80111d0 <_dtoa_r+0xbdc>
 80111ce:	e6b6      	b.n	8010f3e <_dtoa_r+0x94a>
 80111d0:	e7b1      	b.n	8011136 <_dtoa_r+0xb42>
 80111d2:	46c0      	nop			; (mov r8, r8)
 80111d4:	08014c84 	.word	0x08014c84
 80111d8:	08014c8c 	.word	0x08014c8c

080111dc <realloc>:
 80111dc:	b510      	push	{r4, lr}
 80111de:	4b03      	ldr	r3, [pc, #12]	; (80111ec <realloc+0x10>)
 80111e0:	000a      	movs	r2, r1
 80111e2:	0001      	movs	r1, r0
 80111e4:	6818      	ldr	r0, [r3, #0]
 80111e6:	f000 f803 	bl	80111f0 <_realloc_r>
 80111ea:	bd10      	pop	{r4, pc}
 80111ec:	200006d8 	.word	0x200006d8

080111f0 <_realloc_r>:
 80111f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111f2:	b087      	sub	sp, #28
 80111f4:	1e0c      	subs	r4, r1, #0
 80111f6:	9001      	str	r0, [sp, #4]
 80111f8:	9205      	str	r2, [sp, #20]
 80111fa:	d106      	bne.n	801120a <_realloc_r+0x1a>
 80111fc:	0011      	movs	r1, r2
 80111fe:	f7f9 fe39 	bl	800ae74 <_malloc_r>
 8011202:	0007      	movs	r7, r0
 8011204:	0038      	movs	r0, r7
 8011206:	b007      	add	sp, #28
 8011208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801120a:	9801      	ldr	r0, [sp, #4]
 801120c:	f7fa f846 	bl	800b29c <__malloc_lock>
 8011210:	0023      	movs	r3, r4
 8011212:	3b08      	subs	r3, #8
 8011214:	685f      	ldr	r7, [r3, #4]
 8011216:	9304      	str	r3, [sp, #16]
 8011218:	9b05      	ldr	r3, [sp, #20]
 801121a:	330b      	adds	r3, #11
 801121c:	2b16      	cmp	r3, #22
 801121e:	d908      	bls.n	8011232 <_realloc_r+0x42>
 8011220:	2207      	movs	r2, #7
 8011222:	4393      	bics	r3, r2
 8011224:	9300      	str	r3, [sp, #0]
 8011226:	d506      	bpl.n	8011236 <_realloc_r+0x46>
 8011228:	230c      	movs	r3, #12
 801122a:	9a01      	ldr	r2, [sp, #4]
 801122c:	2700      	movs	r7, #0
 801122e:	6013      	str	r3, [r2, #0]
 8011230:	e7e8      	b.n	8011204 <_realloc_r+0x14>
 8011232:	2310      	movs	r3, #16
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	9a05      	ldr	r2, [sp, #20]
 801123a:	4293      	cmp	r3, r2
 801123c:	d3f4      	bcc.n	8011228 <_realloc_r+0x38>
 801123e:	9b04      	ldr	r3, [sp, #16]
 8011240:	003a      	movs	r2, r7
 8011242:	9302      	str	r3, [sp, #8]
 8011244:	2303      	movs	r3, #3
 8011246:	439a      	bics	r2, r3
 8011248:	9b00      	ldr	r3, [sp, #0]
 801124a:	9203      	str	r2, [sp, #12]
 801124c:	4293      	cmp	r3, r2
 801124e:	dc00      	bgt.n	8011252 <_realloc_r+0x62>
 8011250:	e169      	b.n	8011526 <_realloc_r+0x336>
 8011252:	9b04      	ldr	r3, [sp, #16]
 8011254:	48b8      	ldr	r0, [pc, #736]	; (8011538 <_realloc_r+0x348>)
 8011256:	189b      	adds	r3, r3, r2
 8011258:	6882      	ldr	r2, [r0, #8]
 801125a:	4694      	mov	ip, r2
 801125c:	685a      	ldr	r2, [r3, #4]
 801125e:	459c      	cmp	ip, r3
 8011260:	d006      	beq.n	8011270 <_realloc_r+0x80>
 8011262:	2501      	movs	r5, #1
 8011264:	0011      	movs	r1, r2
 8011266:	43a9      	bics	r1, r5
 8011268:	1859      	adds	r1, r3, r1
 801126a:	6849      	ldr	r1, [r1, #4]
 801126c:	4229      	tst	r1, r5
 801126e:	d144      	bne.n	80112fa <_realloc_r+0x10a>
 8011270:	2103      	movs	r1, #3
 8011272:	438a      	bics	r2, r1
 8011274:	9903      	ldr	r1, [sp, #12]
 8011276:	188e      	adds	r6, r1, r2
 8011278:	9900      	ldr	r1, [sp, #0]
 801127a:	459c      	cmp	ip, r3
 801127c:	d117      	bne.n	80112ae <_realloc_r+0xbe>
 801127e:	3110      	adds	r1, #16
 8011280:	42b1      	cmp	r1, r6
 8011282:	dc3c      	bgt.n	80112fe <_realloc_r+0x10e>
 8011284:	9a00      	ldr	r2, [sp, #0]
 8011286:	2101      	movs	r1, #1
 8011288:	4694      	mov	ip, r2
 801128a:	1ab6      	subs	r6, r6, r2
 801128c:	0022      	movs	r2, r4
 801128e:	9b04      	ldr	r3, [sp, #16]
 8011290:	430e      	orrs	r6, r1
 8011292:	4463      	add	r3, ip
 8011294:	6083      	str	r3, [r0, #8]
 8011296:	3a08      	subs	r2, #8
 8011298:	605e      	str	r6, [r3, #4]
 801129a:	6853      	ldr	r3, [r2, #4]
 801129c:	9801      	ldr	r0, [sp, #4]
 801129e:	400b      	ands	r3, r1
 80112a0:	4661      	mov	r1, ip
 80112a2:	430b      	orrs	r3, r1
 80112a4:	6053      	str	r3, [r2, #4]
 80112a6:	f7fa f801 	bl	800b2ac <__malloc_unlock>
 80112aa:	0027      	movs	r7, r4
 80112ac:	e7aa      	b.n	8011204 <_realloc_r+0x14>
 80112ae:	42b1      	cmp	r1, r6
 80112b0:	dc25      	bgt.n	80112fe <_realloc_r+0x10e>
 80112b2:	68da      	ldr	r2, [r3, #12]
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	60da      	str	r2, [r3, #12]
 80112b8:	6093      	str	r3, [r2, #8]
 80112ba:	9b00      	ldr	r3, [sp, #0]
 80112bc:	9a02      	ldr	r2, [sp, #8]
 80112be:	1af4      	subs	r4, r6, r3
 80112c0:	9b02      	ldr	r3, [sp, #8]
 80112c2:	1992      	adds	r2, r2, r6
 80112c4:	6858      	ldr	r0, [r3, #4]
 80112c6:	2301      	movs	r3, #1
 80112c8:	4018      	ands	r0, r3
 80112ca:	2c0f      	cmp	r4, #15
 80112cc:	d800      	bhi.n	80112d0 <_realloc_r+0xe0>
 80112ce:	e12c      	b.n	801152a <_realloc_r+0x33a>
 80112d0:	9d00      	ldr	r5, [sp, #0]
 80112d2:	9902      	ldr	r1, [sp, #8]
 80112d4:	4328      	orrs	r0, r5
 80112d6:	1949      	adds	r1, r1, r5
 80112d8:	9d02      	ldr	r5, [sp, #8]
 80112da:	431c      	orrs	r4, r3
 80112dc:	6068      	str	r0, [r5, #4]
 80112de:	604c      	str	r4, [r1, #4]
 80112e0:	6850      	ldr	r0, [r2, #4]
 80112e2:	3108      	adds	r1, #8
 80112e4:	4303      	orrs	r3, r0
 80112e6:	6053      	str	r3, [r2, #4]
 80112e8:	9801      	ldr	r0, [sp, #4]
 80112ea:	f7fb f9a3 	bl	800c634 <_free_r>
 80112ee:	9801      	ldr	r0, [sp, #4]
 80112f0:	f7f9 ffdc 	bl	800b2ac <__malloc_unlock>
 80112f4:	9f02      	ldr	r7, [sp, #8]
 80112f6:	3708      	adds	r7, #8
 80112f8:	e784      	b.n	8011204 <_realloc_r+0x14>
 80112fa:	2200      	movs	r2, #0
 80112fc:	0013      	movs	r3, r2
 80112fe:	07ff      	lsls	r7, r7, #31
 8011300:	d500      	bpl.n	8011304 <_realloc_r+0x114>
 8011302:	e0c6      	b.n	8011492 <_realloc_r+0x2a2>
 8011304:	0021      	movs	r1, r4
 8011306:	2003      	movs	r0, #3
 8011308:	3908      	subs	r1, #8
 801130a:	680d      	ldr	r5, [r1, #0]
 801130c:	9904      	ldr	r1, [sp, #16]
 801130e:	1b4d      	subs	r5, r1, r5
 8011310:	6869      	ldr	r1, [r5, #4]
 8011312:	4381      	bics	r1, r0
 8011314:	9803      	ldr	r0, [sp, #12]
 8011316:	180f      	adds	r7, r1, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d100      	bne.n	801131e <_realloc_r+0x12e>
 801131c:	e084      	b.n	8011428 <_realloc_r+0x238>
 801131e:	19d6      	adds	r6, r2, r7
 8011320:	459c      	cmp	ip, r3
 8011322:	d148      	bne.n	80113b6 <_realloc_r+0x1c6>
 8011324:	9b00      	ldr	r3, [sp, #0]
 8011326:	3310      	adds	r3, #16
 8011328:	42b3      	cmp	r3, r6
 801132a:	dc7d      	bgt.n	8011428 <_realloc_r+0x238>
 801132c:	68aa      	ldr	r2, [r5, #8]
 801132e:	68eb      	ldr	r3, [r5, #12]
 8011330:	002f      	movs	r7, r5
 8011332:	60d3      	str	r3, [r2, #12]
 8011334:	609a      	str	r2, [r3, #8]
 8011336:	0002      	movs	r2, r0
 8011338:	3a04      	subs	r2, #4
 801133a:	3708      	adds	r7, #8
 801133c:	2a24      	cmp	r2, #36	; 0x24
 801133e:	d835      	bhi.n	80113ac <_realloc_r+0x1bc>
 8011340:	003b      	movs	r3, r7
 8011342:	2a13      	cmp	r2, #19
 8011344:	d908      	bls.n	8011358 <_realloc_r+0x168>
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	60ab      	str	r3, [r5, #8]
 801134a:	6863      	ldr	r3, [r4, #4]
 801134c:	60eb      	str	r3, [r5, #12]
 801134e:	2a1b      	cmp	r2, #27
 8011350:	d81a      	bhi.n	8011388 <_realloc_r+0x198>
 8011352:	002b      	movs	r3, r5
 8011354:	3408      	adds	r4, #8
 8011356:	3310      	adds	r3, #16
 8011358:	6822      	ldr	r2, [r4, #0]
 801135a:	601a      	str	r2, [r3, #0]
 801135c:	6862      	ldr	r2, [r4, #4]
 801135e:	605a      	str	r2, [r3, #4]
 8011360:	68a2      	ldr	r2, [r4, #8]
 8011362:	609a      	str	r2, [r3, #8]
 8011364:	9b00      	ldr	r3, [sp, #0]
 8011366:	4a74      	ldr	r2, [pc, #464]	; (8011538 <_realloc_r+0x348>)
 8011368:	18eb      	adds	r3, r5, r3
 801136a:	6093      	str	r3, [r2, #8]
 801136c:	9a00      	ldr	r2, [sp, #0]
 801136e:	1ab6      	subs	r6, r6, r2
 8011370:	2201      	movs	r2, #1
 8011372:	4316      	orrs	r6, r2
 8011374:	605e      	str	r6, [r3, #4]
 8011376:	686b      	ldr	r3, [r5, #4]
 8011378:	4013      	ands	r3, r2
 801137a:	9a00      	ldr	r2, [sp, #0]
 801137c:	4313      	orrs	r3, r2
 801137e:	606b      	str	r3, [r5, #4]
 8011380:	9801      	ldr	r0, [sp, #4]
 8011382:	f7f9 ff93 	bl	800b2ac <__malloc_unlock>
 8011386:	e73d      	b.n	8011204 <_realloc_r+0x14>
 8011388:	68a3      	ldr	r3, [r4, #8]
 801138a:	612b      	str	r3, [r5, #16]
 801138c:	68e3      	ldr	r3, [r4, #12]
 801138e:	616b      	str	r3, [r5, #20]
 8011390:	2a24      	cmp	r2, #36	; 0x24
 8011392:	d003      	beq.n	801139c <_realloc_r+0x1ac>
 8011394:	002b      	movs	r3, r5
 8011396:	3410      	adds	r4, #16
 8011398:	3318      	adds	r3, #24
 801139a:	e7dd      	b.n	8011358 <_realloc_r+0x168>
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	61ab      	str	r3, [r5, #24]
 80113a0:	002b      	movs	r3, r5
 80113a2:	6962      	ldr	r2, [r4, #20]
 80113a4:	3320      	adds	r3, #32
 80113a6:	61ea      	str	r2, [r5, #28]
 80113a8:	3418      	adds	r4, #24
 80113aa:	e7d5      	b.n	8011358 <_realloc_r+0x168>
 80113ac:	0021      	movs	r1, r4
 80113ae:	0038      	movs	r0, r7
 80113b0:	f001 fbb5 	bl	8012b1e <memmove>
 80113b4:	e7d6      	b.n	8011364 <_realloc_r+0x174>
 80113b6:	9a00      	ldr	r2, [sp, #0]
 80113b8:	42b2      	cmp	r2, r6
 80113ba:	dc35      	bgt.n	8011428 <_realloc_r+0x238>
 80113bc:	0028      	movs	r0, r5
 80113be:	68da      	ldr	r2, [r3, #12]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	3008      	adds	r0, #8
 80113c4:	60da      	str	r2, [r3, #12]
 80113c6:	6093      	str	r3, [r2, #8]
 80113c8:	68aa      	ldr	r2, [r5, #8]
 80113ca:	68eb      	ldr	r3, [r5, #12]
 80113cc:	60d3      	str	r3, [r2, #12]
 80113ce:	609a      	str	r2, [r3, #8]
 80113d0:	9a03      	ldr	r2, [sp, #12]
 80113d2:	3a04      	subs	r2, #4
 80113d4:	2a24      	cmp	r2, #36	; 0x24
 80113d6:	d823      	bhi.n	8011420 <_realloc_r+0x230>
 80113d8:	2a13      	cmp	r2, #19
 80113da:	d907      	bls.n	80113ec <_realloc_r+0x1fc>
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	60ab      	str	r3, [r5, #8]
 80113e0:	6863      	ldr	r3, [r4, #4]
 80113e2:	60eb      	str	r3, [r5, #12]
 80113e4:	2a1b      	cmp	r2, #27
 80113e6:	d809      	bhi.n	80113fc <_realloc_r+0x20c>
 80113e8:	3408      	adds	r4, #8
 80113ea:	3008      	adds	r0, #8
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	6003      	str	r3, [r0, #0]
 80113f0:	6863      	ldr	r3, [r4, #4]
 80113f2:	6043      	str	r3, [r0, #4]
 80113f4:	68a3      	ldr	r3, [r4, #8]
 80113f6:	6083      	str	r3, [r0, #8]
 80113f8:	9502      	str	r5, [sp, #8]
 80113fa:	e75e      	b.n	80112ba <_realloc_r+0xca>
 80113fc:	68a3      	ldr	r3, [r4, #8]
 80113fe:	612b      	str	r3, [r5, #16]
 8011400:	68e3      	ldr	r3, [r4, #12]
 8011402:	616b      	str	r3, [r5, #20]
 8011404:	2a24      	cmp	r2, #36	; 0x24
 8011406:	d003      	beq.n	8011410 <_realloc_r+0x220>
 8011408:	0028      	movs	r0, r5
 801140a:	3410      	adds	r4, #16
 801140c:	3018      	adds	r0, #24
 801140e:	e7ed      	b.n	80113ec <_realloc_r+0x1fc>
 8011410:	0028      	movs	r0, r5
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	3020      	adds	r0, #32
 8011416:	61ab      	str	r3, [r5, #24]
 8011418:	6963      	ldr	r3, [r4, #20]
 801141a:	3418      	adds	r4, #24
 801141c:	61eb      	str	r3, [r5, #28]
 801141e:	e7e5      	b.n	80113ec <_realloc_r+0x1fc>
 8011420:	0021      	movs	r1, r4
 8011422:	f001 fb7c 	bl	8012b1e <memmove>
 8011426:	e7e7      	b.n	80113f8 <_realloc_r+0x208>
 8011428:	9b00      	ldr	r3, [sp, #0]
 801142a:	42bb      	cmp	r3, r7
 801142c:	dc31      	bgt.n	8011492 <_realloc_r+0x2a2>
 801142e:	0028      	movs	r0, r5
 8011430:	68aa      	ldr	r2, [r5, #8]
 8011432:	68eb      	ldr	r3, [r5, #12]
 8011434:	3008      	adds	r0, #8
 8011436:	60d3      	str	r3, [r2, #12]
 8011438:	609a      	str	r2, [r3, #8]
 801143a:	9a03      	ldr	r2, [sp, #12]
 801143c:	3a04      	subs	r2, #4
 801143e:	2a24      	cmp	r2, #36	; 0x24
 8011440:	d823      	bhi.n	801148a <_realloc_r+0x29a>
 8011442:	2a13      	cmp	r2, #19
 8011444:	d907      	bls.n	8011456 <_realloc_r+0x266>
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	60ab      	str	r3, [r5, #8]
 801144a:	6863      	ldr	r3, [r4, #4]
 801144c:	60eb      	str	r3, [r5, #12]
 801144e:	2a1b      	cmp	r2, #27
 8011450:	d809      	bhi.n	8011466 <_realloc_r+0x276>
 8011452:	3408      	adds	r4, #8
 8011454:	3008      	adds	r0, #8
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	6003      	str	r3, [r0, #0]
 801145a:	6863      	ldr	r3, [r4, #4]
 801145c:	6043      	str	r3, [r0, #4]
 801145e:	68a3      	ldr	r3, [r4, #8]
 8011460:	6083      	str	r3, [r0, #8]
 8011462:	003e      	movs	r6, r7
 8011464:	e7c8      	b.n	80113f8 <_realloc_r+0x208>
 8011466:	68a3      	ldr	r3, [r4, #8]
 8011468:	612b      	str	r3, [r5, #16]
 801146a:	68e3      	ldr	r3, [r4, #12]
 801146c:	616b      	str	r3, [r5, #20]
 801146e:	2a24      	cmp	r2, #36	; 0x24
 8011470:	d003      	beq.n	801147a <_realloc_r+0x28a>
 8011472:	0028      	movs	r0, r5
 8011474:	3410      	adds	r4, #16
 8011476:	3018      	adds	r0, #24
 8011478:	e7ed      	b.n	8011456 <_realloc_r+0x266>
 801147a:	0028      	movs	r0, r5
 801147c:	6923      	ldr	r3, [r4, #16]
 801147e:	3020      	adds	r0, #32
 8011480:	61ab      	str	r3, [r5, #24]
 8011482:	6963      	ldr	r3, [r4, #20]
 8011484:	3418      	adds	r4, #24
 8011486:	61eb      	str	r3, [r5, #28]
 8011488:	e7e5      	b.n	8011456 <_realloc_r+0x266>
 801148a:	0021      	movs	r1, r4
 801148c:	f001 fb47 	bl	8012b1e <memmove>
 8011490:	e7e7      	b.n	8011462 <_realloc_r+0x272>
 8011492:	9905      	ldr	r1, [sp, #20]
 8011494:	9801      	ldr	r0, [sp, #4]
 8011496:	f7f9 fced 	bl	800ae74 <_malloc_r>
 801149a:	1e07      	subs	r7, r0, #0
 801149c:	d100      	bne.n	80114a0 <_realloc_r+0x2b0>
 801149e:	e76f      	b.n	8011380 <_realloc_r+0x190>
 80114a0:	0023      	movs	r3, r4
 80114a2:	2201      	movs	r2, #1
 80114a4:	3b08      	subs	r3, #8
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	4393      	bics	r3, r2
 80114aa:	9a04      	ldr	r2, [sp, #16]
 80114ac:	18d3      	adds	r3, r2, r3
 80114ae:	0002      	movs	r2, r0
 80114b0:	3a08      	subs	r2, #8
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d105      	bne.n	80114c2 <_realloc_r+0x2d2>
 80114b6:	685e      	ldr	r6, [r3, #4]
 80114b8:	2303      	movs	r3, #3
 80114ba:	439e      	bics	r6, r3
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	18f6      	adds	r6, r6, r3
 80114c0:	e6fb      	b.n	80112ba <_realloc_r+0xca>
 80114c2:	9a03      	ldr	r2, [sp, #12]
 80114c4:	3a04      	subs	r2, #4
 80114c6:	2a24      	cmp	r2, #36	; 0x24
 80114c8:	d829      	bhi.n	801151e <_realloc_r+0x32e>
 80114ca:	0003      	movs	r3, r0
 80114cc:	0021      	movs	r1, r4
 80114ce:	2a13      	cmp	r2, #19
 80114d0:	d908      	bls.n	80114e4 <_realloc_r+0x2f4>
 80114d2:	6823      	ldr	r3, [r4, #0]
 80114d4:	6003      	str	r3, [r0, #0]
 80114d6:	6863      	ldr	r3, [r4, #4]
 80114d8:	6043      	str	r3, [r0, #4]
 80114da:	2a1b      	cmp	r2, #27
 80114dc:	d80d      	bhi.n	80114fa <_realloc_r+0x30a>
 80114de:	0003      	movs	r3, r0
 80114e0:	3108      	adds	r1, #8
 80114e2:	3308      	adds	r3, #8
 80114e4:	680a      	ldr	r2, [r1, #0]
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	684a      	ldr	r2, [r1, #4]
 80114ea:	605a      	str	r2, [r3, #4]
 80114ec:	688a      	ldr	r2, [r1, #8]
 80114ee:	609a      	str	r2, [r3, #8]
 80114f0:	0021      	movs	r1, r4
 80114f2:	9801      	ldr	r0, [sp, #4]
 80114f4:	f7fb f89e 	bl	800c634 <_free_r>
 80114f8:	e742      	b.n	8011380 <_realloc_r+0x190>
 80114fa:	68a3      	ldr	r3, [r4, #8]
 80114fc:	6083      	str	r3, [r0, #8]
 80114fe:	68e3      	ldr	r3, [r4, #12]
 8011500:	60c3      	str	r3, [r0, #12]
 8011502:	2a24      	cmp	r2, #36	; 0x24
 8011504:	d003      	beq.n	801150e <_realloc_r+0x31e>
 8011506:	0003      	movs	r3, r0
 8011508:	3110      	adds	r1, #16
 801150a:	3310      	adds	r3, #16
 801150c:	e7ea      	b.n	80114e4 <_realloc_r+0x2f4>
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	3118      	adds	r1, #24
 8011512:	6103      	str	r3, [r0, #16]
 8011514:	0003      	movs	r3, r0
 8011516:	6962      	ldr	r2, [r4, #20]
 8011518:	3318      	adds	r3, #24
 801151a:	6142      	str	r2, [r0, #20]
 801151c:	e7e2      	b.n	80114e4 <_realloc_r+0x2f4>
 801151e:	0021      	movs	r1, r4
 8011520:	f001 fafd 	bl	8012b1e <memmove>
 8011524:	e7e4      	b.n	80114f0 <_realloc_r+0x300>
 8011526:	9e03      	ldr	r6, [sp, #12]
 8011528:	e6c7      	b.n	80112ba <_realloc_r+0xca>
 801152a:	9902      	ldr	r1, [sp, #8]
 801152c:	4306      	orrs	r6, r0
 801152e:	604e      	str	r6, [r1, #4]
 8011530:	6851      	ldr	r1, [r2, #4]
 8011532:	430b      	orrs	r3, r1
 8011534:	6053      	str	r3, [r2, #4]
 8011536:	e6da      	b.n	80112ee <_realloc_r+0xfe>
 8011538:	2000002c 	.word	0x2000002c

0801153c <_strtoul_l.constprop.0>:
 801153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801153e:	b087      	sub	sp, #28
 8011540:	9202      	str	r2, [sp, #8]
 8011542:	4a3e      	ldr	r2, [pc, #248]	; (801163c <_strtoul_l.constprop.0+0x100>)
 8011544:	001e      	movs	r6, r3
 8011546:	9101      	str	r1, [sp, #4]
 8011548:	000b      	movs	r3, r1
 801154a:	4694      	mov	ip, r2
 801154c:	2108      	movs	r1, #8
 801154e:	9005      	str	r0, [sp, #20]
 8011550:	001a      	movs	r2, r3
 8011552:	4660      	mov	r0, ip
 8011554:	7814      	ldrb	r4, [r2, #0]
 8011556:	3301      	adds	r3, #1
 8011558:	5d00      	ldrb	r0, [r0, r4]
 801155a:	001d      	movs	r5, r3
 801155c:	0007      	movs	r7, r0
 801155e:	400f      	ands	r7, r1
 8011560:	4208      	tst	r0, r1
 8011562:	d1f5      	bne.n	8011550 <_strtoul_l.constprop.0+0x14>
 8011564:	2c2d      	cmp	r4, #45	; 0x2d
 8011566:	d13d      	bne.n	80115e4 <_strtoul_l.constprop.0+0xa8>
 8011568:	2701      	movs	r7, #1
 801156a:	781c      	ldrb	r4, [r3, #0]
 801156c:	1c95      	adds	r5, r2, #2
 801156e:	2e00      	cmp	r6, #0
 8011570:	d05f      	beq.n	8011632 <_strtoul_l.constprop.0+0xf6>
 8011572:	2e10      	cmp	r6, #16
 8011574:	d109      	bne.n	801158a <_strtoul_l.constprop.0+0x4e>
 8011576:	2c30      	cmp	r4, #48	; 0x30
 8011578:	d107      	bne.n	801158a <_strtoul_l.constprop.0+0x4e>
 801157a:	2220      	movs	r2, #32
 801157c:	782b      	ldrb	r3, [r5, #0]
 801157e:	4393      	bics	r3, r2
 8011580:	2b58      	cmp	r3, #88	; 0x58
 8011582:	d151      	bne.n	8011628 <_strtoul_l.constprop.0+0xec>
 8011584:	2610      	movs	r6, #16
 8011586:	786c      	ldrb	r4, [r5, #1]
 8011588:	3502      	adds	r5, #2
 801158a:	2001      	movs	r0, #1
 801158c:	0031      	movs	r1, r6
 801158e:	4240      	negs	r0, r0
 8011590:	f7ee fdd4 	bl	800013c <__udivsi3>
 8011594:	9003      	str	r0, [sp, #12]
 8011596:	2001      	movs	r0, #1
 8011598:	0031      	movs	r1, r6
 801159a:	4240      	negs	r0, r0
 801159c:	f7ee fe54 	bl	8000248 <__aeabi_uidivmod>
 80115a0:	2300      	movs	r3, #0
 80115a2:	2201      	movs	r2, #1
 80115a4:	9104      	str	r1, [sp, #16]
 80115a6:	2101      	movs	r1, #1
 80115a8:	0018      	movs	r0, r3
 80115aa:	4694      	mov	ip, r2
 80115ac:	4249      	negs	r1, r1
 80115ae:	0022      	movs	r2, r4
 80115b0:	3a30      	subs	r2, #48	; 0x30
 80115b2:	2a09      	cmp	r2, #9
 80115b4:	d903      	bls.n	80115be <_strtoul_l.constprop.0+0x82>
 80115b6:	3a11      	subs	r2, #17
 80115b8:	2a19      	cmp	r2, #25
 80115ba:	d818      	bhi.n	80115ee <_strtoul_l.constprop.0+0xb2>
 80115bc:	320a      	adds	r2, #10
 80115be:	4296      	cmp	r6, r2
 80115c0:	dd19      	ble.n	80115f6 <_strtoul_l.constprop.0+0xba>
 80115c2:	1c5c      	adds	r4, r3, #1
 80115c4:	d00b      	beq.n	80115de <_strtoul_l.constprop.0+0xa2>
 80115c6:	9c03      	ldr	r4, [sp, #12]
 80115c8:	000b      	movs	r3, r1
 80115ca:	4284      	cmp	r4, r0
 80115cc:	d307      	bcc.n	80115de <_strtoul_l.constprop.0+0xa2>
 80115ce:	d103      	bne.n	80115d8 <_strtoul_l.constprop.0+0x9c>
 80115d0:	9c04      	ldr	r4, [sp, #16]
 80115d2:	000b      	movs	r3, r1
 80115d4:	4294      	cmp	r4, r2
 80115d6:	db02      	blt.n	80115de <_strtoul_l.constprop.0+0xa2>
 80115d8:	4663      	mov	r3, ip
 80115da:	4370      	muls	r0, r6
 80115dc:	1810      	adds	r0, r2, r0
 80115de:	782c      	ldrb	r4, [r5, #0]
 80115e0:	3501      	adds	r5, #1
 80115e2:	e7e4      	b.n	80115ae <_strtoul_l.constprop.0+0x72>
 80115e4:	2c2b      	cmp	r4, #43	; 0x2b
 80115e6:	d1c2      	bne.n	801156e <_strtoul_l.constprop.0+0x32>
 80115e8:	781c      	ldrb	r4, [r3, #0]
 80115ea:	1c95      	adds	r5, r2, #2
 80115ec:	e7bf      	b.n	801156e <_strtoul_l.constprop.0+0x32>
 80115ee:	0022      	movs	r2, r4
 80115f0:	3a61      	subs	r2, #97	; 0x61
 80115f2:	2a19      	cmp	r2, #25
 80115f4:	d9e2      	bls.n	80115bc <_strtoul_l.constprop.0+0x80>
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	d108      	bne.n	801160c <_strtoul_l.constprop.0+0xd0>
 80115fa:	2222      	movs	r2, #34	; 0x22
 80115fc:	9905      	ldr	r1, [sp, #20]
 80115fe:	0018      	movs	r0, r3
 8011600:	600a      	str	r2, [r1, #0]
 8011602:	9a02      	ldr	r2, [sp, #8]
 8011604:	2a00      	cmp	r2, #0
 8011606:	d109      	bne.n	801161c <_strtoul_l.constprop.0+0xe0>
 8011608:	b007      	add	sp, #28
 801160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160c:	2f00      	cmp	r7, #0
 801160e:	d000      	beq.n	8011612 <_strtoul_l.constprop.0+0xd6>
 8011610:	4240      	negs	r0, r0
 8011612:	9a02      	ldr	r2, [sp, #8]
 8011614:	2a00      	cmp	r2, #0
 8011616:	d0f7      	beq.n	8011608 <_strtoul_l.constprop.0+0xcc>
 8011618:	2b00      	cmp	r3, #0
 801161a:	d001      	beq.n	8011620 <_strtoul_l.constprop.0+0xe4>
 801161c:	1e6b      	subs	r3, r5, #1
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	9b02      	ldr	r3, [sp, #8]
 8011622:	9a01      	ldr	r2, [sp, #4]
 8011624:	601a      	str	r2, [r3, #0]
 8011626:	e7ef      	b.n	8011608 <_strtoul_l.constprop.0+0xcc>
 8011628:	2430      	movs	r4, #48	; 0x30
 801162a:	2e00      	cmp	r6, #0
 801162c:	d1ad      	bne.n	801158a <_strtoul_l.constprop.0+0x4e>
 801162e:	3608      	adds	r6, #8
 8011630:	e7ab      	b.n	801158a <_strtoul_l.constprop.0+0x4e>
 8011632:	2c30      	cmp	r4, #48	; 0x30
 8011634:	d0a1      	beq.n	801157a <_strtoul_l.constprop.0+0x3e>
 8011636:	260a      	movs	r6, #10
 8011638:	e7a7      	b.n	801158a <_strtoul_l.constprop.0+0x4e>
 801163a:	46c0      	nop			; (mov r8, r8)
 801163c:	080148f9 	.word	0x080148f9

08011640 <_strtoul_r>:
 8011640:	b510      	push	{r4, lr}
 8011642:	f7ff ff7b 	bl	801153c <_strtoul_l.constprop.0>
 8011646:	bd10      	pop	{r4, pc}

08011648 <_strtoll_l.constprop.0>:
 8011648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801164a:	b08d      	sub	sp, #52	; 0x34
 801164c:	9203      	str	r2, [sp, #12]
 801164e:	4a53      	ldr	r2, [pc, #332]	; (801179c <_strtoll_l.constprop.0+0x154>)
 8011650:	001e      	movs	r6, r3
 8011652:	9102      	str	r1, [sp, #8]
 8011654:	000b      	movs	r3, r1
 8011656:	4694      	mov	ip, r2
 8011658:	2108      	movs	r1, #8
 801165a:	900a      	str	r0, [sp, #40]	; 0x28
 801165c:	001a      	movs	r2, r3
 801165e:	4660      	mov	r0, ip
 8011660:	7814      	ldrb	r4, [r2, #0]
 8011662:	3301      	adds	r3, #1
 8011664:	5d00      	ldrb	r0, [r0, r4]
 8011666:	001d      	movs	r5, r3
 8011668:	0007      	movs	r7, r0
 801166a:	400f      	ands	r7, r1
 801166c:	4208      	tst	r0, r1
 801166e:	d1f5      	bne.n	801165c <_strtoll_l.constprop.0+0x14>
 8011670:	2c2d      	cmp	r4, #45	; 0x2d
 8011672:	d153      	bne.n	801171c <_strtoll_l.constprop.0+0xd4>
 8011674:	781c      	ldrb	r4, [r3, #0]
 8011676:	2301      	movs	r3, #1
 8011678:	1c95      	adds	r5, r2, #2
 801167a:	9301      	str	r3, [sp, #4]
 801167c:	2e00      	cmp	r6, #0
 801167e:	d100      	bne.n	8011682 <_strtoll_l.constprop.0+0x3a>
 8011680:	e086      	b.n	8011790 <_strtoll_l.constprop.0+0x148>
 8011682:	2e10      	cmp	r6, #16
 8011684:	d10a      	bne.n	801169c <_strtoll_l.constprop.0+0x54>
 8011686:	2c30      	cmp	r4, #48	; 0x30
 8011688:	d108      	bne.n	801169c <_strtoll_l.constprop.0+0x54>
 801168a:	2220      	movs	r2, #32
 801168c:	782b      	ldrb	r3, [r5, #0]
 801168e:	4393      	bics	r3, r2
 8011690:	2b58      	cmp	r3, #88	; 0x58
 8011692:	d000      	beq.n	8011696 <_strtoll_l.constprop.0+0x4e>
 8011694:	e076      	b.n	8011784 <_strtoll_l.constprop.0+0x13c>
 8011696:	2610      	movs	r6, #16
 8011698:	786c      	ldrb	r4, [r5, #1]
 801169a:	3502      	adds	r5, #2
 801169c:	2001      	movs	r0, #1
 801169e:	2300      	movs	r3, #0
 80116a0:	493f      	ldr	r1, [pc, #252]	; (80117a0 <_strtoll_l.constprop.0+0x158>)
 80116a2:	9a01      	ldr	r2, [sp, #4]
 80116a4:	4240      	negs	r0, r0
 80116a6:	1812      	adds	r2, r2, r0
 80116a8:	414b      	adcs	r3, r1
 80116aa:	9204      	str	r2, [sp, #16]
 80116ac:	9305      	str	r3, [sp, #20]
 80116ae:	9804      	ldr	r0, [sp, #16]
 80116b0:	9905      	ldr	r1, [sp, #20]
 80116b2:	17f3      	asrs	r3, r6, #31
 80116b4:	0032      	movs	r2, r6
 80116b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80116b8:	f7ee fef4 	bl	80004a4 <__aeabi_uldivmod>
 80116bc:	2300      	movs	r3, #0
 80116be:	000f      	movs	r7, r1
 80116c0:	9008      	str	r0, [sp, #32]
 80116c2:	2100      	movs	r1, #0
 80116c4:	2000      	movs	r0, #0
 80116c6:	9209      	str	r2, [sp, #36]	; 0x24
 80116c8:	0022      	movs	r2, r4
 80116ca:	3a30      	subs	r2, #48	; 0x30
 80116cc:	2a09      	cmp	r2, #9
 80116ce:	d82b      	bhi.n	8011728 <_strtoll_l.constprop.0+0xe0>
 80116d0:	0014      	movs	r4, r2
 80116d2:	42a6      	cmp	r6, r4
 80116d4:	dd37      	ble.n	8011746 <_strtoll_l.constprop.0+0xfe>
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	d01d      	beq.n	8011716 <_strtoll_l.constprop.0+0xce>
 80116da:	42b9      	cmp	r1, r7
 80116dc:	d830      	bhi.n	8011740 <_strtoll_l.constprop.0+0xf8>
 80116de:	d102      	bne.n	80116e6 <_strtoll_l.constprop.0+0x9e>
 80116e0:	9b08      	ldr	r3, [sp, #32]
 80116e2:	4298      	cmp	r0, r3
 80116e4:	d82c      	bhi.n	8011740 <_strtoll_l.constprop.0+0xf8>
 80116e6:	9b08      	ldr	r3, [sp, #32]
 80116e8:	4283      	cmp	r3, r0
 80116ea:	d106      	bne.n	80116fa <_strtoll_l.constprop.0+0xb2>
 80116ec:	428f      	cmp	r7, r1
 80116ee:	d104      	bne.n	80116fa <_strtoll_l.constprop.0+0xb2>
 80116f0:	2301      	movs	r3, #1
 80116f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116f4:	425b      	negs	r3, r3
 80116f6:	42a2      	cmp	r2, r4
 80116f8:	db0d      	blt.n	8011716 <_strtoll_l.constprop.0+0xce>
 80116fa:	000b      	movs	r3, r1
 80116fc:	0002      	movs	r2, r0
 80116fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011700:	0030      	movs	r0, r6
 8011702:	f7ee feef 	bl	80004e4 <__aeabi_lmul>
 8011706:	17e3      	asrs	r3, r4, #31
 8011708:	9406      	str	r4, [sp, #24]
 801170a:	9307      	str	r3, [sp, #28]
 801170c:	9b06      	ldr	r3, [sp, #24]
 801170e:	9c07      	ldr	r4, [sp, #28]
 8011710:	18c0      	adds	r0, r0, r3
 8011712:	4161      	adcs	r1, r4
 8011714:	2301      	movs	r3, #1
 8011716:	782c      	ldrb	r4, [r5, #0]
 8011718:	3501      	adds	r5, #1
 801171a:	e7d5      	b.n	80116c8 <_strtoll_l.constprop.0+0x80>
 801171c:	9701      	str	r7, [sp, #4]
 801171e:	2c2b      	cmp	r4, #43	; 0x2b
 8011720:	d1ac      	bne.n	801167c <_strtoll_l.constprop.0+0x34>
 8011722:	781c      	ldrb	r4, [r3, #0]
 8011724:	1c95      	adds	r5, r2, #2
 8011726:	e7a9      	b.n	801167c <_strtoll_l.constprop.0+0x34>
 8011728:	0022      	movs	r2, r4
 801172a:	3a41      	subs	r2, #65	; 0x41
 801172c:	2a19      	cmp	r2, #25
 801172e:	d801      	bhi.n	8011734 <_strtoll_l.constprop.0+0xec>
 8011730:	3c37      	subs	r4, #55	; 0x37
 8011732:	e7ce      	b.n	80116d2 <_strtoll_l.constprop.0+0x8a>
 8011734:	0022      	movs	r2, r4
 8011736:	3a61      	subs	r2, #97	; 0x61
 8011738:	2a19      	cmp	r2, #25
 801173a:	d804      	bhi.n	8011746 <_strtoll_l.constprop.0+0xfe>
 801173c:	3c57      	subs	r4, #87	; 0x57
 801173e:	e7c8      	b.n	80116d2 <_strtoll_l.constprop.0+0x8a>
 8011740:	2301      	movs	r3, #1
 8011742:	425b      	negs	r3, r3
 8011744:	e7e7      	b.n	8011716 <_strtoll_l.constprop.0+0xce>
 8011746:	1c5a      	adds	r2, r3, #1
 8011748:	d109      	bne.n	801175e <_strtoll_l.constprop.0+0x116>
 801174a:	9804      	ldr	r0, [sp, #16]
 801174c:	9905      	ldr	r1, [sp, #20]
 801174e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011750:	3323      	adds	r3, #35	; 0x23
 8011752:	6013      	str	r3, [r2, #0]
 8011754:	9b03      	ldr	r3, [sp, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d10e      	bne.n	8011778 <_strtoll_l.constprop.0+0x130>
 801175a:	b00d      	add	sp, #52	; 0x34
 801175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801175e:	9a01      	ldr	r2, [sp, #4]
 8011760:	2a00      	cmp	r2, #0
 8011762:	d004      	beq.n	801176e <_strtoll_l.constprop.0+0x126>
 8011764:	0006      	movs	r6, r0
 8011766:	000f      	movs	r7, r1
 8011768:	2100      	movs	r1, #0
 801176a:	4270      	negs	r0, r6
 801176c:	41b9      	sbcs	r1, r7
 801176e:	9a03      	ldr	r2, [sp, #12]
 8011770:	2a00      	cmp	r2, #0
 8011772:	d0f2      	beq.n	801175a <_strtoll_l.constprop.0+0x112>
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <_strtoll_l.constprop.0+0x134>
 8011778:	1e6b      	subs	r3, r5, #1
 801177a:	9302      	str	r3, [sp, #8]
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	9a02      	ldr	r2, [sp, #8]
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	e7ea      	b.n	801175a <_strtoll_l.constprop.0+0x112>
 8011784:	2430      	movs	r4, #48	; 0x30
 8011786:	2e00      	cmp	r6, #0
 8011788:	d000      	beq.n	801178c <_strtoll_l.constprop.0+0x144>
 801178a:	e787      	b.n	801169c <_strtoll_l.constprop.0+0x54>
 801178c:	3608      	adds	r6, #8
 801178e:	e785      	b.n	801169c <_strtoll_l.constprop.0+0x54>
 8011790:	2c30      	cmp	r4, #48	; 0x30
 8011792:	d100      	bne.n	8011796 <_strtoll_l.constprop.0+0x14e>
 8011794:	e779      	b.n	801168a <_strtoll_l.constprop.0+0x42>
 8011796:	260a      	movs	r6, #10
 8011798:	e780      	b.n	801169c <_strtoll_l.constprop.0+0x54>
 801179a:	46c0      	nop			; (mov r8, r8)
 801179c:	080148f9 	.word	0x080148f9
 80117a0:	7fffffff 	.word	0x7fffffff

080117a4 <_strtoll_r>:
 80117a4:	b510      	push	{r4, lr}
 80117a6:	f7ff ff4f 	bl	8011648 <_strtoll_l.constprop.0>
 80117aa:	bd10      	pop	{r4, pc}

080117ac <_strtoull_l.constprop.0>:
 80117ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ae:	b08b      	sub	sp, #44	; 0x2c
 80117b0:	9202      	str	r2, [sp, #8]
 80117b2:	4a54      	ldr	r2, [pc, #336]	; (8011904 <_strtoull_l.constprop.0+0x158>)
 80117b4:	001e      	movs	r6, r3
 80117b6:	9101      	str	r1, [sp, #4]
 80117b8:	000b      	movs	r3, r1
 80117ba:	4694      	mov	ip, r2
 80117bc:	2108      	movs	r1, #8
 80117be:	9009      	str	r0, [sp, #36]	; 0x24
 80117c0:	001a      	movs	r2, r3
 80117c2:	4660      	mov	r0, ip
 80117c4:	7814      	ldrb	r4, [r2, #0]
 80117c6:	3301      	adds	r3, #1
 80117c8:	5d00      	ldrb	r0, [r0, r4]
 80117ca:	001d      	movs	r5, r3
 80117cc:	0007      	movs	r7, r0
 80117ce:	400f      	ands	r7, r1
 80117d0:	4208      	tst	r0, r1
 80117d2:	d1f5      	bne.n	80117c0 <_strtoull_l.constprop.0+0x14>
 80117d4:	2c2d      	cmp	r4, #45	; 0x2d
 80117d6:	d154      	bne.n	8011882 <_strtoull_l.constprop.0+0xd6>
 80117d8:	781c      	ldrb	r4, [r3, #0]
 80117da:	2301      	movs	r3, #1
 80117dc:	1c95      	adds	r5, r2, #2
 80117de:	9306      	str	r3, [sp, #24]
 80117e0:	2e00      	cmp	r6, #0
 80117e2:	d100      	bne.n	80117e6 <_strtoull_l.constprop.0+0x3a>
 80117e4:	e088      	b.n	80118f8 <_strtoull_l.constprop.0+0x14c>
 80117e6:	2e10      	cmp	r6, #16
 80117e8:	d10a      	bne.n	8011800 <_strtoull_l.constprop.0+0x54>
 80117ea:	2c30      	cmp	r4, #48	; 0x30
 80117ec:	d108      	bne.n	8011800 <_strtoull_l.constprop.0+0x54>
 80117ee:	2220      	movs	r2, #32
 80117f0:	782b      	ldrb	r3, [r5, #0]
 80117f2:	4393      	bics	r3, r2
 80117f4:	2b58      	cmp	r3, #88	; 0x58
 80117f6:	d000      	beq.n	80117fa <_strtoull_l.constprop.0+0x4e>
 80117f8:	e078      	b.n	80118ec <_strtoull_l.constprop.0+0x140>
 80117fa:	2610      	movs	r6, #16
 80117fc:	786c      	ldrb	r4, [r5, #1]
 80117fe:	3502      	adds	r5, #2
 8011800:	17f7      	asrs	r7, r6, #31
 8011802:	0032      	movs	r2, r6
 8011804:	003b      	movs	r3, r7
 8011806:	2001      	movs	r0, #1
 8011808:	4240      	negs	r0, r0
 801180a:	17c1      	asrs	r1, r0, #31
 801180c:	f7ee fe4a 	bl	80004a4 <__aeabi_uldivmod>
 8011810:	0032      	movs	r2, r6
 8011812:	9007      	str	r0, [sp, #28]
 8011814:	9103      	str	r1, [sp, #12]
 8011816:	003b      	movs	r3, r7
 8011818:	2001      	movs	r0, #1
 801181a:	4240      	negs	r0, r0
 801181c:	17c1      	asrs	r1, r0, #31
 801181e:	f7ee fe41 	bl	80004a4 <__aeabi_uldivmod>
 8011822:	2300      	movs	r3, #0
 8011824:	2000      	movs	r0, #0
 8011826:	2100      	movs	r1, #0
 8011828:	9208      	str	r2, [sp, #32]
 801182a:	0022      	movs	r2, r4
 801182c:	3a30      	subs	r2, #48	; 0x30
 801182e:	2a09      	cmp	r2, #9
 8011830:	d82d      	bhi.n	801188e <_strtoull_l.constprop.0+0xe2>
 8011832:	0014      	movs	r4, r2
 8011834:	42a6      	cmp	r6, r4
 8011836:	dd39      	ble.n	80118ac <_strtoull_l.constprop.0+0x100>
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	d01f      	beq.n	801187c <_strtoull_l.constprop.0+0xd0>
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	4299      	cmp	r1, r3
 8011840:	d831      	bhi.n	80118a6 <_strtoull_l.constprop.0+0xfa>
 8011842:	d102      	bne.n	801184a <_strtoull_l.constprop.0+0x9e>
 8011844:	9b07      	ldr	r3, [sp, #28]
 8011846:	4298      	cmp	r0, r3
 8011848:	d82d      	bhi.n	80118a6 <_strtoull_l.constprop.0+0xfa>
 801184a:	9b07      	ldr	r3, [sp, #28]
 801184c:	4283      	cmp	r3, r0
 801184e:	d107      	bne.n	8011860 <_strtoull_l.constprop.0+0xb4>
 8011850:	9b03      	ldr	r3, [sp, #12]
 8011852:	428b      	cmp	r3, r1
 8011854:	d104      	bne.n	8011860 <_strtoull_l.constprop.0+0xb4>
 8011856:	2301      	movs	r3, #1
 8011858:	9a08      	ldr	r2, [sp, #32]
 801185a:	425b      	negs	r3, r3
 801185c:	42a2      	cmp	r2, r4
 801185e:	db0d      	blt.n	801187c <_strtoull_l.constprop.0+0xd0>
 8011860:	000b      	movs	r3, r1
 8011862:	0002      	movs	r2, r0
 8011864:	0039      	movs	r1, r7
 8011866:	0030      	movs	r0, r6
 8011868:	f7ee fe3c 	bl	80004e4 <__aeabi_lmul>
 801186c:	17e3      	asrs	r3, r4, #31
 801186e:	9404      	str	r4, [sp, #16]
 8011870:	9305      	str	r3, [sp, #20]
 8011872:	9b04      	ldr	r3, [sp, #16]
 8011874:	9c05      	ldr	r4, [sp, #20]
 8011876:	18c0      	adds	r0, r0, r3
 8011878:	4161      	adcs	r1, r4
 801187a:	2301      	movs	r3, #1
 801187c:	782c      	ldrb	r4, [r5, #0]
 801187e:	3501      	adds	r5, #1
 8011880:	e7d3      	b.n	801182a <_strtoull_l.constprop.0+0x7e>
 8011882:	9706      	str	r7, [sp, #24]
 8011884:	2c2b      	cmp	r4, #43	; 0x2b
 8011886:	d1ab      	bne.n	80117e0 <_strtoull_l.constprop.0+0x34>
 8011888:	781c      	ldrb	r4, [r3, #0]
 801188a:	1c95      	adds	r5, r2, #2
 801188c:	e7a8      	b.n	80117e0 <_strtoull_l.constprop.0+0x34>
 801188e:	0022      	movs	r2, r4
 8011890:	3a41      	subs	r2, #65	; 0x41
 8011892:	2a19      	cmp	r2, #25
 8011894:	d801      	bhi.n	801189a <_strtoull_l.constprop.0+0xee>
 8011896:	3c37      	subs	r4, #55	; 0x37
 8011898:	e7cc      	b.n	8011834 <_strtoull_l.constprop.0+0x88>
 801189a:	0022      	movs	r2, r4
 801189c:	3a61      	subs	r2, #97	; 0x61
 801189e:	2a19      	cmp	r2, #25
 80118a0:	d804      	bhi.n	80118ac <_strtoull_l.constprop.0+0x100>
 80118a2:	3c57      	subs	r4, #87	; 0x57
 80118a4:	e7c6      	b.n	8011834 <_strtoull_l.constprop.0+0x88>
 80118a6:	2301      	movs	r3, #1
 80118a8:	425b      	negs	r3, r3
 80118aa:	e7e7      	b.n	801187c <_strtoull_l.constprop.0+0xd0>
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	d10a      	bne.n	80118c6 <_strtoull_l.constprop.0+0x11a>
 80118b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118b2:	3323      	adds	r3, #35	; 0x23
 80118b4:	6013      	str	r3, [r2, #0]
 80118b6:	9b02      	ldr	r3, [sp, #8]
 80118b8:	2001      	movs	r0, #1
 80118ba:	4240      	negs	r0, r0
 80118bc:	17c1      	asrs	r1, r0, #31
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10e      	bne.n	80118e0 <_strtoull_l.constprop.0+0x134>
 80118c2:	b00b      	add	sp, #44	; 0x2c
 80118c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118c6:	9a06      	ldr	r2, [sp, #24]
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	d004      	beq.n	80118d6 <_strtoull_l.constprop.0+0x12a>
 80118cc:	0006      	movs	r6, r0
 80118ce:	000f      	movs	r7, r1
 80118d0:	2100      	movs	r1, #0
 80118d2:	4270      	negs	r0, r6
 80118d4:	41b9      	sbcs	r1, r7
 80118d6:	9a02      	ldr	r2, [sp, #8]
 80118d8:	2a00      	cmp	r2, #0
 80118da:	d0f2      	beq.n	80118c2 <_strtoull_l.constprop.0+0x116>
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <_strtoull_l.constprop.0+0x138>
 80118e0:	1e6b      	subs	r3, r5, #1
 80118e2:	9301      	str	r3, [sp, #4]
 80118e4:	9b02      	ldr	r3, [sp, #8]
 80118e6:	9a01      	ldr	r2, [sp, #4]
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	e7ea      	b.n	80118c2 <_strtoull_l.constprop.0+0x116>
 80118ec:	2430      	movs	r4, #48	; 0x30
 80118ee:	2e00      	cmp	r6, #0
 80118f0:	d000      	beq.n	80118f4 <_strtoull_l.constprop.0+0x148>
 80118f2:	e785      	b.n	8011800 <_strtoull_l.constprop.0+0x54>
 80118f4:	3608      	adds	r6, #8
 80118f6:	e783      	b.n	8011800 <_strtoull_l.constprop.0+0x54>
 80118f8:	2c30      	cmp	r4, #48	; 0x30
 80118fa:	d100      	bne.n	80118fe <_strtoull_l.constprop.0+0x152>
 80118fc:	e777      	b.n	80117ee <_strtoull_l.constprop.0+0x42>
 80118fe:	260a      	movs	r6, #10
 8011900:	e77e      	b.n	8011800 <_strtoull_l.constprop.0+0x54>
 8011902:	46c0      	nop			; (mov r8, r8)
 8011904:	080148f9 	.word	0x080148f9

08011908 <_strtoull_r>:
 8011908:	b510      	push	{r4, lr}
 801190a:	f7ff ff4f 	bl	80117ac <_strtoull_l.constprop.0>
 801190e:	bd10      	pop	{r4, pc}

08011910 <_mbrtowc_r>:
 8011910:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011912:	0004      	movs	r4, r0
 8011914:	0010      	movs	r0, r2
 8011916:	4a0b      	ldr	r2, [pc, #44]	; (8011944 <_mbrtowc_r+0x34>)
 8011918:	9d06      	ldr	r5, [sp, #24]
 801191a:	32e4      	adds	r2, #228	; 0xe4
 801191c:	6816      	ldr	r6, [r2, #0]
 801191e:	2800      	cmp	r0, #0
 8011920:	d10c      	bne.n	801193c <_mbrtowc_r+0x2c>
 8011922:	2301      	movs	r3, #1
 8011924:	0001      	movs	r1, r0
 8011926:	4a08      	ldr	r2, [pc, #32]	; (8011948 <_mbrtowc_r+0x38>)
 8011928:	9500      	str	r5, [sp, #0]
 801192a:	0020      	movs	r0, r4
 801192c:	47b0      	blx	r6
 801192e:	1c43      	adds	r3, r0, #1
 8011930:	d103      	bne.n	801193a <_mbrtowc_r+0x2a>
 8011932:	2300      	movs	r3, #0
 8011934:	602b      	str	r3, [r5, #0]
 8011936:	338a      	adds	r3, #138	; 0x8a
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 801193c:	0002      	movs	r2, r0
 801193e:	9500      	str	r5, [sp, #0]
 8011940:	e7f3      	b.n	801192a <_mbrtowc_r+0x1a>
 8011942:	46c0      	nop			; (mov r8, r8)
 8011944:	20000448 	.word	0x20000448
 8011948:	08014c83 	.word	0x08014c83

0801194c <iswspace>:
 801194c:	b510      	push	{r4, lr}
 801194e:	2100      	movs	r1, #0
 8011950:	f000 f802 	bl	8011958 <iswspace_l>
 8011954:	bd10      	pop	{r4, pc}
	...

08011958 <iswspace_l>:
 8011958:	0003      	movs	r3, r0
 801195a:	2000      	movs	r0, #0
 801195c:	2bff      	cmp	r3, #255	; 0xff
 801195e:	d803      	bhi.n	8011968 <iswspace_l+0x10>
 8011960:	4a02      	ldr	r2, [pc, #8]	; (801196c <iswspace_l+0x14>)
 8011962:	5cd0      	ldrb	r0, [r2, r3]
 8011964:	2308      	movs	r3, #8
 8011966:	4018      	ands	r0, r3
 8011968:	4770      	bx	lr
 801196a:	46c0      	nop			; (mov r8, r8)
 801196c:	080148f9 	.word	0x080148f9

08011970 <fiprintf>:
 8011970:	b40e      	push	{r1, r2, r3}
 8011972:	b517      	push	{r0, r1, r2, r4, lr}
 8011974:	4c05      	ldr	r4, [pc, #20]	; (801198c <fiprintf+0x1c>)
 8011976:	ab05      	add	r3, sp, #20
 8011978:	cb04      	ldmia	r3!, {r2}
 801197a:	0001      	movs	r1, r0
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	9301      	str	r3, [sp, #4]
 8011980:	f000 f954 	bl	8011c2c <_vfiprintf_r>
 8011984:	bc1e      	pop	{r1, r2, r3, r4}
 8011986:	bc08      	pop	{r3}
 8011988:	b003      	add	sp, #12
 801198a:	4718      	bx	r3
 801198c:	200006d8 	.word	0x200006d8

08011990 <__ssprint_r>:
 8011990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011992:	6813      	ldr	r3, [r2, #0]
 8011994:	b087      	sub	sp, #28
 8011996:	0017      	movs	r7, r2
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	6893      	ldr	r3, [r2, #8]
 801199c:	2200      	movs	r2, #0
 801199e:	000c      	movs	r4, r1
 80119a0:	9005      	str	r0, [sp, #20]
 80119a2:	9202      	str	r2, [sp, #8]
 80119a4:	9201      	str	r2, [sp, #4]
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d10d      	bne.n	80119c6 <__ssprint_r+0x36>
 80119aa:	2000      	movs	r0, #0
 80119ac:	2300      	movs	r3, #0
 80119ae:	607b      	str	r3, [r7, #4]
 80119b0:	b007      	add	sp, #28
 80119b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b4:	9b03      	ldr	r3, [sp, #12]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	9302      	str	r3, [sp, #8]
 80119ba:	9b03      	ldr	r3, [sp, #12]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	9301      	str	r3, [sp, #4]
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	3308      	adds	r3, #8
 80119c4:	9303      	str	r3, [sp, #12]
 80119c6:	9a01      	ldr	r2, [sp, #4]
 80119c8:	68a6      	ldr	r6, [r4, #8]
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	2a00      	cmp	r2, #0
 80119ce:	d0f1      	beq.n	80119b4 <__ssprint_r+0x24>
 80119d0:	42b2      	cmp	r2, r6
 80119d2:	d32e      	bcc.n	8011a32 <__ssprint_r+0xa2>
 80119d4:	2190      	movs	r1, #144	; 0x90
 80119d6:	89a2      	ldrh	r2, [r4, #12]
 80119d8:	00c9      	lsls	r1, r1, #3
 80119da:	420a      	tst	r2, r1
 80119dc:	d029      	beq.n	8011a32 <__ssprint_r+0xa2>
 80119de:	2003      	movs	r0, #3
 80119e0:	6921      	ldr	r1, [r4, #16]
 80119e2:	1a5b      	subs	r3, r3, r1
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	6963      	ldr	r3, [r4, #20]
 80119e8:	4343      	muls	r3, r0
 80119ea:	0fdd      	lsrs	r5, r3, #31
 80119ec:	18ed      	adds	r5, r5, r3
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	9801      	ldr	r0, [sp, #4]
 80119f2:	3301      	adds	r3, #1
 80119f4:	181b      	adds	r3, r3, r0
 80119f6:	106d      	asrs	r5, r5, #1
 80119f8:	42ab      	cmp	r3, r5
 80119fa:	d900      	bls.n	80119fe <__ssprint_r+0x6e>
 80119fc:	001d      	movs	r5, r3
 80119fe:	0552      	lsls	r2, r2, #21
 8011a00:	d532      	bpl.n	8011a68 <__ssprint_r+0xd8>
 8011a02:	0029      	movs	r1, r5
 8011a04:	9805      	ldr	r0, [sp, #20]
 8011a06:	f7f9 fa35 	bl	800ae74 <_malloc_r>
 8011a0a:	1e06      	subs	r6, r0, #0
 8011a0c:	d036      	beq.n	8011a7c <__ssprint_r+0xec>
 8011a0e:	9a04      	ldr	r2, [sp, #16]
 8011a10:	6921      	ldr	r1, [r4, #16]
 8011a12:	f7fa fd94 	bl	800c53e <memcpy>
 8011a16:	89a2      	ldrh	r2, [r4, #12]
 8011a18:	4b1e      	ldr	r3, [pc, #120]	; (8011a94 <__ssprint_r+0x104>)
 8011a1a:	401a      	ands	r2, r3
 8011a1c:	2380      	movs	r3, #128	; 0x80
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	81a3      	strh	r3, [r4, #12]
 8011a22:	9b04      	ldr	r3, [sp, #16]
 8011a24:	6126      	str	r6, [r4, #16]
 8011a26:	18f6      	adds	r6, r6, r3
 8011a28:	6026      	str	r6, [r4, #0]
 8011a2a:	6165      	str	r5, [r4, #20]
 8011a2c:	9e01      	ldr	r6, [sp, #4]
 8011a2e:	1aed      	subs	r5, r5, r3
 8011a30:	60a5      	str	r5, [r4, #8]
 8011a32:	9b01      	ldr	r3, [sp, #4]
 8011a34:	429e      	cmp	r6, r3
 8011a36:	d900      	bls.n	8011a3a <__ssprint_r+0xaa>
 8011a38:	001e      	movs	r6, r3
 8011a3a:	0032      	movs	r2, r6
 8011a3c:	9902      	ldr	r1, [sp, #8]
 8011a3e:	6820      	ldr	r0, [r4, #0]
 8011a40:	f001 f86d 	bl	8012b1e <memmove>
 8011a44:	9a01      	ldr	r2, [sp, #4]
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	4694      	mov	ip, r2
 8011a4a:	1b9b      	subs	r3, r3, r6
 8011a4c:	60a3      	str	r3, [r4, #8]
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	199b      	adds	r3, r3, r6
 8011a52:	6023      	str	r3, [r4, #0]
 8011a54:	9b02      	ldr	r3, [sp, #8]
 8011a56:	4463      	add	r3, ip
 8011a58:	9302      	str	r3, [sp, #8]
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	1a9b      	subs	r3, r3, r2
 8011a5e:	60bb      	str	r3, [r7, #8]
 8011a60:	d0a3      	beq.n	80119aa <__ssprint_r+0x1a>
 8011a62:	2300      	movs	r3, #0
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	e7ae      	b.n	80119c6 <__ssprint_r+0x36>
 8011a68:	002a      	movs	r2, r5
 8011a6a:	9805      	ldr	r0, [sp, #20]
 8011a6c:	f7ff fbc0 	bl	80111f0 <_realloc_r>
 8011a70:	1e06      	subs	r6, r0, #0
 8011a72:	d1d6      	bne.n	8011a22 <__ssprint_r+0x92>
 8011a74:	6921      	ldr	r1, [r4, #16]
 8011a76:	9805      	ldr	r0, [sp, #20]
 8011a78:	f7fa fddc 	bl	800c634 <_free_r>
 8011a7c:	230c      	movs	r3, #12
 8011a7e:	9a05      	ldr	r2, [sp, #20]
 8011a80:	2001      	movs	r0, #1
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	89a2      	ldrh	r2, [r4, #12]
 8011a86:	3334      	adds	r3, #52	; 0x34
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	81a3      	strh	r3, [r4, #12]
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	4240      	negs	r0, r0
 8011a90:	60bb      	str	r3, [r7, #8]
 8011a92:	e78b      	b.n	80119ac <__ssprint_r+0x1c>
 8011a94:	fffffb7f 	.word	0xfffffb7f

08011a98 <_sungetc_r>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	0014      	movs	r4, r2
 8011a9c:	1c4b      	adds	r3, r1, #1
 8011a9e:	d103      	bne.n	8011aa8 <_sungetc_r+0x10>
 8011aa0:	2501      	movs	r5, #1
 8011aa2:	426d      	negs	r5, r5
 8011aa4:	0028      	movs	r0, r5
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
 8011aa8:	8993      	ldrh	r3, [r2, #12]
 8011aaa:	2220      	movs	r2, #32
 8011aac:	4393      	bics	r3, r2
 8011aae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011ab0:	81a3      	strh	r3, [r4, #12]
 8011ab2:	b2ce      	uxtb	r6, r1
 8011ab4:	6863      	ldr	r3, [r4, #4]
 8011ab6:	b2cd      	uxtb	r5, r1
 8011ab8:	2a00      	cmp	r2, #0
 8011aba:	d010      	beq.n	8011ade <_sungetc_r+0x46>
 8011abc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	dd07      	ble.n	8011ad2 <_sungetc_r+0x3a>
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	6023      	str	r3, [r4, #0]
 8011ac8:	701e      	strb	r6, [r3, #0]
 8011aca:	6863      	ldr	r3, [r4, #4]
 8011acc:	3301      	adds	r3, #1
 8011ace:	6063      	str	r3, [r4, #4]
 8011ad0:	e7e8      	b.n	8011aa4 <_sungetc_r+0xc>
 8011ad2:	0021      	movs	r1, r4
 8011ad4:	f000 ff1a 	bl	801290c <__submore>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d0f2      	beq.n	8011ac2 <_sungetc_r+0x2a>
 8011adc:	e7e0      	b.n	8011aa0 <_sungetc_r+0x8>
 8011ade:	6921      	ldr	r1, [r4, #16]
 8011ae0:	6822      	ldr	r2, [r4, #0]
 8011ae2:	2900      	cmp	r1, #0
 8011ae4:	d007      	beq.n	8011af6 <_sungetc_r+0x5e>
 8011ae6:	4291      	cmp	r1, r2
 8011ae8:	d205      	bcs.n	8011af6 <_sungetc_r+0x5e>
 8011aea:	1e51      	subs	r1, r2, #1
 8011aec:	7808      	ldrb	r0, [r1, #0]
 8011aee:	42a8      	cmp	r0, r5
 8011af0:	d101      	bne.n	8011af6 <_sungetc_r+0x5e>
 8011af2:	6021      	str	r1, [r4, #0]
 8011af4:	e7ea      	b.n	8011acc <_sungetc_r+0x34>
 8011af6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011af8:	0023      	movs	r3, r4
 8011afa:	3340      	adds	r3, #64	; 0x40
 8011afc:	6323      	str	r3, [r4, #48]	; 0x30
 8011afe:	2303      	movs	r3, #3
 8011b00:	6363      	str	r3, [r4, #52]	; 0x34
 8011b02:	0023      	movs	r3, r4
 8011b04:	3342      	adds	r3, #66	; 0x42
 8011b06:	63a2      	str	r2, [r4, #56]	; 0x38
 8011b08:	701e      	strb	r6, [r3, #0]
 8011b0a:	6023      	str	r3, [r4, #0]
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e7de      	b.n	8011ace <_sungetc_r+0x36>

08011b10 <__ssrefill_r>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	000c      	movs	r4, r1
 8011b14:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011b16:	2900      	cmp	r1, #0
 8011b18:	d00e      	beq.n	8011b38 <__ssrefill_r+0x28>
 8011b1a:	0023      	movs	r3, r4
 8011b1c:	3340      	adds	r3, #64	; 0x40
 8011b1e:	4299      	cmp	r1, r3
 8011b20:	d001      	beq.n	8011b26 <__ssrefill_r+0x16>
 8011b22:	f7fa fd87 	bl	800c634 <_free_r>
 8011b26:	2000      	movs	r0, #0
 8011b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b2a:	6320      	str	r0, [r4, #48]	; 0x30
 8011b2c:	6063      	str	r3, [r4, #4]
 8011b2e:	4283      	cmp	r3, r0
 8011b30:	d002      	beq.n	8011b38 <__ssrefill_r+0x28>
 8011b32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b34:	6023      	str	r3, [r4, #0]
 8011b36:	bd10      	pop	{r4, pc}
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	2001      	movs	r0, #1
 8011b3c:	6023      	str	r3, [r4, #0]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	89a2      	ldrh	r2, [r4, #12]
 8011b42:	6063      	str	r3, [r4, #4]
 8011b44:	3320      	adds	r3, #32
 8011b46:	4313      	orrs	r3, r2
 8011b48:	81a3      	strh	r3, [r4, #12]
 8011b4a:	4240      	negs	r0, r0
 8011b4c:	e7f3      	b.n	8011b36 <__ssrefill_r+0x26>

08011b4e <_sfread_r>:
 8011b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b50:	0014      	movs	r4, r2
 8011b52:	435c      	muls	r4, r3
 8011b54:	b087      	sub	sp, #28
 8011b56:	1e26      	subs	r6, r4, #0
 8011b58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b5a:	9005      	str	r0, [sp, #20]
 8011b5c:	9101      	str	r1, [sp, #4]
 8011b5e:	9202      	str	r2, [sp, #8]
 8011b60:	9303      	str	r3, [sp, #12]
 8011b62:	d11e      	bne.n	8011ba2 <_sfread_r+0x54>
 8011b64:	0020      	movs	r0, r4
 8011b66:	b007      	add	sp, #28
 8011b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6a:	003a      	movs	r2, r7
 8011b6c:	9801      	ldr	r0, [sp, #4]
 8011b6e:	f7fa fce6 	bl	800c53e <memcpy>
 8011b72:	682b      	ldr	r3, [r5, #0]
 8011b74:	0029      	movs	r1, r5
 8011b76:	19db      	adds	r3, r3, r7
 8011b78:	602b      	str	r3, [r5, #0]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	606b      	str	r3, [r5, #4]
 8011b7e:	9b01      	ldr	r3, [sp, #4]
 8011b80:	9805      	ldr	r0, [sp, #20]
 8011b82:	19db      	adds	r3, r3, r7
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	1bf3      	subs	r3, r6, r7
 8011b88:	9304      	str	r3, [sp, #16]
 8011b8a:	f7ff ffc1 	bl	8011b10 <__ssrefill_r>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d006      	beq.n	8011ba0 <_sfread_r+0x52>
 8011b92:	193c      	adds	r4, r7, r4
 8011b94:	1ba0      	subs	r0, r4, r6
 8011b96:	9902      	ldr	r1, [sp, #8]
 8011b98:	f7ee fad0 	bl	800013c <__udivsi3>
 8011b9c:	0004      	movs	r4, r0
 8011b9e:	e7e1      	b.n	8011b64 <_sfread_r+0x16>
 8011ba0:	9e04      	ldr	r6, [sp, #16]
 8011ba2:	686f      	ldr	r7, [r5, #4]
 8011ba4:	6829      	ldr	r1, [r5, #0]
 8011ba6:	42b7      	cmp	r7, r6
 8011ba8:	d3df      	bcc.n	8011b6a <_sfread_r+0x1c>
 8011baa:	0032      	movs	r2, r6
 8011bac:	9801      	ldr	r0, [sp, #4]
 8011bae:	f7fa fcc6 	bl	800c53e <memcpy>
 8011bb2:	686b      	ldr	r3, [r5, #4]
 8011bb4:	9c03      	ldr	r4, [sp, #12]
 8011bb6:	1b9b      	subs	r3, r3, r6
 8011bb8:	606b      	str	r3, [r5, #4]
 8011bba:	682b      	ldr	r3, [r5, #0]
 8011bbc:	199b      	adds	r3, r3, r6
 8011bbe:	602b      	str	r3, [r5, #0]
 8011bc0:	e7d0      	b.n	8011b64 <_sfread_r+0x16>

08011bc2 <__sprint_r>:
 8011bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bc4:	6893      	ldr	r3, [r2, #8]
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	9001      	str	r0, [sp, #4]
 8011bca:	000d      	movs	r5, r1
 8011bcc:	0014      	movs	r4, r2
 8011bce:	1e18      	subs	r0, r3, #0
 8011bd0:	d018      	beq.n	8011c04 <__sprint_r+0x42>
 8011bd2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011bd4:	049b      	lsls	r3, r3, #18
 8011bd6:	d524      	bpl.n	8011c22 <__sprint_r+0x60>
 8011bd8:	6817      	ldr	r7, [r2, #0]
 8011bda:	2600      	movs	r6, #0
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	9302      	str	r3, [sp, #8]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	089b      	lsrs	r3, r3, #2
 8011be6:	9303      	str	r3, [sp, #12]
 8011be8:	9b03      	ldr	r3, [sp, #12]
 8011bea:	42b3      	cmp	r3, r6
 8011bec:	dc0e      	bgt.n	8011c0c <__sprint_r+0x4a>
 8011bee:	2203      	movs	r2, #3
 8011bf0:	9b00      	ldr	r3, [sp, #0]
 8011bf2:	68a0      	ldr	r0, [r4, #8]
 8011bf4:	4393      	bics	r3, r2
 8011bf6:	1ac0      	subs	r0, r0, r3
 8011bf8:	60a0      	str	r0, [r4, #8]
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	d1ec      	bne.n	8011bda <__sprint_r+0x18>
 8011c00:	2300      	movs	r3, #0
 8011c02:	60a3      	str	r3, [r4, #8]
 8011c04:	2300      	movs	r3, #0
 8011c06:	6063      	str	r3, [r4, #4]
 8011c08:	b005      	add	sp, #20
 8011c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c0c:	9902      	ldr	r1, [sp, #8]
 8011c0e:	00b3      	lsls	r3, r6, #2
 8011c10:	58c9      	ldr	r1, [r1, r3]
 8011c12:	002a      	movs	r2, r5
 8011c14:	9801      	ldr	r0, [sp, #4]
 8011c16:	f000 ff59 	bl	8012acc <_fputwc_r>
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	d0f0      	beq.n	8011c00 <__sprint_r+0x3e>
 8011c1e:	3601      	adds	r6, #1
 8011c20:	e7e2      	b.n	8011be8 <__sprint_r+0x26>
 8011c22:	9801      	ldr	r0, [sp, #4]
 8011c24:	f000 fd14 	bl	8012650 <__sfvwrite_r>
 8011c28:	e7ea      	b.n	8011c00 <__sprint_r+0x3e>
	...

08011c2c <_vfiprintf_r>:
 8011c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c2e:	b0c1      	sub	sp, #260	; 0x104
 8011c30:	001c      	movs	r4, r3
 8011c32:	001f      	movs	r7, r3
 8011c34:	9006      	str	r0, [sp, #24]
 8011c36:	9103      	str	r1, [sp, #12]
 8011c38:	9207      	str	r2, [sp, #28]
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d004      	beq.n	8011c48 <_vfiprintf_r+0x1c>
 8011c3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d101      	bne.n	8011c48 <_vfiprintf_r+0x1c>
 8011c44:	f7fa fa98 	bl	800c178 <__sinit>
 8011c48:	9b03      	ldr	r3, [sp, #12]
 8011c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c4c:	07db      	lsls	r3, r3, #31
 8011c4e:	d407      	bmi.n	8011c60 <_vfiprintf_r+0x34>
 8011c50:	9b03      	ldr	r3, [sp, #12]
 8011c52:	899b      	ldrh	r3, [r3, #12]
 8011c54:	059b      	lsls	r3, r3, #22
 8011c56:	d403      	bmi.n	8011c60 <_vfiprintf_r+0x34>
 8011c58:	9b03      	ldr	r3, [sp, #12]
 8011c5a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c5c:	f7fa fc62 	bl	800c524 <__retarget_lock_acquire_recursive>
 8011c60:	9b03      	ldr	r3, [sp, #12]
 8011c62:	220c      	movs	r2, #12
 8011c64:	5e9a      	ldrsh	r2, [r3, r2]
 8011c66:	2380      	movs	r3, #128	; 0x80
 8011c68:	019b      	lsls	r3, r3, #6
 8011c6a:	421a      	tst	r2, r3
 8011c6c:	d107      	bne.n	8011c7e <_vfiprintf_r+0x52>
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	9a03      	ldr	r2, [sp, #12]
 8011c72:	8193      	strh	r3, [r2, #12]
 8011c74:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011c76:	4aa3      	ldr	r2, [pc, #652]	; (8011f04 <_vfiprintf_r+0x2d8>)
 8011c78:	4013      	ands	r3, r2
 8011c7a:	9a03      	ldr	r2, [sp, #12]
 8011c7c:	6653      	str	r3, [r2, #100]	; 0x64
 8011c7e:	9b03      	ldr	r3, [sp, #12]
 8011c80:	899b      	ldrh	r3, [r3, #12]
 8011c82:	071b      	lsls	r3, r3, #28
 8011c84:	d503      	bpl.n	8011c8e <_vfiprintf_r+0x62>
 8011c86:	9b03      	ldr	r3, [sp, #12]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d118      	bne.n	8011cc0 <_vfiprintf_r+0x94>
 8011c8e:	9903      	ldr	r1, [sp, #12]
 8011c90:	9806      	ldr	r0, [sp, #24]
 8011c92:	f000 fe79 	bl	8012988 <__swsetup_r>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d012      	beq.n	8011cc0 <_vfiprintf_r+0x94>
 8011c9a:	9b03      	ldr	r3, [sp, #12]
 8011c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c9e:	07db      	lsls	r3, r3, #31
 8011ca0:	d505      	bpl.n	8011cae <_vfiprintf_r+0x82>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	425b      	negs	r3, r3
 8011ca6:	9308      	str	r3, [sp, #32]
 8011ca8:	9808      	ldr	r0, [sp, #32]
 8011caa:	b041      	add	sp, #260	; 0x104
 8011cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cae:	9b03      	ldr	r3, [sp, #12]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	059b      	lsls	r3, r3, #22
 8011cb4:	d4f5      	bmi.n	8011ca2 <_vfiprintf_r+0x76>
 8011cb6:	9b03      	ldr	r3, [sp, #12]
 8011cb8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011cba:	f7fa fc34 	bl	800c526 <__retarget_lock_release_recursive>
 8011cbe:	e7f0      	b.n	8011ca2 <_vfiprintf_r+0x76>
 8011cc0:	221a      	movs	r2, #26
 8011cc2:	9b03      	ldr	r3, [sp, #12]
 8011cc4:	899b      	ldrh	r3, [r3, #12]
 8011cc6:	401a      	ands	r2, r3
 8011cc8:	2a0a      	cmp	r2, #10
 8011cca:	d116      	bne.n	8011cfa <_vfiprintf_r+0xce>
 8011ccc:	9a03      	ldr	r2, [sp, #12]
 8011cce:	210e      	movs	r1, #14
 8011cd0:	5e52      	ldrsh	r2, [r2, r1]
 8011cd2:	2a00      	cmp	r2, #0
 8011cd4:	db11      	blt.n	8011cfa <_vfiprintf_r+0xce>
 8011cd6:	9a03      	ldr	r2, [sp, #12]
 8011cd8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011cda:	07d2      	lsls	r2, r2, #31
 8011cdc:	d405      	bmi.n	8011cea <_vfiprintf_r+0xbe>
 8011cde:	059b      	lsls	r3, r3, #22
 8011ce0:	d403      	bmi.n	8011cea <_vfiprintf_r+0xbe>
 8011ce2:	9b03      	ldr	r3, [sp, #12]
 8011ce4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011ce6:	f7fa fc1e 	bl	800c526 <__retarget_lock_release_recursive>
 8011cea:	0023      	movs	r3, r4
 8011cec:	9a07      	ldr	r2, [sp, #28]
 8011cee:	9903      	ldr	r1, [sp, #12]
 8011cf0:	9806      	ldr	r0, [sp, #24]
 8011cf2:	f000 fc69 	bl	80125c8 <__sbprintf>
 8011cf6:	9008      	str	r0, [sp, #32]
 8011cf8:	e7d6      	b.n	8011ca8 <_vfiprintf_r+0x7c>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	ad17      	add	r5, sp, #92	; 0x5c
 8011cfe:	9514      	str	r5, [sp, #80]	; 0x50
 8011d00:	9316      	str	r3, [sp, #88]	; 0x58
 8011d02:	9315      	str	r3, [sp, #84]	; 0x54
 8011d04:	930c      	str	r3, [sp, #48]	; 0x30
 8011d06:	930d      	str	r3, [sp, #52]	; 0x34
 8011d08:	930e      	str	r3, [sp, #56]	; 0x38
 8011d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d0c:	9308      	str	r3, [sp, #32]
 8011d0e:	9c07      	ldr	r4, [sp, #28]
 8011d10:	7823      	ldrb	r3, [r4, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <_vfiprintf_r+0xf0>
 8011d16:	2b25      	cmp	r3, #37	; 0x25
 8011d18:	d000      	beq.n	8011d1c <_vfiprintf_r+0xf0>
 8011d1a:	e08d      	b.n	8011e38 <_vfiprintf_r+0x20c>
 8011d1c:	9b07      	ldr	r3, [sp, #28]
 8011d1e:	1ae6      	subs	r6, r4, r3
 8011d20:	429c      	cmp	r4, r3
 8011d22:	d016      	beq.n	8011d52 <_vfiprintf_r+0x126>
 8011d24:	602b      	str	r3, [r5, #0]
 8011d26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d28:	606e      	str	r6, [r5, #4]
 8011d2a:	199b      	adds	r3, r3, r6
 8011d2c:	9316      	str	r3, [sp, #88]	; 0x58
 8011d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d30:	3508      	adds	r5, #8
 8011d32:	3301      	adds	r3, #1
 8011d34:	9315      	str	r3, [sp, #84]	; 0x54
 8011d36:	2b07      	cmp	r3, #7
 8011d38:	dd08      	ble.n	8011d4c <_vfiprintf_r+0x120>
 8011d3a:	9903      	ldr	r1, [sp, #12]
 8011d3c:	9806      	ldr	r0, [sp, #24]
 8011d3e:	aa14      	add	r2, sp, #80	; 0x50
 8011d40:	f7ff ff3f 	bl	8011bc2 <__sprint_r>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d000      	beq.n	8011d4a <_vfiprintf_r+0x11e>
 8011d48:	e3d9      	b.n	80124fe <_vfiprintf_r+0x8d2>
 8011d4a:	ad17      	add	r5, sp, #92	; 0x5c
 8011d4c:	9b08      	ldr	r3, [sp, #32]
 8011d4e:	199b      	adds	r3, r3, r6
 8011d50:	9308      	str	r3, [sp, #32]
 8011d52:	7823      	ldrb	r3, [r4, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d101      	bne.n	8011d5c <_vfiprintf_r+0x130>
 8011d58:	f000 fbf6 	bl	8012548 <_vfiprintf_r+0x91c>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	a912      	add	r1, sp, #72	; 0x48
 8011d60:	70ca      	strb	r2, [r1, #3]
 8011d62:	2101      	movs	r1, #1
 8011d64:	1c63      	adds	r3, r4, #1
 8011d66:	0014      	movs	r4, r2
 8011d68:	4249      	negs	r1, r1
 8011d6a:	9105      	str	r1, [sp, #20]
 8011d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d6e:	1c5a      	adds	r2, r3, #1
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	9207      	str	r2, [sp, #28]
 8011d74:	0018      	movs	r0, r3
 8011d76:	3820      	subs	r0, #32
 8011d78:	285a      	cmp	r0, #90	; 0x5a
 8011d7a:	d900      	bls.n	8011d7e <_vfiprintf_r+0x152>
 8011d7c:	e362      	b.n	8012444 <_vfiprintf_r+0x818>
 8011d7e:	f7ee f9d3 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011d82:	0078      	.short	0x0078
 8011d84:	03610361 	.word	0x03610361
 8011d88:	03610081 	.word	0x03610081
 8011d8c:	03610361 	.word	0x03610361
 8011d90:	0361005d 	.word	0x0361005d
 8011d94:	00830361 	.word	0x00830361
 8011d98:	0361008b 	.word	0x0361008b
 8011d9c:	008f0089 	.word	0x008f0089
 8011da0:	00ad0361 	.word	0x00ad0361
 8011da4:	00af00af 	.word	0x00af00af
 8011da8:	00af00af 	.word	0x00af00af
 8011dac:	00af00af 	.word	0x00af00af
 8011db0:	00af00af 	.word	0x00af00af
 8011db4:	036100af 	.word	0x036100af
 8011db8:	03610361 	.word	0x03610361
 8011dbc:	03610361 	.word	0x03610361
 8011dc0:	03610361 	.word	0x03610361
 8011dc4:	03610361 	.word	0x03610361
 8011dc8:	00e600da 	.word	0x00e600da
 8011dcc:	03610361 	.word	0x03610361
 8011dd0:	03610361 	.word	0x03610361
 8011dd4:	03610361 	.word	0x03610361
 8011dd8:	03610361 	.word	0x03610361
 8011ddc:	03610361 	.word	0x03610361
 8011de0:	03610143 	.word	0x03610143
 8011de4:	03610361 	.word	0x03610361
 8011de8:	03610182 	.word	0x03610182
 8011dec:	0361027c 	.word	0x0361027c
 8011df0:	02ae0361 	.word	0x02ae0361
 8011df4:	03610361 	.word	0x03610361
 8011df8:	03610361 	.word	0x03610361
 8011dfc:	03610361 	.word	0x03610361
 8011e00:	03610361 	.word	0x03610361
 8011e04:	03610361 	.word	0x03610361
 8011e08:	00e800da 	.word	0x00e800da
 8011e0c:	03610361 	.word	0x03610361
 8011e10:	00c30361 	.word	0x00c30361
 8011e14:	00d600e8 	.word	0x00d600e8
 8011e18:	00cf0361 	.word	0x00cf0361
 8011e1c:	01260361 	.word	0x01260361
 8011e20:	01740145 	.word	0x01740145
 8011e24:	036100d6 	.word	0x036100d6
 8011e28:	007f0182 	.word	0x007f0182
 8011e2c:	0361027e 	.word	0x0361027e
 8011e30:	02cd0361 	.word	0x02cd0361
 8011e34:	007f0361 	.word	0x007f0361
 8011e38:	3401      	adds	r4, #1
 8011e3a:	e769      	b.n	8011d10 <_vfiprintf_r+0xe4>
 8011e3c:	9806      	ldr	r0, [sp, #24]
 8011e3e:	f7fe fa47 	bl	80102d0 <_localeconv_r>
 8011e42:	6843      	ldr	r3, [r0, #4]
 8011e44:	0018      	movs	r0, r3
 8011e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e48:	f7ee f95c 	bl	8000104 <strlen>
 8011e4c:	900e      	str	r0, [sp, #56]	; 0x38
 8011e4e:	9806      	ldr	r0, [sp, #24]
 8011e50:	f7fe fa3e 	bl	80102d0 <_localeconv_r>
 8011e54:	6883      	ldr	r3, [r0, #8]
 8011e56:	930d      	str	r3, [sp, #52]	; 0x34
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d010      	beq.n	8011e80 <_vfiprintf_r+0x254>
 8011e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d00d      	beq.n	8011e80 <_vfiprintf_r+0x254>
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00a      	beq.n	8011e80 <_vfiprintf_r+0x254>
 8011e6a:	2380      	movs	r3, #128	; 0x80
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	431c      	orrs	r4, r3
 8011e70:	e006      	b.n	8011e80 <_vfiprintf_r+0x254>
 8011e72:	ab12      	add	r3, sp, #72	; 0x48
 8011e74:	78da      	ldrb	r2, [r3, #3]
 8011e76:	3303      	adds	r3, #3
 8011e78:	2a00      	cmp	r2, #0
 8011e7a:	d101      	bne.n	8011e80 <_vfiprintf_r+0x254>
 8011e7c:	3220      	adds	r2, #32
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	9b07      	ldr	r3, [sp, #28]
 8011e82:	e774      	b.n	8011d6e <_vfiprintf_r+0x142>
 8011e84:	2301      	movs	r3, #1
 8011e86:	e7f2      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011e88:	cf08      	ldmia	r7!, {r3}
 8011e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	daf7      	bge.n	8011e80 <_vfiprintf_r+0x254>
 8011e90:	425b      	negs	r3, r3
 8011e92:	9309      	str	r3, [sp, #36]	; 0x24
 8011e94:	2304      	movs	r3, #4
 8011e96:	e7ea      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011e98:	222b      	movs	r2, #43	; 0x2b
 8011e9a:	ab12      	add	r3, sp, #72	; 0x48
 8011e9c:	70da      	strb	r2, [r3, #3]
 8011e9e:	e7ef      	b.n	8011e80 <_vfiprintf_r+0x254>
 8011ea0:	9b07      	ldr	r3, [sp, #28]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ea8:	d00f      	beq.n	8011eca <_vfiprintf_r+0x29e>
 8011eaa:	2100      	movs	r1, #0
 8011eac:	9105      	str	r1, [sp, #20]
 8011eae:	0019      	movs	r1, r3
 8011eb0:	3930      	subs	r1, #48	; 0x30
 8011eb2:	9207      	str	r2, [sp, #28]
 8011eb4:	2909      	cmp	r1, #9
 8011eb6:	d900      	bls.n	8011eba <_vfiprintf_r+0x28e>
 8011eb8:	e75c      	b.n	8011d74 <_vfiprintf_r+0x148>
 8011eba:	200a      	movs	r0, #10
 8011ebc:	9b05      	ldr	r3, [sp, #20]
 8011ebe:	4343      	muls	r3, r0
 8011ec0:	185b      	adds	r3, r3, r1
 8011ec2:	9305      	str	r3, [sp, #20]
 8011ec4:	7813      	ldrb	r3, [r2, #0]
 8011ec6:	3201      	adds	r2, #1
 8011ec8:	e7f1      	b.n	8011eae <_vfiprintf_r+0x282>
 8011eca:	cf08      	ldmia	r7!, {r3}
 8011ecc:	9305      	str	r3, [sp, #20]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	da02      	bge.n	8011ed8 <_vfiprintf_r+0x2ac>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	425b      	negs	r3, r3
 8011ed6:	9305      	str	r3, [sp, #20]
 8011ed8:	9207      	str	r2, [sp, #28]
 8011eda:	e7d1      	b.n	8011e80 <_vfiprintf_r+0x254>
 8011edc:	2380      	movs	r3, #128	; 0x80
 8011ede:	e7c6      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	9a07      	ldr	r2, [sp, #28]
 8011ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8011ee6:	200a      	movs	r0, #10
 8011ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011eea:	3b30      	subs	r3, #48	; 0x30
 8011eec:	4341      	muls	r1, r0
 8011eee:	185b      	adds	r3, r3, r1
 8011ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef2:	0013      	movs	r3, r2
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	3201      	adds	r2, #1
 8011ef8:	0019      	movs	r1, r3
 8011efa:	3930      	subs	r1, #48	; 0x30
 8011efc:	9207      	str	r2, [sp, #28]
 8011efe:	2909      	cmp	r1, #9
 8011f00:	d9f1      	bls.n	8011ee6 <_vfiprintf_r+0x2ba>
 8011f02:	e737      	b.n	8011d74 <_vfiprintf_r+0x148>
 8011f04:	ffffdfff 	.word	0xffffdfff
 8011f08:	9b07      	ldr	r3, [sp, #28]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	2b68      	cmp	r3, #104	; 0x68
 8011f0e:	d105      	bne.n	8011f1c <_vfiprintf_r+0x2f0>
 8011f10:	9b07      	ldr	r3, [sp, #28]
 8011f12:	3301      	adds	r3, #1
 8011f14:	9307      	str	r3, [sp, #28]
 8011f16:	2380      	movs	r3, #128	; 0x80
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	e7a8      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011f1c:	2340      	movs	r3, #64	; 0x40
 8011f1e:	e7a6      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011f20:	9b07      	ldr	r3, [sp, #28]
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	2b6c      	cmp	r3, #108	; 0x6c
 8011f26:	d104      	bne.n	8011f32 <_vfiprintf_r+0x306>
 8011f28:	9b07      	ldr	r3, [sp, #28]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	9307      	str	r3, [sp, #28]
 8011f2e:	2320      	movs	r3, #32
 8011f30:	e79d      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011f32:	2310      	movs	r3, #16
 8011f34:	e79b      	b.n	8011e6e <_vfiprintf_r+0x242>
 8011f36:	003a      	movs	r2, r7
 8011f38:	ca08      	ldmia	r2!, {r3}
 8011f3a:	ae27      	add	r6, sp, #156	; 0x9c
 8011f3c:	7033      	strb	r3, [r6, #0]
 8011f3e:	2300      	movs	r3, #0
 8011f40:	9204      	str	r2, [sp, #16]
 8011f42:	aa12      	add	r2, sp, #72	; 0x48
 8011f44:	70d3      	strb	r3, [r2, #3]
 8011f46:	2201      	movs	r2, #1
 8011f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f4a:	9205      	str	r2, [sp, #20]
 8011f4c:	e0b0      	b.n	80120b0 <_vfiprintf_r+0x484>
 8011f4e:	2310      	movs	r3, #16
 8011f50:	431c      	orrs	r4, r3
 8011f52:	06a3      	lsls	r3, r4, #26
 8011f54:	d52a      	bpl.n	8011fac <_vfiprintf_r+0x380>
 8011f56:	2307      	movs	r3, #7
 8011f58:	3707      	adds	r7, #7
 8011f5a:	439f      	bics	r7, r3
 8011f5c:	0039      	movs	r1, r7
 8011f5e:	c90c      	ldmia	r1!, {r2, r3}
 8011f60:	9200      	str	r2, [sp, #0]
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	9104      	str	r1, [sp, #16]
 8011f66:	9a01      	ldr	r2, [sp, #4]
 8011f68:	2301      	movs	r3, #1
 8011f6a:	2a00      	cmp	r2, #0
 8011f6c:	da09      	bge.n	8011f82 <_vfiprintf_r+0x356>
 8011f6e:	9e00      	ldr	r6, [sp, #0]
 8011f70:	9f01      	ldr	r7, [sp, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	4271      	negs	r1, r6
 8011f76:	41ba      	sbcs	r2, r7
 8011f78:	9100      	str	r1, [sp, #0]
 8011f7a:	9201      	str	r2, [sp, #4]
 8011f7c:	212d      	movs	r1, #45	; 0x2d
 8011f7e:	aa12      	add	r2, sp, #72	; 0x48
 8011f80:	70d1      	strb	r1, [r2, #3]
 8011f82:	9901      	ldr	r1, [sp, #4]
 8011f84:	9a00      	ldr	r2, [sp, #0]
 8011f86:	430a      	orrs	r2, r1
 8011f88:	9905      	ldr	r1, [sp, #20]
 8011f8a:	3101      	adds	r1, #1
 8011f8c:	d100      	bne.n	8011f90 <_vfiprintf_r+0x364>
 8011f8e:	e2e9      	b.n	8012564 <_vfiprintf_r+0x938>
 8011f90:	2180      	movs	r1, #128	; 0x80
 8011f92:	0027      	movs	r7, r4
 8011f94:	438f      	bics	r7, r1
 8011f96:	2a00      	cmp	r2, #0
 8011f98:	d000      	beq.n	8011f9c <_vfiprintf_r+0x370>
 8011f9a:	e2e7      	b.n	801256c <_vfiprintf_r+0x940>
 8011f9c:	9a05      	ldr	r2, [sp, #20]
 8011f9e:	2a00      	cmp	r2, #0
 8011fa0:	d100      	bne.n	8011fa4 <_vfiprintf_r+0x378>
 8011fa2:	e243      	b.n	801242c <_vfiprintf_r+0x800>
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d000      	beq.n	8011faa <_vfiprintf_r+0x37e>
 8011fa8:	e2e3      	b.n	8012572 <_vfiprintf_r+0x946>
 8011faa:	e1e7      	b.n	801237c <_vfiprintf_r+0x750>
 8011fac:	003a      	movs	r2, r7
 8011fae:	ca08      	ldmia	r2!, {r3}
 8011fb0:	9204      	str	r2, [sp, #16]
 8011fb2:	06e2      	lsls	r2, r4, #27
 8011fb4:	d503      	bpl.n	8011fbe <_vfiprintf_r+0x392>
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	17db      	asrs	r3, r3, #31
 8011fba:	9301      	str	r3, [sp, #4]
 8011fbc:	e7d3      	b.n	8011f66 <_vfiprintf_r+0x33a>
 8011fbe:	0662      	lsls	r2, r4, #25
 8011fc0:	d501      	bpl.n	8011fc6 <_vfiprintf_r+0x39a>
 8011fc2:	b21b      	sxth	r3, r3
 8011fc4:	e7f7      	b.n	8011fb6 <_vfiprintf_r+0x38a>
 8011fc6:	05a2      	lsls	r2, r4, #22
 8011fc8:	d5f5      	bpl.n	8011fb6 <_vfiprintf_r+0x38a>
 8011fca:	b25b      	sxtb	r3, r3
 8011fcc:	e7f3      	b.n	8011fb6 <_vfiprintf_r+0x38a>
 8011fce:	1d3b      	adds	r3, r7, #4
 8011fd0:	9304      	str	r3, [sp, #16]
 8011fd2:	06a3      	lsls	r3, r4, #26
 8011fd4:	d506      	bpl.n	8011fe4 <_vfiprintf_r+0x3b8>
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	9a08      	ldr	r2, [sp, #32]
 8011fda:	601a      	str	r2, [r3, #0]
 8011fdc:	17d2      	asrs	r2, r2, #31
 8011fde:	605a      	str	r2, [r3, #4]
 8011fe0:	9f04      	ldr	r7, [sp, #16]
 8011fe2:	e694      	b.n	8011d0e <_vfiprintf_r+0xe2>
 8011fe4:	06e3      	lsls	r3, r4, #27
 8011fe6:	d503      	bpl.n	8011ff0 <_vfiprintf_r+0x3c4>
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	9a08      	ldr	r2, [sp, #32]
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	e7f7      	b.n	8011fe0 <_vfiprintf_r+0x3b4>
 8011ff0:	0663      	lsls	r3, r4, #25
 8011ff2:	d503      	bpl.n	8011ffc <_vfiprintf_r+0x3d0>
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	9a08      	ldr	r2, [sp, #32]
 8011ff8:	801a      	strh	r2, [r3, #0]
 8011ffa:	e7f1      	b.n	8011fe0 <_vfiprintf_r+0x3b4>
 8011ffc:	05a4      	lsls	r4, r4, #22
 8011ffe:	d5f3      	bpl.n	8011fe8 <_vfiprintf_r+0x3bc>
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	9a08      	ldr	r2, [sp, #32]
 8012004:	701a      	strb	r2, [r3, #0]
 8012006:	e7eb      	b.n	8011fe0 <_vfiprintf_r+0x3b4>
 8012008:	2310      	movs	r3, #16
 801200a:	431c      	orrs	r4, r3
 801200c:	2320      	movs	r3, #32
 801200e:	0020      	movs	r0, r4
 8012010:	4018      	ands	r0, r3
 8012012:	421c      	tst	r4, r3
 8012014:	d00d      	beq.n	8012032 <_vfiprintf_r+0x406>
 8012016:	3b19      	subs	r3, #25
 8012018:	3707      	adds	r7, #7
 801201a:	439f      	bics	r7, r3
 801201c:	0039      	movs	r1, r7
 801201e:	c90c      	ldmia	r1!, {r2, r3}
 8012020:	9200      	str	r2, [sp, #0]
 8012022:	9301      	str	r3, [sp, #4]
 8012024:	9104      	str	r1, [sp, #16]
 8012026:	4bcc      	ldr	r3, [pc, #816]	; (8012358 <_vfiprintf_r+0x72c>)
 8012028:	401c      	ands	r4, r3
 801202a:	2300      	movs	r3, #0
 801202c:	2100      	movs	r1, #0
 801202e:	aa12      	add	r2, sp, #72	; 0x48
 8012030:	e7a6      	b.n	8011f80 <_vfiprintf_r+0x354>
 8012032:	003a      	movs	r2, r7
 8012034:	ca08      	ldmia	r2!, {r3}
 8012036:	0021      	movs	r1, r4
 8012038:	9204      	str	r2, [sp, #16]
 801203a:	2210      	movs	r2, #16
 801203c:	4011      	ands	r1, r2
 801203e:	4214      	tst	r4, r2
 8012040:	d002      	beq.n	8012048 <_vfiprintf_r+0x41c>
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	9001      	str	r0, [sp, #4]
 8012046:	e7ee      	b.n	8012026 <_vfiprintf_r+0x3fa>
 8012048:	2240      	movs	r2, #64	; 0x40
 801204a:	0020      	movs	r0, r4
 801204c:	4010      	ands	r0, r2
 801204e:	4214      	tst	r4, r2
 8012050:	d003      	beq.n	801205a <_vfiprintf_r+0x42e>
 8012052:	b29b      	uxth	r3, r3
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	9101      	str	r1, [sp, #4]
 8012058:	e7e5      	b.n	8012026 <_vfiprintf_r+0x3fa>
 801205a:	2280      	movs	r2, #128	; 0x80
 801205c:	0021      	movs	r1, r4
 801205e:	0092      	lsls	r2, r2, #2
 8012060:	4011      	ands	r1, r2
 8012062:	4214      	tst	r4, r2
 8012064:	d0f6      	beq.n	8012054 <_vfiprintf_r+0x428>
 8012066:	b2db      	uxtb	r3, r3
 8012068:	e7eb      	b.n	8012042 <_vfiprintf_r+0x416>
 801206a:	003b      	movs	r3, r7
 801206c:	cb04      	ldmia	r3!, {r2}
 801206e:	49bb      	ldr	r1, [pc, #748]	; (801235c <_vfiprintf_r+0x730>)
 8012070:	9304      	str	r3, [sp, #16]
 8012072:	2300      	movs	r3, #0
 8012074:	9200      	str	r2, [sp, #0]
 8012076:	aa13      	add	r2, sp, #76	; 0x4c
 8012078:	8011      	strh	r1, [r2, #0]
 801207a:	4ab9      	ldr	r2, [pc, #740]	; (8012360 <_vfiprintf_r+0x734>)
 801207c:	9301      	str	r3, [sp, #4]
 801207e:	3302      	adds	r3, #2
 8012080:	431c      	orrs	r4, r3
 8012082:	920c      	str	r2, [sp, #48]	; 0x30
 8012084:	e7d2      	b.n	801202c <_vfiprintf_r+0x400>
 8012086:	003b      	movs	r3, r7
 8012088:	2700      	movs	r7, #0
 801208a:	cb40      	ldmia	r3!, {r6}
 801208c:	9304      	str	r3, [sp, #16]
 801208e:	ab12      	add	r3, sp, #72	; 0x48
 8012090:	70df      	strb	r7, [r3, #3]
 8012092:	9b05      	ldr	r3, [sp, #20]
 8012094:	3301      	adds	r3, #1
 8012096:	d100      	bne.n	801209a <_vfiprintf_r+0x46e>
 8012098:	e0ea      	b.n	8012270 <_vfiprintf_r+0x644>
 801209a:	0039      	movs	r1, r7
 801209c:	0030      	movs	r0, r6
 801209e:	9a05      	ldr	r2, [sp, #20]
 80120a0:	f7fe f92e 	bl	8010300 <memchr>
 80120a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80120a6:	42b8      	cmp	r0, r7
 80120a8:	d002      	beq.n	80120b0 <_vfiprintf_r+0x484>
 80120aa:	1b83      	subs	r3, r0, r6
 80120ac:	9305      	str	r3, [sp, #20]
 80120ae:	970b      	str	r7, [sp, #44]	; 0x2c
 80120b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b2:	9a05      	ldr	r2, [sp, #20]
 80120b4:	930a      	str	r3, [sp, #40]	; 0x28
 80120b6:	4293      	cmp	r3, r2
 80120b8:	da00      	bge.n	80120bc <_vfiprintf_r+0x490>
 80120ba:	920a      	str	r2, [sp, #40]	; 0x28
 80120bc:	ab12      	add	r3, sp, #72	; 0x48
 80120be:	3303      	adds	r3, #3
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	1e5a      	subs	r2, r3, #1
 80120c4:	4193      	sbcs	r3, r2
 80120c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120c8:	18d3      	adds	r3, r2, r3
 80120ca:	930a      	str	r3, [sp, #40]	; 0x28
 80120cc:	0022      	movs	r2, r4
 80120ce:	2302      	movs	r3, #2
 80120d0:	401a      	ands	r2, r3
 80120d2:	9210      	str	r2, [sp, #64]	; 0x40
 80120d4:	421c      	tst	r4, r3
 80120d6:	d002      	beq.n	80120de <_vfiprintf_r+0x4b2>
 80120d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120da:	3302      	adds	r3, #2
 80120dc:	930a      	str	r3, [sp, #40]	; 0x28
 80120de:	2384      	movs	r3, #132	; 0x84
 80120e0:	0022      	movs	r2, r4
 80120e2:	401a      	ands	r2, r3
 80120e4:	9211      	str	r2, [sp, #68]	; 0x44
 80120e6:	421c      	tst	r4, r3
 80120e8:	d11e      	bne.n	8012128 <_vfiprintf_r+0x4fc>
 80120ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120ee:	1a9f      	subs	r7, r3, r2
 80120f0:	2f00      	cmp	r7, #0
 80120f2:	dd19      	ble.n	8012128 <_vfiprintf_r+0x4fc>
 80120f4:	0029      	movs	r1, r5
 80120f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120f8:	489a      	ldr	r0, [pc, #616]	; (8012364 <_vfiprintf_r+0x738>)
 80120fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120fc:	3301      	adds	r3, #1
 80120fe:	3108      	adds	r1, #8
 8012100:	6028      	str	r0, [r5, #0]
 8012102:	2f10      	cmp	r7, #16
 8012104:	dd00      	ble.n	8012108 <_vfiprintf_r+0x4dc>
 8012106:	e1a7      	b.n	8012458 <_vfiprintf_r+0x82c>
 8012108:	606f      	str	r7, [r5, #4]
 801210a:	18bf      	adds	r7, r7, r2
 801210c:	000d      	movs	r5, r1
 801210e:	9716      	str	r7, [sp, #88]	; 0x58
 8012110:	9315      	str	r3, [sp, #84]	; 0x54
 8012112:	2b07      	cmp	r3, #7
 8012114:	dd08      	ble.n	8012128 <_vfiprintf_r+0x4fc>
 8012116:	9903      	ldr	r1, [sp, #12]
 8012118:	9806      	ldr	r0, [sp, #24]
 801211a:	aa14      	add	r2, sp, #80	; 0x50
 801211c:	f7ff fd51 	bl	8011bc2 <__sprint_r>
 8012120:	2800      	cmp	r0, #0
 8012122:	d000      	beq.n	8012126 <_vfiprintf_r+0x4fa>
 8012124:	e1eb      	b.n	80124fe <_vfiprintf_r+0x8d2>
 8012126:	ad17      	add	r5, sp, #92	; 0x5c
 8012128:	a912      	add	r1, sp, #72	; 0x48
 801212a:	78c8      	ldrb	r0, [r1, #3]
 801212c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801212e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012130:	3103      	adds	r1, #3
 8012132:	2800      	cmp	r0, #0
 8012134:	d012      	beq.n	801215c <_vfiprintf_r+0x530>
 8012136:	6029      	str	r1, [r5, #0]
 8012138:	2101      	movs	r1, #1
 801213a:	3301      	adds	r3, #1
 801213c:	1852      	adds	r2, r2, r1
 801213e:	6069      	str	r1, [r5, #4]
 8012140:	9216      	str	r2, [sp, #88]	; 0x58
 8012142:	9315      	str	r3, [sp, #84]	; 0x54
 8012144:	3508      	adds	r5, #8
 8012146:	2b07      	cmp	r3, #7
 8012148:	dd08      	ble.n	801215c <_vfiprintf_r+0x530>
 801214a:	9903      	ldr	r1, [sp, #12]
 801214c:	9806      	ldr	r0, [sp, #24]
 801214e:	aa14      	add	r2, sp, #80	; 0x50
 8012150:	f7ff fd37 	bl	8011bc2 <__sprint_r>
 8012154:	2800      	cmp	r0, #0
 8012156:	d000      	beq.n	801215a <_vfiprintf_r+0x52e>
 8012158:	e1d1      	b.n	80124fe <_vfiprintf_r+0x8d2>
 801215a:	ad17      	add	r5, sp, #92	; 0x5c
 801215c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801215e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012162:	2900      	cmp	r1, #0
 8012164:	d013      	beq.n	801218e <_vfiprintf_r+0x562>
 8012166:	a913      	add	r1, sp, #76	; 0x4c
 8012168:	6029      	str	r1, [r5, #0]
 801216a:	2102      	movs	r1, #2
 801216c:	3301      	adds	r3, #1
 801216e:	1852      	adds	r2, r2, r1
 8012170:	6069      	str	r1, [r5, #4]
 8012172:	9216      	str	r2, [sp, #88]	; 0x58
 8012174:	9315      	str	r3, [sp, #84]	; 0x54
 8012176:	3508      	adds	r5, #8
 8012178:	2b07      	cmp	r3, #7
 801217a:	dd08      	ble.n	801218e <_vfiprintf_r+0x562>
 801217c:	9903      	ldr	r1, [sp, #12]
 801217e:	9806      	ldr	r0, [sp, #24]
 8012180:	aa14      	add	r2, sp, #80	; 0x50
 8012182:	f7ff fd1e 	bl	8011bc2 <__sprint_r>
 8012186:	2800      	cmp	r0, #0
 8012188:	d000      	beq.n	801218c <_vfiprintf_r+0x560>
 801218a:	e1b8      	b.n	80124fe <_vfiprintf_r+0x8d2>
 801218c:	ad17      	add	r5, sp, #92	; 0x5c
 801218e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012190:	2b80      	cmp	r3, #128	; 0x80
 8012192:	d11e      	bne.n	80121d2 <_vfiprintf_r+0x5a6>
 8012194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012198:	1a9f      	subs	r7, r3, r2
 801219a:	2f00      	cmp	r7, #0
 801219c:	dd19      	ble.n	80121d2 <_vfiprintf_r+0x5a6>
 801219e:	0029      	movs	r1, r5
 80121a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121a2:	4871      	ldr	r0, [pc, #452]	; (8012368 <_vfiprintf_r+0x73c>)
 80121a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121a6:	3301      	adds	r3, #1
 80121a8:	3108      	adds	r1, #8
 80121aa:	6028      	str	r0, [r5, #0]
 80121ac:	2f10      	cmp	r7, #16
 80121ae:	dd00      	ble.n	80121b2 <_vfiprintf_r+0x586>
 80121b0:	e164      	b.n	801247c <_vfiprintf_r+0x850>
 80121b2:	606f      	str	r7, [r5, #4]
 80121b4:	18bf      	adds	r7, r7, r2
 80121b6:	000d      	movs	r5, r1
 80121b8:	9716      	str	r7, [sp, #88]	; 0x58
 80121ba:	9315      	str	r3, [sp, #84]	; 0x54
 80121bc:	2b07      	cmp	r3, #7
 80121be:	dd08      	ble.n	80121d2 <_vfiprintf_r+0x5a6>
 80121c0:	9903      	ldr	r1, [sp, #12]
 80121c2:	9806      	ldr	r0, [sp, #24]
 80121c4:	aa14      	add	r2, sp, #80	; 0x50
 80121c6:	f7ff fcfc 	bl	8011bc2 <__sprint_r>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d000      	beq.n	80121d0 <_vfiprintf_r+0x5a4>
 80121ce:	e196      	b.n	80124fe <_vfiprintf_r+0x8d2>
 80121d0:	ad17      	add	r5, sp, #92	; 0x5c
 80121d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121d4:	9a05      	ldr	r2, [sp, #20]
 80121d6:	1a9f      	subs	r7, r3, r2
 80121d8:	2f00      	cmp	r7, #0
 80121da:	dd19      	ble.n	8012210 <_vfiprintf_r+0x5e4>
 80121dc:	0029      	movs	r1, r5
 80121de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121e0:	4861      	ldr	r0, [pc, #388]	; (8012368 <_vfiprintf_r+0x73c>)
 80121e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121e4:	3301      	adds	r3, #1
 80121e6:	3108      	adds	r1, #8
 80121e8:	6028      	str	r0, [r5, #0]
 80121ea:	2f10      	cmp	r7, #16
 80121ec:	dd00      	ble.n	80121f0 <_vfiprintf_r+0x5c4>
 80121ee:	e157      	b.n	80124a0 <_vfiprintf_r+0x874>
 80121f0:	606f      	str	r7, [r5, #4]
 80121f2:	18bf      	adds	r7, r7, r2
 80121f4:	000d      	movs	r5, r1
 80121f6:	9716      	str	r7, [sp, #88]	; 0x58
 80121f8:	9315      	str	r3, [sp, #84]	; 0x54
 80121fa:	2b07      	cmp	r3, #7
 80121fc:	dd08      	ble.n	8012210 <_vfiprintf_r+0x5e4>
 80121fe:	9903      	ldr	r1, [sp, #12]
 8012200:	9806      	ldr	r0, [sp, #24]
 8012202:	aa14      	add	r2, sp, #80	; 0x50
 8012204:	f7ff fcdd 	bl	8011bc2 <__sprint_r>
 8012208:	2800      	cmp	r0, #0
 801220a:	d000      	beq.n	801220e <_vfiprintf_r+0x5e2>
 801220c:	e177      	b.n	80124fe <_vfiprintf_r+0x8d2>
 801220e:	ad17      	add	r5, sp, #92	; 0x5c
 8012210:	9b05      	ldr	r3, [sp, #20]
 8012212:	9a05      	ldr	r2, [sp, #20]
 8012214:	606b      	str	r3, [r5, #4]
 8012216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012218:	602e      	str	r6, [r5, #0]
 801221a:	189b      	adds	r3, r3, r2
 801221c:	9316      	str	r3, [sp, #88]	; 0x58
 801221e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012220:	3508      	adds	r5, #8
 8012222:	3301      	adds	r3, #1
 8012224:	9315      	str	r3, [sp, #84]	; 0x54
 8012226:	2b07      	cmp	r3, #7
 8012228:	dd08      	ble.n	801223c <_vfiprintf_r+0x610>
 801222a:	9903      	ldr	r1, [sp, #12]
 801222c:	9806      	ldr	r0, [sp, #24]
 801222e:	aa14      	add	r2, sp, #80	; 0x50
 8012230:	f7ff fcc7 	bl	8011bc2 <__sprint_r>
 8012234:	2800      	cmp	r0, #0
 8012236:	d000      	beq.n	801223a <_vfiprintf_r+0x60e>
 8012238:	e161      	b.n	80124fe <_vfiprintf_r+0x8d2>
 801223a:	ad17      	add	r5, sp, #92	; 0x5c
 801223c:	0764      	lsls	r4, r4, #29
 801223e:	d500      	bpl.n	8012242 <_vfiprintf_r+0x616>
 8012240:	e140      	b.n	80124c4 <_vfiprintf_r+0x898>
 8012242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012246:	4293      	cmp	r3, r2
 8012248:	da00      	bge.n	801224c <_vfiprintf_r+0x620>
 801224a:	0013      	movs	r3, r2
 801224c:	9a08      	ldr	r2, [sp, #32]
 801224e:	18d3      	adds	r3, r2, r3
 8012250:	9308      	str	r3, [sp, #32]
 8012252:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012254:	2b00      	cmp	r3, #0
 8012256:	d007      	beq.n	8012268 <_vfiprintf_r+0x63c>
 8012258:	9903      	ldr	r1, [sp, #12]
 801225a:	9806      	ldr	r0, [sp, #24]
 801225c:	aa14      	add	r2, sp, #80	; 0x50
 801225e:	f7ff fcb0 	bl	8011bc2 <__sprint_r>
 8012262:	2800      	cmp	r0, #0
 8012264:	d000      	beq.n	8012268 <_vfiprintf_r+0x63c>
 8012266:	e14a      	b.n	80124fe <_vfiprintf_r+0x8d2>
 8012268:	2300      	movs	r3, #0
 801226a:	ad17      	add	r5, sp, #92	; 0x5c
 801226c:	9315      	str	r3, [sp, #84]	; 0x54
 801226e:	e6b7      	b.n	8011fe0 <_vfiprintf_r+0x3b4>
 8012270:	0030      	movs	r0, r6
 8012272:	f7ed ff47 	bl	8000104 <strlen>
 8012276:	9005      	str	r0, [sp, #20]
 8012278:	e719      	b.n	80120ae <_vfiprintf_r+0x482>
 801227a:	2310      	movs	r3, #16
 801227c:	431c      	orrs	r4, r3
 801227e:	2320      	movs	r3, #32
 8012280:	0020      	movs	r0, r4
 8012282:	4018      	ands	r0, r3
 8012284:	421c      	tst	r4, r3
 8012286:	d009      	beq.n	801229c <_vfiprintf_r+0x670>
 8012288:	3b19      	subs	r3, #25
 801228a:	3707      	adds	r7, #7
 801228c:	439f      	bics	r7, r3
 801228e:	0039      	movs	r1, r7
 8012290:	c90c      	ldmia	r1!, {r2, r3}
 8012292:	9200      	str	r2, [sp, #0]
 8012294:	9301      	str	r3, [sp, #4]
 8012296:	9104      	str	r1, [sp, #16]
 8012298:	2301      	movs	r3, #1
 801229a:	e6c7      	b.n	801202c <_vfiprintf_r+0x400>
 801229c:	003b      	movs	r3, r7
 801229e:	cb04      	ldmia	r3!, {r2}
 80122a0:	0021      	movs	r1, r4
 80122a2:	9304      	str	r3, [sp, #16]
 80122a4:	2310      	movs	r3, #16
 80122a6:	4019      	ands	r1, r3
 80122a8:	421c      	tst	r4, r3
 80122aa:	d003      	beq.n	80122b4 <_vfiprintf_r+0x688>
 80122ac:	9200      	str	r2, [sp, #0]
 80122ae:	9001      	str	r0, [sp, #4]
 80122b0:	3b0f      	subs	r3, #15
 80122b2:	e6bb      	b.n	801202c <_vfiprintf_r+0x400>
 80122b4:	2340      	movs	r3, #64	; 0x40
 80122b6:	0020      	movs	r0, r4
 80122b8:	4018      	ands	r0, r3
 80122ba:	421c      	tst	r4, r3
 80122bc:	d003      	beq.n	80122c6 <_vfiprintf_r+0x69a>
 80122be:	b293      	uxth	r3, r2
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	9101      	str	r1, [sp, #4]
 80122c4:	e7e8      	b.n	8012298 <_vfiprintf_r+0x66c>
 80122c6:	2380      	movs	r3, #128	; 0x80
 80122c8:	0021      	movs	r1, r4
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	4019      	ands	r1, r3
 80122ce:	421c      	tst	r4, r3
 80122d0:	d003      	beq.n	80122da <_vfiprintf_r+0x6ae>
 80122d2:	b2d3      	uxtb	r3, r2
 80122d4:	9300      	str	r3, [sp, #0]
 80122d6:	9001      	str	r0, [sp, #4]
 80122d8:	e7de      	b.n	8012298 <_vfiprintf_r+0x66c>
 80122da:	9200      	str	r2, [sp, #0]
 80122dc:	e7f1      	b.n	80122c2 <_vfiprintf_r+0x696>
 80122de:	4a23      	ldr	r2, [pc, #140]	; (801236c <_vfiprintf_r+0x740>)
 80122e0:	0020      	movs	r0, r4
 80122e2:	920c      	str	r2, [sp, #48]	; 0x30
 80122e4:	2220      	movs	r2, #32
 80122e6:	4010      	ands	r0, r2
 80122e8:	4214      	tst	r4, r2
 80122ea:	d019      	beq.n	8012320 <_vfiprintf_r+0x6f4>
 80122ec:	3a19      	subs	r2, #25
 80122ee:	3707      	adds	r7, #7
 80122f0:	4397      	bics	r7, r2
 80122f2:	0038      	movs	r0, r7
 80122f4:	c806      	ldmia	r0!, {r1, r2}
 80122f6:	9100      	str	r1, [sp, #0]
 80122f8:	9201      	str	r2, [sp, #4]
 80122fa:	9004      	str	r0, [sp, #16]
 80122fc:	07e2      	lsls	r2, r4, #31
 80122fe:	d509      	bpl.n	8012314 <_vfiprintf_r+0x6e8>
 8012300:	9a00      	ldr	r2, [sp, #0]
 8012302:	9901      	ldr	r1, [sp, #4]
 8012304:	430a      	orrs	r2, r1
 8012306:	d005      	beq.n	8012314 <_vfiprintf_r+0x6e8>
 8012308:	aa13      	add	r2, sp, #76	; 0x4c
 801230a:	2130      	movs	r1, #48	; 0x30
 801230c:	7053      	strb	r3, [r2, #1]
 801230e:	2302      	movs	r3, #2
 8012310:	7011      	strb	r1, [r2, #0]
 8012312:	431c      	orrs	r4, r3
 8012314:	4b10      	ldr	r3, [pc, #64]	; (8012358 <_vfiprintf_r+0x72c>)
 8012316:	401c      	ands	r4, r3
 8012318:	2302      	movs	r3, #2
 801231a:	e687      	b.n	801202c <_vfiprintf_r+0x400>
 801231c:	4a10      	ldr	r2, [pc, #64]	; (8012360 <_vfiprintf_r+0x734>)
 801231e:	e7df      	b.n	80122e0 <_vfiprintf_r+0x6b4>
 8012320:	0039      	movs	r1, r7
 8012322:	c904      	ldmia	r1!, {r2}
 8012324:	0026      	movs	r6, r4
 8012326:	9104      	str	r1, [sp, #16]
 8012328:	2110      	movs	r1, #16
 801232a:	400e      	ands	r6, r1
 801232c:	420c      	tst	r4, r1
 801232e:	d002      	beq.n	8012336 <_vfiprintf_r+0x70a>
 8012330:	9200      	str	r2, [sp, #0]
 8012332:	9001      	str	r0, [sp, #4]
 8012334:	e7e2      	b.n	80122fc <_vfiprintf_r+0x6d0>
 8012336:	2140      	movs	r1, #64	; 0x40
 8012338:	0020      	movs	r0, r4
 801233a:	4008      	ands	r0, r1
 801233c:	420c      	tst	r4, r1
 801233e:	d003      	beq.n	8012348 <_vfiprintf_r+0x71c>
 8012340:	b292      	uxth	r2, r2
 8012342:	9200      	str	r2, [sp, #0]
 8012344:	9601      	str	r6, [sp, #4]
 8012346:	e7d9      	b.n	80122fc <_vfiprintf_r+0x6d0>
 8012348:	2180      	movs	r1, #128	; 0x80
 801234a:	0026      	movs	r6, r4
 801234c:	0089      	lsls	r1, r1, #2
 801234e:	400e      	ands	r6, r1
 8012350:	420c      	tst	r4, r1
 8012352:	d0f6      	beq.n	8012342 <_vfiprintf_r+0x716>
 8012354:	b2d2      	uxtb	r2, r2
 8012356:	e7eb      	b.n	8012330 <_vfiprintf_r+0x704>
 8012358:	fffffbff 	.word	0xfffffbff
 801235c:	00007830 	.word	0x00007830
 8012360:	08014bdc 	.word	0x08014bdc
 8012364:	08014ce9 	.word	0x08014ce9
 8012368:	08014cf9 	.word	0x08014cf9
 801236c:	08014bed 	.word	0x08014bed
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d109      	bne.n	801238a <_vfiprintf_r+0x75e>
 8012376:	9b00      	ldr	r3, [sp, #0]
 8012378:	2b09      	cmp	r3, #9
 801237a:	d806      	bhi.n	801238a <_vfiprintf_r+0x75e>
 801237c:	26b7      	movs	r6, #183	; 0xb7
 801237e:	ab12      	add	r3, sp, #72	; 0x48
 8012380:	18f6      	adds	r6, r6, r3
 8012382:	9b00      	ldr	r3, [sp, #0]
 8012384:	3330      	adds	r3, #48	; 0x30
 8012386:	7033      	strb	r3, [r6, #0]
 8012388:	e115      	b.n	80125b6 <_vfiprintf_r+0x98a>
 801238a:	2380      	movs	r3, #128	; 0x80
 801238c:	2400      	movs	r4, #0
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	403b      	ands	r3, r7
 8012392:	ae40      	add	r6, sp, #256	; 0x100
 8012394:	930a      	str	r3, [sp, #40]	; 0x28
 8012396:	220a      	movs	r2, #10
 8012398:	9800      	ldr	r0, [sp, #0]
 801239a:	9901      	ldr	r1, [sp, #4]
 801239c:	2300      	movs	r3, #0
 801239e:	f7ee f881 	bl	80004a4 <__aeabi_uldivmod>
 80123a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a4:	3e01      	subs	r6, #1
 80123a6:	3230      	adds	r2, #48	; 0x30
 80123a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80123aa:	9110      	str	r1, [sp, #64]	; 0x40
 80123ac:	7032      	strb	r2, [r6, #0]
 80123ae:	3401      	adds	r4, #1
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d01a      	beq.n	80123ea <_vfiprintf_r+0x7be>
 80123b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	42a3      	cmp	r3, r4
 80123ba:	d116      	bne.n	80123ea <_vfiprintf_r+0x7be>
 80123bc:	2cff      	cmp	r4, #255	; 0xff
 80123be:	d014      	beq.n	80123ea <_vfiprintf_r+0x7be>
 80123c0:	9b01      	ldr	r3, [sp, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d102      	bne.n	80123cc <_vfiprintf_r+0x7a0>
 80123c6:	9b00      	ldr	r3, [sp, #0]
 80123c8:	2b09      	cmp	r3, #9
 80123ca:	d90e      	bls.n	80123ea <_vfiprintf_r+0x7be>
 80123cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80123d0:	1af6      	subs	r6, r6, r3
 80123d2:	001a      	movs	r2, r3
 80123d4:	0030      	movs	r0, r6
 80123d6:	f7f9 ffe6 	bl	800c3a6 <strncpy>
 80123da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123dc:	2400      	movs	r4, #0
 80123de:	785b      	ldrb	r3, [r3, #1]
 80123e0:	1e5a      	subs	r2, r3, #1
 80123e2:	4193      	sbcs	r3, r2
 80123e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123e6:	18d3      	adds	r3, r2, r3
 80123e8:	930d      	str	r3, [sp, #52]	; 0x34
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d103      	bne.n	80123f8 <_vfiprintf_r+0x7cc>
 80123f0:	9b00      	ldr	r3, [sp, #0]
 80123f2:	2b09      	cmp	r3, #9
 80123f4:	d800      	bhi.n	80123f8 <_vfiprintf_r+0x7cc>
 80123f6:	e0de      	b.n	80125b6 <_vfiprintf_r+0x98a>
 80123f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	e7c9      	b.n	8012396 <_vfiprintf_r+0x76a>
 8012402:	200f      	movs	r0, #15
 8012404:	9b00      	ldr	r3, [sp, #0]
 8012406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012408:	4003      	ands	r3, r0
 801240a:	5cd3      	ldrb	r3, [r2, r3]
 801240c:	3e01      	subs	r6, #1
 801240e:	7033      	strb	r3, [r6, #0]
 8012410:	9b01      	ldr	r3, [sp, #4]
 8012412:	0719      	lsls	r1, r3, #28
 8012414:	9b00      	ldr	r3, [sp, #0]
 8012416:	091a      	lsrs	r2, r3, #4
 8012418:	9b01      	ldr	r3, [sp, #4]
 801241a:	4311      	orrs	r1, r2
 801241c:	091b      	lsrs	r3, r3, #4
 801241e:	9301      	str	r3, [sp, #4]
 8012420:	000b      	movs	r3, r1
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	9100      	str	r1, [sp, #0]
 8012426:	4313      	orrs	r3, r2
 8012428:	d1ec      	bne.n	8012404 <_vfiprintf_r+0x7d8>
 801242a:	e0c4      	b.n	80125b6 <_vfiprintf_r+0x98a>
 801242c:	ae40      	add	r6, sp, #256	; 0x100
 801242e:	2b00      	cmp	r3, #0
 8012430:	d000      	beq.n	8012434 <_vfiprintf_r+0x808>
 8012432:	e0c0      	b.n	80125b6 <_vfiprintf_r+0x98a>
 8012434:	07e4      	lsls	r4, r4, #31
 8012436:	d400      	bmi.n	801243a <_vfiprintf_r+0x80e>
 8012438:	e0bd      	b.n	80125b6 <_vfiprintf_r+0x98a>
 801243a:	26b7      	movs	r6, #183	; 0xb7
 801243c:	ab12      	add	r3, sp, #72	; 0x48
 801243e:	18f6      	adds	r6, r6, r3
 8012440:	2330      	movs	r3, #48	; 0x30
 8012442:	e7a0      	b.n	8012386 <_vfiprintf_r+0x75a>
 8012444:	2b00      	cmp	r3, #0
 8012446:	d100      	bne.n	801244a <_vfiprintf_r+0x81e>
 8012448:	e07e      	b.n	8012548 <_vfiprintf_r+0x91c>
 801244a:	ae27      	add	r6, sp, #156	; 0x9c
 801244c:	7033      	strb	r3, [r6, #0]
 801244e:	2300      	movs	r3, #0
 8012450:	aa12      	add	r2, sp, #72	; 0x48
 8012452:	70d3      	strb	r3, [r2, #3]
 8012454:	9704      	str	r7, [sp, #16]
 8012456:	e576      	b.n	8011f46 <_vfiprintf_r+0x31a>
 8012458:	2010      	movs	r0, #16
 801245a:	1812      	adds	r2, r2, r0
 801245c:	6068      	str	r0, [r5, #4]
 801245e:	9216      	str	r2, [sp, #88]	; 0x58
 8012460:	9315      	str	r3, [sp, #84]	; 0x54
 8012462:	2b07      	cmp	r3, #7
 8012464:	dd07      	ble.n	8012476 <_vfiprintf_r+0x84a>
 8012466:	9903      	ldr	r1, [sp, #12]
 8012468:	9806      	ldr	r0, [sp, #24]
 801246a:	aa14      	add	r2, sp, #80	; 0x50
 801246c:	f7ff fba9 	bl	8011bc2 <__sprint_r>
 8012470:	2800      	cmp	r0, #0
 8012472:	d144      	bne.n	80124fe <_vfiprintf_r+0x8d2>
 8012474:	a917      	add	r1, sp, #92	; 0x5c
 8012476:	000d      	movs	r5, r1
 8012478:	3f10      	subs	r7, #16
 801247a:	e63b      	b.n	80120f4 <_vfiprintf_r+0x4c8>
 801247c:	2010      	movs	r0, #16
 801247e:	1812      	adds	r2, r2, r0
 8012480:	6068      	str	r0, [r5, #4]
 8012482:	9216      	str	r2, [sp, #88]	; 0x58
 8012484:	9315      	str	r3, [sp, #84]	; 0x54
 8012486:	2b07      	cmp	r3, #7
 8012488:	dd07      	ble.n	801249a <_vfiprintf_r+0x86e>
 801248a:	9903      	ldr	r1, [sp, #12]
 801248c:	9806      	ldr	r0, [sp, #24]
 801248e:	aa14      	add	r2, sp, #80	; 0x50
 8012490:	f7ff fb97 	bl	8011bc2 <__sprint_r>
 8012494:	2800      	cmp	r0, #0
 8012496:	d132      	bne.n	80124fe <_vfiprintf_r+0x8d2>
 8012498:	a917      	add	r1, sp, #92	; 0x5c
 801249a:	000d      	movs	r5, r1
 801249c:	3f10      	subs	r7, #16
 801249e:	e67e      	b.n	801219e <_vfiprintf_r+0x572>
 80124a0:	2010      	movs	r0, #16
 80124a2:	1812      	adds	r2, r2, r0
 80124a4:	6068      	str	r0, [r5, #4]
 80124a6:	9216      	str	r2, [sp, #88]	; 0x58
 80124a8:	9315      	str	r3, [sp, #84]	; 0x54
 80124aa:	2b07      	cmp	r3, #7
 80124ac:	dd07      	ble.n	80124be <_vfiprintf_r+0x892>
 80124ae:	9903      	ldr	r1, [sp, #12]
 80124b0:	9806      	ldr	r0, [sp, #24]
 80124b2:	aa14      	add	r2, sp, #80	; 0x50
 80124b4:	f7ff fb85 	bl	8011bc2 <__sprint_r>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	d120      	bne.n	80124fe <_vfiprintf_r+0x8d2>
 80124bc:	a917      	add	r1, sp, #92	; 0x5c
 80124be:	000d      	movs	r5, r1
 80124c0:	3f10      	subs	r7, #16
 80124c2:	e68b      	b.n	80121dc <_vfiprintf_r+0x5b0>
 80124c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124c8:	2610      	movs	r6, #16
 80124ca:	1a9c      	subs	r4, r3, r2
 80124cc:	2c00      	cmp	r4, #0
 80124ce:	dc00      	bgt.n	80124d2 <_vfiprintf_r+0x8a6>
 80124d0:	e6b7      	b.n	8012242 <_vfiprintf_r+0x616>
 80124d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80124d4:	4a3b      	ldr	r2, [pc, #236]	; (80125c4 <_vfiprintf_r+0x998>)
 80124d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80124d8:	3101      	adds	r1, #1
 80124da:	602a      	str	r2, [r5, #0]
 80124dc:	2c10      	cmp	r4, #16
 80124de:	dc22      	bgt.n	8012526 <_vfiprintf_r+0x8fa>
 80124e0:	606c      	str	r4, [r5, #4]
 80124e2:	18e4      	adds	r4, r4, r3
 80124e4:	9416      	str	r4, [sp, #88]	; 0x58
 80124e6:	9115      	str	r1, [sp, #84]	; 0x54
 80124e8:	2907      	cmp	r1, #7
 80124ea:	dc00      	bgt.n	80124ee <_vfiprintf_r+0x8c2>
 80124ec:	e6a9      	b.n	8012242 <_vfiprintf_r+0x616>
 80124ee:	9903      	ldr	r1, [sp, #12]
 80124f0:	9806      	ldr	r0, [sp, #24]
 80124f2:	aa14      	add	r2, sp, #80	; 0x50
 80124f4:	f7ff fb65 	bl	8011bc2 <__sprint_r>
 80124f8:	2800      	cmp	r0, #0
 80124fa:	d100      	bne.n	80124fe <_vfiprintf_r+0x8d2>
 80124fc:	e6a1      	b.n	8012242 <_vfiprintf_r+0x616>
 80124fe:	9b03      	ldr	r3, [sp, #12]
 8012500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012502:	07db      	lsls	r3, r3, #31
 8012504:	d407      	bmi.n	8012516 <_vfiprintf_r+0x8ea>
 8012506:	9b03      	ldr	r3, [sp, #12]
 8012508:	899b      	ldrh	r3, [r3, #12]
 801250a:	059b      	lsls	r3, r3, #22
 801250c:	d403      	bmi.n	8012516 <_vfiprintf_r+0x8ea>
 801250e:	9b03      	ldr	r3, [sp, #12]
 8012510:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012512:	f7fa f808 	bl	800c526 <__retarget_lock_release_recursive>
 8012516:	9b03      	ldr	r3, [sp, #12]
 8012518:	899b      	ldrh	r3, [r3, #12]
 801251a:	065b      	lsls	r3, r3, #25
 801251c:	d401      	bmi.n	8012522 <_vfiprintf_r+0x8f6>
 801251e:	f7ff fbc3 	bl	8011ca8 <_vfiprintf_r+0x7c>
 8012522:	f7ff fbbe 	bl	8011ca2 <_vfiprintf_r+0x76>
 8012526:	3310      	adds	r3, #16
 8012528:	606e      	str	r6, [r5, #4]
 801252a:	9316      	str	r3, [sp, #88]	; 0x58
 801252c:	9115      	str	r1, [sp, #84]	; 0x54
 801252e:	3508      	adds	r5, #8
 8012530:	2907      	cmp	r1, #7
 8012532:	dd07      	ble.n	8012544 <_vfiprintf_r+0x918>
 8012534:	9903      	ldr	r1, [sp, #12]
 8012536:	9806      	ldr	r0, [sp, #24]
 8012538:	aa14      	add	r2, sp, #80	; 0x50
 801253a:	f7ff fb42 	bl	8011bc2 <__sprint_r>
 801253e:	2800      	cmp	r0, #0
 8012540:	d1dd      	bne.n	80124fe <_vfiprintf_r+0x8d2>
 8012542:	ad17      	add	r5, sp, #92	; 0x5c
 8012544:	3c10      	subs	r4, #16
 8012546:	e7c4      	b.n	80124d2 <_vfiprintf_r+0x8a6>
 8012548:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801254a:	2b00      	cmp	r3, #0
 801254c:	d102      	bne.n	8012554 <_vfiprintf_r+0x928>
 801254e:	2300      	movs	r3, #0
 8012550:	9315      	str	r3, [sp, #84]	; 0x54
 8012552:	e7d4      	b.n	80124fe <_vfiprintf_r+0x8d2>
 8012554:	9903      	ldr	r1, [sp, #12]
 8012556:	9806      	ldr	r0, [sp, #24]
 8012558:	aa14      	add	r2, sp, #80	; 0x50
 801255a:	f7ff fb32 	bl	8011bc2 <__sprint_r>
 801255e:	2800      	cmp	r0, #0
 8012560:	d0f5      	beq.n	801254e <_vfiprintf_r+0x922>
 8012562:	e7cc      	b.n	80124fe <_vfiprintf_r+0x8d2>
 8012564:	0027      	movs	r7, r4
 8012566:	2a00      	cmp	r2, #0
 8012568:	d100      	bne.n	801256c <_vfiprintf_r+0x940>
 801256a:	e51b      	b.n	8011fa4 <_vfiprintf_r+0x378>
 801256c:	2b01      	cmp	r3, #1
 801256e:	d100      	bne.n	8012572 <_vfiprintf_r+0x946>
 8012570:	e6fe      	b.n	8012370 <_vfiprintf_r+0x744>
 8012572:	ae40      	add	r6, sp, #256	; 0x100
 8012574:	2b02      	cmp	r3, #2
 8012576:	d100      	bne.n	801257a <_vfiprintf_r+0x94e>
 8012578:	e743      	b.n	8012402 <_vfiprintf_r+0x7d6>
 801257a:	2307      	movs	r3, #7
 801257c:	469c      	mov	ip, r3
 801257e:	4663      	mov	r3, ip
 8012580:	9900      	ldr	r1, [sp, #0]
 8012582:	0032      	movs	r2, r6
 8012584:	400b      	ands	r3, r1
 8012586:	9901      	ldr	r1, [sp, #4]
 8012588:	3e01      	subs	r6, #1
 801258a:	074c      	lsls	r4, r1, #29
 801258c:	9900      	ldr	r1, [sp, #0]
 801258e:	3330      	adds	r3, #48	; 0x30
 8012590:	08c8      	lsrs	r0, r1, #3
 8012592:	9901      	ldr	r1, [sp, #4]
 8012594:	4304      	orrs	r4, r0
 8012596:	08c9      	lsrs	r1, r1, #3
 8012598:	9101      	str	r1, [sp, #4]
 801259a:	0021      	movs	r1, r4
 801259c:	9801      	ldr	r0, [sp, #4]
 801259e:	7033      	strb	r3, [r6, #0]
 80125a0:	9400      	str	r4, [sp, #0]
 80125a2:	4301      	orrs	r1, r0
 80125a4:	d1eb      	bne.n	801257e <_vfiprintf_r+0x952>
 80125a6:	07f9      	lsls	r1, r7, #31
 80125a8:	d505      	bpl.n	80125b6 <_vfiprintf_r+0x98a>
 80125aa:	2b30      	cmp	r3, #48	; 0x30
 80125ac:	d003      	beq.n	80125b6 <_vfiprintf_r+0x98a>
 80125ae:	2330      	movs	r3, #48	; 0x30
 80125b0:	3e01      	subs	r6, #1
 80125b2:	7033      	strb	r3, [r6, #0]
 80125b4:	1e96      	subs	r6, r2, #2
 80125b6:	9b05      	ldr	r3, [sp, #20]
 80125b8:	003c      	movs	r4, r7
 80125ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80125bc:	ab40      	add	r3, sp, #256	; 0x100
 80125be:	1b9b      	subs	r3, r3, r6
 80125c0:	9305      	str	r3, [sp, #20]
 80125c2:	e575      	b.n	80120b0 <_vfiprintf_r+0x484>
 80125c4:	08014ce9 	.word	0x08014ce9

080125c8 <__sbprintf>:
 80125c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ca:	0015      	movs	r5, r2
 80125cc:	2202      	movs	r2, #2
 80125ce:	4c1e      	ldr	r4, [pc, #120]	; (8012648 <__sbprintf+0x80>)
 80125d0:	001f      	movs	r7, r3
 80125d2:	898b      	ldrh	r3, [r1, #12]
 80125d4:	44a5      	add	sp, r4
 80125d6:	4393      	bics	r3, r2
 80125d8:	466a      	mov	r2, sp
 80125da:	8193      	strh	r3, [r2, #12]
 80125dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80125de:	0006      	movs	r6, r0
 80125e0:	9319      	str	r3, [sp, #100]	; 0x64
 80125e2:	89cb      	ldrh	r3, [r1, #14]
 80125e4:	a816      	add	r0, sp, #88	; 0x58
 80125e6:	81d3      	strh	r3, [r2, #14]
 80125e8:	69cb      	ldr	r3, [r1, #28]
 80125ea:	000c      	movs	r4, r1
 80125ec:	9307      	str	r3, [sp, #28]
 80125ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80125f0:	9309      	str	r3, [sp, #36]	; 0x24
 80125f2:	ab1a      	add	r3, sp, #104	; 0x68
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	2380      	movs	r3, #128	; 0x80
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	9302      	str	r3, [sp, #8]
 80125fe:	9305      	str	r3, [sp, #20]
 8012600:	2300      	movs	r3, #0
 8012602:	9306      	str	r3, [sp, #24]
 8012604:	f7f9 ff8c 	bl	800c520 <__retarget_lock_init_recursive>
 8012608:	002a      	movs	r2, r5
 801260a:	003b      	movs	r3, r7
 801260c:	4669      	mov	r1, sp
 801260e:	0030      	movs	r0, r6
 8012610:	f7ff fb0c 	bl	8011c2c <_vfiprintf_r>
 8012614:	1e05      	subs	r5, r0, #0
 8012616:	db07      	blt.n	8012628 <__sbprintf+0x60>
 8012618:	4669      	mov	r1, sp
 801261a:	0030      	movs	r0, r6
 801261c:	f7fd fdf6 	bl	801020c <_fflush_r>
 8012620:	2800      	cmp	r0, #0
 8012622:	d001      	beq.n	8012628 <__sbprintf+0x60>
 8012624:	2501      	movs	r5, #1
 8012626:	426d      	negs	r5, r5
 8012628:	466b      	mov	r3, sp
 801262a:	899a      	ldrh	r2, [r3, #12]
 801262c:	2340      	movs	r3, #64	; 0x40
 801262e:	421a      	tst	r2, r3
 8012630:	d002      	beq.n	8012638 <__sbprintf+0x70>
 8012632:	89a2      	ldrh	r2, [r4, #12]
 8012634:	4313      	orrs	r3, r2
 8012636:	81a3      	strh	r3, [r4, #12]
 8012638:	9816      	ldr	r0, [sp, #88]	; 0x58
 801263a:	f7f9 ff72 	bl	800c522 <__retarget_lock_close_recursive>
 801263e:	0028      	movs	r0, r5
 8012640:	4b02      	ldr	r3, [pc, #8]	; (801264c <__sbprintf+0x84>)
 8012642:	449d      	add	sp, r3
 8012644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012646:	46c0      	nop			; (mov r8, r8)
 8012648:	fffffb94 	.word	0xfffffb94
 801264c:	0000046c 	.word	0x0000046c

08012650 <__sfvwrite_r>:
 8012650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012652:	6893      	ldr	r3, [r2, #8]
 8012654:	b087      	sub	sp, #28
 8012656:	000c      	movs	r4, r1
 8012658:	9002      	str	r0, [sp, #8]
 801265a:	9204      	str	r2, [sp, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d102      	bne.n	8012666 <__sfvwrite_r+0x16>
 8012660:	2000      	movs	r0, #0
 8012662:	b007      	add	sp, #28
 8012664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012666:	898b      	ldrh	r3, [r1, #12]
 8012668:	071b      	lsls	r3, r3, #28
 801266a:	d557      	bpl.n	801271c <__sfvwrite_r+0xcc>
 801266c:	690b      	ldr	r3, [r1, #16]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d054      	beq.n	801271c <__sfvwrite_r+0xcc>
 8012672:	9b04      	ldr	r3, [sp, #16]
 8012674:	2202      	movs	r2, #2
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	89a3      	ldrh	r3, [r4, #12]
 801267c:	001f      	movs	r7, r3
 801267e:	4017      	ands	r7, r2
 8012680:	4213      	tst	r3, r2
 8012682:	d171      	bne.n	8012768 <__sfvwrite_r+0x118>
 8012684:	2201      	movs	r2, #1
 8012686:	2101      	movs	r1, #1
 8012688:	401a      	ands	r2, r3
 801268a:	420b      	tst	r3, r1
 801268c:	d100      	bne.n	8012690 <__sfvwrite_r+0x40>
 801268e:	e0a5      	b.n	80127dc <__sfvwrite_r+0x18c>
 8012690:	0038      	movs	r0, r7
 8012692:	003e      	movs	r6, r7
 8012694:	9703      	str	r7, [sp, #12]
 8012696:	9b03      	ldr	r3, [sp, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d100      	bne.n	801269e <__sfvwrite_r+0x4e>
 801269c:	e10b      	b.n	80128b6 <__sfvwrite_r+0x266>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d10a      	bne.n	80126b8 <__sfvwrite_r+0x68>
 80126a2:	001a      	movs	r2, r3
 80126a4:	210a      	movs	r1, #10
 80126a6:	0030      	movs	r0, r6
 80126a8:	f7fd fe2a 	bl	8010300 <memchr>
 80126ac:	9b03      	ldr	r3, [sp, #12]
 80126ae:	1c5f      	adds	r7, r3, #1
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d001      	beq.n	80126b8 <__sfvwrite_r+0x68>
 80126b4:	3001      	adds	r0, #1
 80126b6:	1b87      	subs	r7, r0, r6
 80126b8:	9b03      	ldr	r3, [sp, #12]
 80126ba:	9705      	str	r7, [sp, #20]
 80126bc:	429f      	cmp	r7, r3
 80126be:	d900      	bls.n	80126c2 <__sfvwrite_r+0x72>
 80126c0:	9305      	str	r3, [sp, #20]
 80126c2:	6820      	ldr	r0, [r4, #0]
 80126c4:	6922      	ldr	r2, [r4, #16]
 80126c6:	68a5      	ldr	r5, [r4, #8]
 80126c8:	6963      	ldr	r3, [r4, #20]
 80126ca:	4290      	cmp	r0, r2
 80126cc:	d800      	bhi.n	80126d0 <__sfvwrite_r+0x80>
 80126ce:	e0fb      	b.n	80128c8 <__sfvwrite_r+0x278>
 80126d0:	9a05      	ldr	r2, [sp, #20]
 80126d2:	18ed      	adds	r5, r5, r3
 80126d4:	42aa      	cmp	r2, r5
 80126d6:	dc00      	bgt.n	80126da <__sfvwrite_r+0x8a>
 80126d8:	e0f6      	b.n	80128c8 <__sfvwrite_r+0x278>
 80126da:	0031      	movs	r1, r6
 80126dc:	002a      	movs	r2, r5
 80126de:	f000 fa1e 	bl	8012b1e <memmove>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	0021      	movs	r1, r4
 80126e6:	195b      	adds	r3, r3, r5
 80126e8:	9802      	ldr	r0, [sp, #8]
 80126ea:	6023      	str	r3, [r4, #0]
 80126ec:	f7fd fd8e 	bl	801020c <_fflush_r>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d16e      	bne.n	80127d2 <__sfvwrite_r+0x182>
 80126f4:	2001      	movs	r0, #1
 80126f6:	1b7f      	subs	r7, r7, r5
 80126f8:	d105      	bne.n	8012706 <__sfvwrite_r+0xb6>
 80126fa:	0021      	movs	r1, r4
 80126fc:	9802      	ldr	r0, [sp, #8]
 80126fe:	f7fd fd85 	bl	801020c <_fflush_r>
 8012702:	2800      	cmp	r0, #0
 8012704:	d165      	bne.n	80127d2 <__sfvwrite_r+0x182>
 8012706:	9b03      	ldr	r3, [sp, #12]
 8012708:	9a04      	ldr	r2, [sp, #16]
 801270a:	1b5b      	subs	r3, r3, r5
 801270c:	9303      	str	r3, [sp, #12]
 801270e:	9b04      	ldr	r3, [sp, #16]
 8012710:	1976      	adds	r6, r6, r5
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	1b5b      	subs	r3, r3, r5
 8012716:	6093      	str	r3, [r2, #8]
 8012718:	d1bd      	bne.n	8012696 <__sfvwrite_r+0x46>
 801271a:	e7a1      	b.n	8012660 <__sfvwrite_r+0x10>
 801271c:	0021      	movs	r1, r4
 801271e:	9802      	ldr	r0, [sp, #8]
 8012720:	f000 f932 	bl	8012988 <__swsetup_r>
 8012724:	2800      	cmp	r0, #0
 8012726:	d0a4      	beq.n	8012672 <__sfvwrite_r+0x22>
 8012728:	2001      	movs	r0, #1
 801272a:	4240      	negs	r0, r0
 801272c:	e799      	b.n	8012662 <__sfvwrite_r+0x12>
 801272e:	9b01      	ldr	r3, [sp, #4]
 8012730:	681e      	ldr	r6, [r3, #0]
 8012732:	685d      	ldr	r5, [r3, #4]
 8012734:	3308      	adds	r3, #8
 8012736:	9301      	str	r3, [sp, #4]
 8012738:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801273a:	69e1      	ldr	r1, [r4, #28]
 801273c:	2d00      	cmp	r5, #0
 801273e:	d0f6      	beq.n	801272e <__sfvwrite_r+0xde>
 8012740:	4a6e      	ldr	r2, [pc, #440]	; (80128fc <__sfvwrite_r+0x2ac>)
 8012742:	002b      	movs	r3, r5
 8012744:	4295      	cmp	r5, r2
 8012746:	d900      	bls.n	801274a <__sfvwrite_r+0xfa>
 8012748:	0013      	movs	r3, r2
 801274a:	0032      	movs	r2, r6
 801274c:	9802      	ldr	r0, [sp, #8]
 801274e:	47b8      	blx	r7
 8012750:	2800      	cmp	r0, #0
 8012752:	dd3e      	ble.n	80127d2 <__sfvwrite_r+0x182>
 8012754:	9b04      	ldr	r3, [sp, #16]
 8012756:	9a04      	ldr	r2, [sp, #16]
 8012758:	689b      	ldr	r3, [r3, #8]
 801275a:	1836      	adds	r6, r6, r0
 801275c:	1a1b      	subs	r3, r3, r0
 801275e:	1a2d      	subs	r5, r5, r0
 8012760:	6093      	str	r3, [r2, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1e8      	bne.n	8012738 <__sfvwrite_r+0xe8>
 8012766:	e77b      	b.n	8012660 <__sfvwrite_r+0x10>
 8012768:	2600      	movs	r6, #0
 801276a:	0035      	movs	r5, r6
 801276c:	e7e4      	b.n	8012738 <__sfvwrite_r+0xe8>
 801276e:	9b01      	ldr	r3, [sp, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	9303      	str	r3, [sp, #12]
 8012774:	9b01      	ldr	r3, [sp, #4]
 8012776:	685d      	ldr	r5, [r3, #4]
 8012778:	3308      	adds	r3, #8
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	220c      	movs	r2, #12
 801277e:	5ea3      	ldrsh	r3, [r4, r2]
 8012780:	6820      	ldr	r0, [r4, #0]
 8012782:	68a6      	ldr	r6, [r4, #8]
 8012784:	2d00      	cmp	r5, #0
 8012786:	d0f2      	beq.n	801276e <__sfvwrite_r+0x11e>
 8012788:	2180      	movs	r1, #128	; 0x80
 801278a:	0089      	lsls	r1, r1, #2
 801278c:	b29a      	uxth	r2, r3
 801278e:	420b      	tst	r3, r1
 8012790:	d062      	beq.n	8012858 <__sfvwrite_r+0x208>
 8012792:	42ae      	cmp	r6, r5
 8012794:	d837      	bhi.n	8012806 <__sfvwrite_r+0x1b6>
 8012796:	2390      	movs	r3, #144	; 0x90
 8012798:	00db      	lsls	r3, r3, #3
 801279a:	421a      	tst	r2, r3
 801279c:	d033      	beq.n	8012806 <__sfvwrite_r+0x1b6>
 801279e:	6921      	ldr	r1, [r4, #16]
 80127a0:	1a43      	subs	r3, r0, r1
 80127a2:	2003      	movs	r0, #3
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	6963      	ldr	r3, [r4, #20]
 80127a8:	4343      	muls	r3, r0
 80127aa:	0fdf      	lsrs	r7, r3, #31
 80127ac:	18ff      	adds	r7, r7, r3
 80127ae:	9b05      	ldr	r3, [sp, #20]
 80127b0:	107f      	asrs	r7, r7, #1
 80127b2:	3301      	adds	r3, #1
 80127b4:	195b      	adds	r3, r3, r5
 80127b6:	42bb      	cmp	r3, r7
 80127b8:	d900      	bls.n	80127bc <__sfvwrite_r+0x16c>
 80127ba:	001f      	movs	r7, r3
 80127bc:	0552      	lsls	r2, r2, #21
 80127be:	d53c      	bpl.n	801283a <__sfvwrite_r+0x1ea>
 80127c0:	0039      	movs	r1, r7
 80127c2:	9802      	ldr	r0, [sp, #8]
 80127c4:	f7f8 fb56 	bl	800ae74 <_malloc_r>
 80127c8:	1e06      	subs	r6, r0, #0
 80127ca:	d10a      	bne.n	80127e2 <__sfvwrite_r+0x192>
 80127cc:	230c      	movs	r3, #12
 80127ce:	9a02      	ldr	r2, [sp, #8]
 80127d0:	6013      	str	r3, [r2, #0]
 80127d2:	2340      	movs	r3, #64	; 0x40
 80127d4:	89a2      	ldrh	r2, [r4, #12]
 80127d6:	4313      	orrs	r3, r2
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	e7a5      	b.n	8012728 <__sfvwrite_r+0xd8>
 80127dc:	0015      	movs	r5, r2
 80127de:	9203      	str	r2, [sp, #12]
 80127e0:	e7cc      	b.n	801277c <__sfvwrite_r+0x12c>
 80127e2:	9a05      	ldr	r2, [sp, #20]
 80127e4:	6921      	ldr	r1, [r4, #16]
 80127e6:	f7f9 feaa 	bl	800c53e <memcpy>
 80127ea:	89a2      	ldrh	r2, [r4, #12]
 80127ec:	4b44      	ldr	r3, [pc, #272]	; (8012900 <__sfvwrite_r+0x2b0>)
 80127ee:	401a      	ands	r2, r3
 80127f0:	2380      	movs	r3, #128	; 0x80
 80127f2:	4313      	orrs	r3, r2
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	9b05      	ldr	r3, [sp, #20]
 80127f8:	6126      	str	r6, [r4, #16]
 80127fa:	18f6      	adds	r6, r6, r3
 80127fc:	6026      	str	r6, [r4, #0]
 80127fe:	002e      	movs	r6, r5
 8012800:	6167      	str	r7, [r4, #20]
 8012802:	1aff      	subs	r7, r7, r3
 8012804:	60a7      	str	r7, [r4, #8]
 8012806:	002f      	movs	r7, r5
 8012808:	42ae      	cmp	r6, r5
 801280a:	d900      	bls.n	801280e <__sfvwrite_r+0x1be>
 801280c:	002e      	movs	r6, r5
 801280e:	0032      	movs	r2, r6
 8012810:	9903      	ldr	r1, [sp, #12]
 8012812:	6820      	ldr	r0, [r4, #0]
 8012814:	f000 f983 	bl	8012b1e <memmove>
 8012818:	68a3      	ldr	r3, [r4, #8]
 801281a:	1b9b      	subs	r3, r3, r6
 801281c:	60a3      	str	r3, [r4, #8]
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	199b      	adds	r3, r3, r6
 8012822:	6023      	str	r3, [r4, #0]
 8012824:	9b03      	ldr	r3, [sp, #12]
 8012826:	9a04      	ldr	r2, [sp, #16]
 8012828:	19db      	adds	r3, r3, r7
 801282a:	9303      	str	r3, [sp, #12]
 801282c:	9b04      	ldr	r3, [sp, #16]
 801282e:	1bed      	subs	r5, r5, r7
 8012830:	689b      	ldr	r3, [r3, #8]
 8012832:	1bdb      	subs	r3, r3, r7
 8012834:	6093      	str	r3, [r2, #8]
 8012836:	d1a1      	bne.n	801277c <__sfvwrite_r+0x12c>
 8012838:	e712      	b.n	8012660 <__sfvwrite_r+0x10>
 801283a:	003a      	movs	r2, r7
 801283c:	9802      	ldr	r0, [sp, #8]
 801283e:	f7fe fcd7 	bl	80111f0 <_realloc_r>
 8012842:	1e06      	subs	r6, r0, #0
 8012844:	d1d7      	bne.n	80127f6 <__sfvwrite_r+0x1a6>
 8012846:	6921      	ldr	r1, [r4, #16]
 8012848:	9802      	ldr	r0, [sp, #8]
 801284a:	f7f9 fef3 	bl	800c634 <_free_r>
 801284e:	2280      	movs	r2, #128	; 0x80
 8012850:	89a3      	ldrh	r3, [r4, #12]
 8012852:	4393      	bics	r3, r2
 8012854:	81a3      	strh	r3, [r4, #12]
 8012856:	e7b9      	b.n	80127cc <__sfvwrite_r+0x17c>
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	4283      	cmp	r3, r0
 801285c:	d302      	bcc.n	8012864 <__sfvwrite_r+0x214>
 801285e:	6967      	ldr	r7, [r4, #20]
 8012860:	42af      	cmp	r7, r5
 8012862:	d916      	bls.n	8012892 <__sfvwrite_r+0x242>
 8012864:	42ae      	cmp	r6, r5
 8012866:	d900      	bls.n	801286a <__sfvwrite_r+0x21a>
 8012868:	002e      	movs	r6, r5
 801286a:	0032      	movs	r2, r6
 801286c:	9903      	ldr	r1, [sp, #12]
 801286e:	f000 f956 	bl	8012b1e <memmove>
 8012872:	68a3      	ldr	r3, [r4, #8]
 8012874:	6822      	ldr	r2, [r4, #0]
 8012876:	1b9b      	subs	r3, r3, r6
 8012878:	1992      	adds	r2, r2, r6
 801287a:	0037      	movs	r7, r6
 801287c:	60a3      	str	r3, [r4, #8]
 801287e:	6022      	str	r2, [r4, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1cf      	bne.n	8012824 <__sfvwrite_r+0x1d4>
 8012884:	0021      	movs	r1, r4
 8012886:	9802      	ldr	r0, [sp, #8]
 8012888:	f7fd fcc0 	bl	801020c <_fflush_r>
 801288c:	2800      	cmp	r0, #0
 801288e:	d0c9      	beq.n	8012824 <__sfvwrite_r+0x1d4>
 8012890:	e79f      	b.n	80127d2 <__sfvwrite_r+0x182>
 8012892:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <__sfvwrite_r+0x2b4>)
 8012894:	0028      	movs	r0, r5
 8012896:	429d      	cmp	r5, r3
 8012898:	d900      	bls.n	801289c <__sfvwrite_r+0x24c>
 801289a:	481b      	ldr	r0, [pc, #108]	; (8012908 <__sfvwrite_r+0x2b8>)
 801289c:	0039      	movs	r1, r7
 801289e:	f7ed fcd7 	bl	8000250 <__divsi3>
 80128a2:	003b      	movs	r3, r7
 80128a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128a6:	4343      	muls	r3, r0
 80128a8:	9a03      	ldr	r2, [sp, #12]
 80128aa:	69e1      	ldr	r1, [r4, #28]
 80128ac:	9802      	ldr	r0, [sp, #8]
 80128ae:	47b0      	blx	r6
 80128b0:	1e07      	subs	r7, r0, #0
 80128b2:	dcb7      	bgt.n	8012824 <__sfvwrite_r+0x1d4>
 80128b4:	e78d      	b.n	80127d2 <__sfvwrite_r+0x182>
 80128b6:	9b01      	ldr	r3, [sp, #4]
 80128b8:	2000      	movs	r0, #0
 80128ba:	681e      	ldr	r6, [r3, #0]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	9303      	str	r3, [sp, #12]
 80128c0:	9b01      	ldr	r3, [sp, #4]
 80128c2:	3308      	adds	r3, #8
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	e6e6      	b.n	8012696 <__sfvwrite_r+0x46>
 80128c8:	9a05      	ldr	r2, [sp, #20]
 80128ca:	4293      	cmp	r3, r2
 80128cc:	dc08      	bgt.n	80128e0 <__sfvwrite_r+0x290>
 80128ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80128d0:	0032      	movs	r2, r6
 80128d2:	69e1      	ldr	r1, [r4, #28]
 80128d4:	9802      	ldr	r0, [sp, #8]
 80128d6:	47a8      	blx	r5
 80128d8:	1e05      	subs	r5, r0, #0
 80128da:	dd00      	ble.n	80128de <__sfvwrite_r+0x28e>
 80128dc:	e70a      	b.n	80126f4 <__sfvwrite_r+0xa4>
 80128de:	e778      	b.n	80127d2 <__sfvwrite_r+0x182>
 80128e0:	9a05      	ldr	r2, [sp, #20]
 80128e2:	0031      	movs	r1, r6
 80128e4:	f000 f91b 	bl	8012b1e <memmove>
 80128e8:	9a05      	ldr	r2, [sp, #20]
 80128ea:	68a3      	ldr	r3, [r4, #8]
 80128ec:	0015      	movs	r5, r2
 80128ee:	1a9b      	subs	r3, r3, r2
 80128f0:	60a3      	str	r3, [r4, #8]
 80128f2:	6823      	ldr	r3, [r4, #0]
 80128f4:	189b      	adds	r3, r3, r2
 80128f6:	6023      	str	r3, [r4, #0]
 80128f8:	e6fc      	b.n	80126f4 <__sfvwrite_r+0xa4>
 80128fa:	46c0      	nop			; (mov r8, r8)
 80128fc:	7ffffc00 	.word	0x7ffffc00
 8012900:	fffffb7f 	.word	0xfffffb7f
 8012904:	7ffffffe 	.word	0x7ffffffe
 8012908:	7fffffff 	.word	0x7fffffff

0801290c <__submore>:
 801290c:	000b      	movs	r3, r1
 801290e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012910:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012912:	3340      	adds	r3, #64	; 0x40
 8012914:	000c      	movs	r4, r1
 8012916:	429d      	cmp	r5, r3
 8012918:	d11c      	bne.n	8012954 <__submore+0x48>
 801291a:	2680      	movs	r6, #128	; 0x80
 801291c:	00f6      	lsls	r6, r6, #3
 801291e:	0031      	movs	r1, r6
 8012920:	f7f8 faa8 	bl	800ae74 <_malloc_r>
 8012924:	2800      	cmp	r0, #0
 8012926:	d102      	bne.n	801292e <__submore+0x22>
 8012928:	2001      	movs	r0, #1
 801292a:	4240      	negs	r0, r0
 801292c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801292e:	0023      	movs	r3, r4
 8012930:	6320      	str	r0, [r4, #48]	; 0x30
 8012932:	6366      	str	r6, [r4, #52]	; 0x34
 8012934:	3342      	adds	r3, #66	; 0x42
 8012936:	781a      	ldrb	r2, [r3, #0]
 8012938:	4b10      	ldr	r3, [pc, #64]	; (801297c <__submore+0x70>)
 801293a:	54c2      	strb	r2, [r0, r3]
 801293c:	0023      	movs	r3, r4
 801293e:	3341      	adds	r3, #65	; 0x41
 8012940:	781a      	ldrb	r2, [r3, #0]
 8012942:	4b0f      	ldr	r3, [pc, #60]	; (8012980 <__submore+0x74>)
 8012944:	54c2      	strb	r2, [r0, r3]
 8012946:	782a      	ldrb	r2, [r5, #0]
 8012948:	4b0e      	ldr	r3, [pc, #56]	; (8012984 <__submore+0x78>)
 801294a:	54c2      	strb	r2, [r0, r3]
 801294c:	18c0      	adds	r0, r0, r3
 801294e:	6020      	str	r0, [r4, #0]
 8012950:	2000      	movs	r0, #0
 8012952:	e7eb      	b.n	801292c <__submore+0x20>
 8012954:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012956:	0029      	movs	r1, r5
 8012958:	0073      	lsls	r3, r6, #1
 801295a:	001a      	movs	r2, r3
 801295c:	9301      	str	r3, [sp, #4]
 801295e:	f7fe fc47 	bl	80111f0 <_realloc_r>
 8012962:	1e05      	subs	r5, r0, #0
 8012964:	d0e0      	beq.n	8012928 <__submore+0x1c>
 8012966:	1987      	adds	r7, r0, r6
 8012968:	0001      	movs	r1, r0
 801296a:	0032      	movs	r2, r6
 801296c:	0038      	movs	r0, r7
 801296e:	f7f9 fde6 	bl	800c53e <memcpy>
 8012972:	9b01      	ldr	r3, [sp, #4]
 8012974:	6027      	str	r7, [r4, #0]
 8012976:	6325      	str	r5, [r4, #48]	; 0x30
 8012978:	6363      	str	r3, [r4, #52]	; 0x34
 801297a:	e7e9      	b.n	8012950 <__submore+0x44>
 801297c:	000003ff 	.word	0x000003ff
 8012980:	000003fe 	.word	0x000003fe
 8012984:	000003fd 	.word	0x000003fd

08012988 <__swsetup_r>:
 8012988:	4b30      	ldr	r3, [pc, #192]	; (8012a4c <__swsetup_r+0xc4>)
 801298a:	b570      	push	{r4, r5, r6, lr}
 801298c:	0005      	movs	r5, r0
 801298e:	6818      	ldr	r0, [r3, #0]
 8012990:	000c      	movs	r4, r1
 8012992:	2800      	cmp	r0, #0
 8012994:	d004      	beq.n	80129a0 <__swsetup_r+0x18>
 8012996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012998:	2b00      	cmp	r3, #0
 801299a:	d101      	bne.n	80129a0 <__swsetup_r+0x18>
 801299c:	f7f9 fbec 	bl	800c178 <__sinit>
 80129a0:	230c      	movs	r3, #12
 80129a2:	5ee2      	ldrsh	r2, [r4, r3]
 80129a4:	b293      	uxth	r3, r2
 80129a6:	0711      	lsls	r1, r2, #28
 80129a8:	d423      	bmi.n	80129f2 <__swsetup_r+0x6a>
 80129aa:	06d9      	lsls	r1, r3, #27
 80129ac:	d407      	bmi.n	80129be <__swsetup_r+0x36>
 80129ae:	2309      	movs	r3, #9
 80129b0:	2001      	movs	r0, #1
 80129b2:	602b      	str	r3, [r5, #0]
 80129b4:	3337      	adds	r3, #55	; 0x37
 80129b6:	4313      	orrs	r3, r2
 80129b8:	81a3      	strh	r3, [r4, #12]
 80129ba:	4240      	negs	r0, r0
 80129bc:	bd70      	pop	{r4, r5, r6, pc}
 80129be:	075b      	lsls	r3, r3, #29
 80129c0:	d513      	bpl.n	80129ea <__swsetup_r+0x62>
 80129c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80129c4:	2900      	cmp	r1, #0
 80129c6:	d008      	beq.n	80129da <__swsetup_r+0x52>
 80129c8:	0023      	movs	r3, r4
 80129ca:	3340      	adds	r3, #64	; 0x40
 80129cc:	4299      	cmp	r1, r3
 80129ce:	d002      	beq.n	80129d6 <__swsetup_r+0x4e>
 80129d0:	0028      	movs	r0, r5
 80129d2:	f7f9 fe2f 	bl	800c634 <_free_r>
 80129d6:	2300      	movs	r3, #0
 80129d8:	6323      	str	r3, [r4, #48]	; 0x30
 80129da:	2224      	movs	r2, #36	; 0x24
 80129dc:	89a3      	ldrh	r3, [r4, #12]
 80129de:	4393      	bics	r3, r2
 80129e0:	81a3      	strh	r3, [r4, #12]
 80129e2:	2300      	movs	r3, #0
 80129e4:	6063      	str	r3, [r4, #4]
 80129e6:	6923      	ldr	r3, [r4, #16]
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	2308      	movs	r3, #8
 80129ec:	89a2      	ldrh	r2, [r4, #12]
 80129ee:	4313      	orrs	r3, r2
 80129f0:	81a3      	strh	r3, [r4, #12]
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10b      	bne.n	8012a10 <__swsetup_r+0x88>
 80129f8:	21a0      	movs	r1, #160	; 0xa0
 80129fa:	2280      	movs	r2, #128	; 0x80
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	0089      	lsls	r1, r1, #2
 8012a00:	0092      	lsls	r2, r2, #2
 8012a02:	400b      	ands	r3, r1
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d003      	beq.n	8012a10 <__swsetup_r+0x88>
 8012a08:	0021      	movs	r1, r4
 8012a0a:	0028      	movs	r0, r5
 8012a0c:	f000 f8e8 	bl	8012be0 <__smakebuf_r>
 8012a10:	220c      	movs	r2, #12
 8012a12:	5ea3      	ldrsh	r3, [r4, r2]
 8012a14:	2001      	movs	r0, #1
 8012a16:	001a      	movs	r2, r3
 8012a18:	b299      	uxth	r1, r3
 8012a1a:	4002      	ands	r2, r0
 8012a1c:	4203      	tst	r3, r0
 8012a1e:	d00f      	beq.n	8012a40 <__swsetup_r+0xb8>
 8012a20:	2200      	movs	r2, #0
 8012a22:	60a2      	str	r2, [r4, #8]
 8012a24:	6962      	ldr	r2, [r4, #20]
 8012a26:	4252      	negs	r2, r2
 8012a28:	61a2      	str	r2, [r4, #24]
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	6922      	ldr	r2, [r4, #16]
 8012a2e:	4282      	cmp	r2, r0
 8012a30:	d1c4      	bne.n	80129bc <__swsetup_r+0x34>
 8012a32:	0609      	lsls	r1, r1, #24
 8012a34:	d5c2      	bpl.n	80129bc <__swsetup_r+0x34>
 8012a36:	2240      	movs	r2, #64	; 0x40
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	81a3      	strh	r3, [r4, #12]
 8012a3c:	3801      	subs	r0, #1
 8012a3e:	e7bd      	b.n	80129bc <__swsetup_r+0x34>
 8012a40:	0788      	lsls	r0, r1, #30
 8012a42:	d400      	bmi.n	8012a46 <__swsetup_r+0xbe>
 8012a44:	6962      	ldr	r2, [r4, #20]
 8012a46:	60a2      	str	r2, [r4, #8]
 8012a48:	e7ef      	b.n	8012a2a <__swsetup_r+0xa2>
 8012a4a:	46c0      	nop			; (mov r8, r8)
 8012a4c:	200006d8 	.word	0x200006d8

08012a50 <__fputwc>:
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a52:	b085      	sub	sp, #20
 8012a54:	000e      	movs	r6, r1
 8012a56:	0015      	movs	r5, r2
 8012a58:	9001      	str	r0, [sp, #4]
 8012a5a:	f7f9 fccf 	bl	800c3fc <__locale_mb_cur_max>
 8012a5e:	0004      	movs	r4, r0
 8012a60:	2801      	cmp	r0, #1
 8012a62:	d119      	bne.n	8012a98 <__fputwc+0x48>
 8012a64:	1e73      	subs	r3, r6, #1
 8012a66:	2bfe      	cmp	r3, #254	; 0xfe
 8012a68:	d816      	bhi.n	8012a98 <__fputwc+0x48>
 8012a6a:	ab02      	add	r3, sp, #8
 8012a6c:	711e      	strb	r6, [r3, #4]
 8012a6e:	2700      	movs	r7, #0
 8012a70:	42a7      	cmp	r7, r4
 8012a72:	d020      	beq.n	8012ab6 <__fputwc+0x66>
 8012a74:	ab03      	add	r3, sp, #12
 8012a76:	5dd9      	ldrb	r1, [r3, r7]
 8012a78:	68ab      	ldr	r3, [r5, #8]
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	60ab      	str	r3, [r5, #8]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	da04      	bge.n	8012a8c <__fputwc+0x3c>
 8012a82:	69aa      	ldr	r2, [r5, #24]
 8012a84:	4293      	cmp	r3, r2
 8012a86:	db19      	blt.n	8012abc <__fputwc+0x6c>
 8012a88:	290a      	cmp	r1, #10
 8012a8a:	d017      	beq.n	8012abc <__fputwc+0x6c>
 8012a8c:	682b      	ldr	r3, [r5, #0]
 8012a8e:	1c5a      	adds	r2, r3, #1
 8012a90:	602a      	str	r2, [r5, #0]
 8012a92:	7019      	strb	r1, [r3, #0]
 8012a94:	3701      	adds	r7, #1
 8012a96:	e7eb      	b.n	8012a70 <__fputwc+0x20>
 8012a98:	002b      	movs	r3, r5
 8012a9a:	0032      	movs	r2, r6
 8012a9c:	9801      	ldr	r0, [sp, #4]
 8012a9e:	335c      	adds	r3, #92	; 0x5c
 8012aa0:	a903      	add	r1, sp, #12
 8012aa2:	f000 f857 	bl	8012b54 <_wcrtomb_r>
 8012aa6:	0004      	movs	r4, r0
 8012aa8:	1c43      	adds	r3, r0, #1
 8012aaa:	d1e0      	bne.n	8012a6e <__fputwc+0x1e>
 8012aac:	2340      	movs	r3, #64	; 0x40
 8012aae:	0006      	movs	r6, r0
 8012ab0:	89aa      	ldrh	r2, [r5, #12]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	81ab      	strh	r3, [r5, #12]
 8012ab6:	0030      	movs	r0, r6
 8012ab8:	b005      	add	sp, #20
 8012aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012abc:	002a      	movs	r2, r5
 8012abe:	9801      	ldr	r0, [sp, #4]
 8012ac0:	f000 f8cc 	bl	8012c5c <__swbuf_r>
 8012ac4:	1c43      	adds	r3, r0, #1
 8012ac6:	d1e5      	bne.n	8012a94 <__fputwc+0x44>
 8012ac8:	0006      	movs	r6, r0
 8012aca:	e7f4      	b.n	8012ab6 <__fputwc+0x66>

08012acc <_fputwc_r>:
 8012acc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012ace:	b570      	push	{r4, r5, r6, lr}
 8012ad0:	0005      	movs	r5, r0
 8012ad2:	000e      	movs	r6, r1
 8012ad4:	0014      	movs	r4, r2
 8012ad6:	07db      	lsls	r3, r3, #31
 8012ad8:	d405      	bmi.n	8012ae6 <_fputwc_r+0x1a>
 8012ada:	8993      	ldrh	r3, [r2, #12]
 8012adc:	059b      	lsls	r3, r3, #22
 8012ade:	d402      	bmi.n	8012ae6 <_fputwc_r+0x1a>
 8012ae0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012ae2:	f7f9 fd1f 	bl	800c524 <__retarget_lock_acquire_recursive>
 8012ae6:	230c      	movs	r3, #12
 8012ae8:	5ee2      	ldrsh	r2, [r4, r3]
 8012aea:	2380      	movs	r3, #128	; 0x80
 8012aec:	019b      	lsls	r3, r3, #6
 8012aee:	421a      	tst	r2, r3
 8012af0:	d104      	bne.n	8012afc <_fputwc_r+0x30>
 8012af2:	431a      	orrs	r2, r3
 8012af4:	81a2      	strh	r2, [r4, #12]
 8012af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012af8:	4313      	orrs	r3, r2
 8012afa:	6663      	str	r3, [r4, #100]	; 0x64
 8012afc:	0028      	movs	r0, r5
 8012afe:	0022      	movs	r2, r4
 8012b00:	0031      	movs	r1, r6
 8012b02:	f7ff ffa5 	bl	8012a50 <__fputwc>
 8012b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b08:	0005      	movs	r5, r0
 8012b0a:	07db      	lsls	r3, r3, #31
 8012b0c:	d405      	bmi.n	8012b1a <_fputwc_r+0x4e>
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	059b      	lsls	r3, r3, #22
 8012b12:	d402      	bmi.n	8012b1a <_fputwc_r+0x4e>
 8012b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b16:	f7f9 fd06 	bl	800c526 <__retarget_lock_release_recursive>
 8012b1a:	0028      	movs	r0, r5
 8012b1c:	bd70      	pop	{r4, r5, r6, pc}

08012b1e <memmove>:
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	4288      	cmp	r0, r1
 8012b22:	d902      	bls.n	8012b2a <memmove+0xc>
 8012b24:	188b      	adds	r3, r1, r2
 8012b26:	4298      	cmp	r0, r3
 8012b28:	d303      	bcc.n	8012b32 <memmove+0x14>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e007      	b.n	8012b3e <memmove+0x20>
 8012b2e:	5c8b      	ldrb	r3, [r1, r2]
 8012b30:	5483      	strb	r3, [r0, r2]
 8012b32:	3a01      	subs	r2, #1
 8012b34:	d2fb      	bcs.n	8012b2e <memmove+0x10>
 8012b36:	bd10      	pop	{r4, pc}
 8012b38:	5ccc      	ldrb	r4, [r1, r3]
 8012b3a:	54c4      	strb	r4, [r0, r3]
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d1fa      	bne.n	8012b38 <memmove+0x1a>
 8012b42:	e7f8      	b.n	8012b36 <memmove+0x18>

08012b44 <abort>:
 8012b44:	2006      	movs	r0, #6
 8012b46:	b510      	push	{r4, lr}
 8012b48:	f000 f906 	bl	8012d58 <raise>
 8012b4c:	2001      	movs	r0, #1
 8012b4e:	f7f0 fde5 	bl	800371c <_exit>
	...

08012b54 <_wcrtomb_r>:
 8012b54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b56:	001d      	movs	r5, r3
 8012b58:	4b09      	ldr	r3, [pc, #36]	; (8012b80 <_wcrtomb_r+0x2c>)
 8012b5a:	0004      	movs	r4, r0
 8012b5c:	33e0      	adds	r3, #224	; 0xe0
 8012b5e:	681e      	ldr	r6, [r3, #0]
 8012b60:	002b      	movs	r3, r5
 8012b62:	2900      	cmp	r1, #0
 8012b64:	d101      	bne.n	8012b6a <_wcrtomb_r+0x16>
 8012b66:	000a      	movs	r2, r1
 8012b68:	a901      	add	r1, sp, #4
 8012b6a:	0020      	movs	r0, r4
 8012b6c:	47b0      	blx	r6
 8012b6e:	1c43      	adds	r3, r0, #1
 8012b70:	d103      	bne.n	8012b7a <_wcrtomb_r+0x26>
 8012b72:	2300      	movs	r3, #0
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	338a      	adds	r3, #138	; 0x8a
 8012b78:	6023      	str	r3, [r4, #0]
 8012b7a:	b004      	add	sp, #16
 8012b7c:	bd70      	pop	{r4, r5, r6, pc}
 8012b7e:	46c0      	nop			; (mov r8, r8)
 8012b80:	20000448 	.word	0x20000448

08012b84 <__swhatbuf_r>:
 8012b84:	b570      	push	{r4, r5, r6, lr}
 8012b86:	000e      	movs	r6, r1
 8012b88:	001d      	movs	r5, r3
 8012b8a:	230e      	movs	r3, #14
 8012b8c:	5ec9      	ldrsh	r1, [r1, r3]
 8012b8e:	0014      	movs	r4, r2
 8012b90:	b096      	sub	sp, #88	; 0x58
 8012b92:	2900      	cmp	r1, #0
 8012b94:	da09      	bge.n	8012baa <__swhatbuf_r+0x26>
 8012b96:	89b2      	ldrh	r2, [r6, #12]
 8012b98:	2380      	movs	r3, #128	; 0x80
 8012b9a:	0011      	movs	r1, r2
 8012b9c:	4019      	ands	r1, r3
 8012b9e:	421a      	tst	r2, r3
 8012ba0:	d018      	beq.n	8012bd4 <__swhatbuf_r+0x50>
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	3b40      	subs	r3, #64	; 0x40
 8012ba6:	0008      	movs	r0, r1
 8012ba8:	e010      	b.n	8012bcc <__swhatbuf_r+0x48>
 8012baa:	466a      	mov	r2, sp
 8012bac:	f000 f8de 	bl	8012d6c <_fstat_r>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	dbf0      	blt.n	8012b96 <__swhatbuf_r+0x12>
 8012bb4:	23f0      	movs	r3, #240	; 0xf0
 8012bb6:	9901      	ldr	r1, [sp, #4]
 8012bb8:	021b      	lsls	r3, r3, #8
 8012bba:	4019      	ands	r1, r3
 8012bbc:	4b07      	ldr	r3, [pc, #28]	; (8012bdc <__swhatbuf_r+0x58>)
 8012bbe:	2080      	movs	r0, #128	; 0x80
 8012bc0:	18c9      	adds	r1, r1, r3
 8012bc2:	424b      	negs	r3, r1
 8012bc4:	4159      	adcs	r1, r3
 8012bc6:	2380      	movs	r3, #128	; 0x80
 8012bc8:	0100      	lsls	r0, r0, #4
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	6029      	str	r1, [r5, #0]
 8012bce:	6023      	str	r3, [r4, #0]
 8012bd0:	b016      	add	sp, #88	; 0x58
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	2380      	movs	r3, #128	; 0x80
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	e7e5      	b.n	8012ba6 <__swhatbuf_r+0x22>
 8012bda:	46c0      	nop			; (mov r8, r8)
 8012bdc:	ffffe000 	.word	0xffffe000

08012be0 <__smakebuf_r>:
 8012be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012be2:	2602      	movs	r6, #2
 8012be4:	898b      	ldrh	r3, [r1, #12]
 8012be6:	0005      	movs	r5, r0
 8012be8:	000c      	movs	r4, r1
 8012bea:	4233      	tst	r3, r6
 8012bec:	d006      	beq.n	8012bfc <__smakebuf_r+0x1c>
 8012bee:	0023      	movs	r3, r4
 8012bf0:	3343      	adds	r3, #67	; 0x43
 8012bf2:	6023      	str	r3, [r4, #0]
 8012bf4:	6123      	str	r3, [r4, #16]
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	6163      	str	r3, [r4, #20]
 8012bfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012bfc:	466a      	mov	r2, sp
 8012bfe:	ab01      	add	r3, sp, #4
 8012c00:	f7ff ffc0 	bl	8012b84 <__swhatbuf_r>
 8012c04:	9900      	ldr	r1, [sp, #0]
 8012c06:	0007      	movs	r7, r0
 8012c08:	0028      	movs	r0, r5
 8012c0a:	f7f8 f933 	bl	800ae74 <_malloc_r>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d108      	bne.n	8012c24 <__smakebuf_r+0x44>
 8012c12:	220c      	movs	r2, #12
 8012c14:	5ea3      	ldrsh	r3, [r4, r2]
 8012c16:	059a      	lsls	r2, r3, #22
 8012c18:	d4ef      	bmi.n	8012bfa <__smakebuf_r+0x1a>
 8012c1a:	2203      	movs	r2, #3
 8012c1c:	4393      	bics	r3, r2
 8012c1e:	431e      	orrs	r6, r3
 8012c20:	81a6      	strh	r6, [r4, #12]
 8012c22:	e7e4      	b.n	8012bee <__smakebuf_r+0xe>
 8012c24:	2380      	movs	r3, #128	; 0x80
 8012c26:	89a2      	ldrh	r2, [r4, #12]
 8012c28:	6020      	str	r0, [r4, #0]
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	81a3      	strh	r3, [r4, #12]
 8012c2e:	9b00      	ldr	r3, [sp, #0]
 8012c30:	6120      	str	r0, [r4, #16]
 8012c32:	6163      	str	r3, [r4, #20]
 8012c34:	9b01      	ldr	r3, [sp, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00c      	beq.n	8012c54 <__smakebuf_r+0x74>
 8012c3a:	0028      	movs	r0, r5
 8012c3c:	230e      	movs	r3, #14
 8012c3e:	5ee1      	ldrsh	r1, [r4, r3]
 8012c40:	f000 f8a6 	bl	8012d90 <_isatty_r>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d005      	beq.n	8012c54 <__smakebuf_r+0x74>
 8012c48:	2303      	movs	r3, #3
 8012c4a:	89a2      	ldrh	r2, [r4, #12]
 8012c4c:	439a      	bics	r2, r3
 8012c4e:	3b02      	subs	r3, #2
 8012c50:	4313      	orrs	r3, r2
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	89a3      	ldrh	r3, [r4, #12]
 8012c56:	433b      	orrs	r3, r7
 8012c58:	81a3      	strh	r3, [r4, #12]
 8012c5a:	e7ce      	b.n	8012bfa <__smakebuf_r+0x1a>

08012c5c <__swbuf_r>:
 8012c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5e:	0006      	movs	r6, r0
 8012c60:	000d      	movs	r5, r1
 8012c62:	0014      	movs	r4, r2
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d004      	beq.n	8012c72 <__swbuf_r+0x16>
 8012c68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d101      	bne.n	8012c72 <__swbuf_r+0x16>
 8012c6e:	f7f9 fa83 	bl	800c178 <__sinit>
 8012c72:	69a3      	ldr	r3, [r4, #24]
 8012c74:	60a3      	str	r3, [r4, #8]
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	071b      	lsls	r3, r3, #28
 8012c7a:	d52e      	bpl.n	8012cda <__swbuf_r+0x7e>
 8012c7c:	6923      	ldr	r3, [r4, #16]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d02b      	beq.n	8012cda <__swbuf_r+0x7e>
 8012c82:	230c      	movs	r3, #12
 8012c84:	5ee2      	ldrsh	r2, [r4, r3]
 8012c86:	2380      	movs	r3, #128	; 0x80
 8012c88:	019b      	lsls	r3, r3, #6
 8012c8a:	b2ef      	uxtb	r7, r5
 8012c8c:	b2ed      	uxtb	r5, r5
 8012c8e:	421a      	tst	r2, r3
 8012c90:	d02c      	beq.n	8012cec <__swbuf_r+0x90>
 8012c92:	6923      	ldr	r3, [r4, #16]
 8012c94:	6820      	ldr	r0, [r4, #0]
 8012c96:	1ac0      	subs	r0, r0, r3
 8012c98:	6963      	ldr	r3, [r4, #20]
 8012c9a:	4283      	cmp	r3, r0
 8012c9c:	dc05      	bgt.n	8012caa <__swbuf_r+0x4e>
 8012c9e:	0021      	movs	r1, r4
 8012ca0:	0030      	movs	r0, r6
 8012ca2:	f7fd fab3 	bl	801020c <_fflush_r>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d11d      	bne.n	8012ce6 <__swbuf_r+0x8a>
 8012caa:	68a3      	ldr	r3, [r4, #8]
 8012cac:	3001      	adds	r0, #1
 8012cae:	3b01      	subs	r3, #1
 8012cb0:	60a3      	str	r3, [r4, #8]
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	1c5a      	adds	r2, r3, #1
 8012cb6:	6022      	str	r2, [r4, #0]
 8012cb8:	701f      	strb	r7, [r3, #0]
 8012cba:	6963      	ldr	r3, [r4, #20]
 8012cbc:	4283      	cmp	r3, r0
 8012cbe:	d004      	beq.n	8012cca <__swbuf_r+0x6e>
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	07db      	lsls	r3, r3, #31
 8012cc4:	d507      	bpl.n	8012cd6 <__swbuf_r+0x7a>
 8012cc6:	2d0a      	cmp	r5, #10
 8012cc8:	d105      	bne.n	8012cd6 <__swbuf_r+0x7a>
 8012cca:	0021      	movs	r1, r4
 8012ccc:	0030      	movs	r0, r6
 8012cce:	f7fd fa9d 	bl	801020c <_fflush_r>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	d107      	bne.n	8012ce6 <__swbuf_r+0x8a>
 8012cd6:	0028      	movs	r0, r5
 8012cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cda:	0021      	movs	r1, r4
 8012cdc:	0030      	movs	r0, r6
 8012cde:	f7ff fe53 	bl	8012988 <__swsetup_r>
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d0cd      	beq.n	8012c82 <__swbuf_r+0x26>
 8012ce6:	2501      	movs	r5, #1
 8012ce8:	426d      	negs	r5, r5
 8012cea:	e7f4      	b.n	8012cd6 <__swbuf_r+0x7a>
 8012cec:	4313      	orrs	r3, r2
 8012cee:	81a3      	strh	r3, [r4, #12]
 8012cf0:	4a02      	ldr	r2, [pc, #8]	; (8012cfc <__swbuf_r+0xa0>)
 8012cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	6663      	str	r3, [r4, #100]	; 0x64
 8012cf8:	e7cb      	b.n	8012c92 <__swbuf_r+0x36>
 8012cfa:	46c0      	nop			; (mov r8, r8)
 8012cfc:	ffffdfff 	.word	0xffffdfff

08012d00 <_raise_r>:
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	0004      	movs	r4, r0
 8012d04:	000d      	movs	r5, r1
 8012d06:	291f      	cmp	r1, #31
 8012d08:	d904      	bls.n	8012d14 <_raise_r+0x14>
 8012d0a:	2316      	movs	r3, #22
 8012d0c:	6003      	str	r3, [r0, #0]
 8012d0e:	2001      	movs	r0, #1
 8012d10:	4240      	negs	r0, r0
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	0003      	movs	r3, r0
 8012d16:	33fc      	adds	r3, #252	; 0xfc
 8012d18:	69db      	ldr	r3, [r3, #28]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d004      	beq.n	8012d28 <_raise_r+0x28>
 8012d1e:	008a      	lsls	r2, r1, #2
 8012d20:	189b      	adds	r3, r3, r2
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	2a00      	cmp	r2, #0
 8012d26:	d108      	bne.n	8012d3a <_raise_r+0x3a>
 8012d28:	0020      	movs	r0, r4
 8012d2a:	f000 f855 	bl	8012dd8 <_getpid_r>
 8012d2e:	002a      	movs	r2, r5
 8012d30:	0001      	movs	r1, r0
 8012d32:	0020      	movs	r0, r4
 8012d34:	f000 f83e 	bl	8012db4 <_kill_r>
 8012d38:	e7eb      	b.n	8012d12 <_raise_r+0x12>
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	2a01      	cmp	r2, #1
 8012d3e:	d0e8      	beq.n	8012d12 <_raise_r+0x12>
 8012d40:	1c51      	adds	r1, r2, #1
 8012d42:	d103      	bne.n	8012d4c <_raise_r+0x4c>
 8012d44:	2316      	movs	r3, #22
 8012d46:	3001      	adds	r0, #1
 8012d48:	6023      	str	r3, [r4, #0]
 8012d4a:	e7e2      	b.n	8012d12 <_raise_r+0x12>
 8012d4c:	2400      	movs	r4, #0
 8012d4e:	0028      	movs	r0, r5
 8012d50:	601c      	str	r4, [r3, #0]
 8012d52:	4790      	blx	r2
 8012d54:	0020      	movs	r0, r4
 8012d56:	e7dc      	b.n	8012d12 <_raise_r+0x12>

08012d58 <raise>:
 8012d58:	b510      	push	{r4, lr}
 8012d5a:	4b03      	ldr	r3, [pc, #12]	; (8012d68 <raise+0x10>)
 8012d5c:	0001      	movs	r1, r0
 8012d5e:	6818      	ldr	r0, [r3, #0]
 8012d60:	f7ff ffce 	bl	8012d00 <_raise_r>
 8012d64:	bd10      	pop	{r4, pc}
 8012d66:	46c0      	nop			; (mov r8, r8)
 8012d68:	200006d8 	.word	0x200006d8

08012d6c <_fstat_r>:
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	b570      	push	{r4, r5, r6, lr}
 8012d70:	4d06      	ldr	r5, [pc, #24]	; (8012d8c <_fstat_r+0x20>)
 8012d72:	0004      	movs	r4, r0
 8012d74:	0008      	movs	r0, r1
 8012d76:	0011      	movs	r1, r2
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	f7f0 fd1e 	bl	80037ba <_fstat>
 8012d7e:	1c43      	adds	r3, r0, #1
 8012d80:	d103      	bne.n	8012d8a <_fstat_r+0x1e>
 8012d82:	682b      	ldr	r3, [r5, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d000      	beq.n	8012d8a <_fstat_r+0x1e>
 8012d88:	6023      	str	r3, [r4, #0]
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	20000d34 	.word	0x20000d34

08012d90 <_isatty_r>:
 8012d90:	2300      	movs	r3, #0
 8012d92:	b570      	push	{r4, r5, r6, lr}
 8012d94:	4d06      	ldr	r5, [pc, #24]	; (8012db0 <_isatty_r+0x20>)
 8012d96:	0004      	movs	r4, r0
 8012d98:	0008      	movs	r0, r1
 8012d9a:	602b      	str	r3, [r5, #0]
 8012d9c:	f7f0 fd1b 	bl	80037d6 <_isatty>
 8012da0:	1c43      	adds	r3, r0, #1
 8012da2:	d103      	bne.n	8012dac <_isatty_r+0x1c>
 8012da4:	682b      	ldr	r3, [r5, #0]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d000      	beq.n	8012dac <_isatty_r+0x1c>
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	bd70      	pop	{r4, r5, r6, pc}
 8012dae:	46c0      	nop			; (mov r8, r8)
 8012db0:	20000d34 	.word	0x20000d34

08012db4 <_kill_r>:
 8012db4:	2300      	movs	r3, #0
 8012db6:	b570      	push	{r4, r5, r6, lr}
 8012db8:	4d06      	ldr	r5, [pc, #24]	; (8012dd4 <_kill_r+0x20>)
 8012dba:	0004      	movs	r4, r0
 8012dbc:	0008      	movs	r0, r1
 8012dbe:	0011      	movs	r1, r2
 8012dc0:	602b      	str	r3, [r5, #0]
 8012dc2:	f7f0 fc9b 	bl	80036fc <_kill>
 8012dc6:	1c43      	adds	r3, r0, #1
 8012dc8:	d103      	bne.n	8012dd2 <_kill_r+0x1e>
 8012dca:	682b      	ldr	r3, [r5, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d000      	beq.n	8012dd2 <_kill_r+0x1e>
 8012dd0:	6023      	str	r3, [r4, #0]
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	20000d34 	.word	0x20000d34

08012dd8 <_getpid_r>:
 8012dd8:	b510      	push	{r4, lr}
 8012dda:	f7f0 fc89 	bl	80036f0 <_getpid>
 8012dde:	bd10      	pop	{r4, pc}

08012de0 <round>:
 8012de0:	b570      	push	{r4, r5, r6, lr}
 8012de2:	004a      	lsls	r2, r1, #1
 8012de4:	000d      	movs	r5, r1
 8012de6:	4920      	ldr	r1, [pc, #128]	; (8012e68 <round+0x88>)
 8012de8:	0d52      	lsrs	r2, r2, #21
 8012dea:	1851      	adds	r1, r2, r1
 8012dec:	0006      	movs	r6, r0
 8012dee:	2913      	cmp	r1, #19
 8012df0:	dc18      	bgt.n	8012e24 <round+0x44>
 8012df2:	2900      	cmp	r1, #0
 8012df4:	da09      	bge.n	8012e0a <round+0x2a>
 8012df6:	0feb      	lsrs	r3, r5, #31
 8012df8:	2200      	movs	r2, #0
 8012dfa:	07db      	lsls	r3, r3, #31
 8012dfc:	3101      	adds	r1, #1
 8012dfe:	d101      	bne.n	8012e04 <round+0x24>
 8012e00:	491a      	ldr	r1, [pc, #104]	; (8012e6c <round+0x8c>)
 8012e02:	430b      	orrs	r3, r1
 8012e04:	0019      	movs	r1, r3
 8012e06:	0010      	movs	r0, r2
 8012e08:	e017      	b.n	8012e3a <round+0x5a>
 8012e0a:	4c19      	ldr	r4, [pc, #100]	; (8012e70 <round+0x90>)
 8012e0c:	410c      	asrs	r4, r1
 8012e0e:	0022      	movs	r2, r4
 8012e10:	402a      	ands	r2, r5
 8012e12:	4302      	orrs	r2, r0
 8012e14:	d013      	beq.n	8012e3e <round+0x5e>
 8012e16:	2280      	movs	r2, #128	; 0x80
 8012e18:	0312      	lsls	r2, r2, #12
 8012e1a:	410a      	asrs	r2, r1
 8012e1c:	1953      	adds	r3, r2, r5
 8012e1e:	43a3      	bics	r3, r4
 8012e20:	2200      	movs	r2, #0
 8012e22:	e7ef      	b.n	8012e04 <round+0x24>
 8012e24:	2933      	cmp	r1, #51	; 0x33
 8012e26:	dd0d      	ble.n	8012e44 <round+0x64>
 8012e28:	2380      	movs	r3, #128	; 0x80
 8012e2a:	00db      	lsls	r3, r3, #3
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d106      	bne.n	8012e3e <round+0x5e>
 8012e30:	0002      	movs	r2, r0
 8012e32:	002b      	movs	r3, r5
 8012e34:	0029      	movs	r1, r5
 8012e36:	f7ed fcbf 	bl	80007b8 <__aeabi_dadd>
 8012e3a:	0006      	movs	r6, r0
 8012e3c:	000d      	movs	r5, r1
 8012e3e:	0030      	movs	r0, r6
 8012e40:	0029      	movs	r1, r5
 8012e42:	bd70      	pop	{r4, r5, r6, pc}
 8012e44:	4c0b      	ldr	r4, [pc, #44]	; (8012e74 <round+0x94>)
 8012e46:	1912      	adds	r2, r2, r4
 8012e48:	2401      	movs	r4, #1
 8012e4a:	4264      	negs	r4, r4
 8012e4c:	40d4      	lsrs	r4, r2
 8012e4e:	4220      	tst	r0, r4
 8012e50:	d0f5      	beq.n	8012e3e <round+0x5e>
 8012e52:	2233      	movs	r2, #51	; 0x33
 8012e54:	1a51      	subs	r1, r2, r1
 8012e56:	3a32      	subs	r2, #50	; 0x32
 8012e58:	408a      	lsls	r2, r1
 8012e5a:	1812      	adds	r2, r2, r0
 8012e5c:	4282      	cmp	r2, r0
 8012e5e:	4180      	sbcs	r0, r0
 8012e60:	4240      	negs	r0, r0
 8012e62:	182b      	adds	r3, r5, r0
 8012e64:	43a2      	bics	r2, r4
 8012e66:	e7cd      	b.n	8012e04 <round+0x24>
 8012e68:	fffffc01 	.word	0xfffffc01
 8012e6c:	3ff00000 	.word	0x3ff00000
 8012e70:	000fffff 	.word	0x000fffff
 8012e74:	fffffbed 	.word	0xfffffbed

08012e78 <_init>:
 8012e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7a:	46c0      	nop			; (mov r8, r8)
 8012e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e7e:	bc08      	pop	{r3}
 8012e80:	469e      	mov	lr, r3
 8012e82:	4770      	bx	lr

08012e84 <_fini>:
 8012e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e86:	46c0      	nop			; (mov r8, r8)
 8012e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e8a:	bc08      	pop	{r3}
 8012e8c:	469e      	mov	lr, r3
 8012e8e:	4770      	bx	lr
