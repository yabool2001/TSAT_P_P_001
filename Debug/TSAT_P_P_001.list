
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d5c  08011490  08011490  00021490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131ec  080131ec  000306e8  2**0
                  CONTENTS
  4 .ARM          00000008  080131ec  080131ec  000231ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131f4  080131f4  000306e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080131f4  080131f4  000231f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131fc  080131fc  000231fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e8  20000000  08013200  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200006e8  080138e8  000306e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  080138e8  00031070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194a3  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000385c  00000000  00000000  00049bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0004d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001238  00000000  00000000  0004eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d40d  00000000  00000000  0004fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d28a  00000000  00000000  0006d1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aff0b  00000000  00000000  0008a437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ef4  00000000  00000000  0013a344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00141238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e8 	.word	0x200006e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08011478 	.word	0x08011478

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006ec 	.word	0x200006ec
 8000100:	08011478 	.word	0x08011478

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08012ca8 	.word	0x08012ca8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f8cd 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f9a9 	bl	8002908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fbe5 	bl	8002d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fb61 	bl	8002c80 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fb11 	bl	8002be4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fbab 	bl	8002d1c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80025c6:	f000 f9eb 	bl	80029a0 <MX_I2C1_Init>
  MX_TIM6_Init();
 80025ca:	f000 facd 	bl	8002b68 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 fa27 	bl	8002a20 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4bab      	ldr	r3, [pc, #684]	; (8002880 <main+0x2d8>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4baa      	ldr	r3, [pc, #680]	; (8002880 <main+0x2d8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	48a6      	ldr	r0, [pc, #664]	; (8002884 <main+0x2dc>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f003 fd88 	bl	8006100 <HAL_UART_Transmit>
  if ( !my_astro_init () )
 80025f0:	f006 f96c 	bl	80088cc <my_astro_init>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	4053      	eors	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <main+0x5e>
  {
	  HAL_NVIC_SystemReset () ;
 8002602:	f001 fa30 	bl	8003a66 <HAL_NVIC_SystemReset>
  }

  my_lx6_on () ;
 8002606:	f000 fd17 	bl	8003038 <my_lx6_on>
  astro_geo_wr_latitude = 0 ;
 800260a:	4b9f      	ldr	r3, [pc, #636]	; (8002888 <main+0x2e0>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002610:	4b9e      	ldr	r3, [pc, #632]	; (800288c <main+0x2e4>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
  nmea_latitude_s[0] = 0 ;
 8002616:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <main+0x2e8>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  nmea_longitude_s[0] = 0 ;
 800261c:	4b9d      	ldr	r3, [pc, #628]	; (8002894 <main+0x2ec>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
  gngll_message[0] = 0 ;
 8002622:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <main+0x2f0>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
  nmea_fixed_pdop_d = 1000.0 ;
 8002628:	499c      	ldr	r1, [pc, #624]	; (800289c <main+0x2f4>)
 800262a:	2200      	movs	r2, #0
 800262c:	4b9c      	ldr	r3, [pc, #624]	; (80028a0 <main+0x2f8>)
 800262e:	600a      	str	r2, [r1, #0]
 8002630:	604b      	str	r3, [r1, #4]
  received_nmea_rmc_flag = false ;
 8002632:	4b9c      	ldr	r3, [pc, #624]	; (80028a4 <main+0x2fc>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 8002638:	4b9b      	ldr	r3, [pc, #620]	; (80028a8 <main+0x300>)
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800263e:	4b9b      	ldr	r3, [pc, #620]	; (80028ac <main+0x304>)
 8002640:	0018      	movs	r0, r3
 8002642:	f003 f9e5 	bl	8005a10 <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 8002646:	e096      	b.n	8002776 <main+0x1ce>
  {
	  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8002648:	23fa      	movs	r3, #250	; 0xfa
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4998      	ldr	r1, [pc, #608]	; (80028b0 <main+0x308>)
 800264e:	4899      	ldr	r0, [pc, #612]	; (80028b4 <main+0x30c>)
 8002650:	2201      	movs	r2, #1
 8002652:	f003 fdf1 	bl	8006238 <HAL_UART_Receive>
	  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
	  //HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
	  if ( rxd_byte )
 8002656:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <main+0x308>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d064      	beq.n	8002728 <main+0x180>
	  {
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800265e:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <main+0x310>)
 8002660:	4996      	ldr	r1, [pc, #600]	; (80028bc <main+0x314>)
 8002662:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <main+0x308>)
 8002664:	0018      	movs	r0, r3
 8002666:	f006 fae4 	bl	8008c32 <my_nmea_message>
 800266a:	0003      	movs	r3, r0
 800266c:	2b02      	cmp	r3, #2
 800266e:	d15b      	bne.n	8002728 <main+0x180>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8002670:	4b92      	ldr	r3, [pc, #584]	; (80028bc <main+0x314>)
 8002672:	0018      	movs	r0, r3
 8002674:	f006 fb9d 	bl	8008db2 <is_my_nmea_checksum_ok>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d055      	beq.n	8002728 <main+0x180>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) && !received_nmea_rmc_flag )
 800267c:	4b90      	ldr	r3, [pc, #576]	; (80028c0 <main+0x318>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <main+0x314>)
 8002682:	0011      	movs	r1, r2
 8002684:	0018      	movs	r0, r3
 8002686:	f008 f9a2 	bl	800a9ce <strstr>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d00d      	beq.n	80026aa <main+0x102>
 800268e:	4b85      	ldr	r3, [pc, #532]	; (80028a4 <main+0x2fc>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4053      	eors	r3, r2
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <main+0x102>
				  {
					  set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <main+0x314>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f006 f9e2 	bl	8008a68 <set_my_rtc_from_nmea_rmc>
					  received_nmea_rmc_flag = true ;
 80026a4:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <main+0x2fc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80026aa:	4b86      	ldr	r3, [pc, #536]	; (80028c4 <main+0x31c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b83      	ldr	r3, [pc, #524]	; (80028bc <main+0x314>)
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f008 f98b 	bl	800a9ce <strstr>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d010      	beq.n	80026de <main+0x136>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80026bc:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <main+0x314>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f006 fb23 	bl	8008d0a <get_my_nmea_gngsa_fixed_mode_s>
 80026c4:	0003      	movs	r3, r0
 80026c6:	001a      	movs	r2, r3
 80026c8:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <main+0x320>)
 80026ca:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 80026cc:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <main+0x314>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f006 fb26 	bl	8008d20 <get_my_nmea_gngsa_pdop_d>
 80026d4:	0002      	movs	r2, r0
 80026d6:	000b      	movs	r3, r1
 80026d8:	4970      	ldr	r1, [pc, #448]	; (800289c <main+0x2f4>)
 80026da:	600a      	str	r2, [r1, #0]
 80026dc:	604b      	str	r3, [r1, #4]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 80026de:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <main+0x324>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <main+0x314>)
 80026e4:	0011      	movs	r1, r2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f008 f971 	bl	800a9ce <strstr>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d01b      	beq.n	8002728 <main+0x180>
				  {
					  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <main+0x2f4>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <main+0x328>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f7fd feb4 	bl	8000468 <__aeabi_dcmple>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d009      	beq.n	8002718 <main+0x170>
					  {
						  get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 8002704:	4c60      	ldr	r4, [pc, #384]	; (8002888 <main+0x2e0>)
 8002706:	4a63      	ldr	r2, [pc, #396]	; (8002894 <main+0x2ec>)
 8002708:	4961      	ldr	r1, [pc, #388]	; (8002890 <main+0x2e8>)
 800270a:	486c      	ldr	r0, [pc, #432]	; (80028bc <main+0x314>)
 800270c:	4b5f      	ldr	r3, [pc, #380]	; (800288c <main+0x2e4>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0023      	movs	r3, r4
 8002712:	f006 fc09 	bl	8008f28 <get_my_nmea_gngll_coordinates>
 8002716:	e007      	b.n	8002728 <main+0x180>
					  }
					  else
					  {
						  memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8002718:	4a5f      	ldr	r2, [pc, #380]	; (8002898 <main+0x2f0>)
 800271a:	4b68      	ldr	r3, [pc, #416]	; (80028bc <main+0x314>)
 800271c:	0010      	movs	r0, r2
 800271e:	0019      	movs	r1, r3
 8002720:	23fa      	movs	r3, #250	; 0xfa
 8002722:	001a      	movs	r2, r3
 8002724:	f008 fa0b 	bl	800ab3e <memcpy>
					  }
				  }
			  }
		  }
	  }
	  rxd_byte = 0 ;
 8002728:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <main+0x308>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > nmea_max_rmc_time && !received_nmea_rmc_flag )
 800272e:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <main+0x300>)
 8002730:	881a      	ldrh	r2, [r3, #0]
 8002732:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <main+0x32c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d906      	bls.n	8002748 <main+0x1a0>
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <main+0x2fc>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4053      	eors	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11e      	bne.n	8002786 <main+0x1de>
	  {
		  break ;
	  }
	  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 8002748:	4b54      	ldr	r3, [pc, #336]	; (800289c <main+0x2f4>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <main+0x328>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f7fd fe88 	bl	8000468 <__aeabi_dcmple>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d100      	bne.n	800275e <main+0x1b6>
 800275c:	e00b      	b.n	8002776 <main+0x1ce>
	  {
		  if ( nmea_latitude_s[0] != 0 )
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <main+0x2e8>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <main+0x1ce>
		  {
			  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <main+0x320>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b33      	cmp	r3, #51	; 0x33
 800276c:	d103      	bne.n	8002776 <main+0x1ce>
			  {
				  if ( received_nmea_rmc_flag )
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <main+0x2fc>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <main+0x1e2>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 8002776:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <main+0x300>)
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <main+0x330>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d200      	bcs.n	8002784 <main+0x1dc>
 8002782:	e761      	b.n	8002648 <main+0xa0>
 8002784:	e002      	b.n	800278c <main+0x1e4>
		  break ;
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	e000      	b.n	800278c <main+0x1e4>
				  {
					  break ;
 800278a:	46c0      	nop			; (mov r8, r8)
				  }
			  }
		  }
	  }
  }
  tim_seconds = 0 ;
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <main+0x300>)
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <main+0x304>)
 8002794:	0018      	movs	r0, r3
 8002796:	f003 f997 	bl	8005ac8 <HAL_TIM_Base_Stop_IT>
  my_lx6_off () ;
 800279a:	f000 fc65 	bl	8003068 <my_lx6_off>
  if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <main+0x2e8>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <main+0x218>
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <main+0x2f0>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <main+0x218>
  {
	  get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) ;
 80027ae:	4c36      	ldr	r4, [pc, #216]	; (8002888 <main+0x2e0>)
 80027b0:	4a38      	ldr	r2, [pc, #224]	; (8002894 <main+0x2ec>)
 80027b2:	4937      	ldr	r1, [pc, #220]	; (8002890 <main+0x2e8>)
 80027b4:	4838      	ldr	r0, [pc, #224]	; (8002898 <main+0x2f0>)
 80027b6:	4b35      	ldr	r3, [pc, #212]	; (800288c <main+0x2e4>)
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	0023      	movs	r3, r4
 80027bc:	f006 fbb4 	bl	8008f28 <get_my_nmea_gngll_coordinates>
  }
  get_my_rtc_time ( rtc_dt ) ;
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <main+0x334>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f006 f9a6 	bl	8008b14 <get_my_rtc_time>
  send_debug_logs ( rtc_dt ) ;
 80027c8:	4b44      	ldr	r3, [pc, #272]	; (80028dc <main+0x334>)
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 fb68 	bl	8002ea0 <send_debug_logs>
  sprintf ( payload , "%.1f,%d,%lu" , nmea_fixed_pdop_d , tim_seconds , agg_tim_seconds ) ;
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <main+0x2f4>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4934      	ldr	r1, [pc, #208]	; (80028a8 <main+0x300>)
 80027d8:	8809      	ldrh	r1, [r1, #0]
 80027da:	000d      	movs	r5, r1
 80027dc:	4940      	ldr	r1, [pc, #256]	; (80028e0 <main+0x338>)
 80027de:	6809      	ldr	r1, [r1, #0]
 80027e0:	4c40      	ldr	r4, [pc, #256]	; (80028e4 <main+0x33c>)
 80027e2:	4841      	ldr	r0, [pc, #260]	; (80028e8 <main+0x340>)
 80027e4:	9101      	str	r1, [sp, #4]
 80027e6:	9500      	str	r5, [sp, #0]
 80027e8:	0021      	movs	r1, r4
 80027ea:	f008 f82d 	bl	800a848 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <main+0x340>)
 80027f0:	493e      	ldr	r1, [pc, #248]	; (80028ec <main+0x344>)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <main+0x348>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f008 f827 	bl	800a848 <sprintf>
  sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <main+0x2ec>)
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <main+0x2e8>)
 80027fe:	493d      	ldr	r1, [pc, #244]	; (80028f4 <main+0x34c>)
 8002800:	483d      	ldr	r0, [pc, #244]	; (80028f8 <main+0x350>)
 8002802:	f008 f821 	bl	800a848 <sprintf>
  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <main+0x2e0>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <main+0x2e4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f006 f919 	bl	8008a48 <my_astro_write_coordinates>
  send_debug_logs ( astro_payload_log ) ;
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <main+0x348>)
 8002818:	0018      	movs	r0, r3
 800281a:	f000 fb41 	bl	8002ea0 <send_debug_logs>
  send_debug_logs ( nmea_coordinates_log ) ;
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <main+0x350>)
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fb3d 	bl	8002ea0 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <main+0x340>)
 8002828:	0018      	movs	r0, r3
 800282a:	f006 f8a5 	bl	8008978 <my_astro_add_payload_2_queue>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 800282e:	f000 fbc5 	bl	8002fbc <get_systick>
 8002832:	0002      	movs	r2, r0
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <main+0x354>)
 8002836:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 8002838:	f000 fbae 	bl	8002f98 <is_evt_pin_high>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <main+0x29c>
	  {
		  my_astro_read_evt_reg () ;
 8002840:	f006 f8c2 	bl	80089c8 <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_MESSAGE_TIMER )
 8002844:	f000 fbba 	bl	8002fbc <get_systick>
 8002848:	0002      	movs	r2, r0
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <main+0x354>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <main+0x358>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d9f0      	bls.n	8002838 <main+0x290>
	  {
		  my_astro_log ();
 8002856:	f006 f8ed 	bl	8008a34 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 800285a:	f000 fbaf 	bl	8002fbc <get_systick>
 800285e:	0002      	movs	r2, r0
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <main+0x354>)
 8002862:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <main+0x35c>)
 8002866:	881c      	ldrh	r4, [r3, #0]
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <main+0x340>)
 800286a:	0018      	movs	r0, r3
 800286c:	f7fd fc4a 	bl	8000104 <strlen>
 8002870:	0003      	movs	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <main+0x340>)
 8002876:	0019      	movs	r1, r3
 8002878:	0020      	movs	r0, r4
 800287a:	f004 ff39 	bl	80076f0 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 800287e:	e7db      	b.n	8002838 <main+0x290>
 8002880:	20000000 	.word	0x20000000
 8002884:	20000864 	.word	0x20000864
 8002888:	20000be8 	.word	0x20000be8
 800288c:	20000bec 	.word	0x20000bec
 8002890:	20000bd0 	.word	0x20000bd0
 8002894:	20000bdc 	.word	0x20000bdc
 8002898:	20000aa0 	.word	0x20000aa0
 800289c:	20000020 	.word	0x20000020
 80028a0:	408f4000 	.word	0x408f4000
 80028a4:	20000d55 	.word	0x20000d55
 80028a8:	20000bf2 	.word	0x20000bf2
 80028ac:	20000784 	.word	0x20000784
 80028b0:	200009a0 	.word	0x200009a0
 80028b4:	200008f8 	.word	0x200008f8
 80028b8:	20000b9a 	.word	0x20000b9a
 80028bc:	200009a4 	.word	0x200009a4
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	20000004 	.word	0x20000004
 80028c8:	20000bf0 	.word	0x20000bf0
 80028cc:	20000008 	.word	0x20000008
 80028d0:	20000010 	.word	0x20000010
 80028d4:	20000018 	.word	0x20000018
 80028d8:	2000001a 	.word	0x2000001a
 80028dc:	2000098c 	.word	0x2000098c
 80028e0:	20000bf4 	.word	0x20000bf4
 80028e4:	080114b8 	.word	0x080114b8
 80028e8:	20000c00 	.word	0x20000c00
 80028ec:	080114c4 	.word	0x080114c4
 80028f0:	20000ca0 	.word	0x20000ca0
 80028f4:	080114dc 	.word	0x080114dc
 80028f8:	20000b9c 	.word	0x20000b9c
 80028fc:	20000bf8 	.word	0x20000bf8
 8002900:	0000ea60 	.word	0x0000ea60
 8002904:	20000bfc 	.word	0x20000bfc

08002908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b093      	sub	sp, #76	; 0x4c
 800290c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290e:	2410      	movs	r4, #16
 8002910:	193b      	adds	r3, r7, r4
 8002912:	0018      	movs	r0, r3
 8002914:	2338      	movs	r3, #56	; 0x38
 8002916:	001a      	movs	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f008 f82b 	bl	800a974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800291e:	003b      	movs	r3, r7
 8002920:	0018      	movs	r0, r3
 8002922:	2310      	movs	r3, #16
 8002924:	001a      	movs	r2, r3
 8002926:	2100      	movs	r1, #0
 8002928:	f008 f824 	bl	800a974 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	0018      	movs	r0, r3
 8002932:	f001 fc45 	bl	80041c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	220a      	movs	r2, #10
 800293a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800293c:	193b      	adds	r3, r7, r4
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	0052      	lsls	r2, r2, #1
 8002942:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002944:	0021      	movs	r1, r4
 8002946:	187b      	adds	r3, r7, r1
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800294c:	187b      	adds	r3, r7, r1
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002952:	187b      	adds	r3, r7, r1
 8002954:	2201      	movs	r2, #1
 8002956:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002958:	187b      	adds	r3, r7, r1
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800295e:	187b      	adds	r3, r7, r1
 8002960:	0018      	movs	r0, r3
 8002962:	f001 fc79 	bl	8004258 <HAL_RCC_OscConfig>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d001      	beq.n	800296e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800296a:	f000 fbb9 	bl	80030e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800296e:	003b      	movs	r3, r7
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002974:	003b      	movs	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297a:	003b      	movs	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002980:	003b      	movs	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002986:	003b      	movs	r3, r7
 8002988:	2100      	movs	r1, #0
 800298a:	0018      	movs	r0, r3
 800298c:	f001 ff7e 	bl	800488c <HAL_RCC_ClockConfig>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002994:	f000 fba4 	bl	80030e0 <Error_Handler>
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b013      	add	sp, #76	; 0x4c
 800299e:	bd90      	pop	{r4, r7, pc}

080029a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <MX_I2C1_Init+0x78>)
 80029a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <MX_I2C1_Init+0x7c>)
 80029ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029dc:	0018      	movs	r0, r3
 80029de:	f001 fac1 	bl	8003f64 <HAL_I2C_Init>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029e6:	f000 fb7b 	bl	80030e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029ec:	2100      	movs	r1, #0
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 fb4e 	bl	8004090 <HAL_I2CEx_ConfigAnalogFilter>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029f8:	f000 fb72 	bl	80030e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <MX_I2C1_Init+0x74>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fb91 	bl	8004128 <HAL_I2CEx_ConfigDigitalFilter>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d001      	beq.n	8002a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a0a:	f000 fb69 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000704 	.word	0x20000704
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	00303d5b 	.word	0x00303d5b

08002a20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b090      	sub	sp, #64	; 0x40
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a26:	232c      	movs	r3, #44	; 0x2c
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	2314      	movs	r3, #20
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f007 ff9f 	bl	800a974 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a36:	2328      	movs	r3, #40	; 0x28
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a3e:	003b      	movs	r3, r7
 8002a40:	0018      	movs	r0, r3
 8002a42:	2328      	movs	r3, #40	; 0x28
 8002a44:	001a      	movs	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	f007 ff94 	bl	800a974 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a4e:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <MX_RTC_Init+0x144>)
 8002a50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a5a:	227f      	movs	r2, #127	; 0x7f
 8002a5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a64:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a76:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	05d2      	lsls	r2, r2, #23
 8002a7c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a84:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <MX_RTC_Init+0x140>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 fa62 	bl	8004f50 <HAL_RTC_Init>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002a90:	f000 fb26 	bl	80030e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	2200      	movs	r2, #0
 8002aac:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aba:	1879      	adds	r1, r7, r1
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <MX_RTC_Init+0x140>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f002 fae7 	bl	8005094 <HAL_RTC_SetTime>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d001      	beq.n	8002ace <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002aca:	f000 fb09 	bl	80030e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ace:	2128      	movs	r1, #40	; 0x28
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2201      	movs	r2, #1
 8002ada:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2201      	movs	r2, #1
 8002ae0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2224      	movs	r2, #36	; 0x24
 8002ae6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002ae8:	1879      	adds	r1, r7, r1
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <MX_RTC_Init+0x140>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	0018      	movs	r0, r3
 8002af0:	f002 fbd4 	bl	800529c <HAL_RTC_SetDate>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d001      	beq.n	8002afc <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002af8:	f000 faf2 	bl	80030e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002afc:	003b      	movs	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b02:	003b      	movs	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b08:	003b      	movs	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b0e:	003b      	movs	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b14:	003b      	movs	r3, r7
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b1a:	003b      	movs	r3, r7
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b20:	003b      	movs	r3, r7
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b26:	003b      	movs	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b32:	003b      	movs	r3, r7
 8002b34:	2220      	movs	r2, #32
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b3a:	003b      	movs	r3, r7
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b42:	0039      	movs	r1, r7
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_RTC_Init+0x140>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f002 fc87 	bl	800545c <HAL_RTC_SetAlarm>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b52:	f000 fac5 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b010      	add	sp, #64	; 0x40
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	20000758 	.word	0x20000758
 8002b64:	40002800 	.word	0x40002800

08002b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	0018      	movs	r0, r3
 8002b72:	230c      	movs	r3, #12
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f007 fefc 	bl	800a974 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b7c:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <MX_TIM6_Init+0x70>)
 8002b80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <MX_TIM6_Init+0x74>)
 8002b86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <MX_TIM6_Init+0x78>)
 8002b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f002 fede 	bl	800595e <HAL_TIM_Base_Init>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ba6:	f000 fa9b 	bl	80030e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bb6:	1d3a      	adds	r2, r7, #4
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f003 f983 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002bc6:	f000 fa8b 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	20000784 	.word	0x20000784
 8002bd8:	40001000 	.word	0x40001000
 8002bdc:	00003e7f 	.word	0x00003e7f
 8002be0:	000003e7 	.word	0x000003e7

08002be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bea:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <MX_USART1_UART_Init+0x98>)
 8002bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bf0:	2296      	movs	r2, #150	; 0x96
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f003 f9d0 	bl	8005fd4 <HAL_UART_Init>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d001      	beq.n	8002c3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c38:	f000 fa52 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	0018      	movs	r0, r3
 8002c42:	f004 f89d 	bl	8006d80 <HAL_UARTEx_SetTxFifoThreshold>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c4a:	f000 fa49 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c50:	2100      	movs	r1, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f004 f8d4 	bl	8006e00 <HAL_UARTEx_SetRxFifoThreshold>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c5c:	f000 fa40 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c62:	0018      	movs	r0, r3
 8002c64:	f004 f852 	bl	8006d0c <HAL_UARTEx_DisableFifoMode>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c6c:	f000 fa38 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	200007d0 	.word	0x200007d0
 8002c7c:	40013800 	.word	0x40013800

08002c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <MX_USART2_UART_Init+0x98>)
 8002c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002c8c:	22e1      	movs	r2, #225	; 0xe1
 8002c8e:	0252      	lsls	r2, r2, #9
 8002c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f003 f982 	bl	8005fd4 <HAL_UART_Init>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002cd4:	f000 fa04 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f004 f84f 	bl	8006d80 <HAL_UARTEx_SetTxFifoThreshold>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ce6:	f000 f9fb 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cec:	2100      	movs	r1, #0
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f004 f886 	bl	8006e00 <HAL_UARTEx_SetRxFifoThreshold>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002cf8:	f000 f9f2 	bl	80030e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <MX_USART2_UART_Init+0x94>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f004 f804 	bl	8006d0c <HAL_UARTEx_DisableFifoMode>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d08:	f000 f9ea 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000864 	.word	0x20000864
 8002d18:	40004400 	.word	0x40004400

08002d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <MX_USART3_UART_Init+0x64>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d28:	2296      	movs	r2, #150	; 0x96
 8002d2a:	0192      	lsls	r2, r2, #6
 8002d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <MX_USART3_UART_Init+0x60>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f003 f934 	bl	8005fd4 <HAL_UART_Init>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d70:	f000 f9b6 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	200008f8 	.word	0x200008f8
 8002d80:	40004800 	.word	0x40004800

08002d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b08b      	sub	sp, #44	; 0x2c
 8002d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8a:	2414      	movs	r4, #20
 8002d8c:	193b      	adds	r3, r7, r4
 8002d8e:	0018      	movs	r0, r3
 8002d90:	2314      	movs	r3, #20
 8002d92:	001a      	movs	r2, r3
 8002d94:	2100      	movs	r1, #0
 8002d96:	f007 fded 	bl	800a974 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002da0:	2104      	movs	r1, #4
 8002da2:	430a      	orrs	r2, r1
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	2204      	movs	r2, #4
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002db8:	2120      	movs	r1, #32
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002de8:	2102      	movs	r1, #2
 8002dea:	430a      	orrs	r2, r1
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <MX_GPIO_Init+0x10c>)
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002dfa:	238c      	movs	r3, #140	; 0x8c
 8002dfc:	015b      	lsls	r3, r3, #5
 8002dfe:	4825      	ldr	r0, [pc, #148]	; (8002e94 <MX_GPIO_Init+0x110>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	0019      	movs	r1, r3
 8002e04:	f001 f891 	bl	8003f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002e08:	4923      	ldr	r1, [pc, #140]	; (8002e98 <MX_GPIO_Init+0x114>)
 8002e0a:	23a0      	movs	r3, #160	; 0xa0
 8002e0c:	05db      	lsls	r3, r3, #23
 8002e0e:	2200      	movs	r2, #0
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 f88a 	bl	8003f2a <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	228c      	movs	r2, #140	; 0x8c
 8002e1a:	0152      	lsls	r2, r2, #5
 8002e1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2201      	movs	r2, #1
 8002e22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <MX_GPIO_Init+0x110>)
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f000 fe26 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <MX_GPIO_Init+0x114>)
 8002e40:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	2201      	movs	r2, #1
 8002e46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	193a      	adds	r2, r7, r4
 8002e56:	23a0      	movs	r3, #160	; 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fe13 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002e62:	0021      	movs	r1, r4
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	22c0      	movs	r2, #192	; 0xc0
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2288      	movs	r2, #136	; 0x88
 8002e70:	0352      	lsls	r2, r2, #13
 8002e72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <MX_GPIO_Init+0x118>)
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f000 fe01 	bl	8003a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b00b      	add	sp, #44	; 0x2c
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	50000800 	.word	0x50000800
 8002e98:	00009860 	.word	0x00009860
 8002e9c:	50000400 	.word	0x50000400

08002ea0 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd f92a 	bl	8000104 <strlen>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2bfa      	cmp	r3, #250	; 0xfa
 8002eb8:	d908      	bls.n	8002ecc <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002eba:	23fa      	movs	r3, #250	; 0xfa
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <send_debug_logs+0x54>)
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <send_debug_logs+0x58>)
 8002ec2:	222a      	movs	r2, #42	; 0x2a
 8002ec4:	f003 f91c 	bl	8006100 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002ec8:	23fa      	movs	r3, #250	; 0xfa
 8002eca:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	23fa      	movs	r3, #250	; 0xfa
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <send_debug_logs+0x58>)
 8002ed8:	f003 f912 	bl	8006100 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002edc:	23fa      	movs	r3, #250	; 0xfa
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4906      	ldr	r1, [pc, #24]	; (8002efc <send_debug_logs+0x5c>)
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <send_debug_logs+0x58>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f003 f90b 	bl	8006100 <HAL_UART_Transmit>
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b004      	add	sp, #16
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	080114f4 	.word	0x080114f4
 8002ef8:	20000864 	.word	0x20000864
 8002efc:	08011520 	.word	0x08011520

08002f00 <reset_astronode>:
void reset_astronode ( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <reset_astronode+0x30>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f001 f80d 	bl	8003f2a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 fca1 	bl	8003858 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <reset_astronode+0x30>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f001 f804 	bl	8003f2a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002f22:	20fa      	movs	r0, #250	; 0xfa
 8002f24:	f000 fc98 	bl	8003858 <HAL_Delay>
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	50000800 	.word	0x50000800

08002f34 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <send_astronode_request+0x34>)
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff ffad 	bl	8002ea0 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff ffa9 	bl	8002ea0 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	23fa      	movs	r3, #250	; 0xfa
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <send_astronode_request+0x38>)
 8002f5a:	f003 f8d1 	bl	8006100 <HAL_UART_Transmit>
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	08011524 	.word	0x08011524
 8002f6c:	200007d0 	.word	0x200007d0

08002f70 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <is_astronode_character_received+0x24>)
 8002f7c:	2364      	movs	r3, #100	; 0x64
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f003 f95a 	bl	8006238 <HAL_UART_Receive>
 8002f84:	0003      	movs	r3, r0
 8002f86:	425a      	negs	r2, r3
 8002f88:	4153      	adcs	r3, r2
 8002f8a:	b2db      	uxtb	r3, r3
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200007d0 	.word	0x200007d0

08002f98 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVENT_Pin ) == GPIO_PIN_SET ? true : false);
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	23a0      	movs	r3, #160	; 0xa0
 8002fa2:	05db      	lsls	r3, r3, #23
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 ffa2 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002fac:	0003      	movs	r3, r0
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	425a      	negs	r2, r3
 8002fb2:	4153      	adcs	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002fc0:	f000 fc40 	bl	8003844 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	1cbb      	adds	r3, r7, #2
 8002fd8:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002fda:	f7ff ffef 	bl	8002fbc <get_systick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	1cba      	adds	r2, r7, #2
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	419b      	sbcs	r3, r3
 8002fec:	425b      	negs	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002ffc:	23a0      	movs	r3, #160	; 0xa0
 8002ffe:	05db      	lsls	r3, r3, #23
 8003000:	2201      	movs	r2, #1
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	0018      	movs	r0, r3
 8003006:	f000 ff90 	bl	8003f2a <HAL_GPIO_WritePin>
	MX_USART1_UART_Init () ;
 800300a:	f7ff fdeb 	bl	8002be4 <MX_USART1_UART_Init>
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <my_astro_off>:
void my_astro_off ( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	05db      	lsls	r3, r3, #23
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	0018      	movs	r0, r3
 8003022:	f000 ff82 	bl	8003f2a <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8003026:	4b03      	ldr	r3, [pc, #12]	; (8003034 <my_astro_off+0x20>)
 8003028:	0018      	movs	r0, r3
 800302a:	f003 f829 	bl	8006080 <HAL_UART_DeInit>
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200007d0 	.word	0x200007d0

08003038 <my_lx6_on>:
void my_lx6_on ( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4808      	ldr	r0, [pc, #32]	; (8003064 <my_lx6_on+0x2c>)
 8003042:	2201      	movs	r2, #1
 8003044:	0019      	movs	r1, r3
 8003046:	f000 ff70 	bl	8003f2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	015b      	lsls	r3, r3, #5
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <my_lx6_on+0x2c>)
 8003050:	2201      	movs	r2, #1
 8003052:	0019      	movs	r1, r3
 8003054:	f000 ff69 	bl	8003f2a <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003058:	f7ff fe60 	bl	8002d1c <MX_USART3_UART_Init>
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	50000800 	.word	0x50000800

08003068 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4809      	ldr	r0, [pc, #36]	; (8003098 <my_lx6_off+0x30>)
 8003072:	2200      	movs	r2, #0
 8003074:	0019      	movs	r1, r3
 8003076:	f000 ff58 	bl	8003f2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	015b      	lsls	r3, r3, #5
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <my_lx6_off+0x30>)
 8003080:	2200      	movs	r2, #0
 8003082:	0019      	movs	r1, r3
 8003084:	f000 ff51 	bl	8003f2a <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <my_lx6_off+0x34>)
 800308a:	0018      	movs	r0, r3
 800308c:	f002 fff8 	bl	8006080 <HAL_UART_DeInit>
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	50000800 	.word	0x50000800
 800309c:	200008f8 	.word	0x200008f8

080030a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80030bc:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	23e1      	movs	r3, #225	; 0xe1
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d901      	bls.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 80030ca:	f000 fccc 	bl	8003a66 <HAL_NVIC_SystemReset>
		  }
	}
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40001000 	.word	0x40001000
 80030dc:	20000bf2 	.word	0x20000bf2

080030e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e4:	b672      	cpsid	i
}
 80030e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <Error_Handler+0x8>
	...

080030ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x44>)
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_MspInit+0x44>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_MspInit+0x44>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_MspInit+0x44>)
 800310c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_MspInit+0x44>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0549      	lsls	r1, r1, #21
 8003114:	430a      	orrs	r2, r1
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_MspInit+0x44>)
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	055b      	lsls	r3, r3, #21
 8003120:	4013      	ands	r3, r2
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b002      	add	sp, #8
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b097      	sub	sp, #92	; 0x5c
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	2344      	movs	r3, #68	; 0x44
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	0018      	movs	r0, r3
 8003142:	2314      	movs	r3, #20
 8003144:	001a      	movs	r2, r3
 8003146:	2100      	movs	r1, #0
 8003148:	f007 fc14 	bl	800a974 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314c:	2410      	movs	r4, #16
 800314e:	193b      	adds	r3, r7, r4
 8003150:	0018      	movs	r0, r3
 8003152:	2334      	movs	r3, #52	; 0x34
 8003154:	001a      	movs	r2, r3
 8003156:	2100      	movs	r1, #0
 8003158:	f007 fc0c 	bl	800a974 <memset>
  if(hi2c->Instance==I2C1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_I2C_MspInit+0xb8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d13d      	bne.n	80031e2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2220      	movs	r2, #32
 800316a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800316c:	193b      	adds	r3, r7, r4
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003172:	193b      	adds	r3, r7, r4
 8003174:	0018      	movs	r0, r3
 8003176:	f001 fd33 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800317e:	f7ff ffaf 	bl	80030e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 8003184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 8003188:	2102      	movs	r1, #2
 800318a:	430a      	orrs	r2, r1
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	2202      	movs	r2, #2
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 800319a:	2144      	movs	r1, #68	; 0x44
 800319c:	187b      	adds	r3, r7, r1
 800319e:	22c0      	movs	r2, #192	; 0xc0
 80031a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2212      	movs	r2, #18
 80031a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2206      	movs	r2, #6
 80031b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_I2C_MspInit+0xc0>)
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f000 fc61 	bl	8003a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 80031c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0389      	lsls	r1, r1, #14
 80031d0:	430a      	orrs	r2, r1
 80031d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_I2C_MspInit+0xbc>)
 80031d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	039b      	lsls	r3, r3, #14
 80031dc:	4013      	ands	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b017      	add	sp, #92	; 0x5c
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	40005400 	.word	0x40005400
 80031f0:	40021000 	.word	0x40021000
 80031f4:	50000400 	.word	0x50000400

080031f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b091      	sub	sp, #68	; 0x44
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003200:	240c      	movs	r4, #12
 8003202:	193b      	adds	r3, r7, r4
 8003204:	0018      	movs	r0, r3
 8003206:	2334      	movs	r3, #52	; 0x34
 8003208:	001a      	movs	r2, r3
 800320a:	2100      	movs	r1, #0
 800320c:	f007 fbb2 	bl	800a974 <memset>
  if(hrtc->Instance==RTC)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_RTC_MspInit+0x74>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d124      	bne.n	8003264 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800321a:	193b      	adds	r3, r7, r4
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	0292      	lsls	r2, r2, #10
 8003220:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003222:	193b      	adds	r3, r7, r4
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800322a:	193b      	adds	r3, r7, r4
 800322c:	0018      	movs	r0, r3
 800322e:	f001 fcd7 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003236:	f7ff ff53 	bl	80030e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RTC_MspInit+0x78>)
 800323c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_RTC_MspInit+0x78>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0209      	lsls	r1, r1, #8
 8003244:	430a      	orrs	r2, r1
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RTC_MspInit+0x78>)
 800324a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RTC_MspInit+0x78>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	00c9      	lsls	r1, r1, #3
 8003252:	430a      	orrs	r2, r1
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RTC_MspInit+0x78>)
 8003258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4013      	ands	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b011      	add	sp, #68	; 0x44
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	40002800 	.word	0x40002800
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_TIM_Base_MspInit+0x44>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_TIM_Base_MspInit+0x48>)
 8003288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_TIM_Base_MspInit+0x48>)
 800328c:	2110      	movs	r1, #16
 800328e:	430a      	orrs	r2, r1
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_TIM_Base_MspInit+0x48>)
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2210      	movs	r2, #16
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	2011      	movs	r0, #17
 80032a4:	f000 fbba 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80032a8:	2011      	movs	r0, #17
 80032aa:	f000 fbcc 	bl	8003a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40001000 	.word	0x40001000
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b09b      	sub	sp, #108	; 0x6c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	2354      	movs	r3, #84	; 0x54
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	0018      	movs	r0, r3
 80032ce:	2314      	movs	r3, #20
 80032d0:	001a      	movs	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f007 fb4e 	bl	800a974 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d8:	2420      	movs	r4, #32
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	0018      	movs	r0, r3
 80032de:	2334      	movs	r3, #52	; 0x34
 80032e0:	001a      	movs	r2, r3
 80032e2:	2100      	movs	r1, #0
 80032e4:	f007 fb46 	bl	800a974 <memset>
  if(huart->Instance==USART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a61      	ldr	r2, [pc, #388]	; (8003474 <HAL_UART_MspInit+0x1b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d140      	bne.n	8003374 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	2200      	movs	r2, #0
 80032fc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	0018      	movs	r0, r3
 8003302:	f001 fc6d 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800330a:	f7ff fee9 	bl	80030e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800330e:	4b5a      	ldr	r3, [pc, #360]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003312:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	01c9      	lsls	r1, r1, #7
 8003318:	430a      	orrs	r2, r1
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
 800331c:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800331e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	01db      	lsls	r3, r3, #7
 8003324:	4013      	ands	r3, r2
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b52      	ldr	r3, [pc, #328]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003330:	2101      	movs	r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2201      	movs	r2, #1
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8003342:	2154      	movs	r1, #84	; 0x54
 8003344:	187b      	adds	r3, r7, r1
 8003346:	22c0      	movs	r2, #192	; 0xc0
 8003348:	00d2      	lsls	r2, r2, #3
 800334a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2202      	movs	r2, #2
 8003350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2201      	movs	r2, #1
 8003362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	187a      	adds	r2, r7, r1
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	0011      	movs	r1, r2
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fb8b 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003372:	e07b      	b.n	800346c <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a40      	ldr	r2, [pc, #256]	; (800347c <HAL_UART_MspInit+0x1bc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d140      	bne.n	8003400 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800337e:	2120      	movs	r1, #32
 8003380:	187b      	adds	r3, r7, r1
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800338c:	187b      	adds	r3, r7, r1
 800338e:	0018      	movs	r0, r3
 8003390:	f001 fc26 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003398:	f7ff fea2 	bl	80030e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800339e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	0289      	lsls	r1, r1, #10
 80033a6:	430a      	orrs	r2, r1
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 80033ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	029b      	lsls	r3, r3, #10
 80033b2:	4013      	ands	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 80033ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 80033be:	2101      	movs	r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34
 80033c4:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 80033d0:	2154      	movs	r1, #84	; 0x54
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	220c      	movs	r2, #12
 80033d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	2202      	movs	r2, #2
 80033dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	2201      	movs	r2, #1
 80033e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	2201      	movs	r2, #1
 80033ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	187a      	adds	r2, r7, r1
 80033f2:	23a0      	movs	r3, #160	; 0xa0
 80033f4:	05db      	lsls	r3, r3, #23
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 fb45 	bl	8003a88 <HAL_GPIO_Init>
}
 80033fe:	e035      	b.n	800346c <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_UART_MspInit+0x1c0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d130      	bne.n	800346c <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800340c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	02c9      	lsls	r1, r1, #11
 8003414:	430a      	orrs	r2, r1
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800341a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	02db      	lsls	r3, r3, #11
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 800342c:	2104      	movs	r1, #4
 800342e:	430a      	orrs	r2, r1
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_UART_MspInit+0x1b8>)
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	2204      	movs	r2, #4
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 800343e:	2154      	movs	r1, #84	; 0x54
 8003440:	187b      	adds	r3, r7, r1
 8003442:	22c0      	movs	r2, #192	; 0xc0
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2202      	movs	r2, #2
 800344c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	187b      	adds	r3, r7, r1
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	187b      	adds	r3, r7, r1
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_UART_MspInit+0x1c4>)
 8003464:	0019      	movs	r1, r3
 8003466:	0010      	movs	r0, r2
 8003468:	f000 fb0e 	bl	8003a88 <HAL_GPIO_Init>
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b01b      	add	sp, #108	; 0x6c
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	40013800 	.word	0x40013800
 8003478:	40021000 	.word	0x40021000
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	50000800 	.word	0x50000800

08003488 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_UART_MspDeInit+0x80>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_UART_MspDeInit+0x84>)
 800349c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_UART_MspDeInit+0x84>)
 80034a0:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_UART_MspDeInit+0x88>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80034a6:	23c0      	movs	r3, #192	; 0xc0
 80034a8:	00da      	lsls	r2, r3, #3
 80034aa:	23a0      	movs	r3, #160	; 0xa0
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 fc4d 	bl	8003d50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80034b6:	e023      	b.n	8003500 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <HAL_UART_MspDeInit+0x8c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10c      	bne.n	80034dc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_UART_MspDeInit+0x84>)
 80034c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_UART_MspDeInit+0x84>)
 80034c8:	4913      	ldr	r1, [pc, #76]	; (8003518 <HAL_UART_MspDeInit+0x90>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 80034ce:	23a0      	movs	r3, #160	; 0xa0
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	210c      	movs	r1, #12
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 fc3b 	bl	8003d50 <HAL_GPIO_DeInit>
}
 80034da:	e011      	b.n	8003500 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_UART_MspDeInit+0x94>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10c      	bne.n	8003500 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_UART_MspDeInit+0x84>)
 80034e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_UART_MspDeInit+0x84>)
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <HAL_UART_MspDeInit+0x98>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 80034f2:	23c0      	movs	r3, #192	; 0xc0
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <HAL_UART_MspDeInit+0x9c>)
 80034f8:	0019      	movs	r1, r3
 80034fa:	0010      	movs	r0, r2
 80034fc:	f000 fc28 	bl	8003d50 <HAL_GPIO_DeInit>
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40013800 	.word	0x40013800
 800350c:	40021000 	.word	0x40021000
 8003510:	ffffbfff 	.word	0xffffbfff
 8003514:	40004400 	.word	0x40004400
 8003518:	fffdffff 	.word	0xfffdffff
 800351c:	40004800 	.word	0x40004800
 8003520:	fffbffff 	.word	0xfffbffff
 8003524:	50000800 	.word	0x50000800

08003528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800352c:	e7fe      	b.n	800352c <NMI_Handler+0x4>

0800352e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <HardFault_Handler+0x4>

08003534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354c:	f000 f968 	bl	8003820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800355e:	0018      	movs	r0, r3
 8003560:	f002 fae0 	bl	8005b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000784 	.word	0x20000784

08003570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  return 1;
 8003574:	2301      	movs	r3, #1
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_kill>:

int _kill(int pid, int sig)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003586:	f007 faa1 	bl	800aacc <__errno>
 800358a:	0003      	movs	r3, r0
 800358c:	2216      	movs	r2, #22
 800358e:	601a      	str	r2, [r3, #0]
  return -1;
 8003590:	2301      	movs	r3, #1
 8003592:	425b      	negs	r3, r3
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <_exit>:

void _exit (int status)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035a4:	2301      	movs	r3, #1
 80035a6:	425a      	negs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0011      	movs	r1, r2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff ffe5 	bl	800357c <_kill>
  while (1) {}    /* Make sure we hang here */
 80035b2:	e7fe      	b.n	80035b2 <_exit+0x16>

080035b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00a      	b.n	80035dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035c6:	e000      	b.n	80035ca <_read+0x16>
 80035c8:	bf00      	nop
 80035ca:	0001      	movs	r1, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	60ba      	str	r2, [r7, #8]
 80035d2:	b2ca      	uxtb	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dbf0      	blt.n	80035c6 <_read+0x12>
  }

  return len;
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b006      	add	sp, #24
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e009      	b.n	8003614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	60ba      	str	r2, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	0018      	movs	r0, r3
 800360a:	e000      	b.n	800360e <_write+0x20>
 800360c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	dbf1      	blt.n	8003600 <_write+0x12>
  }
  return len;
 800361c:	687b      	ldr	r3, [r7, #4]
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b006      	add	sp, #24
 8003624:	bd80      	pop	{r7, pc}

08003626 <_close>:

int _close(int file)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800362e:	2301      	movs	r3, #1
 8003630:	425b      	negs	r3, r3
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b002      	add	sp, #8
 8003638:	bd80      	pop	{r7, pc}

0800363a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	0192      	lsls	r2, r2, #6
 800364a:	605a      	str	r2, [r3, #4]
  return 0;
 800364c:	2300      	movs	r3, #0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}

08003656 <_isatty>:

int _isatty(int file)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800365e:	2301      	movs	r3, #1
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <_sbrk+0x5c>)
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <_sbrk+0x60>)
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <_sbrk+0x64>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <_sbrk+0x64>)
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <_sbrk+0x68>)
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <_sbrk+0x64>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d207      	bcs.n	80036c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b0:	f007 fa0c 	bl	800aacc <__errno>
 80036b4:	0003      	movs	r3, r0
 80036b6:	220c      	movs	r2, #12
 80036b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	425b      	negs	r3, r3
 80036be:	e009      	b.n	80036d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <_sbrk+0x64>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	18d2      	adds	r2, r2, r3
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <_sbrk+0x64>)
 80036d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036d2:	68fb      	ldr	r3, [r7, #12]
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b006      	add	sp, #24
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20009000 	.word	0x20009000
 80036e0:	00000400 	.word	0x00000400
 80036e4:	20000d58 	.word	0x20000d58
 80036e8:	20001070 	.word	0x20001070

080036ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036f8:	480d      	ldr	r0, [pc, #52]	; (8003730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036fc:	f7ff fff6 	bl	80036ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <LoopForever+0x6>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	; (8003738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <LoopForever+0xe>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <LoopForever+0x16>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003726:	f007 f9d7 	bl	800aad8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800372a:	f7fe ff3d 	bl	80025a8 <main>

0800372e <LoopForever>:

LoopForever:
  b LoopForever
 800372e:	e7fe      	b.n	800372e <LoopForever>
  ldr   r0, =_estack
 8003730:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 800373c:	08013200 	.word	0x08013200
  ldr r2, =_sbss
 8003740:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 8003744:	20001070 	.word	0x20001070

08003748 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC1_COMP_IRQHandler>
	...

0800374c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_Init+0x3c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_Init+0x3c>)
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	0049      	lsls	r1, r1, #1
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003766:	2000      	movs	r0, #0
 8003768:	f000 f810 	bl	800378c <HAL_InitTick>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d003      	beq.n	8003778 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003770:	1dfb      	adds	r3, r7, #7
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e001      	b.n	800377c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003778:	f7ff fcb8 	bl	80030ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40022000 	.word	0x40022000

0800378c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003794:	230f      	movs	r3, #15
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_InitTick+0x88>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02b      	beq.n	80037fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_InitTick+0x8c>)
 80037a6:	681c      	ldr	r4, [r3, #0]
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_InitTick+0x88>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	0019      	movs	r1, r3
 80037ae:	23fa      	movs	r3, #250	; 0xfa
 80037b0:	0098      	lsls	r0, r3, #2
 80037b2:	f7fc fcc3 	bl	800013c <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	0019      	movs	r1, r3
 80037ba:	0020      	movs	r0, r4
 80037bc:	f7fc fcbe 	bl	800013c <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f953 	bl	8003a6e <HAL_SYSTICK_Config>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d112      	bne.n	80037f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d80a      	bhi.n	80037e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f91e 	bl	8003a1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_InitTick+0x90>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00d      	b.n	8003804 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80037e8:	230f      	movs	r3, #15
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e008      	b.n	8003804 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037f2:	230f      	movs	r3, #15
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e003      	b.n	8003804 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037fc:	230f      	movs	r3, #15
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b005      	add	sp, #20
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000030 	.word	0x20000030
 8003818:	20000028 	.word	0x20000028
 800381c:	2000002c 	.word	0x2000002c

08003820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_IncTick+0x1c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_IncTick+0x20>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	18d2      	adds	r2, r2, r3
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_IncTick+0x20>)
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	20000030 	.word	0x20000030
 8003840:	20000d5c 	.word	0x20000d5c

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <HAL_GetTick+0x10>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	20000d5c 	.word	0x20000d5c

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff fff0 	bl	8003844 <HAL_GetTick>
 8003864:	0003      	movs	r3, r0
 8003866:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_Delay+0x44>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	001a      	movs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	189b      	adds	r3, r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	f7ff ffe0 	bl	8003844 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000030 	.word	0x20000030

080038a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	0002      	movs	r2, r0
 80038a8:	1dfb      	adds	r3, r7, #7
 80038aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b7f      	cmp	r3, #127	; 0x7f
 80038b2:	d809      	bhi.n	80038c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	001a      	movs	r2, r3
 80038ba:	231f      	movs	r3, #31
 80038bc:	401a      	ands	r2, r3
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <__NVIC_EnableIRQ+0x30>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	4091      	lsls	r1, r2
 80038c4:	000a      	movs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	0002      	movs	r2, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b7f      	cmp	r3, #127	; 0x7f
 80038e8:	d828      	bhi.n	800393c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ea:	4a2f      	ldr	r2, [pc, #188]	; (80039a8 <__NVIC_SetPriority+0xd4>)
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	33c0      	adds	r3, #192	; 0xc0
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	589b      	ldr	r3, [r3, r2]
 80038fa:	1dfa      	adds	r2, r7, #7
 80038fc:	7812      	ldrb	r2, [r2, #0]
 80038fe:	0011      	movs	r1, r2
 8003900:	2203      	movs	r2, #3
 8003902:	400a      	ands	r2, r1
 8003904:	00d2      	lsls	r2, r2, #3
 8003906:	21ff      	movs	r1, #255	; 0xff
 8003908:	4091      	lsls	r1, r2
 800390a:	000a      	movs	r2, r1
 800390c:	43d2      	mvns	r2, r2
 800390e:	401a      	ands	r2, r3
 8003910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	401a      	ands	r2, r3
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	0018      	movs	r0, r3
 8003920:	2303      	movs	r3, #3
 8003922:	4003      	ands	r3, r0
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003928:	481f      	ldr	r0, [pc, #124]	; (80039a8 <__NVIC_SetPriority+0xd4>)
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	430a      	orrs	r2, r1
 8003934:	33c0      	adds	r3, #192	; 0xc0
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800393a:	e031      	b.n	80039a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <__NVIC_SetPriority+0xd8>)
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	0019      	movs	r1, r3
 8003944:	230f      	movs	r3, #15
 8003946:	400b      	ands	r3, r1
 8003948:	3b08      	subs	r3, #8
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3306      	adds	r3, #6
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	3304      	adds	r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1dfa      	adds	r2, r7, #7
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	0011      	movs	r1, r2
 800395c:	2203      	movs	r2, #3
 800395e:	400a      	ands	r2, r1
 8003960:	00d2      	lsls	r2, r2, #3
 8003962:	21ff      	movs	r1, #255	; 0xff
 8003964:	4091      	lsls	r1, r2
 8003966:	000a      	movs	r2, r1
 8003968:	43d2      	mvns	r2, r2
 800396a:	401a      	ands	r2, r3
 800396c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	401a      	ands	r2, r3
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	2303      	movs	r3, #3
 800397e:	4003      	ands	r3, r0
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003984:	4809      	ldr	r0, [pc, #36]	; (80039ac <__NVIC_SetPriority+0xd8>)
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	001c      	movs	r4, r3
 800398c:	230f      	movs	r3, #15
 800398e:	4023      	ands	r3, r4
 8003990:	3b08      	subs	r3, #8
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	430a      	orrs	r2, r1
 8003996:	3306      	adds	r3, #6
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	18c3      	adds	r3, r0, r3
 800399c:	3304      	adds	r3, #4
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b003      	add	sp, #12
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039b4:	f3bf 8f4f 	dsb	sy
}
 80039b8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <__NVIC_SystemReset+0x1c>)
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <__NVIC_SystemReset+0x20>)
 80039be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80039c0:	f3bf 8f4f 	dsb	sy
}
 80039c4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	e7fd      	b.n	80039c6 <__NVIC_SystemReset+0x16>
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	e000ed00 	.word	0xe000ed00
 80039d0:	05fa0004 	.word	0x05fa0004

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	045b      	lsls	r3, r3, #17
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d301      	bcc.n	80039ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e8:	2301      	movs	r3, #1
 80039ea:	e010      	b.n	8003a0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <SysTick_Config+0x44>)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	3a01      	subs	r2, #1
 80039f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f4:	2301      	movs	r3, #1
 80039f6:	425b      	negs	r3, r3
 80039f8:	2103      	movs	r1, #3
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ff6a 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Config+0x44>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <SysTick_Config+0x44>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b002      	add	sp, #8
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	210f      	movs	r1, #15
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	1c02      	adds	r2, r0, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	0011      	movs	r1, r2
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff ff4b 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7ff ff21 	bl	80038a0 <__NVIC_EnableIRQ>
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003a6a:	f7ff ffa1 	bl	80039b0 <__NVIC_SystemReset>

08003a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff ffab 	bl	80039d4 <SysTick_Config>
 8003a7e:	0003      	movs	r3, r0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	e147      	b.n	8003d28 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4091      	lsls	r1, r2
 8003aa2:	000a      	movs	r2, r1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d100      	bne.n	8003ab0 <HAL_GPIO_Init+0x28>
 8003aae:	e138      	b.n	8003d22 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d005      	beq.n	8003ac8 <HAL_GPIO_Init+0x40>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d130      	bne.n	8003b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	0013      	movs	r3, r2
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	43da      	mvns	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	2201      	movs	r2, #1
 8003b16:	401a      	ands	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d017      	beq.n	8003b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	43da      	mvns	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d123      	bne.n	8003bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	58d3      	ldr	r3, [r2, r3]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2107      	movs	r1, #7
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	0092      	lsls	r2, r2, #2
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	401a      	ands	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	029b      	lsls	r3, r3, #10
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x174>
 8003bfa:	e092      	b.n	8003d22 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003bfc:	4a50      	ldr	r2, [pc, #320]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3318      	adds	r3, #24
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	589b      	ldr	r3, [r3, r2]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	220f      	movs	r2, #15
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	23a0      	movs	r3, #160	; 0xa0
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x1ca>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a45      	ldr	r2, [pc, #276]	; (8003d44 <HAL_GPIO_Init+0x2bc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x1c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a44      	ldr	r2, [pc, #272]	; (8003d48 <HAL_GPIO_Init+0x2c0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x1c2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a43      	ldr	r2, [pc, #268]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x1be>
 8003c42:	2303      	movs	r3, #3
 8003c44:	e006      	b.n	8003c54 <HAL_GPIO_Init+0x1cc>
 8003c46:	2305      	movs	r3, #5
 8003c48:	e004      	b.n	8003c54 <HAL_GPIO_Init+0x1cc>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e002      	b.n	8003c54 <HAL_GPIO_Init+0x1cc>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_GPIO_Init+0x1cc>
 8003c52:	2300      	movs	r3, #0
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	2103      	movs	r1, #3
 8003c58:	400a      	ands	r2, r1
 8003c5a:	00d2      	lsls	r2, r2, #3
 8003c5c:	4093      	lsls	r3, r2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003c64:	4936      	ldr	r1, [pc, #216]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	035b      	lsls	r3, r3, #13
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c9c:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	039b      	lsls	r3, r3, #14
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003cc8:	2384      	movs	r3, #132	; 0x84
 8003cca:	58d3      	ldr	r3, [r2, r3]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cec:	4914      	ldr	r1, [pc, #80]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003cee:	2284      	movs	r2, #132	; 0x84
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	58d3      	ldr	r3, [r2, r3]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	025b      	lsls	r3, r3, #9
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d1a:	4909      	ldr	r1, [pc, #36]	; (8003d40 <HAL_GPIO_Init+0x2b8>)
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	40da      	lsrs	r2, r3
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	d000      	beq.n	8003d36 <HAL_GPIO_Init+0x2ae>
 8003d34:	e6b0      	b.n	8003a98 <HAL_GPIO_Init+0x10>
  }
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b006      	add	sp, #24
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021800 	.word	0x40021800
 8003d44:	50000400 	.word	0x50000400
 8003d48:	50000800 	.word	0x50000800
 8003d4c:	50000c00 	.word	0x50000c00

08003d50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d5e:	e0b4      	b.n	8003eca <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d60:	2201      	movs	r2, #1
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	409a      	lsls	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d100      	bne.n	8003d74 <HAL_GPIO_DeInit+0x24>
 8003d72:	e0a7      	b.n	8003ec4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003d74:	4a5a      	ldr	r2, [pc, #360]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	589b      	ldr	r3, [r3, r2]
 8003d80:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2203      	movs	r2, #3
 8003d86:	4013      	ands	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	23a0      	movs	r3, #160	; 0xa0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_DeInit+0x76>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a50      	ldr	r2, [pc, #320]	; (8003ee4 <HAL_GPIO_DeInit+0x194>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <HAL_GPIO_DeInit+0x72>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4f      	ldr	r2, [pc, #316]	; (8003ee8 <HAL_GPIO_DeInit+0x198>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_DeInit+0x6e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <HAL_GPIO_DeInit+0x19c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_GPIO_DeInit+0x6a>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_DeInit+0x78>
 8003dba:	2305      	movs	r3, #5
 8003dbc:	e004      	b.n	8003dc8 <HAL_GPIO_DeInit+0x78>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e002      	b.n	8003dc8 <HAL_GPIO_DeInit+0x78>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_DeInit+0x78>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	2103      	movs	r1, #3
 8003dcc:	400a      	ands	r2, r1
 8003dce:	00d2      	lsls	r2, r2, #3
 8003dd0:	4093      	lsls	r3, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d136      	bne.n	8003e46 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003dd8:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	58d3      	ldr	r3, [r2, r3]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	43d2      	mvns	r2, r2
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003dea:	4a3d      	ldr	r2, [pc, #244]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003dec:	2384      	movs	r3, #132	; 0x84
 8003dee:	58d3      	ldr	r3, [r2, r3]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	43d2      	mvns	r2, r2
 8003df4:	493a      	ldr	r1, [pc, #232]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	2284      	movs	r2, #132	; 0x84
 8003dfa:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003dfc:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e0a:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43d9      	mvns	r1, r3
 8003e12:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	220f      	movs	r2, #15
 8003e22:	409a      	lsls	r2, r3
 8003e24:	0013      	movs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e28:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3318      	adds	r3, #24
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	589a      	ldr	r2, [r3, r2]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	4829      	ldr	r0, [pc, #164]	; (8003ee0 <HAL_GPIO_DeInit+0x190>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	400a      	ands	r2, r1
 8003e40:	3318      	adds	r3, #24
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2103      	movs	r1, #3
 8003e50:	4099      	lsls	r1, r3
 8003e52:	000b      	movs	r3, r1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	58d3      	ldr	r3, [r2, r3]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	2107      	movs	r1, #7
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	210f      	movs	r1, #15
 8003e70:	4091      	lsls	r1, r2
 8003e72:	000a      	movs	r2, r1
 8003e74:	43d1      	mvns	r1, r2
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	08d2      	lsrs	r2, r2, #3
 8003e7a:	4019      	ands	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	4091      	lsls	r1, r2
 8003e90:	000a      	movs	r2, r1
 8003e92:	43d2      	mvns	r2, r2
 8003e94:	401a      	ands	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4091      	lsls	r1, r2
 8003ea4:	000a      	movs	r2, r1
 8003ea6:	43d2      	mvns	r2, r2
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	0052      	lsls	r2, r2, #1
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	4091      	lsls	r1, r2
 8003eba:	000a      	movs	r2, r1
 8003ebc:	43d2      	mvns	r2, r2
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	40da      	lsrs	r2, r3
 8003ed0:	1e13      	subs	r3, r2, #0
 8003ed2:	d000      	beq.n	8003ed6 <HAL_GPIO_DeInit+0x186>
 8003ed4:	e744      	b.n	8003d60 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021800 	.word	0x40021800
 8003ee4:	50000400 	.word	0x50000400
 8003ee8:	50000800 	.word	0x50000800
 8003eec:	50000c00 	.word	0x50000c00

08003ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	000a      	movs	r2, r1
 8003efa:	1cbb      	adds	r3, r7, #2
 8003efc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	1cba      	adds	r2, r7, #2
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	4013      	ands	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e003      	b.n	8003f1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f14:	230f      	movs	r3, #15
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	0008      	movs	r0, r1
 8003f34:	0011      	movs	r1, r2
 8003f36:	1cbb      	adds	r3, r7, #2
 8003f38:	1c02      	adds	r2, r0, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	1c7b      	adds	r3, r7, #1
 8003f3e:	1c0a      	adds	r2, r1, #0
 8003f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f42:	1c7b      	adds	r3, r7, #1
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4a:	1cbb      	adds	r3, r7, #2
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f52:	e003      	b.n	8003f5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f54:	1cbb      	adds	r3, r7, #2
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e082      	b.n	800407c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2241      	movs	r2, #65	; 0x41
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7ff f8d1 	bl	8003134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2241      	movs	r2, #65	; 0x41
 8003f96:	2124      	movs	r1, #36	; 0x24
 8003f98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4934      	ldr	r1, [pc, #208]	; (8004084 <HAL_I2C_Init+0x120>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4931      	ldr	r1, [pc, #196]	; (8004088 <HAL_I2C_Init+0x124>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d108      	bne.n	8003fe2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	0209      	lsls	r1, r1, #8
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e007      	b.n	8003ff2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2184      	movs	r1, #132	; 0x84
 8003fec:	0209      	lsls	r1, r1, #8
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d104      	bne.n	8004004 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	491f      	ldr	r1, [pc, #124]	; (800408c <HAL_I2C_Init+0x128>)
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	491a      	ldr	r1, [pc, #104]	; (8004088 <HAL_I2C_Init+0x124>)
 8004020:	400a      	ands	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	431a      	orrs	r2, r3
 800402e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69d9      	ldr	r1, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2241      	movs	r2, #65	; 0x41
 8004068:	2120      	movs	r1, #32
 800406a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2242      	movs	r2, #66	; 0x42
 8004076:	2100      	movs	r1, #0
 8004078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f0ffffff 	.word	0xf0ffffff
 8004088:	ffff7fff 	.word	0xffff7fff
 800408c:	02008000 	.word	0x02008000

08004090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2241      	movs	r2, #65	; 0x41
 800409e:	5c9b      	ldrb	r3, [r3, r2]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d138      	bne.n	8004118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e032      	b.n	800411a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2124      	movs	r1, #36	; 0x24
 80040c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	438a      	bics	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4911      	ldr	r1, [pc, #68]	; (8004124 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2241      	movs	r2, #65	; 0x41
 8004108:	2120      	movs	r1, #32
 800410a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b002      	add	sp, #8
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	ffffefff 	.word	0xffffefff

08004128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2241      	movs	r2, #65	; 0x41
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d139      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	5c9b      	ldrb	r3, [r3, r2]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004148:	2302      	movs	r3, #2
 800414a:	e033      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	2101      	movs	r1, #1
 8004152:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2241      	movs	r2, #65	; 0x41
 8004158:	2124      	movs	r1, #36	; 0x24
 800415a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2241      	movs	r2, #65	; 0x41
 80041a2:	2120      	movs	r1, #32
 80041a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2240      	movs	r2, #64	; 0x40
 80041aa:	2100      	movs	r1, #0
 80041ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	fffff0ff 	.word	0xfffff0ff

080041c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d11f      	bne.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	0013      	movs	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4912      	ldr	r1, [pc, #72]	; (800423c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7fb ffa2 	bl	800013c <__udivsi3>
 80041f8:	0003      	movs	r3, r0
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041fe:	e008      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b01      	subs	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e001      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e009      	b.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	401a      	ands	r2, r3
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	429a      	cmp	r2, r3
 8004222:	d0ed      	beq.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b004      	add	sp, #16
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	40007000 	.word	0x40007000
 8004234:	fffff9ff 	.word	0xfffff9ff
 8004238:	20000028 	.word	0x20000028
 800423c:	000f4240 	.word	0x000f4240

08004240 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	23e0      	movs	r3, #224	; 0xe0
 800424a:	01db      	lsls	r3, r3, #7
 800424c:	4013      	ands	r3, r2
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e2fe      	b.n	8004868 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	4013      	ands	r3, r2
 8004272:	d100      	bne.n	8004276 <HAL_RCC_OscConfig+0x1e>
 8004274:	e07c      	b.n	8004370 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004276:	4bc3      	ldr	r3, [pc, #780]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2238      	movs	r2, #56	; 0x38
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004280:	4bc0      	ldr	r3, [pc, #768]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2203      	movs	r2, #3
 8004286:	4013      	ands	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b10      	cmp	r3, #16
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0x3e>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d002      	beq.n	800429c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d10b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4bb9      	ldr	r3, [pc, #740]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	4013      	ands	r3, r2
 80042a6:	d062      	beq.n	800436e <HAL_RCC_OscConfig+0x116>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d15e      	bne.n	800436e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e2d9      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	025b      	lsls	r3, r3, #9
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x78>
 80042c0:	4bb0      	ldr	r3, [pc, #704]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4baf      	ldr	r3, [pc, #700]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	0249      	lsls	r1, r1, #9
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e020      	b.n	8004312 <HAL_RCC_OscConfig+0xba>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	23a0      	movs	r3, #160	; 0xa0
 80042d6:	02db      	lsls	r3, r3, #11
 80042d8:	429a      	cmp	r2, r3
 80042da:	d10e      	bne.n	80042fa <HAL_RCC_OscConfig+0xa2>
 80042dc:	4ba9      	ldr	r3, [pc, #676]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4ba8      	ldr	r3, [pc, #672]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	02c9      	lsls	r1, r1, #11
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	4ba6      	ldr	r3, [pc, #664]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4ba5      	ldr	r3, [pc, #660]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042f0:	2180      	movs	r1, #128	; 0x80
 80042f2:	0249      	lsls	r1, r1, #9
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e00b      	b.n	8004312 <HAL_RCC_OscConfig+0xba>
 80042fa:	4ba2      	ldr	r3, [pc, #648]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4ba1      	ldr	r3, [pc, #644]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004300:	49a1      	ldr	r1, [pc, #644]	; (8004588 <HAL_RCC_OscConfig+0x330>)
 8004302:	400a      	ands	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	4b9f      	ldr	r3, [pc, #636]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b9e      	ldr	r3, [pc, #632]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800430c:	499f      	ldr	r1, [pc, #636]	; (800458c <HAL_RCC_OscConfig+0x334>)
 800430e:	400a      	ands	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d014      	beq.n	8004344 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7ff fa93 	bl	8003844 <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7ff fa8e 	bl	8003844 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e298      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004336:	4b93      	ldr	r3, [pc, #588]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	4013      	ands	r3, r2
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xcc>
 8004342:	e015      	b.n	8004370 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7ff fa7e 	bl	8003844 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434e:	f7ff fa79 	bl	8003844 <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b64      	cmp	r3, #100	; 0x64
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e283      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004360:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	4013      	ands	r3, r2
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0xf6>
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2202      	movs	r2, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d100      	bne.n	800437c <HAL_RCC_OscConfig+0x124>
 800437a:	e099      	b.n	80044b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2238      	movs	r2, #56	; 0x38
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004386:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2203      	movs	r2, #3
 800438c:	4013      	ands	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b10      	cmp	r3, #16
 8004394:	d102      	bne.n	800439c <HAL_RCC_OscConfig+0x144>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d002      	beq.n	80043a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d135      	bne.n	800440e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a2:	4b78      	ldr	r3, [pc, #480]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4013      	ands	r3, r2
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x162>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e256      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b72      	ldr	r3, [pc, #456]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4a74      	ldr	r2, [pc, #464]	; (8004590 <HAL_RCC_OscConfig+0x338>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d112      	bne.n	80043fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043d6:	4b6b      	ldr	r3, [pc, #428]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6e      	ldr	r2, [pc, #440]	; (8004594 <HAL_RCC_OscConfig+0x33c>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043ea:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	2207      	movs	r2, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x340>)
 80043f6:	40da      	lsrs	r2, r3
 80043f8:	4b68      	ldr	r3, [pc, #416]	; (800459c <HAL_RCC_OscConfig+0x344>)
 80043fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043fc:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <HAL_RCC_OscConfig+0x348>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff f9c3 	bl	800378c <HAL_InitTick>
 8004406:	1e03      	subs	r3, r0, #0
 8004408:	d051      	beq.n	80044ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e22c      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d030      	beq.n	8004478 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <HAL_RCC_OscConfig+0x33c>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	4b57      	ldr	r3, [pc, #348]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800442a:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b55      	ldr	r3, [pc, #340]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0049      	lsls	r1, r1, #1
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7ff fa04 	bl	8003844 <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7ff f9ff 	bl	8003844 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e209      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4013      	ands	r3, r2
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b48      	ldr	r3, [pc, #288]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <HAL_RCC_OscConfig+0x338>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	4b44      	ldr	r3, [pc, #272]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e01b      	b.n	80044b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800447e:	4949      	ldr	r1, [pc, #292]	; (80045a4 <HAL_RCC_OscConfig+0x34c>)
 8004480:	400a      	ands	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7ff f9de 	bl	8003844 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448e:	f7ff f9d9 	bl	8003844 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e1e3      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4013      	ands	r3, r2
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x236>
 80044ac:	e000      	b.n	80044b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4013      	ands	r3, r2
 80044b8:	d047      	beq.n	800454a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044ba:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2238      	movs	r2, #56	; 0x38
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	d10a      	bne.n	80044dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	2202      	movs	r2, #2
 80044cc:	4013      	ands	r3, r2
 80044ce:	d03c      	beq.n	800454a <HAL_RCC_OscConfig+0x2f2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d138      	bne.n	800454a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e1c5      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80044e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e8:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	430a      	orrs	r2, r1
 80044ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7ff f9a8 	bl	8003844 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fa:	f7ff f9a3 	bl	8003844 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1ad      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d0f1      	beq.n	80044fa <HAL_RCC_OscConfig+0x2a2>
 8004516:	e018      	b.n	800454a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800451a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800451e:	2101      	movs	r1, #1
 8004520:	438a      	bics	r2, r1
 8004522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7ff f98e 	bl	8003844 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452e:	f7ff f989 	bl	8003844 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e193      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	2202      	movs	r2, #2
 8004546:	4013      	ands	r3, r2
 8004548:	d1f1      	bne.n	800452e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2204      	movs	r2, #4
 8004550:	4013      	ands	r3, r2
 8004552:	d100      	bne.n	8004556 <HAL_RCC_OscConfig+0x2fe>
 8004554:	e0c6      	b.n	80046e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	231f      	movs	r3, #31
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2238      	movs	r2, #56	; 0x38
 8004564:	4013      	ands	r3, r2
 8004566:	2b20      	cmp	r3, #32
 8004568:	d11e      	bne.n	80045a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x32c>)
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	2202      	movs	r2, #2
 8004570:	4013      	ands	r3, r2
 8004572:	d100      	bne.n	8004576 <HAL_RCC_OscConfig+0x31e>
 8004574:	e0b6      	b.n	80046e4 <HAL_RCC_OscConfig+0x48c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d000      	beq.n	8004580 <HAL_RCC_OscConfig+0x328>
 800457e:	e0b1      	b.n	80046e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e171      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
 8004584:	40021000 	.word	0x40021000
 8004588:	fffeffff 	.word	0xfffeffff
 800458c:	fffbffff 	.word	0xfffbffff
 8004590:	ffff80ff 	.word	0xffff80ff
 8004594:	ffffc7ff 	.word	0xffffc7ff
 8004598:	00f42400 	.word	0x00f42400
 800459c:	20000028 	.word	0x20000028
 80045a0:	2000002c 	.word	0x2000002c
 80045a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045a8:	4bb1      	ldr	r3, [pc, #708]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80045aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	055b      	lsls	r3, r3, #21
 80045b0:	4013      	ands	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_OscConfig+0x360>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x362>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	4bac      	ldr	r3, [pc, #688]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80045c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c2:	4bab      	ldr	r3, [pc, #684]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	0549      	lsls	r1, r1, #21
 80045c8:	430a      	orrs	r2, r1
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80045cc:	4ba8      	ldr	r3, [pc, #672]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80045ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	055b      	lsls	r3, r3, #21
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80045da:	231f      	movs	r3, #31
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e2:	4ba4      	ldr	r3, [pc, #656]	; (8004874 <HAL_RCC_OscConfig+0x61c>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	d11a      	bne.n	8004624 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ee:	4ba1      	ldr	r3, [pc, #644]	; (8004874 <HAL_RCC_OscConfig+0x61c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4ba0      	ldr	r3, [pc, #640]	; (8004874 <HAL_RCC_OscConfig+0x61c>)
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	0049      	lsls	r1, r1, #1
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045fc:	f7ff f922 	bl	8003844 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004606:	f7ff f91d 	bl	8003844 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e127      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004618:	4b96      	ldr	r3, [pc, #600]	; (8004874 <HAL_RCC_OscConfig+0x61c>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x3e2>
 800462c:	4b90      	ldr	r3, [pc, #576]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800462e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004630:	4b8f      	ldr	r3, [pc, #572]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004632:	2101      	movs	r1, #1
 8004634:	430a      	orrs	r2, r1
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c
 8004638:	e01c      	b.n	8004674 <HAL_RCC_OscConfig+0x41c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x404>
 8004642:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004646:	4b8a      	ldr	r3, [pc, #552]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004648:	2104      	movs	r1, #4
 800464a:	430a      	orrs	r2, r1
 800464c:	65da      	str	r2, [r3, #92]	; 0x5c
 800464e:	4b88      	ldr	r3, [pc, #544]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004652:	4b87      	ldr	r3, [pc, #540]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004654:	2101      	movs	r1, #1
 8004656:	430a      	orrs	r2, r1
 8004658:	65da      	str	r2, [r3, #92]	; 0x5c
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0x41c>
 800465c:	4b84      	ldr	r3, [pc, #528]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800465e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004660:	4b83      	ldr	r3, [pc, #524]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c
 8004668:	4b81      	ldr	r3, [pc, #516]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800466a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800466c:	4b80      	ldr	r3, [pc, #512]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800466e:	2104      	movs	r1, #4
 8004670:	438a      	bics	r2, r1
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d014      	beq.n	80046a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7ff f8e2 	bl	8003844 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004684:	e009      	b.n	800469a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7ff f8dd 	bl	8003844 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a79      	ldr	r2, [pc, #484]	; (8004878 <HAL_RCC_OscConfig+0x620>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0e6      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469a:	4b75      	ldr	r3, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	2202      	movs	r2, #2
 80046a0:	4013      	ands	r3, r2
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x42e>
 80046a4:	e013      	b.n	80046ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7ff f8cd 	bl	8003844 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ae:	e009      	b.n	80046c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7ff f8c8 	bl	8003844 <HAL_GetTick>
 80046b4:	0002      	movs	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	4a6f      	ldr	r2, [pc, #444]	; (8004878 <HAL_RCC_OscConfig+0x620>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0d1      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	2202      	movs	r2, #2
 80046ca:	4013      	ands	r3, r2
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046ce:	231f      	movs	r3, #31
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	4b64      	ldr	r3, [pc, #400]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80046de:	4967      	ldr	r1, [pc, #412]	; (800487c <HAL_RCC_OscConfig+0x624>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d100      	bne.n	80046ee <HAL_RCC_OscConfig+0x496>
 80046ec:	e0bb      	b.n	8004866 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ee:	4b60      	ldr	r3, [pc, #384]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2238      	movs	r2, #56	; 0x38
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d100      	bne.n	80046fc <HAL_RCC_OscConfig+0x4a4>
 80046fa:	e07b      	b.n	80047f4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d156      	bne.n	80047b2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800470a:	495d      	ldr	r1, [pc, #372]	; (8004880 <HAL_RCC_OscConfig+0x628>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7ff f898 	bl	8003844 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7ff f893 	bl	8003844 <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e09d      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472c:	4b50      	ldr	r3, [pc, #320]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	049b      	lsls	r3, r3, #18
 8004734:	4013      	ands	r3, r2
 8004736:	d1f0      	bne.n	800471a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004738:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a51      	ldr	r2, [pc, #324]	; (8004884 <HAL_RCC_OscConfig+0x62c>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	431a      	orrs	r2, r3
 8004766:	4b42      	ldr	r3, [pc, #264]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	0449      	lsls	r1, r1, #17
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	4b3c      	ldr	r3, [pc, #240]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	0549      	lsls	r1, r1, #21
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7ff f85c 	bl	8003844 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7ff f857 	bl	8003844 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e061      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	049b      	lsls	r3, r3, #18
 80047ac:	4013      	ands	r3, r2
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x53a>
 80047b0:	e059      	b.n	8004866 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047b8:	4931      	ldr	r1, [pc, #196]	; (8004880 <HAL_RCC_OscConfig+0x628>)
 80047ba:	400a      	ands	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7ff f841 	bl	8003844 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7ff f83c 	bl	8003844 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e046      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	049b      	lsls	r3, r3, #18
 80047e2:	4013      	ands	r3, r2
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	4b21      	ldr	r3, [pc, #132]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 80047ec:	4926      	ldr	r1, [pc, #152]	; (8004888 <HAL_RCC_OscConfig+0x630>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e038      	b.n	8004866 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e033      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x618>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2203      	movs	r2, #3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	429a      	cmp	r2, r3
 8004812:	d126      	bne.n	8004862 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2270      	movs	r2, #112	; 0x70
 8004818:	401a      	ands	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d11f      	bne.n	8004862 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	23fe      	movs	r3, #254	; 0xfe
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d116      	bne.n	8004862 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	23f8      	movs	r3, #248	; 0xf8
 8004838:	039b      	lsls	r3, r3, #14
 800483a:	401a      	ands	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d10e      	bne.n	8004862 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	23e0      	movs	r3, #224	; 0xe0
 8004848:	051b      	lsls	r3, r3, #20
 800484a:	401a      	ands	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	0f5b      	lsrs	r3, r3, #29
 8004858:	075a      	lsls	r2, r3, #29
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b008      	add	sp, #32
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
 8004878:	00001388 	.word	0x00001388
 800487c:	efffffff 	.word	0xefffffff
 8004880:	feffffff 	.word	0xfeffffff
 8004884:	11c1808c 	.word	0x11c1808c
 8004888:	eefefffc 	.word	0xeefefffc

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0e9      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2207      	movs	r2, #7
 80048a6:	4013      	ands	r3, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d91e      	bls.n	80048ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2207      	movs	r2, #7
 80048b4:	4393      	bics	r3, r2
 80048b6:	0019      	movs	r1, r3
 80048b8:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048c0:	f7fe ffc0 	bl	8003844 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048c8:	e009      	b.n	80048de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ca:	f7fe ffbb 	bl	8003844 <HAL_GetTick>
 80048ce:	0002      	movs	r2, r0
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <HAL_RCC_ClockConfig+0x1f4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e0ca      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2207      	movs	r2, #7
 80048e4:	4013      	ands	r3, r2
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1ee      	bne.n	80048ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2202      	movs	r2, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d015      	beq.n	8004922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2204      	movs	r2, #4
 80048fc:	4013      	ands	r3, r2
 80048fe:	d006      	beq.n	800490e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004900:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	4b5f      	ldr	r3, [pc, #380]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	21e0      	movs	r1, #224	; 0xe0
 8004908:	01c9      	lsls	r1, r1, #7
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490e:	4b5d      	ldr	r3, [pc, #372]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <HAL_RCC_ClockConfig+0x1fc>)
 8004914:	4013      	ands	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	4b59      	ldr	r3, [pc, #356]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	4013      	ands	r3, r2
 800492a:	d057      	beq.n	80049dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004934:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	4013      	ands	r3, r2
 800493e:	d12b      	bne.n	8004998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e097      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d107      	bne.n	800495c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	049b      	lsls	r3, r3, #18
 8004954:	4013      	ands	r3, r2
 8004956:	d11f      	bne.n	8004998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e08b      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004964:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4013      	ands	r3, r2
 800496e:	d113      	bne.n	8004998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e07f      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d106      	bne.n	800498a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800497c:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 800497e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004980:	2202      	movs	r2, #2
 8004982:	4013      	ands	r3, r2
 8004984:	d108      	bne.n	8004998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e074      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2202      	movs	r2, #2
 8004990:	4013      	ands	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e06d      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004998:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2207      	movs	r2, #7
 800499e:	4393      	bics	r3, r2
 80049a0:	0019      	movs	r1, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fe ff4a 	bl	8003844 <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b4:	e009      	b.n	80049ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b6:	f7fe ff45 	bl	8003844 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <HAL_RCC_ClockConfig+0x1f4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e054      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2238      	movs	r2, #56	; 0x38
 80049d0:	401a      	ands	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ec      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2207      	movs	r2, #7
 80049e2:	4013      	ands	r3, r2
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d21e      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2207      	movs	r2, #7
 80049f0:	4393      	bics	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049fc:	f7fe ff22 	bl	8003844 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a04:	e009      	b.n	8004a1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a06:	f7fe ff1d 	bl	8003844 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_RCC_ClockConfig+0x1f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e02c      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2207      	movs	r2, #7
 8004a20:	4013      	ands	r3, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1ee      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <HAL_RCC_ClockConfig+0x200>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a46:	f000 f829 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004a4a:	0001      	movs	r1, r0
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	220f      	movs	r2, #15
 8004a54:	401a      	ands	r2, r3
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_RCC_ClockConfig+0x204>)
 8004a58:	0092      	lsls	r2, r2, #2
 8004a5a:	58d3      	ldr	r3, [r2, r3]
 8004a5c:	221f      	movs	r2, #31
 8004a5e:	4013      	ands	r3, r2
 8004a60:	000a      	movs	r2, r1
 8004a62:	40da      	lsrs	r2, r3
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_ClockConfig+0x208>)
 8004a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x20c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe fe8d 	bl	800378c <HAL_InitTick>
 8004a72:	0003      	movs	r3, r0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40022000 	.word	0x40022000
 8004a80:	00001388 	.word	0x00001388
 8004a84:	40021000 	.word	0x40021000
 8004a88:	fffff0ff 	.word	0xfffff0ff
 8004a8c:	ffff8fff 	.word	0xffff8fff
 8004a90:	08012ce8 	.word	0x08012ce8
 8004a94:	20000028 	.word	0x20000028
 8004a98:	2000002c 	.word	0x2000002c

08004a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aa2:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2238      	movs	r2, #56	; 0x38
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d10f      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004aac:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0adb      	lsrs	r3, r3, #11
 8004ab2:	2207      	movs	r2, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	0013      	movs	r3, r2
 8004abc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	4835      	ldr	r0, [pc, #212]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ac2:	f7fb fb3b 	bl	800013c <__udivsi3>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e05d      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004acc:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2238      	movs	r2, #56	; 0x38
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d102      	bne.n	8004ade <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ad8:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x100>)
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e054      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2238      	movs	r2, #56	; 0x38
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d138      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2203      	movs	r2, #3
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	2207      	movs	r2, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	3301      	adds	r3, #1
 8004b00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d10d      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4824      	ldr	r0, [pc, #144]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x100>)
 8004b0c:	f7fb fb16 	bl	800013c <__udivsi3>
 8004b10:	0003      	movs	r3, r0
 8004b12:	0019      	movs	r1, r3
 8004b14:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	227f      	movs	r2, #127	; 0x7f
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	434b      	muls	r3, r1
 8004b20:	617b      	str	r3, [r7, #20]
        break;
 8004b22:	e00d      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	481c      	ldr	r0, [pc, #112]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b28:	f7fb fb08 	bl	800013c <__udivsi3>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	0019      	movs	r1, r3
 8004b30:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	227f      	movs	r2, #127	; 0x7f
 8004b38:	4013      	ands	r3, r2
 8004b3a:	434b      	muls	r3, r1
 8004b3c:	617b      	str	r3, [r7, #20]
        break;
 8004b3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0f5b      	lsrs	r3, r3, #29
 8004b46:	2207      	movs	r2, #7
 8004b48:	4013      	ands	r3, r2
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	6978      	ldr	r0, [r7, #20]
 8004b52:	f7fb faf3 	bl	800013c <__udivsi3>
 8004b56:	0003      	movs	r3, r0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2238      	movs	r2, #56	; 0x38
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d103      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2238      	movs	r2, #56	; 0x38
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b18      	cmp	r3, #24
 8004b7a:	d103      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b7c:	23fa      	movs	r3, #250	; 0xfa
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e001      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b88:	693b      	ldr	r3, [r7, #16]
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b006      	add	sp, #24
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40021000 	.word	0x40021000
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	20000028 	.word	0x20000028

08004bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb4:	b5b0      	push	{r4, r5, r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bb8:	f7ff fff2 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bbc:	0004      	movs	r4, r0
 8004bbe:	f7ff fb3f 	bl	8004240 <LL_RCC_GetAPB1Prescaler>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	0b1a      	lsrs	r2, r3, #12
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	58d3      	ldr	r3, [r2, r3]
 8004bcc:	221f      	movs	r2, #31
 8004bce:	4013      	ands	r3, r2
 8004bd0:	40dc      	lsrs	r4, r3
 8004bd2:	0023      	movs	r3, r4
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	08012d28 	.word	0x08012d28

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004be8:	2313      	movs	r3, #19
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf0:	2312      	movs	r3, #18
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	029b      	lsls	r3, r3, #10
 8004c00:	4013      	ands	r3, r2
 8004c02:	d100      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c04:	e0a3      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c06:	2011      	movs	r0, #17
 8004c08:	183b      	adds	r3, r7, r0
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0e:	4bc3      	ldr	r3, [pc, #780]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	055b      	lsls	r3, r3, #21
 8004c16:	4013      	ands	r3, r2
 8004c18:	d110      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	4bc0      	ldr	r3, [pc, #768]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1e:	4bbf      	ldr	r3, [pc, #764]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	0549      	lsls	r1, r1, #21
 8004c24:	430a      	orrs	r2, r1
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c28:	4bbc      	ldr	r3, [pc, #752]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	055b      	lsls	r3, r3, #21
 8004c30:	4013      	ands	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c36:	183b      	adds	r3, r7, r0
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c3c:	4bb8      	ldr	r3, [pc, #736]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4bb7      	ldr	r3, [pc, #732]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0049      	lsls	r1, r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4a:	f7fe fdfb 	bl	8003844 <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c52:	e00b      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fe fdf6 	bl	8003844 <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d904      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c62:	2313      	movs	r3, #19
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2203      	movs	r2, #3
 8004c68:	701a      	strb	r2, [r3, #0]
        break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6c:	4bac      	ldr	r3, [pc, #688]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d0ed      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c78:	2313      	movs	r3, #19
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d154      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c82:	4ba6      	ldr	r3, [pc, #664]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c86:	23c0      	movs	r3, #192	; 0xc0
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d014      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c9e:	4b9f      	ldr	r3, [pc, #636]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	4aa0      	ldr	r2, [pc, #640]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ca8:	4b9c      	ldr	r3, [pc, #624]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cac:	4b9b      	ldr	r3, [pc, #620]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	0249      	lsls	r1, r1, #9
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb6:	4b99      	ldr	r3, [pc, #612]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cba:	4b98      	ldr	r3, [pc, #608]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cbc:	499a      	ldr	r1, [pc, #616]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cc2:	4b96      	ldr	r3, [pc, #600]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d016      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fdb8 	bl	8003844 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd8:	e00c      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fe fdb3 	bl	8003844 <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	4a91      	ldr	r2, [pc, #580]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d904      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004cea:	2313      	movs	r3, #19
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2203      	movs	r2, #3
 8004cf0:	701a      	strb	r2, [r3, #0]
            break;
 8004cf2:	e004      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf4:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d0ed      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cfe:	2313      	movs	r3, #19
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	4b84      	ldr	r3, [pc, #528]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	4a85      	ldr	r2, [pc, #532]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d16:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d1c:	e00c      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d1e:	2312      	movs	r3, #18
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	2213      	movs	r2, #19
 8004d24:	18ba      	adds	r2, r7, r2
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e005      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	2312      	movs	r3, #18
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2213      	movs	r2, #19
 8004d32:	18ba      	adds	r2, r7, r2
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d38:	2311      	movs	r3, #17
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d42:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d46:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d48:	4979      	ldr	r1, [pc, #484]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2201      	movs	r2, #1
 8004d54:	4013      	ands	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d58:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	4393      	bics	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d76:	4b69      	ldr	r3, [pc, #420]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	220c      	movs	r2, #12
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d86:	430a      	orrs	r2, r1
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	4013      	ands	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	4a66      	ldr	r2, [pc, #408]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da4:	430a      	orrs	r2, r1
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4013      	ands	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	4a5f      	ldr	r2, [pc, #380]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dd4:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de4:	430a      	orrs	r2, r1
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2220      	movs	r2, #32
 8004dee:	4013      	ands	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df2:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	4a52      	ldr	r2, [pc, #328]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	01db      	lsls	r3, r3, #7
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d015      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e12:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	0899      	lsrs	r1, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	05db      	lsls	r3, r3, #23
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	0249      	lsls	r1, r1, #9
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	031b      	lsls	r3, r3, #12
 8004e46:	4013      	ands	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e4a:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	4393      	bics	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e58:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	039b      	lsls	r3, r3, #14
 8004e66:	4013      	ands	r3, r2
 8004e68:	d016      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e78:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	03db      	lsls	r3, r3, #15
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d106      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	0449      	lsls	r1, r1, #17
 8004e94:	430a      	orrs	r2, r1
 8004e96:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	03db      	lsls	r3, r3, #15
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d016      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	045b      	lsls	r3, r3, #17
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	0449      	lsls	r1, r1, #17
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4013      	ands	r3, r2
 8004edc:	d016      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	01db      	lsls	r3, r3, #7
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d106      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	0249      	lsls	r1, r1, #9
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f0c:	2312      	movs	r3, #18
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	781b      	ldrb	r3, [r3, #0]
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b006      	add	sp, #24
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40007000 	.word	0x40007000
 8004f24:	fffffcff 	.word	0xfffffcff
 8004f28:	fffeffff 	.word	0xfffeffff
 8004f2c:	00001388 	.word	0x00001388
 8004f30:	efffffff 	.word	0xefffffff
 8004f34:	fffff3ff 	.word	0xfffff3ff
 8004f38:	fff3ffff 	.word	0xfff3ffff
 8004f3c:	ffcfffff 	.word	0xffcfffff
 8004f40:	ffffcfff 	.word	0xffffcfff
 8004f44:	ffbfffff 	.word	0xffbfffff
 8004f48:	feffffff 	.word	0xfeffffff
 8004f4c:	ffff3fff 	.word	0xffff3fff

08004f50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f50:	b5b0      	push	{r4, r5, r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f58:	230f      	movs	r3, #15
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d100      	bne.n	8004f68 <HAL_RTC_Init+0x18>
 8004f66:	e08c      	b.n	8005082 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2229      	movs	r2, #41	; 0x29
 8004f6c:	5c9b      	ldrb	r3, [r3, r2]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2228      	movs	r2, #40	; 0x28
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2288      	movs	r2, #136	; 0x88
 8004f80:	0212      	lsls	r2, r2, #8
 8004f82:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7fe f936 	bl	80031f8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2229      	movs	r2, #41	; 0x29
 8004f90:	2102      	movs	r1, #2
 8004f92:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d062      	beq.n	8005068 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	22ca      	movs	r2, #202	; 0xca
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2253      	movs	r2, #83	; 0x53
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fb2:	250f      	movs	r5, #15
 8004fb4:	197c      	adds	r4, r7, r5
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 fb9c 	bl	80056f6 <RTC_EnterInitMode>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004fc2:	0028      	movs	r0, r5
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d12c      	bne.n	8005026 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	492e      	ldr	r1, [pc, #184]	; (8005090 <HAL_RTC_Init+0x140>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6999      	ldr	r1, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6912      	ldr	r2, [r2, #16]
 8005002:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6919      	ldr	r1, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	041a      	lsls	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005018:	183c      	adds	r4, r7, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fbad 	bl	800577c <RTC_ExitInitMode>
 8005022:	0003      	movs	r3, r0
 8005024:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005026:	230f      	movs	r3, #15
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	00d2      	lsls	r2, r2, #3
 800503c:	08d2      	lsrs	r2, r2, #3
 800503e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6999      	ldr	r1, [r3, #24]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
 8005066:	e003      	b.n	8005070 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005068:	230f      	movs	r3, #15
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005070:	230f      	movs	r3, #15
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2229      	movs	r2, #41	; 0x29
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005082:	230f      	movs	r3, #15
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	781b      	ldrb	r3, [r3, #0]
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	b004      	add	sp, #16
 800508e:	bdb0      	pop	{r4, r5, r7, pc}
 8005090:	fb8fffbf 	.word	0xfb8fffbf

08005094 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2228      	movs	r2, #40	; 0x28
 80050a4:	5c9b      	ldrb	r3, [r3, r2]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_RTC_SetTime+0x1a>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e092      	b.n	80051d4 <HAL_RTC_SetTime+0x140>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2228      	movs	r2, #40	; 0x28
 80050b2:	2101      	movs	r1, #1
 80050b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2229      	movs	r2, #41	; 0x29
 80050ba:	2102      	movs	r1, #2
 80050bc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	22ca      	movs	r2, #202	; 0xca
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2253      	movs	r2, #83	; 0x53
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050ce:	2513      	movs	r5, #19
 80050d0:	197c      	adds	r4, r7, r5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fb0e 	bl	80056f6 <RTC_EnterInitMode>
 80050da:	0003      	movs	r3, r0
 80050dc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80050de:	197b      	adds	r3, r7, r5
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d162      	bne.n	80051ac <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d125      	bne.n	8005138 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	4013      	ands	r3, r2
 80050f6:	d102      	bne.n	80050fe <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	0018      	movs	r0, r3
 8005104:	f000 fb7e 	bl	8005804 <RTC_ByteToBcd2>
 8005108:	0003      	movs	r3, r0
 800510a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 fb77 	bl	8005804 <RTC_ByteToBcd2>
 8005116:	0003      	movs	r3, r0
 8005118:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800511a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 fb6f 	bl	8005804 <RTC_ByteToBcd2>
 8005126:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005128:	0022      	movs	r2, r4
 800512a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e017      	b.n	8005168 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	4013      	ands	r3, r2
 8005142:	d102      	bne.n	800514a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005156:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800515c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	491b      	ldr	r1, [pc, #108]	; (80051dc <HAL_RTC_SetTime+0x148>)
 8005170:	400a      	ands	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4918      	ldr	r1, [pc, #96]	; (80051e0 <HAL_RTC_SetTime+0x14c>)
 8005180:	400a      	ands	r2, r1
 8005182:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6999      	ldr	r1, [r3, #24]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800519c:	2313      	movs	r3, #19
 800519e:	18fc      	adds	r4, r7, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 faea 	bl	800577c <RTC_ExitInitMode>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80051b4:	2313      	movs	r3, #19
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2229      	movs	r2, #41	; 0x29
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2228      	movs	r2, #40	; 0x28
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

  return status;
 80051ce:	2313      	movs	r3, #19
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	781b      	ldrb	r3, [r3, #0]
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b006      	add	sp, #24
 80051da:	bdb0      	pop	{r4, r5, r7, pc}
 80051dc:	007f7f7f 	.word	0x007f7f7f
 80051e0:	fffbffff 	.word	0xfffbffff

080051e4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	045b      	lsls	r3, r3, #17
 8005202:	0c5a      	lsrs	r2, r3, #17
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a22      	ldr	r2, [pc, #136]	; (8005298 <HAL_RTC_GetTime+0xb4>)
 8005210:	4013      	ands	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	223f      	movs	r2, #63	; 0x3f
 800521c:	4013      	ands	r3, r2
 800521e:	b2da      	uxtb	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	b2db      	uxtb	r3, r3
 800522a:	227f      	movs	r2, #127	; 0x7f
 800522c:	4013      	ands	r3, r2
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	227f      	movs	r2, #127	; 0x7f
 800523a:	4013      	ands	r3, r2
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	0d9b      	lsrs	r3, r3, #22
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2201      	movs	r2, #1
 800524a:	4013      	ands	r3, r2
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11a      	bne.n	800528e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 faf9 	bl	8005854 <RTC_Bcd2ToByte>
 8005262:	0003      	movs	r3, r0
 8005264:	001a      	movs	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	0018      	movs	r0, r3
 8005270:	f000 faf0 	bl	8005854 <RTC_Bcd2ToByte>
 8005274:	0003      	movs	r3, r0
 8005276:	001a      	movs	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	789b      	ldrb	r3, [r3, #2]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fae7 	bl	8005854 <RTC_Bcd2ToByte>
 8005286:	0003      	movs	r3, r0
 8005288:	001a      	movs	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b006      	add	sp, #24
 8005296:	bd80      	pop	{r7, pc}
 8005298:	007f7f7f 	.word	0x007f7f7f

0800529c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2228      	movs	r2, #40	; 0x28
 80052ac:	5c9b      	ldrb	r3, [r3, r2]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_RTC_SetDate+0x1a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e07e      	b.n	80053b4 <HAL_RTC_SetDate+0x118>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2228      	movs	r2, #40	; 0x28
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2229      	movs	r2, #41	; 0x29
 80052c2:	2102      	movs	r1, #2
 80052c4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10e      	bne.n	80052ea <HAL_RTC_SetDate+0x4e>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	001a      	movs	r2, r3
 80052d2:	2310      	movs	r3, #16
 80052d4:	4013      	ands	r3, r2
 80052d6:	d008      	beq.n	80052ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2210      	movs	r2, #16
 80052de:	4393      	bics	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	330a      	adds	r3, #10
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11c      	bne.n	800532a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	78db      	ldrb	r3, [r3, #3]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 fa85 	bl	8005804 <RTC_ByteToBcd2>
 80052fa:	0003      	movs	r3, r0
 80052fc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	0018      	movs	r0, r3
 8005304:	f000 fa7e 	bl	8005804 <RTC_ByteToBcd2>
 8005308:	0003      	movs	r3, r0
 800530a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800530c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	789b      	ldrb	r3, [r3, #2]
 8005312:	0018      	movs	r0, r3
 8005314:	f000 fa76 	bl	8005804 <RTC_ByteToBcd2>
 8005318:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800531a:	0022      	movs	r2, r4
 800531c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e00e      	b.n	8005348 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005336:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800533c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	22ca      	movs	r2, #202	; 0xca
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2253      	movs	r2, #83	; 0x53
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005358:	2513      	movs	r5, #19
 800535a:	197c      	adds	r4, r7, r5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f9c9 	bl	80056f6 <RTC_EnterInitMode>
 8005364:	0003      	movs	r3, r0
 8005366:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005368:	0028      	movs	r0, r5
 800536a:	183b      	adds	r3, r7, r0
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4910      	ldr	r1, [pc, #64]	; (80053bc <HAL_RTC_SetDate+0x120>)
 800537a:	400a      	ands	r2, r1
 800537c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800537e:	183c      	adds	r4, r7, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f9fa 	bl	800577c <RTC_ExitInitMode>
 8005388:	0003      	movs	r3, r0
 800538a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005394:	2313      	movs	r3, #19
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2229      	movs	r2, #41	; 0x29
 80053a2:	2101      	movs	r1, #1
 80053a4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2228      	movs	r2, #40	; 0x28
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

  return status;
 80053ae:	2313      	movs	r3, #19
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	781b      	ldrb	r3, [r3, #0]
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b006      	add	sp, #24
 80053ba:	bdb0      	pop	{r4, r5, r7, pc}
 80053bc:	00ffff3f 	.word	0x00ffff3f

080053c0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <HAL_RTC_GetDate+0x98>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	221f      	movs	r2, #31
 80053ea:	4013      	ands	r3, r2
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	223f      	movs	r2, #63	; 0x3f
 80053f8:	4013      	ands	r3, r2
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	0b5b      	lsrs	r3, r3, #13
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2207      	movs	r2, #7
 8005408:	4013      	ands	r3, r2
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11a      	bne.n	800544c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 fa1a 	bl	8005854 <RTC_Bcd2ToByte>
 8005420:	0003      	movs	r3, r0
 8005422:	001a      	movs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	0018      	movs	r0, r3
 800542e:	f000 fa11 	bl	8005854 <RTC_Bcd2ToByte>
 8005432:	0003      	movs	r3, r0
 8005434:	001a      	movs	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 fa08 	bl	8005854 <RTC_Bcd2ToByte>
 8005444:	0003      	movs	r3, r0
 8005446:	001a      	movs	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b006      	add	sp, #24
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	00ffff3f 	.word	0x00ffff3f

0800545c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2228      	movs	r2, #40	; 0x28
 800546c:	5c9b      	ldrb	r3, [r3, r2]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_RTC_SetAlarm+0x1a>
 8005472:	2302      	movs	r3, #2
 8005474:	e10c      	b.n	8005690 <HAL_RTC_SetAlarm+0x234>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2228      	movs	r2, #40	; 0x28
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2229      	movs	r2, #41	; 0x29
 8005482:	2102      	movs	r1, #2
 8005484:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d136      	bne.n	80054fa <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	4013      	ands	r3, r2
 8005496:	d102      	bne.n	800549e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 f9ae 	bl	8005804 <RTC_ByteToBcd2>
 80054a8:	0003      	movs	r3, r0
 80054aa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 f9a7 	bl	8005804 <RTC_ByteToBcd2>
 80054b6:	0003      	movs	r3, r0
 80054b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054ba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	789b      	ldrb	r3, [r3, #2]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 f99f 	bl	8005804 <RTC_ByteToBcd2>
 80054c6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054c8:	0022      	movs	r2, r4
 80054ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054d2:	431a      	orrs	r2, r3
 80054d4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2220      	movs	r2, #32
 80054da:	5c9b      	ldrb	r3, [r3, r2]
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f991 	bl	8005804 <RTC_ByteToBcd2>
 80054e2:	0003      	movs	r3, r0
 80054e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054e6:	0022      	movs	r2, r4
 80054e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e022      	b.n	8005540 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	4013      	ands	r3, r2
 8005504:	d102      	bne.n	800550c <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005518:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800551e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005526:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2120      	movs	r1, #32
 800552c:	5c5b      	ldrb	r3, [r3, r1]
 800552e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005530:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005536:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800553c:	4313      	orrs	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	22ca      	movs	r2, #202	; 0xca
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2253      	movs	r2, #83	; 0x53
 800555a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d143      	bne.n	80055f0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4949      	ldr	r1, [pc, #292]	; (8005698 <HAL_RTC_SetAlarm+0x23c>)
 8005574:	400a      	ands	r2, r1
 8005576:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4946      	ldr	r1, [pc, #280]	; (800569c <HAL_RTC_SetAlarm+0x240>)
 8005584:	400a      	ands	r2, r1
 8005586:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005588:	f7fe f95c 	bl	8003844 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005590:	e016      	b.n	80055c0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005592:	f7fe f957 	bl	8003844 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	23fa      	movs	r3, #250	; 0xfa
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d90d      	bls.n	80055c0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2229      	movs	r2, #41	; 0x29
 80055b0:	2103      	movs	r1, #3
 80055b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2228      	movs	r2, #40	; 0x28
 80055b8:	2100      	movs	r1, #0
 80055ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e067      	b.n	8005690 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	4013      	ands	r3, r2
 80055ca:	d0e2      	beq.n	8005592 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	0049      	lsls	r1, r1, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]
 80055ee:	e042      	b.n	8005676 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4929      	ldr	r1, [pc, #164]	; (80056a0 <HAL_RTC_SetAlarm+0x244>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4926      	ldr	r1, [pc, #152]	; (80056a4 <HAL_RTC_SetAlarm+0x248>)
 800560c:	400a      	ands	r2, r1
 800560e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005610:	f7fe f918 	bl	8003844 <HAL_GetTick>
 8005614:	0003      	movs	r3, r0
 8005616:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005618:	e016      	b.n	8005648 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800561a:	f7fe f913 	bl	8003844 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	23fa      	movs	r3, #250	; 0xfa
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d90d      	bls.n	8005648 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	22ff      	movs	r2, #255	; 0xff
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2229      	movs	r2, #41	; 0x29
 8005638:	2103      	movs	r1, #3
 800563a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2228      	movs	r2, #40	; 0x28
 8005640:	2100      	movs	r1, #0
 8005642:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e023      	b.n	8005690 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2202      	movs	r2, #2
 8005650:	4013      	ands	r3, r2
 8005652:	d0e2      	beq.n	800561a <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	0089      	lsls	r1, r1, #2
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	22ff      	movs	r2, #255	; 0xff
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2229      	movs	r2, #41	; 0x29
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2228      	movs	r2, #40	; 0x28
 800568a:	2100      	movs	r1, #0
 800568c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	0018      	movs	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	b009      	add	sp, #36	; 0x24
 8005696:	bd90      	pop	{r4, r7, pc}
 8005698:	fffffeff 	.word	0xfffffeff
 800569c:	ffffefff 	.word	0xffffefff
 80056a0:	fffffdff 	.word	0xfffffdff
 80056a4:	ffffdfff 	.word	0xffffdfff

080056a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	21a0      	movs	r1, #160	; 0xa0
 80056bc:	438a      	bics	r2, r1
 80056be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056c0:	f7fe f8c0 	bl	8003844 <HAL_GetTick>
 80056c4:	0003      	movs	r3, r0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80056c8:	e00a      	b.n	80056e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056ca:	f7fe f8bb 	bl	8003844 <HAL_GetTick>
 80056ce:	0002      	movs	r2, r0
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	23fa      	movs	r3, #250	; 0xfa
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d901      	bls.n	80056e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	4013      	ands	r3, r2
 80056ea:	d0ee      	beq.n	80056ca <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b004      	add	sp, #16
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80056fe:	230f      	movs	r3, #15
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2240      	movs	r2, #64	; 0x40
 800570e:	4013      	ands	r3, r2
 8005710:	d12c      	bne.n	800576c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2180      	movs	r1, #128	; 0x80
 800571e:	430a      	orrs	r2, r1
 8005720:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005722:	f7fe f88f 	bl	8003844 <HAL_GetTick>
 8005726:	0003      	movs	r3, r0
 8005728:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800572a:	e014      	b.n	8005756 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800572c:	f7fe f88a 	bl	8003844 <HAL_GetTick>
 8005730:	0002      	movs	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	200f      	movs	r0, #15
 8005738:	183b      	adds	r3, r7, r0
 800573a:	1839      	adds	r1, r7, r0
 800573c:	7809      	ldrb	r1, [r1, #0]
 800573e:	7019      	strb	r1, [r3, #0]
 8005740:	23fa      	movs	r3, #250	; 0xfa
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d906      	bls.n	8005756 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005748:	183b      	adds	r3, r7, r0
 800574a:	2203      	movs	r2, #3
 800574c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2229      	movs	r2, #41	; 0x29
 8005752:	2103      	movs	r1, #3
 8005754:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2240      	movs	r2, #64	; 0x40
 800575e:	4013      	ands	r3, r2
 8005760:	d104      	bne.n	800576c <RTC_EnterInitMode+0x76>
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d1df      	bne.n	800572c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	781b      	ldrb	r3, [r3, #0]
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b004      	add	sp, #16
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	240f      	movs	r4, #15
 8005786:	193b      	adds	r3, r7, r4
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800578c:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <RTC_ExitInitMode+0x84>)
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <RTC_ExitInitMode+0x84>)
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	438a      	bics	r2, r1
 8005796:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005798:	4b19      	ldr	r3, [pc, #100]	; (8005800 <RTC_ExitInitMode+0x84>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2220      	movs	r2, #32
 800579e:	4013      	ands	r3, r2
 80057a0:	d10d      	bne.n	80057be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7ff ff7f 	bl	80056a8 <HAL_RTC_WaitForSynchro>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d021      	beq.n	80057f2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2229      	movs	r2, #41	; 0x29
 80057b2:	2103      	movs	r1, #3
 80057b4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2203      	movs	r2, #3
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e019      	b.n	80057f2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <RTC_ExitInitMode+0x84>)
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <RTC_ExitInitMode+0x84>)
 80057c4:	2120      	movs	r1, #32
 80057c6:	438a      	bics	r2, r1
 80057c8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7ff ff6b 	bl	80056a8 <HAL_RTC_WaitForSynchro>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d007      	beq.n	80057e6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2229      	movs	r2, #41	; 0x29
 80057da:	2103      	movs	r1, #3
 80057dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80057de:	230f      	movs	r3, #15
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	2203      	movs	r2, #3
 80057e4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <RTC_ExitInitMode+0x84>)
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <RTC_ExitInitMode+0x84>)
 80057ec:	2120      	movs	r1, #32
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80057f2:	230f      	movs	r3, #15
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	781b      	ldrb	r3, [r3, #0]
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b005      	add	sp, #20
 80057fe:	bd90      	pop	{r4, r7, pc}
 8005800:	40002800 	.word	0x40002800

08005804 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	0002      	movs	r2, r0
 800580c:	1dfb      	adds	r3, r7, #7
 800580e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005814:	230b      	movs	r3, #11
 8005816:	18fb      	adds	r3, r7, r3
 8005818:	1dfa      	adds	r2, r7, #7
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800581e:	e008      	b.n	8005832 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005826:	220b      	movs	r2, #11
 8005828:	18bb      	adds	r3, r7, r2
 800582a:	18ba      	adds	r2, r7, r2
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	3a0a      	subs	r2, #10
 8005830:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005832:	210b      	movs	r1, #11
 8005834:	187b      	adds	r3, r7, r1
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b09      	cmp	r3, #9
 800583a:	d8f1      	bhi.n	8005820 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	b2da      	uxtb	r2, r3
 8005844:	187b      	adds	r3, r7, r1
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	b2db      	uxtb	r3, r3
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b004      	add	sp, #16
 8005852:	bd80      	pop	{r7, pc}

08005854 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	0002      	movs	r2, r0
 800585c:	1dfb      	adds	r3, r7, #7
 800585e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005860:	1dfb      	adds	r3, r7, #7
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	b2db      	uxtb	r3, r3
 8005868:	001a      	movs	r2, r3
 800586a:	0013      	movs	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	189b      	adds	r3, r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	1dfb      	adds	r3, r7, #7
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	210f      	movs	r1, #15
 800587e:	400b      	ands	r3, r1
 8005880:	b2db      	uxtb	r3, r3
 8005882:	18d3      	adds	r3, r2, r3
 8005884:	b2db      	uxtb	r3, r3
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2228      	movs	r2, #40	; 0x28
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_RTCEx_EnableBypassShadow+0x16>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e024      	b.n	80058ee <HAL_RTCEx_EnableBypassShadow+0x60>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2228      	movs	r2, #40	; 0x28
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2229      	movs	r2, #41	; 0x29
 80058b0:	2102      	movs	r1, #2
 80058b2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	22ca      	movs	r2, #202	; 0xca
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2253      	movs	r2, #83	; 0x53
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2120      	movs	r1, #32
 80058d0:	430a      	orrs	r2, r1
 80058d2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2229      	movs	r2, #41	; 0x29
 80058e0:	2101      	movs	r1, #1
 80058e2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2228      	movs	r2, #40	; 0x28
 80058e8:	2100      	movs	r1, #0
 80058ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b002      	add	sp, #8
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2228      	movs	r2, #40	; 0x28
 8005902:	5c9b      	ldrb	r3, [r3, r2]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_RTCEx_DisableBypassShadow+0x16>
 8005908:	2302      	movs	r3, #2
 800590a:	e024      	b.n	8005956 <HAL_RTCEx_DisableBypassShadow+0x60>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2228      	movs	r2, #40	; 0x28
 8005910:	2101      	movs	r1, #1
 8005912:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2229      	movs	r2, #41	; 0x29
 8005918:	2102      	movs	r1, #2
 800591a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	22ca      	movs	r2, #202	; 0xca
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2253      	movs	r2, #83	; 0x53
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	21df      	movs	r1, #223	; 0xdf
 8005938:	400a      	ands	r2, r1
 800593a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	22ff      	movs	r2, #255	; 0xff
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2229      	movs	r2, #41	; 0x29
 8005948:	2101      	movs	r1, #1
 800594a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2228      	movs	r2, #40	; 0x28
 8005950:	2100      	movs	r1, #0
 8005952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b002      	add	sp, #8
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e04a      	b.n	8005a06 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	223d      	movs	r2, #61	; 0x3d
 8005974:	5c9b      	ldrb	r3, [r3, r2]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	223c      	movs	r2, #60	; 0x3c
 8005980:	2100      	movs	r1, #0
 8005982:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0018      	movs	r0, r3
 8005988:	f7fd fc74 	bl	8003274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	223d      	movs	r2, #61	; 0x3d
 8005990:	2102      	movs	r1, #2
 8005992:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	0019      	movs	r1, r3
 800599e:	0010      	movs	r0, r2
 80059a0:	f000 fa12 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2248      	movs	r2, #72	; 0x48
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	223e      	movs	r2, #62	; 0x3e
 80059b0:	2101      	movs	r1, #1
 80059b2:	5499      	strb	r1, [r3, r2]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	223f      	movs	r2, #63	; 0x3f
 80059b8:	2101      	movs	r1, #1
 80059ba:	5499      	strb	r1, [r3, r2]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2240      	movs	r2, #64	; 0x40
 80059c0:	2101      	movs	r1, #1
 80059c2:	5499      	strb	r1, [r3, r2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2241      	movs	r2, #65	; 0x41
 80059c8:	2101      	movs	r1, #1
 80059ca:	5499      	strb	r1, [r3, r2]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2242      	movs	r2, #66	; 0x42
 80059d0:	2101      	movs	r1, #1
 80059d2:	5499      	strb	r1, [r3, r2]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2243      	movs	r2, #67	; 0x43
 80059d8:	2101      	movs	r1, #1
 80059da:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2244      	movs	r2, #68	; 0x44
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2245      	movs	r2, #69	; 0x45
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2246      	movs	r2, #70	; 0x46
 80059f0:	2101      	movs	r1, #1
 80059f2:	5499      	strb	r1, [r3, r2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2247      	movs	r2, #71	; 0x47
 80059f8:	2101      	movs	r1, #1
 80059fa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	223d      	movs	r2, #61	; 0x3d
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	223d      	movs	r2, #61	; 0x3d
 8005a1c:	5c9b      	ldrb	r3, [r3, r2]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d001      	beq.n	8005a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e042      	b.n	8005aae <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223d      	movs	r2, #61	; 0x3d
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0x5a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	05db      	lsls	r3, r3, #23
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d009      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0x5a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_TIM_Base_Start_IT+0xac>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0x5a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d116      	bne.n	8005a98 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d016      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x9a>
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	025b      	lsls	r3, r3, #9
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d011      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a96:	e008      	b.n	8005aaa <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e000      	b.n	8005aac <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aaa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	00010007 	.word	0x00010007

08005ac8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	438a      	bics	r2, r1
 8005ade:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <HAL_TIM_Base_Stop_IT+0x54>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <HAL_TIM_Base_Stop_IT+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <HAL_TIM_Base_Stop_IT+0x58>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_Base_Stop_IT+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2101      	movs	r1, #1
 8005b04:	438a      	bics	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	223d      	movs	r2, #61	; 0x3d
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b002      	add	sp, #8
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	00001111 	.word	0x00001111
 8005b20:	00000444 	.word	0x00000444

08005b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2202      	movs	r2, #2
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d124      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2202      	movs	r2, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d11d      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	4252      	negs	r2, r2
 8005b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4013      	ands	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 f916 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e007      	b.n	8005b7e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 f909 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 f915 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d125      	bne.n	8005bde <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d11e      	bne.n	8005bde <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	4252      	negs	r2, r2
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	23c0      	movs	r3, #192	; 0xc0
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f8e9 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005bc6:	e007      	b.n	8005bd8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f8dc 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 f8e8 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d124      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d11d      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2209      	movs	r2, #9
 8005c00:	4252      	negs	r2, r2
 8005c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2204      	movs	r2, #4
 8005c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4013      	ands	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f8bd 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 f8b0 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 f8bc 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d125      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b10      	cmp	r3, #16
 8005c50:	d11e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2211      	movs	r2, #17
 8005c58:	4252      	negs	r2, r2
 8005c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2208      	movs	r2, #8
 8005c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	23c0      	movs	r3, #192	; 0xc0
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 f890 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005c78:	e007      	b.n	8005c8a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 f883 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f000 f88f 	bl	8005da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d10f      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d108      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	4252      	negs	r2, r2
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7fd f9f1 	bl	80030a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d10f      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d108      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2281      	movs	r2, #129	; 0x81
 8005ce0:	4252      	negs	r2, r2
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f964 	bl	8005fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d10e      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <HAL_TIM_IRQHandler+0x260>)
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 f953 	bl	8005fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d10f      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2240      	movs	r2, #64	; 0x40
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d108      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2241      	movs	r2, #65	; 0x41
 8005d40:	4252      	negs	r2, r2
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f000 f836 	bl	8005db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2220      	movs	r2, #32
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d10f      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d108      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2221      	movs	r2, #33	; 0x21
 8005d6e:	4252      	negs	r2, r2
 8005d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 f915 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b002      	add	sp, #8
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	fffffeff 	.word	0xfffffeff

08005d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b002      	add	sp, #8
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a34      	ldr	r2, [pc, #208]	; (8005eac <TIM_Base_SetConfig+0xe4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d008      	beq.n	8005df2 <TIM_Base_SetConfig+0x2a>
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	2380      	movs	r3, #128	; 0x80
 8005de4:	05db      	lsls	r3, r3, #23
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d003      	beq.n	8005df2 <TIM_Base_SetConfig+0x2a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <TIM_Base_SetConfig+0xe8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d108      	bne.n	8005e04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2270      	movs	r2, #112	; 0x70
 8005df6:	4393      	bics	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a29      	ldr	r2, [pc, #164]	; (8005eac <TIM_Base_SetConfig+0xe4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d018      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	05db      	lsls	r3, r3, #23
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <TIM_Base_SetConfig+0xe8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <TIM_Base_SetConfig+0xec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <TIM_Base_SetConfig+0xf0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <TIM_Base_SetConfig+0xf4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x76>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <TIM_Base_SetConfig+0xf8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <TIM_Base_SetConfig+0xfc>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	4393      	bics	r3, r2
 8005e56:	001a      	movs	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <TIM_Base_SetConfig+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <TIM_Base_SetConfig+0xce>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a0d      	ldr	r2, [pc, #52]	; (8005eb8 <TIM_Base_SetConfig+0xf0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <TIM_Base_SetConfig+0xce>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <TIM_Base_SetConfig+0xf4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_Base_SetConfig+0xce>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <TIM_Base_SetConfig+0xf8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d103      	bne.n	8005e9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	615a      	str	r2, [r3, #20]
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b004      	add	sp, #16
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40002000 	.word	0x40002000
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	fffffcff 	.word	0xfffffcff

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	223c      	movs	r2, #60	; 0x3c
 8005ed6:	5c9b      	ldrb	r3, [r3, r2]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e055      	b.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	223c      	movs	r2, #60	; 0x3c
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	223d      	movs	r2, #61	; 0x3d
 8005eec:	2102      	movs	r1, #2
 8005eee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2270      	movs	r2, #112	; 0x70
 8005f20:	4393      	bics	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00f      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d009      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a11      	ldr	r2, [pc, #68]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10c      	bne.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	4393      	bics	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	223d      	movs	r2, #61	; 0x3d
 8005f7e:	2101      	movs	r1, #1
 8005f80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	223c      	movs	r2, #60	; 0x3c
 8005f86:	2100      	movs	r1, #0
 8005f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	ff0fffff 	.word	0xff0fffff
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40014000 	.word	0x40014000

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e046      	b.n	8006074 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2288      	movs	r2, #136	; 0x88
 8005fea:	589b      	ldr	r3, [r3, r2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d107      	bne.n	8006000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2284      	movs	r2, #132	; 0x84
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7fd f960 	bl	80032c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2288      	movs	r2, #136	; 0x88
 8006004:	2124      	movs	r1, #36	; 0x24
 8006006:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2101      	movs	r1, #1
 8006014:	438a      	bics	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f9ee 	bl	80063fc <UART_SetConfig>
 8006020:	0003      	movs	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e024      	b.n	8006074 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0018      	movs	r0, r3
 8006036:	f000 fc9f 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	490d      	ldr	r1, [pc, #52]	; (800607c <HAL_UART_Init+0xa8>)
 8006046:	400a      	ands	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	212a      	movs	r1, #42	; 0x2a
 8006056:	438a      	bics	r2, r1
 8006058:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 fd37 	bl	8006ae0 <UART_CheckIdleState>
 8006072:	0003      	movs	r3, r0
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}
 800607c:	ffffb7ff 	.word	0xffffb7ff

08006080 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e032      	b.n	80060f8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2288      	movs	r2, #136	; 0x88
 8006096:	2124      	movs	r1, #36	; 0x24
 8006098:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	438a      	bics	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fd f9df 	bl	8003488 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2290      	movs	r2, #144	; 0x90
 80060ce:	2100      	movs	r1, #0
 80060d0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2288      	movs	r2, #136	; 0x88
 80060d6:	2100      	movs	r1, #0
 80060d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	228c      	movs	r2, #140	; 0x8c
 80060de:	2100      	movs	r1, #0
 80060e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2284      	movs	r2, #132	; 0x84
 80060f2:	2100      	movs	r1, #0
 80060f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b002      	add	sp, #8
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2288      	movs	r2, #136	; 0x88
 8006114:	589b      	ldr	r3, [r3, r2]
 8006116:	2b20      	cmp	r3, #32
 8006118:	d000      	beq.n	800611c <HAL_UART_Transmit+0x1c>
 800611a:	e088      	b.n	800622e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_UART_Transmit+0x2a>
 8006122:	1dbb      	adds	r3, r7, #6
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e080      	b.n	8006230 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	015b      	lsls	r3, r3, #5
 8006136:	429a      	cmp	r2, r3
 8006138:	d109      	bne.n	800614e <HAL_UART_Transmit+0x4e>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2201      	movs	r2, #1
 8006146:	4013      	ands	r3, r2
 8006148:	d001      	beq.n	800614e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e070      	b.n	8006230 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2290      	movs	r2, #144	; 0x90
 8006152:	2100      	movs	r1, #0
 8006154:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2288      	movs	r2, #136	; 0x88
 800615a:	2121      	movs	r1, #33	; 0x21
 800615c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615e:	f7fd fb71 	bl	8003844 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1dba      	adds	r2, r7, #6
 800616a:	2154      	movs	r1, #84	; 0x54
 800616c:	8812      	ldrh	r2, [r2, #0]
 800616e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1dba      	adds	r2, r7, #6
 8006174:	2156      	movs	r1, #86	; 0x56
 8006176:	8812      	ldrh	r2, [r2, #0]
 8006178:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	015b      	lsls	r3, r3, #5
 8006182:	429a      	cmp	r2, r3
 8006184:	d108      	bne.n	8006198 <HAL_UART_Transmit+0x98>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	e003      	b.n	80061a0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a0:	e02c      	b.n	80061fc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	0013      	movs	r3, r2
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	f000 fce4 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 80061b4:	1e03      	subs	r3, r0, #0
 80061b6:	d001      	beq.n	80061bc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e039      	b.n	8006230 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	001a      	movs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	05d2      	lsls	r2, r2, #23
 80061ce:	0dd2      	lsrs	r2, r2, #23
 80061d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	3302      	adds	r3, #2
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e007      	b.n	80061ea <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	781a      	ldrb	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2256      	movs	r2, #86	; 0x56
 80061ee:	5a9b      	ldrh	r3, [r3, r2]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b299      	uxth	r1, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2256      	movs	r2, #86	; 0x56
 80061fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2256      	movs	r2, #86	; 0x56
 8006200:	5a9b      	ldrh	r3, [r3, r2]
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1cc      	bne.n	80061a2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	0013      	movs	r3, r2
 8006212:	2200      	movs	r2, #0
 8006214:	2140      	movs	r1, #64	; 0x40
 8006216:	f000 fcb1 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 800621a:	1e03      	subs	r3, r0, #0
 800621c:	d001      	beq.n	8006222 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2288      	movs	r2, #136	; 0x88
 8006226:	2120      	movs	r1, #32
 8006228:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e000      	b.n	8006230 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	0018      	movs	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	b008      	add	sp, #32
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	228c      	movs	r2, #140	; 0x8c
 800624c:	589b      	ldr	r3, [r3, r2]
 800624e:	2b20      	cmp	r3, #32
 8006250:	d000      	beq.n	8006254 <HAL_UART_Receive+0x1c>
 8006252:	e0cc      	b.n	80063ee <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_UART_Receive+0x2a>
 800625a:	1dbb      	adds	r3, r7, #6
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0c4      	b.n	80063f0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	015b      	lsls	r3, r3, #5
 800626e:	429a      	cmp	r2, r3
 8006270:	d109      	bne.n	8006286 <HAL_UART_Receive+0x4e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2201      	movs	r2, #1
 800627e:	4013      	ands	r3, r2
 8006280:	d001      	beq.n	8006286 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0b4      	b.n	80063f0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2290      	movs	r2, #144	; 0x90
 800628a:	2100      	movs	r1, #0
 800628c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	228c      	movs	r2, #140	; 0x8c
 8006292:	2122      	movs	r1, #34	; 0x22
 8006294:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800629c:	f7fd fad2 	bl	8003844 <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1dba      	adds	r2, r7, #6
 80062a8:	215c      	movs	r1, #92	; 0x5c
 80062aa:	8812      	ldrh	r2, [r2, #0]
 80062ac:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1dba      	adds	r2, r7, #6
 80062b2:	215e      	movs	r1, #94	; 0x5e
 80062b4:	8812      	ldrh	r2, [r2, #0]
 80062b6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	015b      	lsls	r3, r3, #5
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d10d      	bne.n	80062e0 <HAL_UART_Receive+0xa8>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_Receive+0x9e>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2260      	movs	r2, #96	; 0x60
 80062d0:	4949      	ldr	r1, [pc, #292]	; (80063f8 <HAL_UART_Receive+0x1c0>)
 80062d2:	5299      	strh	r1, [r3, r2]
 80062d4:	e02e      	b.n	8006334 <HAL_UART_Receive+0xfc>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2260      	movs	r2, #96	; 0x60
 80062da:	21ff      	movs	r1, #255	; 0xff
 80062dc:	5299      	strh	r1, [r3, r2]
 80062de:	e029      	b.n	8006334 <HAL_UART_Receive+0xfc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10d      	bne.n	8006304 <HAL_UART_Receive+0xcc>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <HAL_UART_Receive+0xc2>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2260      	movs	r2, #96	; 0x60
 80062f4:	21ff      	movs	r1, #255	; 0xff
 80062f6:	5299      	strh	r1, [r3, r2]
 80062f8:	e01c      	b.n	8006334 <HAL_UART_Receive+0xfc>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2260      	movs	r2, #96	; 0x60
 80062fe:	217f      	movs	r1, #127	; 0x7f
 8006300:	5299      	strh	r1, [r3, r2]
 8006302:	e017      	b.n	8006334 <HAL_UART_Receive+0xfc>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	055b      	lsls	r3, r3, #21
 800630c:	429a      	cmp	r2, r3
 800630e:	d10d      	bne.n	800632c <HAL_UART_Receive+0xf4>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_UART_Receive+0xea>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2260      	movs	r2, #96	; 0x60
 800631c:	217f      	movs	r1, #127	; 0x7f
 800631e:	5299      	strh	r1, [r3, r2]
 8006320:	e008      	b.n	8006334 <HAL_UART_Receive+0xfc>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2260      	movs	r2, #96	; 0x60
 8006326:	213f      	movs	r1, #63	; 0x3f
 8006328:	5299      	strh	r1, [r3, r2]
 800632a:	e003      	b.n	8006334 <HAL_UART_Receive+0xfc>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2260      	movs	r2, #96	; 0x60
 8006330:	2100      	movs	r1, #0
 8006332:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006334:	2312      	movs	r3, #18
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	2160      	movs	r1, #96	; 0x60
 800633c:	5a52      	ldrh	r2, [r2, r1]
 800633e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	015b      	lsls	r3, r3, #5
 8006348:	429a      	cmp	r2, r3
 800634a:	d108      	bne.n	800635e <HAL_UART_Receive+0x126>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e003      	b.n	8006366 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006366:	e036      	b.n	80063d6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	0013      	movs	r3, r2
 8006372:	2200      	movs	r2, #0
 8006374:	2120      	movs	r1, #32
 8006376:	f000 fc01 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 800637a:	1e03      	subs	r3, r0, #0
 800637c:	d001      	beq.n	8006382 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e036      	b.n	80063f0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10e      	bne.n	80063a6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	b29b      	uxth	r3, r3
 8006390:	2212      	movs	r2, #18
 8006392:	18ba      	adds	r2, r7, r2
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	4013      	ands	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	3302      	adds	r3, #2
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e00e      	b.n	80063c4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2212      	movs	r2, #18
 80063b0:	18ba      	adds	r2, r7, r2
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	4013      	ands	r3, r2
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	225e      	movs	r2, #94	; 0x5e
 80063c8:	5a9b      	ldrh	r3, [r3, r2]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b299      	uxth	r1, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	225e      	movs	r2, #94	; 0x5e
 80063d4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	225e      	movs	r2, #94	; 0x5e
 80063da:	5a9b      	ldrh	r3, [r3, r2]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1c2      	bne.n	8006368 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	228c      	movs	r2, #140	; 0x8c
 80063e6:	2120      	movs	r1, #32
 80063e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	0018      	movs	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b008      	add	sp, #32
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	000001ff 	.word	0x000001ff

080063fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063fc:	b5b0      	push	{r4, r5, r7, lr}
 80063fe:	b090      	sub	sp, #64	; 0x40
 8006400:	af00      	add	r7, sp, #0
 8006402:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006404:	231a      	movs	r3, #26
 8006406:	2220      	movs	r2, #32
 8006408:	189b      	adds	r3, r3, r2
 800640a:	19db      	adds	r3, r3, r7
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	4313      	orrs	r3, r2
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4aaf      	ldr	r2, [pc, #700]	; (80066ec <UART_SetConfig+0x2f0>)
 8006430:	4013      	ands	r3, r2
 8006432:	0019      	movs	r1, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643a:	430b      	orrs	r3, r1
 800643c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4aaa      	ldr	r2, [pc, #680]	; (80066f0 <UART_SetConfig+0x2f4>)
 8006446:	4013      	ands	r3, r2
 8006448:	0018      	movs	r0, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	68d9      	ldr	r1, [r3, #12]
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	0003      	movs	r3, r0
 8006454:	430b      	orrs	r3, r1
 8006456:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4aa4      	ldr	r2, [pc, #656]	; (80066f4 <UART_SetConfig+0x2f8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800646e:	4313      	orrs	r3, r2
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4a9f      	ldr	r2, [pc, #636]	; (80066f8 <UART_SetConfig+0x2fc>)
 800647a:	4013      	ands	r3, r2
 800647c:	0019      	movs	r1, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	430b      	orrs	r3, r1
 8006486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	220f      	movs	r2, #15
 8006490:	4393      	bics	r3, r2
 8006492:	0018      	movs	r0, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	0003      	movs	r3, r0
 800649e:	430b      	orrs	r3, r1
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a95      	ldr	r2, [pc, #596]	; (80066fc <UART_SetConfig+0x300>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d131      	bne.n	8006510 <UART_SetConfig+0x114>
 80064ac:	4b94      	ldr	r3, [pc, #592]	; (8006700 <UART_SetConfig+0x304>)
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	2203      	movs	r2, #3
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d01d      	beq.n	80064f4 <UART_SetConfig+0xf8>
 80064b8:	d823      	bhi.n	8006502 <UART_SetConfig+0x106>
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d00c      	beq.n	80064d8 <UART_SetConfig+0xdc>
 80064be:	d820      	bhi.n	8006502 <UART_SetConfig+0x106>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <UART_SetConfig+0xce>
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d00e      	beq.n	80064e6 <UART_SetConfig+0xea>
 80064c8:	e01b      	b.n	8006502 <UART_SetConfig+0x106>
 80064ca:	231b      	movs	r3, #27
 80064cc:	2220      	movs	r2, #32
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	19db      	adds	r3, r3, r7
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e0b4      	b.n	8006642 <UART_SetConfig+0x246>
 80064d8:	231b      	movs	r3, #27
 80064da:	2220      	movs	r2, #32
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	19db      	adds	r3, r3, r7
 80064e0:	2202      	movs	r2, #2
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e0ad      	b.n	8006642 <UART_SetConfig+0x246>
 80064e6:	231b      	movs	r3, #27
 80064e8:	2220      	movs	r2, #32
 80064ea:	189b      	adds	r3, r3, r2
 80064ec:	19db      	adds	r3, r3, r7
 80064ee:	2204      	movs	r2, #4
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	e0a6      	b.n	8006642 <UART_SetConfig+0x246>
 80064f4:	231b      	movs	r3, #27
 80064f6:	2220      	movs	r2, #32
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	19db      	adds	r3, r3, r7
 80064fc:	2208      	movs	r2, #8
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e09f      	b.n	8006642 <UART_SetConfig+0x246>
 8006502:	231b      	movs	r3, #27
 8006504:	2220      	movs	r2, #32
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	2210      	movs	r2, #16
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e098      	b.n	8006642 <UART_SetConfig+0x246>
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a7b      	ldr	r2, [pc, #492]	; (8006704 <UART_SetConfig+0x308>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d131      	bne.n	800657e <UART_SetConfig+0x182>
 800651a:	4b79      	ldr	r3, [pc, #484]	; (8006700 <UART_SetConfig+0x304>)
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	220c      	movs	r2, #12
 8006520:	4013      	ands	r3, r2
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d01d      	beq.n	8006562 <UART_SetConfig+0x166>
 8006526:	d823      	bhi.n	8006570 <UART_SetConfig+0x174>
 8006528:	2b08      	cmp	r3, #8
 800652a:	d00c      	beq.n	8006546 <UART_SetConfig+0x14a>
 800652c:	d820      	bhi.n	8006570 <UART_SetConfig+0x174>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <UART_SetConfig+0x13c>
 8006532:	2b04      	cmp	r3, #4
 8006534:	d00e      	beq.n	8006554 <UART_SetConfig+0x158>
 8006536:	e01b      	b.n	8006570 <UART_SetConfig+0x174>
 8006538:	231b      	movs	r3, #27
 800653a:	2220      	movs	r2, #32
 800653c:	189b      	adds	r3, r3, r2
 800653e:	19db      	adds	r3, r3, r7
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e07d      	b.n	8006642 <UART_SetConfig+0x246>
 8006546:	231b      	movs	r3, #27
 8006548:	2220      	movs	r2, #32
 800654a:	189b      	adds	r3, r3, r2
 800654c:	19db      	adds	r3, r3, r7
 800654e:	2202      	movs	r2, #2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e076      	b.n	8006642 <UART_SetConfig+0x246>
 8006554:	231b      	movs	r3, #27
 8006556:	2220      	movs	r2, #32
 8006558:	189b      	adds	r3, r3, r2
 800655a:	19db      	adds	r3, r3, r7
 800655c:	2204      	movs	r2, #4
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e06f      	b.n	8006642 <UART_SetConfig+0x246>
 8006562:	231b      	movs	r3, #27
 8006564:	2220      	movs	r2, #32
 8006566:	189b      	adds	r3, r3, r2
 8006568:	19db      	adds	r3, r3, r7
 800656a:	2208      	movs	r2, #8
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e068      	b.n	8006642 <UART_SetConfig+0x246>
 8006570:	231b      	movs	r3, #27
 8006572:	2220      	movs	r2, #32
 8006574:	189b      	adds	r3, r3, r2
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2210      	movs	r2, #16
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e061      	b.n	8006642 <UART_SetConfig+0x246>
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a61      	ldr	r2, [pc, #388]	; (8006708 <UART_SetConfig+0x30c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d106      	bne.n	8006596 <UART_SetConfig+0x19a>
 8006588:	231b      	movs	r3, #27
 800658a:	2220      	movs	r2, #32
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	e055      	b.n	8006642 <UART_SetConfig+0x246>
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a5c      	ldr	r2, [pc, #368]	; (800670c <UART_SetConfig+0x310>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d106      	bne.n	80065ae <UART_SetConfig+0x1b2>
 80065a0:	231b      	movs	r3, #27
 80065a2:	2220      	movs	r2, #32
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	19db      	adds	r3, r3, r7
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e049      	b.n	8006642 <UART_SetConfig+0x246>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a50      	ldr	r2, [pc, #320]	; (80066f4 <UART_SetConfig+0x2f8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d13e      	bne.n	8006636 <UART_SetConfig+0x23a>
 80065b8:	4b51      	ldr	r3, [pc, #324]	; (8006700 <UART_SetConfig+0x304>)
 80065ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065bc:	23c0      	movs	r3, #192	; 0xc0
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	4013      	ands	r3, r2
 80065c2:	22c0      	movs	r2, #192	; 0xc0
 80065c4:	0112      	lsls	r2, r2, #4
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d027      	beq.n	800661a <UART_SetConfig+0x21e>
 80065ca:	22c0      	movs	r2, #192	; 0xc0
 80065cc:	0112      	lsls	r2, r2, #4
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d82a      	bhi.n	8006628 <UART_SetConfig+0x22c>
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	0112      	lsls	r2, r2, #4
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d011      	beq.n	80065fe <UART_SetConfig+0x202>
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	0112      	lsls	r2, r2, #4
 80065de:	4293      	cmp	r3, r2
 80065e0:	d822      	bhi.n	8006628 <UART_SetConfig+0x22c>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <UART_SetConfig+0x1f4>
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	00d2      	lsls	r2, r2, #3
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <UART_SetConfig+0x210>
 80065ee:	e01b      	b.n	8006628 <UART_SetConfig+0x22c>
 80065f0:	231b      	movs	r3, #27
 80065f2:	2220      	movs	r2, #32
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	19db      	adds	r3, r3, r7
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e021      	b.n	8006642 <UART_SetConfig+0x246>
 80065fe:	231b      	movs	r3, #27
 8006600:	2220      	movs	r2, #32
 8006602:	189b      	adds	r3, r3, r2
 8006604:	19db      	adds	r3, r3, r7
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e01a      	b.n	8006642 <UART_SetConfig+0x246>
 800660c:	231b      	movs	r3, #27
 800660e:	2220      	movs	r2, #32
 8006610:	189b      	adds	r3, r3, r2
 8006612:	19db      	adds	r3, r3, r7
 8006614:	2204      	movs	r2, #4
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e013      	b.n	8006642 <UART_SetConfig+0x246>
 800661a:	231b      	movs	r3, #27
 800661c:	2220      	movs	r2, #32
 800661e:	189b      	adds	r3, r3, r2
 8006620:	19db      	adds	r3, r3, r7
 8006622:	2208      	movs	r2, #8
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	e00c      	b.n	8006642 <UART_SetConfig+0x246>
 8006628:	231b      	movs	r3, #27
 800662a:	2220      	movs	r2, #32
 800662c:	189b      	adds	r3, r3, r2
 800662e:	19db      	adds	r3, r3, r7
 8006630:	2210      	movs	r2, #16
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e005      	b.n	8006642 <UART_SetConfig+0x246>
 8006636:	231b      	movs	r3, #27
 8006638:	2220      	movs	r2, #32
 800663a:	189b      	adds	r3, r3, r2
 800663c:	19db      	adds	r3, r3, r7
 800663e:	2210      	movs	r2, #16
 8006640:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <UART_SetConfig+0x2f8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d000      	beq.n	800664e <UART_SetConfig+0x252>
 800664c:	e0a9      	b.n	80067a2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800664e:	231b      	movs	r3, #27
 8006650:	2220      	movs	r2, #32
 8006652:	189b      	adds	r3, r3, r2
 8006654:	19db      	adds	r3, r3, r7
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d015      	beq.n	8006688 <UART_SetConfig+0x28c>
 800665c:	dc18      	bgt.n	8006690 <UART_SetConfig+0x294>
 800665e:	2b04      	cmp	r3, #4
 8006660:	d00d      	beq.n	800667e <UART_SetConfig+0x282>
 8006662:	dc15      	bgt.n	8006690 <UART_SetConfig+0x294>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <UART_SetConfig+0x272>
 8006668:	2b02      	cmp	r3, #2
 800666a:	d005      	beq.n	8006678 <UART_SetConfig+0x27c>
 800666c:	e010      	b.n	8006690 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800666e:	f7fe faa1 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8006672:	0003      	movs	r3, r0
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <UART_SetConfig+0x314>)
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667c:	e011      	b.n	80066a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fe fa0d 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8006682:	0003      	movs	r3, r0
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006686:	e00c      	b.n	80066a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800668e:	e008      	b.n	80066a2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006694:	231a      	movs	r3, #26
 8006696:	2220      	movs	r2, #32
 8006698:	189b      	adds	r3, r3, r2
 800669a:	19db      	adds	r3, r3, r7
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
        break;
 80066a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d100      	bne.n	80066aa <UART_SetConfig+0x2ae>
 80066a8:	e14b      	b.n	8006942 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <UART_SetConfig+0x318>)
 80066b0:	0052      	lsls	r2, r2, #1
 80066b2:	5ad3      	ldrh	r3, [r2, r3]
 80066b4:	0019      	movs	r1, r3
 80066b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066b8:	f7f9 fd40 	bl	800013c <__udivsi3>
 80066bc:	0003      	movs	r3, r0
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	0013      	movs	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	189b      	adds	r3, r3, r2
 80066ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d305      	bcc.n	80066dc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d8:	429a      	cmp	r2, r3
 80066da:	d91d      	bls.n	8006718 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80066dc:	231a      	movs	r3, #26
 80066de:	2220      	movs	r2, #32
 80066e0:	189b      	adds	r3, r3, r2
 80066e2:	19db      	adds	r3, r3, r7
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e12b      	b.n	8006942 <UART_SetConfig+0x546>
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	cfff69f3 	.word	0xcfff69f3
 80066f0:	ffffcfff 	.word	0xffffcfff
 80066f4:	40008000 	.word	0x40008000
 80066f8:	11fff4ff 	.word	0x11fff4ff
 80066fc:	40013800 	.word	0x40013800
 8006700:	40021000 	.word	0x40021000
 8006704:	40004400 	.word	0x40004400
 8006708:	40004800 	.word	0x40004800
 800670c:	40004c00 	.word	0x40004c00
 8006710:	00f42400 	.word	0x00f42400
 8006714:	08012d48 	.word	0x08012d48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006724:	4b92      	ldr	r3, [pc, #584]	; (8006970 <UART_SetConfig+0x574>)
 8006726:	0052      	lsls	r2, r2, #1
 8006728:	5ad3      	ldrh	r3, [r2, r3]
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	69b8      	ldr	r0, [r7, #24]
 8006736:	69f9      	ldr	r1, [r7, #28]
 8006738:	f7f9 feb4 	bl	80004a4 <__aeabi_uldivmod>
 800673c:	0002      	movs	r2, r0
 800673e:	000b      	movs	r3, r1
 8006740:	0e11      	lsrs	r1, r2, #24
 8006742:	021d      	lsls	r5, r3, #8
 8006744:	430d      	orrs	r5, r1
 8006746:	0214      	lsls	r4, r2, #8
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68b8      	ldr	r0, [r7, #8]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	1900      	adds	r0, r0, r4
 800675a:	4169      	adcs	r1, r5
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	2300      	movs	r3, #0
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f7f9 fe9b 	bl	80004a4 <__aeabi_uldivmod>
 800676e:	0002      	movs	r2, r0
 8006770:	000b      	movs	r3, r1
 8006772:	0013      	movs	r3, r2
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006778:	23c0      	movs	r3, #192	; 0xc0
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d309      	bcc.n	8006794 <UART_SetConfig+0x398>
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	2380      	movs	r3, #128	; 0x80
 8006784:	035b      	lsls	r3, r3, #13
 8006786:	429a      	cmp	r2, r3
 8006788:	d204      	bcs.n	8006794 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	e0d6      	b.n	8006942 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006794:	231a      	movs	r3, #26
 8006796:	2220      	movs	r2, #32
 8006798:	189b      	adds	r3, r3, r2
 800679a:	19db      	adds	r3, r3, r7
 800679c:	2201      	movs	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	e0cf      	b.n	8006942 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	69da      	ldr	r2, [r3, #28]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d000      	beq.n	80067b0 <UART_SetConfig+0x3b4>
 80067ae:	e070      	b.n	8006892 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80067b0:	231b      	movs	r3, #27
 80067b2:	2220      	movs	r2, #32
 80067b4:	189b      	adds	r3, r3, r2
 80067b6:	19db      	adds	r3, r3, r7
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d015      	beq.n	80067ea <UART_SetConfig+0x3ee>
 80067be:	dc18      	bgt.n	80067f2 <UART_SetConfig+0x3f6>
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d00d      	beq.n	80067e0 <UART_SetConfig+0x3e4>
 80067c4:	dc15      	bgt.n	80067f2 <UART_SetConfig+0x3f6>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <UART_SetConfig+0x3d4>
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d005      	beq.n	80067da <UART_SetConfig+0x3de>
 80067ce:	e010      	b.n	80067f2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fe f9f0 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 80067d4:	0003      	movs	r3, r0
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067d8:	e014      	b.n	8006804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067da:	4b66      	ldr	r3, [pc, #408]	; (8006974 <UART_SetConfig+0x578>)
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067de:	e011      	b.n	8006804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e0:	f7fe f95c 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 80067e4:	0003      	movs	r3, r0
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e8:	e00c      	b.n	8006804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f0:	e008      	b.n	8006804 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80067f6:	231a      	movs	r3, #26
 80067f8:	2220      	movs	r2, #32
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	19db      	adds	r3, r3, r7
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
        break;
 8006802:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	2b00      	cmp	r3, #0
 8006808:	d100      	bne.n	800680c <UART_SetConfig+0x410>
 800680a:	e09a      	b.n	8006942 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006810:	4b57      	ldr	r3, [pc, #348]	; (8006970 <UART_SetConfig+0x574>)
 8006812:	0052      	lsls	r2, r2, #1
 8006814:	5ad3      	ldrh	r3, [r2, r3]
 8006816:	0019      	movs	r1, r3
 8006818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800681a:	f7f9 fc8f 	bl	800013c <__udivsi3>
 800681e:	0003      	movs	r3, r0
 8006820:	005a      	lsls	r2, r3, #1
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	18d2      	adds	r2, r2, r3
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	0019      	movs	r1, r3
 8006830:	0010      	movs	r0, r2
 8006832:	f7f9 fc83 	bl	800013c <__udivsi3>
 8006836:	0003      	movs	r3, r0
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d921      	bls.n	8006884 <UART_SetConfig+0x488>
 8006840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006842:	2380      	movs	r3, #128	; 0x80
 8006844:	025b      	lsls	r3, r3, #9
 8006846:	429a      	cmp	r2, r3
 8006848:	d21c      	bcs.n	8006884 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	b29a      	uxth	r2, r3
 800684e:	200e      	movs	r0, #14
 8006850:	2420      	movs	r4, #32
 8006852:	1903      	adds	r3, r0, r4
 8006854:	19db      	adds	r3, r3, r7
 8006856:	210f      	movs	r1, #15
 8006858:	438a      	bics	r2, r1
 800685a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	2207      	movs	r2, #7
 8006864:	4013      	ands	r3, r2
 8006866:	b299      	uxth	r1, r3
 8006868:	1903      	adds	r3, r0, r4
 800686a:	19db      	adds	r3, r3, r7
 800686c:	1902      	adds	r2, r0, r4
 800686e:	19d2      	adds	r2, r2, r7
 8006870:	8812      	ldrh	r2, [r2, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	1902      	adds	r2, r0, r4
 800687c:	19d2      	adds	r2, r2, r7
 800687e:	8812      	ldrh	r2, [r2, #0]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e05e      	b.n	8006942 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006884:	231a      	movs	r3, #26
 8006886:	2220      	movs	r2, #32
 8006888:	189b      	adds	r3, r3, r2
 800688a:	19db      	adds	r3, r3, r7
 800688c:	2201      	movs	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e057      	b.n	8006942 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006892:	231b      	movs	r3, #27
 8006894:	2220      	movs	r2, #32
 8006896:	189b      	adds	r3, r3, r2
 8006898:	19db      	adds	r3, r3, r7
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d015      	beq.n	80068cc <UART_SetConfig+0x4d0>
 80068a0:	dc18      	bgt.n	80068d4 <UART_SetConfig+0x4d8>
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d00d      	beq.n	80068c2 <UART_SetConfig+0x4c6>
 80068a6:	dc15      	bgt.n	80068d4 <UART_SetConfig+0x4d8>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <UART_SetConfig+0x4b6>
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d005      	beq.n	80068bc <UART_SetConfig+0x4c0>
 80068b0:	e010      	b.n	80068d4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fe f97f 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 80068b6:	0003      	movs	r3, r0
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ba:	e014      	b.n	80068e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068bc:	4b2d      	ldr	r3, [pc, #180]	; (8006974 <UART_SetConfig+0x578>)
 80068be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c0:	e011      	b.n	80068e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c2:	f7fe f8eb 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 80068c6:	0003      	movs	r3, r0
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ca:	e00c      	b.n	80068e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d2:	e008      	b.n	80068e6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80068d8:	231a      	movs	r3, #26
 80068da:	2220      	movs	r2, #32
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	19db      	adds	r3, r3, r7
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
        break;
 80068e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02a      	beq.n	8006942 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f0:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <UART_SetConfig+0x574>)
 80068f2:	0052      	lsls	r2, r2, #1
 80068f4:	5ad3      	ldrh	r3, [r2, r3]
 80068f6:	0019      	movs	r1, r3
 80068f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068fa:	f7f9 fc1f 	bl	800013c <__udivsi3>
 80068fe:	0003      	movs	r3, r0
 8006900:	001a      	movs	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	18d2      	adds	r2, r2, r3
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0019      	movs	r1, r3
 8006910:	0010      	movs	r0, r2
 8006912:	f7f9 fc13 	bl	800013c <__udivsi3>
 8006916:	0003      	movs	r3, r0
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d90a      	bls.n	8006936 <UART_SetConfig+0x53a>
 8006920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	025b      	lsls	r3, r3, #9
 8006926:	429a      	cmp	r2, r3
 8006928:	d205      	bcs.n	8006936 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	b29a      	uxth	r2, r3
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006936:	231a      	movs	r3, #26
 8006938:	2220      	movs	r2, #32
 800693a:	189b      	adds	r3, r3, r2
 800693c:	19db      	adds	r3, r3, r7
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	226a      	movs	r2, #106	; 0x6a
 8006946:	2101      	movs	r1, #1
 8006948:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2268      	movs	r2, #104	; 0x68
 800694e:	2101      	movs	r1, #1
 8006950:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2200      	movs	r2, #0
 8006956:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2200      	movs	r2, #0
 800695c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800695e:	231a      	movs	r3, #26
 8006960:	2220      	movs	r2, #32
 8006962:	189b      	adds	r3, r3, r2
 8006964:	19db      	adds	r3, r3, r7
 8006966:	781b      	ldrb	r3, [r3, #0]
}
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	b010      	add	sp, #64	; 0x40
 800696e:	bdb0      	pop	{r4, r5, r7, pc}
 8006970:	08012d48 	.word	0x08012d48
 8006974:	00f42400 	.word	0x00f42400

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	2201      	movs	r2, #1
 8006986:	4013      	ands	r3, r2
 8006988:	d00b      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a4a      	ldr	r2, [pc, #296]	; (8006abc <UART_AdvFeatureConfig+0x144>)
 8006992:	4013      	ands	r3, r2
 8006994:	0019      	movs	r1, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	2202      	movs	r2, #2
 80069a8:	4013      	ands	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4a43      	ldr	r2, [pc, #268]	; (8006ac0 <UART_AdvFeatureConfig+0x148>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	0019      	movs	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2204      	movs	r2, #4
 80069ca:	4013      	ands	r3, r2
 80069cc:	d00b      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4a3b      	ldr	r2, [pc, #236]	; (8006ac4 <UART_AdvFeatureConfig+0x14c>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2208      	movs	r2, #8
 80069ec:	4013      	ands	r3, r2
 80069ee:	d00b      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <UART_AdvFeatureConfig+0x150>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	0019      	movs	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d00b      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4a2c      	ldr	r2, [pc, #176]	; (8006acc <UART_AdvFeatureConfig+0x154>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	2220      	movs	r2, #32
 8006a30:	4013      	ands	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <UART_AdvFeatureConfig+0x158>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	0019      	movs	r1, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	2240      	movs	r2, #64	; 0x40
 8006a52:	4013      	ands	r3, r2
 8006a54:	d01d      	beq.n	8006a92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <UART_AdvFeatureConfig+0x15c>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	0019      	movs	r1, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	035b      	lsls	r3, r3, #13
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d10b      	bne.n	8006a92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <UART_AdvFeatureConfig+0x160>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	0019      	movs	r1, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	4a0e      	ldr	r2, [pc, #56]	; (8006adc <UART_AdvFeatureConfig+0x164>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	0019      	movs	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }
}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	fffdffff 	.word	0xfffdffff
 8006ac0:	fffeffff 	.word	0xfffeffff
 8006ac4:	fffbffff 	.word	0xfffbffff
 8006ac8:	ffff7fff 	.word	0xffff7fff
 8006acc:	ffffefff 	.word	0xffffefff
 8006ad0:	ffffdfff 	.word	0xffffdfff
 8006ad4:	ffefffff 	.word	0xffefffff
 8006ad8:	ff9fffff 	.word	0xff9fffff
 8006adc:	fff7ffff 	.word	0xfff7ffff

08006ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2290      	movs	r2, #144	; 0x90
 8006aec:	2100      	movs	r1, #0
 8006aee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006af0:	f7fc fea8 	bl	8003844 <HAL_GetTick>
 8006af4:	0003      	movs	r3, r0
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2208      	movs	r2, #8
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d10c      	bne.n	8006b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	0391      	lsls	r1, r2, #14
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <UART_CheckIdleState+0x98>)
 8006b10:	9200      	str	r2, [sp, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f000 f832 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 8006b18:	1e03      	subs	r3, r0, #0
 8006b1a:	d001      	beq.n	8006b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e026      	b.n	8006b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2204      	movs	r2, #4
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d10c      	bne.n	8006b48 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2280      	movs	r2, #128	; 0x80
 8006b32:	03d1      	lsls	r1, r2, #15
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4a10      	ldr	r2, [pc, #64]	; (8006b78 <UART_CheckIdleState+0x98>)
 8006b38:	9200      	str	r2, [sp, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f000 f81e 	bl	8006b7c <UART_WaitOnFlagUntilTimeout>
 8006b40:	1e03      	subs	r3, r0, #0
 8006b42:	d001      	beq.n	8006b48 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e012      	b.n	8006b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2288      	movs	r2, #136	; 0x88
 8006b4c:	2120      	movs	r1, #32
 8006b4e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	228c      	movs	r2, #140	; 0x8c
 8006b54:	2120      	movs	r1, #32
 8006b56:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2284      	movs	r2, #132	; 0x84
 8006b68:	2100      	movs	r1, #0
 8006b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b004      	add	sp, #16
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	01ffffff 	.word	0x01ffffff

08006b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b094      	sub	sp, #80	; 0x50
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	1dfb      	adds	r3, r7, #7
 8006b8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8c:	e0a7      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b90:	3301      	adds	r3, #1
 8006b92:	d100      	bne.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b94:	e0a3      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fc fe55 	bl	8003844 <HAL_GetTick>
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d13f      	bne.n	8006c2c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bac:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	f383 8810 	msr	PRIMASK, r3
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	494e      	ldr	r1, [pc, #312]	; (8006d08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006bce:	400a      	ands	r2, r1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f383 8810 	msr	PRIMASK, r3
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bde:	f3ef 8310 	mrs	r3, PRIMASK
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
 8006be8:	2301      	movs	r3, #1
 8006bea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	f383 8810 	msr	PRIMASK, r3
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	438a      	bics	r2, r1
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	f383 8810 	msr	PRIMASK, r3
}
 8006c0e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2288      	movs	r2, #136	; 0x88
 8006c14:	2120      	movs	r1, #32
 8006c16:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	228c      	movs	r2, #140	; 0x8c
 8006c1c:	2120      	movs	r1, #32
 8006c1e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2284      	movs	r2, #132	; 0x84
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e069      	b.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2204      	movs	r2, #4
 8006c34:	4013      	ands	r3, r2
 8006c36:	d052      	beq.n	8006cde <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69da      	ldr	r2, [r3, #28]
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	401a      	ands	r2, r3
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d148      	bne.n	8006cde <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	0112      	lsls	r2, r2, #4
 8006c54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c56:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c60:	2301      	movs	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4924      	ldr	r1, [pc, #144]	; (8006d08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c78:	400a      	ands	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f383 8810 	msr	PRIMASK, r3
}
 8006c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c88:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c92:	2301      	movs	r3, #1
 8006c94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2101      	movs	r1, #1
 8006caa:	438a      	bics	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f383 8810 	msr	PRIMASK, r3
}
 8006cb8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2288      	movs	r2, #136	; 0x88
 8006cbe:	2120      	movs	r1, #32
 8006cc0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	228c      	movs	r2, #140	; 0x8c
 8006cc6:	2120      	movs	r1, #32
 8006cc8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2290      	movs	r2, #144	; 0x90
 8006cce:	2120      	movs	r1, #32
 8006cd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2284      	movs	r2, #132	; 0x84
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e010      	b.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	425a      	negs	r2, r3
 8006cee:	4153      	adcs	r3, r2
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	001a      	movs	r2, r3
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d100      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x182>
 8006cfc:	e747      	b.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b014      	add	sp, #80	; 0x50
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	fffffe5f 	.word	0xfffffe5f

08006d0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2284      	movs	r2, #132	; 0x84
 8006d18:	5c9b      	ldrb	r3, [r3, r2]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e027      	b.n	8006d72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2284      	movs	r2, #132	; 0x84
 8006d26:	2101      	movs	r1, #1
 8006d28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2288      	movs	r2, #136	; 0x88
 8006d2e:	2124      	movs	r1, #36	; 0x24
 8006d30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2101      	movs	r1, #1
 8006d46:	438a      	bics	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a0b      	ldr	r2, [pc, #44]	; (8006d7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2288      	movs	r2, #136	; 0x88
 8006d64:	2120      	movs	r1, #32
 8006d66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2284      	movs	r2, #132	; 0x84
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b004      	add	sp, #16
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	dfffffff 	.word	0xdfffffff

08006d80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2284      	movs	r2, #132	; 0x84
 8006d8e:	5c9b      	ldrb	r3, [r3, r2]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e02e      	b.n	8006df6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2284      	movs	r2, #132	; 0x84
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2288      	movs	r2, #136	; 0x88
 8006da4:	2124      	movs	r1, #36	; 0x24
 8006da6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2101      	movs	r1, #1
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	08d9      	lsrs	r1, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f000 f854 	bl	8006e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2288      	movs	r2, #136	; 0x88
 8006de8:	2120      	movs	r1, #32
 8006dea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2284      	movs	r2, #132	; 0x84
 8006df0:	2100      	movs	r1, #0
 8006df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b004      	add	sp, #16
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2284      	movs	r2, #132	; 0x84
 8006e0e:	5c9b      	ldrb	r3, [r3, r2]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e02f      	b.n	8006e78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2284      	movs	r2, #132	; 0x84
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2288      	movs	r2, #136	; 0x88
 8006e24:	2124      	movs	r1, #36	; 0x24
 8006e26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 f813 	bl	8006e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2288      	movs	r2, #136	; 0x88
 8006e6a:	2120      	movs	r1, #32
 8006e6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2284      	movs	r2, #132	; 0x84
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b004      	add	sp, #16
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	f1ffffff 	.word	0xf1ffffff

08006e84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	226a      	movs	r2, #106	; 0x6a
 8006e98:	2101      	movs	r1, #1
 8006e9a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2268      	movs	r2, #104	; 0x68
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ea4:	e043      	b.n	8006f2e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ea6:	260f      	movs	r6, #15
 8006ea8:	19bb      	adds	r3, r7, r6
 8006eaa:	2208      	movs	r2, #8
 8006eac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eae:	200e      	movs	r0, #14
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	0e5b      	lsrs	r3, r3, #25
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	240d      	movs	r4, #13
 8006ec2:	193b      	adds	r3, r7, r4
 8006ec4:	2107      	movs	r1, #7
 8006ec6:	400a      	ands	r2, r1
 8006ec8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	0f5b      	lsrs	r3, r3, #29
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	250c      	movs	r5, #12
 8006ed6:	197b      	adds	r3, r7, r5
 8006ed8:	2107      	movs	r1, #7
 8006eda:	400a      	ands	r2, r1
 8006edc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	197a      	adds	r2, r7, r5
 8006ee4:	7812      	ldrb	r2, [r2, #0]
 8006ee6:	4914      	ldr	r1, [pc, #80]	; (8006f38 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ee8:	5c8a      	ldrb	r2, [r1, r2]
 8006eea:	435a      	muls	r2, r3
 8006eec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006eee:	197b      	adds	r3, r7, r5
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <UARTEx_SetNbDataToProcess+0xb8>)
 8006ef4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	f7f9 f9aa 	bl	8000250 <__divsi3>
 8006efc:	0003      	movs	r3, r0
 8006efe:	b299      	uxth	r1, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	226a      	movs	r2, #106	; 0x6a
 8006f04:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f06:	19bb      	adds	r3, r7, r6
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	193a      	adds	r2, r7, r4
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	490a      	ldr	r1, [pc, #40]	; (8006f38 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f10:	5c8a      	ldrb	r2, [r1, r2]
 8006f12:	435a      	muls	r2, r3
 8006f14:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <UARTEx_SetNbDataToProcess+0xb8>)
 8006f1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f1e:	0019      	movs	r1, r3
 8006f20:	f7f9 f996 	bl	8000250 <__divsi3>
 8006f24:	0003      	movs	r3, r0
 8006f26:	b299      	uxth	r1, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2268      	movs	r2, #104	; 0x68
 8006f2c:	5299      	strh	r1, [r3, r2]
}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b005      	add	sp, #20
 8006f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	08012d60 	.word	0x08012d60
 8006f3c:	08012d68 	.word	0x08012d68

08006f40 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006f40:	b5b0      	push	{r4, r5, r7, lr}
 8006f42:	b0e4      	sub	sp, #400	; 0x190
 8006f44:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006f46:	24c8      	movs	r4, #200	; 0xc8
 8006f48:	193b      	adds	r3, r7, r4
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	23c6      	movs	r3, #198	; 0xc6
 8006f4e:	001a      	movs	r2, r3
 8006f50:	2100      	movs	r1, #0
 8006f52:	f003 fd0f 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <astronode_send_cfg_sr+0x64>)
 8006f58:	25c8      	movs	r5, #200	; 0xc8
 8006f5a:	006d      	lsls	r5, r5, #1
 8006f5c:	195b      	adds	r3, r3, r5
 8006f5e:	19db      	adds	r3, r3, r7
 8006f60:	0018      	movs	r0, r3
 8006f62:	23c6      	movs	r3, #198	; 0xc6
 8006f64:	001a      	movs	r2, r3
 8006f66:	2100      	movs	r1, #0
 8006f68:	f003 fd04 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006f6c:	193b      	adds	r3, r7, r4
 8006f6e:	2210      	movs	r2, #16
 8006f70:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8006f72:	003a      	movs	r2, r7
 8006f74:	193b      	adds	r3, r7, r4
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f001 fa91 	bl	80084a0 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8006f7e:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <astronode_send_cfg_sr+0x64>)
 8006f80:	195b      	adds	r3, r3, r5
 8006f82:	19db      	adds	r3, r3, r7
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b90      	cmp	r3, #144	; 0x90
 8006f88:	d104      	bne.n	8006f94 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <astronode_send_cfg_sr+0x68>)
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7fb ff87 	bl	8002ea0 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8006f92:	e003      	b.n	8006f9c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <astronode_send_cfg_sr+0x6c>)
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7fb ff82 	bl	8002ea0 <send_debug_logs>
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b064      	add	sp, #400	; 0x190
 8006fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa4:	fffffe70 	.word	0xfffffe70
 8006fa8:	080119c8 	.word	0x080119c8
 8006fac:	080119fc 	.word	0x080119fc

08006fb0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8006fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb2:	b0e7      	sub	sp, #412	; 0x19c
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	0005      	movs	r5, r0
 8006fb8:	000c      	movs	r4, r1
 8006fba:	0010      	movs	r0, r2
 8006fbc:	0019      	movs	r1, r3
 8006fbe:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <astronode_send_cfg_wr+0x13c>)
 8006fc0:	26cc      	movs	r6, #204	; 0xcc
 8006fc2:	0076      	lsls	r6, r6, #1
 8006fc4:	199b      	adds	r3, r3, r6
 8006fc6:	19db      	adds	r3, r3, r7
 8006fc8:	1c2a      	adds	r2, r5, #0
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	4b48      	ldr	r3, [pc, #288]	; (80070f0 <astronode_send_cfg_wr+0x140>)
 8006fce:	0035      	movs	r5, r6
 8006fd0:	195b      	adds	r3, r3, r5
 8006fd2:	19db      	adds	r3, r3, r7
 8006fd4:	1c22      	adds	r2, r4, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	4b46      	ldr	r3, [pc, #280]	; (80070f4 <astronode_send_cfg_wr+0x144>)
 8006fda:	002c      	movs	r4, r5
 8006fdc:	191b      	adds	r3, r3, r4
 8006fde:	19db      	adds	r3, r3, r7
 8006fe0:	1c02      	adds	r2, r0, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	4b44      	ldr	r3, [pc, #272]	; (80070f8 <astronode_send_cfg_wr+0x148>)
 8006fe6:	191b      	adds	r3, r3, r4
 8006fe8:	19db      	adds	r3, r3, r7
 8006fea:	1c0a      	adds	r2, r1, #0
 8006fec:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8006fee:	25d0      	movs	r5, #208	; 0xd0
 8006ff0:	197b      	adds	r3, r7, r5
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	23c6      	movs	r3, #198	; 0xc6
 8006ff6:	001a      	movs	r2, r3
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	f003 fcbb 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <astronode_send_cfg_wr+0x14c>)
 8007000:	191b      	adds	r3, r3, r4
 8007002:	19db      	adds	r3, r3, r7
 8007004:	0018      	movs	r0, r3
 8007006:	23c6      	movs	r3, #198	; 0xc6
 8007008:	001a      	movs	r2, r3
 800700a:	2100      	movs	r1, #0
 800700c:	f003 fcb2 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007010:	0029      	movs	r1, r5
 8007012:	187b      	adds	r3, r7, r1
 8007014:	2205      	movs	r2, #5
 8007016:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <astronode_send_cfg_wr+0x13c>)
 800701a:	191b      	adds	r3, r3, r4
 800701c:	19db      	adds	r3, r3, r7
 800701e:	2200      	movs	r2, #0
 8007020:	569a      	ldrsb	r2, [r3, r2]
 8007022:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <astronode_send_cfg_wr+0x140>)
 8007024:	191b      	adds	r3, r3, r4
 8007026:	19db      	adds	r3, r3, r7
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	b25b      	sxtb	r3, r3
 800702e:	4313      	orrs	r3, r2
 8007030:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007032:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <astronode_send_cfg_wr+0x144>)
 8007034:	191b      	adds	r3, r3, r4
 8007036:	19db      	adds	r3, r3, r7
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	b25b      	sxtb	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007042:	4b2d      	ldr	r3, [pc, #180]	; (80070f8 <astronode_send_cfg_wr+0x148>)
 8007044:	191b      	adds	r3, r3, r4
 8007046:	19db      	adds	r3, r3, r7
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	b25b      	sxtb	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	b25b      	sxtb	r3, r3
 8007052:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007054:	187b      	adds	r3, r7, r1
 8007056:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007058:	23d4      	movs	r3, #212	; 0xd4
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	2508      	movs	r5, #8
 800705e:	195b      	adds	r3, r3, r5
 8007060:	19db      	adds	r3, r3, r7
 8007062:	2200      	movs	r2, #0
 8007064:	569a      	ldrsb	r2, [r3, r2]
 8007066:	23d6      	movs	r3, #214	; 0xd6
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	195b      	adds	r3, r3, r5
 800706c:	19db      	adds	r3, r3, r7
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b25b      	sxtb	r3, r3
 8007074:	4313      	orrs	r3, r2
 8007076:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007078:	23d8      	movs	r3, #216	; 0xd8
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	195b      	adds	r3, r3, r5
 800707e:	19db      	adds	r3, r3, r7
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	b25b      	sxtb	r3, r3
 8007086:	4313      	orrs	r3, r2
 8007088:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800708a:	23da      	movs	r3, #218	; 0xda
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	195b      	adds	r3, r3, r5
 8007090:	19db      	adds	r3, r3, r7
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	b25b      	sxtb	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b25b      	sxtb	r3, r3
 800709c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800709e:	187b      	adds	r3, r7, r1
 80070a0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80070a2:	0008      	movs	r0, r1
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	22c4      	movs	r2, #196	; 0xc4
 80070a8:	2103      	movs	r1, #3
 80070aa:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80070ac:	002b      	movs	r3, r5
 80070ae:	18fa      	adds	r2, r7, r3
 80070b0:	183b      	adds	r3, r7, r0
 80070b2:	0011      	movs	r1, r2
 80070b4:	0018      	movs	r0, r3
 80070b6:	f001 f9f3 	bl	80084a0 <astronode_transport_send_receive>
 80070ba:	0003      	movs	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10f      	bne.n	80070e0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <astronode_send_cfg_wr+0x14c>)
 80070c2:	191b      	adds	r3, r3, r4
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b85      	cmp	r3, #133	; 0x85
 80070ca:	d105      	bne.n	80070d8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80070cc:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <astronode_send_cfg_wr+0x150>)
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fb fee6 	bl	8002ea0 <send_debug_logs>
            return true ;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e004      	b.n	80070e2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <astronode_send_cfg_wr+0x154>)
 80070da:	0018      	movs	r0, r3
 80070dc:	f7fb fee0 	bl	8002ea0 <send_debug_logs>
        }
    }
    return false ;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b067      	add	sp, #412	; 0x19c
 80070e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	fffffe6f 	.word	0xfffffe6f
 80070f0:	fffffe6e 	.word	0xfffffe6e
 80070f4:	fffffe6d 	.word	0xfffffe6d
 80070f8:	fffffe6c 	.word	0xfffffe6c
 80070fc:	fffffe70 	.word	0xfffffe70
 8007100:	08011a30 	.word	0x08011a30
 8007104:	08011a5c 	.word	0x08011a5c

08007108 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710a:	b0ed      	sub	sp, #436	; 0x1b4
 800710c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800710e:	21c8      	movs	r1, #200	; 0xc8
 8007110:	2318      	movs	r3, #24
 8007112:	18cb      	adds	r3, r1, r3
 8007114:	19db      	adds	r3, r3, r7
 8007116:	0018      	movs	r0, r3
 8007118:	23c6      	movs	r3, #198	; 0xc6
 800711a:	001a      	movs	r2, r3
 800711c:	2100      	movs	r1, #0
 800711e:	f003 fc29 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007122:	4b4a      	ldr	r3, [pc, #296]	; (800724c <astronode_send_mgi_rr+0x144>)
 8007124:	26cc      	movs	r6, #204	; 0xcc
 8007126:	0076      	lsls	r6, r6, #1
 8007128:	199b      	adds	r3, r3, r6
 800712a:	2218      	movs	r2, #24
 800712c:	4694      	mov	ip, r2
 800712e:	44bc      	add	ip, r7
 8007130:	4463      	add	r3, ip
 8007132:	0018      	movs	r0, r3
 8007134:	23c6      	movs	r3, #198	; 0xc6
 8007136:	001a      	movs	r2, r3
 8007138:	2100      	movs	r1, #0
 800713a:	f003 fc1b 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800713e:	21c8      	movs	r1, #200	; 0xc8
 8007140:	2318      	movs	r3, #24
 8007142:	18cb      	adds	r3, r1, r3
 8007144:	19db      	adds	r3, r3, r7
 8007146:	2219      	movs	r2, #25
 8007148:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800714a:	2318      	movs	r3, #24
 800714c:	18fa      	adds	r2, r7, r3
 800714e:	2318      	movs	r3, #24
 8007150:	18cb      	adds	r3, r1, r3
 8007152:	19db      	adds	r3, r3, r7
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f001 f9a2 	bl	80084a0 <astronode_transport_send_receive>
 800715c:	0003      	movs	r3, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d16f      	bne.n	8007242 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007162:	4b3a      	ldr	r3, [pc, #232]	; (800724c <astronode_send_mgi_rr+0x144>)
 8007164:	0032      	movs	r2, r6
 8007166:	189b      	adds	r3, r3, r2
 8007168:	2118      	movs	r1, #24
 800716a:	468c      	mov	ip, r1
 800716c:	44bc      	add	ip, r7
 800716e:	4463      	add	r3, ip
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b99      	cmp	r3, #153	; 0x99
 8007174:	d161      	bne.n	800723a <astronode_send_mgi_rr+0x132>
        {
 8007176:	466b      	mov	r3, sp
 8007178:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800717a:	4b34      	ldr	r3, [pc, #208]	; (800724c <astronode_send_mgi_rr+0x144>)
 800717c:	189b      	adds	r3, r3, r2
 800717e:	2218      	movs	r2, #24
 8007180:	4694      	mov	ip, r2
 8007182:	44bc      	add	ip, r7
 8007184:	4463      	add	r3, ip
 8007186:	22c4      	movs	r2, #196	; 0xc4
 8007188:	5a9b      	ldrh	r3, [r3, r2]
 800718a:	001a      	movs	r2, r3
 800718c:	3a01      	subs	r2, #1
 800718e:	21ca      	movs	r1, #202	; 0xca
 8007190:	0049      	lsls	r1, r1, #1
 8007192:	2018      	movs	r0, #24
 8007194:	1809      	adds	r1, r1, r0
 8007196:	19c9      	adds	r1, r1, r7
 8007198:	600a      	str	r2, [r1, #0]
 800719a:	001c      	movs	r4, r3
 800719c:	2200      	movs	r2, #0
 800719e:	0015      	movs	r5, r2
 80071a0:	0020      	movs	r0, r4
 80071a2:	0029      	movs	r1, r5
 80071a4:	0004      	movs	r4, r0
 80071a6:	0f62      	lsrs	r2, r4, #29
 80071a8:	000c      	movs	r4, r1
 80071aa:	00e4      	lsls	r4, r4, #3
 80071ac:	617c      	str	r4, [r7, #20]
 80071ae:	697c      	ldr	r4, [r7, #20]
 80071b0:	4314      	orrs	r4, r2
 80071b2:	617c      	str	r4, [r7, #20]
 80071b4:	0001      	movs	r1, r0
 80071b6:	00c9      	lsls	r1, r1, #3
 80071b8:	6139      	str	r1, [r7, #16]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	6838      	ldr	r0, [r7, #0]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	0004      	movs	r4, r0
 80071c6:	0f62      	lsrs	r2, r4, #29
 80071c8:	000c      	movs	r4, r1
 80071ca:	00e4      	lsls	r4, r4, #3
 80071cc:	60fc      	str	r4, [r7, #12]
 80071ce:	68fc      	ldr	r4, [r7, #12]
 80071d0:	4314      	orrs	r4, r2
 80071d2:	60fc      	str	r4, [r7, #12]
 80071d4:	0001      	movs	r1, r0
 80071d6:	00ca      	lsls	r2, r1, #3
 80071d8:	60ba      	str	r2, [r7, #8]
 80071da:	3307      	adds	r3, #7
 80071dc:	08db      	lsrs	r3, r3, #3
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4669      	mov	r1, sp
 80071e2:	1acb      	subs	r3, r1, r3
 80071e4:	469d      	mov	sp, r3
 80071e6:	466b      	mov	r3, sp
 80071e8:	3300      	adds	r3, #0
 80071ea:	24c8      	movs	r4, #200	; 0xc8
 80071ec:	0064      	lsls	r4, r4, #1
 80071ee:	2218      	movs	r2, #24
 80071f0:	18a2      	adds	r2, r4, r2
 80071f2:	19d1      	adds	r1, r2, r7
 80071f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <astronode_send_mgi_rr+0x148>)
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7fb fe51 	bl	8002ea0 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <astronode_send_mgi_rr+0x144>)
 8007200:	22cc      	movs	r2, #204	; 0xcc
 8007202:	0052      	lsls	r2, r2, #1
 8007204:	189b      	adds	r3, r3, r2
 8007206:	2218      	movs	r2, #24
 8007208:	4694      	mov	ip, r2
 800720a:	44bc      	add	ip, r7
 800720c:	4463      	add	r3, ip
 800720e:	22c4      	movs	r2, #196	; 0xc4
 8007210:	5a9b      	ldrh	r3, [r3, r2]
 8007212:	0019      	movs	r1, r3
 8007214:	2318      	movs	r3, #24
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	3301      	adds	r3, #1
 800721a:	4a0e      	ldr	r2, [pc, #56]	; (8007254 <astronode_send_mgi_rr+0x14c>)
 800721c:	2018      	movs	r0, #24
 800721e:	1820      	adds	r0, r4, r0
 8007220:	19c0      	adds	r0, r0, r7
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	f003 fadc 	bl	800a7e0 <snprintf>
            send_debug_logs(guid);
 8007228:	2318      	movs	r3, #24
 800722a:	18e3      	adds	r3, r4, r3
 800722c:	19db      	adds	r3, r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	0018      	movs	r0, r3
 8007232:	f7fb fe35 	bl	8002ea0 <send_debug_logs>
 8007236:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007238:	e003      	b.n	8007242 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <astronode_send_mgi_rr+0x150>)
 800723c:	0018      	movs	r0, r3
 800723e:	f7fb fe2f 	bl	8002ea0 <send_debug_logs>
}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	b06d      	add	sp, #436	; 0x1b4
 8007248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	fffffe68 	.word	0xfffffe68
 8007250:	08011ae8 	.word	0x08011ae8
 8007254:	08011af8 	.word	0x08011af8
 8007258:	08011afc 	.word	0x08011afc

0800725c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800725c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725e:	b0ed      	sub	sp, #436	; 0x1b4
 8007260:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007262:	21c8      	movs	r1, #200	; 0xc8
 8007264:	2318      	movs	r3, #24
 8007266:	18cb      	adds	r3, r1, r3
 8007268:	19db      	adds	r3, r3, r7
 800726a:	0018      	movs	r0, r3
 800726c:	23c6      	movs	r3, #198	; 0xc6
 800726e:	001a      	movs	r2, r3
 8007270:	2100      	movs	r1, #0
 8007272:	f003 fb7f 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007276:	4b4a      	ldr	r3, [pc, #296]	; (80073a0 <astronode_send_msn_rr+0x144>)
 8007278:	26cc      	movs	r6, #204	; 0xcc
 800727a:	0076      	lsls	r6, r6, #1
 800727c:	199b      	adds	r3, r3, r6
 800727e:	2218      	movs	r2, #24
 8007280:	4694      	mov	ip, r2
 8007282:	44bc      	add	ip, r7
 8007284:	4463      	add	r3, ip
 8007286:	0018      	movs	r0, r3
 8007288:	23c6      	movs	r3, #198	; 0xc6
 800728a:	001a      	movs	r2, r3
 800728c:	2100      	movs	r1, #0
 800728e:	f003 fb71 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007292:	21c8      	movs	r1, #200	; 0xc8
 8007294:	2318      	movs	r3, #24
 8007296:	18cb      	adds	r3, r1, r3
 8007298:	19db      	adds	r3, r3, r7
 800729a:	221a      	movs	r2, #26
 800729c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800729e:	2318      	movs	r3, #24
 80072a0:	18fa      	adds	r2, r7, r3
 80072a2:	2318      	movs	r3, #24
 80072a4:	18cb      	adds	r3, r1, r3
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	0011      	movs	r1, r2
 80072aa:	0018      	movs	r0, r3
 80072ac:	f001 f8f8 	bl	80084a0 <astronode_transport_send_receive>
 80072b0:	0003      	movs	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d16f      	bne.n	8007396 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80072b6:	4b3a      	ldr	r3, [pc, #232]	; (80073a0 <astronode_send_msn_rr+0x144>)
 80072b8:	0032      	movs	r2, r6
 80072ba:	189b      	adds	r3, r3, r2
 80072bc:	2118      	movs	r1, #24
 80072be:	468c      	mov	ip, r1
 80072c0:	44bc      	add	ip, r7
 80072c2:	4463      	add	r3, ip
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b9a      	cmp	r3, #154	; 0x9a
 80072c8:	d161      	bne.n	800738e <astronode_send_msn_rr+0x132>
        {
 80072ca:	466b      	mov	r3, sp
 80072cc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80072ce:	4b34      	ldr	r3, [pc, #208]	; (80073a0 <astronode_send_msn_rr+0x144>)
 80072d0:	189b      	adds	r3, r3, r2
 80072d2:	2218      	movs	r2, #24
 80072d4:	4694      	mov	ip, r2
 80072d6:	44bc      	add	ip, r7
 80072d8:	4463      	add	r3, ip
 80072da:	22c4      	movs	r2, #196	; 0xc4
 80072dc:	5a9b      	ldrh	r3, [r3, r2]
 80072de:	001a      	movs	r2, r3
 80072e0:	3a01      	subs	r2, #1
 80072e2:	21ca      	movs	r1, #202	; 0xca
 80072e4:	0049      	lsls	r1, r1, #1
 80072e6:	2018      	movs	r0, #24
 80072e8:	1809      	adds	r1, r1, r0
 80072ea:	19c9      	adds	r1, r1, r7
 80072ec:	600a      	str	r2, [r1, #0]
 80072ee:	001c      	movs	r4, r3
 80072f0:	2200      	movs	r2, #0
 80072f2:	0015      	movs	r5, r2
 80072f4:	0020      	movs	r0, r4
 80072f6:	0029      	movs	r1, r5
 80072f8:	0004      	movs	r4, r0
 80072fa:	0f62      	lsrs	r2, r4, #29
 80072fc:	000c      	movs	r4, r1
 80072fe:	00e4      	lsls	r4, r4, #3
 8007300:	617c      	str	r4, [r7, #20]
 8007302:	697c      	ldr	r4, [r7, #20]
 8007304:	4314      	orrs	r4, r2
 8007306:	617c      	str	r4, [r7, #20]
 8007308:	0001      	movs	r1, r0
 800730a:	00c9      	lsls	r1, r1, #3
 800730c:	6139      	str	r1, [r7, #16]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	6838      	ldr	r0, [r7, #0]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	0004      	movs	r4, r0
 800731a:	0f62      	lsrs	r2, r4, #29
 800731c:	000c      	movs	r4, r1
 800731e:	00e4      	lsls	r4, r4, #3
 8007320:	60fc      	str	r4, [r7, #12]
 8007322:	68fc      	ldr	r4, [r7, #12]
 8007324:	4314      	orrs	r4, r2
 8007326:	60fc      	str	r4, [r7, #12]
 8007328:	0001      	movs	r1, r0
 800732a:	00ca      	lsls	r2, r1, #3
 800732c:	60ba      	str	r2, [r7, #8]
 800732e:	3307      	adds	r3, #7
 8007330:	08db      	lsrs	r3, r3, #3
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4669      	mov	r1, sp
 8007336:	1acb      	subs	r3, r1, r3
 8007338:	469d      	mov	sp, r3
 800733a:	466b      	mov	r3, sp
 800733c:	3300      	adds	r3, #0
 800733e:	24c8      	movs	r4, #200	; 0xc8
 8007340:	0064      	lsls	r4, r4, #1
 8007342:	2218      	movs	r2, #24
 8007344:	18a2      	adds	r2, r4, r2
 8007346:	19d1      	adds	r1, r2, r7
 8007348:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <astronode_send_msn_rr+0x148>)
 800734c:	0018      	movs	r0, r3
 800734e:	f7fb fda7 	bl	8002ea0 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <astronode_send_msn_rr+0x144>)
 8007354:	22cc      	movs	r2, #204	; 0xcc
 8007356:	0052      	lsls	r2, r2, #1
 8007358:	189b      	adds	r3, r3, r2
 800735a:	2218      	movs	r2, #24
 800735c:	4694      	mov	ip, r2
 800735e:	44bc      	add	ip, r7
 8007360:	4463      	add	r3, ip
 8007362:	22c4      	movs	r2, #196	; 0xc4
 8007364:	5a9b      	ldrh	r3, [r3, r2]
 8007366:	0019      	movs	r1, r3
 8007368:	2318      	movs	r3, #24
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	3301      	adds	r3, #1
 800736e:	4a0e      	ldr	r2, [pc, #56]	; (80073a8 <astronode_send_msn_rr+0x14c>)
 8007370:	2018      	movs	r0, #24
 8007372:	1820      	adds	r0, r4, r0
 8007374:	19c0      	adds	r0, r0, r7
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	f003 fa32 	bl	800a7e0 <snprintf>
            send_debug_logs(serial_number);
 800737c:	2318      	movs	r3, #24
 800737e:	18e3      	adds	r3, r4, r3
 8007380:	19db      	adds	r3, r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb fd8b 	bl	8002ea0 <send_debug_logs>
 800738a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800738c:	e003      	b.n	8007396 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800738e:	4b07      	ldr	r3, [pc, #28]	; (80073ac <astronode_send_msn_rr+0x150>)
 8007390:	0018      	movs	r0, r3
 8007392:	f7fb fd85 	bl	8002ea0 <send_debug_logs>
}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	46bd      	mov	sp, r7
 800739a:	b06d      	add	sp, #436	; 0x1b4
 800739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	fffffe68 	.word	0xfffffe68
 80073a4:	08011b18 	.word	0x08011b18
 80073a8:	08011af8 	.word	0x08011af8
 80073ac:	08011b34 	.word	0x08011b34

080073b0 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 80073b0:	b5b0      	push	{r4, r5, r7, lr}
 80073b2:	b0fa      	sub	sp, #488	; 0x1e8
 80073b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80073b6:	258e      	movs	r5, #142	; 0x8e
 80073b8:	006d      	lsls	r5, r5, #1
 80073ba:	197b      	adds	r3, r7, r5
 80073bc:	0018      	movs	r0, r3
 80073be:	23c6      	movs	r3, #198	; 0xc6
 80073c0:	001a      	movs	r2, r3
 80073c2:	2100      	movs	r1, #0
 80073c4:	f003 fad6 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 80073c8:	4b26      	ldr	r3, [pc, #152]	; (8007464 <astronode_send_nco_rr+0xb4>)
 80073ca:	24f4      	movs	r4, #244	; 0xf4
 80073cc:	0064      	lsls	r4, r4, #1
 80073ce:	191b      	adds	r3, r3, r4
 80073d0:	19db      	adds	r3, r3, r7
 80073d2:	0018      	movs	r0, r3
 80073d4:	23c6      	movs	r3, #198	; 0xc6
 80073d6:	001a      	movs	r2, r3
 80073d8:	2100      	movs	r1, #0
 80073da:	f003 facb 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 80073de:	197b      	adds	r3, r7, r5
 80073e0:	2218      	movs	r2, #24
 80073e2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80073e4:	2354      	movs	r3, #84	; 0x54
 80073e6:	18fa      	adds	r2, r7, r3
 80073e8:	197b      	adds	r3, r7, r5
 80073ea:	0011      	movs	r1, r2
 80073ec:	0018      	movs	r0, r3
 80073ee:	f001 f857 	bl	80084a0 <astronode_transport_send_receive>
 80073f2:	0003      	movs	r3, r0
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d131      	bne.n	800745c <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <astronode_send_nco_rr+0xb4>)
 80073fa:	0021      	movs	r1, r4
 80073fc:	185b      	adds	r3, r3, r1
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b98      	cmp	r3, #152	; 0x98
 8007404:	d126      	bne.n	8007454 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007406:	4b17      	ldr	r3, [pc, #92]	; (8007464 <astronode_send_nco_rr+0xb4>)
 8007408:	185b      	adds	r3, r3, r1
 800740a:	19db      	adds	r3, r3, r7
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007410:	4b14      	ldr	r3, [pc, #80]	; (8007464 <astronode_send_nco_rr+0xb4>)
 8007412:	185b      	adds	r3, r3, r1
 8007414:	19db      	adds	r3, r3, r7
 8007416:	789b      	ldrb	r3, [r3, #2]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 800741c:	4b11      	ldr	r3, [pc, #68]	; (8007464 <astronode_send_nco_rr+0xb4>)
 800741e:	185b      	adds	r3, r3, r1
 8007420:	19db      	adds	r3, r3, r7
 8007422:	78db      	ldrb	r3, [r3, #3]
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007428:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <astronode_send_nco_rr+0xb4>)
 800742a:	185b      	adds	r3, r3, r1
 800742c:	19db      	adds	r3, r3, r7
 800742e:	791b      	ldrb	r3, [r3, #4]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007434:	22f2      	movs	r2, #242	; 0xf2
 8007436:	0052      	lsls	r2, r2, #1
 8007438:	18b9      	adds	r1, r7, r2
 800743a:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 800743c:	18bb      	adds	r3, r7, r2
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4909      	ldr	r1, [pc, #36]	; (8007468 <astronode_send_nco_rr+0xb8>)
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	0018      	movs	r0, r3
 8007446:	f003 f9ff 	bl	800a848 <sprintf>
            send_debug_logs(str);
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	0018      	movs	r0, r3
 800744e:	f7fb fd27 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 8007452:	e003      	b.n	800745c <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <astronode_send_nco_rr+0xbc>)
 8007456:	0018      	movs	r0, r3
 8007458:	f7fb fd22 	bl	8002ea0 <send_debug_logs>
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b07a      	add	sp, #488	; 0x1e8
 8007462:	bdb0      	pop	{r4, r5, r7, pc}
 8007464:	fffffe6c 	.word	0xfffffe6c
 8007468:	08011b5c 	.word	0x08011b5c
 800746c:	08011ba4 	.word	0x08011ba4

08007470 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8007470:	b5b0      	push	{r4, r5, r7, lr}
 8007472:	b0e4      	sub	sp, #400	; 0x190
 8007474:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007476:	24c8      	movs	r4, #200	; 0xc8
 8007478:	193b      	adds	r3, r7, r4
 800747a:	0018      	movs	r0, r3
 800747c:	23c6      	movs	r3, #198	; 0xc6
 800747e:	001a      	movs	r2, r3
 8007480:	2100      	movs	r1, #0
 8007482:	f003 fa77 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007486:	4b31      	ldr	r3, [pc, #196]	; (800754c <astronode_send_evt_rr+0xdc>)
 8007488:	25c8      	movs	r5, #200	; 0xc8
 800748a:	006d      	lsls	r5, r5, #1
 800748c:	195b      	adds	r3, r3, r5
 800748e:	19db      	adds	r3, r3, r7
 8007490:	0018      	movs	r0, r3
 8007492:	23c6      	movs	r3, #198	; 0xc6
 8007494:	001a      	movs	r2, r3
 8007496:	2100      	movs	r1, #0
 8007498:	f003 fa6c 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 800749c:	193b      	adds	r3, r7, r4
 800749e:	2265      	movs	r2, #101	; 0x65
 80074a0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80074a2:	003a      	movs	r2, r7
 80074a4:	193b      	adds	r3, r7, r4
 80074a6:	0011      	movs	r1, r2
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 fff9 	bl	80084a0 <astronode_transport_send_receive>
 80074ae:	0003      	movs	r3, r0
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d147      	bne.n	8007544 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80074b4:	4b25      	ldr	r3, [pc, #148]	; (800754c <astronode_send_evt_rr+0xdc>)
 80074b6:	195b      	adds	r3, r3, r5
 80074b8:	19db      	adds	r3, r3, r7
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2be5      	cmp	r3, #229	; 0xe5
 80074be:	d141      	bne.n	8007544 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80074c0:	4b22      	ldr	r3, [pc, #136]	; (800754c <astronode_send_evt_rr+0xdc>)
 80074c2:	195b      	adds	r3, r3, r5
 80074c4:	19db      	adds	r3, r3, r7
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	001a      	movs	r2, r3
 80074ca:	2301      	movs	r3, #1
 80074cc:	4013      	ands	r3, r2
 80074ce:	d006      	beq.n	80074de <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80074d0:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <astronode_send_evt_rr+0xe0>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <astronode_send_evt_rr+0xe4>)
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fb fce1 	bl	8002ea0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80074de:	4b1b      	ldr	r3, [pc, #108]	; (800754c <astronode_send_evt_rr+0xdc>)
 80074e0:	22c8      	movs	r2, #200	; 0xc8
 80074e2:	0052      	lsls	r2, r2, #1
 80074e4:	189b      	adds	r3, r3, r2
 80074e6:	19db      	adds	r3, r3, r7
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	001a      	movs	r2, r3
 80074ec:	2302      	movs	r3, #2
 80074ee:	4013      	ands	r3, r2
 80074f0:	d006      	beq.n	8007500 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80074f2:	4b19      	ldr	r3, [pc, #100]	; (8007558 <astronode_send_evt_rr+0xe8>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80074f8:	4b18      	ldr	r3, [pc, #96]	; (800755c <astronode_send_evt_rr+0xec>)
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7fb fcd0 	bl	8002ea0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007500:	4b12      	ldr	r3, [pc, #72]	; (800754c <astronode_send_evt_rr+0xdc>)
 8007502:	22c8      	movs	r2, #200	; 0xc8
 8007504:	0052      	lsls	r2, r2, #1
 8007506:	189b      	adds	r3, r3, r2
 8007508:	19db      	adds	r3, r3, r7
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	001a      	movs	r2, r3
 800750e:	2304      	movs	r3, #4
 8007510:	4013      	ands	r3, r2
 8007512:	d006      	beq.n	8007522 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <astronode_send_evt_rr+0xf0>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <astronode_send_evt_rr+0xf4>)
 800751c:	0018      	movs	r0, r3
 800751e:	f7fb fcbf 	bl	8002ea0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007522:	4b0a      	ldr	r3, [pc, #40]	; (800754c <astronode_send_evt_rr+0xdc>)
 8007524:	22c8      	movs	r2, #200	; 0xc8
 8007526:	0052      	lsls	r2, r2, #1
 8007528:	189b      	adds	r3, r3, r2
 800752a:	19db      	adds	r3, r3, r7
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	001a      	movs	r2, r3
 8007530:	2308      	movs	r3, #8
 8007532:	4013      	ands	r3, r2
 8007534:	d006      	beq.n	8007544 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <astronode_send_evt_rr+0xf8>)
 8007538:	2201      	movs	r2, #1
 800753a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <astronode_send_evt_rr+0xfc>)
 800753e:	0018      	movs	r0, r3
 8007540:	f7fb fcae 	bl	8002ea0 <send_debug_logs>
            }

        }
    }
}
 8007544:	46c0      	nop			; (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	b064      	add	sp, #400	; 0x190
 800754a:	bdb0      	pop	{r4, r5, r7, pc}
 800754c:	fffffe70 	.word	0xfffffe70
 8007550:	20000d60 	.word	0x20000d60
 8007554:	08011bdc 	.word	0x08011bdc
 8007558:	20000d61 	.word	0x20000d61
 800755c:	08011c00 	.word	0x08011c00
 8007560:	20000d62 	.word	0x20000d62
 8007564:	08011c18 	.word	0x08011c18
 8007568:	20000d63 	.word	0x20000d63
 800756c:	08011c2c 	.word	0x08011c2c

08007570 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b0e7      	sub	sp, #412	; 0x19c
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800757a:	24d0      	movs	r4, #208	; 0xd0
 800757c:	193b      	adds	r3, r7, r4
 800757e:	0018      	movs	r0, r3
 8007580:	23c6      	movs	r3, #198	; 0xc6
 8007582:	001a      	movs	r2, r3
 8007584:	2100      	movs	r1, #0
 8007586:	f003 f9f5 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 800758a:	4b56      	ldr	r3, [pc, #344]	; (80076e4 <astronode_send_geo_wr+0x174>)
 800758c:	26cc      	movs	r6, #204	; 0xcc
 800758e:	0076      	lsls	r6, r6, #1
 8007590:	199b      	adds	r3, r3, r6
 8007592:	19db      	adds	r3, r3, r7
 8007594:	0018      	movs	r0, r3
 8007596:	23c6      	movs	r3, #198	; 0xc6
 8007598:	001a      	movs	r2, r3
 800759a:	2100      	movs	r1, #0
 800759c:	f003 f9ea 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80075a0:	193b      	adds	r3, r7, r4
 80075a2:	2235      	movs	r2, #53	; 0x35
 80075a4:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	22c4      	movs	r2, #196	; 0xc4
 80075aa:	5a9b      	ldrh	r3, [r3, r2]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	b290      	uxth	r0, r2
 80075b0:	193a      	adds	r2, r7, r4
 80075b2:	21c4      	movs	r1, #196	; 0xc4
 80075b4:	5250      	strh	r0, [r2, r1]
 80075b6:	0019      	movs	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	193b      	adds	r3, r7, r4
 80075be:	185b      	adds	r3, r3, r1
 80075c0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1218      	asrs	r0, r3, #8
 80075c6:	0025      	movs	r5, r4
 80075c8:	197b      	adds	r3, r7, r5
 80075ca:	22c4      	movs	r2, #196	; 0xc4
 80075cc:	5a9b      	ldrh	r3, [r3, r2]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	b294      	uxth	r4, r2
 80075d2:	197a      	adds	r2, r7, r5
 80075d4:	21c4      	movs	r1, #196	; 0xc4
 80075d6:	5254      	strh	r4, [r2, r1]
 80075d8:	0019      	movs	r1, r3
 80075da:	b2c2      	uxtb	r2, r0
 80075dc:	002c      	movs	r4, r5
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	185b      	adds	r3, r3, r1
 80075e2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	1418      	asrs	r0, r3, #16
 80075e8:	0025      	movs	r5, r4
 80075ea:	197b      	adds	r3, r7, r5
 80075ec:	22c4      	movs	r2, #196	; 0xc4
 80075ee:	5a9b      	ldrh	r3, [r3, r2]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	b294      	uxth	r4, r2
 80075f4:	197a      	adds	r2, r7, r5
 80075f6:	21c4      	movs	r1, #196	; 0xc4
 80075f8:	5254      	strh	r4, [r2, r1]
 80075fa:	0019      	movs	r1, r3
 80075fc:	b2c2      	uxtb	r2, r0
 80075fe:	002c      	movs	r4, r5
 8007600:	193b      	adds	r3, r7, r4
 8007602:	185b      	adds	r3, r3, r1
 8007604:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	1618      	asrs	r0, r3, #24
 800760a:	0025      	movs	r5, r4
 800760c:	197b      	adds	r3, r7, r5
 800760e:	22c4      	movs	r2, #196	; 0xc4
 8007610:	5a9b      	ldrh	r3, [r3, r2]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	b294      	uxth	r4, r2
 8007616:	197a      	adds	r2, r7, r5
 8007618:	21c4      	movs	r1, #196	; 0xc4
 800761a:	5254      	strh	r4, [r2, r1]
 800761c:	0019      	movs	r1, r3
 800761e:	b2c2      	uxtb	r2, r0
 8007620:	002c      	movs	r4, r5
 8007622:	193b      	adds	r3, r7, r4
 8007624:	185b      	adds	r3, r3, r1
 8007626:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007628:	193b      	adds	r3, r7, r4
 800762a:	22c4      	movs	r2, #196	; 0xc4
 800762c:	5a9b      	ldrh	r3, [r3, r2]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	b290      	uxth	r0, r2
 8007632:	193a      	adds	r2, r7, r4
 8007634:	21c4      	movs	r1, #196	; 0xc4
 8007636:	5250      	strh	r0, [r2, r1]
 8007638:	0019      	movs	r1, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	193b      	adds	r3, r7, r4
 8007640:	185b      	adds	r3, r3, r1
 8007642:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	1218      	asrs	r0, r3, #8
 8007648:	0025      	movs	r5, r4
 800764a:	197b      	adds	r3, r7, r5
 800764c:	22c4      	movs	r2, #196	; 0xc4
 800764e:	5a9b      	ldrh	r3, [r3, r2]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	b294      	uxth	r4, r2
 8007654:	197a      	adds	r2, r7, r5
 8007656:	21c4      	movs	r1, #196	; 0xc4
 8007658:	5254      	strh	r4, [r2, r1]
 800765a:	0019      	movs	r1, r3
 800765c:	b2c2      	uxtb	r2, r0
 800765e:	002c      	movs	r4, r5
 8007660:	193b      	adds	r3, r7, r4
 8007662:	185b      	adds	r3, r3, r1
 8007664:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	1418      	asrs	r0, r3, #16
 800766a:	0025      	movs	r5, r4
 800766c:	197b      	adds	r3, r7, r5
 800766e:	22c4      	movs	r2, #196	; 0xc4
 8007670:	5a9b      	ldrh	r3, [r3, r2]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	b294      	uxth	r4, r2
 8007676:	197a      	adds	r2, r7, r5
 8007678:	21c4      	movs	r1, #196	; 0xc4
 800767a:	5254      	strh	r4, [r2, r1]
 800767c:	0019      	movs	r1, r3
 800767e:	b2c2      	uxtb	r2, r0
 8007680:	002c      	movs	r4, r5
 8007682:	193b      	adds	r3, r7, r4
 8007684:	185b      	adds	r3, r3, r1
 8007686:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	1618      	asrs	r0, r3, #24
 800768c:	0025      	movs	r5, r4
 800768e:	197b      	adds	r3, r7, r5
 8007690:	22c4      	movs	r2, #196	; 0xc4
 8007692:	5a9b      	ldrh	r3, [r3, r2]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	b294      	uxth	r4, r2
 8007698:	197a      	adds	r2, r7, r5
 800769a:	21c4      	movs	r1, #196	; 0xc4
 800769c:	5254      	strh	r4, [r2, r1]
 800769e:	0019      	movs	r1, r3
 80076a0:	b2c2      	uxtb	r2, r0
 80076a2:	0028      	movs	r0, r5
 80076a4:	183b      	adds	r3, r7, r0
 80076a6:	185b      	adds	r3, r3, r1
 80076a8:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80076aa:	2308      	movs	r3, #8
 80076ac:	18fa      	adds	r2, r7, r3
 80076ae:	183b      	adds	r3, r7, r0
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 fef4 	bl	80084a0 <astronode_transport_send_receive>
 80076b8:	0003      	movs	r3, r0
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10e      	bne.n	80076dc <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <astronode_send_geo_wr+0x174>)
 80076c0:	199b      	adds	r3, r3, r6
 80076c2:	19db      	adds	r3, r3, r7
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2bb5      	cmp	r3, #181	; 0xb5
 80076c8:	d104      	bne.n	80076d4 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <astronode_send_geo_wr+0x178>)
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7fb fbe7 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80076d2:	e003      	b.n	80076dc <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <astronode_send_geo_wr+0x17c>)
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7fb fbe2 	bl	8002ea0 <send_debug_logs>
}
 80076dc:	46c0      	nop			; (mov r8, r8)
 80076de:	46bd      	mov	sp, r7
 80076e0:	b067      	add	sp, #412	; 0x19c
 80076e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e4:	fffffe70 	.word	0xfffffe70
 80076e8:	08011c40 	.word	0x08011c40
 80076ec:	08011c6c 	.word	0x08011c6c

080076f0 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80076f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f2:	b0e7      	sub	sp, #412	; 0x19c
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6039      	str	r1, [r7, #0]
 80076f8:	0011      	movs	r1, r2
 80076fa:	4b3e      	ldr	r3, [pc, #248]	; (80077f4 <astronode_send_pld_er+0x104>)
 80076fc:	26cc      	movs	r6, #204	; 0xcc
 80076fe:	0076      	lsls	r6, r6, #1
 8007700:	199b      	adds	r3, r3, r6
 8007702:	19db      	adds	r3, r3, r7
 8007704:	1c02      	adds	r2, r0, #0
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	4b3b      	ldr	r3, [pc, #236]	; (80077f8 <astronode_send_pld_er+0x108>)
 800770a:	199b      	adds	r3, r3, r6
 800770c:	19db      	adds	r3, r3, r7
 800770e:	1c0a      	adds	r2, r1, #0
 8007710:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007712:	24d0      	movs	r4, #208	; 0xd0
 8007714:	193b      	adds	r3, r7, r4
 8007716:	0018      	movs	r0, r3
 8007718:	23c6      	movs	r3, #198	; 0xc6
 800771a:	001a      	movs	r2, r3
 800771c:	2100      	movs	r1, #0
 800771e:	f003 f929 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007722:	4b36      	ldr	r3, [pc, #216]	; (80077fc <astronode_send_pld_er+0x10c>)
 8007724:	199b      	adds	r3, r3, r6
 8007726:	19db      	adds	r3, r3, r7
 8007728:	0018      	movs	r0, r3
 800772a:	23c6      	movs	r3, #198	; 0xc6
 800772c:	001a      	movs	r2, r3
 800772e:	2100      	movs	r1, #0
 8007730:	f003 f920 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007734:	193b      	adds	r3, r7, r4
 8007736:	2225      	movs	r2, #37	; 0x25
 8007738:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800773a:	193b      	adds	r3, r7, r4
 800773c:	22c4      	movs	r2, #196	; 0xc4
 800773e:	5a9b      	ldrh	r3, [r3, r2]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	b290      	uxth	r0, r2
 8007744:	193a      	adds	r2, r7, r4
 8007746:	21c4      	movs	r1, #196	; 0xc4
 8007748:	5250      	strh	r0, [r2, r1]
 800774a:	0019      	movs	r1, r3
 800774c:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <astronode_send_pld_er+0x104>)
 800774e:	199b      	adds	r3, r3, r6
 8007750:	19db      	adds	r3, r3, r7
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	193b      	adds	r3, r7, r4
 8007758:	185b      	adds	r3, r3, r1
 800775a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <astronode_send_pld_er+0x104>)
 800775e:	199b      	adds	r3, r3, r6
 8007760:	19db      	adds	r3, r3, r7
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b298      	uxth	r0, r3
 8007768:	0025      	movs	r5, r4
 800776a:	197b      	adds	r3, r7, r5
 800776c:	22c4      	movs	r2, #196	; 0xc4
 800776e:	5a9b      	ldrh	r3, [r3, r2]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	b294      	uxth	r4, r2
 8007774:	197a      	adds	r2, r7, r5
 8007776:	21c4      	movs	r1, #196	; 0xc4
 8007778:	5254      	strh	r4, [r2, r1]
 800777a:	0019      	movs	r1, r3
 800777c:	b2c2      	uxtb	r2, r0
 800777e:	002c      	movs	r4, r5
 8007780:	193b      	adds	r3, r7, r4
 8007782:	185b      	adds	r3, r3, r1
 8007784:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8007786:	193b      	adds	r3, r7, r4
 8007788:	22c4      	movs	r2, #196	; 0xc4
 800778a:	5a9b      	ldrh	r3, [r3, r2]
 800778c:	001a      	movs	r2, r3
 800778e:	193b      	adds	r3, r7, r4
 8007790:	189b      	adds	r3, r3, r2
 8007792:	1c58      	adds	r0, r3, #1
 8007794:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <astronode_send_pld_er+0x108>)
 8007796:	199b      	adds	r3, r3, r6
 8007798:	19db      	adds	r3, r3, r7
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	0019      	movs	r1, r3
 80077a0:	f003 f9cd 	bl	800ab3e <memcpy>
    request.payload_len = 2 + payload_length;
 80077a4:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <astronode_send_pld_er+0x108>)
 80077a6:	199b      	adds	r3, r3, r6
 80077a8:	19db      	adds	r3, r3, r7
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	3302      	adds	r3, #2
 80077ae:	b299      	uxth	r1, r3
 80077b0:	193b      	adds	r3, r7, r4
 80077b2:	22c4      	movs	r2, #196	; 0xc4
 80077b4:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80077b6:	2308      	movs	r3, #8
 80077b8:	18fa      	adds	r2, r7, r3
 80077ba:	193b      	adds	r3, r7, r4
 80077bc:	0011      	movs	r1, r2
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 fe6e 	bl	80084a0 <astronode_transport_send_receive>
 80077c4:	0003      	movs	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d10f      	bne.n	80077ea <astronode_send_pld_er+0xfa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80077ca:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <astronode_send_pld_er+0x10c>)
 80077cc:	199b      	adds	r3, r3, r6
 80077ce:	19db      	adds	r3, r3, r7
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2ba5      	cmp	r3, #165	; 0xa5
 80077d4:	d105      	bne.n	80077e2 <astronode_send_pld_er+0xf2>
        {
            send_debug_logs("Payload was successfully queued.");
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <astronode_send_pld_er+0x110>)
 80077d8:	0018      	movs	r0, r3
 80077da:	f7fb fb61 	bl	8002ea0 <send_debug_logs>
            return true ;
 80077de:	2301      	movs	r3, #1
 80077e0:	e004      	b.n	80077ec <astronode_send_pld_er+0xfc>
        }
        else
        {
            send_debug_logs("Payload failed to be queued.");
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <astronode_send_pld_er+0x114>)
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7fb fb5b 	bl	8002ea0 <send_debug_logs>
        }
    }
    return false ;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b067      	add	sp, #412	; 0x19c
 80077f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f4:	fffffe6e 	.word	0xfffffe6e
 80077f8:	fffffe6c 	.word	0xfffffe6c
 80077fc:	fffffe70 	.word	0xfffffe70
 8007800:	08011ce4 	.word	0x08011ce4
 8007804:	08011d08 	.word	0x08011d08

08007808 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b0e4      	sub	sp, #400	; 0x190
 800780c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800780e:	24c8      	movs	r4, #200	; 0xc8
 8007810:	193b      	adds	r3, r7, r4
 8007812:	0018      	movs	r0, r3
 8007814:	23c6      	movs	r3, #198	; 0xc6
 8007816:	001a      	movs	r2, r3
 8007818:	2100      	movs	r1, #0
 800781a:	f003 f8ab 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <astronode_send_pld_fr+0x6c>)
 8007820:	25c8      	movs	r5, #200	; 0xc8
 8007822:	006d      	lsls	r5, r5, #1
 8007824:	195b      	adds	r3, r3, r5
 8007826:	19db      	adds	r3, r3, r7
 8007828:	0018      	movs	r0, r3
 800782a:	23c6      	movs	r3, #198	; 0xc6
 800782c:	001a      	movs	r2, r3
 800782e:	2100      	movs	r1, #0
 8007830:	f003 f8a0 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8007834:	193b      	adds	r3, r7, r4
 8007836:	2227      	movs	r2, #39	; 0x27
 8007838:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800783a:	003a      	movs	r2, r7
 800783c:	193b      	adds	r3, r7, r4
 800783e:	0011      	movs	r1, r2
 8007840:	0018      	movs	r0, r3
 8007842:	f000 fe2d 	bl	80084a0 <astronode_transport_send_receive>
 8007846:	0003      	movs	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10e      	bne.n	800786a <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <astronode_send_pld_fr+0x6c>)
 800784e:	195b      	adds	r3, r3, r5
 8007850:	19db      	adds	r3, r3, r7
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2ba7      	cmp	r3, #167	; 0xa7
 8007856:	d104      	bne.n	8007862 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("Entire payload queue has been cleared.");
 8007858:	4b07      	ldr	r3, [pc, #28]	; (8007878 <astronode_send_pld_fr+0x70>)
 800785a:	0018      	movs	r0, r3
 800785c:	f7fb fb20 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to clear the payload queue.");
        }
    }
}
 8007860:	e003      	b.n	800786a <astronode_send_pld_fr+0x62>
            send_debug_logs("Failed to clear the payload queue.");
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <astronode_send_pld_fr+0x74>)
 8007864:	0018      	movs	r0, r3
 8007866:	f7fb fb1b 	bl	8002ea0 <send_debug_logs>
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	46bd      	mov	sp, r7
 800786e:	b064      	add	sp, #400	; 0x190
 8007870:	bdb0      	pop	{r4, r5, r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	fffffe70 	.word	0xfffffe70
 8007878:	08011d28 	.word	0x08011d28
 800787c:	08011d50 	.word	0x08011d50

08007880 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b0e4      	sub	sp, #400	; 0x190
 8007884:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007886:	24c8      	movs	r4, #200	; 0xc8
 8007888:	193b      	adds	r3, r7, r4
 800788a:	0018      	movs	r0, r3
 800788c:	23c6      	movs	r3, #198	; 0xc6
 800788e:	001a      	movs	r2, r3
 8007890:	2100      	movs	r1, #0
 8007892:	f003 f86f 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <astronode_send_res_cr+0x70>)
 8007898:	25c8      	movs	r5, #200	; 0xc8
 800789a:	006d      	lsls	r5, r5, #1
 800789c:	195b      	adds	r3, r3, r5
 800789e:	19db      	adds	r3, r3, r7
 80078a0:	0018      	movs	r0, r3
 80078a2:	23c6      	movs	r3, #198	; 0xc6
 80078a4:	001a      	movs	r2, r3
 80078a6:	2100      	movs	r1, #0
 80078a8:	f003 f864 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80078ac:	193b      	adds	r3, r7, r4
 80078ae:	2255      	movs	r2, #85	; 0x55
 80078b0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80078b2:	003a      	movs	r2, r7
 80078b4:	193b      	adds	r3, r7, r4
 80078b6:	0011      	movs	r1, r2
 80078b8:	0018      	movs	r0, r3
 80078ba:	f000 fdf1 	bl	80084a0 <astronode_transport_send_receive>
 80078be:	0003      	movs	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d111      	bne.n	80078e8 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <astronode_send_res_cr+0x70>)
 80078c6:	195b      	adds	r3, r3, r5
 80078c8:	19db      	adds	r3, r3, r7
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2bd5      	cmp	r3, #213	; 0xd5
 80078ce:	d107      	bne.n	80078e0 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80078d0:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <astronode_send_res_cr+0x74>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <astronode_send_res_cr+0x78>)
 80078d8:	0018      	movs	r0, r3
 80078da:	f7fb fae1 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 80078de:	e003      	b.n	80078e8 <astronode_send_res_cr+0x68>
            send_debug_logs("No reset to clear.");
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <astronode_send_res_cr+0x7c>)
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7fb fadc 	bl	8002ea0 <send_debug_logs>
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b064      	add	sp, #400	; 0x190
 80078ee:	bdb0      	pop	{r4, r5, r7, pc}
 80078f0:	fffffe70 	.word	0xfffffe70
 80078f4:	20000d61 	.word	0x20000d61
 80078f8:	08011d74 	.word	0x08011d74
 80078fc:	08011d90 	.word	0x08011d90

08007900 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 8007900:	b5b0      	push	{r4, r5, r7, lr}
 8007902:	b0fa      	sub	sp, #488	; 0x1e8
 8007904:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007906:	258e      	movs	r5, #142	; 0x8e
 8007908:	006d      	lsls	r5, r5, #1
 800790a:	197b      	adds	r3, r7, r5
 800790c:	0018      	movs	r0, r3
 800790e:	23c6      	movs	r3, #198	; 0xc6
 8007910:	001a      	movs	r2, r3
 8007912:	2100      	movs	r1, #0
 8007914:	f003 f82e 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007918:	4b26      	ldr	r3, [pc, #152]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 800791a:	24f4      	movs	r4, #244	; 0xf4
 800791c:	0064      	lsls	r4, r4, #1
 800791e:	191b      	adds	r3, r3, r4
 8007920:	19db      	adds	r3, r3, r7
 8007922:	0018      	movs	r0, r3
 8007924:	23c6      	movs	r3, #198	; 0xc6
 8007926:	001a      	movs	r2, r3
 8007928:	2100      	movs	r1, #0
 800792a:	f003 f823 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 800792e:	197b      	adds	r3, r7, r5
 8007930:	2217      	movs	r2, #23
 8007932:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007934:	2354      	movs	r3, #84	; 0x54
 8007936:	18fa      	adds	r2, r7, r3
 8007938:	197b      	adds	r3, r7, r5
 800793a:	0011      	movs	r1, r2
 800793c:	0018      	movs	r0, r3
 800793e:	f000 fdaf 	bl	80084a0 <astronode_transport_send_receive>
 8007942:	0003      	movs	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d131      	bne.n	80079ac <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 800794a:	0021      	movs	r1, r4
 800794c:	185b      	adds	r3, r3, r1
 800794e:	19db      	adds	r3, r3, r7
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b97      	cmp	r3, #151	; 0x97
 8007954:	d126      	bne.n	80079a4 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8007956:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 8007958:	185b      	adds	r3, r3, r1
 800795a:	19db      	adds	r3, r3, r7
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007960:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 8007962:	185b      	adds	r3, r3, r1
 8007964:	19db      	adds	r3, r3, r7
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 800796e:	185b      	adds	r3, r3, r1
 8007970:	19db      	adds	r3, r3, r7
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	041b      	lsls	r3, r3, #16
 8007976:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <astronode_send_rtc_rr+0xb4>)
 800797a:	185b      	adds	r3, r3, r1
 800797c:	19db      	adds	r3, r3, r7
 800797e:	791b      	ldrb	r3, [r3, #4]
 8007980:	061b      	lsls	r3, r3, #24
 8007982:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007984:	22f2      	movs	r2, #242	; 0xf2
 8007986:	0052      	lsls	r2, r2, #1
 8007988:	18b9      	adds	r1, r7, r2
 800798a:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 800798c:	18bb      	adds	r3, r7, r2
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4909      	ldr	r1, [pc, #36]	; (80079b8 <astronode_send_rtc_rr+0xb8>)
 8007992:	1d3b      	adds	r3, r7, #4
 8007994:	0018      	movs	r0, r3
 8007996:	f002 ff57 	bl	800a848 <sprintf>
            send_debug_logs(str);
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	0018      	movs	r0, r3
 800799e:	f7fb fa7f 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 80079a2:	e003      	b.n	80079ac <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <astronode_send_rtc_rr+0xbc>)
 80079a6:	0018      	movs	r0, r3
 80079a8:	f7fb fa7a 	bl	8002ea0 <send_debug_logs>
}
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b07a      	add	sp, #488	; 0x1e8
 80079b2:	bdb0      	pop	{r4, r5, r7, pc}
 80079b4:	fffffe6c 	.word	0xfffffe6c
 80079b8:	08011da4 	.word	0x08011da4
 80079bc:	08011de4 	.word	0x08011de4

080079c0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80079c0:	b5b0      	push	{r4, r5, r7, lr}
 80079c2:	b0f8      	sub	sp, #480	; 0x1e0
 80079c4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80079c6:	258c      	movs	r5, #140	; 0x8c
 80079c8:	006d      	lsls	r5, r5, #1
 80079ca:	197b      	adds	r3, r7, r5
 80079cc:	0018      	movs	r0, r3
 80079ce:	23c6      	movs	r3, #198	; 0xc6
 80079d0:	001a      	movs	r2, r3
 80079d2:	2100      	movs	r1, #0
 80079d4:	f002 ffce 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <astronode_send_sak_rr+0xa0>)
 80079da:	24f0      	movs	r4, #240	; 0xf0
 80079dc:	0064      	lsls	r4, r4, #1
 80079de:	191b      	adds	r3, r3, r4
 80079e0:	19db      	adds	r3, r3, r7
 80079e2:	0018      	movs	r0, r3
 80079e4:	23c6      	movs	r3, #198	; 0xc6
 80079e6:	001a      	movs	r2, r3
 80079e8:	2100      	movs	r1, #0
 80079ea:	f002 ffc3 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80079ee:	197b      	adds	r3, r7, r5
 80079f0:	2245      	movs	r2, #69	; 0x45
 80079f2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80079f4:	2350      	movs	r3, #80	; 0x50
 80079f6:	18fa      	adds	r2, r7, r3
 80079f8:	197b      	adds	r3, r7, r5
 80079fa:	0011      	movs	r1, r2
 80079fc:	0018      	movs	r0, r3
 80079fe:	f000 fd4f 	bl	80084a0 <astronode_transport_send_receive>
 8007a02:	0003      	movs	r3, r0
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d126      	bne.n	8007a56 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <astronode_send_sak_rr+0xa0>)
 8007a0a:	191b      	adds	r3, r3, r4
 8007a0c:	19db      	adds	r3, r3, r7
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2bc5      	cmp	r3, #197	; 0xc5
 8007a12:	d11c      	bne.n	8007a4e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8007a14:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <astronode_send_sak_rr+0xa0>)
 8007a16:	191b      	adds	r3, r3, r4
 8007a18:	19db      	adds	r3, r3, r7
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	b299      	uxth	r1, r3
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <astronode_send_sak_rr+0xa0>)
 8007a20:	191b      	adds	r3, r3, r4
 8007a22:	19db      	adds	r3, r3, r7
 8007a24:	789b      	ldrb	r3, [r3, #2]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	20ef      	movs	r0, #239	; 0xef
 8007a2e:	0040      	lsls	r0, r0, #1
 8007a30:	183b      	adds	r3, r7, r0
 8007a32:	188a      	adds	r2, r1, r2
 8007a34:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8007a36:	183b      	adds	r3, r7, r0
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	490a      	ldr	r1, [pc, #40]	; (8007a64 <astronode_send_sak_rr+0xa4>)
 8007a3c:	003b      	movs	r3, r7
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f002 ff02 	bl	800a848 <sprintf>
            send_debug_logs(str);
 8007a44:	003b      	movs	r3, r7
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7fb fa2a 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007a4c:	e003      	b.n	8007a56 <astronode_send_sak_rr+0x96>
            send_debug_logs("No acknowledgment available.");
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <astronode_send_sak_rr+0xa8>)
 8007a50:	0018      	movs	r0, r3
 8007a52:	f7fb fa25 	bl	8002ea0 <send_debug_logs>
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b078      	add	sp, #480	; 0x1e0
 8007a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	fffffe70 	.word	0xfffffe70
 8007a64:	08011e00 	.word	0x08011e00
 8007a68:	08011e2c 	.word	0x08011e2c

08007a6c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007a6c:	b5b0      	push	{r4, r5, r7, lr}
 8007a6e:	b0e4      	sub	sp, #400	; 0x190
 8007a70:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a72:	24c8      	movs	r4, #200	; 0xc8
 8007a74:	193b      	adds	r3, r7, r4
 8007a76:	0018      	movs	r0, r3
 8007a78:	23c6      	movs	r3, #198	; 0xc6
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	f002 ff79 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007a82:	4b16      	ldr	r3, [pc, #88]	; (8007adc <astronode_send_sak_cr+0x70>)
 8007a84:	25c8      	movs	r5, #200	; 0xc8
 8007a86:	006d      	lsls	r5, r5, #1
 8007a88:	195b      	adds	r3, r3, r5
 8007a8a:	19db      	adds	r3, r3, r7
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	23c6      	movs	r3, #198	; 0xc6
 8007a90:	001a      	movs	r2, r3
 8007a92:	2100      	movs	r1, #0
 8007a94:	f002 ff6e 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8007a98:	193b      	adds	r3, r7, r4
 8007a9a:	2246      	movs	r2, #70	; 0x46
 8007a9c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a9e:	003a      	movs	r2, r7
 8007aa0:	193b      	adds	r3, r7, r4
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f000 fcfb 	bl	80084a0 <astronode_transport_send_receive>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d111      	bne.n	8007ad4 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <astronode_send_sak_cr+0x70>)
 8007ab2:	195b      	adds	r3, r3, r5
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2bc6      	cmp	r3, #198	; 0xc6
 8007aba:	d107      	bne.n	8007acc <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007abc:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <astronode_send_sak_cr+0x74>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <astronode_send_sak_cr+0x78>)
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f7fb f9eb 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007aca:	e003      	b.n	8007ad4 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <astronode_send_sak_cr+0x7c>)
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7fb f9e6 	bl	8002ea0 <send_debug_logs>
}
 8007ad4:	46c0      	nop			; (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b064      	add	sp, #400	; 0x190
 8007ada:	bdb0      	pop	{r4, r5, r7, pc}
 8007adc:	fffffe70 	.word	0xfffffe70
 8007ae0:	20000d60 	.word	0x20000d60
 8007ae4:	08011e4c 	.word	0x08011e4c
 8007ae8:	08011e2c 	.word	0x08011e2c

08007aec <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aee:	b0ed      	sub	sp, #436	; 0x1b4
 8007af0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007af2:	21c8      	movs	r1, #200	; 0xc8
 8007af4:	2318      	movs	r3, #24
 8007af6:	18cb      	adds	r3, r1, r3
 8007af8:	19db      	adds	r3, r3, r7
 8007afa:	0018      	movs	r0, r3
 8007afc:	23c6      	movs	r3, #198	; 0xc6
 8007afe:	001a      	movs	r2, r3
 8007b00:	2100      	movs	r1, #0
 8007b02:	f002 ff37 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007b06:	4b4a      	ldr	r3, [pc, #296]	; (8007c30 <astronode_send_mpn_rr+0x144>)
 8007b08:	26cc      	movs	r6, #204	; 0xcc
 8007b0a:	0076      	lsls	r6, r6, #1
 8007b0c:	199b      	adds	r3, r3, r6
 8007b0e:	2218      	movs	r2, #24
 8007b10:	4694      	mov	ip, r2
 8007b12:	44bc      	add	ip, r7
 8007b14:	4463      	add	r3, ip
 8007b16:	0018      	movs	r0, r3
 8007b18:	23c6      	movs	r3, #198	; 0xc6
 8007b1a:	001a      	movs	r2, r3
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f002 ff29 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007b22:	21c8      	movs	r1, #200	; 0xc8
 8007b24:	2318      	movs	r3, #24
 8007b26:	18cb      	adds	r3, r1, r3
 8007b28:	19db      	adds	r3, r3, r7
 8007b2a:	221b      	movs	r2, #27
 8007b2c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b2e:	2318      	movs	r3, #24
 8007b30:	18fa      	adds	r2, r7, r3
 8007b32:	2318      	movs	r3, #24
 8007b34:	18cb      	adds	r3, r1, r3
 8007b36:	19db      	adds	r3, r3, r7
 8007b38:	0011      	movs	r1, r2
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f000 fcb0 	bl	80084a0 <astronode_transport_send_receive>
 8007b40:	0003      	movs	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d16f      	bne.n	8007c26 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007b46:	4b3a      	ldr	r3, [pc, #232]	; (8007c30 <astronode_send_mpn_rr+0x144>)
 8007b48:	0032      	movs	r2, r6
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	2118      	movs	r1, #24
 8007b4e:	468c      	mov	ip, r1
 8007b50:	44bc      	add	ip, r7
 8007b52:	4463      	add	r3, ip
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b9b      	cmp	r3, #155	; 0x9b
 8007b58:	d161      	bne.n	8007c1e <astronode_send_mpn_rr+0x132>
        {
 8007b5a:	466b      	mov	r3, sp
 8007b5c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007b5e:	4b34      	ldr	r3, [pc, #208]	; (8007c30 <astronode_send_mpn_rr+0x144>)
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	2218      	movs	r2, #24
 8007b64:	4694      	mov	ip, r2
 8007b66:	44bc      	add	ip, r7
 8007b68:	4463      	add	r3, ip
 8007b6a:	22c4      	movs	r2, #196	; 0xc4
 8007b6c:	5a9b      	ldrh	r3, [r3, r2]
 8007b6e:	001a      	movs	r2, r3
 8007b70:	3a01      	subs	r2, #1
 8007b72:	21ca      	movs	r1, #202	; 0xca
 8007b74:	0049      	lsls	r1, r1, #1
 8007b76:	2018      	movs	r0, #24
 8007b78:	1809      	adds	r1, r1, r0
 8007b7a:	19c9      	adds	r1, r1, r7
 8007b7c:	600a      	str	r2, [r1, #0]
 8007b7e:	001c      	movs	r4, r3
 8007b80:	2200      	movs	r2, #0
 8007b82:	0015      	movs	r5, r2
 8007b84:	0020      	movs	r0, r4
 8007b86:	0029      	movs	r1, r5
 8007b88:	0004      	movs	r4, r0
 8007b8a:	0f62      	lsrs	r2, r4, #29
 8007b8c:	000c      	movs	r4, r1
 8007b8e:	00e4      	lsls	r4, r4, #3
 8007b90:	617c      	str	r4, [r7, #20]
 8007b92:	697c      	ldr	r4, [r7, #20]
 8007b94:	4314      	orrs	r4, r2
 8007b96:	617c      	str	r4, [r7, #20]
 8007b98:	0001      	movs	r1, r0
 8007b9a:	00c9      	lsls	r1, r1, #3
 8007b9c:	6139      	str	r1, [r7, #16]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	6838      	ldr	r0, [r7, #0]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	0004      	movs	r4, r0
 8007baa:	0f62      	lsrs	r2, r4, #29
 8007bac:	000c      	movs	r4, r1
 8007bae:	00e4      	lsls	r4, r4, #3
 8007bb0:	60fc      	str	r4, [r7, #12]
 8007bb2:	68fc      	ldr	r4, [r7, #12]
 8007bb4:	4314      	orrs	r4, r2
 8007bb6:	60fc      	str	r4, [r7, #12]
 8007bb8:	0001      	movs	r1, r0
 8007bba:	00ca      	lsls	r2, r1, #3
 8007bbc:	60ba      	str	r2, [r7, #8]
 8007bbe:	3307      	adds	r3, #7
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4669      	mov	r1, sp
 8007bc6:	1acb      	subs	r3, r1, r3
 8007bc8:	469d      	mov	sp, r3
 8007bca:	466b      	mov	r3, sp
 8007bcc:	3300      	adds	r3, #0
 8007bce:	24c8      	movs	r4, #200	; 0xc8
 8007bd0:	0064      	lsls	r4, r4, #1
 8007bd2:	2218      	movs	r2, #24
 8007bd4:	18a2      	adds	r2, r4, r2
 8007bd6:	19d1      	adds	r1, r2, r7
 8007bd8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007bda:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <astronode_send_mpn_rr+0x148>)
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fb f95f 	bl	8002ea0 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007be2:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <astronode_send_mpn_rr+0x144>)
 8007be4:	22cc      	movs	r2, #204	; 0xcc
 8007be6:	0052      	lsls	r2, r2, #1
 8007be8:	189b      	adds	r3, r3, r2
 8007bea:	2218      	movs	r2, #24
 8007bec:	4694      	mov	ip, r2
 8007bee:	44bc      	add	ip, r7
 8007bf0:	4463      	add	r3, ip
 8007bf2:	22c4      	movs	r2, #196	; 0xc4
 8007bf4:	5a9b      	ldrh	r3, [r3, r2]
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	2318      	movs	r3, #24
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <astronode_send_mpn_rr+0x14c>)
 8007c00:	2018      	movs	r0, #24
 8007c02:	1820      	adds	r0, r4, r0
 8007c04:	19c0      	adds	r0, r0, r7
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	f002 fdea 	bl	800a7e0 <snprintf>
            send_debug_logs(product_number);
 8007c0c:	2318      	movs	r3, #24
 8007c0e:	18e3      	adds	r3, r4, r3
 8007c10:	19db      	adds	r3, r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	0018      	movs	r0, r3
 8007c16:	f7fb f943 	bl	8002ea0 <send_debug_logs>
 8007c1a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007c1c:	e003      	b.n	8007c26 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <astronode_send_mpn_rr+0x150>)
 8007c20:	0018      	movs	r0, r3
 8007c22:	f7fb f93d 	bl	8002ea0 <send_debug_logs>
}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b06d      	add	sp, #436	; 0x1b4
 8007c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	fffffe68 	.word	0xfffffe68
 8007c34:	08011f1c 	.word	0x08011f1c
 8007c38:	08011af8 	.word	0x08011af8
 8007c3c:	08011b34 	.word	0x08011b34

08007c40 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8007c40:	b5b0      	push	{r4, r5, r7, lr}
 8007c42:	b0e4      	sub	sp, #400	; 0x190
 8007c44:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c46:	24c8      	movs	r4, #200	; 0xc8
 8007c48:	193b      	adds	r3, r7, r4
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	23c6      	movs	r3, #198	; 0xc6
 8007c4e:	001a      	movs	r2, r3
 8007c50:	2100      	movs	r1, #0
 8007c52:	f002 fe8f 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007c56:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <astronode_send_cmd_cr+0x70>)
 8007c58:	25c8      	movs	r5, #200	; 0xc8
 8007c5a:	006d      	lsls	r5, r5, #1
 8007c5c:	195b      	adds	r3, r3, r5
 8007c5e:	19db      	adds	r3, r3, r7
 8007c60:	0018      	movs	r0, r3
 8007c62:	23c6      	movs	r3, #198	; 0xc6
 8007c64:	001a      	movs	r2, r3
 8007c66:	2100      	movs	r1, #0
 8007c68:	f002 fe84 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007c6c:	193b      	adds	r3, r7, r4
 8007c6e:	2248      	movs	r2, #72	; 0x48
 8007c70:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c72:	003a      	movs	r2, r7
 8007c74:	193b      	adds	r3, r7, r4
 8007c76:	0011      	movs	r1, r2
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f000 fc11 	bl	80084a0 <astronode_transport_send_receive>
 8007c7e:	0003      	movs	r3, r0
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d111      	bne.n	8007ca8 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <astronode_send_cmd_cr+0x70>)
 8007c86:	195b      	adds	r3, r3, r5
 8007c88:	19db      	adds	r3, r3, r7
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2bc8      	cmp	r3, #200	; 0xc8
 8007c8e:	d107      	bne.n	8007ca0 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007c90:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <astronode_send_cmd_cr+0x74>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <astronode_send_cmd_cr+0x78>)
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7fb f901 	bl	8002ea0 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007c9e:	e003      	b.n	8007ca8 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <astronode_send_cmd_cr+0x7c>)
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f7fb f8fc 	bl	8002ea0 <send_debug_logs>
}
 8007ca8:	46c0      	nop			; (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b064      	add	sp, #400	; 0x190
 8007cae:	bdb0      	pop	{r4, r5, r7, pc}
 8007cb0:	fffffe70 	.word	0xfffffe70
 8007cb4:	20000d62 	.word	0x20000d62
 8007cb8:	0801236c 	.word	0x0801236c
 8007cbc:	08012390 	.word	0x08012390

08007cc0 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc2:	4cac      	ldr	r4, [pc, #688]	; (8007f74 <astronode_send_cmd_rr+0x2b4>)
 8007cc4:	44a5      	add	sp, r4
 8007cc6:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cc8:	218c      	movs	r1, #140	; 0x8c
 8007cca:	0049      	lsls	r1, r1, #1
 8007ccc:	2318      	movs	r3, #24
 8007cce:	18cb      	adds	r3, r1, r3
 8007cd0:	19db      	adds	r3, r3, r7
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	23c6      	movs	r3, #198	; 0xc6
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f002 fe4b 	bl	800a974 <memset>
    astronode_app_msg_t answer = {0};
 8007cde:	4ba6      	ldr	r3, [pc, #664]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007ce0:	26f8      	movs	r6, #248	; 0xf8
 8007ce2:	0076      	lsls	r6, r6, #1
 8007ce4:	199b      	adds	r3, r3, r6
 8007ce6:	2218      	movs	r2, #24
 8007ce8:	4694      	mov	ip, r2
 8007cea:	44bc      	add	ip, r7
 8007cec:	4463      	add	r3, ip
 8007cee:	0018      	movs	r0, r3
 8007cf0:	23c6      	movs	r3, #198	; 0xc6
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	f002 fe3d 	bl	800a974 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8007cfa:	218c      	movs	r1, #140	; 0x8c
 8007cfc:	0049      	lsls	r1, r1, #1
 8007cfe:	2318      	movs	r3, #24
 8007d00:	18cb      	adds	r3, r1, r3
 8007d02:	19db      	adds	r3, r3, r7
 8007d04:	2247      	movs	r2, #71	; 0x47
 8007d06:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d08:	2350      	movs	r3, #80	; 0x50
 8007d0a:	2218      	movs	r2, #24
 8007d0c:	189b      	adds	r3, r3, r2
 8007d0e:	19da      	adds	r2, r3, r7
 8007d10:	2318      	movs	r3, #24
 8007d12:	18cb      	adds	r3, r1, r3
 8007d14:	19db      	adds	r3, r3, r7
 8007d16:	0011      	movs	r1, r2
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f000 fbc1 	bl	80084a0 <astronode_transport_send_receive>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d000      	beq.n	8007d26 <astronode_send_cmd_rr+0x66>
 8007d24:	e121      	b.n	8007f6a <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8007d26:	4b94      	ldr	r3, [pc, #592]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007d28:	199b      	adds	r3, r3, r6
 8007d2a:	2218      	movs	r2, #24
 8007d2c:	4694      	mov	ip, r2
 8007d2e:	44bc      	add	ip, r7
 8007d30:	4463      	add	r3, ip
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2bc7      	cmp	r3, #199	; 0xc7
 8007d36:	d000      	beq.n	8007d3a <astronode_send_cmd_rr+0x7a>
 8007d38:	e113      	b.n	8007f62 <astronode_send_cmd_rr+0x2a2>
        {
 8007d3a:	466b      	mov	r3, sp
 8007d3c:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8007d3e:	4b8f      	ldr	r3, [pc, #572]	; (8007f7c <astronode_send_cmd_rr+0x2bc>)
 8007d40:	0018      	movs	r0, r3
 8007d42:	f7fb f8ad 	bl	8002ea0 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007d46:	4b8c      	ldr	r3, [pc, #560]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007d48:	21f8      	movs	r1, #248	; 0xf8
 8007d4a:	0049      	lsls	r1, r1, #1
 8007d4c:	185b      	adds	r3, r3, r1
 8007d4e:	2218      	movs	r2, #24
 8007d50:	4694      	mov	ip, r2
 8007d52:	44bc      	add	ip, r7
 8007d54:	4463      	add	r3, ip
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007d5a:	4b87      	ldr	r3, [pc, #540]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007d5c:	185b      	adds	r3, r3, r1
 8007d5e:	2018      	movs	r0, #24
 8007d60:	4684      	mov	ip, r0
 8007d62:	44bc      	add	ip, r7
 8007d64:	4463      	add	r3, ip
 8007d66:	789b      	ldrb	r3, [r3, #2]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007d6c:	4b82      	ldr	r3, [pc, #520]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007d6e:	185b      	adds	r3, r3, r1
 8007d70:	2018      	movs	r0, #24
 8007d72:	4684      	mov	ip, r0
 8007d74:	44bc      	add	ip, r7
 8007d76:	4463      	add	r3, ip
 8007d78:	78db      	ldrb	r3, [r3, #3]
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007d7e:	4b7e      	ldr	r3, [pc, #504]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007d80:	185b      	adds	r3, r3, r1
 8007d82:	2118      	movs	r1, #24
 8007d84:	468c      	mov	ip, r1
 8007d86:	44bc      	add	ip, r7
 8007d88:	4463      	add	r3, ip
 8007d8a:	791b      	ldrb	r3, [r3, #4]
 8007d8c:	061b      	lsls	r3, r3, #24
 8007d8e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007d90:	22f4      	movs	r2, #244	; 0xf4
 8007d92:	0052      	lsls	r2, r2, #1
 8007d94:	2118      	movs	r1, #24
 8007d96:	1851      	adds	r1, r2, r1
 8007d98:	19c8      	adds	r0, r1, r7
 8007d9a:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007d9c:	2318      	movs	r3, #24
 8007d9e:	18d3      	adds	r3, r2, r3
 8007da0:	19db      	adds	r3, r3, r7
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4976      	ldr	r1, [pc, #472]	; (8007f80 <astronode_send_cmd_rr+0x2c0>)
 8007da6:	2318      	movs	r3, #24
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	0018      	movs	r0, r3
 8007dac:	f002 fd4c 	bl	800a848 <sprintf>
            send_debug_logs(str);
 8007db0:	2318      	movs	r3, #24
 8007db2:	18fb      	adds	r3, r7, r3
 8007db4:	0018      	movs	r0, r3
 8007db6:	f7fb f873 	bl	8002ea0 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007dba:	4b6f      	ldr	r3, [pc, #444]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007dbc:	21f8      	movs	r1, #248	; 0xf8
 8007dbe:	0049      	lsls	r1, r1, #1
 8007dc0:	185b      	adds	r3, r3, r1
 8007dc2:	2218      	movs	r2, #24
 8007dc4:	4694      	mov	ip, r2
 8007dc6:	44bc      	add	ip, r7
 8007dc8:	4463      	add	r3, ip
 8007dca:	22c4      	movs	r2, #196	; 0xc4
 8007dcc:	5a9b      	ldrh	r3, [r3, r2]
 8007dce:	2b2c      	cmp	r3, #44	; 0x2c
 8007dd0:	d00e      	beq.n	8007df0 <astronode_send_cmd_rr+0x130>
 8007dd2:	4b69      	ldr	r3, [pc, #420]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007dd4:	185b      	adds	r3, r3, r1
 8007dd6:	2218      	movs	r2, #24
 8007dd8:	4694      	mov	ip, r2
 8007dda:	44bc      	add	ip, r7
 8007ddc:	4463      	add	r3, ip
 8007dde:	22c4      	movs	r2, #196	; 0xc4
 8007de0:	5a9b      	ldrh	r3, [r3, r2]
 8007de2:	2b0c      	cmp	r3, #12
 8007de4:	d004      	beq.n	8007df0 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8007de6:	4b67      	ldr	r3, [pc, #412]	; (8007f84 <astronode_send_cmd_rr+0x2c4>)
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7fb f859 	bl	8002ea0 <send_debug_logs>
                return;
 8007dee:	e0b6      	b.n	8007f5e <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8007df0:	4b61      	ldr	r3, [pc, #388]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007df2:	22f8      	movs	r2, #248	; 0xf8
 8007df4:	0052      	lsls	r2, r2, #1
 8007df6:	189b      	adds	r3, r3, r2
 8007df8:	2218      	movs	r2, #24
 8007dfa:	4694      	mov	ip, r2
 8007dfc:	44bc      	add	ip, r7
 8007dfe:	4463      	add	r3, ip
 8007e00:	22c4      	movs	r2, #196	; 0xc4
 8007e02:	5a9b      	ldrh	r3, [r3, r2]
 8007e04:	001a      	movs	r2, r3
 8007e06:	3a01      	subs	r2, #1
 8007e08:	21f2      	movs	r1, #242	; 0xf2
 8007e0a:	0049      	lsls	r1, r1, #1
 8007e0c:	2018      	movs	r0, #24
 8007e0e:	1809      	adds	r1, r1, r0
 8007e10:	19c9      	adds	r1, r1, r7
 8007e12:	600a      	str	r2, [r1, #0]
 8007e14:	001c      	movs	r4, r3
 8007e16:	2200      	movs	r2, #0
 8007e18:	0015      	movs	r5, r2
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	0029      	movs	r1, r5
 8007e1e:	0004      	movs	r4, r0
 8007e20:	0f62      	lsrs	r2, r4, #29
 8007e22:	000c      	movs	r4, r1
 8007e24:	00e4      	lsls	r4, r4, #3
 8007e26:	617c      	str	r4, [r7, #20]
 8007e28:	697c      	ldr	r4, [r7, #20]
 8007e2a:	4314      	orrs	r4, r2
 8007e2c:	617c      	str	r4, [r7, #20]
 8007e2e:	0001      	movs	r1, r0
 8007e30:	00c9      	lsls	r1, r1, #3
 8007e32:	6139      	str	r1, [r7, #16]
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	6838      	ldr	r0, [r7, #0]
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	0004      	movs	r4, r0
 8007e40:	0f62      	lsrs	r2, r4, #29
 8007e42:	000c      	movs	r4, r1
 8007e44:	00e4      	lsls	r4, r4, #3
 8007e46:	60fc      	str	r4, [r7, #12]
 8007e48:	68fc      	ldr	r4, [r7, #12]
 8007e4a:	4314      	orrs	r4, r2
 8007e4c:	60fc      	str	r4, [r7, #12]
 8007e4e:	0001      	movs	r1, r0
 8007e50:	00ca      	lsls	r2, r1, #3
 8007e52:	60ba      	str	r2, [r7, #8]
 8007e54:	3307      	adds	r3, #7
 8007e56:	08db      	lsrs	r3, r3, #3
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4669      	mov	r1, sp
 8007e5c:	1acb      	subs	r3, r1, r3
 8007e5e:	469d      	mov	sp, r3
 8007e60:	466b      	mov	r3, sp
 8007e62:	3300      	adds	r3, #0
 8007e64:	20f0      	movs	r0, #240	; 0xf0
 8007e66:	0040      	lsls	r0, r0, #1
 8007e68:	2218      	movs	r2, #24
 8007e6a:	1882      	adds	r2, r0, r2
 8007e6c:	19d1      	adds	r1, r2, r7
 8007e6e:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8007e70:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <astronode_send_cmd_rr+0x2b8>)
 8007e72:	22f8      	movs	r2, #248	; 0xf8
 8007e74:	0052      	lsls	r2, r2, #1
 8007e76:	189b      	adds	r3, r3, r2
 8007e78:	2218      	movs	r2, #24
 8007e7a:	4694      	mov	ip, r2
 8007e7c:	44bc      	add	ip, r7
 8007e7e:	4463      	add	r3, ip
 8007e80:	22c4      	movs	r2, #196	; 0xc4
 8007e82:	5a9b      	ldrh	r3, [r3, r2]
 8007e84:	3b03      	subs	r3, #3
 8007e86:	0019      	movs	r1, r3
 8007e88:	2350      	movs	r3, #80	; 0x50
 8007e8a:	2218      	movs	r2, #24
 8007e8c:	189b      	adds	r3, r3, r2
 8007e8e:	19db      	adds	r3, r3, r7
 8007e90:	3305      	adds	r3, #5
 8007e92:	4a3d      	ldr	r2, [pc, #244]	; (8007f88 <astronode_send_cmd_rr+0x2c8>)
 8007e94:	2418      	movs	r4, #24
 8007e96:	1900      	adds	r0, r0, r4
 8007e98:	19c0      	adds	r0, r0, r7
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	f002 fca0 	bl	800a7e0 <snprintf>
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	23ef      	movs	r3, #239	; 0xef
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	2118      	movs	r1, #24
 8007ea8:	185b      	adds	r3, r3, r1
 8007eaa:	19db      	adds	r3, r3, r7
 8007eac:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8007eae:	23f0      	movs	r3, #240	; 0xf0
 8007eb0:	33ff      	adds	r3, #255	; 0xff
 8007eb2:	2218      	movs	r2, #24
 8007eb4:	189b      	adds	r3, r3, r2
 8007eb6:	19db      	adds	r3, r3, r7
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e024      	b.n	8007f08 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8007ebe:	23f0      	movs	r3, #240	; 0xf0
 8007ec0:	33ff      	adds	r3, #255	; 0xff
 8007ec2:	2218      	movs	r2, #24
 8007ec4:	189b      	adds	r3, r3, r2
 8007ec6:	19db      	adds	r3, r3, r7
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	22f0      	movs	r2, #240	; 0xf0
 8007ecc:	0052      	lsls	r2, r2, #1
 8007ece:	2118      	movs	r1, #24
 8007ed0:	1852      	adds	r2, r2, r1
 8007ed2:	19d2      	adds	r2, r2, r7
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	5cd3      	ldrb	r3, [r2, r3]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	4b2c      	ldr	r3, [pc, #176]	; (8007f8c <astronode_send_cmd_rr+0x2cc>)
 8007edc:	18d3      	adds	r3, r2, r3
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	001a      	movs	r2, r3
 8007ee2:	2397      	movs	r3, #151	; 0x97
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d104      	bne.n	8007ef2 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8007ee8:	4b29      	ldr	r3, [pc, #164]	; (8007f90 <astronode_send_cmd_rr+0x2d0>)
 8007eea:	0018      	movs	r0, r3
 8007eec:	f7fa ffd8 	bl	8002ea0 <send_debug_logs>
                    return;
 8007ef0:	e035      	b.n	8007f5e <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8007ef2:	21f0      	movs	r1, #240	; 0xf0
 8007ef4:	31ff      	adds	r1, #255	; 0xff
 8007ef6:	2318      	movs	r3, #24
 8007ef8:	18cb      	adds	r3, r1, r3
 8007efa:	19db      	adds	r3, r3, r7
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	2318      	movs	r3, #24
 8007f00:	18cb      	adds	r3, r1, r3
 8007f02:	19db      	adds	r3, r3, r7
 8007f04:	3201      	adds	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	23f0      	movs	r3, #240	; 0xf0
 8007f0a:	33ff      	adds	r3, #255	; 0xff
 8007f0c:	2218      	movs	r2, #24
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	19db      	adds	r3, r3, r7
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	22ef      	movs	r2, #239	; 0xef
 8007f18:	0052      	lsls	r2, r2, #1
 8007f1a:	2118      	movs	r1, #24
 8007f1c:	1852      	adds	r2, r2, r1
 8007f1e:	19d2      	adds	r2, r2, r7
 8007f20:	8812      	ldrh	r2, [r2, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d8cb      	bhi.n	8007ebe <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8007f26:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <astronode_send_cmd_rr+0x2d4>)
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7fa ffb9 	bl	8002ea0 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8007f2e:	2350      	movs	r3, #80	; 0x50
 8007f30:	2218      	movs	r2, #24
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	19db      	adds	r3, r3, r7
 8007f36:	1d5a      	adds	r2, r3, #5
 8007f38:	4917      	ldr	r1, [pc, #92]	; (8007f98 <astronode_send_cmd_rr+0x2d8>)
 8007f3a:	24f0      	movs	r4, #240	; 0xf0
 8007f3c:	0064      	lsls	r4, r4, #1
 8007f3e:	2318      	movs	r3, #24
 8007f40:	18e3      	adds	r3, r4, r3
 8007f42:	19db      	adds	r3, r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	0018      	movs	r0, r3
 8007f48:	f002 fc7e 	bl	800a848 <sprintf>
            send_debug_logs(command_content);
 8007f4c:	2318      	movs	r3, #24
 8007f4e:	18e3      	adds	r3, r4, r3
 8007f50:	19db      	adds	r3, r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	0018      	movs	r0, r3
 8007f56:	f7fa ffa3 	bl	8002ea0 <send_debug_logs>
 8007f5a:	46b5      	mov	sp, r6
 8007f5c:	e005      	b.n	8007f6a <astronode_send_cmd_rr+0x2aa>
                return;
 8007f5e:	46b5      	mov	sp, r6
 8007f60:	e003      	b.n	8007f6a <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8007f62:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <astronode_send_cmd_rr+0x2dc>)
 8007f64:	0018      	movs	r0, r3
 8007f66:	f7fa ff9b 	bl	8002ea0 <send_debug_logs>
        }
    }
}
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	2383      	movs	r3, #131	; 0x83
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	449d      	add	sp, r3
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	fffffdf4 	.word	0xfffffdf4
 8007f78:	fffffe60 	.word	0xfffffe60
 8007f7c:	080123a8 	.word	0x080123a8
 8007f80:	080123c4 	.word	0x080123c4
 8007f84:	08012414 	.word	0x08012414
 8007f88:	08011af8 	.word	0x08011af8
 8007f8c:	08012dd8 	.word	0x08012dd8
 8007f90:	08012428 	.word	0x08012428
 8007f94:	08012454 	.word	0x08012454
 8007f98:	0801246c 	.word	0x0801246c
 8007f9c:	08012470 	.word	0x08012470

08007fa0 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <is_sak_available+0x10>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	20000d60 	.word	0x20000d60

08007fb4 <is_astronode_reset>:

bool is_astronode_reset()
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <is_astronode_reset+0x10>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	46c0      	nop			; (mov r8, r8)
 8007fc4:	20000d61 	.word	0x20000d61

08007fc8 <is_command_available>:

bool is_command_available()
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <is_command_available+0x10>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
}
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	20000d62 	.word	0x20000d62

08007fdc <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	0002      	movs	r2, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	1dfb      	adds	r3, r7, #7
 8007fe8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8007fea:	1dfb      	adds	r3, r7, #7
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b2f      	cmp	r3, #47	; 0x2f
 8007ff0:	d90b      	bls.n	800800a <ascii_to_value+0x2e>
 8007ff2:	1dfb      	adds	r3, r7, #7
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b39      	cmp	r3, #57	; 0x39
 8007ff8:	d807      	bhi.n	800800a <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	3b30      	subs	r3, #48	; 0x30
 8008000:	b2da      	uxtb	r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	701a      	strb	r2, [r3, #0]
        return true;
 8008006:	2301      	movs	r3, #1
 8008008:	e010      	b.n	800802c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 800800a:	1dfb      	adds	r3, r7, #7
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d90b      	bls.n	800802a <ascii_to_value+0x4e>
 8008012:	1dfb      	adds	r3, r7, #7
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b46      	cmp	r3, #70	; 0x46
 8008018:	d807      	bhi.n	800802a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 800801a:	1dfb      	adds	r3, r7, #7
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	3b37      	subs	r3, #55	; 0x37
 8008020:	b2da      	uxtb	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	701a      	strb	r2, [r3, #0]
        return true;
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800802a:	2300      	movs	r3, #0
    }
}
 800802c:	0018      	movs	r0, r3
 800802e:	46bd      	mov	sp, r7
 8008030:	b002      	add	sp, #8
 8008032:	bd80      	pop	{r7, pc}

08008034 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800803e:	250e      	movs	r5, #14
 8008040:	197b      	adds	r3, r7, r5
 8008042:	2200      	movs	r2, #0
 8008044:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008046:	197b      	adds	r3, r7, r5
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	197a      	adds	r2, r7, r5
 800804c:	1c59      	adds	r1, r3, #1
 800804e:	8011      	strh	r1, [r2, #0]
 8008050:	001a      	movs	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	189b      	adds	r3, r3, r2
 8008056:	2202      	movs	r2, #2
 8008058:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	260a      	movs	r6, #10
 800805e:	19bc      	adds	r4, r7, r6
 8008060:	4a44      	ldr	r2, [pc, #272]	; (8008174 <astronode_create_request_transport+0x140>)
 8008062:	2101      	movs	r1, #1
 8008064:	0018      	movs	r0, r3
 8008066:	f000 fa7d 	bl	8008564 <calculate_crc>
 800806a:	0003      	movs	r3, r0
 800806c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	1c58      	adds	r0, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	22c4      	movs	r2, #196	; 0xc4
 8008076:	5a99      	ldrh	r1, [r3, r2]
 8008078:	19bc      	adds	r4, r7, r6
 800807a:	19bb      	adds	r3, r7, r6
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	001a      	movs	r2, r3
 8008080:	f000 fa70 	bl	8008564 <calculate_crc>
 8008084:	0003      	movs	r3, r0
 8008086:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008088:	19bb      	adds	r3, r7, r6
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b21a      	sxth	r2, r3
 8008090:	0031      	movs	r1, r6
 8008092:	19bb      	adds	r3, r7, r6
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	b21b      	sxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b21a      	sxth	r2, r3
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7818      	ldrb	r0, [r3, #0]
 80080a8:	197b      	adds	r3, r7, r5
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	18d3      	adds	r3, r2, r3
 80080b0:	0019      	movs	r1, r3
 80080b2:	f000 fbeb 	bl	800888c <uint8_to_ascii_buffer>
    index += 2;
 80080b6:	197b      	adds	r3, r7, r5
 80080b8:	197a      	adds	r2, r7, r5
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	3202      	adds	r2, #2
 80080be:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80080c0:	230c      	movs	r3, #12
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2200      	movs	r2, #0
 80080c6:	801a      	strh	r2, [r3, #0]
 80080c8:	e017      	b.n	80080fa <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80080ca:	240c      	movs	r4, #12
 80080cc:	193b      	adds	r3, r7, r4
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	18d3      	adds	r3, r2, r3
 80080d4:	7858      	ldrb	r0, [r3, #1]
 80080d6:	250e      	movs	r5, #14
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	18d3      	adds	r3, r2, r3
 80080e0:	0019      	movs	r1, r3
 80080e2:	f000 fbd3 	bl	800888c <uint8_to_ascii_buffer>
        index += 2;
 80080e6:	197b      	adds	r3, r7, r5
 80080e8:	197a      	adds	r2, r7, r5
 80080ea:	8812      	ldrh	r2, [r2, #0]
 80080ec:	3202      	adds	r2, #2
 80080ee:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80080f0:	193b      	adds	r3, r7, r4
 80080f2:	881a      	ldrh	r2, [r3, #0]
 80080f4:	193b      	adds	r3, r7, r4
 80080f6:	3201      	adds	r2, #1
 80080f8:	801a      	strh	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	22c4      	movs	r2, #196	; 0xc4
 80080fe:	5a9b      	ldrh	r3, [r3, r2]
 8008100:	220c      	movs	r2, #12
 8008102:	18ba      	adds	r2, r7, r2
 8008104:	8812      	ldrh	r2, [r2, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d3df      	bcc.n	80080ca <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 800810a:	250a      	movs	r5, #10
 800810c:	197b      	adds	r3, r7, r5
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	b29b      	uxth	r3, r3
 8008114:	b2d8      	uxtb	r0, r3
 8008116:	240e      	movs	r4, #14
 8008118:	193b      	adds	r3, r7, r4
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	18d3      	adds	r3, r2, r3
 8008120:	0019      	movs	r1, r3
 8008122:	f000 fbb3 	bl	800888c <uint8_to_ascii_buffer>
    index += 2;
 8008126:	0021      	movs	r1, r4
 8008128:	187b      	adds	r3, r7, r1
 800812a:	187a      	adds	r2, r7, r1
 800812c:	8812      	ldrh	r2, [r2, #0]
 800812e:	3202      	adds	r2, #2
 8008130:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008132:	197b      	adds	r3, r7, r5
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b2d8      	uxtb	r0, r3
 8008138:	000c      	movs	r4, r1
 800813a:	187b      	adds	r3, r7, r1
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	18d3      	adds	r3, r2, r3
 8008142:	0019      	movs	r1, r3
 8008144:	f000 fba2 	bl	800888c <uint8_to_ascii_buffer>
    index += 2;
 8008148:	0020      	movs	r0, r4
 800814a:	183b      	adds	r3, r7, r0
 800814c:	183a      	adds	r2, r7, r0
 800814e:	8812      	ldrh	r2, [r2, #0]
 8008150:	3202      	adds	r2, #2
 8008152:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008154:	183b      	adds	r3, r7, r0
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	183a      	adds	r2, r7, r0
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	8011      	strh	r1, [r2, #0]
 800815e:	001a      	movs	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	189b      	adds	r3, r3, r2
 8008164:	2203      	movs	r2, #3
 8008166:	701a      	strb	r2, [r3, #0]

    return index;
 8008168:	183b      	adds	r3, r7, r0
 800816a:	881b      	ldrh	r3, [r3, #0]
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b005      	add	sp, #20
 8008172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008174:	0000ffff 	.word	0x0000ffff

08008178 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	b089      	sub	sp, #36	; 0x24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	230a      	movs	r3, #10
 8008184:	18fb      	adds	r3, r7, r3
 8008186:	1c0a      	adds	r2, r1, #0
 8008188:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d005      	beq.n	800819e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008192:	4bbd      	ldr	r3, [pc, #756]	; (8008488 <astronode_decode_answer_transport+0x310>)
 8008194:	0018      	movs	r0, r3
 8008196:	f7fa fe83 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 800819a:	2300      	movs	r3, #0
 800819c:	e170      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800819e:	210a      	movs	r1, #10
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	4013      	ands	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <astronode_decode_answer_transport+0x3e>
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	2b07      	cmp	r3, #7
 80081b4:	d805      	bhi.n	80081c2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 80081b6:	4bb5      	ldr	r3, [pc, #724]	; (800848c <astronode_decode_answer_transport+0x314>)
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7fa fe71 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 80081be:	2300      	movs	r3, #0
 80081c0:	e15e      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80081c2:	230a      	movs	r3, #10
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	3b08      	subs	r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da00      	bge.n	80081d0 <astronode_decode_answer_transport+0x58>
 80081ce:	3301      	adds	r3, #1
 80081d0:	105b      	asrs	r3, r3, #1
 80081d2:	b299      	uxth	r1, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	22c4      	movs	r2, #196	; 0xc4
 80081d8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80081da:	230a      	movs	r3, #10
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	18d3      	adds	r3, r2, r3
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d005      	beq.n	80081f8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80081ec:	4ba8      	ldr	r3, [pc, #672]	; (8008490 <astronode_decode_answer_transport+0x318>)
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7fa fe56 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e143      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80081f8:	2117      	movs	r1, #23
 80081fa:	187b      	adds	r3, r7, r1
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008200:	2416      	movs	r4, #22
 8008202:	193b      	adds	r3, r7, r4
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	187a      	adds	r2, r7, r1
 8008210:	0011      	movs	r1, r2
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff fee2 	bl	8007fdc <ascii_to_value>
 8008218:	0003      	movs	r3, r0
 800821a:	001a      	movs	r2, r3
 800821c:	2301      	movs	r3, #1
 800821e:	4053      	eors	r3, r2
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10e      	bne.n	8008244 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3302      	adds	r3, #2
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	193a      	adds	r2, r7, r4
 800822e:	0011      	movs	r1, r2
 8008230:	0018      	movs	r0, r3
 8008232:	f7ff fed3 	bl	8007fdc <ascii_to_value>
 8008236:	0003      	movs	r3, r0
 8008238:	001a      	movs	r2, r3
 800823a:	2301      	movs	r3, #1
 800823c:	4053      	eors	r3, r2
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008244:	4b93      	ldr	r3, [pc, #588]	; (8008494 <astronode_decode_answer_transport+0x31c>)
 8008246:	0018      	movs	r0, r3
 8008248:	f7fa fe2a 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 800824c:	2300      	movs	r3, #0
 800824e:	e117      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008250:	2317      	movs	r3, #23
 8008252:	18fb      	adds	r3, r7, r3
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	b2da      	uxtb	r2, r3
 800825a:	2316      	movs	r3, #22
 800825c:	18fb      	adds	r3, r7, r3
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	18d3      	adds	r3, r2, r3
 8008262:	b2da      	uxtb	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008268:	231e      	movs	r3, #30
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	2203      	movs	r2, #3
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	231c      	movs	r3, #28
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	2200      	movs	r2, #0
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	e045      	b.n	8008306 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800827a:	241e      	movs	r4, #30
 800827c:	193b      	adds	r3, r7, r4
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	18d3      	adds	r3, r2, r3
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2217      	movs	r2, #23
 8008288:	18ba      	adds	r2, r7, r2
 800828a:	0011      	movs	r1, r2
 800828c:	0018      	movs	r0, r3
 800828e:	f7ff fea5 	bl	8007fdc <ascii_to_value>
 8008292:	0003      	movs	r3, r0
 8008294:	001a      	movs	r2, r3
 8008296:	2301      	movs	r3, #1
 8008298:	4053      	eors	r3, r2
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d112      	bne.n	80082c6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80082a0:	193b      	adds	r3, r7, r4
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	18d3      	adds	r3, r2, r3
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2216      	movs	r2, #22
 80082ae:	18ba      	adds	r2, r7, r2
 80082b0:	0011      	movs	r1, r2
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7ff fe92 	bl	8007fdc <ascii_to_value>
 80082b8:	0003      	movs	r3, r0
 80082ba:	001a      	movs	r2, r3
 80082bc:	2301      	movs	r3, #1
 80082be:	4053      	eors	r3, r2
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80082c6:	4b73      	ldr	r3, [pc, #460]	; (8008494 <astronode_decode_answer_transport+0x31c>)
 80082c8:	0018      	movs	r0, r3
 80082ca:	f7fa fde9 	bl	8002ea0 <send_debug_logs>
            return RS_FAILURE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e0d6      	b.n	8008480 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80082d2:	2317      	movs	r3, #23
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	b2d9      	uxtb	r1, r3
 80082dc:	2316      	movs	r3, #22
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	201c      	movs	r0, #28
 80082e4:	183b      	adds	r3, r7, r0
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	1838      	adds	r0, r7, r0
 80082ea:	1c5c      	adds	r4, r3, #1
 80082ec:	8004      	strh	r4, [r0, #0]
 80082ee:	0018      	movs	r0, r3
 80082f0:	188b      	adds	r3, r1, r2
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	181b      	adds	r3, r3, r0
 80082f8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80082fa:	221e      	movs	r2, #30
 80082fc:	18bb      	adds	r3, r7, r2
 80082fe:	18ba      	adds	r2, r7, r2
 8008300:	8812      	ldrh	r2, [r2, #0]
 8008302:	3202      	adds	r2, #2
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	231e      	movs	r3, #30
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	881a      	ldrh	r2, [r3, #0]
 800830c:	260a      	movs	r6, #10
 800830e:	19bb      	adds	r3, r7, r6
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	3b05      	subs	r3, #5
 8008314:	429a      	cmp	r2, r3
 8008316:	dbb0      	blt.n	800827a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	251a      	movs	r5, #26
 800831c:	197c      	adds	r4, r7, r5
 800831e:	4a5e      	ldr	r2, [pc, #376]	; (8008498 <astronode_decode_answer_transport+0x320>)
 8008320:	2101      	movs	r1, #1
 8008322:	0018      	movs	r0, r3
 8008324:	f000 f91e 	bl	8008564 <calculate_crc>
 8008328:	0003      	movs	r3, r0
 800832a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1c58      	adds	r0, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	22c4      	movs	r2, #196	; 0xc4
 8008334:	5a99      	ldrh	r1, [r3, r2]
 8008336:	197c      	adds	r4, r7, r5
 8008338:	197b      	adds	r3, r7, r5
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	001a      	movs	r2, r3
 800833e:	f000 f911 	bl	8008564 <calculate_crc>
 8008342:	0003      	movs	r3, r0
 8008344:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008346:	197b      	adds	r3, r7, r5
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	b21a      	sxth	r2, r3
 800834e:	0029      	movs	r1, r5
 8008350:	197b      	adds	r3, r7, r5
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	0a1b      	lsrs	r3, r3, #8
 8008356:	b29b      	uxth	r3, r3
 8008358:	b21b      	sxth	r3, r3
 800835a:	4313      	orrs	r3, r2
 800835c:	b21a      	sxth	r2, r3
 800835e:	187b      	adds	r3, r7, r1
 8008360:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008362:	19bb      	adds	r3, r7, r6
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	3b05      	subs	r3, #5
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	18d3      	adds	r3, r2, r3
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2217      	movs	r2, #23
 8008370:	18ba      	adds	r2, r7, r2
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f7ff fe31 	bl	8007fdc <ascii_to_value>
 800837a:	0003      	movs	r3, r0
 800837c:	001a      	movs	r2, r3
 800837e:	2301      	movs	r3, #1
 8008380:	4053      	eors	r3, r2
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d112      	bne.n	80083ae <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008388:	19bb      	adds	r3, r7, r6
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	3b04      	subs	r3, #4
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	18d3      	adds	r3, r2, r3
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2216      	movs	r2, #22
 8008396:	18ba      	adds	r2, r7, r2
 8008398:	0011      	movs	r1, r2
 800839a:	0018      	movs	r0, r3
 800839c:	f7ff fe1e 	bl	8007fdc <ascii_to_value>
 80083a0:	0003      	movs	r3, r0
 80083a2:	001a      	movs	r2, r3
 80083a4:	2301      	movs	r3, #1
 80083a6:	4053      	eors	r3, r2
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80083ae:	4b39      	ldr	r3, [pc, #228]	; (8008494 <astronode_decode_answer_transport+0x31c>)
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7fa fd75 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e062      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 80083ba:	2017      	movs	r0, #23
 80083bc:	183b      	adds	r3, r7, r0
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	031b      	lsls	r3, r3, #12
 80083c4:	b299      	uxth	r1, r3
 80083c6:	2416      	movs	r4, #22
 80083c8:	193b      	adds	r3, r7, r4
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	2318      	movs	r3, #24
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	188a      	adds	r2, r1, r2
 80083d8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80083da:	250a      	movs	r5, #10
 80083dc:	197b      	adds	r3, r7, r5
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	3b03      	subs	r3, #3
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	18d3      	adds	r3, r2, r3
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	183a      	adds	r2, r7, r0
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f7ff fdf5 	bl	8007fdc <ascii_to_value>
 80083f2:	0003      	movs	r3, r0
 80083f4:	001a      	movs	r2, r3
 80083f6:	2301      	movs	r3, #1
 80083f8:	4053      	eors	r3, r2
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d111      	bne.n	8008424 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008400:	197b      	adds	r3, r7, r5
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	3b02      	subs	r3, #2
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	18d3      	adds	r3, r2, r3
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	193a      	adds	r2, r7, r4
 800840e:	0011      	movs	r1, r2
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff fde3 	bl	8007fdc <ascii_to_value>
 8008416:	0003      	movs	r3, r0
 8008418:	001a      	movs	r2, r3
 800841a:	2301      	movs	r3, #1
 800841c:	4053      	eors	r3, r2
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008424:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <astronode_decode_answer_transport+0x31c>)
 8008426:	0018      	movs	r0, r3
 8008428:	f7fa fd3a 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 800842c:	2300      	movs	r3, #0
 800842e:	e027      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008430:	2317      	movs	r3, #23
 8008432:	18fb      	adds	r3, r7, r3
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	b29a      	uxth	r2, r3
 800843c:	2316      	movs	r3, #22
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	b299      	uxth	r1, r3
 8008448:	2018      	movs	r0, #24
 800844a:	183b      	adds	r3, r7, r0
 800844c:	183a      	adds	r2, r7, r0
 800844e:	8812      	ldrh	r2, [r2, #0]
 8008450:	188a      	adds	r2, r1, r2
 8008452:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008454:	183a      	adds	r2, r7, r0
 8008456:	231a      	movs	r3, #26
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	8812      	ldrh	r2, [r2, #0]
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	429a      	cmp	r2, r3
 8008460:	d005      	beq.n	800846e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008462:	4b0e      	ldr	r3, [pc, #56]	; (800849c <astronode_decode_answer_transport+0x324>)
 8008464:	0018      	movs	r0, r3
 8008466:	f7fa fd1b 	bl	8002ea0 <send_debug_logs>
        return RS_FAILURE;
 800846a:	2300      	movs	r3, #0
 800846c:	e008      	b.n	8008480 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2bff      	cmp	r3, #255	; 0xff
 8008474:	d103      	bne.n	800847e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0018      	movs	r0, r3
 800847a:	f000 f8c3 	bl	8008604 <check_for_error>
    }

    return RS_SUCCESS;
 800847e:	2301      	movs	r3, #1
}
 8008480:	0018      	movs	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	b009      	add	sp, #36	; 0x24
 8008486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008488:	08012500 	.word	0x08012500
 800848c:	08012550 	.word	0x08012550
 8008490:	080125a0 	.word	0x080125a0
 8008494:	080125f0 	.word	0x080125f0
 8008498:	0000ffff 	.word	0x0000ffff
 800849c:	0801263c 	.word	0x0801263c

080084a0 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a2:	4c2b      	ldr	r4, [pc, #172]	; (8008550 <astronode_transport_send_receive+0xb0>)
 80084a4:	44a5      	add	sp, r4
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80084ac:	4b29      	ldr	r3, [pc, #164]	; (8008554 <astronode_transport_send_receive+0xb4>)
 80084ae:	25ca      	movs	r5, #202	; 0xca
 80084b0:	00ad      	lsls	r5, r5, #2
 80084b2:	195b      	adds	r3, r3, r5
 80084b4:	19db      	adds	r3, r3, r7
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	3304      	adds	r3, #4
 80084bc:	22c4      	movs	r2, #196	; 0xc4
 80084be:	0052      	lsls	r2, r2, #1
 80084c0:	2100      	movs	r1, #0
 80084c2:	0018      	movs	r0, r3
 80084c4:	f002 fa56 	bl	800a974 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80084c8:	4b23      	ldr	r3, [pc, #140]	; (8008558 <astronode_transport_send_receive+0xb8>)
 80084ca:	195b      	adds	r3, r3, r5
 80084cc:	19db      	adds	r3, r3, r7
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	3304      	adds	r3, #4
 80084d4:	22c4      	movs	r2, #196	; 0xc4
 80084d6:	0052      	lsls	r2, r2, #1
 80084d8:	2100      	movs	r1, #0
 80084da:	0018      	movs	r0, r3
 80084dc:	f002 fa4a 	bl	800a974 <memset>
    uint16_t answer_length =  0;
 80084e0:	4b1e      	ldr	r3, [pc, #120]	; (800855c <astronode_transport_send_receive+0xbc>)
 80084e2:	195b      	adds	r3, r3, r5
 80084e4:	19db      	adds	r3, r3, r7
 80084e6:	2200      	movs	r2, #0
 80084e8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80084ea:	4e1d      	ldr	r6, [pc, #116]	; (8008560 <astronode_transport_send_receive+0xc0>)
 80084ec:	19bc      	adds	r4, r7, r6
 80084ee:	23cc      	movs	r3, #204	; 0xcc
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	18fa      	adds	r2, r7, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	0011      	movs	r1, r2
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7ff fd9b 	bl	8008034 <astronode_create_request_transport>
 80084fe:	0003      	movs	r3, r0
 8008500:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8008502:	19bb      	adds	r3, r7, r6
 8008504:	881a      	ldrh	r2, [r3, #0]
 8008506:	23cc      	movs	r3, #204	; 0xcc
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	18fb      	adds	r3, r7, r3
 800850c:	0011      	movs	r1, r2
 800850e:	0018      	movs	r0, r3
 8008510:	f7fa fd10 	bl	8002f34 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008514:	230a      	movs	r3, #10
 8008516:	18fa      	adds	r2, r7, r3
 8008518:	240c      	movs	r4, #12
 800851a:	193b      	adds	r3, r7, r4
 800851c:	0011      	movs	r1, r2
 800851e:	0018      	movs	r0, r3
 8008520:	f000 f92c 	bl	800877c <receive_astronode_answer>
 8008524:	0003      	movs	r3, r0
 8008526:	2b01      	cmp	r3, #1
 8008528:	d10a      	bne.n	8008540 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <astronode_transport_send_receive+0xbc>)
 800852c:	195b      	adds	r3, r3, r5
 800852e:	19db      	adds	r3, r3, r7
 8008530:	8819      	ldrh	r1, [r3, #0]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	193b      	adds	r3, r7, r4
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fe1e 	bl	8008178 <astronode_decode_answer_transport>
 800853c:	0003      	movs	r3, r0
 800853e:	e000      	b.n	8008542 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008540:	2300      	movs	r3, #0
    }
}
 8008542:	0018      	movs	r0, r3
 8008544:	46bd      	mov	sp, r7
 8008546:	23cb      	movs	r3, #203	; 0xcb
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	449d      	add	sp, r3
 800854c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	fffffcd4 	.word	0xfffffcd4
 8008554:	fffffe70 	.word	0xfffffe70
 8008558:	fffffce4 	.word	0xfffffce4
 800855c:	fffffce2 	.word	0xfffffce2
 8008560:	00000326 	.word	0x00000326

08008564 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	0008      	movs	r0, r1
 800856e:	0011      	movs	r1, r2
 8008570:	1cbb      	adds	r3, r7, #2
 8008572:	1c02      	adds	r2, r0, #0
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	003b      	movs	r3, r7
 8008578:	1c0a      	adds	r2, r1, #0
 800857a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800857c:	230e      	movs	r3, #14
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	003a      	movs	r2, r7
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008586:	e02e      	b.n	80085e6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008588:	240e      	movs	r4, #14
 800858a:	193b      	adds	r3, r7, r4
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b299      	uxth	r1, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	b29a      	uxth	r2, r3
 800859c:	200c      	movs	r0, #12
 800859e:	183b      	adds	r3, r7, r0
 80085a0:	404a      	eors	r2, r1
 80085a2:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80085a4:	183b      	adds	r3, r7, r0
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	b299      	uxth	r1, r3
 80085ac:	183b      	adds	r3, r7, r0
 80085ae:	183a      	adds	r2, r7, r0
 80085b0:	8812      	ldrh	r2, [r2, #0]
 80085b2:	404a      	eors	r2, r1
 80085b4:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80085b6:	0021      	movs	r1, r4
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	b21a      	sxth	r2, r3
 80085c0:	183b      	adds	r3, r7, r0
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	031b      	lsls	r3, r3, #12
 80085c6:	b21b      	sxth	r3, r3
 80085c8:	4053      	eors	r3, r2
 80085ca:	b21a      	sxth	r2, r3
 80085cc:	183b      	adds	r3, r7, r0
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	015b      	lsls	r3, r3, #5
 80085d2:	b21b      	sxth	r3, r3
 80085d4:	4053      	eors	r3, r2
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	183b      	adds	r3, r7, r0
 80085da:	2000      	movs	r0, #0
 80085dc:	5e1b      	ldrsh	r3, [r3, r0]
 80085de:	4053      	eors	r3, r2
 80085e0:	b21a      	sxth	r2, r3
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80085e6:	1cbb      	adds	r3, r7, #2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	1cba      	adds	r2, r7, #2
 80085ec:	1e59      	subs	r1, r3, #1
 80085ee:	8011      	strh	r1, [r2, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1c9      	bne.n	8008588 <calculate_crc+0x24>
    }
    return crc;
 80085f4:	230e      	movs	r3, #14
 80085f6:	18fb      	adds	r3, r7, r3
 80085f8:	881b      	ldrh	r3, [r3, #0]
}
 80085fa:	0018      	movs	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	b005      	add	sp, #20
 8008600:	bd90      	pop	{r4, r7, pc}
	...

08008604 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	b299      	uxth	r1, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	789b      	ldrb	r3, [r3, #2]
 8008616:	b29b      	uxth	r3, r3
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	b29a      	uxth	r2, r3
 800861c:	200e      	movs	r0, #14
 800861e:	183b      	adds	r3, r7, r0
 8008620:	188a      	adds	r2, r1, r2
 8008622:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008624:	183b      	adds	r3, r7, r0
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	4a40      	ldr	r2, [pc, #256]	; (800872c <check_for_error+0x128>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d100      	bne.n	8008630 <check_for_error+0x2c>
 800862e:	e06f      	b.n	8008710 <check_for_error+0x10c>
 8008630:	4a3e      	ldr	r2, [pc, #248]	; (800872c <check_for_error+0x128>)
 8008632:	4293      	cmp	r3, r2
 8008634:	dd00      	ble.n	8008638 <check_for_error+0x34>
 8008636:	e070      	b.n	800871a <check_for_error+0x116>
 8008638:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <check_for_error+0x12c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d100      	bne.n	8008640 <check_for_error+0x3c>
 800863e:	e062      	b.n	8008706 <check_for_error+0x102>
 8008640:	4a3b      	ldr	r2, [pc, #236]	; (8008730 <check_for_error+0x12c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	dd00      	ble.n	8008648 <check_for_error+0x44>
 8008646:	e068      	b.n	800871a <check_for_error+0x116>
 8008648:	4a3a      	ldr	r2, [pc, #232]	; (8008734 <check_for_error+0x130>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d056      	beq.n	80086fc <check_for_error+0xf8>
 800864e:	4a39      	ldr	r2, [pc, #228]	; (8008734 <check_for_error+0x130>)
 8008650:	4293      	cmp	r3, r2
 8008652:	dd00      	ble.n	8008656 <check_for_error+0x52>
 8008654:	e061      	b.n	800871a <check_for_error+0x116>
 8008656:	4a38      	ldr	r2, [pc, #224]	; (8008738 <check_for_error+0x134>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d04a      	beq.n	80086f2 <check_for_error+0xee>
 800865c:	4a36      	ldr	r2, [pc, #216]	; (8008738 <check_for_error+0x134>)
 800865e:	4293      	cmp	r3, r2
 8008660:	dc5b      	bgt.n	800871a <check_for_error+0x116>
 8008662:	4a36      	ldr	r2, [pc, #216]	; (800873c <check_for_error+0x138>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d03f      	beq.n	80086e8 <check_for_error+0xe4>
 8008668:	4a34      	ldr	r2, [pc, #208]	; (800873c <check_for_error+0x138>)
 800866a:	4293      	cmp	r3, r2
 800866c:	dc55      	bgt.n	800871a <check_for_error+0x116>
 800866e:	4a34      	ldr	r2, [pc, #208]	; (8008740 <check_for_error+0x13c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d034      	beq.n	80086de <check_for_error+0xda>
 8008674:	4a32      	ldr	r2, [pc, #200]	; (8008740 <check_for_error+0x13c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	dc4f      	bgt.n	800871a <check_for_error+0x116>
 800867a:	4a32      	ldr	r2, [pc, #200]	; (8008744 <check_for_error+0x140>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d029      	beq.n	80086d4 <check_for_error+0xd0>
 8008680:	4a30      	ldr	r2, [pc, #192]	; (8008744 <check_for_error+0x140>)
 8008682:	4293      	cmp	r3, r2
 8008684:	dc49      	bgt.n	800871a <check_for_error+0x116>
 8008686:	4a30      	ldr	r2, [pc, #192]	; (8008748 <check_for_error+0x144>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d01e      	beq.n	80086ca <check_for_error+0xc6>
 800868c:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <check_for_error+0x144>)
 800868e:	4293      	cmp	r3, r2
 8008690:	dc43      	bgt.n	800871a <check_for_error+0x116>
 8008692:	2222      	movs	r2, #34	; 0x22
 8008694:	32ff      	adds	r2, #255	; 0xff
 8008696:	4293      	cmp	r3, r2
 8008698:	d012      	beq.n	80086c0 <check_for_error+0xbc>
 800869a:	2291      	movs	r2, #145	; 0x91
 800869c:	0052      	lsls	r2, r2, #1
 800869e:	4293      	cmp	r3, r2
 80086a0:	da3b      	bge.n	800871a <check_for_error+0x116>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d002      	beq.n	80086ac <check_for_error+0xa8>
 80086a6:	2b11      	cmp	r3, #17
 80086a8:	d005      	beq.n	80086b6 <check_for_error+0xb2>
 80086aa:	e036      	b.n	800871a <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80086ac:	4b27      	ldr	r3, [pc, #156]	; (800874c <check_for_error+0x148>)
 80086ae:	0018      	movs	r0, r3
 80086b0:	f7fa fbf6 	bl	8002ea0 <send_debug_logs>
            break;
 80086b4:	e036      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80086b6:	4b26      	ldr	r3, [pc, #152]	; (8008750 <check_for_error+0x14c>)
 80086b8:	0018      	movs	r0, r3
 80086ba:	f7fa fbf1 	bl	8002ea0 <send_debug_logs>
            break;
 80086be:	e031      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80086c0:	4b24      	ldr	r3, [pc, #144]	; (8008754 <check_for_error+0x150>)
 80086c2:	0018      	movs	r0, r3
 80086c4:	f7fa fbec 	bl	8002ea0 <send_debug_logs>
            break;
 80086c8:	e02c      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80086ca:	4b23      	ldr	r3, [pc, #140]	; (8008758 <check_for_error+0x154>)
 80086cc:	0018      	movs	r0, r3
 80086ce:	f7fa fbe7 	bl	8002ea0 <send_debug_logs>
            break;
 80086d2:	e027      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80086d4:	4b21      	ldr	r3, [pc, #132]	; (800875c <check_for_error+0x158>)
 80086d6:	0018      	movs	r0, r3
 80086d8:	f7fa fbe2 	bl	8002ea0 <send_debug_logs>
            break;
 80086dc:	e022      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <check_for_error+0x15c>)
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fa fbdd 	bl	8002ea0 <send_debug_logs>
            break;
 80086e6:	e01d      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80086e8:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <check_for_error+0x160>)
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7fa fbd8 	bl	8002ea0 <send_debug_logs>
            break;
 80086f0:	e018      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <check_for_error+0x164>)
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7fa fbd3 	bl	8002ea0 <send_debug_logs>
            break;
 80086fa:	e013      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80086fc:	4b1b      	ldr	r3, [pc, #108]	; (800876c <check_for_error+0x168>)
 80086fe:	0018      	movs	r0, r3
 8008700:	f7fa fbce 	bl	8002ea0 <send_debug_logs>
            break;
 8008704:	e00e      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <check_for_error+0x16c>)
 8008708:	0018      	movs	r0, r3
 800870a:	f7fa fbc9 	bl	8002ea0 <send_debug_logs>
            break;
 800870e:	e009      	b.n	8008724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8008710:	4b18      	ldr	r3, [pc, #96]	; (8008774 <check_for_error+0x170>)
 8008712:	0018      	movs	r0, r3
 8008714:	f7fa fbc4 	bl	8002ea0 <send_debug_logs>
            break;
 8008718:	e004      	b.n	8008724 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800871a:	4b17      	ldr	r3, [pc, #92]	; (8008778 <check_for_error+0x174>)
 800871c:	0018      	movs	r0, r3
 800871e:	f7fa fbbf 	bl	8002ea0 <send_debug_logs>
            break;
 8008722:	46c0      	nop			; (mov r8, r8)
    }
}
 8008724:	46c0      	nop			; (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	b004      	add	sp, #16
 800872a:	bd80      	pop	{r7, pc}
 800872c:	00004601 	.word	0x00004601
 8008730:	00004501 	.word	0x00004501
 8008734:	00003501 	.word	0x00003501
 8008738:	00002601 	.word	0x00002601
 800873c:	00002511 	.word	0x00002511
 8008740:	00002501 	.word	0x00002501
 8008744:	00000611 	.word	0x00000611
 8008748:	00000601 	.word	0x00000601
 800874c:	08012680 	.word	0x08012680
 8008750:	080126cc 	.word	0x080126cc
 8008754:	08012730 	.word	0x08012730
 8008758:	08012768 	.word	0x08012768
 800875c:	0801280c 	.word	0x0801280c
 8008760:	08012874 	.word	0x08012874
 8008764:	080128d4 	.word	0x080128d4
 8008768:	08012960 	.word	0x08012960
 800876c:	080129c0 	.word	0x080129c0
 8008770:	08012a6c 	.word	0x08012a6c
 8008774:	08012ab8 	.word	0x08012ab8
 8008778:	08012b00 	.word	0x08012b00

0800877c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800877c:	b5b0      	push	{r4, r5, r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8008786:	230f      	movs	r3, #15
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800878e:	2316      	movs	r3, #22
 8008790:	18fb      	adds	r3, r7, r3
 8008792:	2200      	movs	r2, #0
 8008794:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8008796:	f7fa fc11 	bl	8002fbc <get_systick>
 800879a:	0003      	movs	r3, r0
 800879c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800879e:	2315      	movs	r3, #21
 80087a0:	18fb      	adds	r3, r7, r3
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80087a6:	e054      	b.n	8008852 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80087a8:	4a34      	ldr	r2, [pc, #208]	; (800887c <receive_astronode_answer+0x100>)
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	0011      	movs	r1, r2
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7fa fc0c 	bl	8002fcc <is_systick_timeout_over>
 80087b4:	1e03      	subs	r3, r0, #0
 80087b6:	d005      	beq.n	80087c4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80087b8:	4b31      	ldr	r3, [pc, #196]	; (8008880 <receive_astronode_answer+0x104>)
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7fa fb70 	bl	8002ea0 <send_debug_logs>
            return RS_FAILURE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e057      	b.n	8008874 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80087c4:	250f      	movs	r5, #15
 80087c6:	197b      	adds	r3, r7, r5
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7fa fbd1 	bl	8002f70 <is_astronode_character_received>
 80087ce:	0003      	movs	r3, r0
 80087d0:	0019      	movs	r1, r3
 80087d2:	2016      	movs	r0, #22
 80087d4:	183b      	adds	r3, r7, r0
 80087d6:	183a      	adds	r2, r7, r0
 80087d8:	8812      	ldrh	r2, [r2, #0]
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	2415      	movs	r4, #21
 80087de:	193b      	adds	r3, r7, r4
 80087e0:	193a      	adds	r2, r7, r4
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d033      	beq.n	8008852 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80087ea:	197b      	adds	r3, r7, r5
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d105      	bne.n	80087fe <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80087f2:	193b      	adds	r3, r7, r4
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80087f8:	183b      	adds	r3, r7, r0
 80087fa:	2200      	movs	r2, #0
 80087fc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80087fe:	2116      	movs	r1, #22
 8008800:	187b      	adds	r3, r7, r1
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	18d3      	adds	r3, r2, r3
 8008808:	220f      	movs	r2, #15
 800880a:	18ba      	adds	r2, r7, r2
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	701a      	strb	r2, [r3, #0]
            length++;
 8008810:	187b      	adds	r3, r7, r1
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	187b      	adds	r3, r7, r1
 8008816:	3201      	adds	r2, #1
 8008818:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800881a:	187b      	adds	r3, r7, r1
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	2bb2      	cmp	r3, #178	; 0xb2
 8008820:	d905      	bls.n	800882e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8008822:	4b18      	ldr	r3, [pc, #96]	; (8008884 <receive_astronode_answer+0x108>)
 8008824:	0018      	movs	r0, r3
 8008826:	f7fa fb3b 	bl	8002ea0 <send_debug_logs>
                return RS_FAILURE;
 800882a:	2300      	movs	r3, #0
 800882c:	e022      	b.n	8008874 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800882e:	230f      	movs	r3, #15
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b03      	cmp	r3, #3
 8008836:	d10c      	bne.n	8008852 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8008838:	2216      	movs	r2, #22
 800883a:	18bb      	adds	r3, r7, r2
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d907      	bls.n	8008852 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	18ba      	adds	r2, r7, r2
 8008846:	8812      	ldrh	r2, [r2, #0]
 8008848:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800884a:	2315      	movs	r3, #21
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	2201      	movs	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008852:	2315      	movs	r3, #21
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2201      	movs	r2, #1
 800885a:	4053      	eors	r3, r2
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1a2      	bne.n	80087a8 <receive_astronode_answer+0x2c>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <receive_astronode_answer+0x10c>)
 8008864:	0018      	movs	r0, r3
 8008866:	f7fa fb1b 	bl	8002ea0 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	f7fa fb17 	bl	8002ea0 <send_debug_logs>

    return RS_SUCCESS;
 8008872:	2301      	movs	r3, #1
}
 8008874:	0018      	movs	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	b006      	add	sp, #24
 800887a:	bdb0      	pop	{r4, r5, r7, pc}
 800887c:	000005dc 	.word	0x000005dc
 8008880:	08012b24 	.word	0x08012b24
 8008884:	08012b48 	.word	0x08012b48
 8008888:	08012b94 	.word	0x08012b94

0800888c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	0002      	movs	r2, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	1dfb      	adds	r3, r7, #7
 8008898:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800889a:	1dfb      	adds	r3, r7, #7
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	091b      	lsrs	r3, r3, #4
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	001a      	movs	r2, r3
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <uint8_to_ascii_buffer+0x3c>)
 80088a6:	5c9a      	ldrb	r2, [r3, r2]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80088ac:	1dfb      	adds	r3, r7, #7
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	220f      	movs	r2, #15
 80088b2:	401a      	ands	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	4903      	ldr	r1, [pc, #12]	; (80088c8 <uint8_to_ascii_buffer+0x3c>)
 80088ba:	5c8a      	ldrb	r2, [r1, r2]
 80088bc:	701a      	strb	r2, [r3, #0]
}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	46bd      	mov	sp, r7
 80088c2:	b002      	add	sp, #8
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	08012d70 	.word	0x08012d70

080088cc <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80088d2:	1dfb      	adds	r3, r7, #7
 80088d4:	2200      	movs	r2, #0
 80088d6:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 80088d8:	4b24      	ldr	r3, [pc, #144]	; (800896c <my_astro_init+0xa0>)
 80088da:	2200      	movs	r2, #0
 80088dc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80088de:	4b24      	ldr	r3, [pc, #144]	; (8008970 <my_astro_init+0xa4>)
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7fd f895 	bl	8005a10 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80088e6:	e01a      	b.n	800891e <my_astro_init+0x52>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 80088e8:	1dfc      	adds	r4, r7, #7
 80088ea:	2300      	movs	r3, #0
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	2301      	movs	r3, #1
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	2301      	movs	r3, #1
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	2301      	movs	r3, #1
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	2300      	movs	r3, #0
 80088fc:	2201      	movs	r2, #1
 80088fe:	2101      	movs	r1, #1
 8008900:	2001      	movs	r0, #1
 8008902:	f7fe fb55 	bl	8006fb0 <astronode_send_cfg_wr>
 8008906:	0003      	movs	r3, r0
 8008908:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 800890a:	f7fa fb83 	bl	8003014 <my_astro_off>
		HAL_Delay ( 3000 ) ;
 800890e:	4b19      	ldr	r3, [pc, #100]	; (8008974 <my_astro_init+0xa8>)
 8008910:	0018      	movs	r0, r3
 8008912:	f7fa ffa1 	bl	8003858 <HAL_Delay>
		my_astro_on () ;
 8008916:	f7fa fb6f 	bl	8002ff8 <my_astro_on>
		reset_astronode () ;
 800891a:	f7fa faf1 	bl	8002f00 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <my_astro_init+0xa0>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	2b3b      	cmp	r3, #59	; 0x3b
 8008924:	d806      	bhi.n	8008934 <my_astro_init+0x68>
 8008926:	1dfb      	adds	r3, r7, #7
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2201      	movs	r2, #1
 800892c:	4053      	eors	r3, r2
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1d9      	bne.n	80088e8 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8008934:	4b0d      	ldr	r3, [pc, #52]	; (800896c <my_astro_init+0xa0>)
 8008936:	2200      	movs	r2, #0
 8008938:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800893a:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <my_astro_init+0xa4>)
 800893c:	0018      	movs	r0, r3
 800893e:	f7fd f8c3 	bl	8005ac8 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8008942:	1dfb      	adds	r3, r7, #7
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <my_astro_init+0x96>
	{
		astronode_send_cfg_sr () ;
 800894a:	f7fe faf9 	bl	8006f40 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800894e:	f7ff f8cd 	bl	8007aec <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8008952:	f7fe fc83 	bl	800725c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8008956:	f7fe fbd7 	bl	8007108 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800895a:	f7fe ff55 	bl	8007808 <astronode_send_pld_fr>
		return true ;
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <my_astro_init+0x98>
	}
	else
	{
		return false ;
 8008962:	2300      	movs	r3, #0
	}
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b003      	add	sp, #12
 800896a:	bd90      	pop	{r4, r7, pc}
 800896c:	20000bf2 	.word	0x20000bf2
 8008970:	20000784 	.word	0x20000784
 8008974:	00000bb8 	.word	0x00000bb8

08008978 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8008980:	240e      	movs	r4, #14
 8008982:	193b      	adds	r3, r7, r4
 8008984:	2200      	movs	r2, #0
 8008986:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	0018      	movs	r0, r3
 800898c:	f7f7 fbba 	bl	8000104 <strlen>
 8008990:	0003      	movs	r3, r0
 8008992:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2ba0      	cmp	r3, #160	; 0xa0
 8008998:	d80b      	bhi.n	80089b2 <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	b29a      	uxth	r2, r3
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	193b      	adds	r3, r7, r4
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7fe fea3 	bl	80076f0 <astronode_send_pld_er>
 80089aa:	1e03      	subs	r3, r0, #0
 80089ac:	d005      	beq.n	80089ba <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e004      	b.n	80089bc <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 80089b2:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <my_astro_add_payload_2_queue+0x4c>)
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7fa fa73 	bl	8002ea0 <send_debug_logs>
	}
	return false ;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	0018      	movs	r0, r3
 80089be:	46bd      	mov	sp, r7
 80089c0:	b005      	add	sp, #20
 80089c2:	bd90      	pop	{r4, r7, pc}
 80089c4:	08012bc0 	.word	0x08012bc0

080089c8 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
	send_debug_logs ( "Evt pin is high." ) ;
 80089cc:	4b15      	ldr	r3, [pc, #84]	; (8008a24 <my_astro_read_evt_reg+0x5c>)
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7fa fa66 	bl	8002ea0 <send_debug_logs>
	astronode_send_evt_rr () ;
 80089d4:	f7fe fd4c 	bl	8007470 <astronode_send_evt_rr>
	if (is_sak_available () )
 80089d8:	f7ff fae2 	bl	8007fa0 <is_sak_available>
 80089dc:	1e03      	subs	r3, r0, #0
 80089de:	d007      	beq.n	80089f0 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 80089e0:	f7fe ffee 	bl	80079c0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80089e4:	f7ff f842 	bl	8007a6c <astronode_send_sak_cr>
	  send_debug_logs ( "Message has been acknowledged." ) ;
 80089e8:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <my_astro_read_evt_reg+0x60>)
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7fa fa58 	bl	8002ea0 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80089f0:	f7ff fae0 	bl	8007fb4 <is_astronode_reset>
 80089f4:	1e03      	subs	r3, r0, #0
 80089f6:	d005      	beq.n	8008a04 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "Terminal has been reset." ) ;
 80089f8:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <my_astro_read_evt_reg+0x64>)
 80089fa:	0018      	movs	r0, r3
 80089fc:	f7fa fa50 	bl	8002ea0 <send_debug_logs>
	  astronode_send_res_cr () ;
 8008a00:	f7fe ff3e 	bl	8007880 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8008a04:	f7ff fae0 	bl	8007fc8 <is_command_available>
 8008a08:	1e03      	subs	r3, r0, #0
 8008a0a:	d007      	beq.n	8008a1c <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "Unicast command is available" ) ;
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <my_astro_read_evt_reg+0x68>)
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f7fa fa46 	bl	8002ea0 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8008a14:	f7ff f954 	bl	8007cc0 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8008a18:	f7ff f912 	bl	8007c40 <astronode_send_cmd_cr>
	}
	return true ;
 8008a1c:	2301      	movs	r3, #1
}
 8008a1e:	0018      	movs	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08012c04 	.word	0x08012c04
 8008a28:	08012c18 	.word	0x08012c18
 8008a2c:	08012c38 	.word	0x08012c38
 8008a30:	08012c54 	.word	0x08012c54

08008a34 <my_astro_log>:
bool my_astro_log ( void )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 8008a38:	f7fe ff62 	bl	8007900 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8008a3c:	f7fe fcb8 	bl	80073b0 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8008a40:	2301      	movs	r3, #1
}
 8008a42:	0018      	movs	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	0011      	movs	r1, r2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f7fe fd89 	bl	8007570 <astronode_send_geo_wr>
}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b002      	add	sp, #8
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8008a70:	2508      	movs	r5, #8
 8008a72:	197b      	adds	r3, r7, r5
 8008a74:	1cda      	adds	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	0011      	movs	r1, r2
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fb56 	bl	800912c <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8008a80:	197b      	adds	r3, r7, r5
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	0011      	movs	r1, r2
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f000 fb89 	bl	80091a0 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8008a8e:	197b      	adds	r3, r7, r5
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	0011      	movs	r1, r2
 8008a96:	0018      	movs	r0, r3
 8008a98:	f000 fbbc 	bl	8009214 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8008a9c:	240c      	movs	r4, #12
 8008a9e:	193a      	adds	r2, r7, r4
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	0011      	movs	r1, r2
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f000 fbef 	bl	8009288 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8008aaa:	193b      	adds	r3, r7, r4
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	0011      	movs	r1, r2
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 fc22 	bl	80092fc <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8008ab8:	193b      	adds	r3, r7, r4
 8008aba:	1c9a      	adds	r2, r3, #2
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0011      	movs	r1, r2
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f000 fc55 	bl	8009370 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8008ac6:	193b      	adds	r3, r7, r4
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	0011      	movs	r1, r2
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f000 fc88 	bl	80093e4 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008ad4:	193b      	adds	r3, r7, r4
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008ada:	193b      	adds	r3, r7, r4
 8008adc:	2200      	movs	r2, #0
 8008ade:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7fc fed3 	bl	800588e <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8008ae8:	1939      	adds	r1, r7, r4
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7fc fad0 	bl	8005094 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8008af4:	1979      	adds	r1, r7, r5
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	0018      	movs	r0, r3
 8008afc:	f7fc fbce 	bl	800529c <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8008b00:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008b02:	0018      	movs	r0, r3
 8008b04:	f7fc fef7 	bl	80058f6 <HAL_RTCEx_DisableBypassShadow>
}
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b008      	add	sp, #32
 8008b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b10:	20000758 	.word	0x20000758

08008b14 <get_my_rtc_time>:
void get_my_rtc_time ( char* dt )
{
 8008b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b16:	b08d      	sub	sp, #52	; 0x34
 8008b18:	af04      	add	r7, sp, #16
 8008b1a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8008b1c:	2508      	movs	r5, #8
 8008b1e:	1979      	adds	r1, r7, r5
 8008b20:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <get_my_rtc_time+0x68>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fc fb5d 	bl	80051e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8008b2a:	241c      	movs	r4, #28
 8008b2c:	1939      	adds	r1, r7, r4
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <get_my_rtc_time+0x68>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	0018      	movs	r0, r3
 8008b34:	f7fc fc44 	bl	80053c0 <HAL_RTC_GetDate>

	sprintf ( dt , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8008b38:	0021      	movs	r1, r4
 8008b3a:	187b      	adds	r3, r7, r1
 8008b3c:	78db      	ldrb	r3, [r3, #3]
 8008b3e:	22fa      	movs	r2, #250	; 0xfa
 8008b40:	00d2      	lsls	r2, r2, #3
 8008b42:	189a      	adds	r2, r3, r2
 8008b44:	187b      	adds	r3, r7, r1
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	469c      	mov	ip, r3
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	789b      	ldrb	r3, [r3, #2]
 8008b4e:	001c      	movs	r4, r3
 8008b50:	0029      	movs	r1, r5
 8008b52:	187b      	adds	r3, r7, r1
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	001d      	movs	r5, r3
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	001e      	movs	r6, r3
 8008b5e:	187b      	adds	r3, r7, r1
 8008b60:	789b      	ldrb	r3, [r3, #2]
 8008b62:	4907      	ldr	r1, [pc, #28]	; (8008b80 <get_my_rtc_time+0x6c>)
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	9602      	str	r6, [sp, #8]
 8008b6a:	9501      	str	r5, [sp, #4]
 8008b6c:	9400      	str	r4, [sp, #0]
 8008b6e:	4663      	mov	r3, ip
 8008b70:	f001 fe6a 	bl	800a848 <sprintf>
}
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b009      	add	sp, #36	; 0x24
 8008b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7c:	20000758 	.word	0x20000758
 8008b80:	08012c74 	.word	0x08012c74

08008b84 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2100      	movs	r1, #0
 8008b90:	0018      	movs	r0, r3
 8008b92:	f001 fcbd 	bl	800a510 <strtod>
 8008b96:	0002      	movs	r2, r0
 8008b98:	000b      	movs	r3, r1
 8008b9a:	60ba      	str	r2, [r7, #8]
 8008b9c:	60fb      	str	r3, [r7, #12]
    return d ;
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	0010      	movs	r0, r2
 8008ba4:	0019      	movs	r1, r3
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	b004      	add	sp, #16
 8008baa:	bd80      	pop	{r7, pc}

08008bac <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	0008      	movs	r0, r1
 8008bb6:	0011      	movs	r1, r2
 8008bb8:	1cfb      	adds	r3, r7, #3
 8008bba:	1c02      	adds	r2, r0, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	1cbb      	adds	r3, r7, #2
 8008bc0:	1c0a      	adds	r2, r1, #0
 8008bc2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8008bc4:	230f      	movs	r3, #15
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8008bcc:	230e      	movs	r3, #14
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8008bd4:	e01c      	b.n	8008c10 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8008bd6:	230f      	movs	r3, #15
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	18d3      	adds	r3, r2, r3
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	1cfa      	adds	r2, r7, #3
 8008be4:	7812      	ldrb	r2, [r2, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d105      	bne.n	8008bf6 <my_find_char_position+0x4a>
			p++ ;
 8008bea:	210e      	movs	r1, #14
 8008bec:	187b      	adds	r3, r7, r1
 8008bee:	781a      	ldrb	r2, [r3, #0]
 8008bf0:	187b      	adds	r3, r7, r1
 8008bf2:	3201      	adds	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8008bf6:	230e      	movs	r3, #14
 8008bf8:	18fa      	adds	r2, r7, r3
 8008bfa:	1cbb      	adds	r3, r7, #2
 8008bfc:	7812      	ldrb	r2, [r2, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d00e      	beq.n	8008c22 <my_find_char_position+0x76>
			break ;
		i++ ;
 8008c04:	210f      	movs	r1, #15
 8008c06:	187b      	adds	r3, r7, r1
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	3201      	adds	r2, #1
 8008c0e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8008c10:	230f      	movs	r3, #15
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	18d3      	adds	r3, r2, r3
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1da      	bne.n	8008bd6 <my_find_char_position+0x2a>
 8008c20:	e000      	b.n	8008c24 <my_find_char_position+0x78>
			break ;
 8008c22:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8008c24:	230f      	movs	r3, #15
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	781b      	ldrb	r3, [r3, #0]
}
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	b004      	add	sp, #16
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b24      	cmp	r3, #36	; 0x24
 8008c44:	d117      	bne.n	8008c76 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	b2d1      	uxtb	r1, r2
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	7011      	strb	r1, [r2, #0]
 8008c58:	001a      	movs	r2, r3
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	189b      	adds	r3, r3, r2
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	001a      	movs	r2, r3
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e045      	b.n	8008d02 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b1f      	cmp	r3, #31
 8008c7c:	d907      	bls.n	8008c8e <my_nmea_message+0x5c>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b7e      	cmp	r3, #126	; 0x7e
 8008c84:	d803      	bhi.n	8008c8e <my_nmea_message+0x5c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <my_nmea_message+0x64>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b0d      	cmp	r3, #13
 8008c94:	d114      	bne.n	8008cc0 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	b2d1      	uxtb	r1, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	7011      	strb	r1, [r2, #0]
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	189b      	adds	r3, r3, r2
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	001a      	movs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e020      	b.n	8008d02 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b0a      	cmp	r3, #10
 8008cc6:	d11a      	bne.n	8008cfe <my_nmea_message+0xcc>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d916      	bls.n	8008cfe <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	189b      	adds	r3, r3, r2
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b0d      	cmp	r3, #13
 8008cea:	d108      	bne.n	8008cfe <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	001a      	movs	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e001      	b.n	8008d02 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	425b      	negs	r3, r3
}
 8008d02:	0018      	movs	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	b004      	add	sp, #16
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3309      	adds	r3, #9
 8008d16:	781b      	ldrb	r3, [r3, #0]
}
 8008d18:	0018      	movs	r0, r3
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	b002      	add	sp, #8
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8008d20:	b5b0      	push	{r4, r5, r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	220f      	movs	r2, #15
 8008d2c:	212c      	movs	r1, #44	; 0x2c
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7ff ff3c 	bl	8008bac <my_find_char_position>
 8008d34:	0003      	movs	r3, r0
 8008d36:	001a      	movs	r2, r3
 8008d38:	2517      	movs	r5, #23
 8008d3a:	197b      	adds	r3, r7, r5
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2210      	movs	r2, #16
 8008d44:	212c      	movs	r1, #44	; 0x2c
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff ff30 	bl	8008bac <my_find_char_position>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	0019      	movs	r1, r3
 8008d50:	2416      	movs	r4, #22
 8008d52:	193b      	adds	r3, r7, r4
 8008d54:	197a      	adds	r2, r7, r5
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	1a8a      	subs	r2, r1, r2
 8008d5a:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8008d5c:	193b      	adds	r3, r7, r4
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 fb72 	bl	800944c <malloc>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8008d6c:	197b      	adds	r3, r7, r5
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	18d1      	adds	r1, r2, r3
 8008d74:	193b      	adds	r3, r7, r4
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f001 fe13 	bl	800a9a6 <strncpy>
	pdop_s[pdop_length] = '\0';
 8008d80:	193b      	adds	r3, r7, r4
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f7ff fef8 	bl	8008b84 <my_string2double_conv>
 8008d94:	0002      	movs	r2, r0
 8008d96:	000b      	movs	r3, r1
 8008d98:	60ba      	str	r2, [r7, #8]
 8008d9a:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f000 fb5e 	bl	8009460 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	0010      	movs	r0, r2
 8008daa:	0019      	movs	r1, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b006      	add	sp, #24
 8008db0:	bdb0      	pop	{r4, r5, r7, pc}

08008db2 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8008db2:	b590      	push	{r4, r7, lr}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8008dba:	230f      	movs	r3, #15
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8008dc2:	230e      	movs	r3, #14
 8008dc4:	18fb      	adds	r3, r7, r3
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008dca:	e00f      	b.n	8008dec <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8008dcc:	220e      	movs	r2, #14
 8008dce:	18bb      	adds	r3, r7, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	18ba      	adds	r2, r7, r2
 8008dd4:	1c59      	adds	r1, r3, #1
 8008dd6:	7011      	strb	r1, [r2, #0]
 8008dd8:	001a      	movs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	189b      	adds	r3, r3, r2
 8008dde:	7819      	ldrb	r1, [r3, #0]
 8008de0:	220f      	movs	r2, #15
 8008de2:	18bb      	adds	r3, r7, r2
 8008de4:	18ba      	adds	r2, r7, r2
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	404a      	eors	r2, r1
 8008dea:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008dec:	210e      	movs	r1, #14
 8008dee:	187b      	adds	r3, r7, r1
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	18d3      	adds	r3, r2, r3
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfa:	d00a      	beq.n	8008e12 <is_my_nmea_checksum_ok+0x60>
 8008dfc:	187b      	adds	r3, r7, r1
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	18d3      	adds	r3, r2, r3
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <is_my_nmea_checksum_ok+0x60>
 8008e0a:	187b      	adds	r3, r7, r1
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1dc      	bne.n	8008dcc <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8008e12:	230f      	movs	r3, #15
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	781c      	ldrb	r4, [r3, #0]
 8008e18:	210e      	movs	r1, #14
 8008e1a:	187b      	adds	r3, r7, r1
 8008e1c:	187a      	adds	r2, r7, r1
 8008e1e:	7812      	ldrb	r2, [r2, #0]
 8008e20:	3201      	adds	r2, #1
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	187b      	adds	r3, r7, r1
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	18d3      	adds	r3, r2, r3
 8008e2c:	2210      	movs	r2, #16
 8008e2e:	2100      	movs	r1, #0
 8008e30:	0018      	movs	r0, r3
 8008e32:	f001 fc05 	bl	800a640 <strtol>
 8008e36:	0003      	movs	r3, r0
 8008e38:	1ae3      	subs	r3, r4, r3
 8008e3a:	425a      	negs	r2, r3
 8008e3c:	4153      	adcs	r3, r2
 8008e3e:	b2db      	uxtb	r3, r3
}
 8008e40:	0018      	movs	r0, r3
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b005      	add	sp, #20
 8008e46:	bd90      	pop	{r4, r7, pc}

08008e48 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	000a      	movs	r2, r1
 8008e52:	1cfb      	adds	r3, r7, #3
 8008e54:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8008e56:	2308      	movs	r3, #8
 8008e58:	18fa      	adds	r2, r7, r3
 8008e5a:	492f      	ldr	r1, [pc, #188]	; (8008f18 <nmea2decimal+0xd0>)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f001 fd12 	bl	800a888 <sscanf>
    min = deg / 100 ;
 8008e64:	68b8      	ldr	r0, [r7, #8]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	; (8008f1c <nmea2decimal+0xd4>)
 8008e6c:	f7f8 f804 	bl	8000e78 <__aeabi_ddiv>
 8008e70:	0002      	movs	r2, r0
 8008e72:	000b      	movs	r3, r1
 8008e74:	613a      	str	r2, [r7, #16]
 8008e76:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8008e78:	6938      	ldr	r0, [r7, #16]
 8008e7a:	6979      	ldr	r1, [r7, #20]
 8008e7c:	f7f9 fa58 	bl	8002330 <__aeabi_d2iz>
 8008e80:	0003      	movs	r3, r0
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7f9 fa8a 	bl	800239c <__aeabi_i2d>
 8008e88:	0002      	movs	r2, r0
 8008e8a:	000b      	movs	r3, r1
 8008e8c:	60ba      	str	r2, [r7, #8]
 8008e8e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6938      	ldr	r0, [r7, #16]
 8008e96:	6979      	ldr	r1, [r7, #20]
 8008e98:	f7f8 feaa 	bl	8001bf0 <__aeabi_dsub>
 8008e9c:	0002      	movs	r2, r0
 8008e9e:	000b      	movs	r3, r1
 8008ea0:	0010      	movs	r0, r2
 8008ea2:	0019      	movs	r1, r3
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4b1e      	ldr	r3, [pc, #120]	; (8008f20 <nmea2decimal+0xd8>)
 8008ea8:	f7f8 fbe0 	bl	800166c <__aeabi_dmul>
 8008eac:	0002      	movs	r2, r0
 8008eae:	000b      	movs	r3, r1
 8008eb0:	613a      	str	r2, [r7, #16]
 8008eb2:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4b1b      	ldr	r3, [pc, #108]	; (8008f24 <nmea2decimal+0xdc>)
 8008eb8:	6938      	ldr	r0, [r7, #16]
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	f7f7 ffdc 	bl	8000e78 <__aeabi_ddiv>
 8008ec0:	0002      	movs	r2, r0
 8008ec2:	000b      	movs	r3, r1
 8008ec4:	613a      	str	r2, [r7, #16]
 8008ec6:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8008ec8:	1cfb      	adds	r3, r7, #3
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b53      	cmp	r3, #83	; 0x53
 8008ece:	d003      	beq.n	8008ed8 <nmea2decimal+0x90>
 8008ed0:	1cfb      	adds	r3, r7, #3
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b57      	cmp	r3, #87	; 0x57
 8008ed6:	d10e      	bne.n	8008ef6 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8008ed8:	68b8      	ldr	r0, [r7, #8]
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f7f7 fc6a 	bl	80007b8 <__aeabi_dadd>
 8008ee4:	0002      	movs	r2, r0
 8008ee6:	000b      	movs	r3, r1
 8008ee8:	0011      	movs	r1, r2
 8008eea:	000c      	movs	r4, r1
 8008eec:	2180      	movs	r1, #128	; 0x80
 8008eee:	0609      	lsls	r1, r1, #24
 8008ef0:	4059      	eors	r1, r3
 8008ef2:	000d      	movs	r5, r1
 8008ef4:	e009      	b.n	8008f0a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8008ef6:	68b8      	ldr	r0, [r7, #8]
 8008ef8:	68f9      	ldr	r1, [r7, #12]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f7f7 fc5b 	bl	80007b8 <__aeabi_dadd>
 8008f02:	0002      	movs	r2, r0
 8008f04:	000b      	movs	r3, r1
 8008f06:	0014      	movs	r4, r2
 8008f08:	001d      	movs	r5, r3
}
 8008f0a:	0022      	movs	r2, r4
 8008f0c:	002b      	movs	r3, r5
 8008f0e:	0010      	movs	r0, r2
 8008f10:	0019      	movs	r1, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b006      	add	sp, #24
 8008f16:	bdb0      	pop	{r4, r5, r7, pc}
 8008f18:	08012c94 	.word	0x08012c94
 8008f1c:	40590000 	.word	0x40590000
 8008f20:	40240000 	.word	0x40240000
 8008f24:	40180000 	.word	0x40180000

08008f28 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8008f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2a:	b091      	sub	sp, #68	; 0x44
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	212c      	movs	r1, #44	; 0x2c
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f7ff fe35 	bl	8008bac <my_find_char_position>
 8008f42:	0003      	movs	r3, r0
 8008f44:	001a      	movs	r2, r3
 8008f46:	2537      	movs	r5, #55	; 0x37
 8008f48:	197b      	adds	r3, r7, r5
 8008f4a:	3201      	adds	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	212c      	movs	r1, #44	; 0x2c
 8008f54:	0018      	movs	r0, r3
 8008f56:	f7ff fe29 	bl	8008bac <my_find_char_position>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	2436      	movs	r4, #54	; 0x36
 8008f60:	193b      	adds	r3, r7, r4
 8008f62:	197a      	adds	r2, r7, r5
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	1a8a      	subs	r2, r1, r2
 8008f68:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8008f6a:	193b      	adds	r3, r7, r4
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	0018      	movs	r0, r3
 8008f72:	f000 fa6b 	bl	800944c <malloc>
 8008f76:	0003      	movs	r3, r0
 8008f78:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8008f7a:	197b      	adds	r3, r7, r5
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	18d1      	adds	r1, r2, r3
 8008f82:	193b      	adds	r3, r7, r4
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f001 fd0c 	bl	800a9a6 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8008f8e:	193b      	adds	r3, r7, r4
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f94:	18d3      	adds	r3, r2, r3
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8008f9a:	197b      	adds	r3, r7, r5
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	193b      	adds	r3, r7, r4
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	18d2      	adds	r2, r2, r3
 8008faa:	262f      	movs	r6, #47	; 0x2f
 8008fac:	19bb      	adds	r3, r7, r6
 8008fae:	7812      	ldrb	r2, [r2, #0]
 8008fb0:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8008fb2:	19bb      	adds	r3, r7, r6
 8008fb4:	781a      	ldrb	r2, [r3, #0]
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	0011      	movs	r1, r2
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff ff44 	bl	8008e48 <nmea2decimal>
 8008fc0:	0002      	movs	r2, r0
 8008fc2:	000b      	movs	r3, r1
 8008fc4:	623a      	str	r2, [r7, #32]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 fa48 	bl	8009460 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4b53      	ldr	r3, [pc, #332]	; (8009120 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008fd4:	6a38      	ldr	r0, [r7, #32]
 8008fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fd8:	f7f8 fb48 	bl	800166c <__aeabi_dmul>
 8008fdc:	0002      	movs	r2, r0
 8008fde:	000b      	movs	r3, r1
 8008fe0:	0010      	movs	r0, r2
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	f008 f9fc 	bl	80113e0 <round>
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4b4d      	ldr	r3, [pc, #308]	; (8009120 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008fec:	f7f7 ff44 	bl	8000e78 <__aeabi_ddiv>
 8008ff0:	0002      	movs	r2, r0
 8008ff2:	000b      	movs	r3, r1
 8008ff4:	623a      	str	r2, [r7, #32]
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 8008ff8:	494a      	ldr	r1, [pc, #296]	; (8009124 <get_my_nmea_gngll_coordinates+0x1fc>)
 8008ffa:	68b8      	ldr	r0, [r7, #8]
 8008ffc:	6a3a      	ldr	r2, [r7, #32]
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	9200      	str	r2, [sp, #0]
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	000a      	movs	r2, r1
 8009006:	210c      	movs	r1, #12
 8009008:	f001 fbea 	bl	800a7e0 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800900c:	2200      	movs	r2, #0
 800900e:	4b46      	ldr	r3, [pc, #280]	; (8009128 <get_my_nmea_gngll_coordinates+0x200>)
 8009010:	6a38      	ldr	r0, [r7, #32]
 8009012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009014:	f7f8 fb2a 	bl	800166c <__aeabi_dmul>
 8009018:	0002      	movs	r2, r0
 800901a:	000b      	movs	r3, r1
 800901c:	0010      	movs	r0, r2
 800901e:	0019      	movs	r1, r3
 8009020:	f7f9 f986 	bl	8002330 <__aeabi_d2iz>
 8009024:	0002      	movs	r2, r0
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2203      	movs	r2, #3
 800902e:	212c      	movs	r1, #44	; 0x2c
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fdbb 	bl	8008bac <my_find_char_position>
 8009036:	0003      	movs	r3, r0
 8009038:	001a      	movs	r2, r3
 800903a:	197b      	adds	r3, r7, r5
 800903c:	3201      	adds	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2204      	movs	r2, #4
 8009044:	212c      	movs	r1, #44	; 0x2c
 8009046:	0018      	movs	r0, r3
 8009048:	f7ff fdb0 	bl	8008bac <my_find_char_position>
 800904c:	0003      	movs	r3, r0
 800904e:	0019      	movs	r1, r3
 8009050:	193b      	adds	r3, r7, r4
 8009052:	197a      	adds	r2, r7, r5
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	1a8a      	subs	r2, r1, r2
 8009058:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800905a:	193b      	adds	r3, r7, r4
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	0018      	movs	r0, r3
 8009062:	f000 f9f3 	bl	800944c <malloc>
 8009066:	0003      	movs	r3, r0
 8009068:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800906a:	197b      	adds	r3, r7, r5
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	18d1      	adds	r1, r2, r3
 8009072:	193b      	adds	r3, r7, r4
 8009074:	781a      	ldrb	r2, [r3, #0]
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	0018      	movs	r0, r3
 800907a:	f001 fc94 	bl	800a9a6 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800907e:	193b      	adds	r3, r7, r4
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800908a:	197b      	adds	r3, r7, r5
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	193b      	adds	r3, r7, r4
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	18d3      	adds	r3, r2, r3
 8009094:	3301      	adds	r3, #1
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	18d2      	adds	r2, r2, r3
 800909a:	19bb      	adds	r3, r7, r6
 800909c:	7812      	ldrb	r2, [r2, #0]
 800909e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 80090a0:	19bb      	adds	r3, r7, r6
 80090a2:	781a      	ldrb	r2, [r3, #0]
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	0011      	movs	r1, r2
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7ff fecd 	bl	8008e48 <nmea2decimal>
 80090ae:	0002      	movs	r2, r0
 80090b0:	000b      	movs	r3, r1
 80090b2:	613a      	str	r2, [r7, #16]
 80090b4:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	0018      	movs	r0, r3
 80090ba:	f000 f9d1 	bl	8009460 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 80090be:	2200      	movs	r2, #0
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <get_my_nmea_gngll_coordinates+0x1f8>)
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	6979      	ldr	r1, [r7, #20]
 80090c6:	f7f8 fad1 	bl	800166c <__aeabi_dmul>
 80090ca:	0002      	movs	r2, r0
 80090cc:	000b      	movs	r3, r1
 80090ce:	0010      	movs	r0, r2
 80090d0:	0019      	movs	r1, r3
 80090d2:	f008 f985 	bl	80113e0 <round>
 80090d6:	2200      	movs	r2, #0
 80090d8:	4b11      	ldr	r3, [pc, #68]	; (8009120 <get_my_nmea_gngll_coordinates+0x1f8>)
 80090da:	f7f7 fecd 	bl	8000e78 <__aeabi_ddiv>
 80090de:	0002      	movs	r2, r0
 80090e0:	000b      	movs	r3, r1
 80090e2:	613a      	str	r2, [r7, #16]
 80090e4:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 80090e6:	490f      	ldr	r1, [pc, #60]	; (8009124 <get_my_nmea_gngll_coordinates+0x1fc>)
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	000a      	movs	r2, r1
 80090f4:	210c      	movs	r1, #12
 80090f6:	f001 fb73 	bl	800a7e0 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 80090fa:	2200      	movs	r2, #0
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <get_my_nmea_gngll_coordinates+0x200>)
 80090fe:	6938      	ldr	r0, [r7, #16]
 8009100:	6979      	ldr	r1, [r7, #20]
 8009102:	f7f8 fab3 	bl	800166c <__aeabi_dmul>
 8009106:	0002      	movs	r2, r0
 8009108:	000b      	movs	r3, r1
 800910a:	0010      	movs	r0, r2
 800910c:	0019      	movs	r1, r3
 800910e:	f7f9 f90f 	bl	8002330 <__aeabi_d2iz>
 8009112:	0002      	movs	r2, r0
 8009114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009116:	601a      	str	r2, [r3, #0]
}
 8009118:	46c0      	nop			; (mov r8, r8)
 800911a:	46bd      	mov	sp, r7
 800911c:	b00f      	add	sp, #60	; 0x3c
 800911e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009120:	412e8480 	.word	0x412e8480
 8009124:	08012c98 	.word	0x08012c98
 8009128:	416312d0 	.word	0x416312d0

0800912c <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2209      	movs	r2, #9
 800913a:	212c      	movs	r1, #44	; 0x2c
 800913c:	0018      	movs	r0, r3
 800913e:	f7ff fd35 	bl	8008bac <my_find_char_position>
 8009142:	0003      	movs	r3, r0
 8009144:	001a      	movs	r2, r3
 8009146:	2417      	movs	r4, #23
 8009148:	193b      	adds	r3, r7, r4
 800914a:	3205      	adds	r2, #5
 800914c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800914e:	2003      	movs	r0, #3
 8009150:	f000 f97c 	bl	800944c <malloc>
 8009154:	0003      	movs	r3, r0
 8009156:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009158:	193b      	adds	r3, r7, r4
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	18d1      	adds	r1, r2, r3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	2202      	movs	r2, #2
 8009164:	0018      	movs	r0, r3
 8009166:	f001 fc1e 	bl	800a9a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	3302      	adds	r3, #2
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009172:	240e      	movs	r4, #14
 8009174:	193a      	adds	r2, r7, r4
 8009176:	4909      	ldr	r1, [pc, #36]	; (800919c <get_my_nmea_rmc_date_yy+0x70>)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	0018      	movs	r0, r3
 800917c:	f001 fb84 	bl	800a888 <sscanf>
	free ( s ) ;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	0018      	movs	r0, r3
 8009184:	f000 f96c 	bl	8009460 <free>
	*yy = (uint8_t) temp ;
 8009188:	193b      	adds	r3, r7, r4
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b2da      	uxtb	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	701a      	strb	r2, [r3, #0]

}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	46bd      	mov	sp, r7
 8009196:	b007      	add	sp, #28
 8009198:	bd90      	pop	{r4, r7, pc}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	08012ca0 	.word	0x08012ca0

080091a0 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 80091a0:	b590      	push	{r4, r7, lr}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2209      	movs	r2, #9
 80091ae:	212c      	movs	r1, #44	; 0x2c
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7ff fcfb 	bl	8008bac <my_find_char_position>
 80091b6:	0003      	movs	r3, r0
 80091b8:	001a      	movs	r2, r3
 80091ba:	2417      	movs	r4, #23
 80091bc:	193b      	adds	r3, r7, r4
 80091be:	3203      	adds	r2, #3
 80091c0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80091c2:	2003      	movs	r0, #3
 80091c4:	f000 f942 	bl	800944c <malloc>
 80091c8:	0003      	movs	r3, r0
 80091ca:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80091cc:	193b      	adds	r3, r7, r4
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	18d1      	adds	r1, r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2202      	movs	r2, #2
 80091d8:	0018      	movs	r0, r3
 80091da:	f001 fbe4 	bl	800a9a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3302      	adds	r3, #2
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80091e6:	240e      	movs	r4, #14
 80091e8:	193a      	adds	r2, r7, r4
 80091ea:	4909      	ldr	r1, [pc, #36]	; (8009210 <get_my_nmea_rmc_date_mm+0x70>)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	0018      	movs	r0, r3
 80091f0:	f001 fb4a 	bl	800a888 <sscanf>
	free ( s ) ;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	0018      	movs	r0, r3
 80091f8:	f000 f932 	bl	8009460 <free>
	*mm = (uint8_t) temp ;
 80091fc:	193b      	adds	r3, r7, r4
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	701a      	strb	r2, [r3, #0]

}
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	46bd      	mov	sp, r7
 800920a:	b007      	add	sp, #28
 800920c:	bd90      	pop	{r4, r7, pc}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	08012ca0 	.word	0x08012ca0

08009214 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2209      	movs	r2, #9
 8009222:	212c      	movs	r1, #44	; 0x2c
 8009224:	0018      	movs	r0, r3
 8009226:	f7ff fcc1 	bl	8008bac <my_find_char_position>
 800922a:	0003      	movs	r3, r0
 800922c:	001a      	movs	r2, r3
 800922e:	2417      	movs	r4, #23
 8009230:	193b      	adds	r3, r7, r4
 8009232:	3201      	adds	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009236:	2003      	movs	r0, #3
 8009238:	f000 f908 	bl	800944c <malloc>
 800923c:	0003      	movs	r3, r0
 800923e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009240:	193b      	adds	r3, r7, r4
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	18d1      	adds	r1, r2, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2202      	movs	r2, #2
 800924c:	0018      	movs	r0, r3
 800924e:	f001 fbaa 	bl	800a9a6 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	3302      	adds	r3, #2
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800925a:	240e      	movs	r4, #14
 800925c:	193a      	adds	r2, r7, r4
 800925e:	4909      	ldr	r1, [pc, #36]	; (8009284 <get_my_nmea_rmc_date_dd+0x70>)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	0018      	movs	r0, r3
 8009264:	f001 fb10 	bl	800a888 <sscanf>
	free ( s ) ;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	0018      	movs	r0, r3
 800926c:	f000 f8f8 	bl	8009460 <free>
	*dd = (uint8_t) temp ;
 8009270:	193b      	adds	r3, r7, r4
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	701a      	strb	r2, [r3, #0]

}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	46bd      	mov	sp, r7
 800927e:	b007      	add	sp, #28
 8009280:	bd90      	pop	{r4, r7, pc}
 8009282:	46c0      	nop			; (mov r8, r8)
 8009284:	08012ca0 	.word	0x08012ca0

08009288 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	212c      	movs	r1, #44	; 0x2c
 8009298:	0018      	movs	r0, r3
 800929a:	f7ff fc87 	bl	8008bac <my_find_char_position>
 800929e:	0003      	movs	r3, r0
 80092a0:	001a      	movs	r2, r3
 80092a2:	2417      	movs	r4, #23
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	3201      	adds	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80092aa:	2003      	movs	r0, #3
 80092ac:	f000 f8ce 	bl	800944c <malloc>
 80092b0:	0003      	movs	r3, r0
 80092b2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80092b4:	193b      	adds	r3, r7, r4
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	18d1      	adds	r1, r2, r3
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2202      	movs	r2, #2
 80092c0:	0018      	movs	r0, r3
 80092c2:	f001 fb70 	bl	800a9a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3302      	adds	r3, #2
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80092ce:	240e      	movs	r4, #14
 80092d0:	193a      	adds	r2, r7, r4
 80092d2:	4909      	ldr	r1, [pc, #36]	; (80092f8 <get_my_nmea_rmc_utc_hh+0x70>)
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	0018      	movs	r0, r3
 80092d8:	f001 fad6 	bl	800a888 <sscanf>
	free ( s ) ;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	0018      	movs	r0, r3
 80092e0:	f000 f8be 	bl	8009460 <free>
	*hh = (uint8_t) temp ;
 80092e4:	193b      	adds	r3, r7, r4
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	701a      	strb	r2, [r3, #0]

}
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	46bd      	mov	sp, r7
 80092f2:	b007      	add	sp, #28
 80092f4:	bd90      	pop	{r4, r7, pc}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	08012ca0 	.word	0x08012ca0

080092fc <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 80092fc:	b590      	push	{r4, r7, lr}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	212c      	movs	r1, #44	; 0x2c
 800930c:	0018      	movs	r0, r3
 800930e:	f7ff fc4d 	bl	8008bac <my_find_char_position>
 8009312:	0003      	movs	r3, r0
 8009314:	001a      	movs	r2, r3
 8009316:	2417      	movs	r4, #23
 8009318:	193b      	adds	r3, r7, r4
 800931a:	3203      	adds	r2, #3
 800931c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800931e:	2003      	movs	r0, #3
 8009320:	f000 f894 	bl	800944c <malloc>
 8009324:	0003      	movs	r3, r0
 8009326:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009328:	193b      	adds	r3, r7, r4
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	18d1      	adds	r1, r2, r3
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2202      	movs	r2, #2
 8009334:	0018      	movs	r0, r3
 8009336:	f001 fb36 	bl	800a9a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3302      	adds	r3, #2
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009342:	240e      	movs	r4, #14
 8009344:	193a      	adds	r2, r7, r4
 8009346:	4909      	ldr	r1, [pc, #36]	; (800936c <get_my_nmea_rmc_utc_mm+0x70>)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	0018      	movs	r0, r3
 800934c:	f001 fa9c 	bl	800a888 <sscanf>
	free ( s ) ;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	0018      	movs	r0, r3
 8009354:	f000 f884 	bl	8009460 <free>
	*mm = (uint8_t) temp ;
 8009358:	193b      	adds	r3, r7, r4
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	701a      	strb	r2, [r3, #0]

}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	46bd      	mov	sp, r7
 8009366:	b007      	add	sp, #28
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	08012ca0 	.word	0x08012ca0

08009370 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 8009370:	b590      	push	{r4, r7, lr}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	212c      	movs	r1, #44	; 0x2c
 8009380:	0018      	movs	r0, r3
 8009382:	f7ff fc13 	bl	8008bac <my_find_char_position>
 8009386:	0003      	movs	r3, r0
 8009388:	001a      	movs	r2, r3
 800938a:	2417      	movs	r4, #23
 800938c:	193b      	adds	r3, r7, r4
 800938e:	3205      	adds	r2, #5
 8009390:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009392:	2003      	movs	r0, #3
 8009394:	f000 f85a 	bl	800944c <malloc>
 8009398:	0003      	movs	r3, r0
 800939a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800939c:	193b      	adds	r3, r7, r4
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	18d1      	adds	r1, r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2202      	movs	r2, #2
 80093a8:	0018      	movs	r0, r3
 80093aa:	f001 fafc 	bl	800a9a6 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	3302      	adds	r3, #2
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80093b6:	240e      	movs	r4, #14
 80093b8:	193a      	adds	r2, r7, r4
 80093ba:	4909      	ldr	r1, [pc, #36]	; (80093e0 <get_my_nmea_rmc_utc_ss+0x70>)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	0018      	movs	r0, r3
 80093c0:	f001 fa62 	bl	800a888 <sscanf>
	free ( s ) ;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	0018      	movs	r0, r3
 80093c8:	f000 f84a 	bl	8009460 <free>
	*ss = (uint8_t) temp ;
 80093cc:	193b      	adds	r3, r7, r4
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	701a      	strb	r2, [r3, #0]

}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	46bd      	mov	sp, r7
 80093da:	b007      	add	sp, #28
 80093dc:	bd90      	pop	{r4, r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	08012ca0 	.word	0x08012ca0

080093e4 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	212c      	movs	r1, #44	; 0x2c
 80093f4:	0018      	movs	r0, r3
 80093f6:	f7ff fbd9 	bl	8008bac <my_find_char_position>
 80093fa:	0003      	movs	r3, r0
 80093fc:	001a      	movs	r2, r3
 80093fe:	240f      	movs	r4, #15
 8009400:	193b      	adds	r3, r7, r4
 8009402:	3208      	adds	r2, #8
 8009404:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009406:	2004      	movs	r0, #4
 8009408:	f000 f820 	bl	800944c <malloc>
 800940c:	0003      	movs	r3, r0
 800940e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009410:	193b      	adds	r3, r7, r4
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	18d1      	adds	r1, r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2203      	movs	r2, #3
 800941c:	0018      	movs	r0, r3
 800941e:	f001 fac2 	bl	800a9a6 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3303      	adds	r3, #3
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4906      	ldr	r1, [pc, #24]	; (8009448 <get_my_nmea_rmc_utc_sss+0x64>)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	0018      	movs	r0, r3
 8009432:	f001 fa29 	bl	800a888 <sscanf>
	free ( s ) ;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	0018      	movs	r0, r3
 800943a:	f000 f811 	bl	8009460 <free>
}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	46bd      	mov	sp, r7
 8009442:	b005      	add	sp, #20
 8009444:	bd90      	pop	{r4, r7, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	08012ca4 	.word	0x08012ca4

0800944c <malloc>:
 800944c:	b510      	push	{r4, lr}
 800944e:	4b03      	ldr	r3, [pc, #12]	; (800945c <malloc+0x10>)
 8009450:	0001      	movs	r1, r0
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	f000 f80e 	bl	8009474 <_malloc_r>
 8009458:	bd10      	pop	{r4, pc}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	200006e0 	.word	0x200006e0

08009460 <free>:
 8009460:	b510      	push	{r4, lr}
 8009462:	4b03      	ldr	r3, [pc, #12]	; (8009470 <free+0x10>)
 8009464:	0001      	movs	r1, r0
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	f001 fbe4 	bl	800ac34 <_free_r>
 800946c:	bd10      	pop	{r4, pc}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	200006e0 	.word	0x200006e0

08009474 <_malloc_r>:
 8009474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009476:	000d      	movs	r5, r1
 8009478:	b087      	sub	sp, #28
 800947a:	350b      	adds	r5, #11
 800947c:	9001      	str	r0, [sp, #4]
 800947e:	2d16      	cmp	r5, #22
 8009480:	d908      	bls.n	8009494 <_malloc_r+0x20>
 8009482:	2207      	movs	r2, #7
 8009484:	4395      	bics	r5, r2
 8009486:	d506      	bpl.n	8009496 <_malloc_r+0x22>
 8009488:	230c      	movs	r3, #12
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	2000      	movs	r0, #0
 8009490:	b007      	add	sp, #28
 8009492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009494:	2510      	movs	r5, #16
 8009496:	42a9      	cmp	r1, r5
 8009498:	d8f6      	bhi.n	8009488 <_malloc_r+0x14>
 800949a:	9801      	ldr	r0, [sp, #4]
 800949c:	f000 f9fe 	bl	800989c <__malloc_lock>
 80094a0:	23fc      	movs	r3, #252	; 0xfc
 80094a2:	4ebe      	ldr	r6, [pc, #760]	; (800979c <_malloc_r+0x328>)
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	429d      	cmp	r5, r3
 80094a8:	d219      	bcs.n	80094de <_malloc_r+0x6a>
 80094aa:	002a      	movs	r2, r5
 80094ac:	3208      	adds	r2, #8
 80094ae:	18b2      	adds	r2, r6, r2
 80094b0:	0011      	movs	r1, r2
 80094b2:	6854      	ldr	r4, [r2, #4]
 80094b4:	3908      	subs	r1, #8
 80094b6:	08eb      	lsrs	r3, r5, #3
 80094b8:	428c      	cmp	r4, r1
 80094ba:	d103      	bne.n	80094c4 <_malloc_r+0x50>
 80094bc:	68d4      	ldr	r4, [r2, #12]
 80094be:	3302      	adds	r3, #2
 80094c0:	42a2      	cmp	r2, r4
 80094c2:	d022      	beq.n	800950a <_malloc_r+0x96>
 80094c4:	2203      	movs	r2, #3
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	68a1      	ldr	r1, [r4, #8]
 80094ca:	4393      	bics	r3, r2
 80094cc:	68e2      	ldr	r2, [r4, #12]
 80094ce:	18e3      	adds	r3, r4, r3
 80094d0:	60ca      	str	r2, [r1, #12]
 80094d2:	6091      	str	r1, [r2, #8]
 80094d4:	2201      	movs	r2, #1
 80094d6:	6859      	ldr	r1, [r3, #4]
 80094d8:	430a      	orrs	r2, r1
 80094da:	605a      	str	r2, [r3, #4]
 80094dc:	e02a      	b.n	8009534 <_malloc_r+0xc0>
 80094de:	233f      	movs	r3, #63	; 0x3f
 80094e0:	0a6a      	lsrs	r2, r5, #9
 80094e2:	d003      	beq.n	80094ec <_malloc_r+0x78>
 80094e4:	2a04      	cmp	r2, #4
 80094e6:	d82b      	bhi.n	8009540 <_malloc_r+0xcc>
 80094e8:	09ab      	lsrs	r3, r5, #6
 80094ea:	3338      	adds	r3, #56	; 0x38
 80094ec:	2203      	movs	r2, #3
 80094ee:	4694      	mov	ip, r2
 80094f0:	00d9      	lsls	r1, r3, #3
 80094f2:	1989      	adds	r1, r1, r6
 80094f4:	68cc      	ldr	r4, [r1, #12]
 80094f6:	428c      	cmp	r4, r1
 80094f8:	d006      	beq.n	8009508 <_malloc_r+0x94>
 80094fa:	4660      	mov	r0, ip
 80094fc:	6862      	ldr	r2, [r4, #4]
 80094fe:	4382      	bics	r2, r0
 8009500:	1b57      	subs	r7, r2, r5
 8009502:	2f0f      	cmp	r7, #15
 8009504:	dd34      	ble.n	8009570 <_malloc_r+0xfc>
 8009506:	3b01      	subs	r3, #1
 8009508:	3301      	adds	r3, #1
 800950a:	6934      	ldr	r4, [r6, #16]
 800950c:	49a4      	ldr	r1, [pc, #656]	; (80097a0 <_malloc_r+0x32c>)
 800950e:	428c      	cmp	r4, r1
 8009510:	d055      	beq.n	80095be <_malloc_r+0x14a>
 8009512:	2003      	movs	r0, #3
 8009514:	6862      	ldr	r2, [r4, #4]
 8009516:	4382      	bics	r2, r0
 8009518:	1b50      	subs	r0, r2, r5
 800951a:	280f      	cmp	r0, #15
 800951c:	dd36      	ble.n	800958c <_malloc_r+0x118>
 800951e:	2301      	movs	r3, #1
 8009520:	1967      	adds	r7, r4, r5
 8009522:	431d      	orrs	r5, r3
 8009524:	4303      	orrs	r3, r0
 8009526:	6065      	str	r5, [r4, #4]
 8009528:	6177      	str	r7, [r6, #20]
 800952a:	6137      	str	r7, [r6, #16]
 800952c:	60f9      	str	r1, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	50a0      	str	r0, [r4, r2]
 8009534:	9801      	ldr	r0, [sp, #4]
 8009536:	f000 f9b9 	bl	80098ac <__malloc_unlock>
 800953a:	0020      	movs	r0, r4
 800953c:	3008      	adds	r0, #8
 800953e:	e7a7      	b.n	8009490 <_malloc_r+0x1c>
 8009540:	2a14      	cmp	r2, #20
 8009542:	d802      	bhi.n	800954a <_malloc_r+0xd6>
 8009544:	0013      	movs	r3, r2
 8009546:	335b      	adds	r3, #91	; 0x5b
 8009548:	e7d0      	b.n	80094ec <_malloc_r+0x78>
 800954a:	2a54      	cmp	r2, #84	; 0x54
 800954c:	d802      	bhi.n	8009554 <_malloc_r+0xe0>
 800954e:	0b2b      	lsrs	r3, r5, #12
 8009550:	336e      	adds	r3, #110	; 0x6e
 8009552:	e7cb      	b.n	80094ec <_malloc_r+0x78>
 8009554:	23aa      	movs	r3, #170	; 0xaa
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	429a      	cmp	r2, r3
 800955a:	d802      	bhi.n	8009562 <_malloc_r+0xee>
 800955c:	0beb      	lsrs	r3, r5, #15
 800955e:	3377      	adds	r3, #119	; 0x77
 8009560:	e7c4      	b.n	80094ec <_malloc_r+0x78>
 8009562:	4990      	ldr	r1, [pc, #576]	; (80097a4 <_malloc_r+0x330>)
 8009564:	237e      	movs	r3, #126	; 0x7e
 8009566:	428a      	cmp	r2, r1
 8009568:	d8c0      	bhi.n	80094ec <_malloc_r+0x78>
 800956a:	0cab      	lsrs	r3, r5, #18
 800956c:	337c      	adds	r3, #124	; 0x7c
 800956e:	e7bd      	b.n	80094ec <_malloc_r+0x78>
 8009570:	68e0      	ldr	r0, [r4, #12]
 8009572:	2f00      	cmp	r7, #0
 8009574:	db08      	blt.n	8009588 <_malloc_r+0x114>
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	60d8      	str	r0, [r3, #12]
 800957a:	6083      	str	r3, [r0, #8]
 800957c:	2301      	movs	r3, #1
 800957e:	18a2      	adds	r2, r4, r2
 8009580:	6851      	ldr	r1, [r2, #4]
 8009582:	430b      	orrs	r3, r1
 8009584:	6053      	str	r3, [r2, #4]
 8009586:	e7d5      	b.n	8009534 <_malloc_r+0xc0>
 8009588:	0004      	movs	r4, r0
 800958a:	e7b4      	b.n	80094f6 <_malloc_r+0x82>
 800958c:	6171      	str	r1, [r6, #20]
 800958e:	6131      	str	r1, [r6, #16]
 8009590:	2800      	cmp	r0, #0
 8009592:	daf3      	bge.n	800957c <_malloc_r+0x108>
 8009594:	6871      	ldr	r1, [r6, #4]
 8009596:	468c      	mov	ip, r1
 8009598:	2180      	movs	r1, #128	; 0x80
 800959a:	0089      	lsls	r1, r1, #2
 800959c:	428a      	cmp	r2, r1
 800959e:	d300      	bcc.n	80095a2 <_malloc_r+0x12e>
 80095a0:	e08c      	b.n	80096bc <_malloc_r+0x248>
 80095a2:	08d1      	lsrs	r1, r2, #3
 80095a4:	0950      	lsrs	r0, r2, #5
 80095a6:	2201      	movs	r2, #1
 80095a8:	4082      	lsls	r2, r0
 80095aa:	4660      	mov	r0, ip
 80095ac:	4302      	orrs	r2, r0
 80095ae:	6072      	str	r2, [r6, #4]
 80095b0:	00ca      	lsls	r2, r1, #3
 80095b2:	1992      	adds	r2, r2, r6
 80095b4:	6891      	ldr	r1, [r2, #8]
 80095b6:	60e2      	str	r2, [r4, #12]
 80095b8:	60a1      	str	r1, [r4, #8]
 80095ba:	6094      	str	r4, [r2, #8]
 80095bc:	60cc      	str	r4, [r1, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	4876      	ldr	r0, [pc, #472]	; (800979c <_malloc_r+0x328>)
 80095c2:	1099      	asrs	r1, r3, #2
 80095c4:	408a      	lsls	r2, r1
 80095c6:	6841      	ldr	r1, [r0, #4]
 80095c8:	4291      	cmp	r1, r2
 80095ca:	d328      	bcc.n	800961e <_malloc_r+0x1aa>
 80095cc:	420a      	tst	r2, r1
 80095ce:	d105      	bne.n	80095dc <_malloc_r+0x168>
 80095d0:	2403      	movs	r4, #3
 80095d2:	43a3      	bics	r3, r4
 80095d4:	0052      	lsls	r2, r2, #1
 80095d6:	3304      	adds	r3, #4
 80095d8:	420a      	tst	r2, r1
 80095da:	d0fb      	beq.n	80095d4 <_malloc_r+0x160>
 80095dc:	496f      	ldr	r1, [pc, #444]	; (800979c <_malloc_r+0x328>)
 80095de:	9104      	str	r1, [sp, #16]
 80095e0:	00d9      	lsls	r1, r3, #3
 80095e2:	1841      	adds	r1, r0, r1
 80095e4:	468c      	mov	ip, r1
 80095e6:	000f      	movs	r7, r1
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	68fc      	ldr	r4, [r7, #12]
 80095ec:	42bc      	cmp	r4, r7
 80095ee:	d000      	beq.n	80095f2 <_malloc_r+0x17e>
 80095f0:	e09b      	b.n	800972a <_malloc_r+0x2b6>
 80095f2:	2403      	movs	r4, #3
 80095f4:	9902      	ldr	r1, [sp, #8]
 80095f6:	3708      	adds	r7, #8
 80095f8:	3101      	adds	r1, #1
 80095fa:	9102      	str	r1, [sp, #8]
 80095fc:	4221      	tst	r1, r4
 80095fe:	d1f4      	bne.n	80095ea <_malloc_r+0x176>
 8009600:	2103      	movs	r1, #3
 8009602:	420b      	tst	r3, r1
 8009604:	d000      	beq.n	8009608 <_malloc_r+0x194>
 8009606:	e0b7      	b.n	8009778 <_malloc_r+0x304>
 8009608:	6843      	ldr	r3, [r0, #4]
 800960a:	4393      	bics	r3, r2
 800960c:	6043      	str	r3, [r0, #4]
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	0052      	lsls	r2, r2, #1
 8009612:	6859      	ldr	r1, [r3, #4]
 8009614:	4291      	cmp	r1, r2
 8009616:	d302      	bcc.n	800961e <_malloc_r+0x1aa>
 8009618:	2a00      	cmp	r2, #0
 800961a:	d000      	beq.n	800961e <_malloc_r+0x1aa>
 800961c:	e0bb      	b.n	8009796 <_malloc_r+0x322>
 800961e:	2203      	movs	r2, #3
 8009620:	6883      	ldr	r3, [r0, #8]
 8009622:	9302      	str	r3, [sp, #8]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	4393      	bics	r3, r2
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	42ab      	cmp	r3, r5
 800962c:	d303      	bcc.n	8009636 <_malloc_r+0x1c2>
 800962e:	1b59      	subs	r1, r3, r5
 8009630:	290f      	cmp	r1, #15
 8009632:	dd00      	ble.n	8009636 <_malloc_r+0x1c2>
 8009634:	e123      	b.n	800987e <_malloc_r+0x40a>
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	9a03      	ldr	r2, [sp, #12]
 800963a:	2008      	movs	r0, #8
 800963c:	189e      	adds	r6, r3, r2
 800963e:	4b5a      	ldr	r3, [pc, #360]	; (80097a8 <_malloc_r+0x334>)
 8009640:	681f      	ldr	r7, [r3, #0]
 8009642:	f001 fa71 	bl	800ab28 <sysconf>
 8009646:	4b59      	ldr	r3, [pc, #356]	; (80097ac <_malloc_r+0x338>)
 8009648:	3710      	adds	r7, #16
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	197f      	adds	r7, r7, r5
 800964e:	9004      	str	r0, [sp, #16]
 8009650:	3301      	adds	r3, #1
 8009652:	d003      	beq.n	800965c <_malloc_r+0x1e8>
 8009654:	1e7b      	subs	r3, r7, #1
 8009656:	181b      	adds	r3, r3, r0
 8009658:	4247      	negs	r7, r0
 800965a:	401f      	ands	r7, r3
 800965c:	0039      	movs	r1, r7
 800965e:	9801      	ldr	r0, [sp, #4]
 8009660:	f001 fa0e 	bl	800aa80 <_sbrk_r>
 8009664:	0004      	movs	r4, r0
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d100      	bne.n	800966c <_malloc_r+0x1f8>
 800966a:	e0de      	b.n	800982a <_malloc_r+0x3b6>
 800966c:	4286      	cmp	r6, r0
 800966e:	d904      	bls.n	800967a <_malloc_r+0x206>
 8009670:	4b4a      	ldr	r3, [pc, #296]	; (800979c <_malloc_r+0x328>)
 8009672:	9a02      	ldr	r2, [sp, #8]
 8009674:	429a      	cmp	r2, r3
 8009676:	d000      	beq.n	800967a <_malloc_r+0x206>
 8009678:	e0d7      	b.n	800982a <_malloc_r+0x3b6>
 800967a:	4a4d      	ldr	r2, [pc, #308]	; (80097b0 <_malloc_r+0x33c>)
 800967c:	6813      	ldr	r3, [r2, #0]
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	9a04      	ldr	r2, [sp, #16]
 8009684:	3a01      	subs	r2, #1
 8009686:	42a6      	cmp	r6, r4
 8009688:	d000      	beq.n	800968c <_malloc_r+0x218>
 800968a:	e097      	b.n	80097bc <_malloc_r+0x348>
 800968c:	4216      	tst	r6, r2
 800968e:	d000      	beq.n	8009692 <_malloc_r+0x21e>
 8009690:	e094      	b.n	80097bc <_malloc_r+0x348>
 8009692:	4b42      	ldr	r3, [pc, #264]	; (800979c <_malloc_r+0x328>)
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	19df      	adds	r7, r3, r7
 800969a:	2301      	movs	r3, #1
 800969c:	433b      	orrs	r3, r7
 800969e:	6053      	str	r3, [r2, #4]
 80096a0:	4b43      	ldr	r3, [pc, #268]	; (80097b0 <_malloc_r+0x33c>)
 80096a2:	4a44      	ldr	r2, [pc, #272]	; (80097b4 <_malloc_r+0x340>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6811      	ldr	r1, [r2, #0]
 80096a8:	428b      	cmp	r3, r1
 80096aa:	d900      	bls.n	80096ae <_malloc_r+0x23a>
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	4a42      	ldr	r2, [pc, #264]	; (80097b8 <_malloc_r+0x344>)
 80096b0:	6811      	ldr	r1, [r2, #0]
 80096b2:	428b      	cmp	r3, r1
 80096b4:	d800      	bhi.n	80096b8 <_malloc_r+0x244>
 80096b6:	e0b8      	b.n	800982a <_malloc_r+0x3b6>
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e0b6      	b.n	800982a <_malloc_r+0x3b6>
 80096bc:	0a50      	lsrs	r0, r2, #9
 80096be:	2804      	cmp	r0, #4
 80096c0:	d811      	bhi.n	80096e6 <_malloc_r+0x272>
 80096c2:	0991      	lsrs	r1, r2, #6
 80096c4:	3138      	adds	r1, #56	; 0x38
 80096c6:	00cf      	lsls	r7, r1, #3
 80096c8:	19bf      	adds	r7, r7, r6
 80096ca:	68b8      	ldr	r0, [r7, #8]
 80096cc:	4287      	cmp	r7, r0
 80096ce:	d125      	bne.n	800971c <_malloc_r+0x2a8>
 80096d0:	2201      	movs	r2, #1
 80096d2:	1089      	asrs	r1, r1, #2
 80096d4:	408a      	lsls	r2, r1
 80096d6:	4661      	mov	r1, ip
 80096d8:	430a      	orrs	r2, r1
 80096da:	6072      	str	r2, [r6, #4]
 80096dc:	60e7      	str	r7, [r4, #12]
 80096de:	60a0      	str	r0, [r4, #8]
 80096e0:	60bc      	str	r4, [r7, #8]
 80096e2:	60c4      	str	r4, [r0, #12]
 80096e4:	e76b      	b.n	80095be <_malloc_r+0x14a>
 80096e6:	2814      	cmp	r0, #20
 80096e8:	d802      	bhi.n	80096f0 <_malloc_r+0x27c>
 80096ea:	0001      	movs	r1, r0
 80096ec:	315b      	adds	r1, #91	; 0x5b
 80096ee:	e7ea      	b.n	80096c6 <_malloc_r+0x252>
 80096f0:	2854      	cmp	r0, #84	; 0x54
 80096f2:	d802      	bhi.n	80096fa <_malloc_r+0x286>
 80096f4:	0b11      	lsrs	r1, r2, #12
 80096f6:	316e      	adds	r1, #110	; 0x6e
 80096f8:	e7e5      	b.n	80096c6 <_malloc_r+0x252>
 80096fa:	21aa      	movs	r1, #170	; 0xaa
 80096fc:	0049      	lsls	r1, r1, #1
 80096fe:	4288      	cmp	r0, r1
 8009700:	d802      	bhi.n	8009708 <_malloc_r+0x294>
 8009702:	0bd1      	lsrs	r1, r2, #15
 8009704:	3177      	adds	r1, #119	; 0x77
 8009706:	e7de      	b.n	80096c6 <_malloc_r+0x252>
 8009708:	4f26      	ldr	r7, [pc, #152]	; (80097a4 <_malloc_r+0x330>)
 800970a:	217e      	movs	r1, #126	; 0x7e
 800970c:	42b8      	cmp	r0, r7
 800970e:	d8da      	bhi.n	80096c6 <_malloc_r+0x252>
 8009710:	0c91      	lsrs	r1, r2, #18
 8009712:	317c      	adds	r1, #124	; 0x7c
 8009714:	e7d7      	b.n	80096c6 <_malloc_r+0x252>
 8009716:	6880      	ldr	r0, [r0, #8]
 8009718:	4287      	cmp	r7, r0
 800971a:	d004      	beq.n	8009726 <_malloc_r+0x2b2>
 800971c:	2603      	movs	r6, #3
 800971e:	6841      	ldr	r1, [r0, #4]
 8009720:	43b1      	bics	r1, r6
 8009722:	4291      	cmp	r1, r2
 8009724:	d8f7      	bhi.n	8009716 <_malloc_r+0x2a2>
 8009726:	68c7      	ldr	r7, [r0, #12]
 8009728:	e7d8      	b.n	80096dc <_malloc_r+0x268>
 800972a:	2603      	movs	r6, #3
 800972c:	6861      	ldr	r1, [r4, #4]
 800972e:	43b1      	bics	r1, r6
 8009730:	9103      	str	r1, [sp, #12]
 8009732:	68e6      	ldr	r6, [r4, #12]
 8009734:	1b49      	subs	r1, r1, r5
 8009736:	290f      	cmp	r1, #15
 8009738:	dd10      	ble.n	800975c <_malloc_r+0x2e8>
 800973a:	2201      	movs	r2, #1
 800973c:	1963      	adds	r3, r4, r5
 800973e:	4315      	orrs	r5, r2
 8009740:	6065      	str	r5, [r4, #4]
 8009742:	68a5      	ldr	r5, [r4, #8]
 8009744:	430a      	orrs	r2, r1
 8009746:	60ee      	str	r6, [r5, #12]
 8009748:	60b5      	str	r5, [r6, #8]
 800974a:	6143      	str	r3, [r0, #20]
 800974c:	6103      	str	r3, [r0, #16]
 800974e:	4814      	ldr	r0, [pc, #80]	; (80097a0 <_malloc_r+0x32c>)
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	60d8      	str	r0, [r3, #12]
 8009754:	6098      	str	r0, [r3, #8]
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	50e1      	str	r1, [r4, r3]
 800975a:	e6eb      	b.n	8009534 <_malloc_r+0xc0>
 800975c:	2900      	cmp	r1, #0
 800975e:	db09      	blt.n	8009774 <_malloc_r+0x300>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	18e1      	adds	r1, r4, r3
 8009764:	2301      	movs	r3, #1
 8009766:	684a      	ldr	r2, [r1, #4]
 8009768:	4313      	orrs	r3, r2
 800976a:	604b      	str	r3, [r1, #4]
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	60de      	str	r6, [r3, #12]
 8009770:	60b3      	str	r3, [r6, #8]
 8009772:	e6df      	b.n	8009534 <_malloc_r+0xc0>
 8009774:	0034      	movs	r4, r6
 8009776:	e739      	b.n	80095ec <_malloc_r+0x178>
 8009778:	2108      	movs	r1, #8
 800977a:	4249      	negs	r1, r1
 800977c:	448c      	add	ip, r1
 800977e:	4661      	mov	r1, ip
 8009780:	6889      	ldr	r1, [r1, #8]
 8009782:	3b01      	subs	r3, #1
 8009784:	4561      	cmp	r1, ip
 8009786:	d100      	bne.n	800978a <_malloc_r+0x316>
 8009788:	e73a      	b.n	8009600 <_malloc_r+0x18c>
 800978a:	e740      	b.n	800960e <_malloc_r+0x19a>
 800978c:	3304      	adds	r3, #4
 800978e:	0052      	lsls	r2, r2, #1
 8009790:	420a      	tst	r2, r1
 8009792:	d0fb      	beq.n	800978c <_malloc_r+0x318>
 8009794:	e724      	b.n	80095e0 <_malloc_r+0x16c>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	e7fa      	b.n	8009790 <_malloc_r+0x31c>
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	20000034 	.word	0x20000034
 80097a0:	2000003c 	.word	0x2000003c
 80097a4:	00000554 	.word	0x00000554
 80097a8:	20000d94 	.word	0x20000d94
 80097ac:	2000043c 	.word	0x2000043c
 80097b0:	20000d64 	.word	0x20000d64
 80097b4:	20000d8c 	.word	0x20000d8c
 80097b8:	20000d90 	.word	0x20000d90
 80097bc:	4934      	ldr	r1, [pc, #208]	; (8009890 <_malloc_r+0x41c>)
 80097be:	6808      	ldr	r0, [r1, #0]
 80097c0:	3001      	adds	r0, #1
 80097c2:	d140      	bne.n	8009846 <_malloc_r+0x3d2>
 80097c4:	600c      	str	r4, [r1, #0]
 80097c6:	2107      	movs	r1, #7
 80097c8:	0026      	movs	r6, r4
 80097ca:	2300      	movs	r3, #0
 80097cc:	400e      	ands	r6, r1
 80097ce:	420c      	tst	r4, r1
 80097d0:	d002      	beq.n	80097d8 <_malloc_r+0x364>
 80097d2:	3308      	adds	r3, #8
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	18e4      	adds	r4, r4, r3
 80097d8:	19e1      	adds	r1, r4, r7
 80097da:	9105      	str	r1, [sp, #20]
 80097dc:	9f05      	ldr	r7, [sp, #20]
 80097de:	9904      	ldr	r1, [sp, #16]
 80097e0:	4017      	ands	r7, r2
 80097e2:	18cb      	adds	r3, r1, r3
 80097e4:	1bdf      	subs	r7, r3, r7
 80097e6:	4017      	ands	r7, r2
 80097e8:	0039      	movs	r1, r7
 80097ea:	9801      	ldr	r0, [sp, #4]
 80097ec:	f001 f948 	bl	800aa80 <_sbrk_r>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d107      	bne.n	8009804 <_malloc_r+0x390>
 80097f4:	1e37      	subs	r7, r6, #0
 80097f6:	9805      	ldr	r0, [sp, #20]
 80097f8:	d004      	beq.n	8009804 <_malloc_r+0x390>
 80097fa:	0030      	movs	r0, r6
 80097fc:	2700      	movs	r7, #0
 80097fe:	9b05      	ldr	r3, [sp, #20]
 8009800:	3808      	subs	r0, #8
 8009802:	1818      	adds	r0, r3, r0
 8009804:	4a23      	ldr	r2, [pc, #140]	; (8009894 <_malloc_r+0x420>)
 8009806:	1b00      	subs	r0, r0, r4
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	19c0      	adds	r0, r0, r7
 800980c:	19db      	adds	r3, r3, r7
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	2201      	movs	r2, #1
 8009812:	4b21      	ldr	r3, [pc, #132]	; (8009898 <_malloc_r+0x424>)
 8009814:	9902      	ldr	r1, [sp, #8]
 8009816:	4310      	orrs	r0, r2
 8009818:	609c      	str	r4, [r3, #8]
 800981a:	6060      	str	r0, [r4, #4]
 800981c:	4299      	cmp	r1, r3
 800981e:	d100      	bne.n	8009822 <_malloc_r+0x3ae>
 8009820:	e73e      	b.n	80096a0 <_malloc_r+0x22c>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	2b0f      	cmp	r3, #15
 8009826:	d813      	bhi.n	8009850 <_malloc_r+0x3dc>
 8009828:	6062      	str	r2, [r4, #4]
 800982a:	2203      	movs	r2, #3
 800982c:	4b1a      	ldr	r3, [pc, #104]	; (8009898 <_malloc_r+0x424>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	4393      	bics	r3, r2
 8009834:	1b59      	subs	r1, r3, r5
 8009836:	42ab      	cmp	r3, r5
 8009838:	d301      	bcc.n	800983e <_malloc_r+0x3ca>
 800983a:	290f      	cmp	r1, #15
 800983c:	dc1f      	bgt.n	800987e <_malloc_r+0x40a>
 800983e:	9801      	ldr	r0, [sp, #4]
 8009840:	f000 f834 	bl	80098ac <__malloc_unlock>
 8009844:	e623      	b.n	800948e <_malloc_r+0x1a>
 8009846:	4913      	ldr	r1, [pc, #76]	; (8009894 <_malloc_r+0x420>)
 8009848:	1ba6      	subs	r6, r4, r6
 800984a:	18f6      	adds	r6, r6, r3
 800984c:	600e      	str	r6, [r1, #0]
 800984e:	e7ba      	b.n	80097c6 <_malloc_r+0x352>
 8009850:	2107      	movs	r1, #7
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	3b0c      	subs	r3, #12
 8009856:	438b      	bics	r3, r1
 8009858:	9902      	ldr	r1, [sp, #8]
 800985a:	6849      	ldr	r1, [r1, #4]
 800985c:	400a      	ands	r2, r1
 800985e:	9902      	ldr	r1, [sp, #8]
 8009860:	431a      	orrs	r2, r3
 8009862:	604a      	str	r2, [r1, #4]
 8009864:	18ca      	adds	r2, r1, r3
 8009866:	2105      	movs	r1, #5
 8009868:	6051      	str	r1, [r2, #4]
 800986a:	6091      	str	r1, [r2, #8]
 800986c:	2b0f      	cmp	r3, #15
 800986e:	d800      	bhi.n	8009872 <_malloc_r+0x3fe>
 8009870:	e716      	b.n	80096a0 <_malloc_r+0x22c>
 8009872:	9902      	ldr	r1, [sp, #8]
 8009874:	9801      	ldr	r0, [sp, #4]
 8009876:	3108      	adds	r1, #8
 8009878:	f001 f9dc 	bl	800ac34 <_free_r>
 800987c:	e710      	b.n	80096a0 <_malloc_r+0x22c>
 800987e:	2201      	movs	r2, #1
 8009880:	0013      	movs	r3, r2
 8009882:	4805      	ldr	r0, [pc, #20]	; (8009898 <_malloc_r+0x424>)
 8009884:	432b      	orrs	r3, r5
 8009886:	6884      	ldr	r4, [r0, #8]
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	1963      	adds	r3, r4, r5
 800988c:	6083      	str	r3, [r0, #8]
 800988e:	e623      	b.n	80094d8 <_malloc_r+0x64>
 8009890:	2000043c 	.word	0x2000043c
 8009894:	20000d64 	.word	0x20000d64
 8009898:	20000034 	.word	0x20000034

0800989c <__malloc_lock>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4802      	ldr	r0, [pc, #8]	; (80098a8 <__malloc_lock+0xc>)
 80098a0:	f001 f940 	bl	800ab24 <__retarget_lock_acquire_recursive>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	20000ed9 	.word	0x20000ed9

080098ac <__malloc_unlock>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	4802      	ldr	r0, [pc, #8]	; (80098b8 <__malloc_unlock+0xc>)
 80098b0:	f001 f939 	bl	800ab26 <__retarget_lock_release_recursive>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	20000ed9 	.word	0x20000ed9

080098bc <sulp>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	0016      	movs	r6, r2
 80098c0:	000d      	movs	r5, r1
 80098c2:	f002 f90d 	bl	800bae0 <__ulp>
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	d00d      	beq.n	80098e6 <sulp+0x2a>
 80098ca:	236b      	movs	r3, #107	; 0x6b
 80098cc:	006a      	lsls	r2, r5, #1
 80098ce:	0d52      	lsrs	r2, r2, #21
 80098d0:	1a9b      	subs	r3, r3, r2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dd07      	ble.n	80098e6 <sulp+0x2a>
 80098d6:	2400      	movs	r4, #0
 80098d8:	4a03      	ldr	r2, [pc, #12]	; (80098e8 <sulp+0x2c>)
 80098da:	051b      	lsls	r3, r3, #20
 80098dc:	189d      	adds	r5, r3, r2
 80098de:	002b      	movs	r3, r5
 80098e0:	0022      	movs	r2, r4
 80098e2:	f7f7 fec3 	bl	800166c <__aeabi_dmul>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	3ff00000 	.word	0x3ff00000

080098ec <_strtod_l>:
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	b0a1      	sub	sp, #132	; 0x84
 80098f0:	9219      	str	r2, [sp, #100]	; 0x64
 80098f2:	2200      	movs	r2, #0
 80098f4:	2600      	movs	r6, #0
 80098f6:	2700      	movs	r7, #0
 80098f8:	9004      	str	r0, [sp, #16]
 80098fa:	9107      	str	r1, [sp, #28]
 80098fc:	921c      	str	r2, [sp, #112]	; 0x70
 80098fe:	911b      	str	r1, [sp, #108]	; 0x6c
 8009900:	780a      	ldrb	r2, [r1, #0]
 8009902:	2a2b      	cmp	r2, #43	; 0x2b
 8009904:	d055      	beq.n	80099b2 <_strtod_l+0xc6>
 8009906:	d841      	bhi.n	800998c <_strtod_l+0xa0>
 8009908:	2a0d      	cmp	r2, #13
 800990a:	d83b      	bhi.n	8009984 <_strtod_l+0x98>
 800990c:	2a08      	cmp	r2, #8
 800990e:	d83b      	bhi.n	8009988 <_strtod_l+0x9c>
 8009910:	2a00      	cmp	r2, #0
 8009912:	d044      	beq.n	800999e <_strtod_l+0xb2>
 8009914:	2200      	movs	r2, #0
 8009916:	920f      	str	r2, [sp, #60]	; 0x3c
 8009918:	2100      	movs	r1, #0
 800991a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800991c:	9109      	str	r1, [sp, #36]	; 0x24
 800991e:	782a      	ldrb	r2, [r5, #0]
 8009920:	2a30      	cmp	r2, #48	; 0x30
 8009922:	d000      	beq.n	8009926 <_strtod_l+0x3a>
 8009924:	e085      	b.n	8009a32 <_strtod_l+0x146>
 8009926:	786a      	ldrb	r2, [r5, #1]
 8009928:	3120      	adds	r1, #32
 800992a:	438a      	bics	r2, r1
 800992c:	2a58      	cmp	r2, #88	; 0x58
 800992e:	d000      	beq.n	8009932 <_strtod_l+0x46>
 8009930:	e075      	b.n	8009a1e <_strtod_l+0x132>
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009936:	4a97      	ldr	r2, [pc, #604]	; (8009b94 <_strtod_l+0x2a8>)
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	ab1c      	add	r3, sp, #112	; 0x70
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	9804      	ldr	r0, [sp, #16]
 8009940:	ab1d      	add	r3, sp, #116	; 0x74
 8009942:	a91b      	add	r1, sp, #108	; 0x6c
 8009944:	f001 fa92 	bl	800ae6c <__gethex>
 8009948:	230f      	movs	r3, #15
 800994a:	0002      	movs	r2, r0
 800994c:	401a      	ands	r2, r3
 800994e:	0004      	movs	r4, r0
 8009950:	9205      	str	r2, [sp, #20]
 8009952:	4218      	tst	r0, r3
 8009954:	d005      	beq.n	8009962 <_strtod_l+0x76>
 8009956:	2a06      	cmp	r2, #6
 8009958:	d12d      	bne.n	80099b6 <_strtod_l+0xca>
 800995a:	1c6b      	adds	r3, r5, #1
 800995c:	931b      	str	r3, [sp, #108]	; 0x6c
 800995e:	2300      	movs	r3, #0
 8009960:	930f      	str	r3, [sp, #60]	; 0x3c
 8009962:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <_strtod_l+0x82>
 8009968:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800996a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01b      	beq.n	80099ac <_strtod_l+0xc0>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	0032      	movs	r2, r6
 8009978:	061b      	lsls	r3, r3, #24
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	0010      	movs	r0, r2
 800997e:	0019      	movs	r1, r3
 8009980:	b021      	add	sp, #132	; 0x84
 8009982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009984:	2a20      	cmp	r2, #32
 8009986:	d1c5      	bne.n	8009914 <_strtod_l+0x28>
 8009988:	3101      	adds	r1, #1
 800998a:	e7b8      	b.n	80098fe <_strtod_l+0x12>
 800998c:	2a2d      	cmp	r2, #45	; 0x2d
 800998e:	d1c1      	bne.n	8009914 <_strtod_l+0x28>
 8009990:	3a2c      	subs	r2, #44	; 0x2c
 8009992:	920f      	str	r2, [sp, #60]	; 0x3c
 8009994:	1c4a      	adds	r2, r1, #1
 8009996:	921b      	str	r2, [sp, #108]	; 0x6c
 8009998:	784a      	ldrb	r2, [r1, #1]
 800999a:	2a00      	cmp	r2, #0
 800999c:	d1bc      	bne.n	8009918 <_strtod_l+0x2c>
 800999e:	9b07      	ldr	r3, [sp, #28]
 80099a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80099a2:	2300      	movs	r3, #0
 80099a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1dd      	bne.n	8009968 <_strtod_l+0x7c>
 80099ac:	0032      	movs	r2, r6
 80099ae:	003b      	movs	r3, r7
 80099b0:	e7e4      	b.n	800997c <_strtod_l+0x90>
 80099b2:	2200      	movs	r2, #0
 80099b4:	e7ed      	b.n	8009992 <_strtod_l+0xa6>
 80099b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	d007      	beq.n	80099cc <_strtod_l+0xe0>
 80099bc:	2135      	movs	r1, #53	; 0x35
 80099be:	a81e      	add	r0, sp, #120	; 0x78
 80099c0:	f002 f97f 	bl	800bcc2 <__copybits>
 80099c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099c6:	9804      	ldr	r0, [sp, #16]
 80099c8:	f001 fd7c 	bl	800b4c4 <_Bfree>
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099d0:	3801      	subs	r0, #1
 80099d2:	2804      	cmp	r0, #4
 80099d4:	d806      	bhi.n	80099e4 <_strtod_l+0xf8>
 80099d6:	f7f6 fb9d 	bl	8000114 <__gnu_thumb1_case_uqi>
 80099da:	0312      	.short	0x0312
 80099dc:	1e1c      	.short	0x1e1c
 80099de:	12          	.byte	0x12
 80099df:	00          	.byte	0x00
 80099e0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80099e2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80099e4:	05e4      	lsls	r4, r4, #23
 80099e6:	d502      	bpl.n	80099ee <_strtod_l+0x102>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	431f      	orrs	r7, r3
 80099ee:	4b6a      	ldr	r3, [pc, #424]	; (8009b98 <_strtod_l+0x2ac>)
 80099f0:	423b      	tst	r3, r7
 80099f2:	d1b6      	bne.n	8009962 <_strtod_l+0x76>
 80099f4:	f001 f86a 	bl	800aacc <__errno>
 80099f8:	2322      	movs	r3, #34	; 0x22
 80099fa:	6003      	str	r3, [r0, #0]
 80099fc:	e7b1      	b.n	8009962 <_strtod_l+0x76>
 80099fe:	4967      	ldr	r1, [pc, #412]	; (8009b9c <_strtod_l+0x2b0>)
 8009a00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a02:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009a04:	400a      	ands	r2, r1
 8009a06:	4966      	ldr	r1, [pc, #408]	; (8009ba0 <_strtod_l+0x2b4>)
 8009a08:	185b      	adds	r3, r3, r1
 8009a0a:	051b      	lsls	r3, r3, #20
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	0017      	movs	r7, r2
 8009a10:	e7e8      	b.n	80099e4 <_strtod_l+0xf8>
 8009a12:	4f61      	ldr	r7, [pc, #388]	; (8009b98 <_strtod_l+0x2ac>)
 8009a14:	e7e6      	b.n	80099e4 <_strtod_l+0xf8>
 8009a16:	2601      	movs	r6, #1
 8009a18:	4f62      	ldr	r7, [pc, #392]	; (8009ba4 <_strtod_l+0x2b8>)
 8009a1a:	4276      	negs	r6, r6
 8009a1c:	e7e2      	b.n	80099e4 <_strtod_l+0xf8>
 8009a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	921b      	str	r2, [sp, #108]	; 0x6c
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	2b30      	cmp	r3, #48	; 0x30
 8009a28:	d0f9      	beq.n	8009a1e <_strtod_l+0x132>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d099      	beq.n	8009962 <_strtod_l+0x76>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	9309      	str	r3, [sp, #36]	; 0x24
 8009a32:	2500      	movs	r5, #0
 8009a34:	220a      	movs	r2, #10
 8009a36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a38:	950d      	str	r5, [sp, #52]	; 0x34
 8009a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a3c:	9508      	str	r5, [sp, #32]
 8009a3e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009a40:	7804      	ldrb	r4, [r0, #0]
 8009a42:	0023      	movs	r3, r4
 8009a44:	3b30      	subs	r3, #48	; 0x30
 8009a46:	b2d9      	uxtb	r1, r3
 8009a48:	2909      	cmp	r1, #9
 8009a4a:	d927      	bls.n	8009a9c <_strtod_l+0x1b0>
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	4956      	ldr	r1, [pc, #344]	; (8009ba8 <_strtod_l+0x2bc>)
 8009a50:	f000 ff98 	bl	800a984 <strncmp>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d031      	beq.n	8009abc <_strtod_l+0x1d0>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	0023      	movs	r3, r4
 8009a5c:	4684      	mov	ip, r0
 8009a5e:	9a08      	ldr	r2, [sp, #32]
 8009a60:	900c      	str	r0, [sp, #48]	; 0x30
 8009a62:	9205      	str	r2, [sp, #20]
 8009a64:	2220      	movs	r2, #32
 8009a66:	0019      	movs	r1, r3
 8009a68:	4391      	bics	r1, r2
 8009a6a:	000a      	movs	r2, r1
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	9106      	str	r1, [sp, #24]
 8009a70:	2a45      	cmp	r2, #69	; 0x45
 8009a72:	d000      	beq.n	8009a76 <_strtod_l+0x18a>
 8009a74:	e0c2      	b.n	8009bfc <_strtod_l+0x310>
 8009a76:	9b05      	ldr	r3, [sp, #20]
 8009a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7a:	4303      	orrs	r3, r0
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	428b      	cmp	r3, r1
 8009a80:	d08d      	beq.n	800999e <_strtod_l+0xb2>
 8009a82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	3301      	adds	r3, #1
 8009a88:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a8a:	9b07      	ldr	r3, [sp, #28]
 8009a8c:	785b      	ldrb	r3, [r3, #1]
 8009a8e:	2b2b      	cmp	r3, #43	; 0x2b
 8009a90:	d071      	beq.n	8009b76 <_strtod_l+0x28a>
 8009a92:	000c      	movs	r4, r1
 8009a94:	2b2d      	cmp	r3, #45	; 0x2d
 8009a96:	d174      	bne.n	8009b82 <_strtod_l+0x296>
 8009a98:	2401      	movs	r4, #1
 8009a9a:	e06d      	b.n	8009b78 <_strtod_l+0x28c>
 8009a9c:	9908      	ldr	r1, [sp, #32]
 8009a9e:	2908      	cmp	r1, #8
 8009aa0:	dc09      	bgt.n	8009ab6 <_strtod_l+0x1ca>
 8009aa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009aa4:	4351      	muls	r1, r2
 8009aa6:	185b      	adds	r3, r3, r1
 8009aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8009aaa:	9b08      	ldr	r3, [sp, #32]
 8009aac:	3001      	adds	r0, #1
 8009aae:	3301      	adds	r3, #1
 8009ab0:	9308      	str	r3, [sp, #32]
 8009ab2:	901b      	str	r0, [sp, #108]	; 0x6c
 8009ab4:	e7c3      	b.n	8009a3e <_strtod_l+0x152>
 8009ab6:	4355      	muls	r5, r2
 8009ab8:	195d      	adds	r5, r3, r5
 8009aba:	e7f6      	b.n	8009aaa <_strtod_l+0x1be>
 8009abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009ac2:	9a08      	ldr	r2, [sp, #32]
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	2a00      	cmp	r2, #0
 8009ac8:	d03a      	beq.n	8009b40 <_strtod_l+0x254>
 8009aca:	900c      	str	r0, [sp, #48]	; 0x30
 8009acc:	9205      	str	r2, [sp, #20]
 8009ace:	001a      	movs	r2, r3
 8009ad0:	3a30      	subs	r2, #48	; 0x30
 8009ad2:	2a09      	cmp	r2, #9
 8009ad4:	d912      	bls.n	8009afc <_strtod_l+0x210>
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4694      	mov	ip, r2
 8009ada:	e7c3      	b.n	8009a64 <_strtod_l+0x178>
 8009adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ade:	3001      	adds	r0, #1
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009ae4:	785b      	ldrb	r3, [r3, #1]
 8009ae6:	2b30      	cmp	r3, #48	; 0x30
 8009ae8:	d0f8      	beq.n	8009adc <_strtod_l+0x1f0>
 8009aea:	001a      	movs	r2, r3
 8009aec:	3a31      	subs	r2, #49	; 0x31
 8009aee:	2a08      	cmp	r2, #8
 8009af0:	d83c      	bhi.n	8009b6c <_strtod_l+0x280>
 8009af2:	900c      	str	r0, [sp, #48]	; 0x30
 8009af4:	2000      	movs	r0, #0
 8009af6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009af8:	9005      	str	r0, [sp, #20]
 8009afa:	9210      	str	r2, [sp, #64]	; 0x40
 8009afc:	001a      	movs	r2, r3
 8009afe:	1c41      	adds	r1, r0, #1
 8009b00:	3a30      	subs	r2, #48	; 0x30
 8009b02:	2b30      	cmp	r3, #48	; 0x30
 8009b04:	d016      	beq.n	8009b34 <_strtod_l+0x248>
 8009b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b08:	185b      	adds	r3, r3, r1
 8009b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	210a      	movs	r1, #10
 8009b10:	469c      	mov	ip, r3
 8009b12:	4484      	add	ip, r0
 8009b14:	4563      	cmp	r3, ip
 8009b16:	d115      	bne.n	8009b44 <_strtod_l+0x258>
 8009b18:	9905      	ldr	r1, [sp, #20]
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	1809      	adds	r1, r1, r0
 8009b20:	181b      	adds	r3, r3, r0
 8009b22:	9105      	str	r1, [sp, #20]
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	dc19      	bgt.n	8009b5c <_strtod_l+0x270>
 8009b28:	230a      	movs	r3, #10
 8009b2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009b2c:	434b      	muls	r3, r1
 8009b2e:	2100      	movs	r1, #0
 8009b30:	18d3      	adds	r3, r2, r3
 8009b32:	930d      	str	r3, [sp, #52]	; 0x34
 8009b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b36:	0008      	movs	r0, r1
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	e7c6      	b.n	8009ace <_strtod_l+0x1e2>
 8009b40:	9808      	ldr	r0, [sp, #32]
 8009b42:	e7d0      	b.n	8009ae6 <_strtod_l+0x1fa>
 8009b44:	1c5c      	adds	r4, r3, #1
 8009b46:	2b08      	cmp	r3, #8
 8009b48:	dc04      	bgt.n	8009b54 <_strtod_l+0x268>
 8009b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4c:	434b      	muls	r3, r1
 8009b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b50:	0023      	movs	r3, r4
 8009b52:	e7df      	b.n	8009b14 <_strtod_l+0x228>
 8009b54:	2c10      	cmp	r4, #16
 8009b56:	dcfb      	bgt.n	8009b50 <_strtod_l+0x264>
 8009b58:	434d      	muls	r5, r1
 8009b5a:	e7f9      	b.n	8009b50 <_strtod_l+0x264>
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	2b10      	cmp	r3, #16
 8009b62:	dce7      	bgt.n	8009b34 <_strtod_l+0x248>
 8009b64:	230a      	movs	r3, #10
 8009b66:	435d      	muls	r5, r3
 8009b68:	1955      	adds	r5, r2, r5
 8009b6a:	e7e3      	b.n	8009b34 <_strtod_l+0x248>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	920c      	str	r2, [sp, #48]	; 0x30
 8009b70:	9205      	str	r2, [sp, #20]
 8009b72:	3201      	adds	r2, #1
 8009b74:	e7b0      	b.n	8009ad8 <_strtod_l+0x1ec>
 8009b76:	2400      	movs	r4, #0
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b7e:	9b07      	ldr	r3, [sp, #28]
 8009b80:	789b      	ldrb	r3, [r3, #2]
 8009b82:	001a      	movs	r2, r3
 8009b84:	3a30      	subs	r2, #48	; 0x30
 8009b86:	2a09      	cmp	r2, #9
 8009b88:	d914      	bls.n	8009bb4 <_strtod_l+0x2c8>
 8009b8a:	9a07      	ldr	r2, [sp, #28]
 8009b8c:	921b      	str	r2, [sp, #108]	; 0x6c
 8009b8e:	2200      	movs	r2, #0
 8009b90:	e033      	b.n	8009bfa <_strtod_l+0x30e>
 8009b92:	46c0      	nop			; (mov r8, r8)
 8009b94:	08012d84 	.word	0x08012d84
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	ffefffff 	.word	0xffefffff
 8009ba0:	00000433 	.word	0x00000433
 8009ba4:	7fffffff 	.word	0x7fffffff
 8009ba8:	08012d80 	.word	0x08012d80
 8009bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b30      	cmp	r3, #48	; 0x30
 8009bb6:	d0f9      	beq.n	8009bac <_strtod_l+0x2c0>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	9206      	str	r2, [sp, #24]
 8009bbc:	001a      	movs	r2, r3
 8009bbe:	3a31      	subs	r2, #49	; 0x31
 8009bc0:	2a08      	cmp	r2, #8
 8009bc2:	d81b      	bhi.n	8009bfc <_strtod_l+0x310>
 8009bc4:	3b30      	subs	r3, #48	; 0x30
 8009bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8009bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bca:	9306      	str	r3, [sp, #24]
 8009bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bce:	1c59      	adds	r1, r3, #1
 8009bd0:	911b      	str	r1, [sp, #108]	; 0x6c
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	001a      	movs	r2, r3
 8009bd6:	3a30      	subs	r2, #48	; 0x30
 8009bd8:	2a09      	cmp	r2, #9
 8009bda:	d93a      	bls.n	8009c52 <_strtod_l+0x366>
 8009bdc:	9a06      	ldr	r2, [sp, #24]
 8009bde:	1a8a      	subs	r2, r1, r2
 8009be0:	49b2      	ldr	r1, [pc, #712]	; (8009eac <_strtod_l+0x5c0>)
 8009be2:	9106      	str	r1, [sp, #24]
 8009be4:	2a08      	cmp	r2, #8
 8009be6:	dc04      	bgt.n	8009bf2 <_strtod_l+0x306>
 8009be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bea:	9206      	str	r2, [sp, #24]
 8009bec:	428a      	cmp	r2, r1
 8009bee:	dd00      	ble.n	8009bf2 <_strtod_l+0x306>
 8009bf0:	9106      	str	r1, [sp, #24]
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d002      	beq.n	8009bfc <_strtod_l+0x310>
 8009bf6:	9a06      	ldr	r2, [sp, #24]
 8009bf8:	4252      	negs	r2, r2
 8009bfa:	9206      	str	r2, [sp, #24]
 8009bfc:	9a05      	ldr	r2, [sp, #20]
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d14d      	bne.n	8009c9e <_strtod_l+0x3b2>
 8009c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c04:	4310      	orrs	r0, r2
 8009c06:	d000      	beq.n	8009c0a <_strtod_l+0x31e>
 8009c08:	e6ab      	b.n	8009962 <_strtod_l+0x76>
 8009c0a:	4662      	mov	r2, ip
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	d000      	beq.n	8009c12 <_strtod_l+0x326>
 8009c10:	e6c5      	b.n	800999e <_strtod_l+0xb2>
 8009c12:	2b69      	cmp	r3, #105	; 0x69
 8009c14:	d027      	beq.n	8009c66 <_strtod_l+0x37a>
 8009c16:	dc23      	bgt.n	8009c60 <_strtod_l+0x374>
 8009c18:	2b49      	cmp	r3, #73	; 0x49
 8009c1a:	d024      	beq.n	8009c66 <_strtod_l+0x37a>
 8009c1c:	2b4e      	cmp	r3, #78	; 0x4e
 8009c1e:	d000      	beq.n	8009c22 <_strtod_l+0x336>
 8009c20:	e6bd      	b.n	800999e <_strtod_l+0xb2>
 8009c22:	49a3      	ldr	r1, [pc, #652]	; (8009eb0 <_strtod_l+0x5c4>)
 8009c24:	a81b      	add	r0, sp, #108	; 0x6c
 8009c26:	f001 fb57 	bl	800b2d8 <__match>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d100      	bne.n	8009c30 <_strtod_l+0x344>
 8009c2e:	e6b6      	b.n	800999e <_strtod_l+0xb2>
 8009c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b28      	cmp	r3, #40	; 0x28
 8009c36:	d12c      	bne.n	8009c92 <_strtod_l+0x3a6>
 8009c38:	499e      	ldr	r1, [pc, #632]	; (8009eb4 <_strtod_l+0x5c8>)
 8009c3a:	aa1e      	add	r2, sp, #120	; 0x78
 8009c3c:	a81b      	add	r0, sp, #108	; 0x6c
 8009c3e:	f001 fb5f 	bl	800b300 <__hexnan>
 8009c42:	2805      	cmp	r0, #5
 8009c44:	d125      	bne.n	8009c92 <_strtod_l+0x3a6>
 8009c46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c48:	4a9b      	ldr	r2, [pc, #620]	; (8009eb8 <_strtod_l+0x5cc>)
 8009c4a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	0017      	movs	r7, r2
 8009c50:	e687      	b.n	8009962 <_strtod_l+0x76>
 8009c52:	220a      	movs	r2, #10
 8009c54:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c56:	434a      	muls	r2, r1
 8009c58:	18d2      	adds	r2, r2, r3
 8009c5a:	3a30      	subs	r2, #48	; 0x30
 8009c5c:	920e      	str	r2, [sp, #56]	; 0x38
 8009c5e:	e7b5      	b.n	8009bcc <_strtod_l+0x2e0>
 8009c60:	2b6e      	cmp	r3, #110	; 0x6e
 8009c62:	d0de      	beq.n	8009c22 <_strtod_l+0x336>
 8009c64:	e69b      	b.n	800999e <_strtod_l+0xb2>
 8009c66:	4995      	ldr	r1, [pc, #596]	; (8009ebc <_strtod_l+0x5d0>)
 8009c68:	a81b      	add	r0, sp, #108	; 0x6c
 8009c6a:	f001 fb35 	bl	800b2d8 <__match>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d100      	bne.n	8009c74 <_strtod_l+0x388>
 8009c72:	e694      	b.n	800999e <_strtod_l+0xb2>
 8009c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c76:	4992      	ldr	r1, [pc, #584]	; (8009ec0 <_strtod_l+0x5d4>)
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	a81b      	add	r0, sp, #108	; 0x6c
 8009c7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c7e:	f001 fb2b 	bl	800b2d8 <__match>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d102      	bne.n	8009c8c <_strtod_l+0x3a0>
 8009c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c88:	3301      	adds	r3, #1
 8009c8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	4f8a      	ldr	r7, [pc, #552]	; (8009eb8 <_strtod_l+0x5cc>)
 8009c90:	e667      	b.n	8009962 <_strtod_l+0x76>
 8009c92:	488c      	ldr	r0, [pc, #560]	; (8009ec4 <_strtod_l+0x5d8>)
 8009c94:	f000 ff5c 	bl	800ab50 <nan>
 8009c98:	0006      	movs	r6, r0
 8009c9a:	000f      	movs	r7, r1
 8009c9c:	e661      	b.n	8009962 <_strtod_l+0x76>
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca6:	9b08      	ldr	r3, [sp, #32]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <_strtod_l+0x3c4>
 8009cac:	9b05      	ldr	r3, [sp, #20]
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	9c05      	ldr	r4, [sp, #20]
 8009cb2:	2c10      	cmp	r4, #16
 8009cb4:	dd00      	ble.n	8009cb8 <_strtod_l+0x3cc>
 8009cb6:	2410      	movs	r4, #16
 8009cb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cba:	f7f8 fb9f 	bl	80023fc <__aeabi_ui2d>
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	0006      	movs	r6, r0
 8009cc2:	000f      	movs	r7, r1
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	dd15      	ble.n	8009cf4 <_strtod_l+0x408>
 8009cc8:	0022      	movs	r2, r4
 8009cca:	4b7f      	ldr	r3, [pc, #508]	; (8009ec8 <_strtod_l+0x5dc>)
 8009ccc:	3a09      	subs	r2, #9
 8009cce:	00d2      	lsls	r2, r2, #3
 8009cd0:	189b      	adds	r3, r3, r2
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f7f7 fcc9 	bl	800166c <__aeabi_dmul>
 8009cda:	0006      	movs	r6, r0
 8009cdc:	0028      	movs	r0, r5
 8009cde:	000f      	movs	r7, r1
 8009ce0:	f7f8 fb8c 	bl	80023fc <__aeabi_ui2d>
 8009ce4:	0002      	movs	r2, r0
 8009ce6:	000b      	movs	r3, r1
 8009ce8:	0030      	movs	r0, r6
 8009cea:	0039      	movs	r1, r7
 8009cec:	f7f6 fd64 	bl	80007b8 <__aeabi_dadd>
 8009cf0:	0006      	movs	r6, r0
 8009cf2:	000f      	movs	r7, r1
 8009cf4:	9b05      	ldr	r3, [sp, #20]
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	dc39      	bgt.n	8009d6e <_strtod_l+0x482>
 8009cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d100      	bne.n	8009d02 <_strtod_l+0x416>
 8009d00:	e62f      	b.n	8009962 <_strtod_l+0x76>
 8009d02:	dd24      	ble.n	8009d4e <_strtod_l+0x462>
 8009d04:	2b16      	cmp	r3, #22
 8009d06:	dc09      	bgt.n	8009d1c <_strtod_l+0x430>
 8009d08:	496f      	ldr	r1, [pc, #444]	; (8009ec8 <_strtod_l+0x5dc>)
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	18c9      	adds	r1, r1, r3
 8009d0e:	0032      	movs	r2, r6
 8009d10:	6808      	ldr	r0, [r1, #0]
 8009d12:	6849      	ldr	r1, [r1, #4]
 8009d14:	003b      	movs	r3, r7
 8009d16:	f7f7 fca9 	bl	800166c <__aeabi_dmul>
 8009d1a:	e7bd      	b.n	8009c98 <_strtod_l+0x3ac>
 8009d1c:	2325      	movs	r3, #37	; 0x25
 8009d1e:	9a05      	ldr	r2, [sp, #20]
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d24:	4293      	cmp	r3, r2
 8009d26:	db22      	blt.n	8009d6e <_strtod_l+0x482>
 8009d28:	240f      	movs	r4, #15
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	4d66      	ldr	r5, [pc, #408]	; (8009ec8 <_strtod_l+0x5dc>)
 8009d2e:	1ae4      	subs	r4, r4, r3
 8009d30:	00e1      	lsls	r1, r4, #3
 8009d32:	1869      	adds	r1, r5, r1
 8009d34:	0032      	movs	r2, r6
 8009d36:	6808      	ldr	r0, [r1, #0]
 8009d38:	6849      	ldr	r1, [r1, #4]
 8009d3a:	003b      	movs	r3, r7
 8009d3c:	f7f7 fc96 	bl	800166c <__aeabi_dmul>
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	1b1c      	subs	r4, r3, r4
 8009d44:	00e4      	lsls	r4, r4, #3
 8009d46:	192d      	adds	r5, r5, r4
 8009d48:	682a      	ldr	r2, [r5, #0]
 8009d4a:	686b      	ldr	r3, [r5, #4]
 8009d4c:	e7e3      	b.n	8009d16 <_strtod_l+0x42a>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d50:	3316      	adds	r3, #22
 8009d52:	db0c      	blt.n	8009d6e <_strtod_l+0x482>
 8009d54:	9906      	ldr	r1, [sp, #24]
 8009d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d58:	4b5b      	ldr	r3, [pc, #364]	; (8009ec8 <_strtod_l+0x5dc>)
 8009d5a:	1a52      	subs	r2, r2, r1
 8009d5c:	00d2      	lsls	r2, r2, #3
 8009d5e:	189b      	adds	r3, r3, r2
 8009d60:	0030      	movs	r0, r6
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	0039      	movs	r1, r7
 8009d68:	f7f7 f886 	bl	8000e78 <__aeabi_ddiv>
 8009d6c:	e794      	b.n	8009c98 <_strtod_l+0x3ac>
 8009d6e:	9b05      	ldr	r3, [sp, #20]
 8009d70:	1b1c      	subs	r4, r3, r4
 8009d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d74:	18e4      	adds	r4, r4, r3
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	dd72      	ble.n	8009e60 <_strtod_l+0x574>
 8009d7a:	220f      	movs	r2, #15
 8009d7c:	0023      	movs	r3, r4
 8009d7e:	4013      	ands	r3, r2
 8009d80:	4214      	tst	r4, r2
 8009d82:	d00a      	beq.n	8009d9a <_strtod_l+0x4ae>
 8009d84:	4950      	ldr	r1, [pc, #320]	; (8009ec8 <_strtod_l+0x5dc>)
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	18c9      	adds	r1, r1, r3
 8009d8a:	0032      	movs	r2, r6
 8009d8c:	6808      	ldr	r0, [r1, #0]
 8009d8e:	6849      	ldr	r1, [r1, #4]
 8009d90:	003b      	movs	r3, r7
 8009d92:	f7f7 fc6b 	bl	800166c <__aeabi_dmul>
 8009d96:	0006      	movs	r6, r0
 8009d98:	000f      	movs	r7, r1
 8009d9a:	230f      	movs	r3, #15
 8009d9c:	439c      	bics	r4, r3
 8009d9e:	d04a      	beq.n	8009e36 <_strtod_l+0x54a>
 8009da0:	3326      	adds	r3, #38	; 0x26
 8009da2:	33ff      	adds	r3, #255	; 0xff
 8009da4:	429c      	cmp	r4, r3
 8009da6:	dd22      	ble.n	8009dee <_strtod_l+0x502>
 8009da8:	2300      	movs	r3, #0
 8009daa:	9305      	str	r3, [sp, #20]
 8009dac:	9306      	str	r3, [sp, #24]
 8009dae:	930d      	str	r3, [sp, #52]	; 0x34
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	2322      	movs	r3, #34	; 0x22
 8009db4:	2600      	movs	r6, #0
 8009db6:	9a04      	ldr	r2, [sp, #16]
 8009db8:	4f3f      	ldr	r7, [pc, #252]	; (8009eb8 <_strtod_l+0x5cc>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbe:	42b3      	cmp	r3, r6
 8009dc0:	d100      	bne.n	8009dc4 <_strtod_l+0x4d8>
 8009dc2:	e5ce      	b.n	8009962 <_strtod_l+0x76>
 8009dc4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009dc6:	9804      	ldr	r0, [sp, #16]
 8009dc8:	f001 fb7c 	bl	800b4c4 <_Bfree>
 8009dcc:	9908      	ldr	r1, [sp, #32]
 8009dce:	9804      	ldr	r0, [sp, #16]
 8009dd0:	f001 fb78 	bl	800b4c4 <_Bfree>
 8009dd4:	9906      	ldr	r1, [sp, #24]
 8009dd6:	9804      	ldr	r0, [sp, #16]
 8009dd8:	f001 fb74 	bl	800b4c4 <_Bfree>
 8009ddc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dde:	9804      	ldr	r0, [sp, #16]
 8009de0:	f001 fb70 	bl	800b4c4 <_Bfree>
 8009de4:	9905      	ldr	r1, [sp, #20]
 8009de6:	9804      	ldr	r0, [sp, #16]
 8009de8:	f001 fb6c 	bl	800b4c4 <_Bfree>
 8009dec:	e5b9      	b.n	8009962 <_strtod_l+0x76>
 8009dee:	2300      	movs	r3, #0
 8009df0:	0030      	movs	r0, r6
 8009df2:	0039      	movs	r1, r7
 8009df4:	4d35      	ldr	r5, [pc, #212]	; (8009ecc <_strtod_l+0x5e0>)
 8009df6:	1124      	asrs	r4, r4, #4
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	2c01      	cmp	r4, #1
 8009dfc:	dc1e      	bgt.n	8009e3c <_strtod_l+0x550>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <_strtod_l+0x51a>
 8009e02:	0006      	movs	r6, r0
 8009e04:	000f      	movs	r7, r1
 8009e06:	4b32      	ldr	r3, [pc, #200]	; (8009ed0 <_strtod_l+0x5e4>)
 8009e08:	9a07      	ldr	r2, [sp, #28]
 8009e0a:	18ff      	adds	r7, r7, r3
 8009e0c:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <_strtod_l+0x5e0>)
 8009e0e:	00d2      	lsls	r2, r2, #3
 8009e10:	189d      	adds	r5, r3, r2
 8009e12:	6828      	ldr	r0, [r5, #0]
 8009e14:	6869      	ldr	r1, [r5, #4]
 8009e16:	0032      	movs	r2, r6
 8009e18:	003b      	movs	r3, r7
 8009e1a:	f7f7 fc27 	bl	800166c <__aeabi_dmul>
 8009e1e:	4b26      	ldr	r3, [pc, #152]	; (8009eb8 <_strtod_l+0x5cc>)
 8009e20:	4a2c      	ldr	r2, [pc, #176]	; (8009ed4 <_strtod_l+0x5e8>)
 8009e22:	0006      	movs	r6, r0
 8009e24:	400b      	ands	r3, r1
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d8be      	bhi.n	8009da8 <_strtod_l+0x4bc>
 8009e2a:	4a2b      	ldr	r2, [pc, #172]	; (8009ed8 <_strtod_l+0x5ec>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d913      	bls.n	8009e58 <_strtod_l+0x56c>
 8009e30:	2601      	movs	r6, #1
 8009e32:	4f2a      	ldr	r7, [pc, #168]	; (8009edc <_strtod_l+0x5f0>)
 8009e34:	4276      	negs	r6, r6
 8009e36:	2300      	movs	r3, #0
 8009e38:	9307      	str	r3, [sp, #28]
 8009e3a:	e088      	b.n	8009f4e <_strtod_l+0x662>
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4214      	tst	r4, r2
 8009e40:	d004      	beq.n	8009e4c <_strtod_l+0x560>
 8009e42:	682a      	ldr	r2, [r5, #0]
 8009e44:	686b      	ldr	r3, [r5, #4]
 8009e46:	f7f7 fc11 	bl	800166c <__aeabi_dmul>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	9a07      	ldr	r2, [sp, #28]
 8009e4e:	1064      	asrs	r4, r4, #1
 8009e50:	3201      	adds	r2, #1
 8009e52:	9207      	str	r2, [sp, #28]
 8009e54:	3508      	adds	r5, #8
 8009e56:	e7d0      	b.n	8009dfa <_strtod_l+0x50e>
 8009e58:	23d4      	movs	r3, #212	; 0xd4
 8009e5a:	049b      	lsls	r3, r3, #18
 8009e5c:	18cf      	adds	r7, r1, r3
 8009e5e:	e7ea      	b.n	8009e36 <_strtod_l+0x54a>
 8009e60:	2c00      	cmp	r4, #0
 8009e62:	d0e8      	beq.n	8009e36 <_strtod_l+0x54a>
 8009e64:	4264      	negs	r4, r4
 8009e66:	230f      	movs	r3, #15
 8009e68:	0022      	movs	r2, r4
 8009e6a:	401a      	ands	r2, r3
 8009e6c:	421c      	tst	r4, r3
 8009e6e:	d00a      	beq.n	8009e86 <_strtod_l+0x59a>
 8009e70:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <_strtod_l+0x5dc>)
 8009e72:	00d2      	lsls	r2, r2, #3
 8009e74:	189b      	adds	r3, r3, r2
 8009e76:	0030      	movs	r0, r6
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	0039      	movs	r1, r7
 8009e7e:	f7f6 fffb 	bl	8000e78 <__aeabi_ddiv>
 8009e82:	0006      	movs	r6, r0
 8009e84:	000f      	movs	r7, r1
 8009e86:	1124      	asrs	r4, r4, #4
 8009e88:	d0d5      	beq.n	8009e36 <_strtod_l+0x54a>
 8009e8a:	2c1f      	cmp	r4, #31
 8009e8c:	dd28      	ble.n	8009ee0 <_strtod_l+0x5f4>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9305      	str	r3, [sp, #20]
 8009e92:	9306      	str	r3, [sp, #24]
 8009e94:	930d      	str	r3, [sp, #52]	; 0x34
 8009e96:	9308      	str	r3, [sp, #32]
 8009e98:	2322      	movs	r3, #34	; 0x22
 8009e9a:	9a04      	ldr	r2, [sp, #16]
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea2:	2700      	movs	r7, #0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d18d      	bne.n	8009dc4 <_strtod_l+0x4d8>
 8009ea8:	e55b      	b.n	8009962 <_strtod_l+0x76>
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	00004e1f 	.word	0x00004e1f
 8009eb0:	080130b9 	.word	0x080130b9
 8009eb4:	08012d98 	.word	0x08012d98
 8009eb8:	7ff00000 	.word	0x7ff00000
 8009ebc:	080130b1 	.word	0x080130b1
 8009ec0:	08013167 	.word	0x08013167
 8009ec4:	08013163 	.word	0x08013163
 8009ec8:	08012fd8 	.word	0x08012fd8
 8009ecc:	08012fb0 	.word	0x08012fb0
 8009ed0:	fcb00000 	.word	0xfcb00000
 8009ed4:	7ca00000 	.word	0x7ca00000
 8009ed8:	7c900000 	.word	0x7c900000
 8009edc:	7fefffff 	.word	0x7fefffff
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	0022      	movs	r2, r4
 8009ee4:	401a      	ands	r2, r3
 8009ee6:	9207      	str	r2, [sp, #28]
 8009ee8:	421c      	tst	r4, r3
 8009eea:	d001      	beq.n	8009ef0 <_strtod_l+0x604>
 8009eec:	335a      	adds	r3, #90	; 0x5a
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	0030      	movs	r0, r6
 8009ef2:	0039      	movs	r1, r7
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4dc4      	ldr	r5, [pc, #784]	; (800a208 <_strtod_l+0x91c>)
 8009ef8:	2201      	movs	r2, #1
 8009efa:	4214      	tst	r4, r2
 8009efc:	d004      	beq.n	8009f08 <_strtod_l+0x61c>
 8009efe:	682a      	ldr	r2, [r5, #0]
 8009f00:	686b      	ldr	r3, [r5, #4]
 8009f02:	f7f7 fbb3 	bl	800166c <__aeabi_dmul>
 8009f06:	2301      	movs	r3, #1
 8009f08:	1064      	asrs	r4, r4, #1
 8009f0a:	3508      	adds	r5, #8
 8009f0c:	2c00      	cmp	r4, #0
 8009f0e:	d1f3      	bne.n	8009ef8 <_strtod_l+0x60c>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <_strtod_l+0x62c>
 8009f14:	0006      	movs	r6, r0
 8009f16:	000f      	movs	r7, r1
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00f      	beq.n	8009f3e <_strtod_l+0x652>
 8009f1e:	236b      	movs	r3, #107	; 0x6b
 8009f20:	007a      	lsls	r2, r7, #1
 8009f22:	0d52      	lsrs	r2, r2, #21
 8009f24:	0039      	movs	r1, r7
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dd08      	ble.n	8009f3e <_strtod_l+0x652>
 8009f2c:	2b1f      	cmp	r3, #31
 8009f2e:	dc00      	bgt.n	8009f32 <_strtod_l+0x646>
 8009f30:	e121      	b.n	800a176 <_strtod_l+0x88a>
 8009f32:	2600      	movs	r6, #0
 8009f34:	2b34      	cmp	r3, #52	; 0x34
 8009f36:	dc00      	bgt.n	8009f3a <_strtod_l+0x64e>
 8009f38:	e116      	b.n	800a168 <_strtod_l+0x87c>
 8009f3a:	27dc      	movs	r7, #220	; 0xdc
 8009f3c:	04bf      	lsls	r7, r7, #18
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2300      	movs	r3, #0
 8009f42:	0030      	movs	r0, r6
 8009f44:	0039      	movs	r1, r7
 8009f46:	f7f6 fa7f 	bl	8000448 <__aeabi_dcmpeq>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d19f      	bne.n	8009e8e <_strtod_l+0x5a2>
 8009f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f50:	9a08      	ldr	r2, [sp, #32]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	9804      	ldr	r0, [sp, #16]
 8009f5a:	f001 fb01 	bl	800b560 <__s2b>
 8009f5e:	900d      	str	r0, [sp, #52]	; 0x34
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d100      	bne.n	8009f66 <_strtod_l+0x67a>
 8009f64:	e720      	b.n	8009da8 <_strtod_l+0x4bc>
 8009f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f68:	9906      	ldr	r1, [sp, #24]
 8009f6a:	17da      	asrs	r2, r3, #31
 8009f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f6e:	1a5b      	subs	r3, r3, r1
 8009f70:	401a      	ands	r2, r3
 8009f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f74:	9215      	str	r2, [sp, #84]	; 0x54
 8009f76:	43db      	mvns	r3, r3
 8009f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f7a:	17db      	asrs	r3, r3, #31
 8009f7c:	401a      	ands	r2, r3
 8009f7e:	2300      	movs	r3, #0
 8009f80:	9218      	str	r2, [sp, #96]	; 0x60
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	9306      	str	r3, [sp, #24]
 8009f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f88:	9804      	ldr	r0, [sp, #16]
 8009f8a:	6859      	ldr	r1, [r3, #4]
 8009f8c:	f001 fa72 	bl	800b474 <_Balloc>
 8009f90:	9008      	str	r0, [sp, #32]
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d100      	bne.n	8009f98 <_strtod_l+0x6ac>
 8009f96:	e70c      	b.n	8009db2 <_strtod_l+0x4c6>
 8009f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9a:	300c      	adds	r0, #12
 8009f9c:	0019      	movs	r1, r3
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	310c      	adds	r1, #12
 8009fa2:	3202      	adds	r2, #2
 8009fa4:	0092      	lsls	r2, r2, #2
 8009fa6:	f000 fdca 	bl	800ab3e <memcpy>
 8009faa:	ab1e      	add	r3, sp, #120	; 0x78
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	ab1d      	add	r3, sp, #116	; 0x74
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	0032      	movs	r2, r6
 8009fb4:	003b      	movs	r3, r7
 8009fb6:	9804      	ldr	r0, [sp, #16]
 8009fb8:	9610      	str	r6, [sp, #64]	; 0x40
 8009fba:	9711      	str	r7, [sp, #68]	; 0x44
 8009fbc:	f001 fdf8 	bl	800bbb0 <__d2b>
 8009fc0:	901c      	str	r0, [sp, #112]	; 0x70
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d100      	bne.n	8009fc8 <_strtod_l+0x6dc>
 8009fc6:	e6f4      	b.n	8009db2 <_strtod_l+0x4c6>
 8009fc8:	2101      	movs	r1, #1
 8009fca:	9804      	ldr	r0, [sp, #16]
 8009fcc:	f001 fb5c 	bl	800b688 <__i2b>
 8009fd0:	9006      	str	r0, [sp, #24]
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d100      	bne.n	8009fd8 <_strtod_l+0x6ec>
 8009fd6:	e6ec      	b.n	8009db2 <_strtod_l+0x4c6>
 8009fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009fdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009fde:	1ad4      	subs	r4, r2, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db01      	blt.n	8009fe8 <_strtod_l+0x6fc>
 8009fe4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009fe6:	195d      	adds	r5, r3, r5
 8009fe8:	9907      	ldr	r1, [sp, #28]
 8009fea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009fec:	1a5b      	subs	r3, r3, r1
 8009fee:	2136      	movs	r1, #54	; 0x36
 8009ff0:	189b      	adds	r3, r3, r2
 8009ff2:	1a8a      	subs	r2, r1, r2
 8009ff4:	4985      	ldr	r1, [pc, #532]	; (800a20c <_strtod_l+0x920>)
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	468c      	mov	ip, r1
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	9114      	str	r1, [sp, #80]	; 0x50
 800a000:	9012      	str	r0, [sp, #72]	; 0x48
 800a002:	4563      	cmp	r3, ip
 800a004:	da07      	bge.n	800a016 <_strtod_l+0x72a>
 800a006:	4661      	mov	r1, ip
 800a008:	1ac9      	subs	r1, r1, r3
 800a00a:	1a52      	subs	r2, r2, r1
 800a00c:	291f      	cmp	r1, #31
 800a00e:	dd00      	ble.n	800a012 <_strtod_l+0x726>
 800a010:	e0b6      	b.n	800a180 <_strtod_l+0x894>
 800a012:	4088      	lsls	r0, r1
 800a014:	9012      	str	r0, [sp, #72]	; 0x48
 800a016:	18ab      	adds	r3, r5, r2
 800a018:	930c      	str	r3, [sp, #48]	; 0x30
 800a01a:	18a4      	adds	r4, r4, r2
 800a01c:	9b07      	ldr	r3, [sp, #28]
 800a01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a020:	191c      	adds	r4, r3, r4
 800a022:	002b      	movs	r3, r5
 800a024:	4295      	cmp	r5, r2
 800a026:	dd00      	ble.n	800a02a <_strtod_l+0x73e>
 800a028:	0013      	movs	r3, r2
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	dd00      	ble.n	800a030 <_strtod_l+0x744>
 800a02e:	0023      	movs	r3, r4
 800a030:	2b00      	cmp	r3, #0
 800a032:	dd04      	ble.n	800a03e <_strtod_l+0x752>
 800a034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a036:	1ae4      	subs	r4, r4, r3
 800a038:	1ad2      	subs	r2, r2, r3
 800a03a:	920c      	str	r2, [sp, #48]	; 0x30
 800a03c:	1aed      	subs	r5, r5, r3
 800a03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a040:	2b00      	cmp	r3, #0
 800a042:	dd17      	ble.n	800a074 <_strtod_l+0x788>
 800a044:	001a      	movs	r2, r3
 800a046:	9906      	ldr	r1, [sp, #24]
 800a048:	9804      	ldr	r0, [sp, #16]
 800a04a:	f001 fbe5 	bl	800b818 <__pow5mult>
 800a04e:	9006      	str	r0, [sp, #24]
 800a050:	2800      	cmp	r0, #0
 800a052:	d100      	bne.n	800a056 <_strtod_l+0x76a>
 800a054:	e6ad      	b.n	8009db2 <_strtod_l+0x4c6>
 800a056:	0001      	movs	r1, r0
 800a058:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a05a:	9804      	ldr	r0, [sp, #16]
 800a05c:	f001 fb2c 	bl	800b6b8 <__multiply>
 800a060:	900e      	str	r0, [sp, #56]	; 0x38
 800a062:	2800      	cmp	r0, #0
 800a064:	d100      	bne.n	800a068 <_strtod_l+0x77c>
 800a066:	e6a4      	b.n	8009db2 <_strtod_l+0x4c6>
 800a068:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a06a:	9804      	ldr	r0, [sp, #16]
 800a06c:	f001 fa2a 	bl	800b4c4 <_Bfree>
 800a070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a072:	931c      	str	r3, [sp, #112]	; 0x70
 800a074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a076:	2b00      	cmp	r3, #0
 800a078:	dd00      	ble.n	800a07c <_strtod_l+0x790>
 800a07a:	e087      	b.n	800a18c <_strtod_l+0x8a0>
 800a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd08      	ble.n	800a094 <_strtod_l+0x7a8>
 800a082:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a084:	9908      	ldr	r1, [sp, #32]
 800a086:	9804      	ldr	r0, [sp, #16]
 800a088:	f001 fbc6 	bl	800b818 <__pow5mult>
 800a08c:	9008      	str	r0, [sp, #32]
 800a08e:	2800      	cmp	r0, #0
 800a090:	d100      	bne.n	800a094 <_strtod_l+0x7a8>
 800a092:	e68e      	b.n	8009db2 <_strtod_l+0x4c6>
 800a094:	2c00      	cmp	r4, #0
 800a096:	dd08      	ble.n	800a0aa <_strtod_l+0x7be>
 800a098:	0022      	movs	r2, r4
 800a09a:	9908      	ldr	r1, [sp, #32]
 800a09c:	9804      	ldr	r0, [sp, #16]
 800a09e:	f001 fbfd 	bl	800b89c <__lshift>
 800a0a2:	9008      	str	r0, [sp, #32]
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d100      	bne.n	800a0aa <_strtod_l+0x7be>
 800a0a8:	e683      	b.n	8009db2 <_strtod_l+0x4c6>
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	dd08      	ble.n	800a0c0 <_strtod_l+0x7d4>
 800a0ae:	002a      	movs	r2, r5
 800a0b0:	9906      	ldr	r1, [sp, #24]
 800a0b2:	9804      	ldr	r0, [sp, #16]
 800a0b4:	f001 fbf2 	bl	800b89c <__lshift>
 800a0b8:	9006      	str	r0, [sp, #24]
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d100      	bne.n	800a0c0 <_strtod_l+0x7d4>
 800a0be:	e678      	b.n	8009db2 <_strtod_l+0x4c6>
 800a0c0:	9a08      	ldr	r2, [sp, #32]
 800a0c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a0c4:	9804      	ldr	r0, [sp, #16]
 800a0c6:	f001 fc73 	bl	800b9b0 <__mdiff>
 800a0ca:	9005      	str	r0, [sp, #20]
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d100      	bne.n	800a0d2 <_strtod_l+0x7e6>
 800a0d0:	e66f      	b.n	8009db2 <_strtod_l+0x4c6>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	68c3      	ldr	r3, [r0, #12]
 800a0d6:	9906      	ldr	r1, [sp, #24]
 800a0d8:	60c2      	str	r2, [r0, #12]
 800a0da:	930c      	str	r3, [sp, #48]	; 0x30
 800a0dc:	f001 fc4c 	bl	800b978 <__mcmp>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	da5d      	bge.n	800a1a0 <_strtod_l+0x8b4>
 800a0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e6:	4333      	orrs	r3, r6
 800a0e8:	d000      	beq.n	800a0ec <_strtod_l+0x800>
 800a0ea:	e088      	b.n	800a1fe <_strtod_l+0x912>
 800a0ec:	033b      	lsls	r3, r7, #12
 800a0ee:	d000      	beq.n	800a0f2 <_strtod_l+0x806>
 800a0f0:	e085      	b.n	800a1fe <_strtod_l+0x912>
 800a0f2:	22d6      	movs	r2, #214	; 0xd6
 800a0f4:	4b46      	ldr	r3, [pc, #280]	; (800a210 <_strtod_l+0x924>)
 800a0f6:	04d2      	lsls	r2, r2, #19
 800a0f8:	403b      	ands	r3, r7
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d97f      	bls.n	800a1fe <_strtod_l+0x912>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <_strtod_l+0x822>
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	dd77      	ble.n	800a1fe <_strtod_l+0x912>
 800a10e:	9905      	ldr	r1, [sp, #20]
 800a110:	2201      	movs	r2, #1
 800a112:	9804      	ldr	r0, [sp, #16]
 800a114:	f001 fbc2 	bl	800b89c <__lshift>
 800a118:	9906      	ldr	r1, [sp, #24]
 800a11a:	9005      	str	r0, [sp, #20]
 800a11c:	f001 fc2c 	bl	800b978 <__mcmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	dd6c      	ble.n	800a1fe <_strtod_l+0x912>
 800a124:	9907      	ldr	r1, [sp, #28]
 800a126:	003b      	movs	r3, r7
 800a128:	4a39      	ldr	r2, [pc, #228]	; (800a210 <_strtod_l+0x924>)
 800a12a:	2900      	cmp	r1, #0
 800a12c:	d100      	bne.n	800a130 <_strtod_l+0x844>
 800a12e:	e094      	b.n	800a25a <_strtod_l+0x96e>
 800a130:	0011      	movs	r1, r2
 800a132:	20d6      	movs	r0, #214	; 0xd6
 800a134:	4039      	ands	r1, r7
 800a136:	04c0      	lsls	r0, r0, #19
 800a138:	4281      	cmp	r1, r0
 800a13a:	dd00      	ble.n	800a13e <_strtod_l+0x852>
 800a13c:	e08d      	b.n	800a25a <_strtod_l+0x96e>
 800a13e:	23dc      	movs	r3, #220	; 0xdc
 800a140:	049b      	lsls	r3, r3, #18
 800a142:	4299      	cmp	r1, r3
 800a144:	dc00      	bgt.n	800a148 <_strtod_l+0x85c>
 800a146:	e6a7      	b.n	8009e98 <_strtod_l+0x5ac>
 800a148:	0030      	movs	r0, r6
 800a14a:	0039      	movs	r1, r7
 800a14c:	4b31      	ldr	r3, [pc, #196]	; (800a214 <_strtod_l+0x928>)
 800a14e:	2200      	movs	r2, #0
 800a150:	f7f7 fa8c 	bl	800166c <__aeabi_dmul>
 800a154:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <_strtod_l+0x924>)
 800a156:	0006      	movs	r6, r0
 800a158:	000f      	movs	r7, r1
 800a15a:	420b      	tst	r3, r1
 800a15c:	d000      	beq.n	800a160 <_strtod_l+0x874>
 800a15e:	e631      	b.n	8009dc4 <_strtod_l+0x4d8>
 800a160:	2322      	movs	r3, #34	; 0x22
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	e62d      	b.n	8009dc4 <_strtod_l+0x4d8>
 800a168:	234b      	movs	r3, #75	; 0x4b
 800a16a:	1a9a      	subs	r2, r3, r2
 800a16c:	3b4c      	subs	r3, #76	; 0x4c
 800a16e:	4093      	lsls	r3, r2
 800a170:	4019      	ands	r1, r3
 800a172:	000f      	movs	r7, r1
 800a174:	e6e3      	b.n	8009f3e <_strtod_l+0x652>
 800a176:	2201      	movs	r2, #1
 800a178:	4252      	negs	r2, r2
 800a17a:	409a      	lsls	r2, r3
 800a17c:	4016      	ands	r6, r2
 800a17e:	e6de      	b.n	8009f3e <_strtod_l+0x652>
 800a180:	4925      	ldr	r1, [pc, #148]	; (800a218 <_strtod_l+0x92c>)
 800a182:	1acb      	subs	r3, r1, r3
 800a184:	0001      	movs	r1, r0
 800a186:	4099      	lsls	r1, r3
 800a188:	9114      	str	r1, [sp, #80]	; 0x50
 800a18a:	e743      	b.n	800a014 <_strtod_l+0x728>
 800a18c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a18e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a190:	9804      	ldr	r0, [sp, #16]
 800a192:	f001 fb83 	bl	800b89c <__lshift>
 800a196:	901c      	str	r0, [sp, #112]	; 0x70
 800a198:	2800      	cmp	r0, #0
 800a19a:	d000      	beq.n	800a19e <_strtod_l+0x8b2>
 800a19c:	e76e      	b.n	800a07c <_strtod_l+0x790>
 800a19e:	e608      	b.n	8009db2 <_strtod_l+0x4c6>
 800a1a0:	970e      	str	r7, [sp, #56]	; 0x38
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d177      	bne.n	800a296 <_strtod_l+0x9aa>
 800a1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1a8:	033b      	lsls	r3, r7, #12
 800a1aa:	0b1b      	lsrs	r3, r3, #12
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d039      	beq.n	800a224 <_strtod_l+0x938>
 800a1b0:	4a1a      	ldr	r2, [pc, #104]	; (800a21c <_strtod_l+0x930>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d139      	bne.n	800a22a <_strtod_l+0x93e>
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	9b07      	ldr	r3, [sp, #28]
 800a1ba:	4249      	negs	r1, r1
 800a1bc:	0032      	movs	r2, r6
 800a1be:	0008      	movs	r0, r1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <_strtod_l+0x8f0>
 800a1c4:	24d4      	movs	r4, #212	; 0xd4
 800a1c6:	4b12      	ldr	r3, [pc, #72]	; (800a210 <_strtod_l+0x924>)
 800a1c8:	0008      	movs	r0, r1
 800a1ca:	403b      	ands	r3, r7
 800a1cc:	04e4      	lsls	r4, r4, #19
 800a1ce:	42a3      	cmp	r3, r4
 800a1d0:	d804      	bhi.n	800a1dc <_strtod_l+0x8f0>
 800a1d2:	306c      	adds	r0, #108	; 0x6c
 800a1d4:	0d1b      	lsrs	r3, r3, #20
 800a1d6:	1ac3      	subs	r3, r0, r3
 800a1d8:	4099      	lsls	r1, r3
 800a1da:	0008      	movs	r0, r1
 800a1dc:	4282      	cmp	r2, r0
 800a1de:	d124      	bne.n	800a22a <_strtod_l+0x93e>
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <_strtod_l+0x934>)
 800a1e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d102      	bne.n	800a1ee <_strtod_l+0x902>
 800a1e8:	3201      	adds	r2, #1
 800a1ea:	d100      	bne.n	800a1ee <_strtod_l+0x902>
 800a1ec:	e5e1      	b.n	8009db2 <_strtod_l+0x4c6>
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <_strtod_l+0x924>)
 800a1f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1f2:	2600      	movs	r6, #0
 800a1f4:	401a      	ands	r2, r3
 800a1f6:	0013      	movs	r3, r2
 800a1f8:	2280      	movs	r2, #128	; 0x80
 800a1fa:	0352      	lsls	r2, r2, #13
 800a1fc:	189f      	adds	r7, r3, r2
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1a1      	bne.n	800a148 <_strtod_l+0x85c>
 800a204:	e5de      	b.n	8009dc4 <_strtod_l+0x4d8>
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	08012db0 	.word	0x08012db0
 800a20c:	fffffc02 	.word	0xfffffc02
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	39500000 	.word	0x39500000
 800a218:	fffffbe2 	.word	0xfffffbe2
 800a21c:	000fffff 	.word	0x000fffff
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	4333      	orrs	r3, r6
 800a226:	d100      	bne.n	800a22a <_strtod_l+0x93e>
 800a228:	e77c      	b.n	800a124 <_strtod_l+0x838>
 800a22a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01d      	beq.n	800a26c <_strtod_l+0x980>
 800a230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a234:	4213      	tst	r3, r2
 800a236:	d0e2      	beq.n	800a1fe <_strtod_l+0x912>
 800a238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23a:	0030      	movs	r0, r6
 800a23c:	0039      	movs	r1, r7
 800a23e:	9a07      	ldr	r2, [sp, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d017      	beq.n	800a274 <_strtod_l+0x988>
 800a244:	f7ff fb3a 	bl	80098bc <sulp>
 800a248:	0002      	movs	r2, r0
 800a24a:	000b      	movs	r3, r1
 800a24c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a24e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a250:	f7f6 fab2 	bl	80007b8 <__aeabi_dadd>
 800a254:	0006      	movs	r6, r0
 800a256:	000f      	movs	r7, r1
 800a258:	e7d1      	b.n	800a1fe <_strtod_l+0x912>
 800a25a:	2601      	movs	r6, #1
 800a25c:	4013      	ands	r3, r2
 800a25e:	4a98      	ldr	r2, [pc, #608]	; (800a4c0 <_strtod_l+0xbd4>)
 800a260:	4276      	negs	r6, r6
 800a262:	189b      	adds	r3, r3, r2
 800a264:	4a97      	ldr	r2, [pc, #604]	; (800a4c4 <_strtod_l+0xbd8>)
 800a266:	431a      	orrs	r2, r3
 800a268:	0017      	movs	r7, r2
 800a26a:	e7c8      	b.n	800a1fe <_strtod_l+0x912>
 800a26c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a26e:	4233      	tst	r3, r6
 800a270:	d0c5      	beq.n	800a1fe <_strtod_l+0x912>
 800a272:	e7e1      	b.n	800a238 <_strtod_l+0x94c>
 800a274:	f7ff fb22 	bl	80098bc <sulp>
 800a278:	0002      	movs	r2, r0
 800a27a:	000b      	movs	r3, r1
 800a27c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a27e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a280:	f7f7 fcb6 	bl	8001bf0 <__aeabi_dsub>
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	0006      	movs	r6, r0
 800a28a:	000f      	movs	r7, r1
 800a28c:	f7f6 f8dc 	bl	8000448 <__aeabi_dcmpeq>
 800a290:	2800      	cmp	r0, #0
 800a292:	d0b4      	beq.n	800a1fe <_strtod_l+0x912>
 800a294:	e600      	b.n	8009e98 <_strtod_l+0x5ac>
 800a296:	9906      	ldr	r1, [sp, #24]
 800a298:	9805      	ldr	r0, [sp, #20]
 800a29a:	f001 fce9 	bl	800bc70 <__ratio>
 800a29e:	2380      	movs	r3, #128	; 0x80
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	05db      	lsls	r3, r3, #23
 800a2a4:	0004      	movs	r4, r0
 800a2a6:	000d      	movs	r5, r1
 800a2a8:	f7f6 f8de 	bl	8000468 <__aeabi_dcmple>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d06d      	beq.n	800a38c <_strtod_l+0xaa0>
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d000      	beq.n	800a2b8 <_strtod_l+0x9cc>
 800a2b6:	e07e      	b.n	800a3b6 <_strtod_l+0xaca>
 800a2b8:	2e00      	cmp	r6, #0
 800a2ba:	d158      	bne.n	800a36e <_strtod_l+0xa82>
 800a2bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2be:	031b      	lsls	r3, r3, #12
 800a2c0:	d000      	beq.n	800a2c4 <_strtod_l+0x9d8>
 800a2c2:	e07f      	b.n	800a3c4 <_strtod_l+0xad8>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	0020      	movs	r0, r4
 800a2c8:	0029      	movs	r1, r5
 800a2ca:	4b7f      	ldr	r3, [pc, #508]	; (800a4c8 <_strtod_l+0xbdc>)
 800a2cc:	f7f6 f8c2 	bl	8000454 <__aeabi_dcmplt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d158      	bne.n	800a386 <_strtod_l+0xa9a>
 800a2d4:	0020      	movs	r0, r4
 800a2d6:	0029      	movs	r1, r5
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4b7c      	ldr	r3, [pc, #496]	; (800a4cc <_strtod_l+0xbe0>)
 800a2dc:	f7f7 f9c6 	bl	800166c <__aeabi_dmul>
 800a2e0:	0004      	movs	r4, r0
 800a2e2:	000d      	movs	r5, r1
 800a2e4:	2380      	movs	r3, #128	; 0x80
 800a2e6:	061b      	lsls	r3, r3, #24
 800a2e8:	940a      	str	r4, [sp, #40]	; 0x28
 800a2ea:	18eb      	adds	r3, r5, r3
 800a2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f2:	9212      	str	r2, [sp, #72]	; 0x48
 800a2f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2f6:	4a76      	ldr	r2, [pc, #472]	; (800a4d0 <_strtod_l+0xbe4>)
 800a2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	9314      	str	r3, [sp, #80]	; 0x50
 800a2fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a300:	4b74      	ldr	r3, [pc, #464]	; (800a4d4 <_strtod_l+0xbe8>)
 800a302:	429a      	cmp	r2, r3
 800a304:	d000      	beq.n	800a308 <_strtod_l+0xa1c>
 800a306:	e091      	b.n	800a42c <_strtod_l+0xb40>
 800a308:	4a73      	ldr	r2, [pc, #460]	; (800a4d8 <_strtod_l+0xbec>)
 800a30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a30c:	4694      	mov	ip, r2
 800a30e:	4463      	add	r3, ip
 800a310:	001f      	movs	r7, r3
 800a312:	0030      	movs	r0, r6
 800a314:	0019      	movs	r1, r3
 800a316:	f001 fbe3 	bl	800bae0 <__ulp>
 800a31a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31e:	f7f7 f9a5 	bl	800166c <__aeabi_dmul>
 800a322:	0032      	movs	r2, r6
 800a324:	003b      	movs	r3, r7
 800a326:	f7f6 fa47 	bl	80007b8 <__aeabi_dadd>
 800a32a:	4a69      	ldr	r2, [pc, #420]	; (800a4d0 <_strtod_l+0xbe4>)
 800a32c:	4b6b      	ldr	r3, [pc, #428]	; (800a4dc <_strtod_l+0xbf0>)
 800a32e:	0006      	movs	r6, r0
 800a330:	400a      	ands	r2, r1
 800a332:	429a      	cmp	r2, r3
 800a334:	d949      	bls.n	800a3ca <_strtod_l+0xade>
 800a336:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a338:	4b69      	ldr	r3, [pc, #420]	; (800a4e0 <_strtod_l+0xbf4>)
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d103      	bne.n	800a346 <_strtod_l+0xa5a>
 800a33e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a340:	3301      	adds	r3, #1
 800a342:	d100      	bne.n	800a346 <_strtod_l+0xa5a>
 800a344:	e535      	b.n	8009db2 <_strtod_l+0x4c6>
 800a346:	2601      	movs	r6, #1
 800a348:	4f65      	ldr	r7, [pc, #404]	; (800a4e0 <_strtod_l+0xbf4>)
 800a34a:	4276      	negs	r6, r6
 800a34c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a34e:	9804      	ldr	r0, [sp, #16]
 800a350:	f001 f8b8 	bl	800b4c4 <_Bfree>
 800a354:	9908      	ldr	r1, [sp, #32]
 800a356:	9804      	ldr	r0, [sp, #16]
 800a358:	f001 f8b4 	bl	800b4c4 <_Bfree>
 800a35c:	9906      	ldr	r1, [sp, #24]
 800a35e:	9804      	ldr	r0, [sp, #16]
 800a360:	f001 f8b0 	bl	800b4c4 <_Bfree>
 800a364:	9905      	ldr	r1, [sp, #20]
 800a366:	9804      	ldr	r0, [sp, #16]
 800a368:	f001 f8ac 	bl	800b4c4 <_Bfree>
 800a36c:	e60b      	b.n	8009f86 <_strtod_l+0x69a>
 800a36e:	2e01      	cmp	r6, #1
 800a370:	d103      	bne.n	800a37a <_strtod_l+0xa8e>
 800a372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d100      	bne.n	800a37a <_strtod_l+0xa8e>
 800a378:	e58e      	b.n	8009e98 <_strtod_l+0x5ac>
 800a37a:	2300      	movs	r3, #0
 800a37c:	4c59      	ldr	r4, [pc, #356]	; (800a4e4 <_strtod_l+0xbf8>)
 800a37e:	930a      	str	r3, [sp, #40]	; 0x28
 800a380:	940b      	str	r4, [sp, #44]	; 0x2c
 800a382:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a384:	e01c      	b.n	800a3c0 <_strtod_l+0xad4>
 800a386:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a388:	4d50      	ldr	r5, [pc, #320]	; (800a4cc <_strtod_l+0xbe0>)
 800a38a:	e7ab      	b.n	800a2e4 <_strtod_l+0x9f8>
 800a38c:	2200      	movs	r2, #0
 800a38e:	0020      	movs	r0, r4
 800a390:	0029      	movs	r1, r5
 800a392:	4b4e      	ldr	r3, [pc, #312]	; (800a4cc <_strtod_l+0xbe0>)
 800a394:	f7f7 f96a 	bl	800166c <__aeabi_dmul>
 800a398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39a:	0004      	movs	r4, r0
 800a39c:	000b      	movs	r3, r1
 800a39e:	000d      	movs	r5, r1
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	d104      	bne.n	800a3ae <_strtod_l+0xac2>
 800a3a4:	2280      	movs	r2, #128	; 0x80
 800a3a6:	0612      	lsls	r2, r2, #24
 800a3a8:	900a      	str	r0, [sp, #40]	; 0x28
 800a3aa:	188b      	adds	r3, r1, r2
 800a3ac:	e79e      	b.n	800a2ec <_strtod_l+0xa00>
 800a3ae:	0002      	movs	r2, r0
 800a3b0:	920a      	str	r2, [sp, #40]	; 0x28
 800a3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b4:	e79b      	b.n	800a2ee <_strtod_l+0xa02>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4c43      	ldr	r4, [pc, #268]	; (800a4c8 <_strtod_l+0xbdc>)
 800a3ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a3bc:	940b      	str	r4, [sp, #44]	; 0x2c
 800a3be:	2400      	movs	r4, #0
 800a3c0:	4d41      	ldr	r5, [pc, #260]	; (800a4c8 <_strtod_l+0xbdc>)
 800a3c2:	e794      	b.n	800a2ee <_strtod_l+0xa02>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4c47      	ldr	r4, [pc, #284]	; (800a4e4 <_strtod_l+0xbf8>)
 800a3c8:	e7f7      	b.n	800a3ba <_strtod_l+0xace>
 800a3ca:	23d4      	movs	r3, #212	; 0xd4
 800a3cc:	049b      	lsls	r3, r3, #18
 800a3ce:	18cf      	adds	r7, r1, r3
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	970e      	str	r7, [sp, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1b9      	bne.n	800a34c <_strtod_l+0xa60>
 800a3d8:	4b3d      	ldr	r3, [pc, #244]	; (800a4d0 <_strtod_l+0xbe4>)
 800a3da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3dc:	403b      	ands	r3, r7
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d1b4      	bne.n	800a34c <_strtod_l+0xa60>
 800a3e2:	0020      	movs	r0, r4
 800a3e4:	0029      	movs	r1, r5
 800a3e6:	f7f6 f8c9 	bl	800057c <__aeabi_d2lz>
 800a3ea:	f7f6 f903 	bl	80005f4 <__aeabi_l2d>
 800a3ee:	0002      	movs	r2, r0
 800a3f0:	000b      	movs	r3, r1
 800a3f2:	0020      	movs	r0, r4
 800a3f4:	0029      	movs	r1, r5
 800a3f6:	f7f7 fbfb 	bl	8001bf0 <__aeabi_dsub>
 800a3fa:	033b      	lsls	r3, r7, #12
 800a3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3fe:	0b1b      	lsrs	r3, r3, #12
 800a400:	4333      	orrs	r3, r6
 800a402:	4313      	orrs	r3, r2
 800a404:	0004      	movs	r4, r0
 800a406:	000d      	movs	r5, r1
 800a408:	4a37      	ldr	r2, [pc, #220]	; (800a4e8 <_strtod_l+0xbfc>)
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d054      	beq.n	800a4b8 <_strtod_l+0xbcc>
 800a40e:	4b37      	ldr	r3, [pc, #220]	; (800a4ec <_strtod_l+0xc00>)
 800a410:	f7f6 f820 	bl	8000454 <__aeabi_dcmplt>
 800a414:	2800      	cmp	r0, #0
 800a416:	d000      	beq.n	800a41a <_strtod_l+0xb2e>
 800a418:	e4d4      	b.n	8009dc4 <_strtod_l+0x4d8>
 800a41a:	0020      	movs	r0, r4
 800a41c:	0029      	movs	r1, r5
 800a41e:	4a34      	ldr	r2, [pc, #208]	; (800a4f0 <_strtod_l+0xc04>)
 800a420:	4b2a      	ldr	r3, [pc, #168]	; (800a4cc <_strtod_l+0xbe0>)
 800a422:	f7f6 f82b 	bl	800047c <__aeabi_dcmpgt>
 800a426:	2800      	cmp	r0, #0
 800a428:	d090      	beq.n	800a34c <_strtod_l+0xa60>
 800a42a:	e4cb      	b.n	8009dc4 <_strtod_l+0x4d8>
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d02b      	beq.n	800a48a <_strtod_l+0xb9e>
 800a432:	23d4      	movs	r3, #212	; 0xd4
 800a434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a436:	04db      	lsls	r3, r3, #19
 800a438:	429a      	cmp	r2, r3
 800a43a:	d826      	bhi.n	800a48a <_strtod_l+0xb9e>
 800a43c:	0020      	movs	r0, r4
 800a43e:	0029      	movs	r1, r5
 800a440:	4a2c      	ldr	r2, [pc, #176]	; (800a4f4 <_strtod_l+0xc08>)
 800a442:	4b2d      	ldr	r3, [pc, #180]	; (800a4f8 <_strtod_l+0xc0c>)
 800a444:	f7f6 f810 	bl	8000468 <__aeabi_dcmple>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d017      	beq.n	800a47c <_strtod_l+0xb90>
 800a44c:	0020      	movs	r0, r4
 800a44e:	0029      	movs	r1, r5
 800a450:	f7f6 f876 	bl	8000540 <__aeabi_d2uiz>
 800a454:	2800      	cmp	r0, #0
 800a456:	d100      	bne.n	800a45a <_strtod_l+0xb6e>
 800a458:	3001      	adds	r0, #1
 800a45a:	f7f7 ffcf 	bl	80023fc <__aeabi_ui2d>
 800a45e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a460:	0004      	movs	r4, r0
 800a462:	000b      	movs	r3, r1
 800a464:	000d      	movs	r5, r1
 800a466:	2a00      	cmp	r2, #0
 800a468:	d122      	bne.n	800a4b0 <_strtod_l+0xbc4>
 800a46a:	2280      	movs	r2, #128	; 0x80
 800a46c:	0612      	lsls	r2, r2, #24
 800a46e:	188b      	adds	r3, r1, r2
 800a470:	9016      	str	r0, [sp, #88]	; 0x58
 800a472:	9317      	str	r3, [sp, #92]	; 0x5c
 800a474:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a478:	9212      	str	r2, [sp, #72]	; 0x48
 800a47a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a47c:	22d6      	movs	r2, #214	; 0xd6
 800a47e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a480:	04d2      	lsls	r2, r2, #19
 800a482:	189b      	adds	r3, r3, r2
 800a484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	9313      	str	r3, [sp, #76]	; 0x4c
 800a48a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a48c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a48e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a490:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a492:	f001 fb25 	bl	800bae0 <__ulp>
 800a496:	0002      	movs	r2, r0
 800a498:	000b      	movs	r3, r1
 800a49a:	0030      	movs	r0, r6
 800a49c:	0039      	movs	r1, r7
 800a49e:	f7f7 f8e5 	bl	800166c <__aeabi_dmul>
 800a4a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a6:	f7f6 f987 	bl	80007b8 <__aeabi_dadd>
 800a4aa:	0006      	movs	r6, r0
 800a4ac:	000f      	movs	r7, r1
 800a4ae:	e78f      	b.n	800a3d0 <_strtod_l+0xae4>
 800a4b0:	0002      	movs	r2, r0
 800a4b2:	9216      	str	r2, [sp, #88]	; 0x58
 800a4b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a4b6:	e7dd      	b.n	800a474 <_strtod_l+0xb88>
 800a4b8:	4b10      	ldr	r3, [pc, #64]	; (800a4fc <_strtod_l+0xc10>)
 800a4ba:	f7f5 ffcb 	bl	8000454 <__aeabi_dcmplt>
 800a4be:	e7b2      	b.n	800a426 <_strtod_l+0xb3a>
 800a4c0:	fff00000 	.word	0xfff00000
 800a4c4:	000fffff 	.word	0x000fffff
 800a4c8:	3ff00000 	.word	0x3ff00000
 800a4cc:	3fe00000 	.word	0x3fe00000
 800a4d0:	7ff00000 	.word	0x7ff00000
 800a4d4:	7fe00000 	.word	0x7fe00000
 800a4d8:	fcb00000 	.word	0xfcb00000
 800a4dc:	7c9fffff 	.word	0x7c9fffff
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	bff00000 	.word	0xbff00000
 800a4e8:	94a03595 	.word	0x94a03595
 800a4ec:	3fdfffff 	.word	0x3fdfffff
 800a4f0:	35afe535 	.word	0x35afe535
 800a4f4:	ffc00000 	.word	0xffc00000
 800a4f8:	41dfffff 	.word	0x41dfffff
 800a4fc:	3fcfffff 	.word	0x3fcfffff

0800a500 <_strtod_r>:
 800a500:	b510      	push	{r4, lr}
 800a502:	4b02      	ldr	r3, [pc, #8]	; (800a50c <_strtod_r+0xc>)
 800a504:	f7ff f9f2 	bl	80098ec <_strtod_l>
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	20000450 	.word	0x20000450

0800a510 <strtod>:
 800a510:	b510      	push	{r4, lr}
 800a512:	4c04      	ldr	r4, [pc, #16]	; (800a524 <strtod+0x14>)
 800a514:	000a      	movs	r2, r1
 800a516:	0001      	movs	r1, r0
 800a518:	4b03      	ldr	r3, [pc, #12]	; (800a528 <strtod+0x18>)
 800a51a:	6820      	ldr	r0, [r4, #0]
 800a51c:	f7ff f9e6 	bl	80098ec <_strtod_l>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	46c0      	nop			; (mov r8, r8)
 800a524:	200006e0 	.word	0x200006e0
 800a528:	20000450 	.word	0x20000450

0800a52c <_strtol_l.constprop.0>:
 800a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a52e:	b087      	sub	sp, #28
 800a530:	001e      	movs	r6, r3
 800a532:	9005      	str	r0, [sp, #20]
 800a534:	9101      	str	r1, [sp, #4]
 800a536:	9202      	str	r2, [sp, #8]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d048      	beq.n	800a5ce <_strtol_l.constprop.0+0xa2>
 800a53c:	000b      	movs	r3, r1
 800a53e:	2e24      	cmp	r6, #36	; 0x24
 800a540:	d845      	bhi.n	800a5ce <_strtol_l.constprop.0+0xa2>
 800a542:	4a3b      	ldr	r2, [pc, #236]	; (800a630 <_strtol_l.constprop.0+0x104>)
 800a544:	2108      	movs	r1, #8
 800a546:	4694      	mov	ip, r2
 800a548:	001a      	movs	r2, r3
 800a54a:	4660      	mov	r0, ip
 800a54c:	7814      	ldrb	r4, [r2, #0]
 800a54e:	3301      	adds	r3, #1
 800a550:	5d00      	ldrb	r0, [r0, r4]
 800a552:	001d      	movs	r5, r3
 800a554:	0007      	movs	r7, r0
 800a556:	400f      	ands	r7, r1
 800a558:	4208      	tst	r0, r1
 800a55a:	d1f5      	bne.n	800a548 <_strtol_l.constprop.0+0x1c>
 800a55c:	2c2d      	cmp	r4, #45	; 0x2d
 800a55e:	d13d      	bne.n	800a5dc <_strtol_l.constprop.0+0xb0>
 800a560:	2701      	movs	r7, #1
 800a562:	781c      	ldrb	r4, [r3, #0]
 800a564:	1c95      	adds	r5, r2, #2
 800a566:	2e00      	cmp	r6, #0
 800a568:	d05e      	beq.n	800a628 <_strtol_l.constprop.0+0xfc>
 800a56a:	2e10      	cmp	r6, #16
 800a56c:	d109      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a56e:	2c30      	cmp	r4, #48	; 0x30
 800a570:	d107      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a572:	2220      	movs	r2, #32
 800a574:	782b      	ldrb	r3, [r5, #0]
 800a576:	4393      	bics	r3, r2
 800a578:	2b58      	cmp	r3, #88	; 0x58
 800a57a:	d150      	bne.n	800a61e <_strtol_l.constprop.0+0xf2>
 800a57c:	2610      	movs	r6, #16
 800a57e:	786c      	ldrb	r4, [r5, #1]
 800a580:	3502      	adds	r5, #2
 800a582:	4b2c      	ldr	r3, [pc, #176]	; (800a634 <_strtol_l.constprop.0+0x108>)
 800a584:	0031      	movs	r1, r6
 800a586:	18fb      	adds	r3, r7, r3
 800a588:	0018      	movs	r0, r3
 800a58a:	9303      	str	r3, [sp, #12]
 800a58c:	f7f5 fe5c 	bl	8000248 <__aeabi_uidivmod>
 800a590:	2200      	movs	r2, #0
 800a592:	9104      	str	r1, [sp, #16]
 800a594:	2101      	movs	r1, #1
 800a596:	4684      	mov	ip, r0
 800a598:	0010      	movs	r0, r2
 800a59a:	4249      	negs	r1, r1
 800a59c:	0023      	movs	r3, r4
 800a59e:	3b30      	subs	r3, #48	; 0x30
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d903      	bls.n	800a5ac <_strtol_l.constprop.0+0x80>
 800a5a4:	3b11      	subs	r3, #17
 800a5a6:	2b19      	cmp	r3, #25
 800a5a8:	d81d      	bhi.n	800a5e6 <_strtol_l.constprop.0+0xba>
 800a5aa:	330a      	adds	r3, #10
 800a5ac:	429e      	cmp	r6, r3
 800a5ae:	dd1e      	ble.n	800a5ee <_strtol_l.constprop.0+0xc2>
 800a5b0:	1c54      	adds	r4, r2, #1
 800a5b2:	d009      	beq.n	800a5c8 <_strtol_l.constprop.0+0x9c>
 800a5b4:	000a      	movs	r2, r1
 800a5b6:	4584      	cmp	ip, r0
 800a5b8:	d306      	bcc.n	800a5c8 <_strtol_l.constprop.0+0x9c>
 800a5ba:	d102      	bne.n	800a5c2 <_strtol_l.constprop.0+0x96>
 800a5bc:	9c04      	ldr	r4, [sp, #16]
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	db02      	blt.n	800a5c8 <_strtol_l.constprop.0+0x9c>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	4370      	muls	r0, r6
 800a5c6:	1818      	adds	r0, r3, r0
 800a5c8:	782c      	ldrb	r4, [r5, #0]
 800a5ca:	3501      	adds	r5, #1
 800a5cc:	e7e6      	b.n	800a59c <_strtol_l.constprop.0+0x70>
 800a5ce:	f000 fa7d 	bl	800aacc <__errno>
 800a5d2:	2316      	movs	r3, #22
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	b007      	add	sp, #28
 800a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5dc:	2c2b      	cmp	r4, #43	; 0x2b
 800a5de:	d1c2      	bne.n	800a566 <_strtol_l.constprop.0+0x3a>
 800a5e0:	781c      	ldrb	r4, [r3, #0]
 800a5e2:	1c95      	adds	r5, r2, #2
 800a5e4:	e7bf      	b.n	800a566 <_strtol_l.constprop.0+0x3a>
 800a5e6:	0023      	movs	r3, r4
 800a5e8:	3b61      	subs	r3, #97	; 0x61
 800a5ea:	2b19      	cmp	r3, #25
 800a5ec:	d9dd      	bls.n	800a5aa <_strtol_l.constprop.0+0x7e>
 800a5ee:	1c53      	adds	r3, r2, #1
 800a5f0:	d109      	bne.n	800a606 <_strtol_l.constprop.0+0xda>
 800a5f2:	2322      	movs	r3, #34	; 0x22
 800a5f4:	9a05      	ldr	r2, [sp, #20]
 800a5f6:	9803      	ldr	r0, [sp, #12]
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0eb      	beq.n	800a5d8 <_strtol_l.constprop.0+0xac>
 800a600:	1e6b      	subs	r3, r5, #1
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	e007      	b.n	800a616 <_strtol_l.constprop.0+0xea>
 800a606:	2f00      	cmp	r7, #0
 800a608:	d000      	beq.n	800a60c <_strtol_l.constprop.0+0xe0>
 800a60a:	4240      	negs	r0, r0
 800a60c:	9b02      	ldr	r3, [sp, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0e2      	beq.n	800a5d8 <_strtol_l.constprop.0+0xac>
 800a612:	2a00      	cmp	r2, #0
 800a614:	d1f4      	bne.n	800a600 <_strtol_l.constprop.0+0xd4>
 800a616:	9b02      	ldr	r3, [sp, #8]
 800a618:	9a01      	ldr	r2, [sp, #4]
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	e7dc      	b.n	800a5d8 <_strtol_l.constprop.0+0xac>
 800a61e:	2430      	movs	r4, #48	; 0x30
 800a620:	2e00      	cmp	r6, #0
 800a622:	d1ae      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a624:	3608      	adds	r6, #8
 800a626:	e7ac      	b.n	800a582 <_strtol_l.constprop.0+0x56>
 800a628:	2c30      	cmp	r4, #48	; 0x30
 800a62a:	d0a2      	beq.n	800a572 <_strtol_l.constprop.0+0x46>
 800a62c:	260a      	movs	r6, #10
 800a62e:	e7a8      	b.n	800a582 <_strtol_l.constprop.0+0x56>
 800a630:	08012dd9 	.word	0x08012dd9
 800a634:	7fffffff 	.word	0x7fffffff

0800a638 <_strtol_r>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	f7ff ff77 	bl	800a52c <_strtol_l.constprop.0>
 800a63e:	bd10      	pop	{r4, pc}

0800a640 <strtol>:
 800a640:	b510      	push	{r4, lr}
 800a642:	4c04      	ldr	r4, [pc, #16]	; (800a654 <strtol+0x14>)
 800a644:	0013      	movs	r3, r2
 800a646:	000a      	movs	r2, r1
 800a648:	0001      	movs	r1, r0
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	f7ff ff6e 	bl	800a52c <_strtol_l.constprop.0>
 800a650:	bd10      	pop	{r4, pc}
 800a652:	46c0      	nop			; (mov r8, r8)
 800a654:	200006e0 	.word	0x200006e0

0800a658 <std>:
 800a658:	2300      	movs	r3, #0
 800a65a:	b510      	push	{r4, lr}
 800a65c:	0004      	movs	r4, r0
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	6043      	str	r3, [r0, #4]
 800a662:	6083      	str	r3, [r0, #8]
 800a664:	8181      	strh	r1, [r0, #12]
 800a666:	6643      	str	r3, [r0, #100]	; 0x64
 800a668:	81c2      	strh	r2, [r0, #14]
 800a66a:	6103      	str	r3, [r0, #16]
 800a66c:	6143      	str	r3, [r0, #20]
 800a66e:	6183      	str	r3, [r0, #24]
 800a670:	0019      	movs	r1, r3
 800a672:	2208      	movs	r2, #8
 800a674:	305c      	adds	r0, #92	; 0x5c
 800a676:	f000 f97d 	bl	800a974 <memset>
 800a67a:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <std+0x50>)
 800a67c:	61e4      	str	r4, [r4, #28]
 800a67e:	6223      	str	r3, [r4, #32]
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <std+0x54>)
 800a682:	6263      	str	r3, [r4, #36]	; 0x24
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <std+0x58>)
 800a686:	62a3      	str	r3, [r4, #40]	; 0x28
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <std+0x5c>)
 800a68a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a68c:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <std+0x60>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	d005      	beq.n	800a69e <std+0x46>
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <std+0x64>)
 800a694:	429c      	cmp	r4, r3
 800a696:	d002      	beq.n	800a69e <std+0x46>
 800a698:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <std+0x68>)
 800a69a:	429c      	cmp	r4, r3
 800a69c:	d103      	bne.n	800a6a6 <std+0x4e>
 800a69e:	0020      	movs	r0, r4
 800a6a0:	3058      	adds	r0, #88	; 0x58
 800a6a2:	f000 fa3d 	bl	800ab20 <__retarget_lock_init_recursive>
 800a6a6:	bd10      	pop	{r4, pc}
 800a6a8:	0800a8d9 	.word	0x0800a8d9
 800a6ac:	0800a905 	.word	0x0800a905
 800a6b0:	0800a93d 	.word	0x0800a93d
 800a6b4:	0800a969 	.word	0x0800a969
 800a6b8:	20000d98 	.word	0x20000d98
 800a6bc:	20000e00 	.word	0x20000e00
 800a6c0:	20000e68 	.word	0x20000e68

0800a6c4 <stdio_exit_handler>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	4a03      	ldr	r2, [pc, #12]	; (800a6d4 <stdio_exit_handler+0x10>)
 800a6c8:	4903      	ldr	r1, [pc, #12]	; (800a6d8 <stdio_exit_handler+0x14>)
 800a6ca:	4804      	ldr	r0, [pc, #16]	; (800a6dc <stdio_exit_handler+0x18>)
 800a6cc:	f000 f86c 	bl	800a7a8 <_fwalk_sglue>
 800a6d0:	bd10      	pop	{r4, pc}
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	20000444 	.word	0x20000444
 800a6d8:	0800e621 	.word	0x0800e621
 800a6dc:	200005c0 	.word	0x200005c0

0800a6e0 <cleanup_stdio>:
 800a6e0:	6841      	ldr	r1, [r0, #4]
 800a6e2:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <cleanup_stdio+0x30>)
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	0004      	movs	r4, r0
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	d001      	beq.n	800a6f0 <cleanup_stdio+0x10>
 800a6ec:	f003 ff98 	bl	800e620 <_fclose_r>
 800a6f0:	68a1      	ldr	r1, [r4, #8]
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <cleanup_stdio+0x34>)
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d002      	beq.n	800a6fe <cleanup_stdio+0x1e>
 800a6f8:	0020      	movs	r0, r4
 800a6fa:	f003 ff91 	bl	800e620 <_fclose_r>
 800a6fe:	68e1      	ldr	r1, [r4, #12]
 800a700:	4b05      	ldr	r3, [pc, #20]	; (800a718 <cleanup_stdio+0x38>)
 800a702:	4299      	cmp	r1, r3
 800a704:	d002      	beq.n	800a70c <cleanup_stdio+0x2c>
 800a706:	0020      	movs	r0, r4
 800a708:	f003 ff8a 	bl	800e620 <_fclose_r>
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	20000d98 	.word	0x20000d98
 800a714:	20000e00 	.word	0x20000e00
 800a718:	20000e68 	.word	0x20000e68

0800a71c <global_stdio_init.part.0>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <global_stdio_init.part.0+0x28>)
 800a720:	4a09      	ldr	r2, [pc, #36]	; (800a748 <global_stdio_init.part.0+0x2c>)
 800a722:	2104      	movs	r1, #4
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	4809      	ldr	r0, [pc, #36]	; (800a74c <global_stdio_init.part.0+0x30>)
 800a728:	2200      	movs	r2, #0
 800a72a:	f7ff ff95 	bl	800a658 <std>
 800a72e:	2201      	movs	r2, #1
 800a730:	2109      	movs	r1, #9
 800a732:	4807      	ldr	r0, [pc, #28]	; (800a750 <global_stdio_init.part.0+0x34>)
 800a734:	f7ff ff90 	bl	800a658 <std>
 800a738:	2202      	movs	r2, #2
 800a73a:	2112      	movs	r1, #18
 800a73c:	4805      	ldr	r0, [pc, #20]	; (800a754 <global_stdio_init.part.0+0x38>)
 800a73e:	f7ff ff8b 	bl	800a658 <std>
 800a742:	bd10      	pop	{r4, pc}
 800a744:	20000ed0 	.word	0x20000ed0
 800a748:	0800a6c5 	.word	0x0800a6c5
 800a74c:	20000d98 	.word	0x20000d98
 800a750:	20000e00 	.word	0x20000e00
 800a754:	20000e68 	.word	0x20000e68

0800a758 <__sfp_lock_acquire>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4802      	ldr	r0, [pc, #8]	; (800a764 <__sfp_lock_acquire+0xc>)
 800a75c:	f000 f9e2 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800a760:	bd10      	pop	{r4, pc}
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	20000eda 	.word	0x20000eda

0800a768 <__sfp_lock_release>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	4802      	ldr	r0, [pc, #8]	; (800a774 <__sfp_lock_release+0xc>)
 800a76c:	f000 f9db 	bl	800ab26 <__retarget_lock_release_recursive>
 800a770:	bd10      	pop	{r4, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	20000eda 	.word	0x20000eda

0800a778 <__sinit>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	0004      	movs	r4, r0
 800a77c:	f7ff ffec 	bl	800a758 <__sfp_lock_acquire>
 800a780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <__sinit+0x14>
 800a786:	f7ff ffef 	bl	800a768 <__sfp_lock_release>
 800a78a:	bd10      	pop	{r4, pc}
 800a78c:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <__sinit+0x28>)
 800a78e:	6363      	str	r3, [r4, #52]	; 0x34
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <__sinit+0x2c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1f6      	bne.n	800a786 <__sinit+0xe>
 800a798:	f7ff ffc0 	bl	800a71c <global_stdio_init.part.0>
 800a79c:	e7f3      	b.n	800a786 <__sinit+0xe>
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	0800a6e1 	.word	0x0800a6e1
 800a7a4:	20000ed0 	.word	0x20000ed0

0800a7a8 <_fwalk_sglue>:
 800a7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7aa:	0014      	movs	r4, r2
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	9000      	str	r0, [sp, #0]
 800a7b0:	9101      	str	r1, [sp, #4]
 800a7b2:	68a5      	ldr	r5, [r4, #8]
 800a7b4:	6867      	ldr	r7, [r4, #4]
 800a7b6:	3f01      	subs	r7, #1
 800a7b8:	d504      	bpl.n	800a7c4 <_fwalk_sglue+0x1c>
 800a7ba:	6824      	ldr	r4, [r4, #0]
 800a7bc:	2c00      	cmp	r4, #0
 800a7be:	d1f8      	bne.n	800a7b2 <_fwalk_sglue+0xa>
 800a7c0:	0030      	movs	r0, r6
 800a7c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d908      	bls.n	800a7dc <_fwalk_sglue+0x34>
 800a7ca:	220e      	movs	r2, #14
 800a7cc:	5eab      	ldrsh	r3, [r5, r2]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	d004      	beq.n	800a7dc <_fwalk_sglue+0x34>
 800a7d2:	0029      	movs	r1, r5
 800a7d4:	9800      	ldr	r0, [sp, #0]
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	4306      	orrs	r6, r0
 800a7dc:	3568      	adds	r5, #104	; 0x68
 800a7de:	e7ea      	b.n	800a7b6 <_fwalk_sglue+0xe>

0800a7e0 <snprintf>:
 800a7e0:	b40c      	push	{r2, r3}
 800a7e2:	b530      	push	{r4, r5, lr}
 800a7e4:	4b17      	ldr	r3, [pc, #92]	; (800a844 <snprintf+0x64>)
 800a7e6:	000c      	movs	r4, r1
 800a7e8:	681d      	ldr	r5, [r3, #0]
 800a7ea:	b09d      	sub	sp, #116	; 0x74
 800a7ec:	2900      	cmp	r1, #0
 800a7ee:	da08      	bge.n	800a802 <snprintf+0x22>
 800a7f0:	238b      	movs	r3, #139	; 0x8b
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	602b      	str	r3, [r5, #0]
 800a7f6:	4240      	negs	r0, r0
 800a7f8:	b01d      	add	sp, #116	; 0x74
 800a7fa:	bc30      	pop	{r4, r5}
 800a7fc:	bc08      	pop	{r3}
 800a7fe:	b002      	add	sp, #8
 800a800:	4718      	bx	r3
 800a802:	2382      	movs	r3, #130	; 0x82
 800a804:	466a      	mov	r2, sp
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	8293      	strh	r3, [r2, #20]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9002      	str	r0, [sp, #8]
 800a80e:	9006      	str	r0, [sp, #24]
 800a810:	4299      	cmp	r1, r3
 800a812:	d000      	beq.n	800a816 <snprintf+0x36>
 800a814:	1e4b      	subs	r3, r1, #1
 800a816:	9304      	str	r3, [sp, #16]
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	2301      	movs	r3, #1
 800a81c:	466a      	mov	r2, sp
 800a81e:	425b      	negs	r3, r3
 800a820:	82d3      	strh	r3, [r2, #22]
 800a822:	0028      	movs	r0, r5
 800a824:	ab21      	add	r3, sp, #132	; 0x84
 800a826:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a828:	a902      	add	r1, sp, #8
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	f001 fa9a 	bl	800bd64 <_svfprintf_r>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	da01      	bge.n	800a838 <snprintf+0x58>
 800a834:	238b      	movs	r3, #139	; 0x8b
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	2c00      	cmp	r4, #0
 800a83a:	d0dd      	beq.n	800a7f8 <snprintf+0x18>
 800a83c:	2200      	movs	r2, #0
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	e7d9      	b.n	800a7f8 <snprintf+0x18>
 800a844:	200006e0 	.word	0x200006e0

0800a848 <sprintf>:
 800a848:	b40e      	push	{r1, r2, r3}
 800a84a:	b500      	push	{lr}
 800a84c:	490b      	ldr	r1, [pc, #44]	; (800a87c <sprintf+0x34>)
 800a84e:	b09c      	sub	sp, #112	; 0x70
 800a850:	ab1d      	add	r3, sp, #116	; 0x74
 800a852:	9002      	str	r0, [sp, #8]
 800a854:	9006      	str	r0, [sp, #24]
 800a856:	9107      	str	r1, [sp, #28]
 800a858:	9104      	str	r1, [sp, #16]
 800a85a:	4809      	ldr	r0, [pc, #36]	; (800a880 <sprintf+0x38>)
 800a85c:	4909      	ldr	r1, [pc, #36]	; (800a884 <sprintf+0x3c>)
 800a85e:	cb04      	ldmia	r3!, {r2}
 800a860:	9105      	str	r1, [sp, #20]
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	a902      	add	r1, sp, #8
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	f001 fa7c 	bl	800bd64 <_svfprintf_r>
 800a86c:	2200      	movs	r2, #0
 800a86e:	9b02      	ldr	r3, [sp, #8]
 800a870:	701a      	strb	r2, [r3, #0]
 800a872:	b01c      	add	sp, #112	; 0x70
 800a874:	bc08      	pop	{r3}
 800a876:	b003      	add	sp, #12
 800a878:	4718      	bx	r3
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	7fffffff 	.word	0x7fffffff
 800a880:	200006e0 	.word	0x200006e0
 800a884:	ffff0208 	.word	0xffff0208

0800a888 <sscanf>:
 800a888:	b40e      	push	{r1, r2, r3}
 800a88a:	b530      	push	{r4, r5, lr}
 800a88c:	2381      	movs	r3, #129	; 0x81
 800a88e:	b09c      	sub	sp, #112	; 0x70
 800a890:	466a      	mov	r2, sp
 800a892:	ac1f      	add	r4, sp, #124	; 0x7c
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	cc20      	ldmia	r4!, {r5}
 800a898:	8293      	strh	r3, [r2, #20]
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	9006      	str	r0, [sp, #24]
 800a89e:	f7f5 fc31 	bl	8000104 <strlen>
 800a8a2:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <sscanf+0x48>)
 800a8a4:	466a      	mov	r2, sp
 800a8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9003      	str	r0, [sp, #12]
 800a8ac:	9007      	str	r0, [sp, #28]
 800a8ae:	4809      	ldr	r0, [pc, #36]	; (800a8d4 <sscanf+0x4c>)
 800a8b0:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	82d3      	strh	r3, [r2, #22]
 800a8b8:	a902      	add	r1, sp, #8
 800a8ba:	0023      	movs	r3, r4
 800a8bc:	002a      	movs	r2, r5
 800a8be:	6800      	ldr	r0, [r0, #0]
 800a8c0:	9401      	str	r4, [sp, #4]
 800a8c2:	f002 fc91 	bl	800d1e8 <__ssvfscanf_r>
 800a8c6:	b01c      	add	sp, #112	; 0x70
 800a8c8:	bc30      	pop	{r4, r5}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	b003      	add	sp, #12
 800a8ce:	4718      	bx	r3
 800a8d0:	0800a901 	.word	0x0800a901
 800a8d4:	200006e0 	.word	0x200006e0

0800a8d8 <__sread>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	000c      	movs	r4, r1
 800a8dc:	250e      	movs	r5, #14
 800a8de:	5f49      	ldrsh	r1, [r1, r5]
 800a8e0:	f000 f8ba 	bl	800aa58 <_read_r>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	db03      	blt.n	800a8f0 <__sread+0x18>
 800a8e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8ea:	181b      	adds	r3, r3, r0
 800a8ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	4a02      	ldr	r2, [pc, #8]	; (800a8fc <__sread+0x24>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	e7f9      	b.n	800a8ee <__sread+0x16>
 800a8fa:	46c0      	nop			; (mov r8, r8)
 800a8fc:	ffffefff 	.word	0xffffefff

0800a900 <__seofread>:
 800a900:	2000      	movs	r0, #0
 800a902:	4770      	bx	lr

0800a904 <__swrite>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	001f      	movs	r7, r3
 800a908:	898b      	ldrh	r3, [r1, #12]
 800a90a:	0005      	movs	r5, r0
 800a90c:	000c      	movs	r4, r1
 800a90e:	0016      	movs	r6, r2
 800a910:	05db      	lsls	r3, r3, #23
 800a912:	d505      	bpl.n	800a920 <__swrite+0x1c>
 800a914:	230e      	movs	r3, #14
 800a916:	5ec9      	ldrsh	r1, [r1, r3]
 800a918:	2200      	movs	r2, #0
 800a91a:	2302      	movs	r3, #2
 800a91c:	f000 f888 	bl	800aa30 <_lseek_r>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	4a05      	ldr	r2, [pc, #20]	; (800a938 <__swrite+0x34>)
 800a924:	0028      	movs	r0, r5
 800a926:	4013      	ands	r3, r2
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	0032      	movs	r2, r6
 800a92c:	230e      	movs	r3, #14
 800a92e:	5ee1      	ldrsh	r1, [r4, r3]
 800a930:	003b      	movs	r3, r7
 800a932:	f000 f8b7 	bl	800aaa4 <_write_r>
 800a936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a938:	ffffefff 	.word	0xffffefff

0800a93c <__sseek>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	000c      	movs	r4, r1
 800a940:	250e      	movs	r5, #14
 800a942:	5f49      	ldrsh	r1, [r1, r5]
 800a944:	f000 f874 	bl	800aa30 <_lseek_r>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	1c42      	adds	r2, r0, #1
 800a94c:	d103      	bne.n	800a956 <__sseek+0x1a>
 800a94e:	4a05      	ldr	r2, [pc, #20]	; (800a964 <__sseek+0x28>)
 800a950:	4013      	ands	r3, r2
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	bd70      	pop	{r4, r5, r6, pc}
 800a956:	2280      	movs	r2, #128	; 0x80
 800a958:	0152      	lsls	r2, r2, #5
 800a95a:	4313      	orrs	r3, r2
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	6520      	str	r0, [r4, #80]	; 0x50
 800a960:	e7f8      	b.n	800a954 <__sseek+0x18>
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	ffffefff 	.word	0xffffefff

0800a968 <__sclose>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	230e      	movs	r3, #14
 800a96c:	5ec9      	ldrsh	r1, [r1, r3]
 800a96e:	f000 f84d 	bl	800aa0c <_close_r>
 800a972:	bd10      	pop	{r4, pc}

0800a974 <memset>:
 800a974:	0003      	movs	r3, r0
 800a976:	1882      	adds	r2, r0, r2
 800a978:	4293      	cmp	r3, r2
 800a97a:	d100      	bne.n	800a97e <memset+0xa>
 800a97c:	4770      	bx	lr
 800a97e:	7019      	strb	r1, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	e7f9      	b.n	800a978 <memset+0x4>

0800a984 <strncmp>:
 800a984:	b530      	push	{r4, r5, lr}
 800a986:	0005      	movs	r5, r0
 800a988:	1e10      	subs	r0, r2, #0
 800a98a:	d00b      	beq.n	800a9a4 <strncmp+0x20>
 800a98c:	2400      	movs	r4, #0
 800a98e:	3a01      	subs	r2, #1
 800a990:	5d2b      	ldrb	r3, [r5, r4]
 800a992:	5d08      	ldrb	r0, [r1, r4]
 800a994:	4283      	cmp	r3, r0
 800a996:	d104      	bne.n	800a9a2 <strncmp+0x1e>
 800a998:	42a2      	cmp	r2, r4
 800a99a:	d002      	beq.n	800a9a2 <strncmp+0x1e>
 800a99c:	3401      	adds	r4, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f6      	bne.n	800a990 <strncmp+0xc>
 800a9a2:	1a18      	subs	r0, r3, r0
 800a9a4:	bd30      	pop	{r4, r5, pc}

0800a9a6 <strncpy>:
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	b530      	push	{r4, r5, lr}
 800a9aa:	001d      	movs	r5, r3
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	d006      	beq.n	800a9be <strncpy+0x18>
 800a9b0:	780c      	ldrb	r4, [r1, #0]
 800a9b2:	3a01      	subs	r2, #1
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	702c      	strb	r4, [r5, #0]
 800a9b8:	3101      	adds	r1, #1
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	d1f5      	bne.n	800a9aa <strncpy+0x4>
 800a9be:	2100      	movs	r1, #0
 800a9c0:	189a      	adds	r2, r3, r2
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d100      	bne.n	800a9c8 <strncpy+0x22>
 800a9c6:	bd30      	pop	{r4, r5, pc}
 800a9c8:	7019      	strb	r1, [r3, #0]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	e7f9      	b.n	800a9c2 <strncpy+0x1c>

0800a9ce <strstr>:
 800a9ce:	780a      	ldrb	r2, [r1, #0]
 800a9d0:	b530      	push	{r4, r5, lr}
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d10c      	bne.n	800a9f0 <strstr+0x22>
 800a9d6:	bd30      	pop	{r4, r5, pc}
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d108      	bne.n	800a9ee <strstr+0x20>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	5ccc      	ldrb	r4, [r1, r3]
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	d0f8      	beq.n	800a9d6 <strstr+0x8>
 800a9e4:	5cc5      	ldrb	r5, [r0, r3]
 800a9e6:	42a5      	cmp	r5, r4
 800a9e8:	d101      	bne.n	800a9ee <strstr+0x20>
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	e7f7      	b.n	800a9de <strstr+0x10>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	7803      	ldrb	r3, [r0, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f0      	bne.n	800a9d8 <strstr+0xa>
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	e7ed      	b.n	800a9d6 <strstr+0x8>
	...

0800a9fc <__locale_mb_cur_max>:
 800a9fc:	2294      	movs	r2, #148	; 0x94
 800a9fe:	4b02      	ldr	r3, [pc, #8]	; (800aa08 <__locale_mb_cur_max+0xc>)
 800aa00:	0052      	lsls	r2, r2, #1
 800aa02:	5c98      	ldrb	r0, [r3, r2]
 800aa04:	4770      	bx	lr
 800aa06:	46c0      	nop			; (mov r8, r8)
 800aa08:	20000450 	.word	0x20000450

0800aa0c <_close_r>:
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	b570      	push	{r4, r5, r6, lr}
 800aa10:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_close_r+0x20>)
 800aa12:	0004      	movs	r4, r0
 800aa14:	0008      	movs	r0, r1
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	f7f8 fe05 	bl	8003626 <_close>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d103      	bne.n	800aa28 <_close_r+0x1c>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d000      	beq.n	800aa28 <_close_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd70      	pop	{r4, r5, r6, pc}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	20000ed4 	.word	0x20000ed4

0800aa30 <_lseek_r>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	0004      	movs	r4, r0
 800aa34:	0008      	movs	r0, r1
 800aa36:	0011      	movs	r1, r2
 800aa38:	001a      	movs	r2, r3
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4d05      	ldr	r5, [pc, #20]	; (800aa54 <_lseek_r+0x24>)
 800aa3e:	602b      	str	r3, [r5, #0]
 800aa40:	f7f8 fe12 	bl	8003668 <_lseek>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d103      	bne.n	800aa50 <_lseek_r+0x20>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d000      	beq.n	800aa50 <_lseek_r+0x20>
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	46c0      	nop			; (mov r8, r8)
 800aa54:	20000ed4 	.word	0x20000ed4

0800aa58 <_read_r>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	0004      	movs	r4, r0
 800aa5c:	0008      	movs	r0, r1
 800aa5e:	0011      	movs	r1, r2
 800aa60:	001a      	movs	r2, r3
 800aa62:	2300      	movs	r3, #0
 800aa64:	4d05      	ldr	r5, [pc, #20]	; (800aa7c <_read_r+0x24>)
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	f7f8 fda4 	bl	80035b4 <_read>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d103      	bne.n	800aa78 <_read_r+0x20>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d000      	beq.n	800aa78 <_read_r+0x20>
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	20000ed4 	.word	0x20000ed4

0800aa80 <_sbrk_r>:
 800aa80:	2300      	movs	r3, #0
 800aa82:	b570      	push	{r4, r5, r6, lr}
 800aa84:	4d06      	ldr	r5, [pc, #24]	; (800aaa0 <_sbrk_r+0x20>)
 800aa86:	0004      	movs	r4, r0
 800aa88:	0008      	movs	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7f8 fdf8 	bl	8003680 <_sbrk>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d103      	bne.n	800aa9c <_sbrk_r+0x1c>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d000      	beq.n	800aa9c <_sbrk_r+0x1c>
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	20000ed4 	.word	0x20000ed4

0800aaa4 <_write_r>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	0004      	movs	r4, r0
 800aaa8:	0008      	movs	r0, r1
 800aaaa:	0011      	movs	r1, r2
 800aaac:	001a      	movs	r2, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	4d05      	ldr	r5, [pc, #20]	; (800aac8 <_write_r+0x24>)
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f8 fd9b 	bl	80035ee <_write>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d103      	bne.n	800aac4 <_write_r+0x20>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d000      	beq.n	800aac4 <_write_r+0x20>
 800aac2:	6023      	str	r3, [r4, #0]
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20000ed4 	.word	0x20000ed4

0800aacc <__errno>:
 800aacc:	4b01      	ldr	r3, [pc, #4]	; (800aad4 <__errno+0x8>)
 800aace:	6818      	ldr	r0, [r3, #0]
 800aad0:	4770      	bx	lr
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	200006e0 	.word	0x200006e0

0800aad8 <__libc_init_array>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	2600      	movs	r6, #0
 800aadc:	4c0c      	ldr	r4, [pc, #48]	; (800ab10 <__libc_init_array+0x38>)
 800aade:	4d0d      	ldr	r5, [pc, #52]	; (800ab14 <__libc_init_array+0x3c>)
 800aae0:	1b64      	subs	r4, r4, r5
 800aae2:	10a4      	asrs	r4, r4, #2
 800aae4:	42a6      	cmp	r6, r4
 800aae6:	d109      	bne.n	800aafc <__libc_init_array+0x24>
 800aae8:	2600      	movs	r6, #0
 800aaea:	f006 fcc5 	bl	8011478 <_init>
 800aaee:	4c0a      	ldr	r4, [pc, #40]	; (800ab18 <__libc_init_array+0x40>)
 800aaf0:	4d0a      	ldr	r5, [pc, #40]	; (800ab1c <__libc_init_array+0x44>)
 800aaf2:	1b64      	subs	r4, r4, r5
 800aaf4:	10a4      	asrs	r4, r4, #2
 800aaf6:	42a6      	cmp	r6, r4
 800aaf8:	d105      	bne.n	800ab06 <__libc_init_array+0x2e>
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	00b3      	lsls	r3, r6, #2
 800aafe:	58eb      	ldr	r3, [r5, r3]
 800ab00:	4798      	blx	r3
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7ee      	b.n	800aae4 <__libc_init_array+0xc>
 800ab06:	00b3      	lsls	r3, r6, #2
 800ab08:	58eb      	ldr	r3, [r5, r3]
 800ab0a:	4798      	blx	r3
 800ab0c:	3601      	adds	r6, #1
 800ab0e:	e7f2      	b.n	800aaf6 <__libc_init_array+0x1e>
 800ab10:	080131f4 	.word	0x080131f4
 800ab14:	080131f4 	.word	0x080131f4
 800ab18:	080131fc 	.word	0x080131fc
 800ab1c:	080131f4 	.word	0x080131f4

0800ab20 <__retarget_lock_init_recursive>:
 800ab20:	4770      	bx	lr

0800ab22 <__retarget_lock_close_recursive>:
 800ab22:	4770      	bx	lr

0800ab24 <__retarget_lock_acquire_recursive>:
 800ab24:	4770      	bx	lr

0800ab26 <__retarget_lock_release_recursive>:
 800ab26:	4770      	bx	lr

0800ab28 <sysconf>:
 800ab28:	2380      	movs	r3, #128	; 0x80
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	2808      	cmp	r0, #8
 800ab2e:	d004      	beq.n	800ab3a <sysconf+0x12>
 800ab30:	f7ff ffcc 	bl	800aacc <__errno>
 800ab34:	2316      	movs	r3, #22
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	3b17      	subs	r3, #23
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <memcpy>:
 800ab3e:	2300      	movs	r3, #0
 800ab40:	b510      	push	{r4, lr}
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d100      	bne.n	800ab48 <memcpy+0xa>
 800ab46:	bd10      	pop	{r4, pc}
 800ab48:	5ccc      	ldrb	r4, [r1, r3]
 800ab4a:	54c4      	strb	r4, [r0, r3]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	e7f8      	b.n	800ab42 <memcpy+0x4>

0800ab50 <nan>:
 800ab50:	2000      	movs	r0, #0
 800ab52:	4901      	ldr	r1, [pc, #4]	; (800ab58 <nan+0x8>)
 800ab54:	4770      	bx	lr
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	7ff80000 	.word	0x7ff80000

0800ab5c <nanf>:
 800ab5c:	4800      	ldr	r0, [pc, #0]	; (800ab60 <nanf+0x4>)
 800ab5e:	4770      	bx	lr
 800ab60:	7fc00000 	.word	0x7fc00000

0800ab64 <register_fini>:
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <register_fini+0x10>)
 800ab66:	b510      	push	{r4, lr}
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <register_fini+0xe>
 800ab6c:	4802      	ldr	r0, [pc, #8]	; (800ab78 <register_fini+0x14>)
 800ab6e:	f000 f805 	bl	800ab7c <atexit>
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	00000000 	.word	0x00000000
 800ab78:	0800e8d9 	.word	0x0800e8d9

0800ab7c <atexit>:
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	0001      	movs	r1, r0
 800ab82:	001a      	movs	r2, r3
 800ab84:	0018      	movs	r0, r3
 800ab86:	f003 fef9 	bl	800e97c <__register_exitproc>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <_malloc_trim_r>:
 800ab8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab8e:	0004      	movs	r4, r0
 800ab90:	2008      	movs	r0, #8
 800ab92:	000d      	movs	r5, r1
 800ab94:	f7ff ffc8 	bl	800ab28 <sysconf>
 800ab98:	0006      	movs	r6, r0
 800ab9a:	0020      	movs	r0, r4
 800ab9c:	f7fe fe7e 	bl	800989c <__malloc_lock>
 800aba0:	2203      	movs	r2, #3
 800aba2:	4f21      	ldr	r7, [pc, #132]	; (800ac28 <_malloc_trim_r+0x9c>)
 800aba4:	0031      	movs	r1, r6
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4393      	bics	r3, r2
 800abac:	1b58      	subs	r0, r3, r5
 800abae:	3811      	subs	r0, #17
 800abb0:	1980      	adds	r0, r0, r6
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	f7f5 fac2 	bl	800013c <__udivsi3>
 800abb8:	1e45      	subs	r5, r0, #1
 800abba:	4375      	muls	r5, r6
 800abbc:	42ae      	cmp	r6, r5
 800abbe:	dd04      	ble.n	800abca <_malloc_trim_r+0x3e>
 800abc0:	0020      	movs	r0, r4
 800abc2:	f7fe fe73 	bl	80098ac <__malloc_unlock>
 800abc6:	2000      	movs	r0, #0
 800abc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abca:	2100      	movs	r1, #0
 800abcc:	0020      	movs	r0, r4
 800abce:	f7ff ff57 	bl	800aa80 <_sbrk_r>
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	9a01      	ldr	r2, [sp, #4]
 800abd6:	189b      	adds	r3, r3, r2
 800abd8:	4298      	cmp	r0, r3
 800abda:	d1f1      	bne.n	800abc0 <_malloc_trim_r+0x34>
 800abdc:	0020      	movs	r0, r4
 800abde:	4269      	negs	r1, r5
 800abe0:	f7ff ff4e 	bl	800aa80 <_sbrk_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d110      	bne.n	800ac0a <_malloc_trim_r+0x7e>
 800abe8:	2100      	movs	r1, #0
 800abea:	0020      	movs	r0, r4
 800abec:	f7ff ff48 	bl	800aa80 <_sbrk_r>
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	1a81      	subs	r1, r0, r2
 800abf4:	290f      	cmp	r1, #15
 800abf6:	dde3      	ble.n	800abc0 <_malloc_trim_r+0x34>
 800abf8:	4d0c      	ldr	r5, [pc, #48]	; (800ac2c <_malloc_trim_r+0xa0>)
 800abfa:	4b0d      	ldr	r3, [pc, #52]	; (800ac30 <_malloc_trim_r+0xa4>)
 800abfc:	682d      	ldr	r5, [r5, #0]
 800abfe:	1b40      	subs	r0, r0, r5
 800ac00:	6018      	str	r0, [r3, #0]
 800ac02:	2301      	movs	r3, #1
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6053      	str	r3, [r2, #4]
 800ac08:	e7da      	b.n	800abc0 <_malloc_trim_r+0x34>
 800ac0a:	2601      	movs	r6, #1
 800ac0c:	9b01      	ldr	r3, [sp, #4]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	1b5b      	subs	r3, r3, r5
 800ac12:	4333      	orrs	r3, r6
 800ac14:	6053      	str	r3, [r2, #4]
 800ac16:	4a06      	ldr	r2, [pc, #24]	; (800ac30 <_malloc_trim_r+0xa4>)
 800ac18:	0020      	movs	r0, r4
 800ac1a:	6813      	ldr	r3, [r2, #0]
 800ac1c:	1b5b      	subs	r3, r3, r5
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	f7fe fe44 	bl	80098ac <__malloc_unlock>
 800ac24:	0030      	movs	r0, r6
 800ac26:	e7cf      	b.n	800abc8 <_malloc_trim_r+0x3c>
 800ac28:	20000034 	.word	0x20000034
 800ac2c:	2000043c 	.word	0x2000043c
 800ac30:	20000d64 	.word	0x20000d64

0800ac34 <_free_r>:
 800ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac36:	1e0d      	subs	r5, r1, #0
 800ac38:	9001      	str	r0, [sp, #4]
 800ac3a:	d02d      	beq.n	800ac98 <_free_r+0x64>
 800ac3c:	f7fe fe2e 	bl	800989c <__malloc_lock>
 800ac40:	2301      	movs	r3, #1
 800ac42:	0029      	movs	r1, r5
 800ac44:	469c      	mov	ip, r3
 800ac46:	3908      	subs	r1, #8
 800ac48:	684f      	ldr	r7, [r1, #4]
 800ac4a:	4662      	mov	r2, ip
 800ac4c:	003b      	movs	r3, r7
 800ac4e:	4664      	mov	r4, ip
 800ac50:	4393      	bics	r3, r2
 800ac52:	18c8      	adds	r0, r1, r3
 800ac54:	6845      	ldr	r5, [r0, #4]
 800ac56:	3202      	adds	r2, #2
 800ac58:	4395      	bics	r5, r2
 800ac5a:	4a4a      	ldr	r2, [pc, #296]	; (800ad84 <_free_r+0x150>)
 800ac5c:	4027      	ands	r7, r4
 800ac5e:	6896      	ldr	r6, [r2, #8]
 800ac60:	4286      	cmp	r6, r0
 800ac62:	d11a      	bne.n	800ac9a <_free_r+0x66>
 800ac64:	195b      	adds	r3, r3, r5
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	d106      	bne.n	800ac78 <_free_r+0x44>
 800ac6a:	6808      	ldr	r0, [r1, #0]
 800ac6c:	1a09      	subs	r1, r1, r0
 800ac6e:	688d      	ldr	r5, [r1, #8]
 800ac70:	181b      	adds	r3, r3, r0
 800ac72:	68c8      	ldr	r0, [r1, #12]
 800ac74:	60e8      	str	r0, [r5, #12]
 800ac76:	6085      	str	r5, [r0, #8]
 800ac78:	2001      	movs	r0, #1
 800ac7a:	4318      	orrs	r0, r3
 800ac7c:	6048      	str	r0, [r1, #4]
 800ac7e:	6091      	str	r1, [r2, #8]
 800ac80:	4a41      	ldr	r2, [pc, #260]	; (800ad88 <_free_r+0x154>)
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d804      	bhi.n	800ac92 <_free_r+0x5e>
 800ac88:	4b40      	ldr	r3, [pc, #256]	; (800ad8c <_free_r+0x158>)
 800ac8a:	9801      	ldr	r0, [sp, #4]
 800ac8c:	6819      	ldr	r1, [r3, #0]
 800ac8e:	f7ff ff7d 	bl	800ab8c <_malloc_trim_r>
 800ac92:	9801      	ldr	r0, [sp, #4]
 800ac94:	f7fe fe0a 	bl	80098ac <__malloc_unlock>
 800ac98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	6045      	str	r5, [r0, #4]
 800ac9e:	42b7      	cmp	r7, r6
 800aca0:	d109      	bne.n	800acb6 <_free_r+0x82>
 800aca2:	680f      	ldr	r7, [r1, #0]
 800aca4:	4c3a      	ldr	r4, [pc, #232]	; (800ad90 <_free_r+0x15c>)
 800aca6:	1bc9      	subs	r1, r1, r7
 800aca8:	19db      	adds	r3, r3, r7
 800acaa:	688f      	ldr	r7, [r1, #8]
 800acac:	42a7      	cmp	r7, r4
 800acae:	d02c      	beq.n	800ad0a <_free_r+0xd6>
 800acb0:	68cc      	ldr	r4, [r1, #12]
 800acb2:	60fc      	str	r4, [r7, #12]
 800acb4:	60a7      	str	r7, [r4, #8]
 800acb6:	1947      	adds	r7, r0, r5
 800acb8:	687c      	ldr	r4, [r7, #4]
 800acba:	2701      	movs	r7, #1
 800acbc:	423c      	tst	r4, r7
 800acbe:	d10b      	bne.n	800acd8 <_free_r+0xa4>
 800acc0:	195b      	adds	r3, r3, r5
 800acc2:	6885      	ldr	r5, [r0, #8]
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	d122      	bne.n	800ad0e <_free_r+0xda>
 800acc8:	4c31      	ldr	r4, [pc, #196]	; (800ad90 <_free_r+0x15c>)
 800acca:	42a5      	cmp	r5, r4
 800accc:	d11f      	bne.n	800ad0e <_free_r+0xda>
 800acce:	003e      	movs	r6, r7
 800acd0:	6151      	str	r1, [r2, #20]
 800acd2:	6111      	str	r1, [r2, #16]
 800acd4:	60cd      	str	r5, [r1, #12]
 800acd6:	608d      	str	r5, [r1, #8]
 800acd8:	2501      	movs	r5, #1
 800acda:	0028      	movs	r0, r5
 800acdc:	4318      	orrs	r0, r3
 800acde:	6048      	str	r0, [r1, #4]
 800ace0:	50cb      	str	r3, [r1, r3]
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d1d5      	bne.n	800ac92 <_free_r+0x5e>
 800ace6:	2080      	movs	r0, #128	; 0x80
 800ace8:	0080      	lsls	r0, r0, #2
 800acea:	4283      	cmp	r3, r0
 800acec:	d213      	bcs.n	800ad16 <_free_r+0xe2>
 800acee:	08d8      	lsrs	r0, r3, #3
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	409d      	lsls	r5, r3
 800acf4:	6853      	ldr	r3, [r2, #4]
 800acf6:	431d      	orrs	r5, r3
 800acf8:	00c3      	lsls	r3, r0, #3
 800acfa:	189b      	adds	r3, r3, r2
 800acfc:	6055      	str	r5, [r2, #4]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	60cb      	str	r3, [r1, #12]
 800ad02:	608a      	str	r2, [r1, #8]
 800ad04:	6099      	str	r1, [r3, #8]
 800ad06:	60d1      	str	r1, [r2, #12]
 800ad08:	e7c3      	b.n	800ac92 <_free_r+0x5e>
 800ad0a:	4666      	mov	r6, ip
 800ad0c:	e7d3      	b.n	800acb6 <_free_r+0x82>
 800ad0e:	68c0      	ldr	r0, [r0, #12]
 800ad10:	60e8      	str	r0, [r5, #12]
 800ad12:	6085      	str	r5, [r0, #8]
 800ad14:	e7e0      	b.n	800acd8 <_free_r+0xa4>
 800ad16:	0a5d      	lsrs	r5, r3, #9
 800ad18:	2d04      	cmp	r5, #4
 800ad1a:	d812      	bhi.n	800ad42 <_free_r+0x10e>
 800ad1c:	0998      	lsrs	r0, r3, #6
 800ad1e:	3038      	adds	r0, #56	; 0x38
 800ad20:	00c6      	lsls	r6, r0, #3
 800ad22:	18b6      	adds	r6, r6, r2
 800ad24:	68b5      	ldr	r5, [r6, #8]
 800ad26:	2703      	movs	r7, #3
 800ad28:	42ae      	cmp	r6, r5
 800ad2a:	d125      	bne.n	800ad78 <_free_r+0x144>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	1080      	asrs	r0, r0, #2
 800ad30:	4083      	lsls	r3, r0
 800ad32:	6850      	ldr	r0, [r2, #4]
 800ad34:	4303      	orrs	r3, r0
 800ad36:	6053      	str	r3, [r2, #4]
 800ad38:	60ce      	str	r6, [r1, #12]
 800ad3a:	608d      	str	r5, [r1, #8]
 800ad3c:	60b1      	str	r1, [r6, #8]
 800ad3e:	60e9      	str	r1, [r5, #12]
 800ad40:	e7a7      	b.n	800ac92 <_free_r+0x5e>
 800ad42:	2d14      	cmp	r5, #20
 800ad44:	d802      	bhi.n	800ad4c <_free_r+0x118>
 800ad46:	0028      	movs	r0, r5
 800ad48:	305b      	adds	r0, #91	; 0x5b
 800ad4a:	e7e9      	b.n	800ad20 <_free_r+0xec>
 800ad4c:	2d54      	cmp	r5, #84	; 0x54
 800ad4e:	d802      	bhi.n	800ad56 <_free_r+0x122>
 800ad50:	0b18      	lsrs	r0, r3, #12
 800ad52:	306e      	adds	r0, #110	; 0x6e
 800ad54:	e7e4      	b.n	800ad20 <_free_r+0xec>
 800ad56:	20aa      	movs	r0, #170	; 0xaa
 800ad58:	0040      	lsls	r0, r0, #1
 800ad5a:	4285      	cmp	r5, r0
 800ad5c:	d802      	bhi.n	800ad64 <_free_r+0x130>
 800ad5e:	0bd8      	lsrs	r0, r3, #15
 800ad60:	3077      	adds	r0, #119	; 0x77
 800ad62:	e7dd      	b.n	800ad20 <_free_r+0xec>
 800ad64:	4e0b      	ldr	r6, [pc, #44]	; (800ad94 <_free_r+0x160>)
 800ad66:	207e      	movs	r0, #126	; 0x7e
 800ad68:	42b5      	cmp	r5, r6
 800ad6a:	d8d9      	bhi.n	800ad20 <_free_r+0xec>
 800ad6c:	0c98      	lsrs	r0, r3, #18
 800ad6e:	307c      	adds	r0, #124	; 0x7c
 800ad70:	e7d6      	b.n	800ad20 <_free_r+0xec>
 800ad72:	68ad      	ldr	r5, [r5, #8]
 800ad74:	42ae      	cmp	r6, r5
 800ad76:	d003      	beq.n	800ad80 <_free_r+0x14c>
 800ad78:	686a      	ldr	r2, [r5, #4]
 800ad7a:	43ba      	bics	r2, r7
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d8f8      	bhi.n	800ad72 <_free_r+0x13e>
 800ad80:	68ee      	ldr	r6, [r5, #12]
 800ad82:	e7d9      	b.n	800ad38 <_free_r+0x104>
 800ad84:	20000034 	.word	0x20000034
 800ad88:	20000440 	.word	0x20000440
 800ad8c:	20000d94 	.word	0x20000d94
 800ad90:	2000003c 	.word	0x2000003c
 800ad94:	00000554 	.word	0x00000554

0800ad98 <rshift>:
 800ad98:	0002      	movs	r2, r0
 800ad9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9c:	6904      	ldr	r4, [r0, #16]
 800ad9e:	114b      	asrs	r3, r1, #5
 800ada0:	b085      	sub	sp, #20
 800ada2:	3214      	adds	r2, #20
 800ada4:	9302      	str	r3, [sp, #8]
 800ada6:	114d      	asrs	r5, r1, #5
 800ada8:	0013      	movs	r3, r2
 800adaa:	42ac      	cmp	r4, r5
 800adac:	dd32      	ble.n	800ae14 <rshift+0x7c>
 800adae:	261f      	movs	r6, #31
 800adb0:	000f      	movs	r7, r1
 800adb2:	114b      	asrs	r3, r1, #5
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	00a5      	lsls	r5, r4, #2
 800adb8:	18d3      	adds	r3, r2, r3
 800adba:	4037      	ands	r7, r6
 800adbc:	1955      	adds	r5, r2, r5
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	9701      	str	r7, [sp, #4]
 800adc2:	4231      	tst	r1, r6
 800adc4:	d10d      	bne.n	800ade2 <rshift+0x4a>
 800adc6:	0016      	movs	r6, r2
 800adc8:	0019      	movs	r1, r3
 800adca:	428d      	cmp	r5, r1
 800adcc:	d836      	bhi.n	800ae3c <rshift+0xa4>
 800adce:	9900      	ldr	r1, [sp, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	3903      	subs	r1, #3
 800add4:	428d      	cmp	r5, r1
 800add6:	d302      	bcc.n	800adde <rshift+0x46>
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	1ae4      	subs	r4, r4, r3
 800addc:	00a3      	lsls	r3, r4, #2
 800adde:	18d3      	adds	r3, r2, r3
 800ade0:	e018      	b.n	800ae14 <rshift+0x7c>
 800ade2:	2120      	movs	r1, #32
 800ade4:	9e01      	ldr	r6, [sp, #4]
 800ade6:	9f01      	ldr	r7, [sp, #4]
 800ade8:	1b89      	subs	r1, r1, r6
 800adea:	9e00      	ldr	r6, [sp, #0]
 800adec:	9103      	str	r1, [sp, #12]
 800adee:	ce02      	ldmia	r6!, {r1}
 800adf0:	4694      	mov	ip, r2
 800adf2:	40f9      	lsrs	r1, r7
 800adf4:	42b5      	cmp	r5, r6
 800adf6:	d816      	bhi.n	800ae26 <rshift+0x8e>
 800adf8:	9e00      	ldr	r6, [sp, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	3601      	adds	r6, #1
 800adfe:	42b5      	cmp	r5, r6
 800ae00:	d303      	bcc.n	800ae0a <rshift+0x72>
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	1ae3      	subs	r3, r4, r3
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	3b04      	subs	r3, #4
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	6019      	str	r1, [r3, #0]
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d000      	beq.n	800ae14 <rshift+0x7c>
 800ae12:	3304      	adds	r3, #4
 800ae14:	1a99      	subs	r1, r3, r2
 800ae16:	1089      	asrs	r1, r1, #2
 800ae18:	6101      	str	r1, [r0, #16]
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d101      	bne.n	800ae22 <rshift+0x8a>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6143      	str	r3, [r0, #20]
 800ae22:	b005      	add	sp, #20
 800ae24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae26:	6837      	ldr	r7, [r6, #0]
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	409f      	lsls	r7, r3
 800ae2c:	430f      	orrs	r7, r1
 800ae2e:	4661      	mov	r1, ip
 800ae30:	c180      	stmia	r1!, {r7}
 800ae32:	468c      	mov	ip, r1
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	ce02      	ldmia	r6!, {r1}
 800ae38:	40d9      	lsrs	r1, r3
 800ae3a:	e7db      	b.n	800adf4 <rshift+0x5c>
 800ae3c:	c980      	ldmia	r1!, {r7}
 800ae3e:	c680      	stmia	r6!, {r7}
 800ae40:	e7c3      	b.n	800adca <rshift+0x32>

0800ae42 <__hexdig_fun>:
 800ae42:	0002      	movs	r2, r0
 800ae44:	3a30      	subs	r2, #48	; 0x30
 800ae46:	0003      	movs	r3, r0
 800ae48:	2a09      	cmp	r2, #9
 800ae4a:	d802      	bhi.n	800ae52 <__hexdig_fun+0x10>
 800ae4c:	3b20      	subs	r3, #32
 800ae4e:	b2d8      	uxtb	r0, r3
 800ae50:	4770      	bx	lr
 800ae52:	0002      	movs	r2, r0
 800ae54:	3a61      	subs	r2, #97	; 0x61
 800ae56:	2a05      	cmp	r2, #5
 800ae58:	d801      	bhi.n	800ae5e <__hexdig_fun+0x1c>
 800ae5a:	3b47      	subs	r3, #71	; 0x47
 800ae5c:	e7f7      	b.n	800ae4e <__hexdig_fun+0xc>
 800ae5e:	001a      	movs	r2, r3
 800ae60:	3a41      	subs	r2, #65	; 0x41
 800ae62:	2000      	movs	r0, #0
 800ae64:	2a05      	cmp	r2, #5
 800ae66:	d8f3      	bhi.n	800ae50 <__hexdig_fun+0xe>
 800ae68:	3b27      	subs	r3, #39	; 0x27
 800ae6a:	e7f0      	b.n	800ae4e <__hexdig_fun+0xc>

0800ae6c <__gethex>:
 800ae6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6e:	b089      	sub	sp, #36	; 0x24
 800ae70:	9307      	str	r3, [sp, #28]
 800ae72:	2302      	movs	r3, #2
 800ae74:	9201      	str	r2, [sp, #4]
 800ae76:	680a      	ldr	r2, [r1, #0]
 800ae78:	425b      	negs	r3, r3
 800ae7a:	9003      	str	r0, [sp, #12]
 800ae7c:	9106      	str	r1, [sp, #24]
 800ae7e:	1c96      	adds	r6, r2, #2
 800ae80:	1a9b      	subs	r3, r3, r2
 800ae82:	199a      	adds	r2, r3, r6
 800ae84:	9600      	str	r6, [sp, #0]
 800ae86:	9205      	str	r2, [sp, #20]
 800ae88:	9a00      	ldr	r2, [sp, #0]
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	7810      	ldrb	r0, [r2, #0]
 800ae8e:	2830      	cmp	r0, #48	; 0x30
 800ae90:	d0f7      	beq.n	800ae82 <__gethex+0x16>
 800ae92:	f7ff ffd6 	bl	800ae42 <__hexdig_fun>
 800ae96:	2300      	movs	r3, #0
 800ae98:	001d      	movs	r5, r3
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	4298      	cmp	r0, r3
 800ae9e:	d11d      	bne.n	800aedc <__gethex+0x70>
 800aea0:	2201      	movs	r2, #1
 800aea2:	49a6      	ldr	r1, [pc, #664]	; (800b13c <__gethex+0x2d0>)
 800aea4:	9800      	ldr	r0, [sp, #0]
 800aea6:	f7ff fd6d 	bl	800a984 <strncmp>
 800aeaa:	0007      	movs	r7, r0
 800aeac:	42a8      	cmp	r0, r5
 800aeae:	d169      	bne.n	800af84 <__gethex+0x118>
 800aeb0:	9b00      	ldr	r3, [sp, #0]
 800aeb2:	0034      	movs	r4, r6
 800aeb4:	7858      	ldrb	r0, [r3, #1]
 800aeb6:	f7ff ffc4 	bl	800ae42 <__hexdig_fun>
 800aeba:	2301      	movs	r3, #1
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	42a8      	cmp	r0, r5
 800aec0:	d02f      	beq.n	800af22 <__gethex+0xb6>
 800aec2:	9600      	str	r6, [sp, #0]
 800aec4:	9b00      	ldr	r3, [sp, #0]
 800aec6:	7818      	ldrb	r0, [r3, #0]
 800aec8:	2830      	cmp	r0, #48	; 0x30
 800aeca:	d009      	beq.n	800aee0 <__gethex+0x74>
 800aecc:	f7ff ffb9 	bl	800ae42 <__hexdig_fun>
 800aed0:	4242      	negs	r2, r0
 800aed2:	4142      	adcs	r2, r0
 800aed4:	2301      	movs	r3, #1
 800aed6:	0035      	movs	r5, r6
 800aed8:	9202      	str	r2, [sp, #8]
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	9c00      	ldr	r4, [sp, #0]
 800aede:	e004      	b.n	800aeea <__gethex+0x7e>
 800aee0:	9b00      	ldr	r3, [sp, #0]
 800aee2:	3301      	adds	r3, #1
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	e7ed      	b.n	800aec4 <__gethex+0x58>
 800aee8:	3401      	adds	r4, #1
 800aeea:	7820      	ldrb	r0, [r4, #0]
 800aeec:	f7ff ffa9 	bl	800ae42 <__hexdig_fun>
 800aef0:	1e07      	subs	r7, r0, #0
 800aef2:	d1f9      	bne.n	800aee8 <__gethex+0x7c>
 800aef4:	2201      	movs	r2, #1
 800aef6:	0020      	movs	r0, r4
 800aef8:	4990      	ldr	r1, [pc, #576]	; (800b13c <__gethex+0x2d0>)
 800aefa:	f7ff fd43 	bl	800a984 <strncmp>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d10d      	bne.n	800af1e <__gethex+0xb2>
 800af02:	2d00      	cmp	r5, #0
 800af04:	d106      	bne.n	800af14 <__gethex+0xa8>
 800af06:	3401      	adds	r4, #1
 800af08:	0025      	movs	r5, r4
 800af0a:	7820      	ldrb	r0, [r4, #0]
 800af0c:	f7ff ff99 	bl	800ae42 <__hexdig_fun>
 800af10:	2800      	cmp	r0, #0
 800af12:	d102      	bne.n	800af1a <__gethex+0xae>
 800af14:	1b2d      	subs	r5, r5, r4
 800af16:	00af      	lsls	r7, r5, #2
 800af18:	e003      	b.n	800af22 <__gethex+0xb6>
 800af1a:	3401      	adds	r4, #1
 800af1c:	e7f5      	b.n	800af0a <__gethex+0x9e>
 800af1e:	2d00      	cmp	r5, #0
 800af20:	d1f8      	bne.n	800af14 <__gethex+0xa8>
 800af22:	2220      	movs	r2, #32
 800af24:	7823      	ldrb	r3, [r4, #0]
 800af26:	0026      	movs	r6, r4
 800af28:	4393      	bics	r3, r2
 800af2a:	2b50      	cmp	r3, #80	; 0x50
 800af2c:	d11d      	bne.n	800af6a <__gethex+0xfe>
 800af2e:	7863      	ldrb	r3, [r4, #1]
 800af30:	2b2b      	cmp	r3, #43	; 0x2b
 800af32:	d02c      	beq.n	800af8e <__gethex+0x122>
 800af34:	2b2d      	cmp	r3, #45	; 0x2d
 800af36:	d02e      	beq.n	800af96 <__gethex+0x12a>
 800af38:	2300      	movs	r3, #0
 800af3a:	1c66      	adds	r6, r4, #1
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	7830      	ldrb	r0, [r6, #0]
 800af40:	f7ff ff7f 	bl	800ae42 <__hexdig_fun>
 800af44:	1e43      	subs	r3, r0, #1
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b18      	cmp	r3, #24
 800af4a:	d82b      	bhi.n	800afa4 <__gethex+0x138>
 800af4c:	3810      	subs	r0, #16
 800af4e:	0005      	movs	r5, r0
 800af50:	7870      	ldrb	r0, [r6, #1]
 800af52:	f7ff ff76 	bl	800ae42 <__hexdig_fun>
 800af56:	1e43      	subs	r3, r0, #1
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3601      	adds	r6, #1
 800af5c:	2b18      	cmp	r3, #24
 800af5e:	d91c      	bls.n	800af9a <__gethex+0x12e>
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d000      	beq.n	800af68 <__gethex+0xfc>
 800af66:	426d      	negs	r5, r5
 800af68:	197f      	adds	r7, r7, r5
 800af6a:	9b06      	ldr	r3, [sp, #24]
 800af6c:	601e      	str	r6, [r3, #0]
 800af6e:	9b02      	ldr	r3, [sp, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d019      	beq.n	800afa8 <__gethex+0x13c>
 800af74:	2600      	movs	r6, #0
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	42b3      	cmp	r3, r6
 800af7a:	d100      	bne.n	800af7e <__gethex+0x112>
 800af7c:	3606      	adds	r6, #6
 800af7e:	0030      	movs	r0, r6
 800af80:	b009      	add	sp, #36	; 0x24
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	2301      	movs	r3, #1
 800af86:	2700      	movs	r7, #0
 800af88:	9c00      	ldr	r4, [sp, #0]
 800af8a:	9302      	str	r3, [sp, #8]
 800af8c:	e7c9      	b.n	800af22 <__gethex+0xb6>
 800af8e:	2300      	movs	r3, #0
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	1ca6      	adds	r6, r4, #2
 800af94:	e7d3      	b.n	800af3e <__gethex+0xd2>
 800af96:	2301      	movs	r3, #1
 800af98:	e7fa      	b.n	800af90 <__gethex+0x124>
 800af9a:	230a      	movs	r3, #10
 800af9c:	435d      	muls	r5, r3
 800af9e:	182d      	adds	r5, r5, r0
 800afa0:	3d10      	subs	r5, #16
 800afa2:	e7d5      	b.n	800af50 <__gethex+0xe4>
 800afa4:	0026      	movs	r6, r4
 800afa6:	e7e0      	b.n	800af6a <__gethex+0xfe>
 800afa8:	9b00      	ldr	r3, [sp, #0]
 800afaa:	9902      	ldr	r1, [sp, #8]
 800afac:	1ae3      	subs	r3, r4, r3
 800afae:	3b01      	subs	r3, #1
 800afb0:	2b07      	cmp	r3, #7
 800afb2:	dc0a      	bgt.n	800afca <__gethex+0x15e>
 800afb4:	9803      	ldr	r0, [sp, #12]
 800afb6:	f000 fa5d 	bl	800b474 <_Balloc>
 800afba:	1e05      	subs	r5, r0, #0
 800afbc:	d108      	bne.n	800afd0 <__gethex+0x164>
 800afbe:	002a      	movs	r2, r5
 800afc0:	21e4      	movs	r1, #228	; 0xe4
 800afc2:	4b5f      	ldr	r3, [pc, #380]	; (800b140 <__gethex+0x2d4>)
 800afc4:	485f      	ldr	r0, [pc, #380]	; (800b144 <__gethex+0x2d8>)
 800afc6:	f003 fd19 	bl	800e9fc <__assert_func>
 800afca:	3101      	adds	r1, #1
 800afcc:	105b      	asrs	r3, r3, #1
 800afce:	e7ef      	b.n	800afb0 <__gethex+0x144>
 800afd0:	0003      	movs	r3, r0
 800afd2:	3314      	adds	r3, #20
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	9305      	str	r3, [sp, #20]
 800afd8:	2300      	movs	r3, #0
 800afda:	001e      	movs	r6, r3
 800afdc:	9304      	str	r3, [sp, #16]
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d33f      	bcc.n	800b064 <__gethex+0x1f8>
 800afe4:	9c05      	ldr	r4, [sp, #20]
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	c440      	stmia	r4!, {r6}
 800afea:	1ae4      	subs	r4, r4, r3
 800afec:	10a4      	asrs	r4, r4, #2
 800afee:	0030      	movs	r0, r6
 800aff0:	612c      	str	r4, [r5, #16]
 800aff2:	f000 fb01 	bl	800b5f8 <__hi0bits>
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	0164      	lsls	r4, r4, #5
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	1a26      	subs	r6, r4, r0
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	429e      	cmp	r6, r3
 800b002:	dd51      	ble.n	800b0a8 <__gethex+0x23c>
 800b004:	1af6      	subs	r6, r6, r3
 800b006:	0031      	movs	r1, r6
 800b008:	0028      	movs	r0, r5
 800b00a:	f000 fe7b 	bl	800bd04 <__any_on>
 800b00e:	1e04      	subs	r4, r0, #0
 800b010:	d016      	beq.n	800b040 <__gethex+0x1d4>
 800b012:	2401      	movs	r4, #1
 800b014:	231f      	movs	r3, #31
 800b016:	0020      	movs	r0, r4
 800b018:	1e72      	subs	r2, r6, #1
 800b01a:	4013      	ands	r3, r2
 800b01c:	4098      	lsls	r0, r3
 800b01e:	0003      	movs	r3, r0
 800b020:	1151      	asrs	r1, r2, #5
 800b022:	9802      	ldr	r0, [sp, #8]
 800b024:	0089      	lsls	r1, r1, #2
 800b026:	5809      	ldr	r1, [r1, r0]
 800b028:	4219      	tst	r1, r3
 800b02a:	d009      	beq.n	800b040 <__gethex+0x1d4>
 800b02c:	42a2      	cmp	r2, r4
 800b02e:	dd06      	ble.n	800b03e <__gethex+0x1d2>
 800b030:	0028      	movs	r0, r5
 800b032:	1eb1      	subs	r1, r6, #2
 800b034:	f000 fe66 	bl	800bd04 <__any_on>
 800b038:	3402      	adds	r4, #2
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d100      	bne.n	800b040 <__gethex+0x1d4>
 800b03e:	2402      	movs	r4, #2
 800b040:	0031      	movs	r1, r6
 800b042:	0028      	movs	r0, r5
 800b044:	f7ff fea8 	bl	800ad98 <rshift>
 800b048:	19bf      	adds	r7, r7, r6
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	42bb      	cmp	r3, r7
 800b050:	da3a      	bge.n	800b0c8 <__gethex+0x25c>
 800b052:	0029      	movs	r1, r5
 800b054:	9803      	ldr	r0, [sp, #12]
 800b056:	f000 fa35 	bl	800b4c4 <_Bfree>
 800b05a:	2300      	movs	r3, #0
 800b05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b05e:	26a3      	movs	r6, #163	; 0xa3
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	e78c      	b.n	800af7e <__gethex+0x112>
 800b064:	3c01      	subs	r4, #1
 800b066:	7823      	ldrb	r3, [r4, #0]
 800b068:	2b2e      	cmp	r3, #46	; 0x2e
 800b06a:	d012      	beq.n	800b092 <__gethex+0x226>
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	2b20      	cmp	r3, #32
 800b070:	d104      	bne.n	800b07c <__gethex+0x210>
 800b072:	9b05      	ldr	r3, [sp, #20]
 800b074:	c340      	stmia	r3!, {r6}
 800b076:	2600      	movs	r6, #0
 800b078:	9305      	str	r3, [sp, #20]
 800b07a:	9604      	str	r6, [sp, #16]
 800b07c:	7820      	ldrb	r0, [r4, #0]
 800b07e:	f7ff fee0 	bl	800ae42 <__hexdig_fun>
 800b082:	230f      	movs	r3, #15
 800b084:	4018      	ands	r0, r3
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	4098      	lsls	r0, r3
 800b08a:	3304      	adds	r3, #4
 800b08c:	4306      	orrs	r6, r0
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	e7a5      	b.n	800afde <__gethex+0x172>
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	42a3      	cmp	r3, r4
 800b096:	d8e9      	bhi.n	800b06c <__gethex+0x200>
 800b098:	2201      	movs	r2, #1
 800b09a:	0020      	movs	r0, r4
 800b09c:	4927      	ldr	r1, [pc, #156]	; (800b13c <__gethex+0x2d0>)
 800b09e:	f7ff fc71 	bl	800a984 <strncmp>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d1e2      	bne.n	800b06c <__gethex+0x200>
 800b0a6:	e79a      	b.n	800afde <__gethex+0x172>
 800b0a8:	9b00      	ldr	r3, [sp, #0]
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	429e      	cmp	r6, r3
 800b0ae:	dacc      	bge.n	800b04a <__gethex+0x1de>
 800b0b0:	1b9e      	subs	r6, r3, r6
 800b0b2:	0029      	movs	r1, r5
 800b0b4:	0032      	movs	r2, r6
 800b0b6:	9803      	ldr	r0, [sp, #12]
 800b0b8:	f000 fbf0 	bl	800b89c <__lshift>
 800b0bc:	0003      	movs	r3, r0
 800b0be:	3314      	adds	r3, #20
 800b0c0:	0005      	movs	r5, r0
 800b0c2:	1bbf      	subs	r7, r7, r6
 800b0c4:	9302      	str	r3, [sp, #8]
 800b0c6:	e7c0      	b.n	800b04a <__gethex+0x1de>
 800b0c8:	9b01      	ldr	r3, [sp, #4]
 800b0ca:	685e      	ldr	r6, [r3, #4]
 800b0cc:	42be      	cmp	r6, r7
 800b0ce:	dd70      	ble.n	800b1b2 <__gethex+0x346>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	1bf6      	subs	r6, r6, r7
 800b0d4:	42b3      	cmp	r3, r6
 800b0d6:	dc37      	bgt.n	800b148 <__gethex+0x2dc>
 800b0d8:	9b01      	ldr	r3, [sp, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d024      	beq.n	800b12a <__gethex+0x2be>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d026      	beq.n	800b132 <__gethex+0x2c6>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d117      	bne.n	800b118 <__gethex+0x2ac>
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	42b3      	cmp	r3, r6
 800b0ec:	d114      	bne.n	800b118 <__gethex+0x2ac>
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d10b      	bne.n	800b10a <__gethex+0x29e>
 800b0f2:	9b01      	ldr	r3, [sp, #4]
 800b0f4:	9a07      	ldr	r2, [sp, #28]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	2662      	movs	r6, #98	; 0x62
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	9a02      	ldr	r2, [sp, #8]
 800b100:	612b      	str	r3, [r5, #16]
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b106:	601d      	str	r5, [r3, #0]
 800b108:	e739      	b.n	800af7e <__gethex+0x112>
 800b10a:	9900      	ldr	r1, [sp, #0]
 800b10c:	0028      	movs	r0, r5
 800b10e:	3901      	subs	r1, #1
 800b110:	f000 fdf8 	bl	800bd04 <__any_on>
 800b114:	2800      	cmp	r0, #0
 800b116:	d1ec      	bne.n	800b0f2 <__gethex+0x286>
 800b118:	0029      	movs	r1, r5
 800b11a:	9803      	ldr	r0, [sp, #12]
 800b11c:	f000 f9d2 	bl	800b4c4 <_Bfree>
 800b120:	2300      	movs	r3, #0
 800b122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b124:	2650      	movs	r6, #80	; 0x50
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	e729      	b.n	800af7e <__gethex+0x112>
 800b12a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f3      	bne.n	800b118 <__gethex+0x2ac>
 800b130:	e7df      	b.n	800b0f2 <__gethex+0x286>
 800b132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1dc      	bne.n	800b0f2 <__gethex+0x286>
 800b138:	e7ee      	b.n	800b118 <__gethex+0x2ac>
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	08012d80 	.word	0x08012d80
 800b140:	08012ee1 	.word	0x08012ee1
 800b144:	08012ef2 	.word	0x08012ef2
 800b148:	1e77      	subs	r7, r6, #1
 800b14a:	2c00      	cmp	r4, #0
 800b14c:	d12f      	bne.n	800b1ae <__gethex+0x342>
 800b14e:	2f00      	cmp	r7, #0
 800b150:	d004      	beq.n	800b15c <__gethex+0x2f0>
 800b152:	0039      	movs	r1, r7
 800b154:	0028      	movs	r0, r5
 800b156:	f000 fdd5 	bl	800bd04 <__any_on>
 800b15a:	0004      	movs	r4, r0
 800b15c:	231f      	movs	r3, #31
 800b15e:	117a      	asrs	r2, r7, #5
 800b160:	401f      	ands	r7, r3
 800b162:	3b1e      	subs	r3, #30
 800b164:	40bb      	lsls	r3, r7
 800b166:	9902      	ldr	r1, [sp, #8]
 800b168:	0092      	lsls	r2, r2, #2
 800b16a:	5852      	ldr	r2, [r2, r1]
 800b16c:	421a      	tst	r2, r3
 800b16e:	d001      	beq.n	800b174 <__gethex+0x308>
 800b170:	2302      	movs	r3, #2
 800b172:	431c      	orrs	r4, r3
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	0031      	movs	r1, r6
 800b178:	1b9b      	subs	r3, r3, r6
 800b17a:	2602      	movs	r6, #2
 800b17c:	0028      	movs	r0, r5
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	f7ff fe0a 	bl	800ad98 <rshift>
 800b184:	9b01      	ldr	r3, [sp, #4]
 800b186:	685f      	ldr	r7, [r3, #4]
 800b188:	2c00      	cmp	r4, #0
 800b18a:	d041      	beq.n	800b210 <__gethex+0x3a4>
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	2b02      	cmp	r3, #2
 800b192:	d010      	beq.n	800b1b6 <__gethex+0x34a>
 800b194:	2b03      	cmp	r3, #3
 800b196:	d012      	beq.n	800b1be <__gethex+0x352>
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d106      	bne.n	800b1aa <__gethex+0x33e>
 800b19c:	07a2      	lsls	r2, r4, #30
 800b19e:	d504      	bpl.n	800b1aa <__gethex+0x33e>
 800b1a0:	9a02      	ldr	r2, [sp, #8]
 800b1a2:	6812      	ldr	r2, [r2, #0]
 800b1a4:	4314      	orrs	r4, r2
 800b1a6:	421c      	tst	r4, r3
 800b1a8:	d10c      	bne.n	800b1c4 <__gethex+0x358>
 800b1aa:	2310      	movs	r3, #16
 800b1ac:	e02f      	b.n	800b20e <__gethex+0x3a2>
 800b1ae:	2401      	movs	r4, #1
 800b1b0:	e7d4      	b.n	800b15c <__gethex+0x2f0>
 800b1b2:	2601      	movs	r6, #1
 800b1b4:	e7e8      	b.n	800b188 <__gethex+0x31c>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f2      	beq.n	800b1aa <__gethex+0x33e>
 800b1c4:	692b      	ldr	r3, [r5, #16]
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	9302      	str	r3, [sp, #8]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	002b      	movs	r3, r5
 800b1d0:	9a04      	ldr	r2, [sp, #16]
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	1899      	adds	r1, r3, r2
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	1c54      	adds	r4, r2, #1
 800b1da:	d01e      	beq.n	800b21a <__gethex+0x3ae>
 800b1dc:	3201      	adds	r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	002b      	movs	r3, r5
 800b1e2:	3314      	adds	r3, #20
 800b1e4:	2e02      	cmp	r6, #2
 800b1e6:	d141      	bne.n	800b26c <__gethex+0x400>
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	9900      	ldr	r1, [sp, #0]
 800b1ec:	6812      	ldr	r2, [r2, #0]
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	428a      	cmp	r2, r1
 800b1f2:	d10b      	bne.n	800b20c <__gethex+0x3a0>
 800b1f4:	221f      	movs	r2, #31
 800b1f6:	9800      	ldr	r0, [sp, #0]
 800b1f8:	1149      	asrs	r1, r1, #5
 800b1fa:	4002      	ands	r2, r0
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	0004      	movs	r4, r0
 800b200:	4094      	lsls	r4, r2
 800b202:	0089      	lsls	r1, r1, #2
 800b204:	58cb      	ldr	r3, [r1, r3]
 800b206:	4223      	tst	r3, r4
 800b208:	d000      	beq.n	800b20c <__gethex+0x3a0>
 800b20a:	2601      	movs	r6, #1
 800b20c:	2320      	movs	r3, #32
 800b20e:	431e      	orrs	r6, r3
 800b210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b212:	601d      	str	r5, [r3, #0]
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	601f      	str	r7, [r3, #0]
 800b218:	e6b1      	b.n	800af7e <__gethex+0x112>
 800b21a:	c301      	stmia	r3!, {r0}
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d8da      	bhi.n	800b1d6 <__gethex+0x36a>
 800b220:	68ab      	ldr	r3, [r5, #8]
 800b222:	9a02      	ldr	r2, [sp, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	db18      	blt.n	800b25a <__gethex+0x3ee>
 800b228:	6869      	ldr	r1, [r5, #4]
 800b22a:	9803      	ldr	r0, [sp, #12]
 800b22c:	3101      	adds	r1, #1
 800b22e:	f000 f921 	bl	800b474 <_Balloc>
 800b232:	1e04      	subs	r4, r0, #0
 800b234:	d104      	bne.n	800b240 <__gethex+0x3d4>
 800b236:	0022      	movs	r2, r4
 800b238:	2184      	movs	r1, #132	; 0x84
 800b23a:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <__gethex+0x440>)
 800b23c:	481c      	ldr	r0, [pc, #112]	; (800b2b0 <__gethex+0x444>)
 800b23e:	e6c2      	b.n	800afc6 <__gethex+0x15a>
 800b240:	0029      	movs	r1, r5
 800b242:	692a      	ldr	r2, [r5, #16]
 800b244:	310c      	adds	r1, #12
 800b246:	3202      	adds	r2, #2
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	300c      	adds	r0, #12
 800b24c:	f7ff fc77 	bl	800ab3e <memcpy>
 800b250:	0029      	movs	r1, r5
 800b252:	9803      	ldr	r0, [sp, #12]
 800b254:	f000 f936 	bl	800b4c4 <_Bfree>
 800b258:	0025      	movs	r5, r4
 800b25a:	692b      	ldr	r3, [r5, #16]
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	612a      	str	r2, [r5, #16]
 800b260:	2201      	movs	r2, #1
 800b262:	3304      	adds	r3, #4
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	18eb      	adds	r3, r5, r3
 800b268:	605a      	str	r2, [r3, #4]
 800b26a:	e7b9      	b.n	800b1e0 <__gethex+0x374>
 800b26c:	692a      	ldr	r2, [r5, #16]
 800b26e:	9902      	ldr	r1, [sp, #8]
 800b270:	428a      	cmp	r2, r1
 800b272:	dd09      	ble.n	800b288 <__gethex+0x41c>
 800b274:	2101      	movs	r1, #1
 800b276:	0028      	movs	r0, r5
 800b278:	f7ff fd8e 	bl	800ad98 <rshift>
 800b27c:	9b01      	ldr	r3, [sp, #4]
 800b27e:	3701      	adds	r7, #1
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	42bb      	cmp	r3, r7
 800b284:	dac1      	bge.n	800b20a <__gethex+0x39e>
 800b286:	e6e4      	b.n	800b052 <__gethex+0x1e6>
 800b288:	221f      	movs	r2, #31
 800b28a:	9c00      	ldr	r4, [sp, #0]
 800b28c:	9900      	ldr	r1, [sp, #0]
 800b28e:	2601      	movs	r6, #1
 800b290:	4014      	ands	r4, r2
 800b292:	4211      	tst	r1, r2
 800b294:	d0ba      	beq.n	800b20c <__gethex+0x3a0>
 800b296:	9a04      	ldr	r2, [sp, #16]
 800b298:	189b      	adds	r3, r3, r2
 800b29a:	3b04      	subs	r3, #4
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f000 f9ab 	bl	800b5f8 <__hi0bits>
 800b2a2:	2320      	movs	r3, #32
 800b2a4:	1b1b      	subs	r3, r3, r4
 800b2a6:	4298      	cmp	r0, r3
 800b2a8:	dbe4      	blt.n	800b274 <__gethex+0x408>
 800b2aa:	e7af      	b.n	800b20c <__gethex+0x3a0>
 800b2ac:	08012ee1 	.word	0x08012ee1
 800b2b0:	08012ef2 	.word	0x08012ef2

0800b2b4 <L_shift>:
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	b570      	push	{r4, r5, r6, lr}
 800b2b8:	2520      	movs	r5, #32
 800b2ba:	1a9a      	subs	r2, r3, r2
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	1aad      	subs	r5, r5, r2
 800b2c0:	6843      	ldr	r3, [r0, #4]
 800b2c2:	6804      	ldr	r4, [r0, #0]
 800b2c4:	001e      	movs	r6, r3
 800b2c6:	40ae      	lsls	r6, r5
 800b2c8:	40d3      	lsrs	r3, r2
 800b2ca:	4334      	orrs	r4, r6
 800b2cc:	6004      	str	r4, [r0, #0]
 800b2ce:	6043      	str	r3, [r0, #4]
 800b2d0:	3004      	adds	r0, #4
 800b2d2:	4288      	cmp	r0, r1
 800b2d4:	d3f4      	bcc.n	800b2c0 <L_shift+0xc>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}

0800b2d8 <__match>:
 800b2d8:	b530      	push	{r4, r5, lr}
 800b2da:	6803      	ldr	r3, [r0, #0]
 800b2dc:	780c      	ldrb	r4, [r1, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	d102      	bne.n	800b2ea <__match+0x12>
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	bd30      	pop	{r4, r5, pc}
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	0015      	movs	r5, r2
 800b2ee:	3d41      	subs	r5, #65	; 0x41
 800b2f0:	2d19      	cmp	r5, #25
 800b2f2:	d800      	bhi.n	800b2f6 <__match+0x1e>
 800b2f4:	3220      	adds	r2, #32
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	42a2      	cmp	r2, r4
 800b2fa:	d0ef      	beq.n	800b2dc <__match+0x4>
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	e7f3      	b.n	800b2e8 <__match+0x10>

0800b300 <__hexnan>:
 800b300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b302:	680b      	ldr	r3, [r1, #0]
 800b304:	b08b      	sub	sp, #44	; 0x2c
 800b306:	9201      	str	r2, [sp, #4]
 800b308:	9901      	ldr	r1, [sp, #4]
 800b30a:	115a      	asrs	r2, r3, #5
 800b30c:	0092      	lsls	r2, r2, #2
 800b30e:	188a      	adds	r2, r1, r2
 800b310:	9202      	str	r2, [sp, #8]
 800b312:	0019      	movs	r1, r3
 800b314:	221f      	movs	r2, #31
 800b316:	4011      	ands	r1, r2
 800b318:	9008      	str	r0, [sp, #32]
 800b31a:	9106      	str	r1, [sp, #24]
 800b31c:	4213      	tst	r3, r2
 800b31e:	d002      	beq.n	800b326 <__hexnan+0x26>
 800b320:	9b02      	ldr	r3, [sp, #8]
 800b322:	3304      	adds	r3, #4
 800b324:	9302      	str	r3, [sp, #8]
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	2500      	movs	r5, #0
 800b32a:	1f1f      	subs	r7, r3, #4
 800b32c:	003e      	movs	r6, r7
 800b32e:	003c      	movs	r4, r7
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	603d      	str	r5, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	9507      	str	r5, [sp, #28]
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	9503      	str	r5, [sp, #12]
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	3301      	adds	r3, #1
 800b340:	9309      	str	r3, [sp, #36]	; 0x24
 800b342:	9b05      	ldr	r3, [sp, #20]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d028      	beq.n	800b39e <__hexnan+0x9e>
 800b34c:	9804      	ldr	r0, [sp, #16]
 800b34e:	f7ff fd78 	bl	800ae42 <__hexdig_fun>
 800b352:	2800      	cmp	r0, #0
 800b354:	d154      	bne.n	800b400 <__hexnan+0x100>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d819      	bhi.n	800b390 <__hexnan+0x90>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	9a07      	ldr	r2, [sp, #28]
 800b360:	4293      	cmp	r3, r2
 800b362:	dd12      	ble.n	800b38a <__hexnan+0x8a>
 800b364:	42b4      	cmp	r4, r6
 800b366:	d206      	bcs.n	800b376 <__hexnan+0x76>
 800b368:	2d07      	cmp	r5, #7
 800b36a:	dc04      	bgt.n	800b376 <__hexnan+0x76>
 800b36c:	002a      	movs	r2, r5
 800b36e:	0031      	movs	r1, r6
 800b370:	0020      	movs	r0, r4
 800b372:	f7ff ff9f 	bl	800b2b4 <L_shift>
 800b376:	9b01      	ldr	r3, [sp, #4]
 800b378:	2508      	movs	r5, #8
 800b37a:	429c      	cmp	r4, r3
 800b37c:	d905      	bls.n	800b38a <__hexnan+0x8a>
 800b37e:	1f26      	subs	r6, r4, #4
 800b380:	2500      	movs	r5, #0
 800b382:	0034      	movs	r4, r6
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	6035      	str	r5, [r6, #0]
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	e7d5      	b.n	800b33c <__hexnan+0x3c>
 800b390:	9b04      	ldr	r3, [sp, #16]
 800b392:	2b29      	cmp	r3, #41	; 0x29
 800b394:	d159      	bne.n	800b44a <__hexnan+0x14a>
 800b396:	9b05      	ldr	r3, [sp, #20]
 800b398:	9a08      	ldr	r2, [sp, #32]
 800b39a:	3302      	adds	r3, #2
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d052      	beq.n	800b44a <__hexnan+0x14a>
 800b3a4:	42b4      	cmp	r4, r6
 800b3a6:	d206      	bcs.n	800b3b6 <__hexnan+0xb6>
 800b3a8:	2d07      	cmp	r5, #7
 800b3aa:	dc04      	bgt.n	800b3b6 <__hexnan+0xb6>
 800b3ac:	002a      	movs	r2, r5
 800b3ae:	0031      	movs	r1, r6
 800b3b0:	0020      	movs	r0, r4
 800b3b2:	f7ff ff7f 	bl	800b2b4 <L_shift>
 800b3b6:	9b01      	ldr	r3, [sp, #4]
 800b3b8:	429c      	cmp	r4, r3
 800b3ba:	d935      	bls.n	800b428 <__hexnan+0x128>
 800b3bc:	001a      	movs	r2, r3
 800b3be:	0023      	movs	r3, r4
 800b3c0:	cb02      	ldmia	r3!, {r1}
 800b3c2:	c202      	stmia	r2!, {r1}
 800b3c4:	429f      	cmp	r7, r3
 800b3c6:	d2fb      	bcs.n	800b3c0 <__hexnan+0xc0>
 800b3c8:	9b02      	ldr	r3, [sp, #8]
 800b3ca:	1c62      	adds	r2, r4, #1
 800b3cc:	1ed9      	subs	r1, r3, #3
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	4291      	cmp	r1, r2
 800b3d2:	d305      	bcc.n	800b3e0 <__hexnan+0xe0>
 800b3d4:	9b02      	ldr	r3, [sp, #8]
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	1b1b      	subs	r3, r3, r4
 800b3da:	089b      	lsrs	r3, r3, #2
 800b3dc:	3301      	adds	r3, #1
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	9a01      	ldr	r2, [sp, #4]
 800b3e2:	18d3      	adds	r3, r2, r3
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	c304      	stmia	r3!, {r2}
 800b3e8:	429f      	cmp	r7, r3
 800b3ea:	d2fc      	bcs.n	800b3e6 <__hexnan+0xe6>
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d104      	bne.n	800b3fc <__hexnan+0xfc>
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	429f      	cmp	r7, r3
 800b3f6:	d126      	bne.n	800b446 <__hexnan+0x146>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	2005      	movs	r0, #5
 800b3fe:	e025      	b.n	800b44c <__hexnan+0x14c>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	3501      	adds	r5, #1
 800b404:	3301      	adds	r3, #1
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	2d08      	cmp	r5, #8
 800b40a:	dd06      	ble.n	800b41a <__hexnan+0x11a>
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	429c      	cmp	r4, r3
 800b410:	d9bb      	bls.n	800b38a <__hexnan+0x8a>
 800b412:	2300      	movs	r3, #0
 800b414:	2501      	movs	r5, #1
 800b416:	3c04      	subs	r4, #4
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	220f      	movs	r2, #15
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	4010      	ands	r0, r2
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	4303      	orrs	r3, r0
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	e7b0      	b.n	800b38a <__hexnan+0x8a>
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0de      	beq.n	800b3ec <__hexnan+0xec>
 800b42e:	2320      	movs	r3, #32
 800b430:	9a06      	ldr	r2, [sp, #24]
 800b432:	9902      	ldr	r1, [sp, #8]
 800b434:	1a9b      	subs	r3, r3, r2
 800b436:	2201      	movs	r2, #1
 800b438:	4252      	negs	r2, r2
 800b43a:	40da      	lsrs	r2, r3
 800b43c:	3904      	subs	r1, #4
 800b43e:	680b      	ldr	r3, [r1, #0]
 800b440:	4013      	ands	r3, r2
 800b442:	600b      	str	r3, [r1, #0]
 800b444:	e7d2      	b.n	800b3ec <__hexnan+0xec>
 800b446:	3f04      	subs	r7, #4
 800b448:	e7d0      	b.n	800b3ec <__hexnan+0xec>
 800b44a:	2004      	movs	r0, #4
 800b44c:	b00b      	add	sp, #44	; 0x2c
 800b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b450 <__ascii_mbtowc>:
 800b450:	b082      	sub	sp, #8
 800b452:	2900      	cmp	r1, #0
 800b454:	d100      	bne.n	800b458 <__ascii_mbtowc+0x8>
 800b456:	a901      	add	r1, sp, #4
 800b458:	1e10      	subs	r0, r2, #0
 800b45a:	d006      	beq.n	800b46a <__ascii_mbtowc+0x1a>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <__ascii_mbtowc+0x1e>
 800b460:	7813      	ldrb	r3, [r2, #0]
 800b462:	600b      	str	r3, [r1, #0]
 800b464:	7810      	ldrb	r0, [r2, #0]
 800b466:	1e43      	subs	r3, r0, #1
 800b468:	4198      	sbcs	r0, r3
 800b46a:	b002      	add	sp, #8
 800b46c:	4770      	bx	lr
 800b46e:	2002      	movs	r0, #2
 800b470:	4240      	negs	r0, r0
 800b472:	e7fa      	b.n	800b46a <__ascii_mbtowc+0x1a>

0800b474 <_Balloc>:
 800b474:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b476:	b570      	push	{r4, r5, r6, lr}
 800b478:	0006      	movs	r6, r0
 800b47a:	000c      	movs	r4, r1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d012      	beq.n	800b4a6 <_Balloc+0x32>
 800b480:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b482:	00a2      	lsls	r2, r4, #2
 800b484:	189b      	adds	r3, r3, r2
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	2800      	cmp	r0, #0
 800b48a:	d115      	bne.n	800b4b8 <_Balloc+0x44>
 800b48c:	2101      	movs	r1, #1
 800b48e:	000d      	movs	r5, r1
 800b490:	40a5      	lsls	r5, r4
 800b492:	1d6a      	adds	r2, r5, #5
 800b494:	0030      	movs	r0, r6
 800b496:	0092      	lsls	r2, r2, #2
 800b498:	f003 face 	bl	800ea38 <_calloc_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d009      	beq.n	800b4b4 <_Balloc+0x40>
 800b4a0:	6044      	str	r4, [r0, #4]
 800b4a2:	6085      	str	r5, [r0, #8]
 800b4a4:	e00a      	b.n	800b4bc <_Balloc+0x48>
 800b4a6:	2221      	movs	r2, #33	; 0x21
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	f003 fac5 	bl	800ea38 <_calloc_r>
 800b4ae:	6470      	str	r0, [r6, #68]	; 0x44
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d1e5      	bne.n	800b480 <_Balloc+0xc>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	6802      	ldr	r2, [r0, #0]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6103      	str	r3, [r0, #16]
 800b4c0:	60c3      	str	r3, [r0, #12]
 800b4c2:	e7f8      	b.n	800b4b6 <_Balloc+0x42>

0800b4c4 <_Bfree>:
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	d006      	beq.n	800b4d6 <_Bfree+0x12>
 800b4c8:	684a      	ldr	r2, [r1, #4]
 800b4ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b4cc:	0092      	lsls	r2, r2, #2
 800b4ce:	189b      	adds	r3, r3, r2
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	600a      	str	r2, [r1, #0]
 800b4d4:	6019      	str	r1, [r3, #0]
 800b4d6:	4770      	bx	lr

0800b4d8 <__multadd>:
 800b4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4da:	000e      	movs	r6, r1
 800b4dc:	9001      	str	r0, [sp, #4]
 800b4de:	000c      	movs	r4, r1
 800b4e0:	001d      	movs	r5, r3
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	690f      	ldr	r7, [r1, #16]
 800b4e6:	3614      	adds	r6, #20
 800b4e8:	6833      	ldr	r3, [r6, #0]
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	b299      	uxth	r1, r3
 800b4ee:	4351      	muls	r1, r2
 800b4f0:	0c1b      	lsrs	r3, r3, #16
 800b4f2:	4353      	muls	r3, r2
 800b4f4:	1949      	adds	r1, r1, r5
 800b4f6:	0c0d      	lsrs	r5, r1, #16
 800b4f8:	195b      	adds	r3, r3, r5
 800b4fa:	0c1d      	lsrs	r5, r3, #16
 800b4fc:	b289      	uxth	r1, r1
 800b4fe:	041b      	lsls	r3, r3, #16
 800b500:	185b      	adds	r3, r3, r1
 800b502:	c608      	stmia	r6!, {r3}
 800b504:	4287      	cmp	r7, r0
 800b506:	dcef      	bgt.n	800b4e8 <__multadd+0x10>
 800b508:	2d00      	cmp	r5, #0
 800b50a:	d022      	beq.n	800b552 <__multadd+0x7a>
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	42bb      	cmp	r3, r7
 800b510:	dc19      	bgt.n	800b546 <__multadd+0x6e>
 800b512:	6861      	ldr	r1, [r4, #4]
 800b514:	9801      	ldr	r0, [sp, #4]
 800b516:	3101      	adds	r1, #1
 800b518:	f7ff ffac 	bl	800b474 <_Balloc>
 800b51c:	1e06      	subs	r6, r0, #0
 800b51e:	d105      	bne.n	800b52c <__multadd+0x54>
 800b520:	0032      	movs	r2, r6
 800b522:	21ba      	movs	r1, #186	; 0xba
 800b524:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <__multadd+0x80>)
 800b526:	480d      	ldr	r0, [pc, #52]	; (800b55c <__multadd+0x84>)
 800b528:	f003 fa68 	bl	800e9fc <__assert_func>
 800b52c:	0021      	movs	r1, r4
 800b52e:	6922      	ldr	r2, [r4, #16]
 800b530:	310c      	adds	r1, #12
 800b532:	3202      	adds	r2, #2
 800b534:	0092      	lsls	r2, r2, #2
 800b536:	300c      	adds	r0, #12
 800b538:	f7ff fb01 	bl	800ab3e <memcpy>
 800b53c:	0021      	movs	r1, r4
 800b53e:	9801      	ldr	r0, [sp, #4]
 800b540:	f7ff ffc0 	bl	800b4c4 <_Bfree>
 800b544:	0034      	movs	r4, r6
 800b546:	1d3b      	adds	r3, r7, #4
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	18e3      	adds	r3, r4, r3
 800b54c:	605d      	str	r5, [r3, #4]
 800b54e:	1c7b      	adds	r3, r7, #1
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	0020      	movs	r0, r4
 800b554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	08012ee1 	.word	0x08012ee1
 800b55c:	08012f52 	.word	0x08012f52

0800b560 <__s2b>:
 800b560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b562:	0006      	movs	r6, r0
 800b564:	0018      	movs	r0, r3
 800b566:	000c      	movs	r4, r1
 800b568:	3008      	adds	r0, #8
 800b56a:	2109      	movs	r1, #9
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	0015      	movs	r5, r2
 800b570:	f7f4 fe6e 	bl	8000250 <__divsi3>
 800b574:	2301      	movs	r3, #1
 800b576:	2100      	movs	r1, #0
 800b578:	4283      	cmp	r3, r0
 800b57a:	db0a      	blt.n	800b592 <__s2b+0x32>
 800b57c:	0030      	movs	r0, r6
 800b57e:	f7ff ff79 	bl	800b474 <_Balloc>
 800b582:	1e01      	subs	r1, r0, #0
 800b584:	d108      	bne.n	800b598 <__s2b+0x38>
 800b586:	000a      	movs	r2, r1
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <__s2b+0x90>)
 800b58a:	481a      	ldr	r0, [pc, #104]	; (800b5f4 <__s2b+0x94>)
 800b58c:	31d3      	adds	r1, #211	; 0xd3
 800b58e:	f003 fa35 	bl	800e9fc <__assert_func>
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	3101      	adds	r1, #1
 800b596:	e7ef      	b.n	800b578 <__s2b+0x18>
 800b598:	9b08      	ldr	r3, [sp, #32]
 800b59a:	6143      	str	r3, [r0, #20]
 800b59c:	2301      	movs	r3, #1
 800b59e:	6103      	str	r3, [r0, #16]
 800b5a0:	2d09      	cmp	r5, #9
 800b5a2:	dd18      	ble.n	800b5d6 <__s2b+0x76>
 800b5a4:	0023      	movs	r3, r4
 800b5a6:	3309      	adds	r3, #9
 800b5a8:	001f      	movs	r7, r3
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	1964      	adds	r4, r4, r5
 800b5ae:	783b      	ldrb	r3, [r7, #0]
 800b5b0:	220a      	movs	r2, #10
 800b5b2:	0030      	movs	r0, r6
 800b5b4:	3b30      	subs	r3, #48	; 0x30
 800b5b6:	f7ff ff8f 	bl	800b4d8 <__multadd>
 800b5ba:	3701      	adds	r7, #1
 800b5bc:	0001      	movs	r1, r0
 800b5be:	42a7      	cmp	r7, r4
 800b5c0:	d1f5      	bne.n	800b5ae <__s2b+0x4e>
 800b5c2:	002c      	movs	r4, r5
 800b5c4:	9b00      	ldr	r3, [sp, #0]
 800b5c6:	3c08      	subs	r4, #8
 800b5c8:	191c      	adds	r4, r3, r4
 800b5ca:	002f      	movs	r7, r5
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	429f      	cmp	r7, r3
 800b5d0:	db04      	blt.n	800b5dc <__s2b+0x7c>
 800b5d2:	0008      	movs	r0, r1
 800b5d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5d6:	2509      	movs	r5, #9
 800b5d8:	340a      	adds	r4, #10
 800b5da:	e7f6      	b.n	800b5ca <__s2b+0x6a>
 800b5dc:	1b63      	subs	r3, r4, r5
 800b5de:	5ddb      	ldrb	r3, [r3, r7]
 800b5e0:	220a      	movs	r2, #10
 800b5e2:	0030      	movs	r0, r6
 800b5e4:	3b30      	subs	r3, #48	; 0x30
 800b5e6:	f7ff ff77 	bl	800b4d8 <__multadd>
 800b5ea:	3701      	adds	r7, #1
 800b5ec:	0001      	movs	r1, r0
 800b5ee:	e7ed      	b.n	800b5cc <__s2b+0x6c>
 800b5f0:	08012ee1 	.word	0x08012ee1
 800b5f4:	08012f52 	.word	0x08012f52

0800b5f8 <__hi0bits>:
 800b5f8:	0003      	movs	r3, r0
 800b5fa:	0c02      	lsrs	r2, r0, #16
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4282      	cmp	r2, r0
 800b600:	d101      	bne.n	800b606 <__hi0bits+0xe>
 800b602:	041b      	lsls	r3, r3, #16
 800b604:	3010      	adds	r0, #16
 800b606:	0e1a      	lsrs	r2, r3, #24
 800b608:	d101      	bne.n	800b60e <__hi0bits+0x16>
 800b60a:	3008      	adds	r0, #8
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	0f1a      	lsrs	r2, r3, #28
 800b610:	d101      	bne.n	800b616 <__hi0bits+0x1e>
 800b612:	3004      	adds	r0, #4
 800b614:	011b      	lsls	r3, r3, #4
 800b616:	0f9a      	lsrs	r2, r3, #30
 800b618:	d101      	bne.n	800b61e <__hi0bits+0x26>
 800b61a:	3002      	adds	r0, #2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db03      	blt.n	800b62a <__hi0bits+0x32>
 800b622:	3001      	adds	r0, #1
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	d400      	bmi.n	800b62a <__hi0bits+0x32>
 800b628:	2020      	movs	r0, #32
 800b62a:	4770      	bx	lr

0800b62c <__lo0bits>:
 800b62c:	6803      	ldr	r3, [r0, #0]
 800b62e:	0001      	movs	r1, r0
 800b630:	2207      	movs	r2, #7
 800b632:	0018      	movs	r0, r3
 800b634:	4010      	ands	r0, r2
 800b636:	4213      	tst	r3, r2
 800b638:	d00d      	beq.n	800b656 <__lo0bits+0x2a>
 800b63a:	3a06      	subs	r2, #6
 800b63c:	2000      	movs	r0, #0
 800b63e:	4213      	tst	r3, r2
 800b640:	d105      	bne.n	800b64e <__lo0bits+0x22>
 800b642:	3002      	adds	r0, #2
 800b644:	4203      	tst	r3, r0
 800b646:	d003      	beq.n	800b650 <__lo0bits+0x24>
 800b648:	40d3      	lsrs	r3, r2
 800b64a:	0010      	movs	r0, r2
 800b64c:	600b      	str	r3, [r1, #0]
 800b64e:	4770      	bx	lr
 800b650:	089b      	lsrs	r3, r3, #2
 800b652:	600b      	str	r3, [r1, #0]
 800b654:	e7fb      	b.n	800b64e <__lo0bits+0x22>
 800b656:	b29a      	uxth	r2, r3
 800b658:	2a00      	cmp	r2, #0
 800b65a:	d101      	bne.n	800b660 <__lo0bits+0x34>
 800b65c:	2010      	movs	r0, #16
 800b65e:	0c1b      	lsrs	r3, r3, #16
 800b660:	b2da      	uxtb	r2, r3
 800b662:	2a00      	cmp	r2, #0
 800b664:	d101      	bne.n	800b66a <__lo0bits+0x3e>
 800b666:	3008      	adds	r0, #8
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	071a      	lsls	r2, r3, #28
 800b66c:	d101      	bne.n	800b672 <__lo0bits+0x46>
 800b66e:	3004      	adds	r0, #4
 800b670:	091b      	lsrs	r3, r3, #4
 800b672:	079a      	lsls	r2, r3, #30
 800b674:	d101      	bne.n	800b67a <__lo0bits+0x4e>
 800b676:	3002      	adds	r0, #2
 800b678:	089b      	lsrs	r3, r3, #2
 800b67a:	07da      	lsls	r2, r3, #31
 800b67c:	d4e9      	bmi.n	800b652 <__lo0bits+0x26>
 800b67e:	3001      	adds	r0, #1
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	d1e6      	bne.n	800b652 <__lo0bits+0x26>
 800b684:	2020      	movs	r0, #32
 800b686:	e7e2      	b.n	800b64e <__lo0bits+0x22>

0800b688 <__i2b>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	000c      	movs	r4, r1
 800b68c:	2101      	movs	r1, #1
 800b68e:	f7ff fef1 	bl	800b474 <_Balloc>
 800b692:	2800      	cmp	r0, #0
 800b694:	d107      	bne.n	800b6a6 <__i2b+0x1e>
 800b696:	2146      	movs	r1, #70	; 0x46
 800b698:	4c05      	ldr	r4, [pc, #20]	; (800b6b0 <__i2b+0x28>)
 800b69a:	0002      	movs	r2, r0
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <__i2b+0x2c>)
 800b69e:	0020      	movs	r0, r4
 800b6a0:	31ff      	adds	r1, #255	; 0xff
 800b6a2:	f003 f9ab 	bl	800e9fc <__assert_func>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	6144      	str	r4, [r0, #20]
 800b6aa:	6103      	str	r3, [r0, #16]
 800b6ac:	bd10      	pop	{r4, pc}
 800b6ae:	46c0      	nop			; (mov r8, r8)
 800b6b0:	08012f52 	.word	0x08012f52
 800b6b4:	08012ee1 	.word	0x08012ee1

0800b6b8 <__multiply>:
 800b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ba:	0015      	movs	r5, r2
 800b6bc:	690a      	ldr	r2, [r1, #16]
 800b6be:	692b      	ldr	r3, [r5, #16]
 800b6c0:	000c      	movs	r4, r1
 800b6c2:	b08b      	sub	sp, #44	; 0x2c
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	da01      	bge.n	800b6cc <__multiply+0x14>
 800b6c8:	002c      	movs	r4, r5
 800b6ca:	000d      	movs	r5, r1
 800b6cc:	6927      	ldr	r7, [r4, #16]
 800b6ce:	692e      	ldr	r6, [r5, #16]
 800b6d0:	6861      	ldr	r1, [r4, #4]
 800b6d2:	19bb      	adds	r3, r7, r6
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	19ba      	adds	r2, r7, r6
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	da00      	bge.n	800b6e0 <__multiply+0x28>
 800b6de:	3101      	adds	r1, #1
 800b6e0:	f7ff fec8 	bl	800b474 <_Balloc>
 800b6e4:	9002      	str	r0, [sp, #8]
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d106      	bne.n	800b6f8 <__multiply+0x40>
 800b6ea:	21b1      	movs	r1, #177	; 0xb1
 800b6ec:	4b48      	ldr	r3, [pc, #288]	; (800b810 <__multiply+0x158>)
 800b6ee:	4849      	ldr	r0, [pc, #292]	; (800b814 <__multiply+0x15c>)
 800b6f0:	9a02      	ldr	r2, [sp, #8]
 800b6f2:	0049      	lsls	r1, r1, #1
 800b6f4:	f003 f982 	bl	800e9fc <__assert_func>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	3314      	adds	r3, #20
 800b6fe:	469c      	mov	ip, r3
 800b700:	19bb      	adds	r3, r7, r6
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4463      	add	r3, ip
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	4663      	mov	r3, ip
 800b70a:	9904      	ldr	r1, [sp, #16]
 800b70c:	428b      	cmp	r3, r1
 800b70e:	d32a      	bcc.n	800b766 <__multiply+0xae>
 800b710:	0023      	movs	r3, r4
 800b712:	00bf      	lsls	r7, r7, #2
 800b714:	3314      	adds	r3, #20
 800b716:	3514      	adds	r5, #20
 800b718:	9308      	str	r3, [sp, #32]
 800b71a:	00b6      	lsls	r6, r6, #2
 800b71c:	19db      	adds	r3, r3, r7
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	19ab      	adds	r3, r5, r6
 800b722:	9309      	str	r3, [sp, #36]	; 0x24
 800b724:	2304      	movs	r3, #4
 800b726:	9306      	str	r3, [sp, #24]
 800b728:	0023      	movs	r3, r4
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	3315      	adds	r3, #21
 800b72e:	9501      	str	r5, [sp, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d305      	bcc.n	800b740 <__multiply+0x88>
 800b734:	1b13      	subs	r3, r2, r4
 800b736:	3b15      	subs	r3, #21
 800b738:	089b      	lsrs	r3, r3, #2
 800b73a:	3301      	adds	r3, #1
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	9306      	str	r3, [sp, #24]
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b744:	4293      	cmp	r3, r2
 800b746:	d310      	bcc.n	800b76a <__multiply+0xb2>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd05      	ble.n	800b75a <__multiply+0xa2>
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	3b04      	subs	r3, #4
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d056      	beq.n	800b808 <__multiply+0x150>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	9a03      	ldr	r2, [sp, #12]
 800b75e:	0018      	movs	r0, r3
 800b760:	611a      	str	r2, [r3, #16]
 800b762:	b00b      	add	sp, #44	; 0x2c
 800b764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b766:	c304      	stmia	r3!, {r2}
 800b768:	e7cf      	b.n	800b70a <__multiply+0x52>
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	b280      	uxth	r0, r0
 800b770:	2800      	cmp	r0, #0
 800b772:	d01e      	beq.n	800b7b2 <__multiply+0xfa>
 800b774:	4667      	mov	r7, ip
 800b776:	2500      	movs	r5, #0
 800b778:	9e08      	ldr	r6, [sp, #32]
 800b77a:	ce02      	ldmia	r6!, {r1}
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	9307      	str	r3, [sp, #28]
 800b780:	b28b      	uxth	r3, r1
 800b782:	4343      	muls	r3, r0
 800b784:	001a      	movs	r2, r3
 800b786:	466b      	mov	r3, sp
 800b788:	8b9b      	ldrh	r3, [r3, #28]
 800b78a:	18d3      	adds	r3, r2, r3
 800b78c:	195b      	adds	r3, r3, r5
 800b78e:	0c0d      	lsrs	r5, r1, #16
 800b790:	4345      	muls	r5, r0
 800b792:	9a07      	ldr	r2, [sp, #28]
 800b794:	0c11      	lsrs	r1, r2, #16
 800b796:	1869      	adds	r1, r5, r1
 800b798:	0c1a      	lsrs	r2, r3, #16
 800b79a:	188a      	adds	r2, r1, r2
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	0c15      	lsrs	r5, r2, #16
 800b7a0:	0412      	lsls	r2, r2, #16
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	9b05      	ldr	r3, [sp, #20]
 800b7a6:	c704      	stmia	r7!, {r2}
 800b7a8:	42b3      	cmp	r3, r6
 800b7aa:	d8e6      	bhi.n	800b77a <__multiply+0xc2>
 800b7ac:	4663      	mov	r3, ip
 800b7ae:	9a06      	ldr	r2, [sp, #24]
 800b7b0:	509d      	str	r5, [r3, r2]
 800b7b2:	9b01      	ldr	r3, [sp, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	0c00      	lsrs	r0, r0, #16
 800b7b8:	d020      	beq.n	800b7fc <__multiply+0x144>
 800b7ba:	4663      	mov	r3, ip
 800b7bc:	0025      	movs	r5, r4
 800b7be:	4661      	mov	r1, ip
 800b7c0:	2700      	movs	r7, #0
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3514      	adds	r5, #20
 800b7c6:	682a      	ldr	r2, [r5, #0]
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	4342      	muls	r2, r0
 800b7ce:	0c36      	lsrs	r6, r6, #16
 800b7d0:	1992      	adds	r2, r2, r6
 800b7d2:	19d2      	adds	r2, r2, r7
 800b7d4:	0416      	lsls	r6, r2, #16
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	431e      	orrs	r6, r3
 800b7da:	600e      	str	r6, [r1, #0]
 800b7dc:	cd40      	ldmia	r5!, {r6}
 800b7de:	684b      	ldr	r3, [r1, #4]
 800b7e0:	0c36      	lsrs	r6, r6, #16
 800b7e2:	4346      	muls	r6, r0
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	0c12      	lsrs	r2, r2, #16
 800b7e8:	18f3      	adds	r3, r6, r3
 800b7ea:	189b      	adds	r3, r3, r2
 800b7ec:	9a05      	ldr	r2, [sp, #20]
 800b7ee:	0c1f      	lsrs	r7, r3, #16
 800b7f0:	3104      	adds	r1, #4
 800b7f2:	42aa      	cmp	r2, r5
 800b7f4:	d8e7      	bhi.n	800b7c6 <__multiply+0x10e>
 800b7f6:	4662      	mov	r2, ip
 800b7f8:	9906      	ldr	r1, [sp, #24]
 800b7fa:	5053      	str	r3, [r2, r1]
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	3304      	adds	r3, #4
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	2304      	movs	r3, #4
 800b804:	449c      	add	ip, r3
 800b806:	e79b      	b.n	800b740 <__multiply+0x88>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	e79b      	b.n	800b748 <__multiply+0x90>
 800b810:	08012ee1 	.word	0x08012ee1
 800b814:	08012f52 	.word	0x08012f52

0800b818 <__pow5mult>:
 800b818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81a:	2303      	movs	r3, #3
 800b81c:	0015      	movs	r5, r2
 800b81e:	0007      	movs	r7, r0
 800b820:	000e      	movs	r6, r1
 800b822:	401a      	ands	r2, r3
 800b824:	421d      	tst	r5, r3
 800b826:	d008      	beq.n	800b83a <__pow5mult+0x22>
 800b828:	491a      	ldr	r1, [pc, #104]	; (800b894 <__pow5mult+0x7c>)
 800b82a:	3a01      	subs	r2, #1
 800b82c:	0092      	lsls	r2, r2, #2
 800b82e:	5852      	ldr	r2, [r2, r1]
 800b830:	2300      	movs	r3, #0
 800b832:	0031      	movs	r1, r6
 800b834:	f7ff fe50 	bl	800b4d8 <__multadd>
 800b838:	0006      	movs	r6, r0
 800b83a:	10ad      	asrs	r5, r5, #2
 800b83c:	d027      	beq.n	800b88e <__pow5mult+0x76>
 800b83e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b840:	2c00      	cmp	r4, #0
 800b842:	d107      	bne.n	800b854 <__pow5mult+0x3c>
 800b844:	0038      	movs	r0, r7
 800b846:	4914      	ldr	r1, [pc, #80]	; (800b898 <__pow5mult+0x80>)
 800b848:	f7ff ff1e 	bl	800b688 <__i2b>
 800b84c:	2300      	movs	r3, #0
 800b84e:	0004      	movs	r4, r0
 800b850:	6438      	str	r0, [r7, #64]	; 0x40
 800b852:	6003      	str	r3, [r0, #0]
 800b854:	2301      	movs	r3, #1
 800b856:	421d      	tst	r5, r3
 800b858:	d00a      	beq.n	800b870 <__pow5mult+0x58>
 800b85a:	0031      	movs	r1, r6
 800b85c:	0022      	movs	r2, r4
 800b85e:	0038      	movs	r0, r7
 800b860:	f7ff ff2a 	bl	800b6b8 <__multiply>
 800b864:	0031      	movs	r1, r6
 800b866:	9001      	str	r0, [sp, #4]
 800b868:	0038      	movs	r0, r7
 800b86a:	f7ff fe2b 	bl	800b4c4 <_Bfree>
 800b86e:	9e01      	ldr	r6, [sp, #4]
 800b870:	106d      	asrs	r5, r5, #1
 800b872:	d00c      	beq.n	800b88e <__pow5mult+0x76>
 800b874:	6820      	ldr	r0, [r4, #0]
 800b876:	2800      	cmp	r0, #0
 800b878:	d107      	bne.n	800b88a <__pow5mult+0x72>
 800b87a:	0022      	movs	r2, r4
 800b87c:	0021      	movs	r1, r4
 800b87e:	0038      	movs	r0, r7
 800b880:	f7ff ff1a 	bl	800b6b8 <__multiply>
 800b884:	2300      	movs	r3, #0
 800b886:	6020      	str	r0, [r4, #0]
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	0004      	movs	r4, r0
 800b88c:	e7e2      	b.n	800b854 <__pow5mult+0x3c>
 800b88e:	0030      	movs	r0, r6
 800b890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	080130a0 	.word	0x080130a0
 800b898:	00000271 	.word	0x00000271

0800b89c <__lshift>:
 800b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89e:	000c      	movs	r4, r1
 800b8a0:	0017      	movs	r7, r2
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	1155      	asrs	r5, r2, #5
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	18eb      	adds	r3, r5, r3
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	6849      	ldr	r1, [r1, #4]
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	9004      	str	r0, [sp, #16]
 800b8b6:	9a01      	ldr	r2, [sp, #4]
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	db10      	blt.n	800b8de <__lshift+0x42>
 800b8bc:	9804      	ldr	r0, [sp, #16]
 800b8be:	f7ff fdd9 	bl	800b474 <_Balloc>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	0002      	movs	r2, r0
 800b8c6:	0006      	movs	r6, r0
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	3214      	adds	r2, #20
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	d10c      	bne.n	800b8ea <__lshift+0x4e>
 800b8d0:	31df      	adds	r1, #223	; 0xdf
 800b8d2:	0032      	movs	r2, r6
 800b8d4:	4b26      	ldr	r3, [pc, #152]	; (800b970 <__lshift+0xd4>)
 800b8d6:	4827      	ldr	r0, [pc, #156]	; (800b974 <__lshift+0xd8>)
 800b8d8:	31ff      	adds	r1, #255	; 0xff
 800b8da:	f003 f88f 	bl	800e9fc <__assert_func>
 800b8de:	3101      	adds	r1, #1
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	e7e8      	b.n	800b8b6 <__lshift+0x1a>
 800b8e4:	0098      	lsls	r0, r3, #2
 800b8e6:	5011      	str	r1, [r2, r0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	42ab      	cmp	r3, r5
 800b8ec:	dbfa      	blt.n	800b8e4 <__lshift+0x48>
 800b8ee:	43eb      	mvns	r3, r5
 800b8f0:	17db      	asrs	r3, r3, #31
 800b8f2:	401d      	ands	r5, r3
 800b8f4:	211f      	movs	r1, #31
 800b8f6:	0023      	movs	r3, r4
 800b8f8:	0038      	movs	r0, r7
 800b8fa:	00ad      	lsls	r5, r5, #2
 800b8fc:	1955      	adds	r5, r2, r5
 800b8fe:	6922      	ldr	r2, [r4, #16]
 800b900:	3314      	adds	r3, #20
 800b902:	0092      	lsls	r2, r2, #2
 800b904:	4008      	ands	r0, r1
 800b906:	4684      	mov	ip, r0
 800b908:	189a      	adds	r2, r3, r2
 800b90a:	420f      	tst	r7, r1
 800b90c:	d02a      	beq.n	800b964 <__lshift+0xc8>
 800b90e:	3101      	adds	r1, #1
 800b910:	1a09      	subs	r1, r1, r0
 800b912:	9105      	str	r1, [sp, #20]
 800b914:	2100      	movs	r1, #0
 800b916:	9503      	str	r5, [sp, #12]
 800b918:	4667      	mov	r7, ip
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	40b8      	lsls	r0, r7
 800b91e:	4308      	orrs	r0, r1
 800b920:	9903      	ldr	r1, [sp, #12]
 800b922:	c101      	stmia	r1!, {r0}
 800b924:	9103      	str	r1, [sp, #12]
 800b926:	9805      	ldr	r0, [sp, #20]
 800b928:	cb02      	ldmia	r3!, {r1}
 800b92a:	40c1      	lsrs	r1, r0
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d8f3      	bhi.n	800b918 <__lshift+0x7c>
 800b930:	0020      	movs	r0, r4
 800b932:	3015      	adds	r0, #21
 800b934:	2304      	movs	r3, #4
 800b936:	4282      	cmp	r2, r0
 800b938:	d304      	bcc.n	800b944 <__lshift+0xa8>
 800b93a:	1b13      	subs	r3, r2, r4
 800b93c:	3b15      	subs	r3, #21
 800b93e:	089b      	lsrs	r3, r3, #2
 800b940:	3301      	adds	r3, #1
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	50e9      	str	r1, [r5, r3]
 800b946:	2900      	cmp	r1, #0
 800b948:	d002      	beq.n	800b950 <__lshift+0xb4>
 800b94a:	9b02      	ldr	r3, [sp, #8]
 800b94c:	3302      	adds	r3, #2
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	9b01      	ldr	r3, [sp, #4]
 800b952:	9804      	ldr	r0, [sp, #16]
 800b954:	3b01      	subs	r3, #1
 800b956:	0021      	movs	r1, r4
 800b958:	6133      	str	r3, [r6, #16]
 800b95a:	f7ff fdb3 	bl	800b4c4 <_Bfree>
 800b95e:	0030      	movs	r0, r6
 800b960:	b007      	add	sp, #28
 800b962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b964:	cb02      	ldmia	r3!, {r1}
 800b966:	c502      	stmia	r5!, {r1}
 800b968:	429a      	cmp	r2, r3
 800b96a:	d8fb      	bhi.n	800b964 <__lshift+0xc8>
 800b96c:	e7f0      	b.n	800b950 <__lshift+0xb4>
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	08012ee1 	.word	0x08012ee1
 800b974:	08012f52 	.word	0x08012f52

0800b978 <__mcmp>:
 800b978:	b530      	push	{r4, r5, lr}
 800b97a:	690b      	ldr	r3, [r1, #16]
 800b97c:	6904      	ldr	r4, [r0, #16]
 800b97e:	0002      	movs	r2, r0
 800b980:	1ae0      	subs	r0, r4, r3
 800b982:	429c      	cmp	r4, r3
 800b984:	d10e      	bne.n	800b9a4 <__mcmp+0x2c>
 800b986:	3214      	adds	r2, #20
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	3114      	adds	r1, #20
 800b98c:	0014      	movs	r4, r2
 800b98e:	18c9      	adds	r1, r1, r3
 800b990:	18d2      	adds	r2, r2, r3
 800b992:	3a04      	subs	r2, #4
 800b994:	3904      	subs	r1, #4
 800b996:	6815      	ldr	r5, [r2, #0]
 800b998:	680b      	ldr	r3, [r1, #0]
 800b99a:	429d      	cmp	r5, r3
 800b99c:	d003      	beq.n	800b9a6 <__mcmp+0x2e>
 800b99e:	2001      	movs	r0, #1
 800b9a0:	429d      	cmp	r5, r3
 800b9a2:	d303      	bcc.n	800b9ac <__mcmp+0x34>
 800b9a4:	bd30      	pop	{r4, r5, pc}
 800b9a6:	4294      	cmp	r4, r2
 800b9a8:	d3f3      	bcc.n	800b992 <__mcmp+0x1a>
 800b9aa:	e7fb      	b.n	800b9a4 <__mcmp+0x2c>
 800b9ac:	4240      	negs	r0, r0
 800b9ae:	e7f9      	b.n	800b9a4 <__mcmp+0x2c>

0800b9b0 <__mdiff>:
 800b9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b2:	000e      	movs	r6, r1
 800b9b4:	0007      	movs	r7, r0
 800b9b6:	0011      	movs	r1, r2
 800b9b8:	0030      	movs	r0, r6
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	0014      	movs	r4, r2
 800b9be:	f7ff ffdb 	bl	800b978 <__mcmp>
 800b9c2:	1e05      	subs	r5, r0, #0
 800b9c4:	d110      	bne.n	800b9e8 <__mdiff+0x38>
 800b9c6:	0001      	movs	r1, r0
 800b9c8:	0038      	movs	r0, r7
 800b9ca:	f7ff fd53 	bl	800b474 <_Balloc>
 800b9ce:	1e02      	subs	r2, r0, #0
 800b9d0:	d104      	bne.n	800b9dc <__mdiff+0x2c>
 800b9d2:	4b3f      	ldr	r3, [pc, #252]	; (800bad0 <__mdiff+0x120>)
 800b9d4:	483f      	ldr	r0, [pc, #252]	; (800bad4 <__mdiff+0x124>)
 800b9d6:	4940      	ldr	r1, [pc, #256]	; (800bad8 <__mdiff+0x128>)
 800b9d8:	f003 f810 	bl	800e9fc <__assert_func>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	6145      	str	r5, [r0, #20]
 800b9e0:	6103      	str	r3, [r0, #16]
 800b9e2:	0010      	movs	r0, r2
 800b9e4:	b007      	add	sp, #28
 800b9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	db04      	blt.n	800b9fa <__mdiff+0x4a>
 800b9f0:	0023      	movs	r3, r4
 800b9f2:	0034      	movs	r4, r6
 800b9f4:	001e      	movs	r6, r3
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	0038      	movs	r0, r7
 800b9fc:	6861      	ldr	r1, [r4, #4]
 800b9fe:	f7ff fd39 	bl	800b474 <_Balloc>
 800ba02:	1e02      	subs	r2, r0, #0
 800ba04:	d103      	bne.n	800ba0e <__mdiff+0x5e>
 800ba06:	4b32      	ldr	r3, [pc, #200]	; (800bad0 <__mdiff+0x120>)
 800ba08:	4832      	ldr	r0, [pc, #200]	; (800bad4 <__mdiff+0x124>)
 800ba0a:	4934      	ldr	r1, [pc, #208]	; (800badc <__mdiff+0x12c>)
 800ba0c:	e7e4      	b.n	800b9d8 <__mdiff+0x28>
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	2700      	movs	r7, #0
 800ba12:	60c3      	str	r3, [r0, #12]
 800ba14:	6920      	ldr	r0, [r4, #16]
 800ba16:	3414      	adds	r4, #20
 800ba18:	0083      	lsls	r3, r0, #2
 800ba1a:	18e3      	adds	r3, r4, r3
 800ba1c:	0021      	movs	r1, r4
 800ba1e:	9401      	str	r4, [sp, #4]
 800ba20:	0034      	movs	r4, r6
 800ba22:	9302      	str	r3, [sp, #8]
 800ba24:	6933      	ldr	r3, [r6, #16]
 800ba26:	3414      	adds	r4, #20
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	18e3      	adds	r3, r4, r3
 800ba2c:	9303      	str	r3, [sp, #12]
 800ba2e:	0013      	movs	r3, r2
 800ba30:	3314      	adds	r3, #20
 800ba32:	469c      	mov	ip, r3
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	9104      	str	r1, [sp, #16]
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	cc02      	ldmia	r4!, {r1}
 800ba3c:	cb20      	ldmia	r3!, {r5}
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	b2ab      	uxth	r3, r5
 800ba42:	19df      	adds	r7, r3, r7
 800ba44:	b28b      	uxth	r3, r1
 800ba46:	1afb      	subs	r3, r7, r3
 800ba48:	0c09      	lsrs	r1, r1, #16
 800ba4a:	0c2d      	lsrs	r5, r5, #16
 800ba4c:	1a6d      	subs	r5, r5, r1
 800ba4e:	1419      	asrs	r1, r3, #16
 800ba50:	1869      	adds	r1, r5, r1
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	140f      	asrs	r7, r1, #16
 800ba56:	0409      	lsls	r1, r1, #16
 800ba58:	4319      	orrs	r1, r3
 800ba5a:	4663      	mov	r3, ip
 800ba5c:	c302      	stmia	r3!, {r1}
 800ba5e:	469c      	mov	ip, r3
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	d8e8      	bhi.n	800ba38 <__mdiff+0x88>
 800ba66:	0031      	movs	r1, r6
 800ba68:	9c03      	ldr	r4, [sp, #12]
 800ba6a:	3115      	adds	r1, #21
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	428c      	cmp	r4, r1
 800ba70:	d304      	bcc.n	800ba7c <__mdiff+0xcc>
 800ba72:	1ba3      	subs	r3, r4, r6
 800ba74:	3b15      	subs	r3, #21
 800ba76:	089b      	lsrs	r3, r3, #2
 800ba78:	3301      	adds	r3, #1
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	9901      	ldr	r1, [sp, #4]
 800ba7e:	18cd      	adds	r5, r1, r3
 800ba80:	9905      	ldr	r1, [sp, #20]
 800ba82:	002e      	movs	r6, r5
 800ba84:	18cb      	adds	r3, r1, r3
 800ba86:	469c      	mov	ip, r3
 800ba88:	9902      	ldr	r1, [sp, #8]
 800ba8a:	428e      	cmp	r6, r1
 800ba8c:	d310      	bcc.n	800bab0 <__mdiff+0x100>
 800ba8e:	9e02      	ldr	r6, [sp, #8]
 800ba90:	1ee9      	subs	r1, r5, #3
 800ba92:	2400      	movs	r4, #0
 800ba94:	428e      	cmp	r6, r1
 800ba96:	d304      	bcc.n	800baa2 <__mdiff+0xf2>
 800ba98:	0031      	movs	r1, r6
 800ba9a:	3103      	adds	r1, #3
 800ba9c:	1b49      	subs	r1, r1, r5
 800ba9e:	0889      	lsrs	r1, r1, #2
 800baa0:	008c      	lsls	r4, r1, #2
 800baa2:	191b      	adds	r3, r3, r4
 800baa4:	3b04      	subs	r3, #4
 800baa6:	6819      	ldr	r1, [r3, #0]
 800baa8:	2900      	cmp	r1, #0
 800baaa:	d00f      	beq.n	800bacc <__mdiff+0x11c>
 800baac:	6110      	str	r0, [r2, #16]
 800baae:	e798      	b.n	800b9e2 <__mdiff+0x32>
 800bab0:	ce02      	ldmia	r6!, {r1}
 800bab2:	b28c      	uxth	r4, r1
 800bab4:	19e4      	adds	r4, r4, r7
 800bab6:	0c0f      	lsrs	r7, r1, #16
 800bab8:	1421      	asrs	r1, r4, #16
 800baba:	1879      	adds	r1, r7, r1
 800babc:	b2a4      	uxth	r4, r4
 800babe:	140f      	asrs	r7, r1, #16
 800bac0:	0409      	lsls	r1, r1, #16
 800bac2:	4321      	orrs	r1, r4
 800bac4:	4664      	mov	r4, ip
 800bac6:	c402      	stmia	r4!, {r1}
 800bac8:	46a4      	mov	ip, r4
 800baca:	e7dd      	b.n	800ba88 <__mdiff+0xd8>
 800bacc:	3801      	subs	r0, #1
 800bace:	e7e9      	b.n	800baa4 <__mdiff+0xf4>
 800bad0:	08012ee1 	.word	0x08012ee1
 800bad4:	08012f52 	.word	0x08012f52
 800bad8:	00000237 	.word	0x00000237
 800badc:	00000245 	.word	0x00000245

0800bae0 <__ulp>:
 800bae0:	2000      	movs	r0, #0
 800bae2:	4b0b      	ldr	r3, [pc, #44]	; (800bb10 <__ulp+0x30>)
 800bae4:	4019      	ands	r1, r3
 800bae6:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <__ulp+0x34>)
 800bae8:	18c9      	adds	r1, r1, r3
 800baea:	4281      	cmp	r1, r0
 800baec:	dc06      	bgt.n	800bafc <__ulp+0x1c>
 800baee:	4249      	negs	r1, r1
 800baf0:	150b      	asrs	r3, r1, #20
 800baf2:	2b13      	cmp	r3, #19
 800baf4:	dc03      	bgt.n	800bafe <__ulp+0x1e>
 800baf6:	2180      	movs	r1, #128	; 0x80
 800baf8:	0309      	lsls	r1, r1, #12
 800bafa:	4119      	asrs	r1, r3
 800bafc:	4770      	bx	lr
 800bafe:	3b14      	subs	r3, #20
 800bb00:	2001      	movs	r0, #1
 800bb02:	2b1e      	cmp	r3, #30
 800bb04:	dc02      	bgt.n	800bb0c <__ulp+0x2c>
 800bb06:	2080      	movs	r0, #128	; 0x80
 800bb08:	0600      	lsls	r0, r0, #24
 800bb0a:	40d8      	lsrs	r0, r3
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	e7f5      	b.n	800bafc <__ulp+0x1c>
 800bb10:	7ff00000 	.word	0x7ff00000
 800bb14:	fcc00000 	.word	0xfcc00000

0800bb18 <__b2d>:
 800bb18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb1a:	0006      	movs	r6, r0
 800bb1c:	6903      	ldr	r3, [r0, #16]
 800bb1e:	3614      	adds	r6, #20
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	18f3      	adds	r3, r6, r3
 800bb24:	1f1d      	subs	r5, r3, #4
 800bb26:	682c      	ldr	r4, [r5, #0]
 800bb28:	000f      	movs	r7, r1
 800bb2a:	0020      	movs	r0, r4
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	f7ff fd63 	bl	800b5f8 <__hi0bits>
 800bb32:	2220      	movs	r2, #32
 800bb34:	1a12      	subs	r2, r2, r0
 800bb36:	603a      	str	r2, [r7, #0]
 800bb38:	0003      	movs	r3, r0
 800bb3a:	4a1c      	ldr	r2, [pc, #112]	; (800bbac <__b2d+0x94>)
 800bb3c:	280a      	cmp	r0, #10
 800bb3e:	dc15      	bgt.n	800bb6c <__b2d+0x54>
 800bb40:	210b      	movs	r1, #11
 800bb42:	0027      	movs	r7, r4
 800bb44:	1a09      	subs	r1, r1, r0
 800bb46:	40cf      	lsrs	r7, r1
 800bb48:	433a      	orrs	r2, r7
 800bb4a:	468c      	mov	ip, r1
 800bb4c:	0011      	movs	r1, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	42ae      	cmp	r6, r5
 800bb52:	d202      	bcs.n	800bb5a <__b2d+0x42>
 800bb54:	9a01      	ldr	r2, [sp, #4]
 800bb56:	3a08      	subs	r2, #8
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	3315      	adds	r3, #21
 800bb5c:	409c      	lsls	r4, r3
 800bb5e:	4663      	mov	r3, ip
 800bb60:	0027      	movs	r7, r4
 800bb62:	40da      	lsrs	r2, r3
 800bb64:	4317      	orrs	r7, r2
 800bb66:	0038      	movs	r0, r7
 800bb68:	b003      	add	sp, #12
 800bb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb6c:	2700      	movs	r7, #0
 800bb6e:	42ae      	cmp	r6, r5
 800bb70:	d202      	bcs.n	800bb78 <__b2d+0x60>
 800bb72:	9d01      	ldr	r5, [sp, #4]
 800bb74:	3d08      	subs	r5, #8
 800bb76:	682f      	ldr	r7, [r5, #0]
 800bb78:	210b      	movs	r1, #11
 800bb7a:	4249      	negs	r1, r1
 800bb7c:	468c      	mov	ip, r1
 800bb7e:	449c      	add	ip, r3
 800bb80:	2b0b      	cmp	r3, #11
 800bb82:	d010      	beq.n	800bba6 <__b2d+0x8e>
 800bb84:	4661      	mov	r1, ip
 800bb86:	2320      	movs	r3, #32
 800bb88:	408c      	lsls	r4, r1
 800bb8a:	1a5b      	subs	r3, r3, r1
 800bb8c:	0039      	movs	r1, r7
 800bb8e:	40d9      	lsrs	r1, r3
 800bb90:	430c      	orrs	r4, r1
 800bb92:	4322      	orrs	r2, r4
 800bb94:	0011      	movs	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	42b5      	cmp	r5, r6
 800bb9a:	d901      	bls.n	800bba0 <__b2d+0x88>
 800bb9c:	3d04      	subs	r5, #4
 800bb9e:	682a      	ldr	r2, [r5, #0]
 800bba0:	4664      	mov	r4, ip
 800bba2:	40a7      	lsls	r7, r4
 800bba4:	e7dd      	b.n	800bb62 <__b2d+0x4a>
 800bba6:	4322      	orrs	r2, r4
 800bba8:	0011      	movs	r1, r2
 800bbaa:	e7dc      	b.n	800bb66 <__b2d+0x4e>
 800bbac:	3ff00000 	.word	0x3ff00000

0800bbb0 <__d2b>:
 800bbb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	0014      	movs	r4, r2
 800bbb6:	001d      	movs	r5, r3
 800bbb8:	9f08      	ldr	r7, [sp, #32]
 800bbba:	f7ff fc5b 	bl	800b474 <_Balloc>
 800bbbe:	1e06      	subs	r6, r0, #0
 800bbc0:	d105      	bne.n	800bbce <__d2b+0x1e>
 800bbc2:	0032      	movs	r2, r6
 800bbc4:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <__d2b+0xa8>)
 800bbc6:	4825      	ldr	r0, [pc, #148]	; (800bc5c <__d2b+0xac>)
 800bbc8:	4925      	ldr	r1, [pc, #148]	; (800bc60 <__d2b+0xb0>)
 800bbca:	f002 ff17 	bl	800e9fc <__assert_func>
 800bbce:	032b      	lsls	r3, r5, #12
 800bbd0:	006d      	lsls	r5, r5, #1
 800bbd2:	0b1b      	lsrs	r3, r3, #12
 800bbd4:	0d6d      	lsrs	r5, r5, #21
 800bbd6:	d125      	bne.n	800bc24 <__d2b+0x74>
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d028      	beq.n	800bc30 <__d2b+0x80>
 800bbde:	4668      	mov	r0, sp
 800bbe0:	9400      	str	r4, [sp, #0]
 800bbe2:	f7ff fd23 	bl	800b62c <__lo0bits>
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	9900      	ldr	r1, [sp, #0]
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d01e      	beq.n	800bc2c <__d2b+0x7c>
 800bbee:	2220      	movs	r2, #32
 800bbf0:	001c      	movs	r4, r3
 800bbf2:	1a12      	subs	r2, r2, r0
 800bbf4:	4094      	lsls	r4, r2
 800bbf6:	0022      	movs	r2, r4
 800bbf8:	40c3      	lsrs	r3, r0
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	6172      	str	r2, [r6, #20]
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	9c01      	ldr	r4, [sp, #4]
 800bc02:	61b4      	str	r4, [r6, #24]
 800bc04:	1e63      	subs	r3, r4, #1
 800bc06:	419c      	sbcs	r4, r3
 800bc08:	3401      	adds	r4, #1
 800bc0a:	6134      	str	r4, [r6, #16]
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	d017      	beq.n	800bc40 <__d2b+0x90>
 800bc10:	2435      	movs	r4, #53	; 0x35
 800bc12:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <__d2b+0xb4>)
 800bc14:	18ed      	adds	r5, r5, r3
 800bc16:	182d      	adds	r5, r5, r0
 800bc18:	603d      	str	r5, [r7, #0]
 800bc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1c:	1a24      	subs	r4, r4, r0
 800bc1e:	601c      	str	r4, [r3, #0]
 800bc20:	0030      	movs	r0, r6
 800bc22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc24:	2280      	movs	r2, #128	; 0x80
 800bc26:	0352      	lsls	r2, r2, #13
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	e7d5      	b.n	800bbd8 <__d2b+0x28>
 800bc2c:	6171      	str	r1, [r6, #20]
 800bc2e:	e7e7      	b.n	800bc00 <__d2b+0x50>
 800bc30:	a801      	add	r0, sp, #4
 800bc32:	f7ff fcfb 	bl	800b62c <__lo0bits>
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	2401      	movs	r4, #1
 800bc3a:	6173      	str	r3, [r6, #20]
 800bc3c:	3020      	adds	r0, #32
 800bc3e:	e7e4      	b.n	800bc0a <__d2b+0x5a>
 800bc40:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <__d2b+0xb8>)
 800bc42:	18c0      	adds	r0, r0, r3
 800bc44:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <__d2b+0xbc>)
 800bc46:	6038      	str	r0, [r7, #0]
 800bc48:	18e3      	adds	r3, r4, r3
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	18f3      	adds	r3, r6, r3
 800bc4e:	6958      	ldr	r0, [r3, #20]
 800bc50:	f7ff fcd2 	bl	800b5f8 <__hi0bits>
 800bc54:	0164      	lsls	r4, r4, #5
 800bc56:	e7e0      	b.n	800bc1a <__d2b+0x6a>
 800bc58:	08012ee1 	.word	0x08012ee1
 800bc5c:	08012f52 	.word	0x08012f52
 800bc60:	0000030f 	.word	0x0000030f
 800bc64:	fffffbcd 	.word	0xfffffbcd
 800bc68:	fffffbce 	.word	0xfffffbce
 800bc6c:	3fffffff 	.word	0x3fffffff

0800bc70 <__ratio>:
 800bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc72:	b087      	sub	sp, #28
 800bc74:	000f      	movs	r7, r1
 800bc76:	a904      	add	r1, sp, #16
 800bc78:	0006      	movs	r6, r0
 800bc7a:	f7ff ff4d 	bl	800bb18 <__b2d>
 800bc7e:	9000      	str	r0, [sp, #0]
 800bc80:	9101      	str	r1, [sp, #4]
 800bc82:	9c00      	ldr	r4, [sp, #0]
 800bc84:	9d01      	ldr	r5, [sp, #4]
 800bc86:	0038      	movs	r0, r7
 800bc88:	a905      	add	r1, sp, #20
 800bc8a:	f7ff ff45 	bl	800bb18 <__b2d>
 800bc8e:	9002      	str	r0, [sp, #8]
 800bc90:	9103      	str	r1, [sp, #12]
 800bc92:	9a02      	ldr	r2, [sp, #8]
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	6930      	ldr	r0, [r6, #16]
 800bc98:	6939      	ldr	r1, [r7, #16]
 800bc9a:	9e04      	ldr	r6, [sp, #16]
 800bc9c:	1a40      	subs	r0, r0, r1
 800bc9e:	9905      	ldr	r1, [sp, #20]
 800bca0:	0140      	lsls	r0, r0, #5
 800bca2:	1a71      	subs	r1, r6, r1
 800bca4:	1841      	adds	r1, r0, r1
 800bca6:	0508      	lsls	r0, r1, #20
 800bca8:	2900      	cmp	r1, #0
 800bcaa:	dd07      	ble.n	800bcbc <__ratio+0x4c>
 800bcac:	9901      	ldr	r1, [sp, #4]
 800bcae:	1845      	adds	r5, r0, r1
 800bcb0:	0020      	movs	r0, r4
 800bcb2:	0029      	movs	r1, r5
 800bcb4:	f7f5 f8e0 	bl	8000e78 <__aeabi_ddiv>
 800bcb8:	b007      	add	sp, #28
 800bcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcbc:	9903      	ldr	r1, [sp, #12]
 800bcbe:	1a0b      	subs	r3, r1, r0
 800bcc0:	e7f6      	b.n	800bcb0 <__ratio+0x40>

0800bcc2 <__copybits>:
 800bcc2:	b570      	push	{r4, r5, r6, lr}
 800bcc4:	0014      	movs	r4, r2
 800bcc6:	0005      	movs	r5, r0
 800bcc8:	3901      	subs	r1, #1
 800bcca:	6913      	ldr	r3, [r2, #16]
 800bccc:	1149      	asrs	r1, r1, #5
 800bcce:	3101      	adds	r1, #1
 800bcd0:	0089      	lsls	r1, r1, #2
 800bcd2:	3414      	adds	r4, #20
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	1841      	adds	r1, r0, r1
 800bcd8:	18e3      	adds	r3, r4, r3
 800bcda:	42a3      	cmp	r3, r4
 800bcdc:	d80d      	bhi.n	800bcfa <__copybits+0x38>
 800bcde:	0014      	movs	r4, r2
 800bce0:	3411      	adds	r4, #17
 800bce2:	2500      	movs	r5, #0
 800bce4:	429c      	cmp	r4, r3
 800bce6:	d803      	bhi.n	800bcf0 <__copybits+0x2e>
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	3b11      	subs	r3, #17
 800bcec:	089b      	lsrs	r3, r3, #2
 800bcee:	009d      	lsls	r5, r3, #2
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	1940      	adds	r0, r0, r5
 800bcf4:	4281      	cmp	r1, r0
 800bcf6:	d803      	bhi.n	800bd00 <__copybits+0x3e>
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	cc40      	ldmia	r4!, {r6}
 800bcfc:	c540      	stmia	r5!, {r6}
 800bcfe:	e7ec      	b.n	800bcda <__copybits+0x18>
 800bd00:	c008      	stmia	r0!, {r3}
 800bd02:	e7f7      	b.n	800bcf4 <__copybits+0x32>

0800bd04 <__any_on>:
 800bd04:	0002      	movs	r2, r0
 800bd06:	6900      	ldr	r0, [r0, #16]
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	3214      	adds	r2, #20
 800bd0c:	114b      	asrs	r3, r1, #5
 800bd0e:	4298      	cmp	r0, r3
 800bd10:	db13      	blt.n	800bd3a <__any_on+0x36>
 800bd12:	dd0c      	ble.n	800bd2e <__any_on+0x2a>
 800bd14:	241f      	movs	r4, #31
 800bd16:	0008      	movs	r0, r1
 800bd18:	4020      	ands	r0, r4
 800bd1a:	4221      	tst	r1, r4
 800bd1c:	d007      	beq.n	800bd2e <__any_on+0x2a>
 800bd1e:	0099      	lsls	r1, r3, #2
 800bd20:	588c      	ldr	r4, [r1, r2]
 800bd22:	0021      	movs	r1, r4
 800bd24:	40c1      	lsrs	r1, r0
 800bd26:	4081      	lsls	r1, r0
 800bd28:	2001      	movs	r0, #1
 800bd2a:	428c      	cmp	r4, r1
 800bd2c:	d104      	bne.n	800bd38 <__any_on+0x34>
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	18d3      	adds	r3, r2, r3
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d803      	bhi.n	800bd3e <__any_on+0x3a>
 800bd36:	2000      	movs	r0, #0
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	0003      	movs	r3, r0
 800bd3c:	e7f7      	b.n	800bd2e <__any_on+0x2a>
 800bd3e:	3b04      	subs	r3, #4
 800bd40:	6819      	ldr	r1, [r3, #0]
 800bd42:	2900      	cmp	r1, #0
 800bd44:	d0f5      	beq.n	800bd32 <__any_on+0x2e>
 800bd46:	2001      	movs	r0, #1
 800bd48:	e7f6      	b.n	800bd38 <__any_on+0x34>

0800bd4a <__ascii_wctomb>:
 800bd4a:	0003      	movs	r3, r0
 800bd4c:	1e08      	subs	r0, r1, #0
 800bd4e:	d005      	beq.n	800bd5c <__ascii_wctomb+0x12>
 800bd50:	2aff      	cmp	r2, #255	; 0xff
 800bd52:	d904      	bls.n	800bd5e <__ascii_wctomb+0x14>
 800bd54:	228a      	movs	r2, #138	; 0x8a
 800bd56:	2001      	movs	r0, #1
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	4240      	negs	r0, r0
 800bd5c:	4770      	bx	lr
 800bd5e:	2001      	movs	r0, #1
 800bd60:	700a      	strb	r2, [r1, #0]
 800bd62:	e7fb      	b.n	800bd5c <__ascii_wctomb+0x12>

0800bd64 <_svfprintf_r>:
 800bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd66:	b0d9      	sub	sp, #356	; 0x164
 800bd68:	001c      	movs	r4, r3
 800bd6a:	910b      	str	r1, [sp, #44]	; 0x2c
 800bd6c:	9208      	str	r2, [sp, #32]
 800bd6e:	900a      	str	r0, [sp, #40]	; 0x28
 800bd70:	f002 fdae 	bl	800e8d0 <_localeconv_r>
 800bd74:	6803      	ldr	r3, [r0, #0]
 800bd76:	0018      	movs	r0, r3
 800bd78:	931c      	str	r3, [sp, #112]	; 0x70
 800bd7a:	f7f4 f9c3 	bl	8000104 <strlen>
 800bd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd80:	9016      	str	r0, [sp, #88]	; 0x58
 800bd82:	899b      	ldrh	r3, [r3, #12]
 800bd84:	061b      	lsls	r3, r3, #24
 800bd86:	d517      	bpl.n	800bdb8 <_svfprintf_r+0x54>
 800bd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d113      	bne.n	800bdb8 <_svfprintf_r+0x54>
 800bd90:	2140      	movs	r1, #64	; 0x40
 800bd92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd94:	f7fd fb6e 	bl	8009474 <_malloc_r>
 800bd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9a:	6018      	str	r0, [r3, #0]
 800bd9c:	6118      	str	r0, [r3, #16]
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d107      	bne.n	800bdb2 <_svfprintf_r+0x4e>
 800bda2:	230c      	movs	r3, #12
 800bda4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	3b0d      	subs	r3, #13
 800bdaa:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bdae:	b059      	add	sp, #356	; 0x164
 800bdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdb6:	6153      	str	r3, [r2, #20]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	2200      	movs	r2, #0
 800bdbc:	932e      	str	r3, [sp, #184]	; 0xb8
 800bdbe:	932d      	str	r3, [sp, #180]	; 0xb4
 800bdc0:	930e      	str	r3, [sp, #56]	; 0x38
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9214      	str	r2, [sp, #80]	; 0x50
 800bdc6:	9315      	str	r3, [sp, #84]	; 0x54
 800bdc8:	2300      	movs	r3, #0
 800bdca:	af2f      	add	r7, sp, #188	; 0xbc
 800bdcc:	972c      	str	r7, [sp, #176]	; 0xb0
 800bdce:	931f      	str	r3, [sp, #124]	; 0x7c
 800bdd0:	931e      	str	r3, [sp, #120]	; 0x78
 800bdd2:	9312      	str	r3, [sp, #72]	; 0x48
 800bdd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bdd6:	931d      	str	r3, [sp, #116]	; 0x74
 800bdd8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdda:	9d08      	ldr	r5, [sp, #32]
 800bddc:	782b      	ldrb	r3, [r5, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d002      	beq.n	800bde8 <_svfprintf_r+0x84>
 800bde2:	2b25      	cmp	r3, #37	; 0x25
 800bde4:	d000      	beq.n	800bde8 <_svfprintf_r+0x84>
 800bde6:	e091      	b.n	800bf0c <_svfprintf_r+0x1a8>
 800bde8:	9b08      	ldr	r3, [sp, #32]
 800bdea:	1aee      	subs	r6, r5, r3
 800bdec:	429d      	cmp	r5, r3
 800bdee:	d016      	beq.n	800be1e <_svfprintf_r+0xba>
 800bdf0:	603b      	str	r3, [r7, #0]
 800bdf2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bdf4:	607e      	str	r6, [r7, #4]
 800bdf6:	199b      	adds	r3, r3, r6
 800bdf8:	932e      	str	r3, [sp, #184]	; 0xb8
 800bdfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	3301      	adds	r3, #1
 800be00:	932d      	str	r3, [sp, #180]	; 0xb4
 800be02:	2b07      	cmp	r3, #7
 800be04:	dd08      	ble.n	800be18 <_svfprintf_r+0xb4>
 800be06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be08:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be0a:	aa2c      	add	r2, sp, #176	; 0xb0
 800be0c:	f004 f8c0 	bl	800ff90 <__ssprint_r>
 800be10:	2800      	cmp	r0, #0
 800be12:	d000      	beq.n	800be16 <_svfprintf_r+0xb2>
 800be14:	e1cf      	b.n	800c1b6 <_svfprintf_r+0x452>
 800be16:	af2f      	add	r7, sp, #188	; 0xbc
 800be18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be1a:	199b      	adds	r3, r3, r6
 800be1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800be1e:	782b      	ldrb	r3, [r5, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <_svfprintf_r+0xc4>
 800be24:	f001 f99e 	bl	800d164 <_svfprintf_r+0x1400>
 800be28:	221b      	movs	r2, #27
 800be2a:	2300      	movs	r3, #0
 800be2c:	a91e      	add	r1, sp, #120	; 0x78
 800be2e:	1852      	adds	r2, r2, r1
 800be30:	7013      	strb	r3, [r2, #0]
 800be32:	2201      	movs	r2, #1
 800be34:	001e      	movs	r6, r3
 800be36:	4252      	negs	r2, r2
 800be38:	3501      	adds	r5, #1
 800be3a:	9209      	str	r2, [sp, #36]	; 0x24
 800be3c:	9318      	str	r3, [sp, #96]	; 0x60
 800be3e:	1c6b      	adds	r3, r5, #1
 800be40:	9313      	str	r3, [sp, #76]	; 0x4c
 800be42:	782b      	ldrb	r3, [r5, #0]
 800be44:	930f      	str	r3, [sp, #60]	; 0x3c
 800be46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800be48:	3820      	subs	r0, #32
 800be4a:	285a      	cmp	r0, #90	; 0x5a
 800be4c:	d901      	bls.n	800be52 <_svfprintf_r+0xee>
 800be4e:	f000 fe20 	bl	800ca92 <_svfprintf_r+0xd2e>
 800be52:	f7f4 f969 	bl	8000128 <__gnu_thumb1_case_uhi>
 800be56:	0078      	.short	0x0078
 800be58:	061e061e 	.word	0x061e061e
 800be5c:	061e0082 	.word	0x061e0082
 800be60:	061e061e 	.word	0x061e061e
 800be64:	061e005d 	.word	0x061e005d
 800be68:	0084061e 	.word	0x0084061e
 800be6c:	061e008c 	.word	0x061e008c
 800be70:	0091008a 	.word	0x0091008a
 800be74:	00b2061e 	.word	0x00b2061e
 800be78:	00b400b4 	.word	0x00b400b4
 800be7c:	00b400b4 	.word	0x00b400b4
 800be80:	00b400b4 	.word	0x00b400b4
 800be84:	00b400b4 	.word	0x00b400b4
 800be88:	061e00b4 	.word	0x061e00b4
 800be8c:	061e061e 	.word	0x061e061e
 800be90:	061e061e 	.word	0x061e061e
 800be94:	061e061e 	.word	0x061e061e
 800be98:	061e013b 	.word	0x061e013b
 800be9c:	00f400e0 	.word	0x00f400e0
 800bea0:	013b013b 	.word	0x013b013b
 800bea4:	061e013b 	.word	0x061e013b
 800bea8:	061e061e 	.word	0x061e061e
 800beac:	00c7061e 	.word	0x00c7061e
 800beb0:	061e061e 	.word	0x061e061e
 800beb4:	061e04c7 	.word	0x061e04c7
 800beb8:	061e061e 	.word	0x061e061e
 800bebc:	061e050a 	.word	0x061e050a
 800bec0:	061e052a 	.word	0x061e052a
 800bec4:	055c061e 	.word	0x055c061e
 800bec8:	061e061e 	.word	0x061e061e
 800becc:	061e061e 	.word	0x061e061e
 800bed0:	061e061e 	.word	0x061e061e
 800bed4:	061e061e 	.word	0x061e061e
 800bed8:	061e013b 	.word	0x061e013b
 800bedc:	00f600e0 	.word	0x00f600e0
 800bee0:	013b013b 	.word	0x013b013b
 800bee4:	00c9013b 	.word	0x00c9013b
 800bee8:	00dc00f6 	.word	0x00dc00f6
 800beec:	00d5061e 	.word	0x00d5061e
 800bef0:	04a7061e 	.word	0x04a7061e
 800bef4:	04fa04c9 	.word	0x04fa04c9
 800bef8:	061e00dc 	.word	0x061e00dc
 800befc:	0080050a 	.word	0x0080050a
 800bf00:	061e052c 	.word	0x061e052c
 800bf04:	057c061e 	.word	0x057c061e
 800bf08:	0080061e 	.word	0x0080061e
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	e765      	b.n	800bddc <_svfprintf_r+0x78>
 800bf10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf12:	f002 fcdd 	bl	800e8d0 <_localeconv_r>
 800bf16:	6843      	ldr	r3, [r0, #4]
 800bf18:	0018      	movs	r0, r3
 800bf1a:	931d      	str	r3, [sp, #116]	; 0x74
 800bf1c:	f7f4 f8f2 	bl	8000104 <strlen>
 800bf20:	901b      	str	r0, [sp, #108]	; 0x6c
 800bf22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf24:	f002 fcd4 	bl	800e8d0 <_localeconv_r>
 800bf28:	6883      	ldr	r3, [r0, #8]
 800bf2a:	9312      	str	r3, [sp, #72]	; 0x48
 800bf2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d011      	beq.n	800bf56 <_svfprintf_r+0x1f2>
 800bf32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00e      	beq.n	800bf56 <_svfprintf_r+0x1f2>
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00b      	beq.n	800bf56 <_svfprintf_r+0x1f2>
 800bf3e:	2380      	movs	r3, #128	; 0x80
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	431e      	orrs	r6, r3
 800bf44:	e007      	b.n	800bf56 <_svfprintf_r+0x1f2>
 800bf46:	231b      	movs	r3, #27
 800bf48:	aa1e      	add	r2, sp, #120	; 0x78
 800bf4a:	189b      	adds	r3, r3, r2
 800bf4c:	781a      	ldrb	r2, [r3, #0]
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	d101      	bne.n	800bf56 <_svfprintf_r+0x1f2>
 800bf52:	3220      	adds	r2, #32
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800bf58:	e771      	b.n	800be3e <_svfprintf_r+0xda>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e7f1      	b.n	800bf42 <_svfprintf_r+0x1de>
 800bf5e:	cc08      	ldmia	r4!, {r3}
 800bf60:	9318      	str	r3, [sp, #96]	; 0x60
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	daf7      	bge.n	800bf56 <_svfprintf_r+0x1f2>
 800bf66:	425b      	negs	r3, r3
 800bf68:	9318      	str	r3, [sp, #96]	; 0x60
 800bf6a:	2304      	movs	r3, #4
 800bf6c:	e7e9      	b.n	800bf42 <_svfprintf_r+0x1de>
 800bf6e:	231b      	movs	r3, #27
 800bf70:	aa1e      	add	r2, sp, #120	; 0x78
 800bf72:	189b      	adds	r3, r3, r2
 800bf74:	222b      	movs	r2, #43	; 0x2b
 800bf76:	e7ed      	b.n	800bf54 <_svfprintf_r+0x1f0>
 800bf78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	920f      	str	r2, [sp, #60]	; 0x3c
 800bf82:	2a2a      	cmp	r2, #42	; 0x2a
 800bf84:	d010      	beq.n	800bfa8 <_svfprintf_r+0x244>
 800bf86:	2200      	movs	r2, #0
 800bf88:	9209      	str	r2, [sp, #36]	; 0x24
 800bf8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf8e:	3a30      	subs	r2, #48	; 0x30
 800bf90:	2a09      	cmp	r2, #9
 800bf92:	d900      	bls.n	800bf96 <_svfprintf_r+0x232>
 800bf94:	e757      	b.n	800be46 <_svfprintf_r+0xe2>
 800bf96:	200a      	movs	r0, #10
 800bf98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf9a:	4341      	muls	r1, r0
 800bf9c:	188a      	adds	r2, r1, r2
 800bf9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	920f      	str	r2, [sp, #60]	; 0x3c
 800bfa6:	e7f0      	b.n	800bf8a <_svfprintf_r+0x226>
 800bfa8:	cc04      	ldmia	r4!, {r2}
 800bfaa:	9209      	str	r2, [sp, #36]	; 0x24
 800bfac:	2a00      	cmp	r2, #0
 800bfae:	da02      	bge.n	800bfb6 <_svfprintf_r+0x252>
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	4252      	negs	r2, r2
 800bfb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800bfb8:	e7cd      	b.n	800bf56 <_svfprintf_r+0x1f2>
 800bfba:	2380      	movs	r3, #128	; 0x80
 800bfbc:	e7c1      	b.n	800bf42 <_svfprintf_r+0x1de>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfc2:	9218      	str	r2, [sp, #96]	; 0x60
 800bfc4:	210a      	movs	r1, #10
 800bfc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfc8:	434a      	muls	r2, r1
 800bfca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfcc:	3930      	subs	r1, #48	; 0x30
 800bfce:	188a      	adds	r2, r1, r2
 800bfd0:	9218      	str	r2, [sp, #96]	; 0x60
 800bfd2:	001a      	movs	r2, r3
 800bfd4:	7812      	ldrb	r2, [r2, #0]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	920f      	str	r2, [sp, #60]	; 0x3c
 800bfda:	3a30      	subs	r2, #48	; 0x30
 800bfdc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bfde:	2a09      	cmp	r2, #9
 800bfe0:	d9f0      	bls.n	800bfc4 <_svfprintf_r+0x260>
 800bfe2:	e730      	b.n	800be46 <_svfprintf_r+0xe2>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	e7ac      	b.n	800bf42 <_svfprintf_r+0x1de>
 800bfe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b68      	cmp	r3, #104	; 0x68
 800bfee:	d105      	bne.n	800bffc <_svfprintf_r+0x298>
 800bff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bff2:	3301      	adds	r3, #1
 800bff4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bff6:	2380      	movs	r3, #128	; 0x80
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	e7a2      	b.n	800bf42 <_svfprintf_r+0x1de>
 800bffc:	2340      	movs	r3, #64	; 0x40
 800bffe:	e7a0      	b.n	800bf42 <_svfprintf_r+0x1de>
 800c000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b6c      	cmp	r3, #108	; 0x6c
 800c006:	d104      	bne.n	800c012 <_svfprintf_r+0x2ae>
 800c008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c00a:	3301      	adds	r3, #1
 800c00c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c00e:	2320      	movs	r3, #32
 800c010:	e797      	b.n	800bf42 <_svfprintf_r+0x1de>
 800c012:	2310      	movs	r3, #16
 800c014:	e795      	b.n	800bf42 <_svfprintf_r+0x1de>
 800c016:	0021      	movs	r1, r4
 800c018:	c904      	ldmia	r1!, {r2}
 800c01a:	ab3f      	add	r3, sp, #252	; 0xfc
 800c01c:	910d      	str	r1, [sp, #52]	; 0x34
 800c01e:	211b      	movs	r1, #27
 800c020:	701a      	strb	r2, [r3, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	a81e      	add	r0, sp, #120	; 0x78
 800c026:	1809      	adds	r1, r1, r0
 800c028:	700a      	strb	r2, [r1, #0]
 800c02a:	920c      	str	r2, [sp, #48]	; 0x30
 800c02c:	3201      	adds	r2, #1
 800c02e:	9209      	str	r2, [sp, #36]	; 0x24
 800c030:	2200      	movs	r2, #0
 800c032:	9308      	str	r3, [sp, #32]
 800c034:	0015      	movs	r5, r2
 800c036:	9219      	str	r2, [sp, #100]	; 0x64
 800c038:	9210      	str	r2, [sp, #64]	; 0x40
 800c03a:	9211      	str	r2, [sp, #68]	; 0x44
 800c03c:	e1f1      	b.n	800c422 <_svfprintf_r+0x6be>
 800c03e:	2310      	movs	r3, #16
 800c040:	431e      	orrs	r6, r3
 800c042:	06b3      	lsls	r3, r6, #26
 800c044:	d531      	bpl.n	800c0aa <_svfprintf_r+0x346>
 800c046:	2307      	movs	r3, #7
 800c048:	3407      	adds	r4, #7
 800c04a:	439c      	bics	r4, r3
 800c04c:	0022      	movs	r2, r4
 800c04e:	ca18      	ldmia	r2!, {r3, r4}
 800c050:	9306      	str	r3, [sp, #24]
 800c052:	9407      	str	r4, [sp, #28]
 800c054:	920d      	str	r2, [sp, #52]	; 0x34
 800c056:	9a07      	ldr	r2, [sp, #28]
 800c058:	2301      	movs	r3, #1
 800c05a:	2a00      	cmp	r2, #0
 800c05c:	da0b      	bge.n	800c076 <_svfprintf_r+0x312>
 800c05e:	9c06      	ldr	r4, [sp, #24]
 800c060:	9d07      	ldr	r5, [sp, #28]
 800c062:	2200      	movs	r2, #0
 800c064:	4261      	negs	r1, r4
 800c066:	41aa      	sbcs	r2, r5
 800c068:	9106      	str	r1, [sp, #24]
 800c06a:	9207      	str	r2, [sp, #28]
 800c06c:	221b      	movs	r2, #27
 800c06e:	a91e      	add	r1, sp, #120	; 0x78
 800c070:	1852      	adds	r2, r2, r1
 800c072:	212d      	movs	r1, #45	; 0x2d
 800c074:	7011      	strb	r1, [r2, #0]
 800c076:	9907      	ldr	r1, [sp, #28]
 800c078:	9a06      	ldr	r2, [sp, #24]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c07e:	3101      	adds	r1, #1
 800c080:	d101      	bne.n	800c086 <_svfprintf_r+0x322>
 800c082:	f001 f87b 	bl	800d17c <_svfprintf_r+0x1418>
 800c086:	2180      	movs	r1, #128	; 0x80
 800c088:	0034      	movs	r4, r6
 800c08a:	438c      	bics	r4, r1
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	d001      	beq.n	800c094 <_svfprintf_r+0x330>
 800c090:	f001 f879 	bl	800d186 <_svfprintf_r+0x1422>
 800c094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c096:	2a00      	cmp	r2, #0
 800c098:	d101      	bne.n	800c09e <_svfprintf_r+0x33a>
 800c09a:	f000 fcef 	bl	800ca7c <_svfprintf_r+0xd18>
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d001      	beq.n	800c0a6 <_svfprintf_r+0x342>
 800c0a2:	f001 f874 	bl	800d18e <_svfprintf_r+0x142a>
 800c0a6:	f000 fc79 	bl	800c99c <_svfprintf_r+0xc38>
 800c0aa:	0022      	movs	r2, r4
 800c0ac:	ca08      	ldmia	r2!, {r3}
 800c0ae:	920d      	str	r2, [sp, #52]	; 0x34
 800c0b0:	06f2      	lsls	r2, r6, #27
 800c0b2:	d503      	bpl.n	800c0bc <_svfprintf_r+0x358>
 800c0b4:	9306      	str	r3, [sp, #24]
 800c0b6:	17db      	asrs	r3, r3, #31
 800c0b8:	9307      	str	r3, [sp, #28]
 800c0ba:	e7cc      	b.n	800c056 <_svfprintf_r+0x2f2>
 800c0bc:	0672      	lsls	r2, r6, #25
 800c0be:	d501      	bpl.n	800c0c4 <_svfprintf_r+0x360>
 800c0c0:	b21b      	sxth	r3, r3
 800c0c2:	e7f7      	b.n	800c0b4 <_svfprintf_r+0x350>
 800c0c4:	05b2      	lsls	r2, r6, #22
 800c0c6:	d5f5      	bpl.n	800c0b4 <_svfprintf_r+0x350>
 800c0c8:	b25b      	sxtb	r3, r3
 800c0ca:	e7f3      	b.n	800c0b4 <_svfprintf_r+0x350>
 800c0cc:	2307      	movs	r3, #7
 800c0ce:	3407      	adds	r4, #7
 800c0d0:	439c      	bics	r4, r3
 800c0d2:	0022      	movs	r2, r4
 800c0d4:	ca18      	ldmia	r2!, {r3, r4}
 800c0d6:	920d      	str	r2, [sp, #52]	; 0x34
 800c0d8:	2201      	movs	r2, #1
 800c0da:	9314      	str	r3, [sp, #80]	; 0x50
 800c0dc:	9415      	str	r4, [sp, #84]	; 0x54
 800c0de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c0e2:	005c      	lsls	r4, r3, #1
 800c0e4:	0864      	lsrs	r4, r4, #1
 800c0e6:	0028      	movs	r0, r5
 800c0e8:	0021      	movs	r1, r4
 800c0ea:	4b3e      	ldr	r3, [pc, #248]	; (800c1e4 <_svfprintf_r+0x480>)
 800c0ec:	4252      	negs	r2, r2
 800c0ee:	f7f6 f901 	bl	80022f4 <__aeabi_dcmpun>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d126      	bne.n	800c144 <_svfprintf_r+0x3e0>
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	0028      	movs	r0, r5
 800c0fa:	0021      	movs	r1, r4
 800c0fc:	4b39      	ldr	r3, [pc, #228]	; (800c1e4 <_svfprintf_r+0x480>)
 800c0fe:	4252      	negs	r2, r2
 800c100:	f7f4 f9b2 	bl	8000468 <__aeabi_dcmple>
 800c104:	2800      	cmp	r0, #0
 800c106:	d11d      	bne.n	800c144 <_svfprintf_r+0x3e0>
 800c108:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c10a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c10c:	2200      	movs	r2, #0
 800c10e:	2300      	movs	r3, #0
 800c110:	f7f4 f9a0 	bl	8000454 <__aeabi_dcmplt>
 800c114:	2800      	cmp	r0, #0
 800c116:	d004      	beq.n	800c122 <_svfprintf_r+0x3be>
 800c118:	231b      	movs	r3, #27
 800c11a:	aa1e      	add	r2, sp, #120	; 0x78
 800c11c:	189b      	adds	r3, r3, r2
 800c11e:	222d      	movs	r2, #45	; 0x2d
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	4b31      	ldr	r3, [pc, #196]	; (800c1e8 <_svfprintf_r+0x484>)
 800c124:	9308      	str	r3, [sp, #32]
 800c126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c128:	2b47      	cmp	r3, #71	; 0x47
 800c12a:	dd01      	ble.n	800c130 <_svfprintf_r+0x3cc>
 800c12c:	4b2f      	ldr	r3, [pc, #188]	; (800c1ec <_svfprintf_r+0x488>)
 800c12e:	9308      	str	r3, [sp, #32]
 800c130:	2380      	movs	r3, #128	; 0x80
 800c132:	439e      	bics	r6, r3
 800c134:	2300      	movs	r3, #0
 800c136:	930c      	str	r3, [sp, #48]	; 0x30
 800c138:	3303      	adds	r3, #3
 800c13a:	9309      	str	r3, [sp, #36]	; 0x24
 800c13c:	2300      	movs	r3, #0
 800c13e:	9319      	str	r3, [sp, #100]	; 0x64
 800c140:	f000 fc78 	bl	800ca34 <_svfprintf_r+0xcd0>
 800c144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c148:	0010      	movs	r0, r2
 800c14a:	0019      	movs	r1, r3
 800c14c:	f7f6 f8d2 	bl	80022f4 <__aeabi_dcmpun>
 800c150:	2800      	cmp	r0, #0
 800c152:	d00e      	beq.n	800c172 <_svfprintf_r+0x40e>
 800c154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c156:	2b00      	cmp	r3, #0
 800c158:	da04      	bge.n	800c164 <_svfprintf_r+0x400>
 800c15a:	231b      	movs	r3, #27
 800c15c:	aa1e      	add	r2, sp, #120	; 0x78
 800c15e:	189b      	adds	r3, r3, r2
 800c160:	222d      	movs	r2, #45	; 0x2d
 800c162:	701a      	strb	r2, [r3, #0]
 800c164:	4b22      	ldr	r3, [pc, #136]	; (800c1f0 <_svfprintf_r+0x48c>)
 800c166:	9308      	str	r3, [sp, #32]
 800c168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c16a:	2b47      	cmp	r3, #71	; 0x47
 800c16c:	dde0      	ble.n	800c130 <_svfprintf_r+0x3cc>
 800c16e:	4b21      	ldr	r3, [pc, #132]	; (800c1f4 <_svfprintf_r+0x490>)
 800c170:	e7dd      	b.n	800c12e <_svfprintf_r+0x3ca>
 800c172:	2320      	movs	r3, #32
 800c174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c176:	439a      	bics	r2, r3
 800c178:	9210      	str	r2, [sp, #64]	; 0x40
 800c17a:	2a41      	cmp	r2, #65	; 0x41
 800c17c:	d123      	bne.n	800c1c6 <_svfprintf_r+0x462>
 800c17e:	2230      	movs	r2, #48	; 0x30
 800c180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c182:	ab25      	add	r3, sp, #148	; 0x94
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	3248      	adds	r2, #72	; 0x48
 800c188:	2961      	cmp	r1, #97	; 0x61
 800c18a:	d000      	beq.n	800c18e <_svfprintf_r+0x42a>
 800c18c:	3a20      	subs	r2, #32
 800c18e:	705a      	strb	r2, [r3, #1]
 800c190:	2302      	movs	r3, #2
 800c192:	431e      	orrs	r6, r3
 800c194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c196:	2b63      	cmp	r3, #99	; 0x63
 800c198:	dd2e      	ble.n	800c1f8 <_svfprintf_r+0x494>
 800c19a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c19c:	1c59      	adds	r1, r3, #1
 800c19e:	f7fd f969 	bl	8009474 <_malloc_r>
 800c1a2:	9008      	str	r0, [sp, #32]
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d000      	beq.n	800c1aa <_svfprintf_r+0x446>
 800c1a8:	e216      	b.n	800c5d8 <_svfprintf_r+0x874>
 800c1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ac:	899a      	ldrh	r2, [r3, #12]
 800c1ae:	2340      	movs	r3, #64	; 0x40
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1b4:	8193      	strh	r3, [r2, #12]
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b8:	899b      	ldrh	r3, [r3, #12]
 800c1ba:	065b      	lsls	r3, r3, #25
 800c1bc:	d400      	bmi.n	800c1c0 <_svfprintf_r+0x45c>
 800c1be:	e5f5      	b.n	800bdac <_svfprintf_r+0x48>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	425b      	negs	r3, r3
 800c1c4:	e5f1      	b.n	800bdaa <_svfprintf_r+0x46>
 800c1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c8:	900c      	str	r0, [sp, #48]	; 0x30
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	d100      	bne.n	800c1d0 <_svfprintf_r+0x46c>
 800c1ce:	e206      	b.n	800c5de <_svfprintf_r+0x87a>
 800c1d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1d2:	2b47      	cmp	r3, #71	; 0x47
 800c1d4:	d114      	bne.n	800c200 <_svfprintf_r+0x49c>
 800c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d111      	bne.n	800c200 <_svfprintf_r+0x49c>
 800c1dc:	3301      	adds	r3, #1
 800c1de:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e0:	e00e      	b.n	800c200 <_svfprintf_r+0x49c>
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	7fefffff 	.word	0x7fefffff
 800c1e8:	080130ac 	.word	0x080130ac
 800c1ec:	080130b0 	.word	0x080130b0
 800c1f0:	080130b4 	.word	0x080130b4
 800c1f4:	080130b8 	.word	0x080130b8
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	930c      	str	r3, [sp, #48]	; 0x30
 800c1fc:	ab3f      	add	r3, sp, #252	; 0xfc
 800c1fe:	9308      	str	r3, [sp, #32]
 800c200:	2380      	movs	r3, #128	; 0x80
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4333      	orrs	r3, r6
 800c206:	931a      	str	r3, [sp, #104]	; 0x68
 800c208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c20a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	db00      	blt.n	800c212 <_svfprintf_r+0x4ae>
 800c210:	e1e7      	b.n	800c5e2 <_svfprintf_r+0x87e>
 800c212:	2280      	movs	r2, #128	; 0x80
 800c214:	0612      	lsls	r2, r2, #24
 800c216:	4694      	mov	ip, r2
 800c218:	4463      	add	r3, ip
 800c21a:	930e      	str	r3, [sp, #56]	; 0x38
 800c21c:	232d      	movs	r3, #45	; 0x2d
 800c21e:	9322      	str	r3, [sp, #136]	; 0x88
 800c220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c222:	2b41      	cmp	r3, #65	; 0x41
 800c224:	d000      	beq.n	800c228 <_svfprintf_r+0x4c4>
 800c226:	e1f5      	b.n	800c614 <_svfprintf_r+0x8b0>
 800c228:	0028      	movs	r0, r5
 800c22a:	aa26      	add	r2, sp, #152	; 0x98
 800c22c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c22e:	f002 fb73 	bl	800e918 <frexp>
 800c232:	23ff      	movs	r3, #255	; 0xff
 800c234:	2200      	movs	r2, #0
 800c236:	059b      	lsls	r3, r3, #22
 800c238:	f7f5 fa18 	bl	800166c <__aeabi_dmul>
 800c23c:	2200      	movs	r2, #0
 800c23e:	2300      	movs	r3, #0
 800c240:	0004      	movs	r4, r0
 800c242:	000d      	movs	r5, r1
 800c244:	f7f4 f900 	bl	8000448 <__aeabi_dcmpeq>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d001      	beq.n	800c250 <_svfprintf_r+0x4ec>
 800c24c:	2301      	movs	r3, #1
 800c24e:	9326      	str	r3, [sp, #152]	; 0x98
 800c250:	4bda      	ldr	r3, [pc, #872]	; (800c5bc <_svfprintf_r+0x858>)
 800c252:	9319      	str	r3, [sp, #100]	; 0x64
 800c254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c256:	2b61      	cmp	r3, #97	; 0x61
 800c258:	d001      	beq.n	800c25e <_svfprintf_r+0x4fa>
 800c25a:	4bd9      	ldr	r3, [pc, #868]	; (800c5c0 <_svfprintf_r+0x85c>)
 800c25c:	9319      	str	r3, [sp, #100]	; 0x64
 800c25e:	9b08      	ldr	r3, [sp, #32]
 800c260:	930e      	str	r3, [sp, #56]	; 0x38
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	3b01      	subs	r3, #1
 800c266:	9311      	str	r3, [sp, #68]	; 0x44
 800c268:	2200      	movs	r2, #0
 800c26a:	4bd6      	ldr	r3, [pc, #856]	; (800c5c4 <_svfprintf_r+0x860>)
 800c26c:	0020      	movs	r0, r4
 800c26e:	0029      	movs	r1, r5
 800c270:	f7f5 f9fc 	bl	800166c <__aeabi_dmul>
 800c274:	000d      	movs	r5, r1
 800c276:	0004      	movs	r4, r0
 800c278:	f7f6 f85a 	bl	8002330 <__aeabi_d2iz>
 800c27c:	9021      	str	r0, [sp, #132]	; 0x84
 800c27e:	f7f6 f88d 	bl	800239c <__aeabi_i2d>
 800c282:	0002      	movs	r2, r0
 800c284:	000b      	movs	r3, r1
 800c286:	0020      	movs	r0, r4
 800c288:	0029      	movs	r1, r5
 800c28a:	f7f5 fcb1 	bl	8001bf0 <__aeabi_dsub>
 800c28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c290:	000d      	movs	r5, r1
 800c292:	001a      	movs	r2, r3
 800c294:	3201      	adds	r2, #1
 800c296:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c298:	920e      	str	r2, [sp, #56]	; 0x38
 800c29a:	9223      	str	r2, [sp, #140]	; 0x8c
 800c29c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c29e:	0004      	movs	r4, r0
 800c2a0:	5c52      	ldrb	r2, [r2, r1]
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a6:	9320      	str	r3, [sp, #128]	; 0x80
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	d00a      	beq.n	800c2c2 <_svfprintf_r+0x55e>
 800c2ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	9311      	str	r3, [sp, #68]	; 0x44
 800c2b4:	0020      	movs	r0, r4
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	0029      	movs	r1, r5
 800c2ba:	f7f4 f8c5 	bl	8000448 <__aeabi_dcmpeq>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0d2      	beq.n	800c268 <_svfprintf_r+0x504>
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	0020      	movs	r0, r4
 800c2c6:	0029      	movs	r1, r5
 800c2c8:	4bbf      	ldr	r3, [pc, #764]	; (800c5c8 <_svfprintf_r+0x864>)
 800c2ca:	f7f4 f8d7 	bl	800047c <__aeabi_dcmpgt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d10c      	bne.n	800c2ec <_svfprintf_r+0x588>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	0020      	movs	r0, r4
 800c2d6:	0029      	movs	r1, r5
 800c2d8:	4bbb      	ldr	r3, [pc, #748]	; (800c5c8 <_svfprintf_r+0x864>)
 800c2da:	f7f4 f8b5 	bl	8000448 <__aeabi_dcmpeq>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d100      	bne.n	800c2e4 <_svfprintf_r+0x580>
 800c2e2:	e191      	b.n	800c608 <_svfprintf_r+0x8a4>
 800c2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2e6:	07db      	lsls	r3, r3, #31
 800c2e8:	d400      	bmi.n	800c2ec <_svfprintf_r+0x588>
 800c2ea:	e18d      	b.n	800c608 <_svfprintf_r+0x8a4>
 800c2ec:	2030      	movs	r0, #48	; 0x30
 800c2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f0:	932a      	str	r3, [sp, #168]	; 0xa8
 800c2f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2f4:	7bdb      	ldrb	r3, [r3, #15]
 800c2f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c2f8:	3a01      	subs	r2, #1
 800c2fa:	922a      	str	r2, [sp, #168]	; 0xa8
 800c2fc:	7811      	ldrb	r1, [r2, #0]
 800c2fe:	4299      	cmp	r1, r3
 800c300:	d100      	bne.n	800c304 <_svfprintf_r+0x5a0>
 800c302:	e171      	b.n	800c5e8 <_svfprintf_r+0x884>
 800c304:	1c4b      	adds	r3, r1, #1
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2939      	cmp	r1, #57	; 0x39
 800c30a:	d101      	bne.n	800c310 <_svfprintf_r+0x5ac>
 800c30c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c30e:	7a9b      	ldrb	r3, [r3, #10]
 800c310:	7013      	strb	r3, [r2, #0]
 800c312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c314:	9a08      	ldr	r2, [sp, #32]
 800c316:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c318:	1a9b      	subs	r3, r3, r2
 800c31a:	930e      	str	r3, [sp, #56]	; 0x38
 800c31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c31e:	2b47      	cmp	r3, #71	; 0x47
 800c320:	d000      	beq.n	800c324 <_svfprintf_r+0x5c0>
 800c322:	e1c4      	b.n	800c6ae <_svfprintf_r+0x94a>
 800c324:	1ceb      	adds	r3, r5, #3
 800c326:	db03      	blt.n	800c330 <_svfprintf_r+0x5cc>
 800c328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32a:	42ab      	cmp	r3, r5
 800c32c:	db00      	blt.n	800c330 <_svfprintf_r+0x5cc>
 800c32e:	e1e6      	b.n	800c6fe <_svfprintf_r+0x99a>
 800c330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c332:	3b02      	subs	r3, #2
 800c334:	930f      	str	r3, [sp, #60]	; 0x3c
 800c336:	223c      	movs	r2, #60	; 0x3c
 800c338:	466b      	mov	r3, sp
 800c33a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c33c:	189b      	adds	r3, r3, r2
 800c33e:	1e6c      	subs	r4, r5, #1
 800c340:	3a1c      	subs	r2, #28
 800c342:	2000      	movs	r0, #0
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	9426      	str	r4, [sp, #152]	; 0x98
 800c348:	4391      	bics	r1, r2
 800c34a:	2941      	cmp	r1, #65	; 0x41
 800c34c:	d102      	bne.n	800c354 <_svfprintf_r+0x5f0>
 800c34e:	330f      	adds	r3, #15
 800c350:	b2db      	uxtb	r3, r3
 800c352:	3001      	adds	r0, #1
 800c354:	a928      	add	r1, sp, #160	; 0xa0
 800c356:	700b      	strb	r3, [r1, #0]
 800c358:	232b      	movs	r3, #43	; 0x2b
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	da02      	bge.n	800c364 <_svfprintf_r+0x600>
 800c35e:	2401      	movs	r4, #1
 800c360:	3302      	adds	r3, #2
 800c362:	1b64      	subs	r4, r4, r5
 800c364:	704b      	strb	r3, [r1, #1]
 800c366:	2c09      	cmp	r4, #9
 800c368:	dc00      	bgt.n	800c36c <_svfprintf_r+0x608>
 800c36a:	e1ba      	b.n	800c6e2 <_svfprintf_r+0x97e>
 800c36c:	2337      	movs	r3, #55	; 0x37
 800c36e:	250a      	movs	r5, #10
 800c370:	aa1e      	add	r2, sp, #120	; 0x78
 800c372:	189b      	adds	r3, r3, r2
 800c374:	9310      	str	r3, [sp, #64]	; 0x40
 800c376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c378:	0020      	movs	r0, r4
 800c37a:	9309      	str	r3, [sp, #36]	; 0x24
 800c37c:	0029      	movs	r1, r5
 800c37e:	3b01      	subs	r3, #1
 800c380:	9310      	str	r3, [sp, #64]	; 0x40
 800c382:	f7f4 f84b 	bl	800041c <__aeabi_idivmod>
 800c386:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c388:	3130      	adds	r1, #48	; 0x30
 800c38a:	7019      	strb	r1, [r3, #0]
 800c38c:	0020      	movs	r0, r4
 800c38e:	0029      	movs	r1, r5
 800c390:	9411      	str	r4, [sp, #68]	; 0x44
 800c392:	f7f3 ff5d 	bl	8000250 <__divsi3>
 800c396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c398:	0004      	movs	r4, r0
 800c39a:	2b63      	cmp	r3, #99	; 0x63
 800c39c:	dceb      	bgt.n	800c376 <_svfprintf_r+0x612>
 800c39e:	222a      	movs	r2, #42	; 0x2a
 800c3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a2:	a81e      	add	r0, sp, #120	; 0x78
 800c3a4:	1e99      	subs	r1, r3, #2
 800c3a6:	1812      	adds	r2, r2, r0
 800c3a8:	2037      	movs	r0, #55	; 0x37
 800c3aa:	000b      	movs	r3, r1
 800c3ac:	3430      	adds	r4, #48	; 0x30
 800c3ae:	700c      	strb	r4, [r1, #0]
 800c3b0:	ac1e      	add	r4, sp, #120	; 0x78
 800c3b2:	1900      	adds	r0, r0, r4
 800c3b4:	4283      	cmp	r3, r0
 800c3b6:	d200      	bcs.n	800c3ba <_svfprintf_r+0x656>
 800c3b8:	e18e      	b.n	800c6d8 <_svfprintf_r+0x974>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4281      	cmp	r1, r0
 800c3be:	d804      	bhi.n	800c3ca <_svfprintf_r+0x666>
 800c3c0:	aa1e      	add	r2, sp, #120	; 0x78
 800c3c2:	3339      	adds	r3, #57	; 0x39
 800c3c4:	189b      	adds	r3, r3, r2
 800c3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	222a      	movs	r2, #42	; 0x2a
 800c3cc:	a91e      	add	r1, sp, #120	; 0x78
 800c3ce:	1852      	adds	r2, r2, r1
 800c3d0:	18d3      	adds	r3, r2, r3
 800c3d2:	aa28      	add	r2, sp, #160	; 0xa0
 800c3d4:	1a9b      	subs	r3, r3, r2
 800c3d6:	931e      	str	r3, [sp, #120]	; 0x78
 800c3d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c3da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3dc:	4694      	mov	ip, r2
 800c3de:	4463      	add	r3, ip
 800c3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	dc01      	bgt.n	800c3ec <_svfprintf_r+0x688>
 800c3e8:	07f3      	lsls	r3, r6, #31
 800c3ea:	d504      	bpl.n	800c3f6 <_svfprintf_r+0x692>
 800c3ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f0:	4694      	mov	ip, r2
 800c3f2:	4463      	add	r3, ip
 800c3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f6:	2280      	movs	r2, #128	; 0x80
 800c3f8:	4b74      	ldr	r3, [pc, #464]	; (800c5cc <_svfprintf_r+0x868>)
 800c3fa:	0052      	lsls	r2, r2, #1
 800c3fc:	4033      	ands	r3, r6
 800c3fe:	431a      	orrs	r2, r3
 800c400:	2300      	movs	r3, #0
 800c402:	001d      	movs	r5, r3
 800c404:	921a      	str	r2, [sp, #104]	; 0x68
 800c406:	9310      	str	r3, [sp, #64]	; 0x40
 800c408:	9311      	str	r3, [sp, #68]	; 0x44
 800c40a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c40c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c40e:	9319      	str	r3, [sp, #100]	; 0x64
 800c410:	2b00      	cmp	r3, #0
 800c412:	d006      	beq.n	800c422 <_svfprintf_r+0x6be>
 800c414:	231b      	movs	r3, #27
 800c416:	aa1e      	add	r2, sp, #120	; 0x78
 800c418:	189b      	adds	r3, r3, r2
 800c41a:	222d      	movs	r2, #45	; 0x2d
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	2300      	movs	r3, #0
 800c420:	9319      	str	r3, [sp, #100]	; 0x64
 800c422:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c426:	931a      	str	r3, [sp, #104]	; 0x68
 800c428:	4293      	cmp	r3, r2
 800c42a:	da00      	bge.n	800c42e <_svfprintf_r+0x6ca>
 800c42c:	921a      	str	r2, [sp, #104]	; 0x68
 800c42e:	231b      	movs	r3, #27
 800c430:	aa1e      	add	r2, sp, #120	; 0x78
 800c432:	189b      	adds	r3, r3, r2
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	1e5a      	subs	r2, r3, #1
 800c438:	4193      	sbcs	r3, r2
 800c43a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c43c:	18d3      	adds	r3, r2, r3
 800c43e:	931a      	str	r3, [sp, #104]	; 0x68
 800c440:	0032      	movs	r2, r6
 800c442:	2302      	movs	r3, #2
 800c444:	401a      	ands	r2, r3
 800c446:	9220      	str	r2, [sp, #128]	; 0x80
 800c448:	421e      	tst	r6, r3
 800c44a:	d002      	beq.n	800c452 <_svfprintf_r+0x6ee>
 800c44c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c44e:	3302      	adds	r3, #2
 800c450:	931a      	str	r3, [sp, #104]	; 0x68
 800c452:	2384      	movs	r3, #132	; 0x84
 800c454:	0032      	movs	r2, r6
 800c456:	401a      	ands	r2, r3
 800c458:	9221      	str	r2, [sp, #132]	; 0x84
 800c45a:	421e      	tst	r6, r3
 800c45c:	d11f      	bne.n	800c49e <_svfprintf_r+0x73a>
 800c45e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c460:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c462:	1a9c      	subs	r4, r3, r2
 800c464:	2c00      	cmp	r4, #0
 800c466:	dd1a      	ble.n	800c49e <_svfprintf_r+0x73a>
 800c468:	0039      	movs	r1, r7
 800c46a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c46c:	4858      	ldr	r0, [pc, #352]	; (800c5d0 <_svfprintf_r+0x86c>)
 800c46e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c470:	3301      	adds	r3, #1
 800c472:	3108      	adds	r1, #8
 800c474:	6038      	str	r0, [r7, #0]
 800c476:	2c10      	cmp	r4, #16
 800c478:	dd00      	ble.n	800c47c <_svfprintf_r+0x718>
 800c47a:	e31c      	b.n	800cab6 <_svfprintf_r+0xd52>
 800c47c:	607c      	str	r4, [r7, #4]
 800c47e:	18a4      	adds	r4, r4, r2
 800c480:	000f      	movs	r7, r1
 800c482:	942e      	str	r4, [sp, #184]	; 0xb8
 800c484:	932d      	str	r3, [sp, #180]	; 0xb4
 800c486:	2b07      	cmp	r3, #7
 800c488:	dd09      	ble.n	800c49e <_svfprintf_r+0x73a>
 800c48a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c48c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c48e:	aa2c      	add	r2, sp, #176	; 0xb0
 800c490:	f003 fd7e 	bl	800ff90 <__ssprint_r>
 800c494:	2800      	cmp	r0, #0
 800c496:	d001      	beq.n	800c49c <_svfprintf_r+0x738>
 800c498:	f000 fe43 	bl	800d122 <_svfprintf_r+0x13be>
 800c49c:	af2f      	add	r7, sp, #188	; 0xbc
 800c49e:	221b      	movs	r2, #27
 800c4a0:	a91e      	add	r1, sp, #120	; 0x78
 800c4a2:	1852      	adds	r2, r2, r1
 800c4a4:	7811      	ldrb	r1, [r2, #0]
 800c4a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	d014      	beq.n	800c4d6 <_svfprintf_r+0x772>
 800c4ac:	603a      	str	r2, [r7, #0]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	189b      	adds	r3, r3, r2
 800c4b2:	932e      	str	r3, [sp, #184]	; 0xb8
 800c4b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	189b      	adds	r3, r3, r2
 800c4ba:	932d      	str	r3, [sp, #180]	; 0xb4
 800c4bc:	3708      	adds	r7, #8
 800c4be:	2b07      	cmp	r3, #7
 800c4c0:	dd09      	ble.n	800c4d6 <_svfprintf_r+0x772>
 800c4c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800c4c8:	f003 fd62 	bl	800ff90 <__ssprint_r>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d001      	beq.n	800c4d4 <_svfprintf_r+0x770>
 800c4d0:	f000 fe27 	bl	800d122 <_svfprintf_r+0x13be>
 800c4d4:	af2f      	add	r7, sp, #188	; 0xbc
 800c4d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	d015      	beq.n	800c50a <_svfprintf_r+0x7a6>
 800c4de:	aa25      	add	r2, sp, #148	; 0x94
 800c4e0:	603a      	str	r2, [r7, #0]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	189b      	adds	r3, r3, r2
 800c4e6:	932e      	str	r3, [sp, #184]	; 0xb8
 800c4e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	2b07      	cmp	r3, #7
 800c4f4:	dd09      	ble.n	800c50a <_svfprintf_r+0x7a6>
 800c4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800c4fc:	f003 fd48 	bl	800ff90 <__ssprint_r>
 800c500:	2800      	cmp	r0, #0
 800c502:	d001      	beq.n	800c508 <_svfprintf_r+0x7a4>
 800c504:	f000 fe0d 	bl	800d122 <_svfprintf_r+0x13be>
 800c508:	af2f      	add	r7, sp, #188	; 0xbc
 800c50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c50c:	2b80      	cmp	r3, #128	; 0x80
 800c50e:	d11f      	bne.n	800c550 <_svfprintf_r+0x7ec>
 800c510:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c512:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c514:	1a9c      	subs	r4, r3, r2
 800c516:	2c00      	cmp	r4, #0
 800c518:	dd1a      	ble.n	800c550 <_svfprintf_r+0x7ec>
 800c51a:	0039      	movs	r1, r7
 800c51c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c51e:	482d      	ldr	r0, [pc, #180]	; (800c5d4 <_svfprintf_r+0x870>)
 800c520:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c522:	3301      	adds	r3, #1
 800c524:	3108      	adds	r1, #8
 800c526:	6038      	str	r0, [r7, #0]
 800c528:	2c10      	cmp	r4, #16
 800c52a:	dd00      	ble.n	800c52e <_svfprintf_r+0x7ca>
 800c52c:	e2d6      	b.n	800cadc <_svfprintf_r+0xd78>
 800c52e:	607c      	str	r4, [r7, #4]
 800c530:	18a4      	adds	r4, r4, r2
 800c532:	000f      	movs	r7, r1
 800c534:	942e      	str	r4, [sp, #184]	; 0xb8
 800c536:	932d      	str	r3, [sp, #180]	; 0xb4
 800c538:	2b07      	cmp	r3, #7
 800c53a:	dd09      	ble.n	800c550 <_svfprintf_r+0x7ec>
 800c53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c53e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c540:	aa2c      	add	r2, sp, #176	; 0xb0
 800c542:	f003 fd25 	bl	800ff90 <__ssprint_r>
 800c546:	2800      	cmp	r0, #0
 800c548:	d001      	beq.n	800c54e <_svfprintf_r+0x7ea>
 800c54a:	f000 fdea 	bl	800d122 <_svfprintf_r+0x13be>
 800c54e:	af2f      	add	r7, sp, #188	; 0xbc
 800c550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c554:	1a9c      	subs	r4, r3, r2
 800c556:	2c00      	cmp	r4, #0
 800c558:	dd1a      	ble.n	800c590 <_svfprintf_r+0x82c>
 800c55a:	0039      	movs	r1, r7
 800c55c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c55e:	481d      	ldr	r0, [pc, #116]	; (800c5d4 <_svfprintf_r+0x870>)
 800c560:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c562:	3301      	adds	r3, #1
 800c564:	3108      	adds	r1, #8
 800c566:	6038      	str	r0, [r7, #0]
 800c568:	2c10      	cmp	r4, #16
 800c56a:	dd00      	ble.n	800c56e <_svfprintf_r+0x80a>
 800c56c:	e2c9      	b.n	800cb02 <_svfprintf_r+0xd9e>
 800c56e:	18a2      	adds	r2, r4, r2
 800c570:	607c      	str	r4, [r7, #4]
 800c572:	922e      	str	r2, [sp, #184]	; 0xb8
 800c574:	000f      	movs	r7, r1
 800c576:	932d      	str	r3, [sp, #180]	; 0xb4
 800c578:	2b07      	cmp	r3, #7
 800c57a:	dd09      	ble.n	800c590 <_svfprintf_r+0x82c>
 800c57c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c57e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c580:	aa2c      	add	r2, sp, #176	; 0xb0
 800c582:	f003 fd05 	bl	800ff90 <__ssprint_r>
 800c586:	2800      	cmp	r0, #0
 800c588:	d001      	beq.n	800c58e <_svfprintf_r+0x82a>
 800c58a:	f000 fdca 	bl	800d122 <_svfprintf_r+0x13be>
 800c58e:	af2f      	add	r7, sp, #188	; 0xbc
 800c590:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c592:	9319      	str	r3, [sp, #100]	; 0x64
 800c594:	05f3      	lsls	r3, r6, #23
 800c596:	d500      	bpl.n	800c59a <_svfprintf_r+0x836>
 800c598:	e2ce      	b.n	800cb38 <_svfprintf_r+0xdd4>
 800c59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c59c:	9b08      	ldr	r3, [sp, #32]
 800c59e:	4694      	mov	ip, r2
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a4:	607b      	str	r3, [r7, #4]
 800c5a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5a8:	4463      	add	r3, ip
 800c5aa:	932e      	str	r3, [sp, #184]	; 0xb8
 800c5ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	932d      	str	r3, [sp, #180]	; 0xb4
 800c5b2:	2b07      	cmp	r3, #7
 800c5b4:	dd00      	ble.n	800c5b8 <_svfprintf_r+0x854>
 800c5b6:	e3a3      	b.n	800cd00 <_svfprintf_r+0xf9c>
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	e301      	b.n	800cbc0 <_svfprintf_r+0xe5c>
 800c5bc:	080130bc 	.word	0x080130bc
 800c5c0:	080130cd 	.word	0x080130cd
 800c5c4:	40300000 	.word	0x40300000
 800c5c8:	3fe00000 	.word	0x3fe00000
 800c5cc:	fffffbff 	.word	0xfffffbff
 800c5d0:	080130e0 	.word	0x080130e0
 800c5d4:	080130f0 	.word	0x080130f0
 800c5d8:	9b08      	ldr	r3, [sp, #32]
 800c5da:	930c      	str	r3, [sp, #48]	; 0x30
 800c5dc:	e610      	b.n	800c200 <_svfprintf_r+0x49c>
 800c5de:	2306      	movs	r3, #6
 800c5e0:	e5fd      	b.n	800c1de <_svfprintf_r+0x47a>
 800c5e2:	930e      	str	r3, [sp, #56]	; 0x38
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e61a      	b.n	800c21e <_svfprintf_r+0x4ba>
 800c5e8:	7010      	strb	r0, [r2, #0]
 800c5ea:	e684      	b.n	800c2f6 <_svfprintf_r+0x592>
 800c5ec:	7018      	strb	r0, [r3, #0]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	1aca      	subs	r2, r1, r3
 800c5f2:	d5fb      	bpl.n	800c5ec <_svfprintf_r+0x888>
 800c5f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	3201      	adds	r2, #1
 800c5fa:	db01      	blt.n	800c600 <_svfprintf_r+0x89c>
 800c5fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c5fe:	3301      	adds	r3, #1
 800c600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c602:	18d3      	adds	r3, r2, r3
 800c604:	9323      	str	r3, [sp, #140]	; 0x8c
 800c606:	e684      	b.n	800c312 <_svfprintf_r+0x5ae>
 800c608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c60a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c60c:	2030      	movs	r0, #48	; 0x30
 800c60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c610:	1851      	adds	r1, r2, r1
 800c612:	e7ed      	b.n	800c5f0 <_svfprintf_r+0x88c>
 800c614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c616:	2303      	movs	r3, #3
 800c618:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c61a:	2a46      	cmp	r2, #70	; 0x46
 800c61c:	d006      	beq.n	800c62c <_svfprintf_r+0x8c8>
 800c61e:	0014      	movs	r4, r2
 800c620:	3c45      	subs	r4, #69	; 0x45
 800c622:	4262      	negs	r2, r4
 800c624:	4154      	adcs	r4, r2
 800c626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c628:	3b01      	subs	r3, #1
 800c62a:	1914      	adds	r4, r2, r4
 800c62c:	aa2a      	add	r2, sp, #168	; 0xa8
 800c62e:	9204      	str	r2, [sp, #16]
 800c630:	aa27      	add	r2, sp, #156	; 0x9c
 800c632:	9203      	str	r2, [sp, #12]
 800c634:	aa26      	add	r2, sp, #152	; 0x98
 800c636:	9202      	str	r2, [sp, #8]
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	002a      	movs	r2, r5
 800c63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c63e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c640:	9401      	str	r4, [sp, #4]
 800c642:	f002 fad7 	bl	800ebf4 <_dtoa_r>
 800c646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c648:	9008      	str	r0, [sp, #32]
 800c64a:	2b47      	cmp	r3, #71	; 0x47
 800c64c:	d103      	bne.n	800c656 <_svfprintf_r+0x8f2>
 800c64e:	07f3      	lsls	r3, r6, #31
 800c650:	d401      	bmi.n	800c656 <_svfprintf_r+0x8f2>
 800c652:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c654:	e65e      	b.n	800c314 <_svfprintf_r+0x5b0>
 800c656:	9b08      	ldr	r3, [sp, #32]
 800c658:	191b      	adds	r3, r3, r4
 800c65a:	9311      	str	r3, [sp, #68]	; 0x44
 800c65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c65e:	2b46      	cmp	r3, #70	; 0x46
 800c660:	d112      	bne.n	800c688 <_svfprintf_r+0x924>
 800c662:	9b08      	ldr	r3, [sp, #32]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b30      	cmp	r3, #48	; 0x30
 800c668:	d10a      	bne.n	800c680 <_svfprintf_r+0x91c>
 800c66a:	2200      	movs	r2, #0
 800c66c:	2300      	movs	r3, #0
 800c66e:	0028      	movs	r0, r5
 800c670:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c672:	f7f3 fee9 	bl	8000448 <__aeabi_dcmpeq>
 800c676:	2800      	cmp	r0, #0
 800c678:	d102      	bne.n	800c680 <_svfprintf_r+0x91c>
 800c67a:	2301      	movs	r3, #1
 800c67c:	1b1b      	subs	r3, r3, r4
 800c67e:	9326      	str	r3, [sp, #152]	; 0x98
 800c680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c682:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c684:	18d3      	adds	r3, r2, r3
 800c686:	9311      	str	r3, [sp, #68]	; 0x44
 800c688:	2200      	movs	r2, #0
 800c68a:	2300      	movs	r3, #0
 800c68c:	0028      	movs	r0, r5
 800c68e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c690:	f7f3 feda 	bl	8000448 <__aeabi_dcmpeq>
 800c694:	2800      	cmp	r0, #0
 800c696:	d001      	beq.n	800c69c <_svfprintf_r+0x938>
 800c698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c69a:	932a      	str	r3, [sp, #168]	; 0xa8
 800c69c:	2230      	movs	r2, #48	; 0x30
 800c69e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c6a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c6a2:	4299      	cmp	r1, r3
 800c6a4:	d9d5      	bls.n	800c652 <_svfprintf_r+0x8ee>
 800c6a6:	1c59      	adds	r1, r3, #1
 800c6a8:	912a      	str	r1, [sp, #168]	; 0xa8
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	e7f7      	b.n	800c69e <_svfprintf_r+0x93a>
 800c6ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6b0:	2b46      	cmp	r3, #70	; 0x46
 800c6b2:	d000      	beq.n	800c6b6 <_svfprintf_r+0x952>
 800c6b4:	e63f      	b.n	800c336 <_svfprintf_r+0x5d2>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	0033      	movs	r3, r6
 800c6ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6bc:	4013      	ands	r3, r2
 800c6be:	430b      	orrs	r3, r1
 800c6c0:	2d00      	cmp	r5, #0
 800c6c2:	dd2c      	ble.n	800c71e <_svfprintf_r+0x9ba>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d046      	beq.n	800c756 <_svfprintf_r+0x9f2>
 800c6c8:	000a      	movs	r2, r1
 800c6ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6cc:	18eb      	adds	r3, r5, r3
 800c6ce:	18d3      	adds	r3, r2, r3
 800c6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d2:	2366      	movs	r3, #102	; 0x66
 800c6d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6d6:	e030      	b.n	800c73a <_svfprintf_r+0x9d6>
 800c6d8:	781c      	ldrb	r4, [r3, #0]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	7014      	strb	r4, [r2, #0]
 800c6de:	3201      	adds	r2, #1
 800c6e0:	e668      	b.n	800c3b4 <_svfprintf_r+0x650>
 800c6e2:	222a      	movs	r2, #42	; 0x2a
 800c6e4:	ab1e      	add	r3, sp, #120	; 0x78
 800c6e6:	18d2      	adds	r2, r2, r3
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d104      	bne.n	800c6f6 <_svfprintf_r+0x992>
 800c6ec:	2330      	movs	r3, #48	; 0x30
 800c6ee:	222b      	movs	r2, #43	; 0x2b
 800c6f0:	708b      	strb	r3, [r1, #2]
 800c6f2:	ab1e      	add	r3, sp, #120	; 0x78
 800c6f4:	18d2      	adds	r2, r2, r3
 800c6f6:	3430      	adds	r4, #48	; 0x30
 800c6f8:	1c53      	adds	r3, r2, #1
 800c6fa:	7014      	strb	r4, [r2, #0]
 800c6fc:	e669      	b.n	800c3d2 <_svfprintf_r+0x66e>
 800c6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c700:	42ab      	cmp	r3, r5
 800c702:	dd12      	ble.n	800c72a <_svfprintf_r+0x9c6>
 800c704:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c708:	4694      	mov	ip, r2
 800c70a:	4463      	add	r3, ip
 800c70c:	9309      	str	r3, [sp, #36]	; 0x24
 800c70e:	2367      	movs	r3, #103	; 0x67
 800c710:	930f      	str	r3, [sp, #60]	; 0x3c
 800c712:	2d00      	cmp	r5, #0
 800c714:	dc11      	bgt.n	800c73a <_svfprintf_r+0x9d6>
 800c716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c718:	1b5b      	subs	r3, r3, r5
 800c71a:	3301      	adds	r3, #1
 800c71c:	e00c      	b.n	800c738 <_svfprintf_r+0x9d4>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d01b      	beq.n	800c75a <_svfprintf_r+0x9f6>
 800c722:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c726:	3301      	adds	r3, #1
 800c728:	e7d1      	b.n	800c6ce <_svfprintf_r+0x96a>
 800c72a:	2367      	movs	r3, #103	; 0x67
 800c72c:	9509      	str	r5, [sp, #36]	; 0x24
 800c72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c730:	07f3      	lsls	r3, r6, #31
 800c732:	d502      	bpl.n	800c73a <_svfprintf_r+0x9d6>
 800c734:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c736:	18eb      	adds	r3, r5, r3
 800c738:	9309      	str	r3, [sp, #36]	; 0x24
 800c73a:	2380      	movs	r3, #128	; 0x80
 800c73c:	0032      	movs	r2, r6
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	401a      	ands	r2, r3
 800c742:	9211      	str	r2, [sp, #68]	; 0x44
 800c744:	2200      	movs	r2, #0
 800c746:	9210      	str	r2, [sp, #64]	; 0x40
 800c748:	421e      	tst	r6, r3
 800c74a:	d100      	bne.n	800c74e <_svfprintf_r+0x9ea>
 800c74c:	e65d      	b.n	800c40a <_svfprintf_r+0x6a6>
 800c74e:	4295      	cmp	r5, r2
 800c750:	dc25      	bgt.n	800c79e <_svfprintf_r+0xa3a>
 800c752:	9211      	str	r2, [sp, #68]	; 0x44
 800c754:	e659      	b.n	800c40a <_svfprintf_r+0x6a6>
 800c756:	9509      	str	r5, [sp, #36]	; 0x24
 800c758:	e7bb      	b.n	800c6d2 <_svfprintf_r+0x96e>
 800c75a:	2366      	movs	r3, #102	; 0x66
 800c75c:	9209      	str	r2, [sp, #36]	; 0x24
 800c75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c760:	e7eb      	b.n	800c73a <_svfprintf_r+0x9d6>
 800c762:	42ab      	cmp	r3, r5
 800c764:	da0e      	bge.n	800c784 <_svfprintf_r+0xa20>
 800c766:	1aed      	subs	r5, r5, r3
 800c768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c76a:	785b      	ldrb	r3, [r3, #1]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d012      	beq.n	800c796 <_svfprintf_r+0xa32>
 800c770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c772:	3301      	adds	r3, #1
 800c774:	9311      	str	r3, [sp, #68]	; 0x44
 800c776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c778:	3301      	adds	r3, #1
 800c77a:	9312      	str	r3, [sp, #72]	; 0x48
 800c77c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2bff      	cmp	r3, #255	; 0xff
 800c782:	d1ee      	bne.n	800c762 <_svfprintf_r+0x9fe>
 800c784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c788:	189b      	adds	r3, r3, r2
 800c78a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c78c:	4353      	muls	r3, r2
 800c78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c790:	189b      	adds	r3, r3, r2
 800c792:	9309      	str	r3, [sp, #36]	; 0x24
 800c794:	e639      	b.n	800c40a <_svfprintf_r+0x6a6>
 800c796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c798:	3301      	adds	r3, #1
 800c79a:	9310      	str	r3, [sp, #64]	; 0x40
 800c79c:	e7ee      	b.n	800c77c <_svfprintf_r+0xa18>
 800c79e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7a0:	9311      	str	r3, [sp, #68]	; 0x44
 800c7a2:	e7eb      	b.n	800c77c <_svfprintf_r+0xa18>
 800c7a4:	1d23      	adds	r3, r4, #4
 800c7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7a8:	06b3      	lsls	r3, r6, #26
 800c7aa:	d509      	bpl.n	800c7c0 <_svfprintf_r+0xa5c>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	17d2      	asrs	r2, r2, #31
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c7ba:	9308      	str	r3, [sp, #32]
 800c7bc:	f7ff fb0d 	bl	800bdda <_svfprintf_r+0x76>
 800c7c0:	06f3      	lsls	r3, r6, #27
 800c7c2:	d503      	bpl.n	800c7cc <_svfprintf_r+0xa68>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	e7f4      	b.n	800c7b6 <_svfprintf_r+0xa52>
 800c7cc:	0673      	lsls	r3, r6, #25
 800c7ce:	d503      	bpl.n	800c7d8 <_svfprintf_r+0xa74>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7d4:	801a      	strh	r2, [r3, #0]
 800c7d6:	e7ee      	b.n	800c7b6 <_svfprintf_r+0xa52>
 800c7d8:	05b6      	lsls	r6, r6, #22
 800c7da:	d5f3      	bpl.n	800c7c4 <_svfprintf_r+0xa60>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	e7e8      	b.n	800c7b6 <_svfprintf_r+0xa52>
 800c7e4:	2310      	movs	r3, #16
 800c7e6:	431e      	orrs	r6, r3
 800c7e8:	2320      	movs	r3, #32
 800c7ea:	0030      	movs	r0, r6
 800c7ec:	4018      	ands	r0, r3
 800c7ee:	421e      	tst	r6, r3
 800c7f0:	d00f      	beq.n	800c812 <_svfprintf_r+0xaae>
 800c7f2:	3b19      	subs	r3, #25
 800c7f4:	3407      	adds	r4, #7
 800c7f6:	439c      	bics	r4, r3
 800c7f8:	0022      	movs	r2, r4
 800c7fa:	ca18      	ldmia	r2!, {r3, r4}
 800c7fc:	9306      	str	r3, [sp, #24]
 800c7fe:	9407      	str	r4, [sp, #28]
 800c800:	920d      	str	r2, [sp, #52]	; 0x34
 800c802:	4bc9      	ldr	r3, [pc, #804]	; (800cb28 <_svfprintf_r+0xdc4>)
 800c804:	401e      	ands	r6, r3
 800c806:	2300      	movs	r3, #0
 800c808:	221b      	movs	r2, #27
 800c80a:	a91e      	add	r1, sp, #120	; 0x78
 800c80c:	1852      	adds	r2, r2, r1
 800c80e:	2100      	movs	r1, #0
 800c810:	e430      	b.n	800c074 <_svfprintf_r+0x310>
 800c812:	0022      	movs	r2, r4
 800c814:	ca08      	ldmia	r2!, {r3}
 800c816:	0031      	movs	r1, r6
 800c818:	920d      	str	r2, [sp, #52]	; 0x34
 800c81a:	2210      	movs	r2, #16
 800c81c:	4011      	ands	r1, r2
 800c81e:	4216      	tst	r6, r2
 800c820:	d002      	beq.n	800c828 <_svfprintf_r+0xac4>
 800c822:	9306      	str	r3, [sp, #24]
 800c824:	9007      	str	r0, [sp, #28]
 800c826:	e7ec      	b.n	800c802 <_svfprintf_r+0xa9e>
 800c828:	2240      	movs	r2, #64	; 0x40
 800c82a:	0030      	movs	r0, r6
 800c82c:	4010      	ands	r0, r2
 800c82e:	4216      	tst	r6, r2
 800c830:	d003      	beq.n	800c83a <_svfprintf_r+0xad6>
 800c832:	b29b      	uxth	r3, r3
 800c834:	9306      	str	r3, [sp, #24]
 800c836:	9107      	str	r1, [sp, #28]
 800c838:	e7e3      	b.n	800c802 <_svfprintf_r+0xa9e>
 800c83a:	2280      	movs	r2, #128	; 0x80
 800c83c:	0031      	movs	r1, r6
 800c83e:	0092      	lsls	r2, r2, #2
 800c840:	4011      	ands	r1, r2
 800c842:	4216      	tst	r6, r2
 800c844:	d0f6      	beq.n	800c834 <_svfprintf_r+0xad0>
 800c846:	b2db      	uxtb	r3, r3
 800c848:	e7eb      	b.n	800c822 <_svfprintf_r+0xabe>
 800c84a:	0023      	movs	r3, r4
 800c84c:	cb04      	ldmia	r3!, {r2}
 800c84e:	49b7      	ldr	r1, [pc, #732]	; (800cb2c <_svfprintf_r+0xdc8>)
 800c850:	9206      	str	r2, [sp, #24]
 800c852:	aa25      	add	r2, sp, #148	; 0x94
 800c854:	8011      	strh	r1, [r2, #0]
 800c856:	4ab6      	ldr	r2, [pc, #728]	; (800cb30 <_svfprintf_r+0xdcc>)
 800c858:	930d      	str	r3, [sp, #52]	; 0x34
 800c85a:	2300      	movs	r3, #0
 800c85c:	921f      	str	r2, [sp, #124]	; 0x7c
 800c85e:	2278      	movs	r2, #120	; 0x78
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	3302      	adds	r3, #2
 800c864:	431e      	orrs	r6, r3
 800c866:	920f      	str	r2, [sp, #60]	; 0x3c
 800c868:	e7ce      	b.n	800c808 <_svfprintf_r+0xaa4>
 800c86a:	0023      	movs	r3, r4
 800c86c:	cb04      	ldmia	r3!, {r2}
 800c86e:	2400      	movs	r4, #0
 800c870:	930d      	str	r3, [sp, #52]	; 0x34
 800c872:	231b      	movs	r3, #27
 800c874:	9208      	str	r2, [sp, #32]
 800c876:	aa1e      	add	r2, sp, #120	; 0x78
 800c878:	189b      	adds	r3, r3, r2
 800c87a:	701c      	strb	r4, [r3, #0]
 800c87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87e:	3301      	adds	r3, #1
 800c880:	d00e      	beq.n	800c8a0 <_svfprintf_r+0xb3c>
 800c882:	0021      	movs	r1, r4
 800c884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c886:	9808      	ldr	r0, [sp, #32]
 800c888:	f002 f83a 	bl	800e900 <memchr>
 800c88c:	900c      	str	r0, [sp, #48]	; 0x30
 800c88e:	42a0      	cmp	r0, r4
 800c890:	d100      	bne.n	800c894 <_svfprintf_r+0xb30>
 800c892:	e10d      	b.n	800cab0 <_svfprintf_r+0xd4c>
 800c894:	9a08      	ldr	r2, [sp, #32]
 800c896:	1a83      	subs	r3, r0, r2
 800c898:	9309      	str	r3, [sp, #36]	; 0x24
 800c89a:	0023      	movs	r3, r4
 800c89c:	940c      	str	r4, [sp, #48]	; 0x30
 800c89e:	e44e      	b.n	800c13e <_svfprintf_r+0x3da>
 800c8a0:	9808      	ldr	r0, [sp, #32]
 800c8a2:	f7f3 fc2f 	bl	8000104 <strlen>
 800c8a6:	9009      	str	r0, [sp, #36]	; 0x24
 800c8a8:	e7f7      	b.n	800c89a <_svfprintf_r+0xb36>
 800c8aa:	2310      	movs	r3, #16
 800c8ac:	431e      	orrs	r6, r3
 800c8ae:	2320      	movs	r3, #32
 800c8b0:	0030      	movs	r0, r6
 800c8b2:	4018      	ands	r0, r3
 800c8b4:	421e      	tst	r6, r3
 800c8b6:	d009      	beq.n	800c8cc <_svfprintf_r+0xb68>
 800c8b8:	3b19      	subs	r3, #25
 800c8ba:	3407      	adds	r4, #7
 800c8bc:	439c      	bics	r4, r3
 800c8be:	0022      	movs	r2, r4
 800c8c0:	ca18      	ldmia	r2!, {r3, r4}
 800c8c2:	9306      	str	r3, [sp, #24]
 800c8c4:	9407      	str	r4, [sp, #28]
 800c8c6:	920d      	str	r2, [sp, #52]	; 0x34
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e79d      	b.n	800c808 <_svfprintf_r+0xaa4>
 800c8cc:	0023      	movs	r3, r4
 800c8ce:	cb04      	ldmia	r3!, {r2}
 800c8d0:	0031      	movs	r1, r6
 800c8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	4019      	ands	r1, r3
 800c8d8:	421e      	tst	r6, r3
 800c8da:	d003      	beq.n	800c8e4 <_svfprintf_r+0xb80>
 800c8dc:	9206      	str	r2, [sp, #24]
 800c8de:	9007      	str	r0, [sp, #28]
 800c8e0:	3b0f      	subs	r3, #15
 800c8e2:	e791      	b.n	800c808 <_svfprintf_r+0xaa4>
 800c8e4:	2340      	movs	r3, #64	; 0x40
 800c8e6:	0030      	movs	r0, r6
 800c8e8:	4018      	ands	r0, r3
 800c8ea:	421e      	tst	r6, r3
 800c8ec:	d003      	beq.n	800c8f6 <_svfprintf_r+0xb92>
 800c8ee:	b293      	uxth	r3, r2
 800c8f0:	9306      	str	r3, [sp, #24]
 800c8f2:	9107      	str	r1, [sp, #28]
 800c8f4:	e7e8      	b.n	800c8c8 <_svfprintf_r+0xb64>
 800c8f6:	2380      	movs	r3, #128	; 0x80
 800c8f8:	0031      	movs	r1, r6
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4019      	ands	r1, r3
 800c8fe:	421e      	tst	r6, r3
 800c900:	d003      	beq.n	800c90a <_svfprintf_r+0xba6>
 800c902:	b2d3      	uxtb	r3, r2
 800c904:	9306      	str	r3, [sp, #24]
 800c906:	9007      	str	r0, [sp, #28]
 800c908:	e7de      	b.n	800c8c8 <_svfprintf_r+0xb64>
 800c90a:	9206      	str	r2, [sp, #24]
 800c90c:	e7f1      	b.n	800c8f2 <_svfprintf_r+0xb8e>
 800c90e:	4b89      	ldr	r3, [pc, #548]	; (800cb34 <_svfprintf_r+0xdd0>)
 800c910:	0030      	movs	r0, r6
 800c912:	931f      	str	r3, [sp, #124]	; 0x7c
 800c914:	2320      	movs	r3, #32
 800c916:	4018      	ands	r0, r3
 800c918:	421e      	tst	r6, r3
 800c91a:	d01a      	beq.n	800c952 <_svfprintf_r+0xbee>
 800c91c:	3b19      	subs	r3, #25
 800c91e:	3407      	adds	r4, #7
 800c920:	439c      	bics	r4, r3
 800c922:	0022      	movs	r2, r4
 800c924:	ca18      	ldmia	r2!, {r3, r4}
 800c926:	9306      	str	r3, [sp, #24]
 800c928:	9407      	str	r4, [sp, #28]
 800c92a:	920d      	str	r2, [sp, #52]	; 0x34
 800c92c:	07f3      	lsls	r3, r6, #31
 800c92e:	d50a      	bpl.n	800c946 <_svfprintf_r+0xbe2>
 800c930:	9b06      	ldr	r3, [sp, #24]
 800c932:	9a07      	ldr	r2, [sp, #28]
 800c934:	4313      	orrs	r3, r2
 800c936:	d006      	beq.n	800c946 <_svfprintf_r+0xbe2>
 800c938:	2230      	movs	r2, #48	; 0x30
 800c93a:	ab25      	add	r3, sp, #148	; 0x94
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c940:	705a      	strb	r2, [r3, #1]
 800c942:	2302      	movs	r3, #2
 800c944:	431e      	orrs	r6, r3
 800c946:	4b78      	ldr	r3, [pc, #480]	; (800cb28 <_svfprintf_r+0xdc4>)
 800c948:	401e      	ands	r6, r3
 800c94a:	2302      	movs	r3, #2
 800c94c:	e75c      	b.n	800c808 <_svfprintf_r+0xaa4>
 800c94e:	4b78      	ldr	r3, [pc, #480]	; (800cb30 <_svfprintf_r+0xdcc>)
 800c950:	e7de      	b.n	800c910 <_svfprintf_r+0xbac>
 800c952:	0023      	movs	r3, r4
 800c954:	cb04      	ldmia	r3!, {r2}
 800c956:	0031      	movs	r1, r6
 800c958:	930d      	str	r3, [sp, #52]	; 0x34
 800c95a:	2310      	movs	r3, #16
 800c95c:	4019      	ands	r1, r3
 800c95e:	421e      	tst	r6, r3
 800c960:	d002      	beq.n	800c968 <_svfprintf_r+0xc04>
 800c962:	9206      	str	r2, [sp, #24]
 800c964:	9007      	str	r0, [sp, #28]
 800c966:	e7e1      	b.n	800c92c <_svfprintf_r+0xbc8>
 800c968:	2340      	movs	r3, #64	; 0x40
 800c96a:	0030      	movs	r0, r6
 800c96c:	4018      	ands	r0, r3
 800c96e:	421e      	tst	r6, r3
 800c970:	d003      	beq.n	800c97a <_svfprintf_r+0xc16>
 800c972:	b293      	uxth	r3, r2
 800c974:	9306      	str	r3, [sp, #24]
 800c976:	9107      	str	r1, [sp, #28]
 800c978:	e7d8      	b.n	800c92c <_svfprintf_r+0xbc8>
 800c97a:	2380      	movs	r3, #128	; 0x80
 800c97c:	0031      	movs	r1, r6
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4019      	ands	r1, r3
 800c982:	421e      	tst	r6, r3
 800c984:	d002      	beq.n	800c98c <_svfprintf_r+0xc28>
 800c986:	b2d3      	uxtb	r3, r2
 800c988:	9306      	str	r3, [sp, #24]
 800c98a:	e7eb      	b.n	800c964 <_svfprintf_r+0xc00>
 800c98c:	9206      	str	r2, [sp, #24]
 800c98e:	e7f2      	b.n	800c976 <_svfprintf_r+0xc12>
 800c990:	9b07      	ldr	r3, [sp, #28]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10a      	bne.n	800c9ac <_svfprintf_r+0xc48>
 800c996:	9b06      	ldr	r3, [sp, #24]
 800c998:	2b09      	cmp	r3, #9
 800c99a:	d807      	bhi.n	800c9ac <_svfprintf_r+0xc48>
 800c99c:	23e7      	movs	r3, #231	; 0xe7
 800c99e:	aa1e      	add	r2, sp, #120	; 0x78
 800c9a0:	189b      	adds	r3, r3, r2
 800c9a2:	9a06      	ldr	r2, [sp, #24]
 800c9a4:	3230      	adds	r2, #48	; 0x30
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	f000 fc18 	bl	800d1dc <_svfprintf_r+0x1478>
 800c9ac:	2680      	movs	r6, #128	; 0x80
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	00f6      	lsls	r6, r6, #3
 800c9b2:	930e      	str	r3, [sp, #56]	; 0x38
 800c9b4:	ad58      	add	r5, sp, #352	; 0x160
 800c9b6:	4026      	ands	r6, r4
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	9806      	ldr	r0, [sp, #24]
 800c9bc:	9907      	ldr	r1, [sp, #28]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f7f3 fd70 	bl	80004a4 <__aeabi_uldivmod>
 800c9c4:	1e6b      	subs	r3, r5, #1
 800c9c6:	3230      	adds	r2, #48	; 0x30
 800c9c8:	9308      	str	r3, [sp, #32]
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9ce:	900c      	str	r0, [sp, #48]	; 0x30
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	9110      	str	r1, [sp, #64]	; 0x40
 800c9d4:	930e      	str	r3, [sp, #56]	; 0x38
 800c9d6:	2e00      	cmp	r6, #0
 800c9d8:	d01d      	beq.n	800ca16 <_svfprintf_r+0xcb2>
 800c9da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d118      	bne.n	800ca16 <_svfprintf_r+0xcb2>
 800c9e4:	2aff      	cmp	r2, #255	; 0xff
 800c9e6:	d016      	beq.n	800ca16 <_svfprintf_r+0xcb2>
 800c9e8:	9b07      	ldr	r3, [sp, #28]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d102      	bne.n	800c9f4 <_svfprintf_r+0xc90>
 800c9ee:	9b06      	ldr	r3, [sp, #24]
 800c9f0:	2b09      	cmp	r3, #9
 800c9f2:	d910      	bls.n	800ca16 <_svfprintf_r+0xcb2>
 800c9f4:	9b08      	ldr	r3, [sp, #32]
 800c9f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c9f8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	9308      	str	r3, [sp, #32]
 800ca00:	f7fd ffd1 	bl	800a9a6 <strncpy>
 800ca04:	2200      	movs	r2, #0
 800ca06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca08:	920e      	str	r2, [sp, #56]	; 0x38
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	1e5a      	subs	r2, r3, #1
 800ca0e:	4193      	sbcs	r3, r2
 800ca10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca12:	18d3      	adds	r3, r2, r3
 800ca14:	9312      	str	r3, [sp, #72]	; 0x48
 800ca16:	9b07      	ldr	r3, [sp, #28]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10f      	bne.n	800ca3c <_svfprintf_r+0xcd8>
 800ca1c:	9b06      	ldr	r3, [sp, #24]
 800ca1e:	2b09      	cmp	r3, #9
 800ca20:	d80c      	bhi.n	800ca3c <_svfprintf_r+0xcd8>
 800ca22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca24:	9a08      	ldr	r2, [sp, #32]
 800ca26:	9319      	str	r3, [sp, #100]	; 0x64
 800ca28:	ab58      	add	r3, sp, #352	; 0x160
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2e:	2300      	movs	r3, #0
 800ca30:	0026      	movs	r6, r4
 800ca32:	930c      	str	r3, [sp, #48]	; 0x30
 800ca34:	001d      	movs	r5, r3
 800ca36:	9310      	str	r3, [sp, #64]	; 0x40
 800ca38:	9311      	str	r3, [sp, #68]	; 0x44
 800ca3a:	e4f2      	b.n	800c422 <_svfprintf_r+0x6be>
 800ca3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca3e:	9d08      	ldr	r5, [sp, #32]
 800ca40:	9306      	str	r3, [sp, #24]
 800ca42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca44:	9307      	str	r3, [sp, #28]
 800ca46:	e7b7      	b.n	800c9b8 <_svfprintf_r+0xc54>
 800ca48:	200f      	movs	r0, #15
 800ca4a:	ab58      	add	r3, sp, #352	; 0x160
 800ca4c:	9308      	str	r3, [sp, #32]
 800ca4e:	9b08      	ldr	r3, [sp, #32]
 800ca50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ca52:	3b01      	subs	r3, #1
 800ca54:	9308      	str	r3, [sp, #32]
 800ca56:	9b06      	ldr	r3, [sp, #24]
 800ca58:	4003      	ands	r3, r0
 800ca5a:	5cd3      	ldrb	r3, [r2, r3]
 800ca5c:	9a08      	ldr	r2, [sp, #32]
 800ca5e:	7013      	strb	r3, [r2, #0]
 800ca60:	9b07      	ldr	r3, [sp, #28]
 800ca62:	0719      	lsls	r1, r3, #28
 800ca64:	9b06      	ldr	r3, [sp, #24]
 800ca66:	091a      	lsrs	r2, r3, #4
 800ca68:	9b07      	ldr	r3, [sp, #28]
 800ca6a:	4311      	orrs	r1, r2
 800ca6c:	091b      	lsrs	r3, r3, #4
 800ca6e:	9307      	str	r3, [sp, #28]
 800ca70:	000b      	movs	r3, r1
 800ca72:	9a07      	ldr	r2, [sp, #28]
 800ca74:	9106      	str	r1, [sp, #24]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	d1e9      	bne.n	800ca4e <_svfprintf_r+0xcea>
 800ca7a:	e7d2      	b.n	800ca22 <_svfprintf_r+0xcbe>
 800ca7c:	aa58      	add	r2, sp, #352	; 0x160
 800ca7e:	9208      	str	r2, [sp, #32]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1ce      	bne.n	800ca22 <_svfprintf_r+0xcbe>
 800ca84:	07f6      	lsls	r6, r6, #31
 800ca86:	d5cc      	bpl.n	800ca22 <_svfprintf_r+0xcbe>
 800ca88:	aa1e      	add	r2, sp, #120	; 0x78
 800ca8a:	33e7      	adds	r3, #231	; 0xe7
 800ca8c:	189b      	adds	r3, r3, r2
 800ca8e:	2230      	movs	r2, #48	; 0x30
 800ca90:	e789      	b.n	800c9a6 <_svfprintf_r+0xc42>
 800ca92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d100      	bne.n	800ca9a <_svfprintf_r+0xd36>
 800ca98:	e364      	b.n	800d164 <_svfprintf_r+0x1400>
 800ca9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca9c:	211b      	movs	r1, #27
 800ca9e:	ab3f      	add	r3, sp, #252	; 0xfc
 800caa0:	701a      	strb	r2, [r3, #0]
 800caa2:	2200      	movs	r2, #0
 800caa4:	a81e      	add	r0, sp, #120	; 0x78
 800caa6:	1809      	adds	r1, r1, r0
 800caa8:	700a      	strb	r2, [r1, #0]
 800caaa:	940d      	str	r4, [sp, #52]	; 0x34
 800caac:	f7ff fabd 	bl	800c02a <_svfprintf_r+0x2c6>
 800cab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cab2:	f7ff fb44 	bl	800c13e <_svfprintf_r+0x3da>
 800cab6:	2010      	movs	r0, #16
 800cab8:	1812      	adds	r2, r2, r0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	922e      	str	r2, [sp, #184]	; 0xb8
 800cabe:	932d      	str	r3, [sp, #180]	; 0xb4
 800cac0:	2b07      	cmp	r3, #7
 800cac2:	dd08      	ble.n	800cad6 <_svfprintf_r+0xd72>
 800cac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cac6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cac8:	aa2c      	add	r2, sp, #176	; 0xb0
 800caca:	f003 fa61 	bl	800ff90 <__ssprint_r>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d000      	beq.n	800cad4 <_svfprintf_r+0xd70>
 800cad2:	e326      	b.n	800d122 <_svfprintf_r+0x13be>
 800cad4:	a92f      	add	r1, sp, #188	; 0xbc
 800cad6:	000f      	movs	r7, r1
 800cad8:	3c10      	subs	r4, #16
 800cada:	e4c5      	b.n	800c468 <_svfprintf_r+0x704>
 800cadc:	2010      	movs	r0, #16
 800cade:	1812      	adds	r2, r2, r0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	922e      	str	r2, [sp, #184]	; 0xb8
 800cae4:	932d      	str	r3, [sp, #180]	; 0xb4
 800cae6:	2b07      	cmp	r3, #7
 800cae8:	dd08      	ble.n	800cafc <_svfprintf_r+0xd98>
 800caea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800caec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800caee:	aa2c      	add	r2, sp, #176	; 0xb0
 800caf0:	f003 fa4e 	bl	800ff90 <__ssprint_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d000      	beq.n	800cafa <_svfprintf_r+0xd96>
 800caf8:	e313      	b.n	800d122 <_svfprintf_r+0x13be>
 800cafa:	a92f      	add	r1, sp, #188	; 0xbc
 800cafc:	000f      	movs	r7, r1
 800cafe:	3c10      	subs	r4, #16
 800cb00:	e50b      	b.n	800c51a <_svfprintf_r+0x7b6>
 800cb02:	2010      	movs	r0, #16
 800cb04:	1812      	adds	r2, r2, r0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	922e      	str	r2, [sp, #184]	; 0xb8
 800cb0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	dd08      	ble.n	800cb22 <_svfprintf_r+0xdbe>
 800cb10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb14:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb16:	f003 fa3b 	bl	800ff90 <__ssprint_r>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d000      	beq.n	800cb20 <_svfprintf_r+0xdbc>
 800cb1e:	e300      	b.n	800d122 <_svfprintf_r+0x13be>
 800cb20:	a92f      	add	r1, sp, #188	; 0xbc
 800cb22:	000f      	movs	r7, r1
 800cb24:	3c10      	subs	r4, #16
 800cb26:	e518      	b.n	800c55a <_svfprintf_r+0x7f6>
 800cb28:	fffffbff 	.word	0xfffffbff
 800cb2c:	00007830 	.word	0x00007830
 800cb30:	080130bc 	.word	0x080130bc
 800cb34:	080130cd 	.word	0x080130cd
 800cb38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb3a:	2b65      	cmp	r3, #101	; 0x65
 800cb3c:	dc00      	bgt.n	800cb40 <_svfprintf_r+0xddc>
 800cb3e:	e241      	b.n	800cfc4 <_svfprintf_r+0x1260>
 800cb40:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cb42:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cb44:	2200      	movs	r2, #0
 800cb46:	2300      	movs	r3, #0
 800cb48:	f7f3 fc7e 	bl	8000448 <__aeabi_dcmpeq>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d077      	beq.n	800cc40 <_svfprintf_r+0xedc>
 800cb50:	4bca      	ldr	r3, [pc, #808]	; (800ce7c <_svfprintf_r+0x1118>)
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	2301      	movs	r3, #1
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb62:	3301      	adds	r3, #1
 800cb64:	932d      	str	r3, [sp, #180]	; 0xb4
 800cb66:	2b07      	cmp	r3, #7
 800cb68:	dd08      	ble.n	800cb7c <_svfprintf_r+0xe18>
 800cb6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb6e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb70:	f003 fa0e 	bl	800ff90 <__ssprint_r>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d000      	beq.n	800cb7a <_svfprintf_r+0xe16>
 800cb78:	e2d3      	b.n	800d122 <_svfprintf_r+0x13be>
 800cb7a:	af2f      	add	r7, sp, #188	; 0xbc
 800cb7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb80:	4293      	cmp	r3, r2
 800cb82:	db01      	blt.n	800cb88 <_svfprintf_r+0xe24>
 800cb84:	07f3      	lsls	r3, r6, #31
 800cb86:	d51b      	bpl.n	800cbc0 <_svfprintf_r+0xe5c>
 800cb88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cb8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cb8c:	603b      	str	r3, [r7, #0]
 800cb8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cb94:	3708      	adds	r7, #8
 800cb96:	189b      	adds	r3, r3, r2
 800cb98:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800cba0:	2b07      	cmp	r3, #7
 800cba2:	dd08      	ble.n	800cbb6 <_svfprintf_r+0xe52>
 800cba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cba6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cba8:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbaa:	f003 f9f1 	bl	800ff90 <__ssprint_r>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d000      	beq.n	800cbb4 <_svfprintf_r+0xe50>
 800cbb2:	e2b6      	b.n	800d122 <_svfprintf_r+0x13be>
 800cbb4:	af2f      	add	r7, sp, #188	; 0xbc
 800cbb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbb8:	2510      	movs	r5, #16
 800cbba:	1e5c      	subs	r4, r3, #1
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	dc2e      	bgt.n	800cc1e <_svfprintf_r+0xeba>
 800cbc0:	0776      	lsls	r6, r6, #29
 800cbc2:	d500      	bpl.n	800cbc6 <_svfprintf_r+0xe62>
 800cbc4:	e290      	b.n	800d0e8 <_svfprintf_r+0x1384>
 800cbc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cbc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	da00      	bge.n	800cbd0 <_svfprintf_r+0xe6c>
 800cbce:	0013      	movs	r3, r2
 800cbd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cbd2:	18d3      	adds	r3, r2, r3
 800cbd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d007      	beq.n	800cbec <_svfprintf_r+0xe88>
 800cbdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbe0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbe2:	f003 f9d5 	bl	800ff90 <__ssprint_r>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d000      	beq.n	800cbec <_svfprintf_r+0xe88>
 800cbea:	e29a      	b.n	800d122 <_svfprintf_r+0x13be>
 800cbec:	2300      	movs	r3, #0
 800cbee:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d000      	beq.n	800cbf8 <_svfprintf_r+0xe94>
 800cbf6:	e2b0      	b.n	800d15a <_svfprintf_r+0x13f6>
 800cbf8:	af2f      	add	r7, sp, #188	; 0xbc
 800cbfa:	e5dc      	b.n	800c7b6 <_svfprintf_r+0xa52>
 800cbfc:	3210      	adds	r2, #16
 800cbfe:	607d      	str	r5, [r7, #4]
 800cc00:	922e      	str	r2, [sp, #184]	; 0xb8
 800cc02:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc04:	2b07      	cmp	r3, #7
 800cc06:	dd08      	ble.n	800cc1a <_svfprintf_r+0xeb6>
 800cc08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc0c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc0e:	f003 f9bf 	bl	800ff90 <__ssprint_r>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d000      	beq.n	800cc18 <_svfprintf_r+0xeb4>
 800cc16:	e284      	b.n	800d122 <_svfprintf_r+0x13be>
 800cc18:	a92f      	add	r1, sp, #188	; 0xbc
 800cc1a:	000f      	movs	r7, r1
 800cc1c:	3c10      	subs	r4, #16
 800cc1e:	0039      	movs	r1, r7
 800cc20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc22:	4897      	ldr	r0, [pc, #604]	; (800ce80 <_svfprintf_r+0x111c>)
 800cc24:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cc26:	3301      	adds	r3, #1
 800cc28:	3108      	adds	r1, #8
 800cc2a:	6038      	str	r0, [r7, #0]
 800cc2c:	2c10      	cmp	r4, #16
 800cc2e:	dce5      	bgt.n	800cbfc <_svfprintf_r+0xe98>
 800cc30:	607c      	str	r4, [r7, #4]
 800cc32:	18a4      	adds	r4, r4, r2
 800cc34:	942e      	str	r4, [sp, #184]	; 0xb8
 800cc36:	000f      	movs	r7, r1
 800cc38:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc3a:	2b07      	cmp	r3, #7
 800cc3c:	ddc0      	ble.n	800cbc0 <_svfprintf_r+0xe5c>
 800cc3e:	e05f      	b.n	800cd00 <_svfprintf_r+0xf9c>
 800cc40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dc78      	bgt.n	800cd38 <_svfprintf_r+0xfd4>
 800cc46:	4b8d      	ldr	r3, [pc, #564]	; (800ce7c <_svfprintf_r+0x1118>)
 800cc48:	603b      	str	r3, [r7, #0]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	607b      	str	r3, [r7, #4]
 800cc4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc50:	3708      	adds	r7, #8
 800cc52:	3301      	adds	r3, #1
 800cc54:	932e      	str	r3, [sp, #184]	; 0xb8
 800cc56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc58:	3301      	adds	r3, #1
 800cc5a:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc5c:	2b07      	cmp	r3, #7
 800cc5e:	dd08      	ble.n	800cc72 <_svfprintf_r+0xf0e>
 800cc60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc64:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc66:	f003 f993 	bl	800ff90 <__ssprint_r>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d000      	beq.n	800cc70 <_svfprintf_r+0xf0c>
 800cc6e:	e258      	b.n	800d122 <_svfprintf_r+0x13be>
 800cc70:	af2f      	add	r7, sp, #188	; 0xbc
 800cc72:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cc74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cc78:	430b      	orrs	r3, r1
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4031      	ands	r1, r6
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	d09e      	beq.n	800cbc0 <_svfprintf_r+0xe5c>
 800cc82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc84:	603b      	str	r3, [r7, #0]
 800cc86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc88:	607b      	str	r3, [r7, #4]
 800cc8a:	189a      	adds	r2, r3, r2
 800cc8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc8e:	922e      	str	r2, [sp, #184]	; 0xb8
 800cc90:	3301      	adds	r3, #1
 800cc92:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc94:	3708      	adds	r7, #8
 800cc96:	2b07      	cmp	r3, #7
 800cc98:	dd08      	ble.n	800ccac <_svfprintf_r+0xf48>
 800cc9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cca0:	f003 f976 	bl	800ff90 <__ssprint_r>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	d000      	beq.n	800ccaa <_svfprintf_r+0xf46>
 800cca8:	e23b      	b.n	800d122 <_svfprintf_r+0x13be>
 800ccaa:	af2f      	add	r7, sp, #188	; 0xbc
 800ccac:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ccae:	2c00      	cmp	r4, #0
 800ccb0:	da19      	bge.n	800cce6 <_svfprintf_r+0xf82>
 800ccb2:	0038      	movs	r0, r7
 800ccb4:	2510      	movs	r5, #16
 800ccb6:	4264      	negs	r4, r4
 800ccb8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ccba:	4a71      	ldr	r2, [pc, #452]	; (800ce80 <_svfprintf_r+0x111c>)
 800ccbc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ccbe:	3101      	adds	r1, #1
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	6002      	str	r2, [r0, #0]
 800ccc4:	2c10      	cmp	r4, #16
 800ccc6:	dc25      	bgt.n	800cd14 <_svfprintf_r+0xfb0>
 800ccc8:	6044      	str	r4, [r0, #4]
 800ccca:	18e4      	adds	r4, r4, r3
 800cccc:	942e      	str	r4, [sp, #184]	; 0xb8
 800ccce:	912d      	str	r1, [sp, #180]	; 0xb4
 800ccd0:	2907      	cmp	r1, #7
 800ccd2:	dd08      	ble.n	800cce6 <_svfprintf_r+0xf82>
 800ccd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccd8:	aa2c      	add	r2, sp, #176	; 0xb0
 800ccda:	f003 f959 	bl	800ff90 <__ssprint_r>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d000      	beq.n	800cce4 <_svfprintf_r+0xf80>
 800cce2:	e21e      	b.n	800d122 <_svfprintf_r+0x13be>
 800cce4:	af2f      	add	r7, sp, #188	; 0xbc
 800cce6:	9b08      	ldr	r3, [sp, #32]
 800cce8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ccea:	603b      	str	r3, [r7, #0]
 800ccec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccee:	18d2      	adds	r2, r2, r3
 800ccf0:	922e      	str	r2, [sp, #184]	; 0xb8
 800ccf2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	3201      	adds	r2, #1
 800ccf8:	922d      	str	r2, [sp, #180]	; 0xb4
 800ccfa:	2a07      	cmp	r2, #7
 800ccfc:	dc00      	bgt.n	800cd00 <_svfprintf_r+0xf9c>
 800ccfe:	e45b      	b.n	800c5b8 <_svfprintf_r+0x854>
 800cd00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd04:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd06:	f003 f943 	bl	800ff90 <__ssprint_r>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d000      	beq.n	800cd10 <_svfprintf_r+0xfac>
 800cd0e:	e208      	b.n	800d122 <_svfprintf_r+0x13be>
 800cd10:	af2f      	add	r7, sp, #188	; 0xbc
 800cd12:	e755      	b.n	800cbc0 <_svfprintf_r+0xe5c>
 800cd14:	3310      	adds	r3, #16
 800cd16:	6045      	str	r5, [r0, #4]
 800cd18:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd1a:	912d      	str	r1, [sp, #180]	; 0xb4
 800cd1c:	2907      	cmp	r1, #7
 800cd1e:	dd08      	ble.n	800cd32 <_svfprintf_r+0xfce>
 800cd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd24:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd26:	f003 f933 	bl	800ff90 <__ssprint_r>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d000      	beq.n	800cd30 <_svfprintf_r+0xfcc>
 800cd2e:	e1f8      	b.n	800d122 <_svfprintf_r+0x13be>
 800cd30:	af2f      	add	r7, sp, #188	; 0xbc
 800cd32:	0038      	movs	r0, r7
 800cd34:	3c10      	subs	r4, #16
 800cd36:	e7bf      	b.n	800ccb8 <_svfprintf_r+0xf54>
 800cd38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd3a:	002c      	movs	r4, r5
 800cd3c:	429d      	cmp	r5, r3
 800cd3e:	dd00      	ble.n	800cd42 <_svfprintf_r+0xfde>
 800cd40:	001c      	movs	r4, r3
 800cd42:	2c00      	cmp	r4, #0
 800cd44:	dd14      	ble.n	800cd70 <_svfprintf_r+0x100c>
 800cd46:	9b08      	ldr	r3, [sp, #32]
 800cd48:	607c      	str	r4, [r7, #4]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd4e:	3708      	adds	r7, #8
 800cd50:	18e3      	adds	r3, r4, r3
 800cd52:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd56:	3301      	adds	r3, #1
 800cd58:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd5a:	2b07      	cmp	r3, #7
 800cd5c:	dd08      	ble.n	800cd70 <_svfprintf_r+0x100c>
 800cd5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd62:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd64:	f003 f914 	bl	800ff90 <__ssprint_r>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d000      	beq.n	800cd6e <_svfprintf_r+0x100a>
 800cd6c:	e1d9      	b.n	800d122 <_svfprintf_r+0x13be>
 800cd6e:	af2f      	add	r7, sp, #188	; 0xbc
 800cd70:	43e3      	mvns	r3, r4
 800cd72:	17db      	asrs	r3, r3, #31
 800cd74:	401c      	ands	r4, r3
 800cd76:	1b2c      	subs	r4, r5, r4
 800cd78:	2c00      	cmp	r4, #0
 800cd7a:	dd18      	ble.n	800cdae <_svfprintf_r+0x104a>
 800cd7c:	0039      	movs	r1, r7
 800cd7e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd80:	483f      	ldr	r0, [pc, #252]	; (800ce80 <_svfprintf_r+0x111c>)
 800cd82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cd84:	3301      	adds	r3, #1
 800cd86:	3108      	adds	r1, #8
 800cd88:	6038      	str	r0, [r7, #0]
 800cd8a:	2c10      	cmp	r4, #16
 800cd8c:	dc7a      	bgt.n	800ce84 <_svfprintf_r+0x1120>
 800cd8e:	607c      	str	r4, [r7, #4]
 800cd90:	18a4      	adds	r4, r4, r2
 800cd92:	000f      	movs	r7, r1
 800cd94:	942e      	str	r4, [sp, #184]	; 0xb8
 800cd96:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd98:	2b07      	cmp	r3, #7
 800cd9a:	dd08      	ble.n	800cdae <_svfprintf_r+0x104a>
 800cd9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cda0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cda2:	f003 f8f5 	bl	800ff90 <__ssprint_r>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d000      	beq.n	800cdac <_svfprintf_r+0x1048>
 800cdaa:	e1ba      	b.n	800d122 <_svfprintf_r+0x13be>
 800cdac:	af2f      	add	r7, sp, #188	; 0xbc
 800cdae:	9b08      	ldr	r3, [sp, #32]
 800cdb0:	195d      	adds	r5, r3, r5
 800cdb2:	0573      	lsls	r3, r6, #21
 800cdb4:	d50b      	bpl.n	800cdce <_svfprintf_r+0x106a>
 800cdb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d176      	bne.n	800ceaa <_svfprintf_r+0x1146>
 800cdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d176      	bne.n	800ceb0 <_svfprintf_r+0x114c>
 800cdc2:	9b08      	ldr	r3, [sp, #32]
 800cdc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdc6:	189b      	adds	r3, r3, r2
 800cdc8:	429d      	cmp	r5, r3
 800cdca:	d900      	bls.n	800cdce <_svfprintf_r+0x106a>
 800cdcc:	001d      	movs	r5, r3
 800cdce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cdd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	db01      	blt.n	800cdda <_svfprintf_r+0x1076>
 800cdd6:	07f3      	lsls	r3, r6, #31
 800cdd8:	d516      	bpl.n	800ce08 <_svfprintf_r+0x10a4>
 800cdda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cddc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cde2:	607b      	str	r3, [r7, #4]
 800cde4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cde6:	3708      	adds	r7, #8
 800cde8:	189b      	adds	r3, r3, r2
 800cdea:	932e      	str	r3, [sp, #184]	; 0xb8
 800cdec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cdee:	3301      	adds	r3, #1
 800cdf0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cdf2:	2b07      	cmp	r3, #7
 800cdf4:	dd08      	ble.n	800ce08 <_svfprintf_r+0x10a4>
 800cdf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdfa:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdfc:	f003 f8c8 	bl	800ff90 <__ssprint_r>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d000      	beq.n	800ce06 <_svfprintf_r+0x10a2>
 800ce04:	e18d      	b.n	800d122 <_svfprintf_r+0x13be>
 800ce06:	af2f      	add	r7, sp, #188	; 0xbc
 800ce08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce0a:	9b08      	ldr	r3, [sp, #32]
 800ce0c:	4694      	mov	ip, r2
 800ce0e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ce10:	4463      	add	r3, ip
 800ce12:	1b5b      	subs	r3, r3, r5
 800ce14:	1b14      	subs	r4, r2, r4
 800ce16:	429c      	cmp	r4, r3
 800ce18:	dd00      	ble.n	800ce1c <_svfprintf_r+0x10b8>
 800ce1a:	001c      	movs	r4, r3
 800ce1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ce1e:	2c00      	cmp	r4, #0
 800ce20:	dd12      	ble.n	800ce48 <_svfprintf_r+0x10e4>
 800ce22:	18e3      	adds	r3, r4, r3
 800ce24:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce28:	603d      	str	r5, [r7, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	607c      	str	r4, [r7, #4]
 800ce2e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce30:	3708      	adds	r7, #8
 800ce32:	2b07      	cmp	r3, #7
 800ce34:	dd08      	ble.n	800ce48 <_svfprintf_r+0x10e4>
 800ce36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce3a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce3c:	f003 f8a8 	bl	800ff90 <__ssprint_r>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d000      	beq.n	800ce46 <_svfprintf_r+0x10e2>
 800ce44:	e16d      	b.n	800d122 <_svfprintf_r+0x13be>
 800ce46:	af2f      	add	r7, sp, #188	; 0xbc
 800ce48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce4c:	2510      	movs	r5, #16
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	43e2      	mvns	r2, r4
 800ce52:	17d2      	asrs	r2, r2, #31
 800ce54:	4014      	ands	r4, r2
 800ce56:	1b1c      	subs	r4, r3, r4
 800ce58:	2c00      	cmp	r4, #0
 800ce5a:	dc00      	bgt.n	800ce5e <_svfprintf_r+0x10fa>
 800ce5c:	e6b0      	b.n	800cbc0 <_svfprintf_r+0xe5c>
 800ce5e:	0039      	movs	r1, r7
 800ce60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce62:	4807      	ldr	r0, [pc, #28]	; (800ce80 <_svfprintf_r+0x111c>)
 800ce64:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ce66:	3301      	adds	r3, #1
 800ce68:	3108      	adds	r1, #8
 800ce6a:	6038      	str	r0, [r7, #0]
 800ce6c:	2c10      	cmp	r4, #16
 800ce6e:	dd00      	ble.n	800ce72 <_svfprintf_r+0x110e>
 800ce70:	e096      	b.n	800cfa0 <_svfprintf_r+0x123c>
 800ce72:	1912      	adds	r2, r2, r4
 800ce74:	607c      	str	r4, [r7, #4]
 800ce76:	922e      	str	r2, [sp, #184]	; 0xb8
 800ce78:	e6dd      	b.n	800cc36 <_svfprintf_r+0xed2>
 800ce7a:	46c0      	nop			; (mov r8, r8)
 800ce7c:	080130de 	.word	0x080130de
 800ce80:	080130f0 	.word	0x080130f0
 800ce84:	2010      	movs	r0, #16
 800ce86:	1812      	adds	r2, r2, r0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ce8c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce8e:	2b07      	cmp	r3, #7
 800ce90:	dd08      	ble.n	800cea4 <_svfprintf_r+0x1140>
 800ce92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce96:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce98:	f003 f87a 	bl	800ff90 <__ssprint_r>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d000      	beq.n	800cea2 <_svfprintf_r+0x113e>
 800cea0:	e13f      	b.n	800d122 <_svfprintf_r+0x13be>
 800cea2:	a92f      	add	r1, sp, #188	; 0xbc
 800cea4:	000f      	movs	r7, r1
 800cea6:	3c10      	subs	r4, #16
 800cea8:	e768      	b.n	800cd7c <_svfprintf_r+0x1018>
 800ceaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d05d      	beq.n	800cf6c <_svfprintf_r+0x1208>
 800ceb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	9310      	str	r3, [sp, #64]	; 0x40
 800ceb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceb8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cebe:	607b      	str	r3, [r7, #4]
 800cec0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cec2:	3708      	adds	r7, #8
 800cec4:	189b      	adds	r3, r3, r2
 800cec6:	932e      	str	r3, [sp, #184]	; 0xb8
 800cec8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ceca:	3301      	adds	r3, #1
 800cecc:	932d      	str	r3, [sp, #180]	; 0xb4
 800cece:	2b07      	cmp	r3, #7
 800ced0:	dd08      	ble.n	800cee4 <_svfprintf_r+0x1180>
 800ced2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ced4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ced6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ced8:	f003 f85a 	bl	800ff90 <__ssprint_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d000      	beq.n	800cee2 <_svfprintf_r+0x117e>
 800cee0:	e11f      	b.n	800d122 <_svfprintf_r+0x13be>
 800cee2:	af2f      	add	r7, sp, #188	; 0xbc
 800cee4:	9b08      	ldr	r3, [sp, #32]
 800cee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cee8:	189c      	adds	r4, r3, r2
 800ceea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceec:	1b64      	subs	r4, r4, r5
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	429c      	cmp	r4, r3
 800cef2:	dd00      	ble.n	800cef6 <_svfprintf_r+0x1192>
 800cef4:	001c      	movs	r4, r3
 800cef6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cef8:	2c00      	cmp	r4, #0
 800cefa:	dd12      	ble.n	800cf22 <_svfprintf_r+0x11be>
 800cefc:	18e3      	adds	r3, r4, r3
 800cefe:	932e      	str	r3, [sp, #184]	; 0xb8
 800cf00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cf02:	603d      	str	r5, [r7, #0]
 800cf04:	3301      	adds	r3, #1
 800cf06:	607c      	str	r4, [r7, #4]
 800cf08:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	2b07      	cmp	r3, #7
 800cf0e:	dd08      	ble.n	800cf22 <_svfprintf_r+0x11be>
 800cf10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf14:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf16:	f003 f83b 	bl	800ff90 <__ssprint_r>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d000      	beq.n	800cf20 <_svfprintf_r+0x11bc>
 800cf1e:	e100      	b.n	800d122 <_svfprintf_r+0x13be>
 800cf20:	af2f      	add	r7, sp, #188	; 0xbc
 800cf22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf24:	781a      	ldrb	r2, [r3, #0]
 800cf26:	43e3      	mvns	r3, r4
 800cf28:	17db      	asrs	r3, r3, #31
 800cf2a:	401c      	ands	r4, r3
 800cf2c:	1b14      	subs	r4, r2, r4
 800cf2e:	2c00      	cmp	r4, #0
 800cf30:	dd18      	ble.n	800cf64 <_svfprintf_r+0x1200>
 800cf32:	0039      	movs	r1, r7
 800cf34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cf36:	48aa      	ldr	r0, [pc, #680]	; (800d1e0 <_svfprintf_r+0x147c>)
 800cf38:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	3108      	adds	r1, #8
 800cf3e:	6038      	str	r0, [r7, #0]
 800cf40:	2c10      	cmp	r4, #16
 800cf42:	dc1a      	bgt.n	800cf7a <_svfprintf_r+0x1216>
 800cf44:	1912      	adds	r2, r2, r4
 800cf46:	607c      	str	r4, [r7, #4]
 800cf48:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf4a:	000f      	movs	r7, r1
 800cf4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf4e:	2b07      	cmp	r3, #7
 800cf50:	dd08      	ble.n	800cf64 <_svfprintf_r+0x1200>
 800cf52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf56:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf58:	f003 f81a 	bl	800ff90 <__ssprint_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d000      	beq.n	800cf62 <_svfprintf_r+0x11fe>
 800cf60:	e0df      	b.n	800d122 <_svfprintf_r+0x13be>
 800cf62:	af2f      	add	r7, sp, #188	; 0xbc
 800cf64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	18ed      	adds	r5, r5, r3
 800cf6a:	e724      	b.n	800cdb6 <_svfprintf_r+0x1052>
 800cf6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	9312      	str	r3, [sp, #72]	; 0x48
 800cf72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf74:	3b01      	subs	r3, #1
 800cf76:	9311      	str	r3, [sp, #68]	; 0x44
 800cf78:	e79d      	b.n	800ceb6 <_svfprintf_r+0x1152>
 800cf7a:	2010      	movs	r0, #16
 800cf7c:	1812      	adds	r2, r2, r0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf82:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf84:	2b07      	cmp	r3, #7
 800cf86:	dd08      	ble.n	800cf9a <_svfprintf_r+0x1236>
 800cf88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf8e:	f002 ffff 	bl	800ff90 <__ssprint_r>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d000      	beq.n	800cf98 <_svfprintf_r+0x1234>
 800cf96:	e0c4      	b.n	800d122 <_svfprintf_r+0x13be>
 800cf98:	a92f      	add	r1, sp, #188	; 0xbc
 800cf9a:	000f      	movs	r7, r1
 800cf9c:	3c10      	subs	r4, #16
 800cf9e:	e7c8      	b.n	800cf32 <_svfprintf_r+0x11ce>
 800cfa0:	3210      	adds	r2, #16
 800cfa2:	607d      	str	r5, [r7, #4]
 800cfa4:	922e      	str	r2, [sp, #184]	; 0xb8
 800cfa6:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfa8:	2b07      	cmp	r3, #7
 800cfaa:	dd08      	ble.n	800cfbe <_svfprintf_r+0x125a>
 800cfac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfb0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfb2:	f002 ffed 	bl	800ff90 <__ssprint_r>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d000      	beq.n	800cfbc <_svfprintf_r+0x1258>
 800cfba:	e0b2      	b.n	800d122 <_svfprintf_r+0x13be>
 800cfbc:	a92f      	add	r1, sp, #188	; 0xbc
 800cfbe:	000f      	movs	r7, r1
 800cfc0:	3c10      	subs	r4, #16
 800cfc2:	e74c      	b.n	800ce5e <_svfprintf_r+0x10fa>
 800cfc4:	003c      	movs	r4, r7
 800cfc6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cfc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cfca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfcc:	3101      	adds	r1, #1
 800cfce:	3301      	adds	r3, #1
 800cfd0:	3408      	adds	r4, #8
 800cfd2:	2a01      	cmp	r2, #1
 800cfd4:	dc03      	bgt.n	800cfde <_svfprintf_r+0x127a>
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	4216      	tst	r6, r2
 800cfda:	d100      	bne.n	800cfde <_svfprintf_r+0x127a>
 800cfdc:	e07f      	b.n	800d0de <_svfprintf_r+0x137a>
 800cfde:	9a08      	ldr	r2, [sp, #32]
 800cfe0:	912e      	str	r1, [sp, #184]	; 0xb8
 800cfe2:	603a      	str	r2, [r7, #0]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfe8:	607a      	str	r2, [r7, #4]
 800cfea:	2b07      	cmp	r3, #7
 800cfec:	dd08      	ble.n	800d000 <_svfprintf_r+0x129c>
 800cfee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cff2:	aa2c      	add	r2, sp, #176	; 0xb0
 800cff4:	f002 ffcc 	bl	800ff90 <__ssprint_r>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d000      	beq.n	800cffe <_svfprintf_r+0x129a>
 800cffc:	e091      	b.n	800d122 <_svfprintf_r+0x13be>
 800cffe:	ac2f      	add	r4, sp, #188	; 0xbc
 800d000:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d002:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d00c:	3408      	adds	r4, #8
 800d00e:	189b      	adds	r3, r3, r2
 800d010:	932e      	str	r3, [sp, #184]	; 0xb8
 800d012:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d014:	3301      	adds	r3, #1
 800d016:	932d      	str	r3, [sp, #180]	; 0xb4
 800d018:	2b07      	cmp	r3, #7
 800d01a:	dd07      	ble.n	800d02c <_svfprintf_r+0x12c8>
 800d01c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d01e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d020:	aa2c      	add	r2, sp, #176	; 0xb0
 800d022:	f002 ffb5 	bl	800ff90 <__ssprint_r>
 800d026:	2800      	cmp	r0, #0
 800d028:	d17b      	bne.n	800d122 <_svfprintf_r+0x13be>
 800d02a:	ac2f      	add	r4, sp, #188	; 0xbc
 800d02c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d02e:	2200      	movs	r2, #0
 800d030:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d032:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d034:	9309      	str	r3, [sp, #36]	; 0x24
 800d036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d038:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d03a:	1e5d      	subs	r5, r3, #1
 800d03c:	2300      	movs	r3, #0
 800d03e:	f7f3 fa03 	bl	8000448 <__aeabi_dcmpeq>
 800d042:	2800      	cmp	r0, #0
 800d044:	d126      	bne.n	800d094 <_svfprintf_r+0x1330>
 800d046:	9b08      	ldr	r3, [sp, #32]
 800d048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04a:	3301      	adds	r3, #1
 800d04c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d04e:	6023      	str	r3, [r4, #0]
 800d050:	1e7b      	subs	r3, r7, #1
 800d052:	3201      	adds	r2, #1
 800d054:	185b      	adds	r3, r3, r1
 800d056:	6065      	str	r5, [r4, #4]
 800d058:	932e      	str	r3, [sp, #184]	; 0xb8
 800d05a:	922d      	str	r2, [sp, #180]	; 0xb4
 800d05c:	3408      	adds	r4, #8
 800d05e:	2a07      	cmp	r2, #7
 800d060:	dd07      	ble.n	800d072 <_svfprintf_r+0x130e>
 800d062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d064:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d066:	aa2c      	add	r2, sp, #176	; 0xb0
 800d068:	f002 ff92 	bl	800ff90 <__ssprint_r>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d158      	bne.n	800d122 <_svfprintf_r+0x13be>
 800d070:	ac2f      	add	r4, sp, #188	; 0xbc
 800d072:	ab28      	add	r3, sp, #160	; 0xa0
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d078:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d07a:	6063      	str	r3, [r4, #4]
 800d07c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d07e:	189b      	adds	r3, r3, r2
 800d080:	932e      	str	r3, [sp, #184]	; 0xb8
 800d082:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d084:	3301      	adds	r3, #1
 800d086:	932d      	str	r3, [sp, #180]	; 0xb4
 800d088:	2b07      	cmp	r3, #7
 800d08a:	dd00      	ble.n	800d08e <_svfprintf_r+0x132a>
 800d08c:	e638      	b.n	800cd00 <_svfprintf_r+0xf9c>
 800d08e:	3408      	adds	r4, #8
 800d090:	0027      	movs	r7, r4
 800d092:	e595      	b.n	800cbc0 <_svfprintf_r+0xe5c>
 800d094:	2710      	movs	r7, #16
 800d096:	2d00      	cmp	r5, #0
 800d098:	ddeb      	ble.n	800d072 <_svfprintf_r+0x130e>
 800d09a:	0021      	movs	r1, r4
 800d09c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d09e:	4850      	ldr	r0, [pc, #320]	; (800d1e0 <_svfprintf_r+0x147c>)
 800d0a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	3108      	adds	r1, #8
 800d0a6:	6020      	str	r0, [r4, #0]
 800d0a8:	2d10      	cmp	r5, #16
 800d0aa:	dc07      	bgt.n	800d0bc <_svfprintf_r+0x1358>
 800d0ac:	6065      	str	r5, [r4, #4]
 800d0ae:	000c      	movs	r4, r1
 800d0b0:	18ad      	adds	r5, r5, r2
 800d0b2:	952e      	str	r5, [sp, #184]	; 0xb8
 800d0b4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d0b6:	2b07      	cmp	r3, #7
 800d0b8:	dddb      	ble.n	800d072 <_svfprintf_r+0x130e>
 800d0ba:	e7d2      	b.n	800d062 <_svfprintf_r+0x12fe>
 800d0bc:	3210      	adds	r2, #16
 800d0be:	6067      	str	r7, [r4, #4]
 800d0c0:	922e      	str	r2, [sp, #184]	; 0xb8
 800d0c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d0c4:	2b07      	cmp	r3, #7
 800d0c6:	dd07      	ble.n	800d0d8 <_svfprintf_r+0x1374>
 800d0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800d0ce:	f002 ff5f 	bl	800ff90 <__ssprint_r>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d125      	bne.n	800d122 <_svfprintf_r+0x13be>
 800d0d6:	a92f      	add	r1, sp, #188	; 0xbc
 800d0d8:	000c      	movs	r4, r1
 800d0da:	3d10      	subs	r5, #16
 800d0dc:	e7dd      	b.n	800d09a <_svfprintf_r+0x1336>
 800d0de:	9808      	ldr	r0, [sp, #32]
 800d0e0:	912e      	str	r1, [sp, #184]	; 0xb8
 800d0e2:	c705      	stmia	r7!, {r0, r2}
 800d0e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d0e6:	e7e6      	b.n	800d0b6 <_svfprintf_r+0x1352>
 800d0e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d0ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d0ec:	2510      	movs	r5, #16
 800d0ee:	1a9c      	subs	r4, r3, r2
 800d0f0:	2c00      	cmp	r4, #0
 800d0f2:	dc00      	bgt.n	800d0f6 <_svfprintf_r+0x1392>
 800d0f4:	e567      	b.n	800cbc6 <_svfprintf_r+0xe62>
 800d0f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d0f8:	493a      	ldr	r1, [pc, #232]	; (800d1e4 <_svfprintf_r+0x1480>)
 800d0fa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	6039      	str	r1, [r7, #0]
 800d100:	2c10      	cmp	r4, #16
 800d102:	dc19      	bgt.n	800d138 <_svfprintf_r+0x13d4>
 800d104:	607c      	str	r4, [r7, #4]
 800d106:	18a4      	adds	r4, r4, r2
 800d108:	942e      	str	r4, [sp, #184]	; 0xb8
 800d10a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	dc00      	bgt.n	800d112 <_svfprintf_r+0x13ae>
 800d110:	e559      	b.n	800cbc6 <_svfprintf_r+0xe62>
 800d112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d114:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d116:	aa2c      	add	r2, sp, #176	; 0xb0
 800d118:	f002 ff3a 	bl	800ff90 <__ssprint_r>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d100      	bne.n	800d122 <_svfprintf_r+0x13be>
 800d120:	e551      	b.n	800cbc6 <_svfprintf_r+0xe62>
 800d122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <_svfprintf_r+0x13c8>
 800d128:	f7ff f845 	bl	800c1b6 <_svfprintf_r+0x452>
 800d12c:	0019      	movs	r1, r3
 800d12e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d130:	f7fd fd80 	bl	800ac34 <_free_r>
 800d134:	f7ff f83f 	bl	800c1b6 <_svfprintf_r+0x452>
 800d138:	3210      	adds	r2, #16
 800d13a:	607d      	str	r5, [r7, #4]
 800d13c:	922e      	str	r2, [sp, #184]	; 0xb8
 800d13e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d140:	3708      	adds	r7, #8
 800d142:	2b07      	cmp	r3, #7
 800d144:	dd07      	ble.n	800d156 <_svfprintf_r+0x13f2>
 800d146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d148:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d14a:	aa2c      	add	r2, sp, #176	; 0xb0
 800d14c:	f002 ff20 	bl	800ff90 <__ssprint_r>
 800d150:	2800      	cmp	r0, #0
 800d152:	d1e6      	bne.n	800d122 <_svfprintf_r+0x13be>
 800d154:	af2f      	add	r7, sp, #188	; 0xbc
 800d156:	3c10      	subs	r4, #16
 800d158:	e7cd      	b.n	800d0f6 <_svfprintf_r+0x1392>
 800d15a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d15c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d15e:	f7fd fd69 	bl	800ac34 <_free_r>
 800d162:	e549      	b.n	800cbf8 <_svfprintf_r+0xe94>
 800d164:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <_svfprintf_r+0x140a>
 800d16a:	f7ff f824 	bl	800c1b6 <_svfprintf_r+0x452>
 800d16e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d170:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d172:	aa2c      	add	r2, sp, #176	; 0xb0
 800d174:	f002 ff0c 	bl	800ff90 <__ssprint_r>
 800d178:	f7ff f81d 	bl	800c1b6 <_svfprintf_r+0x452>
 800d17c:	0034      	movs	r4, r6
 800d17e:	2a00      	cmp	r2, #0
 800d180:	d101      	bne.n	800d186 <_svfprintf_r+0x1422>
 800d182:	f7fe ff8c 	bl	800c09e <_svfprintf_r+0x33a>
 800d186:	2b01      	cmp	r3, #1
 800d188:	d101      	bne.n	800d18e <_svfprintf_r+0x142a>
 800d18a:	f7ff fc01 	bl	800c990 <_svfprintf_r+0xc2c>
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d100      	bne.n	800d194 <_svfprintf_r+0x1430>
 800d192:	e459      	b.n	800ca48 <_svfprintf_r+0xce4>
 800d194:	2507      	movs	r5, #7
 800d196:	ab58      	add	r3, sp, #352	; 0x160
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	9a08      	ldr	r2, [sp, #32]
 800d19c:	0013      	movs	r3, r2
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	9308      	str	r3, [sp, #32]
 800d1a2:	9b06      	ldr	r3, [sp, #24]
 800d1a4:	9908      	ldr	r1, [sp, #32]
 800d1a6:	402b      	ands	r3, r5
 800d1a8:	3330      	adds	r3, #48	; 0x30
 800d1aa:	700b      	strb	r3, [r1, #0]
 800d1ac:	9907      	ldr	r1, [sp, #28]
 800d1ae:	074e      	lsls	r6, r1, #29
 800d1b0:	9906      	ldr	r1, [sp, #24]
 800d1b2:	08c8      	lsrs	r0, r1, #3
 800d1b4:	9907      	ldr	r1, [sp, #28]
 800d1b6:	4306      	orrs	r6, r0
 800d1b8:	08c9      	lsrs	r1, r1, #3
 800d1ba:	9107      	str	r1, [sp, #28]
 800d1bc:	0031      	movs	r1, r6
 800d1be:	9807      	ldr	r0, [sp, #28]
 800d1c0:	9606      	str	r6, [sp, #24]
 800d1c2:	4301      	orrs	r1, r0
 800d1c4:	d1e9      	bne.n	800d19a <_svfprintf_r+0x1436>
 800d1c6:	07e1      	lsls	r1, r4, #31
 800d1c8:	d400      	bmi.n	800d1cc <_svfprintf_r+0x1468>
 800d1ca:	e42a      	b.n	800ca22 <_svfprintf_r+0xcbe>
 800d1cc:	2b30      	cmp	r3, #48	; 0x30
 800d1ce:	d100      	bne.n	800d1d2 <_svfprintf_r+0x146e>
 800d1d0:	e427      	b.n	800ca22 <_svfprintf_r+0xcbe>
 800d1d2:	2130      	movs	r1, #48	; 0x30
 800d1d4:	9b08      	ldr	r3, [sp, #32]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	7019      	strb	r1, [r3, #0]
 800d1da:	1e93      	subs	r3, r2, #2
 800d1dc:	9308      	str	r3, [sp, #32]
 800d1de:	e420      	b.n	800ca22 <_svfprintf_r+0xcbe>
 800d1e0:	080130f0 	.word	0x080130f0
 800d1e4:	080130e0 	.word	0x080130e0

0800d1e8 <__ssvfscanf_r>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	4ca7      	ldr	r4, [pc, #668]	; (800d488 <__ssvfscanf_r+0x2a0>)
 800d1ec:	44a5      	add	sp, r4
 800d1ee:	af02      	add	r7, sp, #8
 800d1f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d1f2:	000b      	movs	r3, r1
 800d1f4:	6378      	str	r0, [r7, #52]	; 0x34
 800d1f6:	6479      	str	r1, [r7, #68]	; 0x44
 800d1f8:	61ba      	str	r2, [r7, #24]
 800d1fa:	220c      	movs	r2, #12
 800d1fc:	5e9a      	ldrsh	r2, [r3, r2]
 800d1fe:	2380      	movs	r3, #128	; 0x80
 800d200:	019b      	lsls	r3, r3, #6
 800d202:	421a      	tst	r2, r3
 800d204:	d105      	bne.n	800d212 <__ssvfscanf_r+0x2a>
 800d206:	4313      	orrs	r3, r2
 800d208:	818b      	strh	r3, [r1, #12]
 800d20a:	4aa0      	ldr	r2, [pc, #640]	; (800d48c <__ssvfscanf_r+0x2a4>)
 800d20c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d20e:	4013      	ands	r3, r2
 800d210:	664b      	str	r3, [r1, #100]	; 0x64
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	643b      	str	r3, [r7, #64]	; 0x40
 800d218:	62bb      	str	r3, [r7, #40]	; 0x28
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
 800d21c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3201      	adds	r2, #1
 800d228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d22a:	61ba      	str	r2, [r7, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d100      	bne.n	800d232 <__ssvfscanf_r+0x4a>
 800d230:	e0d7      	b.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d232:	2608      	movs	r6, #8
 800d234:	2108      	movs	r1, #8
 800d236:	4a96      	ldr	r2, [pc, #600]	; (800d490 <__ssvfscanf_r+0x2a8>)
 800d238:	5cd2      	ldrb	r2, [r2, r3]
 800d23a:	4016      	ands	r6, r2
 800d23c:	420a      	tst	r2, r1
 800d23e:	d01d      	beq.n	800d27c <__ssvfscanf_r+0x94>
 800d240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	dd12      	ble.n	800d26e <__ssvfscanf_r+0x86>
 800d248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24a:	4991      	ldr	r1, [pc, #580]	; (800d490 <__ssvfscanf_r+0x2a8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	781a      	ldrb	r2, [r3, #0]
 800d250:	5c8a      	ldrb	r2, [r1, r2]
 800d252:	2108      	movs	r1, #8
 800d254:	420a      	tst	r2, r1
 800d256:	d0e3      	beq.n	800d220 <__ssvfscanf_r+0x38>
 800d258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d25c:	3201      	adds	r2, #1
 800d25e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d262:	3301      	adds	r3, #1
 800d264:	6852      	ldr	r2, [r2, #4]
 800d266:	600b      	str	r3, [r1, #0]
 800d268:	3a01      	subs	r2, #1
 800d26a:	604a      	str	r2, [r1, #4]
 800d26c:	e7e8      	b.n	800d240 <__ssvfscanf_r+0x58>
 800d26e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d270:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d272:	f002 ff4d 	bl	8010110 <__ssrefill_r>
 800d276:	2800      	cmp	r0, #0
 800d278:	d0e6      	beq.n	800d248 <__ssvfscanf_r+0x60>
 800d27a:	e7d1      	b.n	800d220 <__ssvfscanf_r+0x38>
 800d27c:	2b25      	cmp	r3, #37	; 0x25
 800d27e:	d165      	bne.n	800d34c <__ssvfscanf_r+0x164>
 800d280:	250a      	movs	r5, #10
 800d282:	2480      	movs	r4, #128	; 0x80
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	63fe      	str	r6, [r7, #60]	; 0x3c
 800d288:	3b16      	subs	r3, #22
 800d28a:	69b9      	ldr	r1, [r7, #24]
 800d28c:	3101      	adds	r1, #1
 800d28e:	61b9      	str	r1, [r7, #24]
 800d290:	7811      	ldrb	r1, [r2, #0]
 800d292:	0008      	movs	r0, r1
 800d294:	3825      	subs	r0, #37	; 0x25
 800d296:	2855      	cmp	r0, #85	; 0x55
 800d298:	d900      	bls.n	800d29c <__ssvfscanf_r+0xb4>
 800d29a:	e170      	b.n	800d57e <__ssvfscanf_r+0x396>
 800d29c:	f7f2 ff44 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d2a0:	016f0056 	.word	0x016f0056
 800d2a4:	016f016f 	.word	0x016f016f
 800d2a8:	0081016f 	.word	0x0081016f
 800d2ac:	016f016f 	.word	0x016f016f
 800d2b0:	016f016f 	.word	0x016f016f
 800d2b4:	00b8016f 	.word	0x00b8016f
 800d2b8:	00b800b8 	.word	0x00b800b8
 800d2bc:	00b800b8 	.word	0x00b800b8
 800d2c0:	00b800b8 	.word	0x00b800b8
 800d2c4:	00b800b8 	.word	0x00b800b8
 800d2c8:	016f00b8 	.word	0x016f00b8
 800d2cc:	016f016f 	.word	0x016f016f
 800d2d0:	016f016f 	.word	0x016f016f
 800d2d4:	016f016f 	.word	0x016f016f
 800d2d8:	016f00d8 	.word	0x016f00d8
 800d2dc:	00c1010a 	.word	0x00c1010a
 800d2e0:	00d800d8 	.word	0x00d800d8
 800d2e4:	016f00d8 	.word	0x016f00d8
 800d2e8:	016f016f 	.word	0x016f016f
 800d2ec:	009f016f 	.word	0x009f016f
 800d2f0:	016f016f 	.word	0x016f016f
 800d2f4:	016f00c9 	.word	0x016f00c9
 800d2f8:	016f016f 	.word	0x016f016f
 800d2fc:	016f00f0 	.word	0x016f00f0
 800d300:	016f016f 	.word	0x016f016f
 800d304:	00d1016f 	.word	0x00d1016f
 800d308:	016f016f 	.word	0x016f016f
 800d30c:	016f00fe 	.word	0x016f00fe
 800d310:	016f016f 	.word	0x016f016f
 800d314:	016f016f 	.word	0x016f016f
 800d318:	016f00d8 	.word	0x016f00d8
 800d31c:	00c3010c 	.word	0x00c3010c
 800d320:	00d800d8 	.word	0x00d800d8
 800d324:	009400d8 	.word	0x009400d8
 800d328:	009f012f 	.word	0x009f012f
 800d32c:	0088016f 	.word	0x0088016f
 800d330:	011200a9 	.word	0x011200a9
 800d334:	011000cb 	.word	0x011000cb
 800d338:	016f016f 	.word	0x016f016f
 800d33c:	00a600f2 	.word	0x00a600f2
 800d340:	016f00cf 	.word	0x016f00cf
 800d344:	00d1016f 	.word	0x00d1016f
 800d348:	00a6016f 	.word	0x00a6016f
 800d34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	dd12      	ble.n	800d37a <__ssvfscanf_r+0x192>
 800d354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3a01      	subs	r2, #1
 800d35c:	7819      	ldrb	r1, [r3, #0]
 800d35e:	7812      	ldrb	r2, [r2, #0]
 800d360:	4291      	cmp	r1, r2
 800d362:	d13e      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d368:	6852      	ldr	r2, [r2, #4]
 800d36a:	3301      	adds	r3, #1
 800d36c:	600b      	str	r3, [r1, #0]
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	3a01      	subs	r2, #1
 800d372:	604a      	str	r2, [r1, #4]
 800d374:	3301      	adds	r3, #1
 800d376:	63bb      	str	r3, [r7, #56]	; 0x38
 800d378:	e752      	b.n	800d220 <__ssvfscanf_r+0x38>
 800d37a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d37c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d37e:	f002 fec7 	bl	8010110 <__ssrefill_r>
 800d382:	2800      	cmp	r0, #0
 800d384:	d0e6      	beq.n	800d354 <__ssvfscanf_r+0x16c>
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <__ssvfscanf_r+0x1ac>
 800d38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d38e:	899b      	ldrh	r3, [r3, #12]
 800d390:	065b      	lsls	r3, r3, #25
 800d392:	d526      	bpl.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d396:	2b00      	cmp	r3, #0
 800d398:	d000      	beq.n	800d39c <__ssvfscanf_r+0x1b4>
 800d39a:	e0f6      	b.n	800d58a <__ssvfscanf_r+0x3a2>
 800d39c:	3b01      	subs	r3, #1
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3a0:	e104      	b.n	800d5ac <__ssvfscanf_r+0x3c4>
 800d3a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3a4:	4332      	orrs	r2, r6
 800d3a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d3a8:	d11b      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d3aa:	2610      	movs	r6, #16
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	e76c      	b.n	800d28a <__ssvfscanf_r+0xa2>
 800d3b0:	421e      	tst	r6, r3
 800d3b2:	d116      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d3b4:	7851      	ldrb	r1, [r2, #1]
 800d3b6:	296c      	cmp	r1, #108	; 0x6c
 800d3b8:	d103      	bne.n	800d3c2 <__ssvfscanf_r+0x1da>
 800d3ba:	3202      	adds	r2, #2
 800d3bc:	61ba      	str	r2, [r7, #24]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	e000      	b.n	800d3c4 <__ssvfscanf_r+0x1dc>
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4316      	orrs	r6, r2
 800d3c6:	e7f1      	b.n	800d3ac <__ssvfscanf_r+0x1c4>
 800d3c8:	421e      	tst	r6, r3
 800d3ca:	d10a      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d3cc:	7851      	ldrb	r1, [r2, #1]
 800d3ce:	2968      	cmp	r1, #104	; 0x68
 800d3d0:	d103      	bne.n	800d3da <__ssvfscanf_r+0x1f2>
 800d3d2:	3202      	adds	r2, #2
 800d3d4:	61ba      	str	r2, [r7, #24]
 800d3d6:	2208      	movs	r2, #8
 800d3d8:	e7f4      	b.n	800d3c4 <__ssvfscanf_r+0x1dc>
 800d3da:	2204      	movs	r2, #4
 800d3dc:	e7f2      	b.n	800d3c4 <__ssvfscanf_r+0x1dc>
 800d3de:	421e      	tst	r6, r3
 800d3e0:	d0ed      	beq.n	800d3be <__ssvfscanf_r+0x1d6>
 800d3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d000      	beq.n	800d3ea <__ssvfscanf_r+0x202>
 800d3e8:	e0da      	b.n	800d5a0 <__ssvfscanf_r+0x3b8>
 800d3ea:	e0df      	b.n	800d5ac <__ssvfscanf_r+0x3c4>
 800d3ec:	421e      	tst	r6, r3
 800d3ee:	d0dd      	beq.n	800d3ac <__ssvfscanf_r+0x1c4>
 800d3f0:	e7f7      	b.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d3f2:	228f      	movs	r2, #143	; 0x8f
 800d3f4:	218f      	movs	r1, #143	; 0x8f
 800d3f6:	4032      	ands	r2, r6
 800d3f8:	420e      	tst	r6, r1
 800d3fa:	d1f2      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d3fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3fe:	2900      	cmp	r1, #0
 800d400:	d104      	bne.n	800d40c <__ssvfscanf_r+0x224>
 800d402:	b082      	sub	sp, #8
 800d404:	a902      	add	r1, sp, #8
 800d406:	6439      	str	r1, [r7, #64]	; 0x40
 800d408:	600a      	str	r2, [r1, #0]
 800d40a:	604a      	str	r2, [r1, #4]
 800d40c:	4326      	orrs	r6, r4
 800d40e:	e7cd      	b.n	800d3ac <__ssvfscanf_r+0x1c4>
 800d410:	228f      	movs	r2, #143	; 0x8f
 800d412:	4216      	tst	r6, r2
 800d414:	d1e5      	bne.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d418:	436a      	muls	r2, r5
 800d41a:	3a30      	subs	r2, #48	; 0x30
 800d41c:	188a      	adds	r2, r1, r2
 800d41e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d420:	e7c4      	b.n	800d3ac <__ssvfscanf_r+0x1c4>
 800d422:	2301      	movs	r3, #1
 800d424:	431e      	orrs	r6, r3
 800d426:	4b1b      	ldr	r3, [pc, #108]	; (800d494 <__ssvfscanf_r+0x2ac>)
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	230a      	movs	r3, #10
 800d42c:	2403      	movs	r4, #3
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
 800d430:	e00f      	b.n	800d452 <__ssvfscanf_r+0x26a>
 800d432:	2301      	movs	r3, #1
 800d434:	431e      	orrs	r6, r3
 800d436:	4b18      	ldr	r3, [pc, #96]	; (800d498 <__ssvfscanf_r+0x2b0>)
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	2308      	movs	r3, #8
 800d43c:	e7f6      	b.n	800d42c <__ssvfscanf_r+0x244>
 800d43e:	4b16      	ldr	r3, [pc, #88]	; (800d498 <__ssvfscanf_r+0x2b0>)
 800d440:	e7f2      	b.n	800d428 <__ssvfscanf_r+0x240>
 800d442:	2380      	movs	r3, #128	; 0x80
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	431e      	orrs	r6, r3
 800d448:	4b13      	ldr	r3, [pc, #76]	; (800d498 <__ssvfscanf_r+0x2b0>)
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	2310      	movs	r3, #16
 800d44e:	e7ed      	b.n	800d42c <__ssvfscanf_r+0x244>
 800d450:	2404      	movs	r4, #4
 800d452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	dd55      	ble.n	800d506 <__ssvfscanf_r+0x31e>
 800d45a:	0673      	lsls	r3, r6, #25
 800d45c:	d407      	bmi.n	800d46e <__ssvfscanf_r+0x286>
 800d45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d460:	490b      	ldr	r1, [pc, #44]	; (800d490 <__ssvfscanf_r+0x2a8>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	781a      	ldrb	r2, [r3, #0]
 800d466:	5c8a      	ldrb	r2, [r1, r2]
 800d468:	2108      	movs	r1, #8
 800d46a:	420a      	tst	r2, r1
 800d46c:	d152      	bne.n	800d514 <__ssvfscanf_r+0x32c>
 800d46e:	1e60      	subs	r0, r4, #1
 800d470:	2803      	cmp	r0, #3
 800d472:	d863      	bhi.n	800d53c <__ssvfscanf_r+0x354>
 800d474:	f7f2 fe58 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d478:	03bd01da 	.word	0x03bd01da
 800d47c:	068a0579 	.word	0x068a0579
 800d480:	2301      	movs	r3, #1
 800d482:	431e      	orrs	r6, r3
 800d484:	2402      	movs	r4, #2
 800d486:	e7e4      	b.n	800d452 <__ssvfscanf_r+0x26a>
 800d488:	fffffd34 	.word	0xfffffd34
 800d48c:	ffffdfff 	.word	0xffffdfff
 800d490:	08012dd9 	.word	0x08012dd9
 800d494:	0800a639 	.word	0x0800a639
 800d498:	0800fc41 	.word	0x0800fc41
 800d49c:	2248      	movs	r2, #72	; 0x48
 800d49e:	2318      	movs	r3, #24
 800d4a0:	189b      	adds	r3, r3, r2
 800d4a2:	19d8      	adds	r0, r3, r7
 800d4a4:	69b9      	ldr	r1, [r7, #24]
 800d4a6:	f001 f9d7 	bl	800e858 <__sccl>
 800d4aa:	2340      	movs	r3, #64	; 0x40
 800d4ac:	2401      	movs	r4, #1
 800d4ae:	61b8      	str	r0, [r7, #24]
 800d4b0:	431e      	orrs	r6, r3
 800d4b2:	e7ce      	b.n	800d452 <__ssvfscanf_r+0x26a>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	431e      	orrs	r6, r3
 800d4b8:	2340      	movs	r3, #64	; 0x40
 800d4ba:	2400      	movs	r4, #0
 800d4bc:	431e      	orrs	r6, r3
 800d4be:	e7c8      	b.n	800d452 <__ssvfscanf_r+0x26a>
 800d4c0:	2388      	movs	r3, #136	; 0x88
 800d4c2:	e7bf      	b.n	800d444 <__ssvfscanf_r+0x25c>
 800d4c4:	06f3      	lsls	r3, r6, #27
 800d4c6:	d500      	bpl.n	800d4ca <__ssvfscanf_r+0x2e2>
 800d4c8:	e6aa      	b.n	800d220 <__ssvfscanf_r+0x38>
 800d4ca:	2108      	movs	r1, #8
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	cb04      	ldmia	r3!, {r2}
 800d4d0:	420e      	tst	r6, r1
 800d4d2:	d003      	beq.n	800d4dc <__ssvfscanf_r+0x2f4>
 800d4d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4d6:	7011      	strb	r1, [r2, #0]
 800d4d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d4da:	e6a1      	b.n	800d220 <__ssvfscanf_r+0x38>
 800d4dc:	0771      	lsls	r1, r6, #29
 800d4de:	d502      	bpl.n	800d4e6 <__ssvfscanf_r+0x2fe>
 800d4e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4e2:	8011      	strh	r1, [r2, #0]
 800d4e4:	e7f8      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800d4e6:	07f1      	lsls	r1, r6, #31
 800d4e8:	d502      	bpl.n	800d4f0 <__ssvfscanf_r+0x308>
 800d4ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4ec:	6011      	str	r1, [r2, #0]
 800d4ee:	e7f3      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800d4f0:	07b6      	lsls	r6, r6, #30
 800d4f2:	d5fa      	bpl.n	800d4ea <__ssvfscanf_r+0x302>
 800d4f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4f6:	6011      	str	r1, [r2, #0]
 800d4f8:	17c9      	asrs	r1, r1, #31
 800d4fa:	6051      	str	r1, [r2, #4]
 800d4fc:	e7ec      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800d4fe:	4ba2      	ldr	r3, [pc, #648]	; (800d788 <__ssvfscanf_r+0x5a0>)
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	2300      	movs	r3, #0
 800d504:	e792      	b.n	800d42c <__ssvfscanf_r+0x244>
 800d506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d50a:	f002 fe01 	bl	8010110 <__ssrefill_r>
 800d50e:	2800      	cmp	r0, #0
 800d510:	d0a3      	beq.n	800d45a <__ssvfscanf_r+0x272>
 800d512:	e738      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d518:	3201      	adds	r2, #1
 800d51a:	63ba      	str	r2, [r7, #56]	; 0x38
 800d51c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d51e:	6852      	ldr	r2, [r2, #4]
 800d520:	3a01      	subs	r2, #1
 800d522:	604a      	str	r2, [r1, #4]
 800d524:	2a00      	cmp	r2, #0
 800d526:	dd02      	ble.n	800d52e <__ssvfscanf_r+0x346>
 800d528:	3301      	adds	r3, #1
 800d52a:	600b      	str	r3, [r1, #0]
 800d52c:	e797      	b.n	800d45e <__ssvfscanf_r+0x276>
 800d52e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d532:	f002 fded 	bl	8010110 <__ssrefill_r>
 800d536:	2800      	cmp	r0, #0
 800d538:	d091      	beq.n	800d45e <__ssvfscanf_r+0x276>
 800d53a:	e724      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d53c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d53e:	2301      	movs	r3, #1
 800d540:	2a00      	cmp	r2, #0
 800d542:	d100      	bne.n	800d546 <__ssvfscanf_r+0x35e>
 800d544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d546:	2210      	movs	r2, #16
 800d548:	0034      	movs	r4, r6
 800d54a:	4032      	ands	r2, r6
 800d54c:	623a      	str	r2, [r7, #32]
 800d54e:	401c      	ands	r4, r3
 800d550:	421e      	tst	r6, r3
 800d552:	d100      	bne.n	800d556 <__ssvfscanf_r+0x36e>
 800d554:	e0f3      	b.n	800d73e <__ssvfscanf_r+0x556>
 800d556:	2a00      	cmp	r2, #0
 800d558:	d000      	beq.n	800d55c <__ssvfscanf_r+0x374>
 800d55a:	e0b6      	b.n	800d6ca <__ssvfscanf_r+0x4e2>
 800d55c:	2080      	movs	r0, #128	; 0x80
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	cb10      	ldmia	r3!, {r4}
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	4206      	tst	r6, r0
 800d566:	d100      	bne.n	800d56a <__ssvfscanf_r+0x382>
 800d568:	e0b7      	b.n	800d6da <__ssvfscanf_r+0x4f2>
 800d56a:	2c00      	cmp	r4, #0
 800d56c:	d007      	beq.n	800d57e <__ssvfscanf_r+0x396>
 800d56e:	f7fb ff6d 	bl	800944c <malloc>
 800d572:	6338      	str	r0, [r7, #48]	; 0x30
 800d574:	2800      	cmp	r0, #0
 800d576:	d11f      	bne.n	800d5b8 <__ssvfscanf_r+0x3d0>
 800d578:	2301      	movs	r3, #1
 800d57a:	425b      	negs	r3, r3
 800d57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	d013      	beq.n	800d5ac <__ssvfscanf_r+0x3c4>
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	3301      	adds	r3, #1
 800d588:	d10a      	bne.n	800d5a0 <__ssvfscanf_r+0x3b8>
 800d58a:	2400      	movs	r4, #0
 800d58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58e:	681d      	ldr	r5, [r3, #0]
 800d590:	88db      	ldrh	r3, [r3, #6]
 800d592:	42a3      	cmp	r3, r4
 800d594:	dd01      	ble.n	800d59a <__ssvfscanf_r+0x3b2>
 800d596:	f001 f82a 	bl	800e5ee <__ssvfscanf_r+0x1406>
 800d59a:	2301      	movs	r3, #1
 800d59c:	425b      	negs	r3, r3
 800d59e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d001      	beq.n	800d5ac <__ssvfscanf_r+0x3c4>
 800d5a8:	f7fb ff5a 	bl	8009460 <free>
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5b0:	23b1      	movs	r3, #177	; 0xb1
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	449d      	add	sp, r3
 800d5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5be:	88de      	ldrh	r6, [r3, #6]
 800d5c0:	889d      	ldrh	r5, [r3, #4]
 800d5c2:	42ae      	cmp	r6, r5
 800d5c4:	d30e      	bcc.n	800d5e4 <__ssvfscanf_r+0x3fc>
 800d5c6:	4b71      	ldr	r3, [pc, #452]	; (800d78c <__ssvfscanf_r+0x5a4>)
 800d5c8:	429d      	cmp	r5, r3
 800d5ca:	d8d5      	bhi.n	800d578 <__ssvfscanf_r+0x390>
 800d5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ce:	3508      	adds	r5, #8
 800d5d0:	b2ad      	uxth	r5, r5
 800d5d2:	6818      	ldr	r0, [r3, #0]
 800d5d4:	00a9      	lsls	r1, r5, #2
 800d5d6:	f002 f901 	bl	800f7dc <realloc>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0cc      	beq.n	800d578 <__ssvfscanf_r+0x390>
 800d5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e0:	6018      	str	r0, [r3, #0]
 800d5e2:	809d      	strh	r5, [r3, #4]
 800d5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e6:	1c72      	adds	r2, r6, #1
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	00b6      	lsls	r6, r6, #2
 800d5ec:	50f4      	str	r4, [r6, r3]
 800d5ee:	2320      	movs	r3, #32
 800d5f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5f2:	0026      	movs	r6, r4
 800d5f4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d5f6:	80ca      	strh	r2, [r1, #6]
 800d5f8:	61fb      	str	r3, [r7, #28]
 800d5fa:	2500      	movs	r5, #0
 800d5fc:	f7fd f9fe 	bl	800a9fc <__locale_mb_cur_max>
 800d600:	42a8      	cmp	r0, r5
 800d602:	d100      	bne.n	800d606 <__ssvfscanf_r+0x41e>
 800d604:	e6bf      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d606:	1c6a      	adds	r2, r5, #1
 800d608:	60fa      	str	r2, [r7, #12]
 800d60a:	228c      	movs	r2, #140	; 0x8c
 800d60c:	2048      	movs	r0, #72	; 0x48
 800d60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d610:	0052      	lsls	r2, r2, #1
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	1812      	adds	r2, r2, r0
 800d616:	7819      	ldrb	r1, [r3, #0]
 800d618:	19d2      	adds	r2, r2, r7
 800d61a:	5551      	strb	r1, [r2, r5]
 800d61c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d620:	6852      	ldr	r2, [r2, #4]
 800d622:	3301      	adds	r3, #1
 800d624:	600b      	str	r3, [r1, #0]
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	3a01      	subs	r2, #1
 800d62a:	604a      	str	r2, [r1, #4]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d102      	bne.n	800d636 <__ssvfscanf_r+0x44e>
 800d630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d632:	2b04      	cmp	r3, #4
 800d634:	d007      	beq.n	800d646 <__ssvfscanf_r+0x45e>
 800d636:	2048      	movs	r0, #72	; 0x48
 800d638:	2310      	movs	r3, #16
 800d63a:	181b      	adds	r3, r3, r0
 800d63c:	2208      	movs	r2, #8
 800d63e:	2100      	movs	r1, #0
 800d640:	19d8      	adds	r0, r3, r7
 800d642:	f7fd f997 	bl	800a974 <memset>
 800d646:	2148      	movs	r1, #72	; 0x48
 800d648:	2310      	movs	r3, #16
 800d64a:	228c      	movs	r2, #140	; 0x8c
 800d64c:	185b      	adds	r3, r3, r1
 800d64e:	0052      	lsls	r2, r2, #1
 800d650:	19db      	adds	r3, r3, r7
 800d652:	1852      	adds	r2, r2, r1
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	0021      	movs	r1, r4
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d65c:	19d2      	adds	r2, r2, r7
 800d65e:	f002 fc57 	bl	800ff10 <_mbrtowc_r>
 800d662:	0003      	movs	r3, r0
 800d664:	62b8      	str	r0, [r7, #40]	; 0x28
 800d666:	3301      	adds	r3, #1
 800d668:	d100      	bne.n	800d66c <__ssvfscanf_r+0x484>
 800d66a:	e68c      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	d139      	bne.n	800d6e4 <__ssvfscanf_r+0x4fc>
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d100      	bne.n	800d678 <__ssvfscanf_r+0x490>
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	4694      	mov	ip, r2
 800d67e:	4463      	add	r3, ip
 800d680:	63bb      	str	r3, [r7, #56]	; 0x38
 800d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d684:	2b03      	cmp	r3, #3
 800d686:	d102      	bne.n	800d68e <__ssvfscanf_r+0x4a6>
 800d688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d68a:	2b04      	cmp	r3, #4
 800d68c:	d002      	beq.n	800d694 <__ssvfscanf_r+0x4ac>
 800d68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d690:	3b01      	subs	r3, #1
 800d692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d115      	bne.n	800d6c6 <__ssvfscanf_r+0x4de>
 800d69a:	2e00      	cmp	r6, #0
 800d69c:	d012      	beq.n	800d6c4 <__ssvfscanf_r+0x4dc>
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	69fa      	ldr	r2, [r7, #28]
 800d6a2:	1ae5      	subs	r5, r4, r3
 800d6a4:	10ab      	asrs	r3, r5, #2
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d30c      	bcc.n	800d6c4 <__ssvfscanf_r+0x4dc>
 800d6aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ac:	00d1      	lsls	r1, r2, #3
 800d6ae:	f002 f895 	bl	800f7dc <realloc>
 800d6b2:	6338      	str	r0, [r7, #48]	; 0x30
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d100      	bne.n	800d6ba <__ssvfscanf_r+0x4d2>
 800d6b8:	e75e      	b.n	800d578 <__ssvfscanf_r+0x390>
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	1944      	adds	r4, r0, r5
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	6030      	str	r0, [r6, #0]
 800d6c2:	61fb      	str	r3, [r7, #28]
 800d6c4:	3404      	adds	r4, #4
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	e010      	b.n	800d6ec <__ssvfscanf_r+0x504>
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	613b      	str	r3, [r7, #16]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	001e      	movs	r6, r3
 800d6d2:	001c      	movs	r4, r3
 800d6d4:	61fb      	str	r3, [r7, #28]
 800d6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800d6d8:	e78f      	b.n	800d5fa <__ssvfscanf_r+0x412>
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	001e      	movs	r6, r3
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	633b      	str	r3, [r7, #48]	; 0x30
 800d6e2:	e78a      	b.n	800d5fa <__ssvfscanf_r+0x412>
 800d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e6:	68fd      	ldr	r5, [r7, #12]
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	d1c5      	bne.n	800d678 <__ssvfscanf_r+0x490>
 800d6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dc12      	bgt.n	800d71a <__ssvfscanf_r+0x532>
 800d6f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6f8:	f002 fd0a 	bl	8010110 <__ssrefill_r>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d00c      	beq.n	800d71a <__ssvfscanf_r+0x532>
 800d700:	2d00      	cmp	r5, #0
 800d702:	d000      	beq.n	800d706 <__ssvfscanf_r+0x51e>
 800d704:	e63f      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d706:	2e00      	cmp	r6, #0
 800d708:	d10c      	bne.n	800d724 <__ssvfscanf_r+0x53c>
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	425a      	negs	r2, r3
 800d70e:	4153      	adcs	r3, r2
 800d710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d712:	18d3      	adds	r3, r2, r3
 800d714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	e6de      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800d71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d000      	beq.n	800d722 <__ssvfscanf_r+0x53a>
 800d720:	e76c      	b.n	800d5fc <__ssvfscanf_r+0x414>
 800d722:	e7f0      	b.n	800d706 <__ssvfscanf_r+0x51e>
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	69fa      	ldr	r2, [r7, #28]
 800d728:	1ae1      	subs	r1, r4, r3
 800d72a:	108b      	asrs	r3, r1, #2
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d9ec      	bls.n	800d70a <__ssvfscanf_r+0x522>
 800d730:	6830      	ldr	r0, [r6, #0]
 800d732:	f002 f853 	bl	800f7dc <realloc>
 800d736:	2800      	cmp	r0, #0
 800d738:	d0e7      	beq.n	800d70a <__ssvfscanf_r+0x522>
 800d73a:	6030      	str	r0, [r6, #0]
 800d73c:	e7e5      	b.n	800d70a <__ssvfscanf_r+0x522>
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d025      	beq.n	800d790 <__ssvfscanf_r+0x5a8>
 800d744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d74c:	6812      	ldr	r2, [r2, #0]
 800d74e:	4299      	cmp	r1, r3
 800d750:	dd11      	ble.n	800d776 <__ssvfscanf_r+0x58e>
 800d752:	1ac9      	subs	r1, r1, r3
 800d754:	18d2      	adds	r2, r2, r3
 800d756:	18e4      	adds	r4, r4, r3
 800d758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d75a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d75c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d75e:	0019      	movs	r1, r3
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	f002 fcd5 	bl	8010110 <__ssrefill_r>
 800d766:	2800      	cmp	r0, #0
 800d768:	d0ec      	beq.n	800d744 <__ssvfscanf_r+0x55c>
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	d100      	bne.n	800d770 <__ssvfscanf_r+0x588>
 800d76e:	e60a      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d772:	191b      	adds	r3, r3, r4
 800d774:	e5ff      	b.n	800d376 <__ssvfscanf_r+0x18e>
 800d776:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d778:	1a5b      	subs	r3, r3, r1
 800d77a:	1864      	adds	r4, r4, r1
 800d77c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d77e:	604b      	str	r3, [r1, #4]
 800d780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d782:	18d2      	adds	r2, r2, r3
 800d784:	600a      	str	r2, [r1, #0]
 800d786:	e7f3      	b.n	800d770 <__ssvfscanf_r+0x588>
 800d788:	0800a639 	.word	0x0800a639
 800d78c:	0000fff6 	.word	0x0000fff6
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	0034      	movs	r4, r6
 800d794:	cb20      	ldmia	r3!, {r5}
 800d796:	633b      	str	r3, [r7, #48]	; 0x30
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	401c      	ands	r4, r3
 800d79c:	421e      	tst	r6, r3
 800d79e:	d028      	beq.n	800d7f2 <__ssvfscanf_r+0x60a>
 800d7a0:	2d00      	cmp	r5, #0
 800d7a2:	d100      	bne.n	800d7a6 <__ssvfscanf_r+0x5be>
 800d7a4:	e61d      	b.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800d7a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7a8:	f7fb fe50 	bl	800944c <malloc>
 800d7ac:	6238      	str	r0, [r7, #32]
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d100      	bne.n	800d7b4 <__ssvfscanf_r+0x5cc>
 800d7b2:	e5ef      	b.n	800d394 <__ssvfscanf_r+0x1ac>
 800d7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7b6:	6028      	str	r0, [r5, #0]
 800d7b8:	88de      	ldrh	r6, [r3, #6]
 800d7ba:	889c      	ldrh	r4, [r3, #4]
 800d7bc:	6818      	ldr	r0, [r3, #0]
 800d7be:	42a6      	cmp	r6, r4
 800d7c0:	d30e      	bcc.n	800d7e0 <__ssvfscanf_r+0x5f8>
 800d7c2:	4bbf      	ldr	r3, [pc, #764]	; (800dac0 <__ssvfscanf_r+0x8d8>)
 800d7c4:	429c      	cmp	r4, r3
 800d7c6:	d900      	bls.n	800d7ca <__ssvfscanf_r+0x5e2>
 800d7c8:	e6df      	b.n	800d58a <__ssvfscanf_r+0x3a2>
 800d7ca:	3408      	adds	r4, #8
 800d7cc:	b2a4      	uxth	r4, r4
 800d7ce:	00a1      	lsls	r1, r4, #2
 800d7d0:	f002 f804 	bl	800f7dc <realloc>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d100      	bne.n	800d7da <__ssvfscanf_r+0x5f2>
 800d7d8:	e6d7      	b.n	800d58a <__ssvfscanf_r+0x3a2>
 800d7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7dc:	6018      	str	r0, [r3, #0]
 800d7de:	809c      	strh	r4, [r3, #4]
 800d7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7e2:	1c72      	adds	r2, r6, #1
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7e8:	00b6      	lsls	r6, r6, #2
 800d7ea:	002c      	movs	r4, r5
 800d7ec:	50f5      	str	r5, [r6, r3]
 800d7ee:	6a3d      	ldr	r5, [r7, #32]
 800d7f0:	80ca      	strh	r2, [r1, #6]
 800d7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f4:	0029      	movs	r1, r5
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7fe:	f002 fca6 	bl	801014e <_sfread_r>
 800d802:	1e05      	subs	r5, r0, #0
 800d804:	d100      	bne.n	800d808 <__ssvfscanf_r+0x620>
 800d806:	e5be      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d808:	2c00      	cmp	r4, #0
 800d80a:	d009      	beq.n	800d820 <__ssvfscanf_r+0x638>
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	4283      	cmp	r3, r0
 800d810:	d906      	bls.n	800d820 <__ssvfscanf_r+0x638>
 800d812:	0001      	movs	r1, r0
 800d814:	6820      	ldr	r0, [r4, #0]
 800d816:	f001 ffe1 	bl	800f7dc <realloc>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d000      	beq.n	800d820 <__ssvfscanf_r+0x638>
 800d81e:	6020      	str	r0, [r4, #0]
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	195b      	adds	r3, r3, r5
 800d824:	63bb      	str	r3, [r7, #56]	; 0x38
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	3301      	adds	r3, #1
 800d82a:	e4f8      	b.n	800d21e <__ssvfscanf_r+0x36>
 800d82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <__ssvfscanf_r+0x64e>
 800d832:	3b01      	subs	r3, #1
 800d834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d836:	2210      	movs	r2, #16
 800d838:	2301      	movs	r3, #1
 800d83a:	0034      	movs	r4, r6
 800d83c:	4032      	ands	r2, r6
 800d83e:	401c      	ands	r4, r3
 800d840:	623a      	str	r2, [r7, #32]
 800d842:	421e      	tst	r6, r3
 800d844:	d100      	bne.n	800d848 <__ssvfscanf_r+0x660>
 800d846:	e116      	b.n	800da76 <__ssvfscanf_r+0x88e>
 800d848:	2a00      	cmp	r2, #0
 800d84a:	d000      	beq.n	800d84e <__ssvfscanf_r+0x666>
 800d84c:	e0b0      	b.n	800d9b0 <__ssvfscanf_r+0x7c8>
 800d84e:	2080      	movs	r0, #128	; 0x80
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	cb10      	ldmia	r3!, {r4}
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	4206      	tst	r6, r0
 800d858:	d100      	bne.n	800d85c <__ssvfscanf_r+0x674>
 800d85a:	e0b2      	b.n	800d9c2 <__ssvfscanf_r+0x7da>
 800d85c:	2c00      	cmp	r4, #0
 800d85e:	d100      	bne.n	800d862 <__ssvfscanf_r+0x67a>
 800d860:	e68d      	b.n	800d57e <__ssvfscanf_r+0x396>
 800d862:	f7fb fdf3 	bl	800944c <malloc>
 800d866:	6338      	str	r0, [r7, #48]	; 0x30
 800d868:	2800      	cmp	r0, #0
 800d86a:	d100      	bne.n	800d86e <__ssvfscanf_r+0x686>
 800d86c:	e684      	b.n	800d578 <__ssvfscanf_r+0x390>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d874:	88de      	ldrh	r6, [r3, #6]
 800d876:	889d      	ldrh	r5, [r3, #4]
 800d878:	42ae      	cmp	r6, r5
 800d87a:	d310      	bcc.n	800d89e <__ssvfscanf_r+0x6b6>
 800d87c:	4b90      	ldr	r3, [pc, #576]	; (800dac0 <__ssvfscanf_r+0x8d8>)
 800d87e:	429d      	cmp	r5, r3
 800d880:	d900      	bls.n	800d884 <__ssvfscanf_r+0x69c>
 800d882:	e679      	b.n	800d578 <__ssvfscanf_r+0x390>
 800d884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d886:	3508      	adds	r5, #8
 800d888:	b2ad      	uxth	r5, r5
 800d88a:	6818      	ldr	r0, [r3, #0]
 800d88c:	00a9      	lsls	r1, r5, #2
 800d88e:	f001 ffa5 	bl	800f7dc <realloc>
 800d892:	2800      	cmp	r0, #0
 800d894:	d100      	bne.n	800d898 <__ssvfscanf_r+0x6b0>
 800d896:	e66f      	b.n	800d578 <__ssvfscanf_r+0x390>
 800d898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d89a:	6018      	str	r0, [r3, #0]
 800d89c:	809d      	strh	r5, [r3, #4]
 800d89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8a0:	1c72      	adds	r2, r6, #1
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	00b6      	lsls	r6, r6, #2
 800d8a6:	50f4      	str	r4, [r6, r3]
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8ac:	0026      	movs	r6, r4
 800d8ae:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d8b0:	80ca      	strh	r2, [r1, #6]
 800d8b2:	613b      	str	r3, [r7, #16]
 800d8b4:	2500      	movs	r5, #0
 800d8b6:	f7fd f8a1 	bl	800a9fc <__locale_mb_cur_max>
 800d8ba:	42a8      	cmp	r0, r5
 800d8bc:	d100      	bne.n	800d8c0 <__ssvfscanf_r+0x6d8>
 800d8be:	e562      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d8c0:	1c6a      	adds	r2, r5, #1
 800d8c2:	61fa      	str	r2, [r7, #28]
 800d8c4:	228c      	movs	r2, #140	; 0x8c
 800d8c6:	2048      	movs	r0, #72	; 0x48
 800d8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ca:	0052      	lsls	r2, r2, #1
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	1812      	adds	r2, r2, r0
 800d8d0:	7819      	ldrb	r1, [r3, #0]
 800d8d2:	19d2      	adds	r2, r2, r7
 800d8d4:	5551      	strb	r1, [r2, r5]
 800d8d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8da:	6852      	ldr	r2, [r2, #4]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	600b      	str	r3, [r1, #0]
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	3a01      	subs	r2, #1
 800d8e4:	604a      	str	r2, [r1, #4]
 800d8e6:	2b03      	cmp	r3, #3
 800d8e8:	d102      	bne.n	800d8f0 <__ssvfscanf_r+0x708>
 800d8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	d006      	beq.n	800d8fe <__ssvfscanf_r+0x716>
 800d8f0:	2048      	movs	r0, #72	; 0x48
 800d8f2:	2208      	movs	r2, #8
 800d8f4:	1813      	adds	r3, r2, r0
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	19d8      	adds	r0, r3, r7
 800d8fa:	f7fd f83b 	bl	800a974 <memset>
 800d8fe:	2148      	movs	r1, #72	; 0x48
 800d900:	2308      	movs	r3, #8
 800d902:	228c      	movs	r2, #140	; 0x8c
 800d904:	185b      	adds	r3, r3, r1
 800d906:	0052      	lsls	r2, r2, #1
 800d908:	19db      	adds	r3, r3, r7
 800d90a:	1852      	adds	r2, r2, r1
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	0021      	movs	r1, r4
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d914:	19d2      	adds	r2, r2, r7
 800d916:	f002 fafb 	bl	800ff10 <_mbrtowc_r>
 800d91a:	0003      	movs	r3, r0
 800d91c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d91e:	3301      	adds	r3, #1
 800d920:	d100      	bne.n	800d924 <__ssvfscanf_r+0x73c>
 800d922:	e530      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d924:	2800      	cmp	r0, #0
 800d926:	d151      	bne.n	800d9cc <__ssvfscanf_r+0x7e4>
 800d928:	6020      	str	r0, [r4, #0]
 800d92a:	2301      	movs	r3, #1
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	425b      	negs	r3, r3
 800d930:	1c6a      	adds	r2, r5, #1
 800d932:	d01a      	beq.n	800d96a <__ssvfscanf_r+0x782>
 800d934:	2048      	movs	r0, #72	; 0x48
 800d936:	3311      	adds	r3, #17
 800d938:	181b      	adds	r3, r3, r0
 800d93a:	2208      	movs	r2, #8
 800d93c:	2100      	movs	r1, #0
 800d93e:	19d8      	adds	r0, r3, r7
 800d940:	f7fd f818 	bl	800a974 <memset>
 800d944:	4b5f      	ldr	r3, [pc, #380]	; (800dac4 <__ssvfscanf_r+0x8dc>)
 800d946:	2148      	movs	r1, #72	; 0x48
 800d948:	33e0      	adds	r3, #224	; 0xe0
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	2310      	movs	r3, #16
 800d94e:	4694      	mov	ip, r2
 800d950:	185b      	adds	r3, r3, r1
 800d952:	002a      	movs	r2, r5
 800d954:	19db      	adds	r3, r3, r7
 800d956:	4665      	mov	r5, ip
 800d958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d95a:	1879      	adds	r1, r7, r1
 800d95c:	47a8      	blx	r5
 800d95e:	2300      	movs	r3, #0
 800d960:	2801      	cmp	r0, #1
 800d962:	d102      	bne.n	800d96a <__ssvfscanf_r+0x782>
 800d964:	3348      	adds	r3, #72	; 0x48
 800d966:	18fb      	adds	r3, r7, r3
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2218      	movs	r2, #24
 800d96c:	2148      	movs	r1, #72	; 0x48
 800d96e:	1852      	adds	r2, r2, r1
 800d970:	19d2      	adds	r2, r2, r7
 800d972:	5cd3      	ldrb	r3, [r2, r3]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d149      	bne.n	800da0c <__ssvfscanf_r+0x824>
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d137      	bne.n	800d9ee <__ssvfscanf_r+0x806>
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d113      	bne.n	800d9ac <__ssvfscanf_r+0x7c4>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	2e00      	cmp	r6, #0
 800d988:	d00d      	beq.n	800d9a6 <__ssvfscanf_r+0x7be>
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	1ae4      	subs	r4, r4, r3
 800d990:	10a3      	asrs	r3, r4, #2
 800d992:	3301      	adds	r3, #1
 800d994:	429a      	cmp	r2, r3
 800d996:	d906      	bls.n	800d9a6 <__ssvfscanf_r+0x7be>
 800d998:	6830      	ldr	r0, [r6, #0]
 800d99a:	1d21      	adds	r1, r4, #4
 800d99c:	f001 ff1e 	bl	800f7dc <realloc>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d000      	beq.n	800d9a6 <__ssvfscanf_r+0x7be>
 800d9a4:	6030      	str	r0, [r6, #0]
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	e593      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	001e      	movs	r6, r3
 800d9b8:	613b      	str	r3, [r7, #16]
 800d9ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d9bc:	334c      	adds	r3, #76	; 0x4c
 800d9be:	18fc      	adds	r4, r7, r3
 800d9c0:	e778      	b.n	800d8b4 <__ssvfscanf_r+0x6cc>
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	001e      	movs	r6, r3
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	633b      	str	r3, [r7, #48]	; 0x30
 800d9ca:	e773      	b.n	800d8b4 <__ssvfscanf_r+0x6cc>
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	69fd      	ldr	r5, [r7, #28]
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	d1aa      	bne.n	800d92a <__ssvfscanf_r+0x742>
 800d9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	dc47      	bgt.n	800da6c <__ssvfscanf_r+0x884>
 800d9dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9e0:	f002 fb96 	bl	8010110 <__ssrefill_r>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d041      	beq.n	800da6c <__ssvfscanf_r+0x884>
 800d9e8:	2d00      	cmp	r5, #0
 800d9ea:	d0c8      	beq.n	800d97e <__ssvfscanf_r+0x796>
 800d9ec:	e4cb      	b.n	800d386 <__ssvfscanf_r+0x19e>
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	2248      	movs	r2, #72	; 0x48
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	61fb      	str	r3, [r7, #28]
 800d9f6:	238c      	movs	r3, #140	; 0x8c
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	189b      	adds	r3, r3, r2
 800d9fc:	69fa      	ldr	r2, [r7, #28]
 800d9fe:	19db      	adds	r3, r3, r7
 800da00:	5cd1      	ldrb	r1, [r2, r3]
 800da02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da06:	f002 fb47 	bl	8010098 <_sungetc_r>
 800da0a:	e7b5      	b.n	800d978 <__ssvfscanf_r+0x790>
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da10:	4694      	mov	ip, r2
 800da12:	4463      	add	r3, ip
 800da14:	63bb      	str	r3, [r7, #56]	; 0x38
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d102      	bne.n	800da22 <__ssvfscanf_r+0x83a>
 800da1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d002      	beq.n	800da28 <__ssvfscanf_r+0x840>
 800da22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da24:	3b01      	subs	r3, #1
 800da26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d11a      	bne.n	800da64 <__ssvfscanf_r+0x87c>
 800da2e:	3404      	adds	r4, #4
 800da30:	2e00      	cmp	r6, #0
 800da32:	d019      	beq.n	800da68 <__ssvfscanf_r+0x880>
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	1ae3      	subs	r3, r4, r3
 800da3a:	61fb      	str	r3, [r7, #28]
 800da3c:	6a3d      	ldr	r5, [r7, #32]
 800da3e:	109b      	asrs	r3, r3, #2
 800da40:	4293      	cmp	r3, r2
 800da42:	d3c7      	bcc.n	800d9d4 <__ssvfscanf_r+0x7ec>
 800da44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da46:	00d1      	lsls	r1, r2, #3
 800da48:	f001 fec8 	bl	800f7dc <realloc>
 800da4c:	6338      	str	r0, [r7, #48]	; 0x30
 800da4e:	2800      	cmp	r0, #0
 800da50:	d100      	bne.n	800da54 <__ssvfscanf_r+0x86c>
 800da52:	e591      	b.n	800d578 <__ssvfscanf_r+0x390>
 800da54:	4684      	mov	ip, r0
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	69fc      	ldr	r4, [r7, #28]
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	4464      	add	r4, ip
 800da5e:	6030      	str	r0, [r6, #0]
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	e7b7      	b.n	800d9d4 <__ssvfscanf_r+0x7ec>
 800da64:	2500      	movs	r5, #0
 800da66:	e7b5      	b.n	800d9d4 <__ssvfscanf_r+0x7ec>
 800da68:	0035      	movs	r5, r6
 800da6a:	e7b3      	b.n	800d9d4 <__ssvfscanf_r+0x7ec>
 800da6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d000      	beq.n	800da74 <__ssvfscanf_r+0x88c>
 800da72:	e720      	b.n	800d8b6 <__ssvfscanf_r+0x6ce>
 800da74:	e783      	b.n	800d97e <__ssvfscanf_r+0x796>
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d025      	beq.n	800dac8 <__ssvfscanf_r+0x8e0>
 800da7c:	2118      	movs	r1, #24
 800da7e:	2048      	movs	r0, #72	; 0x48
 800da80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da82:	1809      	adds	r1, r1, r0
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	19c9      	adds	r1, r1, r7
 800da88:	781a      	ldrb	r2, [r3, #0]
 800da8a:	5c8a      	ldrb	r2, [r1, r2]
 800da8c:	2a00      	cmp	r2, #0
 800da8e:	d103      	bne.n	800da98 <__ssvfscanf_r+0x8b0>
 800da90:	2c00      	cmp	r4, #0
 800da92:	d000      	beq.n	800da96 <__ssvfscanf_r+0x8ae>
 800da94:	e66c      	b.n	800d770 <__ssvfscanf_r+0x588>
 800da96:	e4a4      	b.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800da98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da9c:	6852      	ldr	r2, [r2, #4]
 800da9e:	3301      	adds	r3, #1
 800daa0:	600b      	str	r3, [r1, #0]
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	3a01      	subs	r2, #1
 800daa6:	3401      	adds	r4, #1
 800daa8:	604a      	str	r2, [r1, #4]
 800daaa:	429c      	cmp	r4, r3
 800daac:	d100      	bne.n	800dab0 <__ssvfscanf_r+0x8c8>
 800daae:	e65f      	b.n	800d770 <__ssvfscanf_r+0x588>
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	dce3      	bgt.n	800da7c <__ssvfscanf_r+0x894>
 800dab4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dab6:	f002 fb2b 	bl	8010110 <__ssrefill_r>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d0de      	beq.n	800da7c <__ssvfscanf_r+0x894>
 800dabe:	e657      	b.n	800d770 <__ssvfscanf_r+0x588>
 800dac0:	0000fff6 	.word	0x0000fff6
 800dac4:	20000450 	.word	0x20000450
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	0032      	movs	r2, r6
 800dacc:	cb20      	ldmia	r3!, {r5}
 800dace:	61fb      	str	r3, [r7, #28]
 800dad0:	2380      	movs	r3, #128	; 0x80
 800dad2:	401a      	ands	r2, r3
 800dad4:	421e      	tst	r6, r3
 800dad6:	d100      	bne.n	800dada <__ssvfscanf_r+0x8f2>
 800dad8:	e086      	b.n	800dbe8 <__ssvfscanf_r+0xa00>
 800dada:	2d00      	cmp	r5, #0
 800dadc:	d100      	bne.n	800dae0 <__ssvfscanf_r+0x8f8>
 800dade:	e480      	b.n	800d3e2 <__ssvfscanf_r+0x1fa>
 800dae0:	2020      	movs	r0, #32
 800dae2:	f7fb fcb3 	bl	800944c <malloc>
 800dae6:	6338      	str	r0, [r7, #48]	; 0x30
 800dae8:	2800      	cmp	r0, #0
 800daea:	d100      	bne.n	800daee <__ssvfscanf_r+0x906>
 800daec:	e452      	b.n	800d394 <__ssvfscanf_r+0x1ac>
 800daee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf0:	6028      	str	r0, [r5, #0]
 800daf2:	88de      	ldrh	r6, [r3, #6]
 800daf4:	889c      	ldrh	r4, [r3, #4]
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	42a6      	cmp	r6, r4
 800dafa:	d30e      	bcc.n	800db1a <__ssvfscanf_r+0x932>
 800dafc:	4bc3      	ldr	r3, [pc, #780]	; (800de0c <__ssvfscanf_r+0xc24>)
 800dafe:	429c      	cmp	r4, r3
 800db00:	d900      	bls.n	800db04 <__ssvfscanf_r+0x91c>
 800db02:	e542      	b.n	800d58a <__ssvfscanf_r+0x3a2>
 800db04:	3408      	adds	r4, #8
 800db06:	b2a4      	uxth	r4, r4
 800db08:	00a1      	lsls	r1, r4, #2
 800db0a:	f001 fe67 	bl	800f7dc <realloc>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d100      	bne.n	800db14 <__ssvfscanf_r+0x92c>
 800db12:	e53a      	b.n	800d58a <__ssvfscanf_r+0x3a2>
 800db14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db16:	6018      	str	r0, [r3, #0]
 800db18:	809c      	strh	r4, [r3, #4]
 800db1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db1c:	1c72      	adds	r2, r6, #1
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	00b6      	lsls	r6, r6, #2
 800db22:	50f5      	str	r5, [r6, r3]
 800db24:	2320      	movs	r3, #32
 800db26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db28:	002e      	movs	r6, r5
 800db2a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800db2c:	80ca      	strh	r2, [r1, #6]
 800db2e:	623b      	str	r3, [r7, #32]
 800db30:	002c      	movs	r4, r5
 800db32:	2118      	movs	r1, #24
 800db34:	2048      	movs	r0, #72	; 0x48
 800db36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db38:	1809      	adds	r1, r1, r0
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	19c9      	adds	r1, r1, r7
 800db3e:	781a      	ldrb	r2, [r3, #0]
 800db40:	5c8a      	ldrb	r2, [r1, r2]
 800db42:	2a00      	cmp	r2, #0
 800db44:	d101      	bne.n	800db4a <__ssvfscanf_r+0x962>
 800db46:	633d      	str	r5, [r7, #48]	; 0x30
 800db48:	e031      	b.n	800dbae <__ssvfscanf_r+0x9c6>
 800db4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db4e:	6852      	ldr	r2, [r2, #4]
 800db50:	3a01      	subs	r2, #1
 800db52:	604a      	str	r2, [r1, #4]
 800db54:	1c5a      	adds	r2, r3, #1
 800db56:	600a      	str	r2, [r1, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	1c6a      	adds	r2, r5, #1
 800db5c:	633a      	str	r2, [r7, #48]	; 0x30
 800db5e:	702b      	strb	r3, [r5, #0]
 800db60:	2e00      	cmp	r6, #0
 800db62:	d010      	beq.n	800db86 <__ssvfscanf_r+0x99e>
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	1b15      	subs	r5, r2, r4
 800db68:	429d      	cmp	r5, r3
 800db6a:	d30c      	bcc.n	800db86 <__ssvfscanf_r+0x99e>
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	0020      	movs	r0, r4
 800db70:	0019      	movs	r1, r3
 800db72:	623b      	str	r3, [r7, #32]
 800db74:	f001 fe32 	bl	800f7dc <realloc>
 800db78:	1e04      	subs	r4, r0, #0
 800db7a:	d101      	bne.n	800db80 <__ssvfscanf_r+0x998>
 800db7c:	f7ff fc0a 	bl	800d394 <__ssvfscanf_r+0x1ac>
 800db80:	1943      	adds	r3, r0, r5
 800db82:	633b      	str	r3, [r7, #48]	; 0x30
 800db84:	6030      	str	r0, [r6, #0]
 800db86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db88:	3b01      	subs	r3, #1
 800db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00e      	beq.n	800dbae <__ssvfscanf_r+0x9c6>
 800db90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	dc2a      	bgt.n	800dbee <__ssvfscanf_r+0xa06>
 800db98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db9c:	f002 fab8 	bl	8010110 <__ssrefill_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d024      	beq.n	800dbee <__ssvfscanf_r+0xa06>
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	42a3      	cmp	r3, r4
 800dba8:	d101      	bne.n	800dbae <__ssvfscanf_r+0x9c6>
 800dbaa:	f7ff fbec 	bl	800d386 <__ssvfscanf_r+0x19e>
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	1b1d      	subs	r5, r3, r4
 800dbb2:	42a3      	cmp	r3, r4
 800dbb4:	d101      	bne.n	800dbba <__ssvfscanf_r+0x9d2>
 800dbb6:	f7ff fc14 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbbe:	7013      	strb	r3, [r2, #0]
 800dbc0:	429e      	cmp	r6, r3
 800dbc2:	d009      	beq.n	800dbd8 <__ssvfscanf_r+0x9f0>
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	1c69      	adds	r1, r5, #1
 800dbc8:	428b      	cmp	r3, r1
 800dbca:	d905      	bls.n	800dbd8 <__ssvfscanf_r+0x9f0>
 800dbcc:	6830      	ldr	r0, [r6, #0]
 800dbce:	f001 fe05 	bl	800f7dc <realloc>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d000      	beq.n	800dbd8 <__ssvfscanf_r+0x9f0>
 800dbd6:	6030      	str	r0, [r6, #0]
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	3301      	adds	r3, #1
 800dbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	195b      	adds	r3, r3, r5
 800dbe2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	e477      	b.n	800d4d8 <__ssvfscanf_r+0x2f0>
 800dbe8:	0016      	movs	r6, r2
 800dbea:	623a      	str	r2, [r7, #32]
 800dbec:	e7a0      	b.n	800db30 <__ssvfscanf_r+0x948>
 800dbee:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800dbf0:	e79f      	b.n	800db32 <__ssvfscanf_r+0x94a>
 800dbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d101      	bne.n	800dbfc <__ssvfscanf_r+0xa14>
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbfc:	2210      	movs	r2, #16
 800dbfe:	2301      	movs	r3, #1
 800dc00:	0034      	movs	r4, r6
 800dc02:	4032      	ands	r2, r6
 800dc04:	401c      	ands	r4, r3
 800dc06:	61fa      	str	r2, [r7, #28]
 800dc08:	421e      	tst	r6, r3
 800dc0a:	d100      	bne.n	800dc0e <__ssvfscanf_r+0xa26>
 800dc0c:	e102      	b.n	800de14 <__ssvfscanf_r+0xc2c>
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	d000      	beq.n	800dc14 <__ssvfscanf_r+0xa2c>
 800dc12:	e09f      	b.n	800dd54 <__ssvfscanf_r+0xb6c>
 800dc14:	2080      	movs	r0, #128	; 0x80
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	cb10      	ldmia	r3!, {r4}
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	4206      	tst	r6, r0
 800dc1e:	d100      	bne.n	800dc22 <__ssvfscanf_r+0xa3a>
 800dc20:	e0a1      	b.n	800dd66 <__ssvfscanf_r+0xb7e>
 800dc22:	2c00      	cmp	r4, #0
 800dc24:	d100      	bne.n	800dc28 <__ssvfscanf_r+0xa40>
 800dc26:	e4aa      	b.n	800d57e <__ssvfscanf_r+0x396>
 800dc28:	f7fb fc10 	bl	800944c <malloc>
 800dc2c:	6338      	str	r0, [r7, #48]	; 0x30
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d100      	bne.n	800dc34 <__ssvfscanf_r+0xa4c>
 800dc32:	e4a1      	b.n	800d578 <__ssvfscanf_r+0x390>
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	6023      	str	r3, [r4, #0]
 800dc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc3a:	88de      	ldrh	r6, [r3, #6]
 800dc3c:	889d      	ldrh	r5, [r3, #4]
 800dc3e:	42ae      	cmp	r6, r5
 800dc40:	d310      	bcc.n	800dc64 <__ssvfscanf_r+0xa7c>
 800dc42:	4b72      	ldr	r3, [pc, #456]	; (800de0c <__ssvfscanf_r+0xc24>)
 800dc44:	429d      	cmp	r5, r3
 800dc46:	d900      	bls.n	800dc4a <__ssvfscanf_r+0xa62>
 800dc48:	e496      	b.n	800d578 <__ssvfscanf_r+0x390>
 800dc4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc4c:	3508      	adds	r5, #8
 800dc4e:	b2ad      	uxth	r5, r5
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	00a9      	lsls	r1, r5, #2
 800dc54:	f001 fdc2 	bl	800f7dc <realloc>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d100      	bne.n	800dc5e <__ssvfscanf_r+0xa76>
 800dc5c:	e48c      	b.n	800d578 <__ssvfscanf_r+0x390>
 800dc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc60:	6018      	str	r0, [r3, #0]
 800dc62:	809d      	strh	r5, [r3, #4]
 800dc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc66:	1c72      	adds	r2, r6, #1
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	00b6      	lsls	r6, r6, #2
 800dc6c:	50f4      	str	r4, [r6, r3]
 800dc6e:	2320      	movs	r3, #32
 800dc70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc72:	0025      	movs	r5, r4
 800dc74:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dc76:	80ca      	strh	r2, [r1, #6]
 800dc78:	613b      	str	r3, [r7, #16]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	623b      	str	r3, [r7, #32]
 800dc7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc80:	4a63      	ldr	r2, [pc, #396]	; (800de10 <__ssvfscanf_r+0xc28>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	5cd3      	ldrb	r3, [r2, r3]
 800dc88:	2208      	movs	r2, #8
 800dc8a:	4213      	tst	r3, r2
 800dc8c:	d149      	bne.n	800dd22 <__ssvfscanf_r+0xb3a>
 800dc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d046      	beq.n	800dd22 <__ssvfscanf_r+0xb3a>
 800dc94:	f7fc feb2 	bl	800a9fc <__locale_mb_cur_max>
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	d101      	bne.n	800dca2 <__ssvfscanf_r+0xaba>
 800dc9e:	f7ff fb72 	bl	800d386 <__ssvfscanf_r+0x19e>
 800dca2:	6a3a      	ldr	r2, [r7, #32]
 800dca4:	2048      	movs	r0, #72	; 0x48
 800dca6:	1c56      	adds	r6, r2, #1
 800dca8:	228c      	movs	r2, #140	; 0x8c
 800dcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcac:	0052      	lsls	r2, r2, #1
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	1812      	adds	r2, r2, r0
 800dcb2:	7819      	ldrb	r1, [r3, #0]
 800dcb4:	6a38      	ldr	r0, [r7, #32]
 800dcb6:	19d2      	adds	r2, r2, r7
 800dcb8:	5411      	strb	r1, [r2, r0]
 800dcba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcbe:	6852      	ldr	r2, [r2, #4]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	600b      	str	r3, [r1, #0]
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	3a01      	subs	r2, #1
 800dcc8:	604a      	str	r2, [r1, #4]
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d102      	bne.n	800dcd4 <__ssvfscanf_r+0xaec>
 800dcce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	d007      	beq.n	800dce4 <__ssvfscanf_r+0xafc>
 800dcd4:	2048      	movs	r0, #72	; 0x48
 800dcd6:	2310      	movs	r3, #16
 800dcd8:	181b      	adds	r3, r3, r0
 800dcda:	2208      	movs	r2, #8
 800dcdc:	2100      	movs	r1, #0
 800dcde:	19d8      	adds	r0, r3, r7
 800dce0:	f7fc fe48 	bl	800a974 <memset>
 800dce4:	2148      	movs	r1, #72	; 0x48
 800dce6:	2310      	movs	r3, #16
 800dce8:	228c      	movs	r2, #140	; 0x8c
 800dcea:	185b      	adds	r3, r3, r1
 800dcec:	0052      	lsls	r2, r2, #1
 800dcee:	19db      	adds	r3, r3, r7
 800dcf0:	1852      	adds	r2, r2, r1
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	0021      	movs	r1, r4
 800dcf6:	0033      	movs	r3, r6
 800dcf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcfa:	19d2      	adds	r2, r2, r7
 800dcfc:	f002 f908 	bl	800ff10 <_mbrtowc_r>
 800dd00:	0003      	movs	r3, r0
 800dd02:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd04:	3301      	adds	r3, #1
 800dd06:	d101      	bne.n	800dd0c <__ssvfscanf_r+0xb24>
 800dd08:	f7ff fb3d 	bl	800d386 <__ssvfscanf_r+0x19e>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d12f      	bne.n	800dd70 <__ssvfscanf_r+0xb88>
 800dd10:	6020      	str	r0, [r4, #0]
 800dd12:	6820      	ldr	r0, [r4, #0]
 800dd14:	f002 f91a 	bl	800ff4c <iswspace>
 800dd18:	6238      	str	r0, [r7, #32]
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d04a      	beq.n	800ddb4 <__ssvfscanf_r+0xbcc>
 800dd1e:	2e00      	cmp	r6, #0
 800dd20:	d13c      	bne.n	800dd9c <__ssvfscanf_r+0xbb4>
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d000      	beq.n	800dd2a <__ssvfscanf_r+0xb42>
 800dd28:	e640      	b.n	800d9ac <__ssvfscanf_r+0x7c4>
 800dd2a:	6023      	str	r3, [r4, #0]
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	d100      	bne.n	800dd32 <__ssvfscanf_r+0xb4a>
 800dd30:	e639      	b.n	800d9a6 <__ssvfscanf_r+0x7be>
 800dd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd34:	693a      	ldr	r2, [r7, #16]
 800dd36:	1ae4      	subs	r4, r4, r3
 800dd38:	10a3      	asrs	r3, r4, #2
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d800      	bhi.n	800dd42 <__ssvfscanf_r+0xb5a>
 800dd40:	e631      	b.n	800d9a6 <__ssvfscanf_r+0x7be>
 800dd42:	6828      	ldr	r0, [r5, #0]
 800dd44:	1d21      	adds	r1, r4, #4
 800dd46:	f001 fd49 	bl	800f7dc <realloc>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d100      	bne.n	800dd50 <__ssvfscanf_r+0xb68>
 800dd4e:	e62a      	b.n	800d9a6 <__ssvfscanf_r+0x7be>
 800dd50:	6028      	str	r0, [r5, #0]
 800dd52:	e628      	b.n	800d9a6 <__ssvfscanf_r+0x7be>
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	60fb      	str	r3, [r7, #12]
 800dd58:	2300      	movs	r3, #0
 800dd5a:	001d      	movs	r5, r3
 800dd5c:	613b      	str	r3, [r7, #16]
 800dd5e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd60:	334c      	adds	r3, #76	; 0x4c
 800dd62:	18fc      	adds	r4, r7, r3
 800dd64:	e789      	b.n	800dc7a <__ssvfscanf_r+0xa92>
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	001d      	movs	r5, r3
 800dd6a:	613b      	str	r3, [r7, #16]
 800dd6c:	633b      	str	r3, [r7, #48]	; 0x30
 800dd6e:	e784      	b.n	800dc7a <__ssvfscanf_r+0xa92>
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	623e      	str	r6, [r7, #32]
 800dd74:	3302      	adds	r3, #2
 800dd76:	d1cc      	bne.n	800dd12 <__ssvfscanf_r+0xb2a>
 800dd78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	dd00      	ble.n	800dd82 <__ssvfscanf_r+0xb9a>
 800dd80:	e77d      	b.n	800dc7e <__ssvfscanf_r+0xa96>
 800dd82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd86:	f002 f9c3 	bl	8010110 <__ssrefill_r>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d100      	bne.n	800dd90 <__ssvfscanf_r+0xba8>
 800dd8e:	e776      	b.n	800dc7e <__ssvfscanf_r+0xa96>
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <__ssvfscanf_r+0xbb2>
 800dd96:	f7ff faf6 	bl	800d386 <__ssvfscanf_r+0x19e>
 800dd9a:	e7c2      	b.n	800dd22 <__ssvfscanf_r+0xb3a>
 800dd9c:	238c      	movs	r3, #140	; 0x8c
 800dd9e:	2248      	movs	r2, #72	; 0x48
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	189b      	adds	r3, r3, r2
 800dda4:	3e01      	subs	r6, #1
 800dda6:	19db      	adds	r3, r3, r7
 800dda8:	5cf1      	ldrb	r1, [r6, r3]
 800ddaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ddae:	f002 f973 	bl	8010098 <_sungetc_r>
 800ddb2:	e7b4      	b.n	800dd1e <__ssvfscanf_r+0xb36>
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	199b      	adds	r3, r3, r6
 800ddb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d102      	bne.n	800ddc6 <__ssvfscanf_r+0xbde>
 800ddc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d002      	beq.n	800ddcc <__ssvfscanf_r+0xbe4>
 800ddc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1d2      	bne.n	800dd78 <__ssvfscanf_r+0xb90>
 800ddd2:	3404      	adds	r4, #4
 800ddd4:	2d00      	cmp	r5, #0
 800ddd6:	d016      	beq.n	800de06 <__ssvfscanf_r+0xc1e>
 800ddd8:	69fa      	ldr	r2, [r7, #28]
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	623a      	str	r2, [r7, #32]
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	1ae6      	subs	r6, r4, r3
 800dde2:	10b3      	asrs	r3, r6, #2
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d3c7      	bcc.n	800dd78 <__ssvfscanf_r+0xb90>
 800dde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddea:	00d1      	lsls	r1, r2, #3
 800ddec:	f001 fcf6 	bl	800f7dc <realloc>
 800ddf0:	6338      	str	r0, [r7, #48]	; 0x30
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d101      	bne.n	800ddfa <__ssvfscanf_r+0xc12>
 800ddf6:	f7ff fbbf 	bl	800d578 <__ssvfscanf_r+0x390>
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	1984      	adds	r4, r0, r6
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	6028      	str	r0, [r5, #0]
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	e7b8      	b.n	800dd78 <__ssvfscanf_r+0xb90>
 800de06:	623d      	str	r5, [r7, #32]
 800de08:	e7b6      	b.n	800dd78 <__ssvfscanf_r+0xb90>
 800de0a:	46c0      	nop			; (mov r8, r8)
 800de0c:	0000fff6 	.word	0x0000fff6
 800de10:	08012dd9 	.word	0x08012dd9
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d01c      	beq.n	800de54 <__ssvfscanf_r+0xc6c>
 800de1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de1c:	49bf      	ldr	r1, [pc, #764]	; (800e11c <__ssvfscanf_r+0xf34>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	5c8a      	ldrb	r2, [r1, r2]
 800de24:	2108      	movs	r1, #8
 800de26:	420a      	tst	r2, r1
 800de28:	d000      	beq.n	800de2c <__ssvfscanf_r+0xc44>
 800de2a:	e4a1      	b.n	800d770 <__ssvfscanf_r+0x588>
 800de2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de30:	6852      	ldr	r2, [r2, #4]
 800de32:	3301      	adds	r3, #1
 800de34:	600b      	str	r3, [r1, #0]
 800de36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de38:	3a01      	subs	r2, #1
 800de3a:	3401      	adds	r4, #1
 800de3c:	604a      	str	r2, [r1, #4]
 800de3e:	429c      	cmp	r4, r3
 800de40:	d100      	bne.n	800de44 <__ssvfscanf_r+0xc5c>
 800de42:	e495      	b.n	800d770 <__ssvfscanf_r+0x588>
 800de44:	2a00      	cmp	r2, #0
 800de46:	dce8      	bgt.n	800de1a <__ssvfscanf_r+0xc32>
 800de48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de4a:	f002 f961 	bl	8010110 <__ssrefill_r>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d0e3      	beq.n	800de1a <__ssvfscanf_r+0xc32>
 800de52:	e48d      	b.n	800d770 <__ssvfscanf_r+0x588>
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	0032      	movs	r2, r6
 800de58:	cb10      	ldmia	r3!, {r4}
 800de5a:	61fb      	str	r3, [r7, #28]
 800de5c:	2380      	movs	r3, #128	; 0x80
 800de5e:	401a      	ands	r2, r3
 800de60:	421e      	tst	r6, r3
 800de62:	d039      	beq.n	800ded8 <__ssvfscanf_r+0xcf0>
 800de64:	2c00      	cmp	r4, #0
 800de66:	d101      	bne.n	800de6c <__ssvfscanf_r+0xc84>
 800de68:	f7ff fabb 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800de6c:	2020      	movs	r0, #32
 800de6e:	f7fb faed 	bl	800944c <malloc>
 800de72:	6338      	str	r0, [r7, #48]	; 0x30
 800de74:	2800      	cmp	r0, #0
 800de76:	d101      	bne.n	800de7c <__ssvfscanf_r+0xc94>
 800de78:	f7ff fa8c 	bl	800d394 <__ssvfscanf_r+0x1ac>
 800de7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de7e:	6020      	str	r0, [r4, #0]
 800de80:	88de      	ldrh	r6, [r3, #6]
 800de82:	889d      	ldrh	r5, [r3, #4]
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	42ae      	cmp	r6, r5
 800de88:	d310      	bcc.n	800deac <__ssvfscanf_r+0xcc4>
 800de8a:	4ba5      	ldr	r3, [pc, #660]	; (800e120 <__ssvfscanf_r+0xf38>)
 800de8c:	429d      	cmp	r5, r3
 800de8e:	d901      	bls.n	800de94 <__ssvfscanf_r+0xcac>
 800de90:	f7ff fb7b 	bl	800d58a <__ssvfscanf_r+0x3a2>
 800de94:	3508      	adds	r5, #8
 800de96:	b2ad      	uxth	r5, r5
 800de98:	00a9      	lsls	r1, r5, #2
 800de9a:	f001 fc9f 	bl	800f7dc <realloc>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d101      	bne.n	800dea6 <__ssvfscanf_r+0xcbe>
 800dea2:	f7ff fb72 	bl	800d58a <__ssvfscanf_r+0x3a2>
 800dea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea8:	6018      	str	r0, [r3, #0]
 800deaa:	809d      	strh	r5, [r3, #4]
 800deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deae:	1c72      	adds	r2, r6, #1
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	00b6      	lsls	r6, r6, #2
 800deb4:	50f4      	str	r4, [r6, r3]
 800deb6:	2320      	movs	r3, #32
 800deb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800deba:	0026      	movs	r6, r4
 800debc:	80ca      	strh	r2, [r1, #6]
 800debe:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dec0:	633b      	str	r3, [r7, #48]	; 0x30
 800dec2:	0025      	movs	r5, r4
 800dec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec6:	4995      	ldr	r1, [pc, #596]	; (800e11c <__ssvfscanf_r+0xf34>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	781a      	ldrb	r2, [r3, #0]
 800decc:	5c8a      	ldrb	r2, [r1, r2]
 800dece:	2108      	movs	r1, #8
 800ded0:	420a      	tst	r2, r1
 800ded2:	d004      	beq.n	800dede <__ssvfscanf_r+0xcf6>
 800ded4:	623c      	str	r4, [r7, #32]
 800ded6:	e031      	b.n	800df3c <__ssvfscanf_r+0xd54>
 800ded8:	0016      	movs	r6, r2
 800deda:	633a      	str	r2, [r7, #48]	; 0x30
 800dedc:	e7f1      	b.n	800dec2 <__ssvfscanf_r+0xcda>
 800dede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dee0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dee2:	6852      	ldr	r2, [r2, #4]
 800dee4:	3a01      	subs	r2, #1
 800dee6:	604a      	str	r2, [r1, #4]
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	600a      	str	r2, [r1, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	1c62      	adds	r2, r4, #1
 800def0:	623a      	str	r2, [r7, #32]
 800def2:	7023      	strb	r3, [r4, #0]
 800def4:	2e00      	cmp	r6, #0
 800def6:	d010      	beq.n	800df1a <__ssvfscanf_r+0xd32>
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	1b54      	subs	r4, r2, r5
 800defc:	429c      	cmp	r4, r3
 800defe:	d30c      	bcc.n	800df1a <__ssvfscanf_r+0xd32>
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	0028      	movs	r0, r5
 800df04:	0019      	movs	r1, r3
 800df06:	633b      	str	r3, [r7, #48]	; 0x30
 800df08:	f001 fc68 	bl	800f7dc <realloc>
 800df0c:	1e05      	subs	r5, r0, #0
 800df0e:	d101      	bne.n	800df14 <__ssvfscanf_r+0xd2c>
 800df10:	f7ff fa40 	bl	800d394 <__ssvfscanf_r+0x1ac>
 800df14:	1903      	adds	r3, r0, r4
 800df16:	623b      	str	r3, [r7, #32]
 800df18:	6030      	str	r0, [r6, #0]
 800df1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1c:	3b01      	subs	r3, #1
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00b      	beq.n	800df3c <__ssvfscanf_r+0xd54>
 800df24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dd01      	ble.n	800df30 <__ssvfscanf_r+0xd48>
 800df2c:	6a3c      	ldr	r4, [r7, #32]
 800df2e:	e7c9      	b.n	800dec4 <__ssvfscanf_r+0xcdc>
 800df30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df34:	f002 f8ec 	bl	8010110 <__ssrefill_r>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d0f7      	beq.n	800df2c <__ssvfscanf_r+0xd44>
 800df3c:	2300      	movs	r3, #0
 800df3e:	6a3a      	ldr	r2, [r7, #32]
 800df40:	7013      	strb	r3, [r2, #0]
 800df42:	1b55      	subs	r5, r2, r5
 800df44:	2e00      	cmp	r6, #0
 800df46:	d009      	beq.n	800df5c <__ssvfscanf_r+0xd74>
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	1c69      	adds	r1, r5, #1
 800df4c:	428b      	cmp	r3, r1
 800df4e:	d905      	bls.n	800df5c <__ssvfscanf_r+0xd74>
 800df50:	6830      	ldr	r0, [r6, #0]
 800df52:	f001 fc43 	bl	800f7dc <realloc>
 800df56:	2800      	cmp	r0, #0
 800df58:	d000      	beq.n	800df5c <__ssvfscanf_r+0xd74>
 800df5a:	6030      	str	r0, [r6, #0]
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	195b      	adds	r3, r3, r5
 800df60:	63bb      	str	r3, [r7, #56]	; 0x38
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	3301      	adds	r3, #1
 800df66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df68:	e63c      	b.n	800dbe4 <__ssvfscanf_r+0x9fc>
 800df6a:	22ae      	movs	r2, #174	; 0xae
 800df6c:	2100      	movs	r1, #0
 800df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df70:	0052      	lsls	r2, r2, #1
 800df72:	3b01      	subs	r3, #1
 800df74:	6239      	str	r1, [r7, #32]
 800df76:	4293      	cmp	r3, r2
 800df78:	d906      	bls.n	800df88 <__ssvfscanf_r+0xda0>
 800df7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df7c:	3b5e      	subs	r3, #94	; 0x5e
 800df7e:	3bff      	subs	r3, #255	; 0xff
 800df80:	623b      	str	r3, [r7, #32]
 800df82:	235e      	movs	r3, #94	; 0x5e
 800df84:	33ff      	adds	r3, #255	; 0xff
 800df86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df88:	24d8      	movs	r4, #216	; 0xd8
 800df8a:	2300      	movs	r3, #0
 800df8c:	2248      	movs	r2, #72	; 0x48
 800df8e:	0124      	lsls	r4, r4, #4
 800df90:	4334      	orrs	r4, r6
 800df92:	2680      	movs	r6, #128	; 0x80
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	3319      	adds	r3, #25
 800df98:	33ff      	adds	r3, #255	; 0xff
 800df9a:	189b      	adds	r3, r3, r2
 800df9c:	19dd      	adds	r5, r3, r7
 800df9e:	00b6      	lsls	r6, r6, #2
 800dfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	7813      	ldrb	r3, [r2, #0]
 800dfa6:	2b39      	cmp	r3, #57	; 0x39
 800dfa8:	d80f      	bhi.n	800dfca <__ssvfscanf_r+0xde2>
 800dfaa:	2b2a      	cmp	r3, #42	; 0x2a
 800dfac:	d91b      	bls.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800dfae:	0018      	movs	r0, r3
 800dfb0:	382b      	subs	r0, #43	; 0x2b
 800dfb2:	280e      	cmp	r0, #14
 800dfb4:	d817      	bhi.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800dfb6:	f7f2 f8ad 	bl	8000114 <__gnu_thumb1_case_uqi>
 800dfba:	168f      	.short	0x168f
 800dfbc:	5416168f 	.word	0x5416168f
 800dfc0:	80808080 	.word	0x80808080
 800dfc4:	87808080 	.word	0x87808080
 800dfc8:	87          	.byte	0x87
 800dfc9:	00          	.byte	0x00
 800dfca:	2b66      	cmp	r3, #102	; 0x66
 800dfcc:	d83a      	bhi.n	800e044 <__ssvfscanf_r+0xe5c>
 800dfce:	2b60      	cmp	r3, #96	; 0x60
 800dfd0:	d803      	bhi.n	800dfda <__ssvfscanf_r+0xdf2>
 800dfd2:	2b46      	cmp	r3, #70	; 0x46
 800dfd4:	d805      	bhi.n	800dfe2 <__ssvfscanf_r+0xdfa>
 800dfd6:	2b40      	cmp	r3, #64	; 0x40
 800dfd8:	d905      	bls.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800dfda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfdc:	290a      	cmp	r1, #10
 800dfde:	dc71      	bgt.n	800e0c4 <__ssvfscanf_r+0xedc>
 800dfe0:	e001      	b.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800dfe2:	2b58      	cmp	r3, #88	; 0x58
 800dfe4:	d030      	beq.n	800e048 <__ssvfscanf_r+0xe60>
 800dfe6:	05e3      	lsls	r3, r4, #23
 800dfe8:	d515      	bpl.n	800e016 <__ssvfscanf_r+0xe2e>
 800dfea:	238c      	movs	r3, #140	; 0x8c
 800dfec:	2248      	movs	r2, #72	; 0x48
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	189b      	adds	r3, r3, r2
 800dff2:	19db      	adds	r3, r3, r7
 800dff4:	429d      	cmp	r5, r3
 800dff6:	d905      	bls.n	800e004 <__ssvfscanf_r+0xe1c>
 800dff8:	3d01      	subs	r5, #1
 800dffa:	7829      	ldrb	r1, [r5, #0]
 800dffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dffe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e000:	f002 f84a 	bl	8010098 <_sungetc_r>
 800e004:	238c      	movs	r3, #140	; 0x8c
 800e006:	2248      	movs	r2, #72	; 0x48
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	189b      	adds	r3, r3, r2
 800e00c:	19db      	adds	r3, r3, r7
 800e00e:	429d      	cmp	r5, r3
 800e010:	d101      	bne.n	800e016 <__ssvfscanf_r+0xe2e>
 800e012:	f7ff f9e6 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800e016:	2310      	movs	r3, #16
 800e018:	0022      	movs	r2, r4
 800e01a:	401a      	ands	r2, r3
 800e01c:	421c      	tst	r4, r3
 800e01e:	d171      	bne.n	800e104 <__ssvfscanf_r+0xf1c>
 800e020:	218c      	movs	r1, #140	; 0x8c
 800e022:	2048      	movs	r0, #72	; 0x48
 800e024:	0049      	lsls	r1, r1, #1
 800e026:	1809      	adds	r1, r1, r0
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	697e      	ldr	r6, [r7, #20]
 800e02c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e02e:	19c9      	adds	r1, r1, r7
 800e030:	702a      	strb	r2, [r5, #0]
 800e032:	47b0      	blx	r6
 800e034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e036:	1d1e      	adds	r6, r3, #4
 800e038:	06a3      	lsls	r3, r4, #26
 800e03a:	d559      	bpl.n	800e0f0 <__ssvfscanf_r+0xf08>
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6018      	str	r0, [r3, #0]
 800e042:	e05b      	b.n	800e0fc <__ssvfscanf_r+0xf14>
 800e044:	2b78      	cmp	r3, #120	; 0x78
 800e046:	d1ce      	bne.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e048:	21c0      	movs	r1, #192	; 0xc0
 800e04a:	00c9      	lsls	r1, r1, #3
 800e04c:	4021      	ands	r1, r4
 800e04e:	42b1      	cmp	r1, r6
 800e050:	d1c9      	bne.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e052:	4934      	ldr	r1, [pc, #208]	; (800e124 <__ssvfscanf_r+0xf3c>)
 800e054:	4021      	ands	r1, r4
 800e056:	24a0      	movs	r4, #160	; 0xa0
 800e058:	00e4      	lsls	r4, r4, #3
 800e05a:	430c      	orrs	r4, r1
 800e05c:	2110      	movs	r1, #16
 800e05e:	6279      	str	r1, [r7, #36]	; 0x24
 800e060:	e00b      	b.n	800e07a <__ssvfscanf_r+0xe92>
 800e062:	0521      	lsls	r1, r4, #20
 800e064:	d509      	bpl.n	800e07a <__ssvfscanf_r+0xe92>
 800e066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e068:	2900      	cmp	r1, #0
 800e06a:	d102      	bne.n	800e072 <__ssvfscanf_r+0xe8a>
 800e06c:	3108      	adds	r1, #8
 800e06e:	4334      	orrs	r4, r6
 800e070:	6279      	str	r1, [r7, #36]	; 0x24
 800e072:	0561      	lsls	r1, r4, #21
 800e074:	d504      	bpl.n	800e080 <__ssvfscanf_r+0xe98>
 800e076:	492c      	ldr	r1, [pc, #176]	; (800e128 <__ssvfscanf_r+0xf40>)
 800e078:	400c      	ands	r4, r1
 800e07a:	702b      	strb	r3, [r5, #0]
 800e07c:	3501      	adds	r5, #1
 800e07e:	e00c      	b.n	800e09a <__ssvfscanf_r+0xeb2>
 800e080:	4b2a      	ldr	r3, [pc, #168]	; (800e12c <__ssvfscanf_r+0xf44>)
 800e082:	401c      	ands	r4, r3
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <__ssvfscanf_r+0xeac>
 800e08a:	3b01      	subs	r3, #1
 800e08c:	623b      	str	r3, [r7, #32]
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	3301      	adds	r3, #1
 800e092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	3301      	adds	r3, #1
 800e098:	61fb      	str	r3, [r7, #28]
 800e09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	604b      	str	r3, [r1, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dd1c      	ble.n	800e0e2 <__ssvfscanf_r+0xefa>
 800e0a8:	3201      	adds	r2, #1
 800e0aa:	600a      	str	r2, [r1, #0]
 800e0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d000      	beq.n	800e0b8 <__ssvfscanf_r+0xed0>
 800e0b6:	e773      	b.n	800dfa0 <__ssvfscanf_r+0xdb8>
 800e0b8:	e795      	b.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e0ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0bc:	491c      	ldr	r1, [pc, #112]	; (800e130 <__ssvfscanf_r+0xf48>)
 800e0be:	0040      	lsls	r0, r0, #1
 800e0c0:	5e41      	ldrsh	r1, [r0, r1]
 800e0c2:	6279      	str	r1, [r7, #36]	; 0x24
 800e0c4:	491b      	ldr	r1, [pc, #108]	; (800e134 <__ssvfscanf_r+0xf4c>)
 800e0c6:	e7d7      	b.n	800e078 <__ssvfscanf_r+0xe90>
 800e0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0ca:	4919      	ldr	r1, [pc, #100]	; (800e130 <__ssvfscanf_r+0xf48>)
 800e0cc:	0040      	lsls	r0, r0, #1
 800e0ce:	5e41      	ldrsh	r1, [r0, r1]
 800e0d0:	6279      	str	r1, [r7, #36]	; 0x24
 800e0d2:	2908      	cmp	r1, #8
 800e0d4:	dcf6      	bgt.n	800e0c4 <__ssvfscanf_r+0xedc>
 800e0d6:	e786      	b.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e0d8:	2180      	movs	r1, #128	; 0x80
 800e0da:	420c      	tst	r4, r1
 800e0dc:	d083      	beq.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e0de:	438c      	bics	r4, r1
 800e0e0:	e7cb      	b.n	800e07a <__ssvfscanf_r+0xe92>
 800e0e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e0e6:	f002 f813 	bl	8010110 <__ssrefill_r>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0de      	beq.n	800e0ac <__ssvfscanf_r+0xec4>
 800e0ee:	e77a      	b.n	800dfe6 <__ssvfscanf_r+0xdfe>
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	421c      	tst	r4, r3
 800e0f4:	d020      	beq.n	800e138 <__ssvfscanf_r+0xf50>
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	7018      	strb	r0, [r3, #0]
 800e0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fe:	633e      	str	r6, [r7, #48]	; 0x30
 800e100:	3301      	adds	r3, #1
 800e102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e104:	238c      	movs	r3, #140	; 0x8c
 800e106:	2248      	movs	r2, #72	; 0x48
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	189b      	adds	r3, r3, r2
 800e10c:	19db      	adds	r3, r3, r7
 800e10e:	1aed      	subs	r5, r5, r3
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	18ed      	adds	r5, r5, r3
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	195b      	adds	r3, r3, r5
 800e118:	f7ff f92d 	bl	800d376 <__ssvfscanf_r+0x18e>
 800e11c:	08012dd9 	.word	0x08012dd9
 800e120:	0000fff6 	.word	0x0000fff6
 800e124:	fffffdff 	.word	0xfffffdff
 800e128:	fffffa7f 	.word	0xfffffa7f
 800e12c:	fffffc7f 	.word	0xfffffc7f
 800e130:	08013106 	.word	0x08013106
 800e134:	fffff47f 	.word	0xfffff47f
 800e138:	0763      	lsls	r3, r4, #29
 800e13a:	d503      	bpl.n	800e144 <__ssvfscanf_r+0xf5c>
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	8018      	strh	r0, [r3, #0]
 800e142:	e7db      	b.n	800e0fc <__ssvfscanf_r+0xf14>
 800e144:	2301      	movs	r3, #1
 800e146:	0022      	movs	r2, r4
 800e148:	401a      	ands	r2, r3
 800e14a:	421c      	tst	r4, r3
 800e14c:	d000      	beq.n	800e150 <__ssvfscanf_r+0xf68>
 800e14e:	e775      	b.n	800e03c <__ssvfscanf_r+0xe54>
 800e150:	07a4      	lsls	r4, r4, #30
 800e152:	d400      	bmi.n	800e156 <__ssvfscanf_r+0xf6e>
 800e154:	e772      	b.n	800e03c <__ssvfscanf_r+0xe54>
 800e156:	4ba8      	ldr	r3, [pc, #672]	; (800e3f8 <__ssvfscanf_r+0x1210>)
 800e158:	6979      	ldr	r1, [r7, #20]
 800e15a:	4299      	cmp	r1, r3
 800e15c:	d10c      	bne.n	800e178 <__ssvfscanf_r+0xf90>
 800e15e:	218c      	movs	r1, #140	; 0x8c
 800e160:	2048      	movs	r0, #72	; 0x48
 800e162:	0049      	lsls	r1, r1, #1
 800e164:	1809      	adds	r1, r1, r0
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e16a:	19c9      	adds	r1, r1, r7
 800e16c:	f001 fecc 	bl	800ff08 <_strtoull_r>
 800e170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	c303      	stmia	r3!, {r0, r1}
 800e176:	e7c1      	b.n	800e0fc <__ssvfscanf_r+0xf14>
 800e178:	218c      	movs	r1, #140	; 0x8c
 800e17a:	2048      	movs	r0, #72	; 0x48
 800e17c:	0049      	lsls	r1, r1, #1
 800e17e:	1809      	adds	r1, r1, r0
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e184:	19c9      	adds	r1, r1, r7
 800e186:	f001 fe0d 	bl	800fda4 <_strtoll_r>
 800e18a:	e7f1      	b.n	800e170 <__ssvfscanf_r+0xf88>
 800e18c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e18e:	f000 fb9f 	bl	800e8d0 <_localeconv_r>
 800e192:	22ae      	movs	r2, #174	; 0xae
 800e194:	2100      	movs	r1, #0
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	0052      	lsls	r2, r2, #1
 800e19a:	603b      	str	r3, [r7, #0]
 800e19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19e:	60f9      	str	r1, [r7, #12]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d906      	bls.n	800e1b4 <__ssvfscanf_r+0xfcc>
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a8:	3b5e      	subs	r3, #94	; 0x5e
 800e1aa:	3bff      	subs	r3, #255	; 0xff
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	235e      	movs	r3, #94	; 0x5e
 800e1b0:	33ff      	adds	r3, #255	; 0xff
 800e1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1b4:	23f0      	movs	r3, #240	; 0xf0
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	431e      	orrs	r6, r3
 800e1ba:	238c      	movs	r3, #140	; 0x8c
 800e1bc:	2248      	movs	r2, #72	; 0x48
 800e1be:	2400      	movs	r4, #0
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	189b      	adds	r3, r3, r2
 800e1c4:	623c      	str	r4, [r7, #32]
 800e1c6:	607c      	str	r4, [r7, #4]
 800e1c8:	60bc      	str	r4, [r7, #8]
 800e1ca:	61fc      	str	r4, [r7, #28]
 800e1cc:	613c      	str	r4, [r7, #16]
 800e1ce:	19dd      	adds	r5, r3, r7
 800e1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	781a      	ldrb	r2, [r3, #0]
 800e1d6:	0010      	movs	r0, r2
 800e1d8:	382b      	subs	r0, #43	; 0x2b
 800e1da:	284e      	cmp	r0, #78	; 0x4e
 800e1dc:	d900      	bls.n	800e1e0 <__ssvfscanf_r+0xff8>
 800e1de:	e133      	b.n	800e448 <__ssvfscanf_r+0x1260>
 800e1e0:	f7f1 ffa2 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e1e4:	0132009b 	.word	0x0132009b
 800e1e8:	0132009b 	.word	0x0132009b
 800e1ec:	004f0132 	.word	0x004f0132
 800e1f0:	00720072 	.word	0x00720072
 800e1f4:	00720072 	.word	0x00720072
 800e1f8:	00720072 	.word	0x00720072
 800e1fc:	00720072 	.word	0x00720072
 800e200:	01320072 	.word	0x01320072
 800e204:	01320132 	.word	0x01320132
 800e208:	01320132 	.word	0x01320132
 800e20c:	01320132 	.word	0x01320132
 800e210:	007b00bc 	.word	0x007b00bc
 800e214:	007b007b 	.word	0x007b007b
 800e218:	00f7012f 	.word	0x00f7012f
 800e21c:	01320132 	.word	0x01320132
 800e220:	013200e3 	.word	0x013200e3
 800e224:	01320132 	.word	0x01320132
 800e228:	00a00132 	.word	0x00a00132
 800e22c:	01120132 	.word	0x01120132
 800e230:	01320132 	.word	0x01320132
 800e234:	01010132 	.word	0x01010132
 800e238:	01320132 	.word	0x01320132
 800e23c:	00820132 	.word	0x00820132
 800e240:	01320105 	.word	0x01320105
 800e244:	01320132 	.word	0x01320132
 800e248:	01320132 	.word	0x01320132
 800e24c:	01320132 	.word	0x01320132
 800e250:	007b00bc 	.word	0x007b00bc
 800e254:	007b007b 	.word	0x007b007b
 800e258:	00f7012f 	.word	0x00f7012f
 800e25c:	01320132 	.word	0x01320132
 800e260:	013200e3 	.word	0x013200e3
 800e264:	01320132 	.word	0x01320132
 800e268:	00a00132 	.word	0x00a00132
 800e26c:	01120132 	.word	0x01120132
 800e270:	01320132 	.word	0x01320132
 800e274:	01010132 	.word	0x01010132
 800e278:	01320132 	.word	0x01320132
 800e27c:	00820132 	.word	0x00820132
 800e280:	0105      	.short	0x0105
 800e282:	05f1      	lsls	r1, r6, #23
 800e284:	d520      	bpl.n	800e2c8 <__ssvfscanf_r+0x10e0>
 800e286:	2280      	movs	r2, #128	; 0x80
 800e288:	4396      	bics	r6, r2
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	3201      	adds	r2, #1
 800e28e:	61fa      	str	r2, [r7, #28]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	2a00      	cmp	r2, #0
 800e294:	d004      	beq.n	800e2a0 <__ssvfscanf_r+0x10b8>
 800e296:	3a01      	subs	r2, #1
 800e298:	60fa      	str	r2, [r7, #12]
 800e29a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e29c:	3201      	adds	r2, #1
 800e29e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e2a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2a4:	3a01      	subs	r2, #1
 800e2a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e2a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	63ba      	str	r2, [r7, #56]	; 0x38
 800e2ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2b0:	6852      	ldr	r2, [r2, #4]
 800e2b2:	3a01      	subs	r2, #1
 800e2b4:	604a      	str	r2, [r1, #4]
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	dc00      	bgt.n	800e2bc <__ssvfscanf_r+0x10d4>
 800e2ba:	e0d6      	b.n	800e46a <__ssvfscanf_r+0x1282>
 800e2bc:	3301      	adds	r3, #1
 800e2be:	600b      	str	r3, [r1, #0]
 800e2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d184      	bne.n	800e1d0 <__ssvfscanf_r+0xfe8>
 800e2c6:	e057      	b.n	800e378 <__ssvfscanf_r+0x1190>
 800e2c8:	6a39      	ldr	r1, [r7, #32]
 800e2ca:	1909      	adds	r1, r1, r4
 800e2cc:	2900      	cmp	r1, #0
 800e2ce:	d153      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e2d0:	494a      	ldr	r1, [pc, #296]	; (800e3fc <__ssvfscanf_r+0x1214>)
 800e2d2:	400e      	ands	r6, r1
 800e2d4:	702a      	strb	r2, [r5, #0]
 800e2d6:	3501      	adds	r5, #1
 800e2d8:	e7e2      	b.n	800e2a0 <__ssvfscanf_r+0x10b8>
 800e2da:	0531      	lsls	r1, r6, #20
 800e2dc:	d54c      	bpl.n	800e378 <__ssvfscanf_r+0x1190>
 800e2de:	6a39      	ldr	r1, [r7, #32]
 800e2e0:	1909      	adds	r1, r1, r4
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	d040      	beq.n	800e368 <__ssvfscanf_r+0x1180>
 800e2e6:	e047      	b.n	800e378 <__ssvfscanf_r+0x1190>
 800e2e8:	2198      	movs	r1, #152	; 0x98
 800e2ea:	2080      	movs	r0, #128	; 0x80
 800e2ec:	0109      	lsls	r1, r1, #4
 800e2ee:	4031      	ands	r1, r6
 800e2f0:	0040      	lsls	r0, r0, #1
 800e2f2:	4281      	cmp	r1, r0
 800e2f4:	d140      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e2f6:	69f9      	ldr	r1, [r7, #28]
 800e2f8:	2901      	cmp	r1, #1
 800e2fa:	d13d      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e2fc:	2080      	movs	r0, #128	; 0x80
 800e2fe:	4940      	ldr	r1, [pc, #256]	; (800e400 <__ssvfscanf_r+0x1218>)
 800e300:	0100      	lsls	r0, r0, #4
 800e302:	400e      	ands	r6, r1
 800e304:	3132      	adds	r1, #50	; 0x32
 800e306:	31ff      	adds	r1, #255	; 0xff
 800e308:	7029      	strb	r1, [r5, #0]
 800e30a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e30c:	4306      	orrs	r6, r0
 800e30e:	3901      	subs	r1, #1
 800e310:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e312:	3501      	adds	r5, #1
 800e314:	2100      	movs	r1, #0
 800e316:	61f9      	str	r1, [r7, #28]
 800e318:	e7dc      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e31a:	2180      	movs	r1, #128	; 0x80
 800e31c:	420e      	tst	r6, r1
 800e31e:	d02b      	beq.n	800e378 <__ssvfscanf_r+0x1190>
 800e320:	438e      	bics	r6, r1
 800e322:	e7d7      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e324:	6a39      	ldr	r1, [r7, #32]
 800e326:	2900      	cmp	r1, #0
 800e328:	d10d      	bne.n	800e346 <__ssvfscanf_r+0x115e>
 800e32a:	69f9      	ldr	r1, [r7, #28]
 800e32c:	2900      	cmp	r1, #0
 800e32e:	d10e      	bne.n	800e34e <__ssvfscanf_r+0x1166>
 800e330:	21e0      	movs	r1, #224	; 0xe0
 800e332:	0030      	movs	r0, r6
 800e334:	00c9      	lsls	r1, r1, #3
 800e336:	4008      	ands	r0, r1
 800e338:	4288      	cmp	r0, r1
 800e33a:	d108      	bne.n	800e34e <__ssvfscanf_r+0x1166>
 800e33c:	4931      	ldr	r1, [pc, #196]	; (800e404 <__ssvfscanf_r+0x121c>)
 800e33e:	400e      	ands	r6, r1
 800e340:	2101      	movs	r1, #1
 800e342:	6239      	str	r1, [r7, #32]
 800e344:	e7c6      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e346:	6a39      	ldr	r1, [r7, #32]
 800e348:	2902      	cmp	r1, #2
 800e34a:	d100      	bne.n	800e34e <__ssvfscanf_r+0x1166>
 800e34c:	e089      	b.n	800e462 <__ssvfscanf_r+0x127a>
 800e34e:	2c01      	cmp	r4, #1
 800e350:	d001      	beq.n	800e356 <__ssvfscanf_r+0x116e>
 800e352:	2c04      	cmp	r4, #4
 800e354:	d110      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e356:	3401      	adds	r4, #1
 800e358:	b2e4      	uxtb	r4, r4
 800e35a:	e7bb      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e35c:	0531      	lsls	r1, r6, #20
 800e35e:	d508      	bpl.n	800e372 <__ssvfscanf_r+0x118a>
 800e360:	6a39      	ldr	r1, [r7, #32]
 800e362:	1909      	adds	r1, r1, r4
 800e364:	2900      	cmp	r1, #0
 800e366:	d104      	bne.n	800e372 <__ssvfscanf_r+0x118a>
 800e368:	4824      	ldr	r0, [pc, #144]	; (800e3fc <__ssvfscanf_r+0x1214>)
 800e36a:	000c      	movs	r4, r1
 800e36c:	4006      	ands	r6, r0
 800e36e:	6239      	str	r1, [r7, #32]
 800e370:	e7b0      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e372:	6a39      	ldr	r1, [r7, #32]
 800e374:	2901      	cmp	r1, #1
 800e376:	d076      	beq.n	800e466 <__ssvfscanf_r+0x127e>
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <__ssvfscanf_r+0x119a>
 800e37e:	4b20      	ldr	r3, [pc, #128]	; (800e400 <__ssvfscanf_r+0x1218>)
 800e380:	401e      	ands	r6, r3
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	3b01      	subs	r3, #1
 800e386:	2b01      	cmp	r3, #1
 800e388:	d877      	bhi.n	800e47a <__ssvfscanf_r+0x1292>
 800e38a:	238c      	movs	r3, #140	; 0x8c
 800e38c:	2248      	movs	r2, #72	; 0x48
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	189b      	adds	r3, r3, r2
 800e392:	19db      	adds	r3, r3, r7
 800e394:	429d      	cmp	r5, r3
 800e396:	d801      	bhi.n	800e39c <__ssvfscanf_r+0x11b4>
 800e398:	f7ff f823 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800e39c:	3d01      	subs	r5, #1
 800e39e:	7829      	ldrb	r1, [r5, #0]
 800e3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3a4:	f001 fe78 	bl	8010098 <_sungetc_r>
 800e3a8:	e7ef      	b.n	800e38a <__ssvfscanf_r+0x11a2>
 800e3aa:	2c00      	cmp	r4, #0
 800e3ac:	d10c      	bne.n	800e3c8 <__ssvfscanf_r+0x11e0>
 800e3ae:	69f9      	ldr	r1, [r7, #28]
 800e3b0:	2900      	cmp	r1, #0
 800e3b2:	d1e4      	bne.n	800e37e <__ssvfscanf_r+0x1196>
 800e3b4:	21e0      	movs	r1, #224	; 0xe0
 800e3b6:	0030      	movs	r0, r6
 800e3b8:	00c9      	lsls	r1, r1, #3
 800e3ba:	4008      	ands	r0, r1
 800e3bc:	4288      	cmp	r0, r1
 800e3be:	d1e0      	bne.n	800e382 <__ssvfscanf_r+0x119a>
 800e3c0:	4910      	ldr	r1, [pc, #64]	; (800e404 <__ssvfscanf_r+0x121c>)
 800e3c2:	3401      	adds	r4, #1
 800e3c4:	400e      	ands	r6, r1
 800e3c6:	e785      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e3c8:	20fd      	movs	r0, #253	; 0xfd
 800e3ca:	1ee1      	subs	r1, r4, #3
 800e3cc:	4201      	tst	r1, r0
 800e3ce:	d1d3      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e3d0:	e7c1      	b.n	800e356 <__ssvfscanf_r+0x116e>
 800e3d2:	0531      	lsls	r1, r6, #20
 800e3d4:	d503      	bpl.n	800e3de <__ssvfscanf_r+0x11f6>
 800e3d6:	6a39      	ldr	r1, [r7, #32]
 800e3d8:	1909      	adds	r1, r1, r4
 800e3da:	2900      	cmp	r1, #0
 800e3dc:	d0c4      	beq.n	800e368 <__ssvfscanf_r+0x1180>
 800e3de:	2c02      	cmp	r4, #2
 800e3e0:	d1ca      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e3e2:	2403      	movs	r4, #3
 800e3e4:	e776      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e3e6:	2c06      	cmp	r4, #6
 800e3e8:	d1c6      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e3ea:	2407      	movs	r4, #7
 800e3ec:	e772      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e3ee:	2c07      	cmp	r4, #7
 800e3f0:	d1c2      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e3f2:	2408      	movs	r4, #8
 800e3f4:	e76e      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e3f6:	46c0      	nop			; (mov r8, r8)
 800e3f8:	0800fc41 	.word	0x0800fc41
 800e3fc:	fffffe7f 	.word	0xfffffe7f
 800e400:	fffffeff 	.word	0xfffffeff
 800e404:	fffff87f 	.word	0xfffff87f
 800e408:	0531      	lsls	r1, r6, #20
 800e40a:	d5b5      	bpl.n	800e378 <__ssvfscanf_r+0x1190>
 800e40c:	21a0      	movs	r1, #160	; 0xa0
 800e40e:	2080      	movs	r0, #128	; 0x80
 800e410:	00c9      	lsls	r1, r1, #3
 800e412:	00c0      	lsls	r0, r0, #3
 800e414:	4031      	ands	r1, r6
 800e416:	4281      	cmp	r1, r0
 800e418:	d004      	beq.n	800e424 <__ssvfscanf_r+0x123c>
 800e41a:	4206      	tst	r6, r0
 800e41c:	d0ac      	beq.n	800e378 <__ssvfscanf_r+0x1190>
 800e41e:	69f9      	ldr	r1, [r7, #28]
 800e420:	2900      	cmp	r1, #0
 800e422:	d0ae      	beq.n	800e382 <__ssvfscanf_r+0x119a>
 800e424:	2180      	movs	r1, #128	; 0x80
 800e426:	0089      	lsls	r1, r1, #2
 800e428:	420e      	tst	r6, r1
 800e42a:	d104      	bne.n	800e436 <__ssvfscanf_r+0x124e>
 800e42c:	69f9      	ldr	r1, [r7, #28]
 800e42e:	6938      	ldr	r0, [r7, #16]
 800e430:	607d      	str	r5, [r7, #4]
 800e432:	1a09      	subs	r1, r1, r0
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	20c0      	movs	r0, #192	; 0xc0
 800e438:	4973      	ldr	r1, [pc, #460]	; (800e608 <__ssvfscanf_r+0x1420>)
 800e43a:	0040      	lsls	r0, r0, #1
 800e43c:	400e      	ands	r6, r1
 800e43e:	4306      	orrs	r6, r0
 800e440:	e768      	b.n	800e314 <__ssvfscanf_r+0x112c>
 800e442:	0531      	lsls	r1, r6, #20
 800e444:	d5e2      	bpl.n	800e40c <__ssvfscanf_r+0x1224>
 800e446:	e74a      	b.n	800e2de <__ssvfscanf_r+0x10f6>
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	7809      	ldrb	r1, [r1, #0]
 800e44c:	4291      	cmp	r1, r2
 800e44e:	d193      	bne.n	800e378 <__ssvfscanf_r+0x1190>
 800e450:	2180      	movs	r1, #128	; 0x80
 800e452:	0089      	lsls	r1, r1, #2
 800e454:	420e      	tst	r6, r1
 800e456:	d08f      	beq.n	800e378 <__ssvfscanf_r+0x1190>
 800e458:	496c      	ldr	r1, [pc, #432]	; (800e60c <__ssvfscanf_r+0x1424>)
 800e45a:	400e      	ands	r6, r1
 800e45c:	69f9      	ldr	r1, [r7, #28]
 800e45e:	6139      	str	r1, [r7, #16]
 800e460:	e738      	b.n	800e2d4 <__ssvfscanf_r+0x10ec>
 800e462:	2103      	movs	r1, #3
 800e464:	e76d      	b.n	800e342 <__ssvfscanf_r+0x115a>
 800e466:	2102      	movs	r1, #2
 800e468:	e76b      	b.n	800e342 <__ssvfscanf_r+0x115a>
 800e46a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e46c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e46e:	f001 fe4f 	bl	8010110 <__ssrefill_r>
 800e472:	2800      	cmp	r0, #0
 800e474:	d100      	bne.n	800e478 <__ssvfscanf_r+0x1290>
 800e476:	e723      	b.n	800e2c0 <__ssvfscanf_r+0x10d8>
 800e478:	e77e      	b.n	800e378 <__ssvfscanf_r+0x1190>
 800e47a:	1e63      	subs	r3, r4, #1
 800e47c:	2b06      	cmp	r3, #6
 800e47e:	d825      	bhi.n	800e4cc <__ssvfscanf_r+0x12e4>
 800e480:	2c02      	cmp	r4, #2
 800e482:	d837      	bhi.n	800e4f4 <__ssvfscanf_r+0x130c>
 800e484:	238c      	movs	r3, #140	; 0x8c
 800e486:	2248      	movs	r2, #72	; 0x48
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	189b      	adds	r3, r3, r2
 800e48c:	19db      	adds	r3, r3, r7
 800e48e:	429d      	cmp	r5, r3
 800e490:	d801      	bhi.n	800e496 <__ssvfscanf_r+0x12ae>
 800e492:	f7fe ffa6 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800e496:	3d01      	subs	r5, #1
 800e498:	7829      	ldrb	r1, [r5, #0]
 800e49a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e49c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e49e:	f001 fdfb 	bl	8010098 <_sungetc_r>
 800e4a2:	e7ef      	b.n	800e484 <__ssvfscanf_r+0x129c>
 800e4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	7819      	ldrb	r1, [r3, #0]
 800e4ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4b0:	f001 fdf2 	bl	8010098 <_sungetc_r>
 800e4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b6:	6a3a      	ldr	r2, [r7, #32]
 800e4b8:	189b      	adds	r3, r3, r2
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d8f1      	bhi.n	800e4a4 <__ssvfscanf_r+0x12bc>
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	3c03      	subs	r4, #3
 800e4c4:	b2e4      	uxtb	r4, r4
 800e4c6:	1b1b      	subs	r3, r3, r4
 800e4c8:	1b2d      	subs	r5, r5, r4
 800e4ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4cc:	05f3      	lsls	r3, r6, #23
 800e4ce:	d52f      	bpl.n	800e530 <__ssvfscanf_r+0x1348>
 800e4d0:	0573      	lsls	r3, r6, #21
 800e4d2:	d514      	bpl.n	800e4fe <__ssvfscanf_r+0x1316>
 800e4d4:	238c      	movs	r3, #140	; 0x8c
 800e4d6:	2248      	movs	r2, #72	; 0x48
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	189b      	adds	r3, r3, r2
 800e4dc:	19db      	adds	r3, r3, r7
 800e4de:	429d      	cmp	r5, r3
 800e4e0:	d801      	bhi.n	800e4e6 <__ssvfscanf_r+0x12fe>
 800e4e2:	f7fe ff7e 	bl	800d3e2 <__ssvfscanf_r+0x1fa>
 800e4e6:	3d01      	subs	r5, #1
 800e4e8:	7829      	ldrb	r1, [r5, #0]
 800e4ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4ee:	f001 fdd3 	bl	8010098 <_sungetc_r>
 800e4f2:	e7ef      	b.n	800e4d4 <__ssvfscanf_r+0x12ec>
 800e4f4:	1b63      	subs	r3, r4, r5
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800e4fa:	623b      	str	r3, [r7, #32]
 800e4fc:	e7da      	b.n	800e4b4 <__ssvfscanf_r+0x12cc>
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e500:	1e6c      	subs	r4, r5, #1
 800e502:	7821      	ldrb	r1, [r4, #0]
 800e504:	3b01      	subs	r3, #1
 800e506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e508:	2965      	cmp	r1, #101	; 0x65
 800e50a:	d00a      	beq.n	800e522 <__ssvfscanf_r+0x133a>
 800e50c:	2945      	cmp	r1, #69	; 0x45
 800e50e:	d008      	beq.n	800e522 <__ssvfscanf_r+0x133a>
 800e510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e512:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e514:	f001 fdc0 	bl	8010098 <_sungetc_r>
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	1eac      	subs	r4, r5, #2
 800e51c:	3b02      	subs	r3, #2
 800e51e:	7821      	ldrb	r1, [r4, #0]
 800e520:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e522:	0025      	movs	r5, r4
 800e524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e526:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e528:	f001 fdb6 	bl	8010098 <_sungetc_r>
 800e52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e530:	2310      	movs	r3, #16
 800e532:	0032      	movs	r2, r6
 800e534:	401a      	ands	r2, r3
 800e536:	421e      	tst	r6, r3
 800e538:	d001      	beq.n	800e53e <__ssvfscanf_r+0x1356>
 800e53a:	f7fe fe71 	bl	800d220 <__ssvfscanf_r+0x38>
 800e53e:	23c0      	movs	r3, #192	; 0xc0
 800e540:	2180      	movs	r1, #128	; 0x80
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	702a      	strb	r2, [r5, #0]
 800e546:	4033      	ands	r3, r6
 800e548:	00c9      	lsls	r1, r1, #3
 800e54a:	428b      	cmp	r3, r1
 800e54c:	d11f      	bne.n	800e58e <__ssvfscanf_r+0x13a6>
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	69fa      	ldr	r2, [r7, #28]
 800e552:	69f9      	ldr	r1, [r7, #28]
 800e554:	1a9a      	subs	r2, r3, r2
 800e556:	428b      	cmp	r3, r1
 800e558:	d125      	bne.n	800e5a6 <__ssvfscanf_r+0x13be>
 800e55a:	238c      	movs	r3, #140	; 0x8c
 800e55c:	2148      	movs	r1, #72	; 0x48
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	185b      	adds	r3, r3, r1
 800e562:	19d9      	adds	r1, r3, r7
 800e564:	2200      	movs	r2, #0
 800e566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e568:	f7fb ffca 	bl	800a500 <_strtod_r>
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	0004      	movs	r4, r0
 800e570:	3304      	adds	r3, #4
 800e572:	000d      	movs	r5, r1
 800e574:	623b      	str	r3, [r7, #32]
 800e576:	07f3      	lsls	r3, r6, #31
 800e578:	d523      	bpl.n	800e5c2 <__ssvfscanf_r+0x13da>
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	601c      	str	r4, [r3, #0]
 800e580:	605d      	str	r5, [r3, #4]
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	3301      	adds	r3, #1
 800e586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	f7fe ffa5 	bl	800d4d8 <__ssvfscanf_r+0x2f0>
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0e2      	beq.n	800e55a <__ssvfscanf_r+0x1372>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e598:	1c59      	adds	r1, r3, #1
 800e59a:	230a      	movs	r3, #10
 800e59c:	f7fc f84c 	bl	800a638 <_strtol_r>
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	687d      	ldr	r5, [r7, #4]
 800e5a4:	1ac2      	subs	r2, r0, r3
 800e5a6:	2148      	movs	r1, #72	; 0x48
 800e5a8:	4b19      	ldr	r3, [pc, #100]	; (800e610 <__ssvfscanf_r+0x1428>)
 800e5aa:	185b      	adds	r3, r3, r1
 800e5ac:	19db      	adds	r3, r3, r7
 800e5ae:	429d      	cmp	r5, r3
 800e5b0:	d302      	bcc.n	800e5b8 <__ssvfscanf_r+0x13d0>
 800e5b2:	4b18      	ldr	r3, [pc, #96]	; (800e614 <__ssvfscanf_r+0x142c>)
 800e5b4:	185b      	adds	r3, r3, r1
 800e5b6:	19dd      	adds	r5, r3, r7
 800e5b8:	0028      	movs	r0, r5
 800e5ba:	4917      	ldr	r1, [pc, #92]	; (800e618 <__ssvfscanf_r+0x1430>)
 800e5bc:	f7fc f944 	bl	800a848 <sprintf>
 800e5c0:	e7cb      	b.n	800e55a <__ssvfscanf_r+0x1372>
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5c8:	07b6      	lsls	r6, r6, #30
 800e5ca:	d4d8      	bmi.n	800e57e <__ssvfscanf_r+0x1396>
 800e5cc:	0002      	movs	r2, r0
 800e5ce:	000b      	movs	r3, r1
 800e5d0:	f7f3 fe90 	bl	80022f4 <__aeabi_dcmpun>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d005      	beq.n	800e5e4 <__ssvfscanf_r+0x13fc>
 800e5d8:	4810      	ldr	r0, [pc, #64]	; (800e61c <__ssvfscanf_r+0x1434>)
 800e5da:	f7fc fabf 	bl	800ab5c <nanf>
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	6018      	str	r0, [r3, #0]
 800e5e2:	e7ce      	b.n	800e582 <__ssvfscanf_r+0x139a>
 800e5e4:	0020      	movs	r0, r4
 800e5e6:	0029      	movs	r1, r5
 800e5e8:	f7f3 ff2e 	bl	8002448 <__aeabi_d2f>
 800e5ec:	e7f7      	b.n	800e5de <__ssvfscanf_r+0x13f6>
 800e5ee:	00a3      	lsls	r3, r4, #2
 800e5f0:	18ed      	adds	r5, r5, r3
 800e5f2:	682b      	ldr	r3, [r5, #0]
 800e5f4:	3401      	adds	r4, #1
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	f7fa ff32 	bl	8009460 <free>
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	682b      	ldr	r3, [r5, #0]
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	f7fe ffc3 	bl	800d58c <__ssvfscanf_r+0x3a4>
 800e606:	46c0      	nop			; (mov r8, r8)
 800e608:	fffff07f 	.word	0xfffff07f
 800e60c:	fffffd7f 	.word	0xfffffd7f
 800e610:	0000026b 	.word	0x0000026b
 800e614:	0000026a 	.word	0x0000026a
 800e618:	08013100 	.word	0x08013100
 800e61c:	08013163 	.word	0x08013163

0800e620 <_fclose_r>:
 800e620:	b570      	push	{r4, r5, r6, lr}
 800e622:	0005      	movs	r5, r0
 800e624:	1e0c      	subs	r4, r1, #0
 800e626:	d102      	bne.n	800e62e <_fclose_r+0xe>
 800e628:	2600      	movs	r6, #0
 800e62a:	0030      	movs	r0, r6
 800e62c:	bd70      	pop	{r4, r5, r6, pc}
 800e62e:	2800      	cmp	r0, #0
 800e630:	d004      	beq.n	800e63c <_fclose_r+0x1c>
 800e632:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <_fclose_r+0x1c>
 800e638:	f7fc f89e 	bl	800a778 <__sinit>
 800e63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e63e:	07db      	lsls	r3, r3, #31
 800e640:	d405      	bmi.n	800e64e <_fclose_r+0x2e>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	059b      	lsls	r3, r3, #22
 800e646:	d402      	bmi.n	800e64e <_fclose_r+0x2e>
 800e648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e64a:	f7fc fa6b 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800e64e:	220c      	movs	r2, #12
 800e650:	5ea3      	ldrsh	r3, [r4, r2]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <_fclose_r+0x4a>
 800e656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e658:	3301      	adds	r3, #1
 800e65a:	0016      	movs	r6, r2
 800e65c:	401e      	ands	r6, r3
 800e65e:	421a      	tst	r2, r3
 800e660:	d1e2      	bne.n	800e628 <_fclose_r+0x8>
 800e662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e664:	f7fc fa5f 	bl	800ab26 <__retarget_lock_release_recursive>
 800e668:	e7df      	b.n	800e62a <_fclose_r+0xa>
 800e66a:	0021      	movs	r1, r4
 800e66c:	0028      	movs	r0, r5
 800e66e:	f000 f837 	bl	800e6e0 <__sflush_r>
 800e672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e674:	0006      	movs	r6, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <_fclose_r+0x68>
 800e67a:	0028      	movs	r0, r5
 800e67c:	69e1      	ldr	r1, [r4, #28]
 800e67e:	4798      	blx	r3
 800e680:	2800      	cmp	r0, #0
 800e682:	da01      	bge.n	800e688 <_fclose_r+0x68>
 800e684:	2601      	movs	r6, #1
 800e686:	4276      	negs	r6, r6
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	061b      	lsls	r3, r3, #24
 800e68c:	d503      	bpl.n	800e696 <_fclose_r+0x76>
 800e68e:	0028      	movs	r0, r5
 800e690:	6921      	ldr	r1, [r4, #16]
 800e692:	f7fc facf 	bl	800ac34 <_free_r>
 800e696:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e698:	2900      	cmp	r1, #0
 800e69a:	d008      	beq.n	800e6ae <_fclose_r+0x8e>
 800e69c:	0023      	movs	r3, r4
 800e69e:	3340      	adds	r3, #64	; 0x40
 800e6a0:	4299      	cmp	r1, r3
 800e6a2:	d002      	beq.n	800e6aa <_fclose_r+0x8a>
 800e6a4:	0028      	movs	r0, r5
 800e6a6:	f7fc fac5 	bl	800ac34 <_free_r>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	6323      	str	r3, [r4, #48]	; 0x30
 800e6ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e6b0:	2900      	cmp	r1, #0
 800e6b2:	d004      	beq.n	800e6be <_fclose_r+0x9e>
 800e6b4:	0028      	movs	r0, r5
 800e6b6:	f7fc fabd 	bl	800ac34 <_free_r>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	6463      	str	r3, [r4, #68]	; 0x44
 800e6be:	f7fc f84b 	bl	800a758 <__sfp_lock_acquire>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	81a3      	strh	r3, [r4, #12]
 800e6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6c8:	07db      	lsls	r3, r3, #31
 800e6ca:	d402      	bmi.n	800e6d2 <_fclose_r+0xb2>
 800e6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ce:	f7fc fa2a 	bl	800ab26 <__retarget_lock_release_recursive>
 800e6d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6d4:	f7fc fa25 	bl	800ab22 <__retarget_lock_close_recursive>
 800e6d8:	f7fc f846 	bl	800a768 <__sfp_lock_release>
 800e6dc:	e7a5      	b.n	800e62a <_fclose_r+0xa>
	...

0800e6e0 <__sflush_r>:
 800e6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	5eca      	ldrsh	r2, [r1, r3]
 800e6e6:	000c      	movs	r4, r1
 800e6e8:	0005      	movs	r5, r0
 800e6ea:	b291      	uxth	r1, r2
 800e6ec:	0713      	lsls	r3, r2, #28
 800e6ee:	d464      	bmi.n	800e7ba <__sflush_r+0xda>
 800e6f0:	2380      	movs	r3, #128	; 0x80
 800e6f2:	011b      	lsls	r3, r3, #4
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	6862      	ldr	r2, [r4, #4]
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	dc04      	bgt.n	800e708 <__sflush_r+0x28>
 800e6fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e700:	2a00      	cmp	r2, #0
 800e702:	dc01      	bgt.n	800e708 <__sflush_r+0x28>
 800e704:	2000      	movs	r0, #0
 800e706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e708:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e70a:	2f00      	cmp	r7, #0
 800e70c:	d0fa      	beq.n	800e704 <__sflush_r+0x24>
 800e70e:	2200      	movs	r2, #0
 800e710:	2080      	movs	r0, #128	; 0x80
 800e712:	682e      	ldr	r6, [r5, #0]
 800e714:	602a      	str	r2, [r5, #0]
 800e716:	001a      	movs	r2, r3
 800e718:	0140      	lsls	r0, r0, #5
 800e71a:	69e1      	ldr	r1, [r4, #28]
 800e71c:	4002      	ands	r2, r0
 800e71e:	4203      	tst	r3, r0
 800e720:	d038      	beq.n	800e794 <__sflush_r+0xb4>
 800e722:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	075b      	lsls	r3, r3, #29
 800e728:	d506      	bpl.n	800e738 <__sflush_r+0x58>
 800e72a:	6863      	ldr	r3, [r4, #4]
 800e72c:	1ac0      	subs	r0, r0, r3
 800e72e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e730:	2b00      	cmp	r3, #0
 800e732:	d001      	beq.n	800e738 <__sflush_r+0x58>
 800e734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e736:	1ac0      	subs	r0, r0, r3
 800e738:	0002      	movs	r2, r0
 800e73a:	2300      	movs	r3, #0
 800e73c:	0028      	movs	r0, r5
 800e73e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e740:	69e1      	ldr	r1, [r4, #28]
 800e742:	47b8      	blx	r7
 800e744:	89a2      	ldrh	r2, [r4, #12]
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d106      	bne.n	800e758 <__sflush_r+0x78>
 800e74a:	6829      	ldr	r1, [r5, #0]
 800e74c:	291d      	cmp	r1, #29
 800e74e:	d830      	bhi.n	800e7b2 <__sflush_r+0xd2>
 800e750:	4b2c      	ldr	r3, [pc, #176]	; (800e804 <__sflush_r+0x124>)
 800e752:	410b      	asrs	r3, r1
 800e754:	07db      	lsls	r3, r3, #31
 800e756:	d42c      	bmi.n	800e7b2 <__sflush_r+0xd2>
 800e758:	4b2b      	ldr	r3, [pc, #172]	; (800e808 <__sflush_r+0x128>)
 800e75a:	4013      	ands	r3, r2
 800e75c:	2200      	movs	r2, #0
 800e75e:	6062      	str	r2, [r4, #4]
 800e760:	6922      	ldr	r2, [r4, #16]
 800e762:	b21b      	sxth	r3, r3
 800e764:	81a3      	strh	r3, [r4, #12]
 800e766:	6022      	str	r2, [r4, #0]
 800e768:	04db      	lsls	r3, r3, #19
 800e76a:	d505      	bpl.n	800e778 <__sflush_r+0x98>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	d102      	bne.n	800e776 <__sflush_r+0x96>
 800e770:	682b      	ldr	r3, [r5, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d100      	bne.n	800e778 <__sflush_r+0x98>
 800e776:	6520      	str	r0, [r4, #80]	; 0x50
 800e778:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e77a:	602e      	str	r6, [r5, #0]
 800e77c:	2900      	cmp	r1, #0
 800e77e:	d0c1      	beq.n	800e704 <__sflush_r+0x24>
 800e780:	0023      	movs	r3, r4
 800e782:	3340      	adds	r3, #64	; 0x40
 800e784:	4299      	cmp	r1, r3
 800e786:	d002      	beq.n	800e78e <__sflush_r+0xae>
 800e788:	0028      	movs	r0, r5
 800e78a:	f7fc fa53 	bl	800ac34 <_free_r>
 800e78e:	2000      	movs	r0, #0
 800e790:	6320      	str	r0, [r4, #48]	; 0x30
 800e792:	e7b8      	b.n	800e706 <__sflush_r+0x26>
 800e794:	2301      	movs	r3, #1
 800e796:	0028      	movs	r0, r5
 800e798:	47b8      	blx	r7
 800e79a:	1c43      	adds	r3, r0, #1
 800e79c:	d1c2      	bne.n	800e724 <__sflush_r+0x44>
 800e79e:	682b      	ldr	r3, [r5, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0bf      	beq.n	800e724 <__sflush_r+0x44>
 800e7a4:	2b1d      	cmp	r3, #29
 800e7a6:	d001      	beq.n	800e7ac <__sflush_r+0xcc>
 800e7a8:	2b16      	cmp	r3, #22
 800e7aa:	d101      	bne.n	800e7b0 <__sflush_r+0xd0>
 800e7ac:	602e      	str	r6, [r5, #0]
 800e7ae:	e7a9      	b.n	800e704 <__sflush_r+0x24>
 800e7b0:	89a2      	ldrh	r2, [r4, #12]
 800e7b2:	2340      	movs	r3, #64	; 0x40
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	e7a5      	b.n	800e706 <__sflush_r+0x26>
 800e7ba:	6926      	ldr	r6, [r4, #16]
 800e7bc:	2e00      	cmp	r6, #0
 800e7be:	d0a1      	beq.n	800e704 <__sflush_r+0x24>
 800e7c0:	6827      	ldr	r7, [r4, #0]
 800e7c2:	6026      	str	r6, [r4, #0]
 800e7c4:	1bbb      	subs	r3, r7, r6
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	0789      	lsls	r1, r1, #30
 800e7cc:	d100      	bne.n	800e7d0 <__sflush_r+0xf0>
 800e7ce:	6963      	ldr	r3, [r4, #20]
 800e7d0:	60a3      	str	r3, [r4, #8]
 800e7d2:	9b01      	ldr	r3, [sp, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dc00      	bgt.n	800e7da <__sflush_r+0xfa>
 800e7d8:	e794      	b.n	800e704 <__sflush_r+0x24>
 800e7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7dc:	0032      	movs	r2, r6
 800e7de:	001f      	movs	r7, r3
 800e7e0:	0028      	movs	r0, r5
 800e7e2:	9b01      	ldr	r3, [sp, #4]
 800e7e4:	69e1      	ldr	r1, [r4, #28]
 800e7e6:	47b8      	blx	r7
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	dc06      	bgt.n	800e7fa <__sflush_r+0x11a>
 800e7ec:	2340      	movs	r3, #64	; 0x40
 800e7ee:	2001      	movs	r0, #1
 800e7f0:	89a2      	ldrh	r2, [r4, #12]
 800e7f2:	4240      	negs	r0, r0
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	e785      	b.n	800e706 <__sflush_r+0x26>
 800e7fa:	9b01      	ldr	r3, [sp, #4]
 800e7fc:	1836      	adds	r6, r6, r0
 800e7fe:	1a1b      	subs	r3, r3, r0
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	e7e6      	b.n	800e7d2 <__sflush_r+0xf2>
 800e804:	dfbffffe 	.word	0xdfbffffe
 800e808:	fffff7ff 	.word	0xfffff7ff

0800e80c <_fflush_r>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	0005      	movs	r5, r0
 800e810:	000c      	movs	r4, r1
 800e812:	2800      	cmp	r0, #0
 800e814:	d004      	beq.n	800e820 <_fflush_r+0x14>
 800e816:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d101      	bne.n	800e820 <_fflush_r+0x14>
 800e81c:	f7fb ffac 	bl	800a778 <__sinit>
 800e820:	220c      	movs	r2, #12
 800e822:	5ea3      	ldrsh	r3, [r4, r2]
 800e824:	1e1e      	subs	r6, r3, #0
 800e826:	d015      	beq.n	800e854 <_fflush_r+0x48>
 800e828:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e82a:	07d2      	lsls	r2, r2, #31
 800e82c:	d404      	bmi.n	800e838 <_fflush_r+0x2c>
 800e82e:	059b      	lsls	r3, r3, #22
 800e830:	d402      	bmi.n	800e838 <_fflush_r+0x2c>
 800e832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e834:	f7fc f976 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800e838:	0021      	movs	r1, r4
 800e83a:	0028      	movs	r0, r5
 800e83c:	f7ff ff50 	bl	800e6e0 <__sflush_r>
 800e840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e842:	0006      	movs	r6, r0
 800e844:	07db      	lsls	r3, r3, #31
 800e846:	d405      	bmi.n	800e854 <_fflush_r+0x48>
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	059b      	lsls	r3, r3, #22
 800e84c:	d402      	bmi.n	800e854 <_fflush_r+0x48>
 800e84e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e850:	f7fc f969 	bl	800ab26 <__retarget_lock_release_recursive>
 800e854:	0030      	movs	r0, r6
 800e856:	bd70      	pop	{r4, r5, r6, pc}

0800e858 <__sccl>:
 800e858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e85a:	780b      	ldrb	r3, [r1, #0]
 800e85c:	0004      	movs	r4, r0
 800e85e:	2b5e      	cmp	r3, #94	; 0x5e
 800e860:	d019      	beq.n	800e896 <__sccl+0x3e>
 800e862:	2200      	movs	r2, #0
 800e864:	1c4d      	adds	r5, r1, #1
 800e866:	0021      	movs	r1, r4
 800e868:	1c60      	adds	r0, r4, #1
 800e86a:	30ff      	adds	r0, #255	; 0xff
 800e86c:	700a      	strb	r2, [r1, #0]
 800e86e:	3101      	adds	r1, #1
 800e870:	4281      	cmp	r1, r0
 800e872:	d1fb      	bne.n	800e86c <__sccl+0x14>
 800e874:	1e68      	subs	r0, r5, #1
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00c      	beq.n	800e894 <__sccl+0x3c>
 800e87a:	2101      	movs	r1, #1
 800e87c:	262d      	movs	r6, #45	; 0x2d
 800e87e:	404a      	eors	r2, r1
 800e880:	0028      	movs	r0, r5
 800e882:	54e2      	strb	r2, [r4, r3]
 800e884:	7801      	ldrb	r1, [r0, #0]
 800e886:	1c45      	adds	r5, r0, #1
 800e888:	292d      	cmp	r1, #45	; 0x2d
 800e88a:	d00c      	beq.n	800e8a6 <__sccl+0x4e>
 800e88c:	295d      	cmp	r1, #93	; 0x5d
 800e88e:	d01d      	beq.n	800e8cc <__sccl+0x74>
 800e890:	2900      	cmp	r1, #0
 800e892:	d104      	bne.n	800e89e <__sccl+0x46>
 800e894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e896:	2201      	movs	r2, #1
 800e898:	784b      	ldrb	r3, [r1, #1]
 800e89a:	1c8d      	adds	r5, r1, #2
 800e89c:	e7e3      	b.n	800e866 <__sccl+0xe>
 800e89e:	000b      	movs	r3, r1
 800e8a0:	e7ee      	b.n	800e880 <__sccl+0x28>
 800e8a2:	0033      	movs	r3, r6
 800e8a4:	e7ec      	b.n	800e880 <__sccl+0x28>
 800e8a6:	7841      	ldrb	r1, [r0, #1]
 800e8a8:	295d      	cmp	r1, #93	; 0x5d
 800e8aa:	d0fa      	beq.n	800e8a2 <__sccl+0x4a>
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	dcf8      	bgt.n	800e8a2 <__sccl+0x4a>
 800e8b0:	001d      	movs	r5, r3
 800e8b2:	3002      	adds	r0, #2
 800e8b4:	3501      	adds	r5, #1
 800e8b6:	5562      	strb	r2, [r4, r5]
 800e8b8:	42a9      	cmp	r1, r5
 800e8ba:	dcfb      	bgt.n	800e8b4 <__sccl+0x5c>
 800e8bc:	2500      	movs	r5, #0
 800e8be:	1c5f      	adds	r7, r3, #1
 800e8c0:	428b      	cmp	r3, r1
 800e8c2:	da01      	bge.n	800e8c8 <__sccl+0x70>
 800e8c4:	1acd      	subs	r5, r1, r3
 800e8c6:	3d01      	subs	r5, #1
 800e8c8:	197b      	adds	r3, r7, r5
 800e8ca:	e7db      	b.n	800e884 <__sccl+0x2c>
 800e8cc:	0028      	movs	r0, r5
 800e8ce:	e7e1      	b.n	800e894 <__sccl+0x3c>

0800e8d0 <_localeconv_r>:
 800e8d0:	4800      	ldr	r0, [pc, #0]	; (800e8d4 <_localeconv_r+0x4>)
 800e8d2:	4770      	bx	lr
 800e8d4:	20000540 	.word	0x20000540

0800e8d8 <__libc_fini_array>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	4c07      	ldr	r4, [pc, #28]	; (800e8f8 <__libc_fini_array+0x20>)
 800e8dc:	4d07      	ldr	r5, [pc, #28]	; (800e8fc <__libc_fini_array+0x24>)
 800e8de:	1b64      	subs	r4, r4, r5
 800e8e0:	10a4      	asrs	r4, r4, #2
 800e8e2:	2c00      	cmp	r4, #0
 800e8e4:	d102      	bne.n	800e8ec <__libc_fini_array+0x14>
 800e8e6:	f002 fdcd 	bl	8011484 <_fini>
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	3c01      	subs	r4, #1
 800e8ee:	00a3      	lsls	r3, r4, #2
 800e8f0:	58eb      	ldr	r3, [r5, r3]
 800e8f2:	4798      	blx	r3
 800e8f4:	e7f5      	b.n	800e8e2 <__libc_fini_array+0xa>
 800e8f6:	46c0      	nop			; (mov r8, r8)
 800e8f8:	08013200 	.word	0x08013200
 800e8fc:	080131fc 	.word	0x080131fc

0800e900 <memchr>:
 800e900:	b2c9      	uxtb	r1, r1
 800e902:	1882      	adds	r2, r0, r2
 800e904:	4290      	cmp	r0, r2
 800e906:	d101      	bne.n	800e90c <memchr+0xc>
 800e908:	2000      	movs	r0, #0
 800e90a:	4770      	bx	lr
 800e90c:	7803      	ldrb	r3, [r0, #0]
 800e90e:	428b      	cmp	r3, r1
 800e910:	d0fb      	beq.n	800e90a <memchr+0xa>
 800e912:	3001      	adds	r0, #1
 800e914:	e7f6      	b.n	800e904 <memchr+0x4>
	...

0800e918 <frexp>:
 800e918:	b570      	push	{r4, r5, r6, lr}
 800e91a:	0014      	movs	r4, r2
 800e91c:	2500      	movs	r5, #0
 800e91e:	6025      	str	r5, [r4, #0]
 800e920:	4d10      	ldr	r5, [pc, #64]	; (800e964 <frexp+0x4c>)
 800e922:	004b      	lsls	r3, r1, #1
 800e924:	000a      	movs	r2, r1
 800e926:	085b      	lsrs	r3, r3, #1
 800e928:	42ab      	cmp	r3, r5
 800e92a:	dc1a      	bgt.n	800e962 <frexp+0x4a>
 800e92c:	001d      	movs	r5, r3
 800e92e:	4305      	orrs	r5, r0
 800e930:	d017      	beq.n	800e962 <frexp+0x4a>
 800e932:	4d0d      	ldr	r5, [pc, #52]	; (800e968 <frexp+0x50>)
 800e934:	4229      	tst	r1, r5
 800e936:	d109      	bne.n	800e94c <frexp+0x34>
 800e938:	2200      	movs	r2, #0
 800e93a:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <frexp+0x54>)
 800e93c:	f7f2 fe96 	bl	800166c <__aeabi_dmul>
 800e940:	2536      	movs	r5, #54	; 0x36
 800e942:	000a      	movs	r2, r1
 800e944:	004b      	lsls	r3, r1, #1
 800e946:	426d      	negs	r5, r5
 800e948:	085b      	lsrs	r3, r3, #1
 800e94a:	6025      	str	r5, [r4, #0]
 800e94c:	4d08      	ldr	r5, [pc, #32]	; (800e970 <frexp+0x58>)
 800e94e:	151b      	asrs	r3, r3, #20
 800e950:	195b      	adds	r3, r3, r5
 800e952:	6825      	ldr	r5, [r4, #0]
 800e954:	18eb      	adds	r3, r5, r3
 800e956:	6023      	str	r3, [r4, #0]
 800e958:	4b06      	ldr	r3, [pc, #24]	; (800e974 <frexp+0x5c>)
 800e95a:	401a      	ands	r2, r3
 800e95c:	4b06      	ldr	r3, [pc, #24]	; (800e978 <frexp+0x60>)
 800e95e:	4313      	orrs	r3, r2
 800e960:	0019      	movs	r1, r3
 800e962:	bd70      	pop	{r4, r5, r6, pc}
 800e964:	7fefffff 	.word	0x7fefffff
 800e968:	7ff00000 	.word	0x7ff00000
 800e96c:	43500000 	.word	0x43500000
 800e970:	fffffc02 	.word	0xfffffc02
 800e974:	800fffff 	.word	0x800fffff
 800e978:	3fe00000 	.word	0x3fe00000

0800e97c <__register_exitproc>:
 800e97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e97e:	4f1c      	ldr	r7, [pc, #112]	; (800e9f0 <__register_exitproc+0x74>)
 800e980:	0004      	movs	r4, r0
 800e982:	6838      	ldr	r0, [r7, #0]
 800e984:	0016      	movs	r6, r2
 800e986:	9301      	str	r3, [sp, #4]
 800e988:	9100      	str	r1, [sp, #0]
 800e98a:	f7fc f8cb 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800e98e:	4a19      	ldr	r2, [pc, #100]	; (800e9f4 <__register_exitproc+0x78>)
 800e990:	6813      	ldr	r3, [r2, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <__register_exitproc+0x1e>
 800e996:	4b18      	ldr	r3, [pc, #96]	; (800e9f8 <__register_exitproc+0x7c>)
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	6838      	ldr	r0, [r7, #0]
 800e99e:	2a1f      	cmp	r2, #31
 800e9a0:	dd04      	ble.n	800e9ac <__register_exitproc+0x30>
 800e9a2:	f7fc f8c0 	bl	800ab26 <__retarget_lock_release_recursive>
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	4240      	negs	r0, r0
 800e9aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e9ac:	2c00      	cmp	r4, #0
 800e9ae:	d014      	beq.n	800e9da <__register_exitproc+0x5e>
 800e9b0:	0091      	lsls	r1, r2, #2
 800e9b2:	1859      	adds	r1, r3, r1
 800e9b4:	000f      	movs	r7, r1
 800e9b6:	3788      	adds	r7, #136	; 0x88
 800e9b8:	603e      	str	r6, [r7, #0]
 800e9ba:	2701      	movs	r7, #1
 800e9bc:	001e      	movs	r6, r3
 800e9be:	4097      	lsls	r7, r2
 800e9c0:	3685      	adds	r6, #133	; 0x85
 800e9c2:	36ff      	adds	r6, #255	; 0xff
 800e9c4:	6875      	ldr	r5, [r6, #4]
 800e9c6:	31fc      	adds	r1, #252	; 0xfc
 800e9c8:	433d      	orrs	r5, r7
 800e9ca:	6075      	str	r5, [r6, #4]
 800e9cc:	9d01      	ldr	r5, [sp, #4]
 800e9ce:	60cd      	str	r5, [r1, #12]
 800e9d0:	2c02      	cmp	r4, #2
 800e9d2:	d102      	bne.n	800e9da <__register_exitproc+0x5e>
 800e9d4:	68b1      	ldr	r1, [r6, #8]
 800e9d6:	4339      	orrs	r1, r7
 800e9d8:	60b1      	str	r1, [r6, #8]
 800e9da:	1c51      	adds	r1, r2, #1
 800e9dc:	6059      	str	r1, [r3, #4]
 800e9de:	3202      	adds	r2, #2
 800e9e0:	9900      	ldr	r1, [sp, #0]
 800e9e2:	0092      	lsls	r2, r2, #2
 800e9e4:	50d1      	str	r1, [r2, r3]
 800e9e6:	f7fc f89e 	bl	800ab26 <__retarget_lock_release_recursive>
 800e9ea:	2000      	movs	r0, #0
 800e9ec:	e7dd      	b.n	800e9aa <__register_exitproc+0x2e>
 800e9ee:	46c0      	nop			; (mov r8, r8)
 800e9f0:	200006e4 	.word	0x200006e4
 800e9f4:	20000edc 	.word	0x20000edc
 800e9f8:	20000ee0 	.word	0x20000ee0

0800e9fc <__assert_func>:
 800e9fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e9fe:	0014      	movs	r4, r2
 800ea00:	001a      	movs	r2, r3
 800ea02:	4b09      	ldr	r3, [pc, #36]	; (800ea28 <__assert_func+0x2c>)
 800ea04:	0005      	movs	r5, r0
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	000e      	movs	r6, r1
 800ea0a:	68d8      	ldr	r0, [r3, #12]
 800ea0c:	4b07      	ldr	r3, [pc, #28]	; (800ea2c <__assert_func+0x30>)
 800ea0e:	2c00      	cmp	r4, #0
 800ea10:	d101      	bne.n	800ea16 <__assert_func+0x1a>
 800ea12:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <__assert_func+0x34>)
 800ea14:	001c      	movs	r4, r3
 800ea16:	4907      	ldr	r1, [pc, #28]	; (800ea34 <__assert_func+0x38>)
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	9402      	str	r4, [sp, #8]
 800ea1c:	002b      	movs	r3, r5
 800ea1e:	9600      	str	r6, [sp, #0]
 800ea20:	f001 faa6 	bl	800ff70 <fiprintf>
 800ea24:	f002 fb8e 	bl	8011144 <abort>
 800ea28:	200006e0 	.word	0x200006e0
 800ea2c:	08013128 	.word	0x08013128
 800ea30:	08013163 	.word	0x08013163
 800ea34:	08013135 	.word	0x08013135

0800ea38 <_calloc_r>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	2400      	movs	r4, #0
 800ea3c:	0c0b      	lsrs	r3, r1, #16
 800ea3e:	0c16      	lsrs	r6, r2, #16
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	d133      	bne.n	800eaac <_calloc_r+0x74>
 800ea44:	42a6      	cmp	r6, r4
 800ea46:	d121      	bne.n	800ea8c <_calloc_r+0x54>
 800ea48:	b28b      	uxth	r3, r1
 800ea4a:	b291      	uxth	r1, r2
 800ea4c:	4359      	muls	r1, r3
 800ea4e:	f7fa fd11 	bl	8009474 <_malloc_r>
 800ea52:	1e05      	subs	r5, r0, #0
 800ea54:	d033      	beq.n	800eabe <_calloc_r+0x86>
 800ea56:	0003      	movs	r3, r0
 800ea58:	3b08      	subs	r3, #8
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	2303      	movs	r3, #3
 800ea5e:	439a      	bics	r2, r3
 800ea60:	3a04      	subs	r2, #4
 800ea62:	2a24      	cmp	r2, #36	; 0x24
 800ea64:	d832      	bhi.n	800eacc <_calloc_r+0x94>
 800ea66:	0003      	movs	r3, r0
 800ea68:	2a13      	cmp	r2, #19
 800ea6a:	d90a      	bls.n	800ea82 <_calloc_r+0x4a>
 800ea6c:	6004      	str	r4, [r0, #0]
 800ea6e:	6044      	str	r4, [r0, #4]
 800ea70:	3308      	adds	r3, #8
 800ea72:	2a1b      	cmp	r2, #27
 800ea74:	d905      	bls.n	800ea82 <_calloc_r+0x4a>
 800ea76:	6084      	str	r4, [r0, #8]
 800ea78:	60c4      	str	r4, [r0, #12]
 800ea7a:	2a24      	cmp	r2, #36	; 0x24
 800ea7c:	d021      	beq.n	800eac2 <_calloc_r+0x8a>
 800ea7e:	0003      	movs	r3, r0
 800ea80:	3310      	adds	r3, #16
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	605a      	str	r2, [r3, #4]
 800ea88:	609a      	str	r2, [r3, #8]
 800ea8a:	e018      	b.n	800eabe <_calloc_r+0x86>
 800ea8c:	1c33      	adds	r3, r6, #0
 800ea8e:	1c0d      	adds	r5, r1, #0
 800ea90:	b289      	uxth	r1, r1
 800ea92:	b292      	uxth	r2, r2
 800ea94:	434a      	muls	r2, r1
 800ea96:	b2ad      	uxth	r5, r5
 800ea98:	b299      	uxth	r1, r3
 800ea9a:	4369      	muls	r1, r5
 800ea9c:	0c13      	lsrs	r3, r2, #16
 800ea9e:	18c9      	adds	r1, r1, r3
 800eaa0:	0c0b      	lsrs	r3, r1, #16
 800eaa2:	d107      	bne.n	800eab4 <_calloc_r+0x7c>
 800eaa4:	0409      	lsls	r1, r1, #16
 800eaa6:	b292      	uxth	r2, r2
 800eaa8:	4311      	orrs	r1, r2
 800eaaa:	e7d0      	b.n	800ea4e <_calloc_r+0x16>
 800eaac:	2e00      	cmp	r6, #0
 800eaae:	d101      	bne.n	800eab4 <_calloc_r+0x7c>
 800eab0:	1c15      	adds	r5, r2, #0
 800eab2:	e7ed      	b.n	800ea90 <_calloc_r+0x58>
 800eab4:	f7fc f80a 	bl	800aacc <__errno>
 800eab8:	230c      	movs	r3, #12
 800eaba:	2500      	movs	r5, #0
 800eabc:	6003      	str	r3, [r0, #0]
 800eabe:	0028      	movs	r0, r5
 800eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac2:	0003      	movs	r3, r0
 800eac4:	6104      	str	r4, [r0, #16]
 800eac6:	3318      	adds	r3, #24
 800eac8:	6144      	str	r4, [r0, #20]
 800eaca:	e7da      	b.n	800ea82 <_calloc_r+0x4a>
 800eacc:	2100      	movs	r1, #0
 800eace:	f7fb ff51 	bl	800a974 <memset>
 800ead2:	e7f4      	b.n	800eabe <_calloc_r+0x86>

0800ead4 <quorem>:
 800ead4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ead6:	6902      	ldr	r2, [r0, #16]
 800ead8:	690b      	ldr	r3, [r1, #16]
 800eada:	b089      	sub	sp, #36	; 0x24
 800eadc:	0007      	movs	r7, r0
 800eade:	9104      	str	r1, [sp, #16]
 800eae0:	2000      	movs	r0, #0
 800eae2:	429a      	cmp	r2, r3
 800eae4:	db69      	blt.n	800ebba <quorem+0xe6>
 800eae6:	3b01      	subs	r3, #1
 800eae8:	009c      	lsls	r4, r3, #2
 800eaea:	9301      	str	r3, [sp, #4]
 800eaec:	000b      	movs	r3, r1
 800eaee:	3314      	adds	r3, #20
 800eaf0:	9306      	str	r3, [sp, #24]
 800eaf2:	191b      	adds	r3, r3, r4
 800eaf4:	9305      	str	r3, [sp, #20]
 800eaf6:	003b      	movs	r3, r7
 800eaf8:	3314      	adds	r3, #20
 800eafa:	9303      	str	r3, [sp, #12]
 800eafc:	191c      	adds	r4, r3, r4
 800eafe:	9b05      	ldr	r3, [sp, #20]
 800eb00:	6826      	ldr	r6, [r4, #0]
 800eb02:	681d      	ldr	r5, [r3, #0]
 800eb04:	0030      	movs	r0, r6
 800eb06:	3501      	adds	r5, #1
 800eb08:	0029      	movs	r1, r5
 800eb0a:	f7f1 fb17 	bl	800013c <__udivsi3>
 800eb0e:	9002      	str	r0, [sp, #8]
 800eb10:	42ae      	cmp	r6, r5
 800eb12:	d329      	bcc.n	800eb68 <quorem+0x94>
 800eb14:	9b06      	ldr	r3, [sp, #24]
 800eb16:	2600      	movs	r6, #0
 800eb18:	469c      	mov	ip, r3
 800eb1a:	9d03      	ldr	r5, [sp, #12]
 800eb1c:	9606      	str	r6, [sp, #24]
 800eb1e:	4662      	mov	r2, ip
 800eb20:	ca08      	ldmia	r2!, {r3}
 800eb22:	6828      	ldr	r0, [r5, #0]
 800eb24:	4694      	mov	ip, r2
 800eb26:	9a02      	ldr	r2, [sp, #8]
 800eb28:	b299      	uxth	r1, r3
 800eb2a:	4351      	muls	r1, r2
 800eb2c:	0c1b      	lsrs	r3, r3, #16
 800eb2e:	4353      	muls	r3, r2
 800eb30:	1989      	adds	r1, r1, r6
 800eb32:	0c0a      	lsrs	r2, r1, #16
 800eb34:	189b      	adds	r3, r3, r2
 800eb36:	9307      	str	r3, [sp, #28]
 800eb38:	0c1e      	lsrs	r6, r3, #16
 800eb3a:	9b06      	ldr	r3, [sp, #24]
 800eb3c:	b282      	uxth	r2, r0
 800eb3e:	18d2      	adds	r2, r2, r3
 800eb40:	466b      	mov	r3, sp
 800eb42:	b289      	uxth	r1, r1
 800eb44:	8b9b      	ldrh	r3, [r3, #28]
 800eb46:	1a52      	subs	r2, r2, r1
 800eb48:	0c01      	lsrs	r1, r0, #16
 800eb4a:	1ac9      	subs	r1, r1, r3
 800eb4c:	1413      	asrs	r3, r2, #16
 800eb4e:	18cb      	adds	r3, r1, r3
 800eb50:	1419      	asrs	r1, r3, #16
 800eb52:	b292      	uxth	r2, r2
 800eb54:	041b      	lsls	r3, r3, #16
 800eb56:	4313      	orrs	r3, r2
 800eb58:	c508      	stmia	r5!, {r3}
 800eb5a:	9b05      	ldr	r3, [sp, #20]
 800eb5c:	9106      	str	r1, [sp, #24]
 800eb5e:	4563      	cmp	r3, ip
 800eb60:	d2dd      	bcs.n	800eb1e <quorem+0x4a>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d030      	beq.n	800ebca <quorem+0xf6>
 800eb68:	0038      	movs	r0, r7
 800eb6a:	9904      	ldr	r1, [sp, #16]
 800eb6c:	f7fc ff04 	bl	800b978 <__mcmp>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	db21      	blt.n	800ebb8 <quorem+0xe4>
 800eb74:	0038      	movs	r0, r7
 800eb76:	2600      	movs	r6, #0
 800eb78:	9b02      	ldr	r3, [sp, #8]
 800eb7a:	9c04      	ldr	r4, [sp, #16]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	9302      	str	r3, [sp, #8]
 800eb80:	3014      	adds	r0, #20
 800eb82:	3414      	adds	r4, #20
 800eb84:	6803      	ldr	r3, [r0, #0]
 800eb86:	cc02      	ldmia	r4!, {r1}
 800eb88:	b29d      	uxth	r5, r3
 800eb8a:	19ad      	adds	r5, r5, r6
 800eb8c:	b28a      	uxth	r2, r1
 800eb8e:	1aaa      	subs	r2, r5, r2
 800eb90:	0c09      	lsrs	r1, r1, #16
 800eb92:	0c1b      	lsrs	r3, r3, #16
 800eb94:	1a5b      	subs	r3, r3, r1
 800eb96:	1411      	asrs	r1, r2, #16
 800eb98:	185b      	adds	r3, r3, r1
 800eb9a:	141e      	asrs	r6, r3, #16
 800eb9c:	b292      	uxth	r2, r2
 800eb9e:	041b      	lsls	r3, r3, #16
 800eba0:	4313      	orrs	r3, r2
 800eba2:	c008      	stmia	r0!, {r3}
 800eba4:	9b05      	ldr	r3, [sp, #20]
 800eba6:	42a3      	cmp	r3, r4
 800eba8:	d2ec      	bcs.n	800eb84 <quorem+0xb0>
 800ebaa:	9b01      	ldr	r3, [sp, #4]
 800ebac:	9a03      	ldr	r2, [sp, #12]
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	18d3      	adds	r3, r2, r3
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	d015      	beq.n	800ebe4 <quorem+0x110>
 800ebb8:	9802      	ldr	r0, [sp, #8]
 800ebba:	b009      	add	sp, #36	; 0x24
 800ebbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d106      	bne.n	800ebd2 <quorem+0xfe>
 800ebc4:	9b01      	ldr	r3, [sp, #4]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	3c04      	subs	r4, #4
 800ebce:	42a3      	cmp	r3, r4
 800ebd0:	d3f5      	bcc.n	800ebbe <quorem+0xea>
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	e7c7      	b.n	800eb68 <quorem+0x94>
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	2a00      	cmp	r2, #0
 800ebdc:	d106      	bne.n	800ebec <quorem+0x118>
 800ebde:	9a01      	ldr	r2, [sp, #4]
 800ebe0:	3a01      	subs	r2, #1
 800ebe2:	9201      	str	r2, [sp, #4]
 800ebe4:	9a03      	ldr	r2, [sp, #12]
 800ebe6:	3b04      	subs	r3, #4
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d3f5      	bcc.n	800ebd8 <quorem+0x104>
 800ebec:	9b01      	ldr	r3, [sp, #4]
 800ebee:	613b      	str	r3, [r7, #16]
 800ebf0:	e7e2      	b.n	800ebb8 <quorem+0xe4>
	...

0800ebf4 <_dtoa_r>:
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	0014      	movs	r4, r2
 800ebf8:	001d      	movs	r5, r3
 800ebfa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ebfc:	b09d      	sub	sp, #116	; 0x74
 800ebfe:	9408      	str	r4, [sp, #32]
 800ec00:	9509      	str	r5, [sp, #36]	; 0x24
 800ec02:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ec04:	9004      	str	r0, [sp, #16]
 800ec06:	2900      	cmp	r1, #0
 800ec08:	d009      	beq.n	800ec1e <_dtoa_r+0x2a>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ec0e:	4093      	lsls	r3, r2
 800ec10:	604a      	str	r2, [r1, #4]
 800ec12:	608b      	str	r3, [r1, #8]
 800ec14:	f7fc fc56 	bl	800b4c4 <_Bfree>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	9a04      	ldr	r2, [sp, #16]
 800ec1c:	6393      	str	r3, [r2, #56]	; 0x38
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	da1e      	bge.n	800ec60 <_dtoa_r+0x6c>
 800ec22:	2301      	movs	r3, #1
 800ec24:	6033      	str	r3, [r6, #0]
 800ec26:	006b      	lsls	r3, r5, #1
 800ec28:	085b      	lsrs	r3, r3, #1
 800ec2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ec2e:	4bb5      	ldr	r3, [pc, #724]	; (800ef04 <_dtoa_r+0x310>)
 800ec30:	4ab4      	ldr	r2, [pc, #720]	; (800ef04 <_dtoa_r+0x310>)
 800ec32:	403b      	ands	r3, r7
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d116      	bne.n	800ec66 <_dtoa_r+0x72>
 800ec38:	4bb3      	ldr	r3, [pc, #716]	; (800ef08 <_dtoa_r+0x314>)
 800ec3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ec3c:	6013      	str	r3, [r2, #0]
 800ec3e:	033b      	lsls	r3, r7, #12
 800ec40:	0b1b      	lsrs	r3, r3, #12
 800ec42:	4323      	orrs	r3, r4
 800ec44:	d101      	bne.n	800ec4a <_dtoa_r+0x56>
 800ec46:	f000 fdb2 	bl	800f7ae <_dtoa_r+0xbba>
 800ec4a:	4bb0      	ldr	r3, [pc, #704]	; (800ef0c <_dtoa_r+0x318>)
 800ec4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ec4e:	9306      	str	r3, [sp, #24]
 800ec50:	2a00      	cmp	r2, #0
 800ec52:	d002      	beq.n	800ec5a <_dtoa_r+0x66>
 800ec54:	4bae      	ldr	r3, [pc, #696]	; (800ef10 <_dtoa_r+0x31c>)
 800ec56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	9806      	ldr	r0, [sp, #24]
 800ec5c:	b01d      	add	sp, #116	; 0x74
 800ec5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec60:	2300      	movs	r3, #0
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	e7e2      	b.n	800ec2c <_dtoa_r+0x38>
 800ec66:	9a08      	ldr	r2, [sp, #32]
 800ec68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec6a:	9210      	str	r2, [sp, #64]	; 0x40
 800ec6c:	9311      	str	r3, [sp, #68]	; 0x44
 800ec6e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ec70:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	f7f1 fbe7 	bl	8000448 <__aeabi_dcmpeq>
 800ec7a:	1e06      	subs	r6, r0, #0
 800ec7c:	d009      	beq.n	800ec92 <_dtoa_r+0x9e>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	4ba3      	ldr	r3, [pc, #652]	; (800ef14 <_dtoa_r+0x320>)
 800ec86:	9306      	str	r3, [sp, #24]
 800ec88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0e5      	beq.n	800ec5a <_dtoa_r+0x66>
 800ec8e:	4ba2      	ldr	r3, [pc, #648]	; (800ef18 <_dtoa_r+0x324>)
 800ec90:	e7e1      	b.n	800ec56 <_dtoa_r+0x62>
 800ec92:	ab1a      	add	r3, sp, #104	; 0x68
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	ab1b      	add	r3, sp, #108	; 0x6c
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	9804      	ldr	r0, [sp, #16]
 800ec9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eca0:	f7fc ff86 	bl	800bbb0 <__d2b>
 800eca4:	007a      	lsls	r2, r7, #1
 800eca6:	9005      	str	r0, [sp, #20]
 800eca8:	0d52      	lsrs	r2, r2, #21
 800ecaa:	d100      	bne.n	800ecae <_dtoa_r+0xba>
 800ecac:	e07b      	b.n	800eda6 <_dtoa_r+0x1b2>
 800ecae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecb0:	9617      	str	r6, [sp, #92]	; 0x5c
 800ecb2:	0319      	lsls	r1, r3, #12
 800ecb4:	4b99      	ldr	r3, [pc, #612]	; (800ef1c <_dtoa_r+0x328>)
 800ecb6:	0b09      	lsrs	r1, r1, #12
 800ecb8:	430b      	orrs	r3, r1
 800ecba:	4999      	ldr	r1, [pc, #612]	; (800ef20 <_dtoa_r+0x32c>)
 800ecbc:	1857      	adds	r7, r2, r1
 800ecbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ecc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ecc2:	0019      	movs	r1, r3
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4b97      	ldr	r3, [pc, #604]	; (800ef24 <_dtoa_r+0x330>)
 800ecc8:	f7f2 ff92 	bl	8001bf0 <__aeabi_dsub>
 800eccc:	4a96      	ldr	r2, [pc, #600]	; (800ef28 <_dtoa_r+0x334>)
 800ecce:	4b97      	ldr	r3, [pc, #604]	; (800ef2c <_dtoa_r+0x338>)
 800ecd0:	f7f2 fccc 	bl	800166c <__aeabi_dmul>
 800ecd4:	4a96      	ldr	r2, [pc, #600]	; (800ef30 <_dtoa_r+0x33c>)
 800ecd6:	4b97      	ldr	r3, [pc, #604]	; (800ef34 <_dtoa_r+0x340>)
 800ecd8:	f7f1 fd6e 	bl	80007b8 <__aeabi_dadd>
 800ecdc:	0004      	movs	r4, r0
 800ecde:	0038      	movs	r0, r7
 800ece0:	000d      	movs	r5, r1
 800ece2:	f7f3 fb5b 	bl	800239c <__aeabi_i2d>
 800ece6:	4a94      	ldr	r2, [pc, #592]	; (800ef38 <_dtoa_r+0x344>)
 800ece8:	4b94      	ldr	r3, [pc, #592]	; (800ef3c <_dtoa_r+0x348>)
 800ecea:	f7f2 fcbf 	bl	800166c <__aeabi_dmul>
 800ecee:	0002      	movs	r2, r0
 800ecf0:	000b      	movs	r3, r1
 800ecf2:	0020      	movs	r0, r4
 800ecf4:	0029      	movs	r1, r5
 800ecf6:	f7f1 fd5f 	bl	80007b8 <__aeabi_dadd>
 800ecfa:	0004      	movs	r4, r0
 800ecfc:	000d      	movs	r5, r1
 800ecfe:	f7f3 fb17 	bl	8002330 <__aeabi_d2iz>
 800ed02:	2200      	movs	r2, #0
 800ed04:	9003      	str	r0, [sp, #12]
 800ed06:	2300      	movs	r3, #0
 800ed08:	0020      	movs	r0, r4
 800ed0a:	0029      	movs	r1, r5
 800ed0c:	f7f1 fba2 	bl	8000454 <__aeabi_dcmplt>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d00b      	beq.n	800ed2c <_dtoa_r+0x138>
 800ed14:	9803      	ldr	r0, [sp, #12]
 800ed16:	f7f3 fb41 	bl	800239c <__aeabi_i2d>
 800ed1a:	002b      	movs	r3, r5
 800ed1c:	0022      	movs	r2, r4
 800ed1e:	f7f1 fb93 	bl	8000448 <__aeabi_dcmpeq>
 800ed22:	4243      	negs	r3, r0
 800ed24:	4158      	adcs	r0, r3
 800ed26:	9b03      	ldr	r3, [sp, #12]
 800ed28:	1a1b      	subs	r3, r3, r0
 800ed2a:	9303      	str	r3, [sp, #12]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	9316      	str	r3, [sp, #88]	; 0x58
 800ed30:	9b03      	ldr	r3, [sp, #12]
 800ed32:	2b16      	cmp	r3, #22
 800ed34:	d810      	bhi.n	800ed58 <_dtoa_r+0x164>
 800ed36:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ed38:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ed3a:	9a03      	ldr	r2, [sp, #12]
 800ed3c:	4b80      	ldr	r3, [pc, #512]	; (800ef40 <_dtoa_r+0x34c>)
 800ed3e:	00d2      	lsls	r2, r2, #3
 800ed40:	189b      	adds	r3, r3, r2
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	f7f1 fb85 	bl	8000454 <__aeabi_dcmplt>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d047      	beq.n	800edde <_dtoa_r+0x1ea>
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	3b01      	subs	r3, #1
 800ed52:	9303      	str	r3, [sp, #12]
 800ed54:	2300      	movs	r3, #0
 800ed56:	9316      	str	r3, [sp, #88]	; 0x58
 800ed58:	2200      	movs	r2, #0
 800ed5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ed5c:	920a      	str	r2, [sp, #40]	; 0x28
 800ed5e:	1bdb      	subs	r3, r3, r7
 800ed60:	1e5a      	subs	r2, r3, #1
 800ed62:	d53e      	bpl.n	800ede2 <_dtoa_r+0x1ee>
 800ed64:	2201      	movs	r2, #1
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	930a      	str	r3, [sp, #40]	; 0x28
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	db38      	blt.n	800ede6 <_dtoa_r+0x1f2>
 800ed74:	9a03      	ldr	r2, [sp, #12]
 800ed76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed78:	4694      	mov	ip, r2
 800ed7a:	4463      	add	r3, ip
 800ed7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ed7e:	2300      	movs	r3, #0
 800ed80:	9213      	str	r2, [sp, #76]	; 0x4c
 800ed82:	930d      	str	r3, [sp, #52]	; 0x34
 800ed84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed86:	2401      	movs	r4, #1
 800ed88:	2b09      	cmp	r3, #9
 800ed8a:	d867      	bhi.n	800ee5c <_dtoa_r+0x268>
 800ed8c:	2b05      	cmp	r3, #5
 800ed8e:	dd02      	ble.n	800ed96 <_dtoa_r+0x1a2>
 800ed90:	2400      	movs	r4, #0
 800ed92:	3b04      	subs	r3, #4
 800ed94:	9322      	str	r3, [sp, #136]	; 0x88
 800ed96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed98:	1e98      	subs	r0, r3, #2
 800ed9a:	2803      	cmp	r0, #3
 800ed9c:	d867      	bhi.n	800ee6e <_dtoa_r+0x27a>
 800ed9e:	f7f1 f9b9 	bl	8000114 <__gnu_thumb1_case_uqi>
 800eda2:	3a2b      	.short	0x3a2b
 800eda4:	5b38      	.short	0x5b38
 800eda6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eda8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800edaa:	18f6      	adds	r6, r6, r3
 800edac:	4b65      	ldr	r3, [pc, #404]	; (800ef44 <_dtoa_r+0x350>)
 800edae:	18f2      	adds	r2, r6, r3
 800edb0:	2a20      	cmp	r2, #32
 800edb2:	dd0f      	ble.n	800edd4 <_dtoa_r+0x1e0>
 800edb4:	2340      	movs	r3, #64	; 0x40
 800edb6:	1a9b      	subs	r3, r3, r2
 800edb8:	409f      	lsls	r7, r3
 800edba:	4b63      	ldr	r3, [pc, #396]	; (800ef48 <_dtoa_r+0x354>)
 800edbc:	0038      	movs	r0, r7
 800edbe:	18f3      	adds	r3, r6, r3
 800edc0:	40dc      	lsrs	r4, r3
 800edc2:	4320      	orrs	r0, r4
 800edc4:	f7f3 fb1a 	bl	80023fc <__aeabi_ui2d>
 800edc8:	2201      	movs	r2, #1
 800edca:	4b60      	ldr	r3, [pc, #384]	; (800ef4c <_dtoa_r+0x358>)
 800edcc:	1e77      	subs	r7, r6, #1
 800edce:	18cb      	adds	r3, r1, r3
 800edd0:	9217      	str	r2, [sp, #92]	; 0x5c
 800edd2:	e776      	b.n	800ecc2 <_dtoa_r+0xce>
 800edd4:	2320      	movs	r3, #32
 800edd6:	0020      	movs	r0, r4
 800edd8:	1a9b      	subs	r3, r3, r2
 800edda:	4098      	lsls	r0, r3
 800eddc:	e7f2      	b.n	800edc4 <_dtoa_r+0x1d0>
 800edde:	9016      	str	r0, [sp, #88]	; 0x58
 800ede0:	e7ba      	b.n	800ed58 <_dtoa_r+0x164>
 800ede2:	920c      	str	r2, [sp, #48]	; 0x30
 800ede4:	e7c3      	b.n	800ed6e <_dtoa_r+0x17a>
 800ede6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ede8:	9a03      	ldr	r2, [sp, #12]
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	930a      	str	r3, [sp, #40]	; 0x28
 800edee:	4253      	negs	r3, r2
 800edf0:	930d      	str	r3, [sp, #52]	; 0x34
 800edf2:	2300      	movs	r3, #0
 800edf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800edf6:	e7c5      	b.n	800ed84 <_dtoa_r+0x190>
 800edf8:	2300      	movs	r3, #0
 800edfa:	930f      	str	r3, [sp, #60]	; 0x3c
 800edfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800edfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee00:	9307      	str	r3, [sp, #28]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dc13      	bgt.n	800ee2e <_dtoa_r+0x23a>
 800ee06:	2301      	movs	r3, #1
 800ee08:	001a      	movs	r2, r3
 800ee0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee0c:	9307      	str	r3, [sp, #28]
 800ee0e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ee10:	e00d      	b.n	800ee2e <_dtoa_r+0x23a>
 800ee12:	2301      	movs	r3, #1
 800ee14:	e7f1      	b.n	800edfa <_dtoa_r+0x206>
 800ee16:	2300      	movs	r3, #0
 800ee18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ee1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee1c:	4694      	mov	ip, r2
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	4463      	add	r3, ip
 800ee22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee24:	3301      	adds	r3, #1
 800ee26:	9307      	str	r3, [sp, #28]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dc00      	bgt.n	800ee2e <_dtoa_r+0x23a>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	2100      	movs	r1, #0
 800ee30:	2204      	movs	r2, #4
 800ee32:	0010      	movs	r0, r2
 800ee34:	3014      	adds	r0, #20
 800ee36:	4298      	cmp	r0, r3
 800ee38:	d91d      	bls.n	800ee76 <_dtoa_r+0x282>
 800ee3a:	9b04      	ldr	r3, [sp, #16]
 800ee3c:	0018      	movs	r0, r3
 800ee3e:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ee40:	f7fc fb18 	bl	800b474 <_Balloc>
 800ee44:	9006      	str	r0, [sp, #24]
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d118      	bne.n	800ee7c <_dtoa_r+0x288>
 800ee4a:	21b0      	movs	r1, #176	; 0xb0
 800ee4c:	4b40      	ldr	r3, [pc, #256]	; (800ef50 <_dtoa_r+0x35c>)
 800ee4e:	4841      	ldr	r0, [pc, #260]	; (800ef54 <_dtoa_r+0x360>)
 800ee50:	9a06      	ldr	r2, [sp, #24]
 800ee52:	31ff      	adds	r1, #255	; 0xff
 800ee54:	f7ff fdd2 	bl	800e9fc <__assert_func>
 800ee58:	2301      	movs	r3, #1
 800ee5a:	e7dd      	b.n	800ee18 <_dtoa_r+0x224>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	940f      	str	r4, [sp, #60]	; 0x3c
 800ee60:	9322      	str	r3, [sp, #136]	; 0x88
 800ee62:	3b01      	subs	r3, #1
 800ee64:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee66:	9307      	str	r3, [sp, #28]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	3313      	adds	r3, #19
 800ee6c:	e7cf      	b.n	800ee0e <_dtoa_r+0x21a>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee72:	3b02      	subs	r3, #2
 800ee74:	e7f6      	b.n	800ee64 <_dtoa_r+0x270>
 800ee76:	3101      	adds	r1, #1
 800ee78:	0052      	lsls	r2, r2, #1
 800ee7a:	e7da      	b.n	800ee32 <_dtoa_r+0x23e>
 800ee7c:	9b04      	ldr	r3, [sp, #16]
 800ee7e:	9a06      	ldr	r2, [sp, #24]
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38
 800ee82:	9b07      	ldr	r3, [sp, #28]
 800ee84:	2b0e      	cmp	r3, #14
 800ee86:	d900      	bls.n	800ee8a <_dtoa_r+0x296>
 800ee88:	e0e3      	b.n	800f052 <_dtoa_r+0x45e>
 800ee8a:	2c00      	cmp	r4, #0
 800ee8c:	d100      	bne.n	800ee90 <_dtoa_r+0x29c>
 800ee8e:	e0e0      	b.n	800f052 <_dtoa_r+0x45e>
 800ee90:	9b03      	ldr	r3, [sp, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	dd62      	ble.n	800ef5c <_dtoa_r+0x368>
 800ee96:	210f      	movs	r1, #15
 800ee98:	9a03      	ldr	r2, [sp, #12]
 800ee9a:	4b29      	ldr	r3, [pc, #164]	; (800ef40 <_dtoa_r+0x34c>)
 800ee9c:	400a      	ands	r2, r1
 800ee9e:	00d2      	lsls	r2, r2, #3
 800eea0:	189b      	adds	r3, r3, r2
 800eea2:	681e      	ldr	r6, [r3, #0]
 800eea4:	685f      	ldr	r7, [r3, #4]
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	2402      	movs	r4, #2
 800eeaa:	111d      	asrs	r5, r3, #4
 800eeac:	05db      	lsls	r3, r3, #23
 800eeae:	d50a      	bpl.n	800eec6 <_dtoa_r+0x2d2>
 800eeb0:	4b29      	ldr	r3, [pc, #164]	; (800ef58 <_dtoa_r+0x364>)
 800eeb2:	400d      	ands	r5, r1
 800eeb4:	6a1a      	ldr	r2, [r3, #32]
 800eeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eeba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eebc:	f7f1 ffdc 	bl	8000e78 <__aeabi_ddiv>
 800eec0:	9008      	str	r0, [sp, #32]
 800eec2:	9109      	str	r1, [sp, #36]	; 0x24
 800eec4:	3401      	adds	r4, #1
 800eec6:	4b24      	ldr	r3, [pc, #144]	; (800ef58 <_dtoa_r+0x364>)
 800eec8:	930e      	str	r3, [sp, #56]	; 0x38
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	d108      	bne.n	800eee0 <_dtoa_r+0x2ec>
 800eece:	9808      	ldr	r0, [sp, #32]
 800eed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eed2:	0032      	movs	r2, r6
 800eed4:	003b      	movs	r3, r7
 800eed6:	f7f1 ffcf 	bl	8000e78 <__aeabi_ddiv>
 800eeda:	9008      	str	r0, [sp, #32]
 800eedc:	9109      	str	r1, [sp, #36]	; 0x24
 800eede:	e058      	b.n	800ef92 <_dtoa_r+0x39e>
 800eee0:	2301      	movs	r3, #1
 800eee2:	421d      	tst	r5, r3
 800eee4:	d009      	beq.n	800eefa <_dtoa_r+0x306>
 800eee6:	18e4      	adds	r4, r4, r3
 800eee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeea:	0030      	movs	r0, r6
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	0039      	movs	r1, r7
 800eef2:	f7f2 fbbb 	bl	800166c <__aeabi_dmul>
 800eef6:	0006      	movs	r6, r0
 800eef8:	000f      	movs	r7, r1
 800eefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eefc:	106d      	asrs	r5, r5, #1
 800eefe:	3308      	adds	r3, #8
 800ef00:	e7e2      	b.n	800eec8 <_dtoa_r+0x2d4>
 800ef02:	46c0      	nop			; (mov r8, r8)
 800ef04:	7ff00000 	.word	0x7ff00000
 800ef08:	0000270f 	.word	0x0000270f
 800ef0c:	0801316d 	.word	0x0801316d
 800ef10:	08013170 	.word	0x08013170
 800ef14:	080130de 	.word	0x080130de
 800ef18:	080130df 	.word	0x080130df
 800ef1c:	3ff00000 	.word	0x3ff00000
 800ef20:	fffffc01 	.word	0xfffffc01
 800ef24:	3ff80000 	.word	0x3ff80000
 800ef28:	636f4361 	.word	0x636f4361
 800ef2c:	3fd287a7 	.word	0x3fd287a7
 800ef30:	8b60c8b3 	.word	0x8b60c8b3
 800ef34:	3fc68a28 	.word	0x3fc68a28
 800ef38:	509f79fb 	.word	0x509f79fb
 800ef3c:	3fd34413 	.word	0x3fd34413
 800ef40:	08012fd8 	.word	0x08012fd8
 800ef44:	00000432 	.word	0x00000432
 800ef48:	00000412 	.word	0x00000412
 800ef4c:	fe100000 	.word	0xfe100000
 800ef50:	08012ee1 	.word	0x08012ee1
 800ef54:	08013171 	.word	0x08013171
 800ef58:	08012fb0 	.word	0x08012fb0
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	2402      	movs	r4, #2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d016      	beq.n	800ef92 <_dtoa_r+0x39e>
 800ef64:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef68:	220f      	movs	r2, #15
 800ef6a:	425d      	negs	r5, r3
 800ef6c:	402a      	ands	r2, r5
 800ef6e:	4bdd      	ldr	r3, [pc, #884]	; (800f2e4 <_dtoa_r+0x6f0>)
 800ef70:	00d2      	lsls	r2, r2, #3
 800ef72:	189b      	adds	r3, r3, r2
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f7f2 fb78 	bl	800166c <__aeabi_dmul>
 800ef7c:	2701      	movs	r7, #1
 800ef7e:	2300      	movs	r3, #0
 800ef80:	9008      	str	r0, [sp, #32]
 800ef82:	9109      	str	r1, [sp, #36]	; 0x24
 800ef84:	4ed8      	ldr	r6, [pc, #864]	; (800f2e8 <_dtoa_r+0x6f4>)
 800ef86:	112d      	asrs	r5, r5, #4
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	d000      	beq.n	800ef8e <_dtoa_r+0x39a>
 800ef8c:	e091      	b.n	800f0b2 <_dtoa_r+0x4be>
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1a3      	bne.n	800eeda <_dtoa_r+0x2e6>
 800ef92:	9e08      	ldr	r6, [sp, #32]
 800ef94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d100      	bne.n	800ef9e <_dtoa_r+0x3aa>
 800ef9c:	e094      	b.n	800f0c8 <_dtoa_r+0x4d4>
 800ef9e:	2200      	movs	r2, #0
 800efa0:	0030      	movs	r0, r6
 800efa2:	0039      	movs	r1, r7
 800efa4:	4bd1      	ldr	r3, [pc, #836]	; (800f2ec <_dtoa_r+0x6f8>)
 800efa6:	f7f1 fa55 	bl	8000454 <__aeabi_dcmplt>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d100      	bne.n	800efb0 <_dtoa_r+0x3bc>
 800efae:	e08b      	b.n	800f0c8 <_dtoa_r+0x4d4>
 800efb0:	9b07      	ldr	r3, [sp, #28]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d100      	bne.n	800efb8 <_dtoa_r+0x3c4>
 800efb6:	e087      	b.n	800f0c8 <_dtoa_r+0x4d4>
 800efb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efba:	2b00      	cmp	r3, #0
 800efbc:	dd45      	ble.n	800f04a <_dtoa_r+0x456>
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	3b01      	subs	r3, #1
 800efc4:	930e      	str	r3, [sp, #56]	; 0x38
 800efc6:	0030      	movs	r0, r6
 800efc8:	4bc9      	ldr	r3, [pc, #804]	; (800f2f0 <_dtoa_r+0x6fc>)
 800efca:	0039      	movs	r1, r7
 800efcc:	f7f2 fb4e 	bl	800166c <__aeabi_dmul>
 800efd0:	9008      	str	r0, [sp, #32]
 800efd2:	9109      	str	r1, [sp, #36]	; 0x24
 800efd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efd6:	3401      	adds	r4, #1
 800efd8:	0020      	movs	r0, r4
 800efda:	9e08      	ldr	r6, [sp, #32]
 800efdc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800efde:	9312      	str	r3, [sp, #72]	; 0x48
 800efe0:	f7f3 f9dc 	bl	800239c <__aeabi_i2d>
 800efe4:	0032      	movs	r2, r6
 800efe6:	003b      	movs	r3, r7
 800efe8:	f7f2 fb40 	bl	800166c <__aeabi_dmul>
 800efec:	2200      	movs	r2, #0
 800efee:	4bc1      	ldr	r3, [pc, #772]	; (800f2f4 <_dtoa_r+0x700>)
 800eff0:	f7f1 fbe2 	bl	80007b8 <__aeabi_dadd>
 800eff4:	4ac0      	ldr	r2, [pc, #768]	; (800f2f8 <_dtoa_r+0x704>)
 800eff6:	9014      	str	r0, [sp, #80]	; 0x50
 800eff8:	9115      	str	r1, [sp, #84]	; 0x54
 800effa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800effc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800effe:	4694      	mov	ip, r2
 800f000:	9308      	str	r3, [sp, #32]
 800f002:	9409      	str	r4, [sp, #36]	; 0x24
 800f004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f006:	4463      	add	r3, ip
 800f008:	9318      	str	r3, [sp, #96]	; 0x60
 800f00a:	9309      	str	r3, [sp, #36]	; 0x24
 800f00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d15e      	bne.n	800f0d0 <_dtoa_r+0x4dc>
 800f012:	2200      	movs	r2, #0
 800f014:	4bb9      	ldr	r3, [pc, #740]	; (800f2fc <_dtoa_r+0x708>)
 800f016:	0030      	movs	r0, r6
 800f018:	0039      	movs	r1, r7
 800f01a:	f7f2 fde9 	bl	8001bf0 <__aeabi_dsub>
 800f01e:	9a08      	ldr	r2, [sp, #32]
 800f020:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f022:	0004      	movs	r4, r0
 800f024:	000d      	movs	r5, r1
 800f026:	f7f1 fa29 	bl	800047c <__aeabi_dcmpgt>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d000      	beq.n	800f030 <_dtoa_r+0x43c>
 800f02e:	e2b3      	b.n	800f598 <_dtoa_r+0x9a4>
 800f030:	48b3      	ldr	r0, [pc, #716]	; (800f300 <_dtoa_r+0x70c>)
 800f032:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f034:	4684      	mov	ip, r0
 800f036:	4461      	add	r1, ip
 800f038:	000b      	movs	r3, r1
 800f03a:	0020      	movs	r0, r4
 800f03c:	0029      	movs	r1, r5
 800f03e:	9a08      	ldr	r2, [sp, #32]
 800f040:	f7f1 fa08 	bl	8000454 <__aeabi_dcmplt>
 800f044:	2800      	cmp	r0, #0
 800f046:	d000      	beq.n	800f04a <_dtoa_r+0x456>
 800f048:	e2a3      	b.n	800f592 <_dtoa_r+0x99e>
 800f04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f04c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f04e:	9308      	str	r3, [sp, #32]
 800f050:	9409      	str	r4, [sp, #36]	; 0x24
 800f052:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f054:	2b00      	cmp	r3, #0
 800f056:	da00      	bge.n	800f05a <_dtoa_r+0x466>
 800f058:	e179      	b.n	800f34e <_dtoa_r+0x75a>
 800f05a:	9a03      	ldr	r2, [sp, #12]
 800f05c:	2a0e      	cmp	r2, #14
 800f05e:	dd00      	ble.n	800f062 <_dtoa_r+0x46e>
 800f060:	e175      	b.n	800f34e <_dtoa_r+0x75a>
 800f062:	4ba0      	ldr	r3, [pc, #640]	; (800f2e4 <_dtoa_r+0x6f0>)
 800f064:	00d2      	lsls	r2, r2, #3
 800f066:	189b      	adds	r3, r3, r2
 800f068:	681e      	ldr	r6, [r3, #0]
 800f06a:	685f      	ldr	r7, [r3, #4]
 800f06c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f06e:	2b00      	cmp	r3, #0
 800f070:	db00      	blt.n	800f074 <_dtoa_r+0x480>
 800f072:	e0e5      	b.n	800f240 <_dtoa_r+0x64c>
 800f074:	9b07      	ldr	r3, [sp, #28]
 800f076:	2b00      	cmp	r3, #0
 800f078:	dd00      	ble.n	800f07c <_dtoa_r+0x488>
 800f07a:	e0e1      	b.n	800f240 <_dtoa_r+0x64c>
 800f07c:	d000      	beq.n	800f080 <_dtoa_r+0x48c>
 800f07e:	e288      	b.n	800f592 <_dtoa_r+0x99e>
 800f080:	2200      	movs	r2, #0
 800f082:	0030      	movs	r0, r6
 800f084:	0039      	movs	r1, r7
 800f086:	4b9d      	ldr	r3, [pc, #628]	; (800f2fc <_dtoa_r+0x708>)
 800f088:	f7f2 faf0 	bl	800166c <__aeabi_dmul>
 800f08c:	9a08      	ldr	r2, [sp, #32]
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	f7f1 f9fe 	bl	8000490 <__aeabi_dcmpge>
 800f094:	9e07      	ldr	r6, [sp, #28]
 800f096:	0037      	movs	r7, r6
 800f098:	2800      	cmp	r0, #0
 800f09a:	d000      	beq.n	800f09e <_dtoa_r+0x4aa>
 800f09c:	e25f      	b.n	800f55e <_dtoa_r+0x96a>
 800f09e:	9b06      	ldr	r3, [sp, #24]
 800f0a0:	9a06      	ldr	r2, [sp, #24]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	9308      	str	r3, [sp, #32]
 800f0a6:	2331      	movs	r3, #49	; 0x31
 800f0a8:	7013      	strb	r3, [r2, #0]
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	e25a      	b.n	800f568 <_dtoa_r+0x974>
 800f0b2:	423d      	tst	r5, r7
 800f0b4:	d005      	beq.n	800f0c2 <_dtoa_r+0x4ce>
 800f0b6:	6832      	ldr	r2, [r6, #0]
 800f0b8:	6873      	ldr	r3, [r6, #4]
 800f0ba:	f7f2 fad7 	bl	800166c <__aeabi_dmul>
 800f0be:	003b      	movs	r3, r7
 800f0c0:	3401      	adds	r4, #1
 800f0c2:	106d      	asrs	r5, r5, #1
 800f0c4:	3608      	adds	r6, #8
 800f0c6:	e75f      	b.n	800ef88 <_dtoa_r+0x394>
 800f0c8:	9b03      	ldr	r3, [sp, #12]
 800f0ca:	930e      	str	r3, [sp, #56]	; 0x38
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	e783      	b.n	800efd8 <_dtoa_r+0x3e4>
 800f0d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0d2:	4b84      	ldr	r3, [pc, #528]	; (800f2e4 <_dtoa_r+0x6f0>)
 800f0d4:	3a01      	subs	r2, #1
 800f0d6:	00d2      	lsls	r2, r2, #3
 800f0d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0da:	189b      	adds	r3, r3, r2
 800f0dc:	9c08      	ldr	r4, [sp, #32]
 800f0de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	d051      	beq.n	800f18c <_dtoa_r+0x598>
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4986      	ldr	r1, [pc, #536]	; (800f304 <_dtoa_r+0x710>)
 800f0ec:	f7f1 fec4 	bl	8000e78 <__aeabi_ddiv>
 800f0f0:	0022      	movs	r2, r4
 800f0f2:	002b      	movs	r3, r5
 800f0f4:	f7f2 fd7c 	bl	8001bf0 <__aeabi_dsub>
 800f0f8:	9a06      	ldr	r2, [sp, #24]
 800f0fa:	0004      	movs	r4, r0
 800f0fc:	4694      	mov	ip, r2
 800f0fe:	000d      	movs	r5, r1
 800f100:	9b06      	ldr	r3, [sp, #24]
 800f102:	9314      	str	r3, [sp, #80]	; 0x50
 800f104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f106:	4463      	add	r3, ip
 800f108:	9318      	str	r3, [sp, #96]	; 0x60
 800f10a:	0039      	movs	r1, r7
 800f10c:	0030      	movs	r0, r6
 800f10e:	f7f3 f90f 	bl	8002330 <__aeabi_d2iz>
 800f112:	9012      	str	r0, [sp, #72]	; 0x48
 800f114:	f7f3 f942 	bl	800239c <__aeabi_i2d>
 800f118:	0002      	movs	r2, r0
 800f11a:	000b      	movs	r3, r1
 800f11c:	0030      	movs	r0, r6
 800f11e:	0039      	movs	r1, r7
 800f120:	f7f2 fd66 	bl	8001bf0 <__aeabi_dsub>
 800f124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f126:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f128:	3301      	adds	r3, #1
 800f12a:	9308      	str	r3, [sp, #32]
 800f12c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f12e:	0006      	movs	r6, r0
 800f130:	3330      	adds	r3, #48	; 0x30
 800f132:	7013      	strb	r3, [r2, #0]
 800f134:	0022      	movs	r2, r4
 800f136:	002b      	movs	r3, r5
 800f138:	000f      	movs	r7, r1
 800f13a:	f7f1 f98b 	bl	8000454 <__aeabi_dcmplt>
 800f13e:	2800      	cmp	r0, #0
 800f140:	d174      	bne.n	800f22c <_dtoa_r+0x638>
 800f142:	0032      	movs	r2, r6
 800f144:	003b      	movs	r3, r7
 800f146:	2000      	movs	r0, #0
 800f148:	4968      	ldr	r1, [pc, #416]	; (800f2ec <_dtoa_r+0x6f8>)
 800f14a:	f7f2 fd51 	bl	8001bf0 <__aeabi_dsub>
 800f14e:	0022      	movs	r2, r4
 800f150:	002b      	movs	r3, r5
 800f152:	f7f1 f97f 	bl	8000454 <__aeabi_dcmplt>
 800f156:	2800      	cmp	r0, #0
 800f158:	d000      	beq.n	800f15c <_dtoa_r+0x568>
 800f15a:	e0d7      	b.n	800f30c <_dtoa_r+0x718>
 800f15c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f15e:	9a08      	ldr	r2, [sp, #32]
 800f160:	4293      	cmp	r3, r2
 800f162:	d100      	bne.n	800f166 <_dtoa_r+0x572>
 800f164:	e771      	b.n	800f04a <_dtoa_r+0x456>
 800f166:	2200      	movs	r2, #0
 800f168:	0020      	movs	r0, r4
 800f16a:	0029      	movs	r1, r5
 800f16c:	4b60      	ldr	r3, [pc, #384]	; (800f2f0 <_dtoa_r+0x6fc>)
 800f16e:	f7f2 fa7d 	bl	800166c <__aeabi_dmul>
 800f172:	4b5f      	ldr	r3, [pc, #380]	; (800f2f0 <_dtoa_r+0x6fc>)
 800f174:	0004      	movs	r4, r0
 800f176:	000d      	movs	r5, r1
 800f178:	0030      	movs	r0, r6
 800f17a:	0039      	movs	r1, r7
 800f17c:	2200      	movs	r2, #0
 800f17e:	f7f2 fa75 	bl	800166c <__aeabi_dmul>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	0006      	movs	r6, r0
 800f186:	000f      	movs	r7, r1
 800f188:	9314      	str	r3, [sp, #80]	; 0x50
 800f18a:	e7be      	b.n	800f10a <_dtoa_r+0x516>
 800f18c:	0020      	movs	r0, r4
 800f18e:	0029      	movs	r1, r5
 800f190:	f7f2 fa6c 	bl	800166c <__aeabi_dmul>
 800f194:	9a06      	ldr	r2, [sp, #24]
 800f196:	9b06      	ldr	r3, [sp, #24]
 800f198:	4694      	mov	ip, r2
 800f19a:	9308      	str	r3, [sp, #32]
 800f19c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f19e:	9014      	str	r0, [sp, #80]	; 0x50
 800f1a0:	9115      	str	r1, [sp, #84]	; 0x54
 800f1a2:	4463      	add	r3, ip
 800f1a4:	9319      	str	r3, [sp, #100]	; 0x64
 800f1a6:	0030      	movs	r0, r6
 800f1a8:	0039      	movs	r1, r7
 800f1aa:	f7f3 f8c1 	bl	8002330 <__aeabi_d2iz>
 800f1ae:	9018      	str	r0, [sp, #96]	; 0x60
 800f1b0:	f7f3 f8f4 	bl	800239c <__aeabi_i2d>
 800f1b4:	0002      	movs	r2, r0
 800f1b6:	000b      	movs	r3, r1
 800f1b8:	0030      	movs	r0, r6
 800f1ba:	0039      	movs	r1, r7
 800f1bc:	f7f2 fd18 	bl	8001bf0 <__aeabi_dsub>
 800f1c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f1c2:	9b08      	ldr	r3, [sp, #32]
 800f1c4:	3630      	adds	r6, #48	; 0x30
 800f1c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f1c8:	701e      	strb	r6, [r3, #0]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	0004      	movs	r4, r0
 800f1ce:	000d      	movs	r5, r1
 800f1d0:	9308      	str	r3, [sp, #32]
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d12d      	bne.n	800f232 <_dtoa_r+0x63e>
 800f1d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f1d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f1da:	9a06      	ldr	r2, [sp, #24]
 800f1dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1de:	4694      	mov	ip, r2
 800f1e0:	4463      	add	r3, ip
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	9308      	str	r3, [sp, #32]
 800f1e6:	4b47      	ldr	r3, [pc, #284]	; (800f304 <_dtoa_r+0x710>)
 800f1e8:	f7f1 fae6 	bl	80007b8 <__aeabi_dadd>
 800f1ec:	0002      	movs	r2, r0
 800f1ee:	000b      	movs	r3, r1
 800f1f0:	0020      	movs	r0, r4
 800f1f2:	0029      	movs	r1, r5
 800f1f4:	f7f1 f942 	bl	800047c <__aeabi_dcmpgt>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d000      	beq.n	800f1fe <_dtoa_r+0x60a>
 800f1fc:	e086      	b.n	800f30c <_dtoa_r+0x718>
 800f1fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f202:	2000      	movs	r0, #0
 800f204:	493f      	ldr	r1, [pc, #252]	; (800f304 <_dtoa_r+0x710>)
 800f206:	f7f2 fcf3 	bl	8001bf0 <__aeabi_dsub>
 800f20a:	0002      	movs	r2, r0
 800f20c:	000b      	movs	r3, r1
 800f20e:	0020      	movs	r0, r4
 800f210:	0029      	movs	r1, r5
 800f212:	f7f1 f91f 	bl	8000454 <__aeabi_dcmplt>
 800f216:	2800      	cmp	r0, #0
 800f218:	d100      	bne.n	800f21c <_dtoa_r+0x628>
 800f21a:	e716      	b.n	800f04a <_dtoa_r+0x456>
 800f21c:	9b08      	ldr	r3, [sp, #32]
 800f21e:	001a      	movs	r2, r3
 800f220:	3a01      	subs	r2, #1
 800f222:	9208      	str	r2, [sp, #32]
 800f224:	7812      	ldrb	r2, [r2, #0]
 800f226:	2a30      	cmp	r2, #48	; 0x30
 800f228:	d0f8      	beq.n	800f21c <_dtoa_r+0x628>
 800f22a:	9308      	str	r3, [sp, #32]
 800f22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	e046      	b.n	800f2c0 <_dtoa_r+0x6cc>
 800f232:	2200      	movs	r2, #0
 800f234:	4b2e      	ldr	r3, [pc, #184]	; (800f2f0 <_dtoa_r+0x6fc>)
 800f236:	f7f2 fa19 	bl	800166c <__aeabi_dmul>
 800f23a:	0006      	movs	r6, r0
 800f23c:	000f      	movs	r7, r1
 800f23e:	e7b2      	b.n	800f1a6 <_dtoa_r+0x5b2>
 800f240:	9b06      	ldr	r3, [sp, #24]
 800f242:	9a06      	ldr	r2, [sp, #24]
 800f244:	930a      	str	r3, [sp, #40]	; 0x28
 800f246:	9b07      	ldr	r3, [sp, #28]
 800f248:	9c08      	ldr	r4, [sp, #32]
 800f24a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f24c:	3b01      	subs	r3, #1
 800f24e:	189b      	adds	r3, r3, r2
 800f250:	930b      	str	r3, [sp, #44]	; 0x2c
 800f252:	0032      	movs	r2, r6
 800f254:	003b      	movs	r3, r7
 800f256:	0020      	movs	r0, r4
 800f258:	0029      	movs	r1, r5
 800f25a:	f7f1 fe0d 	bl	8000e78 <__aeabi_ddiv>
 800f25e:	f7f3 f867 	bl	8002330 <__aeabi_d2iz>
 800f262:	9007      	str	r0, [sp, #28]
 800f264:	f7f3 f89a 	bl	800239c <__aeabi_i2d>
 800f268:	0032      	movs	r2, r6
 800f26a:	003b      	movs	r3, r7
 800f26c:	f7f2 f9fe 	bl	800166c <__aeabi_dmul>
 800f270:	0002      	movs	r2, r0
 800f272:	000b      	movs	r3, r1
 800f274:	0020      	movs	r0, r4
 800f276:	0029      	movs	r1, r5
 800f278:	f7f2 fcba 	bl	8001bf0 <__aeabi_dsub>
 800f27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f27e:	001a      	movs	r2, r3
 800f280:	3201      	adds	r2, #1
 800f282:	920a      	str	r2, [sp, #40]	; 0x28
 800f284:	9208      	str	r2, [sp, #32]
 800f286:	9a07      	ldr	r2, [sp, #28]
 800f288:	3230      	adds	r2, #48	; 0x30
 800f28a:	701a      	strb	r2, [r3, #0]
 800f28c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f28e:	429a      	cmp	r2, r3
 800f290:	d14f      	bne.n	800f332 <_dtoa_r+0x73e>
 800f292:	0002      	movs	r2, r0
 800f294:	000b      	movs	r3, r1
 800f296:	f7f1 fa8f 	bl	80007b8 <__aeabi_dadd>
 800f29a:	0032      	movs	r2, r6
 800f29c:	003b      	movs	r3, r7
 800f29e:	0004      	movs	r4, r0
 800f2a0:	000d      	movs	r5, r1
 800f2a2:	f7f1 f8eb 	bl	800047c <__aeabi_dcmpgt>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d12e      	bne.n	800f308 <_dtoa_r+0x714>
 800f2aa:	0032      	movs	r2, r6
 800f2ac:	003b      	movs	r3, r7
 800f2ae:	0020      	movs	r0, r4
 800f2b0:	0029      	movs	r1, r5
 800f2b2:	f7f1 f8c9 	bl	8000448 <__aeabi_dcmpeq>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d002      	beq.n	800f2c0 <_dtoa_r+0x6cc>
 800f2ba:	9b07      	ldr	r3, [sp, #28]
 800f2bc:	07de      	lsls	r6, r3, #31
 800f2be:	d423      	bmi.n	800f308 <_dtoa_r+0x714>
 800f2c0:	9905      	ldr	r1, [sp, #20]
 800f2c2:	9804      	ldr	r0, [sp, #16]
 800f2c4:	f7fc f8fe 	bl	800b4c4 <_Bfree>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	7013      	strb	r3, [r2, #0]
 800f2ce:	9b03      	ldr	r3, [sp, #12]
 800f2d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d100      	bne.n	800f2de <_dtoa_r+0x6ea>
 800f2dc:	e4bd      	b.n	800ec5a <_dtoa_r+0x66>
 800f2de:	9a08      	ldr	r2, [sp, #32]
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	e4ba      	b.n	800ec5a <_dtoa_r+0x66>
 800f2e4:	08012fd8 	.word	0x08012fd8
 800f2e8:	08012fb0 	.word	0x08012fb0
 800f2ec:	3ff00000 	.word	0x3ff00000
 800f2f0:	40240000 	.word	0x40240000
 800f2f4:	401c0000 	.word	0x401c0000
 800f2f8:	fcc00000 	.word	0xfcc00000
 800f2fc:	40140000 	.word	0x40140000
 800f300:	7cc00000 	.word	0x7cc00000
 800f304:	3fe00000 	.word	0x3fe00000
 800f308:	9b03      	ldr	r3, [sp, #12]
 800f30a:	930e      	str	r3, [sp, #56]	; 0x38
 800f30c:	9b08      	ldr	r3, [sp, #32]
 800f30e:	9308      	str	r3, [sp, #32]
 800f310:	3b01      	subs	r3, #1
 800f312:	781a      	ldrb	r2, [r3, #0]
 800f314:	2a39      	cmp	r2, #57	; 0x39
 800f316:	d108      	bne.n	800f32a <_dtoa_r+0x736>
 800f318:	9a06      	ldr	r2, [sp, #24]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d1f7      	bne.n	800f30e <_dtoa_r+0x71a>
 800f31e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f320:	9906      	ldr	r1, [sp, #24]
 800f322:	3201      	adds	r2, #1
 800f324:	920e      	str	r2, [sp, #56]	; 0x38
 800f326:	2230      	movs	r2, #48	; 0x30
 800f328:	700a      	strb	r2, [r1, #0]
 800f32a:	781a      	ldrb	r2, [r3, #0]
 800f32c:	3201      	adds	r2, #1
 800f32e:	701a      	strb	r2, [r3, #0]
 800f330:	e77c      	b.n	800f22c <_dtoa_r+0x638>
 800f332:	2200      	movs	r2, #0
 800f334:	4ba9      	ldr	r3, [pc, #676]	; (800f5dc <_dtoa_r+0x9e8>)
 800f336:	f7f2 f999 	bl	800166c <__aeabi_dmul>
 800f33a:	2200      	movs	r2, #0
 800f33c:	2300      	movs	r3, #0
 800f33e:	0004      	movs	r4, r0
 800f340:	000d      	movs	r5, r1
 800f342:	f7f1 f881 	bl	8000448 <__aeabi_dcmpeq>
 800f346:	2800      	cmp	r0, #0
 800f348:	d100      	bne.n	800f34c <_dtoa_r+0x758>
 800f34a:	e782      	b.n	800f252 <_dtoa_r+0x65e>
 800f34c:	e7b8      	b.n	800f2c0 <_dtoa_r+0x6cc>
 800f34e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f350:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f354:	2f00      	cmp	r7, #0
 800f356:	d012      	beq.n	800f37e <_dtoa_r+0x78a>
 800f358:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f35a:	2a01      	cmp	r2, #1
 800f35c:	dc6e      	bgt.n	800f43c <_dtoa_r+0x848>
 800f35e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f360:	2a00      	cmp	r2, #0
 800f362:	d065      	beq.n	800f430 <_dtoa_r+0x83c>
 800f364:	4a9e      	ldr	r2, [pc, #632]	; (800f5e0 <_dtoa_r+0x9ec>)
 800f366:	189b      	adds	r3, r3, r2
 800f368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f36a:	2101      	movs	r1, #1
 800f36c:	18d2      	adds	r2, r2, r3
 800f36e:	920a      	str	r2, [sp, #40]	; 0x28
 800f370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f372:	9804      	ldr	r0, [sp, #16]
 800f374:	18d3      	adds	r3, r2, r3
 800f376:	930c      	str	r3, [sp, #48]	; 0x30
 800f378:	f7fc f986 	bl	800b688 <__i2b>
 800f37c:	0007      	movs	r7, r0
 800f37e:	2c00      	cmp	r4, #0
 800f380:	d00e      	beq.n	800f3a0 <_dtoa_r+0x7ac>
 800f382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f384:	2b00      	cmp	r3, #0
 800f386:	dd0b      	ble.n	800f3a0 <_dtoa_r+0x7ac>
 800f388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f38a:	0023      	movs	r3, r4
 800f38c:	4294      	cmp	r4, r2
 800f38e:	dd00      	ble.n	800f392 <_dtoa_r+0x79e>
 800f390:	0013      	movs	r3, r2
 800f392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f394:	1ae4      	subs	r4, r4, r3
 800f396:	1ad2      	subs	r2, r2, r3
 800f398:	920a      	str	r2, [sp, #40]	; 0x28
 800f39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f39c:	1ad3      	subs	r3, r2, r3
 800f39e:	930c      	str	r3, [sp, #48]	; 0x30
 800f3a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d01e      	beq.n	800f3e4 <_dtoa_r+0x7f0>
 800f3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d05c      	beq.n	800f466 <_dtoa_r+0x872>
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	dd10      	ble.n	800f3d2 <_dtoa_r+0x7de>
 800f3b0:	0039      	movs	r1, r7
 800f3b2:	002a      	movs	r2, r5
 800f3b4:	9804      	ldr	r0, [sp, #16]
 800f3b6:	f7fc fa2f 	bl	800b818 <__pow5mult>
 800f3ba:	9a05      	ldr	r2, [sp, #20]
 800f3bc:	0001      	movs	r1, r0
 800f3be:	0007      	movs	r7, r0
 800f3c0:	9804      	ldr	r0, [sp, #16]
 800f3c2:	f7fc f979 	bl	800b6b8 <__multiply>
 800f3c6:	0006      	movs	r6, r0
 800f3c8:	9905      	ldr	r1, [sp, #20]
 800f3ca:	9804      	ldr	r0, [sp, #16]
 800f3cc:	f7fc f87a 	bl	800b4c4 <_Bfree>
 800f3d0:	9605      	str	r6, [sp, #20]
 800f3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3d4:	1b5a      	subs	r2, r3, r5
 800f3d6:	42ab      	cmp	r3, r5
 800f3d8:	d004      	beq.n	800f3e4 <_dtoa_r+0x7f0>
 800f3da:	9905      	ldr	r1, [sp, #20]
 800f3dc:	9804      	ldr	r0, [sp, #16]
 800f3de:	f7fc fa1b 	bl	800b818 <__pow5mult>
 800f3e2:	9005      	str	r0, [sp, #20]
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	9804      	ldr	r0, [sp, #16]
 800f3e8:	f7fc f94e 	bl	800b688 <__i2b>
 800f3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f3ee:	0006      	movs	r6, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dd3a      	ble.n	800f46a <_dtoa_r+0x876>
 800f3f4:	001a      	movs	r2, r3
 800f3f6:	0001      	movs	r1, r0
 800f3f8:	9804      	ldr	r0, [sp, #16]
 800f3fa:	f7fc fa0d 	bl	800b818 <__pow5mult>
 800f3fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f400:	0006      	movs	r6, r0
 800f402:	2500      	movs	r5, #0
 800f404:	2b01      	cmp	r3, #1
 800f406:	dc38      	bgt.n	800f47a <_dtoa_r+0x886>
 800f408:	2500      	movs	r5, #0
 800f40a:	9b08      	ldr	r3, [sp, #32]
 800f40c:	42ab      	cmp	r3, r5
 800f40e:	d130      	bne.n	800f472 <_dtoa_r+0x87e>
 800f410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f412:	031b      	lsls	r3, r3, #12
 800f414:	42ab      	cmp	r3, r5
 800f416:	d12c      	bne.n	800f472 <_dtoa_r+0x87e>
 800f418:	4b72      	ldr	r3, [pc, #456]	; (800f5e4 <_dtoa_r+0x9f0>)
 800f41a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f41c:	4213      	tst	r3, r2
 800f41e:	d028      	beq.n	800f472 <_dtoa_r+0x87e>
 800f420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f422:	3501      	adds	r5, #1
 800f424:	3301      	adds	r3, #1
 800f426:	930a      	str	r3, [sp, #40]	; 0x28
 800f428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f42a:	3301      	adds	r3, #1
 800f42c:	930c      	str	r3, [sp, #48]	; 0x30
 800f42e:	e020      	b.n	800f472 <_dtoa_r+0x87e>
 800f430:	2336      	movs	r3, #54	; 0x36
 800f432:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f434:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f438:	1a9b      	subs	r3, r3, r2
 800f43a:	e795      	b.n	800f368 <_dtoa_r+0x774>
 800f43c:	9b07      	ldr	r3, [sp, #28]
 800f43e:	1e5d      	subs	r5, r3, #1
 800f440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f442:	42ab      	cmp	r3, r5
 800f444:	db07      	blt.n	800f456 <_dtoa_r+0x862>
 800f446:	1b5d      	subs	r5, r3, r5
 800f448:	9b07      	ldr	r3, [sp, #28]
 800f44a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	da8b      	bge.n	800f368 <_dtoa_r+0x774>
 800f450:	1ae4      	subs	r4, r4, r3
 800f452:	2300      	movs	r3, #0
 800f454:	e788      	b.n	800f368 <_dtoa_r+0x774>
 800f456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f45a:	1aeb      	subs	r3, r5, r3
 800f45c:	18d3      	adds	r3, r2, r3
 800f45e:	950d      	str	r5, [sp, #52]	; 0x34
 800f460:	9313      	str	r3, [sp, #76]	; 0x4c
 800f462:	2500      	movs	r5, #0
 800f464:	e7f0      	b.n	800f448 <_dtoa_r+0x854>
 800f466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f468:	e7b7      	b.n	800f3da <_dtoa_r+0x7e6>
 800f46a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f46c:	2500      	movs	r5, #0
 800f46e:	2b01      	cmp	r3, #1
 800f470:	ddca      	ble.n	800f408 <_dtoa_r+0x814>
 800f472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f474:	2001      	movs	r0, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	d008      	beq.n	800f48c <_dtoa_r+0x898>
 800f47a:	6933      	ldr	r3, [r6, #16]
 800f47c:	3303      	adds	r3, #3
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	18f3      	adds	r3, r6, r3
 800f482:	6858      	ldr	r0, [r3, #4]
 800f484:	f7fc f8b8 	bl	800b5f8 <__hi0bits>
 800f488:	2320      	movs	r3, #32
 800f48a:	1a18      	subs	r0, r3, r0
 800f48c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f48e:	1818      	adds	r0, r3, r0
 800f490:	0002      	movs	r2, r0
 800f492:	231f      	movs	r3, #31
 800f494:	401a      	ands	r2, r3
 800f496:	4218      	tst	r0, r3
 800f498:	d047      	beq.n	800f52a <_dtoa_r+0x936>
 800f49a:	3301      	adds	r3, #1
 800f49c:	1a9b      	subs	r3, r3, r2
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	dd3f      	ble.n	800f522 <_dtoa_r+0x92e>
 800f4a2:	231c      	movs	r3, #28
 800f4a4:	1a9b      	subs	r3, r3, r2
 800f4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4a8:	18e4      	adds	r4, r4, r3
 800f4aa:	18d2      	adds	r2, r2, r3
 800f4ac:	920a      	str	r2, [sp, #40]	; 0x28
 800f4ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4b0:	18d3      	adds	r3, r2, r3
 800f4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	dd05      	ble.n	800f4c6 <_dtoa_r+0x8d2>
 800f4ba:	001a      	movs	r2, r3
 800f4bc:	9905      	ldr	r1, [sp, #20]
 800f4be:	9804      	ldr	r0, [sp, #16]
 800f4c0:	f7fc f9ec 	bl	800b89c <__lshift>
 800f4c4:	9005      	str	r0, [sp, #20]
 800f4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dd05      	ble.n	800f4d8 <_dtoa_r+0x8e4>
 800f4cc:	0031      	movs	r1, r6
 800f4ce:	001a      	movs	r2, r3
 800f4d0:	9804      	ldr	r0, [sp, #16]
 800f4d2:	f7fc f9e3 	bl	800b89c <__lshift>
 800f4d6:	0006      	movs	r6, r0
 800f4d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d027      	beq.n	800f52e <_dtoa_r+0x93a>
 800f4de:	0031      	movs	r1, r6
 800f4e0:	9805      	ldr	r0, [sp, #20]
 800f4e2:	f7fc fa49 	bl	800b978 <__mcmp>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	da21      	bge.n	800f52e <_dtoa_r+0x93a>
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	220a      	movs	r2, #10
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	9905      	ldr	r1, [sp, #20]
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	9804      	ldr	r0, [sp, #16]
 800f4f8:	f7fb ffee 	bl	800b4d8 <__multadd>
 800f4fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4fe:	9005      	str	r0, [sp, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d100      	bne.n	800f506 <_dtoa_r+0x912>
 800f504:	e15d      	b.n	800f7c2 <_dtoa_r+0xbce>
 800f506:	2300      	movs	r3, #0
 800f508:	0039      	movs	r1, r7
 800f50a:	220a      	movs	r2, #10
 800f50c:	9804      	ldr	r0, [sp, #16]
 800f50e:	f7fb ffe3 	bl	800b4d8 <__multadd>
 800f512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f514:	0007      	movs	r7, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	dc49      	bgt.n	800f5ae <_dtoa_r+0x9ba>
 800f51a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	dc0e      	bgt.n	800f53e <_dtoa_r+0x94a>
 800f520:	e045      	b.n	800f5ae <_dtoa_r+0x9ba>
 800f522:	2b04      	cmp	r3, #4
 800f524:	d0c6      	beq.n	800f4b4 <_dtoa_r+0x8c0>
 800f526:	331c      	adds	r3, #28
 800f528:	e7bd      	b.n	800f4a6 <_dtoa_r+0x8b2>
 800f52a:	0013      	movs	r3, r2
 800f52c:	e7fb      	b.n	800f526 <_dtoa_r+0x932>
 800f52e:	9b07      	ldr	r3, [sp, #28]
 800f530:	2b00      	cmp	r3, #0
 800f532:	dc36      	bgt.n	800f5a2 <_dtoa_r+0x9ae>
 800f534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f536:	2b02      	cmp	r3, #2
 800f538:	dd33      	ble.n	800f5a2 <_dtoa_r+0x9ae>
 800f53a:	9b07      	ldr	r3, [sp, #28]
 800f53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10c      	bne.n	800f55e <_dtoa_r+0x96a>
 800f544:	0031      	movs	r1, r6
 800f546:	2205      	movs	r2, #5
 800f548:	9804      	ldr	r0, [sp, #16]
 800f54a:	f7fb ffc5 	bl	800b4d8 <__multadd>
 800f54e:	0006      	movs	r6, r0
 800f550:	0001      	movs	r1, r0
 800f552:	9805      	ldr	r0, [sp, #20]
 800f554:	f7fc fa10 	bl	800b978 <__mcmp>
 800f558:	2800      	cmp	r0, #0
 800f55a:	dd00      	ble.n	800f55e <_dtoa_r+0x96a>
 800f55c:	e59f      	b.n	800f09e <_dtoa_r+0x4aa>
 800f55e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f560:	43db      	mvns	r3, r3
 800f562:	9303      	str	r3, [sp, #12]
 800f564:	9b06      	ldr	r3, [sp, #24]
 800f566:	9308      	str	r3, [sp, #32]
 800f568:	2500      	movs	r5, #0
 800f56a:	0031      	movs	r1, r6
 800f56c:	9804      	ldr	r0, [sp, #16]
 800f56e:	f7fb ffa9 	bl	800b4c4 <_Bfree>
 800f572:	2f00      	cmp	r7, #0
 800f574:	d100      	bne.n	800f578 <_dtoa_r+0x984>
 800f576:	e6a3      	b.n	800f2c0 <_dtoa_r+0x6cc>
 800f578:	2d00      	cmp	r5, #0
 800f57a:	d005      	beq.n	800f588 <_dtoa_r+0x994>
 800f57c:	42bd      	cmp	r5, r7
 800f57e:	d003      	beq.n	800f588 <_dtoa_r+0x994>
 800f580:	0029      	movs	r1, r5
 800f582:	9804      	ldr	r0, [sp, #16]
 800f584:	f7fb ff9e 	bl	800b4c4 <_Bfree>
 800f588:	0039      	movs	r1, r7
 800f58a:	9804      	ldr	r0, [sp, #16]
 800f58c:	f7fb ff9a 	bl	800b4c4 <_Bfree>
 800f590:	e696      	b.n	800f2c0 <_dtoa_r+0x6cc>
 800f592:	2600      	movs	r6, #0
 800f594:	0037      	movs	r7, r6
 800f596:	e7e2      	b.n	800f55e <_dtoa_r+0x96a>
 800f598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f59a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f59c:	9303      	str	r3, [sp, #12]
 800f59e:	0037      	movs	r7, r6
 800f5a0:	e57d      	b.n	800f09e <_dtoa_r+0x4aa>
 800f5a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d100      	bne.n	800f5aa <_dtoa_r+0x9b6>
 800f5a8:	e0c3      	b.n	800f732 <_dtoa_r+0xb3e>
 800f5aa:	9b07      	ldr	r3, [sp, #28]
 800f5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ae:	2c00      	cmp	r4, #0
 800f5b0:	dd05      	ble.n	800f5be <_dtoa_r+0x9ca>
 800f5b2:	0039      	movs	r1, r7
 800f5b4:	0022      	movs	r2, r4
 800f5b6:	9804      	ldr	r0, [sp, #16]
 800f5b8:	f7fc f970 	bl	800b89c <__lshift>
 800f5bc:	0007      	movs	r7, r0
 800f5be:	0038      	movs	r0, r7
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	d024      	beq.n	800f60e <_dtoa_r+0xa1a>
 800f5c4:	6879      	ldr	r1, [r7, #4]
 800f5c6:	9804      	ldr	r0, [sp, #16]
 800f5c8:	f7fb ff54 	bl	800b474 <_Balloc>
 800f5cc:	1e04      	subs	r4, r0, #0
 800f5ce:	d111      	bne.n	800f5f4 <_dtoa_r+0xa00>
 800f5d0:	0022      	movs	r2, r4
 800f5d2:	4b05      	ldr	r3, [pc, #20]	; (800f5e8 <_dtoa_r+0x9f4>)
 800f5d4:	4805      	ldr	r0, [pc, #20]	; (800f5ec <_dtoa_r+0x9f8>)
 800f5d6:	4906      	ldr	r1, [pc, #24]	; (800f5f0 <_dtoa_r+0x9fc>)
 800f5d8:	e43c      	b.n	800ee54 <_dtoa_r+0x260>
 800f5da:	46c0      	nop			; (mov r8, r8)
 800f5dc:	40240000 	.word	0x40240000
 800f5e0:	00000433 	.word	0x00000433
 800f5e4:	7ff00000 	.word	0x7ff00000
 800f5e8:	08012ee1 	.word	0x08012ee1
 800f5ec:	08013171 	.word	0x08013171
 800f5f0:	000002ef 	.word	0x000002ef
 800f5f4:	0039      	movs	r1, r7
 800f5f6:	693a      	ldr	r2, [r7, #16]
 800f5f8:	310c      	adds	r1, #12
 800f5fa:	3202      	adds	r2, #2
 800f5fc:	0092      	lsls	r2, r2, #2
 800f5fe:	300c      	adds	r0, #12
 800f600:	f7fb fa9d 	bl	800ab3e <memcpy>
 800f604:	2201      	movs	r2, #1
 800f606:	0021      	movs	r1, r4
 800f608:	9804      	ldr	r0, [sp, #16]
 800f60a:	f7fc f947 	bl	800b89c <__lshift>
 800f60e:	9b06      	ldr	r3, [sp, #24]
 800f610:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f612:	9307      	str	r3, [sp, #28]
 800f614:	3b01      	subs	r3, #1
 800f616:	189b      	adds	r3, r3, r2
 800f618:	2201      	movs	r2, #1
 800f61a:	003d      	movs	r5, r7
 800f61c:	0007      	movs	r7, r0
 800f61e:	930e      	str	r3, [sp, #56]	; 0x38
 800f620:	9b08      	ldr	r3, [sp, #32]
 800f622:	4013      	ands	r3, r2
 800f624:	930d      	str	r3, [sp, #52]	; 0x34
 800f626:	0031      	movs	r1, r6
 800f628:	9805      	ldr	r0, [sp, #20]
 800f62a:	f7ff fa53 	bl	800ead4 <quorem>
 800f62e:	0029      	movs	r1, r5
 800f630:	0004      	movs	r4, r0
 800f632:	900b      	str	r0, [sp, #44]	; 0x2c
 800f634:	9805      	ldr	r0, [sp, #20]
 800f636:	f7fc f99f 	bl	800b978 <__mcmp>
 800f63a:	003a      	movs	r2, r7
 800f63c:	900c      	str	r0, [sp, #48]	; 0x30
 800f63e:	0031      	movs	r1, r6
 800f640:	9804      	ldr	r0, [sp, #16]
 800f642:	f7fc f9b5 	bl	800b9b0 <__mdiff>
 800f646:	2201      	movs	r2, #1
 800f648:	68c3      	ldr	r3, [r0, #12]
 800f64a:	3430      	adds	r4, #48	; 0x30
 800f64c:	9008      	str	r0, [sp, #32]
 800f64e:	920a      	str	r2, [sp, #40]	; 0x28
 800f650:	2b00      	cmp	r3, #0
 800f652:	d104      	bne.n	800f65e <_dtoa_r+0xa6a>
 800f654:	0001      	movs	r1, r0
 800f656:	9805      	ldr	r0, [sp, #20]
 800f658:	f7fc f98e 	bl	800b978 <__mcmp>
 800f65c:	900a      	str	r0, [sp, #40]	; 0x28
 800f65e:	9908      	ldr	r1, [sp, #32]
 800f660:	9804      	ldr	r0, [sp, #16]
 800f662:	f7fb ff2f 	bl	800b4c4 <_Bfree>
 800f666:	9b07      	ldr	r3, [sp, #28]
 800f668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f66a:	3301      	adds	r3, #1
 800f66c:	9308      	str	r3, [sp, #32]
 800f66e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f670:	4313      	orrs	r3, r2
 800f672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f674:	4313      	orrs	r3, r2
 800f676:	d109      	bne.n	800f68c <_dtoa_r+0xa98>
 800f678:	2c39      	cmp	r4, #57	; 0x39
 800f67a:	d022      	beq.n	800f6c2 <_dtoa_r+0xace>
 800f67c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dd01      	ble.n	800f686 <_dtoa_r+0xa92>
 800f682:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f684:	3431      	adds	r4, #49	; 0x31
 800f686:	9b07      	ldr	r3, [sp, #28]
 800f688:	701c      	strb	r4, [r3, #0]
 800f68a:	e76e      	b.n	800f56a <_dtoa_r+0x976>
 800f68c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f68e:	2b00      	cmp	r3, #0
 800f690:	db04      	blt.n	800f69c <_dtoa_r+0xaa8>
 800f692:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f694:	4313      	orrs	r3, r2
 800f696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f698:	4313      	orrs	r3, r2
 800f69a:	d11e      	bne.n	800f6da <_dtoa_r+0xae6>
 800f69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	ddf1      	ble.n	800f686 <_dtoa_r+0xa92>
 800f6a2:	9905      	ldr	r1, [sp, #20]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	9804      	ldr	r0, [sp, #16]
 800f6a8:	f7fc f8f8 	bl	800b89c <__lshift>
 800f6ac:	0031      	movs	r1, r6
 800f6ae:	9005      	str	r0, [sp, #20]
 800f6b0:	f7fc f962 	bl	800b978 <__mcmp>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	dc02      	bgt.n	800f6be <_dtoa_r+0xaca>
 800f6b8:	d1e5      	bne.n	800f686 <_dtoa_r+0xa92>
 800f6ba:	07e3      	lsls	r3, r4, #31
 800f6bc:	d5e3      	bpl.n	800f686 <_dtoa_r+0xa92>
 800f6be:	2c39      	cmp	r4, #57	; 0x39
 800f6c0:	d1df      	bne.n	800f682 <_dtoa_r+0xa8e>
 800f6c2:	2339      	movs	r3, #57	; 0x39
 800f6c4:	9a07      	ldr	r2, [sp, #28]
 800f6c6:	7013      	strb	r3, [r2, #0]
 800f6c8:	9b08      	ldr	r3, [sp, #32]
 800f6ca:	9308      	str	r3, [sp, #32]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	781a      	ldrb	r2, [r3, #0]
 800f6d0:	2a39      	cmp	r2, #57	; 0x39
 800f6d2:	d063      	beq.n	800f79c <_dtoa_r+0xba8>
 800f6d4:	3201      	adds	r2, #1
 800f6d6:	701a      	strb	r2, [r3, #0]
 800f6d8:	e747      	b.n	800f56a <_dtoa_r+0x976>
 800f6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dd03      	ble.n	800f6e8 <_dtoa_r+0xaf4>
 800f6e0:	2c39      	cmp	r4, #57	; 0x39
 800f6e2:	d0ee      	beq.n	800f6c2 <_dtoa_r+0xace>
 800f6e4:	3401      	adds	r4, #1
 800f6e6:	e7ce      	b.n	800f686 <_dtoa_r+0xa92>
 800f6e8:	9b07      	ldr	r3, [sp, #28]
 800f6ea:	9a07      	ldr	r2, [sp, #28]
 800f6ec:	701c      	strb	r4, [r3, #0]
 800f6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d03e      	beq.n	800f772 <_dtoa_r+0xb7e>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	220a      	movs	r2, #10
 800f6f8:	9905      	ldr	r1, [sp, #20]
 800f6fa:	9804      	ldr	r0, [sp, #16]
 800f6fc:	f7fb feec 	bl	800b4d8 <__multadd>
 800f700:	2300      	movs	r3, #0
 800f702:	9005      	str	r0, [sp, #20]
 800f704:	220a      	movs	r2, #10
 800f706:	0029      	movs	r1, r5
 800f708:	9804      	ldr	r0, [sp, #16]
 800f70a:	42bd      	cmp	r5, r7
 800f70c:	d106      	bne.n	800f71c <_dtoa_r+0xb28>
 800f70e:	f7fb fee3 	bl	800b4d8 <__multadd>
 800f712:	0005      	movs	r5, r0
 800f714:	0007      	movs	r7, r0
 800f716:	9b08      	ldr	r3, [sp, #32]
 800f718:	9307      	str	r3, [sp, #28]
 800f71a:	e784      	b.n	800f626 <_dtoa_r+0xa32>
 800f71c:	f7fb fedc 	bl	800b4d8 <__multadd>
 800f720:	0039      	movs	r1, r7
 800f722:	0005      	movs	r5, r0
 800f724:	2300      	movs	r3, #0
 800f726:	220a      	movs	r2, #10
 800f728:	9804      	ldr	r0, [sp, #16]
 800f72a:	f7fb fed5 	bl	800b4d8 <__multadd>
 800f72e:	0007      	movs	r7, r0
 800f730:	e7f1      	b.n	800f716 <_dtoa_r+0xb22>
 800f732:	9b07      	ldr	r3, [sp, #28]
 800f734:	930b      	str	r3, [sp, #44]	; 0x2c
 800f736:	2500      	movs	r5, #0
 800f738:	0031      	movs	r1, r6
 800f73a:	9805      	ldr	r0, [sp, #20]
 800f73c:	f7ff f9ca 	bl	800ead4 <quorem>
 800f740:	9b06      	ldr	r3, [sp, #24]
 800f742:	3030      	adds	r0, #48	; 0x30
 800f744:	5558      	strb	r0, [r3, r5]
 800f746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f748:	3501      	adds	r5, #1
 800f74a:	0004      	movs	r4, r0
 800f74c:	42ab      	cmp	r3, r5
 800f74e:	dd07      	ble.n	800f760 <_dtoa_r+0xb6c>
 800f750:	2300      	movs	r3, #0
 800f752:	220a      	movs	r2, #10
 800f754:	9905      	ldr	r1, [sp, #20]
 800f756:	9804      	ldr	r0, [sp, #16]
 800f758:	f7fb febe 	bl	800b4d8 <__multadd>
 800f75c:	9005      	str	r0, [sp, #20]
 800f75e:	e7eb      	b.n	800f738 <_dtoa_r+0xb44>
 800f760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f762:	2301      	movs	r3, #1
 800f764:	2a00      	cmp	r2, #0
 800f766:	dd00      	ble.n	800f76a <_dtoa_r+0xb76>
 800f768:	0013      	movs	r3, r2
 800f76a:	2500      	movs	r5, #0
 800f76c:	9a06      	ldr	r2, [sp, #24]
 800f76e:	18d3      	adds	r3, r2, r3
 800f770:	9308      	str	r3, [sp, #32]
 800f772:	9905      	ldr	r1, [sp, #20]
 800f774:	2201      	movs	r2, #1
 800f776:	9804      	ldr	r0, [sp, #16]
 800f778:	f7fc f890 	bl	800b89c <__lshift>
 800f77c:	0031      	movs	r1, r6
 800f77e:	9005      	str	r0, [sp, #20]
 800f780:	f7fc f8fa 	bl	800b978 <__mcmp>
 800f784:	2800      	cmp	r0, #0
 800f786:	dc9f      	bgt.n	800f6c8 <_dtoa_r+0xad4>
 800f788:	d101      	bne.n	800f78e <_dtoa_r+0xb9a>
 800f78a:	07e4      	lsls	r4, r4, #31
 800f78c:	d49c      	bmi.n	800f6c8 <_dtoa_r+0xad4>
 800f78e:	9b08      	ldr	r3, [sp, #32]
 800f790:	9308      	str	r3, [sp, #32]
 800f792:	3b01      	subs	r3, #1
 800f794:	781a      	ldrb	r2, [r3, #0]
 800f796:	2a30      	cmp	r2, #48	; 0x30
 800f798:	d0fa      	beq.n	800f790 <_dtoa_r+0xb9c>
 800f79a:	e6e6      	b.n	800f56a <_dtoa_r+0x976>
 800f79c:	9a06      	ldr	r2, [sp, #24]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d193      	bne.n	800f6ca <_dtoa_r+0xad6>
 800f7a2:	9b03      	ldr	r3, [sp, #12]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	9303      	str	r3, [sp, #12]
 800f7a8:	2331      	movs	r3, #49	; 0x31
 800f7aa:	7013      	strb	r3, [r2, #0]
 800f7ac:	e6dd      	b.n	800f56a <_dtoa_r+0x976>
 800f7ae:	4b09      	ldr	r3, [pc, #36]	; (800f7d4 <_dtoa_r+0xbe0>)
 800f7b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f7b2:	9306      	str	r3, [sp, #24]
 800f7b4:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <_dtoa_r+0xbe4>)
 800f7b6:	2a00      	cmp	r2, #0
 800f7b8:	d001      	beq.n	800f7be <_dtoa_r+0xbca>
 800f7ba:	f7ff fa4c 	bl	800ec56 <_dtoa_r+0x62>
 800f7be:	f7ff fa4c 	bl	800ec5a <_dtoa_r+0x66>
 800f7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dcb6      	bgt.n	800f736 <_dtoa_r+0xb42>
 800f7c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	dd00      	ble.n	800f7d0 <_dtoa_r+0xbdc>
 800f7ce:	e6b6      	b.n	800f53e <_dtoa_r+0x94a>
 800f7d0:	e7b1      	b.n	800f736 <_dtoa_r+0xb42>
 800f7d2:	46c0      	nop			; (mov r8, r8)
 800f7d4:	08013164 	.word	0x08013164
 800f7d8:	0801316c 	.word	0x0801316c

0800f7dc <realloc>:
 800f7dc:	b510      	push	{r4, lr}
 800f7de:	4b03      	ldr	r3, [pc, #12]	; (800f7ec <realloc+0x10>)
 800f7e0:	000a      	movs	r2, r1
 800f7e2:	0001      	movs	r1, r0
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	f000 f803 	bl	800f7f0 <_realloc_r>
 800f7ea:	bd10      	pop	{r4, pc}
 800f7ec:	200006e0 	.word	0x200006e0

0800f7f0 <_realloc_r>:
 800f7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	1e0c      	subs	r4, r1, #0
 800f7f6:	9001      	str	r0, [sp, #4]
 800f7f8:	9205      	str	r2, [sp, #20]
 800f7fa:	d106      	bne.n	800f80a <_realloc_r+0x1a>
 800f7fc:	0011      	movs	r1, r2
 800f7fe:	f7f9 fe39 	bl	8009474 <_malloc_r>
 800f802:	0007      	movs	r7, r0
 800f804:	0038      	movs	r0, r7
 800f806:	b007      	add	sp, #28
 800f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80a:	9801      	ldr	r0, [sp, #4]
 800f80c:	f7fa f846 	bl	800989c <__malloc_lock>
 800f810:	0023      	movs	r3, r4
 800f812:	3b08      	subs	r3, #8
 800f814:	685f      	ldr	r7, [r3, #4]
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	9b05      	ldr	r3, [sp, #20]
 800f81a:	330b      	adds	r3, #11
 800f81c:	2b16      	cmp	r3, #22
 800f81e:	d908      	bls.n	800f832 <_realloc_r+0x42>
 800f820:	2207      	movs	r2, #7
 800f822:	4393      	bics	r3, r2
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	d506      	bpl.n	800f836 <_realloc_r+0x46>
 800f828:	230c      	movs	r3, #12
 800f82a:	9a01      	ldr	r2, [sp, #4]
 800f82c:	2700      	movs	r7, #0
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	e7e8      	b.n	800f804 <_realloc_r+0x14>
 800f832:	2310      	movs	r3, #16
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	9b00      	ldr	r3, [sp, #0]
 800f838:	9a05      	ldr	r2, [sp, #20]
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d3f4      	bcc.n	800f828 <_realloc_r+0x38>
 800f83e:	9b04      	ldr	r3, [sp, #16]
 800f840:	003a      	movs	r2, r7
 800f842:	9302      	str	r3, [sp, #8]
 800f844:	2303      	movs	r3, #3
 800f846:	439a      	bics	r2, r3
 800f848:	9b00      	ldr	r3, [sp, #0]
 800f84a:	9203      	str	r2, [sp, #12]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	dc00      	bgt.n	800f852 <_realloc_r+0x62>
 800f850:	e169      	b.n	800fb26 <_realloc_r+0x336>
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	48b8      	ldr	r0, [pc, #736]	; (800fb38 <_realloc_r+0x348>)
 800f856:	189b      	adds	r3, r3, r2
 800f858:	6882      	ldr	r2, [r0, #8]
 800f85a:	4694      	mov	ip, r2
 800f85c:	685a      	ldr	r2, [r3, #4]
 800f85e:	459c      	cmp	ip, r3
 800f860:	d006      	beq.n	800f870 <_realloc_r+0x80>
 800f862:	2501      	movs	r5, #1
 800f864:	0011      	movs	r1, r2
 800f866:	43a9      	bics	r1, r5
 800f868:	1859      	adds	r1, r3, r1
 800f86a:	6849      	ldr	r1, [r1, #4]
 800f86c:	4229      	tst	r1, r5
 800f86e:	d144      	bne.n	800f8fa <_realloc_r+0x10a>
 800f870:	2103      	movs	r1, #3
 800f872:	438a      	bics	r2, r1
 800f874:	9903      	ldr	r1, [sp, #12]
 800f876:	188e      	adds	r6, r1, r2
 800f878:	9900      	ldr	r1, [sp, #0]
 800f87a:	459c      	cmp	ip, r3
 800f87c:	d117      	bne.n	800f8ae <_realloc_r+0xbe>
 800f87e:	3110      	adds	r1, #16
 800f880:	42b1      	cmp	r1, r6
 800f882:	dc3c      	bgt.n	800f8fe <_realloc_r+0x10e>
 800f884:	9a00      	ldr	r2, [sp, #0]
 800f886:	2101      	movs	r1, #1
 800f888:	4694      	mov	ip, r2
 800f88a:	1ab6      	subs	r6, r6, r2
 800f88c:	0022      	movs	r2, r4
 800f88e:	9b04      	ldr	r3, [sp, #16]
 800f890:	430e      	orrs	r6, r1
 800f892:	4463      	add	r3, ip
 800f894:	6083      	str	r3, [r0, #8]
 800f896:	3a08      	subs	r2, #8
 800f898:	605e      	str	r6, [r3, #4]
 800f89a:	6853      	ldr	r3, [r2, #4]
 800f89c:	9801      	ldr	r0, [sp, #4]
 800f89e:	400b      	ands	r3, r1
 800f8a0:	4661      	mov	r1, ip
 800f8a2:	430b      	orrs	r3, r1
 800f8a4:	6053      	str	r3, [r2, #4]
 800f8a6:	f7fa f801 	bl	80098ac <__malloc_unlock>
 800f8aa:	0027      	movs	r7, r4
 800f8ac:	e7aa      	b.n	800f804 <_realloc_r+0x14>
 800f8ae:	42b1      	cmp	r1, r6
 800f8b0:	dc25      	bgt.n	800f8fe <_realloc_r+0x10e>
 800f8b2:	68da      	ldr	r2, [r3, #12]
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	60da      	str	r2, [r3, #12]
 800f8b8:	6093      	str	r3, [r2, #8]
 800f8ba:	9b00      	ldr	r3, [sp, #0]
 800f8bc:	9a02      	ldr	r2, [sp, #8]
 800f8be:	1af4      	subs	r4, r6, r3
 800f8c0:	9b02      	ldr	r3, [sp, #8]
 800f8c2:	1992      	adds	r2, r2, r6
 800f8c4:	6858      	ldr	r0, [r3, #4]
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	4018      	ands	r0, r3
 800f8ca:	2c0f      	cmp	r4, #15
 800f8cc:	d800      	bhi.n	800f8d0 <_realloc_r+0xe0>
 800f8ce:	e12c      	b.n	800fb2a <_realloc_r+0x33a>
 800f8d0:	9d00      	ldr	r5, [sp, #0]
 800f8d2:	9902      	ldr	r1, [sp, #8]
 800f8d4:	4328      	orrs	r0, r5
 800f8d6:	1949      	adds	r1, r1, r5
 800f8d8:	9d02      	ldr	r5, [sp, #8]
 800f8da:	431c      	orrs	r4, r3
 800f8dc:	6068      	str	r0, [r5, #4]
 800f8de:	604c      	str	r4, [r1, #4]
 800f8e0:	6850      	ldr	r0, [r2, #4]
 800f8e2:	3108      	adds	r1, #8
 800f8e4:	4303      	orrs	r3, r0
 800f8e6:	6053      	str	r3, [r2, #4]
 800f8e8:	9801      	ldr	r0, [sp, #4]
 800f8ea:	f7fb f9a3 	bl	800ac34 <_free_r>
 800f8ee:	9801      	ldr	r0, [sp, #4]
 800f8f0:	f7f9 ffdc 	bl	80098ac <__malloc_unlock>
 800f8f4:	9f02      	ldr	r7, [sp, #8]
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	e784      	b.n	800f804 <_realloc_r+0x14>
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	0013      	movs	r3, r2
 800f8fe:	07ff      	lsls	r7, r7, #31
 800f900:	d500      	bpl.n	800f904 <_realloc_r+0x114>
 800f902:	e0c6      	b.n	800fa92 <_realloc_r+0x2a2>
 800f904:	0021      	movs	r1, r4
 800f906:	2003      	movs	r0, #3
 800f908:	3908      	subs	r1, #8
 800f90a:	680d      	ldr	r5, [r1, #0]
 800f90c:	9904      	ldr	r1, [sp, #16]
 800f90e:	1b4d      	subs	r5, r1, r5
 800f910:	6869      	ldr	r1, [r5, #4]
 800f912:	4381      	bics	r1, r0
 800f914:	9803      	ldr	r0, [sp, #12]
 800f916:	180f      	adds	r7, r1, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d100      	bne.n	800f91e <_realloc_r+0x12e>
 800f91c:	e084      	b.n	800fa28 <_realloc_r+0x238>
 800f91e:	19d6      	adds	r6, r2, r7
 800f920:	459c      	cmp	ip, r3
 800f922:	d148      	bne.n	800f9b6 <_realloc_r+0x1c6>
 800f924:	9b00      	ldr	r3, [sp, #0]
 800f926:	3310      	adds	r3, #16
 800f928:	42b3      	cmp	r3, r6
 800f92a:	dc7d      	bgt.n	800fa28 <_realloc_r+0x238>
 800f92c:	68aa      	ldr	r2, [r5, #8]
 800f92e:	68eb      	ldr	r3, [r5, #12]
 800f930:	002f      	movs	r7, r5
 800f932:	60d3      	str	r3, [r2, #12]
 800f934:	609a      	str	r2, [r3, #8]
 800f936:	0002      	movs	r2, r0
 800f938:	3a04      	subs	r2, #4
 800f93a:	3708      	adds	r7, #8
 800f93c:	2a24      	cmp	r2, #36	; 0x24
 800f93e:	d835      	bhi.n	800f9ac <_realloc_r+0x1bc>
 800f940:	003b      	movs	r3, r7
 800f942:	2a13      	cmp	r2, #19
 800f944:	d908      	bls.n	800f958 <_realloc_r+0x168>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	60ab      	str	r3, [r5, #8]
 800f94a:	6863      	ldr	r3, [r4, #4]
 800f94c:	60eb      	str	r3, [r5, #12]
 800f94e:	2a1b      	cmp	r2, #27
 800f950:	d81a      	bhi.n	800f988 <_realloc_r+0x198>
 800f952:	002b      	movs	r3, r5
 800f954:	3408      	adds	r4, #8
 800f956:	3310      	adds	r3, #16
 800f958:	6822      	ldr	r2, [r4, #0]
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	6862      	ldr	r2, [r4, #4]
 800f95e:	605a      	str	r2, [r3, #4]
 800f960:	68a2      	ldr	r2, [r4, #8]
 800f962:	609a      	str	r2, [r3, #8]
 800f964:	9b00      	ldr	r3, [sp, #0]
 800f966:	4a74      	ldr	r2, [pc, #464]	; (800fb38 <_realloc_r+0x348>)
 800f968:	18eb      	adds	r3, r5, r3
 800f96a:	6093      	str	r3, [r2, #8]
 800f96c:	9a00      	ldr	r2, [sp, #0]
 800f96e:	1ab6      	subs	r6, r6, r2
 800f970:	2201      	movs	r2, #1
 800f972:	4316      	orrs	r6, r2
 800f974:	605e      	str	r6, [r3, #4]
 800f976:	686b      	ldr	r3, [r5, #4]
 800f978:	4013      	ands	r3, r2
 800f97a:	9a00      	ldr	r2, [sp, #0]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	606b      	str	r3, [r5, #4]
 800f980:	9801      	ldr	r0, [sp, #4]
 800f982:	f7f9 ff93 	bl	80098ac <__malloc_unlock>
 800f986:	e73d      	b.n	800f804 <_realloc_r+0x14>
 800f988:	68a3      	ldr	r3, [r4, #8]
 800f98a:	612b      	str	r3, [r5, #16]
 800f98c:	68e3      	ldr	r3, [r4, #12]
 800f98e:	616b      	str	r3, [r5, #20]
 800f990:	2a24      	cmp	r2, #36	; 0x24
 800f992:	d003      	beq.n	800f99c <_realloc_r+0x1ac>
 800f994:	002b      	movs	r3, r5
 800f996:	3410      	adds	r4, #16
 800f998:	3318      	adds	r3, #24
 800f99a:	e7dd      	b.n	800f958 <_realloc_r+0x168>
 800f99c:	6923      	ldr	r3, [r4, #16]
 800f99e:	61ab      	str	r3, [r5, #24]
 800f9a0:	002b      	movs	r3, r5
 800f9a2:	6962      	ldr	r2, [r4, #20]
 800f9a4:	3320      	adds	r3, #32
 800f9a6:	61ea      	str	r2, [r5, #28]
 800f9a8:	3418      	adds	r4, #24
 800f9aa:	e7d5      	b.n	800f958 <_realloc_r+0x168>
 800f9ac:	0021      	movs	r1, r4
 800f9ae:	0038      	movs	r0, r7
 800f9b0:	f001 fbb5 	bl	801111e <memmove>
 800f9b4:	e7d6      	b.n	800f964 <_realloc_r+0x174>
 800f9b6:	9a00      	ldr	r2, [sp, #0]
 800f9b8:	42b2      	cmp	r2, r6
 800f9ba:	dc35      	bgt.n	800fa28 <_realloc_r+0x238>
 800f9bc:	0028      	movs	r0, r5
 800f9be:	68da      	ldr	r2, [r3, #12]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	3008      	adds	r0, #8
 800f9c4:	60da      	str	r2, [r3, #12]
 800f9c6:	6093      	str	r3, [r2, #8]
 800f9c8:	68aa      	ldr	r2, [r5, #8]
 800f9ca:	68eb      	ldr	r3, [r5, #12]
 800f9cc:	60d3      	str	r3, [r2, #12]
 800f9ce:	609a      	str	r2, [r3, #8]
 800f9d0:	9a03      	ldr	r2, [sp, #12]
 800f9d2:	3a04      	subs	r2, #4
 800f9d4:	2a24      	cmp	r2, #36	; 0x24
 800f9d6:	d823      	bhi.n	800fa20 <_realloc_r+0x230>
 800f9d8:	2a13      	cmp	r2, #19
 800f9da:	d907      	bls.n	800f9ec <_realloc_r+0x1fc>
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	60ab      	str	r3, [r5, #8]
 800f9e0:	6863      	ldr	r3, [r4, #4]
 800f9e2:	60eb      	str	r3, [r5, #12]
 800f9e4:	2a1b      	cmp	r2, #27
 800f9e6:	d809      	bhi.n	800f9fc <_realloc_r+0x20c>
 800f9e8:	3408      	adds	r4, #8
 800f9ea:	3008      	adds	r0, #8
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	6003      	str	r3, [r0, #0]
 800f9f0:	6863      	ldr	r3, [r4, #4]
 800f9f2:	6043      	str	r3, [r0, #4]
 800f9f4:	68a3      	ldr	r3, [r4, #8]
 800f9f6:	6083      	str	r3, [r0, #8]
 800f9f8:	9502      	str	r5, [sp, #8]
 800f9fa:	e75e      	b.n	800f8ba <_realloc_r+0xca>
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	612b      	str	r3, [r5, #16]
 800fa00:	68e3      	ldr	r3, [r4, #12]
 800fa02:	616b      	str	r3, [r5, #20]
 800fa04:	2a24      	cmp	r2, #36	; 0x24
 800fa06:	d003      	beq.n	800fa10 <_realloc_r+0x220>
 800fa08:	0028      	movs	r0, r5
 800fa0a:	3410      	adds	r4, #16
 800fa0c:	3018      	adds	r0, #24
 800fa0e:	e7ed      	b.n	800f9ec <_realloc_r+0x1fc>
 800fa10:	0028      	movs	r0, r5
 800fa12:	6923      	ldr	r3, [r4, #16]
 800fa14:	3020      	adds	r0, #32
 800fa16:	61ab      	str	r3, [r5, #24]
 800fa18:	6963      	ldr	r3, [r4, #20]
 800fa1a:	3418      	adds	r4, #24
 800fa1c:	61eb      	str	r3, [r5, #28]
 800fa1e:	e7e5      	b.n	800f9ec <_realloc_r+0x1fc>
 800fa20:	0021      	movs	r1, r4
 800fa22:	f001 fb7c 	bl	801111e <memmove>
 800fa26:	e7e7      	b.n	800f9f8 <_realloc_r+0x208>
 800fa28:	9b00      	ldr	r3, [sp, #0]
 800fa2a:	42bb      	cmp	r3, r7
 800fa2c:	dc31      	bgt.n	800fa92 <_realloc_r+0x2a2>
 800fa2e:	0028      	movs	r0, r5
 800fa30:	68aa      	ldr	r2, [r5, #8]
 800fa32:	68eb      	ldr	r3, [r5, #12]
 800fa34:	3008      	adds	r0, #8
 800fa36:	60d3      	str	r3, [r2, #12]
 800fa38:	609a      	str	r2, [r3, #8]
 800fa3a:	9a03      	ldr	r2, [sp, #12]
 800fa3c:	3a04      	subs	r2, #4
 800fa3e:	2a24      	cmp	r2, #36	; 0x24
 800fa40:	d823      	bhi.n	800fa8a <_realloc_r+0x29a>
 800fa42:	2a13      	cmp	r2, #19
 800fa44:	d907      	bls.n	800fa56 <_realloc_r+0x266>
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	60ab      	str	r3, [r5, #8]
 800fa4a:	6863      	ldr	r3, [r4, #4]
 800fa4c:	60eb      	str	r3, [r5, #12]
 800fa4e:	2a1b      	cmp	r2, #27
 800fa50:	d809      	bhi.n	800fa66 <_realloc_r+0x276>
 800fa52:	3408      	adds	r4, #8
 800fa54:	3008      	adds	r0, #8
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	6003      	str	r3, [r0, #0]
 800fa5a:	6863      	ldr	r3, [r4, #4]
 800fa5c:	6043      	str	r3, [r0, #4]
 800fa5e:	68a3      	ldr	r3, [r4, #8]
 800fa60:	6083      	str	r3, [r0, #8]
 800fa62:	003e      	movs	r6, r7
 800fa64:	e7c8      	b.n	800f9f8 <_realloc_r+0x208>
 800fa66:	68a3      	ldr	r3, [r4, #8]
 800fa68:	612b      	str	r3, [r5, #16]
 800fa6a:	68e3      	ldr	r3, [r4, #12]
 800fa6c:	616b      	str	r3, [r5, #20]
 800fa6e:	2a24      	cmp	r2, #36	; 0x24
 800fa70:	d003      	beq.n	800fa7a <_realloc_r+0x28a>
 800fa72:	0028      	movs	r0, r5
 800fa74:	3410      	adds	r4, #16
 800fa76:	3018      	adds	r0, #24
 800fa78:	e7ed      	b.n	800fa56 <_realloc_r+0x266>
 800fa7a:	0028      	movs	r0, r5
 800fa7c:	6923      	ldr	r3, [r4, #16]
 800fa7e:	3020      	adds	r0, #32
 800fa80:	61ab      	str	r3, [r5, #24]
 800fa82:	6963      	ldr	r3, [r4, #20]
 800fa84:	3418      	adds	r4, #24
 800fa86:	61eb      	str	r3, [r5, #28]
 800fa88:	e7e5      	b.n	800fa56 <_realloc_r+0x266>
 800fa8a:	0021      	movs	r1, r4
 800fa8c:	f001 fb47 	bl	801111e <memmove>
 800fa90:	e7e7      	b.n	800fa62 <_realloc_r+0x272>
 800fa92:	9905      	ldr	r1, [sp, #20]
 800fa94:	9801      	ldr	r0, [sp, #4]
 800fa96:	f7f9 fced 	bl	8009474 <_malloc_r>
 800fa9a:	1e07      	subs	r7, r0, #0
 800fa9c:	d100      	bne.n	800faa0 <_realloc_r+0x2b0>
 800fa9e:	e76f      	b.n	800f980 <_realloc_r+0x190>
 800faa0:	0023      	movs	r3, r4
 800faa2:	2201      	movs	r2, #1
 800faa4:	3b08      	subs	r3, #8
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	4393      	bics	r3, r2
 800faaa:	9a04      	ldr	r2, [sp, #16]
 800faac:	18d3      	adds	r3, r2, r3
 800faae:	0002      	movs	r2, r0
 800fab0:	3a08      	subs	r2, #8
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d105      	bne.n	800fac2 <_realloc_r+0x2d2>
 800fab6:	685e      	ldr	r6, [r3, #4]
 800fab8:	2303      	movs	r3, #3
 800faba:	439e      	bics	r6, r3
 800fabc:	9b03      	ldr	r3, [sp, #12]
 800fabe:	18f6      	adds	r6, r6, r3
 800fac0:	e6fb      	b.n	800f8ba <_realloc_r+0xca>
 800fac2:	9a03      	ldr	r2, [sp, #12]
 800fac4:	3a04      	subs	r2, #4
 800fac6:	2a24      	cmp	r2, #36	; 0x24
 800fac8:	d829      	bhi.n	800fb1e <_realloc_r+0x32e>
 800faca:	0003      	movs	r3, r0
 800facc:	0021      	movs	r1, r4
 800face:	2a13      	cmp	r2, #19
 800fad0:	d908      	bls.n	800fae4 <_realloc_r+0x2f4>
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	6863      	ldr	r3, [r4, #4]
 800fad8:	6043      	str	r3, [r0, #4]
 800fada:	2a1b      	cmp	r2, #27
 800fadc:	d80d      	bhi.n	800fafa <_realloc_r+0x30a>
 800fade:	0003      	movs	r3, r0
 800fae0:	3108      	adds	r1, #8
 800fae2:	3308      	adds	r3, #8
 800fae4:	680a      	ldr	r2, [r1, #0]
 800fae6:	601a      	str	r2, [r3, #0]
 800fae8:	684a      	ldr	r2, [r1, #4]
 800faea:	605a      	str	r2, [r3, #4]
 800faec:	688a      	ldr	r2, [r1, #8]
 800faee:	609a      	str	r2, [r3, #8]
 800faf0:	0021      	movs	r1, r4
 800faf2:	9801      	ldr	r0, [sp, #4]
 800faf4:	f7fb f89e 	bl	800ac34 <_free_r>
 800faf8:	e742      	b.n	800f980 <_realloc_r+0x190>
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	6083      	str	r3, [r0, #8]
 800fafe:	68e3      	ldr	r3, [r4, #12]
 800fb00:	60c3      	str	r3, [r0, #12]
 800fb02:	2a24      	cmp	r2, #36	; 0x24
 800fb04:	d003      	beq.n	800fb0e <_realloc_r+0x31e>
 800fb06:	0003      	movs	r3, r0
 800fb08:	3110      	adds	r1, #16
 800fb0a:	3310      	adds	r3, #16
 800fb0c:	e7ea      	b.n	800fae4 <_realloc_r+0x2f4>
 800fb0e:	6923      	ldr	r3, [r4, #16]
 800fb10:	3118      	adds	r1, #24
 800fb12:	6103      	str	r3, [r0, #16]
 800fb14:	0003      	movs	r3, r0
 800fb16:	6962      	ldr	r2, [r4, #20]
 800fb18:	3318      	adds	r3, #24
 800fb1a:	6142      	str	r2, [r0, #20]
 800fb1c:	e7e2      	b.n	800fae4 <_realloc_r+0x2f4>
 800fb1e:	0021      	movs	r1, r4
 800fb20:	f001 fafd 	bl	801111e <memmove>
 800fb24:	e7e4      	b.n	800faf0 <_realloc_r+0x300>
 800fb26:	9e03      	ldr	r6, [sp, #12]
 800fb28:	e6c7      	b.n	800f8ba <_realloc_r+0xca>
 800fb2a:	9902      	ldr	r1, [sp, #8]
 800fb2c:	4306      	orrs	r6, r0
 800fb2e:	604e      	str	r6, [r1, #4]
 800fb30:	6851      	ldr	r1, [r2, #4]
 800fb32:	430b      	orrs	r3, r1
 800fb34:	6053      	str	r3, [r2, #4]
 800fb36:	e6da      	b.n	800f8ee <_realloc_r+0xfe>
 800fb38:	20000034 	.word	0x20000034

0800fb3c <_strtoul_l.constprop.0>:
 800fb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	9202      	str	r2, [sp, #8]
 800fb42:	4a3e      	ldr	r2, [pc, #248]	; (800fc3c <_strtoul_l.constprop.0+0x100>)
 800fb44:	001e      	movs	r6, r3
 800fb46:	9101      	str	r1, [sp, #4]
 800fb48:	000b      	movs	r3, r1
 800fb4a:	4694      	mov	ip, r2
 800fb4c:	2108      	movs	r1, #8
 800fb4e:	9005      	str	r0, [sp, #20]
 800fb50:	001a      	movs	r2, r3
 800fb52:	4660      	mov	r0, ip
 800fb54:	7814      	ldrb	r4, [r2, #0]
 800fb56:	3301      	adds	r3, #1
 800fb58:	5d00      	ldrb	r0, [r0, r4]
 800fb5a:	001d      	movs	r5, r3
 800fb5c:	0007      	movs	r7, r0
 800fb5e:	400f      	ands	r7, r1
 800fb60:	4208      	tst	r0, r1
 800fb62:	d1f5      	bne.n	800fb50 <_strtoul_l.constprop.0+0x14>
 800fb64:	2c2d      	cmp	r4, #45	; 0x2d
 800fb66:	d13d      	bne.n	800fbe4 <_strtoul_l.constprop.0+0xa8>
 800fb68:	2701      	movs	r7, #1
 800fb6a:	781c      	ldrb	r4, [r3, #0]
 800fb6c:	1c95      	adds	r5, r2, #2
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	d05f      	beq.n	800fc32 <_strtoul_l.constprop.0+0xf6>
 800fb72:	2e10      	cmp	r6, #16
 800fb74:	d109      	bne.n	800fb8a <_strtoul_l.constprop.0+0x4e>
 800fb76:	2c30      	cmp	r4, #48	; 0x30
 800fb78:	d107      	bne.n	800fb8a <_strtoul_l.constprop.0+0x4e>
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	782b      	ldrb	r3, [r5, #0]
 800fb7e:	4393      	bics	r3, r2
 800fb80:	2b58      	cmp	r3, #88	; 0x58
 800fb82:	d151      	bne.n	800fc28 <_strtoul_l.constprop.0+0xec>
 800fb84:	2610      	movs	r6, #16
 800fb86:	786c      	ldrb	r4, [r5, #1]
 800fb88:	3502      	adds	r5, #2
 800fb8a:	2001      	movs	r0, #1
 800fb8c:	0031      	movs	r1, r6
 800fb8e:	4240      	negs	r0, r0
 800fb90:	f7f0 fad4 	bl	800013c <__udivsi3>
 800fb94:	9003      	str	r0, [sp, #12]
 800fb96:	2001      	movs	r0, #1
 800fb98:	0031      	movs	r1, r6
 800fb9a:	4240      	negs	r0, r0
 800fb9c:	f7f0 fb54 	bl	8000248 <__aeabi_uidivmod>
 800fba0:	2300      	movs	r3, #0
 800fba2:	2201      	movs	r2, #1
 800fba4:	9104      	str	r1, [sp, #16]
 800fba6:	2101      	movs	r1, #1
 800fba8:	0018      	movs	r0, r3
 800fbaa:	4694      	mov	ip, r2
 800fbac:	4249      	negs	r1, r1
 800fbae:	0022      	movs	r2, r4
 800fbb0:	3a30      	subs	r2, #48	; 0x30
 800fbb2:	2a09      	cmp	r2, #9
 800fbb4:	d903      	bls.n	800fbbe <_strtoul_l.constprop.0+0x82>
 800fbb6:	3a11      	subs	r2, #17
 800fbb8:	2a19      	cmp	r2, #25
 800fbba:	d818      	bhi.n	800fbee <_strtoul_l.constprop.0+0xb2>
 800fbbc:	320a      	adds	r2, #10
 800fbbe:	4296      	cmp	r6, r2
 800fbc0:	dd19      	ble.n	800fbf6 <_strtoul_l.constprop.0+0xba>
 800fbc2:	1c5c      	adds	r4, r3, #1
 800fbc4:	d00b      	beq.n	800fbde <_strtoul_l.constprop.0+0xa2>
 800fbc6:	9c03      	ldr	r4, [sp, #12]
 800fbc8:	000b      	movs	r3, r1
 800fbca:	4284      	cmp	r4, r0
 800fbcc:	d307      	bcc.n	800fbde <_strtoul_l.constprop.0+0xa2>
 800fbce:	d103      	bne.n	800fbd8 <_strtoul_l.constprop.0+0x9c>
 800fbd0:	9c04      	ldr	r4, [sp, #16]
 800fbd2:	000b      	movs	r3, r1
 800fbd4:	4294      	cmp	r4, r2
 800fbd6:	db02      	blt.n	800fbde <_strtoul_l.constprop.0+0xa2>
 800fbd8:	4663      	mov	r3, ip
 800fbda:	4370      	muls	r0, r6
 800fbdc:	1810      	adds	r0, r2, r0
 800fbde:	782c      	ldrb	r4, [r5, #0]
 800fbe0:	3501      	adds	r5, #1
 800fbe2:	e7e4      	b.n	800fbae <_strtoul_l.constprop.0+0x72>
 800fbe4:	2c2b      	cmp	r4, #43	; 0x2b
 800fbe6:	d1c2      	bne.n	800fb6e <_strtoul_l.constprop.0+0x32>
 800fbe8:	781c      	ldrb	r4, [r3, #0]
 800fbea:	1c95      	adds	r5, r2, #2
 800fbec:	e7bf      	b.n	800fb6e <_strtoul_l.constprop.0+0x32>
 800fbee:	0022      	movs	r2, r4
 800fbf0:	3a61      	subs	r2, #97	; 0x61
 800fbf2:	2a19      	cmp	r2, #25
 800fbf4:	d9e2      	bls.n	800fbbc <_strtoul_l.constprop.0+0x80>
 800fbf6:	1c5a      	adds	r2, r3, #1
 800fbf8:	d108      	bne.n	800fc0c <_strtoul_l.constprop.0+0xd0>
 800fbfa:	2222      	movs	r2, #34	; 0x22
 800fbfc:	9905      	ldr	r1, [sp, #20]
 800fbfe:	0018      	movs	r0, r3
 800fc00:	600a      	str	r2, [r1, #0]
 800fc02:	9a02      	ldr	r2, [sp, #8]
 800fc04:	2a00      	cmp	r2, #0
 800fc06:	d109      	bne.n	800fc1c <_strtoul_l.constprop.0+0xe0>
 800fc08:	b007      	add	sp, #28
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0c:	2f00      	cmp	r7, #0
 800fc0e:	d000      	beq.n	800fc12 <_strtoul_l.constprop.0+0xd6>
 800fc10:	4240      	negs	r0, r0
 800fc12:	9a02      	ldr	r2, [sp, #8]
 800fc14:	2a00      	cmp	r2, #0
 800fc16:	d0f7      	beq.n	800fc08 <_strtoul_l.constprop.0+0xcc>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <_strtoul_l.constprop.0+0xe4>
 800fc1c:	1e6b      	subs	r3, r5, #1
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	9b02      	ldr	r3, [sp, #8]
 800fc22:	9a01      	ldr	r2, [sp, #4]
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	e7ef      	b.n	800fc08 <_strtoul_l.constprop.0+0xcc>
 800fc28:	2430      	movs	r4, #48	; 0x30
 800fc2a:	2e00      	cmp	r6, #0
 800fc2c:	d1ad      	bne.n	800fb8a <_strtoul_l.constprop.0+0x4e>
 800fc2e:	3608      	adds	r6, #8
 800fc30:	e7ab      	b.n	800fb8a <_strtoul_l.constprop.0+0x4e>
 800fc32:	2c30      	cmp	r4, #48	; 0x30
 800fc34:	d0a1      	beq.n	800fb7a <_strtoul_l.constprop.0+0x3e>
 800fc36:	260a      	movs	r6, #10
 800fc38:	e7a7      	b.n	800fb8a <_strtoul_l.constprop.0+0x4e>
 800fc3a:	46c0      	nop			; (mov r8, r8)
 800fc3c:	08012dd9 	.word	0x08012dd9

0800fc40 <_strtoul_r>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	f7ff ff7b 	bl	800fb3c <_strtoul_l.constprop.0>
 800fc46:	bd10      	pop	{r4, pc}

0800fc48 <_strtoll_l.constprop.0>:
 800fc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc4a:	b08d      	sub	sp, #52	; 0x34
 800fc4c:	9203      	str	r2, [sp, #12]
 800fc4e:	4a53      	ldr	r2, [pc, #332]	; (800fd9c <_strtoll_l.constprop.0+0x154>)
 800fc50:	001e      	movs	r6, r3
 800fc52:	9102      	str	r1, [sp, #8]
 800fc54:	000b      	movs	r3, r1
 800fc56:	4694      	mov	ip, r2
 800fc58:	2108      	movs	r1, #8
 800fc5a:	900a      	str	r0, [sp, #40]	; 0x28
 800fc5c:	001a      	movs	r2, r3
 800fc5e:	4660      	mov	r0, ip
 800fc60:	7814      	ldrb	r4, [r2, #0]
 800fc62:	3301      	adds	r3, #1
 800fc64:	5d00      	ldrb	r0, [r0, r4]
 800fc66:	001d      	movs	r5, r3
 800fc68:	0007      	movs	r7, r0
 800fc6a:	400f      	ands	r7, r1
 800fc6c:	4208      	tst	r0, r1
 800fc6e:	d1f5      	bne.n	800fc5c <_strtoll_l.constprop.0+0x14>
 800fc70:	2c2d      	cmp	r4, #45	; 0x2d
 800fc72:	d153      	bne.n	800fd1c <_strtoll_l.constprop.0+0xd4>
 800fc74:	781c      	ldrb	r4, [r3, #0]
 800fc76:	2301      	movs	r3, #1
 800fc78:	1c95      	adds	r5, r2, #2
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	2e00      	cmp	r6, #0
 800fc7e:	d100      	bne.n	800fc82 <_strtoll_l.constprop.0+0x3a>
 800fc80:	e086      	b.n	800fd90 <_strtoll_l.constprop.0+0x148>
 800fc82:	2e10      	cmp	r6, #16
 800fc84:	d10a      	bne.n	800fc9c <_strtoll_l.constprop.0+0x54>
 800fc86:	2c30      	cmp	r4, #48	; 0x30
 800fc88:	d108      	bne.n	800fc9c <_strtoll_l.constprop.0+0x54>
 800fc8a:	2220      	movs	r2, #32
 800fc8c:	782b      	ldrb	r3, [r5, #0]
 800fc8e:	4393      	bics	r3, r2
 800fc90:	2b58      	cmp	r3, #88	; 0x58
 800fc92:	d000      	beq.n	800fc96 <_strtoll_l.constprop.0+0x4e>
 800fc94:	e076      	b.n	800fd84 <_strtoll_l.constprop.0+0x13c>
 800fc96:	2610      	movs	r6, #16
 800fc98:	786c      	ldrb	r4, [r5, #1]
 800fc9a:	3502      	adds	r5, #2
 800fc9c:	2001      	movs	r0, #1
 800fc9e:	2300      	movs	r3, #0
 800fca0:	493f      	ldr	r1, [pc, #252]	; (800fda0 <_strtoll_l.constprop.0+0x158>)
 800fca2:	9a01      	ldr	r2, [sp, #4]
 800fca4:	4240      	negs	r0, r0
 800fca6:	1812      	adds	r2, r2, r0
 800fca8:	414b      	adcs	r3, r1
 800fcaa:	9204      	str	r2, [sp, #16]
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	9804      	ldr	r0, [sp, #16]
 800fcb0:	9905      	ldr	r1, [sp, #20]
 800fcb2:	17f3      	asrs	r3, r6, #31
 800fcb4:	0032      	movs	r2, r6
 800fcb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcb8:	f7f0 fbf4 	bl	80004a4 <__aeabi_uldivmod>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	000f      	movs	r7, r1
 800fcc0:	9008      	str	r0, [sp, #32]
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	9209      	str	r2, [sp, #36]	; 0x24
 800fcc8:	0022      	movs	r2, r4
 800fcca:	3a30      	subs	r2, #48	; 0x30
 800fccc:	2a09      	cmp	r2, #9
 800fcce:	d82b      	bhi.n	800fd28 <_strtoll_l.constprop.0+0xe0>
 800fcd0:	0014      	movs	r4, r2
 800fcd2:	42a6      	cmp	r6, r4
 800fcd4:	dd37      	ble.n	800fd46 <_strtoll_l.constprop.0+0xfe>
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	d01d      	beq.n	800fd16 <_strtoll_l.constprop.0+0xce>
 800fcda:	42b9      	cmp	r1, r7
 800fcdc:	d830      	bhi.n	800fd40 <_strtoll_l.constprop.0+0xf8>
 800fcde:	d102      	bne.n	800fce6 <_strtoll_l.constprop.0+0x9e>
 800fce0:	9b08      	ldr	r3, [sp, #32]
 800fce2:	4298      	cmp	r0, r3
 800fce4:	d82c      	bhi.n	800fd40 <_strtoll_l.constprop.0+0xf8>
 800fce6:	9b08      	ldr	r3, [sp, #32]
 800fce8:	4283      	cmp	r3, r0
 800fcea:	d106      	bne.n	800fcfa <_strtoll_l.constprop.0+0xb2>
 800fcec:	428f      	cmp	r7, r1
 800fcee:	d104      	bne.n	800fcfa <_strtoll_l.constprop.0+0xb2>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcf4:	425b      	negs	r3, r3
 800fcf6:	42a2      	cmp	r2, r4
 800fcf8:	db0d      	blt.n	800fd16 <_strtoll_l.constprop.0+0xce>
 800fcfa:	000b      	movs	r3, r1
 800fcfc:	0002      	movs	r2, r0
 800fcfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd00:	0030      	movs	r0, r6
 800fd02:	f7f0 fbef 	bl	80004e4 <__aeabi_lmul>
 800fd06:	17e3      	asrs	r3, r4, #31
 800fd08:	9406      	str	r4, [sp, #24]
 800fd0a:	9307      	str	r3, [sp, #28]
 800fd0c:	9b06      	ldr	r3, [sp, #24]
 800fd0e:	9c07      	ldr	r4, [sp, #28]
 800fd10:	18c0      	adds	r0, r0, r3
 800fd12:	4161      	adcs	r1, r4
 800fd14:	2301      	movs	r3, #1
 800fd16:	782c      	ldrb	r4, [r5, #0]
 800fd18:	3501      	adds	r5, #1
 800fd1a:	e7d5      	b.n	800fcc8 <_strtoll_l.constprop.0+0x80>
 800fd1c:	9701      	str	r7, [sp, #4]
 800fd1e:	2c2b      	cmp	r4, #43	; 0x2b
 800fd20:	d1ac      	bne.n	800fc7c <_strtoll_l.constprop.0+0x34>
 800fd22:	781c      	ldrb	r4, [r3, #0]
 800fd24:	1c95      	adds	r5, r2, #2
 800fd26:	e7a9      	b.n	800fc7c <_strtoll_l.constprop.0+0x34>
 800fd28:	0022      	movs	r2, r4
 800fd2a:	3a41      	subs	r2, #65	; 0x41
 800fd2c:	2a19      	cmp	r2, #25
 800fd2e:	d801      	bhi.n	800fd34 <_strtoll_l.constprop.0+0xec>
 800fd30:	3c37      	subs	r4, #55	; 0x37
 800fd32:	e7ce      	b.n	800fcd2 <_strtoll_l.constprop.0+0x8a>
 800fd34:	0022      	movs	r2, r4
 800fd36:	3a61      	subs	r2, #97	; 0x61
 800fd38:	2a19      	cmp	r2, #25
 800fd3a:	d804      	bhi.n	800fd46 <_strtoll_l.constprop.0+0xfe>
 800fd3c:	3c57      	subs	r4, #87	; 0x57
 800fd3e:	e7c8      	b.n	800fcd2 <_strtoll_l.constprop.0+0x8a>
 800fd40:	2301      	movs	r3, #1
 800fd42:	425b      	negs	r3, r3
 800fd44:	e7e7      	b.n	800fd16 <_strtoll_l.constprop.0+0xce>
 800fd46:	1c5a      	adds	r2, r3, #1
 800fd48:	d109      	bne.n	800fd5e <_strtoll_l.constprop.0+0x116>
 800fd4a:	9804      	ldr	r0, [sp, #16]
 800fd4c:	9905      	ldr	r1, [sp, #20]
 800fd4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd50:	3323      	adds	r3, #35	; 0x23
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	9b03      	ldr	r3, [sp, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10e      	bne.n	800fd78 <_strtoll_l.constprop.0+0x130>
 800fd5a:	b00d      	add	sp, #52	; 0x34
 800fd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd5e:	9a01      	ldr	r2, [sp, #4]
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	d004      	beq.n	800fd6e <_strtoll_l.constprop.0+0x126>
 800fd64:	0006      	movs	r6, r0
 800fd66:	000f      	movs	r7, r1
 800fd68:	2100      	movs	r1, #0
 800fd6a:	4270      	negs	r0, r6
 800fd6c:	41b9      	sbcs	r1, r7
 800fd6e:	9a03      	ldr	r2, [sp, #12]
 800fd70:	2a00      	cmp	r2, #0
 800fd72:	d0f2      	beq.n	800fd5a <_strtoll_l.constprop.0+0x112>
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <_strtoll_l.constprop.0+0x134>
 800fd78:	1e6b      	subs	r3, r5, #1
 800fd7a:	9302      	str	r3, [sp, #8]
 800fd7c:	9b03      	ldr	r3, [sp, #12]
 800fd7e:	9a02      	ldr	r2, [sp, #8]
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	e7ea      	b.n	800fd5a <_strtoll_l.constprop.0+0x112>
 800fd84:	2430      	movs	r4, #48	; 0x30
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	d000      	beq.n	800fd8c <_strtoll_l.constprop.0+0x144>
 800fd8a:	e787      	b.n	800fc9c <_strtoll_l.constprop.0+0x54>
 800fd8c:	3608      	adds	r6, #8
 800fd8e:	e785      	b.n	800fc9c <_strtoll_l.constprop.0+0x54>
 800fd90:	2c30      	cmp	r4, #48	; 0x30
 800fd92:	d100      	bne.n	800fd96 <_strtoll_l.constprop.0+0x14e>
 800fd94:	e779      	b.n	800fc8a <_strtoll_l.constprop.0+0x42>
 800fd96:	260a      	movs	r6, #10
 800fd98:	e780      	b.n	800fc9c <_strtoll_l.constprop.0+0x54>
 800fd9a:	46c0      	nop			; (mov r8, r8)
 800fd9c:	08012dd9 	.word	0x08012dd9
 800fda0:	7fffffff 	.word	0x7fffffff

0800fda4 <_strtoll_r>:
 800fda4:	b510      	push	{r4, lr}
 800fda6:	f7ff ff4f 	bl	800fc48 <_strtoll_l.constprop.0>
 800fdaa:	bd10      	pop	{r4, pc}

0800fdac <_strtoull_l.constprop.0>:
 800fdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdae:	b08b      	sub	sp, #44	; 0x2c
 800fdb0:	9202      	str	r2, [sp, #8]
 800fdb2:	4a54      	ldr	r2, [pc, #336]	; (800ff04 <_strtoull_l.constprop.0+0x158>)
 800fdb4:	001e      	movs	r6, r3
 800fdb6:	9101      	str	r1, [sp, #4]
 800fdb8:	000b      	movs	r3, r1
 800fdba:	4694      	mov	ip, r2
 800fdbc:	2108      	movs	r1, #8
 800fdbe:	9009      	str	r0, [sp, #36]	; 0x24
 800fdc0:	001a      	movs	r2, r3
 800fdc2:	4660      	mov	r0, ip
 800fdc4:	7814      	ldrb	r4, [r2, #0]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	5d00      	ldrb	r0, [r0, r4]
 800fdca:	001d      	movs	r5, r3
 800fdcc:	0007      	movs	r7, r0
 800fdce:	400f      	ands	r7, r1
 800fdd0:	4208      	tst	r0, r1
 800fdd2:	d1f5      	bne.n	800fdc0 <_strtoull_l.constprop.0+0x14>
 800fdd4:	2c2d      	cmp	r4, #45	; 0x2d
 800fdd6:	d154      	bne.n	800fe82 <_strtoull_l.constprop.0+0xd6>
 800fdd8:	781c      	ldrb	r4, [r3, #0]
 800fdda:	2301      	movs	r3, #1
 800fddc:	1c95      	adds	r5, r2, #2
 800fdde:	9306      	str	r3, [sp, #24]
 800fde0:	2e00      	cmp	r6, #0
 800fde2:	d100      	bne.n	800fde6 <_strtoull_l.constprop.0+0x3a>
 800fde4:	e088      	b.n	800fef8 <_strtoull_l.constprop.0+0x14c>
 800fde6:	2e10      	cmp	r6, #16
 800fde8:	d10a      	bne.n	800fe00 <_strtoull_l.constprop.0+0x54>
 800fdea:	2c30      	cmp	r4, #48	; 0x30
 800fdec:	d108      	bne.n	800fe00 <_strtoull_l.constprop.0+0x54>
 800fdee:	2220      	movs	r2, #32
 800fdf0:	782b      	ldrb	r3, [r5, #0]
 800fdf2:	4393      	bics	r3, r2
 800fdf4:	2b58      	cmp	r3, #88	; 0x58
 800fdf6:	d000      	beq.n	800fdfa <_strtoull_l.constprop.0+0x4e>
 800fdf8:	e078      	b.n	800feec <_strtoull_l.constprop.0+0x140>
 800fdfa:	2610      	movs	r6, #16
 800fdfc:	786c      	ldrb	r4, [r5, #1]
 800fdfe:	3502      	adds	r5, #2
 800fe00:	17f7      	asrs	r7, r6, #31
 800fe02:	0032      	movs	r2, r6
 800fe04:	003b      	movs	r3, r7
 800fe06:	2001      	movs	r0, #1
 800fe08:	4240      	negs	r0, r0
 800fe0a:	17c1      	asrs	r1, r0, #31
 800fe0c:	f7f0 fb4a 	bl	80004a4 <__aeabi_uldivmod>
 800fe10:	0032      	movs	r2, r6
 800fe12:	9007      	str	r0, [sp, #28]
 800fe14:	9103      	str	r1, [sp, #12]
 800fe16:	003b      	movs	r3, r7
 800fe18:	2001      	movs	r0, #1
 800fe1a:	4240      	negs	r0, r0
 800fe1c:	17c1      	asrs	r1, r0, #31
 800fe1e:	f7f0 fb41 	bl	80004a4 <__aeabi_uldivmod>
 800fe22:	2300      	movs	r3, #0
 800fe24:	2000      	movs	r0, #0
 800fe26:	2100      	movs	r1, #0
 800fe28:	9208      	str	r2, [sp, #32]
 800fe2a:	0022      	movs	r2, r4
 800fe2c:	3a30      	subs	r2, #48	; 0x30
 800fe2e:	2a09      	cmp	r2, #9
 800fe30:	d82d      	bhi.n	800fe8e <_strtoull_l.constprop.0+0xe2>
 800fe32:	0014      	movs	r4, r2
 800fe34:	42a6      	cmp	r6, r4
 800fe36:	dd39      	ble.n	800feac <_strtoull_l.constprop.0+0x100>
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	d01f      	beq.n	800fe7c <_strtoull_l.constprop.0+0xd0>
 800fe3c:	9b03      	ldr	r3, [sp, #12]
 800fe3e:	4299      	cmp	r1, r3
 800fe40:	d831      	bhi.n	800fea6 <_strtoull_l.constprop.0+0xfa>
 800fe42:	d102      	bne.n	800fe4a <_strtoull_l.constprop.0+0x9e>
 800fe44:	9b07      	ldr	r3, [sp, #28]
 800fe46:	4298      	cmp	r0, r3
 800fe48:	d82d      	bhi.n	800fea6 <_strtoull_l.constprop.0+0xfa>
 800fe4a:	9b07      	ldr	r3, [sp, #28]
 800fe4c:	4283      	cmp	r3, r0
 800fe4e:	d107      	bne.n	800fe60 <_strtoull_l.constprop.0+0xb4>
 800fe50:	9b03      	ldr	r3, [sp, #12]
 800fe52:	428b      	cmp	r3, r1
 800fe54:	d104      	bne.n	800fe60 <_strtoull_l.constprop.0+0xb4>
 800fe56:	2301      	movs	r3, #1
 800fe58:	9a08      	ldr	r2, [sp, #32]
 800fe5a:	425b      	negs	r3, r3
 800fe5c:	42a2      	cmp	r2, r4
 800fe5e:	db0d      	blt.n	800fe7c <_strtoull_l.constprop.0+0xd0>
 800fe60:	000b      	movs	r3, r1
 800fe62:	0002      	movs	r2, r0
 800fe64:	0039      	movs	r1, r7
 800fe66:	0030      	movs	r0, r6
 800fe68:	f7f0 fb3c 	bl	80004e4 <__aeabi_lmul>
 800fe6c:	17e3      	asrs	r3, r4, #31
 800fe6e:	9404      	str	r4, [sp, #16]
 800fe70:	9305      	str	r3, [sp, #20]
 800fe72:	9b04      	ldr	r3, [sp, #16]
 800fe74:	9c05      	ldr	r4, [sp, #20]
 800fe76:	18c0      	adds	r0, r0, r3
 800fe78:	4161      	adcs	r1, r4
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	782c      	ldrb	r4, [r5, #0]
 800fe7e:	3501      	adds	r5, #1
 800fe80:	e7d3      	b.n	800fe2a <_strtoull_l.constprop.0+0x7e>
 800fe82:	9706      	str	r7, [sp, #24]
 800fe84:	2c2b      	cmp	r4, #43	; 0x2b
 800fe86:	d1ab      	bne.n	800fde0 <_strtoull_l.constprop.0+0x34>
 800fe88:	781c      	ldrb	r4, [r3, #0]
 800fe8a:	1c95      	adds	r5, r2, #2
 800fe8c:	e7a8      	b.n	800fde0 <_strtoull_l.constprop.0+0x34>
 800fe8e:	0022      	movs	r2, r4
 800fe90:	3a41      	subs	r2, #65	; 0x41
 800fe92:	2a19      	cmp	r2, #25
 800fe94:	d801      	bhi.n	800fe9a <_strtoull_l.constprop.0+0xee>
 800fe96:	3c37      	subs	r4, #55	; 0x37
 800fe98:	e7cc      	b.n	800fe34 <_strtoull_l.constprop.0+0x88>
 800fe9a:	0022      	movs	r2, r4
 800fe9c:	3a61      	subs	r2, #97	; 0x61
 800fe9e:	2a19      	cmp	r2, #25
 800fea0:	d804      	bhi.n	800feac <_strtoull_l.constprop.0+0x100>
 800fea2:	3c57      	subs	r4, #87	; 0x57
 800fea4:	e7c6      	b.n	800fe34 <_strtoull_l.constprop.0+0x88>
 800fea6:	2301      	movs	r3, #1
 800fea8:	425b      	negs	r3, r3
 800feaa:	e7e7      	b.n	800fe7c <_strtoull_l.constprop.0+0xd0>
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	d10a      	bne.n	800fec6 <_strtoull_l.constprop.0+0x11a>
 800feb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feb2:	3323      	adds	r3, #35	; 0x23
 800feb4:	6013      	str	r3, [r2, #0]
 800feb6:	9b02      	ldr	r3, [sp, #8]
 800feb8:	2001      	movs	r0, #1
 800feba:	4240      	negs	r0, r0
 800febc:	17c1      	asrs	r1, r0, #31
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10e      	bne.n	800fee0 <_strtoull_l.constprop.0+0x134>
 800fec2:	b00b      	add	sp, #44	; 0x2c
 800fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec6:	9a06      	ldr	r2, [sp, #24]
 800fec8:	2a00      	cmp	r2, #0
 800feca:	d004      	beq.n	800fed6 <_strtoull_l.constprop.0+0x12a>
 800fecc:	0006      	movs	r6, r0
 800fece:	000f      	movs	r7, r1
 800fed0:	2100      	movs	r1, #0
 800fed2:	4270      	negs	r0, r6
 800fed4:	41b9      	sbcs	r1, r7
 800fed6:	9a02      	ldr	r2, [sp, #8]
 800fed8:	2a00      	cmp	r2, #0
 800feda:	d0f2      	beq.n	800fec2 <_strtoull_l.constprop.0+0x116>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <_strtoull_l.constprop.0+0x138>
 800fee0:	1e6b      	subs	r3, r5, #1
 800fee2:	9301      	str	r3, [sp, #4]
 800fee4:	9b02      	ldr	r3, [sp, #8]
 800fee6:	9a01      	ldr	r2, [sp, #4]
 800fee8:	601a      	str	r2, [r3, #0]
 800feea:	e7ea      	b.n	800fec2 <_strtoull_l.constprop.0+0x116>
 800feec:	2430      	movs	r4, #48	; 0x30
 800feee:	2e00      	cmp	r6, #0
 800fef0:	d000      	beq.n	800fef4 <_strtoull_l.constprop.0+0x148>
 800fef2:	e785      	b.n	800fe00 <_strtoull_l.constprop.0+0x54>
 800fef4:	3608      	adds	r6, #8
 800fef6:	e783      	b.n	800fe00 <_strtoull_l.constprop.0+0x54>
 800fef8:	2c30      	cmp	r4, #48	; 0x30
 800fefa:	d100      	bne.n	800fefe <_strtoull_l.constprop.0+0x152>
 800fefc:	e777      	b.n	800fdee <_strtoull_l.constprop.0+0x42>
 800fefe:	260a      	movs	r6, #10
 800ff00:	e77e      	b.n	800fe00 <_strtoull_l.constprop.0+0x54>
 800ff02:	46c0      	nop			; (mov r8, r8)
 800ff04:	08012dd9 	.word	0x08012dd9

0800ff08 <_strtoull_r>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	f7ff ff4f 	bl	800fdac <_strtoull_l.constprop.0>
 800ff0e:	bd10      	pop	{r4, pc}

0800ff10 <_mbrtowc_r>:
 800ff10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff12:	0004      	movs	r4, r0
 800ff14:	0010      	movs	r0, r2
 800ff16:	4a0b      	ldr	r2, [pc, #44]	; (800ff44 <_mbrtowc_r+0x34>)
 800ff18:	9d06      	ldr	r5, [sp, #24]
 800ff1a:	32e4      	adds	r2, #228	; 0xe4
 800ff1c:	6816      	ldr	r6, [r2, #0]
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d10c      	bne.n	800ff3c <_mbrtowc_r+0x2c>
 800ff22:	2301      	movs	r3, #1
 800ff24:	0001      	movs	r1, r0
 800ff26:	4a08      	ldr	r2, [pc, #32]	; (800ff48 <_mbrtowc_r+0x38>)
 800ff28:	9500      	str	r5, [sp, #0]
 800ff2a:	0020      	movs	r0, r4
 800ff2c:	47b0      	blx	r6
 800ff2e:	1c43      	adds	r3, r0, #1
 800ff30:	d103      	bne.n	800ff3a <_mbrtowc_r+0x2a>
 800ff32:	2300      	movs	r3, #0
 800ff34:	602b      	str	r3, [r5, #0]
 800ff36:	338a      	adds	r3, #138	; 0x8a
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800ff3c:	0002      	movs	r2, r0
 800ff3e:	9500      	str	r5, [sp, #0]
 800ff40:	e7f3      	b.n	800ff2a <_mbrtowc_r+0x1a>
 800ff42:	46c0      	nop			; (mov r8, r8)
 800ff44:	20000450 	.word	0x20000450
 800ff48:	08013163 	.word	0x08013163

0800ff4c <iswspace>:
 800ff4c:	b510      	push	{r4, lr}
 800ff4e:	2100      	movs	r1, #0
 800ff50:	f000 f802 	bl	800ff58 <iswspace_l>
 800ff54:	bd10      	pop	{r4, pc}
	...

0800ff58 <iswspace_l>:
 800ff58:	0003      	movs	r3, r0
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	2bff      	cmp	r3, #255	; 0xff
 800ff5e:	d803      	bhi.n	800ff68 <iswspace_l+0x10>
 800ff60:	4a02      	ldr	r2, [pc, #8]	; (800ff6c <iswspace_l+0x14>)
 800ff62:	5cd0      	ldrb	r0, [r2, r3]
 800ff64:	2308      	movs	r3, #8
 800ff66:	4018      	ands	r0, r3
 800ff68:	4770      	bx	lr
 800ff6a:	46c0      	nop			; (mov r8, r8)
 800ff6c:	08012dd9 	.word	0x08012dd9

0800ff70 <fiprintf>:
 800ff70:	b40e      	push	{r1, r2, r3}
 800ff72:	b517      	push	{r0, r1, r2, r4, lr}
 800ff74:	4c05      	ldr	r4, [pc, #20]	; (800ff8c <fiprintf+0x1c>)
 800ff76:	ab05      	add	r3, sp, #20
 800ff78:	cb04      	ldmia	r3!, {r2}
 800ff7a:	0001      	movs	r1, r0
 800ff7c:	6820      	ldr	r0, [r4, #0]
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	f000 f954 	bl	801022c <_vfiprintf_r>
 800ff84:	bc1e      	pop	{r1, r2, r3, r4}
 800ff86:	bc08      	pop	{r3}
 800ff88:	b003      	add	sp, #12
 800ff8a:	4718      	bx	r3
 800ff8c:	200006e0 	.word	0x200006e0

0800ff90 <__ssprint_r>:
 800ff90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff92:	6813      	ldr	r3, [r2, #0]
 800ff94:	b087      	sub	sp, #28
 800ff96:	0017      	movs	r7, r2
 800ff98:	9303      	str	r3, [sp, #12]
 800ff9a:	6893      	ldr	r3, [r2, #8]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	000c      	movs	r4, r1
 800ffa0:	9005      	str	r0, [sp, #20]
 800ffa2:	9202      	str	r2, [sp, #8]
 800ffa4:	9201      	str	r2, [sp, #4]
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d10d      	bne.n	800ffc6 <__ssprint_r+0x36>
 800ffaa:	2000      	movs	r0, #0
 800ffac:	2300      	movs	r3, #0
 800ffae:	607b      	str	r3, [r7, #4]
 800ffb0:	b007      	add	sp, #28
 800ffb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb4:	9b03      	ldr	r3, [sp, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	9302      	str	r3, [sp, #8]
 800ffba:	9b03      	ldr	r3, [sp, #12]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	3308      	adds	r3, #8
 800ffc4:	9303      	str	r3, [sp, #12]
 800ffc6:	9a01      	ldr	r2, [sp, #4]
 800ffc8:	68a6      	ldr	r6, [r4, #8]
 800ffca:	6823      	ldr	r3, [r4, #0]
 800ffcc:	2a00      	cmp	r2, #0
 800ffce:	d0f1      	beq.n	800ffb4 <__ssprint_r+0x24>
 800ffd0:	42b2      	cmp	r2, r6
 800ffd2:	d32e      	bcc.n	8010032 <__ssprint_r+0xa2>
 800ffd4:	2190      	movs	r1, #144	; 0x90
 800ffd6:	89a2      	ldrh	r2, [r4, #12]
 800ffd8:	00c9      	lsls	r1, r1, #3
 800ffda:	420a      	tst	r2, r1
 800ffdc:	d029      	beq.n	8010032 <__ssprint_r+0xa2>
 800ffde:	2003      	movs	r0, #3
 800ffe0:	6921      	ldr	r1, [r4, #16]
 800ffe2:	1a5b      	subs	r3, r3, r1
 800ffe4:	9304      	str	r3, [sp, #16]
 800ffe6:	6963      	ldr	r3, [r4, #20]
 800ffe8:	4343      	muls	r3, r0
 800ffea:	0fdd      	lsrs	r5, r3, #31
 800ffec:	18ed      	adds	r5, r5, r3
 800ffee:	9b04      	ldr	r3, [sp, #16]
 800fff0:	9801      	ldr	r0, [sp, #4]
 800fff2:	3301      	adds	r3, #1
 800fff4:	181b      	adds	r3, r3, r0
 800fff6:	106d      	asrs	r5, r5, #1
 800fff8:	42ab      	cmp	r3, r5
 800fffa:	d900      	bls.n	800fffe <__ssprint_r+0x6e>
 800fffc:	001d      	movs	r5, r3
 800fffe:	0552      	lsls	r2, r2, #21
 8010000:	d532      	bpl.n	8010068 <__ssprint_r+0xd8>
 8010002:	0029      	movs	r1, r5
 8010004:	9805      	ldr	r0, [sp, #20]
 8010006:	f7f9 fa35 	bl	8009474 <_malloc_r>
 801000a:	1e06      	subs	r6, r0, #0
 801000c:	d036      	beq.n	801007c <__ssprint_r+0xec>
 801000e:	9a04      	ldr	r2, [sp, #16]
 8010010:	6921      	ldr	r1, [r4, #16]
 8010012:	f7fa fd94 	bl	800ab3e <memcpy>
 8010016:	89a2      	ldrh	r2, [r4, #12]
 8010018:	4b1e      	ldr	r3, [pc, #120]	; (8010094 <__ssprint_r+0x104>)
 801001a:	401a      	ands	r2, r3
 801001c:	2380      	movs	r3, #128	; 0x80
 801001e:	4313      	orrs	r3, r2
 8010020:	81a3      	strh	r3, [r4, #12]
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	6126      	str	r6, [r4, #16]
 8010026:	18f6      	adds	r6, r6, r3
 8010028:	6026      	str	r6, [r4, #0]
 801002a:	6165      	str	r5, [r4, #20]
 801002c:	9e01      	ldr	r6, [sp, #4]
 801002e:	1aed      	subs	r5, r5, r3
 8010030:	60a5      	str	r5, [r4, #8]
 8010032:	9b01      	ldr	r3, [sp, #4]
 8010034:	429e      	cmp	r6, r3
 8010036:	d900      	bls.n	801003a <__ssprint_r+0xaa>
 8010038:	001e      	movs	r6, r3
 801003a:	0032      	movs	r2, r6
 801003c:	9902      	ldr	r1, [sp, #8]
 801003e:	6820      	ldr	r0, [r4, #0]
 8010040:	f001 f86d 	bl	801111e <memmove>
 8010044:	9a01      	ldr	r2, [sp, #4]
 8010046:	68a3      	ldr	r3, [r4, #8]
 8010048:	4694      	mov	ip, r2
 801004a:	1b9b      	subs	r3, r3, r6
 801004c:	60a3      	str	r3, [r4, #8]
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	199b      	adds	r3, r3, r6
 8010052:	6023      	str	r3, [r4, #0]
 8010054:	9b02      	ldr	r3, [sp, #8]
 8010056:	4463      	add	r3, ip
 8010058:	9302      	str	r3, [sp, #8]
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	60bb      	str	r3, [r7, #8]
 8010060:	d0a3      	beq.n	800ffaa <__ssprint_r+0x1a>
 8010062:	2300      	movs	r3, #0
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	e7ae      	b.n	800ffc6 <__ssprint_r+0x36>
 8010068:	002a      	movs	r2, r5
 801006a:	9805      	ldr	r0, [sp, #20]
 801006c:	f7ff fbc0 	bl	800f7f0 <_realloc_r>
 8010070:	1e06      	subs	r6, r0, #0
 8010072:	d1d6      	bne.n	8010022 <__ssprint_r+0x92>
 8010074:	6921      	ldr	r1, [r4, #16]
 8010076:	9805      	ldr	r0, [sp, #20]
 8010078:	f7fa fddc 	bl	800ac34 <_free_r>
 801007c:	230c      	movs	r3, #12
 801007e:	9a05      	ldr	r2, [sp, #20]
 8010080:	2001      	movs	r0, #1
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	89a2      	ldrh	r2, [r4, #12]
 8010086:	3334      	adds	r3, #52	; 0x34
 8010088:	4313      	orrs	r3, r2
 801008a:	81a3      	strh	r3, [r4, #12]
 801008c:	2300      	movs	r3, #0
 801008e:	4240      	negs	r0, r0
 8010090:	60bb      	str	r3, [r7, #8]
 8010092:	e78b      	b.n	800ffac <__ssprint_r+0x1c>
 8010094:	fffffb7f 	.word	0xfffffb7f

08010098 <_sungetc_r>:
 8010098:	b570      	push	{r4, r5, r6, lr}
 801009a:	0014      	movs	r4, r2
 801009c:	1c4b      	adds	r3, r1, #1
 801009e:	d103      	bne.n	80100a8 <_sungetc_r+0x10>
 80100a0:	2501      	movs	r5, #1
 80100a2:	426d      	negs	r5, r5
 80100a4:	0028      	movs	r0, r5
 80100a6:	bd70      	pop	{r4, r5, r6, pc}
 80100a8:	8993      	ldrh	r3, [r2, #12]
 80100aa:	2220      	movs	r2, #32
 80100ac:	4393      	bics	r3, r2
 80100ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80100b0:	81a3      	strh	r3, [r4, #12]
 80100b2:	b2ce      	uxtb	r6, r1
 80100b4:	6863      	ldr	r3, [r4, #4]
 80100b6:	b2cd      	uxtb	r5, r1
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	d010      	beq.n	80100de <_sungetc_r+0x46>
 80100bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100be:	429a      	cmp	r2, r3
 80100c0:	dd07      	ble.n	80100d2 <_sungetc_r+0x3a>
 80100c2:	6823      	ldr	r3, [r4, #0]
 80100c4:	3b01      	subs	r3, #1
 80100c6:	6023      	str	r3, [r4, #0]
 80100c8:	701e      	strb	r6, [r3, #0]
 80100ca:	6863      	ldr	r3, [r4, #4]
 80100cc:	3301      	adds	r3, #1
 80100ce:	6063      	str	r3, [r4, #4]
 80100d0:	e7e8      	b.n	80100a4 <_sungetc_r+0xc>
 80100d2:	0021      	movs	r1, r4
 80100d4:	f000 ff1a 	bl	8010f0c <__submore>
 80100d8:	2800      	cmp	r0, #0
 80100da:	d0f2      	beq.n	80100c2 <_sungetc_r+0x2a>
 80100dc:	e7e0      	b.n	80100a0 <_sungetc_r+0x8>
 80100de:	6921      	ldr	r1, [r4, #16]
 80100e0:	6822      	ldr	r2, [r4, #0]
 80100e2:	2900      	cmp	r1, #0
 80100e4:	d007      	beq.n	80100f6 <_sungetc_r+0x5e>
 80100e6:	4291      	cmp	r1, r2
 80100e8:	d205      	bcs.n	80100f6 <_sungetc_r+0x5e>
 80100ea:	1e51      	subs	r1, r2, #1
 80100ec:	7808      	ldrb	r0, [r1, #0]
 80100ee:	42a8      	cmp	r0, r5
 80100f0:	d101      	bne.n	80100f6 <_sungetc_r+0x5e>
 80100f2:	6021      	str	r1, [r4, #0]
 80100f4:	e7ea      	b.n	80100cc <_sungetc_r+0x34>
 80100f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80100f8:	0023      	movs	r3, r4
 80100fa:	3340      	adds	r3, #64	; 0x40
 80100fc:	6323      	str	r3, [r4, #48]	; 0x30
 80100fe:	2303      	movs	r3, #3
 8010100:	6363      	str	r3, [r4, #52]	; 0x34
 8010102:	0023      	movs	r3, r4
 8010104:	3342      	adds	r3, #66	; 0x42
 8010106:	63a2      	str	r2, [r4, #56]	; 0x38
 8010108:	701e      	strb	r6, [r3, #0]
 801010a:	6023      	str	r3, [r4, #0]
 801010c:	2301      	movs	r3, #1
 801010e:	e7de      	b.n	80100ce <_sungetc_r+0x36>

08010110 <__ssrefill_r>:
 8010110:	b510      	push	{r4, lr}
 8010112:	000c      	movs	r4, r1
 8010114:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8010116:	2900      	cmp	r1, #0
 8010118:	d00e      	beq.n	8010138 <__ssrefill_r+0x28>
 801011a:	0023      	movs	r3, r4
 801011c:	3340      	adds	r3, #64	; 0x40
 801011e:	4299      	cmp	r1, r3
 8010120:	d001      	beq.n	8010126 <__ssrefill_r+0x16>
 8010122:	f7fa fd87 	bl	800ac34 <_free_r>
 8010126:	2000      	movs	r0, #0
 8010128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801012a:	6320      	str	r0, [r4, #48]	; 0x30
 801012c:	6063      	str	r3, [r4, #4]
 801012e:	4283      	cmp	r3, r0
 8010130:	d002      	beq.n	8010138 <__ssrefill_r+0x28>
 8010132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	bd10      	pop	{r4, pc}
 8010138:	6923      	ldr	r3, [r4, #16]
 801013a:	2001      	movs	r0, #1
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	2300      	movs	r3, #0
 8010140:	89a2      	ldrh	r2, [r4, #12]
 8010142:	6063      	str	r3, [r4, #4]
 8010144:	3320      	adds	r3, #32
 8010146:	4313      	orrs	r3, r2
 8010148:	81a3      	strh	r3, [r4, #12]
 801014a:	4240      	negs	r0, r0
 801014c:	e7f3      	b.n	8010136 <__ssrefill_r+0x26>

0801014e <_sfread_r>:
 801014e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010150:	0014      	movs	r4, r2
 8010152:	435c      	muls	r4, r3
 8010154:	b087      	sub	sp, #28
 8010156:	1e26      	subs	r6, r4, #0
 8010158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801015a:	9005      	str	r0, [sp, #20]
 801015c:	9101      	str	r1, [sp, #4]
 801015e:	9202      	str	r2, [sp, #8]
 8010160:	9303      	str	r3, [sp, #12]
 8010162:	d11e      	bne.n	80101a2 <_sfread_r+0x54>
 8010164:	0020      	movs	r0, r4
 8010166:	b007      	add	sp, #28
 8010168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801016a:	003a      	movs	r2, r7
 801016c:	9801      	ldr	r0, [sp, #4]
 801016e:	f7fa fce6 	bl	800ab3e <memcpy>
 8010172:	682b      	ldr	r3, [r5, #0]
 8010174:	0029      	movs	r1, r5
 8010176:	19db      	adds	r3, r3, r7
 8010178:	602b      	str	r3, [r5, #0]
 801017a:	2300      	movs	r3, #0
 801017c:	606b      	str	r3, [r5, #4]
 801017e:	9b01      	ldr	r3, [sp, #4]
 8010180:	9805      	ldr	r0, [sp, #20]
 8010182:	19db      	adds	r3, r3, r7
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	1bf3      	subs	r3, r6, r7
 8010188:	9304      	str	r3, [sp, #16]
 801018a:	f7ff ffc1 	bl	8010110 <__ssrefill_r>
 801018e:	2800      	cmp	r0, #0
 8010190:	d006      	beq.n	80101a0 <_sfread_r+0x52>
 8010192:	193c      	adds	r4, r7, r4
 8010194:	1ba0      	subs	r0, r4, r6
 8010196:	9902      	ldr	r1, [sp, #8]
 8010198:	f7ef ffd0 	bl	800013c <__udivsi3>
 801019c:	0004      	movs	r4, r0
 801019e:	e7e1      	b.n	8010164 <_sfread_r+0x16>
 80101a0:	9e04      	ldr	r6, [sp, #16]
 80101a2:	686f      	ldr	r7, [r5, #4]
 80101a4:	6829      	ldr	r1, [r5, #0]
 80101a6:	42b7      	cmp	r7, r6
 80101a8:	d3df      	bcc.n	801016a <_sfread_r+0x1c>
 80101aa:	0032      	movs	r2, r6
 80101ac:	9801      	ldr	r0, [sp, #4]
 80101ae:	f7fa fcc6 	bl	800ab3e <memcpy>
 80101b2:	686b      	ldr	r3, [r5, #4]
 80101b4:	9c03      	ldr	r4, [sp, #12]
 80101b6:	1b9b      	subs	r3, r3, r6
 80101b8:	606b      	str	r3, [r5, #4]
 80101ba:	682b      	ldr	r3, [r5, #0]
 80101bc:	199b      	adds	r3, r3, r6
 80101be:	602b      	str	r3, [r5, #0]
 80101c0:	e7d0      	b.n	8010164 <_sfread_r+0x16>

080101c2 <__sprint_r>:
 80101c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c4:	6893      	ldr	r3, [r2, #8]
 80101c6:	b085      	sub	sp, #20
 80101c8:	9001      	str	r0, [sp, #4]
 80101ca:	000d      	movs	r5, r1
 80101cc:	0014      	movs	r4, r2
 80101ce:	1e18      	subs	r0, r3, #0
 80101d0:	d018      	beq.n	8010204 <__sprint_r+0x42>
 80101d2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80101d4:	049b      	lsls	r3, r3, #18
 80101d6:	d524      	bpl.n	8010222 <__sprint_r+0x60>
 80101d8:	6817      	ldr	r7, [r2, #0]
 80101da:	2600      	movs	r6, #0
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	9302      	str	r3, [sp, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	089b      	lsrs	r3, r3, #2
 80101e6:	9303      	str	r3, [sp, #12]
 80101e8:	9b03      	ldr	r3, [sp, #12]
 80101ea:	42b3      	cmp	r3, r6
 80101ec:	dc0e      	bgt.n	801020c <__sprint_r+0x4a>
 80101ee:	2203      	movs	r2, #3
 80101f0:	9b00      	ldr	r3, [sp, #0]
 80101f2:	68a0      	ldr	r0, [r4, #8]
 80101f4:	4393      	bics	r3, r2
 80101f6:	1ac0      	subs	r0, r0, r3
 80101f8:	60a0      	str	r0, [r4, #8]
 80101fa:	3708      	adds	r7, #8
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d1ec      	bne.n	80101da <__sprint_r+0x18>
 8010200:	2300      	movs	r3, #0
 8010202:	60a3      	str	r3, [r4, #8]
 8010204:	2300      	movs	r3, #0
 8010206:	6063      	str	r3, [r4, #4]
 8010208:	b005      	add	sp, #20
 801020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020c:	9902      	ldr	r1, [sp, #8]
 801020e:	00b3      	lsls	r3, r6, #2
 8010210:	58c9      	ldr	r1, [r1, r3]
 8010212:	002a      	movs	r2, r5
 8010214:	9801      	ldr	r0, [sp, #4]
 8010216:	f000 ff59 	bl	80110cc <_fputwc_r>
 801021a:	1c43      	adds	r3, r0, #1
 801021c:	d0f0      	beq.n	8010200 <__sprint_r+0x3e>
 801021e:	3601      	adds	r6, #1
 8010220:	e7e2      	b.n	80101e8 <__sprint_r+0x26>
 8010222:	9801      	ldr	r0, [sp, #4]
 8010224:	f000 fd14 	bl	8010c50 <__sfvwrite_r>
 8010228:	e7ea      	b.n	8010200 <__sprint_r+0x3e>
	...

0801022c <_vfiprintf_r>:
 801022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801022e:	b0c1      	sub	sp, #260	; 0x104
 8010230:	001c      	movs	r4, r3
 8010232:	001f      	movs	r7, r3
 8010234:	9006      	str	r0, [sp, #24]
 8010236:	9103      	str	r1, [sp, #12]
 8010238:	9207      	str	r2, [sp, #28]
 801023a:	2800      	cmp	r0, #0
 801023c:	d004      	beq.n	8010248 <_vfiprintf_r+0x1c>
 801023e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <_vfiprintf_r+0x1c>
 8010244:	f7fa fa98 	bl	800a778 <__sinit>
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801024c:	07db      	lsls	r3, r3, #31
 801024e:	d407      	bmi.n	8010260 <_vfiprintf_r+0x34>
 8010250:	9b03      	ldr	r3, [sp, #12]
 8010252:	899b      	ldrh	r3, [r3, #12]
 8010254:	059b      	lsls	r3, r3, #22
 8010256:	d403      	bmi.n	8010260 <_vfiprintf_r+0x34>
 8010258:	9b03      	ldr	r3, [sp, #12]
 801025a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801025c:	f7fa fc62 	bl	800ab24 <__retarget_lock_acquire_recursive>
 8010260:	9b03      	ldr	r3, [sp, #12]
 8010262:	220c      	movs	r2, #12
 8010264:	5e9a      	ldrsh	r2, [r3, r2]
 8010266:	2380      	movs	r3, #128	; 0x80
 8010268:	019b      	lsls	r3, r3, #6
 801026a:	421a      	tst	r2, r3
 801026c:	d107      	bne.n	801027e <_vfiprintf_r+0x52>
 801026e:	4313      	orrs	r3, r2
 8010270:	9a03      	ldr	r2, [sp, #12]
 8010272:	8193      	strh	r3, [r2, #12]
 8010274:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010276:	4aa3      	ldr	r2, [pc, #652]	; (8010504 <_vfiprintf_r+0x2d8>)
 8010278:	4013      	ands	r3, r2
 801027a:	9a03      	ldr	r2, [sp, #12]
 801027c:	6653      	str	r3, [r2, #100]	; 0x64
 801027e:	9b03      	ldr	r3, [sp, #12]
 8010280:	899b      	ldrh	r3, [r3, #12]
 8010282:	071b      	lsls	r3, r3, #28
 8010284:	d503      	bpl.n	801028e <_vfiprintf_r+0x62>
 8010286:	9b03      	ldr	r3, [sp, #12]
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d118      	bne.n	80102c0 <_vfiprintf_r+0x94>
 801028e:	9903      	ldr	r1, [sp, #12]
 8010290:	9806      	ldr	r0, [sp, #24]
 8010292:	f000 fe79 	bl	8010f88 <__swsetup_r>
 8010296:	2800      	cmp	r0, #0
 8010298:	d012      	beq.n	80102c0 <_vfiprintf_r+0x94>
 801029a:	9b03      	ldr	r3, [sp, #12]
 801029c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801029e:	07db      	lsls	r3, r3, #31
 80102a0:	d505      	bpl.n	80102ae <_vfiprintf_r+0x82>
 80102a2:	2301      	movs	r3, #1
 80102a4:	425b      	negs	r3, r3
 80102a6:	9308      	str	r3, [sp, #32]
 80102a8:	9808      	ldr	r0, [sp, #32]
 80102aa:	b041      	add	sp, #260	; 0x104
 80102ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ae:	9b03      	ldr	r3, [sp, #12]
 80102b0:	899b      	ldrh	r3, [r3, #12]
 80102b2:	059b      	lsls	r3, r3, #22
 80102b4:	d4f5      	bmi.n	80102a2 <_vfiprintf_r+0x76>
 80102b6:	9b03      	ldr	r3, [sp, #12]
 80102b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80102ba:	f7fa fc34 	bl	800ab26 <__retarget_lock_release_recursive>
 80102be:	e7f0      	b.n	80102a2 <_vfiprintf_r+0x76>
 80102c0:	221a      	movs	r2, #26
 80102c2:	9b03      	ldr	r3, [sp, #12]
 80102c4:	899b      	ldrh	r3, [r3, #12]
 80102c6:	401a      	ands	r2, r3
 80102c8:	2a0a      	cmp	r2, #10
 80102ca:	d116      	bne.n	80102fa <_vfiprintf_r+0xce>
 80102cc:	9a03      	ldr	r2, [sp, #12]
 80102ce:	210e      	movs	r1, #14
 80102d0:	5e52      	ldrsh	r2, [r2, r1]
 80102d2:	2a00      	cmp	r2, #0
 80102d4:	db11      	blt.n	80102fa <_vfiprintf_r+0xce>
 80102d6:	9a03      	ldr	r2, [sp, #12]
 80102d8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80102da:	07d2      	lsls	r2, r2, #31
 80102dc:	d405      	bmi.n	80102ea <_vfiprintf_r+0xbe>
 80102de:	059b      	lsls	r3, r3, #22
 80102e0:	d403      	bmi.n	80102ea <_vfiprintf_r+0xbe>
 80102e2:	9b03      	ldr	r3, [sp, #12]
 80102e4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80102e6:	f7fa fc1e 	bl	800ab26 <__retarget_lock_release_recursive>
 80102ea:	0023      	movs	r3, r4
 80102ec:	9a07      	ldr	r2, [sp, #28]
 80102ee:	9903      	ldr	r1, [sp, #12]
 80102f0:	9806      	ldr	r0, [sp, #24]
 80102f2:	f000 fc69 	bl	8010bc8 <__sbprintf>
 80102f6:	9008      	str	r0, [sp, #32]
 80102f8:	e7d6      	b.n	80102a8 <_vfiprintf_r+0x7c>
 80102fa:	2300      	movs	r3, #0
 80102fc:	ad17      	add	r5, sp, #92	; 0x5c
 80102fe:	9514      	str	r5, [sp, #80]	; 0x50
 8010300:	9316      	str	r3, [sp, #88]	; 0x58
 8010302:	9315      	str	r3, [sp, #84]	; 0x54
 8010304:	930c      	str	r3, [sp, #48]	; 0x30
 8010306:	930d      	str	r3, [sp, #52]	; 0x34
 8010308:	930e      	str	r3, [sp, #56]	; 0x38
 801030a:	930f      	str	r3, [sp, #60]	; 0x3c
 801030c:	9308      	str	r3, [sp, #32]
 801030e:	9c07      	ldr	r4, [sp, #28]
 8010310:	7823      	ldrb	r3, [r4, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <_vfiprintf_r+0xf0>
 8010316:	2b25      	cmp	r3, #37	; 0x25
 8010318:	d000      	beq.n	801031c <_vfiprintf_r+0xf0>
 801031a:	e08d      	b.n	8010438 <_vfiprintf_r+0x20c>
 801031c:	9b07      	ldr	r3, [sp, #28]
 801031e:	1ae6      	subs	r6, r4, r3
 8010320:	429c      	cmp	r4, r3
 8010322:	d016      	beq.n	8010352 <_vfiprintf_r+0x126>
 8010324:	602b      	str	r3, [r5, #0]
 8010326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010328:	606e      	str	r6, [r5, #4]
 801032a:	199b      	adds	r3, r3, r6
 801032c:	9316      	str	r3, [sp, #88]	; 0x58
 801032e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010330:	3508      	adds	r5, #8
 8010332:	3301      	adds	r3, #1
 8010334:	9315      	str	r3, [sp, #84]	; 0x54
 8010336:	2b07      	cmp	r3, #7
 8010338:	dd08      	ble.n	801034c <_vfiprintf_r+0x120>
 801033a:	9903      	ldr	r1, [sp, #12]
 801033c:	9806      	ldr	r0, [sp, #24]
 801033e:	aa14      	add	r2, sp, #80	; 0x50
 8010340:	f7ff ff3f 	bl	80101c2 <__sprint_r>
 8010344:	2800      	cmp	r0, #0
 8010346:	d000      	beq.n	801034a <_vfiprintf_r+0x11e>
 8010348:	e3d9      	b.n	8010afe <_vfiprintf_r+0x8d2>
 801034a:	ad17      	add	r5, sp, #92	; 0x5c
 801034c:	9b08      	ldr	r3, [sp, #32]
 801034e:	199b      	adds	r3, r3, r6
 8010350:	9308      	str	r3, [sp, #32]
 8010352:	7823      	ldrb	r3, [r4, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d101      	bne.n	801035c <_vfiprintf_r+0x130>
 8010358:	f000 fbf6 	bl	8010b48 <_vfiprintf_r+0x91c>
 801035c:	2200      	movs	r2, #0
 801035e:	a912      	add	r1, sp, #72	; 0x48
 8010360:	70ca      	strb	r2, [r1, #3]
 8010362:	2101      	movs	r1, #1
 8010364:	1c63      	adds	r3, r4, #1
 8010366:	0014      	movs	r4, r2
 8010368:	4249      	negs	r1, r1
 801036a:	9105      	str	r1, [sp, #20]
 801036c:	9209      	str	r2, [sp, #36]	; 0x24
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	9207      	str	r2, [sp, #28]
 8010374:	0018      	movs	r0, r3
 8010376:	3820      	subs	r0, #32
 8010378:	285a      	cmp	r0, #90	; 0x5a
 801037a:	d900      	bls.n	801037e <_vfiprintf_r+0x152>
 801037c:	e362      	b.n	8010a44 <_vfiprintf_r+0x818>
 801037e:	f7ef fed3 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010382:	0078      	.short	0x0078
 8010384:	03610361 	.word	0x03610361
 8010388:	03610081 	.word	0x03610081
 801038c:	03610361 	.word	0x03610361
 8010390:	0361005d 	.word	0x0361005d
 8010394:	00830361 	.word	0x00830361
 8010398:	0361008b 	.word	0x0361008b
 801039c:	008f0089 	.word	0x008f0089
 80103a0:	00ad0361 	.word	0x00ad0361
 80103a4:	00af00af 	.word	0x00af00af
 80103a8:	00af00af 	.word	0x00af00af
 80103ac:	00af00af 	.word	0x00af00af
 80103b0:	00af00af 	.word	0x00af00af
 80103b4:	036100af 	.word	0x036100af
 80103b8:	03610361 	.word	0x03610361
 80103bc:	03610361 	.word	0x03610361
 80103c0:	03610361 	.word	0x03610361
 80103c4:	03610361 	.word	0x03610361
 80103c8:	00e600da 	.word	0x00e600da
 80103cc:	03610361 	.word	0x03610361
 80103d0:	03610361 	.word	0x03610361
 80103d4:	03610361 	.word	0x03610361
 80103d8:	03610361 	.word	0x03610361
 80103dc:	03610361 	.word	0x03610361
 80103e0:	03610143 	.word	0x03610143
 80103e4:	03610361 	.word	0x03610361
 80103e8:	03610182 	.word	0x03610182
 80103ec:	0361027c 	.word	0x0361027c
 80103f0:	02ae0361 	.word	0x02ae0361
 80103f4:	03610361 	.word	0x03610361
 80103f8:	03610361 	.word	0x03610361
 80103fc:	03610361 	.word	0x03610361
 8010400:	03610361 	.word	0x03610361
 8010404:	03610361 	.word	0x03610361
 8010408:	00e800da 	.word	0x00e800da
 801040c:	03610361 	.word	0x03610361
 8010410:	00c30361 	.word	0x00c30361
 8010414:	00d600e8 	.word	0x00d600e8
 8010418:	00cf0361 	.word	0x00cf0361
 801041c:	01260361 	.word	0x01260361
 8010420:	01740145 	.word	0x01740145
 8010424:	036100d6 	.word	0x036100d6
 8010428:	007f0182 	.word	0x007f0182
 801042c:	0361027e 	.word	0x0361027e
 8010430:	02cd0361 	.word	0x02cd0361
 8010434:	007f0361 	.word	0x007f0361
 8010438:	3401      	adds	r4, #1
 801043a:	e769      	b.n	8010310 <_vfiprintf_r+0xe4>
 801043c:	9806      	ldr	r0, [sp, #24]
 801043e:	f7fe fa47 	bl	800e8d0 <_localeconv_r>
 8010442:	6843      	ldr	r3, [r0, #4]
 8010444:	0018      	movs	r0, r3
 8010446:	930f      	str	r3, [sp, #60]	; 0x3c
 8010448:	f7ef fe5c 	bl	8000104 <strlen>
 801044c:	900e      	str	r0, [sp, #56]	; 0x38
 801044e:	9806      	ldr	r0, [sp, #24]
 8010450:	f7fe fa3e 	bl	800e8d0 <_localeconv_r>
 8010454:	6883      	ldr	r3, [r0, #8]
 8010456:	930d      	str	r3, [sp, #52]	; 0x34
 8010458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801045a:	2b00      	cmp	r3, #0
 801045c:	d010      	beq.n	8010480 <_vfiprintf_r+0x254>
 801045e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00d      	beq.n	8010480 <_vfiprintf_r+0x254>
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00a      	beq.n	8010480 <_vfiprintf_r+0x254>
 801046a:	2380      	movs	r3, #128	; 0x80
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	431c      	orrs	r4, r3
 8010470:	e006      	b.n	8010480 <_vfiprintf_r+0x254>
 8010472:	ab12      	add	r3, sp, #72	; 0x48
 8010474:	78da      	ldrb	r2, [r3, #3]
 8010476:	3303      	adds	r3, #3
 8010478:	2a00      	cmp	r2, #0
 801047a:	d101      	bne.n	8010480 <_vfiprintf_r+0x254>
 801047c:	3220      	adds	r2, #32
 801047e:	701a      	strb	r2, [r3, #0]
 8010480:	9b07      	ldr	r3, [sp, #28]
 8010482:	e774      	b.n	801036e <_vfiprintf_r+0x142>
 8010484:	2301      	movs	r3, #1
 8010486:	e7f2      	b.n	801046e <_vfiprintf_r+0x242>
 8010488:	cf08      	ldmia	r7!, {r3}
 801048a:	9309      	str	r3, [sp, #36]	; 0x24
 801048c:	2b00      	cmp	r3, #0
 801048e:	daf7      	bge.n	8010480 <_vfiprintf_r+0x254>
 8010490:	425b      	negs	r3, r3
 8010492:	9309      	str	r3, [sp, #36]	; 0x24
 8010494:	2304      	movs	r3, #4
 8010496:	e7ea      	b.n	801046e <_vfiprintf_r+0x242>
 8010498:	222b      	movs	r2, #43	; 0x2b
 801049a:	ab12      	add	r3, sp, #72	; 0x48
 801049c:	70da      	strb	r2, [r3, #3]
 801049e:	e7ef      	b.n	8010480 <_vfiprintf_r+0x254>
 80104a0:	9b07      	ldr	r3, [sp, #28]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	2b2a      	cmp	r3, #42	; 0x2a
 80104a8:	d00f      	beq.n	80104ca <_vfiprintf_r+0x29e>
 80104aa:	2100      	movs	r1, #0
 80104ac:	9105      	str	r1, [sp, #20]
 80104ae:	0019      	movs	r1, r3
 80104b0:	3930      	subs	r1, #48	; 0x30
 80104b2:	9207      	str	r2, [sp, #28]
 80104b4:	2909      	cmp	r1, #9
 80104b6:	d900      	bls.n	80104ba <_vfiprintf_r+0x28e>
 80104b8:	e75c      	b.n	8010374 <_vfiprintf_r+0x148>
 80104ba:	200a      	movs	r0, #10
 80104bc:	9b05      	ldr	r3, [sp, #20]
 80104be:	4343      	muls	r3, r0
 80104c0:	185b      	adds	r3, r3, r1
 80104c2:	9305      	str	r3, [sp, #20]
 80104c4:	7813      	ldrb	r3, [r2, #0]
 80104c6:	3201      	adds	r2, #1
 80104c8:	e7f1      	b.n	80104ae <_vfiprintf_r+0x282>
 80104ca:	cf08      	ldmia	r7!, {r3}
 80104cc:	9305      	str	r3, [sp, #20]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	da02      	bge.n	80104d8 <_vfiprintf_r+0x2ac>
 80104d2:	2301      	movs	r3, #1
 80104d4:	425b      	negs	r3, r3
 80104d6:	9305      	str	r3, [sp, #20]
 80104d8:	9207      	str	r2, [sp, #28]
 80104da:	e7d1      	b.n	8010480 <_vfiprintf_r+0x254>
 80104dc:	2380      	movs	r3, #128	; 0x80
 80104de:	e7c6      	b.n	801046e <_vfiprintf_r+0x242>
 80104e0:	2100      	movs	r1, #0
 80104e2:	9a07      	ldr	r2, [sp, #28]
 80104e4:	9109      	str	r1, [sp, #36]	; 0x24
 80104e6:	200a      	movs	r0, #10
 80104e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104ea:	3b30      	subs	r3, #48	; 0x30
 80104ec:	4341      	muls	r1, r0
 80104ee:	185b      	adds	r3, r3, r1
 80104f0:	9309      	str	r3, [sp, #36]	; 0x24
 80104f2:	0013      	movs	r3, r2
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	3201      	adds	r2, #1
 80104f8:	0019      	movs	r1, r3
 80104fa:	3930      	subs	r1, #48	; 0x30
 80104fc:	9207      	str	r2, [sp, #28]
 80104fe:	2909      	cmp	r1, #9
 8010500:	d9f1      	bls.n	80104e6 <_vfiprintf_r+0x2ba>
 8010502:	e737      	b.n	8010374 <_vfiprintf_r+0x148>
 8010504:	ffffdfff 	.word	0xffffdfff
 8010508:	9b07      	ldr	r3, [sp, #28]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b68      	cmp	r3, #104	; 0x68
 801050e:	d105      	bne.n	801051c <_vfiprintf_r+0x2f0>
 8010510:	9b07      	ldr	r3, [sp, #28]
 8010512:	3301      	adds	r3, #1
 8010514:	9307      	str	r3, [sp, #28]
 8010516:	2380      	movs	r3, #128	; 0x80
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	e7a8      	b.n	801046e <_vfiprintf_r+0x242>
 801051c:	2340      	movs	r3, #64	; 0x40
 801051e:	e7a6      	b.n	801046e <_vfiprintf_r+0x242>
 8010520:	9b07      	ldr	r3, [sp, #28]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	2b6c      	cmp	r3, #108	; 0x6c
 8010526:	d104      	bne.n	8010532 <_vfiprintf_r+0x306>
 8010528:	9b07      	ldr	r3, [sp, #28]
 801052a:	3301      	adds	r3, #1
 801052c:	9307      	str	r3, [sp, #28]
 801052e:	2320      	movs	r3, #32
 8010530:	e79d      	b.n	801046e <_vfiprintf_r+0x242>
 8010532:	2310      	movs	r3, #16
 8010534:	e79b      	b.n	801046e <_vfiprintf_r+0x242>
 8010536:	003a      	movs	r2, r7
 8010538:	ca08      	ldmia	r2!, {r3}
 801053a:	ae27      	add	r6, sp, #156	; 0x9c
 801053c:	7033      	strb	r3, [r6, #0]
 801053e:	2300      	movs	r3, #0
 8010540:	9204      	str	r2, [sp, #16]
 8010542:	aa12      	add	r2, sp, #72	; 0x48
 8010544:	70d3      	strb	r3, [r2, #3]
 8010546:	2201      	movs	r2, #1
 8010548:	930b      	str	r3, [sp, #44]	; 0x2c
 801054a:	9205      	str	r2, [sp, #20]
 801054c:	e0b0      	b.n	80106b0 <_vfiprintf_r+0x484>
 801054e:	2310      	movs	r3, #16
 8010550:	431c      	orrs	r4, r3
 8010552:	06a3      	lsls	r3, r4, #26
 8010554:	d52a      	bpl.n	80105ac <_vfiprintf_r+0x380>
 8010556:	2307      	movs	r3, #7
 8010558:	3707      	adds	r7, #7
 801055a:	439f      	bics	r7, r3
 801055c:	0039      	movs	r1, r7
 801055e:	c90c      	ldmia	r1!, {r2, r3}
 8010560:	9200      	str	r2, [sp, #0]
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	9104      	str	r1, [sp, #16]
 8010566:	9a01      	ldr	r2, [sp, #4]
 8010568:	2301      	movs	r3, #1
 801056a:	2a00      	cmp	r2, #0
 801056c:	da09      	bge.n	8010582 <_vfiprintf_r+0x356>
 801056e:	9e00      	ldr	r6, [sp, #0]
 8010570:	9f01      	ldr	r7, [sp, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	4271      	negs	r1, r6
 8010576:	41ba      	sbcs	r2, r7
 8010578:	9100      	str	r1, [sp, #0]
 801057a:	9201      	str	r2, [sp, #4]
 801057c:	212d      	movs	r1, #45	; 0x2d
 801057e:	aa12      	add	r2, sp, #72	; 0x48
 8010580:	70d1      	strb	r1, [r2, #3]
 8010582:	9901      	ldr	r1, [sp, #4]
 8010584:	9a00      	ldr	r2, [sp, #0]
 8010586:	430a      	orrs	r2, r1
 8010588:	9905      	ldr	r1, [sp, #20]
 801058a:	3101      	adds	r1, #1
 801058c:	d100      	bne.n	8010590 <_vfiprintf_r+0x364>
 801058e:	e2e9      	b.n	8010b64 <_vfiprintf_r+0x938>
 8010590:	2180      	movs	r1, #128	; 0x80
 8010592:	0027      	movs	r7, r4
 8010594:	438f      	bics	r7, r1
 8010596:	2a00      	cmp	r2, #0
 8010598:	d000      	beq.n	801059c <_vfiprintf_r+0x370>
 801059a:	e2e7      	b.n	8010b6c <_vfiprintf_r+0x940>
 801059c:	9a05      	ldr	r2, [sp, #20]
 801059e:	2a00      	cmp	r2, #0
 80105a0:	d100      	bne.n	80105a4 <_vfiprintf_r+0x378>
 80105a2:	e243      	b.n	8010a2c <_vfiprintf_r+0x800>
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d000      	beq.n	80105aa <_vfiprintf_r+0x37e>
 80105a8:	e2e3      	b.n	8010b72 <_vfiprintf_r+0x946>
 80105aa:	e1e7      	b.n	801097c <_vfiprintf_r+0x750>
 80105ac:	003a      	movs	r2, r7
 80105ae:	ca08      	ldmia	r2!, {r3}
 80105b0:	9204      	str	r2, [sp, #16]
 80105b2:	06e2      	lsls	r2, r4, #27
 80105b4:	d503      	bpl.n	80105be <_vfiprintf_r+0x392>
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	17db      	asrs	r3, r3, #31
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	e7d3      	b.n	8010566 <_vfiprintf_r+0x33a>
 80105be:	0662      	lsls	r2, r4, #25
 80105c0:	d501      	bpl.n	80105c6 <_vfiprintf_r+0x39a>
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	e7f7      	b.n	80105b6 <_vfiprintf_r+0x38a>
 80105c6:	05a2      	lsls	r2, r4, #22
 80105c8:	d5f5      	bpl.n	80105b6 <_vfiprintf_r+0x38a>
 80105ca:	b25b      	sxtb	r3, r3
 80105cc:	e7f3      	b.n	80105b6 <_vfiprintf_r+0x38a>
 80105ce:	1d3b      	adds	r3, r7, #4
 80105d0:	9304      	str	r3, [sp, #16]
 80105d2:	06a3      	lsls	r3, r4, #26
 80105d4:	d506      	bpl.n	80105e4 <_vfiprintf_r+0x3b8>
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	9a08      	ldr	r2, [sp, #32]
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	17d2      	asrs	r2, r2, #31
 80105de:	605a      	str	r2, [r3, #4]
 80105e0:	9f04      	ldr	r7, [sp, #16]
 80105e2:	e694      	b.n	801030e <_vfiprintf_r+0xe2>
 80105e4:	06e3      	lsls	r3, r4, #27
 80105e6:	d503      	bpl.n	80105f0 <_vfiprintf_r+0x3c4>
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	9a08      	ldr	r2, [sp, #32]
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	e7f7      	b.n	80105e0 <_vfiprintf_r+0x3b4>
 80105f0:	0663      	lsls	r3, r4, #25
 80105f2:	d503      	bpl.n	80105fc <_vfiprintf_r+0x3d0>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	9a08      	ldr	r2, [sp, #32]
 80105f8:	801a      	strh	r2, [r3, #0]
 80105fa:	e7f1      	b.n	80105e0 <_vfiprintf_r+0x3b4>
 80105fc:	05a4      	lsls	r4, r4, #22
 80105fe:	d5f3      	bpl.n	80105e8 <_vfiprintf_r+0x3bc>
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	9a08      	ldr	r2, [sp, #32]
 8010604:	701a      	strb	r2, [r3, #0]
 8010606:	e7eb      	b.n	80105e0 <_vfiprintf_r+0x3b4>
 8010608:	2310      	movs	r3, #16
 801060a:	431c      	orrs	r4, r3
 801060c:	2320      	movs	r3, #32
 801060e:	0020      	movs	r0, r4
 8010610:	4018      	ands	r0, r3
 8010612:	421c      	tst	r4, r3
 8010614:	d00d      	beq.n	8010632 <_vfiprintf_r+0x406>
 8010616:	3b19      	subs	r3, #25
 8010618:	3707      	adds	r7, #7
 801061a:	439f      	bics	r7, r3
 801061c:	0039      	movs	r1, r7
 801061e:	c90c      	ldmia	r1!, {r2, r3}
 8010620:	9200      	str	r2, [sp, #0]
 8010622:	9301      	str	r3, [sp, #4]
 8010624:	9104      	str	r1, [sp, #16]
 8010626:	4bcc      	ldr	r3, [pc, #816]	; (8010958 <_vfiprintf_r+0x72c>)
 8010628:	401c      	ands	r4, r3
 801062a:	2300      	movs	r3, #0
 801062c:	2100      	movs	r1, #0
 801062e:	aa12      	add	r2, sp, #72	; 0x48
 8010630:	e7a6      	b.n	8010580 <_vfiprintf_r+0x354>
 8010632:	003a      	movs	r2, r7
 8010634:	ca08      	ldmia	r2!, {r3}
 8010636:	0021      	movs	r1, r4
 8010638:	9204      	str	r2, [sp, #16]
 801063a:	2210      	movs	r2, #16
 801063c:	4011      	ands	r1, r2
 801063e:	4214      	tst	r4, r2
 8010640:	d002      	beq.n	8010648 <_vfiprintf_r+0x41c>
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	9001      	str	r0, [sp, #4]
 8010646:	e7ee      	b.n	8010626 <_vfiprintf_r+0x3fa>
 8010648:	2240      	movs	r2, #64	; 0x40
 801064a:	0020      	movs	r0, r4
 801064c:	4010      	ands	r0, r2
 801064e:	4214      	tst	r4, r2
 8010650:	d003      	beq.n	801065a <_vfiprintf_r+0x42e>
 8010652:	b29b      	uxth	r3, r3
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	9101      	str	r1, [sp, #4]
 8010658:	e7e5      	b.n	8010626 <_vfiprintf_r+0x3fa>
 801065a:	2280      	movs	r2, #128	; 0x80
 801065c:	0021      	movs	r1, r4
 801065e:	0092      	lsls	r2, r2, #2
 8010660:	4011      	ands	r1, r2
 8010662:	4214      	tst	r4, r2
 8010664:	d0f6      	beq.n	8010654 <_vfiprintf_r+0x428>
 8010666:	b2db      	uxtb	r3, r3
 8010668:	e7eb      	b.n	8010642 <_vfiprintf_r+0x416>
 801066a:	003b      	movs	r3, r7
 801066c:	cb04      	ldmia	r3!, {r2}
 801066e:	49bb      	ldr	r1, [pc, #748]	; (801095c <_vfiprintf_r+0x730>)
 8010670:	9304      	str	r3, [sp, #16]
 8010672:	2300      	movs	r3, #0
 8010674:	9200      	str	r2, [sp, #0]
 8010676:	aa13      	add	r2, sp, #76	; 0x4c
 8010678:	8011      	strh	r1, [r2, #0]
 801067a:	4ab9      	ldr	r2, [pc, #740]	; (8010960 <_vfiprintf_r+0x734>)
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	3302      	adds	r3, #2
 8010680:	431c      	orrs	r4, r3
 8010682:	920c      	str	r2, [sp, #48]	; 0x30
 8010684:	e7d2      	b.n	801062c <_vfiprintf_r+0x400>
 8010686:	003b      	movs	r3, r7
 8010688:	2700      	movs	r7, #0
 801068a:	cb40      	ldmia	r3!, {r6}
 801068c:	9304      	str	r3, [sp, #16]
 801068e:	ab12      	add	r3, sp, #72	; 0x48
 8010690:	70df      	strb	r7, [r3, #3]
 8010692:	9b05      	ldr	r3, [sp, #20]
 8010694:	3301      	adds	r3, #1
 8010696:	d100      	bne.n	801069a <_vfiprintf_r+0x46e>
 8010698:	e0ea      	b.n	8010870 <_vfiprintf_r+0x644>
 801069a:	0039      	movs	r1, r7
 801069c:	0030      	movs	r0, r6
 801069e:	9a05      	ldr	r2, [sp, #20]
 80106a0:	f7fe f92e 	bl	800e900 <memchr>
 80106a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80106a6:	42b8      	cmp	r0, r7
 80106a8:	d002      	beq.n	80106b0 <_vfiprintf_r+0x484>
 80106aa:	1b83      	subs	r3, r0, r6
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	970b      	str	r7, [sp, #44]	; 0x2c
 80106b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106b2:	9a05      	ldr	r2, [sp, #20]
 80106b4:	930a      	str	r3, [sp, #40]	; 0x28
 80106b6:	4293      	cmp	r3, r2
 80106b8:	da00      	bge.n	80106bc <_vfiprintf_r+0x490>
 80106ba:	920a      	str	r2, [sp, #40]	; 0x28
 80106bc:	ab12      	add	r3, sp, #72	; 0x48
 80106be:	3303      	adds	r3, #3
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	1e5a      	subs	r2, r3, #1
 80106c4:	4193      	sbcs	r3, r2
 80106c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106c8:	18d3      	adds	r3, r2, r3
 80106ca:	930a      	str	r3, [sp, #40]	; 0x28
 80106cc:	0022      	movs	r2, r4
 80106ce:	2302      	movs	r3, #2
 80106d0:	401a      	ands	r2, r3
 80106d2:	9210      	str	r2, [sp, #64]	; 0x40
 80106d4:	421c      	tst	r4, r3
 80106d6:	d002      	beq.n	80106de <_vfiprintf_r+0x4b2>
 80106d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106da:	3302      	adds	r3, #2
 80106dc:	930a      	str	r3, [sp, #40]	; 0x28
 80106de:	2384      	movs	r3, #132	; 0x84
 80106e0:	0022      	movs	r2, r4
 80106e2:	401a      	ands	r2, r3
 80106e4:	9211      	str	r2, [sp, #68]	; 0x44
 80106e6:	421c      	tst	r4, r3
 80106e8:	d11e      	bne.n	8010728 <_vfiprintf_r+0x4fc>
 80106ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ee:	1a9f      	subs	r7, r3, r2
 80106f0:	2f00      	cmp	r7, #0
 80106f2:	dd19      	ble.n	8010728 <_vfiprintf_r+0x4fc>
 80106f4:	0029      	movs	r1, r5
 80106f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106f8:	489a      	ldr	r0, [pc, #616]	; (8010964 <_vfiprintf_r+0x738>)
 80106fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80106fc:	3301      	adds	r3, #1
 80106fe:	3108      	adds	r1, #8
 8010700:	6028      	str	r0, [r5, #0]
 8010702:	2f10      	cmp	r7, #16
 8010704:	dd00      	ble.n	8010708 <_vfiprintf_r+0x4dc>
 8010706:	e1a7      	b.n	8010a58 <_vfiprintf_r+0x82c>
 8010708:	606f      	str	r7, [r5, #4]
 801070a:	18bf      	adds	r7, r7, r2
 801070c:	000d      	movs	r5, r1
 801070e:	9716      	str	r7, [sp, #88]	; 0x58
 8010710:	9315      	str	r3, [sp, #84]	; 0x54
 8010712:	2b07      	cmp	r3, #7
 8010714:	dd08      	ble.n	8010728 <_vfiprintf_r+0x4fc>
 8010716:	9903      	ldr	r1, [sp, #12]
 8010718:	9806      	ldr	r0, [sp, #24]
 801071a:	aa14      	add	r2, sp, #80	; 0x50
 801071c:	f7ff fd51 	bl	80101c2 <__sprint_r>
 8010720:	2800      	cmp	r0, #0
 8010722:	d000      	beq.n	8010726 <_vfiprintf_r+0x4fa>
 8010724:	e1eb      	b.n	8010afe <_vfiprintf_r+0x8d2>
 8010726:	ad17      	add	r5, sp, #92	; 0x5c
 8010728:	a912      	add	r1, sp, #72	; 0x48
 801072a:	78c8      	ldrb	r0, [r1, #3]
 801072c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801072e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010730:	3103      	adds	r1, #3
 8010732:	2800      	cmp	r0, #0
 8010734:	d012      	beq.n	801075c <_vfiprintf_r+0x530>
 8010736:	6029      	str	r1, [r5, #0]
 8010738:	2101      	movs	r1, #1
 801073a:	3301      	adds	r3, #1
 801073c:	1852      	adds	r2, r2, r1
 801073e:	6069      	str	r1, [r5, #4]
 8010740:	9216      	str	r2, [sp, #88]	; 0x58
 8010742:	9315      	str	r3, [sp, #84]	; 0x54
 8010744:	3508      	adds	r5, #8
 8010746:	2b07      	cmp	r3, #7
 8010748:	dd08      	ble.n	801075c <_vfiprintf_r+0x530>
 801074a:	9903      	ldr	r1, [sp, #12]
 801074c:	9806      	ldr	r0, [sp, #24]
 801074e:	aa14      	add	r2, sp, #80	; 0x50
 8010750:	f7ff fd37 	bl	80101c2 <__sprint_r>
 8010754:	2800      	cmp	r0, #0
 8010756:	d000      	beq.n	801075a <_vfiprintf_r+0x52e>
 8010758:	e1d1      	b.n	8010afe <_vfiprintf_r+0x8d2>
 801075a:	ad17      	add	r5, sp, #92	; 0x5c
 801075c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801075e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010762:	2900      	cmp	r1, #0
 8010764:	d013      	beq.n	801078e <_vfiprintf_r+0x562>
 8010766:	a913      	add	r1, sp, #76	; 0x4c
 8010768:	6029      	str	r1, [r5, #0]
 801076a:	2102      	movs	r1, #2
 801076c:	3301      	adds	r3, #1
 801076e:	1852      	adds	r2, r2, r1
 8010770:	6069      	str	r1, [r5, #4]
 8010772:	9216      	str	r2, [sp, #88]	; 0x58
 8010774:	9315      	str	r3, [sp, #84]	; 0x54
 8010776:	3508      	adds	r5, #8
 8010778:	2b07      	cmp	r3, #7
 801077a:	dd08      	ble.n	801078e <_vfiprintf_r+0x562>
 801077c:	9903      	ldr	r1, [sp, #12]
 801077e:	9806      	ldr	r0, [sp, #24]
 8010780:	aa14      	add	r2, sp, #80	; 0x50
 8010782:	f7ff fd1e 	bl	80101c2 <__sprint_r>
 8010786:	2800      	cmp	r0, #0
 8010788:	d000      	beq.n	801078c <_vfiprintf_r+0x560>
 801078a:	e1b8      	b.n	8010afe <_vfiprintf_r+0x8d2>
 801078c:	ad17      	add	r5, sp, #92	; 0x5c
 801078e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010790:	2b80      	cmp	r3, #128	; 0x80
 8010792:	d11e      	bne.n	80107d2 <_vfiprintf_r+0x5a6>
 8010794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010798:	1a9f      	subs	r7, r3, r2
 801079a:	2f00      	cmp	r7, #0
 801079c:	dd19      	ble.n	80107d2 <_vfiprintf_r+0x5a6>
 801079e:	0029      	movs	r1, r5
 80107a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107a2:	4871      	ldr	r0, [pc, #452]	; (8010968 <_vfiprintf_r+0x73c>)
 80107a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107a6:	3301      	adds	r3, #1
 80107a8:	3108      	adds	r1, #8
 80107aa:	6028      	str	r0, [r5, #0]
 80107ac:	2f10      	cmp	r7, #16
 80107ae:	dd00      	ble.n	80107b2 <_vfiprintf_r+0x586>
 80107b0:	e164      	b.n	8010a7c <_vfiprintf_r+0x850>
 80107b2:	606f      	str	r7, [r5, #4]
 80107b4:	18bf      	adds	r7, r7, r2
 80107b6:	000d      	movs	r5, r1
 80107b8:	9716      	str	r7, [sp, #88]	; 0x58
 80107ba:	9315      	str	r3, [sp, #84]	; 0x54
 80107bc:	2b07      	cmp	r3, #7
 80107be:	dd08      	ble.n	80107d2 <_vfiprintf_r+0x5a6>
 80107c0:	9903      	ldr	r1, [sp, #12]
 80107c2:	9806      	ldr	r0, [sp, #24]
 80107c4:	aa14      	add	r2, sp, #80	; 0x50
 80107c6:	f7ff fcfc 	bl	80101c2 <__sprint_r>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d000      	beq.n	80107d0 <_vfiprintf_r+0x5a4>
 80107ce:	e196      	b.n	8010afe <_vfiprintf_r+0x8d2>
 80107d0:	ad17      	add	r5, sp, #92	; 0x5c
 80107d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107d4:	9a05      	ldr	r2, [sp, #20]
 80107d6:	1a9f      	subs	r7, r3, r2
 80107d8:	2f00      	cmp	r7, #0
 80107da:	dd19      	ble.n	8010810 <_vfiprintf_r+0x5e4>
 80107dc:	0029      	movs	r1, r5
 80107de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107e0:	4861      	ldr	r0, [pc, #388]	; (8010968 <_vfiprintf_r+0x73c>)
 80107e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107e4:	3301      	adds	r3, #1
 80107e6:	3108      	adds	r1, #8
 80107e8:	6028      	str	r0, [r5, #0]
 80107ea:	2f10      	cmp	r7, #16
 80107ec:	dd00      	ble.n	80107f0 <_vfiprintf_r+0x5c4>
 80107ee:	e157      	b.n	8010aa0 <_vfiprintf_r+0x874>
 80107f0:	606f      	str	r7, [r5, #4]
 80107f2:	18bf      	adds	r7, r7, r2
 80107f4:	000d      	movs	r5, r1
 80107f6:	9716      	str	r7, [sp, #88]	; 0x58
 80107f8:	9315      	str	r3, [sp, #84]	; 0x54
 80107fa:	2b07      	cmp	r3, #7
 80107fc:	dd08      	ble.n	8010810 <_vfiprintf_r+0x5e4>
 80107fe:	9903      	ldr	r1, [sp, #12]
 8010800:	9806      	ldr	r0, [sp, #24]
 8010802:	aa14      	add	r2, sp, #80	; 0x50
 8010804:	f7ff fcdd 	bl	80101c2 <__sprint_r>
 8010808:	2800      	cmp	r0, #0
 801080a:	d000      	beq.n	801080e <_vfiprintf_r+0x5e2>
 801080c:	e177      	b.n	8010afe <_vfiprintf_r+0x8d2>
 801080e:	ad17      	add	r5, sp, #92	; 0x5c
 8010810:	9b05      	ldr	r3, [sp, #20]
 8010812:	9a05      	ldr	r2, [sp, #20]
 8010814:	606b      	str	r3, [r5, #4]
 8010816:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010818:	602e      	str	r6, [r5, #0]
 801081a:	189b      	adds	r3, r3, r2
 801081c:	9316      	str	r3, [sp, #88]	; 0x58
 801081e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010820:	3508      	adds	r5, #8
 8010822:	3301      	adds	r3, #1
 8010824:	9315      	str	r3, [sp, #84]	; 0x54
 8010826:	2b07      	cmp	r3, #7
 8010828:	dd08      	ble.n	801083c <_vfiprintf_r+0x610>
 801082a:	9903      	ldr	r1, [sp, #12]
 801082c:	9806      	ldr	r0, [sp, #24]
 801082e:	aa14      	add	r2, sp, #80	; 0x50
 8010830:	f7ff fcc7 	bl	80101c2 <__sprint_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	d000      	beq.n	801083a <_vfiprintf_r+0x60e>
 8010838:	e161      	b.n	8010afe <_vfiprintf_r+0x8d2>
 801083a:	ad17      	add	r5, sp, #92	; 0x5c
 801083c:	0764      	lsls	r4, r4, #29
 801083e:	d500      	bpl.n	8010842 <_vfiprintf_r+0x616>
 8010840:	e140      	b.n	8010ac4 <_vfiprintf_r+0x898>
 8010842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010846:	4293      	cmp	r3, r2
 8010848:	da00      	bge.n	801084c <_vfiprintf_r+0x620>
 801084a:	0013      	movs	r3, r2
 801084c:	9a08      	ldr	r2, [sp, #32]
 801084e:	18d3      	adds	r3, r2, r3
 8010850:	9308      	str	r3, [sp, #32]
 8010852:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010854:	2b00      	cmp	r3, #0
 8010856:	d007      	beq.n	8010868 <_vfiprintf_r+0x63c>
 8010858:	9903      	ldr	r1, [sp, #12]
 801085a:	9806      	ldr	r0, [sp, #24]
 801085c:	aa14      	add	r2, sp, #80	; 0x50
 801085e:	f7ff fcb0 	bl	80101c2 <__sprint_r>
 8010862:	2800      	cmp	r0, #0
 8010864:	d000      	beq.n	8010868 <_vfiprintf_r+0x63c>
 8010866:	e14a      	b.n	8010afe <_vfiprintf_r+0x8d2>
 8010868:	2300      	movs	r3, #0
 801086a:	ad17      	add	r5, sp, #92	; 0x5c
 801086c:	9315      	str	r3, [sp, #84]	; 0x54
 801086e:	e6b7      	b.n	80105e0 <_vfiprintf_r+0x3b4>
 8010870:	0030      	movs	r0, r6
 8010872:	f7ef fc47 	bl	8000104 <strlen>
 8010876:	9005      	str	r0, [sp, #20]
 8010878:	e719      	b.n	80106ae <_vfiprintf_r+0x482>
 801087a:	2310      	movs	r3, #16
 801087c:	431c      	orrs	r4, r3
 801087e:	2320      	movs	r3, #32
 8010880:	0020      	movs	r0, r4
 8010882:	4018      	ands	r0, r3
 8010884:	421c      	tst	r4, r3
 8010886:	d009      	beq.n	801089c <_vfiprintf_r+0x670>
 8010888:	3b19      	subs	r3, #25
 801088a:	3707      	adds	r7, #7
 801088c:	439f      	bics	r7, r3
 801088e:	0039      	movs	r1, r7
 8010890:	c90c      	ldmia	r1!, {r2, r3}
 8010892:	9200      	str	r2, [sp, #0]
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	9104      	str	r1, [sp, #16]
 8010898:	2301      	movs	r3, #1
 801089a:	e6c7      	b.n	801062c <_vfiprintf_r+0x400>
 801089c:	003b      	movs	r3, r7
 801089e:	cb04      	ldmia	r3!, {r2}
 80108a0:	0021      	movs	r1, r4
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	2310      	movs	r3, #16
 80108a6:	4019      	ands	r1, r3
 80108a8:	421c      	tst	r4, r3
 80108aa:	d003      	beq.n	80108b4 <_vfiprintf_r+0x688>
 80108ac:	9200      	str	r2, [sp, #0]
 80108ae:	9001      	str	r0, [sp, #4]
 80108b0:	3b0f      	subs	r3, #15
 80108b2:	e6bb      	b.n	801062c <_vfiprintf_r+0x400>
 80108b4:	2340      	movs	r3, #64	; 0x40
 80108b6:	0020      	movs	r0, r4
 80108b8:	4018      	ands	r0, r3
 80108ba:	421c      	tst	r4, r3
 80108bc:	d003      	beq.n	80108c6 <_vfiprintf_r+0x69a>
 80108be:	b293      	uxth	r3, r2
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	9101      	str	r1, [sp, #4]
 80108c4:	e7e8      	b.n	8010898 <_vfiprintf_r+0x66c>
 80108c6:	2380      	movs	r3, #128	; 0x80
 80108c8:	0021      	movs	r1, r4
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4019      	ands	r1, r3
 80108ce:	421c      	tst	r4, r3
 80108d0:	d003      	beq.n	80108da <_vfiprintf_r+0x6ae>
 80108d2:	b2d3      	uxtb	r3, r2
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	9001      	str	r0, [sp, #4]
 80108d8:	e7de      	b.n	8010898 <_vfiprintf_r+0x66c>
 80108da:	9200      	str	r2, [sp, #0]
 80108dc:	e7f1      	b.n	80108c2 <_vfiprintf_r+0x696>
 80108de:	4a23      	ldr	r2, [pc, #140]	; (801096c <_vfiprintf_r+0x740>)
 80108e0:	0020      	movs	r0, r4
 80108e2:	920c      	str	r2, [sp, #48]	; 0x30
 80108e4:	2220      	movs	r2, #32
 80108e6:	4010      	ands	r0, r2
 80108e8:	4214      	tst	r4, r2
 80108ea:	d019      	beq.n	8010920 <_vfiprintf_r+0x6f4>
 80108ec:	3a19      	subs	r2, #25
 80108ee:	3707      	adds	r7, #7
 80108f0:	4397      	bics	r7, r2
 80108f2:	0038      	movs	r0, r7
 80108f4:	c806      	ldmia	r0!, {r1, r2}
 80108f6:	9100      	str	r1, [sp, #0]
 80108f8:	9201      	str	r2, [sp, #4]
 80108fa:	9004      	str	r0, [sp, #16]
 80108fc:	07e2      	lsls	r2, r4, #31
 80108fe:	d509      	bpl.n	8010914 <_vfiprintf_r+0x6e8>
 8010900:	9a00      	ldr	r2, [sp, #0]
 8010902:	9901      	ldr	r1, [sp, #4]
 8010904:	430a      	orrs	r2, r1
 8010906:	d005      	beq.n	8010914 <_vfiprintf_r+0x6e8>
 8010908:	aa13      	add	r2, sp, #76	; 0x4c
 801090a:	2130      	movs	r1, #48	; 0x30
 801090c:	7053      	strb	r3, [r2, #1]
 801090e:	2302      	movs	r3, #2
 8010910:	7011      	strb	r1, [r2, #0]
 8010912:	431c      	orrs	r4, r3
 8010914:	4b10      	ldr	r3, [pc, #64]	; (8010958 <_vfiprintf_r+0x72c>)
 8010916:	401c      	ands	r4, r3
 8010918:	2302      	movs	r3, #2
 801091a:	e687      	b.n	801062c <_vfiprintf_r+0x400>
 801091c:	4a10      	ldr	r2, [pc, #64]	; (8010960 <_vfiprintf_r+0x734>)
 801091e:	e7df      	b.n	80108e0 <_vfiprintf_r+0x6b4>
 8010920:	0039      	movs	r1, r7
 8010922:	c904      	ldmia	r1!, {r2}
 8010924:	0026      	movs	r6, r4
 8010926:	9104      	str	r1, [sp, #16]
 8010928:	2110      	movs	r1, #16
 801092a:	400e      	ands	r6, r1
 801092c:	420c      	tst	r4, r1
 801092e:	d002      	beq.n	8010936 <_vfiprintf_r+0x70a>
 8010930:	9200      	str	r2, [sp, #0]
 8010932:	9001      	str	r0, [sp, #4]
 8010934:	e7e2      	b.n	80108fc <_vfiprintf_r+0x6d0>
 8010936:	2140      	movs	r1, #64	; 0x40
 8010938:	0020      	movs	r0, r4
 801093a:	4008      	ands	r0, r1
 801093c:	420c      	tst	r4, r1
 801093e:	d003      	beq.n	8010948 <_vfiprintf_r+0x71c>
 8010940:	b292      	uxth	r2, r2
 8010942:	9200      	str	r2, [sp, #0]
 8010944:	9601      	str	r6, [sp, #4]
 8010946:	e7d9      	b.n	80108fc <_vfiprintf_r+0x6d0>
 8010948:	2180      	movs	r1, #128	; 0x80
 801094a:	0026      	movs	r6, r4
 801094c:	0089      	lsls	r1, r1, #2
 801094e:	400e      	ands	r6, r1
 8010950:	420c      	tst	r4, r1
 8010952:	d0f6      	beq.n	8010942 <_vfiprintf_r+0x716>
 8010954:	b2d2      	uxtb	r2, r2
 8010956:	e7eb      	b.n	8010930 <_vfiprintf_r+0x704>
 8010958:	fffffbff 	.word	0xfffffbff
 801095c:	00007830 	.word	0x00007830
 8010960:	080130bc 	.word	0x080130bc
 8010964:	080131c9 	.word	0x080131c9
 8010968:	080131d9 	.word	0x080131d9
 801096c:	080130cd 	.word	0x080130cd
 8010970:	9b01      	ldr	r3, [sp, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d109      	bne.n	801098a <_vfiprintf_r+0x75e>
 8010976:	9b00      	ldr	r3, [sp, #0]
 8010978:	2b09      	cmp	r3, #9
 801097a:	d806      	bhi.n	801098a <_vfiprintf_r+0x75e>
 801097c:	26b7      	movs	r6, #183	; 0xb7
 801097e:	ab12      	add	r3, sp, #72	; 0x48
 8010980:	18f6      	adds	r6, r6, r3
 8010982:	9b00      	ldr	r3, [sp, #0]
 8010984:	3330      	adds	r3, #48	; 0x30
 8010986:	7033      	strb	r3, [r6, #0]
 8010988:	e115      	b.n	8010bb6 <_vfiprintf_r+0x98a>
 801098a:	2380      	movs	r3, #128	; 0x80
 801098c:	2400      	movs	r4, #0
 801098e:	00db      	lsls	r3, r3, #3
 8010990:	403b      	ands	r3, r7
 8010992:	ae40      	add	r6, sp, #256	; 0x100
 8010994:	930a      	str	r3, [sp, #40]	; 0x28
 8010996:	220a      	movs	r2, #10
 8010998:	9800      	ldr	r0, [sp, #0]
 801099a:	9901      	ldr	r1, [sp, #4]
 801099c:	2300      	movs	r3, #0
 801099e:	f7ef fd81 	bl	80004a4 <__aeabi_uldivmod>
 80109a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a4:	3e01      	subs	r6, #1
 80109a6:	3230      	adds	r2, #48	; 0x30
 80109a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80109aa:	9110      	str	r1, [sp, #64]	; 0x40
 80109ac:	7032      	strb	r2, [r6, #0]
 80109ae:	3401      	adds	r4, #1
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d01a      	beq.n	80109ea <_vfiprintf_r+0x7be>
 80109b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	d116      	bne.n	80109ea <_vfiprintf_r+0x7be>
 80109bc:	2cff      	cmp	r4, #255	; 0xff
 80109be:	d014      	beq.n	80109ea <_vfiprintf_r+0x7be>
 80109c0:	9b01      	ldr	r3, [sp, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d102      	bne.n	80109cc <_vfiprintf_r+0x7a0>
 80109c6:	9b00      	ldr	r3, [sp, #0]
 80109c8:	2b09      	cmp	r3, #9
 80109ca:	d90e      	bls.n	80109ea <_vfiprintf_r+0x7be>
 80109cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109d0:	1af6      	subs	r6, r6, r3
 80109d2:	001a      	movs	r2, r3
 80109d4:	0030      	movs	r0, r6
 80109d6:	f7f9 ffe6 	bl	800a9a6 <strncpy>
 80109da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109dc:	2400      	movs	r4, #0
 80109de:	785b      	ldrb	r3, [r3, #1]
 80109e0:	1e5a      	subs	r2, r3, #1
 80109e2:	4193      	sbcs	r3, r2
 80109e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109e6:	18d3      	adds	r3, r2, r3
 80109e8:	930d      	str	r3, [sp, #52]	; 0x34
 80109ea:	9b01      	ldr	r3, [sp, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d103      	bne.n	80109f8 <_vfiprintf_r+0x7cc>
 80109f0:	9b00      	ldr	r3, [sp, #0]
 80109f2:	2b09      	cmp	r3, #9
 80109f4:	d800      	bhi.n	80109f8 <_vfiprintf_r+0x7cc>
 80109f6:	e0de      	b.n	8010bb6 <_vfiprintf_r+0x98a>
 80109f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	e7c9      	b.n	8010996 <_vfiprintf_r+0x76a>
 8010a02:	200f      	movs	r0, #15
 8010a04:	9b00      	ldr	r3, [sp, #0]
 8010a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a08:	4003      	ands	r3, r0
 8010a0a:	5cd3      	ldrb	r3, [r2, r3]
 8010a0c:	3e01      	subs	r6, #1
 8010a0e:	7033      	strb	r3, [r6, #0]
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	0719      	lsls	r1, r3, #28
 8010a14:	9b00      	ldr	r3, [sp, #0]
 8010a16:	091a      	lsrs	r2, r3, #4
 8010a18:	9b01      	ldr	r3, [sp, #4]
 8010a1a:	4311      	orrs	r1, r2
 8010a1c:	091b      	lsrs	r3, r3, #4
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	000b      	movs	r3, r1
 8010a22:	9a01      	ldr	r2, [sp, #4]
 8010a24:	9100      	str	r1, [sp, #0]
 8010a26:	4313      	orrs	r3, r2
 8010a28:	d1ec      	bne.n	8010a04 <_vfiprintf_r+0x7d8>
 8010a2a:	e0c4      	b.n	8010bb6 <_vfiprintf_r+0x98a>
 8010a2c:	ae40      	add	r6, sp, #256	; 0x100
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d000      	beq.n	8010a34 <_vfiprintf_r+0x808>
 8010a32:	e0c0      	b.n	8010bb6 <_vfiprintf_r+0x98a>
 8010a34:	07e4      	lsls	r4, r4, #31
 8010a36:	d400      	bmi.n	8010a3a <_vfiprintf_r+0x80e>
 8010a38:	e0bd      	b.n	8010bb6 <_vfiprintf_r+0x98a>
 8010a3a:	26b7      	movs	r6, #183	; 0xb7
 8010a3c:	ab12      	add	r3, sp, #72	; 0x48
 8010a3e:	18f6      	adds	r6, r6, r3
 8010a40:	2330      	movs	r3, #48	; 0x30
 8010a42:	e7a0      	b.n	8010986 <_vfiprintf_r+0x75a>
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d100      	bne.n	8010a4a <_vfiprintf_r+0x81e>
 8010a48:	e07e      	b.n	8010b48 <_vfiprintf_r+0x91c>
 8010a4a:	ae27      	add	r6, sp, #156	; 0x9c
 8010a4c:	7033      	strb	r3, [r6, #0]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	aa12      	add	r2, sp, #72	; 0x48
 8010a52:	70d3      	strb	r3, [r2, #3]
 8010a54:	9704      	str	r7, [sp, #16]
 8010a56:	e576      	b.n	8010546 <_vfiprintf_r+0x31a>
 8010a58:	2010      	movs	r0, #16
 8010a5a:	1812      	adds	r2, r2, r0
 8010a5c:	6068      	str	r0, [r5, #4]
 8010a5e:	9216      	str	r2, [sp, #88]	; 0x58
 8010a60:	9315      	str	r3, [sp, #84]	; 0x54
 8010a62:	2b07      	cmp	r3, #7
 8010a64:	dd07      	ble.n	8010a76 <_vfiprintf_r+0x84a>
 8010a66:	9903      	ldr	r1, [sp, #12]
 8010a68:	9806      	ldr	r0, [sp, #24]
 8010a6a:	aa14      	add	r2, sp, #80	; 0x50
 8010a6c:	f7ff fba9 	bl	80101c2 <__sprint_r>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d144      	bne.n	8010afe <_vfiprintf_r+0x8d2>
 8010a74:	a917      	add	r1, sp, #92	; 0x5c
 8010a76:	000d      	movs	r5, r1
 8010a78:	3f10      	subs	r7, #16
 8010a7a:	e63b      	b.n	80106f4 <_vfiprintf_r+0x4c8>
 8010a7c:	2010      	movs	r0, #16
 8010a7e:	1812      	adds	r2, r2, r0
 8010a80:	6068      	str	r0, [r5, #4]
 8010a82:	9216      	str	r2, [sp, #88]	; 0x58
 8010a84:	9315      	str	r3, [sp, #84]	; 0x54
 8010a86:	2b07      	cmp	r3, #7
 8010a88:	dd07      	ble.n	8010a9a <_vfiprintf_r+0x86e>
 8010a8a:	9903      	ldr	r1, [sp, #12]
 8010a8c:	9806      	ldr	r0, [sp, #24]
 8010a8e:	aa14      	add	r2, sp, #80	; 0x50
 8010a90:	f7ff fb97 	bl	80101c2 <__sprint_r>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d132      	bne.n	8010afe <_vfiprintf_r+0x8d2>
 8010a98:	a917      	add	r1, sp, #92	; 0x5c
 8010a9a:	000d      	movs	r5, r1
 8010a9c:	3f10      	subs	r7, #16
 8010a9e:	e67e      	b.n	801079e <_vfiprintf_r+0x572>
 8010aa0:	2010      	movs	r0, #16
 8010aa2:	1812      	adds	r2, r2, r0
 8010aa4:	6068      	str	r0, [r5, #4]
 8010aa6:	9216      	str	r2, [sp, #88]	; 0x58
 8010aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8010aaa:	2b07      	cmp	r3, #7
 8010aac:	dd07      	ble.n	8010abe <_vfiprintf_r+0x892>
 8010aae:	9903      	ldr	r1, [sp, #12]
 8010ab0:	9806      	ldr	r0, [sp, #24]
 8010ab2:	aa14      	add	r2, sp, #80	; 0x50
 8010ab4:	f7ff fb85 	bl	80101c2 <__sprint_r>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d120      	bne.n	8010afe <_vfiprintf_r+0x8d2>
 8010abc:	a917      	add	r1, sp, #92	; 0x5c
 8010abe:	000d      	movs	r5, r1
 8010ac0:	3f10      	subs	r7, #16
 8010ac2:	e68b      	b.n	80107dc <_vfiprintf_r+0x5b0>
 8010ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ac8:	2610      	movs	r6, #16
 8010aca:	1a9c      	subs	r4, r3, r2
 8010acc:	2c00      	cmp	r4, #0
 8010ace:	dc00      	bgt.n	8010ad2 <_vfiprintf_r+0x8a6>
 8010ad0:	e6b7      	b.n	8010842 <_vfiprintf_r+0x616>
 8010ad2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ad4:	4a3b      	ldr	r2, [pc, #236]	; (8010bc4 <_vfiprintf_r+0x998>)
 8010ad6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010ad8:	3101      	adds	r1, #1
 8010ada:	602a      	str	r2, [r5, #0]
 8010adc:	2c10      	cmp	r4, #16
 8010ade:	dc22      	bgt.n	8010b26 <_vfiprintf_r+0x8fa>
 8010ae0:	606c      	str	r4, [r5, #4]
 8010ae2:	18e4      	adds	r4, r4, r3
 8010ae4:	9416      	str	r4, [sp, #88]	; 0x58
 8010ae6:	9115      	str	r1, [sp, #84]	; 0x54
 8010ae8:	2907      	cmp	r1, #7
 8010aea:	dc00      	bgt.n	8010aee <_vfiprintf_r+0x8c2>
 8010aec:	e6a9      	b.n	8010842 <_vfiprintf_r+0x616>
 8010aee:	9903      	ldr	r1, [sp, #12]
 8010af0:	9806      	ldr	r0, [sp, #24]
 8010af2:	aa14      	add	r2, sp, #80	; 0x50
 8010af4:	f7ff fb65 	bl	80101c2 <__sprint_r>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d100      	bne.n	8010afe <_vfiprintf_r+0x8d2>
 8010afc:	e6a1      	b.n	8010842 <_vfiprintf_r+0x616>
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b02:	07db      	lsls	r3, r3, #31
 8010b04:	d407      	bmi.n	8010b16 <_vfiprintf_r+0x8ea>
 8010b06:	9b03      	ldr	r3, [sp, #12]
 8010b08:	899b      	ldrh	r3, [r3, #12]
 8010b0a:	059b      	lsls	r3, r3, #22
 8010b0c:	d403      	bmi.n	8010b16 <_vfiprintf_r+0x8ea>
 8010b0e:	9b03      	ldr	r3, [sp, #12]
 8010b10:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010b12:	f7fa f808 	bl	800ab26 <__retarget_lock_release_recursive>
 8010b16:	9b03      	ldr	r3, [sp, #12]
 8010b18:	899b      	ldrh	r3, [r3, #12]
 8010b1a:	065b      	lsls	r3, r3, #25
 8010b1c:	d401      	bmi.n	8010b22 <_vfiprintf_r+0x8f6>
 8010b1e:	f7ff fbc3 	bl	80102a8 <_vfiprintf_r+0x7c>
 8010b22:	f7ff fbbe 	bl	80102a2 <_vfiprintf_r+0x76>
 8010b26:	3310      	adds	r3, #16
 8010b28:	606e      	str	r6, [r5, #4]
 8010b2a:	9316      	str	r3, [sp, #88]	; 0x58
 8010b2c:	9115      	str	r1, [sp, #84]	; 0x54
 8010b2e:	3508      	adds	r5, #8
 8010b30:	2907      	cmp	r1, #7
 8010b32:	dd07      	ble.n	8010b44 <_vfiprintf_r+0x918>
 8010b34:	9903      	ldr	r1, [sp, #12]
 8010b36:	9806      	ldr	r0, [sp, #24]
 8010b38:	aa14      	add	r2, sp, #80	; 0x50
 8010b3a:	f7ff fb42 	bl	80101c2 <__sprint_r>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d1dd      	bne.n	8010afe <_vfiprintf_r+0x8d2>
 8010b42:	ad17      	add	r5, sp, #92	; 0x5c
 8010b44:	3c10      	subs	r4, #16
 8010b46:	e7c4      	b.n	8010ad2 <_vfiprintf_r+0x8a6>
 8010b48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d102      	bne.n	8010b54 <_vfiprintf_r+0x928>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9315      	str	r3, [sp, #84]	; 0x54
 8010b52:	e7d4      	b.n	8010afe <_vfiprintf_r+0x8d2>
 8010b54:	9903      	ldr	r1, [sp, #12]
 8010b56:	9806      	ldr	r0, [sp, #24]
 8010b58:	aa14      	add	r2, sp, #80	; 0x50
 8010b5a:	f7ff fb32 	bl	80101c2 <__sprint_r>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d0f5      	beq.n	8010b4e <_vfiprintf_r+0x922>
 8010b62:	e7cc      	b.n	8010afe <_vfiprintf_r+0x8d2>
 8010b64:	0027      	movs	r7, r4
 8010b66:	2a00      	cmp	r2, #0
 8010b68:	d100      	bne.n	8010b6c <_vfiprintf_r+0x940>
 8010b6a:	e51b      	b.n	80105a4 <_vfiprintf_r+0x378>
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d100      	bne.n	8010b72 <_vfiprintf_r+0x946>
 8010b70:	e6fe      	b.n	8010970 <_vfiprintf_r+0x744>
 8010b72:	ae40      	add	r6, sp, #256	; 0x100
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d100      	bne.n	8010b7a <_vfiprintf_r+0x94e>
 8010b78:	e743      	b.n	8010a02 <_vfiprintf_r+0x7d6>
 8010b7a:	2307      	movs	r3, #7
 8010b7c:	469c      	mov	ip, r3
 8010b7e:	4663      	mov	r3, ip
 8010b80:	9900      	ldr	r1, [sp, #0]
 8010b82:	0032      	movs	r2, r6
 8010b84:	400b      	ands	r3, r1
 8010b86:	9901      	ldr	r1, [sp, #4]
 8010b88:	3e01      	subs	r6, #1
 8010b8a:	074c      	lsls	r4, r1, #29
 8010b8c:	9900      	ldr	r1, [sp, #0]
 8010b8e:	3330      	adds	r3, #48	; 0x30
 8010b90:	08c8      	lsrs	r0, r1, #3
 8010b92:	9901      	ldr	r1, [sp, #4]
 8010b94:	4304      	orrs	r4, r0
 8010b96:	08c9      	lsrs	r1, r1, #3
 8010b98:	9101      	str	r1, [sp, #4]
 8010b9a:	0021      	movs	r1, r4
 8010b9c:	9801      	ldr	r0, [sp, #4]
 8010b9e:	7033      	strb	r3, [r6, #0]
 8010ba0:	9400      	str	r4, [sp, #0]
 8010ba2:	4301      	orrs	r1, r0
 8010ba4:	d1eb      	bne.n	8010b7e <_vfiprintf_r+0x952>
 8010ba6:	07f9      	lsls	r1, r7, #31
 8010ba8:	d505      	bpl.n	8010bb6 <_vfiprintf_r+0x98a>
 8010baa:	2b30      	cmp	r3, #48	; 0x30
 8010bac:	d003      	beq.n	8010bb6 <_vfiprintf_r+0x98a>
 8010bae:	2330      	movs	r3, #48	; 0x30
 8010bb0:	3e01      	subs	r6, #1
 8010bb2:	7033      	strb	r3, [r6, #0]
 8010bb4:	1e96      	subs	r6, r2, #2
 8010bb6:	9b05      	ldr	r3, [sp, #20]
 8010bb8:	003c      	movs	r4, r7
 8010bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bbc:	ab40      	add	r3, sp, #256	; 0x100
 8010bbe:	1b9b      	subs	r3, r3, r6
 8010bc0:	9305      	str	r3, [sp, #20]
 8010bc2:	e575      	b.n	80106b0 <_vfiprintf_r+0x484>
 8010bc4:	080131c9 	.word	0x080131c9

08010bc8 <__sbprintf>:
 8010bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bca:	0015      	movs	r5, r2
 8010bcc:	2202      	movs	r2, #2
 8010bce:	4c1e      	ldr	r4, [pc, #120]	; (8010c48 <__sbprintf+0x80>)
 8010bd0:	001f      	movs	r7, r3
 8010bd2:	898b      	ldrh	r3, [r1, #12]
 8010bd4:	44a5      	add	sp, r4
 8010bd6:	4393      	bics	r3, r2
 8010bd8:	466a      	mov	r2, sp
 8010bda:	8193      	strh	r3, [r2, #12]
 8010bdc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010bde:	0006      	movs	r6, r0
 8010be0:	9319      	str	r3, [sp, #100]	; 0x64
 8010be2:	89cb      	ldrh	r3, [r1, #14]
 8010be4:	a816      	add	r0, sp, #88	; 0x58
 8010be6:	81d3      	strh	r3, [r2, #14]
 8010be8:	69cb      	ldr	r3, [r1, #28]
 8010bea:	000c      	movs	r4, r1
 8010bec:	9307      	str	r3, [sp, #28]
 8010bee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8010bf2:	ab1a      	add	r3, sp, #104	; 0x68
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	9304      	str	r3, [sp, #16]
 8010bf8:	2380      	movs	r3, #128	; 0x80
 8010bfa:	00db      	lsls	r3, r3, #3
 8010bfc:	9302      	str	r3, [sp, #8]
 8010bfe:	9305      	str	r3, [sp, #20]
 8010c00:	2300      	movs	r3, #0
 8010c02:	9306      	str	r3, [sp, #24]
 8010c04:	f7f9 ff8c 	bl	800ab20 <__retarget_lock_init_recursive>
 8010c08:	002a      	movs	r2, r5
 8010c0a:	003b      	movs	r3, r7
 8010c0c:	4669      	mov	r1, sp
 8010c0e:	0030      	movs	r0, r6
 8010c10:	f7ff fb0c 	bl	801022c <_vfiprintf_r>
 8010c14:	1e05      	subs	r5, r0, #0
 8010c16:	db07      	blt.n	8010c28 <__sbprintf+0x60>
 8010c18:	4669      	mov	r1, sp
 8010c1a:	0030      	movs	r0, r6
 8010c1c:	f7fd fdf6 	bl	800e80c <_fflush_r>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d001      	beq.n	8010c28 <__sbprintf+0x60>
 8010c24:	2501      	movs	r5, #1
 8010c26:	426d      	negs	r5, r5
 8010c28:	466b      	mov	r3, sp
 8010c2a:	899a      	ldrh	r2, [r3, #12]
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	421a      	tst	r2, r3
 8010c30:	d002      	beq.n	8010c38 <__sbprintf+0x70>
 8010c32:	89a2      	ldrh	r2, [r4, #12]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	81a3      	strh	r3, [r4, #12]
 8010c38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010c3a:	f7f9 ff72 	bl	800ab22 <__retarget_lock_close_recursive>
 8010c3e:	0028      	movs	r0, r5
 8010c40:	4b02      	ldr	r3, [pc, #8]	; (8010c4c <__sbprintf+0x84>)
 8010c42:	449d      	add	sp, r3
 8010c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c46:	46c0      	nop			; (mov r8, r8)
 8010c48:	fffffb94 	.word	0xfffffb94
 8010c4c:	0000046c 	.word	0x0000046c

08010c50 <__sfvwrite_r>:
 8010c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c52:	6893      	ldr	r3, [r2, #8]
 8010c54:	b087      	sub	sp, #28
 8010c56:	000c      	movs	r4, r1
 8010c58:	9002      	str	r0, [sp, #8]
 8010c5a:	9204      	str	r2, [sp, #16]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d102      	bne.n	8010c66 <__sfvwrite_r+0x16>
 8010c60:	2000      	movs	r0, #0
 8010c62:	b007      	add	sp, #28
 8010c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c66:	898b      	ldrh	r3, [r1, #12]
 8010c68:	071b      	lsls	r3, r3, #28
 8010c6a:	d557      	bpl.n	8010d1c <__sfvwrite_r+0xcc>
 8010c6c:	690b      	ldr	r3, [r1, #16]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d054      	beq.n	8010d1c <__sfvwrite_r+0xcc>
 8010c72:	9b04      	ldr	r3, [sp, #16]
 8010c74:	2202      	movs	r2, #2
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	001f      	movs	r7, r3
 8010c7e:	4017      	ands	r7, r2
 8010c80:	4213      	tst	r3, r2
 8010c82:	d171      	bne.n	8010d68 <__sfvwrite_r+0x118>
 8010c84:	2201      	movs	r2, #1
 8010c86:	2101      	movs	r1, #1
 8010c88:	401a      	ands	r2, r3
 8010c8a:	420b      	tst	r3, r1
 8010c8c:	d100      	bne.n	8010c90 <__sfvwrite_r+0x40>
 8010c8e:	e0a5      	b.n	8010ddc <__sfvwrite_r+0x18c>
 8010c90:	0038      	movs	r0, r7
 8010c92:	003e      	movs	r6, r7
 8010c94:	9703      	str	r7, [sp, #12]
 8010c96:	9b03      	ldr	r3, [sp, #12]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d100      	bne.n	8010c9e <__sfvwrite_r+0x4e>
 8010c9c:	e10b      	b.n	8010eb6 <__sfvwrite_r+0x266>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d10a      	bne.n	8010cb8 <__sfvwrite_r+0x68>
 8010ca2:	001a      	movs	r2, r3
 8010ca4:	210a      	movs	r1, #10
 8010ca6:	0030      	movs	r0, r6
 8010ca8:	f7fd fe2a 	bl	800e900 <memchr>
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	1c5f      	adds	r7, r3, #1
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d001      	beq.n	8010cb8 <__sfvwrite_r+0x68>
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	1b87      	subs	r7, r0, r6
 8010cb8:	9b03      	ldr	r3, [sp, #12]
 8010cba:	9705      	str	r7, [sp, #20]
 8010cbc:	429f      	cmp	r7, r3
 8010cbe:	d900      	bls.n	8010cc2 <__sfvwrite_r+0x72>
 8010cc0:	9305      	str	r3, [sp, #20]
 8010cc2:	6820      	ldr	r0, [r4, #0]
 8010cc4:	6922      	ldr	r2, [r4, #16]
 8010cc6:	68a5      	ldr	r5, [r4, #8]
 8010cc8:	6963      	ldr	r3, [r4, #20]
 8010cca:	4290      	cmp	r0, r2
 8010ccc:	d800      	bhi.n	8010cd0 <__sfvwrite_r+0x80>
 8010cce:	e0fb      	b.n	8010ec8 <__sfvwrite_r+0x278>
 8010cd0:	9a05      	ldr	r2, [sp, #20]
 8010cd2:	18ed      	adds	r5, r5, r3
 8010cd4:	42aa      	cmp	r2, r5
 8010cd6:	dc00      	bgt.n	8010cda <__sfvwrite_r+0x8a>
 8010cd8:	e0f6      	b.n	8010ec8 <__sfvwrite_r+0x278>
 8010cda:	0031      	movs	r1, r6
 8010cdc:	002a      	movs	r2, r5
 8010cde:	f000 fa1e 	bl	801111e <memmove>
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	0021      	movs	r1, r4
 8010ce6:	195b      	adds	r3, r3, r5
 8010ce8:	9802      	ldr	r0, [sp, #8]
 8010cea:	6023      	str	r3, [r4, #0]
 8010cec:	f7fd fd8e 	bl	800e80c <_fflush_r>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d16e      	bne.n	8010dd2 <__sfvwrite_r+0x182>
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	1b7f      	subs	r7, r7, r5
 8010cf8:	d105      	bne.n	8010d06 <__sfvwrite_r+0xb6>
 8010cfa:	0021      	movs	r1, r4
 8010cfc:	9802      	ldr	r0, [sp, #8]
 8010cfe:	f7fd fd85 	bl	800e80c <_fflush_r>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d165      	bne.n	8010dd2 <__sfvwrite_r+0x182>
 8010d06:	9b03      	ldr	r3, [sp, #12]
 8010d08:	9a04      	ldr	r2, [sp, #16]
 8010d0a:	1b5b      	subs	r3, r3, r5
 8010d0c:	9303      	str	r3, [sp, #12]
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	1976      	adds	r6, r6, r5
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	1b5b      	subs	r3, r3, r5
 8010d16:	6093      	str	r3, [r2, #8]
 8010d18:	d1bd      	bne.n	8010c96 <__sfvwrite_r+0x46>
 8010d1a:	e7a1      	b.n	8010c60 <__sfvwrite_r+0x10>
 8010d1c:	0021      	movs	r1, r4
 8010d1e:	9802      	ldr	r0, [sp, #8]
 8010d20:	f000 f932 	bl	8010f88 <__swsetup_r>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d0a4      	beq.n	8010c72 <__sfvwrite_r+0x22>
 8010d28:	2001      	movs	r0, #1
 8010d2a:	4240      	negs	r0, r0
 8010d2c:	e799      	b.n	8010c62 <__sfvwrite_r+0x12>
 8010d2e:	9b01      	ldr	r3, [sp, #4]
 8010d30:	681e      	ldr	r6, [r3, #0]
 8010d32:	685d      	ldr	r5, [r3, #4]
 8010d34:	3308      	adds	r3, #8
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010d3a:	69e1      	ldr	r1, [r4, #28]
 8010d3c:	2d00      	cmp	r5, #0
 8010d3e:	d0f6      	beq.n	8010d2e <__sfvwrite_r+0xde>
 8010d40:	4a6e      	ldr	r2, [pc, #440]	; (8010efc <__sfvwrite_r+0x2ac>)
 8010d42:	002b      	movs	r3, r5
 8010d44:	4295      	cmp	r5, r2
 8010d46:	d900      	bls.n	8010d4a <__sfvwrite_r+0xfa>
 8010d48:	0013      	movs	r3, r2
 8010d4a:	0032      	movs	r2, r6
 8010d4c:	9802      	ldr	r0, [sp, #8]
 8010d4e:	47b8      	blx	r7
 8010d50:	2800      	cmp	r0, #0
 8010d52:	dd3e      	ble.n	8010dd2 <__sfvwrite_r+0x182>
 8010d54:	9b04      	ldr	r3, [sp, #16]
 8010d56:	9a04      	ldr	r2, [sp, #16]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	1836      	adds	r6, r6, r0
 8010d5c:	1a1b      	subs	r3, r3, r0
 8010d5e:	1a2d      	subs	r5, r5, r0
 8010d60:	6093      	str	r3, [r2, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e8      	bne.n	8010d38 <__sfvwrite_r+0xe8>
 8010d66:	e77b      	b.n	8010c60 <__sfvwrite_r+0x10>
 8010d68:	2600      	movs	r6, #0
 8010d6a:	0035      	movs	r5, r6
 8010d6c:	e7e4      	b.n	8010d38 <__sfvwrite_r+0xe8>
 8010d6e:	9b01      	ldr	r3, [sp, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	685d      	ldr	r5, [r3, #4]
 8010d78:	3308      	adds	r3, #8
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	220c      	movs	r2, #12
 8010d7e:	5ea3      	ldrsh	r3, [r4, r2]
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	68a6      	ldr	r6, [r4, #8]
 8010d84:	2d00      	cmp	r5, #0
 8010d86:	d0f2      	beq.n	8010d6e <__sfvwrite_r+0x11e>
 8010d88:	2180      	movs	r1, #128	; 0x80
 8010d8a:	0089      	lsls	r1, r1, #2
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	420b      	tst	r3, r1
 8010d90:	d062      	beq.n	8010e58 <__sfvwrite_r+0x208>
 8010d92:	42ae      	cmp	r6, r5
 8010d94:	d837      	bhi.n	8010e06 <__sfvwrite_r+0x1b6>
 8010d96:	2390      	movs	r3, #144	; 0x90
 8010d98:	00db      	lsls	r3, r3, #3
 8010d9a:	421a      	tst	r2, r3
 8010d9c:	d033      	beq.n	8010e06 <__sfvwrite_r+0x1b6>
 8010d9e:	6921      	ldr	r1, [r4, #16]
 8010da0:	1a43      	subs	r3, r0, r1
 8010da2:	2003      	movs	r0, #3
 8010da4:	9305      	str	r3, [sp, #20]
 8010da6:	6963      	ldr	r3, [r4, #20]
 8010da8:	4343      	muls	r3, r0
 8010daa:	0fdf      	lsrs	r7, r3, #31
 8010dac:	18ff      	adds	r7, r7, r3
 8010dae:	9b05      	ldr	r3, [sp, #20]
 8010db0:	107f      	asrs	r7, r7, #1
 8010db2:	3301      	adds	r3, #1
 8010db4:	195b      	adds	r3, r3, r5
 8010db6:	42bb      	cmp	r3, r7
 8010db8:	d900      	bls.n	8010dbc <__sfvwrite_r+0x16c>
 8010dba:	001f      	movs	r7, r3
 8010dbc:	0552      	lsls	r2, r2, #21
 8010dbe:	d53c      	bpl.n	8010e3a <__sfvwrite_r+0x1ea>
 8010dc0:	0039      	movs	r1, r7
 8010dc2:	9802      	ldr	r0, [sp, #8]
 8010dc4:	f7f8 fb56 	bl	8009474 <_malloc_r>
 8010dc8:	1e06      	subs	r6, r0, #0
 8010dca:	d10a      	bne.n	8010de2 <__sfvwrite_r+0x192>
 8010dcc:	230c      	movs	r3, #12
 8010dce:	9a02      	ldr	r2, [sp, #8]
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	2340      	movs	r3, #64	; 0x40
 8010dd4:	89a2      	ldrh	r2, [r4, #12]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	81a3      	strh	r3, [r4, #12]
 8010dda:	e7a5      	b.n	8010d28 <__sfvwrite_r+0xd8>
 8010ddc:	0015      	movs	r5, r2
 8010dde:	9203      	str	r2, [sp, #12]
 8010de0:	e7cc      	b.n	8010d7c <__sfvwrite_r+0x12c>
 8010de2:	9a05      	ldr	r2, [sp, #20]
 8010de4:	6921      	ldr	r1, [r4, #16]
 8010de6:	f7f9 feaa 	bl	800ab3e <memcpy>
 8010dea:	89a2      	ldrh	r2, [r4, #12]
 8010dec:	4b44      	ldr	r3, [pc, #272]	; (8010f00 <__sfvwrite_r+0x2b0>)
 8010dee:	401a      	ands	r2, r3
 8010df0:	2380      	movs	r3, #128	; 0x80
 8010df2:	4313      	orrs	r3, r2
 8010df4:	81a3      	strh	r3, [r4, #12]
 8010df6:	9b05      	ldr	r3, [sp, #20]
 8010df8:	6126      	str	r6, [r4, #16]
 8010dfa:	18f6      	adds	r6, r6, r3
 8010dfc:	6026      	str	r6, [r4, #0]
 8010dfe:	002e      	movs	r6, r5
 8010e00:	6167      	str	r7, [r4, #20]
 8010e02:	1aff      	subs	r7, r7, r3
 8010e04:	60a7      	str	r7, [r4, #8]
 8010e06:	002f      	movs	r7, r5
 8010e08:	42ae      	cmp	r6, r5
 8010e0a:	d900      	bls.n	8010e0e <__sfvwrite_r+0x1be>
 8010e0c:	002e      	movs	r6, r5
 8010e0e:	0032      	movs	r2, r6
 8010e10:	9903      	ldr	r1, [sp, #12]
 8010e12:	6820      	ldr	r0, [r4, #0]
 8010e14:	f000 f983 	bl	801111e <memmove>
 8010e18:	68a3      	ldr	r3, [r4, #8]
 8010e1a:	1b9b      	subs	r3, r3, r6
 8010e1c:	60a3      	str	r3, [r4, #8]
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	199b      	adds	r3, r3, r6
 8010e22:	6023      	str	r3, [r4, #0]
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	9a04      	ldr	r2, [sp, #16]
 8010e28:	19db      	adds	r3, r3, r7
 8010e2a:	9303      	str	r3, [sp, #12]
 8010e2c:	9b04      	ldr	r3, [sp, #16]
 8010e2e:	1bed      	subs	r5, r5, r7
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	1bdb      	subs	r3, r3, r7
 8010e34:	6093      	str	r3, [r2, #8]
 8010e36:	d1a1      	bne.n	8010d7c <__sfvwrite_r+0x12c>
 8010e38:	e712      	b.n	8010c60 <__sfvwrite_r+0x10>
 8010e3a:	003a      	movs	r2, r7
 8010e3c:	9802      	ldr	r0, [sp, #8]
 8010e3e:	f7fe fcd7 	bl	800f7f0 <_realloc_r>
 8010e42:	1e06      	subs	r6, r0, #0
 8010e44:	d1d7      	bne.n	8010df6 <__sfvwrite_r+0x1a6>
 8010e46:	6921      	ldr	r1, [r4, #16]
 8010e48:	9802      	ldr	r0, [sp, #8]
 8010e4a:	f7f9 fef3 	bl	800ac34 <_free_r>
 8010e4e:	2280      	movs	r2, #128	; 0x80
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	4393      	bics	r3, r2
 8010e54:	81a3      	strh	r3, [r4, #12]
 8010e56:	e7b9      	b.n	8010dcc <__sfvwrite_r+0x17c>
 8010e58:	6923      	ldr	r3, [r4, #16]
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	d302      	bcc.n	8010e64 <__sfvwrite_r+0x214>
 8010e5e:	6967      	ldr	r7, [r4, #20]
 8010e60:	42af      	cmp	r7, r5
 8010e62:	d916      	bls.n	8010e92 <__sfvwrite_r+0x242>
 8010e64:	42ae      	cmp	r6, r5
 8010e66:	d900      	bls.n	8010e6a <__sfvwrite_r+0x21a>
 8010e68:	002e      	movs	r6, r5
 8010e6a:	0032      	movs	r2, r6
 8010e6c:	9903      	ldr	r1, [sp, #12]
 8010e6e:	f000 f956 	bl	801111e <memmove>
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	6822      	ldr	r2, [r4, #0]
 8010e76:	1b9b      	subs	r3, r3, r6
 8010e78:	1992      	adds	r2, r2, r6
 8010e7a:	0037      	movs	r7, r6
 8010e7c:	60a3      	str	r3, [r4, #8]
 8010e7e:	6022      	str	r2, [r4, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1cf      	bne.n	8010e24 <__sfvwrite_r+0x1d4>
 8010e84:	0021      	movs	r1, r4
 8010e86:	9802      	ldr	r0, [sp, #8]
 8010e88:	f7fd fcc0 	bl	800e80c <_fflush_r>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d0c9      	beq.n	8010e24 <__sfvwrite_r+0x1d4>
 8010e90:	e79f      	b.n	8010dd2 <__sfvwrite_r+0x182>
 8010e92:	4b1c      	ldr	r3, [pc, #112]	; (8010f04 <__sfvwrite_r+0x2b4>)
 8010e94:	0028      	movs	r0, r5
 8010e96:	429d      	cmp	r5, r3
 8010e98:	d900      	bls.n	8010e9c <__sfvwrite_r+0x24c>
 8010e9a:	481b      	ldr	r0, [pc, #108]	; (8010f08 <__sfvwrite_r+0x2b8>)
 8010e9c:	0039      	movs	r1, r7
 8010e9e:	f7ef f9d7 	bl	8000250 <__divsi3>
 8010ea2:	003b      	movs	r3, r7
 8010ea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010ea6:	4343      	muls	r3, r0
 8010ea8:	9a03      	ldr	r2, [sp, #12]
 8010eaa:	69e1      	ldr	r1, [r4, #28]
 8010eac:	9802      	ldr	r0, [sp, #8]
 8010eae:	47b0      	blx	r6
 8010eb0:	1e07      	subs	r7, r0, #0
 8010eb2:	dcb7      	bgt.n	8010e24 <__sfvwrite_r+0x1d4>
 8010eb4:	e78d      	b.n	8010dd2 <__sfvwrite_r+0x182>
 8010eb6:	9b01      	ldr	r3, [sp, #4]
 8010eb8:	2000      	movs	r0, #0
 8010eba:	681e      	ldr	r6, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	9303      	str	r3, [sp, #12]
 8010ec0:	9b01      	ldr	r3, [sp, #4]
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	9301      	str	r3, [sp, #4]
 8010ec6:	e6e6      	b.n	8010c96 <__sfvwrite_r+0x46>
 8010ec8:	9a05      	ldr	r2, [sp, #20]
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	dc08      	bgt.n	8010ee0 <__sfvwrite_r+0x290>
 8010ece:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010ed0:	0032      	movs	r2, r6
 8010ed2:	69e1      	ldr	r1, [r4, #28]
 8010ed4:	9802      	ldr	r0, [sp, #8]
 8010ed6:	47a8      	blx	r5
 8010ed8:	1e05      	subs	r5, r0, #0
 8010eda:	dd00      	ble.n	8010ede <__sfvwrite_r+0x28e>
 8010edc:	e70a      	b.n	8010cf4 <__sfvwrite_r+0xa4>
 8010ede:	e778      	b.n	8010dd2 <__sfvwrite_r+0x182>
 8010ee0:	9a05      	ldr	r2, [sp, #20]
 8010ee2:	0031      	movs	r1, r6
 8010ee4:	f000 f91b 	bl	801111e <memmove>
 8010ee8:	9a05      	ldr	r2, [sp, #20]
 8010eea:	68a3      	ldr	r3, [r4, #8]
 8010eec:	0015      	movs	r5, r2
 8010eee:	1a9b      	subs	r3, r3, r2
 8010ef0:	60a3      	str	r3, [r4, #8]
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	189b      	adds	r3, r3, r2
 8010ef6:	6023      	str	r3, [r4, #0]
 8010ef8:	e6fc      	b.n	8010cf4 <__sfvwrite_r+0xa4>
 8010efa:	46c0      	nop			; (mov r8, r8)
 8010efc:	7ffffc00 	.word	0x7ffffc00
 8010f00:	fffffb7f 	.word	0xfffffb7f
 8010f04:	7ffffffe 	.word	0x7ffffffe
 8010f08:	7fffffff 	.word	0x7fffffff

08010f0c <__submore>:
 8010f0c:	000b      	movs	r3, r1
 8010f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f10:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8010f12:	3340      	adds	r3, #64	; 0x40
 8010f14:	000c      	movs	r4, r1
 8010f16:	429d      	cmp	r5, r3
 8010f18:	d11c      	bne.n	8010f54 <__submore+0x48>
 8010f1a:	2680      	movs	r6, #128	; 0x80
 8010f1c:	00f6      	lsls	r6, r6, #3
 8010f1e:	0031      	movs	r1, r6
 8010f20:	f7f8 faa8 	bl	8009474 <_malloc_r>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d102      	bne.n	8010f2e <__submore+0x22>
 8010f28:	2001      	movs	r0, #1
 8010f2a:	4240      	negs	r0, r0
 8010f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f2e:	0023      	movs	r3, r4
 8010f30:	6320      	str	r0, [r4, #48]	; 0x30
 8010f32:	6366      	str	r6, [r4, #52]	; 0x34
 8010f34:	3342      	adds	r3, #66	; 0x42
 8010f36:	781a      	ldrb	r2, [r3, #0]
 8010f38:	4b10      	ldr	r3, [pc, #64]	; (8010f7c <__submore+0x70>)
 8010f3a:	54c2      	strb	r2, [r0, r3]
 8010f3c:	0023      	movs	r3, r4
 8010f3e:	3341      	adds	r3, #65	; 0x41
 8010f40:	781a      	ldrb	r2, [r3, #0]
 8010f42:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <__submore+0x74>)
 8010f44:	54c2      	strb	r2, [r0, r3]
 8010f46:	782a      	ldrb	r2, [r5, #0]
 8010f48:	4b0e      	ldr	r3, [pc, #56]	; (8010f84 <__submore+0x78>)
 8010f4a:	54c2      	strb	r2, [r0, r3]
 8010f4c:	18c0      	adds	r0, r0, r3
 8010f4e:	6020      	str	r0, [r4, #0]
 8010f50:	2000      	movs	r0, #0
 8010f52:	e7eb      	b.n	8010f2c <__submore+0x20>
 8010f54:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8010f56:	0029      	movs	r1, r5
 8010f58:	0073      	lsls	r3, r6, #1
 8010f5a:	001a      	movs	r2, r3
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	f7fe fc47 	bl	800f7f0 <_realloc_r>
 8010f62:	1e05      	subs	r5, r0, #0
 8010f64:	d0e0      	beq.n	8010f28 <__submore+0x1c>
 8010f66:	1987      	adds	r7, r0, r6
 8010f68:	0001      	movs	r1, r0
 8010f6a:	0032      	movs	r2, r6
 8010f6c:	0038      	movs	r0, r7
 8010f6e:	f7f9 fde6 	bl	800ab3e <memcpy>
 8010f72:	9b01      	ldr	r3, [sp, #4]
 8010f74:	6027      	str	r7, [r4, #0]
 8010f76:	6325      	str	r5, [r4, #48]	; 0x30
 8010f78:	6363      	str	r3, [r4, #52]	; 0x34
 8010f7a:	e7e9      	b.n	8010f50 <__submore+0x44>
 8010f7c:	000003ff 	.word	0x000003ff
 8010f80:	000003fe 	.word	0x000003fe
 8010f84:	000003fd 	.word	0x000003fd

08010f88 <__swsetup_r>:
 8010f88:	4b30      	ldr	r3, [pc, #192]	; (801104c <__swsetup_r+0xc4>)
 8010f8a:	b570      	push	{r4, r5, r6, lr}
 8010f8c:	0005      	movs	r5, r0
 8010f8e:	6818      	ldr	r0, [r3, #0]
 8010f90:	000c      	movs	r4, r1
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d004      	beq.n	8010fa0 <__swsetup_r+0x18>
 8010f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d101      	bne.n	8010fa0 <__swsetup_r+0x18>
 8010f9c:	f7f9 fbec 	bl	800a778 <__sinit>
 8010fa0:	230c      	movs	r3, #12
 8010fa2:	5ee2      	ldrsh	r2, [r4, r3]
 8010fa4:	b293      	uxth	r3, r2
 8010fa6:	0711      	lsls	r1, r2, #28
 8010fa8:	d423      	bmi.n	8010ff2 <__swsetup_r+0x6a>
 8010faa:	06d9      	lsls	r1, r3, #27
 8010fac:	d407      	bmi.n	8010fbe <__swsetup_r+0x36>
 8010fae:	2309      	movs	r3, #9
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	602b      	str	r3, [r5, #0]
 8010fb4:	3337      	adds	r3, #55	; 0x37
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	81a3      	strh	r3, [r4, #12]
 8010fba:	4240      	negs	r0, r0
 8010fbc:	bd70      	pop	{r4, r5, r6, pc}
 8010fbe:	075b      	lsls	r3, r3, #29
 8010fc0:	d513      	bpl.n	8010fea <__swsetup_r+0x62>
 8010fc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010fc4:	2900      	cmp	r1, #0
 8010fc6:	d008      	beq.n	8010fda <__swsetup_r+0x52>
 8010fc8:	0023      	movs	r3, r4
 8010fca:	3340      	adds	r3, #64	; 0x40
 8010fcc:	4299      	cmp	r1, r3
 8010fce:	d002      	beq.n	8010fd6 <__swsetup_r+0x4e>
 8010fd0:	0028      	movs	r0, r5
 8010fd2:	f7f9 fe2f 	bl	800ac34 <_free_r>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	6323      	str	r3, [r4, #48]	; 0x30
 8010fda:	2224      	movs	r2, #36	; 0x24
 8010fdc:	89a3      	ldrh	r3, [r4, #12]
 8010fde:	4393      	bics	r3, r2
 8010fe0:	81a3      	strh	r3, [r4, #12]
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	6063      	str	r3, [r4, #4]
 8010fe6:	6923      	ldr	r3, [r4, #16]
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	2308      	movs	r3, #8
 8010fec:	89a2      	ldrh	r2, [r4, #12]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	81a3      	strh	r3, [r4, #12]
 8010ff2:	6923      	ldr	r3, [r4, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d10b      	bne.n	8011010 <__swsetup_r+0x88>
 8010ff8:	21a0      	movs	r1, #160	; 0xa0
 8010ffa:	2280      	movs	r2, #128	; 0x80
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	0089      	lsls	r1, r1, #2
 8011000:	0092      	lsls	r2, r2, #2
 8011002:	400b      	ands	r3, r1
 8011004:	4293      	cmp	r3, r2
 8011006:	d003      	beq.n	8011010 <__swsetup_r+0x88>
 8011008:	0021      	movs	r1, r4
 801100a:	0028      	movs	r0, r5
 801100c:	f000 f8e8 	bl	80111e0 <__smakebuf_r>
 8011010:	220c      	movs	r2, #12
 8011012:	5ea3      	ldrsh	r3, [r4, r2]
 8011014:	2001      	movs	r0, #1
 8011016:	001a      	movs	r2, r3
 8011018:	b299      	uxth	r1, r3
 801101a:	4002      	ands	r2, r0
 801101c:	4203      	tst	r3, r0
 801101e:	d00f      	beq.n	8011040 <__swsetup_r+0xb8>
 8011020:	2200      	movs	r2, #0
 8011022:	60a2      	str	r2, [r4, #8]
 8011024:	6962      	ldr	r2, [r4, #20]
 8011026:	4252      	negs	r2, r2
 8011028:	61a2      	str	r2, [r4, #24]
 801102a:	2000      	movs	r0, #0
 801102c:	6922      	ldr	r2, [r4, #16]
 801102e:	4282      	cmp	r2, r0
 8011030:	d1c4      	bne.n	8010fbc <__swsetup_r+0x34>
 8011032:	0609      	lsls	r1, r1, #24
 8011034:	d5c2      	bpl.n	8010fbc <__swsetup_r+0x34>
 8011036:	2240      	movs	r2, #64	; 0x40
 8011038:	4313      	orrs	r3, r2
 801103a:	81a3      	strh	r3, [r4, #12]
 801103c:	3801      	subs	r0, #1
 801103e:	e7bd      	b.n	8010fbc <__swsetup_r+0x34>
 8011040:	0788      	lsls	r0, r1, #30
 8011042:	d400      	bmi.n	8011046 <__swsetup_r+0xbe>
 8011044:	6962      	ldr	r2, [r4, #20]
 8011046:	60a2      	str	r2, [r4, #8]
 8011048:	e7ef      	b.n	801102a <__swsetup_r+0xa2>
 801104a:	46c0      	nop			; (mov r8, r8)
 801104c:	200006e0 	.word	0x200006e0

08011050 <__fputwc>:
 8011050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011052:	b085      	sub	sp, #20
 8011054:	000e      	movs	r6, r1
 8011056:	0015      	movs	r5, r2
 8011058:	9001      	str	r0, [sp, #4]
 801105a:	f7f9 fccf 	bl	800a9fc <__locale_mb_cur_max>
 801105e:	0004      	movs	r4, r0
 8011060:	2801      	cmp	r0, #1
 8011062:	d119      	bne.n	8011098 <__fputwc+0x48>
 8011064:	1e73      	subs	r3, r6, #1
 8011066:	2bfe      	cmp	r3, #254	; 0xfe
 8011068:	d816      	bhi.n	8011098 <__fputwc+0x48>
 801106a:	ab02      	add	r3, sp, #8
 801106c:	711e      	strb	r6, [r3, #4]
 801106e:	2700      	movs	r7, #0
 8011070:	42a7      	cmp	r7, r4
 8011072:	d020      	beq.n	80110b6 <__fputwc+0x66>
 8011074:	ab03      	add	r3, sp, #12
 8011076:	5dd9      	ldrb	r1, [r3, r7]
 8011078:	68ab      	ldr	r3, [r5, #8]
 801107a:	3b01      	subs	r3, #1
 801107c:	60ab      	str	r3, [r5, #8]
 801107e:	2b00      	cmp	r3, #0
 8011080:	da04      	bge.n	801108c <__fputwc+0x3c>
 8011082:	69aa      	ldr	r2, [r5, #24]
 8011084:	4293      	cmp	r3, r2
 8011086:	db19      	blt.n	80110bc <__fputwc+0x6c>
 8011088:	290a      	cmp	r1, #10
 801108a:	d017      	beq.n	80110bc <__fputwc+0x6c>
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	602a      	str	r2, [r5, #0]
 8011092:	7019      	strb	r1, [r3, #0]
 8011094:	3701      	adds	r7, #1
 8011096:	e7eb      	b.n	8011070 <__fputwc+0x20>
 8011098:	002b      	movs	r3, r5
 801109a:	0032      	movs	r2, r6
 801109c:	9801      	ldr	r0, [sp, #4]
 801109e:	335c      	adds	r3, #92	; 0x5c
 80110a0:	a903      	add	r1, sp, #12
 80110a2:	f000 f857 	bl	8011154 <_wcrtomb_r>
 80110a6:	0004      	movs	r4, r0
 80110a8:	1c43      	adds	r3, r0, #1
 80110aa:	d1e0      	bne.n	801106e <__fputwc+0x1e>
 80110ac:	2340      	movs	r3, #64	; 0x40
 80110ae:	0006      	movs	r6, r0
 80110b0:	89aa      	ldrh	r2, [r5, #12]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	81ab      	strh	r3, [r5, #12]
 80110b6:	0030      	movs	r0, r6
 80110b8:	b005      	add	sp, #20
 80110ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110bc:	002a      	movs	r2, r5
 80110be:	9801      	ldr	r0, [sp, #4]
 80110c0:	f000 f8cc 	bl	801125c <__swbuf_r>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d1e5      	bne.n	8011094 <__fputwc+0x44>
 80110c8:	0006      	movs	r6, r0
 80110ca:	e7f4      	b.n	80110b6 <__fputwc+0x66>

080110cc <_fputwc_r>:
 80110cc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80110ce:	b570      	push	{r4, r5, r6, lr}
 80110d0:	0005      	movs	r5, r0
 80110d2:	000e      	movs	r6, r1
 80110d4:	0014      	movs	r4, r2
 80110d6:	07db      	lsls	r3, r3, #31
 80110d8:	d405      	bmi.n	80110e6 <_fputwc_r+0x1a>
 80110da:	8993      	ldrh	r3, [r2, #12]
 80110dc:	059b      	lsls	r3, r3, #22
 80110de:	d402      	bmi.n	80110e6 <_fputwc_r+0x1a>
 80110e0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80110e2:	f7f9 fd1f 	bl	800ab24 <__retarget_lock_acquire_recursive>
 80110e6:	230c      	movs	r3, #12
 80110e8:	5ee2      	ldrsh	r2, [r4, r3]
 80110ea:	2380      	movs	r3, #128	; 0x80
 80110ec:	019b      	lsls	r3, r3, #6
 80110ee:	421a      	tst	r2, r3
 80110f0:	d104      	bne.n	80110fc <_fputwc_r+0x30>
 80110f2:	431a      	orrs	r2, r3
 80110f4:	81a2      	strh	r2, [r4, #12]
 80110f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80110f8:	4313      	orrs	r3, r2
 80110fa:	6663      	str	r3, [r4, #100]	; 0x64
 80110fc:	0028      	movs	r0, r5
 80110fe:	0022      	movs	r2, r4
 8011100:	0031      	movs	r1, r6
 8011102:	f7ff ffa5 	bl	8011050 <__fputwc>
 8011106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011108:	0005      	movs	r5, r0
 801110a:	07db      	lsls	r3, r3, #31
 801110c:	d405      	bmi.n	801111a <_fputwc_r+0x4e>
 801110e:	89a3      	ldrh	r3, [r4, #12]
 8011110:	059b      	lsls	r3, r3, #22
 8011112:	d402      	bmi.n	801111a <_fputwc_r+0x4e>
 8011114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011116:	f7f9 fd06 	bl	800ab26 <__retarget_lock_release_recursive>
 801111a:	0028      	movs	r0, r5
 801111c:	bd70      	pop	{r4, r5, r6, pc}

0801111e <memmove>:
 801111e:	b510      	push	{r4, lr}
 8011120:	4288      	cmp	r0, r1
 8011122:	d902      	bls.n	801112a <memmove+0xc>
 8011124:	188b      	adds	r3, r1, r2
 8011126:	4298      	cmp	r0, r3
 8011128:	d303      	bcc.n	8011132 <memmove+0x14>
 801112a:	2300      	movs	r3, #0
 801112c:	e007      	b.n	801113e <memmove+0x20>
 801112e:	5c8b      	ldrb	r3, [r1, r2]
 8011130:	5483      	strb	r3, [r0, r2]
 8011132:	3a01      	subs	r2, #1
 8011134:	d2fb      	bcs.n	801112e <memmove+0x10>
 8011136:	bd10      	pop	{r4, pc}
 8011138:	5ccc      	ldrb	r4, [r1, r3]
 801113a:	54c4      	strb	r4, [r0, r3]
 801113c:	3301      	adds	r3, #1
 801113e:	429a      	cmp	r2, r3
 8011140:	d1fa      	bne.n	8011138 <memmove+0x1a>
 8011142:	e7f8      	b.n	8011136 <memmove+0x18>

08011144 <abort>:
 8011144:	2006      	movs	r0, #6
 8011146:	b510      	push	{r4, lr}
 8011148:	f000 f906 	bl	8011358 <raise>
 801114c:	2001      	movs	r0, #1
 801114e:	f7f2 fa25 	bl	800359c <_exit>
	...

08011154 <_wcrtomb_r>:
 8011154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011156:	001d      	movs	r5, r3
 8011158:	4b09      	ldr	r3, [pc, #36]	; (8011180 <_wcrtomb_r+0x2c>)
 801115a:	0004      	movs	r4, r0
 801115c:	33e0      	adds	r3, #224	; 0xe0
 801115e:	681e      	ldr	r6, [r3, #0]
 8011160:	002b      	movs	r3, r5
 8011162:	2900      	cmp	r1, #0
 8011164:	d101      	bne.n	801116a <_wcrtomb_r+0x16>
 8011166:	000a      	movs	r2, r1
 8011168:	a901      	add	r1, sp, #4
 801116a:	0020      	movs	r0, r4
 801116c:	47b0      	blx	r6
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d103      	bne.n	801117a <_wcrtomb_r+0x26>
 8011172:	2300      	movs	r3, #0
 8011174:	602b      	str	r3, [r5, #0]
 8011176:	338a      	adds	r3, #138	; 0x8a
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	b004      	add	sp, #16
 801117c:	bd70      	pop	{r4, r5, r6, pc}
 801117e:	46c0      	nop			; (mov r8, r8)
 8011180:	20000450 	.word	0x20000450

08011184 <__swhatbuf_r>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	000e      	movs	r6, r1
 8011188:	001d      	movs	r5, r3
 801118a:	230e      	movs	r3, #14
 801118c:	5ec9      	ldrsh	r1, [r1, r3]
 801118e:	0014      	movs	r4, r2
 8011190:	b096      	sub	sp, #88	; 0x58
 8011192:	2900      	cmp	r1, #0
 8011194:	da09      	bge.n	80111aa <__swhatbuf_r+0x26>
 8011196:	89b2      	ldrh	r2, [r6, #12]
 8011198:	2380      	movs	r3, #128	; 0x80
 801119a:	0011      	movs	r1, r2
 801119c:	4019      	ands	r1, r3
 801119e:	421a      	tst	r2, r3
 80111a0:	d018      	beq.n	80111d4 <__swhatbuf_r+0x50>
 80111a2:	2100      	movs	r1, #0
 80111a4:	3b40      	subs	r3, #64	; 0x40
 80111a6:	0008      	movs	r0, r1
 80111a8:	e010      	b.n	80111cc <__swhatbuf_r+0x48>
 80111aa:	466a      	mov	r2, sp
 80111ac:	f000 f8de 	bl	801136c <_fstat_r>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	dbf0      	blt.n	8011196 <__swhatbuf_r+0x12>
 80111b4:	23f0      	movs	r3, #240	; 0xf0
 80111b6:	9901      	ldr	r1, [sp, #4]
 80111b8:	021b      	lsls	r3, r3, #8
 80111ba:	4019      	ands	r1, r3
 80111bc:	4b07      	ldr	r3, [pc, #28]	; (80111dc <__swhatbuf_r+0x58>)
 80111be:	2080      	movs	r0, #128	; 0x80
 80111c0:	18c9      	adds	r1, r1, r3
 80111c2:	424b      	negs	r3, r1
 80111c4:	4159      	adcs	r1, r3
 80111c6:	2380      	movs	r3, #128	; 0x80
 80111c8:	0100      	lsls	r0, r0, #4
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	6029      	str	r1, [r5, #0]
 80111ce:	6023      	str	r3, [r4, #0]
 80111d0:	b016      	add	sp, #88	; 0x58
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	2380      	movs	r3, #128	; 0x80
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	e7e5      	b.n	80111a6 <__swhatbuf_r+0x22>
 80111da:	46c0      	nop			; (mov r8, r8)
 80111dc:	ffffe000 	.word	0xffffe000

080111e0 <__smakebuf_r>:
 80111e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111e2:	2602      	movs	r6, #2
 80111e4:	898b      	ldrh	r3, [r1, #12]
 80111e6:	0005      	movs	r5, r0
 80111e8:	000c      	movs	r4, r1
 80111ea:	4233      	tst	r3, r6
 80111ec:	d006      	beq.n	80111fc <__smakebuf_r+0x1c>
 80111ee:	0023      	movs	r3, r4
 80111f0:	3343      	adds	r3, #67	; 0x43
 80111f2:	6023      	str	r3, [r4, #0]
 80111f4:	6123      	str	r3, [r4, #16]
 80111f6:	2301      	movs	r3, #1
 80111f8:	6163      	str	r3, [r4, #20]
 80111fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80111fc:	466a      	mov	r2, sp
 80111fe:	ab01      	add	r3, sp, #4
 8011200:	f7ff ffc0 	bl	8011184 <__swhatbuf_r>
 8011204:	9900      	ldr	r1, [sp, #0]
 8011206:	0007      	movs	r7, r0
 8011208:	0028      	movs	r0, r5
 801120a:	f7f8 f933 	bl	8009474 <_malloc_r>
 801120e:	2800      	cmp	r0, #0
 8011210:	d108      	bne.n	8011224 <__smakebuf_r+0x44>
 8011212:	220c      	movs	r2, #12
 8011214:	5ea3      	ldrsh	r3, [r4, r2]
 8011216:	059a      	lsls	r2, r3, #22
 8011218:	d4ef      	bmi.n	80111fa <__smakebuf_r+0x1a>
 801121a:	2203      	movs	r2, #3
 801121c:	4393      	bics	r3, r2
 801121e:	431e      	orrs	r6, r3
 8011220:	81a6      	strh	r6, [r4, #12]
 8011222:	e7e4      	b.n	80111ee <__smakebuf_r+0xe>
 8011224:	2380      	movs	r3, #128	; 0x80
 8011226:	89a2      	ldrh	r2, [r4, #12]
 8011228:	6020      	str	r0, [r4, #0]
 801122a:	4313      	orrs	r3, r2
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	9b00      	ldr	r3, [sp, #0]
 8011230:	6120      	str	r0, [r4, #16]
 8011232:	6163      	str	r3, [r4, #20]
 8011234:	9b01      	ldr	r3, [sp, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00c      	beq.n	8011254 <__smakebuf_r+0x74>
 801123a:	0028      	movs	r0, r5
 801123c:	230e      	movs	r3, #14
 801123e:	5ee1      	ldrsh	r1, [r4, r3]
 8011240:	f000 f8a6 	bl	8011390 <_isatty_r>
 8011244:	2800      	cmp	r0, #0
 8011246:	d005      	beq.n	8011254 <__smakebuf_r+0x74>
 8011248:	2303      	movs	r3, #3
 801124a:	89a2      	ldrh	r2, [r4, #12]
 801124c:	439a      	bics	r2, r3
 801124e:	3b02      	subs	r3, #2
 8011250:	4313      	orrs	r3, r2
 8011252:	81a3      	strh	r3, [r4, #12]
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	433b      	orrs	r3, r7
 8011258:	81a3      	strh	r3, [r4, #12]
 801125a:	e7ce      	b.n	80111fa <__smakebuf_r+0x1a>

0801125c <__swbuf_r>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	0006      	movs	r6, r0
 8011260:	000d      	movs	r5, r1
 8011262:	0014      	movs	r4, r2
 8011264:	2800      	cmp	r0, #0
 8011266:	d004      	beq.n	8011272 <__swbuf_r+0x16>
 8011268:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801126a:	2b00      	cmp	r3, #0
 801126c:	d101      	bne.n	8011272 <__swbuf_r+0x16>
 801126e:	f7f9 fa83 	bl	800a778 <__sinit>
 8011272:	69a3      	ldr	r3, [r4, #24]
 8011274:	60a3      	str	r3, [r4, #8]
 8011276:	89a3      	ldrh	r3, [r4, #12]
 8011278:	071b      	lsls	r3, r3, #28
 801127a:	d52e      	bpl.n	80112da <__swbuf_r+0x7e>
 801127c:	6923      	ldr	r3, [r4, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d02b      	beq.n	80112da <__swbuf_r+0x7e>
 8011282:	230c      	movs	r3, #12
 8011284:	5ee2      	ldrsh	r2, [r4, r3]
 8011286:	2380      	movs	r3, #128	; 0x80
 8011288:	019b      	lsls	r3, r3, #6
 801128a:	b2ef      	uxtb	r7, r5
 801128c:	b2ed      	uxtb	r5, r5
 801128e:	421a      	tst	r2, r3
 8011290:	d02c      	beq.n	80112ec <__swbuf_r+0x90>
 8011292:	6923      	ldr	r3, [r4, #16]
 8011294:	6820      	ldr	r0, [r4, #0]
 8011296:	1ac0      	subs	r0, r0, r3
 8011298:	6963      	ldr	r3, [r4, #20]
 801129a:	4283      	cmp	r3, r0
 801129c:	dc05      	bgt.n	80112aa <__swbuf_r+0x4e>
 801129e:	0021      	movs	r1, r4
 80112a0:	0030      	movs	r0, r6
 80112a2:	f7fd fab3 	bl	800e80c <_fflush_r>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d11d      	bne.n	80112e6 <__swbuf_r+0x8a>
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	3001      	adds	r0, #1
 80112ae:	3b01      	subs	r3, #1
 80112b0:	60a3      	str	r3, [r4, #8]
 80112b2:	6823      	ldr	r3, [r4, #0]
 80112b4:	1c5a      	adds	r2, r3, #1
 80112b6:	6022      	str	r2, [r4, #0]
 80112b8:	701f      	strb	r7, [r3, #0]
 80112ba:	6963      	ldr	r3, [r4, #20]
 80112bc:	4283      	cmp	r3, r0
 80112be:	d004      	beq.n	80112ca <__swbuf_r+0x6e>
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	07db      	lsls	r3, r3, #31
 80112c4:	d507      	bpl.n	80112d6 <__swbuf_r+0x7a>
 80112c6:	2d0a      	cmp	r5, #10
 80112c8:	d105      	bne.n	80112d6 <__swbuf_r+0x7a>
 80112ca:	0021      	movs	r1, r4
 80112cc:	0030      	movs	r0, r6
 80112ce:	f7fd fa9d 	bl	800e80c <_fflush_r>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d107      	bne.n	80112e6 <__swbuf_r+0x8a>
 80112d6:	0028      	movs	r0, r5
 80112d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112da:	0021      	movs	r1, r4
 80112dc:	0030      	movs	r0, r6
 80112de:	f7ff fe53 	bl	8010f88 <__swsetup_r>
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d0cd      	beq.n	8011282 <__swbuf_r+0x26>
 80112e6:	2501      	movs	r5, #1
 80112e8:	426d      	negs	r5, r5
 80112ea:	e7f4      	b.n	80112d6 <__swbuf_r+0x7a>
 80112ec:	4313      	orrs	r3, r2
 80112ee:	81a3      	strh	r3, [r4, #12]
 80112f0:	4a02      	ldr	r2, [pc, #8]	; (80112fc <__swbuf_r+0xa0>)
 80112f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112f4:	4013      	ands	r3, r2
 80112f6:	6663      	str	r3, [r4, #100]	; 0x64
 80112f8:	e7cb      	b.n	8011292 <__swbuf_r+0x36>
 80112fa:	46c0      	nop			; (mov r8, r8)
 80112fc:	ffffdfff 	.word	0xffffdfff

08011300 <_raise_r>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	0004      	movs	r4, r0
 8011304:	000d      	movs	r5, r1
 8011306:	291f      	cmp	r1, #31
 8011308:	d904      	bls.n	8011314 <_raise_r+0x14>
 801130a:	2316      	movs	r3, #22
 801130c:	6003      	str	r3, [r0, #0]
 801130e:	2001      	movs	r0, #1
 8011310:	4240      	negs	r0, r0
 8011312:	bd70      	pop	{r4, r5, r6, pc}
 8011314:	0003      	movs	r3, r0
 8011316:	33fc      	adds	r3, #252	; 0xfc
 8011318:	69db      	ldr	r3, [r3, #28]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <_raise_r+0x28>
 801131e:	008a      	lsls	r2, r1, #2
 8011320:	189b      	adds	r3, r3, r2
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	2a00      	cmp	r2, #0
 8011326:	d108      	bne.n	801133a <_raise_r+0x3a>
 8011328:	0020      	movs	r0, r4
 801132a:	f000 f855 	bl	80113d8 <_getpid_r>
 801132e:	002a      	movs	r2, r5
 8011330:	0001      	movs	r1, r0
 8011332:	0020      	movs	r0, r4
 8011334:	f000 f83e 	bl	80113b4 <_kill_r>
 8011338:	e7eb      	b.n	8011312 <_raise_r+0x12>
 801133a:	2000      	movs	r0, #0
 801133c:	2a01      	cmp	r2, #1
 801133e:	d0e8      	beq.n	8011312 <_raise_r+0x12>
 8011340:	1c51      	adds	r1, r2, #1
 8011342:	d103      	bne.n	801134c <_raise_r+0x4c>
 8011344:	2316      	movs	r3, #22
 8011346:	3001      	adds	r0, #1
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	e7e2      	b.n	8011312 <_raise_r+0x12>
 801134c:	2400      	movs	r4, #0
 801134e:	0028      	movs	r0, r5
 8011350:	601c      	str	r4, [r3, #0]
 8011352:	4790      	blx	r2
 8011354:	0020      	movs	r0, r4
 8011356:	e7dc      	b.n	8011312 <_raise_r+0x12>

08011358 <raise>:
 8011358:	b510      	push	{r4, lr}
 801135a:	4b03      	ldr	r3, [pc, #12]	; (8011368 <raise+0x10>)
 801135c:	0001      	movs	r1, r0
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	f7ff ffce 	bl	8011300 <_raise_r>
 8011364:	bd10      	pop	{r4, pc}
 8011366:	46c0      	nop			; (mov r8, r8)
 8011368:	200006e0 	.word	0x200006e0

0801136c <_fstat_r>:
 801136c:	2300      	movs	r3, #0
 801136e:	b570      	push	{r4, r5, r6, lr}
 8011370:	4d06      	ldr	r5, [pc, #24]	; (801138c <_fstat_r+0x20>)
 8011372:	0004      	movs	r4, r0
 8011374:	0008      	movs	r0, r1
 8011376:	0011      	movs	r1, r2
 8011378:	602b      	str	r3, [r5, #0]
 801137a:	f7f2 f95e 	bl	800363a <_fstat>
 801137e:	1c43      	adds	r3, r0, #1
 8011380:	d103      	bne.n	801138a <_fstat_r+0x1e>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d000      	beq.n	801138a <_fstat_r+0x1e>
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	bd70      	pop	{r4, r5, r6, pc}
 801138c:	20000ed4 	.word	0x20000ed4

08011390 <_isatty_r>:
 8011390:	2300      	movs	r3, #0
 8011392:	b570      	push	{r4, r5, r6, lr}
 8011394:	4d06      	ldr	r5, [pc, #24]	; (80113b0 <_isatty_r+0x20>)
 8011396:	0004      	movs	r4, r0
 8011398:	0008      	movs	r0, r1
 801139a:	602b      	str	r3, [r5, #0]
 801139c:	f7f2 f95b 	bl	8003656 <_isatty>
 80113a0:	1c43      	adds	r3, r0, #1
 80113a2:	d103      	bne.n	80113ac <_isatty_r+0x1c>
 80113a4:	682b      	ldr	r3, [r5, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d000      	beq.n	80113ac <_isatty_r+0x1c>
 80113aa:	6023      	str	r3, [r4, #0]
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
 80113ae:	46c0      	nop			; (mov r8, r8)
 80113b0:	20000ed4 	.word	0x20000ed4

080113b4 <_kill_r>:
 80113b4:	2300      	movs	r3, #0
 80113b6:	b570      	push	{r4, r5, r6, lr}
 80113b8:	4d06      	ldr	r5, [pc, #24]	; (80113d4 <_kill_r+0x20>)
 80113ba:	0004      	movs	r4, r0
 80113bc:	0008      	movs	r0, r1
 80113be:	0011      	movs	r1, r2
 80113c0:	602b      	str	r3, [r5, #0]
 80113c2:	f7f2 f8db 	bl	800357c <_kill>
 80113c6:	1c43      	adds	r3, r0, #1
 80113c8:	d103      	bne.n	80113d2 <_kill_r+0x1e>
 80113ca:	682b      	ldr	r3, [r5, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d000      	beq.n	80113d2 <_kill_r+0x1e>
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	bd70      	pop	{r4, r5, r6, pc}
 80113d4:	20000ed4 	.word	0x20000ed4

080113d8 <_getpid_r>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	f7f2 f8c9 	bl	8003570 <_getpid>
 80113de:	bd10      	pop	{r4, pc}

080113e0 <round>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	004a      	lsls	r2, r1, #1
 80113e4:	000d      	movs	r5, r1
 80113e6:	4920      	ldr	r1, [pc, #128]	; (8011468 <round+0x88>)
 80113e8:	0d52      	lsrs	r2, r2, #21
 80113ea:	1851      	adds	r1, r2, r1
 80113ec:	0006      	movs	r6, r0
 80113ee:	2913      	cmp	r1, #19
 80113f0:	dc18      	bgt.n	8011424 <round+0x44>
 80113f2:	2900      	cmp	r1, #0
 80113f4:	da09      	bge.n	801140a <round+0x2a>
 80113f6:	0feb      	lsrs	r3, r5, #31
 80113f8:	2200      	movs	r2, #0
 80113fa:	07db      	lsls	r3, r3, #31
 80113fc:	3101      	adds	r1, #1
 80113fe:	d101      	bne.n	8011404 <round+0x24>
 8011400:	491a      	ldr	r1, [pc, #104]	; (801146c <round+0x8c>)
 8011402:	430b      	orrs	r3, r1
 8011404:	0019      	movs	r1, r3
 8011406:	0010      	movs	r0, r2
 8011408:	e017      	b.n	801143a <round+0x5a>
 801140a:	4c19      	ldr	r4, [pc, #100]	; (8011470 <round+0x90>)
 801140c:	410c      	asrs	r4, r1
 801140e:	0022      	movs	r2, r4
 8011410:	402a      	ands	r2, r5
 8011412:	4302      	orrs	r2, r0
 8011414:	d013      	beq.n	801143e <round+0x5e>
 8011416:	2280      	movs	r2, #128	; 0x80
 8011418:	0312      	lsls	r2, r2, #12
 801141a:	410a      	asrs	r2, r1
 801141c:	1953      	adds	r3, r2, r5
 801141e:	43a3      	bics	r3, r4
 8011420:	2200      	movs	r2, #0
 8011422:	e7ef      	b.n	8011404 <round+0x24>
 8011424:	2933      	cmp	r1, #51	; 0x33
 8011426:	dd0d      	ble.n	8011444 <round+0x64>
 8011428:	2380      	movs	r3, #128	; 0x80
 801142a:	00db      	lsls	r3, r3, #3
 801142c:	4299      	cmp	r1, r3
 801142e:	d106      	bne.n	801143e <round+0x5e>
 8011430:	0002      	movs	r2, r0
 8011432:	002b      	movs	r3, r5
 8011434:	0029      	movs	r1, r5
 8011436:	f7ef f9bf 	bl	80007b8 <__aeabi_dadd>
 801143a:	0006      	movs	r6, r0
 801143c:	000d      	movs	r5, r1
 801143e:	0030      	movs	r0, r6
 8011440:	0029      	movs	r1, r5
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	4c0b      	ldr	r4, [pc, #44]	; (8011474 <round+0x94>)
 8011446:	1912      	adds	r2, r2, r4
 8011448:	2401      	movs	r4, #1
 801144a:	4264      	negs	r4, r4
 801144c:	40d4      	lsrs	r4, r2
 801144e:	4220      	tst	r0, r4
 8011450:	d0f5      	beq.n	801143e <round+0x5e>
 8011452:	2233      	movs	r2, #51	; 0x33
 8011454:	1a51      	subs	r1, r2, r1
 8011456:	3a32      	subs	r2, #50	; 0x32
 8011458:	408a      	lsls	r2, r1
 801145a:	1812      	adds	r2, r2, r0
 801145c:	4282      	cmp	r2, r0
 801145e:	4180      	sbcs	r0, r0
 8011460:	4240      	negs	r0, r0
 8011462:	182b      	adds	r3, r5, r0
 8011464:	43a2      	bics	r2, r4
 8011466:	e7cd      	b.n	8011404 <round+0x24>
 8011468:	fffffc01 	.word	0xfffffc01
 801146c:	3ff00000 	.word	0x3ff00000
 8011470:	000fffff 	.word	0x000fffff
 8011474:	fffffbed 	.word	0xfffffbed

08011478 <_init>:
 8011478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147a:	46c0      	nop			; (mov r8, r8)
 801147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801147e:	bc08      	pop	{r3}
 8011480:	469e      	mov	lr, r3
 8011482:	4770      	bx	lr

08011484 <_fini>:
 8011484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011486:	46c0      	nop			; (mov r8, r8)
 8011488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801148a:	bc08      	pop	{r3}
 801148c:	469e      	mov	lr, r3
 801148e:	4770      	bx	lr
