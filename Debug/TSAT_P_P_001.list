
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800f380  0800f380  0001f380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f954  0800f954  000206e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f954  0800f954  0001f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f95c  0800f95c  000206e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e8  20000000  0800f968  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  200006e8  08010050  000206e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  08010050  00020f60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020710  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001706e  00000000  00000000  00020753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003137  00000000  00000000  000377c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ad  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2fb  00000000  00000000  0003cee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3de  00000000  00000000  000591e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000addac  00000000  00000000  000735be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006834  00000000  00000000  0012136c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00127ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e8 	.word	0x200006e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f368 	.word	0x0800f368

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006ec 	.word	0x200006ec
 8000100:	0800f368 	.word	0x0800f368

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800f424 	.word	0x0800f424
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f000 ff8b 	bl	80034c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f939 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb75 	bl	8002ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 faf1 	bl	8002ba0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 faa1 	bl	8002b04 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fb3b 	bl	8002c3c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80025c6:	f000 f97b 	bl	80028c0 <MX_I2C1_Init>
  MX_TIM6_Init();
 80025ca:	f000 fa5d 	bl	8002a88 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 f9b7 	bl	8002940 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <main+0x224>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <main+0x224>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4879      	ldr	r0, [pc, #484]	; (80027d0 <main+0x228>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f003 fb28 	bl	8005c40 <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <main+0x22c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 80025fa:	f000 fbed 	bl	8002dd8 <my_astro_off>
  my_astro_off () ;
  */



  my_lx6_on () ;
 80025fe:	f000 fbfd 	bl	8002dfc <my_lx6_on>
  my_ldg_on () ;
 8002602:	f000 fbdd 	bl	8002dc0 <my_ldg_on>
  nmea_latitude[0] = 0 ;
 8002606:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <main+0x230>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
  nmea_longitude[0] = 0 ;
 800260c:	4b73      	ldr	r3, [pc, #460]	; (80027dc <main+0x234>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
  gngll_message[0] = 0 ;
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <main+0x238>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  nmea_fixed_pdop_d = 1000.0 ;
 8002618:	4972      	ldr	r1, [pc, #456]	; (80027e4 <main+0x23c>)
 800261a:	2200      	movs	r2, #0
 800261c:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <main+0x240>)
 800261e:	600a      	str	r2, [r1, #0]
 8002620:	604b      	str	r3, [r1, #4]
  received_nmea_rmc_flag = false ;
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <main+0x244>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 8002628:	4b71      	ldr	r3, [pc, #452]	; (80027f0 <main+0x248>)
 800262a:	2200      	movs	r2, #0
 800262c:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800262e:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <main+0x22c>)
 8002630:	0018      	movs	r0, r3
 8002632:	f002 ff8d 	bl	8005550 <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 8002636:	e098      	b.n	800276a <main+0x1c2>
  {
	  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8002638:	23fa      	movs	r3, #250	; 0xfa
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	496d      	ldr	r1, [pc, #436]	; (80027f4 <main+0x24c>)
 800263e:	486e      	ldr	r0, [pc, #440]	; (80027f8 <main+0x250>)
 8002640:	2201      	movs	r2, #1
 8002642:	f003 fb99 	bl	8005d78 <HAL_UART_Receive>
	  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8002646:	23fa      	movs	r3, #250	; 0xfa
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	496a      	ldr	r1, [pc, #424]	; (80027f4 <main+0x24c>)
 800264c:	4860      	ldr	r0, [pc, #384]	; (80027d0 <main+0x228>)
 800264e:	2201      	movs	r2, #1
 8002650:	f003 faf6 	bl	8005c40 <HAL_UART_Transmit>
	  if ( rxd_byte )
 8002654:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <main+0x24c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d061      	beq.n	8002720 <main+0x178>
	  {
		  //HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800265c:	4a67      	ldr	r2, [pc, #412]	; (80027fc <main+0x254>)
 800265e:	4968      	ldr	r1, [pc, #416]	; (8002800 <main+0x258>)
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <main+0x24c>)
 8002662:	0018      	movs	r0, r3
 8002664:	f004 fab9 	bl	8006bda <my_nmea_message>
 8002668:	0003      	movs	r3, r0
 800266a:	2b02      	cmp	r3, #2
 800266c:	d158      	bne.n	8002720 <main+0x178>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800266e:	4b64      	ldr	r3, [pc, #400]	; (8002800 <main+0x258>)
 8002670:	0018      	movs	r0, r3
 8002672:	f004 fb72 	bl	8006d5a <is_my_nmea_checksum_ok>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d052      	beq.n	8002720 <main+0x178>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) && !received_nmea_rmc_flag )
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <main+0x25c>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b60      	ldr	r3, [pc, #384]	; (8002800 <main+0x258>)
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f006 f91b 	bl	80088be <strstr>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d00d      	beq.n	80026a8 <main+0x100>
 800268c:	4b57      	ldr	r3, [pc, #348]	; (80027ec <main+0x244>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	4053      	eors	r3, r2
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <main+0x100>
				  {
					  set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 800269a:	4b59      	ldr	r3, [pc, #356]	; (8002800 <main+0x258>)
 800269c:	0018      	movs	r0, r3
 800269e:	f004 f9ef 	bl	8006a80 <set_my_rtc_from_nmea_rmc>
					  received_nmea_rmc_flag = true ;
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <main+0x244>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <main+0x260>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b54      	ldr	r3, [pc, #336]	; (8002800 <main+0x258>)
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f006 f904 	bl	80088be <strstr>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d010      	beq.n	80026dc <main+0x134>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80026ba:	4b51      	ldr	r3, [pc, #324]	; (8002800 <main+0x258>)
 80026bc:	0018      	movs	r0, r3
 80026be:	f004 faf8 	bl	8006cb2 <get_my_nmea_gngsa_fixed_mode_s>
 80026c2:	0003      	movs	r3, r0
 80026c4:	001a      	movs	r2, r3
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <main+0x264>)
 80026c8:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <main+0x258>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f004 fafb 	bl	8006cc8 <get_my_nmea_gngsa_pdop_d>
 80026d2:	0002      	movs	r2, r0
 80026d4:	000b      	movs	r3, r1
 80026d6:	4943      	ldr	r1, [pc, #268]	; (80027e4 <main+0x23c>)
 80026d8:	600a      	str	r2, [r1, #0]
 80026da:	604b      	str	r3, [r1, #4]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 80026dc:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <main+0x268>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <main+0x258>)
 80026e2:	0011      	movs	r1, r2
 80026e4:	0018      	movs	r0, r3
 80026e6:	f006 f8ea 	bl	80088be <strstr>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d018      	beq.n	8002720 <main+0x178>
				  {
					  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <main+0x23c>)
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <main+0x26c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f7fd feb5 	bl	8000468 <__aeabi_dcmple>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d006      	beq.n	8002710 <main+0x168>
					  {
						  get_my_nmea_gngll_coordinates_s ( (char*) nmea_message , nmea_latitude , nmea_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 8002702:	4a36      	ldr	r2, [pc, #216]	; (80027dc <main+0x234>)
 8002704:	4934      	ldr	r1, [pc, #208]	; (80027d8 <main+0x230>)
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <main+0x258>)
 8002708:	0018      	movs	r0, r3
 800270a:	f004 fbe1 	bl	8006ed0 <get_my_nmea_gngll_coordinates_s>
 800270e:	e007      	b.n	8002720 <main+0x178>
					  }
					  else
					  {
						  memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8002710:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <main+0x238>)
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <main+0x258>)
 8002714:	0010      	movs	r0, r2
 8002716:	0019      	movs	r1, r3
 8002718:	23fa      	movs	r3, #250	; 0xfa
 800271a:	001a      	movs	r2, r3
 800271c:	f006 f987 	bl	8008a2e <memcpy>
					  }
				  }
			  }
		  }
	  }
	  rxd_byte = 0 ;
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <main+0x24c>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > 10 && !received_nmea_rmc_flag )
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <main+0x248>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2b0a      	cmp	r3, #10
 800272c:	d906      	bls.n	800273c <main+0x194>
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <main+0x244>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	4053      	eors	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11e      	bne.n	800277a <main+0x1d2>
	  {
		  break ;
	  }
	  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <main+0x23c>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <main+0x26c>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f7fd fe8e 	bl	8000468 <__aeabi_dcmple>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d100      	bne.n	8002752 <main+0x1aa>
 8002750:	e00b      	b.n	800276a <main+0x1c2>
	  {
		  if ( nmea_latitude[0] != 0 )
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <main+0x230>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <main+0x1c2>
		  {
			  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <main+0x264>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b33      	cmp	r3, #51	; 0x33
 8002760:	d103      	bne.n	800276a <main+0x1c2>
			  {
				  if ( received_nmea_rmc_flag )
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <main+0x244>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <main+0x1d6>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <main+0x248>)
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <main+0x270>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d200      	bcs.n	8002778 <main+0x1d0>
 8002776:	e75f      	b.n	8002638 <main+0x90>
 8002778:	e002      	b.n	8002780 <main+0x1d8>
		  break ;
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	e000      	b.n	8002780 <main+0x1d8>
				  {
					  break ;
 800277e:	46c0      	nop			; (mov r8, r8)
				  }
			  }
		  }
	  }
  }
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <main+0x22c>)
 8002782:	0018      	movs	r0, r3
 8002784:	f002 ff40 	bl	8005608 <HAL_TIM_Base_Stop_IT>
  if ( nmea_latitude[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <main+0x230>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <main+0x1fc>
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <main+0x238>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <main+0x1fc>
  {
	  get_my_nmea_gngll_coordinates_s ( (char*) gngll_message , nmea_latitude , nmea_longitude ) ;
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <main+0x234>)
 800279a:	490f      	ldr	r1, [pc, #60]	; (80027d8 <main+0x230>)
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <main+0x238>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f004 fb96 	bl	8006ed0 <get_my_nmea_gngll_coordinates_s>
  }
  sprintf ( payload , "%.1f,%s,%s,%d,%lu" , nmea_fixed_pdop_d , nmea_latitude , nmea_longitude , tim_seconds , agg_tim_seconds ) ;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <main+0x23c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4911      	ldr	r1, [pc, #68]	; (80027f0 <main+0x248>)
 80027ac:	8809      	ldrh	r1, [r1, #0]
 80027ae:	000d      	movs	r5, r1
 80027b0:	491a      	ldr	r1, [pc, #104]	; (800281c <main+0x274>)
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	4c1a      	ldr	r4, [pc, #104]	; (8002820 <main+0x278>)
 80027b6:	481b      	ldr	r0, [pc, #108]	; (8002824 <main+0x27c>)
 80027b8:	9103      	str	r1, [sp, #12]
 80027ba:	9502      	str	r5, [sp, #8]
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <main+0x234>)
 80027be:	9101      	str	r1, [sp, #4]
 80027c0:	4905      	ldr	r1, [pc, #20]	; (80027d8 <main+0x230>)
 80027c2:	9100      	str	r1, [sp, #0]
 80027c4:	0021      	movs	r1, r4
 80027c6:	f005 ffb7 	bl	8008738 <sprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <main+0x222>
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000864 	.word	0x20000864
 80027d4:	20000784 	.word	0x20000784
 80027d8:	20000b88 	.word	0x20000b88
 80027dc:	20000b94 	.word	0x20000b94
 80027e0:	20000a8c 	.word	0x20000a8c
 80027e4:	20000020 	.word	0x20000020
 80027e8:	408f4000 	.word	0x408f4000
 80027ec:	20000c48 	.word	0x20000c48
 80027f0:	20000ba2 	.word	0x20000ba2
 80027f4:	2000098c 	.word	0x2000098c
 80027f8:	200008f8 	.word	0x200008f8
 80027fc:	20000b86 	.word	0x20000b86
 8002800:	20000990 	.word	0x20000990
 8002804:	2000000c 	.word	0x2000000c
 8002808:	20000004 	.word	0x20000004
 800280c:	20000ba0 	.word	0x20000ba0
 8002810:	20000008 	.word	0x20000008
 8002814:	20000010 	.word	0x20000010
 8002818:	20000018 	.word	0x20000018
 800281c:	20000ba4 	.word	0x20000ba4
 8002820:	0800f3a8 	.word	0x0800f3a8
 8002824:	20000ba8 	.word	0x20000ba8

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b093      	sub	sp, #76	; 0x4c
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	2410      	movs	r4, #16
 8002830:	193b      	adds	r3, r7, r4
 8002832:	0018      	movs	r0, r3
 8002834:	2338      	movs	r3, #56	; 0x38
 8002836:	001a      	movs	r2, r3
 8002838:	2100      	movs	r1, #0
 800283a:	f006 f813 	bl	8008864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283e:	003b      	movs	r3, r7
 8002840:	0018      	movs	r0, r3
 8002842:	2310      	movs	r3, #16
 8002844:	001a      	movs	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	f006 f80c 	bl	8008864 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	0018      	movs	r0, r3
 8002852:	f001 fb1d 	bl	8003e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	220a      	movs	r2, #10
 800285a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	0052      	lsls	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002864:	0021      	movs	r1, r4
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2201      	movs	r2, #1
 8002876:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287e:	187b      	adds	r3, r7, r1
 8002880:	0018      	movs	r0, r3
 8002882:	f001 fb51 	bl	8003f28 <HAL_RCC_OscConfig>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800288a:	f000 fae7 	bl	8002e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288e:	003b      	movs	r3, r7
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002894:	003b      	movs	r3, r7
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289a:	003b      	movs	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028a0:	003b      	movs	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028a6:	003b      	movs	r3, r7
 80028a8:	2100      	movs	r1, #0
 80028aa:	0018      	movs	r0, r3
 80028ac:	f001 fe56 	bl	800455c <HAL_RCC_ClockConfig>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80028b4:	f000 fad2 	bl	8002e5c <Error_Handler>
  }
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b013      	add	sp, #76	; 0x4c
 80028be:	bd90      	pop	{r4, r7, pc}

080028c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <MX_I2C1_Init+0x74>)
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <MX_I2C1_Init+0x78>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <MX_I2C1_Init+0x74>)
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <MX_I2C1_Init+0x7c>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <MX_I2C1_Init+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_I2C1_Init+0x74>)
 80028d8:	2201      	movs	r2, #1
 80028da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <MX_I2C1_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_I2C1_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_I2C1_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_I2C1_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_I2C1_Init+0x74>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_I2C1_Init+0x74>)
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 f999 	bl	8003c34 <HAL_I2C_Init>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d001      	beq.n	800290a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002906:	f000 faa9 	bl	8002e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_I2C1_Init+0x74>)
 800290c:	2100      	movs	r1, #0
 800290e:	0018      	movs	r0, r3
 8002910:	f001 fa26 	bl	8003d60 <HAL_I2CEx_ConfigAnalogFilter>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002918:	f000 faa0 	bl	8002e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <MX_I2C1_Init+0x74>)
 800291e:	2100      	movs	r1, #0
 8002920:	0018      	movs	r0, r3
 8002922:	f001 fa69 	bl	8003df8 <HAL_I2CEx_ConfigDigitalFilter>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292a:	f000 fa97 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000704 	.word	0x20000704
 8002938:	40005400 	.word	0x40005400
 800293c:	00303d5b 	.word	0x00303d5b

08002940 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b090      	sub	sp, #64	; 0x40
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002946:	232c      	movs	r3, #44	; 0x2c
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	0018      	movs	r0, r3
 800294c:	2314      	movs	r3, #20
 800294e:	001a      	movs	r2, r3
 8002950:	2100      	movs	r1, #0
 8002952:	f005 ff87 	bl	8008864 <memset>
  RTC_DateTypeDef sDate = {0};
 8002956:	2328      	movs	r3, #40	; 0x28
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800295e:	003b      	movs	r3, r7
 8002960:	0018      	movs	r0, r3
 8002962:	2328      	movs	r3, #40	; 0x28
 8002964:	001a      	movs	r2, r3
 8002966:	2100      	movs	r1, #0
 8002968:	f005 ff7c 	bl	8008864 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800296c:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <MX_RTC_Init+0x140>)
 800296e:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <MX_RTC_Init+0x144>)
 8002970:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <MX_RTC_Init+0x140>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <MX_RTC_Init+0x140>)
 800297a:	227f      	movs	r2, #127	; 0x7f
 800297c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <MX_RTC_Init+0x140>)
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002984:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <MX_RTC_Init+0x140>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <MX_RTC_Init+0x140>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <MX_RTC_Init+0x140>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <MX_RTC_Init+0x140>)
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	05d2      	lsls	r2, r2, #23
 800299c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <MX_RTC_Init+0x140>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <MX_RTC_Init+0x140>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f002 f93a 	bl	8004c20 <HAL_RTC_Init>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d001      	beq.n	80029b4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80029b0:	f000 fa54 	bl	8002e5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2200      	movs	r2, #0
 80029c6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029da:	1879      	adds	r1, r7, r1
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <MX_RTC_Init+0x140>)
 80029de:	2201      	movs	r2, #1
 80029e0:	0018      	movs	r0, r3
 80029e2:	f002 f9bf 	bl	8004d64 <HAL_RTC_SetTime>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80029ea:	f000 fa37 	bl	8002e5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029ee:	2128      	movs	r1, #40	; 0x28
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2201      	movs	r2, #1
 80029fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2201      	movs	r2, #1
 8002a00:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2224      	movs	r2, #36	; 0x24
 8002a06:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a08:	1879      	adds	r1, r7, r1
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_RTC_Init+0x140>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f002 fa50 	bl	8004eb4 <HAL_RTC_SetDate>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002a18:	f000 fa20 	bl	8002e5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a1c:	003b      	movs	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a22:	003b      	movs	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a28:	003b      	movs	r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a2e:	003b      	movs	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a40:	003b      	movs	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a46:	003b      	movs	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2220      	movs	r2, #32
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	0052      	lsls	r2, r2, #1
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a62:	0039      	movs	r1, r7
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <MX_RTC_Init+0x140>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f002 fab5 	bl	8004fd8 <HAL_RTC_SetAlarm>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002a72:	f000 f9f3 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b010      	add	sp, #64	; 0x40
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000758 	.word	0x20000758
 8002a84:	40002800 	.word	0x40002800

08002a88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	0018      	movs	r0, r3
 8002a92:	230c      	movs	r3, #12
 8002a94:	001a      	movs	r2, r3
 8002a96:	2100      	movs	r1, #0
 8002a98:	f005 fee4 	bl	8008864 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002a9e:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <MX_TIM6_Init+0x70>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <MX_TIM6_Init+0x74>)
 8002aa6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <MX_TIM6_Init+0x78>)
 8002ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002abc:	0018      	movs	r0, r3
 8002abe:	f002 fcef 	bl	80054a0 <HAL_TIM_Base_Init>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ac6:	f000 f9c9 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ad6:	1d3a      	adds	r2, r7, #4
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_TIM6_Init+0x6c>)
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f002 ff93 	bl	8005a08 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002ae6:	f000 f9b9 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000784 	.word	0x20000784
 8002af8:	40001000 	.word	0x40001000
 8002afc:	00003e7f 	.word	0x00003e7f
 8002b00:	000003e7 	.word	0x000003e7

08002b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <MX_USART1_UART_Init+0x98>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b10:	2296      	movs	r2, #150	; 0x96
 8002b12:	0192      	lsls	r2, r2, #6
 8002b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f002 ffe0 	bl	8005b14 <HAL_UART_Init>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b58:	f000 f980 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b5e:	2100      	movs	r1, #0
 8002b60:	0018      	movs	r0, r3
 8002b62:	f003 fead 	bl	80068c0 <HAL_UARTEx_SetTxFifoThreshold>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b6a:	f000 f977 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b70:	2100      	movs	r1, #0
 8002b72:	0018      	movs	r0, r3
 8002b74:	f003 fee4 	bl	8006940 <HAL_UARTEx_SetRxFifoThreshold>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b7c:	f000 f96e 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <MX_USART1_UART_Init+0x94>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f003 fe62 	bl	800684c <HAL_UARTEx_DisableFifoMode>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b8c:	f000 f966 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200007d0 	.word	0x200007d0
 8002b9c:	40013800 	.word	0x40013800

08002ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002ba6:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <MX_USART2_UART_Init+0x98>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bac:	22e1      	movs	r2, #225	; 0xe1
 8002bae:	0252      	lsls	r2, r2, #9
 8002bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f002 ff92 	bl	8005b14 <HAL_UART_Init>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bf4:	f000 f932 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f003 fe5f 	bl	80068c0 <HAL_UARTEx_SetTxFifoThreshold>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c06:	f000 f929 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 fe96 	bl	8006940 <HAL_UARTEx_SetRxFifoThreshold>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c18:	f000 f920 	bl	8002e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <MX_USART2_UART_Init+0x94>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f003 fe14 	bl	800684c <HAL_UARTEx_DisableFifoMode>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d001      	beq.n	8002c2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c28:	f000 f918 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	20000864 	.word	0x20000864
 8002c38:	40004400 	.word	0x40004400

08002c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <MX_USART3_UART_Init+0x64>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c48:	2296      	movs	r2, #150	; 0x96
 8002c4a:	0192      	lsls	r2, r2, #6
 8002c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <MX_USART3_UART_Init+0x60>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f002 ff44 	bl	8005b14 <HAL_UART_Init>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c90:	f000 f8e4 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200008f8 	.word	0x200008f8
 8002ca0:	40004800 	.word	0x40004800

08002ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002caa:	2414      	movs	r4, #20
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	0018      	movs	r0, r3
 8002cb0:	2314      	movs	r3, #20
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f005 fdd5 	bl	8008864 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cd8:	2120      	movs	r1, #32
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002d08:	2102      	movs	r1, #2
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <MX_GPIO_Init+0x10c>)
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002d1a:	238c      	movs	r3, #140	; 0x8c
 8002d1c:	015b      	lsls	r3, r3, #5
 8002d1e:	4825      	ldr	r0, [pc, #148]	; (8002db4 <MX_GPIO_Init+0x110>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	0019      	movs	r1, r3
 8002d24:	f000 ff68 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002d28:	4923      	ldr	r1, [pc, #140]	; (8002db8 <MX_GPIO_Init+0x114>)
 8002d2a:	23a0      	movs	r3, #160	; 0xa0
 8002d2c:	05db      	lsls	r3, r3, #23
 8002d2e:	2200      	movs	r2, #0
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 ff61 	bl	8003bf8 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	228c      	movs	r2, #140	; 0x8c
 8002d3a:	0152      	lsls	r2, r2, #5
 8002d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2201      	movs	r2, #1
 8002d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <MX_GPIO_Init+0x110>)
 8002d54:	0019      	movs	r1, r3
 8002d56:	0010      	movs	r0, r2
 8002d58:	f000 fd1a 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <MX_GPIO_Init+0x114>)
 8002d60:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2201      	movs	r2, #1
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	193a      	adds	r2, r7, r4
 8002d76:	23a0      	movs	r3, #160	; 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 fd07 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	22c0      	movs	r2, #192	; 0xc0
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2288      	movs	r2, #136	; 0x88
 8002d90:	0352      	lsls	r2, r2, #13
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <MX_GPIO_Init+0x118>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f000 fcf5 	bl	8003790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b00b      	add	sp, #44	; 0x2c
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40021000 	.word	0x40021000
 8002db4:	50000800 	.word	0x50000800
 8002db8:	00009860 	.word	0x00009860
 8002dbc:	50000400 	.word	0x50000400

08002dc0 <my_ldg_on>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
    return ( get_systick () - starting_value > duration ) ? true : false ;
}
void my_ldg_on ( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_SET ) ;
 8002dc4:	23a0      	movs	r3, #160	; 0xa0
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2120      	movs	r1, #32
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 ff13 	bl	8003bf8 <HAL_GPIO_WritePin>
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002ddc:	23a0      	movs	r3, #160	; 0xa0
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 ff07 	bl	8003bf8 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002dea:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <my_astro_off+0x20>)
 8002dec:	0018      	movs	r0, r3
 8002dee:	f002 fee7 	bl	8005bc0 <HAL_UART_DeInit>
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200007d0 	.word	0x200007d0

08002dfc <my_lx6_on>:
void my_lx6_on ( void )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <my_lx6_on+0x2c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	0019      	movs	r1, r3
 8002e0a:	f000 fef5 	bl	8003bf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <my_lx6_on+0x2c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	0019      	movs	r1, r3
 8002e18:	f000 feee 	bl	8003bf8 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002e1c:	f7ff ff0e 	bl	8002c3c <MX_USART3_UART_Init>
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	50000800 	.word	0x50000800

08002e2c <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a06      	ldr	r2, [pc, #24]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d105      	bne.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		tim_seconds++ ;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e48:	801a      	strh	r2, [r3, #0]
	}
}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40001000 	.word	0x40001000
 8002e58:	20000ba2 	.word	0x20000ba2

08002e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e60:	b672      	cpsid	i
}
 8002e62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <Error_Handler+0x8>
	...

08002e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_MspInit+0x44>)
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_MspInit+0x44>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_MspInit+0x44>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_MspInit+0x44>)
 8002e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_MspInit+0x44>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0549      	lsls	r1, r1, #21
 8002e90:	430a      	orrs	r2, r1
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_MspInit+0x44>)
 8002e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	055b      	lsls	r3, r3, #21
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b097      	sub	sp, #92	; 0x5c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	2344      	movs	r3, #68	; 0x44
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	2314      	movs	r3, #20
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f005 fcce 	bl	8008864 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec8:	2410      	movs	r4, #16
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	0018      	movs	r0, r3
 8002ece:	2334      	movs	r3, #52	; 0x34
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f005 fcc6 	bl	8008864 <memset>
  if(hi2c->Instance==I2C1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_I2C_MspInit+0xb8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d13d      	bne.n	8002f5e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f001 fcdd 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002efa:	f7ff ffaf 	bl	8002e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f04:	2102      	movs	r1, #2
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8002f16:	2144      	movs	r1, #68	; 0x44
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	22c0      	movs	r2, #192	; 0xc0
 8002f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2212      	movs	r2, #18
 8002f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2206      	movs	r2, #6
 8002f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_I2C_MspInit+0xc0>)
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	f000 fc27 	bl	8003790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0389      	lsls	r1, r1, #14
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_I2C_MspInit+0xbc>)
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	039b      	lsls	r3, r3, #14
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b017      	add	sp, #92	; 0x5c
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40005400 	.word	0x40005400
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	50000400 	.word	0x50000400

08002f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b091      	sub	sp, #68	; 0x44
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	240c      	movs	r4, #12
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	0018      	movs	r0, r3
 8002f82:	2334      	movs	r3, #52	; 0x34
 8002f84:	001a      	movs	r2, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	f005 fc6c 	bl	8008864 <memset>
  if(hrtc->Instance==RTC)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_RTC_MspInit+0x74>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d124      	bne.n	8002fe0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	0292      	lsls	r2, r2, #10
 8002f9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fc81 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002fb2:	f7ff ff53 	bl	8002e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_RTC_MspInit+0x78>)
 8002fb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RTC_MspInit+0x78>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0209      	lsls	r1, r1, #8
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RTC_MspInit+0x78>)
 8002fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_RTC_MspInit+0x78>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	00c9      	lsls	r1, r1, #3
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RTC_MspInit+0x78>)
 8002fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b011      	add	sp, #68	; 0x44
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	40002800 	.word	0x40002800
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <HAL_TIM_Base_MspInit+0x44>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d113      	bne.n	800302a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_TIM_Base_MspInit+0x48>)
 8003004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_TIM_Base_MspInit+0x48>)
 8003008:	2110      	movs	r1, #16
 800300a:	430a      	orrs	r2, r1
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_TIM_Base_MspInit+0x48>)
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2210      	movs	r2, #16
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	2011      	movs	r0, #17
 8003020:	f000 fb84 	bl	800372c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003024:	2011      	movs	r0, #17
 8003026:	f000 fb96 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40001000 	.word	0x40001000
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b09b      	sub	sp, #108	; 0x6c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	2354      	movs	r3, #84	; 0x54
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	0018      	movs	r0, r3
 800304a:	2314      	movs	r3, #20
 800304c:	001a      	movs	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	f005 fc08 	bl	8008864 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003054:	2420      	movs	r4, #32
 8003056:	193b      	adds	r3, r7, r4
 8003058:	0018      	movs	r0, r3
 800305a:	2334      	movs	r3, #52	; 0x34
 800305c:	001a      	movs	r2, r3
 800305e:	2100      	movs	r1, #0
 8003060:	f005 fc00 	bl	8008864 <memset>
  if(huart->Instance==USART1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <HAL_UART_MspInit+0x1b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d140      	bne.n	80030f0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800306e:	193b      	adds	r3, r7, r4
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003074:	193b      	adds	r3, r7, r4
 8003076:	2200      	movs	r2, #0
 8003078:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800307a:	193b      	adds	r3, r7, r4
 800307c:	0018      	movs	r0, r3
 800307e:	f001 fc17 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003086:	f7ff fee9 	bl	8002e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800308a:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800308c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308e:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	01c9      	lsls	r1, r1, #7
 8003094:	430a      	orrs	r2, r1
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
 8003098:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800309a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	01db      	lsls	r3, r3, #7
 80030a0:	4013      	ands	r3, r2
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
 80030b2:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80030be:	2154      	movs	r1, #84	; 0x54
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	22c0      	movs	r2, #192	; 0xc0
 80030c4:	00d2      	lsls	r2, r2, #3
 80030c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2202      	movs	r2, #2
 80030cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	2201      	movs	r2, #1
 80030de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	187a      	adds	r2, r7, r1
 80030e2:	23a0      	movs	r3, #160	; 0xa0
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fb51 	bl	8003790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030ee:	e07b      	b.n	80031e8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <HAL_UART_MspInit+0x1bc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d140      	bne.n	800317c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030fa:	2120      	movs	r1, #32
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003108:	187b      	adds	r3, r7, r1
 800310a:	0018      	movs	r0, r3
 800310c:	f001 fbd0 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003114:	f7ff fea2 	bl	8002e5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	0289      	lsls	r1, r1, #10
 8003122:	430a      	orrs	r2, r1
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	4013      	ands	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	635a      	str	r2, [r3, #52]	; 0x34
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 800314c:	2154      	movs	r1, #84	; 0x54
 800314e:	187b      	adds	r3, r7, r1
 8003150:	220c      	movs	r2, #12
 8003152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	187b      	adds	r3, r7, r1
 8003156:	2202      	movs	r2, #2
 8003158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800315a:	187b      	adds	r3, r7, r1
 800315c:	2201      	movs	r2, #1
 800315e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2201      	movs	r2, #1
 800316a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316c:	187a      	adds	r2, r7, r1
 800316e:	23a0      	movs	r3, #160	; 0xa0
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fb0b 	bl	8003790 <HAL_GPIO_Init>
}
 800317a:	e035      	b.n	80031e8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_UART_MspInit+0x1c0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d130      	bne.n	80031e8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318a:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	02c9      	lsls	r1, r1, #11
 8003190:	430a      	orrs	r2, r1
 8003192:	63da      	str	r2, [r3, #60]	; 0x3c
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 8003196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	02db      	lsls	r3, r3, #11
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80031a8:	2104      	movs	r1, #4
 80031aa:	430a      	orrs	r2, r1
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_UART_MspInit+0x1b8>)
 80031b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b2:	2204      	movs	r2, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 80031ba:	2154      	movs	r1, #84	; 0x54
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	22c0      	movs	r2, #192	; 0xc0
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2202      	movs	r2, #2
 80031c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_UART_MspInit+0x1c4>)
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f000 fad4 	bl	8003790 <HAL_GPIO_Init>
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b01b      	add	sp, #108	; 0x6c
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	40013800 	.word	0x40013800
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40004400 	.word	0x40004400
 80031fc:	40004800 	.word	0x40004800
 8003200:	50000800 	.word	0x50000800

08003204 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_UART_MspDeInit+0x80>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10e      	bne.n	8003234 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 8003218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 800321c:	491b      	ldr	r1, [pc, #108]	; (800328c <HAL_UART_MspDeInit+0x88>)
 800321e:	400a      	ands	r2, r1
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	00da      	lsls	r2, r3, #3
 8003226:	23a0      	movs	r3, #160	; 0xa0
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fc13 	bl	8003a58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003232:	e023      	b.n	800327c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_UART_MspDeInit+0x8c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10c      	bne.n	8003258 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 8003240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 8003244:	4913      	ldr	r1, [pc, #76]	; (8003294 <HAL_UART_MspDeInit+0x90>)
 8003246:	400a      	ands	r2, r1
 8003248:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 800324a:	23a0      	movs	r3, #160	; 0xa0
 800324c:	05db      	lsls	r3, r3, #23
 800324e:	210c      	movs	r1, #12
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fc01 	bl	8003a58 <HAL_GPIO_DeInit>
}
 8003256:	e011      	b.n	800327c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_UART_MspDeInit+0x94>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10c      	bne.n	800327c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 8003264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_UART_MspDeInit+0x84>)
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <HAL_UART_MspDeInit+0x98>)
 800326a:	400a      	ands	r2, r1
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_UART_MspDeInit+0x9c>)
 8003274:	0019      	movs	r1, r3
 8003276:	0010      	movs	r0, r2
 8003278:	f000 fbee 	bl	8003a58 <HAL_GPIO_DeInit>
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40013800 	.word	0x40013800
 8003288:	40021000 	.word	0x40021000
 800328c:	ffffbfff 	.word	0xffffbfff
 8003290:	40004400 	.word	0x40004400
 8003294:	fffdffff 	.word	0xfffdffff
 8003298:	40004800 	.word	0x40004800
 800329c:	fffbffff 	.word	0xfffbffff
 80032a0:	50000800 	.word	0x50000800

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 f968 	bl	800359c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80032da:	0018      	movs	r0, r3
 80032dc:	f002 f9c2 	bl	8005664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000784 	.word	0x20000784

080032ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  return 1;
 80032f0:	2301      	movs	r3, #1
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_kill>:

int _kill(int pid, int sig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003302:	f005 fb5b 	bl	80089bc <__errno>
 8003306:	0003      	movs	r3, r0
 8003308:	2216      	movs	r2, #22
 800330a:	601a      	str	r2, [r3, #0]
  return -1;
 800330c:	2301      	movs	r3, #1
 800330e:	425b      	negs	r3, r3
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <_exit>:

void _exit (int status)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003320:	2301      	movs	r3, #1
 8003322:	425a      	negs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0011      	movs	r1, r2
 8003328:	0018      	movs	r0, r3
 800332a:	f7ff ffe5 	bl	80032f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800332e:	e7fe      	b.n	800332e <_exit+0x16>

08003330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e00a      	b.n	8003358 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003342:	e000      	b.n	8003346 <_read+0x16>
 8003344:	bf00      	nop
 8003346:	0001      	movs	r1, r0
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	60ba      	str	r2, [r7, #8]
 800334e:	b2ca      	uxtb	r2, r1
 8003350:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	dbf0      	blt.n	8003342 <_read+0x12>
  }

  return len;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b006      	add	sp, #24
 8003368:	bd80      	pop	{r7, pc}

0800336a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e009      	b.n	8003390 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	60ba      	str	r2, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	0018      	movs	r0, r3
 8003386:	e000      	b.n	800338a <_write+0x20>
 8003388:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3301      	adds	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	dbf1      	blt.n	800337c <_write+0x12>
  }
  return len;
 8003398:	687b      	ldr	r3, [r7, #4]
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b006      	add	sp, #24
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_close>:

int _close(int file)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	425b      	negs	r3, r3
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b002      	add	sp, #8
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	0192      	lsls	r2, r2, #6
 80033c6:	605a      	str	r2, [r3, #4]
  return 0;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_isatty>:

int _isatty(int file)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <_sbrk+0x5c>)
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <_sbrk+0x60>)
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <_sbrk+0x64>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <_sbrk+0x64>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <_sbrk+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d207      	bcs.n	800343c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800342c:	f005 fac6 	bl	80089bc <__errno>
 8003430:	0003      	movs	r3, r0
 8003432:	220c      	movs	r2, #12
 8003434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003436:	2301      	movs	r3, #1
 8003438:	425b      	negs	r3, r3
 800343a:	e009      	b.n	8003450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <_sbrk+0x64>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	18d2      	adds	r2, r2, r3
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <_sbrk+0x64>)
 800344c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b006      	add	sp, #24
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20009000 	.word	0x20009000
 800345c:	00000400 	.word	0x00000400
 8003460:	20000c4c 	.word	0x20000c4c
 8003464:	20000f60 	.word	0x20000f60

08003468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003474:	480d      	ldr	r0, [pc, #52]	; (80034ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003476:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003478:	f7ff fff6 	bl	8003468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800347e:	490d      	ldr	r1, [pc, #52]	; (80034b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <LoopForever+0xe>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003484:	e002      	b.n	800348c <LoopCopyDataInit>

08003486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348a:	3304      	adds	r3, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800348c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003490:	d3f9      	bcc.n	8003486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <LoopForever+0x16>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003498:	e001      	b.n	800349e <LoopFillZerobss>

0800349a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800349c:	3204      	adds	r2, #4

0800349e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a0:	d3fb      	bcc.n	800349a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034a2:	f005 fa91 	bl	80089c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80034a6:	f7ff f87f 	bl	80025a8 <main>

080034aa <LoopForever>:

LoopForever:
  b LoopForever
 80034aa:	e7fe      	b.n	80034aa <LoopForever>
  ldr   r0, =_estack
 80034ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80034b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b4:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 80034b8:	0800f968 	.word	0x0800f968
  ldr r2, =_sbss
 80034bc:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 80034c0:	20000f60 	.word	0x20000f60

080034c4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034c4:	e7fe      	b.n	80034c4 <ADC1_COMP_IRQHandler>
	...

080034c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_Init+0x3c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Init+0x3c>)
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	0049      	lsls	r1, r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034e2:	2000      	movs	r0, #0
 80034e4:	f000 f810 	bl	8003508 <HAL_InitTick>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e001      	b.n	80034f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80034f4:	f7ff fcb8 	bl	8002e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40022000 	.word	0x40022000

08003508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003510:	230f      	movs	r3, #15
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_InitTick+0x88>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02b      	beq.n	8003578 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_InitTick+0x8c>)
 8003522:	681c      	ldr	r4, [r3, #0]
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_InitTick+0x88>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	0019      	movs	r1, r3
 800352a:	23fa      	movs	r3, #250	; 0xfa
 800352c:	0098      	lsls	r0, r3, #2
 800352e:	f7fc fe05 	bl	800013c <__udivsi3>
 8003532:	0003      	movs	r3, r0
 8003534:	0019      	movs	r1, r3
 8003536:	0020      	movs	r0, r4
 8003538:	f7fc fe00 	bl	800013c <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f919 	bl	8003776 <HAL_SYSTICK_Config>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d112      	bne.n	800356e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d80a      	bhi.n	8003564 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	2301      	movs	r3, #1
 8003552:	425b      	negs	r3, r3
 8003554:	2200      	movs	r2, #0
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f8e8 	bl	800372c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_InitTick+0x90>)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00d      	b.n	8003580 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003564:	230f      	movs	r3, #15
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e008      	b.n	8003580 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800356e:	230f      	movs	r3, #15
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e003      	b.n	8003580 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003578:	230f      	movs	r3, #15
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b005      	add	sp, #20
 800358c:	bd90      	pop	{r4, r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000030 	.word	0x20000030
 8003594:	20000028 	.word	0x20000028
 8003598:	2000002c 	.word	0x2000002c

0800359c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_IncTick+0x1c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	001a      	movs	r2, r3
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_IncTick+0x20>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	18d2      	adds	r2, r2, r3
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_IncTick+0x20>)
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	20000030 	.word	0x20000030
 80035bc:	20000c50 	.word	0x20000c50

080035c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  return uwTick;
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <HAL_GetTick+0x10>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	20000c50 	.word	0x20000c50

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	0002      	movs	r2, r0
 80035dc:	1dfb      	adds	r3, r7, #7
 80035de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b7f      	cmp	r3, #127	; 0x7f
 80035e6:	d809      	bhi.n	80035fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	001a      	movs	r2, r3
 80035ee:	231f      	movs	r3, #31
 80035f0:	401a      	ands	r2, r3
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <__NVIC_EnableIRQ+0x30>)
 80035f4:	2101      	movs	r1, #1
 80035f6:	4091      	lsls	r1, r2
 80035f8:	000a      	movs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	0002      	movs	r2, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b7f      	cmp	r3, #127	; 0x7f
 800361c:	d828      	bhi.n	8003670 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800361e:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <__NVIC_SetPriority+0xd4>)
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b25b      	sxtb	r3, r3
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	33c0      	adds	r3, #192	; 0xc0
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	589b      	ldr	r3, [r3, r2]
 800362e:	1dfa      	adds	r2, r7, #7
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	0011      	movs	r1, r2
 8003634:	2203      	movs	r2, #3
 8003636:	400a      	ands	r2, r1
 8003638:	00d2      	lsls	r2, r2, #3
 800363a:	21ff      	movs	r1, #255	; 0xff
 800363c:	4091      	lsls	r1, r2
 800363e:	000a      	movs	r2, r1
 8003640:	43d2      	mvns	r2, r2
 8003642:	401a      	ands	r2, r3
 8003644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	401a      	ands	r2, r3
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	0018      	movs	r0, r3
 8003654:	2303      	movs	r3, #3
 8003656:	4003      	ands	r3, r0
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800365c:	481f      	ldr	r0, [pc, #124]	; (80036dc <__NVIC_SetPriority+0xd4>)
 800365e:	1dfb      	adds	r3, r7, #7
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b25b      	sxtb	r3, r3
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	430a      	orrs	r2, r1
 8003668:	33c0      	adds	r3, #192	; 0xc0
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800366e:	e031      	b.n	80036d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <__NVIC_SetPriority+0xd8>)
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	0019      	movs	r1, r3
 8003678:	230f      	movs	r3, #15
 800367a:	400b      	ands	r3, r1
 800367c:	3b08      	subs	r3, #8
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	3306      	adds	r3, #6
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	3304      	adds	r3, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1dfa      	adds	r2, r7, #7
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	0011      	movs	r1, r2
 8003690:	2203      	movs	r2, #3
 8003692:	400a      	ands	r2, r1
 8003694:	00d2      	lsls	r2, r2, #3
 8003696:	21ff      	movs	r1, #255	; 0xff
 8003698:	4091      	lsls	r1, r2
 800369a:	000a      	movs	r2, r1
 800369c:	43d2      	mvns	r2, r2
 800369e:	401a      	ands	r2, r3
 80036a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	401a      	ands	r2, r3
 80036aa:	1dfb      	adds	r3, r7, #7
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	0018      	movs	r0, r3
 80036b0:	2303      	movs	r3, #3
 80036b2:	4003      	ands	r3, r0
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <__NVIC_SetPriority+0xd8>)
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	001c      	movs	r4, r3
 80036c0:	230f      	movs	r3, #15
 80036c2:	4023      	ands	r3, r4
 80036c4:	3b08      	subs	r3, #8
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	430a      	orrs	r2, r1
 80036ca:	3306      	adds	r3, #6
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	18c3      	adds	r3, r0, r3
 80036d0:	3304      	adds	r3, #4
 80036d2:	601a      	str	r2, [r3, #0]
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b003      	add	sp, #12
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1e5a      	subs	r2, r3, #1
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	045b      	lsls	r3, r3, #17
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d301      	bcc.n	80036fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f8:	2301      	movs	r3, #1
 80036fa:	e010      	b.n	800371e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <SysTick_Config+0x44>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	3a01      	subs	r2, #1
 8003702:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003704:	2301      	movs	r3, #1
 8003706:	425b      	negs	r3, r3
 8003708:	2103      	movs	r1, #3
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ff7c 	bl	8003608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <SysTick_Config+0x44>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003716:	4b04      	ldr	r3, [pc, #16]	; (8003728 <SysTick_Config+0x44>)
 8003718:	2207      	movs	r2, #7
 800371a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800371c:	2300      	movs	r3, #0
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	e000e010 	.word	0xe000e010

0800372c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	210f      	movs	r1, #15
 8003738:	187b      	adds	r3, r7, r1
 800373a:	1c02      	adds	r2, r0, #0
 800373c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	187b      	adds	r3, r7, r1
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b25b      	sxtb	r3, r3
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ff5d 	bl	8003608 <__NVIC_SetPriority>
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	0002      	movs	r2, r0
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003762:	1dfb      	adds	r3, r7, #7
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b25b      	sxtb	r3, r3
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff ff33 	bl	80035d4 <__NVIC_EnableIRQ>
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b002      	add	sp, #8
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff ffaf 	bl	80036e4 <SysTick_Config>
 8003786:	0003      	movs	r3, r0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379e:	e147      	b.n	8003a30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4091      	lsls	r1, r2
 80037aa:	000a      	movs	r2, r1
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d100      	bne.n	80037b8 <HAL_GPIO_Init+0x28>
 80037b6:	e138      	b.n	8003a2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	4013      	ands	r3, r2
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d005      	beq.n	80037d0 <HAL_GPIO_Init+0x40>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d130      	bne.n	8003832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	409a      	lsls	r2, r3
 80037de:	0013      	movs	r3, r2
 80037e0:	43da      	mvns	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003806:	2201      	movs	r2, #1
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	409a      	lsls	r2, r3
 800380c:	0013      	movs	r3, r2
 800380e:	43da      	mvns	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	2201      	movs	r2, #1
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
 8003824:	0013      	movs	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	4013      	ands	r3, r2
 800383a:	2b03      	cmp	r3, #3
 800383c:	d017      	beq.n	800386e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	4013      	ands	r3, r2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d123      	bne.n	80038c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	58d3      	ldr	r3, [r2, r3]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2207      	movs	r2, #7
 800388c:	4013      	ands	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	43da      	mvns	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2107      	movs	r1, #7
 80038a6:	400b      	ands	r3, r1
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	409a      	lsls	r2, r3
 80038ac:	0013      	movs	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	08da      	lsrs	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3208      	adds	r2, #8
 80038bc:	0092      	lsls	r2, r2, #2
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	409a      	lsls	r2, r3
 80038d0:	0013      	movs	r3, r2
 80038d2:	43da      	mvns	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2203      	movs	r2, #3
 80038e0:	401a      	ands	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	029b      	lsls	r3, r3, #10
 80038fe:	4013      	ands	r3, r2
 8003900:	d100      	bne.n	8003904 <HAL_GPIO_Init+0x174>
 8003902:	e092      	b.n	8003a2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3318      	adds	r3, #24
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	589b      	ldr	r3, [r3, r2]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2203      	movs	r2, #3
 8003916:	4013      	ands	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	220f      	movs	r2, #15
 800391c:	409a      	lsls	r2, r3
 800391e:	0013      	movs	r3, r2
 8003920:	43da      	mvns	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	23a0      	movs	r3, #160	; 0xa0
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	429a      	cmp	r2, r3
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x1ca>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a45      	ldr	r2, [pc, #276]	; (8003a4c <HAL_GPIO_Init+0x2bc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x1c6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a44      	ldr	r2, [pc, #272]	; (8003a50 <HAL_GPIO_Init+0x2c0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x1c2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a43      	ldr	r2, [pc, #268]	; (8003a54 <HAL_GPIO_Init+0x2c4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x1be>
 800394a:	2303      	movs	r3, #3
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x1cc>
 800394e:	2305      	movs	r3, #5
 8003950:	e004      	b.n	800395c <HAL_GPIO_Init+0x1cc>
 8003952:	2302      	movs	r3, #2
 8003954:	e002      	b.n	800395c <HAL_GPIO_Init+0x1cc>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_GPIO_Init+0x1cc>
 800395a:	2300      	movs	r3, #0
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	2103      	movs	r1, #3
 8003960:	400a      	ands	r2, r1
 8003962:	00d2      	lsls	r2, r2, #3
 8003964:	4093      	lsls	r3, r2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800396c:	4936      	ldr	r1, [pc, #216]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3318      	adds	r3, #24
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800397a:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43da      	mvns	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	035b      	lsls	r3, r3, #13
 8003992:	4013      	ands	r3, r2
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80039a4:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	039b      	lsls	r3, r3, #14
 80039bc:	4013      	ands	r3, r2
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039d0:	2384      	movs	r3, #132	; 0x84
 80039d2:	58d3      	ldr	r3, [r2, r3]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43da      	mvns	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f4:	4914      	ldr	r1, [pc, #80]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039f6:	2284      	movs	r2, #132	; 0x84
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80039fc:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	58d3      	ldr	r3, [r2, r3]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	025b      	lsls	r3, r3, #9
 8003a16:	4013      	ands	r3, r2
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a22:	4909      	ldr	r1, [pc, #36]	; (8003a48 <HAL_GPIO_Init+0x2b8>)
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	40da      	lsrs	r2, r3
 8003a38:	1e13      	subs	r3, r2, #0
 8003a3a:	d000      	beq.n	8003a3e <HAL_GPIO_Init+0x2ae>
 8003a3c:	e6b0      	b.n	80037a0 <HAL_GPIO_Init+0x10>
  }
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	50000400 	.word	0x50000400
 8003a50:	50000800 	.word	0x50000800
 8003a54:	50000c00 	.word	0x50000c00

08003a58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a66:	e0b4      	b.n	8003bd2 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d100      	bne.n	8003a7c <HAL_GPIO_DeInit+0x24>
 8003a7a:	e0a7      	b.n	8003bcc <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3318      	adds	r3, #24
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	4013      	ands	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	220f      	movs	r2, #15
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	23a0      	movs	r3, #160	; 0xa0
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_DeInit+0x76>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a50      	ldr	r2, [pc, #320]	; (8003bec <HAL_GPIO_DeInit+0x194>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_DeInit+0x72>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4f      	ldr	r2, [pc, #316]	; (8003bf0 <HAL_GPIO_DeInit+0x198>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_DeInit+0x6e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4e      	ldr	r2, [pc, #312]	; (8003bf4 <HAL_GPIO_DeInit+0x19c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_DeInit+0x6a>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e006      	b.n	8003ad0 <HAL_GPIO_DeInit+0x78>
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	e004      	b.n	8003ad0 <HAL_GPIO_DeInit+0x78>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_DeInit+0x78>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_GPIO_DeInit+0x78>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	00d2      	lsls	r2, r2, #3
 8003ad8:	4093      	lsls	r3, r2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d136      	bne.n	8003b4e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ae0:	4a41      	ldr	r2, [pc, #260]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	58d3      	ldr	r3, [r2, r3]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	43d2      	mvns	r2, r2
 8003aea:	493f      	ldr	r1, [pc, #252]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003af4:	2384      	movs	r3, #132	; 0x84
 8003af6:	58d3      	ldr	r3, [r2, r3]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	43d2      	mvns	r2, r2
 8003afc:	493a      	ldr	r1, [pc, #232]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	2284      	movs	r2, #132	; 0x84
 8003b02:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b04:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b12:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43d9      	mvns	r1, r3
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	220f      	movs	r2, #15
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3318      	adds	r3, #24
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	589a      	ldr	r2, [r3, r2]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	4829      	ldr	r0, [pc, #164]	; (8003be8 <HAL_GPIO_DeInit+0x190>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	400a      	ands	r2, r1
 8003b48:	3318      	adds	r3, #24
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	2103      	movs	r1, #3
 8003b58:	4099      	lsls	r1, r3
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	58d3      	ldr	r3, [r2, r3]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	2107      	movs	r1, #7
 8003b72:	400a      	ands	r2, r1
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	210f      	movs	r1, #15
 8003b78:	4091      	lsls	r1, r2
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	43d1      	mvns	r1, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	08d2      	lsrs	r2, r2, #3
 8003b82:	4019      	ands	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3208      	adds	r2, #8
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	0052      	lsls	r2, r2, #1
 8003b94:	2103      	movs	r1, #3
 8003b96:	4091      	lsls	r1, r2
 8003b98:	000a      	movs	r2, r1
 8003b9a:	43d2      	mvns	r2, r2
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4091      	lsls	r1, r2
 8003bac:	000a      	movs	r2, r1
 8003bae:	43d2      	mvns	r2, r2
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	0052      	lsls	r2, r2, #1
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	4091      	lsls	r1, r2
 8003bc2:	000a      	movs	r2, r1
 8003bc4:	43d2      	mvns	r2, r2
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	40da      	lsrs	r2, r3
 8003bd8:	1e13      	subs	r3, r2, #0
 8003bda:	d000      	beq.n	8003bde <HAL_GPIO_DeInit+0x186>
 8003bdc:	e744      	b.n	8003a68 <HAL_GPIO_DeInit+0x10>
  }
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021800 	.word	0x40021800
 8003bec:	50000400 	.word	0x50000400
 8003bf0:	50000800 	.word	0x50000800
 8003bf4:	50000c00 	.word	0x50000c00

08003bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	0008      	movs	r0, r1
 8003c02:	0011      	movs	r1, r2
 8003c04:	1cbb      	adds	r3, r7, #2
 8003c06:	1c02      	adds	r2, r0, #0
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	1c7b      	adds	r3, r7, #1
 8003c0c:	1c0a      	adds	r2, r1, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c10:	1c7b      	adds	r3, r7, #1
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c20:	e003      	b.n	8003c2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c22:	1cbb      	adds	r3, r7, #2
 8003c24:	881a      	ldrh	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e082      	b.n	8003d4c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2241      	movs	r2, #65	; 0x41
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2240      	movs	r2, #64	; 0x40
 8003c56:	2100      	movs	r1, #0
 8003c58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff f927 	bl	8002eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2241      	movs	r2, #65	; 0x41
 8003c66:	2124      	movs	r1, #36	; 0x24
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_I2C_Init+0x120>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4931      	ldr	r1, [pc, #196]	; (8003d58 <HAL_I2C_Init+0x124>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d108      	bne.n	8003cb2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0209      	lsls	r1, r1, #8
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e007      	b.n	8003cc2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2184      	movs	r1, #132	; 0x84
 8003cbc:	0209      	lsls	r1, r1, #8
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d104      	bne.n	8003cd4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	491f      	ldr	r1, [pc, #124]	; (8003d5c <HAL_I2C_Init+0x128>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	491a      	ldr	r1, [pc, #104]	; (8003d58 <HAL_I2C_Init+0x124>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69d9      	ldr	r1, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2241      	movs	r2, #65	; 0x41
 8003d38:	2120      	movs	r1, #32
 8003d3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2242      	movs	r2, #66	; 0x42
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	f0ffffff 	.word	0xf0ffffff
 8003d58:	ffff7fff 	.word	0xffff7fff
 8003d5c:	02008000 	.word	0x02008000

08003d60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2241      	movs	r2, #65	; 0x41
 8003d6e:	5c9b      	ldrb	r3, [r3, r2]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d138      	bne.n	8003de8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e032      	b.n	8003dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2241      	movs	r2, #65	; 0x41
 8003d90:	2124      	movs	r1, #36	; 0x24
 8003d92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	438a      	bics	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4911      	ldr	r1, [pc, #68]	; (8003df4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2241      	movs	r2, #65	; 0x41
 8003dd8:	2120      	movs	r1, #32
 8003dda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	ffffefff 	.word	0xffffefff

08003df8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2241      	movs	r2, #65	; 0x41
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d139      	bne.n	8003e82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2240      	movs	r2, #64	; 0x40
 8003e12:	5c9b      	ldrb	r3, [r3, r2]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e033      	b.n	8003e84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2240      	movs	r2, #64	; 0x40
 8003e20:	2101      	movs	r1, #1
 8003e22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2241      	movs	r2, #65	; 0x41
 8003e28:	2124      	movs	r1, #36	; 0x24
 8003e2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2241      	movs	r2, #65	; 0x41
 8003e72:	2120      	movs	r1, #32
 8003e74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2240      	movs	r2, #64	; 0x40
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b004      	add	sp, #16
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fffff0ff 	.word	0xfffff0ff

08003e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d11f      	bne.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	0013      	movs	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4912      	ldr	r1, [pc, #72]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc f93a 	bl	800013c <__udivsi3>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ece:	e008      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e001      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e009      	b.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	401a      	ands	r2, r3
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0ed      	beq.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40007000 	.word	0x40007000
 8003f04:	fffff9ff 	.word	0xfffff9ff
 8003f08:	20000028 	.word	0x20000028
 8003f0c:	000f4240 	.word	0x000f4240

08003f10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	23e0      	movs	r3, #224	; 0xe0
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4013      	ands	r3, r2
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e2fe      	b.n	8004538 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d100      	bne.n	8003f46 <HAL_RCC_OscConfig+0x1e>
 8003f44:	e07c      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4bc3      	ldr	r3, [pc, #780]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2238      	movs	r2, #56	; 0x38
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	4bc0      	ldr	r3, [pc, #768]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2203      	movs	r2, #3
 8003f56:	4013      	ands	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d102      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3e>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4bb9      	ldr	r3, [pc, #740]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	4013      	ands	r3, r2
 8003f76:	d062      	beq.n	800403e <HAL_RCC_OscConfig+0x116>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d15e      	bne.n	800403e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e2d9      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	025b      	lsls	r3, r3, #9
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x78>
 8003f90:	4bb0      	ldr	r3, [pc, #704]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4baf      	ldr	r3, [pc, #700]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	0249      	lsls	r1, r1, #9
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e020      	b.n	8003fe2 <HAL_RCC_OscConfig+0xba>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	23a0      	movs	r3, #160	; 0xa0
 8003fa6:	02db      	lsls	r3, r3, #11
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d10e      	bne.n	8003fca <HAL_RCC_OscConfig+0xa2>
 8003fac:	4ba9      	ldr	r3, [pc, #676]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4ba8      	ldr	r3, [pc, #672]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	02c9      	lsls	r1, r1, #11
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	4ba6      	ldr	r3, [pc, #664]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4ba5      	ldr	r3, [pc, #660]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0249      	lsls	r1, r1, #9
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCC_OscConfig+0xba>
 8003fca:	4ba2      	ldr	r3, [pc, #648]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4ba1      	ldr	r3, [pc, #644]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	49a1      	ldr	r1, [pc, #644]	; (8004258 <HAL_RCC_OscConfig+0x330>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	4b9f      	ldr	r3, [pc, #636]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b9e      	ldr	r3, [pc, #632]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	499f      	ldr	r1, [pc, #636]	; (800425c <HAL_RCC_OscConfig+0x334>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7ff fae9 	bl	80035c0 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7ff fae4 	bl	80035c0 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e298      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004006:	4b93      	ldr	r3, [pc, #588]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xcc>
 8004012:	e015      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7ff fad4 	bl	80035c0 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401e:	f7ff facf 	bl	80035c0 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	; 0x64
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e283      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004030:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	4013      	ands	r3, r2
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0xf6>
 800403c:	e000      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d100      	bne.n	800404c <HAL_RCC_OscConfig+0x124>
 800404a:	e099      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404c:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2238      	movs	r2, #56	; 0x38
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004056:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b10      	cmp	r3, #16
 8004064:	d102      	bne.n	800406c <HAL_RCC_OscConfig+0x144>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d002      	beq.n	8004072 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d135      	bne.n	80040de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004072:	4b78      	ldr	r3, [pc, #480]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4013      	ands	r3, r2
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x162>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e256      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b72      	ldr	r3, [pc, #456]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a74      	ldr	r2, [pc, #464]	; (8004260 <HAL_RCC_OscConfig+0x338>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d112      	bne.n	80040cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040a6:	4b6b      	ldr	r3, [pc, #428]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6e      	ldr	r2, [pc, #440]	; (8004264 <HAL_RCC_OscConfig+0x33c>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	4b67      	ldr	r3, [pc, #412]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040ba:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0adb      	lsrs	r3, r3, #11
 80040c0:	2207      	movs	r2, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	4a68      	ldr	r2, [pc, #416]	; (8004268 <HAL_RCC_OscConfig+0x340>)
 80040c6:	40da      	lsrs	r2, r3
 80040c8:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_RCC_OscConfig+0x344>)
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040cc:	4b68      	ldr	r3, [pc, #416]	; (8004270 <HAL_RCC_OscConfig+0x348>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff fa19 	bl	8003508 <HAL_InitTick>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d051      	beq.n	800417e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e22c      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d030      	beq.n	8004148 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5e      	ldr	r2, [pc, #376]	; (8004264 <HAL_RCC_OscConfig+0x33c>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b57      	ldr	r3, [pc, #348]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80040fa:	4b56      	ldr	r3, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b55      	ldr	r3, [pc, #340]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0049      	lsls	r1, r1, #1
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7ff fa5a 	bl	80035c0 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7ff fa55 	bl	80035c0 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e209      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4013      	ands	r3, r2
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b48      	ldr	r3, [pc, #288]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <HAL_RCC_OscConfig+0x338>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e01b      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800414e:	4949      	ldr	r1, [pc, #292]	; (8004274 <HAL_RCC_OscConfig+0x34c>)
 8004150:	400a      	ands	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7ff fa34 	bl	80035c0 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415e:	f7ff fa2f 	bl	80035c0 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1e3      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004170:	4b38      	ldr	r3, [pc, #224]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4013      	ands	r3, r2
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x236>
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800417e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2208      	movs	r2, #8
 8004186:	4013      	ands	r3, r2
 8004188:	d047      	beq.n	800421a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2238      	movs	r2, #56	; 0x38
 8004190:	4013      	ands	r3, r2
 8004192:	2b18      	cmp	r3, #24
 8004194:	d10a      	bne.n	80041ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x2f2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d138      	bne.n	800421a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e1c5      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d019      	beq.n	80041e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7ff f9fe 	bl	80035c0 <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7ff f9f9 	bl	80035c0 <HAL_GetTick>
 80041ce:	0002      	movs	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1ad      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d0f1      	beq.n	80041ca <HAL_RCC_OscConfig+0x2a2>
 80041e6:	e018      	b.n	800421a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ec:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7ff f9e4 	bl	80035c0 <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fe:	f7ff f9df 	bl	80035c0 <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e193      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	2202      	movs	r2, #2
 8004216:	4013      	ands	r3, r2
 8004218:	d1f1      	bne.n	80041fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2204      	movs	r2, #4
 8004220:	4013      	ands	r3, r2
 8004222:	d100      	bne.n	8004226 <HAL_RCC_OscConfig+0x2fe>
 8004224:	e0c6      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	231f      	movs	r3, #31
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2238      	movs	r2, #56	; 0x38
 8004234:	4013      	ands	r3, r2
 8004236:	2b20      	cmp	r3, #32
 8004238:	d11e      	bne.n	8004278 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x32c>)
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	2202      	movs	r2, #2
 8004240:	4013      	ands	r3, r2
 8004242:	d100      	bne.n	8004246 <HAL_RCC_OscConfig+0x31e>
 8004244:	e0b6      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d000      	beq.n	8004250 <HAL_RCC_OscConfig+0x328>
 800424e:	e0b1      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e171      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
 8004254:	40021000 	.word	0x40021000
 8004258:	fffeffff 	.word	0xfffeffff
 800425c:	fffbffff 	.word	0xfffbffff
 8004260:	ffff80ff 	.word	0xffff80ff
 8004264:	ffffc7ff 	.word	0xffffc7ff
 8004268:	00f42400 	.word	0x00f42400
 800426c:	20000028 	.word	0x20000028
 8004270:	2000002c 	.word	0x2000002c
 8004274:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004278:	4bb1      	ldr	r3, [pc, #708]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800427a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	055b      	lsls	r3, r3, #21
 8004280:	4013      	ands	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_RCC_OscConfig+0x360>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x362>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4bac      	ldr	r3, [pc, #688]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004292:	4bab      	ldr	r3, [pc, #684]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0549      	lsls	r1, r1, #21
 8004298:	430a      	orrs	r2, r1
 800429a:	63da      	str	r2, [r3, #60]	; 0x3c
 800429c:	4ba8      	ldr	r3, [pc, #672]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	055b      	lsls	r3, r3, #21
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4ba4      	ldr	r3, [pc, #656]	; (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d11a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042be:	4ba1      	ldr	r3, [pc, #644]	; (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	0049      	lsls	r1, r1, #1
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80042cc:	f7ff f978 	bl	80035c0 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7ff f973 	bl	80035c0 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e127      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	4b96      	ldr	r3, [pc, #600]	; (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x3e2>
 80042fc:	4b90      	ldr	r3, [pc, #576]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80042fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004300:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004302:	2101      	movs	r1, #1
 8004304:	430a      	orrs	r2, r1
 8004306:	65da      	str	r2, [r3, #92]	; 0x5c
 8004308:	e01c      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x404>
 8004312:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004316:	4b8a      	ldr	r3, [pc, #552]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004318:	2104      	movs	r1, #4
 800431a:	430a      	orrs	r2, r1
 800431c:	65da      	str	r2, [r3, #92]	; 0x5c
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004322:	4b87      	ldr	r3, [pc, #540]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
 800432c:	4b84      	ldr	r3, [pc, #528]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800432e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004330:	4b83      	ldr	r3, [pc, #524]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c
 8004338:	4b81      	ldr	r3, [pc, #516]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800433a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800433c:	4b80      	ldr	r3, [pc, #512]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800433e:	2104      	movs	r1, #4
 8004340:	438a      	bics	r2, r1
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7ff f938 	bl	80035c0 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004354:	e009      	b.n	800436a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7ff f933 	bl	80035c0 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	4a79      	ldr	r2, [pc, #484]	; (8004548 <HAL_RCC_OscConfig+0x620>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0e6      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	4b75      	ldr	r3, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x42e>
 8004374:	e013      	b.n	800439e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7ff f923 	bl	80035c0 <HAL_GetTick>
 800437a:	0003      	movs	r3, r0
 800437c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800437e:	e009      	b.n	8004394 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7ff f91e 	bl	80035c0 <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x620>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0d1      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800439e:	231f      	movs	r3, #31
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043ae:	4967      	ldr	r1, [pc, #412]	; (800454c <HAL_RCC_OscConfig+0x624>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d100      	bne.n	80043be <HAL_RCC_OscConfig+0x496>
 80043bc:	e0bb      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043be:	4b60      	ldr	r3, [pc, #384]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2238      	movs	r2, #56	; 0x38
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d100      	bne.n	80043cc <HAL_RCC_OscConfig+0x4a4>
 80043ca:	e07b      	b.n	80044c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d156      	bne.n	8004482 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043da:	495d      	ldr	r1, [pc, #372]	; (8004550 <HAL_RCC_OscConfig+0x628>)
 80043dc:	400a      	ands	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7ff f8ee 	bl	80035c0 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7ff f8e9 	bl	80035c0 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e09d      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	049b      	lsls	r3, r3, #18
 8004404:	4013      	ands	r3, r2
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004408:	4b4d      	ldr	r3, [pc, #308]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_RCC_OscConfig+0x62c>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	431a      	orrs	r2, r3
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0449      	lsls	r1, r1, #17
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0549      	lsls	r1, r1, #21
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7ff f8b2 	bl	80035c0 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7ff f8ad 	bl	80035c0 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e061      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	049b      	lsls	r3, r3, #18
 800447c:	4013      	ands	r3, r2
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x53a>
 8004480:	e059      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 8004488:	4931      	ldr	r1, [pc, #196]	; (8004550 <HAL_RCC_OscConfig+0x628>)
 800448a:	400a      	ands	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7ff f897 	bl	80035c0 <HAL_GetTick>
 8004492:	0003      	movs	r3, r0
 8004494:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7ff f892 	bl	80035c0 <HAL_GetTick>
 800449c:	0002      	movs	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e046      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	049b      	lsls	r3, r3, #18
 80044b2:	4013      	ands	r3, r2
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b21      	ldr	r3, [pc, #132]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80044bc:	4926      	ldr	r1, [pc, #152]	; (8004558 <HAL_RCC_OscConfig+0x630>)
 80044be:	400a      	ands	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e038      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e033      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x618>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2203      	movs	r2, #3
 80044da:	401a      	ands	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d126      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2270      	movs	r2, #112	; 0x70
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d11f      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	23fe      	movs	r3, #254	; 0xfe
 80044f6:	01db      	lsls	r3, r3, #7
 80044f8:	401a      	ands	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d116      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	23f8      	movs	r3, #248	; 0xf8
 8004508:	039b      	lsls	r3, r3, #14
 800450a:	401a      	ands	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d10e      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	23e0      	movs	r3, #224	; 0xe0
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0f5b      	lsrs	r3, r3, #29
 8004528:	075a      	lsls	r2, r3, #29
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b008      	add	sp, #32
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	00001388 	.word	0x00001388
 800454c:	efffffff 	.word	0xefffffff
 8004550:	feffffff 	.word	0xfeffffff
 8004554:	11c1808c 	.word	0x11c1808c
 8004558:	eefefffc 	.word	0xeefefffc

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0e9      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2207      	movs	r2, #7
 8004576:	4013      	ands	r3, r2
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d91e      	bls.n	80045bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b73      	ldr	r3, [pc, #460]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2207      	movs	r2, #7
 8004584:	4393      	bics	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	4b70      	ldr	r3, [pc, #448]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004590:	f7ff f816 	bl	80035c0 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004598:	e009      	b.n	80045ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459a:	f7ff f811 	bl	80035c0 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	4a6a      	ldr	r2, [pc, #424]	; (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0ca      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ae:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2207      	movs	r2, #7
 80045b4:	4013      	ands	r3, r2
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1ee      	bne.n	800459a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2202      	movs	r2, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	d015      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2204      	movs	r2, #4
 80045cc:	4013      	ands	r3, r2
 80045ce:	d006      	beq.n	80045de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045d0:	4b60      	ldr	r3, [pc, #384]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b5f      	ldr	r3, [pc, #380]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045d6:	21e0      	movs	r1, #224	; 0xe0
 80045d8:	01c9      	lsls	r1, r1, #7
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045de:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a5d      	ldr	r2, [pc, #372]	; (8004758 <HAL_RCC_ClockConfig+0x1fc>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d057      	beq.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4b53      	ldr	r3, [pc, #332]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	4013      	ands	r3, r2
 800460e:	d12b      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e097      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d107      	bne.n	800462c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461c:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	049b      	lsls	r3, r3, #18
 8004624:	4013      	ands	r3, r2
 8004626:	d11f      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e08b      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004634:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4013      	ands	r3, r2
 800463e:	d113      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e07f      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d106      	bne.n	800465a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464c:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d108      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e074      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e06d      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004668:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2207      	movs	r2, #7
 800466e:	4393      	bics	r3, r2
 8004670:	0019      	movs	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	4b37      	ldr	r3, [pc, #220]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fe ffa0 	bl	80035c0 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004684:	e009      	b.n	800469a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004686:	f7fe ff9b 	bl	80035c0 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e054      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2238      	movs	r2, #56	; 0x38
 80046a0:	401a      	ands	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1ec      	bne.n	8004686 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2207      	movs	r2, #7
 80046b2:	4013      	ands	r3, r2
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d21e      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2207      	movs	r2, #7
 80046c0:	4393      	bics	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046cc:	f7fe ff78 	bl	80035c0 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046d4:	e009      	b.n	80046ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7fe ff73 	bl	80035c0 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e02c      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2207      	movs	r2, #7
 80046f0:	4013      	ands	r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_RCC_ClockConfig+0x200>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004716:	f000 f829 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800471a:	0001      	movs	r1, r0
 800471c:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	220f      	movs	r2, #15
 8004724:	401a      	ands	r2, r3
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_RCC_ClockConfig+0x204>)
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	58d3      	ldr	r3, [r2, r3]
 800472c:	221f      	movs	r2, #31
 800472e:	4013      	ands	r3, r2
 8004730:	000a      	movs	r2, r1
 8004732:	40da      	lsrs	r2, r3
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_ClockConfig+0x208>)
 8004736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_ClockConfig+0x20c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fe fee3 	bl	8003508 <HAL_InitTick>
 8004742:	0003      	movs	r3, r0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40022000 	.word	0x40022000
 8004750:	00001388 	.word	0x00001388
 8004754:	40021000 	.word	0x40021000
 8004758:	fffff0ff 	.word	0xfffff0ff
 800475c:	ffff8fff 	.word	0xffff8fff
 8004760:	0800f464 	.word	0x0800f464
 8004764:	20000028 	.word	0x20000028
 8004768:	2000002c 	.word	0x2000002c

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004772:	4b3c      	ldr	r3, [pc, #240]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2238      	movs	r2, #56	; 0x38
 8004778:	4013      	ands	r3, r2
 800477a:	d10f      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0adb      	lsrs	r3, r3, #11
 8004782:	2207      	movs	r2, #7
 8004784:	4013      	ands	r3, r2
 8004786:	2201      	movs	r2, #1
 8004788:	409a      	lsls	r2, r3
 800478a:	0013      	movs	r3, r2
 800478c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	4835      	ldr	r0, [pc, #212]	; (8004868 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004792:	f7fb fcd3 	bl	800013c <__udivsi3>
 8004796:	0003      	movs	r3, r0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e05d      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800479c:	4b31      	ldr	r3, [pc, #196]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2238      	movs	r2, #56	; 0x38
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d102      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_RCC_GetSysClockFreq+0x100>)
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e054      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2238      	movs	r2, #56	; 0x38
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d138      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2203      	movs	r2, #3
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	3301      	adds	r3, #1
 80047d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4824      	ldr	r0, [pc, #144]	; (800486c <HAL_RCC_GetSysClockFreq+0x100>)
 80047dc:	f7fb fcae 	bl	800013c <__udivsi3>
 80047e0:	0003      	movs	r3, r0
 80047e2:	0019      	movs	r1, r3
 80047e4:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	227f      	movs	r2, #127	; 0x7f
 80047ec:	4013      	ands	r3, r2
 80047ee:	434b      	muls	r3, r1
 80047f0:	617b      	str	r3, [r7, #20]
        break;
 80047f2:	e00d      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	481c      	ldr	r0, [pc, #112]	; (8004868 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047f8:	f7fb fca0 	bl	800013c <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	0019      	movs	r1, r3
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	227f      	movs	r2, #127	; 0x7f
 8004808:	4013      	ands	r3, r2
 800480a:	434b      	muls	r3, r1
 800480c:	617b      	str	r3, [r7, #20]
        break;
 800480e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0f5b      	lsrs	r3, r3, #29
 8004816:	2207      	movs	r2, #7
 8004818:	4013      	ands	r3, r2
 800481a:	3301      	adds	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7fb fc8b 	bl	800013c <__udivsi3>
 8004826:	0003      	movs	r3, r0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	e015      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2238      	movs	r2, #56	; 0x38
 8004832:	4013      	ands	r3, r2
 8004834:	2b20      	cmp	r3, #32
 8004836:	d103      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2238      	movs	r2, #56	; 0x38
 8004846:	4013      	ands	r3, r2
 8004848:	2b18      	cmp	r3, #24
 800484a:	d103      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800484c:	23fa      	movs	r3, #250	; 0xfa
 800484e:	01db      	lsls	r3, r3, #7
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e001      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004858:	693b      	ldr	r3, [r7, #16]
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b006      	add	sp, #24
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	40021000 	.word	0x40021000
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b02      	ldr	r3, [pc, #8]	; (8004880 <HAL_RCC_GetHCLKFreq+0x10>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000028 	.word	0x20000028

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004888:	f7ff fff2 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 800488c:	0004      	movs	r4, r0
 800488e:	f7ff fb3f 	bl	8003f10 <LL_RCC_GetAPB1Prescaler>
 8004892:	0003      	movs	r3, r0
 8004894:	0b1a      	lsrs	r2, r3, #12
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	58d3      	ldr	r3, [r2, r3]
 800489c:	221f      	movs	r2, #31
 800489e:	4013      	ands	r3, r2
 80048a0:	40dc      	lsrs	r4, r3
 80048a2:	0023      	movs	r3, r4
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bdb0      	pop	{r4, r5, r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	0800f4a4 	.word	0x0800f4a4

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80048b8:	2313      	movs	r3, #19
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c0:	2312      	movs	r3, #18
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	4013      	ands	r3, r2
 80048d2:	d100      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80048d4:	e0a3      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2011      	movs	r0, #17
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4bc3      	ldr	r3, [pc, #780]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	055b      	lsls	r3, r3, #21
 80048e6:	4013      	ands	r3, r2
 80048e8:	d110      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	4bc0      	ldr	r3, [pc, #768]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ee:	4bbf      	ldr	r3, [pc, #764]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	0549      	lsls	r1, r1, #21
 80048f4:	430a      	orrs	r2, r1
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80048f8:	4bbc      	ldr	r3, [pc, #752]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	055b      	lsls	r3, r3, #21
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	183b      	adds	r3, r7, r0
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490c:	4bb8      	ldr	r3, [pc, #736]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4bb7      	ldr	r3, [pc, #732]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	0049      	lsls	r1, r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800491a:	f7fe fe51 	bl	80035c0 <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004922:	e00b      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fe fe4c 	bl	80035c0 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d904      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004932:	2313      	movs	r3, #19
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2203      	movs	r2, #3
 8004938:	701a      	strb	r2, [r3, #0]
        break;
 800493a:	e005      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493c:	4bac      	ldr	r3, [pc, #688]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d0ed      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004948:	2313      	movs	r3, #19
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d154      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004952:	4ba6      	ldr	r3, [pc, #664]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004956:	23c0      	movs	r3, #192	; 0xc0
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4013      	ands	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d014      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800496e:	4b9f      	ldr	r3, [pc, #636]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	4aa0      	ldr	r2, [pc, #640]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004978:	4b9c      	ldr	r3, [pc, #624]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800497c:	4b9b      	ldr	r3, [pc, #620]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	0249      	lsls	r1, r1, #9
 8004982:	430a      	orrs	r2, r1
 8004984:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004986:	4b99      	ldr	r3, [pc, #612]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800498a:	4b98      	ldr	r3, [pc, #608]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498c:	499a      	ldr	r1, [pc, #616]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800498e:	400a      	ands	r2, r1
 8004990:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004992:	4b96      	ldr	r3, [pc, #600]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d016      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fe0e 	bl	80035c0 <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a8:	e00c      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fe fe09 	bl	80035c0 <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	4a91      	ldr	r2, [pc, #580]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d904      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80049ba:	2313      	movs	r3, #19
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2203      	movs	r2, #3
 80049c0:	701a      	strb	r2, [r3, #0]
            break;
 80049c2:	e004      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c4:	4b89      	ldr	r3, [pc, #548]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d0ed      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80049ce:	2313      	movs	r3, #19
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d8:	4b84      	ldr	r3, [pc, #528]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	4a85      	ldr	r2, [pc, #532]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80049de:	4013      	ands	r3, r2
 80049e0:	0019      	movs	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e6:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049e8:	430a      	orrs	r2, r1
 80049ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80049ec:	e00c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ee:	2312      	movs	r3, #18
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2213      	movs	r2, #19
 80049f4:	18ba      	adds	r2, r7, r2
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	2312      	movs	r3, #18
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2213      	movs	r2, #19
 8004a02:	18ba      	adds	r2, r7, r2
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a08:	2311      	movs	r3, #17
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a16:	4b75      	ldr	r3, [pc, #468]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a18:	4979      	ldr	r1, [pc, #484]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	4013      	ands	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a28:	4b70      	ldr	r3, [pc, #448]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a46:	4b69      	ldr	r3, [pc, #420]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	4013      	ands	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a64:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	4a66      	ldr	r2, [pc, #408]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a84:	4b59      	ldr	r3, [pc, #356]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	4a5f      	ldr	r2, [pc, #380]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	4b56      	ldr	r3, [pc, #344]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a94:	430a      	orrs	r2, r1
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa4:	4b51      	ldr	r3, [pc, #324]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	4b4e      	ldr	r3, [pc, #312]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2220      	movs	r2, #32
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	4b46      	ldr	r3, [pc, #280]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae2:	4b42      	ldr	r3, [pc, #264]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	0899      	lsrs	r1, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	05db      	lsls	r3, r3, #23
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d106      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	0249      	lsls	r1, r1, #9
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	4013      	ands	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	4393      	bics	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b28:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	039b      	lsls	r3, r3, #14
 8004b36:	4013      	ands	r3, r2
 8004b38:	d016      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	4a35      	ldr	r2, [pc, #212]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	03db      	lsls	r3, r3, #15
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d106      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	0449      	lsls	r1, r1, #17
 8004b64:	430a      	orrs	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	03db      	lsls	r3, r3, #15
 8004b70:	4013      	ands	r3, r2
 8004b72:	d016      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b84:	430a      	orrs	r2, r1
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	045b      	lsls	r3, r3, #17
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	0449      	lsls	r1, r1, #17
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	4013      	ands	r3, r2
 8004bac:	d016      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	4a1a      	ldr	r2, [pc, #104]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	0249      	lsls	r1, r1, #9
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004bdc:	2312      	movs	r3, #18
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b006      	add	sp, #24
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	fffffcff 	.word	0xfffffcff
 8004bf8:	fffeffff 	.word	0xfffeffff
 8004bfc:	00001388 	.word	0x00001388
 8004c00:	efffffff 	.word	0xefffffff
 8004c04:	fffff3ff 	.word	0xfffff3ff
 8004c08:	fff3ffff 	.word	0xfff3ffff
 8004c0c:	ffcfffff 	.word	0xffcfffff
 8004c10:	ffffcfff 	.word	0xffffcfff
 8004c14:	ffbfffff 	.word	0xffbfffff
 8004c18:	feffffff 	.word	0xfeffffff
 8004c1c:	ffff3fff 	.word	0xffff3fff

08004c20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c28:	230f      	movs	r3, #15
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d100      	bne.n	8004c38 <HAL_RTC_Init+0x18>
 8004c36:	e08c      	b.n	8004d52 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2229      	movs	r2, #41	; 0x29
 8004c3c:	5c9b      	ldrb	r3, [r3, r2]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2228      	movs	r2, #40	; 0x28
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2288      	movs	r2, #136	; 0x88
 8004c50:	0212      	lsls	r2, r2, #8
 8004c52:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fe f98c 	bl	8002f74 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2229      	movs	r2, #41	; 0x29
 8004c60:	2102      	movs	r1, #2
 8004c62:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d062      	beq.n	8004d38 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	22ca      	movs	r2, #202	; 0xca
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2253      	movs	r2, #83	; 0x53
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004c82:	250f      	movs	r5, #15
 8004c84:	197c      	adds	r4, r7, r5
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 faf2 	bl	8005272 <RTC_EnterInitMode>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004c92:	0028      	movs	r0, r5
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d12c      	bne.n	8004cf6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	492e      	ldr	r1, [pc, #184]	; (8004d60 <HAL_RTC_Init+0x140>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6912      	ldr	r2, [r2, #16]
 8004cd2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6919      	ldr	r1, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	041a      	lsls	r2, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ce8:	183c      	adds	r4, r7, r0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 fb03 	bl	80052f8 <RTC_ExitInitMode>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d116      	bne.n	8004d2e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	00d2      	lsls	r2, r2, #3
 8004d0c:	08d2      	lsrs	r2, r2, #3
 8004d0e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
 8004d36:	e003      	b.n	8004d40 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004d40:	230f      	movs	r3, #15
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2229      	movs	r2, #41	; 0x29
 8004d4e:	2101      	movs	r1, #1
 8004d50:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004d52:	230f      	movs	r3, #15
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	781b      	ldrb	r3, [r3, #0]
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d60:	fb8fffbf 	.word	0xfb8fffbf

08004d64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2228      	movs	r2, #40	; 0x28
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_RTC_SetTime+0x1a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e092      	b.n	8004ea4 <HAL_RTC_SetTime+0x140>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2228      	movs	r2, #40	; 0x28
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2229      	movs	r2, #41	; 0x29
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	22ca      	movs	r2, #202	; 0xca
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2253      	movs	r2, #83	; 0x53
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d9e:	2513      	movs	r5, #19
 8004da0:	197c      	adds	r4, r7, r5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fa64 	bl	8005272 <RTC_EnterInitMode>
 8004daa:	0003      	movs	r3, r0
 8004dac:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004dae:	197b      	adds	r3, r7, r5
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d162      	bne.n	8004e7c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d125      	bne.n	8004e08 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d102      	bne.n	8004dce <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fad4 	bl	8005380 <RTC_ByteToBcd2>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 facd 	bl	8005380 <RTC_ByteToBcd2>
 8004de6:	0003      	movs	r3, r0
 8004de8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dea:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	789b      	ldrb	r3, [r3, #2]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 fac5 	bl	8005380 <RTC_ByteToBcd2>
 8004df6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004df8:	0022      	movs	r2, r4
 8004dfa:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e017      	b.n	8004e38 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	4013      	ands	r3, r2
 8004e12:	d102      	bne.n	8004e1a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2200      	movs	r2, #0
 8004e18:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e26:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e2c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	491b      	ldr	r1, [pc, #108]	; (8004eac <HAL_RTC_SetTime+0x148>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4918      	ldr	r1, [pc, #96]	; (8004eb0 <HAL_RTC_SetTime+0x14c>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6999      	ldr	r1, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e6c:	2313      	movs	r3, #19
 8004e6e:	18fc      	adds	r4, r7, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fa40 	bl	80052f8 <RTC_ExitInitMode>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004e84:	2313      	movs	r3, #19
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2229      	movs	r2, #41	; 0x29
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2228      	movs	r2, #40	; 0x28
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

  return status;
 8004e9e:	2313      	movs	r3, #19
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	781b      	ldrb	r3, [r3, #0]
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b006      	add	sp, #24
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8004eac:	007f7f7f 	.word	0x007f7f7f
 8004eb0:	fffbffff 	.word	0xfffbffff

08004eb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004eb4:	b5b0      	push	{r4, r5, r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2228      	movs	r2, #40	; 0x28
 8004ec4:	5c9b      	ldrb	r3, [r3, r2]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_RTC_SetDate+0x1a>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e07e      	b.n	8004fcc <HAL_RTC_SetDate+0x118>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2228      	movs	r2, #40	; 0x28
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2229      	movs	r2, #41	; 0x29
 8004eda:	2102      	movs	r1, #2
 8004edc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10e      	bne.n	8004f02 <HAL_RTC_SetDate+0x4e>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	001a      	movs	r2, r3
 8004eea:	2310      	movs	r3, #16
 8004eec:	4013      	ands	r3, r2
 8004eee:	d008      	beq.n	8004f02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	330a      	adds	r3, #10
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11c      	bne.n	8004f42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	78db      	ldrb	r3, [r3, #3]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fa37 	bl	8005380 <RTC_ByteToBcd2>
 8004f12:	0003      	movs	r3, r0
 8004f14:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 fa30 	bl	8005380 <RTC_ByteToBcd2>
 8004f20:	0003      	movs	r3, r0
 8004f22:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f24:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	789b      	ldrb	r3, [r3, #2]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 fa28 	bl	8005380 <RTC_ByteToBcd2>
 8004f30:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f32:	0022      	movs	r2, r4
 8004f34:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e00e      	b.n	8004f60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	78db      	ldrb	r3, [r3, #3]
 8004f46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	22ca      	movs	r2, #202	; 0xca
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2253      	movs	r2, #83	; 0x53
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f70:	2513      	movs	r5, #19
 8004f72:	197c      	adds	r4, r7, r5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 f97b 	bl	8005272 <RTC_EnterInitMode>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f80:	0028      	movs	r0, r5
 8004f82:	183b      	adds	r3, r7, r0
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4910      	ldr	r1, [pc, #64]	; (8004fd4 <HAL_RTC_SetDate+0x120>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f96:	183c      	adds	r4, r7, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f9ac 	bl	80052f8 <RTC_ExitInitMode>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	22ff      	movs	r2, #255	; 0xff
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004fac:	2313      	movs	r3, #19
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2229      	movs	r2, #41	; 0x29
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2228      	movs	r2, #40	; 0x28
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

  return status;
 8004fc6:	2313      	movs	r3, #19
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b006      	add	sp, #24
 8004fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd4:	00ffff3f 	.word	0x00ffff3f

08004fd8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2228      	movs	r2, #40	; 0x28
 8004fe8:	5c9b      	ldrb	r3, [r3, r2]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_RTC_SetAlarm+0x1a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e10c      	b.n	800520c <HAL_RTC_SetAlarm+0x234>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2228      	movs	r2, #40	; 0x28
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2229      	movs	r2, #41	; 0x29
 8004ffe:	2102      	movs	r1, #2
 8005000:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d136      	bne.n	8005076 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2240      	movs	r2, #64	; 0x40
 8005010:	4013      	ands	r3, r2
 8005012:	d102      	bne.n	800501a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 f9ae 	bl	8005380 <RTC_ByteToBcd2>
 8005024:	0003      	movs	r3, r0
 8005026:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	0018      	movs	r0, r3
 800502e:	f000 f9a7 	bl	8005380 <RTC_ByteToBcd2>
 8005032:	0003      	movs	r3, r0
 8005034:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005036:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	789b      	ldrb	r3, [r3, #2]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f99f 	bl	8005380 <RTC_ByteToBcd2>
 8005042:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005044:	0022      	movs	r2, r4
 8005046:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800504e:	431a      	orrs	r2, r3
 8005050:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2220      	movs	r2, #32
 8005056:	5c9b      	ldrb	r3, [r3, r2]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f991 	bl	8005380 <RTC_ByteToBcd2>
 800505e:	0003      	movs	r3, r0
 8005060:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005062:	0022      	movs	r2, r4
 8005064:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800506a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005070:	4313      	orrs	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e022      	b.n	80050bc <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2240      	movs	r2, #64	; 0x40
 800507e:	4013      	ands	r3, r2
 8005080:	d102      	bne.n	8005088 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2200      	movs	r2, #0
 8005086:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005094:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800509a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	78db      	ldrb	r3, [r3, #3]
 80050a0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2120      	movs	r1, #32
 80050a8:	5c5b      	ldrb	r3, [r3, r1]
 80050aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	22ca      	movs	r2, #202	; 0xca
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2253      	movs	r2, #83	; 0x53
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d143      	bne.n	800516c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4949      	ldr	r1, [pc, #292]	; (8005214 <HAL_RTC_SetAlarm+0x23c>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4946      	ldr	r1, [pc, #280]	; (8005218 <HAL_RTC_SetAlarm+0x240>)
 8005100:	400a      	ands	r2, r1
 8005102:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005104:	f7fe fa5c 	bl	80035c0 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800510c:	e016      	b.n	800513c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800510e:	f7fe fa57 	bl	80035c0 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	23fa      	movs	r3, #250	; 0xfa
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	429a      	cmp	r2, r3
 800511e:	d90d      	bls.n	800513c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2229      	movs	r2, #41	; 0x29
 800512c:	2103      	movs	r1, #3
 800512e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2228      	movs	r2, #40	; 0x28
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e067      	b.n	800520c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	4013      	ands	r3, r2
 8005146:	d0e2      	beq.n	800510e <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	0049      	lsls	r1, r1, #1
 8005166:	430a      	orrs	r2, r1
 8005168:	619a      	str	r2, [r3, #24]
 800516a:	e042      	b.n	80051f2 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <HAL_RTC_SetAlarm+0x244>)
 8005178:	400a      	ands	r2, r1
 800517a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4926      	ldr	r1, [pc, #152]	; (8005220 <HAL_RTC_SetAlarm+0x248>)
 8005188:	400a      	ands	r2, r1
 800518a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800518c:	f7fe fa18 	bl	80035c0 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005194:	e016      	b.n	80051c4 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005196:	f7fe fa13 	bl	80035c0 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	23fa      	movs	r3, #250	; 0xfa
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d90d      	bls.n	80051c4 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2229      	movs	r2, #41	; 0x29
 80051b4:	2103      	movs	r1, #3
 80051b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2228      	movs	r2, #40	; 0x28
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e023      	b.n	800520c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d0e2      	beq.n	8005196 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	0089      	lsls	r1, r1, #2
 80051ee:	430a      	orrs	r2, r1
 80051f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2229      	movs	r2, #41	; 0x29
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2228      	movs	r2, #40	; 0x28
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	b009      	add	sp, #36	; 0x24
 8005212:	bd90      	pop	{r4, r7, pc}
 8005214:	fffffeff 	.word	0xfffffeff
 8005218:	ffffefff 	.word	0xffffefff
 800521c:	fffffdff 	.word	0xfffffdff
 8005220:	ffffdfff 	.word	0xffffdfff

08005224 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	21a0      	movs	r1, #160	; 0xa0
 8005238:	438a      	bics	r2, r1
 800523a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800523c:	f7fe f9c0 	bl	80035c0 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005244:	e00a      	b.n	800525c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005246:	f7fe f9bb 	bl	80035c0 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	23fa      	movs	r3, #250	; 0xfa
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	429a      	cmp	r2, r3
 8005256:	d901      	bls.n	800525c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	4013      	ands	r3, r2
 8005266:	d0ee      	beq.n	8005246 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b004      	add	sp, #16
 8005270:	bd80      	pop	{r7, pc}

08005272 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800527a:	230f      	movs	r3, #15
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	4013      	ands	r3, r2
 800528c:	d12c      	bne.n	80052e8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	430a      	orrs	r2, r1
 800529c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800529e:	f7fe f98f 	bl	80035c0 <HAL_GetTick>
 80052a2:	0003      	movs	r3, r0
 80052a4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052a6:	e014      	b.n	80052d2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80052a8:	f7fe f98a 	bl	80035c0 <HAL_GetTick>
 80052ac:	0002      	movs	r2, r0
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	1ad2      	subs	r2, r2, r3
 80052b2:	200f      	movs	r0, #15
 80052b4:	183b      	adds	r3, r7, r0
 80052b6:	1839      	adds	r1, r7, r0
 80052b8:	7809      	ldrb	r1, [r1, #0]
 80052ba:	7019      	strb	r1, [r3, #0]
 80052bc:	23fa      	movs	r3, #250	; 0xfa
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d906      	bls.n	80052d2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	2203      	movs	r2, #3
 80052c8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2229      	movs	r2, #41	; 0x29
 80052ce:	2103      	movs	r1, #3
 80052d0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	4013      	ands	r3, r2
 80052dc:	d104      	bne.n	80052e8 <RTC_EnterInitMode+0x76>
 80052de:	230f      	movs	r3, #15
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d1df      	bne.n	80052a8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052e8:	230f      	movs	r3, #15
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	781b      	ldrb	r3, [r3, #0]
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052f8:	b590      	push	{r4, r7, lr}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	240f      	movs	r4, #15
 8005302:	193b      	adds	r3, r7, r4
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <RTC_ExitInitMode+0x84>)
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <RTC_ExitInitMode+0x84>)
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	438a      	bics	r2, r1
 8005312:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <RTC_ExitInitMode+0x84>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2220      	movs	r2, #32
 800531a:	4013      	ands	r3, r2
 800531c:	d10d      	bne.n	800533a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f7ff ff7f 	bl	8005224 <HAL_RTC_WaitForSynchro>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d021      	beq.n	800536e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2229      	movs	r2, #41	; 0x29
 800532e:	2103      	movs	r1, #3
 8005330:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005332:	193b      	adds	r3, r7, r4
 8005334:	2203      	movs	r2, #3
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e019      	b.n	800536e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <RTC_ExitInitMode+0x84>)
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <RTC_ExitInitMode+0x84>)
 8005340:	2120      	movs	r1, #32
 8005342:	438a      	bics	r2, r1
 8005344:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff ff6b 	bl	8005224 <HAL_RTC_WaitForSynchro>
 800534e:	1e03      	subs	r3, r0, #0
 8005350:	d007      	beq.n	8005362 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2229      	movs	r2, #41	; 0x29
 8005356:	2103      	movs	r1, #3
 8005358:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800535a:	230f      	movs	r3, #15
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2203      	movs	r2, #3
 8005360:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <RTC_ExitInitMode+0x84>)
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <RTC_ExitInitMode+0x84>)
 8005368:	2120      	movs	r1, #32
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800536e:	230f      	movs	r3, #15
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	781b      	ldrb	r3, [r3, #0]
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b005      	add	sp, #20
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	40002800 	.word	0x40002800

08005380 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	0002      	movs	r2, r0
 8005388:	1dfb      	adds	r3, r7, #7
 800538a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005390:	230b      	movs	r3, #11
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	1dfa      	adds	r2, r7, #7
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800539a:	e008      	b.n	80053ae <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80053a2:	220b      	movs	r2, #11
 80053a4:	18bb      	adds	r3, r7, r2
 80053a6:	18ba      	adds	r2, r7, r2
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	3a0a      	subs	r2, #10
 80053ac:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80053ae:	210b      	movs	r1, #11
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d8f1      	bhi.n	800539c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b2db      	uxtb	r3, r3
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2228      	movs	r2, #40	; 0x28
 80053dc:	5c9b      	ldrb	r3, [r3, r2]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e024      	b.n	8005430 <HAL_RTCEx_EnableBypassShadow+0x60>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2228      	movs	r2, #40	; 0x28
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2229      	movs	r2, #41	; 0x29
 80053f2:	2102      	movs	r1, #2
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	22ca      	movs	r2, #202	; 0xca
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2253      	movs	r2, #83	; 0x53
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2120      	movs	r1, #32
 8005412:	430a      	orrs	r2, r1
 8005414:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	22ff      	movs	r2, #255	; 0xff
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2229      	movs	r2, #41	; 0x29
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2228      	movs	r2, #40	; 0x28
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2228      	movs	r2, #40	; 0x28
 8005444:	5c9b      	ldrb	r3, [r3, r2]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_RTCEx_DisableBypassShadow+0x16>
 800544a:	2302      	movs	r3, #2
 800544c:	e024      	b.n	8005498 <HAL_RTCEx_DisableBypassShadow+0x60>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2228      	movs	r2, #40	; 0x28
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2229      	movs	r2, #41	; 0x29
 800545a:	2102      	movs	r1, #2
 800545c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	22ca      	movs	r2, #202	; 0xca
 8005464:	625a      	str	r2, [r3, #36]	; 0x24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2253      	movs	r2, #83	; 0x53
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	21df      	movs	r1, #223	; 0xdf
 800547a:	400a      	ands	r2, r1
 800547c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	22ff      	movs	r2, #255	; 0xff
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2229      	movs	r2, #41	; 0x29
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2228      	movs	r2, #40	; 0x28
 8005492:	2100      	movs	r1, #0
 8005494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e04a      	b.n	8005548 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	223d      	movs	r2, #61	; 0x3d
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d107      	bne.n	80054ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	223c      	movs	r2, #60	; 0x3c
 80054c2:	2100      	movs	r1, #0
 80054c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fd fd91 	bl	8002ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223d      	movs	r2, #61	; 0x3d
 80054d2:	2102      	movs	r1, #2
 80054d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	0019      	movs	r1, r3
 80054e0:	0010      	movs	r0, r2
 80054e2:	f000 fa11 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2248      	movs	r2, #72	; 0x48
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	223e      	movs	r2, #62	; 0x3e
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	223f      	movs	r2, #63	; 0x3f
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2241      	movs	r2, #65	; 0x41
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2242      	movs	r2, #66	; 0x42
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2243      	movs	r2, #67	; 0x43
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2244      	movs	r2, #68	; 0x44
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2245      	movs	r2, #69	; 0x45
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2246      	movs	r2, #70	; 0x46
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2247      	movs	r2, #71	; 0x47
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	223d      	movs	r2, #61	; 0x3d
 8005542:	2101      	movs	r1, #1
 8005544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	223d      	movs	r2, #61	; 0x3d
 800555c:	5c9b      	ldrb	r3, [r3, r2]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e042      	b.n	80055ee <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223d      	movs	r2, #61	; 0x3d
 800556c:	2102      	movs	r1, #2
 800556e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2101      	movs	r1, #1
 800557c:	430a      	orrs	r2, r1
 800557e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x5a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	05db      	lsls	r3, r3, #23
 8005592:	429a      	cmp	r2, r3
 8005594:	d009      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x5a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIM_Base_Start_IT+0xac>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x5a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIM_Base_Start_IT+0xb0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d116      	bne.n	80055d8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <HAL_TIM_Base_Start_IT+0xb4>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d016      	beq.n	80055ea <HAL_TIM_Base_Start_IT+0x9a>
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	025b      	lsls	r3, r3, #9
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d011      	beq.n	80055ea <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2101      	movs	r1, #1
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	e008      	b.n	80055ea <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2101      	movs	r1, #1
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e000      	b.n	80055ec <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40000400 	.word	0x40000400
 8005600:	40014000 	.word	0x40014000
 8005604:	00010007 	.word	0x00010007

08005608 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2101      	movs	r1, #1
 800561c:	438a      	bics	r2, r1
 800561e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_TIM_Base_Stop_IT+0x54>)
 8005628:	4013      	ands	r3, r2
 800562a:	d10d      	bne.n	8005648 <HAL_TIM_Base_Stop_IT+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <HAL_TIM_Base_Stop_IT+0x58>)
 8005634:	4013      	ands	r3, r2
 8005636:	d107      	bne.n	8005648 <HAL_TIM_Base_Stop_IT+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	223d      	movs	r2, #61	; 0x3d
 800564c:	2101      	movs	r1, #1
 800564e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	b002      	add	sp, #8
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	00001111 	.word	0x00001111
 8005660:	00000444 	.word	0x00000444

08005664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d124      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d11d      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2203      	movs	r2, #3
 800568e:	4252      	negs	r2, r2
 8005690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2203      	movs	r2, #3
 80056a0:	4013      	ands	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 f916 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e007      	b.n	80056be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 f909 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f915 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2204      	movs	r2, #4
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d125      	bne.n	800571e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2204      	movs	r2, #4
 80056da:	4013      	ands	r3, r2
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d11e      	bne.n	800571e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2205      	movs	r2, #5
 80056e6:	4252      	negs	r2, r2
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	23c0      	movs	r3, #192	; 0xc0
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4013      	ands	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f8e9 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 8005706:	e007      	b.n	8005718 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f8dc 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f8e8 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2208      	movs	r2, #8
 8005726:	4013      	ands	r3, r2
 8005728:	2b08      	cmp	r3, #8
 800572a:	d124      	bne.n	8005776 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2208      	movs	r2, #8
 8005734:	4013      	ands	r3, r2
 8005736:	2b08      	cmp	r3, #8
 8005738:	d11d      	bne.n	8005776 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2209      	movs	r2, #9
 8005740:	4252      	negs	r2, r2
 8005742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2204      	movs	r2, #4
 8005748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2203      	movs	r2, #3
 8005752:	4013      	ands	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f8bd 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 800575e:	e007      	b.n	8005770 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f8b0 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f8bc 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2210      	movs	r2, #16
 800577e:	4013      	ands	r3, r2
 8005780:	2b10      	cmp	r3, #16
 8005782:	d125      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2210      	movs	r2, #16
 800578c:	4013      	ands	r3, r2
 800578e:	2b10      	cmp	r3, #16
 8005790:	d11e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2211      	movs	r2, #17
 8005798:	4252      	negs	r2, r2
 800579a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2208      	movs	r2, #8
 80057a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	23c0      	movs	r3, #192	; 0xc0
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4013      	ands	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f890 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 80057b8:	e007      	b.n	80057ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f883 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 f88f 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2201      	movs	r2, #1
 80057d8:	4013      	ands	r3, r2
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10f      	bne.n	80057fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d108      	bne.n	80057fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2202      	movs	r2, #2
 80057f2:	4252      	negs	r2, r2
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7fd fb17 	bl	8002e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2280      	movs	r2, #128	; 0x80
 8005806:	4013      	ands	r3, r2
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d10f      	bne.n	800582c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	4013      	ands	r3, r2
 8005816:	2b80      	cmp	r3, #128	; 0x80
 8005818:	d108      	bne.n	800582c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2281      	movs	r2, #129	; 0x81
 8005820:	4252      	negs	r2, r2
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f964 	bl	8005af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	401a      	ands	r2, r3
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	429a      	cmp	r2, r3
 800583e:	d10e      	bne.n	800585e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	4013      	ands	r3, r2
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d107      	bne.n	800585e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_TIM_IRQHandler+0x260>)
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f000 f953 	bl	8005b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2240      	movs	r2, #64	; 0x40
 8005866:	4013      	ands	r3, r2
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d10f      	bne.n	800588c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2240      	movs	r2, #64	; 0x40
 8005874:	4013      	ands	r3, r2
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d108      	bne.n	800588c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2241      	movs	r2, #65	; 0x41
 8005880:	4252      	negs	r2, r2
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 f836 	bl	80058f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2220      	movs	r2, #32
 8005894:	4013      	ands	r3, r2
 8005896:	2b20      	cmp	r3, #32
 8005898:	d10f      	bne.n	80058ba <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d108      	bne.n	80058ba <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	4252      	negs	r2, r2
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 f915 	bl	8005ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	fffffeff 	.word	0xfffffeff

080058c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b002      	add	sp, #8
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}

08005908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a34      	ldr	r2, [pc, #208]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d008      	beq.n	8005932 <TIM_Base_SetConfig+0x2a>
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	05db      	lsls	r3, r3, #23
 8005926:	429a      	cmp	r2, r3
 8005928:	d003      	beq.n	8005932 <TIM_Base_SetConfig+0x2a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <TIM_Base_SetConfig+0xe8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2270      	movs	r2, #112	; 0x70
 8005936:	4393      	bics	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a29      	ldr	r2, [pc, #164]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	05db      	lsls	r3, r3, #23
 8005952:	429a      	cmp	r2, r3
 8005954:	d013      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <TIM_Base_SetConfig+0xe8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <TIM_Base_SetConfig+0xec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a23      	ldr	r2, [pc, #140]	; (80059f8 <TIM_Base_SetConfig+0xf0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a22      	ldr	r2, [pc, #136]	; (80059fc <TIM_Base_SetConfig+0xf4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0x76>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <TIM_Base_SetConfig+0xf8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <TIM_Base_SetConfig+0xfc>)
 8005982:	4013      	ands	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	4393      	bics	r3, r2
 8005996:	001a      	movs	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <TIM_Base_SetConfig+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0xce>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <TIM_Base_SetConfig+0xf0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0xce>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <TIM_Base_SetConfig+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0xce>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <TIM_Base_SetConfig+0xf8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d103      	bne.n	80059de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	615a      	str	r2, [r3, #20]
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b004      	add	sp, #16
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40002000 	.word	0x40002000
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	fffffcff 	.word	0xfffffcff

08005a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	223c      	movs	r2, #60	; 0x3c
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e055      	b.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	223c      	movs	r2, #60	; 0x3c
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223d      	movs	r2, #61	; 0x3d
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2270      	movs	r2, #112	; 0x70
 8005a60:	4393      	bics	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	05db      	lsls	r3, r3, #23
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d009      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a12      	ldr	r2, [pc, #72]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10c      	bne.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	4393      	bics	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	223d      	movs	r2, #61	; 0x3d
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	223c      	movs	r2, #60	; 0x3c
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b004      	add	sp, #16
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	ff0fffff 	.word	0xff0fffff
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40014000 	.word	0x40014000

08005ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b002      	add	sp, #8
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e046      	b.n	8005bb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2288      	movs	r2, #136	; 0x88
 8005b2a:	589b      	ldr	r3, [r3, r2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2284      	movs	r2, #132	; 0x84
 8005b34:	2100      	movs	r1, #0
 8005b36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fd fa7e 	bl	800303c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2288      	movs	r2, #136	; 0x88
 8005b44:	2124      	movs	r1, #36	; 0x24
 8005b46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2101      	movs	r1, #1
 8005b54:	438a      	bics	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f9ee 	bl	8005f3c <UART_SetConfig>
 8005b60:	0003      	movs	r3, r0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e024      	b.n	8005bb4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 fc9f 	bl	80064b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	490d      	ldr	r1, [pc, #52]	; (8005bbc <HAL_UART_Init+0xa8>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	212a      	movs	r1, #42	; 0x2a
 8005b96:	438a      	bics	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 fd37 	bl	8006620 <UART_CheckIdleState>
 8005bb2:	0003      	movs	r3, r0
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffffb7ff 	.word	0xffffb7ff

08005bc0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e032      	b.n	8005c38 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2288      	movs	r2, #136	; 0x88
 8005bd6:	2124      	movs	r1, #36	; 0x24
 8005bd8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2101      	movs	r1, #1
 8005be6:	438a      	bics	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7fd fafd 	bl	8003204 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2290      	movs	r2, #144	; 0x90
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2288      	movs	r2, #136	; 0x88
 8005c16:	2100      	movs	r1, #0
 8005c18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	228c      	movs	r2, #140	; 0x8c
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2284      	movs	r2, #132	; 0x84
 8005c32:	2100      	movs	r1, #0
 8005c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	1dbb      	adds	r3, r7, #6
 8005c4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2288      	movs	r2, #136	; 0x88
 8005c54:	589b      	ldr	r3, [r3, r2]
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d000      	beq.n	8005c5c <HAL_UART_Transmit+0x1c>
 8005c5a:	e088      	b.n	8005d6e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_Transmit+0x2a>
 8005c62:	1dbb      	adds	r3, r7, #6
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e080      	b.n	8005d70 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	015b      	lsls	r3, r3, #5
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d109      	bne.n	8005c8e <HAL_UART_Transmit+0x4e>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d105      	bne.n	8005c8e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2201      	movs	r2, #1
 8005c86:	4013      	ands	r3, r2
 8005c88:	d001      	beq.n	8005c8e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e070      	b.n	8005d70 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2290      	movs	r2, #144	; 0x90
 8005c92:	2100      	movs	r1, #0
 8005c94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2288      	movs	r2, #136	; 0x88
 8005c9a:	2121      	movs	r1, #33	; 0x21
 8005c9c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c9e:	f7fd fc8f 	bl	80035c0 <HAL_GetTick>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1dba      	adds	r2, r7, #6
 8005caa:	2154      	movs	r1, #84	; 0x54
 8005cac:	8812      	ldrh	r2, [r2, #0]
 8005cae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1dba      	adds	r2, r7, #6
 8005cb4:	2156      	movs	r1, #86	; 0x56
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	015b      	lsls	r3, r3, #5
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d108      	bne.n	8005cd8 <HAL_UART_Transmit+0x98>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e003      	b.n	8005ce0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ce0:	e02c      	b.n	8005d3c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	0013      	movs	r3, r2
 8005cec:	2200      	movs	r2, #0
 8005cee:	2180      	movs	r1, #128	; 0x80
 8005cf0:	f000 fce4 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e039      	b.n	8005d70 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	001a      	movs	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	05d2      	lsls	r2, r2, #23
 8005d0e:	0dd2      	lsrs	r2, r2, #23
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3302      	adds	r3, #2
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	e007      	b.n	8005d2a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3301      	adds	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2256      	movs	r2, #86	; 0x56
 8005d2e:	5a9b      	ldrh	r3, [r3, r2]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b299      	uxth	r1, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2256      	movs	r2, #86	; 0x56
 8005d3a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2256      	movs	r2, #86	; 0x56
 8005d40:	5a9b      	ldrh	r3, [r3, r2]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1cc      	bne.n	8005ce2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	0013      	movs	r3, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	f000 fcb1 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e006      	b.n	8005d70 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2288      	movs	r2, #136	; 0x88
 8005d66:	2120      	movs	r1, #32
 8005d68:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	0018      	movs	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b008      	add	sp, #32
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	228c      	movs	r2, #140	; 0x8c
 8005d8c:	589b      	ldr	r3, [r3, r2]
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d000      	beq.n	8005d94 <HAL_UART_Receive+0x1c>
 8005d92:	e0cc      	b.n	8005f2e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_UART_Receive+0x2a>
 8005d9a:	1dbb      	adds	r3, r7, #6
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0c4      	b.n	8005f30 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	015b      	lsls	r3, r3, #5
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d109      	bne.n	8005dc6 <HAL_UART_Receive+0x4e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d001      	beq.n	8005dc6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0b4      	b.n	8005f30 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2290      	movs	r2, #144	; 0x90
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	228c      	movs	r2, #140	; 0x8c
 8005dd2:	2122      	movs	r1, #34	; 0x22
 8005dd4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ddc:	f7fd fbf0 	bl	80035c0 <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1dba      	adds	r2, r7, #6
 8005de8:	215c      	movs	r1, #92	; 0x5c
 8005dea:	8812      	ldrh	r2, [r2, #0]
 8005dec:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1dba      	adds	r2, r7, #6
 8005df2:	215e      	movs	r1, #94	; 0x5e
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	015b      	lsls	r3, r3, #5
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d10d      	bne.n	8005e20 <HAL_UART_Receive+0xa8>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <HAL_UART_Receive+0x9e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2260      	movs	r2, #96	; 0x60
 8005e10:	4949      	ldr	r1, [pc, #292]	; (8005f38 <HAL_UART_Receive+0x1c0>)
 8005e12:	5299      	strh	r1, [r3, r2]
 8005e14:	e02e      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2260      	movs	r2, #96	; 0x60
 8005e1a:	21ff      	movs	r1, #255	; 0xff
 8005e1c:	5299      	strh	r1, [r3, r2]
 8005e1e:	e029      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <HAL_UART_Receive+0xcc>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_UART_Receive+0xc2>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2260      	movs	r2, #96	; 0x60
 8005e34:	21ff      	movs	r1, #255	; 0xff
 8005e36:	5299      	strh	r1, [r3, r2]
 8005e38:	e01c      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2260      	movs	r2, #96	; 0x60
 8005e3e:	217f      	movs	r1, #127	; 0x7f
 8005e40:	5299      	strh	r1, [r3, r2]
 8005e42:	e017      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	055b      	lsls	r3, r3, #21
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d10d      	bne.n	8005e6c <HAL_UART_Receive+0xf4>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_UART_Receive+0xea>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2260      	movs	r2, #96	; 0x60
 8005e5c:	217f      	movs	r1, #127	; 0x7f
 8005e5e:	5299      	strh	r1, [r3, r2]
 8005e60:	e008      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2260      	movs	r2, #96	; 0x60
 8005e66:	213f      	movs	r1, #63	; 0x3f
 8005e68:	5299      	strh	r1, [r3, r2]
 8005e6a:	e003      	b.n	8005e74 <HAL_UART_Receive+0xfc>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2260      	movs	r2, #96	; 0x60
 8005e70:	2100      	movs	r1, #0
 8005e72:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005e74:	2312      	movs	r3, #18
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	2160      	movs	r1, #96	; 0x60
 8005e7c:	5a52      	ldrh	r2, [r2, r1]
 8005e7e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	015b      	lsls	r3, r3, #5
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d108      	bne.n	8005e9e <HAL_UART_Receive+0x126>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e003      	b.n	8005ea6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ea6:	e036      	b.n	8005f16 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	0013      	movs	r3, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2120      	movs	r1, #32
 8005eb6:	f000 fc01 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8005eba:	1e03      	subs	r3, r0, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e036      	b.n	8005f30 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10e      	bne.n	8005ee6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2212      	movs	r2, #18
 8005ed2:	18ba      	adds	r2, r7, r2
 8005ed4:	8812      	ldrh	r2, [r2, #0]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e00e      	b.n	8005f04 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2212      	movs	r2, #18
 8005ef0:	18ba      	adds	r2, r7, r2
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	225e      	movs	r2, #94	; 0x5e
 8005f08:	5a9b      	ldrh	r3, [r3, r2]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b299      	uxth	r1, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	225e      	movs	r2, #94	; 0x5e
 8005f14:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	225e      	movs	r2, #94	; 0x5e
 8005f1a:	5a9b      	ldrh	r3, [r3, r2]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1c2      	bne.n	8005ea8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	228c      	movs	r2, #140	; 0x8c
 8005f26:	2120      	movs	r1, #32
 8005f28:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b008      	add	sp, #32
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	000001ff 	.word	0x000001ff

08005f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b090      	sub	sp, #64	; 0x40
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f44:	231a      	movs	r3, #26
 8005f46:	2220      	movs	r2, #32
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	19db      	adds	r3, r3, r7
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4aaf      	ldr	r2, [pc, #700]	; (800622c <UART_SetConfig+0x2f0>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	0019      	movs	r1, r3
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4aaa      	ldr	r2, [pc, #680]	; (8006230 <UART_SetConfig+0x2f4>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0018      	movs	r0, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	68d9      	ldr	r1, [r3, #12]
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	0003      	movs	r3, r0
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4aa4      	ldr	r2, [pc, #656]	; (8006234 <UART_SetConfig+0x2f8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a9f      	ldr	r2, [pc, #636]	; (8006238 <UART_SetConfig+0x2fc>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	220f      	movs	r2, #15
 8005fd0:	4393      	bics	r3, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	0003      	movs	r3, r0
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a95      	ldr	r2, [pc, #596]	; (800623c <UART_SetConfig+0x300>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d131      	bne.n	8006050 <UART_SetConfig+0x114>
 8005fec:	4b94      	ldr	r3, [pc, #592]	; (8006240 <UART_SetConfig+0x304>)
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d01d      	beq.n	8006034 <UART_SetConfig+0xf8>
 8005ff8:	d823      	bhi.n	8006042 <UART_SetConfig+0x106>
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d00c      	beq.n	8006018 <UART_SetConfig+0xdc>
 8005ffe:	d820      	bhi.n	8006042 <UART_SetConfig+0x106>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <UART_SetConfig+0xce>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d00e      	beq.n	8006026 <UART_SetConfig+0xea>
 8006008:	e01b      	b.n	8006042 <UART_SetConfig+0x106>
 800600a:	231b      	movs	r3, #27
 800600c:	2220      	movs	r2, #32
 800600e:	189b      	adds	r3, r3, r2
 8006010:	19db      	adds	r3, r3, r7
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e0b4      	b.n	8006182 <UART_SetConfig+0x246>
 8006018:	231b      	movs	r3, #27
 800601a:	2220      	movs	r2, #32
 800601c:	189b      	adds	r3, r3, r2
 800601e:	19db      	adds	r3, r3, r7
 8006020:	2202      	movs	r2, #2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e0ad      	b.n	8006182 <UART_SetConfig+0x246>
 8006026:	231b      	movs	r3, #27
 8006028:	2220      	movs	r2, #32
 800602a:	189b      	adds	r3, r3, r2
 800602c:	19db      	adds	r3, r3, r7
 800602e:	2204      	movs	r2, #4
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e0a6      	b.n	8006182 <UART_SetConfig+0x246>
 8006034:	231b      	movs	r3, #27
 8006036:	2220      	movs	r2, #32
 8006038:	189b      	adds	r3, r3, r2
 800603a:	19db      	adds	r3, r3, r7
 800603c:	2208      	movs	r2, #8
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e09f      	b.n	8006182 <UART_SetConfig+0x246>
 8006042:	231b      	movs	r3, #27
 8006044:	2220      	movs	r2, #32
 8006046:	189b      	adds	r3, r3, r2
 8006048:	19db      	adds	r3, r3, r7
 800604a:	2210      	movs	r2, #16
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e098      	b.n	8006182 <UART_SetConfig+0x246>
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a7b      	ldr	r2, [pc, #492]	; (8006244 <UART_SetConfig+0x308>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d131      	bne.n	80060be <UART_SetConfig+0x182>
 800605a:	4b79      	ldr	r3, [pc, #484]	; (8006240 <UART_SetConfig+0x304>)
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	220c      	movs	r2, #12
 8006060:	4013      	ands	r3, r2
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d01d      	beq.n	80060a2 <UART_SetConfig+0x166>
 8006066:	d823      	bhi.n	80060b0 <UART_SetConfig+0x174>
 8006068:	2b08      	cmp	r3, #8
 800606a:	d00c      	beq.n	8006086 <UART_SetConfig+0x14a>
 800606c:	d820      	bhi.n	80060b0 <UART_SetConfig+0x174>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <UART_SetConfig+0x13c>
 8006072:	2b04      	cmp	r3, #4
 8006074:	d00e      	beq.n	8006094 <UART_SetConfig+0x158>
 8006076:	e01b      	b.n	80060b0 <UART_SetConfig+0x174>
 8006078:	231b      	movs	r3, #27
 800607a:	2220      	movs	r2, #32
 800607c:	189b      	adds	r3, r3, r2
 800607e:	19db      	adds	r3, r3, r7
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e07d      	b.n	8006182 <UART_SetConfig+0x246>
 8006086:	231b      	movs	r3, #27
 8006088:	2220      	movs	r2, #32
 800608a:	189b      	adds	r3, r3, r2
 800608c:	19db      	adds	r3, r3, r7
 800608e:	2202      	movs	r2, #2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e076      	b.n	8006182 <UART_SetConfig+0x246>
 8006094:	231b      	movs	r3, #27
 8006096:	2220      	movs	r2, #32
 8006098:	189b      	adds	r3, r3, r2
 800609a:	19db      	adds	r3, r3, r7
 800609c:	2204      	movs	r2, #4
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e06f      	b.n	8006182 <UART_SetConfig+0x246>
 80060a2:	231b      	movs	r3, #27
 80060a4:	2220      	movs	r2, #32
 80060a6:	189b      	adds	r3, r3, r2
 80060a8:	19db      	adds	r3, r3, r7
 80060aa:	2208      	movs	r2, #8
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e068      	b.n	8006182 <UART_SetConfig+0x246>
 80060b0:	231b      	movs	r3, #27
 80060b2:	2220      	movs	r2, #32
 80060b4:	189b      	adds	r3, r3, r2
 80060b6:	19db      	adds	r3, r3, r7
 80060b8:	2210      	movs	r2, #16
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e061      	b.n	8006182 <UART_SetConfig+0x246>
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a61      	ldr	r2, [pc, #388]	; (8006248 <UART_SetConfig+0x30c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d106      	bne.n	80060d6 <UART_SetConfig+0x19a>
 80060c8:	231b      	movs	r3, #27
 80060ca:	2220      	movs	r2, #32
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	19db      	adds	r3, r3, r7
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e055      	b.n	8006182 <UART_SetConfig+0x246>
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a5c      	ldr	r2, [pc, #368]	; (800624c <UART_SetConfig+0x310>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d106      	bne.n	80060ee <UART_SetConfig+0x1b2>
 80060e0:	231b      	movs	r3, #27
 80060e2:	2220      	movs	r2, #32
 80060e4:	189b      	adds	r3, r3, r2
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e049      	b.n	8006182 <UART_SetConfig+0x246>
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a50      	ldr	r2, [pc, #320]	; (8006234 <UART_SetConfig+0x2f8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d13e      	bne.n	8006176 <UART_SetConfig+0x23a>
 80060f8:	4b51      	ldr	r3, [pc, #324]	; (8006240 <UART_SetConfig+0x304>)
 80060fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fc:	23c0      	movs	r3, #192	; 0xc0
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4013      	ands	r3, r2
 8006102:	22c0      	movs	r2, #192	; 0xc0
 8006104:	0112      	lsls	r2, r2, #4
 8006106:	4293      	cmp	r3, r2
 8006108:	d027      	beq.n	800615a <UART_SetConfig+0x21e>
 800610a:	22c0      	movs	r2, #192	; 0xc0
 800610c:	0112      	lsls	r2, r2, #4
 800610e:	4293      	cmp	r3, r2
 8006110:	d82a      	bhi.n	8006168 <UART_SetConfig+0x22c>
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	0112      	lsls	r2, r2, #4
 8006116:	4293      	cmp	r3, r2
 8006118:	d011      	beq.n	800613e <UART_SetConfig+0x202>
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	4293      	cmp	r3, r2
 8006120:	d822      	bhi.n	8006168 <UART_SetConfig+0x22c>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <UART_SetConfig+0x1f4>
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	00d2      	lsls	r2, r2, #3
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <UART_SetConfig+0x210>
 800612e:	e01b      	b.n	8006168 <UART_SetConfig+0x22c>
 8006130:	231b      	movs	r3, #27
 8006132:	2220      	movs	r2, #32
 8006134:	189b      	adds	r3, r3, r2
 8006136:	19db      	adds	r3, r3, r7
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e021      	b.n	8006182 <UART_SetConfig+0x246>
 800613e:	231b      	movs	r3, #27
 8006140:	2220      	movs	r2, #32
 8006142:	189b      	adds	r3, r3, r2
 8006144:	19db      	adds	r3, r3, r7
 8006146:	2202      	movs	r2, #2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e01a      	b.n	8006182 <UART_SetConfig+0x246>
 800614c:	231b      	movs	r3, #27
 800614e:	2220      	movs	r2, #32
 8006150:	189b      	adds	r3, r3, r2
 8006152:	19db      	adds	r3, r3, r7
 8006154:	2204      	movs	r2, #4
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e013      	b.n	8006182 <UART_SetConfig+0x246>
 800615a:	231b      	movs	r3, #27
 800615c:	2220      	movs	r2, #32
 800615e:	189b      	adds	r3, r3, r2
 8006160:	19db      	adds	r3, r3, r7
 8006162:	2208      	movs	r2, #8
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e00c      	b.n	8006182 <UART_SetConfig+0x246>
 8006168:	231b      	movs	r3, #27
 800616a:	2220      	movs	r2, #32
 800616c:	189b      	adds	r3, r3, r2
 800616e:	19db      	adds	r3, r3, r7
 8006170:	2210      	movs	r2, #16
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e005      	b.n	8006182 <UART_SetConfig+0x246>
 8006176:	231b      	movs	r3, #27
 8006178:	2220      	movs	r2, #32
 800617a:	189b      	adds	r3, r3, r2
 800617c:	19db      	adds	r3, r3, r7
 800617e:	2210      	movs	r2, #16
 8006180:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <UART_SetConfig+0x2f8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d000      	beq.n	800618e <UART_SetConfig+0x252>
 800618c:	e0a9      	b.n	80062e2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800618e:	231b      	movs	r3, #27
 8006190:	2220      	movs	r2, #32
 8006192:	189b      	adds	r3, r3, r2
 8006194:	19db      	adds	r3, r3, r7
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d015      	beq.n	80061c8 <UART_SetConfig+0x28c>
 800619c:	dc18      	bgt.n	80061d0 <UART_SetConfig+0x294>
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d00d      	beq.n	80061be <UART_SetConfig+0x282>
 80061a2:	dc15      	bgt.n	80061d0 <UART_SetConfig+0x294>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <UART_SetConfig+0x272>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0x27c>
 80061ac:	e010      	b.n	80061d0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ae:	f7fe fb69 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80061b2:	0003      	movs	r3, r0
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b6:	e014      	b.n	80061e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <UART_SetConfig+0x314>)
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061bc:	e011      	b.n	80061e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fe fad5 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80061c2:	0003      	movs	r3, r0
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061c6:	e00c      	b.n	80061e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ce:	e008      	b.n	80061e2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80061d4:	231a      	movs	r3, #26
 80061d6:	2220      	movs	r2, #32
 80061d8:	189b      	adds	r3, r3, r2
 80061da:	19db      	adds	r3, r3, r7
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
        break;
 80061e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d100      	bne.n	80061ea <UART_SetConfig+0x2ae>
 80061e8:	e14b      	b.n	8006482 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ee:	4b19      	ldr	r3, [pc, #100]	; (8006254 <UART_SetConfig+0x318>)
 80061f0:	0052      	lsls	r2, r2, #1
 80061f2:	5ad3      	ldrh	r3, [r2, r3]
 80061f4:	0019      	movs	r1, r3
 80061f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061f8:	f7f9 ffa0 	bl	800013c <__udivsi3>
 80061fc:	0003      	movs	r3, r0
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	0013      	movs	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	189b      	adds	r3, r3, r2
 800620a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620c:	429a      	cmp	r2, r3
 800620e:	d305      	bcc.n	800621c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006218:	429a      	cmp	r2, r3
 800621a:	d91d      	bls.n	8006258 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800621c:	231a      	movs	r3, #26
 800621e:	2220      	movs	r2, #32
 8006220:	189b      	adds	r3, r3, r2
 8006222:	19db      	adds	r3, r3, r7
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e12b      	b.n	8006482 <UART_SetConfig+0x546>
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	cfff69f3 	.word	0xcfff69f3
 8006230:	ffffcfff 	.word	0xffffcfff
 8006234:	40008000 	.word	0x40008000
 8006238:	11fff4ff 	.word	0x11fff4ff
 800623c:	40013800 	.word	0x40013800
 8006240:	40021000 	.word	0x40021000
 8006244:	40004400 	.word	0x40004400
 8006248:	40004800 	.word	0x40004800
 800624c:	40004c00 	.word	0x40004c00
 8006250:	00f42400 	.word	0x00f42400
 8006254:	0800f4c4 	.word	0x0800f4c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006264:	4b92      	ldr	r3, [pc, #584]	; (80064b0 <UART_SetConfig+0x574>)
 8006266:	0052      	lsls	r2, r2, #1
 8006268:	5ad3      	ldrh	r3, [r2, r3]
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	69b8      	ldr	r0, [r7, #24]
 8006276:	69f9      	ldr	r1, [r7, #28]
 8006278:	f7fa f914 	bl	80004a4 <__aeabi_uldivmod>
 800627c:	0002      	movs	r2, r0
 800627e:	000b      	movs	r3, r1
 8006280:	0e11      	lsrs	r1, r2, #24
 8006282:	021d      	lsls	r5, r3, #8
 8006284:	430d      	orrs	r5, r1
 8006286:	0214      	lsls	r4, r2, #8
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	1900      	adds	r0, r0, r4
 800629a:	4169      	adcs	r1, r5
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f7fa f8fb 	bl	80004a4 <__aeabi_uldivmod>
 80062ae:	0002      	movs	r2, r0
 80062b0:	000b      	movs	r3, r1
 80062b2:	0013      	movs	r3, r2
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b8:	23c0      	movs	r3, #192	; 0xc0
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d309      	bcc.n	80062d4 <UART_SetConfig+0x398>
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	035b      	lsls	r3, r3, #13
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d204      	bcs.n	80062d4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d0:	60da      	str	r2, [r3, #12]
 80062d2:	e0d6      	b.n	8006482 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80062d4:	231a      	movs	r3, #26
 80062d6:	2220      	movs	r2, #32
 80062d8:	189b      	adds	r3, r3, r2
 80062da:	19db      	adds	r3, r3, r7
 80062dc:	2201      	movs	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e0cf      	b.n	8006482 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d000      	beq.n	80062f0 <UART_SetConfig+0x3b4>
 80062ee:	e070      	b.n	80063d2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80062f0:	231b      	movs	r3, #27
 80062f2:	2220      	movs	r2, #32
 80062f4:	189b      	adds	r3, r3, r2
 80062f6:	19db      	adds	r3, r3, r7
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d015      	beq.n	800632a <UART_SetConfig+0x3ee>
 80062fe:	dc18      	bgt.n	8006332 <UART_SetConfig+0x3f6>
 8006300:	2b04      	cmp	r3, #4
 8006302:	d00d      	beq.n	8006320 <UART_SetConfig+0x3e4>
 8006304:	dc15      	bgt.n	8006332 <UART_SetConfig+0x3f6>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x3d4>
 800630a:	2b02      	cmp	r3, #2
 800630c:	d005      	beq.n	800631a <UART_SetConfig+0x3de>
 800630e:	e010      	b.n	8006332 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006310:	f7fe fab8 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006314:	0003      	movs	r3, r0
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006318:	e014      	b.n	8006344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800631a:	4b66      	ldr	r3, [pc, #408]	; (80064b4 <UART_SetConfig+0x578>)
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800631e:	e011      	b.n	8006344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006320:	f7fe fa24 	bl	800476c <HAL_RCC_GetSysClockFreq>
 8006324:	0003      	movs	r3, r0
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006328:	e00c      	b.n	8006344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006330:	e008      	b.n	8006344 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006336:	231a      	movs	r3, #26
 8006338:	2220      	movs	r2, #32
 800633a:	189b      	adds	r3, r3, r2
 800633c:	19db      	adds	r3, r3, r7
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
        break;
 8006342:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	d100      	bne.n	800634c <UART_SetConfig+0x410>
 800634a:	e09a      	b.n	8006482 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006350:	4b57      	ldr	r3, [pc, #348]	; (80064b0 <UART_SetConfig+0x574>)
 8006352:	0052      	lsls	r2, r2, #1
 8006354:	5ad3      	ldrh	r3, [r2, r3]
 8006356:	0019      	movs	r1, r3
 8006358:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800635a:	f7f9 feef 	bl	800013c <__udivsi3>
 800635e:	0003      	movs	r3, r0
 8006360:	005a      	lsls	r2, r3, #1
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	18d2      	adds	r2, r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	0019      	movs	r1, r3
 8006370:	0010      	movs	r0, r2
 8006372:	f7f9 fee3 	bl	800013c <__udivsi3>
 8006376:	0003      	movs	r3, r0
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	2b0f      	cmp	r3, #15
 800637e:	d921      	bls.n	80063c4 <UART_SetConfig+0x488>
 8006380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	429a      	cmp	r2, r3
 8006388:	d21c      	bcs.n	80063c4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	b29a      	uxth	r2, r3
 800638e:	200e      	movs	r0, #14
 8006390:	2420      	movs	r4, #32
 8006392:	1903      	adds	r3, r0, r4
 8006394:	19db      	adds	r3, r3, r7
 8006396:	210f      	movs	r1, #15
 8006398:	438a      	bics	r2, r1
 800639a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2207      	movs	r2, #7
 80063a4:	4013      	ands	r3, r2
 80063a6:	b299      	uxth	r1, r3
 80063a8:	1903      	adds	r3, r0, r4
 80063aa:	19db      	adds	r3, r3, r7
 80063ac:	1902      	adds	r2, r0, r4
 80063ae:	19d2      	adds	r2, r2, r7
 80063b0:	8812      	ldrh	r2, [r2, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1902      	adds	r2, r0, r4
 80063bc:	19d2      	adds	r2, r2, r7
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e05e      	b.n	8006482 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	231a      	movs	r3, #26
 80063c6:	2220      	movs	r2, #32
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	19db      	adds	r3, r3, r7
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	e057      	b.n	8006482 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063d2:	231b      	movs	r3, #27
 80063d4:	2220      	movs	r2, #32
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	19db      	adds	r3, r3, r7
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d015      	beq.n	800640c <UART_SetConfig+0x4d0>
 80063e0:	dc18      	bgt.n	8006414 <UART_SetConfig+0x4d8>
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00d      	beq.n	8006402 <UART_SetConfig+0x4c6>
 80063e6:	dc15      	bgt.n	8006414 <UART_SetConfig+0x4d8>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <UART_SetConfig+0x4b6>
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d005      	beq.n	80063fc <UART_SetConfig+0x4c0>
 80063f0:	e010      	b.n	8006414 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f2:	f7fe fa47 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80063f6:	0003      	movs	r3, r0
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063fa:	e014      	b.n	8006426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <UART_SetConfig+0x578>)
 80063fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006400:	e011      	b.n	8006426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fe f9b3 	bl	800476c <HAL_RCC_GetSysClockFreq>
 8006406:	0003      	movs	r3, r0
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800640a:	e00c      	b.n	8006426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006412:	e008      	b.n	8006426 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006418:	231a      	movs	r3, #26
 800641a:	2220      	movs	r2, #32
 800641c:	189b      	adds	r3, r3, r2
 800641e:	19db      	adds	r3, r3, r7
 8006420:	2201      	movs	r2, #1
 8006422:	701a      	strb	r2, [r3, #0]
        break;
 8006424:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d02a      	beq.n	8006482 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006430:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <UART_SetConfig+0x574>)
 8006432:	0052      	lsls	r2, r2, #1
 8006434:	5ad3      	ldrh	r3, [r2, r3]
 8006436:	0019      	movs	r1, r3
 8006438:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800643a:	f7f9 fe7f 	bl	800013c <__udivsi3>
 800643e:	0003      	movs	r3, r0
 8006440:	001a      	movs	r2, r3
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	18d2      	adds	r2, r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	0019      	movs	r1, r3
 8006450:	0010      	movs	r0, r2
 8006452:	f7f9 fe73 	bl	800013c <__udivsi3>
 8006456:	0003      	movs	r3, r0
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b0f      	cmp	r3, #15
 800645e:	d90a      	bls.n	8006476 <UART_SetConfig+0x53a>
 8006460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	025b      	lsls	r3, r3, #9
 8006466:	429a      	cmp	r2, r3
 8006468:	d205      	bcs.n	8006476 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	b29a      	uxth	r2, r3
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
 8006474:	e005      	b.n	8006482 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006476:	231a      	movs	r3, #26
 8006478:	2220      	movs	r2, #32
 800647a:	189b      	adds	r3, r3, r2
 800647c:	19db      	adds	r3, r3, r7
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	226a      	movs	r2, #106	; 0x6a
 8006486:	2101      	movs	r1, #1
 8006488:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	2268      	movs	r2, #104	; 0x68
 800648e:	2101      	movs	r1, #1
 8006490:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2200      	movs	r2, #0
 8006496:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2200      	movs	r2, #0
 800649c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800649e:	231a      	movs	r3, #26
 80064a0:	2220      	movs	r2, #32
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	19db      	adds	r3, r3, r7
 80064a6:	781b      	ldrb	r3, [r3, #0]
}
 80064a8:	0018      	movs	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b010      	add	sp, #64	; 0x40
 80064ae:	bdb0      	pop	{r4, r5, r7, pc}
 80064b0:	0800f4c4 	.word	0x0800f4c4
 80064b4:	00f42400 	.word	0x00f42400

080064b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	2201      	movs	r2, #1
 80064c6:	4013      	ands	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <UART_AdvFeatureConfig+0x144>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	2202      	movs	r2, #2
 80064e8:	4013      	ands	r3, r2
 80064ea:	d00b      	beq.n	8006504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4a43      	ldr	r2, [pc, #268]	; (8006600 <UART_AdvFeatureConfig+0x148>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	2204      	movs	r2, #4
 800650a:	4013      	ands	r3, r2
 800650c:	d00b      	beq.n	8006526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4a3b      	ldr	r2, [pc, #236]	; (8006604 <UART_AdvFeatureConfig+0x14c>)
 8006516:	4013      	ands	r3, r2
 8006518:	0019      	movs	r1, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	2208      	movs	r2, #8
 800652c:	4013      	ands	r3, r2
 800652e:	d00b      	beq.n	8006548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4a34      	ldr	r2, [pc, #208]	; (8006608 <UART_AdvFeatureConfig+0x150>)
 8006538:	4013      	ands	r3, r2
 800653a:	0019      	movs	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	2210      	movs	r2, #16
 800654e:	4013      	ands	r3, r2
 8006550:	d00b      	beq.n	800656a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <UART_AdvFeatureConfig+0x154>)
 800655a:	4013      	ands	r3, r2
 800655c:	0019      	movs	r1, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	2220      	movs	r2, #32
 8006570:	4013      	ands	r3, r2
 8006572:	d00b      	beq.n	800658c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4a25      	ldr	r2, [pc, #148]	; (8006610 <UART_AdvFeatureConfig+0x158>)
 800657c:	4013      	ands	r3, r2
 800657e:	0019      	movs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	4013      	ands	r3, r2
 8006594:	d01d      	beq.n	80065d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <UART_AdvFeatureConfig+0x15c>)
 800659e:	4013      	ands	r3, r2
 80065a0:	0019      	movs	r1, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	035b      	lsls	r3, r3, #13
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d10b      	bne.n	80065d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a15      	ldr	r2, [pc, #84]	; (8006618 <UART_AdvFeatureConfig+0x160>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	0019      	movs	r1, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	2280      	movs	r2, #128	; 0x80
 80065d8:	4013      	ands	r3, r2
 80065da:	d00b      	beq.n	80065f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4a0e      	ldr	r2, [pc, #56]	; (800661c <UART_AdvFeatureConfig+0x164>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	0019      	movs	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
  }
}
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	fffdffff 	.word	0xfffdffff
 8006600:	fffeffff 	.word	0xfffeffff
 8006604:	fffbffff 	.word	0xfffbffff
 8006608:	ffff7fff 	.word	0xffff7fff
 800660c:	ffffefff 	.word	0xffffefff
 8006610:	ffffdfff 	.word	0xffffdfff
 8006614:	ffefffff 	.word	0xffefffff
 8006618:	ff9fffff 	.word	0xff9fffff
 800661c:	fff7ffff 	.word	0xfff7ffff

08006620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af02      	add	r7, sp, #8
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2290      	movs	r2, #144	; 0x90
 800662c:	2100      	movs	r1, #0
 800662e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006630:	f7fc ffc6 	bl	80035c0 <HAL_GetTick>
 8006634:	0003      	movs	r3, r0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2208      	movs	r2, #8
 8006640:	4013      	ands	r3, r2
 8006642:	2b08      	cmp	r3, #8
 8006644:	d10c      	bne.n	8006660 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	0391      	lsls	r1, r2, #14
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <UART_CheckIdleState+0x98>)
 8006650:	9200      	str	r2, [sp, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	f000 f832 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d001      	beq.n	8006660 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e026      	b.n	80066ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2204      	movs	r2, #4
 8006668:	4013      	ands	r3, r2
 800666a:	2b04      	cmp	r3, #4
 800666c:	d10c      	bne.n	8006688 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2280      	movs	r2, #128	; 0x80
 8006672:	03d1      	lsls	r1, r2, #15
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <UART_CheckIdleState+0x98>)
 8006678:	9200      	str	r2, [sp, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	f000 f81e 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d001      	beq.n	8006688 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e012      	b.n	80066ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2288      	movs	r2, #136	; 0x88
 800668c:	2120      	movs	r1, #32
 800668e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	228c      	movs	r2, #140	; 0x8c
 8006694:	2120      	movs	r1, #32
 8006696:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2284      	movs	r2, #132	; 0x84
 80066a8:	2100      	movs	r1, #0
 80066aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	01ffffff 	.word	0x01ffffff

080066bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b094      	sub	sp, #80	; 0x50
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	1dfb      	adds	r3, r7, #7
 80066ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066cc:	e0a7      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d0:	3301      	adds	r3, #1
 80066d2:	d100      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80066d4:	e0a3      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d6:	f7fc ff73 	bl	80035c0 <HAL_GetTick>
 80066da:	0002      	movs	r2, r0
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <UART_WaitOnFlagUntilTimeout+0x30>
 80066e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d13f      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ec:	f3ef 8310 	mrs	r3, PRIMASK
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066f4:	647b      	str	r3, [r7, #68]	; 0x44
 80066f6:	2301      	movs	r3, #1
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	f383 8810 	msr	PRIMASK, r3
}
 8006700:	46c0      	nop			; (mov r8, r8)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	494e      	ldr	r1, [pc, #312]	; (8006848 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800670e:	400a      	ands	r2, r1
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006714:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8310 	mrs	r3, PRIMASK
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	643b      	str	r3, [r7, #64]	; 0x40
 8006728:	2301      	movs	r3, #1
 800672a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	f383 8810 	msr	PRIMASK, r3
}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2101      	movs	r1, #1
 8006740:	438a      	bics	r2, r1
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	f383 8810 	msr	PRIMASK, r3
}
 800674e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2288      	movs	r2, #136	; 0x88
 8006754:	2120      	movs	r1, #32
 8006756:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	228c      	movs	r2, #140	; 0x8c
 800675c:	2120      	movs	r1, #32
 800675e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2284      	movs	r2, #132	; 0x84
 8006764:	2100      	movs	r1, #0
 8006766:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e069      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2204      	movs	r2, #4
 8006774:	4013      	ands	r3, r2
 8006776:	d052      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	401a      	ands	r2, r3
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	429a      	cmp	r2, r3
 800678a:	d148      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2280      	movs	r2, #128	; 0x80
 8006792:	0112      	lsls	r2, r2, #4
 8006794:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006796:	f3ef 8310 	mrs	r3, PRIMASK
 800679a:	613b      	str	r3, [r7, #16]
  return(result);
 800679c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f383 8810 	msr	PRIMASK, r3
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4924      	ldr	r1, [pc, #144]	; (8006848 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80067b8:	400a      	ands	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f383 8810 	msr	PRIMASK, r3
}
 80067c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c8:	f3ef 8310 	mrs	r3, PRIMASK
 80067cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d2:	2301      	movs	r3, #1
 80067d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f383 8810 	msr	PRIMASK, r3
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2101      	movs	r1, #1
 80067ea:	438a      	bics	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	f383 8810 	msr	PRIMASK, r3
}
 80067f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2288      	movs	r2, #136	; 0x88
 80067fe:	2120      	movs	r1, #32
 8006800:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	228c      	movs	r2, #140	; 0x8c
 8006806:	2120      	movs	r1, #32
 8006808:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2290      	movs	r2, #144	; 0x90
 800680e:	2120      	movs	r1, #32
 8006810:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2284      	movs	r2, #132	; 0x84
 8006816:	2100      	movs	r1, #0
 8006818:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e010      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	425a      	negs	r2, r3
 800682e:	4153      	adcs	r3, r2
 8006830:	b2db      	uxtb	r3, r3
 8006832:	001a      	movs	r2, r3
 8006834:	1dfb      	adds	r3, r7, #7
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d100      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0x182>
 800683c:	e747      	b.n	80066ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b014      	add	sp, #80	; 0x50
 8006846:	bd80      	pop	{r7, pc}
 8006848:	fffffe5f 	.word	0xfffffe5f

0800684c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2284      	movs	r2, #132	; 0x84
 8006858:	5c9b      	ldrb	r3, [r3, r2]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_UARTEx_DisableFifoMode+0x16>
 800685e:	2302      	movs	r3, #2
 8006860:	e027      	b.n	80068b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2284      	movs	r2, #132	; 0x84
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2288      	movs	r2, #136	; 0x88
 800686e:	2124      	movs	r1, #36	; 0x24
 8006870:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	438a      	bics	r2, r1
 8006888:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a0b      	ldr	r2, [pc, #44]	; (80068bc <HAL_UARTEx_DisableFifoMode+0x70>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2288      	movs	r2, #136	; 0x88
 80068a4:	2120      	movs	r1, #32
 80068a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2284      	movs	r2, #132	; 0x84
 80068ac:	2100      	movs	r1, #0
 80068ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b004      	add	sp, #16
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	dfffffff 	.word	0xdfffffff

080068c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2284      	movs	r2, #132	; 0x84
 80068ce:	5c9b      	ldrb	r3, [r3, r2]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e02e      	b.n	8006936 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2284      	movs	r2, #132	; 0x84
 80068dc:	2101      	movs	r1, #1
 80068de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2288      	movs	r2, #136	; 0x88
 80068e4:	2124      	movs	r1, #36	; 0x24
 80068e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	438a      	bics	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	08d9      	lsrs	r1, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	0018      	movs	r0, r3
 8006918:	f000 f854 	bl	80069c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2288      	movs	r2, #136	; 0x88
 8006928:	2120      	movs	r1, #32
 800692a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2284      	movs	r2, #132	; 0x84
 8006930:	2100      	movs	r1, #0
 8006932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b004      	add	sp, #16
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2284      	movs	r2, #132	; 0x84
 800694e:	5c9b      	ldrb	r3, [r3, r2]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006954:	2302      	movs	r3, #2
 8006956:	e02f      	b.n	80069b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2284      	movs	r2, #132	; 0x84
 800695c:	2101      	movs	r1, #1
 800695e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2288      	movs	r2, #136	; 0x88
 8006964:	2124      	movs	r1, #36	; 0x24
 8006966:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2101      	movs	r1, #1
 800697c:	438a      	bics	r2, r1
 800697e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	4a0e      	ldr	r2, [pc, #56]	; (80069c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006988:	4013      	ands	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 f813 	bl	80069c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2288      	movs	r2, #136	; 0x88
 80069aa:	2120      	movs	r1, #32
 80069ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2284      	movs	r2, #132	; 0x84
 80069b2:	2100      	movs	r1, #0
 80069b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b004      	add	sp, #16
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	f1ffffff 	.word	0xf1ffffff

080069c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d108      	bne.n	80069e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	226a      	movs	r2, #106	; 0x6a
 80069d8:	2101      	movs	r1, #1
 80069da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2268      	movs	r2, #104	; 0x68
 80069e0:	2101      	movs	r1, #1
 80069e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069e4:	e043      	b.n	8006a6e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069e6:	260f      	movs	r6, #15
 80069e8:	19bb      	adds	r3, r7, r6
 80069ea:	2208      	movs	r2, #8
 80069ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069ee:	200e      	movs	r0, #14
 80069f0:	183b      	adds	r3, r7, r0
 80069f2:	2208      	movs	r2, #8
 80069f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	0e5b      	lsrs	r3, r3, #25
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	240d      	movs	r4, #13
 8006a02:	193b      	adds	r3, r7, r4
 8006a04:	2107      	movs	r1, #7
 8006a06:	400a      	ands	r2, r1
 8006a08:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	0f5b      	lsrs	r3, r3, #29
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	250c      	movs	r5, #12
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	2107      	movs	r1, #7
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a1e:	183b      	adds	r3, r7, r0
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	197a      	adds	r2, r7, r5
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	4914      	ldr	r1, [pc, #80]	; (8006a78 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a28:	5c8a      	ldrb	r2, [r1, r2]
 8006a2a:	435a      	muls	r2, r3
 8006a2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a2e:	197b      	adds	r3, r7, r5
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <UARTEx_SetNbDataToProcess+0xb8>)
 8006a34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a36:	0019      	movs	r1, r3
 8006a38:	f7f9 fc0a 	bl	8000250 <__divsi3>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	226a      	movs	r2, #106	; 0x6a
 8006a44:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a46:	19bb      	adds	r3, r7, r6
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	193a      	adds	r2, r7, r4
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	490a      	ldr	r1, [pc, #40]	; (8006a78 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a50:	5c8a      	ldrb	r2, [r1, r2]
 8006a52:	435a      	muls	r2, r3
 8006a54:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a56:	193b      	adds	r3, r7, r4
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <UARTEx_SetNbDataToProcess+0xb8>)
 8006a5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a5e:	0019      	movs	r1, r3
 8006a60:	f7f9 fbf6 	bl	8000250 <__divsi3>
 8006a64:	0003      	movs	r3, r0
 8006a66:	b299      	uxth	r1, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2268      	movs	r2, #104	; 0x68
 8006a6c:	5299      	strh	r1, [r3, r2]
}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b005      	add	sp, #20
 8006a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	0800f4dc 	.word	0x0800f4dc
 8006a7c:	0800f4e4 	.word	0x0800f4e4

08006a80 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8006a80:	b5b0      	push	{r4, r5, r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8006a88:	2508      	movs	r5, #8
 8006a8a:	197b      	adds	r3, r7, r5
 8006a8c:	1cda      	adds	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0011      	movs	r1, r2
 8006a92:	0018      	movs	r0, r3
 8006a94:	f000 fafe 	bl	8007094 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8006a98:	197b      	adds	r3, r7, r5
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0011      	movs	r1, r2
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 fb27 	bl	80070f4 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8006aa6:	197b      	adds	r3, r7, r5
 8006aa8:	1c9a      	adds	r2, r3, #2
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0011      	movs	r1, r2
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f000 fb50 	bl	8007154 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8006ab4:	240c      	movs	r4, #12
 8006ab6:	193a      	adds	r2, r7, r4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0011      	movs	r1, r2
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 fb79 	bl	80071b4 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8006ac2:	193b      	adds	r3, r7, r4
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0011      	movs	r1, r2
 8006aca:	0018      	movs	r0, r3
 8006acc:	f000 fba2 	bl	8007214 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8006ad0:	193b      	adds	r3, r7, r4
 8006ad2:	1c9a      	adds	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f000 fbcb 	bl	8007274 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8006ade:	193b      	adds	r3, r7, r4
 8006ae0:	1d1a      	adds	r2, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f000 fbf4 	bl	80072d4 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006aec:	193b      	adds	r3, r7, r4
 8006aee:	2200      	movs	r2, #0
 8006af0:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006af2:	193b      	adds	r3, r7, r4
 8006af4:	2200      	movs	r2, #0
 8006af6:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7fe fc68 	bl	80053d0 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8006b00:	1939      	adds	r1, r7, r4
 8006b02:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe f92c 	bl	8004d64 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8006b0c:	1979      	adds	r1, r7, r5
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7fe f9ce 	bl	8004eb4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8006b18:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7fe fc8c 	bl	8005438 <HAL_RTCEx_DisableBypassShadow>
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b008      	add	sp, #32
 8006b26:	bdb0      	pop	{r4, r5, r7, pc}
 8006b28:	20000758 	.word	0x20000758

08006b2c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2100      	movs	r1, #0
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f001 fc61 	bl	8008400 <strtod>
 8006b3e:	0002      	movs	r2, r0
 8006b40:	000b      	movs	r3, r1
 8006b42:	60ba      	str	r2, [r7, #8]
 8006b44:	60fb      	str	r3, [r7, #12]
    return d ;
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b004      	add	sp, #16
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	0008      	movs	r0, r1
 8006b5e:	0011      	movs	r1, r2
 8006b60:	1cfb      	adds	r3, r7, #3
 8006b62:	1c02      	adds	r2, r0, #0
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	1cbb      	adds	r3, r7, #2
 8006b68:	1c0a      	adds	r2, r1, #0
 8006b6a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8006b74:	230e      	movs	r3, #14
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8006b7c:	e01c      	b.n	8006bb8 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8006b7e:	230f      	movs	r3, #15
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	18d3      	adds	r3, r2, r3
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	1cfa      	adds	r2, r7, #3
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d105      	bne.n	8006b9e <my_find_char_position+0x4a>
			p++ ;
 8006b92:	210e      	movs	r1, #14
 8006b94:	187b      	adds	r3, r7, r1
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8006b9e:	230e      	movs	r3, #14
 8006ba0:	18fa      	adds	r2, r7, r3
 8006ba2:	1cbb      	adds	r3, r7, #2
 8006ba4:	7812      	ldrb	r2, [r2, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d00e      	beq.n	8006bca <my_find_char_position+0x76>
			break ;
		i++ ;
 8006bac:	210f      	movs	r1, #15
 8006bae:	187b      	adds	r3, r7, r1
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	3201      	adds	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8006bb8:	230f      	movs	r3, #15
 8006bba:	18fb      	adds	r3, r7, r3
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	18d3      	adds	r3, r2, r3
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1da      	bne.n	8006b7e <my_find_char_position+0x2a>
 8006bc8:	e000      	b.n	8006bcc <my_find_char_position+0x78>
			break ;
 8006bca:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8006bcc:	230f      	movs	r3, #15
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	781b      	ldrb	r3, [r3, #0]
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b004      	add	sp, #16
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <my_nmea_message>:
    }
    return -1 ;
}
*/
int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b24      	cmp	r3, #36	; 0x24
 8006bec:	d117      	bne.n	8006c1e <my_nmea_message+0x44>
    {
        *i = 0 ;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	b2d1      	uxtb	r1, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7011      	strb	r1, [r2, #0]
 8006c00:	001a      	movs	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	7812      	ldrb	r2, [r2, #0]
 8006c0a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	001a      	movs	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	189b      	adds	r3, r3, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e045      	b.n	8006caa <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b1f      	cmp	r3, #31
 8006c24:	d907      	bls.n	8006c36 <my_nmea_message+0x5c>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b7e      	cmp	r3, #126	; 0x7e
 8006c2c:	d803      	bhi.n	8006c36 <my_nmea_message+0x5c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <my_nmea_message+0x64>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b0d      	cmp	r3, #13
 8006c3c:	d114      	bne.n	8006c68 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	b2d1      	uxtb	r1, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	7011      	strb	r1, [r2, #0]
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	189b      	adds	r3, r3, r2
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e020      	b.n	8006caa <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b0a      	cmp	r3, #10
 8006c6e:	d11a      	bne.n	8006ca6 <my_nmea_message+0xcc>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d916      	bls.n	8006ca6 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	001a      	movs	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	189b      	adds	r3, r3, r2
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b0d      	cmp	r3, #13
 8006c92:	d108      	bne.n	8006ca6 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	001a      	movs	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	189b      	adds	r3, r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e001      	b.n	8006caa <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	425b      	negs	r3, r3
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b004      	add	sp, #16
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3309      	adds	r3, #9
 8006cbe:	781b      	ldrb	r3, [r3, #0]
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	220f      	movs	r2, #15
 8006cd4:	212c      	movs	r1, #44	; 0x2c
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7ff ff3c 	bl	8006b54 <my_find_char_position>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	001a      	movs	r2, r3
 8006ce0:	2517      	movs	r5, #23
 8006ce2:	197b      	adds	r3, r7, r5
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2210      	movs	r2, #16
 8006cec:	212c      	movs	r1, #44	; 0x2c
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7ff ff30 	bl	8006b54 <my_find_char_position>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	2416      	movs	r4, #22
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	197a      	adds	r2, r7, r5
 8006cfe:	7812      	ldrb	r2, [r2, #0]
 8006d00:	1a8a      	subs	r2, r1, r2
 8006d02:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8006d04:	193b      	adds	r3, r7, r4
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 fb16 	bl	800733c <malloc>
 8006d10:	0003      	movs	r3, r0
 8006d12:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8006d14:	197b      	adds	r3, r7, r5
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	18d1      	adds	r1, r2, r3
 8006d1c:	193b      	adds	r3, r7, r4
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	0018      	movs	r0, r3
 8006d24:	f001 fdb7 	bl	8008896 <strncpy>
	pdop_s[pdop_length] = '\0';
 8006d28:	193b      	adds	r3, r7, r4
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	18d3      	adds	r3, r2, r3
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7ff fef8 	bl	8006b2c <my_string2double_conv>
 8006d3c:	0002      	movs	r2, r0
 8006d3e:	000b      	movs	r3, r1
 8006d40:	60ba      	str	r2, [r7, #8]
 8006d42:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	0018      	movs	r0, r3
 8006d48:	f000 fb02 	bl	8007350 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	0010      	movs	r0, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b006      	add	sp, #24
 8006d58:	bdb0      	pop	{r4, r5, r7, pc}

08006d5a <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8006d5a:	b590      	push	{r4, r7, lr}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8006d62:	230f      	movs	r3, #15
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8006d6a:	230e      	movs	r3, #14
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006d72:	e00f      	b.n	8006d94 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8006d74:	220e      	movs	r2, #14
 8006d76:	18bb      	adds	r3, r7, r2
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	18ba      	adds	r2, r7, r2
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	7011      	strb	r1, [r2, #0]
 8006d80:	001a      	movs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	189b      	adds	r3, r3, r2
 8006d86:	7819      	ldrb	r1, [r3, #0]
 8006d88:	220f      	movs	r2, #15
 8006d8a:	18bb      	adds	r3, r7, r2
 8006d8c:	18ba      	adds	r2, r7, r2
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	404a      	eors	r2, r1
 8006d92:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006d94:	210e      	movs	r1, #14
 8006d96:	187b      	adds	r3, r7, r1
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b2a      	cmp	r3, #42	; 0x2a
 8006da2:	d00a      	beq.n	8006dba <is_my_nmea_checksum_ok+0x60>
 8006da4:	187b      	adds	r3, r7, r1
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	18d3      	adds	r3, r2, r3
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <is_my_nmea_checksum_ok+0x60>
 8006db2:	187b      	adds	r3, r7, r1
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1dc      	bne.n	8006d74 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8006dba:	230f      	movs	r3, #15
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	781c      	ldrb	r4, [r3, #0]
 8006dc0:	210e      	movs	r1, #14
 8006dc2:	187b      	adds	r3, r7, r1
 8006dc4:	187a      	adds	r2, r7, r1
 8006dc6:	7812      	ldrb	r2, [r2, #0]
 8006dc8:	3201      	adds	r2, #1
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	18d3      	adds	r3, r2, r3
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f001 fba9 	bl	8008530 <strtol>
 8006dde:	0003      	movs	r3, r0
 8006de0:	1ae3      	subs	r3, r4, r3
 8006de2:	425a      	negs	r2, r3
 8006de4:	4153      	adcs	r3, r2
 8006de6:	b2db      	uxtb	r3, r3
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b005      	add	sp, #20
 8006dee:	bd90      	pop	{r4, r7, pc}

08006df0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8006df0:	b5b0      	push	{r4, r5, r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	000a      	movs	r2, r1
 8006dfa:	1cfb      	adds	r3, r7, #3
 8006dfc:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8006dfe:	2308      	movs	r3, #8
 8006e00:	18fa      	adds	r2, r7, r3
 8006e02:	492f      	ldr	r1, [pc, #188]	; (8006ec0 <nmea2decimal+0xd0>)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0018      	movs	r0, r3
 8006e08:	f001 fcb6 	bl	8008778 <sscanf>
    min = deg / 100 ;
 8006e0c:	68b8      	ldr	r0, [r7, #8]
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <nmea2decimal+0xd4>)
 8006e14:	f7fa f830 	bl	8000e78 <__aeabi_ddiv>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	000b      	movs	r3, r1
 8006e1c:	613a      	str	r2, [r7, #16]
 8006e1e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8006e20:	6938      	ldr	r0, [r7, #16]
 8006e22:	6979      	ldr	r1, [r7, #20]
 8006e24:	f7fb fa84 	bl	8002330 <__aeabi_d2iz>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7fb fab6 	bl	800239c <__aeabi_i2d>
 8006e30:	0002      	movs	r2, r0
 8006e32:	000b      	movs	r3, r1
 8006e34:	60ba      	str	r2, [r7, #8]
 8006e36:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6938      	ldr	r0, [r7, #16]
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	f7fa fed6 	bl	8001bf0 <__aeabi_dsub>
 8006e44:	0002      	movs	r2, r0
 8006e46:	000b      	movs	r3, r1
 8006e48:	0010      	movs	r0, r2
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4b1e      	ldr	r3, [pc, #120]	; (8006ec8 <nmea2decimal+0xd8>)
 8006e50:	f7fa fc0c 	bl	800166c <__aeabi_dmul>
 8006e54:	0002      	movs	r2, r0
 8006e56:	000b      	movs	r3, r1
 8006e58:	613a      	str	r2, [r7, #16]
 8006e5a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <nmea2decimal+0xdc>)
 8006e60:	6938      	ldr	r0, [r7, #16]
 8006e62:	6979      	ldr	r1, [r7, #20]
 8006e64:	f7fa f808 	bl	8000e78 <__aeabi_ddiv>
 8006e68:	0002      	movs	r2, r0
 8006e6a:	000b      	movs	r3, r1
 8006e6c:	613a      	str	r2, [r7, #16]
 8006e6e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8006e70:	1cfb      	adds	r3, r7, #3
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b53      	cmp	r3, #83	; 0x53
 8006e76:	d003      	beq.n	8006e80 <nmea2decimal+0x90>
 8006e78:	1cfb      	adds	r3, r7, #3
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b57      	cmp	r3, #87	; 0x57
 8006e7e:	d10e      	bne.n	8006e9e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8006e80:	68b8      	ldr	r0, [r7, #8]
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f7f9 fc96 	bl	80007b8 <__aeabi_dadd>
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	000b      	movs	r3, r1
 8006e90:	0011      	movs	r1, r2
 8006e92:	000c      	movs	r4, r1
 8006e94:	2180      	movs	r1, #128	; 0x80
 8006e96:	0609      	lsls	r1, r1, #24
 8006e98:	4059      	eors	r1, r3
 8006e9a:	000d      	movs	r5, r1
 8006e9c:	e009      	b.n	8006eb2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	68f9      	ldr	r1, [r7, #12]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f7f9 fc87 	bl	80007b8 <__aeabi_dadd>
 8006eaa:	0002      	movs	r2, r0
 8006eac:	000b      	movs	r3, r1
 8006eae:	0014      	movs	r4, r2
 8006eb0:	001d      	movs	r5, r3
}
 8006eb2:	0022      	movs	r2, r4
 8006eb4:	002b      	movs	r3, r5
 8006eb6:	0010      	movs	r0, r2
 8006eb8:	0019      	movs	r1, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b006      	add	sp, #24
 8006ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8006ec0:	0800f410 	.word	0x0800f410
 8006ec4:	40590000 	.word	0x40590000
 8006ec8:	40240000 	.word	0x40240000
 8006ecc:	40180000 	.word	0x40180000

08006ed0 <get_my_nmea_gngll_coordinates_s>:
    //double c = ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
    //return ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
}
*/
void get_my_nmea_gngll_coordinates_s ( const char* m , char* latitude , char* longitude )
{
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b091      	sub	sp, #68	; 0x44
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	212c      	movs	r1, #44	; 0x2c
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7ff fe36 	bl	8006b54 <my_find_char_position>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	001a      	movs	r2, r3
 8006eec:	2537      	movs	r5, #55	; 0x37
 8006eee:	197b      	adds	r3, r7, r5
 8006ef0:	3201      	adds	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	212c      	movs	r1, #44	; 0x2c
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7ff fe2a 	bl	8006b54 <my_find_char_position>
 8006f00:	0003      	movs	r3, r0
 8006f02:	0019      	movs	r1, r3
 8006f04:	2436      	movs	r4, #54	; 0x36
 8006f06:	193b      	adds	r3, r7, r4
 8006f08:	197a      	adds	r2, r7, r5
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	1a8a      	subs	r2, r1, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

	char* latitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8006f10:	193b      	adds	r3, r7, r4
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 fa10 	bl	800733c <malloc>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8006f20:	197b      	adds	r3, r7, r5
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	18d1      	adds	r1, r2, r3
 8006f28:	193b      	adds	r3, r7, r4
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f001 fcb1 	bl	8008896 <strncpy>
	latitude_s[coordinate_length] = '\0';
 8006f34:	193b      	adds	r3, r7, r4
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8006f40:	197b      	adds	r3, r7, r5
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	18d2      	adds	r2, r2, r3
 8006f50:	262f      	movs	r6, #47	; 0x2f
 8006f52:	19bb      	adds	r3, r7, r6
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s , direction ) ;
 8006f58:	19bb      	adds	r3, r7, r6
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	0011      	movs	r1, r2
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7ff ff45 	bl	8006df0 <nmea2decimal>
 8006f66:	0002      	movs	r2, r0
 8006f68:	000b      	movs	r3, r1
 8006f6a:	623a      	str	r2, [r7, #32]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s ) ;
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 f9ed 	bl	8007350 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b44      	ldr	r3, [pc, #272]	; (800708c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006f7a:	6a38      	ldr	r0, [r7, #32]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f7e:	f7fa fb75 	bl	800166c <__aeabi_dmul>
 8006f82:	0002      	movs	r2, r0
 8006f84:	000b      	movs	r3, r1
 8006f86:	0010      	movs	r0, r2
 8006f88:	0019      	movs	r1, r3
 8006f8a:	f008 f9a1 	bl	800f2d0 <round>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4b3e      	ldr	r3, [pc, #248]	; (800708c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006f92:	f7f9 ff71 	bl	8000e78 <__aeabi_ddiv>
 8006f96:	0002      	movs	r2, r0
 8006f98:	000b      	movs	r3, r1
 8006f9a:	623a      	str	r2, [r7, #32]
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude , 12 , "%.6lf" , latitude_d ) ;
 8006f9e:	493c      	ldr	r1, [pc, #240]	; (8007090 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	9200      	str	r2, [sp, #0]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	000a      	movs	r2, r1
 8006fac:	210c      	movs	r1, #12
 8006fae:	f001 fb8f 	bl	80086d0 <snprintf>

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	212c      	movs	r1, #44	; 0x2c
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff fdcb 	bl	8006b54 <my_find_char_position>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	197b      	adds	r3, r7, r5
 8006fc4:	3201      	adds	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
	//coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	212c      	movs	r1, #44	; 0x2c
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7ff fdc0 	bl	8006b54 <my_find_char_position>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	193b      	adds	r3, r7, r4
 8006fda:	197a      	adds	r2, r7, r5
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	1a8a      	subs	r2, r1, r2
 8006fe0:	701a      	strb	r2, [r3, #0]

	char* longitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8006fe2:	193b      	adds	r3, r7, r4
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f000 f9a7 	bl	800733c <malloc>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8006ff2:	197b      	adds	r3, r7, r5
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	18d1      	adds	r1, r2, r3
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	0018      	movs	r0, r3
 8007002:	f001 fc48 	bl	8008896 <strncpy>
	longitude_s[coordinate_length] = '\0';
 8007006:	193b      	adds	r3, r7, r4
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	18d3      	adds	r3, r2, r3
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8007012:	197b      	adds	r3, r7, r5
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	193b      	adds	r3, r7, r4
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	18d3      	adds	r3, r2, r3
 800701c:	3301      	adds	r3, #1
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	18d2      	adds	r2, r2, r3
 8007022:	19bb      	adds	r3, r7, r6
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s , direction ) ;
 8007028:	19bb      	adds	r3, r7, r6
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	0011      	movs	r1, r2
 8007030:	0018      	movs	r0, r3
 8007032:	f7ff fedd 	bl	8006df0 <nmea2decimal>
 8007036:	0002      	movs	r2, r0
 8007038:	000b      	movs	r3, r1
 800703a:	613a      	str	r2, [r7, #16]
 800703c:	617b      	str	r3, [r7, #20]
	free ( longitude_s ) ;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 f985 	bl	8007350 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8007046:	2200      	movs	r2, #0
 8007048:	4b10      	ldr	r3, [pc, #64]	; (800708c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	6979      	ldr	r1, [r7, #20]
 800704e:	f7fa fb0d 	bl	800166c <__aeabi_dmul>
 8007052:	0002      	movs	r2, r0
 8007054:	000b      	movs	r3, r1
 8007056:	0010      	movs	r0, r2
 8007058:	0019      	movs	r1, r3
 800705a:	f008 f939 	bl	800f2d0 <round>
 800705e:	2200      	movs	r2, #0
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8007062:	f7f9 ff09 	bl	8000e78 <__aeabi_ddiv>
 8007066:	0002      	movs	r2, r0
 8007068:	000b      	movs	r3, r1
 800706a:	613a      	str	r2, [r7, #16]
 800706c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude , 12 , "%.6lf" , longitude_d ) ;
 800706e:	4908      	ldr	r1, [pc, #32]	; (8007090 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	9200      	str	r2, [sp, #0]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	000a      	movs	r2, r1
 800707c:	210c      	movs	r1, #12
 800707e:	f001 fb27 	bl	80086d0 <snprintf>
}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	46bd      	mov	sp, r7
 8007086:	b00f      	add	sp, #60	; 0x3c
 8007088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	412e8480 	.word	0x412e8480
 8007090:	0800f414 	.word	0x0800f414

08007094 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8007094:	b590      	push	{r4, r7, lr}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2209      	movs	r2, #9
 80070a2:	212c      	movs	r1, #44	; 0x2c
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7ff fd55 	bl	8006b54 <my_find_char_position>
 80070aa:	0003      	movs	r3, r0
 80070ac:	001a      	movs	r2, r3
 80070ae:	240f      	movs	r4, #15
 80070b0:	193b      	adds	r3, r7, r4
 80070b2:	3205      	adds	r2, #5
 80070b4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80070b6:	2003      	movs	r0, #3
 80070b8:	f000 f940 	bl	800733c <malloc>
 80070bc:	0003      	movs	r3, r0
 80070be:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80070c0:	193b      	adds	r3, r7, r4
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	18d1      	adds	r1, r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2202      	movs	r2, #2
 80070cc:	0018      	movs	r0, r3
 80070ce:	f001 fbe2 	bl	8008896 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3302      	adds	r3, #2
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <get_my_nmea_rmc_date_yy+0x5c>)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	0018      	movs	r0, r3
 80070e2:	f001 fb49 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*yy = (uint8_t) temp ;
	*/
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b005      	add	sp, #20
 80070ec:	bd90      	pop	{r4, r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	0800f41c 	.word	0x0800f41c

080070f4 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2209      	movs	r2, #9
 8007102:	212c      	movs	r1, #44	; 0x2c
 8007104:	0018      	movs	r0, r3
 8007106:	f7ff fd25 	bl	8006b54 <my_find_char_position>
 800710a:	0003      	movs	r3, r0
 800710c:	001a      	movs	r2, r3
 800710e:	240f      	movs	r4, #15
 8007110:	193b      	adds	r3, r7, r4
 8007112:	3203      	adds	r2, #3
 8007114:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007116:	2003      	movs	r0, #3
 8007118:	f000 f910 	bl	800733c <malloc>
 800711c:	0003      	movs	r3, r0
 800711e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007120:	193b      	adds	r3, r7, r4
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	18d1      	adds	r1, r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2202      	movs	r2, #2
 800712c:	0018      	movs	r0, r3
 800712e:	f001 fbb2 	bl	8008896 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3302      	adds	r3, #2
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	4904      	ldr	r1, [pc, #16]	; (8007150 <get_my_nmea_rmc_date_mm+0x5c>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	0018      	movs	r0, r3
 8007142:	f001 fb19 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*mm = (uint8_t) temp ;
	*/
}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	b005      	add	sp, #20
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	0800f41c 	.word	0x0800f41c

08007154 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2209      	movs	r2, #9
 8007162:	212c      	movs	r1, #44	; 0x2c
 8007164:	0018      	movs	r0, r3
 8007166:	f7ff fcf5 	bl	8006b54 <my_find_char_position>
 800716a:	0003      	movs	r3, r0
 800716c:	001a      	movs	r2, r3
 800716e:	240f      	movs	r4, #15
 8007170:	193b      	adds	r3, r7, r4
 8007172:	3201      	adds	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007176:	2003      	movs	r0, #3
 8007178:	f000 f8e0 	bl	800733c <malloc>
 800717c:	0003      	movs	r3, r0
 800717e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007180:	193b      	adds	r3, r7, r4
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	18d1      	adds	r1, r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2202      	movs	r2, #2
 800718c:	0018      	movs	r0, r3
 800718e:	f001 fb82 	bl	8008896 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3302      	adds	r3, #2
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4904      	ldr	r1, [pc, #16]	; (80071b0 <get_my_nmea_rmc_date_dd+0x5c>)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0018      	movs	r0, r3
 80071a2:	f001 fae9 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*dd = (uint8_t) temp ;
	*/
}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b005      	add	sp, #20
 80071ac:	bd90      	pop	{r4, r7, pc}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	0800f41c 	.word	0x0800f41c

080071b4 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	212c      	movs	r1, #44	; 0x2c
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7ff fcc5 	bl	8006b54 <my_find_char_position>
 80071ca:	0003      	movs	r3, r0
 80071cc:	001a      	movs	r2, r3
 80071ce:	240f      	movs	r4, #15
 80071d0:	193b      	adds	r3, r7, r4
 80071d2:	3201      	adds	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80071d6:	2003      	movs	r0, #3
 80071d8:	f000 f8b0 	bl	800733c <malloc>
 80071dc:	0003      	movs	r3, r0
 80071de:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80071e0:	193b      	adds	r3, r7, r4
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	18d1      	adds	r1, r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2202      	movs	r2, #2
 80071ec:	0018      	movs	r0, r3
 80071ee:	f001 fb52 	bl	8008896 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3302      	adds	r3, #2
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4904      	ldr	r1, [pc, #16]	; (8007210 <get_my_nmea_rmc_utc_hh+0x5c>)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	0018      	movs	r0, r3
 8007202:	f001 fab9 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*hh = (uint8_t) temp ;
	*/
}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b005      	add	sp, #20
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	0800f41c 	.word	0x0800f41c

08007214 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	212c      	movs	r1, #44	; 0x2c
 8007224:	0018      	movs	r0, r3
 8007226:	f7ff fc95 	bl	8006b54 <my_find_char_position>
 800722a:	0003      	movs	r3, r0
 800722c:	001a      	movs	r2, r3
 800722e:	240f      	movs	r4, #15
 8007230:	193b      	adds	r3, r7, r4
 8007232:	3203      	adds	r2, #3
 8007234:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007236:	2003      	movs	r0, #3
 8007238:	f000 f880 	bl	800733c <malloc>
 800723c:	0003      	movs	r3, r0
 800723e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007240:	193b      	adds	r3, r7, r4
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	18d1      	adds	r1, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2202      	movs	r2, #2
 800724c:	0018      	movs	r0, r3
 800724e:	f001 fb22 	bl	8008896 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3302      	adds	r3, #2
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4904      	ldr	r1, [pc, #16]	; (8007270 <get_my_nmea_rmc_utc_mm+0x5c>)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	0018      	movs	r0, r3
 8007262:	f001 fa89 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*mm = (uint8_t) temp ;
	*/
}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	46bd      	mov	sp, r7
 800726a:	b005      	add	sp, #20
 800726c:	bd90      	pop	{r4, r7, pc}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	0800f41c 	.word	0x0800f41c

08007274 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	//uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	212c      	movs	r1, #44	; 0x2c
 8007284:	0018      	movs	r0, r3
 8007286:	f7ff fc65 	bl	8006b54 <my_find_char_position>
 800728a:	0003      	movs	r3, r0
 800728c:	001a      	movs	r2, r3
 800728e:	240f      	movs	r4, #15
 8007290:	193b      	adds	r3, r7, r4
 8007292:	3205      	adds	r2, #5
 8007294:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007296:	2003      	movs	r0, #3
 8007298:	f000 f850 	bl	800733c <malloc>
 800729c:	0003      	movs	r3, r0
 800729e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80072a0:	193b      	adds	r3, r7, r4
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	18d1      	adds	r1, r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2202      	movs	r2, #2
 80072ac:	0018      	movs	r0, r3
 80072ae:	f001 faf2 	bl	8008896 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	3302      	adds	r3, #2
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4904      	ldr	r1, [pc, #16]	; (80072d0 <get_my_nmea_rmc_utc_ss+0x5c>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0018      	movs	r0, r3
 80072c2:	f001 fa59 	bl	8008778 <sscanf>
	/* Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
	free ( s ) ;
	*ss = (uint8_t) temp ;
	*/
}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b005      	add	sp, #20
 80072cc:	bd90      	pop	{r4, r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	0800f41c 	.word	0x0800f41c

080072d4 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 80072d4:	b590      	push	{r4, r7, lr}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	212c      	movs	r1, #44	; 0x2c
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7ff fc35 	bl	8006b54 <my_find_char_position>
 80072ea:	0003      	movs	r3, r0
 80072ec:	001a      	movs	r2, r3
 80072ee:	240f      	movs	r4, #15
 80072f0:	193b      	adds	r3, r7, r4
 80072f2:	3208      	adds	r2, #8
 80072f4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80072f6:	2004      	movs	r0, #4
 80072f8:	f000 f820 	bl	800733c <malloc>
 80072fc:	0003      	movs	r3, r0
 80072fe:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007300:	193b      	adds	r3, r7, r4
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	18d1      	adds	r1, r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2203      	movs	r2, #3
 800730c:	0018      	movs	r0, r3
 800730e:	f001 fac2 	bl	8008896 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3303      	adds	r3, #3
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4906      	ldr	r1, [pc, #24]	; (8007338 <get_my_nmea_rmc_utc_sss+0x64>)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	0018      	movs	r0, r3
 8007322:	f001 fa29 	bl	8008778 <sscanf>
	free ( s ) ;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f811 	bl	8007350 <free>
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b005      	add	sp, #20
 8007334:	bd90      	pop	{r4, r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	0800f420 	.word	0x0800f420

0800733c <malloc>:
 800733c:	b510      	push	{r4, lr}
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <malloc+0x10>)
 8007340:	0001      	movs	r1, r0
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	f000 f80e 	bl	8007364 <_malloc_r>
 8007348:	bd10      	pop	{r4, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	200006e0 	.word	0x200006e0

08007350 <free>:
 8007350:	b510      	push	{r4, lr}
 8007352:	4b03      	ldr	r3, [pc, #12]	; (8007360 <free+0x10>)
 8007354:	0001      	movs	r1, r0
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	f001 fbe4 	bl	8008b24 <_free_r>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	200006e0 	.word	0x200006e0

08007364 <_malloc_r>:
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	000d      	movs	r5, r1
 8007368:	b087      	sub	sp, #28
 800736a:	350b      	adds	r5, #11
 800736c:	9001      	str	r0, [sp, #4]
 800736e:	2d16      	cmp	r5, #22
 8007370:	d908      	bls.n	8007384 <_malloc_r+0x20>
 8007372:	2207      	movs	r2, #7
 8007374:	4395      	bics	r5, r2
 8007376:	d506      	bpl.n	8007386 <_malloc_r+0x22>
 8007378:	230c      	movs	r3, #12
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	2000      	movs	r0, #0
 8007380:	b007      	add	sp, #28
 8007382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007384:	2510      	movs	r5, #16
 8007386:	42a9      	cmp	r1, r5
 8007388:	d8f6      	bhi.n	8007378 <_malloc_r+0x14>
 800738a:	9801      	ldr	r0, [sp, #4]
 800738c:	f000 f9fe 	bl	800778c <__malloc_lock>
 8007390:	23fc      	movs	r3, #252	; 0xfc
 8007392:	4ebe      	ldr	r6, [pc, #760]	; (800768c <_malloc_r+0x328>)
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	429d      	cmp	r5, r3
 8007398:	d219      	bcs.n	80073ce <_malloc_r+0x6a>
 800739a:	002a      	movs	r2, r5
 800739c:	3208      	adds	r2, #8
 800739e:	18b2      	adds	r2, r6, r2
 80073a0:	0011      	movs	r1, r2
 80073a2:	6854      	ldr	r4, [r2, #4]
 80073a4:	3908      	subs	r1, #8
 80073a6:	08eb      	lsrs	r3, r5, #3
 80073a8:	428c      	cmp	r4, r1
 80073aa:	d103      	bne.n	80073b4 <_malloc_r+0x50>
 80073ac:	68d4      	ldr	r4, [r2, #12]
 80073ae:	3302      	adds	r3, #2
 80073b0:	42a2      	cmp	r2, r4
 80073b2:	d022      	beq.n	80073fa <_malloc_r+0x96>
 80073b4:	2203      	movs	r2, #3
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	68a1      	ldr	r1, [r4, #8]
 80073ba:	4393      	bics	r3, r2
 80073bc:	68e2      	ldr	r2, [r4, #12]
 80073be:	18e3      	adds	r3, r4, r3
 80073c0:	60ca      	str	r2, [r1, #12]
 80073c2:	6091      	str	r1, [r2, #8]
 80073c4:	2201      	movs	r2, #1
 80073c6:	6859      	ldr	r1, [r3, #4]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	e02a      	b.n	8007424 <_malloc_r+0xc0>
 80073ce:	233f      	movs	r3, #63	; 0x3f
 80073d0:	0a6a      	lsrs	r2, r5, #9
 80073d2:	d003      	beq.n	80073dc <_malloc_r+0x78>
 80073d4:	2a04      	cmp	r2, #4
 80073d6:	d82b      	bhi.n	8007430 <_malloc_r+0xcc>
 80073d8:	09ab      	lsrs	r3, r5, #6
 80073da:	3338      	adds	r3, #56	; 0x38
 80073dc:	2203      	movs	r2, #3
 80073de:	4694      	mov	ip, r2
 80073e0:	00d9      	lsls	r1, r3, #3
 80073e2:	1989      	adds	r1, r1, r6
 80073e4:	68cc      	ldr	r4, [r1, #12]
 80073e6:	428c      	cmp	r4, r1
 80073e8:	d006      	beq.n	80073f8 <_malloc_r+0x94>
 80073ea:	4660      	mov	r0, ip
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	4382      	bics	r2, r0
 80073f0:	1b57      	subs	r7, r2, r5
 80073f2:	2f0f      	cmp	r7, #15
 80073f4:	dd34      	ble.n	8007460 <_malloc_r+0xfc>
 80073f6:	3b01      	subs	r3, #1
 80073f8:	3301      	adds	r3, #1
 80073fa:	6934      	ldr	r4, [r6, #16]
 80073fc:	49a4      	ldr	r1, [pc, #656]	; (8007690 <_malloc_r+0x32c>)
 80073fe:	428c      	cmp	r4, r1
 8007400:	d055      	beq.n	80074ae <_malloc_r+0x14a>
 8007402:	2003      	movs	r0, #3
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	4382      	bics	r2, r0
 8007408:	1b50      	subs	r0, r2, r5
 800740a:	280f      	cmp	r0, #15
 800740c:	dd36      	ble.n	800747c <_malloc_r+0x118>
 800740e:	2301      	movs	r3, #1
 8007410:	1967      	adds	r7, r4, r5
 8007412:	431d      	orrs	r5, r3
 8007414:	4303      	orrs	r3, r0
 8007416:	6065      	str	r5, [r4, #4]
 8007418:	6177      	str	r7, [r6, #20]
 800741a:	6137      	str	r7, [r6, #16]
 800741c:	60f9      	str	r1, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	50a0      	str	r0, [r4, r2]
 8007424:	9801      	ldr	r0, [sp, #4]
 8007426:	f000 f9b9 	bl	800779c <__malloc_unlock>
 800742a:	0020      	movs	r0, r4
 800742c:	3008      	adds	r0, #8
 800742e:	e7a7      	b.n	8007380 <_malloc_r+0x1c>
 8007430:	2a14      	cmp	r2, #20
 8007432:	d802      	bhi.n	800743a <_malloc_r+0xd6>
 8007434:	0013      	movs	r3, r2
 8007436:	335b      	adds	r3, #91	; 0x5b
 8007438:	e7d0      	b.n	80073dc <_malloc_r+0x78>
 800743a:	2a54      	cmp	r2, #84	; 0x54
 800743c:	d802      	bhi.n	8007444 <_malloc_r+0xe0>
 800743e:	0b2b      	lsrs	r3, r5, #12
 8007440:	336e      	adds	r3, #110	; 0x6e
 8007442:	e7cb      	b.n	80073dc <_malloc_r+0x78>
 8007444:	23aa      	movs	r3, #170	; 0xaa
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	429a      	cmp	r2, r3
 800744a:	d802      	bhi.n	8007452 <_malloc_r+0xee>
 800744c:	0beb      	lsrs	r3, r5, #15
 800744e:	3377      	adds	r3, #119	; 0x77
 8007450:	e7c4      	b.n	80073dc <_malloc_r+0x78>
 8007452:	4990      	ldr	r1, [pc, #576]	; (8007694 <_malloc_r+0x330>)
 8007454:	237e      	movs	r3, #126	; 0x7e
 8007456:	428a      	cmp	r2, r1
 8007458:	d8c0      	bhi.n	80073dc <_malloc_r+0x78>
 800745a:	0cab      	lsrs	r3, r5, #18
 800745c:	337c      	adds	r3, #124	; 0x7c
 800745e:	e7bd      	b.n	80073dc <_malloc_r+0x78>
 8007460:	68e0      	ldr	r0, [r4, #12]
 8007462:	2f00      	cmp	r7, #0
 8007464:	db08      	blt.n	8007478 <_malloc_r+0x114>
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	60d8      	str	r0, [r3, #12]
 800746a:	6083      	str	r3, [r0, #8]
 800746c:	2301      	movs	r3, #1
 800746e:	18a2      	adds	r2, r4, r2
 8007470:	6851      	ldr	r1, [r2, #4]
 8007472:	430b      	orrs	r3, r1
 8007474:	6053      	str	r3, [r2, #4]
 8007476:	e7d5      	b.n	8007424 <_malloc_r+0xc0>
 8007478:	0004      	movs	r4, r0
 800747a:	e7b4      	b.n	80073e6 <_malloc_r+0x82>
 800747c:	6171      	str	r1, [r6, #20]
 800747e:	6131      	str	r1, [r6, #16]
 8007480:	2800      	cmp	r0, #0
 8007482:	daf3      	bge.n	800746c <_malloc_r+0x108>
 8007484:	6871      	ldr	r1, [r6, #4]
 8007486:	468c      	mov	ip, r1
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	0089      	lsls	r1, r1, #2
 800748c:	428a      	cmp	r2, r1
 800748e:	d300      	bcc.n	8007492 <_malloc_r+0x12e>
 8007490:	e08c      	b.n	80075ac <_malloc_r+0x248>
 8007492:	08d1      	lsrs	r1, r2, #3
 8007494:	0950      	lsrs	r0, r2, #5
 8007496:	2201      	movs	r2, #1
 8007498:	4082      	lsls	r2, r0
 800749a:	4660      	mov	r0, ip
 800749c:	4302      	orrs	r2, r0
 800749e:	6072      	str	r2, [r6, #4]
 80074a0:	00ca      	lsls	r2, r1, #3
 80074a2:	1992      	adds	r2, r2, r6
 80074a4:	6891      	ldr	r1, [r2, #8]
 80074a6:	60e2      	str	r2, [r4, #12]
 80074a8:	60a1      	str	r1, [r4, #8]
 80074aa:	6094      	str	r4, [r2, #8]
 80074ac:	60cc      	str	r4, [r1, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	4876      	ldr	r0, [pc, #472]	; (800768c <_malloc_r+0x328>)
 80074b2:	1099      	asrs	r1, r3, #2
 80074b4:	408a      	lsls	r2, r1
 80074b6:	6841      	ldr	r1, [r0, #4]
 80074b8:	4291      	cmp	r1, r2
 80074ba:	d328      	bcc.n	800750e <_malloc_r+0x1aa>
 80074bc:	420a      	tst	r2, r1
 80074be:	d105      	bne.n	80074cc <_malloc_r+0x168>
 80074c0:	2403      	movs	r4, #3
 80074c2:	43a3      	bics	r3, r4
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	3304      	adds	r3, #4
 80074c8:	420a      	tst	r2, r1
 80074ca:	d0fb      	beq.n	80074c4 <_malloc_r+0x160>
 80074cc:	496f      	ldr	r1, [pc, #444]	; (800768c <_malloc_r+0x328>)
 80074ce:	9104      	str	r1, [sp, #16]
 80074d0:	00d9      	lsls	r1, r3, #3
 80074d2:	1841      	adds	r1, r0, r1
 80074d4:	468c      	mov	ip, r1
 80074d6:	000f      	movs	r7, r1
 80074d8:	9302      	str	r3, [sp, #8]
 80074da:	68fc      	ldr	r4, [r7, #12]
 80074dc:	42bc      	cmp	r4, r7
 80074de:	d000      	beq.n	80074e2 <_malloc_r+0x17e>
 80074e0:	e09b      	b.n	800761a <_malloc_r+0x2b6>
 80074e2:	2403      	movs	r4, #3
 80074e4:	9902      	ldr	r1, [sp, #8]
 80074e6:	3708      	adds	r7, #8
 80074e8:	3101      	adds	r1, #1
 80074ea:	9102      	str	r1, [sp, #8]
 80074ec:	4221      	tst	r1, r4
 80074ee:	d1f4      	bne.n	80074da <_malloc_r+0x176>
 80074f0:	2103      	movs	r1, #3
 80074f2:	420b      	tst	r3, r1
 80074f4:	d000      	beq.n	80074f8 <_malloc_r+0x194>
 80074f6:	e0b7      	b.n	8007668 <_malloc_r+0x304>
 80074f8:	6843      	ldr	r3, [r0, #4]
 80074fa:	4393      	bics	r3, r2
 80074fc:	6043      	str	r3, [r0, #4]
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	0052      	lsls	r2, r2, #1
 8007502:	6859      	ldr	r1, [r3, #4]
 8007504:	4291      	cmp	r1, r2
 8007506:	d302      	bcc.n	800750e <_malloc_r+0x1aa>
 8007508:	2a00      	cmp	r2, #0
 800750a:	d000      	beq.n	800750e <_malloc_r+0x1aa>
 800750c:	e0bb      	b.n	8007686 <_malloc_r+0x322>
 800750e:	2203      	movs	r2, #3
 8007510:	6883      	ldr	r3, [r0, #8]
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4393      	bics	r3, r2
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	42ab      	cmp	r3, r5
 800751c:	d303      	bcc.n	8007526 <_malloc_r+0x1c2>
 800751e:	1b59      	subs	r1, r3, r5
 8007520:	290f      	cmp	r1, #15
 8007522:	dd00      	ble.n	8007526 <_malloc_r+0x1c2>
 8007524:	e123      	b.n	800776e <_malloc_r+0x40a>
 8007526:	9b02      	ldr	r3, [sp, #8]
 8007528:	9a03      	ldr	r2, [sp, #12]
 800752a:	2008      	movs	r0, #8
 800752c:	189e      	adds	r6, r3, r2
 800752e:	4b5a      	ldr	r3, [pc, #360]	; (8007698 <_malloc_r+0x334>)
 8007530:	681f      	ldr	r7, [r3, #0]
 8007532:	f001 fa71 	bl	8008a18 <sysconf>
 8007536:	4b59      	ldr	r3, [pc, #356]	; (800769c <_malloc_r+0x338>)
 8007538:	3710      	adds	r7, #16
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	197f      	adds	r7, r7, r5
 800753e:	9004      	str	r0, [sp, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	d003      	beq.n	800754c <_malloc_r+0x1e8>
 8007544:	1e7b      	subs	r3, r7, #1
 8007546:	181b      	adds	r3, r3, r0
 8007548:	4247      	negs	r7, r0
 800754a:	401f      	ands	r7, r3
 800754c:	0039      	movs	r1, r7
 800754e:	9801      	ldr	r0, [sp, #4]
 8007550:	f001 fa0e 	bl	8008970 <_sbrk_r>
 8007554:	0004      	movs	r4, r0
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d100      	bne.n	800755c <_malloc_r+0x1f8>
 800755a:	e0de      	b.n	800771a <_malloc_r+0x3b6>
 800755c:	4286      	cmp	r6, r0
 800755e:	d904      	bls.n	800756a <_malloc_r+0x206>
 8007560:	4b4a      	ldr	r3, [pc, #296]	; (800768c <_malloc_r+0x328>)
 8007562:	9a02      	ldr	r2, [sp, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	d000      	beq.n	800756a <_malloc_r+0x206>
 8007568:	e0d7      	b.n	800771a <_malloc_r+0x3b6>
 800756a:	4a4d      	ldr	r2, [pc, #308]	; (80076a0 <_malloc_r+0x33c>)
 800756c:	6813      	ldr	r3, [r2, #0]
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	3a01      	subs	r2, #1
 8007576:	42a6      	cmp	r6, r4
 8007578:	d000      	beq.n	800757c <_malloc_r+0x218>
 800757a:	e097      	b.n	80076ac <_malloc_r+0x348>
 800757c:	4216      	tst	r6, r2
 800757e:	d000      	beq.n	8007582 <_malloc_r+0x21e>
 8007580:	e094      	b.n	80076ac <_malloc_r+0x348>
 8007582:	4b42      	ldr	r3, [pc, #264]	; (800768c <_malloc_r+0x328>)
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	19df      	adds	r7, r3, r7
 800758a:	2301      	movs	r3, #1
 800758c:	433b      	orrs	r3, r7
 800758e:	6053      	str	r3, [r2, #4]
 8007590:	4b43      	ldr	r3, [pc, #268]	; (80076a0 <_malloc_r+0x33c>)
 8007592:	4a44      	ldr	r2, [pc, #272]	; (80076a4 <_malloc_r+0x340>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6811      	ldr	r1, [r2, #0]
 8007598:	428b      	cmp	r3, r1
 800759a:	d900      	bls.n	800759e <_malloc_r+0x23a>
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4a42      	ldr	r2, [pc, #264]	; (80076a8 <_malloc_r+0x344>)
 80075a0:	6811      	ldr	r1, [r2, #0]
 80075a2:	428b      	cmp	r3, r1
 80075a4:	d800      	bhi.n	80075a8 <_malloc_r+0x244>
 80075a6:	e0b8      	b.n	800771a <_malloc_r+0x3b6>
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e0b6      	b.n	800771a <_malloc_r+0x3b6>
 80075ac:	0a50      	lsrs	r0, r2, #9
 80075ae:	2804      	cmp	r0, #4
 80075b0:	d811      	bhi.n	80075d6 <_malloc_r+0x272>
 80075b2:	0991      	lsrs	r1, r2, #6
 80075b4:	3138      	adds	r1, #56	; 0x38
 80075b6:	00cf      	lsls	r7, r1, #3
 80075b8:	19bf      	adds	r7, r7, r6
 80075ba:	68b8      	ldr	r0, [r7, #8]
 80075bc:	4287      	cmp	r7, r0
 80075be:	d125      	bne.n	800760c <_malloc_r+0x2a8>
 80075c0:	2201      	movs	r2, #1
 80075c2:	1089      	asrs	r1, r1, #2
 80075c4:	408a      	lsls	r2, r1
 80075c6:	4661      	mov	r1, ip
 80075c8:	430a      	orrs	r2, r1
 80075ca:	6072      	str	r2, [r6, #4]
 80075cc:	60e7      	str	r7, [r4, #12]
 80075ce:	60a0      	str	r0, [r4, #8]
 80075d0:	60bc      	str	r4, [r7, #8]
 80075d2:	60c4      	str	r4, [r0, #12]
 80075d4:	e76b      	b.n	80074ae <_malloc_r+0x14a>
 80075d6:	2814      	cmp	r0, #20
 80075d8:	d802      	bhi.n	80075e0 <_malloc_r+0x27c>
 80075da:	0001      	movs	r1, r0
 80075dc:	315b      	adds	r1, #91	; 0x5b
 80075de:	e7ea      	b.n	80075b6 <_malloc_r+0x252>
 80075e0:	2854      	cmp	r0, #84	; 0x54
 80075e2:	d802      	bhi.n	80075ea <_malloc_r+0x286>
 80075e4:	0b11      	lsrs	r1, r2, #12
 80075e6:	316e      	adds	r1, #110	; 0x6e
 80075e8:	e7e5      	b.n	80075b6 <_malloc_r+0x252>
 80075ea:	21aa      	movs	r1, #170	; 0xaa
 80075ec:	0049      	lsls	r1, r1, #1
 80075ee:	4288      	cmp	r0, r1
 80075f0:	d802      	bhi.n	80075f8 <_malloc_r+0x294>
 80075f2:	0bd1      	lsrs	r1, r2, #15
 80075f4:	3177      	adds	r1, #119	; 0x77
 80075f6:	e7de      	b.n	80075b6 <_malloc_r+0x252>
 80075f8:	4f26      	ldr	r7, [pc, #152]	; (8007694 <_malloc_r+0x330>)
 80075fa:	217e      	movs	r1, #126	; 0x7e
 80075fc:	42b8      	cmp	r0, r7
 80075fe:	d8da      	bhi.n	80075b6 <_malloc_r+0x252>
 8007600:	0c91      	lsrs	r1, r2, #18
 8007602:	317c      	adds	r1, #124	; 0x7c
 8007604:	e7d7      	b.n	80075b6 <_malloc_r+0x252>
 8007606:	6880      	ldr	r0, [r0, #8]
 8007608:	4287      	cmp	r7, r0
 800760a:	d004      	beq.n	8007616 <_malloc_r+0x2b2>
 800760c:	2603      	movs	r6, #3
 800760e:	6841      	ldr	r1, [r0, #4]
 8007610:	43b1      	bics	r1, r6
 8007612:	4291      	cmp	r1, r2
 8007614:	d8f7      	bhi.n	8007606 <_malloc_r+0x2a2>
 8007616:	68c7      	ldr	r7, [r0, #12]
 8007618:	e7d8      	b.n	80075cc <_malloc_r+0x268>
 800761a:	2603      	movs	r6, #3
 800761c:	6861      	ldr	r1, [r4, #4]
 800761e:	43b1      	bics	r1, r6
 8007620:	9103      	str	r1, [sp, #12]
 8007622:	68e6      	ldr	r6, [r4, #12]
 8007624:	1b49      	subs	r1, r1, r5
 8007626:	290f      	cmp	r1, #15
 8007628:	dd10      	ble.n	800764c <_malloc_r+0x2e8>
 800762a:	2201      	movs	r2, #1
 800762c:	1963      	adds	r3, r4, r5
 800762e:	4315      	orrs	r5, r2
 8007630:	6065      	str	r5, [r4, #4]
 8007632:	68a5      	ldr	r5, [r4, #8]
 8007634:	430a      	orrs	r2, r1
 8007636:	60ee      	str	r6, [r5, #12]
 8007638:	60b5      	str	r5, [r6, #8]
 800763a:	6143      	str	r3, [r0, #20]
 800763c:	6103      	str	r3, [r0, #16]
 800763e:	4814      	ldr	r0, [pc, #80]	; (8007690 <_malloc_r+0x32c>)
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	60d8      	str	r0, [r3, #12]
 8007644:	6098      	str	r0, [r3, #8]
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	50e1      	str	r1, [r4, r3]
 800764a:	e6eb      	b.n	8007424 <_malloc_r+0xc0>
 800764c:	2900      	cmp	r1, #0
 800764e:	db09      	blt.n	8007664 <_malloc_r+0x300>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	18e1      	adds	r1, r4, r3
 8007654:	2301      	movs	r3, #1
 8007656:	684a      	ldr	r2, [r1, #4]
 8007658:	4313      	orrs	r3, r2
 800765a:	604b      	str	r3, [r1, #4]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	60de      	str	r6, [r3, #12]
 8007660:	60b3      	str	r3, [r6, #8]
 8007662:	e6df      	b.n	8007424 <_malloc_r+0xc0>
 8007664:	0034      	movs	r4, r6
 8007666:	e739      	b.n	80074dc <_malloc_r+0x178>
 8007668:	2108      	movs	r1, #8
 800766a:	4249      	negs	r1, r1
 800766c:	448c      	add	ip, r1
 800766e:	4661      	mov	r1, ip
 8007670:	6889      	ldr	r1, [r1, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	4561      	cmp	r1, ip
 8007676:	d100      	bne.n	800767a <_malloc_r+0x316>
 8007678:	e73a      	b.n	80074f0 <_malloc_r+0x18c>
 800767a:	e740      	b.n	80074fe <_malloc_r+0x19a>
 800767c:	3304      	adds	r3, #4
 800767e:	0052      	lsls	r2, r2, #1
 8007680:	420a      	tst	r2, r1
 8007682:	d0fb      	beq.n	800767c <_malloc_r+0x318>
 8007684:	e724      	b.n	80074d0 <_malloc_r+0x16c>
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	e7fa      	b.n	8007680 <_malloc_r+0x31c>
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	20000034 	.word	0x20000034
 8007690:	2000003c 	.word	0x2000003c
 8007694:	00000554 	.word	0x00000554
 8007698:	20000c84 	.word	0x20000c84
 800769c:	2000043c 	.word	0x2000043c
 80076a0:	20000c54 	.word	0x20000c54
 80076a4:	20000c7c 	.word	0x20000c7c
 80076a8:	20000c80 	.word	0x20000c80
 80076ac:	4934      	ldr	r1, [pc, #208]	; (8007780 <_malloc_r+0x41c>)
 80076ae:	6808      	ldr	r0, [r1, #0]
 80076b0:	3001      	adds	r0, #1
 80076b2:	d140      	bne.n	8007736 <_malloc_r+0x3d2>
 80076b4:	600c      	str	r4, [r1, #0]
 80076b6:	2107      	movs	r1, #7
 80076b8:	0026      	movs	r6, r4
 80076ba:	2300      	movs	r3, #0
 80076bc:	400e      	ands	r6, r1
 80076be:	420c      	tst	r4, r1
 80076c0:	d002      	beq.n	80076c8 <_malloc_r+0x364>
 80076c2:	3308      	adds	r3, #8
 80076c4:	1b9b      	subs	r3, r3, r6
 80076c6:	18e4      	adds	r4, r4, r3
 80076c8:	19e1      	adds	r1, r4, r7
 80076ca:	9105      	str	r1, [sp, #20]
 80076cc:	9f05      	ldr	r7, [sp, #20]
 80076ce:	9904      	ldr	r1, [sp, #16]
 80076d0:	4017      	ands	r7, r2
 80076d2:	18cb      	adds	r3, r1, r3
 80076d4:	1bdf      	subs	r7, r3, r7
 80076d6:	4017      	ands	r7, r2
 80076d8:	0039      	movs	r1, r7
 80076da:	9801      	ldr	r0, [sp, #4]
 80076dc:	f001 f948 	bl	8008970 <_sbrk_r>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d107      	bne.n	80076f4 <_malloc_r+0x390>
 80076e4:	1e37      	subs	r7, r6, #0
 80076e6:	9805      	ldr	r0, [sp, #20]
 80076e8:	d004      	beq.n	80076f4 <_malloc_r+0x390>
 80076ea:	0030      	movs	r0, r6
 80076ec:	2700      	movs	r7, #0
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	3808      	subs	r0, #8
 80076f2:	1818      	adds	r0, r3, r0
 80076f4:	4a23      	ldr	r2, [pc, #140]	; (8007784 <_malloc_r+0x420>)
 80076f6:	1b00      	subs	r0, r0, r4
 80076f8:	6813      	ldr	r3, [r2, #0]
 80076fa:	19c0      	adds	r0, r0, r7
 80076fc:	19db      	adds	r3, r3, r7
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <_malloc_r+0x424>)
 8007704:	9902      	ldr	r1, [sp, #8]
 8007706:	4310      	orrs	r0, r2
 8007708:	609c      	str	r4, [r3, #8]
 800770a:	6060      	str	r0, [r4, #4]
 800770c:	4299      	cmp	r1, r3
 800770e:	d100      	bne.n	8007712 <_malloc_r+0x3ae>
 8007710:	e73e      	b.n	8007590 <_malloc_r+0x22c>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	d813      	bhi.n	8007740 <_malloc_r+0x3dc>
 8007718:	6062      	str	r2, [r4, #4]
 800771a:	2203      	movs	r2, #3
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <_malloc_r+0x424>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	4393      	bics	r3, r2
 8007724:	1b59      	subs	r1, r3, r5
 8007726:	42ab      	cmp	r3, r5
 8007728:	d301      	bcc.n	800772e <_malloc_r+0x3ca>
 800772a:	290f      	cmp	r1, #15
 800772c:	dc1f      	bgt.n	800776e <_malloc_r+0x40a>
 800772e:	9801      	ldr	r0, [sp, #4]
 8007730:	f000 f834 	bl	800779c <__malloc_unlock>
 8007734:	e623      	b.n	800737e <_malloc_r+0x1a>
 8007736:	4913      	ldr	r1, [pc, #76]	; (8007784 <_malloc_r+0x420>)
 8007738:	1ba6      	subs	r6, r4, r6
 800773a:	18f6      	adds	r6, r6, r3
 800773c:	600e      	str	r6, [r1, #0]
 800773e:	e7ba      	b.n	80076b6 <_malloc_r+0x352>
 8007740:	2107      	movs	r1, #7
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	3b0c      	subs	r3, #12
 8007746:	438b      	bics	r3, r1
 8007748:	9902      	ldr	r1, [sp, #8]
 800774a:	6849      	ldr	r1, [r1, #4]
 800774c:	400a      	ands	r2, r1
 800774e:	9902      	ldr	r1, [sp, #8]
 8007750:	431a      	orrs	r2, r3
 8007752:	604a      	str	r2, [r1, #4]
 8007754:	18ca      	adds	r2, r1, r3
 8007756:	2105      	movs	r1, #5
 8007758:	6051      	str	r1, [r2, #4]
 800775a:	6091      	str	r1, [r2, #8]
 800775c:	2b0f      	cmp	r3, #15
 800775e:	d800      	bhi.n	8007762 <_malloc_r+0x3fe>
 8007760:	e716      	b.n	8007590 <_malloc_r+0x22c>
 8007762:	9902      	ldr	r1, [sp, #8]
 8007764:	9801      	ldr	r0, [sp, #4]
 8007766:	3108      	adds	r1, #8
 8007768:	f001 f9dc 	bl	8008b24 <_free_r>
 800776c:	e710      	b.n	8007590 <_malloc_r+0x22c>
 800776e:	2201      	movs	r2, #1
 8007770:	0013      	movs	r3, r2
 8007772:	4805      	ldr	r0, [pc, #20]	; (8007788 <_malloc_r+0x424>)
 8007774:	432b      	orrs	r3, r5
 8007776:	6884      	ldr	r4, [r0, #8]
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	1963      	adds	r3, r4, r5
 800777c:	6083      	str	r3, [r0, #8]
 800777e:	e623      	b.n	80073c8 <_malloc_r+0x64>
 8007780:	2000043c 	.word	0x2000043c
 8007784:	20000c54 	.word	0x20000c54
 8007788:	20000034 	.word	0x20000034

0800778c <__malloc_lock>:
 800778c:	b510      	push	{r4, lr}
 800778e:	4802      	ldr	r0, [pc, #8]	; (8007798 <__malloc_lock+0xc>)
 8007790:	f001 f940 	bl	8008a14 <__retarget_lock_acquire_recursive>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	20000dc9 	.word	0x20000dc9

0800779c <__malloc_unlock>:
 800779c:	b510      	push	{r4, lr}
 800779e:	4802      	ldr	r0, [pc, #8]	; (80077a8 <__malloc_unlock+0xc>)
 80077a0:	f001 f939 	bl	8008a16 <__retarget_lock_release_recursive>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	20000dc9 	.word	0x20000dc9

080077ac <sulp>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	0016      	movs	r6, r2
 80077b0:	000d      	movs	r5, r1
 80077b2:	f002 f90d 	bl	80099d0 <__ulp>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	d00d      	beq.n	80077d6 <sulp+0x2a>
 80077ba:	236b      	movs	r3, #107	; 0x6b
 80077bc:	006a      	lsls	r2, r5, #1
 80077be:	0d52      	lsrs	r2, r2, #21
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd07      	ble.n	80077d6 <sulp+0x2a>
 80077c6:	2400      	movs	r4, #0
 80077c8:	4a03      	ldr	r2, [pc, #12]	; (80077d8 <sulp+0x2c>)
 80077ca:	051b      	lsls	r3, r3, #20
 80077cc:	189d      	adds	r5, r3, r2
 80077ce:	002b      	movs	r3, r5
 80077d0:	0022      	movs	r2, r4
 80077d2:	f7f9 ff4b 	bl	800166c <__aeabi_dmul>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	3ff00000 	.word	0x3ff00000

080077dc <_strtod_l>:
 80077dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077de:	b0a1      	sub	sp, #132	; 0x84
 80077e0:	9219      	str	r2, [sp, #100]	; 0x64
 80077e2:	2200      	movs	r2, #0
 80077e4:	2600      	movs	r6, #0
 80077e6:	2700      	movs	r7, #0
 80077e8:	9004      	str	r0, [sp, #16]
 80077ea:	9107      	str	r1, [sp, #28]
 80077ec:	921c      	str	r2, [sp, #112]	; 0x70
 80077ee:	911b      	str	r1, [sp, #108]	; 0x6c
 80077f0:	780a      	ldrb	r2, [r1, #0]
 80077f2:	2a2b      	cmp	r2, #43	; 0x2b
 80077f4:	d055      	beq.n	80078a2 <_strtod_l+0xc6>
 80077f6:	d841      	bhi.n	800787c <_strtod_l+0xa0>
 80077f8:	2a0d      	cmp	r2, #13
 80077fa:	d83b      	bhi.n	8007874 <_strtod_l+0x98>
 80077fc:	2a08      	cmp	r2, #8
 80077fe:	d83b      	bhi.n	8007878 <_strtod_l+0x9c>
 8007800:	2a00      	cmp	r2, #0
 8007802:	d044      	beq.n	800788e <_strtod_l+0xb2>
 8007804:	2200      	movs	r2, #0
 8007806:	920f      	str	r2, [sp, #60]	; 0x3c
 8007808:	2100      	movs	r1, #0
 800780a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800780c:	9109      	str	r1, [sp, #36]	; 0x24
 800780e:	782a      	ldrb	r2, [r5, #0]
 8007810:	2a30      	cmp	r2, #48	; 0x30
 8007812:	d000      	beq.n	8007816 <_strtod_l+0x3a>
 8007814:	e085      	b.n	8007922 <_strtod_l+0x146>
 8007816:	786a      	ldrb	r2, [r5, #1]
 8007818:	3120      	adds	r1, #32
 800781a:	438a      	bics	r2, r1
 800781c:	2a58      	cmp	r2, #88	; 0x58
 800781e:	d000      	beq.n	8007822 <_strtod_l+0x46>
 8007820:	e075      	b.n	800790e <_strtod_l+0x132>
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007826:	4a97      	ldr	r2, [pc, #604]	; (8007a84 <_strtod_l+0x2a8>)
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	ab1c      	add	r3, sp, #112	; 0x70
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	9804      	ldr	r0, [sp, #16]
 8007830:	ab1d      	add	r3, sp, #116	; 0x74
 8007832:	a91b      	add	r1, sp, #108	; 0x6c
 8007834:	f001 fa92 	bl	8008d5c <__gethex>
 8007838:	230f      	movs	r3, #15
 800783a:	0002      	movs	r2, r0
 800783c:	401a      	ands	r2, r3
 800783e:	0004      	movs	r4, r0
 8007840:	9205      	str	r2, [sp, #20]
 8007842:	4218      	tst	r0, r3
 8007844:	d005      	beq.n	8007852 <_strtod_l+0x76>
 8007846:	2a06      	cmp	r2, #6
 8007848:	d12d      	bne.n	80078a6 <_strtod_l+0xca>
 800784a:	1c6b      	adds	r3, r5, #1
 800784c:	931b      	str	r3, [sp, #108]	; 0x6c
 800784e:	2300      	movs	r3, #0
 8007850:	930f      	str	r3, [sp, #60]	; 0x3c
 8007852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <_strtod_l+0x82>
 8007858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800785a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01b      	beq.n	800789c <_strtod_l+0xc0>
 8007864:	2380      	movs	r3, #128	; 0x80
 8007866:	0032      	movs	r2, r6
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	0010      	movs	r0, r2
 800786e:	0019      	movs	r1, r3
 8007870:	b021      	add	sp, #132	; 0x84
 8007872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007874:	2a20      	cmp	r2, #32
 8007876:	d1c5      	bne.n	8007804 <_strtod_l+0x28>
 8007878:	3101      	adds	r1, #1
 800787a:	e7b8      	b.n	80077ee <_strtod_l+0x12>
 800787c:	2a2d      	cmp	r2, #45	; 0x2d
 800787e:	d1c1      	bne.n	8007804 <_strtod_l+0x28>
 8007880:	3a2c      	subs	r2, #44	; 0x2c
 8007882:	920f      	str	r2, [sp, #60]	; 0x3c
 8007884:	1c4a      	adds	r2, r1, #1
 8007886:	921b      	str	r2, [sp, #108]	; 0x6c
 8007888:	784a      	ldrb	r2, [r1, #1]
 800788a:	2a00      	cmp	r2, #0
 800788c:	d1bc      	bne.n	8007808 <_strtod_l+0x2c>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	931b      	str	r3, [sp, #108]	; 0x6c
 8007892:	2300      	movs	r3, #0
 8007894:	930f      	str	r3, [sp, #60]	; 0x3c
 8007896:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1dd      	bne.n	8007858 <_strtod_l+0x7c>
 800789c:	0032      	movs	r2, r6
 800789e:	003b      	movs	r3, r7
 80078a0:	e7e4      	b.n	800786c <_strtod_l+0x90>
 80078a2:	2200      	movs	r2, #0
 80078a4:	e7ed      	b.n	8007882 <_strtod_l+0xa6>
 80078a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d007      	beq.n	80078bc <_strtod_l+0xe0>
 80078ac:	2135      	movs	r1, #53	; 0x35
 80078ae:	a81e      	add	r0, sp, #120	; 0x78
 80078b0:	f002 f97f 	bl	8009bb2 <__copybits>
 80078b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078b6:	9804      	ldr	r0, [sp, #16]
 80078b8:	f001 fd7c 	bl	80093b4 <_Bfree>
 80078bc:	9805      	ldr	r0, [sp, #20]
 80078be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078c0:	3801      	subs	r0, #1
 80078c2:	2804      	cmp	r0, #4
 80078c4:	d806      	bhi.n	80078d4 <_strtod_l+0xf8>
 80078c6:	f7f8 fc25 	bl	8000114 <__gnu_thumb1_case_uqi>
 80078ca:	0312      	.short	0x0312
 80078cc:	1e1c      	.short	0x1e1c
 80078ce:	12          	.byte	0x12
 80078cf:	00          	.byte	0x00
 80078d0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80078d2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80078d4:	05e4      	lsls	r4, r4, #23
 80078d6:	d502      	bpl.n	80078de <_strtod_l+0x102>
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	061b      	lsls	r3, r3, #24
 80078dc:	431f      	orrs	r7, r3
 80078de:	4b6a      	ldr	r3, [pc, #424]	; (8007a88 <_strtod_l+0x2ac>)
 80078e0:	423b      	tst	r3, r7
 80078e2:	d1b6      	bne.n	8007852 <_strtod_l+0x76>
 80078e4:	f001 f86a 	bl	80089bc <__errno>
 80078e8:	2322      	movs	r3, #34	; 0x22
 80078ea:	6003      	str	r3, [r0, #0]
 80078ec:	e7b1      	b.n	8007852 <_strtod_l+0x76>
 80078ee:	4967      	ldr	r1, [pc, #412]	; (8007a8c <_strtod_l+0x2b0>)
 80078f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80078f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80078f4:	400a      	ands	r2, r1
 80078f6:	4966      	ldr	r1, [pc, #408]	; (8007a90 <_strtod_l+0x2b4>)
 80078f8:	185b      	adds	r3, r3, r1
 80078fa:	051b      	lsls	r3, r3, #20
 80078fc:	431a      	orrs	r2, r3
 80078fe:	0017      	movs	r7, r2
 8007900:	e7e8      	b.n	80078d4 <_strtod_l+0xf8>
 8007902:	4f61      	ldr	r7, [pc, #388]	; (8007a88 <_strtod_l+0x2ac>)
 8007904:	e7e6      	b.n	80078d4 <_strtod_l+0xf8>
 8007906:	2601      	movs	r6, #1
 8007908:	4f62      	ldr	r7, [pc, #392]	; (8007a94 <_strtod_l+0x2b8>)
 800790a:	4276      	negs	r6, r6
 800790c:	e7e2      	b.n	80078d4 <_strtod_l+0xf8>
 800790e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	921b      	str	r2, [sp, #108]	; 0x6c
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d0f9      	beq.n	800790e <_strtod_l+0x132>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d099      	beq.n	8007852 <_strtod_l+0x76>
 800791e:	2301      	movs	r3, #1
 8007920:	9309      	str	r3, [sp, #36]	; 0x24
 8007922:	2500      	movs	r5, #0
 8007924:	220a      	movs	r2, #10
 8007926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007928:	950d      	str	r5, [sp, #52]	; 0x34
 800792a:	9310      	str	r3, [sp, #64]	; 0x40
 800792c:	9508      	str	r5, [sp, #32]
 800792e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007930:	7804      	ldrb	r4, [r0, #0]
 8007932:	0023      	movs	r3, r4
 8007934:	3b30      	subs	r3, #48	; 0x30
 8007936:	b2d9      	uxtb	r1, r3
 8007938:	2909      	cmp	r1, #9
 800793a:	d927      	bls.n	800798c <_strtod_l+0x1b0>
 800793c:	2201      	movs	r2, #1
 800793e:	4956      	ldr	r1, [pc, #344]	; (8007a98 <_strtod_l+0x2bc>)
 8007940:	f000 ff98 	bl	8008874 <strncmp>
 8007944:	2800      	cmp	r0, #0
 8007946:	d031      	beq.n	80079ac <_strtod_l+0x1d0>
 8007948:	2000      	movs	r0, #0
 800794a:	0023      	movs	r3, r4
 800794c:	4684      	mov	ip, r0
 800794e:	9a08      	ldr	r2, [sp, #32]
 8007950:	900c      	str	r0, [sp, #48]	; 0x30
 8007952:	9205      	str	r2, [sp, #20]
 8007954:	2220      	movs	r2, #32
 8007956:	0019      	movs	r1, r3
 8007958:	4391      	bics	r1, r2
 800795a:	000a      	movs	r2, r1
 800795c:	2100      	movs	r1, #0
 800795e:	9106      	str	r1, [sp, #24]
 8007960:	2a45      	cmp	r2, #69	; 0x45
 8007962:	d000      	beq.n	8007966 <_strtod_l+0x18a>
 8007964:	e0c2      	b.n	8007aec <_strtod_l+0x310>
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796a:	4303      	orrs	r3, r0
 800796c:	4313      	orrs	r3, r2
 800796e:	428b      	cmp	r3, r1
 8007970:	d08d      	beq.n	800788e <_strtod_l+0xb2>
 8007972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	3301      	adds	r3, #1
 8007978:	931b      	str	r3, [sp, #108]	; 0x6c
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b2b      	cmp	r3, #43	; 0x2b
 8007980:	d071      	beq.n	8007a66 <_strtod_l+0x28a>
 8007982:	000c      	movs	r4, r1
 8007984:	2b2d      	cmp	r3, #45	; 0x2d
 8007986:	d174      	bne.n	8007a72 <_strtod_l+0x296>
 8007988:	2401      	movs	r4, #1
 800798a:	e06d      	b.n	8007a68 <_strtod_l+0x28c>
 800798c:	9908      	ldr	r1, [sp, #32]
 800798e:	2908      	cmp	r1, #8
 8007990:	dc09      	bgt.n	80079a6 <_strtod_l+0x1ca>
 8007992:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007994:	4351      	muls	r1, r2
 8007996:	185b      	adds	r3, r3, r1
 8007998:	930d      	str	r3, [sp, #52]	; 0x34
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	3001      	adds	r0, #1
 800799e:	3301      	adds	r3, #1
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80079a4:	e7c3      	b.n	800792e <_strtod_l+0x152>
 80079a6:	4355      	muls	r5, r2
 80079a8:	195d      	adds	r5, r3, r5
 80079aa:	e7f6      	b.n	800799a <_strtod_l+0x1be>
 80079ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80079b2:	9a08      	ldr	r2, [sp, #32]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	d03a      	beq.n	8007a30 <_strtod_l+0x254>
 80079ba:	900c      	str	r0, [sp, #48]	; 0x30
 80079bc:	9205      	str	r2, [sp, #20]
 80079be:	001a      	movs	r2, r3
 80079c0:	3a30      	subs	r2, #48	; 0x30
 80079c2:	2a09      	cmp	r2, #9
 80079c4:	d912      	bls.n	80079ec <_strtod_l+0x210>
 80079c6:	2201      	movs	r2, #1
 80079c8:	4694      	mov	ip, r2
 80079ca:	e7c3      	b.n	8007954 <_strtod_l+0x178>
 80079cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ce:	3001      	adds	r0, #1
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b30      	cmp	r3, #48	; 0x30
 80079d8:	d0f8      	beq.n	80079cc <_strtod_l+0x1f0>
 80079da:	001a      	movs	r2, r3
 80079dc:	3a31      	subs	r2, #49	; 0x31
 80079de:	2a08      	cmp	r2, #8
 80079e0:	d83c      	bhi.n	8007a5c <_strtod_l+0x280>
 80079e2:	900c      	str	r0, [sp, #48]	; 0x30
 80079e4:	2000      	movs	r0, #0
 80079e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80079e8:	9005      	str	r0, [sp, #20]
 80079ea:	9210      	str	r2, [sp, #64]	; 0x40
 80079ec:	001a      	movs	r2, r3
 80079ee:	1c41      	adds	r1, r0, #1
 80079f0:	3a30      	subs	r2, #48	; 0x30
 80079f2:	2b30      	cmp	r3, #48	; 0x30
 80079f4:	d016      	beq.n	8007a24 <_strtod_l+0x248>
 80079f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079f8:	185b      	adds	r3, r3, r1
 80079fa:	930c      	str	r3, [sp, #48]	; 0x30
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	210a      	movs	r1, #10
 8007a00:	469c      	mov	ip, r3
 8007a02:	4484      	add	ip, r0
 8007a04:	4563      	cmp	r3, ip
 8007a06:	d115      	bne.n	8007a34 <_strtod_l+0x258>
 8007a08:	9905      	ldr	r1, [sp, #20]
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	1809      	adds	r1, r1, r0
 8007a10:	181b      	adds	r3, r3, r0
 8007a12:	9105      	str	r1, [sp, #20]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	dc19      	bgt.n	8007a4c <_strtod_l+0x270>
 8007a18:	230a      	movs	r3, #10
 8007a1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a1c:	434b      	muls	r3, r1
 8007a1e:	2100      	movs	r1, #0
 8007a20:	18d3      	adds	r3, r2, r3
 8007a22:	930d      	str	r3, [sp, #52]	; 0x34
 8007a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a26:	0008      	movs	r0, r1
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	e7c6      	b.n	80079be <_strtod_l+0x1e2>
 8007a30:	9808      	ldr	r0, [sp, #32]
 8007a32:	e7d0      	b.n	80079d6 <_strtod_l+0x1fa>
 8007a34:	1c5c      	adds	r4, r3, #1
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	dc04      	bgt.n	8007a44 <_strtod_l+0x268>
 8007a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3c:	434b      	muls	r3, r1
 8007a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a40:	0023      	movs	r3, r4
 8007a42:	e7df      	b.n	8007a04 <_strtod_l+0x228>
 8007a44:	2c10      	cmp	r4, #16
 8007a46:	dcfb      	bgt.n	8007a40 <_strtod_l+0x264>
 8007a48:	434d      	muls	r5, r1
 8007a4a:	e7f9      	b.n	8007a40 <_strtod_l+0x264>
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	dce7      	bgt.n	8007a24 <_strtod_l+0x248>
 8007a54:	230a      	movs	r3, #10
 8007a56:	435d      	muls	r5, r3
 8007a58:	1955      	adds	r5, r2, r5
 8007a5a:	e7e3      	b.n	8007a24 <_strtod_l+0x248>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	920c      	str	r2, [sp, #48]	; 0x30
 8007a60:	9205      	str	r2, [sp, #20]
 8007a62:	3201      	adds	r2, #1
 8007a64:	e7b0      	b.n	80079c8 <_strtod_l+0x1ec>
 8007a66:	2400      	movs	r4, #0
 8007a68:	9b07      	ldr	r3, [sp, #28]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	789b      	ldrb	r3, [r3, #2]
 8007a72:	001a      	movs	r2, r3
 8007a74:	3a30      	subs	r2, #48	; 0x30
 8007a76:	2a09      	cmp	r2, #9
 8007a78:	d914      	bls.n	8007aa4 <_strtod_l+0x2c8>
 8007a7a:	9a07      	ldr	r2, [sp, #28]
 8007a7c:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e033      	b.n	8007aea <_strtod_l+0x30e>
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	0800f4f0 	.word	0x0800f4f0
 8007a88:	7ff00000 	.word	0x7ff00000
 8007a8c:	ffefffff 	.word	0xffefffff
 8007a90:	00000433 	.word	0x00000433
 8007a94:	7fffffff 	.word	0x7fffffff
 8007a98:	0800f4ec 	.word	0x0800f4ec
 8007a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b30      	cmp	r3, #48	; 0x30
 8007aa6:	d0f9      	beq.n	8007a9c <_strtod_l+0x2c0>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	9206      	str	r2, [sp, #24]
 8007aac:	001a      	movs	r2, r3
 8007aae:	3a31      	subs	r2, #49	; 0x31
 8007ab0:	2a08      	cmp	r2, #8
 8007ab2:	d81b      	bhi.n	8007aec <_strtod_l+0x310>
 8007ab4:	3b30      	subs	r3, #48	; 0x30
 8007ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aba:	9306      	str	r3, [sp, #24]
 8007abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007abe:	1c59      	adds	r1, r3, #1
 8007ac0:	911b      	str	r1, [sp, #108]	; 0x6c
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	3a30      	subs	r2, #48	; 0x30
 8007ac8:	2a09      	cmp	r2, #9
 8007aca:	d93a      	bls.n	8007b42 <_strtod_l+0x366>
 8007acc:	9a06      	ldr	r2, [sp, #24]
 8007ace:	1a8a      	subs	r2, r1, r2
 8007ad0:	49b2      	ldr	r1, [pc, #712]	; (8007d9c <_strtod_l+0x5c0>)
 8007ad2:	9106      	str	r1, [sp, #24]
 8007ad4:	2a08      	cmp	r2, #8
 8007ad6:	dc04      	bgt.n	8007ae2 <_strtod_l+0x306>
 8007ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ada:	9206      	str	r2, [sp, #24]
 8007adc:	428a      	cmp	r2, r1
 8007ade:	dd00      	ble.n	8007ae2 <_strtod_l+0x306>
 8007ae0:	9106      	str	r1, [sp, #24]
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d002      	beq.n	8007aec <_strtod_l+0x310>
 8007ae6:	9a06      	ldr	r2, [sp, #24]
 8007ae8:	4252      	negs	r2, r2
 8007aea:	9206      	str	r2, [sp, #24]
 8007aec:	9a05      	ldr	r2, [sp, #20]
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	d14d      	bne.n	8007b8e <_strtod_l+0x3b2>
 8007af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af4:	4310      	orrs	r0, r2
 8007af6:	d000      	beq.n	8007afa <_strtod_l+0x31e>
 8007af8:	e6ab      	b.n	8007852 <_strtod_l+0x76>
 8007afa:	4662      	mov	r2, ip
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	d000      	beq.n	8007b02 <_strtod_l+0x326>
 8007b00:	e6c5      	b.n	800788e <_strtod_l+0xb2>
 8007b02:	2b69      	cmp	r3, #105	; 0x69
 8007b04:	d027      	beq.n	8007b56 <_strtod_l+0x37a>
 8007b06:	dc23      	bgt.n	8007b50 <_strtod_l+0x374>
 8007b08:	2b49      	cmp	r3, #73	; 0x49
 8007b0a:	d024      	beq.n	8007b56 <_strtod_l+0x37a>
 8007b0c:	2b4e      	cmp	r3, #78	; 0x4e
 8007b0e:	d000      	beq.n	8007b12 <_strtod_l+0x336>
 8007b10:	e6bd      	b.n	800788e <_strtod_l+0xb2>
 8007b12:	49a3      	ldr	r1, [pc, #652]	; (8007da0 <_strtod_l+0x5c4>)
 8007b14:	a81b      	add	r0, sp, #108	; 0x6c
 8007b16:	f001 fb57 	bl	80091c8 <__match>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d100      	bne.n	8007b20 <_strtod_l+0x344>
 8007b1e:	e6b6      	b.n	800788e <_strtod_l+0xb2>
 8007b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b28      	cmp	r3, #40	; 0x28
 8007b26:	d12c      	bne.n	8007b82 <_strtod_l+0x3a6>
 8007b28:	499e      	ldr	r1, [pc, #632]	; (8007da4 <_strtod_l+0x5c8>)
 8007b2a:	aa1e      	add	r2, sp, #120	; 0x78
 8007b2c:	a81b      	add	r0, sp, #108	; 0x6c
 8007b2e:	f001 fb5f 	bl	80091f0 <__hexnan>
 8007b32:	2805      	cmp	r0, #5
 8007b34:	d125      	bne.n	8007b82 <_strtod_l+0x3a6>
 8007b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b38:	4a9b      	ldr	r2, [pc, #620]	; (8007da8 <_strtod_l+0x5cc>)
 8007b3a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	0017      	movs	r7, r2
 8007b40:	e687      	b.n	8007852 <_strtod_l+0x76>
 8007b42:	220a      	movs	r2, #10
 8007b44:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b46:	434a      	muls	r2, r1
 8007b48:	18d2      	adds	r2, r2, r3
 8007b4a:	3a30      	subs	r2, #48	; 0x30
 8007b4c:	920e      	str	r2, [sp, #56]	; 0x38
 8007b4e:	e7b5      	b.n	8007abc <_strtod_l+0x2e0>
 8007b50:	2b6e      	cmp	r3, #110	; 0x6e
 8007b52:	d0de      	beq.n	8007b12 <_strtod_l+0x336>
 8007b54:	e69b      	b.n	800788e <_strtod_l+0xb2>
 8007b56:	4995      	ldr	r1, [pc, #596]	; (8007dac <_strtod_l+0x5d0>)
 8007b58:	a81b      	add	r0, sp, #108	; 0x6c
 8007b5a:	f001 fb35 	bl	80091c8 <__match>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d100      	bne.n	8007b64 <_strtod_l+0x388>
 8007b62:	e694      	b.n	800788e <_strtod_l+0xb2>
 8007b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b66:	4992      	ldr	r1, [pc, #584]	; (8007db0 <_strtod_l+0x5d4>)
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	a81b      	add	r0, sp, #108	; 0x6c
 8007b6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b6e:	f001 fb2b 	bl	80091c8 <__match>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d102      	bne.n	8007b7c <_strtod_l+0x3a0>
 8007b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b78:	3301      	adds	r3, #1
 8007b7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	4f8a      	ldr	r7, [pc, #552]	; (8007da8 <_strtod_l+0x5cc>)
 8007b80:	e667      	b.n	8007852 <_strtod_l+0x76>
 8007b82:	488c      	ldr	r0, [pc, #560]	; (8007db4 <_strtod_l+0x5d8>)
 8007b84:	f000 ff5c 	bl	8008a40 <nan>
 8007b88:	0006      	movs	r6, r0
 8007b8a:	000f      	movs	r7, r1
 8007b8c:	e661      	b.n	8007852 <_strtod_l+0x76>
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b92:	1a9b      	subs	r3, r3, r2
 8007b94:	9309      	str	r3, [sp, #36]	; 0x24
 8007b96:	9b08      	ldr	r3, [sp, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <_strtod_l+0x3c4>
 8007b9c:	9b05      	ldr	r3, [sp, #20]
 8007b9e:	9308      	str	r3, [sp, #32]
 8007ba0:	9c05      	ldr	r4, [sp, #20]
 8007ba2:	2c10      	cmp	r4, #16
 8007ba4:	dd00      	ble.n	8007ba8 <_strtod_l+0x3cc>
 8007ba6:	2410      	movs	r4, #16
 8007ba8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007baa:	f7fa fc27 	bl	80023fc <__aeabi_ui2d>
 8007bae:	9b05      	ldr	r3, [sp, #20]
 8007bb0:	0006      	movs	r6, r0
 8007bb2:	000f      	movs	r7, r1
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	dd15      	ble.n	8007be4 <_strtod_l+0x408>
 8007bb8:	0022      	movs	r2, r4
 8007bba:	4b7f      	ldr	r3, [pc, #508]	; (8007db8 <_strtod_l+0x5dc>)
 8007bbc:	3a09      	subs	r2, #9
 8007bbe:	00d2      	lsls	r2, r2, #3
 8007bc0:	189b      	adds	r3, r3, r2
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f7f9 fd51 	bl	800166c <__aeabi_dmul>
 8007bca:	0006      	movs	r6, r0
 8007bcc:	0028      	movs	r0, r5
 8007bce:	000f      	movs	r7, r1
 8007bd0:	f7fa fc14 	bl	80023fc <__aeabi_ui2d>
 8007bd4:	0002      	movs	r2, r0
 8007bd6:	000b      	movs	r3, r1
 8007bd8:	0030      	movs	r0, r6
 8007bda:	0039      	movs	r1, r7
 8007bdc:	f7f8 fdec 	bl	80007b8 <__aeabi_dadd>
 8007be0:	0006      	movs	r6, r0
 8007be2:	000f      	movs	r7, r1
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	dc39      	bgt.n	8007c5e <_strtod_l+0x482>
 8007bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d100      	bne.n	8007bf2 <_strtod_l+0x416>
 8007bf0:	e62f      	b.n	8007852 <_strtod_l+0x76>
 8007bf2:	dd24      	ble.n	8007c3e <_strtod_l+0x462>
 8007bf4:	2b16      	cmp	r3, #22
 8007bf6:	dc09      	bgt.n	8007c0c <_strtod_l+0x430>
 8007bf8:	496f      	ldr	r1, [pc, #444]	; (8007db8 <_strtod_l+0x5dc>)
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	18c9      	adds	r1, r1, r3
 8007bfe:	0032      	movs	r2, r6
 8007c00:	6808      	ldr	r0, [r1, #0]
 8007c02:	6849      	ldr	r1, [r1, #4]
 8007c04:	003b      	movs	r3, r7
 8007c06:	f7f9 fd31 	bl	800166c <__aeabi_dmul>
 8007c0a:	e7bd      	b.n	8007b88 <_strtod_l+0x3ac>
 8007c0c:	2325      	movs	r3, #37	; 0x25
 8007c0e:	9a05      	ldr	r2, [sp, #20]
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c14:	4293      	cmp	r3, r2
 8007c16:	db22      	blt.n	8007c5e <_strtod_l+0x482>
 8007c18:	240f      	movs	r4, #15
 8007c1a:	9b05      	ldr	r3, [sp, #20]
 8007c1c:	4d66      	ldr	r5, [pc, #408]	; (8007db8 <_strtod_l+0x5dc>)
 8007c1e:	1ae4      	subs	r4, r4, r3
 8007c20:	00e1      	lsls	r1, r4, #3
 8007c22:	1869      	adds	r1, r5, r1
 8007c24:	0032      	movs	r2, r6
 8007c26:	6808      	ldr	r0, [r1, #0]
 8007c28:	6849      	ldr	r1, [r1, #4]
 8007c2a:	003b      	movs	r3, r7
 8007c2c:	f7f9 fd1e 	bl	800166c <__aeabi_dmul>
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	1b1c      	subs	r4, r3, r4
 8007c34:	00e4      	lsls	r4, r4, #3
 8007c36:	192d      	adds	r5, r5, r4
 8007c38:	682a      	ldr	r2, [r5, #0]
 8007c3a:	686b      	ldr	r3, [r5, #4]
 8007c3c:	e7e3      	b.n	8007c06 <_strtod_l+0x42a>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	3316      	adds	r3, #22
 8007c42:	db0c      	blt.n	8007c5e <_strtod_l+0x482>
 8007c44:	9906      	ldr	r1, [sp, #24]
 8007c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c48:	4b5b      	ldr	r3, [pc, #364]	; (8007db8 <_strtod_l+0x5dc>)
 8007c4a:	1a52      	subs	r2, r2, r1
 8007c4c:	00d2      	lsls	r2, r2, #3
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	0030      	movs	r0, r6
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	0039      	movs	r1, r7
 8007c58:	f7f9 f90e 	bl	8000e78 <__aeabi_ddiv>
 8007c5c:	e794      	b.n	8007b88 <_strtod_l+0x3ac>
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	1b1c      	subs	r4, r3, r4
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	18e4      	adds	r4, r4, r3
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	dd72      	ble.n	8007d50 <_strtod_l+0x574>
 8007c6a:	220f      	movs	r2, #15
 8007c6c:	0023      	movs	r3, r4
 8007c6e:	4013      	ands	r3, r2
 8007c70:	4214      	tst	r4, r2
 8007c72:	d00a      	beq.n	8007c8a <_strtod_l+0x4ae>
 8007c74:	4950      	ldr	r1, [pc, #320]	; (8007db8 <_strtod_l+0x5dc>)
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	18c9      	adds	r1, r1, r3
 8007c7a:	0032      	movs	r2, r6
 8007c7c:	6808      	ldr	r0, [r1, #0]
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	003b      	movs	r3, r7
 8007c82:	f7f9 fcf3 	bl	800166c <__aeabi_dmul>
 8007c86:	0006      	movs	r6, r0
 8007c88:	000f      	movs	r7, r1
 8007c8a:	230f      	movs	r3, #15
 8007c8c:	439c      	bics	r4, r3
 8007c8e:	d04a      	beq.n	8007d26 <_strtod_l+0x54a>
 8007c90:	3326      	adds	r3, #38	; 0x26
 8007c92:	33ff      	adds	r3, #255	; 0xff
 8007c94:	429c      	cmp	r4, r3
 8007c96:	dd22      	ble.n	8007cde <_strtod_l+0x502>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	9306      	str	r3, [sp, #24]
 8007c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	2322      	movs	r3, #34	; 0x22
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	9a04      	ldr	r2, [sp, #16]
 8007ca8:	4f3f      	ldr	r7, [pc, #252]	; (8007da8 <_strtod_l+0x5cc>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cae:	42b3      	cmp	r3, r6
 8007cb0:	d100      	bne.n	8007cb4 <_strtod_l+0x4d8>
 8007cb2:	e5ce      	b.n	8007852 <_strtod_l+0x76>
 8007cb4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007cb6:	9804      	ldr	r0, [sp, #16]
 8007cb8:	f001 fb7c 	bl	80093b4 <_Bfree>
 8007cbc:	9908      	ldr	r1, [sp, #32]
 8007cbe:	9804      	ldr	r0, [sp, #16]
 8007cc0:	f001 fb78 	bl	80093b4 <_Bfree>
 8007cc4:	9906      	ldr	r1, [sp, #24]
 8007cc6:	9804      	ldr	r0, [sp, #16]
 8007cc8:	f001 fb74 	bl	80093b4 <_Bfree>
 8007ccc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cce:	9804      	ldr	r0, [sp, #16]
 8007cd0:	f001 fb70 	bl	80093b4 <_Bfree>
 8007cd4:	9905      	ldr	r1, [sp, #20]
 8007cd6:	9804      	ldr	r0, [sp, #16]
 8007cd8:	f001 fb6c 	bl	80093b4 <_Bfree>
 8007cdc:	e5b9      	b.n	8007852 <_strtod_l+0x76>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	0039      	movs	r1, r7
 8007ce4:	4d35      	ldr	r5, [pc, #212]	; (8007dbc <_strtod_l+0x5e0>)
 8007ce6:	1124      	asrs	r4, r4, #4
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	2c01      	cmp	r4, #1
 8007cec:	dc1e      	bgt.n	8007d2c <_strtod_l+0x550>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <_strtod_l+0x51a>
 8007cf2:	0006      	movs	r6, r0
 8007cf4:	000f      	movs	r7, r1
 8007cf6:	4b32      	ldr	r3, [pc, #200]	; (8007dc0 <_strtod_l+0x5e4>)
 8007cf8:	9a07      	ldr	r2, [sp, #28]
 8007cfa:	18ff      	adds	r7, r7, r3
 8007cfc:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <_strtod_l+0x5e0>)
 8007cfe:	00d2      	lsls	r2, r2, #3
 8007d00:	189d      	adds	r5, r3, r2
 8007d02:	6828      	ldr	r0, [r5, #0]
 8007d04:	6869      	ldr	r1, [r5, #4]
 8007d06:	0032      	movs	r2, r6
 8007d08:	003b      	movs	r3, r7
 8007d0a:	f7f9 fcaf 	bl	800166c <__aeabi_dmul>
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <_strtod_l+0x5cc>)
 8007d10:	4a2c      	ldr	r2, [pc, #176]	; (8007dc4 <_strtod_l+0x5e8>)
 8007d12:	0006      	movs	r6, r0
 8007d14:	400b      	ands	r3, r1
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d8be      	bhi.n	8007c98 <_strtod_l+0x4bc>
 8007d1a:	4a2b      	ldr	r2, [pc, #172]	; (8007dc8 <_strtod_l+0x5ec>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d913      	bls.n	8007d48 <_strtod_l+0x56c>
 8007d20:	2601      	movs	r6, #1
 8007d22:	4f2a      	ldr	r7, [pc, #168]	; (8007dcc <_strtod_l+0x5f0>)
 8007d24:	4276      	negs	r6, r6
 8007d26:	2300      	movs	r3, #0
 8007d28:	9307      	str	r3, [sp, #28]
 8007d2a:	e088      	b.n	8007e3e <_strtod_l+0x662>
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4214      	tst	r4, r2
 8007d30:	d004      	beq.n	8007d3c <_strtod_l+0x560>
 8007d32:	682a      	ldr	r2, [r5, #0]
 8007d34:	686b      	ldr	r3, [r5, #4]
 8007d36:	f7f9 fc99 	bl	800166c <__aeabi_dmul>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3201      	adds	r2, #1
 8007d42:	9207      	str	r2, [sp, #28]
 8007d44:	3508      	adds	r5, #8
 8007d46:	e7d0      	b.n	8007cea <_strtod_l+0x50e>
 8007d48:	23d4      	movs	r3, #212	; 0xd4
 8007d4a:	049b      	lsls	r3, r3, #18
 8007d4c:	18cf      	adds	r7, r1, r3
 8007d4e:	e7ea      	b.n	8007d26 <_strtod_l+0x54a>
 8007d50:	2c00      	cmp	r4, #0
 8007d52:	d0e8      	beq.n	8007d26 <_strtod_l+0x54a>
 8007d54:	4264      	negs	r4, r4
 8007d56:	230f      	movs	r3, #15
 8007d58:	0022      	movs	r2, r4
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	421c      	tst	r4, r3
 8007d5e:	d00a      	beq.n	8007d76 <_strtod_l+0x59a>
 8007d60:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <_strtod_l+0x5dc>)
 8007d62:	00d2      	lsls	r2, r2, #3
 8007d64:	189b      	adds	r3, r3, r2
 8007d66:	0030      	movs	r0, r6
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	0039      	movs	r1, r7
 8007d6e:	f7f9 f883 	bl	8000e78 <__aeabi_ddiv>
 8007d72:	0006      	movs	r6, r0
 8007d74:	000f      	movs	r7, r1
 8007d76:	1124      	asrs	r4, r4, #4
 8007d78:	d0d5      	beq.n	8007d26 <_strtod_l+0x54a>
 8007d7a:	2c1f      	cmp	r4, #31
 8007d7c:	dd28      	ble.n	8007dd0 <_strtod_l+0x5f4>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9305      	str	r3, [sp, #20]
 8007d82:	9306      	str	r3, [sp, #24]
 8007d84:	930d      	str	r3, [sp, #52]	; 0x34
 8007d86:	9308      	str	r3, [sp, #32]
 8007d88:	2322      	movs	r3, #34	; 0x22
 8007d8a:	9a04      	ldr	r2, [sp, #16]
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d92:	2700      	movs	r7, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d18d      	bne.n	8007cb4 <_strtod_l+0x4d8>
 8007d98:	e55b      	b.n	8007852 <_strtod_l+0x76>
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	00004e1f 	.word	0x00004e1f
 8007da0:	0800f821 	.word	0x0800f821
 8007da4:	0800f504 	.word	0x0800f504
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	0800f819 	.word	0x0800f819
 8007db0:	0800f8cf 	.word	0x0800f8cf
 8007db4:	0800f8cb 	.word	0x0800f8cb
 8007db8:	0800f740 	.word	0x0800f740
 8007dbc:	0800f718 	.word	0x0800f718
 8007dc0:	fcb00000 	.word	0xfcb00000
 8007dc4:	7ca00000 	.word	0x7ca00000
 8007dc8:	7c900000 	.word	0x7c900000
 8007dcc:	7fefffff 	.word	0x7fefffff
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	0022      	movs	r2, r4
 8007dd4:	401a      	ands	r2, r3
 8007dd6:	9207      	str	r2, [sp, #28]
 8007dd8:	421c      	tst	r4, r3
 8007dda:	d001      	beq.n	8007de0 <_strtod_l+0x604>
 8007ddc:	335a      	adds	r3, #90	; 0x5a
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	0030      	movs	r0, r6
 8007de2:	0039      	movs	r1, r7
 8007de4:	2300      	movs	r3, #0
 8007de6:	4dc4      	ldr	r5, [pc, #784]	; (80080f8 <_strtod_l+0x91c>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	4214      	tst	r4, r2
 8007dec:	d004      	beq.n	8007df8 <_strtod_l+0x61c>
 8007dee:	682a      	ldr	r2, [r5, #0]
 8007df0:	686b      	ldr	r3, [r5, #4]
 8007df2:	f7f9 fc3b 	bl	800166c <__aeabi_dmul>
 8007df6:	2301      	movs	r3, #1
 8007df8:	1064      	asrs	r4, r4, #1
 8007dfa:	3508      	adds	r5, #8
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	d1f3      	bne.n	8007de8 <_strtod_l+0x60c>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <_strtod_l+0x62c>
 8007e04:	0006      	movs	r6, r0
 8007e06:	000f      	movs	r7, r1
 8007e08:	9b07      	ldr	r3, [sp, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00f      	beq.n	8007e2e <_strtod_l+0x652>
 8007e0e:	236b      	movs	r3, #107	; 0x6b
 8007e10:	007a      	lsls	r2, r7, #1
 8007e12:	0d52      	lsrs	r2, r2, #21
 8007e14:	0039      	movs	r1, r7
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dd08      	ble.n	8007e2e <_strtod_l+0x652>
 8007e1c:	2b1f      	cmp	r3, #31
 8007e1e:	dc00      	bgt.n	8007e22 <_strtod_l+0x646>
 8007e20:	e121      	b.n	8008066 <_strtod_l+0x88a>
 8007e22:	2600      	movs	r6, #0
 8007e24:	2b34      	cmp	r3, #52	; 0x34
 8007e26:	dc00      	bgt.n	8007e2a <_strtod_l+0x64e>
 8007e28:	e116      	b.n	8008058 <_strtod_l+0x87c>
 8007e2a:	27dc      	movs	r7, #220	; 0xdc
 8007e2c:	04bf      	lsls	r7, r7, #18
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2300      	movs	r3, #0
 8007e32:	0030      	movs	r0, r6
 8007e34:	0039      	movs	r1, r7
 8007e36:	f7f8 fb07 	bl	8000448 <__aeabi_dcmpeq>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d19f      	bne.n	8007d7e <_strtod_l+0x5a2>
 8007e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e40:	9a08      	ldr	r2, [sp, #32]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	9804      	ldr	r0, [sp, #16]
 8007e4a:	f001 fb01 	bl	8009450 <__s2b>
 8007e4e:	900d      	str	r0, [sp, #52]	; 0x34
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d100      	bne.n	8007e56 <_strtod_l+0x67a>
 8007e54:	e720      	b.n	8007c98 <_strtod_l+0x4bc>
 8007e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e58:	9906      	ldr	r1, [sp, #24]
 8007e5a:	17da      	asrs	r2, r3, #31
 8007e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	401a      	ands	r2, r3
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	9215      	str	r2, [sp, #84]	; 0x54
 8007e66:	43db      	mvns	r3, r3
 8007e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e6a:	17db      	asrs	r3, r3, #31
 8007e6c:	401a      	ands	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9218      	str	r2, [sp, #96]	; 0x60
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e78:	9804      	ldr	r0, [sp, #16]
 8007e7a:	6859      	ldr	r1, [r3, #4]
 8007e7c:	f001 fa72 	bl	8009364 <_Balloc>
 8007e80:	9008      	str	r0, [sp, #32]
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d100      	bne.n	8007e88 <_strtod_l+0x6ac>
 8007e86:	e70c      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e8a:	300c      	adds	r0, #12
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	310c      	adds	r1, #12
 8007e92:	3202      	adds	r2, #2
 8007e94:	0092      	lsls	r2, r2, #2
 8007e96:	f000 fdca 	bl	8008a2e <memcpy>
 8007e9a:	ab1e      	add	r3, sp, #120	; 0x78
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	0032      	movs	r2, r6
 8007ea4:	003b      	movs	r3, r7
 8007ea6:	9804      	ldr	r0, [sp, #16]
 8007ea8:	9610      	str	r6, [sp, #64]	; 0x40
 8007eaa:	9711      	str	r7, [sp, #68]	; 0x44
 8007eac:	f001 fdf8 	bl	8009aa0 <__d2b>
 8007eb0:	901c      	str	r0, [sp, #112]	; 0x70
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d100      	bne.n	8007eb8 <_strtod_l+0x6dc>
 8007eb6:	e6f4      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007eb8:	2101      	movs	r1, #1
 8007eba:	9804      	ldr	r0, [sp, #16]
 8007ebc:	f001 fb5c 	bl	8009578 <__i2b>
 8007ec0:	9006      	str	r0, [sp, #24]
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d100      	bne.n	8007ec8 <_strtod_l+0x6ec>
 8007ec6:	e6ec      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007ec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ecc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ece:	1ad4      	subs	r4, r2, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db01      	blt.n	8007ed8 <_strtod_l+0x6fc>
 8007ed4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007ed6:	195d      	adds	r5, r3, r5
 8007ed8:	9907      	ldr	r1, [sp, #28]
 8007eda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007edc:	1a5b      	subs	r3, r3, r1
 8007ede:	2136      	movs	r1, #54	; 0x36
 8007ee0:	189b      	adds	r3, r3, r2
 8007ee2:	1a8a      	subs	r2, r1, r2
 8007ee4:	4985      	ldr	r1, [pc, #532]	; (80080fc <_strtod_l+0x920>)
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	468c      	mov	ip, r1
 8007eea:	2100      	movs	r1, #0
 8007eec:	3b01      	subs	r3, #1
 8007eee:	9114      	str	r1, [sp, #80]	; 0x50
 8007ef0:	9012      	str	r0, [sp, #72]	; 0x48
 8007ef2:	4563      	cmp	r3, ip
 8007ef4:	da07      	bge.n	8007f06 <_strtod_l+0x72a>
 8007ef6:	4661      	mov	r1, ip
 8007ef8:	1ac9      	subs	r1, r1, r3
 8007efa:	1a52      	subs	r2, r2, r1
 8007efc:	291f      	cmp	r1, #31
 8007efe:	dd00      	ble.n	8007f02 <_strtod_l+0x726>
 8007f00:	e0b6      	b.n	8008070 <_strtod_l+0x894>
 8007f02:	4088      	lsls	r0, r1
 8007f04:	9012      	str	r0, [sp, #72]	; 0x48
 8007f06:	18ab      	adds	r3, r5, r2
 8007f08:	930c      	str	r3, [sp, #48]	; 0x30
 8007f0a:	18a4      	adds	r4, r4, r2
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f10:	191c      	adds	r4, r3, r4
 8007f12:	002b      	movs	r3, r5
 8007f14:	4295      	cmp	r5, r2
 8007f16:	dd00      	ble.n	8007f1a <_strtod_l+0x73e>
 8007f18:	0013      	movs	r3, r2
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	dd00      	ble.n	8007f20 <_strtod_l+0x744>
 8007f1e:	0023      	movs	r3, r4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dd04      	ble.n	8007f2e <_strtod_l+0x752>
 8007f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f26:	1ae4      	subs	r4, r4, r3
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	920c      	str	r2, [sp, #48]	; 0x30
 8007f2c:	1aed      	subs	r5, r5, r3
 8007f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd17      	ble.n	8007f64 <_strtod_l+0x788>
 8007f34:	001a      	movs	r2, r3
 8007f36:	9906      	ldr	r1, [sp, #24]
 8007f38:	9804      	ldr	r0, [sp, #16]
 8007f3a:	f001 fbe5 	bl	8009708 <__pow5mult>
 8007f3e:	9006      	str	r0, [sp, #24]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d100      	bne.n	8007f46 <_strtod_l+0x76a>
 8007f44:	e6ad      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007f46:	0001      	movs	r1, r0
 8007f48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f4a:	9804      	ldr	r0, [sp, #16]
 8007f4c:	f001 fb2c 	bl	80095a8 <__multiply>
 8007f50:	900e      	str	r0, [sp, #56]	; 0x38
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d100      	bne.n	8007f58 <_strtod_l+0x77c>
 8007f56:	e6a4      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007f58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f5a:	9804      	ldr	r0, [sp, #16]
 8007f5c:	f001 fa2a 	bl	80093b4 <_Bfree>
 8007f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f62:	931c      	str	r3, [sp, #112]	; 0x70
 8007f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd00      	ble.n	8007f6c <_strtod_l+0x790>
 8007f6a:	e087      	b.n	800807c <_strtod_l+0x8a0>
 8007f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dd08      	ble.n	8007f84 <_strtod_l+0x7a8>
 8007f72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f74:	9908      	ldr	r1, [sp, #32]
 8007f76:	9804      	ldr	r0, [sp, #16]
 8007f78:	f001 fbc6 	bl	8009708 <__pow5mult>
 8007f7c:	9008      	str	r0, [sp, #32]
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d100      	bne.n	8007f84 <_strtod_l+0x7a8>
 8007f82:	e68e      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	dd08      	ble.n	8007f9a <_strtod_l+0x7be>
 8007f88:	0022      	movs	r2, r4
 8007f8a:	9908      	ldr	r1, [sp, #32]
 8007f8c:	9804      	ldr	r0, [sp, #16]
 8007f8e:	f001 fbfd 	bl	800978c <__lshift>
 8007f92:	9008      	str	r0, [sp, #32]
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d100      	bne.n	8007f9a <_strtod_l+0x7be>
 8007f98:	e683      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	dd08      	ble.n	8007fb0 <_strtod_l+0x7d4>
 8007f9e:	002a      	movs	r2, r5
 8007fa0:	9906      	ldr	r1, [sp, #24]
 8007fa2:	9804      	ldr	r0, [sp, #16]
 8007fa4:	f001 fbf2 	bl	800978c <__lshift>
 8007fa8:	9006      	str	r0, [sp, #24]
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d100      	bne.n	8007fb0 <_strtod_l+0x7d4>
 8007fae:	e678      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007fb0:	9a08      	ldr	r2, [sp, #32]
 8007fb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fb4:	9804      	ldr	r0, [sp, #16]
 8007fb6:	f001 fc73 	bl	80098a0 <__mdiff>
 8007fba:	9005      	str	r0, [sp, #20]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d100      	bne.n	8007fc2 <_strtod_l+0x7e6>
 8007fc0:	e66f      	b.n	8007ca2 <_strtod_l+0x4c6>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	68c3      	ldr	r3, [r0, #12]
 8007fc6:	9906      	ldr	r1, [sp, #24]
 8007fc8:	60c2      	str	r2, [r0, #12]
 8007fca:	930c      	str	r3, [sp, #48]	; 0x30
 8007fcc:	f001 fc4c 	bl	8009868 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	da5d      	bge.n	8008090 <_strtod_l+0x8b4>
 8007fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fd6:	4333      	orrs	r3, r6
 8007fd8:	d000      	beq.n	8007fdc <_strtod_l+0x800>
 8007fda:	e088      	b.n	80080ee <_strtod_l+0x912>
 8007fdc:	033b      	lsls	r3, r7, #12
 8007fde:	d000      	beq.n	8007fe2 <_strtod_l+0x806>
 8007fe0:	e085      	b.n	80080ee <_strtod_l+0x912>
 8007fe2:	22d6      	movs	r2, #214	; 0xd6
 8007fe4:	4b46      	ldr	r3, [pc, #280]	; (8008100 <_strtod_l+0x924>)
 8007fe6:	04d2      	lsls	r2, r2, #19
 8007fe8:	403b      	ands	r3, r7
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d97f      	bls.n	80080ee <_strtod_l+0x912>
 8007fee:	9b05      	ldr	r3, [sp, #20]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <_strtod_l+0x822>
 8007ff6:	9b05      	ldr	r3, [sp, #20]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	dd77      	ble.n	80080ee <_strtod_l+0x912>
 8007ffe:	9905      	ldr	r1, [sp, #20]
 8008000:	2201      	movs	r2, #1
 8008002:	9804      	ldr	r0, [sp, #16]
 8008004:	f001 fbc2 	bl	800978c <__lshift>
 8008008:	9906      	ldr	r1, [sp, #24]
 800800a:	9005      	str	r0, [sp, #20]
 800800c:	f001 fc2c 	bl	8009868 <__mcmp>
 8008010:	2800      	cmp	r0, #0
 8008012:	dd6c      	ble.n	80080ee <_strtod_l+0x912>
 8008014:	9907      	ldr	r1, [sp, #28]
 8008016:	003b      	movs	r3, r7
 8008018:	4a39      	ldr	r2, [pc, #228]	; (8008100 <_strtod_l+0x924>)
 800801a:	2900      	cmp	r1, #0
 800801c:	d100      	bne.n	8008020 <_strtod_l+0x844>
 800801e:	e094      	b.n	800814a <_strtod_l+0x96e>
 8008020:	0011      	movs	r1, r2
 8008022:	20d6      	movs	r0, #214	; 0xd6
 8008024:	4039      	ands	r1, r7
 8008026:	04c0      	lsls	r0, r0, #19
 8008028:	4281      	cmp	r1, r0
 800802a:	dd00      	ble.n	800802e <_strtod_l+0x852>
 800802c:	e08d      	b.n	800814a <_strtod_l+0x96e>
 800802e:	23dc      	movs	r3, #220	; 0xdc
 8008030:	049b      	lsls	r3, r3, #18
 8008032:	4299      	cmp	r1, r3
 8008034:	dc00      	bgt.n	8008038 <_strtod_l+0x85c>
 8008036:	e6a7      	b.n	8007d88 <_strtod_l+0x5ac>
 8008038:	0030      	movs	r0, r6
 800803a:	0039      	movs	r1, r7
 800803c:	4b31      	ldr	r3, [pc, #196]	; (8008104 <_strtod_l+0x928>)
 800803e:	2200      	movs	r2, #0
 8008040:	f7f9 fb14 	bl	800166c <__aeabi_dmul>
 8008044:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <_strtod_l+0x924>)
 8008046:	0006      	movs	r6, r0
 8008048:	000f      	movs	r7, r1
 800804a:	420b      	tst	r3, r1
 800804c:	d000      	beq.n	8008050 <_strtod_l+0x874>
 800804e:	e631      	b.n	8007cb4 <_strtod_l+0x4d8>
 8008050:	2322      	movs	r3, #34	; 0x22
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e62d      	b.n	8007cb4 <_strtod_l+0x4d8>
 8008058:	234b      	movs	r3, #75	; 0x4b
 800805a:	1a9a      	subs	r2, r3, r2
 800805c:	3b4c      	subs	r3, #76	; 0x4c
 800805e:	4093      	lsls	r3, r2
 8008060:	4019      	ands	r1, r3
 8008062:	000f      	movs	r7, r1
 8008064:	e6e3      	b.n	8007e2e <_strtod_l+0x652>
 8008066:	2201      	movs	r2, #1
 8008068:	4252      	negs	r2, r2
 800806a:	409a      	lsls	r2, r3
 800806c:	4016      	ands	r6, r2
 800806e:	e6de      	b.n	8007e2e <_strtod_l+0x652>
 8008070:	4925      	ldr	r1, [pc, #148]	; (8008108 <_strtod_l+0x92c>)
 8008072:	1acb      	subs	r3, r1, r3
 8008074:	0001      	movs	r1, r0
 8008076:	4099      	lsls	r1, r3
 8008078:	9114      	str	r1, [sp, #80]	; 0x50
 800807a:	e743      	b.n	8007f04 <_strtod_l+0x728>
 800807c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800807e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008080:	9804      	ldr	r0, [sp, #16]
 8008082:	f001 fb83 	bl	800978c <__lshift>
 8008086:	901c      	str	r0, [sp, #112]	; 0x70
 8008088:	2800      	cmp	r0, #0
 800808a:	d000      	beq.n	800808e <_strtod_l+0x8b2>
 800808c:	e76e      	b.n	8007f6c <_strtod_l+0x790>
 800808e:	e608      	b.n	8007ca2 <_strtod_l+0x4c6>
 8008090:	970e      	str	r7, [sp, #56]	; 0x38
 8008092:	2800      	cmp	r0, #0
 8008094:	d177      	bne.n	8008186 <_strtod_l+0x9aa>
 8008096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008098:	033b      	lsls	r3, r7, #12
 800809a:	0b1b      	lsrs	r3, r3, #12
 800809c:	2a00      	cmp	r2, #0
 800809e:	d039      	beq.n	8008114 <_strtod_l+0x938>
 80080a0:	4a1a      	ldr	r2, [pc, #104]	; (800810c <_strtod_l+0x930>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d139      	bne.n	800811a <_strtod_l+0x93e>
 80080a6:	2101      	movs	r1, #1
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	4249      	negs	r1, r1
 80080ac:	0032      	movs	r2, r6
 80080ae:	0008      	movs	r0, r1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <_strtod_l+0x8f0>
 80080b4:	24d4      	movs	r4, #212	; 0xd4
 80080b6:	4b12      	ldr	r3, [pc, #72]	; (8008100 <_strtod_l+0x924>)
 80080b8:	0008      	movs	r0, r1
 80080ba:	403b      	ands	r3, r7
 80080bc:	04e4      	lsls	r4, r4, #19
 80080be:	42a3      	cmp	r3, r4
 80080c0:	d804      	bhi.n	80080cc <_strtod_l+0x8f0>
 80080c2:	306c      	adds	r0, #108	; 0x6c
 80080c4:	0d1b      	lsrs	r3, r3, #20
 80080c6:	1ac3      	subs	r3, r0, r3
 80080c8:	4099      	lsls	r1, r3
 80080ca:	0008      	movs	r0, r1
 80080cc:	4282      	cmp	r2, r0
 80080ce:	d124      	bne.n	800811a <_strtod_l+0x93e>
 80080d0:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <_strtod_l+0x934>)
 80080d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080d4:	4299      	cmp	r1, r3
 80080d6:	d102      	bne.n	80080de <_strtod_l+0x902>
 80080d8:	3201      	adds	r2, #1
 80080da:	d100      	bne.n	80080de <_strtod_l+0x902>
 80080dc:	e5e1      	b.n	8007ca2 <_strtod_l+0x4c6>
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <_strtod_l+0x924>)
 80080e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080e2:	2600      	movs	r6, #0
 80080e4:	401a      	ands	r2, r3
 80080e6:	0013      	movs	r3, r2
 80080e8:	2280      	movs	r2, #128	; 0x80
 80080ea:	0352      	lsls	r2, r2, #13
 80080ec:	189f      	adds	r7, r3, r2
 80080ee:	9b07      	ldr	r3, [sp, #28]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1a1      	bne.n	8008038 <_strtod_l+0x85c>
 80080f4:	e5de      	b.n	8007cb4 <_strtod_l+0x4d8>
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	0800f518 	.word	0x0800f518
 80080fc:	fffffc02 	.word	0xfffffc02
 8008100:	7ff00000 	.word	0x7ff00000
 8008104:	39500000 	.word	0x39500000
 8008108:	fffffbe2 	.word	0xfffffbe2
 800810c:	000fffff 	.word	0x000fffff
 8008110:	7fefffff 	.word	0x7fefffff
 8008114:	4333      	orrs	r3, r6
 8008116:	d100      	bne.n	800811a <_strtod_l+0x93e>
 8008118:	e77c      	b.n	8008014 <_strtod_l+0x838>
 800811a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01d      	beq.n	800815c <_strtod_l+0x980>
 8008120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008124:	4213      	tst	r3, r2
 8008126:	d0e2      	beq.n	80080ee <_strtod_l+0x912>
 8008128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800812a:	0030      	movs	r0, r6
 800812c:	0039      	movs	r1, r7
 800812e:	9a07      	ldr	r2, [sp, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d017      	beq.n	8008164 <_strtod_l+0x988>
 8008134:	f7ff fb3a 	bl	80077ac <sulp>
 8008138:	0002      	movs	r2, r0
 800813a:	000b      	movs	r3, r1
 800813c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800813e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008140:	f7f8 fb3a 	bl	80007b8 <__aeabi_dadd>
 8008144:	0006      	movs	r6, r0
 8008146:	000f      	movs	r7, r1
 8008148:	e7d1      	b.n	80080ee <_strtod_l+0x912>
 800814a:	2601      	movs	r6, #1
 800814c:	4013      	ands	r3, r2
 800814e:	4a98      	ldr	r2, [pc, #608]	; (80083b0 <_strtod_l+0xbd4>)
 8008150:	4276      	negs	r6, r6
 8008152:	189b      	adds	r3, r3, r2
 8008154:	4a97      	ldr	r2, [pc, #604]	; (80083b4 <_strtod_l+0xbd8>)
 8008156:	431a      	orrs	r2, r3
 8008158:	0017      	movs	r7, r2
 800815a:	e7c8      	b.n	80080ee <_strtod_l+0x912>
 800815c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800815e:	4233      	tst	r3, r6
 8008160:	d0c5      	beq.n	80080ee <_strtod_l+0x912>
 8008162:	e7e1      	b.n	8008128 <_strtod_l+0x94c>
 8008164:	f7ff fb22 	bl	80077ac <sulp>
 8008168:	0002      	movs	r2, r0
 800816a:	000b      	movs	r3, r1
 800816c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800816e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008170:	f7f9 fd3e 	bl	8001bf0 <__aeabi_dsub>
 8008174:	2200      	movs	r2, #0
 8008176:	2300      	movs	r3, #0
 8008178:	0006      	movs	r6, r0
 800817a:	000f      	movs	r7, r1
 800817c:	f7f8 f964 	bl	8000448 <__aeabi_dcmpeq>
 8008180:	2800      	cmp	r0, #0
 8008182:	d0b4      	beq.n	80080ee <_strtod_l+0x912>
 8008184:	e600      	b.n	8007d88 <_strtod_l+0x5ac>
 8008186:	9906      	ldr	r1, [sp, #24]
 8008188:	9805      	ldr	r0, [sp, #20]
 800818a:	f001 fce9 	bl	8009b60 <__ratio>
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	2200      	movs	r2, #0
 8008192:	05db      	lsls	r3, r3, #23
 8008194:	0004      	movs	r4, r0
 8008196:	000d      	movs	r5, r1
 8008198:	f7f8 f966 	bl	8000468 <__aeabi_dcmple>
 800819c:	2800      	cmp	r0, #0
 800819e:	d06d      	beq.n	800827c <_strtod_l+0xaa0>
 80081a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d000      	beq.n	80081a8 <_strtod_l+0x9cc>
 80081a6:	e07e      	b.n	80082a6 <_strtod_l+0xaca>
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	d158      	bne.n	800825e <_strtod_l+0xa82>
 80081ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ae:	031b      	lsls	r3, r3, #12
 80081b0:	d000      	beq.n	80081b4 <_strtod_l+0x9d8>
 80081b2:	e07f      	b.n	80082b4 <_strtod_l+0xad8>
 80081b4:	2200      	movs	r2, #0
 80081b6:	0020      	movs	r0, r4
 80081b8:	0029      	movs	r1, r5
 80081ba:	4b7f      	ldr	r3, [pc, #508]	; (80083b8 <_strtod_l+0xbdc>)
 80081bc:	f7f8 f94a 	bl	8000454 <__aeabi_dcmplt>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d158      	bne.n	8008276 <_strtod_l+0xa9a>
 80081c4:	0020      	movs	r0, r4
 80081c6:	0029      	movs	r1, r5
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b7c      	ldr	r3, [pc, #496]	; (80083bc <_strtod_l+0xbe0>)
 80081cc:	f7f9 fa4e 	bl	800166c <__aeabi_dmul>
 80081d0:	0004      	movs	r4, r0
 80081d2:	000d      	movs	r5, r1
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	061b      	lsls	r3, r3, #24
 80081d8:	940a      	str	r4, [sp, #40]	; 0x28
 80081da:	18eb      	adds	r3, r5, r3
 80081dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e2:	9212      	str	r2, [sp, #72]	; 0x48
 80081e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081e6:	4a76      	ldr	r2, [pc, #472]	; (80083c0 <_strtod_l+0xbe4>)
 80081e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ea:	4013      	ands	r3, r2
 80081ec:	9314      	str	r3, [sp, #80]	; 0x50
 80081ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081f0:	4b74      	ldr	r3, [pc, #464]	; (80083c4 <_strtod_l+0xbe8>)
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d000      	beq.n	80081f8 <_strtod_l+0xa1c>
 80081f6:	e091      	b.n	800831c <_strtod_l+0xb40>
 80081f8:	4a73      	ldr	r2, [pc, #460]	; (80083c8 <_strtod_l+0xbec>)
 80081fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fc:	4694      	mov	ip, r2
 80081fe:	4463      	add	r3, ip
 8008200:	001f      	movs	r7, r3
 8008202:	0030      	movs	r0, r6
 8008204:	0019      	movs	r1, r3
 8008206:	f001 fbe3 	bl	80099d0 <__ulp>
 800820a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800820e:	f7f9 fa2d 	bl	800166c <__aeabi_dmul>
 8008212:	0032      	movs	r2, r6
 8008214:	003b      	movs	r3, r7
 8008216:	f7f8 facf 	bl	80007b8 <__aeabi_dadd>
 800821a:	4a69      	ldr	r2, [pc, #420]	; (80083c0 <_strtod_l+0xbe4>)
 800821c:	4b6b      	ldr	r3, [pc, #428]	; (80083cc <_strtod_l+0xbf0>)
 800821e:	0006      	movs	r6, r0
 8008220:	400a      	ands	r2, r1
 8008222:	429a      	cmp	r2, r3
 8008224:	d949      	bls.n	80082ba <_strtod_l+0xade>
 8008226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008228:	4b69      	ldr	r3, [pc, #420]	; (80083d0 <_strtod_l+0xbf4>)
 800822a:	429a      	cmp	r2, r3
 800822c:	d103      	bne.n	8008236 <_strtod_l+0xa5a>
 800822e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008230:	3301      	adds	r3, #1
 8008232:	d100      	bne.n	8008236 <_strtod_l+0xa5a>
 8008234:	e535      	b.n	8007ca2 <_strtod_l+0x4c6>
 8008236:	2601      	movs	r6, #1
 8008238:	4f65      	ldr	r7, [pc, #404]	; (80083d0 <_strtod_l+0xbf4>)
 800823a:	4276      	negs	r6, r6
 800823c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800823e:	9804      	ldr	r0, [sp, #16]
 8008240:	f001 f8b8 	bl	80093b4 <_Bfree>
 8008244:	9908      	ldr	r1, [sp, #32]
 8008246:	9804      	ldr	r0, [sp, #16]
 8008248:	f001 f8b4 	bl	80093b4 <_Bfree>
 800824c:	9906      	ldr	r1, [sp, #24]
 800824e:	9804      	ldr	r0, [sp, #16]
 8008250:	f001 f8b0 	bl	80093b4 <_Bfree>
 8008254:	9905      	ldr	r1, [sp, #20]
 8008256:	9804      	ldr	r0, [sp, #16]
 8008258:	f001 f8ac 	bl	80093b4 <_Bfree>
 800825c:	e60b      	b.n	8007e76 <_strtod_l+0x69a>
 800825e:	2e01      	cmp	r6, #1
 8008260:	d103      	bne.n	800826a <_strtod_l+0xa8e>
 8008262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008264:	2b00      	cmp	r3, #0
 8008266:	d100      	bne.n	800826a <_strtod_l+0xa8e>
 8008268:	e58e      	b.n	8007d88 <_strtod_l+0x5ac>
 800826a:	2300      	movs	r3, #0
 800826c:	4c59      	ldr	r4, [pc, #356]	; (80083d4 <_strtod_l+0xbf8>)
 800826e:	930a      	str	r3, [sp, #40]	; 0x28
 8008270:	940b      	str	r4, [sp, #44]	; 0x2c
 8008272:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008274:	e01c      	b.n	80082b0 <_strtod_l+0xad4>
 8008276:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008278:	4d50      	ldr	r5, [pc, #320]	; (80083bc <_strtod_l+0xbe0>)
 800827a:	e7ab      	b.n	80081d4 <_strtod_l+0x9f8>
 800827c:	2200      	movs	r2, #0
 800827e:	0020      	movs	r0, r4
 8008280:	0029      	movs	r1, r5
 8008282:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <_strtod_l+0xbe0>)
 8008284:	f7f9 f9f2 	bl	800166c <__aeabi_dmul>
 8008288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800828a:	0004      	movs	r4, r0
 800828c:	000b      	movs	r3, r1
 800828e:	000d      	movs	r5, r1
 8008290:	2a00      	cmp	r2, #0
 8008292:	d104      	bne.n	800829e <_strtod_l+0xac2>
 8008294:	2280      	movs	r2, #128	; 0x80
 8008296:	0612      	lsls	r2, r2, #24
 8008298:	900a      	str	r0, [sp, #40]	; 0x28
 800829a:	188b      	adds	r3, r1, r2
 800829c:	e79e      	b.n	80081dc <_strtod_l+0xa00>
 800829e:	0002      	movs	r2, r0
 80082a0:	920a      	str	r2, [sp, #40]	; 0x28
 80082a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a4:	e79b      	b.n	80081de <_strtod_l+0xa02>
 80082a6:	2300      	movs	r3, #0
 80082a8:	4c43      	ldr	r4, [pc, #268]	; (80083b8 <_strtod_l+0xbdc>)
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80082ae:	2400      	movs	r4, #0
 80082b0:	4d41      	ldr	r5, [pc, #260]	; (80083b8 <_strtod_l+0xbdc>)
 80082b2:	e794      	b.n	80081de <_strtod_l+0xa02>
 80082b4:	2300      	movs	r3, #0
 80082b6:	4c47      	ldr	r4, [pc, #284]	; (80083d4 <_strtod_l+0xbf8>)
 80082b8:	e7f7      	b.n	80082aa <_strtod_l+0xace>
 80082ba:	23d4      	movs	r3, #212	; 0xd4
 80082bc:	049b      	lsls	r3, r3, #18
 80082be:	18cf      	adds	r7, r1, r3
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	970e      	str	r7, [sp, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1b9      	bne.n	800823c <_strtod_l+0xa60>
 80082c8:	4b3d      	ldr	r3, [pc, #244]	; (80083c0 <_strtod_l+0xbe4>)
 80082ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082cc:	403b      	ands	r3, r7
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d1b4      	bne.n	800823c <_strtod_l+0xa60>
 80082d2:	0020      	movs	r0, r4
 80082d4:	0029      	movs	r1, r5
 80082d6:	f7f8 f951 	bl	800057c <__aeabi_d2lz>
 80082da:	f7f8 f98b 	bl	80005f4 <__aeabi_l2d>
 80082de:	0002      	movs	r2, r0
 80082e0:	000b      	movs	r3, r1
 80082e2:	0020      	movs	r0, r4
 80082e4:	0029      	movs	r1, r5
 80082e6:	f7f9 fc83 	bl	8001bf0 <__aeabi_dsub>
 80082ea:	033b      	lsls	r3, r7, #12
 80082ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ee:	0b1b      	lsrs	r3, r3, #12
 80082f0:	4333      	orrs	r3, r6
 80082f2:	4313      	orrs	r3, r2
 80082f4:	0004      	movs	r4, r0
 80082f6:	000d      	movs	r5, r1
 80082f8:	4a37      	ldr	r2, [pc, #220]	; (80083d8 <_strtod_l+0xbfc>)
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d054      	beq.n	80083a8 <_strtod_l+0xbcc>
 80082fe:	4b37      	ldr	r3, [pc, #220]	; (80083dc <_strtod_l+0xc00>)
 8008300:	f7f8 f8a8 	bl	8000454 <__aeabi_dcmplt>
 8008304:	2800      	cmp	r0, #0
 8008306:	d000      	beq.n	800830a <_strtod_l+0xb2e>
 8008308:	e4d4      	b.n	8007cb4 <_strtod_l+0x4d8>
 800830a:	0020      	movs	r0, r4
 800830c:	0029      	movs	r1, r5
 800830e:	4a34      	ldr	r2, [pc, #208]	; (80083e0 <_strtod_l+0xc04>)
 8008310:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <_strtod_l+0xbe0>)
 8008312:	f7f8 f8b3 	bl	800047c <__aeabi_dcmpgt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d090      	beq.n	800823c <_strtod_l+0xa60>
 800831a:	e4cb      	b.n	8007cb4 <_strtod_l+0x4d8>
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d02b      	beq.n	800837a <_strtod_l+0xb9e>
 8008322:	23d4      	movs	r3, #212	; 0xd4
 8008324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008326:	04db      	lsls	r3, r3, #19
 8008328:	429a      	cmp	r2, r3
 800832a:	d826      	bhi.n	800837a <_strtod_l+0xb9e>
 800832c:	0020      	movs	r0, r4
 800832e:	0029      	movs	r1, r5
 8008330:	4a2c      	ldr	r2, [pc, #176]	; (80083e4 <_strtod_l+0xc08>)
 8008332:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <_strtod_l+0xc0c>)
 8008334:	f7f8 f898 	bl	8000468 <__aeabi_dcmple>
 8008338:	2800      	cmp	r0, #0
 800833a:	d017      	beq.n	800836c <_strtod_l+0xb90>
 800833c:	0020      	movs	r0, r4
 800833e:	0029      	movs	r1, r5
 8008340:	f7f8 f8fe 	bl	8000540 <__aeabi_d2uiz>
 8008344:	2800      	cmp	r0, #0
 8008346:	d100      	bne.n	800834a <_strtod_l+0xb6e>
 8008348:	3001      	adds	r0, #1
 800834a:	f7fa f857 	bl	80023fc <__aeabi_ui2d>
 800834e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008350:	0004      	movs	r4, r0
 8008352:	000b      	movs	r3, r1
 8008354:	000d      	movs	r5, r1
 8008356:	2a00      	cmp	r2, #0
 8008358:	d122      	bne.n	80083a0 <_strtod_l+0xbc4>
 800835a:	2280      	movs	r2, #128	; 0x80
 800835c:	0612      	lsls	r2, r2, #24
 800835e:	188b      	adds	r3, r1, r2
 8008360:	9016      	str	r0, [sp, #88]	; 0x58
 8008362:	9317      	str	r3, [sp, #92]	; 0x5c
 8008364:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008368:	9212      	str	r2, [sp, #72]	; 0x48
 800836a:	9313      	str	r3, [sp, #76]	; 0x4c
 800836c:	22d6      	movs	r2, #214	; 0xd6
 800836e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008370:	04d2      	lsls	r2, r2, #19
 8008372:	189b      	adds	r3, r3, r2
 8008374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	9313      	str	r3, [sp, #76]	; 0x4c
 800837a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800837c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800837e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008380:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008382:	f001 fb25 	bl	80099d0 <__ulp>
 8008386:	0002      	movs	r2, r0
 8008388:	000b      	movs	r3, r1
 800838a:	0030      	movs	r0, r6
 800838c:	0039      	movs	r1, r7
 800838e:	f7f9 f96d 	bl	800166c <__aeabi_dmul>
 8008392:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008396:	f7f8 fa0f 	bl	80007b8 <__aeabi_dadd>
 800839a:	0006      	movs	r6, r0
 800839c:	000f      	movs	r7, r1
 800839e:	e78f      	b.n	80082c0 <_strtod_l+0xae4>
 80083a0:	0002      	movs	r2, r0
 80083a2:	9216      	str	r2, [sp, #88]	; 0x58
 80083a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80083a6:	e7dd      	b.n	8008364 <_strtod_l+0xb88>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <_strtod_l+0xc10>)
 80083aa:	f7f8 f853 	bl	8000454 <__aeabi_dcmplt>
 80083ae:	e7b2      	b.n	8008316 <_strtod_l+0xb3a>
 80083b0:	fff00000 	.word	0xfff00000
 80083b4:	000fffff 	.word	0x000fffff
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	7fe00000 	.word	0x7fe00000
 80083c8:	fcb00000 	.word	0xfcb00000
 80083cc:	7c9fffff 	.word	0x7c9fffff
 80083d0:	7fefffff 	.word	0x7fefffff
 80083d4:	bff00000 	.word	0xbff00000
 80083d8:	94a03595 	.word	0x94a03595
 80083dc:	3fdfffff 	.word	0x3fdfffff
 80083e0:	35afe535 	.word	0x35afe535
 80083e4:	ffc00000 	.word	0xffc00000
 80083e8:	41dfffff 	.word	0x41dfffff
 80083ec:	3fcfffff 	.word	0x3fcfffff

080083f0 <_strtod_r>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	4b02      	ldr	r3, [pc, #8]	; (80083fc <_strtod_r+0xc>)
 80083f4:	f7ff f9f2 	bl	80077dc <_strtod_l>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	20000450 	.word	0x20000450

08008400 <strtod>:
 8008400:	b510      	push	{r4, lr}
 8008402:	4c04      	ldr	r4, [pc, #16]	; (8008414 <strtod+0x14>)
 8008404:	000a      	movs	r2, r1
 8008406:	0001      	movs	r1, r0
 8008408:	4b03      	ldr	r3, [pc, #12]	; (8008418 <strtod+0x18>)
 800840a:	6820      	ldr	r0, [r4, #0]
 800840c:	f7ff f9e6 	bl	80077dc <_strtod_l>
 8008410:	bd10      	pop	{r4, pc}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	200006e0 	.word	0x200006e0
 8008418:	20000450 	.word	0x20000450

0800841c <_strtol_l.constprop.0>:
 800841c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841e:	b087      	sub	sp, #28
 8008420:	001e      	movs	r6, r3
 8008422:	9005      	str	r0, [sp, #20]
 8008424:	9101      	str	r1, [sp, #4]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d048      	beq.n	80084be <_strtol_l.constprop.0+0xa2>
 800842c:	000b      	movs	r3, r1
 800842e:	2e24      	cmp	r6, #36	; 0x24
 8008430:	d845      	bhi.n	80084be <_strtol_l.constprop.0+0xa2>
 8008432:	4a3b      	ldr	r2, [pc, #236]	; (8008520 <_strtol_l.constprop.0+0x104>)
 8008434:	2108      	movs	r1, #8
 8008436:	4694      	mov	ip, r2
 8008438:	001a      	movs	r2, r3
 800843a:	4660      	mov	r0, ip
 800843c:	7814      	ldrb	r4, [r2, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	5d00      	ldrb	r0, [r0, r4]
 8008442:	001d      	movs	r5, r3
 8008444:	0007      	movs	r7, r0
 8008446:	400f      	ands	r7, r1
 8008448:	4208      	tst	r0, r1
 800844a:	d1f5      	bne.n	8008438 <_strtol_l.constprop.0+0x1c>
 800844c:	2c2d      	cmp	r4, #45	; 0x2d
 800844e:	d13d      	bne.n	80084cc <_strtol_l.constprop.0+0xb0>
 8008450:	2701      	movs	r7, #1
 8008452:	781c      	ldrb	r4, [r3, #0]
 8008454:	1c95      	adds	r5, r2, #2
 8008456:	2e00      	cmp	r6, #0
 8008458:	d05e      	beq.n	8008518 <_strtol_l.constprop.0+0xfc>
 800845a:	2e10      	cmp	r6, #16
 800845c:	d109      	bne.n	8008472 <_strtol_l.constprop.0+0x56>
 800845e:	2c30      	cmp	r4, #48	; 0x30
 8008460:	d107      	bne.n	8008472 <_strtol_l.constprop.0+0x56>
 8008462:	2220      	movs	r2, #32
 8008464:	782b      	ldrb	r3, [r5, #0]
 8008466:	4393      	bics	r3, r2
 8008468:	2b58      	cmp	r3, #88	; 0x58
 800846a:	d150      	bne.n	800850e <_strtol_l.constprop.0+0xf2>
 800846c:	2610      	movs	r6, #16
 800846e:	786c      	ldrb	r4, [r5, #1]
 8008470:	3502      	adds	r5, #2
 8008472:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <_strtol_l.constprop.0+0x108>)
 8008474:	0031      	movs	r1, r6
 8008476:	18fb      	adds	r3, r7, r3
 8008478:	0018      	movs	r0, r3
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	f7f7 fee4 	bl	8000248 <__aeabi_uidivmod>
 8008480:	2200      	movs	r2, #0
 8008482:	9104      	str	r1, [sp, #16]
 8008484:	2101      	movs	r1, #1
 8008486:	4684      	mov	ip, r0
 8008488:	0010      	movs	r0, r2
 800848a:	4249      	negs	r1, r1
 800848c:	0023      	movs	r3, r4
 800848e:	3b30      	subs	r3, #48	; 0x30
 8008490:	2b09      	cmp	r3, #9
 8008492:	d903      	bls.n	800849c <_strtol_l.constprop.0+0x80>
 8008494:	3b11      	subs	r3, #17
 8008496:	2b19      	cmp	r3, #25
 8008498:	d81d      	bhi.n	80084d6 <_strtol_l.constprop.0+0xba>
 800849a:	330a      	adds	r3, #10
 800849c:	429e      	cmp	r6, r3
 800849e:	dd1e      	ble.n	80084de <_strtol_l.constprop.0+0xc2>
 80084a0:	1c54      	adds	r4, r2, #1
 80084a2:	d009      	beq.n	80084b8 <_strtol_l.constprop.0+0x9c>
 80084a4:	000a      	movs	r2, r1
 80084a6:	4584      	cmp	ip, r0
 80084a8:	d306      	bcc.n	80084b8 <_strtol_l.constprop.0+0x9c>
 80084aa:	d102      	bne.n	80084b2 <_strtol_l.constprop.0+0x96>
 80084ac:	9c04      	ldr	r4, [sp, #16]
 80084ae:	429c      	cmp	r4, r3
 80084b0:	db02      	blt.n	80084b8 <_strtol_l.constprop.0+0x9c>
 80084b2:	2201      	movs	r2, #1
 80084b4:	4370      	muls	r0, r6
 80084b6:	1818      	adds	r0, r3, r0
 80084b8:	782c      	ldrb	r4, [r5, #0]
 80084ba:	3501      	adds	r5, #1
 80084bc:	e7e6      	b.n	800848c <_strtol_l.constprop.0+0x70>
 80084be:	f000 fa7d 	bl	80089bc <__errno>
 80084c2:	2316      	movs	r3, #22
 80084c4:	6003      	str	r3, [r0, #0]
 80084c6:	2000      	movs	r0, #0
 80084c8:	b007      	add	sp, #28
 80084ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084cc:	2c2b      	cmp	r4, #43	; 0x2b
 80084ce:	d1c2      	bne.n	8008456 <_strtol_l.constprop.0+0x3a>
 80084d0:	781c      	ldrb	r4, [r3, #0]
 80084d2:	1c95      	adds	r5, r2, #2
 80084d4:	e7bf      	b.n	8008456 <_strtol_l.constprop.0+0x3a>
 80084d6:	0023      	movs	r3, r4
 80084d8:	3b61      	subs	r3, #97	; 0x61
 80084da:	2b19      	cmp	r3, #25
 80084dc:	d9dd      	bls.n	800849a <_strtol_l.constprop.0+0x7e>
 80084de:	1c53      	adds	r3, r2, #1
 80084e0:	d109      	bne.n	80084f6 <_strtol_l.constprop.0+0xda>
 80084e2:	2322      	movs	r3, #34	; 0x22
 80084e4:	9a05      	ldr	r2, [sp, #20]
 80084e6:	9803      	ldr	r0, [sp, #12]
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0eb      	beq.n	80084c8 <_strtol_l.constprop.0+0xac>
 80084f0:	1e6b      	subs	r3, r5, #1
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	e007      	b.n	8008506 <_strtol_l.constprop.0+0xea>
 80084f6:	2f00      	cmp	r7, #0
 80084f8:	d000      	beq.n	80084fc <_strtol_l.constprop.0+0xe0>
 80084fa:	4240      	negs	r0, r0
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0e2      	beq.n	80084c8 <_strtol_l.constprop.0+0xac>
 8008502:	2a00      	cmp	r2, #0
 8008504:	d1f4      	bne.n	80084f0 <_strtol_l.constprop.0+0xd4>
 8008506:	9b02      	ldr	r3, [sp, #8]
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	e7dc      	b.n	80084c8 <_strtol_l.constprop.0+0xac>
 800850e:	2430      	movs	r4, #48	; 0x30
 8008510:	2e00      	cmp	r6, #0
 8008512:	d1ae      	bne.n	8008472 <_strtol_l.constprop.0+0x56>
 8008514:	3608      	adds	r6, #8
 8008516:	e7ac      	b.n	8008472 <_strtol_l.constprop.0+0x56>
 8008518:	2c30      	cmp	r4, #48	; 0x30
 800851a:	d0a2      	beq.n	8008462 <_strtol_l.constprop.0+0x46>
 800851c:	260a      	movs	r6, #10
 800851e:	e7a8      	b.n	8008472 <_strtol_l.constprop.0+0x56>
 8008520:	0800f541 	.word	0x0800f541
 8008524:	7fffffff 	.word	0x7fffffff

08008528 <_strtol_r>:
 8008528:	b510      	push	{r4, lr}
 800852a:	f7ff ff77 	bl	800841c <_strtol_l.constprop.0>
 800852e:	bd10      	pop	{r4, pc}

08008530 <strtol>:
 8008530:	b510      	push	{r4, lr}
 8008532:	4c04      	ldr	r4, [pc, #16]	; (8008544 <strtol+0x14>)
 8008534:	0013      	movs	r3, r2
 8008536:	000a      	movs	r2, r1
 8008538:	0001      	movs	r1, r0
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	f7ff ff6e 	bl	800841c <_strtol_l.constprop.0>
 8008540:	bd10      	pop	{r4, pc}
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	200006e0 	.word	0x200006e0

08008548 <std>:
 8008548:	2300      	movs	r3, #0
 800854a:	b510      	push	{r4, lr}
 800854c:	0004      	movs	r4, r0
 800854e:	6003      	str	r3, [r0, #0]
 8008550:	6043      	str	r3, [r0, #4]
 8008552:	6083      	str	r3, [r0, #8]
 8008554:	8181      	strh	r1, [r0, #12]
 8008556:	6643      	str	r3, [r0, #100]	; 0x64
 8008558:	81c2      	strh	r2, [r0, #14]
 800855a:	6103      	str	r3, [r0, #16]
 800855c:	6143      	str	r3, [r0, #20]
 800855e:	6183      	str	r3, [r0, #24]
 8008560:	0019      	movs	r1, r3
 8008562:	2208      	movs	r2, #8
 8008564:	305c      	adds	r0, #92	; 0x5c
 8008566:	f000 f97d 	bl	8008864 <memset>
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <std+0x50>)
 800856c:	61e4      	str	r4, [r4, #28]
 800856e:	6223      	str	r3, [r4, #32]
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <std+0x54>)
 8008572:	6263      	str	r3, [r4, #36]	; 0x24
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <std+0x58>)
 8008576:	62a3      	str	r3, [r4, #40]	; 0x28
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <std+0x5c>)
 800857a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800857c:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <std+0x60>)
 800857e:	429c      	cmp	r4, r3
 8008580:	d005      	beq.n	800858e <std+0x46>
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <std+0x64>)
 8008584:	429c      	cmp	r4, r3
 8008586:	d002      	beq.n	800858e <std+0x46>
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <std+0x68>)
 800858a:	429c      	cmp	r4, r3
 800858c:	d103      	bne.n	8008596 <std+0x4e>
 800858e:	0020      	movs	r0, r4
 8008590:	3058      	adds	r0, #88	; 0x58
 8008592:	f000 fa3d 	bl	8008a10 <__retarget_lock_init_recursive>
 8008596:	bd10      	pop	{r4, pc}
 8008598:	080087c9 	.word	0x080087c9
 800859c:	080087f5 	.word	0x080087f5
 80085a0:	0800882d 	.word	0x0800882d
 80085a4:	08008859 	.word	0x08008859
 80085a8:	20000c88 	.word	0x20000c88
 80085ac:	20000cf0 	.word	0x20000cf0
 80085b0:	20000d58 	.word	0x20000d58

080085b4 <stdio_exit_handler>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4a03      	ldr	r2, [pc, #12]	; (80085c4 <stdio_exit_handler+0x10>)
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <stdio_exit_handler+0x14>)
 80085ba:	4804      	ldr	r0, [pc, #16]	; (80085cc <stdio_exit_handler+0x18>)
 80085bc:	f000 f86c 	bl	8008698 <_fwalk_sglue>
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	20000444 	.word	0x20000444
 80085c8:	0800c511 	.word	0x0800c511
 80085cc:	200005c0 	.word	0x200005c0

080085d0 <cleanup_stdio>:
 80085d0:	6841      	ldr	r1, [r0, #4]
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <cleanup_stdio+0x30>)
 80085d4:	b510      	push	{r4, lr}
 80085d6:	0004      	movs	r4, r0
 80085d8:	4299      	cmp	r1, r3
 80085da:	d001      	beq.n	80085e0 <cleanup_stdio+0x10>
 80085dc:	f003 ff98 	bl	800c510 <_fclose_r>
 80085e0:	68a1      	ldr	r1, [r4, #8]
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <cleanup_stdio+0x34>)
 80085e4:	4299      	cmp	r1, r3
 80085e6:	d002      	beq.n	80085ee <cleanup_stdio+0x1e>
 80085e8:	0020      	movs	r0, r4
 80085ea:	f003 ff91 	bl	800c510 <_fclose_r>
 80085ee:	68e1      	ldr	r1, [r4, #12]
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <cleanup_stdio+0x38>)
 80085f2:	4299      	cmp	r1, r3
 80085f4:	d002      	beq.n	80085fc <cleanup_stdio+0x2c>
 80085f6:	0020      	movs	r0, r4
 80085f8:	f003 ff8a 	bl	800c510 <_fclose_r>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	20000c88 	.word	0x20000c88
 8008604:	20000cf0 	.word	0x20000cf0
 8008608:	20000d58 	.word	0x20000d58

0800860c <global_stdio_init.part.0>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <global_stdio_init.part.0+0x28>)
 8008610:	4a09      	ldr	r2, [pc, #36]	; (8008638 <global_stdio_init.part.0+0x2c>)
 8008612:	2104      	movs	r1, #4
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	4809      	ldr	r0, [pc, #36]	; (800863c <global_stdio_init.part.0+0x30>)
 8008618:	2200      	movs	r2, #0
 800861a:	f7ff ff95 	bl	8008548 <std>
 800861e:	2201      	movs	r2, #1
 8008620:	2109      	movs	r1, #9
 8008622:	4807      	ldr	r0, [pc, #28]	; (8008640 <global_stdio_init.part.0+0x34>)
 8008624:	f7ff ff90 	bl	8008548 <std>
 8008628:	2202      	movs	r2, #2
 800862a:	2112      	movs	r1, #18
 800862c:	4805      	ldr	r0, [pc, #20]	; (8008644 <global_stdio_init.part.0+0x38>)
 800862e:	f7ff ff8b 	bl	8008548 <std>
 8008632:	bd10      	pop	{r4, pc}
 8008634:	20000dc0 	.word	0x20000dc0
 8008638:	080085b5 	.word	0x080085b5
 800863c:	20000c88 	.word	0x20000c88
 8008640:	20000cf0 	.word	0x20000cf0
 8008644:	20000d58 	.word	0x20000d58

08008648 <__sfp_lock_acquire>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4802      	ldr	r0, [pc, #8]	; (8008654 <__sfp_lock_acquire+0xc>)
 800864c:	f000 f9e2 	bl	8008a14 <__retarget_lock_acquire_recursive>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	20000dca 	.word	0x20000dca

08008658 <__sfp_lock_release>:
 8008658:	b510      	push	{r4, lr}
 800865a:	4802      	ldr	r0, [pc, #8]	; (8008664 <__sfp_lock_release+0xc>)
 800865c:	f000 f9db 	bl	8008a16 <__retarget_lock_release_recursive>
 8008660:	bd10      	pop	{r4, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	20000dca 	.word	0x20000dca

08008668 <__sinit>:
 8008668:	b510      	push	{r4, lr}
 800866a:	0004      	movs	r4, r0
 800866c:	f7ff ffec 	bl	8008648 <__sfp_lock_acquire>
 8008670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <__sinit+0x14>
 8008676:	f7ff ffef 	bl	8008658 <__sfp_lock_release>
 800867a:	bd10      	pop	{r4, pc}
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <__sinit+0x28>)
 800867e:	6363      	str	r3, [r4, #52]	; 0x34
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <__sinit+0x2c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f6      	bne.n	8008676 <__sinit+0xe>
 8008688:	f7ff ffc0 	bl	800860c <global_stdio_init.part.0>
 800868c:	e7f3      	b.n	8008676 <__sinit+0xe>
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	080085d1 	.word	0x080085d1
 8008694:	20000dc0 	.word	0x20000dc0

08008698 <_fwalk_sglue>:
 8008698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800869a:	0014      	movs	r4, r2
 800869c:	2600      	movs	r6, #0
 800869e:	9000      	str	r0, [sp, #0]
 80086a0:	9101      	str	r1, [sp, #4]
 80086a2:	68a5      	ldr	r5, [r4, #8]
 80086a4:	6867      	ldr	r7, [r4, #4]
 80086a6:	3f01      	subs	r7, #1
 80086a8:	d504      	bpl.n	80086b4 <_fwalk_sglue+0x1c>
 80086aa:	6824      	ldr	r4, [r4, #0]
 80086ac:	2c00      	cmp	r4, #0
 80086ae:	d1f8      	bne.n	80086a2 <_fwalk_sglue+0xa>
 80086b0:	0030      	movs	r0, r6
 80086b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086b4:	89ab      	ldrh	r3, [r5, #12]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d908      	bls.n	80086cc <_fwalk_sglue+0x34>
 80086ba:	220e      	movs	r2, #14
 80086bc:	5eab      	ldrsh	r3, [r5, r2]
 80086be:	3301      	adds	r3, #1
 80086c0:	d004      	beq.n	80086cc <_fwalk_sglue+0x34>
 80086c2:	0029      	movs	r1, r5
 80086c4:	9800      	ldr	r0, [sp, #0]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	4798      	blx	r3
 80086ca:	4306      	orrs	r6, r0
 80086cc:	3568      	adds	r5, #104	; 0x68
 80086ce:	e7ea      	b.n	80086a6 <_fwalk_sglue+0xe>

080086d0 <snprintf>:
 80086d0:	b40c      	push	{r2, r3}
 80086d2:	b530      	push	{r4, r5, lr}
 80086d4:	4b17      	ldr	r3, [pc, #92]	; (8008734 <snprintf+0x64>)
 80086d6:	000c      	movs	r4, r1
 80086d8:	681d      	ldr	r5, [r3, #0]
 80086da:	b09d      	sub	sp, #116	; 0x74
 80086dc:	2900      	cmp	r1, #0
 80086de:	da08      	bge.n	80086f2 <snprintf+0x22>
 80086e0:	238b      	movs	r3, #139	; 0x8b
 80086e2:	2001      	movs	r0, #1
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	4240      	negs	r0, r0
 80086e8:	b01d      	add	sp, #116	; 0x74
 80086ea:	bc30      	pop	{r4, r5}
 80086ec:	bc08      	pop	{r3}
 80086ee:	b002      	add	sp, #8
 80086f0:	4718      	bx	r3
 80086f2:	2382      	movs	r3, #130	; 0x82
 80086f4:	466a      	mov	r2, sp
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	8293      	strh	r3, [r2, #20]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9002      	str	r0, [sp, #8]
 80086fe:	9006      	str	r0, [sp, #24]
 8008700:	4299      	cmp	r1, r3
 8008702:	d000      	beq.n	8008706 <snprintf+0x36>
 8008704:	1e4b      	subs	r3, r1, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	9307      	str	r3, [sp, #28]
 800870a:	2301      	movs	r3, #1
 800870c:	466a      	mov	r2, sp
 800870e:	425b      	negs	r3, r3
 8008710:	82d3      	strh	r3, [r2, #22]
 8008712:	0028      	movs	r0, r5
 8008714:	ab21      	add	r3, sp, #132	; 0x84
 8008716:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008718:	a902      	add	r1, sp, #8
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f001 fa9a 	bl	8009c54 <_svfprintf_r>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	da01      	bge.n	8008728 <snprintf+0x58>
 8008724:	238b      	movs	r3, #139	; 0x8b
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	2c00      	cmp	r4, #0
 800872a:	d0dd      	beq.n	80086e8 <snprintf+0x18>
 800872c:	2200      	movs	r2, #0
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e7d9      	b.n	80086e8 <snprintf+0x18>
 8008734:	200006e0 	.word	0x200006e0

08008738 <sprintf>:
 8008738:	b40e      	push	{r1, r2, r3}
 800873a:	b500      	push	{lr}
 800873c:	490b      	ldr	r1, [pc, #44]	; (800876c <sprintf+0x34>)
 800873e:	b09c      	sub	sp, #112	; 0x70
 8008740:	ab1d      	add	r3, sp, #116	; 0x74
 8008742:	9002      	str	r0, [sp, #8]
 8008744:	9006      	str	r0, [sp, #24]
 8008746:	9107      	str	r1, [sp, #28]
 8008748:	9104      	str	r1, [sp, #16]
 800874a:	4809      	ldr	r0, [pc, #36]	; (8008770 <sprintf+0x38>)
 800874c:	4909      	ldr	r1, [pc, #36]	; (8008774 <sprintf+0x3c>)
 800874e:	cb04      	ldmia	r3!, {r2}
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	a902      	add	r1, sp, #8
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	f001 fa7c 	bl	8009c54 <_svfprintf_r>
 800875c:	2200      	movs	r2, #0
 800875e:	9b02      	ldr	r3, [sp, #8]
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	b01c      	add	sp, #112	; 0x70
 8008764:	bc08      	pop	{r3}
 8008766:	b003      	add	sp, #12
 8008768:	4718      	bx	r3
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	7fffffff 	.word	0x7fffffff
 8008770:	200006e0 	.word	0x200006e0
 8008774:	ffff0208 	.word	0xffff0208

08008778 <sscanf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	b530      	push	{r4, r5, lr}
 800877c:	2381      	movs	r3, #129	; 0x81
 800877e:	b09c      	sub	sp, #112	; 0x70
 8008780:	466a      	mov	r2, sp
 8008782:	ac1f      	add	r4, sp, #124	; 0x7c
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	cc20      	ldmia	r4!, {r5}
 8008788:	8293      	strh	r3, [r2, #20]
 800878a:	9002      	str	r0, [sp, #8]
 800878c:	9006      	str	r0, [sp, #24]
 800878e:	f7f7 fcb9 	bl	8000104 <strlen>
 8008792:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <sscanf+0x48>)
 8008794:	466a      	mov	r2, sp
 8008796:	930a      	str	r3, [sp, #40]	; 0x28
 8008798:	2300      	movs	r3, #0
 800879a:	9003      	str	r0, [sp, #12]
 800879c:	9007      	str	r0, [sp, #28]
 800879e:	4809      	ldr	r0, [pc, #36]	; (80087c4 <sscanf+0x4c>)
 80087a0:	930e      	str	r3, [sp, #56]	; 0x38
 80087a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80087a4:	3b01      	subs	r3, #1
 80087a6:	82d3      	strh	r3, [r2, #22]
 80087a8:	a902      	add	r1, sp, #8
 80087aa:	0023      	movs	r3, r4
 80087ac:	002a      	movs	r2, r5
 80087ae:	6800      	ldr	r0, [r0, #0]
 80087b0:	9401      	str	r4, [sp, #4]
 80087b2:	f002 fc91 	bl	800b0d8 <__ssvfscanf_r>
 80087b6:	b01c      	add	sp, #112	; 0x70
 80087b8:	bc30      	pop	{r4, r5}
 80087ba:	bc08      	pop	{r3}
 80087bc:	b003      	add	sp, #12
 80087be:	4718      	bx	r3
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	200006e0 	.word	0x200006e0

080087c8 <__sread>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	000c      	movs	r4, r1
 80087cc:	250e      	movs	r5, #14
 80087ce:	5f49      	ldrsh	r1, [r1, r5]
 80087d0:	f000 f8ba 	bl	8008948 <_read_r>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	db03      	blt.n	80087e0 <__sread+0x18>
 80087d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80087da:	181b      	adds	r3, r3, r0
 80087dc:	6523      	str	r3, [r4, #80]	; 0x50
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	4a02      	ldr	r2, [pc, #8]	; (80087ec <__sread+0x24>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	e7f9      	b.n	80087de <__sread+0x16>
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	ffffefff 	.word	0xffffefff

080087f0 <__seofread>:
 80087f0:	2000      	movs	r0, #0
 80087f2:	4770      	bx	lr

080087f4 <__swrite>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	001f      	movs	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	0005      	movs	r5, r0
 80087fc:	000c      	movs	r4, r1
 80087fe:	0016      	movs	r6, r2
 8008800:	05db      	lsls	r3, r3, #23
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1c>
 8008804:	230e      	movs	r3, #14
 8008806:	5ec9      	ldrsh	r1, [r1, r3]
 8008808:	2200      	movs	r2, #0
 800880a:	2302      	movs	r3, #2
 800880c:	f000 f888 	bl	8008920 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	4a05      	ldr	r2, [pc, #20]	; (8008828 <__swrite+0x34>)
 8008814:	0028      	movs	r0, r5
 8008816:	4013      	ands	r3, r2
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	0032      	movs	r2, r6
 800881c:	230e      	movs	r3, #14
 800881e:	5ee1      	ldrsh	r1, [r4, r3]
 8008820:	003b      	movs	r3, r7
 8008822:	f000 f8b7 	bl	8008994 <_write_r>
 8008826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008828:	ffffefff 	.word	0xffffefff

0800882c <__sseek>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	000c      	movs	r4, r1
 8008830:	250e      	movs	r5, #14
 8008832:	5f49      	ldrsh	r1, [r1, r5]
 8008834:	f000 f874 	bl	8008920 <_lseek_r>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	1c42      	adds	r2, r0, #1
 800883c:	d103      	bne.n	8008846 <__sseek+0x1a>
 800883e:	4a05      	ldr	r2, [pc, #20]	; (8008854 <__sseek+0x28>)
 8008840:	4013      	ands	r3, r2
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	2280      	movs	r2, #128	; 0x80
 8008848:	0152      	lsls	r2, r2, #5
 800884a:	4313      	orrs	r3, r2
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	6520      	str	r0, [r4, #80]	; 0x50
 8008850:	e7f8      	b.n	8008844 <__sseek+0x18>
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	ffffefff 	.word	0xffffefff

08008858 <__sclose>:
 8008858:	b510      	push	{r4, lr}
 800885a:	230e      	movs	r3, #14
 800885c:	5ec9      	ldrsh	r1, [r1, r3]
 800885e:	f000 f84d 	bl	80088fc <_close_r>
 8008862:	bd10      	pop	{r4, pc}

08008864 <memset>:
 8008864:	0003      	movs	r3, r0
 8008866:	1882      	adds	r2, r0, r2
 8008868:	4293      	cmp	r3, r2
 800886a:	d100      	bne.n	800886e <memset+0xa>
 800886c:	4770      	bx	lr
 800886e:	7019      	strb	r1, [r3, #0]
 8008870:	3301      	adds	r3, #1
 8008872:	e7f9      	b.n	8008868 <memset+0x4>

08008874 <strncmp>:
 8008874:	b530      	push	{r4, r5, lr}
 8008876:	0005      	movs	r5, r0
 8008878:	1e10      	subs	r0, r2, #0
 800887a:	d00b      	beq.n	8008894 <strncmp+0x20>
 800887c:	2400      	movs	r4, #0
 800887e:	3a01      	subs	r2, #1
 8008880:	5d2b      	ldrb	r3, [r5, r4]
 8008882:	5d08      	ldrb	r0, [r1, r4]
 8008884:	4283      	cmp	r3, r0
 8008886:	d104      	bne.n	8008892 <strncmp+0x1e>
 8008888:	42a2      	cmp	r2, r4
 800888a:	d002      	beq.n	8008892 <strncmp+0x1e>
 800888c:	3401      	adds	r4, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f6      	bne.n	8008880 <strncmp+0xc>
 8008892:	1a18      	subs	r0, r3, r0
 8008894:	bd30      	pop	{r4, r5, pc}

08008896 <strncpy>:
 8008896:	0003      	movs	r3, r0
 8008898:	b530      	push	{r4, r5, lr}
 800889a:	001d      	movs	r5, r3
 800889c:	2a00      	cmp	r2, #0
 800889e:	d006      	beq.n	80088ae <strncpy+0x18>
 80088a0:	780c      	ldrb	r4, [r1, #0]
 80088a2:	3a01      	subs	r2, #1
 80088a4:	3301      	adds	r3, #1
 80088a6:	702c      	strb	r4, [r5, #0]
 80088a8:	3101      	adds	r1, #1
 80088aa:	2c00      	cmp	r4, #0
 80088ac:	d1f5      	bne.n	800889a <strncpy+0x4>
 80088ae:	2100      	movs	r1, #0
 80088b0:	189a      	adds	r2, r3, r2
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d100      	bne.n	80088b8 <strncpy+0x22>
 80088b6:	bd30      	pop	{r4, r5, pc}
 80088b8:	7019      	strb	r1, [r3, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	e7f9      	b.n	80088b2 <strncpy+0x1c>

080088be <strstr>:
 80088be:	780a      	ldrb	r2, [r1, #0]
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d10c      	bne.n	80088e0 <strstr+0x22>
 80088c6:	bd30      	pop	{r4, r5, pc}
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d108      	bne.n	80088de <strstr+0x20>
 80088cc:	2301      	movs	r3, #1
 80088ce:	5ccc      	ldrb	r4, [r1, r3]
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	d0f8      	beq.n	80088c6 <strstr+0x8>
 80088d4:	5cc5      	ldrb	r5, [r0, r3]
 80088d6:	42a5      	cmp	r5, r4
 80088d8:	d101      	bne.n	80088de <strstr+0x20>
 80088da:	3301      	adds	r3, #1
 80088dc:	e7f7      	b.n	80088ce <strstr+0x10>
 80088de:	3001      	adds	r0, #1
 80088e0:	7803      	ldrb	r3, [r0, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f0      	bne.n	80088c8 <strstr+0xa>
 80088e6:	0018      	movs	r0, r3
 80088e8:	e7ed      	b.n	80088c6 <strstr+0x8>
	...

080088ec <__locale_mb_cur_max>:
 80088ec:	2294      	movs	r2, #148	; 0x94
 80088ee:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <__locale_mb_cur_max+0xc>)
 80088f0:	0052      	lsls	r2, r2, #1
 80088f2:	5c98      	ldrb	r0, [r3, r2]
 80088f4:	4770      	bx	lr
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	20000450 	.word	0x20000450

080088fc <_close_r>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	4d06      	ldr	r5, [pc, #24]	; (800891c <_close_r+0x20>)
 8008902:	0004      	movs	r4, r0
 8008904:	0008      	movs	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7fa fd4b 	bl	80033a2 <_close>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d103      	bne.n	8008918 <_close_r+0x1c>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d000      	beq.n	8008918 <_close_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	20000dc4 	.word	0x20000dc4

08008920 <_lseek_r>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	0004      	movs	r4, r0
 8008924:	0008      	movs	r0, r1
 8008926:	0011      	movs	r1, r2
 8008928:	001a      	movs	r2, r3
 800892a:	2300      	movs	r3, #0
 800892c:	4d05      	ldr	r5, [pc, #20]	; (8008944 <_lseek_r+0x24>)
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7fa fd58 	bl	80033e4 <_lseek>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d103      	bne.n	8008940 <_lseek_r+0x20>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d000      	beq.n	8008940 <_lseek_r+0x20>
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	20000dc4 	.word	0x20000dc4

08008948 <_read_r>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	0004      	movs	r4, r0
 800894c:	0008      	movs	r0, r1
 800894e:	0011      	movs	r1, r2
 8008950:	001a      	movs	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	4d05      	ldr	r5, [pc, #20]	; (800896c <_read_r+0x24>)
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7fa fcea 	bl	8003330 <_read>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d103      	bne.n	8008968 <_read_r+0x20>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d000      	beq.n	8008968 <_read_r+0x20>
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	20000dc4 	.word	0x20000dc4

08008970 <_sbrk_r>:
 8008970:	2300      	movs	r3, #0
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	4d06      	ldr	r5, [pc, #24]	; (8008990 <_sbrk_r+0x20>)
 8008976:	0004      	movs	r4, r0
 8008978:	0008      	movs	r0, r1
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	f7fa fd3e 	bl	80033fc <_sbrk>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d103      	bne.n	800898c <_sbrk_r+0x1c>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d000      	beq.n	800898c <_sbrk_r+0x1c>
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	bd70      	pop	{r4, r5, r6, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	20000dc4 	.word	0x20000dc4

08008994 <_write_r>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	0004      	movs	r4, r0
 8008998:	0008      	movs	r0, r1
 800899a:	0011      	movs	r1, r2
 800899c:	001a      	movs	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	4d05      	ldr	r5, [pc, #20]	; (80089b8 <_write_r+0x24>)
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7fa fce1 	bl	800336a <_write>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d103      	bne.n	80089b4 <_write_r+0x20>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d000      	beq.n	80089b4 <_write_r+0x20>
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	20000dc4 	.word	0x20000dc4

080089bc <__errno>:
 80089bc:	4b01      	ldr	r3, [pc, #4]	; (80089c4 <__errno+0x8>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	4770      	bx	lr
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	200006e0 	.word	0x200006e0

080089c8 <__libc_init_array>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	2600      	movs	r6, #0
 80089cc:	4c0c      	ldr	r4, [pc, #48]	; (8008a00 <__libc_init_array+0x38>)
 80089ce:	4d0d      	ldr	r5, [pc, #52]	; (8008a04 <__libc_init_array+0x3c>)
 80089d0:	1b64      	subs	r4, r4, r5
 80089d2:	10a4      	asrs	r4, r4, #2
 80089d4:	42a6      	cmp	r6, r4
 80089d6:	d109      	bne.n	80089ec <__libc_init_array+0x24>
 80089d8:	2600      	movs	r6, #0
 80089da:	f006 fcc5 	bl	800f368 <_init>
 80089de:	4c0a      	ldr	r4, [pc, #40]	; (8008a08 <__libc_init_array+0x40>)
 80089e0:	4d0a      	ldr	r5, [pc, #40]	; (8008a0c <__libc_init_array+0x44>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	42a6      	cmp	r6, r4
 80089e8:	d105      	bne.n	80089f6 <__libc_init_array+0x2e>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	00b3      	lsls	r3, r6, #2
 80089ee:	58eb      	ldr	r3, [r5, r3]
 80089f0:	4798      	blx	r3
 80089f2:	3601      	adds	r6, #1
 80089f4:	e7ee      	b.n	80089d4 <__libc_init_array+0xc>
 80089f6:	00b3      	lsls	r3, r6, #2
 80089f8:	58eb      	ldr	r3, [r5, r3]
 80089fa:	4798      	blx	r3
 80089fc:	3601      	adds	r6, #1
 80089fe:	e7f2      	b.n	80089e6 <__libc_init_array+0x1e>
 8008a00:	0800f95c 	.word	0x0800f95c
 8008a04:	0800f95c 	.word	0x0800f95c
 8008a08:	0800f964 	.word	0x0800f964
 8008a0c:	0800f95c 	.word	0x0800f95c

08008a10 <__retarget_lock_init_recursive>:
 8008a10:	4770      	bx	lr

08008a12 <__retarget_lock_close_recursive>:
 8008a12:	4770      	bx	lr

08008a14 <__retarget_lock_acquire_recursive>:
 8008a14:	4770      	bx	lr

08008a16 <__retarget_lock_release_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <sysconf>:
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	2808      	cmp	r0, #8
 8008a1e:	d004      	beq.n	8008a2a <sysconf+0x12>
 8008a20:	f7ff ffcc 	bl	80089bc <__errno>
 8008a24:	2316      	movs	r3, #22
 8008a26:	6003      	str	r3, [r0, #0]
 8008a28:	3b17      	subs	r3, #23
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <memcpy>:
 8008a2e:	2300      	movs	r3, #0
 8008a30:	b510      	push	{r4, lr}
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d100      	bne.n	8008a38 <memcpy+0xa>
 8008a36:	bd10      	pop	{r4, pc}
 8008a38:	5ccc      	ldrb	r4, [r1, r3]
 8008a3a:	54c4      	strb	r4, [r0, r3]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	e7f8      	b.n	8008a32 <memcpy+0x4>

08008a40 <nan>:
 8008a40:	2000      	movs	r0, #0
 8008a42:	4901      	ldr	r1, [pc, #4]	; (8008a48 <nan+0x8>)
 8008a44:	4770      	bx	lr
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	7ff80000 	.word	0x7ff80000

08008a4c <nanf>:
 8008a4c:	4800      	ldr	r0, [pc, #0]	; (8008a50 <nanf+0x4>)
 8008a4e:	4770      	bx	lr
 8008a50:	7fc00000 	.word	0x7fc00000

08008a54 <register_fini>:
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <register_fini+0x10>)
 8008a56:	b510      	push	{r4, lr}
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <register_fini+0xe>
 8008a5c:	4802      	ldr	r0, [pc, #8]	; (8008a68 <register_fini+0x14>)
 8008a5e:	f000 f805 	bl	8008a6c <atexit>
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	00000000 	.word	0x00000000
 8008a68:	0800c7c9 	.word	0x0800c7c9

08008a6c <atexit>:
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	0001      	movs	r1, r0
 8008a72:	001a      	movs	r2, r3
 8008a74:	0018      	movs	r0, r3
 8008a76:	f003 fef9 	bl	800c86c <__register_exitproc>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <_malloc_trim_r>:
 8008a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7e:	0004      	movs	r4, r0
 8008a80:	2008      	movs	r0, #8
 8008a82:	000d      	movs	r5, r1
 8008a84:	f7ff ffc8 	bl	8008a18 <sysconf>
 8008a88:	0006      	movs	r6, r0
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	f7fe fe7e 	bl	800778c <__malloc_lock>
 8008a90:	2203      	movs	r2, #3
 8008a92:	4f21      	ldr	r7, [pc, #132]	; (8008b18 <_malloc_trim_r+0x9c>)
 8008a94:	0031      	movs	r1, r6
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	4393      	bics	r3, r2
 8008a9c:	1b58      	subs	r0, r3, r5
 8008a9e:	3811      	subs	r0, #17
 8008aa0:	1980      	adds	r0, r0, r6
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f7f7 fb4a 	bl	800013c <__udivsi3>
 8008aa8:	1e45      	subs	r5, r0, #1
 8008aaa:	4375      	muls	r5, r6
 8008aac:	42ae      	cmp	r6, r5
 8008aae:	dd04      	ble.n	8008aba <_malloc_trim_r+0x3e>
 8008ab0:	0020      	movs	r0, r4
 8008ab2:	f7fe fe73 	bl	800779c <__malloc_unlock>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aba:	2100      	movs	r1, #0
 8008abc:	0020      	movs	r0, r4
 8008abe:	f7ff ff57 	bl	8008970 <_sbrk_r>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	9a01      	ldr	r2, [sp, #4]
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	4298      	cmp	r0, r3
 8008aca:	d1f1      	bne.n	8008ab0 <_malloc_trim_r+0x34>
 8008acc:	0020      	movs	r0, r4
 8008ace:	4269      	negs	r1, r5
 8008ad0:	f7ff ff4e 	bl	8008970 <_sbrk_r>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d110      	bne.n	8008afa <_malloc_trim_r+0x7e>
 8008ad8:	2100      	movs	r1, #0
 8008ada:	0020      	movs	r0, r4
 8008adc:	f7ff ff48 	bl	8008970 <_sbrk_r>
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	1a81      	subs	r1, r0, r2
 8008ae4:	290f      	cmp	r1, #15
 8008ae6:	dde3      	ble.n	8008ab0 <_malloc_trim_r+0x34>
 8008ae8:	4d0c      	ldr	r5, [pc, #48]	; (8008b1c <_malloc_trim_r+0xa0>)
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <_malloc_trim_r+0xa4>)
 8008aec:	682d      	ldr	r5, [r5, #0]
 8008aee:	1b40      	subs	r0, r0, r5
 8008af0:	6018      	str	r0, [r3, #0]
 8008af2:	2301      	movs	r3, #1
 8008af4:	430b      	orrs	r3, r1
 8008af6:	6053      	str	r3, [r2, #4]
 8008af8:	e7da      	b.n	8008ab0 <_malloc_trim_r+0x34>
 8008afa:	2601      	movs	r6, #1
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	1b5b      	subs	r3, r3, r5
 8008b02:	4333      	orrs	r3, r6
 8008b04:	6053      	str	r3, [r2, #4]
 8008b06:	4a06      	ldr	r2, [pc, #24]	; (8008b20 <_malloc_trim_r+0xa4>)
 8008b08:	0020      	movs	r0, r4
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	1b5b      	subs	r3, r3, r5
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f7fe fe44 	bl	800779c <__malloc_unlock>
 8008b14:	0030      	movs	r0, r6
 8008b16:	e7cf      	b.n	8008ab8 <_malloc_trim_r+0x3c>
 8008b18:	20000034 	.word	0x20000034
 8008b1c:	2000043c 	.word	0x2000043c
 8008b20:	20000c54 	.word	0x20000c54

08008b24 <_free_r>:
 8008b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b26:	1e0d      	subs	r5, r1, #0
 8008b28:	9001      	str	r0, [sp, #4]
 8008b2a:	d02d      	beq.n	8008b88 <_free_r+0x64>
 8008b2c:	f7fe fe2e 	bl	800778c <__malloc_lock>
 8008b30:	2301      	movs	r3, #1
 8008b32:	0029      	movs	r1, r5
 8008b34:	469c      	mov	ip, r3
 8008b36:	3908      	subs	r1, #8
 8008b38:	684f      	ldr	r7, [r1, #4]
 8008b3a:	4662      	mov	r2, ip
 8008b3c:	003b      	movs	r3, r7
 8008b3e:	4664      	mov	r4, ip
 8008b40:	4393      	bics	r3, r2
 8008b42:	18c8      	adds	r0, r1, r3
 8008b44:	6845      	ldr	r5, [r0, #4]
 8008b46:	3202      	adds	r2, #2
 8008b48:	4395      	bics	r5, r2
 8008b4a:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <_free_r+0x150>)
 8008b4c:	4027      	ands	r7, r4
 8008b4e:	6896      	ldr	r6, [r2, #8]
 8008b50:	4286      	cmp	r6, r0
 8008b52:	d11a      	bne.n	8008b8a <_free_r+0x66>
 8008b54:	195b      	adds	r3, r3, r5
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d106      	bne.n	8008b68 <_free_r+0x44>
 8008b5a:	6808      	ldr	r0, [r1, #0]
 8008b5c:	1a09      	subs	r1, r1, r0
 8008b5e:	688d      	ldr	r5, [r1, #8]
 8008b60:	181b      	adds	r3, r3, r0
 8008b62:	68c8      	ldr	r0, [r1, #12]
 8008b64:	60e8      	str	r0, [r5, #12]
 8008b66:	6085      	str	r5, [r0, #8]
 8008b68:	2001      	movs	r0, #1
 8008b6a:	4318      	orrs	r0, r3
 8008b6c:	6048      	str	r0, [r1, #4]
 8008b6e:	6091      	str	r1, [r2, #8]
 8008b70:	4a41      	ldr	r2, [pc, #260]	; (8008c78 <_free_r+0x154>)
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d804      	bhi.n	8008b82 <_free_r+0x5e>
 8008b78:	4b40      	ldr	r3, [pc, #256]	; (8008c7c <_free_r+0x158>)
 8008b7a:	9801      	ldr	r0, [sp, #4]
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	f7ff ff7d 	bl	8008a7c <_malloc_trim_r>
 8008b82:	9801      	ldr	r0, [sp, #4]
 8008b84:	f7fe fe0a 	bl	800779c <__malloc_unlock>
 8008b88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	6045      	str	r5, [r0, #4]
 8008b8e:	42b7      	cmp	r7, r6
 8008b90:	d109      	bne.n	8008ba6 <_free_r+0x82>
 8008b92:	680f      	ldr	r7, [r1, #0]
 8008b94:	4c3a      	ldr	r4, [pc, #232]	; (8008c80 <_free_r+0x15c>)
 8008b96:	1bc9      	subs	r1, r1, r7
 8008b98:	19db      	adds	r3, r3, r7
 8008b9a:	688f      	ldr	r7, [r1, #8]
 8008b9c:	42a7      	cmp	r7, r4
 8008b9e:	d02c      	beq.n	8008bfa <_free_r+0xd6>
 8008ba0:	68cc      	ldr	r4, [r1, #12]
 8008ba2:	60fc      	str	r4, [r7, #12]
 8008ba4:	60a7      	str	r7, [r4, #8]
 8008ba6:	1947      	adds	r7, r0, r5
 8008ba8:	687c      	ldr	r4, [r7, #4]
 8008baa:	2701      	movs	r7, #1
 8008bac:	423c      	tst	r4, r7
 8008bae:	d10b      	bne.n	8008bc8 <_free_r+0xa4>
 8008bb0:	195b      	adds	r3, r3, r5
 8008bb2:	6885      	ldr	r5, [r0, #8]
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	d122      	bne.n	8008bfe <_free_r+0xda>
 8008bb8:	4c31      	ldr	r4, [pc, #196]	; (8008c80 <_free_r+0x15c>)
 8008bba:	42a5      	cmp	r5, r4
 8008bbc:	d11f      	bne.n	8008bfe <_free_r+0xda>
 8008bbe:	003e      	movs	r6, r7
 8008bc0:	6151      	str	r1, [r2, #20]
 8008bc2:	6111      	str	r1, [r2, #16]
 8008bc4:	60cd      	str	r5, [r1, #12]
 8008bc6:	608d      	str	r5, [r1, #8]
 8008bc8:	2501      	movs	r5, #1
 8008bca:	0028      	movs	r0, r5
 8008bcc:	4318      	orrs	r0, r3
 8008bce:	6048      	str	r0, [r1, #4]
 8008bd0:	50cb      	str	r3, [r1, r3]
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	d1d5      	bne.n	8008b82 <_free_r+0x5e>
 8008bd6:	2080      	movs	r0, #128	; 0x80
 8008bd8:	0080      	lsls	r0, r0, #2
 8008bda:	4283      	cmp	r3, r0
 8008bdc:	d213      	bcs.n	8008c06 <_free_r+0xe2>
 8008bde:	08d8      	lsrs	r0, r3, #3
 8008be0:	095b      	lsrs	r3, r3, #5
 8008be2:	409d      	lsls	r5, r3
 8008be4:	6853      	ldr	r3, [r2, #4]
 8008be6:	431d      	orrs	r5, r3
 8008be8:	00c3      	lsls	r3, r0, #3
 8008bea:	189b      	adds	r3, r3, r2
 8008bec:	6055      	str	r5, [r2, #4]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	60cb      	str	r3, [r1, #12]
 8008bf2:	608a      	str	r2, [r1, #8]
 8008bf4:	6099      	str	r1, [r3, #8]
 8008bf6:	60d1      	str	r1, [r2, #12]
 8008bf8:	e7c3      	b.n	8008b82 <_free_r+0x5e>
 8008bfa:	4666      	mov	r6, ip
 8008bfc:	e7d3      	b.n	8008ba6 <_free_r+0x82>
 8008bfe:	68c0      	ldr	r0, [r0, #12]
 8008c00:	60e8      	str	r0, [r5, #12]
 8008c02:	6085      	str	r5, [r0, #8]
 8008c04:	e7e0      	b.n	8008bc8 <_free_r+0xa4>
 8008c06:	0a5d      	lsrs	r5, r3, #9
 8008c08:	2d04      	cmp	r5, #4
 8008c0a:	d812      	bhi.n	8008c32 <_free_r+0x10e>
 8008c0c:	0998      	lsrs	r0, r3, #6
 8008c0e:	3038      	adds	r0, #56	; 0x38
 8008c10:	00c6      	lsls	r6, r0, #3
 8008c12:	18b6      	adds	r6, r6, r2
 8008c14:	68b5      	ldr	r5, [r6, #8]
 8008c16:	2703      	movs	r7, #3
 8008c18:	42ae      	cmp	r6, r5
 8008c1a:	d125      	bne.n	8008c68 <_free_r+0x144>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	1080      	asrs	r0, r0, #2
 8008c20:	4083      	lsls	r3, r0
 8008c22:	6850      	ldr	r0, [r2, #4]
 8008c24:	4303      	orrs	r3, r0
 8008c26:	6053      	str	r3, [r2, #4]
 8008c28:	60ce      	str	r6, [r1, #12]
 8008c2a:	608d      	str	r5, [r1, #8]
 8008c2c:	60b1      	str	r1, [r6, #8]
 8008c2e:	60e9      	str	r1, [r5, #12]
 8008c30:	e7a7      	b.n	8008b82 <_free_r+0x5e>
 8008c32:	2d14      	cmp	r5, #20
 8008c34:	d802      	bhi.n	8008c3c <_free_r+0x118>
 8008c36:	0028      	movs	r0, r5
 8008c38:	305b      	adds	r0, #91	; 0x5b
 8008c3a:	e7e9      	b.n	8008c10 <_free_r+0xec>
 8008c3c:	2d54      	cmp	r5, #84	; 0x54
 8008c3e:	d802      	bhi.n	8008c46 <_free_r+0x122>
 8008c40:	0b18      	lsrs	r0, r3, #12
 8008c42:	306e      	adds	r0, #110	; 0x6e
 8008c44:	e7e4      	b.n	8008c10 <_free_r+0xec>
 8008c46:	20aa      	movs	r0, #170	; 0xaa
 8008c48:	0040      	lsls	r0, r0, #1
 8008c4a:	4285      	cmp	r5, r0
 8008c4c:	d802      	bhi.n	8008c54 <_free_r+0x130>
 8008c4e:	0bd8      	lsrs	r0, r3, #15
 8008c50:	3077      	adds	r0, #119	; 0x77
 8008c52:	e7dd      	b.n	8008c10 <_free_r+0xec>
 8008c54:	4e0b      	ldr	r6, [pc, #44]	; (8008c84 <_free_r+0x160>)
 8008c56:	207e      	movs	r0, #126	; 0x7e
 8008c58:	42b5      	cmp	r5, r6
 8008c5a:	d8d9      	bhi.n	8008c10 <_free_r+0xec>
 8008c5c:	0c98      	lsrs	r0, r3, #18
 8008c5e:	307c      	adds	r0, #124	; 0x7c
 8008c60:	e7d6      	b.n	8008c10 <_free_r+0xec>
 8008c62:	68ad      	ldr	r5, [r5, #8]
 8008c64:	42ae      	cmp	r6, r5
 8008c66:	d003      	beq.n	8008c70 <_free_r+0x14c>
 8008c68:	686a      	ldr	r2, [r5, #4]
 8008c6a:	43ba      	bics	r2, r7
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d8f8      	bhi.n	8008c62 <_free_r+0x13e>
 8008c70:	68ee      	ldr	r6, [r5, #12]
 8008c72:	e7d9      	b.n	8008c28 <_free_r+0x104>
 8008c74:	20000034 	.word	0x20000034
 8008c78:	20000440 	.word	0x20000440
 8008c7c:	20000c84 	.word	0x20000c84
 8008c80:	2000003c 	.word	0x2000003c
 8008c84:	00000554 	.word	0x00000554

08008c88 <rshift>:
 8008c88:	0002      	movs	r2, r0
 8008c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8c:	6904      	ldr	r4, [r0, #16]
 8008c8e:	114b      	asrs	r3, r1, #5
 8008c90:	b085      	sub	sp, #20
 8008c92:	3214      	adds	r2, #20
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	114d      	asrs	r5, r1, #5
 8008c98:	0013      	movs	r3, r2
 8008c9a:	42ac      	cmp	r4, r5
 8008c9c:	dd32      	ble.n	8008d04 <rshift+0x7c>
 8008c9e:	261f      	movs	r6, #31
 8008ca0:	000f      	movs	r7, r1
 8008ca2:	114b      	asrs	r3, r1, #5
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	00a5      	lsls	r5, r4, #2
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	4037      	ands	r7, r6
 8008cac:	1955      	adds	r5, r2, r5
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	9701      	str	r7, [sp, #4]
 8008cb2:	4231      	tst	r1, r6
 8008cb4:	d10d      	bne.n	8008cd2 <rshift+0x4a>
 8008cb6:	0016      	movs	r6, r2
 8008cb8:	0019      	movs	r1, r3
 8008cba:	428d      	cmp	r5, r1
 8008cbc:	d836      	bhi.n	8008d2c <rshift+0xa4>
 8008cbe:	9900      	ldr	r1, [sp, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	3903      	subs	r1, #3
 8008cc4:	428d      	cmp	r5, r1
 8008cc6:	d302      	bcc.n	8008cce <rshift+0x46>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	1ae4      	subs	r4, r4, r3
 8008ccc:	00a3      	lsls	r3, r4, #2
 8008cce:	18d3      	adds	r3, r2, r3
 8008cd0:	e018      	b.n	8008d04 <rshift+0x7c>
 8008cd2:	2120      	movs	r1, #32
 8008cd4:	9e01      	ldr	r6, [sp, #4]
 8008cd6:	9f01      	ldr	r7, [sp, #4]
 8008cd8:	1b89      	subs	r1, r1, r6
 8008cda:	9e00      	ldr	r6, [sp, #0]
 8008cdc:	9103      	str	r1, [sp, #12]
 8008cde:	ce02      	ldmia	r6!, {r1}
 8008ce0:	4694      	mov	ip, r2
 8008ce2:	40f9      	lsrs	r1, r7
 8008ce4:	42b5      	cmp	r5, r6
 8008ce6:	d816      	bhi.n	8008d16 <rshift+0x8e>
 8008ce8:	9e00      	ldr	r6, [sp, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	3601      	adds	r6, #1
 8008cee:	42b5      	cmp	r5, r6
 8008cf0:	d303      	bcc.n	8008cfa <rshift+0x72>
 8008cf2:	9b02      	ldr	r3, [sp, #8]
 8008cf4:	1ae3      	subs	r3, r4, r3
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	18d3      	adds	r3, r2, r3
 8008cfc:	6019      	str	r1, [r3, #0]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d000      	beq.n	8008d04 <rshift+0x7c>
 8008d02:	3304      	adds	r3, #4
 8008d04:	1a99      	subs	r1, r3, r2
 8008d06:	1089      	asrs	r1, r1, #2
 8008d08:	6101      	str	r1, [r0, #16]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d101      	bne.n	8008d12 <rshift+0x8a>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6143      	str	r3, [r0, #20]
 8008d12:	b005      	add	sp, #20
 8008d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d16:	6837      	ldr	r7, [r6, #0]
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	409f      	lsls	r7, r3
 8008d1c:	430f      	orrs	r7, r1
 8008d1e:	4661      	mov	r1, ip
 8008d20:	c180      	stmia	r1!, {r7}
 8008d22:	468c      	mov	ip, r1
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	ce02      	ldmia	r6!, {r1}
 8008d28:	40d9      	lsrs	r1, r3
 8008d2a:	e7db      	b.n	8008ce4 <rshift+0x5c>
 8008d2c:	c980      	ldmia	r1!, {r7}
 8008d2e:	c680      	stmia	r6!, {r7}
 8008d30:	e7c3      	b.n	8008cba <rshift+0x32>

08008d32 <__hexdig_fun>:
 8008d32:	0002      	movs	r2, r0
 8008d34:	3a30      	subs	r2, #48	; 0x30
 8008d36:	0003      	movs	r3, r0
 8008d38:	2a09      	cmp	r2, #9
 8008d3a:	d802      	bhi.n	8008d42 <__hexdig_fun+0x10>
 8008d3c:	3b20      	subs	r3, #32
 8008d3e:	b2d8      	uxtb	r0, r3
 8008d40:	4770      	bx	lr
 8008d42:	0002      	movs	r2, r0
 8008d44:	3a61      	subs	r2, #97	; 0x61
 8008d46:	2a05      	cmp	r2, #5
 8008d48:	d801      	bhi.n	8008d4e <__hexdig_fun+0x1c>
 8008d4a:	3b47      	subs	r3, #71	; 0x47
 8008d4c:	e7f7      	b.n	8008d3e <__hexdig_fun+0xc>
 8008d4e:	001a      	movs	r2, r3
 8008d50:	3a41      	subs	r2, #65	; 0x41
 8008d52:	2000      	movs	r0, #0
 8008d54:	2a05      	cmp	r2, #5
 8008d56:	d8f3      	bhi.n	8008d40 <__hexdig_fun+0xe>
 8008d58:	3b27      	subs	r3, #39	; 0x27
 8008d5a:	e7f0      	b.n	8008d3e <__hexdig_fun+0xc>

08008d5c <__gethex>:
 8008d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	2302      	movs	r3, #2
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	680a      	ldr	r2, [r1, #0]
 8008d68:	425b      	negs	r3, r3
 8008d6a:	9003      	str	r0, [sp, #12]
 8008d6c:	9106      	str	r1, [sp, #24]
 8008d6e:	1c96      	adds	r6, r2, #2
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	199a      	adds	r2, r3, r6
 8008d74:	9600      	str	r6, [sp, #0]
 8008d76:	9205      	str	r2, [sp, #20]
 8008d78:	9a00      	ldr	r2, [sp, #0]
 8008d7a:	3601      	adds	r6, #1
 8008d7c:	7810      	ldrb	r0, [r2, #0]
 8008d7e:	2830      	cmp	r0, #48	; 0x30
 8008d80:	d0f7      	beq.n	8008d72 <__gethex+0x16>
 8008d82:	f7ff ffd6 	bl	8008d32 <__hexdig_fun>
 8008d86:	2300      	movs	r3, #0
 8008d88:	001d      	movs	r5, r3
 8008d8a:	9302      	str	r3, [sp, #8]
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	d11d      	bne.n	8008dcc <__gethex+0x70>
 8008d90:	2201      	movs	r2, #1
 8008d92:	49a6      	ldr	r1, [pc, #664]	; (800902c <__gethex+0x2d0>)
 8008d94:	9800      	ldr	r0, [sp, #0]
 8008d96:	f7ff fd6d 	bl	8008874 <strncmp>
 8008d9a:	0007      	movs	r7, r0
 8008d9c:	42a8      	cmp	r0, r5
 8008d9e:	d169      	bne.n	8008e74 <__gethex+0x118>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	0034      	movs	r4, r6
 8008da4:	7858      	ldrb	r0, [r3, #1]
 8008da6:	f7ff ffc4 	bl	8008d32 <__hexdig_fun>
 8008daa:	2301      	movs	r3, #1
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	42a8      	cmp	r0, r5
 8008db0:	d02f      	beq.n	8008e12 <__gethex+0xb6>
 8008db2:	9600      	str	r6, [sp, #0]
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	7818      	ldrb	r0, [r3, #0]
 8008db8:	2830      	cmp	r0, #48	; 0x30
 8008dba:	d009      	beq.n	8008dd0 <__gethex+0x74>
 8008dbc:	f7ff ffb9 	bl	8008d32 <__hexdig_fun>
 8008dc0:	4242      	negs	r2, r0
 8008dc2:	4142      	adcs	r2, r0
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	0035      	movs	r5, r6
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	9c00      	ldr	r4, [sp, #0]
 8008dce:	e004      	b.n	8008dda <__gethex+0x7e>
 8008dd0:	9b00      	ldr	r3, [sp, #0]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	e7ed      	b.n	8008db4 <__gethex+0x58>
 8008dd8:	3401      	adds	r4, #1
 8008dda:	7820      	ldrb	r0, [r4, #0]
 8008ddc:	f7ff ffa9 	bl	8008d32 <__hexdig_fun>
 8008de0:	1e07      	subs	r7, r0, #0
 8008de2:	d1f9      	bne.n	8008dd8 <__gethex+0x7c>
 8008de4:	2201      	movs	r2, #1
 8008de6:	0020      	movs	r0, r4
 8008de8:	4990      	ldr	r1, [pc, #576]	; (800902c <__gethex+0x2d0>)
 8008dea:	f7ff fd43 	bl	8008874 <strncmp>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d10d      	bne.n	8008e0e <__gethex+0xb2>
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	d106      	bne.n	8008e04 <__gethex+0xa8>
 8008df6:	3401      	adds	r4, #1
 8008df8:	0025      	movs	r5, r4
 8008dfa:	7820      	ldrb	r0, [r4, #0]
 8008dfc:	f7ff ff99 	bl	8008d32 <__hexdig_fun>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d102      	bne.n	8008e0a <__gethex+0xae>
 8008e04:	1b2d      	subs	r5, r5, r4
 8008e06:	00af      	lsls	r7, r5, #2
 8008e08:	e003      	b.n	8008e12 <__gethex+0xb6>
 8008e0a:	3401      	adds	r4, #1
 8008e0c:	e7f5      	b.n	8008dfa <__gethex+0x9e>
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	d1f8      	bne.n	8008e04 <__gethex+0xa8>
 8008e12:	2220      	movs	r2, #32
 8008e14:	7823      	ldrb	r3, [r4, #0]
 8008e16:	0026      	movs	r6, r4
 8008e18:	4393      	bics	r3, r2
 8008e1a:	2b50      	cmp	r3, #80	; 0x50
 8008e1c:	d11d      	bne.n	8008e5a <__gethex+0xfe>
 8008e1e:	7863      	ldrb	r3, [r4, #1]
 8008e20:	2b2b      	cmp	r3, #43	; 0x2b
 8008e22:	d02c      	beq.n	8008e7e <__gethex+0x122>
 8008e24:	2b2d      	cmp	r3, #45	; 0x2d
 8008e26:	d02e      	beq.n	8008e86 <__gethex+0x12a>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	1c66      	adds	r6, r4, #1
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	7830      	ldrb	r0, [r6, #0]
 8008e30:	f7ff ff7f 	bl	8008d32 <__hexdig_fun>
 8008e34:	1e43      	subs	r3, r0, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b18      	cmp	r3, #24
 8008e3a:	d82b      	bhi.n	8008e94 <__gethex+0x138>
 8008e3c:	3810      	subs	r0, #16
 8008e3e:	0005      	movs	r5, r0
 8008e40:	7870      	ldrb	r0, [r6, #1]
 8008e42:	f7ff ff76 	bl	8008d32 <__hexdig_fun>
 8008e46:	1e43      	subs	r3, r0, #1
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	3601      	adds	r6, #1
 8008e4c:	2b18      	cmp	r3, #24
 8008e4e:	d91c      	bls.n	8008e8a <__gethex+0x12e>
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d000      	beq.n	8008e58 <__gethex+0xfc>
 8008e56:	426d      	negs	r5, r5
 8008e58:	197f      	adds	r7, r7, r5
 8008e5a:	9b06      	ldr	r3, [sp, #24]
 8008e5c:	601e      	str	r6, [r3, #0]
 8008e5e:	9b02      	ldr	r3, [sp, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d019      	beq.n	8008e98 <__gethex+0x13c>
 8008e64:	2600      	movs	r6, #0
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	42b3      	cmp	r3, r6
 8008e6a:	d100      	bne.n	8008e6e <__gethex+0x112>
 8008e6c:	3606      	adds	r6, #6
 8008e6e:	0030      	movs	r0, r6
 8008e70:	b009      	add	sp, #36	; 0x24
 8008e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e74:	2301      	movs	r3, #1
 8008e76:	2700      	movs	r7, #0
 8008e78:	9c00      	ldr	r4, [sp, #0]
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	e7c9      	b.n	8008e12 <__gethex+0xb6>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	1ca6      	adds	r6, r4, #2
 8008e84:	e7d3      	b.n	8008e2e <__gethex+0xd2>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e7fa      	b.n	8008e80 <__gethex+0x124>
 8008e8a:	230a      	movs	r3, #10
 8008e8c:	435d      	muls	r5, r3
 8008e8e:	182d      	adds	r5, r5, r0
 8008e90:	3d10      	subs	r5, #16
 8008e92:	e7d5      	b.n	8008e40 <__gethex+0xe4>
 8008e94:	0026      	movs	r6, r4
 8008e96:	e7e0      	b.n	8008e5a <__gethex+0xfe>
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	9902      	ldr	r1, [sp, #8]
 8008e9c:	1ae3      	subs	r3, r4, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	dc0a      	bgt.n	8008eba <__gethex+0x15e>
 8008ea4:	9803      	ldr	r0, [sp, #12]
 8008ea6:	f000 fa5d 	bl	8009364 <_Balloc>
 8008eaa:	1e05      	subs	r5, r0, #0
 8008eac:	d108      	bne.n	8008ec0 <__gethex+0x164>
 8008eae:	002a      	movs	r2, r5
 8008eb0:	21e4      	movs	r1, #228	; 0xe4
 8008eb2:	4b5f      	ldr	r3, [pc, #380]	; (8009030 <__gethex+0x2d4>)
 8008eb4:	485f      	ldr	r0, [pc, #380]	; (8009034 <__gethex+0x2d8>)
 8008eb6:	f003 fd19 	bl	800c8ec <__assert_func>
 8008eba:	3101      	adds	r1, #1
 8008ebc:	105b      	asrs	r3, r3, #1
 8008ebe:	e7ef      	b.n	8008ea0 <__gethex+0x144>
 8008ec0:	0003      	movs	r3, r0
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	9302      	str	r3, [sp, #8]
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	001e      	movs	r6, r3
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d33f      	bcc.n	8008f54 <__gethex+0x1f8>
 8008ed4:	9c05      	ldr	r4, [sp, #20]
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	c440      	stmia	r4!, {r6}
 8008eda:	1ae4      	subs	r4, r4, r3
 8008edc:	10a4      	asrs	r4, r4, #2
 8008ede:	0030      	movs	r0, r6
 8008ee0:	612c      	str	r4, [r5, #16]
 8008ee2:	f000 fb01 	bl	80094e8 <__hi0bits>
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	0164      	lsls	r4, r4, #5
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	1a26      	subs	r6, r4, r0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	429e      	cmp	r6, r3
 8008ef2:	dd51      	ble.n	8008f98 <__gethex+0x23c>
 8008ef4:	1af6      	subs	r6, r6, r3
 8008ef6:	0031      	movs	r1, r6
 8008ef8:	0028      	movs	r0, r5
 8008efa:	f000 fe7b 	bl	8009bf4 <__any_on>
 8008efe:	1e04      	subs	r4, r0, #0
 8008f00:	d016      	beq.n	8008f30 <__gethex+0x1d4>
 8008f02:	2401      	movs	r4, #1
 8008f04:	231f      	movs	r3, #31
 8008f06:	0020      	movs	r0, r4
 8008f08:	1e72      	subs	r2, r6, #1
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	4098      	lsls	r0, r3
 8008f0e:	0003      	movs	r3, r0
 8008f10:	1151      	asrs	r1, r2, #5
 8008f12:	9802      	ldr	r0, [sp, #8]
 8008f14:	0089      	lsls	r1, r1, #2
 8008f16:	5809      	ldr	r1, [r1, r0]
 8008f18:	4219      	tst	r1, r3
 8008f1a:	d009      	beq.n	8008f30 <__gethex+0x1d4>
 8008f1c:	42a2      	cmp	r2, r4
 8008f1e:	dd06      	ble.n	8008f2e <__gethex+0x1d2>
 8008f20:	0028      	movs	r0, r5
 8008f22:	1eb1      	subs	r1, r6, #2
 8008f24:	f000 fe66 	bl	8009bf4 <__any_on>
 8008f28:	3402      	adds	r4, #2
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d100      	bne.n	8008f30 <__gethex+0x1d4>
 8008f2e:	2402      	movs	r4, #2
 8008f30:	0031      	movs	r1, r6
 8008f32:	0028      	movs	r0, r5
 8008f34:	f7ff fea8 	bl	8008c88 <rshift>
 8008f38:	19bf      	adds	r7, r7, r6
 8008f3a:	9b01      	ldr	r3, [sp, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	42bb      	cmp	r3, r7
 8008f40:	da3a      	bge.n	8008fb8 <__gethex+0x25c>
 8008f42:	0029      	movs	r1, r5
 8008f44:	9803      	ldr	r0, [sp, #12]
 8008f46:	f000 fa35 	bl	80093b4 <_Bfree>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f4e:	26a3      	movs	r6, #163	; 0xa3
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	e78c      	b.n	8008e6e <__gethex+0x112>
 8008f54:	3c01      	subs	r4, #1
 8008f56:	7823      	ldrb	r3, [r4, #0]
 8008f58:	2b2e      	cmp	r3, #46	; 0x2e
 8008f5a:	d012      	beq.n	8008f82 <__gethex+0x226>
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d104      	bne.n	8008f6c <__gethex+0x210>
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	c340      	stmia	r3!, {r6}
 8008f66:	2600      	movs	r6, #0
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	9604      	str	r6, [sp, #16]
 8008f6c:	7820      	ldrb	r0, [r4, #0]
 8008f6e:	f7ff fee0 	bl	8008d32 <__hexdig_fun>
 8008f72:	230f      	movs	r3, #15
 8008f74:	4018      	ands	r0, r3
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	4098      	lsls	r0, r3
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4306      	orrs	r6, r0
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	e7a5      	b.n	8008ece <__gethex+0x172>
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d8e9      	bhi.n	8008f5c <__gethex+0x200>
 8008f88:	2201      	movs	r2, #1
 8008f8a:	0020      	movs	r0, r4
 8008f8c:	4927      	ldr	r1, [pc, #156]	; (800902c <__gethex+0x2d0>)
 8008f8e:	f7ff fc71 	bl	8008874 <strncmp>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1e2      	bne.n	8008f5c <__gethex+0x200>
 8008f96:	e79a      	b.n	8008ece <__gethex+0x172>
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	429e      	cmp	r6, r3
 8008f9e:	dacc      	bge.n	8008f3a <__gethex+0x1de>
 8008fa0:	1b9e      	subs	r6, r3, r6
 8008fa2:	0029      	movs	r1, r5
 8008fa4:	0032      	movs	r2, r6
 8008fa6:	9803      	ldr	r0, [sp, #12]
 8008fa8:	f000 fbf0 	bl	800978c <__lshift>
 8008fac:	0003      	movs	r3, r0
 8008fae:	3314      	adds	r3, #20
 8008fb0:	0005      	movs	r5, r0
 8008fb2:	1bbf      	subs	r7, r7, r6
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	e7c0      	b.n	8008f3a <__gethex+0x1de>
 8008fb8:	9b01      	ldr	r3, [sp, #4]
 8008fba:	685e      	ldr	r6, [r3, #4]
 8008fbc:	42be      	cmp	r6, r7
 8008fbe:	dd70      	ble.n	80090a2 <__gethex+0x346>
 8008fc0:	9b00      	ldr	r3, [sp, #0]
 8008fc2:	1bf6      	subs	r6, r6, r7
 8008fc4:	42b3      	cmp	r3, r6
 8008fc6:	dc37      	bgt.n	8009038 <__gethex+0x2dc>
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d024      	beq.n	800901a <__gethex+0x2be>
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d026      	beq.n	8009022 <__gethex+0x2c6>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d117      	bne.n	8009008 <__gethex+0x2ac>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	42b3      	cmp	r3, r6
 8008fdc:	d114      	bne.n	8009008 <__gethex+0x2ac>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d10b      	bne.n	8008ffa <__gethex+0x29e>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2662      	movs	r6, #98	; 0x62
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	2301      	movs	r3, #1
 8008fee:	9a02      	ldr	r2, [sp, #8]
 8008ff0:	612b      	str	r3, [r5, #16]
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff6:	601d      	str	r5, [r3, #0]
 8008ff8:	e739      	b.n	8008e6e <__gethex+0x112>
 8008ffa:	9900      	ldr	r1, [sp, #0]
 8008ffc:	0028      	movs	r0, r5
 8008ffe:	3901      	subs	r1, #1
 8009000:	f000 fdf8 	bl	8009bf4 <__any_on>
 8009004:	2800      	cmp	r0, #0
 8009006:	d1ec      	bne.n	8008fe2 <__gethex+0x286>
 8009008:	0029      	movs	r1, r5
 800900a:	9803      	ldr	r0, [sp, #12]
 800900c:	f000 f9d2 	bl	80093b4 <_Bfree>
 8009010:	2300      	movs	r3, #0
 8009012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009014:	2650      	movs	r6, #80	; 0x50
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e729      	b.n	8008e6e <__gethex+0x112>
 800901a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f3      	bne.n	8009008 <__gethex+0x2ac>
 8009020:	e7df      	b.n	8008fe2 <__gethex+0x286>
 8009022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1dc      	bne.n	8008fe2 <__gethex+0x286>
 8009028:	e7ee      	b.n	8009008 <__gethex+0x2ac>
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	0800f4ec 	.word	0x0800f4ec
 8009030:	0800f649 	.word	0x0800f649
 8009034:	0800f65a 	.word	0x0800f65a
 8009038:	1e77      	subs	r7, r6, #1
 800903a:	2c00      	cmp	r4, #0
 800903c:	d12f      	bne.n	800909e <__gethex+0x342>
 800903e:	2f00      	cmp	r7, #0
 8009040:	d004      	beq.n	800904c <__gethex+0x2f0>
 8009042:	0039      	movs	r1, r7
 8009044:	0028      	movs	r0, r5
 8009046:	f000 fdd5 	bl	8009bf4 <__any_on>
 800904a:	0004      	movs	r4, r0
 800904c:	231f      	movs	r3, #31
 800904e:	117a      	asrs	r2, r7, #5
 8009050:	401f      	ands	r7, r3
 8009052:	3b1e      	subs	r3, #30
 8009054:	40bb      	lsls	r3, r7
 8009056:	9902      	ldr	r1, [sp, #8]
 8009058:	0092      	lsls	r2, r2, #2
 800905a:	5852      	ldr	r2, [r2, r1]
 800905c:	421a      	tst	r2, r3
 800905e:	d001      	beq.n	8009064 <__gethex+0x308>
 8009060:	2302      	movs	r3, #2
 8009062:	431c      	orrs	r4, r3
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	0031      	movs	r1, r6
 8009068:	1b9b      	subs	r3, r3, r6
 800906a:	2602      	movs	r6, #2
 800906c:	0028      	movs	r0, r5
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	f7ff fe0a 	bl	8008c88 <rshift>
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	685f      	ldr	r7, [r3, #4]
 8009078:	2c00      	cmp	r4, #0
 800907a:	d041      	beq.n	8009100 <__gethex+0x3a4>
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d010      	beq.n	80090a6 <__gethex+0x34a>
 8009084:	2b03      	cmp	r3, #3
 8009086:	d012      	beq.n	80090ae <__gethex+0x352>
 8009088:	2b01      	cmp	r3, #1
 800908a:	d106      	bne.n	800909a <__gethex+0x33e>
 800908c:	07a2      	lsls	r2, r4, #30
 800908e:	d504      	bpl.n	800909a <__gethex+0x33e>
 8009090:	9a02      	ldr	r2, [sp, #8]
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	4314      	orrs	r4, r2
 8009096:	421c      	tst	r4, r3
 8009098:	d10c      	bne.n	80090b4 <__gethex+0x358>
 800909a:	2310      	movs	r3, #16
 800909c:	e02f      	b.n	80090fe <__gethex+0x3a2>
 800909e:	2401      	movs	r4, #1
 80090a0:	e7d4      	b.n	800904c <__gethex+0x2f0>
 80090a2:	2601      	movs	r6, #1
 80090a4:	e7e8      	b.n	8009078 <__gethex+0x31c>
 80090a6:	2301      	movs	r3, #1
 80090a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0f2      	beq.n	800909a <__gethex+0x33e>
 80090b4:	692b      	ldr	r3, [r5, #16]
 80090b6:	2000      	movs	r0, #0
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	002b      	movs	r3, r5
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	3314      	adds	r3, #20
 80090c4:	1899      	adds	r1, r3, r2
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	1c54      	adds	r4, r2, #1
 80090ca:	d01e      	beq.n	800910a <__gethex+0x3ae>
 80090cc:	3201      	adds	r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	002b      	movs	r3, r5
 80090d2:	3314      	adds	r3, #20
 80090d4:	2e02      	cmp	r6, #2
 80090d6:	d141      	bne.n	800915c <__gethex+0x400>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	9900      	ldr	r1, [sp, #0]
 80090dc:	6812      	ldr	r2, [r2, #0]
 80090de:	3a01      	subs	r2, #1
 80090e0:	428a      	cmp	r2, r1
 80090e2:	d10b      	bne.n	80090fc <__gethex+0x3a0>
 80090e4:	221f      	movs	r2, #31
 80090e6:	9800      	ldr	r0, [sp, #0]
 80090e8:	1149      	asrs	r1, r1, #5
 80090ea:	4002      	ands	r2, r0
 80090ec:	2001      	movs	r0, #1
 80090ee:	0004      	movs	r4, r0
 80090f0:	4094      	lsls	r4, r2
 80090f2:	0089      	lsls	r1, r1, #2
 80090f4:	58cb      	ldr	r3, [r1, r3]
 80090f6:	4223      	tst	r3, r4
 80090f8:	d000      	beq.n	80090fc <__gethex+0x3a0>
 80090fa:	2601      	movs	r6, #1
 80090fc:	2320      	movs	r3, #32
 80090fe:	431e      	orrs	r6, r3
 8009100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009102:	601d      	str	r5, [r3, #0]
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	601f      	str	r7, [r3, #0]
 8009108:	e6b1      	b.n	8008e6e <__gethex+0x112>
 800910a:	c301      	stmia	r3!, {r0}
 800910c:	4299      	cmp	r1, r3
 800910e:	d8da      	bhi.n	80090c6 <__gethex+0x36a>
 8009110:	68ab      	ldr	r3, [r5, #8]
 8009112:	9a02      	ldr	r2, [sp, #8]
 8009114:	429a      	cmp	r2, r3
 8009116:	db18      	blt.n	800914a <__gethex+0x3ee>
 8009118:	6869      	ldr	r1, [r5, #4]
 800911a:	9803      	ldr	r0, [sp, #12]
 800911c:	3101      	adds	r1, #1
 800911e:	f000 f921 	bl	8009364 <_Balloc>
 8009122:	1e04      	subs	r4, r0, #0
 8009124:	d104      	bne.n	8009130 <__gethex+0x3d4>
 8009126:	0022      	movs	r2, r4
 8009128:	2184      	movs	r1, #132	; 0x84
 800912a:	4b1c      	ldr	r3, [pc, #112]	; (800919c <__gethex+0x440>)
 800912c:	481c      	ldr	r0, [pc, #112]	; (80091a0 <__gethex+0x444>)
 800912e:	e6c2      	b.n	8008eb6 <__gethex+0x15a>
 8009130:	0029      	movs	r1, r5
 8009132:	692a      	ldr	r2, [r5, #16]
 8009134:	310c      	adds	r1, #12
 8009136:	3202      	adds	r2, #2
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	300c      	adds	r0, #12
 800913c:	f7ff fc77 	bl	8008a2e <memcpy>
 8009140:	0029      	movs	r1, r5
 8009142:	9803      	ldr	r0, [sp, #12]
 8009144:	f000 f936 	bl	80093b4 <_Bfree>
 8009148:	0025      	movs	r5, r4
 800914a:	692b      	ldr	r3, [r5, #16]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	612a      	str	r2, [r5, #16]
 8009150:	2201      	movs	r2, #1
 8009152:	3304      	adds	r3, #4
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	18eb      	adds	r3, r5, r3
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	e7b9      	b.n	80090d0 <__gethex+0x374>
 800915c:	692a      	ldr	r2, [r5, #16]
 800915e:	9902      	ldr	r1, [sp, #8]
 8009160:	428a      	cmp	r2, r1
 8009162:	dd09      	ble.n	8009178 <__gethex+0x41c>
 8009164:	2101      	movs	r1, #1
 8009166:	0028      	movs	r0, r5
 8009168:	f7ff fd8e 	bl	8008c88 <rshift>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	3701      	adds	r7, #1
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	42bb      	cmp	r3, r7
 8009174:	dac1      	bge.n	80090fa <__gethex+0x39e>
 8009176:	e6e4      	b.n	8008f42 <__gethex+0x1e6>
 8009178:	221f      	movs	r2, #31
 800917a:	9c00      	ldr	r4, [sp, #0]
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	2601      	movs	r6, #1
 8009180:	4014      	ands	r4, r2
 8009182:	4211      	tst	r1, r2
 8009184:	d0ba      	beq.n	80090fc <__gethex+0x3a0>
 8009186:	9a04      	ldr	r2, [sp, #16]
 8009188:	189b      	adds	r3, r3, r2
 800918a:	3b04      	subs	r3, #4
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	f000 f9ab 	bl	80094e8 <__hi0bits>
 8009192:	2320      	movs	r3, #32
 8009194:	1b1b      	subs	r3, r3, r4
 8009196:	4298      	cmp	r0, r3
 8009198:	dbe4      	blt.n	8009164 <__gethex+0x408>
 800919a:	e7af      	b.n	80090fc <__gethex+0x3a0>
 800919c:	0800f649 	.word	0x0800f649
 80091a0:	0800f65a 	.word	0x0800f65a

080091a4 <L_shift>:
 80091a4:	2308      	movs	r3, #8
 80091a6:	b570      	push	{r4, r5, r6, lr}
 80091a8:	2520      	movs	r5, #32
 80091aa:	1a9a      	subs	r2, r3, r2
 80091ac:	0092      	lsls	r2, r2, #2
 80091ae:	1aad      	subs	r5, r5, r2
 80091b0:	6843      	ldr	r3, [r0, #4]
 80091b2:	6804      	ldr	r4, [r0, #0]
 80091b4:	001e      	movs	r6, r3
 80091b6:	40ae      	lsls	r6, r5
 80091b8:	40d3      	lsrs	r3, r2
 80091ba:	4334      	orrs	r4, r6
 80091bc:	6004      	str	r4, [r0, #0]
 80091be:	6043      	str	r3, [r0, #4]
 80091c0:	3004      	adds	r0, #4
 80091c2:	4288      	cmp	r0, r1
 80091c4:	d3f4      	bcc.n	80091b0 <L_shift+0xc>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}

080091c8 <__match>:
 80091c8:	b530      	push	{r4, r5, lr}
 80091ca:	6803      	ldr	r3, [r0, #0]
 80091cc:	780c      	ldrb	r4, [r1, #0]
 80091ce:	3301      	adds	r3, #1
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	d102      	bne.n	80091da <__match+0x12>
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	2001      	movs	r0, #1
 80091d8:	bd30      	pop	{r4, r5, pc}
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	0015      	movs	r5, r2
 80091de:	3d41      	subs	r5, #65	; 0x41
 80091e0:	2d19      	cmp	r5, #25
 80091e2:	d800      	bhi.n	80091e6 <__match+0x1e>
 80091e4:	3220      	adds	r2, #32
 80091e6:	3101      	adds	r1, #1
 80091e8:	42a2      	cmp	r2, r4
 80091ea:	d0ef      	beq.n	80091cc <__match+0x4>
 80091ec:	2000      	movs	r0, #0
 80091ee:	e7f3      	b.n	80091d8 <__match+0x10>

080091f0 <__hexnan>:
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	680b      	ldr	r3, [r1, #0]
 80091f4:	b08b      	sub	sp, #44	; 0x2c
 80091f6:	9201      	str	r2, [sp, #4]
 80091f8:	9901      	ldr	r1, [sp, #4]
 80091fa:	115a      	asrs	r2, r3, #5
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	188a      	adds	r2, r1, r2
 8009200:	9202      	str	r2, [sp, #8]
 8009202:	0019      	movs	r1, r3
 8009204:	221f      	movs	r2, #31
 8009206:	4011      	ands	r1, r2
 8009208:	9008      	str	r0, [sp, #32]
 800920a:	9106      	str	r1, [sp, #24]
 800920c:	4213      	tst	r3, r2
 800920e:	d002      	beq.n	8009216 <__hexnan+0x26>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	3304      	adds	r3, #4
 8009214:	9302      	str	r3, [sp, #8]
 8009216:	9b02      	ldr	r3, [sp, #8]
 8009218:	2500      	movs	r5, #0
 800921a:	1f1f      	subs	r7, r3, #4
 800921c:	003e      	movs	r6, r7
 800921e:	003c      	movs	r4, r7
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	603d      	str	r5, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	9507      	str	r5, [sp, #28]
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	9503      	str	r5, [sp, #12]
 800922c:	9b05      	ldr	r3, [sp, #20]
 800922e:	3301      	adds	r3, #1
 8009230:	9309      	str	r3, [sp, #36]	; 0x24
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d028      	beq.n	800928e <__hexnan+0x9e>
 800923c:	9804      	ldr	r0, [sp, #16]
 800923e:	f7ff fd78 	bl	8008d32 <__hexdig_fun>
 8009242:	2800      	cmp	r0, #0
 8009244:	d154      	bne.n	80092f0 <__hexnan+0x100>
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	2b20      	cmp	r3, #32
 800924a:	d819      	bhi.n	8009280 <__hexnan+0x90>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	9a07      	ldr	r2, [sp, #28]
 8009250:	4293      	cmp	r3, r2
 8009252:	dd12      	ble.n	800927a <__hexnan+0x8a>
 8009254:	42b4      	cmp	r4, r6
 8009256:	d206      	bcs.n	8009266 <__hexnan+0x76>
 8009258:	2d07      	cmp	r5, #7
 800925a:	dc04      	bgt.n	8009266 <__hexnan+0x76>
 800925c:	002a      	movs	r2, r5
 800925e:	0031      	movs	r1, r6
 8009260:	0020      	movs	r0, r4
 8009262:	f7ff ff9f 	bl	80091a4 <L_shift>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	2508      	movs	r5, #8
 800926a:	429c      	cmp	r4, r3
 800926c:	d905      	bls.n	800927a <__hexnan+0x8a>
 800926e:	1f26      	subs	r6, r4, #4
 8009270:	2500      	movs	r5, #0
 8009272:	0034      	movs	r4, r6
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	6035      	str	r5, [r6, #0]
 8009278:	9307      	str	r3, [sp, #28]
 800927a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	e7d5      	b.n	800922c <__hexnan+0x3c>
 8009280:	9b04      	ldr	r3, [sp, #16]
 8009282:	2b29      	cmp	r3, #41	; 0x29
 8009284:	d159      	bne.n	800933a <__hexnan+0x14a>
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	9a08      	ldr	r2, [sp, #32]
 800928a:	3302      	adds	r3, #2
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d052      	beq.n	800933a <__hexnan+0x14a>
 8009294:	42b4      	cmp	r4, r6
 8009296:	d206      	bcs.n	80092a6 <__hexnan+0xb6>
 8009298:	2d07      	cmp	r5, #7
 800929a:	dc04      	bgt.n	80092a6 <__hexnan+0xb6>
 800929c:	002a      	movs	r2, r5
 800929e:	0031      	movs	r1, r6
 80092a0:	0020      	movs	r0, r4
 80092a2:	f7ff ff7f 	bl	80091a4 <L_shift>
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	429c      	cmp	r4, r3
 80092aa:	d935      	bls.n	8009318 <__hexnan+0x128>
 80092ac:	001a      	movs	r2, r3
 80092ae:	0023      	movs	r3, r4
 80092b0:	cb02      	ldmia	r3!, {r1}
 80092b2:	c202      	stmia	r2!, {r1}
 80092b4:	429f      	cmp	r7, r3
 80092b6:	d2fb      	bcs.n	80092b0 <__hexnan+0xc0>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	1c62      	adds	r2, r4, #1
 80092bc:	1ed9      	subs	r1, r3, #3
 80092be:	2304      	movs	r3, #4
 80092c0:	4291      	cmp	r1, r2
 80092c2:	d305      	bcc.n	80092d0 <__hexnan+0xe0>
 80092c4:	9b02      	ldr	r3, [sp, #8]
 80092c6:	3b04      	subs	r3, #4
 80092c8:	1b1b      	subs	r3, r3, r4
 80092ca:	089b      	lsrs	r3, r3, #2
 80092cc:	3301      	adds	r3, #1
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	9a01      	ldr	r2, [sp, #4]
 80092d2:	18d3      	adds	r3, r2, r3
 80092d4:	2200      	movs	r2, #0
 80092d6:	c304      	stmia	r3!, {r2}
 80092d8:	429f      	cmp	r7, r3
 80092da:	d2fc      	bcs.n	80092d6 <__hexnan+0xe6>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <__hexnan+0xfc>
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	429f      	cmp	r7, r3
 80092e6:	d126      	bne.n	8009336 <__hexnan+0x146>
 80092e8:	2301      	movs	r3, #1
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	2005      	movs	r0, #5
 80092ee:	e025      	b.n	800933c <__hexnan+0x14c>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	3501      	adds	r5, #1
 80092f4:	3301      	adds	r3, #1
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	2d08      	cmp	r5, #8
 80092fa:	dd06      	ble.n	800930a <__hexnan+0x11a>
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	429c      	cmp	r4, r3
 8009300:	d9bb      	bls.n	800927a <__hexnan+0x8a>
 8009302:	2300      	movs	r3, #0
 8009304:	2501      	movs	r5, #1
 8009306:	3c04      	subs	r4, #4
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	220f      	movs	r2, #15
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	4010      	ands	r0, r2
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	4303      	orrs	r3, r0
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	e7b0      	b.n	800927a <__hexnan+0x8a>
 8009318:	9b06      	ldr	r3, [sp, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0de      	beq.n	80092dc <__hexnan+0xec>
 800931e:	2320      	movs	r3, #32
 8009320:	9a06      	ldr	r2, [sp, #24]
 8009322:	9902      	ldr	r1, [sp, #8]
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	2201      	movs	r2, #1
 8009328:	4252      	negs	r2, r2
 800932a:	40da      	lsrs	r2, r3
 800932c:	3904      	subs	r1, #4
 800932e:	680b      	ldr	r3, [r1, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	600b      	str	r3, [r1, #0]
 8009334:	e7d2      	b.n	80092dc <__hexnan+0xec>
 8009336:	3f04      	subs	r7, #4
 8009338:	e7d0      	b.n	80092dc <__hexnan+0xec>
 800933a:	2004      	movs	r0, #4
 800933c:	b00b      	add	sp, #44	; 0x2c
 800933e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009340 <__ascii_mbtowc>:
 8009340:	b082      	sub	sp, #8
 8009342:	2900      	cmp	r1, #0
 8009344:	d100      	bne.n	8009348 <__ascii_mbtowc+0x8>
 8009346:	a901      	add	r1, sp, #4
 8009348:	1e10      	subs	r0, r2, #0
 800934a:	d006      	beq.n	800935a <__ascii_mbtowc+0x1a>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d006      	beq.n	800935e <__ascii_mbtowc+0x1e>
 8009350:	7813      	ldrb	r3, [r2, #0]
 8009352:	600b      	str	r3, [r1, #0]
 8009354:	7810      	ldrb	r0, [r2, #0]
 8009356:	1e43      	subs	r3, r0, #1
 8009358:	4198      	sbcs	r0, r3
 800935a:	b002      	add	sp, #8
 800935c:	4770      	bx	lr
 800935e:	2002      	movs	r0, #2
 8009360:	4240      	negs	r0, r0
 8009362:	e7fa      	b.n	800935a <__ascii_mbtowc+0x1a>

08009364 <_Balloc>:
 8009364:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009366:	b570      	push	{r4, r5, r6, lr}
 8009368:	0006      	movs	r6, r0
 800936a:	000c      	movs	r4, r1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d012      	beq.n	8009396 <_Balloc+0x32>
 8009370:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009372:	00a2      	lsls	r2, r4, #2
 8009374:	189b      	adds	r3, r3, r2
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	2800      	cmp	r0, #0
 800937a:	d115      	bne.n	80093a8 <_Balloc+0x44>
 800937c:	2101      	movs	r1, #1
 800937e:	000d      	movs	r5, r1
 8009380:	40a5      	lsls	r5, r4
 8009382:	1d6a      	adds	r2, r5, #5
 8009384:	0030      	movs	r0, r6
 8009386:	0092      	lsls	r2, r2, #2
 8009388:	f003 face 	bl	800c928 <_calloc_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	d009      	beq.n	80093a4 <_Balloc+0x40>
 8009390:	6044      	str	r4, [r0, #4]
 8009392:	6085      	str	r5, [r0, #8]
 8009394:	e00a      	b.n	80093ac <_Balloc+0x48>
 8009396:	2221      	movs	r2, #33	; 0x21
 8009398:	2104      	movs	r1, #4
 800939a:	f003 fac5 	bl	800c928 <_calloc_r>
 800939e:	6470      	str	r0, [r6, #68]	; 0x44
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d1e5      	bne.n	8009370 <_Balloc+0xc>
 80093a4:	2000      	movs	r0, #0
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	6802      	ldr	r2, [r0, #0]
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	2300      	movs	r3, #0
 80093ae:	6103      	str	r3, [r0, #16]
 80093b0:	60c3      	str	r3, [r0, #12]
 80093b2:	e7f8      	b.n	80093a6 <_Balloc+0x42>

080093b4 <_Bfree>:
 80093b4:	2900      	cmp	r1, #0
 80093b6:	d006      	beq.n	80093c6 <_Bfree+0x12>
 80093b8:	684a      	ldr	r2, [r1, #4]
 80093ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	189b      	adds	r3, r3, r2
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	600a      	str	r2, [r1, #0]
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	4770      	bx	lr

080093c8 <__multadd>:
 80093c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ca:	000e      	movs	r6, r1
 80093cc:	9001      	str	r0, [sp, #4]
 80093ce:	000c      	movs	r4, r1
 80093d0:	001d      	movs	r5, r3
 80093d2:	2000      	movs	r0, #0
 80093d4:	690f      	ldr	r7, [r1, #16]
 80093d6:	3614      	adds	r6, #20
 80093d8:	6833      	ldr	r3, [r6, #0]
 80093da:	3001      	adds	r0, #1
 80093dc:	b299      	uxth	r1, r3
 80093de:	4351      	muls	r1, r2
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	4353      	muls	r3, r2
 80093e4:	1949      	adds	r1, r1, r5
 80093e6:	0c0d      	lsrs	r5, r1, #16
 80093e8:	195b      	adds	r3, r3, r5
 80093ea:	0c1d      	lsrs	r5, r3, #16
 80093ec:	b289      	uxth	r1, r1
 80093ee:	041b      	lsls	r3, r3, #16
 80093f0:	185b      	adds	r3, r3, r1
 80093f2:	c608      	stmia	r6!, {r3}
 80093f4:	4287      	cmp	r7, r0
 80093f6:	dcef      	bgt.n	80093d8 <__multadd+0x10>
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	d022      	beq.n	8009442 <__multadd+0x7a>
 80093fc:	68a3      	ldr	r3, [r4, #8]
 80093fe:	42bb      	cmp	r3, r7
 8009400:	dc19      	bgt.n	8009436 <__multadd+0x6e>
 8009402:	6861      	ldr	r1, [r4, #4]
 8009404:	9801      	ldr	r0, [sp, #4]
 8009406:	3101      	adds	r1, #1
 8009408:	f7ff ffac 	bl	8009364 <_Balloc>
 800940c:	1e06      	subs	r6, r0, #0
 800940e:	d105      	bne.n	800941c <__multadd+0x54>
 8009410:	0032      	movs	r2, r6
 8009412:	21ba      	movs	r1, #186	; 0xba
 8009414:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <__multadd+0x80>)
 8009416:	480d      	ldr	r0, [pc, #52]	; (800944c <__multadd+0x84>)
 8009418:	f003 fa68 	bl	800c8ec <__assert_func>
 800941c:	0021      	movs	r1, r4
 800941e:	6922      	ldr	r2, [r4, #16]
 8009420:	310c      	adds	r1, #12
 8009422:	3202      	adds	r2, #2
 8009424:	0092      	lsls	r2, r2, #2
 8009426:	300c      	adds	r0, #12
 8009428:	f7ff fb01 	bl	8008a2e <memcpy>
 800942c:	0021      	movs	r1, r4
 800942e:	9801      	ldr	r0, [sp, #4]
 8009430:	f7ff ffc0 	bl	80093b4 <_Bfree>
 8009434:	0034      	movs	r4, r6
 8009436:	1d3b      	adds	r3, r7, #4
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	18e3      	adds	r3, r4, r3
 800943c:	605d      	str	r5, [r3, #4]
 800943e:	1c7b      	adds	r3, r7, #1
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	0020      	movs	r0, r4
 8009444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	0800f649 	.word	0x0800f649
 800944c:	0800f6ba 	.word	0x0800f6ba

08009450 <__s2b>:
 8009450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009452:	0006      	movs	r6, r0
 8009454:	0018      	movs	r0, r3
 8009456:	000c      	movs	r4, r1
 8009458:	3008      	adds	r0, #8
 800945a:	2109      	movs	r1, #9
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	0015      	movs	r5, r2
 8009460:	f7f6 fef6 	bl	8000250 <__divsi3>
 8009464:	2301      	movs	r3, #1
 8009466:	2100      	movs	r1, #0
 8009468:	4283      	cmp	r3, r0
 800946a:	db0a      	blt.n	8009482 <__s2b+0x32>
 800946c:	0030      	movs	r0, r6
 800946e:	f7ff ff79 	bl	8009364 <_Balloc>
 8009472:	1e01      	subs	r1, r0, #0
 8009474:	d108      	bne.n	8009488 <__s2b+0x38>
 8009476:	000a      	movs	r2, r1
 8009478:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <__s2b+0x90>)
 800947a:	481a      	ldr	r0, [pc, #104]	; (80094e4 <__s2b+0x94>)
 800947c:	31d3      	adds	r1, #211	; 0xd3
 800947e:	f003 fa35 	bl	800c8ec <__assert_func>
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	3101      	adds	r1, #1
 8009486:	e7ef      	b.n	8009468 <__s2b+0x18>
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	6143      	str	r3, [r0, #20]
 800948c:	2301      	movs	r3, #1
 800948e:	6103      	str	r3, [r0, #16]
 8009490:	2d09      	cmp	r5, #9
 8009492:	dd18      	ble.n	80094c6 <__s2b+0x76>
 8009494:	0023      	movs	r3, r4
 8009496:	3309      	adds	r3, #9
 8009498:	001f      	movs	r7, r3
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	1964      	adds	r4, r4, r5
 800949e:	783b      	ldrb	r3, [r7, #0]
 80094a0:	220a      	movs	r2, #10
 80094a2:	0030      	movs	r0, r6
 80094a4:	3b30      	subs	r3, #48	; 0x30
 80094a6:	f7ff ff8f 	bl	80093c8 <__multadd>
 80094aa:	3701      	adds	r7, #1
 80094ac:	0001      	movs	r1, r0
 80094ae:	42a7      	cmp	r7, r4
 80094b0:	d1f5      	bne.n	800949e <__s2b+0x4e>
 80094b2:	002c      	movs	r4, r5
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	3c08      	subs	r4, #8
 80094b8:	191c      	adds	r4, r3, r4
 80094ba:	002f      	movs	r7, r5
 80094bc:	9b01      	ldr	r3, [sp, #4]
 80094be:	429f      	cmp	r7, r3
 80094c0:	db04      	blt.n	80094cc <__s2b+0x7c>
 80094c2:	0008      	movs	r0, r1
 80094c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094c6:	2509      	movs	r5, #9
 80094c8:	340a      	adds	r4, #10
 80094ca:	e7f6      	b.n	80094ba <__s2b+0x6a>
 80094cc:	1b63      	subs	r3, r4, r5
 80094ce:	5ddb      	ldrb	r3, [r3, r7]
 80094d0:	220a      	movs	r2, #10
 80094d2:	0030      	movs	r0, r6
 80094d4:	3b30      	subs	r3, #48	; 0x30
 80094d6:	f7ff ff77 	bl	80093c8 <__multadd>
 80094da:	3701      	adds	r7, #1
 80094dc:	0001      	movs	r1, r0
 80094de:	e7ed      	b.n	80094bc <__s2b+0x6c>
 80094e0:	0800f649 	.word	0x0800f649
 80094e4:	0800f6ba 	.word	0x0800f6ba

080094e8 <__hi0bits>:
 80094e8:	0003      	movs	r3, r0
 80094ea:	0c02      	lsrs	r2, r0, #16
 80094ec:	2000      	movs	r0, #0
 80094ee:	4282      	cmp	r2, r0
 80094f0:	d101      	bne.n	80094f6 <__hi0bits+0xe>
 80094f2:	041b      	lsls	r3, r3, #16
 80094f4:	3010      	adds	r0, #16
 80094f6:	0e1a      	lsrs	r2, r3, #24
 80094f8:	d101      	bne.n	80094fe <__hi0bits+0x16>
 80094fa:	3008      	adds	r0, #8
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	0f1a      	lsrs	r2, r3, #28
 8009500:	d101      	bne.n	8009506 <__hi0bits+0x1e>
 8009502:	3004      	adds	r0, #4
 8009504:	011b      	lsls	r3, r3, #4
 8009506:	0f9a      	lsrs	r2, r3, #30
 8009508:	d101      	bne.n	800950e <__hi0bits+0x26>
 800950a:	3002      	adds	r0, #2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	db03      	blt.n	800951a <__hi0bits+0x32>
 8009512:	3001      	adds	r0, #1
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	d400      	bmi.n	800951a <__hi0bits+0x32>
 8009518:	2020      	movs	r0, #32
 800951a:	4770      	bx	lr

0800951c <__lo0bits>:
 800951c:	6803      	ldr	r3, [r0, #0]
 800951e:	0001      	movs	r1, r0
 8009520:	2207      	movs	r2, #7
 8009522:	0018      	movs	r0, r3
 8009524:	4010      	ands	r0, r2
 8009526:	4213      	tst	r3, r2
 8009528:	d00d      	beq.n	8009546 <__lo0bits+0x2a>
 800952a:	3a06      	subs	r2, #6
 800952c:	2000      	movs	r0, #0
 800952e:	4213      	tst	r3, r2
 8009530:	d105      	bne.n	800953e <__lo0bits+0x22>
 8009532:	3002      	adds	r0, #2
 8009534:	4203      	tst	r3, r0
 8009536:	d003      	beq.n	8009540 <__lo0bits+0x24>
 8009538:	40d3      	lsrs	r3, r2
 800953a:	0010      	movs	r0, r2
 800953c:	600b      	str	r3, [r1, #0]
 800953e:	4770      	bx	lr
 8009540:	089b      	lsrs	r3, r3, #2
 8009542:	600b      	str	r3, [r1, #0]
 8009544:	e7fb      	b.n	800953e <__lo0bits+0x22>
 8009546:	b29a      	uxth	r2, r3
 8009548:	2a00      	cmp	r2, #0
 800954a:	d101      	bne.n	8009550 <__lo0bits+0x34>
 800954c:	2010      	movs	r0, #16
 800954e:	0c1b      	lsrs	r3, r3, #16
 8009550:	b2da      	uxtb	r2, r3
 8009552:	2a00      	cmp	r2, #0
 8009554:	d101      	bne.n	800955a <__lo0bits+0x3e>
 8009556:	3008      	adds	r0, #8
 8009558:	0a1b      	lsrs	r3, r3, #8
 800955a:	071a      	lsls	r2, r3, #28
 800955c:	d101      	bne.n	8009562 <__lo0bits+0x46>
 800955e:	3004      	adds	r0, #4
 8009560:	091b      	lsrs	r3, r3, #4
 8009562:	079a      	lsls	r2, r3, #30
 8009564:	d101      	bne.n	800956a <__lo0bits+0x4e>
 8009566:	3002      	adds	r0, #2
 8009568:	089b      	lsrs	r3, r3, #2
 800956a:	07da      	lsls	r2, r3, #31
 800956c:	d4e9      	bmi.n	8009542 <__lo0bits+0x26>
 800956e:	3001      	adds	r0, #1
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	d1e6      	bne.n	8009542 <__lo0bits+0x26>
 8009574:	2020      	movs	r0, #32
 8009576:	e7e2      	b.n	800953e <__lo0bits+0x22>

08009578 <__i2b>:
 8009578:	b510      	push	{r4, lr}
 800957a:	000c      	movs	r4, r1
 800957c:	2101      	movs	r1, #1
 800957e:	f7ff fef1 	bl	8009364 <_Balloc>
 8009582:	2800      	cmp	r0, #0
 8009584:	d107      	bne.n	8009596 <__i2b+0x1e>
 8009586:	2146      	movs	r1, #70	; 0x46
 8009588:	4c05      	ldr	r4, [pc, #20]	; (80095a0 <__i2b+0x28>)
 800958a:	0002      	movs	r2, r0
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <__i2b+0x2c>)
 800958e:	0020      	movs	r0, r4
 8009590:	31ff      	adds	r1, #255	; 0xff
 8009592:	f003 f9ab 	bl	800c8ec <__assert_func>
 8009596:	2301      	movs	r3, #1
 8009598:	6144      	str	r4, [r0, #20]
 800959a:	6103      	str	r3, [r0, #16]
 800959c:	bd10      	pop	{r4, pc}
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	0800f6ba 	.word	0x0800f6ba
 80095a4:	0800f649 	.word	0x0800f649

080095a8 <__multiply>:
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095aa:	0015      	movs	r5, r2
 80095ac:	690a      	ldr	r2, [r1, #16]
 80095ae:	692b      	ldr	r3, [r5, #16]
 80095b0:	000c      	movs	r4, r1
 80095b2:	b08b      	sub	sp, #44	; 0x2c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	da01      	bge.n	80095bc <__multiply+0x14>
 80095b8:	002c      	movs	r4, r5
 80095ba:	000d      	movs	r5, r1
 80095bc:	6927      	ldr	r7, [r4, #16]
 80095be:	692e      	ldr	r6, [r5, #16]
 80095c0:	6861      	ldr	r1, [r4, #4]
 80095c2:	19bb      	adds	r3, r7, r6
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	19ba      	adds	r2, r7, r6
 80095ca:	4293      	cmp	r3, r2
 80095cc:	da00      	bge.n	80095d0 <__multiply+0x28>
 80095ce:	3101      	adds	r1, #1
 80095d0:	f7ff fec8 	bl	8009364 <_Balloc>
 80095d4:	9002      	str	r0, [sp, #8]
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d106      	bne.n	80095e8 <__multiply+0x40>
 80095da:	21b1      	movs	r1, #177	; 0xb1
 80095dc:	4b48      	ldr	r3, [pc, #288]	; (8009700 <__multiply+0x158>)
 80095de:	4849      	ldr	r0, [pc, #292]	; (8009704 <__multiply+0x15c>)
 80095e0:	9a02      	ldr	r2, [sp, #8]
 80095e2:	0049      	lsls	r1, r1, #1
 80095e4:	f003 f982 	bl	800c8ec <__assert_func>
 80095e8:	9b02      	ldr	r3, [sp, #8]
 80095ea:	2200      	movs	r2, #0
 80095ec:	3314      	adds	r3, #20
 80095ee:	469c      	mov	ip, r3
 80095f0:	19bb      	adds	r3, r7, r6
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4463      	add	r3, ip
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	4663      	mov	r3, ip
 80095fa:	9904      	ldr	r1, [sp, #16]
 80095fc:	428b      	cmp	r3, r1
 80095fe:	d32a      	bcc.n	8009656 <__multiply+0xae>
 8009600:	0023      	movs	r3, r4
 8009602:	00bf      	lsls	r7, r7, #2
 8009604:	3314      	adds	r3, #20
 8009606:	3514      	adds	r5, #20
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	00b6      	lsls	r6, r6, #2
 800960c:	19db      	adds	r3, r3, r7
 800960e:	9305      	str	r3, [sp, #20]
 8009610:	19ab      	adds	r3, r5, r6
 8009612:	9309      	str	r3, [sp, #36]	; 0x24
 8009614:	2304      	movs	r3, #4
 8009616:	9306      	str	r3, [sp, #24]
 8009618:	0023      	movs	r3, r4
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	3315      	adds	r3, #21
 800961e:	9501      	str	r5, [sp, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d305      	bcc.n	8009630 <__multiply+0x88>
 8009624:	1b13      	subs	r3, r2, r4
 8009626:	3b15      	subs	r3, #21
 8009628:	089b      	lsrs	r3, r3, #2
 800962a:	3301      	adds	r3, #1
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	9306      	str	r3, [sp, #24]
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009634:	4293      	cmp	r3, r2
 8009636:	d310      	bcc.n	800965a <__multiply+0xb2>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dd05      	ble.n	800964a <__multiply+0xa2>
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	3b04      	subs	r3, #4
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d056      	beq.n	80096f8 <__multiply+0x150>
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	9a03      	ldr	r2, [sp, #12]
 800964e:	0018      	movs	r0, r3
 8009650:	611a      	str	r2, [r3, #16]
 8009652:	b00b      	add	sp, #44	; 0x2c
 8009654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009656:	c304      	stmia	r3!, {r2}
 8009658:	e7cf      	b.n	80095fa <__multiply+0x52>
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	b280      	uxth	r0, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	d01e      	beq.n	80096a2 <__multiply+0xfa>
 8009664:	4667      	mov	r7, ip
 8009666:	2500      	movs	r5, #0
 8009668:	9e08      	ldr	r6, [sp, #32]
 800966a:	ce02      	ldmia	r6!, {r1}
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	9307      	str	r3, [sp, #28]
 8009670:	b28b      	uxth	r3, r1
 8009672:	4343      	muls	r3, r0
 8009674:	001a      	movs	r2, r3
 8009676:	466b      	mov	r3, sp
 8009678:	8b9b      	ldrh	r3, [r3, #28]
 800967a:	18d3      	adds	r3, r2, r3
 800967c:	195b      	adds	r3, r3, r5
 800967e:	0c0d      	lsrs	r5, r1, #16
 8009680:	4345      	muls	r5, r0
 8009682:	9a07      	ldr	r2, [sp, #28]
 8009684:	0c11      	lsrs	r1, r2, #16
 8009686:	1869      	adds	r1, r5, r1
 8009688:	0c1a      	lsrs	r2, r3, #16
 800968a:	188a      	adds	r2, r1, r2
 800968c:	b29b      	uxth	r3, r3
 800968e:	0c15      	lsrs	r5, r2, #16
 8009690:	0412      	lsls	r2, r2, #16
 8009692:	431a      	orrs	r2, r3
 8009694:	9b05      	ldr	r3, [sp, #20]
 8009696:	c704      	stmia	r7!, {r2}
 8009698:	42b3      	cmp	r3, r6
 800969a:	d8e6      	bhi.n	800966a <__multiply+0xc2>
 800969c:	4663      	mov	r3, ip
 800969e:	9a06      	ldr	r2, [sp, #24]
 80096a0:	509d      	str	r5, [r3, r2]
 80096a2:	9b01      	ldr	r3, [sp, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	0c00      	lsrs	r0, r0, #16
 80096a8:	d020      	beq.n	80096ec <__multiply+0x144>
 80096aa:	4663      	mov	r3, ip
 80096ac:	0025      	movs	r5, r4
 80096ae:	4661      	mov	r1, ip
 80096b0:	2700      	movs	r7, #0
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3514      	adds	r5, #20
 80096b6:	682a      	ldr	r2, [r5, #0]
 80096b8:	680e      	ldr	r6, [r1, #0]
 80096ba:	b292      	uxth	r2, r2
 80096bc:	4342      	muls	r2, r0
 80096be:	0c36      	lsrs	r6, r6, #16
 80096c0:	1992      	adds	r2, r2, r6
 80096c2:	19d2      	adds	r2, r2, r7
 80096c4:	0416      	lsls	r6, r2, #16
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	431e      	orrs	r6, r3
 80096ca:	600e      	str	r6, [r1, #0]
 80096cc:	cd40      	ldmia	r5!, {r6}
 80096ce:	684b      	ldr	r3, [r1, #4]
 80096d0:	0c36      	lsrs	r6, r6, #16
 80096d2:	4346      	muls	r6, r0
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	0c12      	lsrs	r2, r2, #16
 80096d8:	18f3      	adds	r3, r6, r3
 80096da:	189b      	adds	r3, r3, r2
 80096dc:	9a05      	ldr	r2, [sp, #20]
 80096de:	0c1f      	lsrs	r7, r3, #16
 80096e0:	3104      	adds	r1, #4
 80096e2:	42aa      	cmp	r2, r5
 80096e4:	d8e7      	bhi.n	80096b6 <__multiply+0x10e>
 80096e6:	4662      	mov	r2, ip
 80096e8:	9906      	ldr	r1, [sp, #24]
 80096ea:	5053      	str	r3, [r2, r1]
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	3304      	adds	r3, #4
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	2304      	movs	r3, #4
 80096f4:	449c      	add	ip, r3
 80096f6:	e79b      	b.n	8009630 <__multiply+0x88>
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	e79b      	b.n	8009638 <__multiply+0x90>
 8009700:	0800f649 	.word	0x0800f649
 8009704:	0800f6ba 	.word	0x0800f6ba

08009708 <__pow5mult>:
 8009708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800970a:	2303      	movs	r3, #3
 800970c:	0015      	movs	r5, r2
 800970e:	0007      	movs	r7, r0
 8009710:	000e      	movs	r6, r1
 8009712:	401a      	ands	r2, r3
 8009714:	421d      	tst	r5, r3
 8009716:	d008      	beq.n	800972a <__pow5mult+0x22>
 8009718:	491a      	ldr	r1, [pc, #104]	; (8009784 <__pow5mult+0x7c>)
 800971a:	3a01      	subs	r2, #1
 800971c:	0092      	lsls	r2, r2, #2
 800971e:	5852      	ldr	r2, [r2, r1]
 8009720:	2300      	movs	r3, #0
 8009722:	0031      	movs	r1, r6
 8009724:	f7ff fe50 	bl	80093c8 <__multadd>
 8009728:	0006      	movs	r6, r0
 800972a:	10ad      	asrs	r5, r5, #2
 800972c:	d027      	beq.n	800977e <__pow5mult+0x76>
 800972e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009730:	2c00      	cmp	r4, #0
 8009732:	d107      	bne.n	8009744 <__pow5mult+0x3c>
 8009734:	0038      	movs	r0, r7
 8009736:	4914      	ldr	r1, [pc, #80]	; (8009788 <__pow5mult+0x80>)
 8009738:	f7ff ff1e 	bl	8009578 <__i2b>
 800973c:	2300      	movs	r3, #0
 800973e:	0004      	movs	r4, r0
 8009740:	6438      	str	r0, [r7, #64]	; 0x40
 8009742:	6003      	str	r3, [r0, #0]
 8009744:	2301      	movs	r3, #1
 8009746:	421d      	tst	r5, r3
 8009748:	d00a      	beq.n	8009760 <__pow5mult+0x58>
 800974a:	0031      	movs	r1, r6
 800974c:	0022      	movs	r2, r4
 800974e:	0038      	movs	r0, r7
 8009750:	f7ff ff2a 	bl	80095a8 <__multiply>
 8009754:	0031      	movs	r1, r6
 8009756:	9001      	str	r0, [sp, #4]
 8009758:	0038      	movs	r0, r7
 800975a:	f7ff fe2b 	bl	80093b4 <_Bfree>
 800975e:	9e01      	ldr	r6, [sp, #4]
 8009760:	106d      	asrs	r5, r5, #1
 8009762:	d00c      	beq.n	800977e <__pow5mult+0x76>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	2800      	cmp	r0, #0
 8009768:	d107      	bne.n	800977a <__pow5mult+0x72>
 800976a:	0022      	movs	r2, r4
 800976c:	0021      	movs	r1, r4
 800976e:	0038      	movs	r0, r7
 8009770:	f7ff ff1a 	bl	80095a8 <__multiply>
 8009774:	2300      	movs	r3, #0
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	0004      	movs	r4, r0
 800977c:	e7e2      	b.n	8009744 <__pow5mult+0x3c>
 800977e:	0030      	movs	r0, r6
 8009780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	0800f808 	.word	0x0800f808
 8009788:	00000271 	.word	0x00000271

0800978c <__lshift>:
 800978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978e:	000c      	movs	r4, r1
 8009790:	0017      	movs	r7, r2
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	1155      	asrs	r5, r2, #5
 8009796:	b087      	sub	sp, #28
 8009798:	18eb      	adds	r3, r5, r3
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	3301      	adds	r3, #1
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	6849      	ldr	r1, [r1, #4]
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	9004      	str	r0, [sp, #16]
 80097a6:	9a01      	ldr	r2, [sp, #4]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	db10      	blt.n	80097ce <__lshift+0x42>
 80097ac:	9804      	ldr	r0, [sp, #16]
 80097ae:	f7ff fdd9 	bl	8009364 <_Balloc>
 80097b2:	2300      	movs	r3, #0
 80097b4:	0002      	movs	r2, r0
 80097b6:	0006      	movs	r6, r0
 80097b8:	0019      	movs	r1, r3
 80097ba:	3214      	adds	r2, #20
 80097bc:	4298      	cmp	r0, r3
 80097be:	d10c      	bne.n	80097da <__lshift+0x4e>
 80097c0:	31df      	adds	r1, #223	; 0xdf
 80097c2:	0032      	movs	r2, r6
 80097c4:	4b26      	ldr	r3, [pc, #152]	; (8009860 <__lshift+0xd4>)
 80097c6:	4827      	ldr	r0, [pc, #156]	; (8009864 <__lshift+0xd8>)
 80097c8:	31ff      	adds	r1, #255	; 0xff
 80097ca:	f003 f88f 	bl	800c8ec <__assert_func>
 80097ce:	3101      	adds	r1, #1
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	e7e8      	b.n	80097a6 <__lshift+0x1a>
 80097d4:	0098      	lsls	r0, r3, #2
 80097d6:	5011      	str	r1, [r2, r0]
 80097d8:	3301      	adds	r3, #1
 80097da:	42ab      	cmp	r3, r5
 80097dc:	dbfa      	blt.n	80097d4 <__lshift+0x48>
 80097de:	43eb      	mvns	r3, r5
 80097e0:	17db      	asrs	r3, r3, #31
 80097e2:	401d      	ands	r5, r3
 80097e4:	211f      	movs	r1, #31
 80097e6:	0023      	movs	r3, r4
 80097e8:	0038      	movs	r0, r7
 80097ea:	00ad      	lsls	r5, r5, #2
 80097ec:	1955      	adds	r5, r2, r5
 80097ee:	6922      	ldr	r2, [r4, #16]
 80097f0:	3314      	adds	r3, #20
 80097f2:	0092      	lsls	r2, r2, #2
 80097f4:	4008      	ands	r0, r1
 80097f6:	4684      	mov	ip, r0
 80097f8:	189a      	adds	r2, r3, r2
 80097fa:	420f      	tst	r7, r1
 80097fc:	d02a      	beq.n	8009854 <__lshift+0xc8>
 80097fe:	3101      	adds	r1, #1
 8009800:	1a09      	subs	r1, r1, r0
 8009802:	9105      	str	r1, [sp, #20]
 8009804:	2100      	movs	r1, #0
 8009806:	9503      	str	r5, [sp, #12]
 8009808:	4667      	mov	r7, ip
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	40b8      	lsls	r0, r7
 800980e:	4308      	orrs	r0, r1
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	c101      	stmia	r1!, {r0}
 8009814:	9103      	str	r1, [sp, #12]
 8009816:	9805      	ldr	r0, [sp, #20]
 8009818:	cb02      	ldmia	r3!, {r1}
 800981a:	40c1      	lsrs	r1, r0
 800981c:	429a      	cmp	r2, r3
 800981e:	d8f3      	bhi.n	8009808 <__lshift+0x7c>
 8009820:	0020      	movs	r0, r4
 8009822:	3015      	adds	r0, #21
 8009824:	2304      	movs	r3, #4
 8009826:	4282      	cmp	r2, r0
 8009828:	d304      	bcc.n	8009834 <__lshift+0xa8>
 800982a:	1b13      	subs	r3, r2, r4
 800982c:	3b15      	subs	r3, #21
 800982e:	089b      	lsrs	r3, r3, #2
 8009830:	3301      	adds	r3, #1
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	50e9      	str	r1, [r5, r3]
 8009836:	2900      	cmp	r1, #0
 8009838:	d002      	beq.n	8009840 <__lshift+0xb4>
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	3302      	adds	r3, #2
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	9804      	ldr	r0, [sp, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	0021      	movs	r1, r4
 8009848:	6133      	str	r3, [r6, #16]
 800984a:	f7ff fdb3 	bl	80093b4 <_Bfree>
 800984e:	0030      	movs	r0, r6
 8009850:	b007      	add	sp, #28
 8009852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009854:	cb02      	ldmia	r3!, {r1}
 8009856:	c502      	stmia	r5!, {r1}
 8009858:	429a      	cmp	r2, r3
 800985a:	d8fb      	bhi.n	8009854 <__lshift+0xc8>
 800985c:	e7f0      	b.n	8009840 <__lshift+0xb4>
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	0800f649 	.word	0x0800f649
 8009864:	0800f6ba 	.word	0x0800f6ba

08009868 <__mcmp>:
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	690b      	ldr	r3, [r1, #16]
 800986c:	6904      	ldr	r4, [r0, #16]
 800986e:	0002      	movs	r2, r0
 8009870:	1ae0      	subs	r0, r4, r3
 8009872:	429c      	cmp	r4, r3
 8009874:	d10e      	bne.n	8009894 <__mcmp+0x2c>
 8009876:	3214      	adds	r2, #20
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	3114      	adds	r1, #20
 800987c:	0014      	movs	r4, r2
 800987e:	18c9      	adds	r1, r1, r3
 8009880:	18d2      	adds	r2, r2, r3
 8009882:	3a04      	subs	r2, #4
 8009884:	3904      	subs	r1, #4
 8009886:	6815      	ldr	r5, [r2, #0]
 8009888:	680b      	ldr	r3, [r1, #0]
 800988a:	429d      	cmp	r5, r3
 800988c:	d003      	beq.n	8009896 <__mcmp+0x2e>
 800988e:	2001      	movs	r0, #1
 8009890:	429d      	cmp	r5, r3
 8009892:	d303      	bcc.n	800989c <__mcmp+0x34>
 8009894:	bd30      	pop	{r4, r5, pc}
 8009896:	4294      	cmp	r4, r2
 8009898:	d3f3      	bcc.n	8009882 <__mcmp+0x1a>
 800989a:	e7fb      	b.n	8009894 <__mcmp+0x2c>
 800989c:	4240      	negs	r0, r0
 800989e:	e7f9      	b.n	8009894 <__mcmp+0x2c>

080098a0 <__mdiff>:
 80098a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a2:	000e      	movs	r6, r1
 80098a4:	0007      	movs	r7, r0
 80098a6:	0011      	movs	r1, r2
 80098a8:	0030      	movs	r0, r6
 80098aa:	b087      	sub	sp, #28
 80098ac:	0014      	movs	r4, r2
 80098ae:	f7ff ffdb 	bl	8009868 <__mcmp>
 80098b2:	1e05      	subs	r5, r0, #0
 80098b4:	d110      	bne.n	80098d8 <__mdiff+0x38>
 80098b6:	0001      	movs	r1, r0
 80098b8:	0038      	movs	r0, r7
 80098ba:	f7ff fd53 	bl	8009364 <_Balloc>
 80098be:	1e02      	subs	r2, r0, #0
 80098c0:	d104      	bne.n	80098cc <__mdiff+0x2c>
 80098c2:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <__mdiff+0x120>)
 80098c4:	483f      	ldr	r0, [pc, #252]	; (80099c4 <__mdiff+0x124>)
 80098c6:	4940      	ldr	r1, [pc, #256]	; (80099c8 <__mdiff+0x128>)
 80098c8:	f003 f810 	bl	800c8ec <__assert_func>
 80098cc:	2301      	movs	r3, #1
 80098ce:	6145      	str	r5, [r0, #20]
 80098d0:	6103      	str	r3, [r0, #16]
 80098d2:	0010      	movs	r0, r2
 80098d4:	b007      	add	sp, #28
 80098d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d8:	2301      	movs	r3, #1
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	2800      	cmp	r0, #0
 80098de:	db04      	blt.n	80098ea <__mdiff+0x4a>
 80098e0:	0023      	movs	r3, r4
 80098e2:	0034      	movs	r4, r6
 80098e4:	001e      	movs	r6, r3
 80098e6:	2300      	movs	r3, #0
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	0038      	movs	r0, r7
 80098ec:	6861      	ldr	r1, [r4, #4]
 80098ee:	f7ff fd39 	bl	8009364 <_Balloc>
 80098f2:	1e02      	subs	r2, r0, #0
 80098f4:	d103      	bne.n	80098fe <__mdiff+0x5e>
 80098f6:	4b32      	ldr	r3, [pc, #200]	; (80099c0 <__mdiff+0x120>)
 80098f8:	4832      	ldr	r0, [pc, #200]	; (80099c4 <__mdiff+0x124>)
 80098fa:	4934      	ldr	r1, [pc, #208]	; (80099cc <__mdiff+0x12c>)
 80098fc:	e7e4      	b.n	80098c8 <__mdiff+0x28>
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	2700      	movs	r7, #0
 8009902:	60c3      	str	r3, [r0, #12]
 8009904:	6920      	ldr	r0, [r4, #16]
 8009906:	3414      	adds	r4, #20
 8009908:	0083      	lsls	r3, r0, #2
 800990a:	18e3      	adds	r3, r4, r3
 800990c:	0021      	movs	r1, r4
 800990e:	9401      	str	r4, [sp, #4]
 8009910:	0034      	movs	r4, r6
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	6933      	ldr	r3, [r6, #16]
 8009916:	3414      	adds	r4, #20
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	18e3      	adds	r3, r4, r3
 800991c:	9303      	str	r3, [sp, #12]
 800991e:	0013      	movs	r3, r2
 8009920:	3314      	adds	r3, #20
 8009922:	469c      	mov	ip, r3
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	9104      	str	r1, [sp, #16]
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	cc02      	ldmia	r4!, {r1}
 800992c:	cb20      	ldmia	r3!, {r5}
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	b2ab      	uxth	r3, r5
 8009932:	19df      	adds	r7, r3, r7
 8009934:	b28b      	uxth	r3, r1
 8009936:	1afb      	subs	r3, r7, r3
 8009938:	0c09      	lsrs	r1, r1, #16
 800993a:	0c2d      	lsrs	r5, r5, #16
 800993c:	1a6d      	subs	r5, r5, r1
 800993e:	1419      	asrs	r1, r3, #16
 8009940:	1869      	adds	r1, r5, r1
 8009942:	b29b      	uxth	r3, r3
 8009944:	140f      	asrs	r7, r1, #16
 8009946:	0409      	lsls	r1, r1, #16
 8009948:	4319      	orrs	r1, r3
 800994a:	4663      	mov	r3, ip
 800994c:	c302      	stmia	r3!, {r1}
 800994e:	469c      	mov	ip, r3
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	42a3      	cmp	r3, r4
 8009954:	d8e8      	bhi.n	8009928 <__mdiff+0x88>
 8009956:	0031      	movs	r1, r6
 8009958:	9c03      	ldr	r4, [sp, #12]
 800995a:	3115      	adds	r1, #21
 800995c:	2304      	movs	r3, #4
 800995e:	428c      	cmp	r4, r1
 8009960:	d304      	bcc.n	800996c <__mdiff+0xcc>
 8009962:	1ba3      	subs	r3, r4, r6
 8009964:	3b15      	subs	r3, #21
 8009966:	089b      	lsrs	r3, r3, #2
 8009968:	3301      	adds	r3, #1
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	9901      	ldr	r1, [sp, #4]
 800996e:	18cd      	adds	r5, r1, r3
 8009970:	9905      	ldr	r1, [sp, #20]
 8009972:	002e      	movs	r6, r5
 8009974:	18cb      	adds	r3, r1, r3
 8009976:	469c      	mov	ip, r3
 8009978:	9902      	ldr	r1, [sp, #8]
 800997a:	428e      	cmp	r6, r1
 800997c:	d310      	bcc.n	80099a0 <__mdiff+0x100>
 800997e:	9e02      	ldr	r6, [sp, #8]
 8009980:	1ee9      	subs	r1, r5, #3
 8009982:	2400      	movs	r4, #0
 8009984:	428e      	cmp	r6, r1
 8009986:	d304      	bcc.n	8009992 <__mdiff+0xf2>
 8009988:	0031      	movs	r1, r6
 800998a:	3103      	adds	r1, #3
 800998c:	1b49      	subs	r1, r1, r5
 800998e:	0889      	lsrs	r1, r1, #2
 8009990:	008c      	lsls	r4, r1, #2
 8009992:	191b      	adds	r3, r3, r4
 8009994:	3b04      	subs	r3, #4
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	2900      	cmp	r1, #0
 800999a:	d00f      	beq.n	80099bc <__mdiff+0x11c>
 800999c:	6110      	str	r0, [r2, #16]
 800999e:	e798      	b.n	80098d2 <__mdiff+0x32>
 80099a0:	ce02      	ldmia	r6!, {r1}
 80099a2:	b28c      	uxth	r4, r1
 80099a4:	19e4      	adds	r4, r4, r7
 80099a6:	0c0f      	lsrs	r7, r1, #16
 80099a8:	1421      	asrs	r1, r4, #16
 80099aa:	1879      	adds	r1, r7, r1
 80099ac:	b2a4      	uxth	r4, r4
 80099ae:	140f      	asrs	r7, r1, #16
 80099b0:	0409      	lsls	r1, r1, #16
 80099b2:	4321      	orrs	r1, r4
 80099b4:	4664      	mov	r4, ip
 80099b6:	c402      	stmia	r4!, {r1}
 80099b8:	46a4      	mov	ip, r4
 80099ba:	e7dd      	b.n	8009978 <__mdiff+0xd8>
 80099bc:	3801      	subs	r0, #1
 80099be:	e7e9      	b.n	8009994 <__mdiff+0xf4>
 80099c0:	0800f649 	.word	0x0800f649
 80099c4:	0800f6ba 	.word	0x0800f6ba
 80099c8:	00000237 	.word	0x00000237
 80099cc:	00000245 	.word	0x00000245

080099d0 <__ulp>:
 80099d0:	2000      	movs	r0, #0
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <__ulp+0x30>)
 80099d4:	4019      	ands	r1, r3
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <__ulp+0x34>)
 80099d8:	18c9      	adds	r1, r1, r3
 80099da:	4281      	cmp	r1, r0
 80099dc:	dc06      	bgt.n	80099ec <__ulp+0x1c>
 80099de:	4249      	negs	r1, r1
 80099e0:	150b      	asrs	r3, r1, #20
 80099e2:	2b13      	cmp	r3, #19
 80099e4:	dc03      	bgt.n	80099ee <__ulp+0x1e>
 80099e6:	2180      	movs	r1, #128	; 0x80
 80099e8:	0309      	lsls	r1, r1, #12
 80099ea:	4119      	asrs	r1, r3
 80099ec:	4770      	bx	lr
 80099ee:	3b14      	subs	r3, #20
 80099f0:	2001      	movs	r0, #1
 80099f2:	2b1e      	cmp	r3, #30
 80099f4:	dc02      	bgt.n	80099fc <__ulp+0x2c>
 80099f6:	2080      	movs	r0, #128	; 0x80
 80099f8:	0600      	lsls	r0, r0, #24
 80099fa:	40d8      	lsrs	r0, r3
 80099fc:	2100      	movs	r1, #0
 80099fe:	e7f5      	b.n	80099ec <__ulp+0x1c>
 8009a00:	7ff00000 	.word	0x7ff00000
 8009a04:	fcc00000 	.word	0xfcc00000

08009a08 <__b2d>:
 8009a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a0a:	0006      	movs	r6, r0
 8009a0c:	6903      	ldr	r3, [r0, #16]
 8009a0e:	3614      	adds	r6, #20
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	18f3      	adds	r3, r6, r3
 8009a14:	1f1d      	subs	r5, r3, #4
 8009a16:	682c      	ldr	r4, [r5, #0]
 8009a18:	000f      	movs	r7, r1
 8009a1a:	0020      	movs	r0, r4
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	f7ff fd63 	bl	80094e8 <__hi0bits>
 8009a22:	2220      	movs	r2, #32
 8009a24:	1a12      	subs	r2, r2, r0
 8009a26:	603a      	str	r2, [r7, #0]
 8009a28:	0003      	movs	r3, r0
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <__b2d+0x94>)
 8009a2c:	280a      	cmp	r0, #10
 8009a2e:	dc15      	bgt.n	8009a5c <__b2d+0x54>
 8009a30:	210b      	movs	r1, #11
 8009a32:	0027      	movs	r7, r4
 8009a34:	1a09      	subs	r1, r1, r0
 8009a36:	40cf      	lsrs	r7, r1
 8009a38:	433a      	orrs	r2, r7
 8009a3a:	468c      	mov	ip, r1
 8009a3c:	0011      	movs	r1, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	42ae      	cmp	r6, r5
 8009a42:	d202      	bcs.n	8009a4a <__b2d+0x42>
 8009a44:	9a01      	ldr	r2, [sp, #4]
 8009a46:	3a08      	subs	r2, #8
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	3315      	adds	r3, #21
 8009a4c:	409c      	lsls	r4, r3
 8009a4e:	4663      	mov	r3, ip
 8009a50:	0027      	movs	r7, r4
 8009a52:	40da      	lsrs	r2, r3
 8009a54:	4317      	orrs	r7, r2
 8009a56:	0038      	movs	r0, r7
 8009a58:	b003      	add	sp, #12
 8009a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5c:	2700      	movs	r7, #0
 8009a5e:	42ae      	cmp	r6, r5
 8009a60:	d202      	bcs.n	8009a68 <__b2d+0x60>
 8009a62:	9d01      	ldr	r5, [sp, #4]
 8009a64:	3d08      	subs	r5, #8
 8009a66:	682f      	ldr	r7, [r5, #0]
 8009a68:	210b      	movs	r1, #11
 8009a6a:	4249      	negs	r1, r1
 8009a6c:	468c      	mov	ip, r1
 8009a6e:	449c      	add	ip, r3
 8009a70:	2b0b      	cmp	r3, #11
 8009a72:	d010      	beq.n	8009a96 <__b2d+0x8e>
 8009a74:	4661      	mov	r1, ip
 8009a76:	2320      	movs	r3, #32
 8009a78:	408c      	lsls	r4, r1
 8009a7a:	1a5b      	subs	r3, r3, r1
 8009a7c:	0039      	movs	r1, r7
 8009a7e:	40d9      	lsrs	r1, r3
 8009a80:	430c      	orrs	r4, r1
 8009a82:	4322      	orrs	r2, r4
 8009a84:	0011      	movs	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	42b5      	cmp	r5, r6
 8009a8a:	d901      	bls.n	8009a90 <__b2d+0x88>
 8009a8c:	3d04      	subs	r5, #4
 8009a8e:	682a      	ldr	r2, [r5, #0]
 8009a90:	4664      	mov	r4, ip
 8009a92:	40a7      	lsls	r7, r4
 8009a94:	e7dd      	b.n	8009a52 <__b2d+0x4a>
 8009a96:	4322      	orrs	r2, r4
 8009a98:	0011      	movs	r1, r2
 8009a9a:	e7dc      	b.n	8009a56 <__b2d+0x4e>
 8009a9c:	3ff00000 	.word	0x3ff00000

08009aa0 <__d2b>:
 8009aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	0014      	movs	r4, r2
 8009aa6:	001d      	movs	r5, r3
 8009aa8:	9f08      	ldr	r7, [sp, #32]
 8009aaa:	f7ff fc5b 	bl	8009364 <_Balloc>
 8009aae:	1e06      	subs	r6, r0, #0
 8009ab0:	d105      	bne.n	8009abe <__d2b+0x1e>
 8009ab2:	0032      	movs	r2, r6
 8009ab4:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <__d2b+0xa8>)
 8009ab6:	4825      	ldr	r0, [pc, #148]	; (8009b4c <__d2b+0xac>)
 8009ab8:	4925      	ldr	r1, [pc, #148]	; (8009b50 <__d2b+0xb0>)
 8009aba:	f002 ff17 	bl	800c8ec <__assert_func>
 8009abe:	032b      	lsls	r3, r5, #12
 8009ac0:	006d      	lsls	r5, r5, #1
 8009ac2:	0b1b      	lsrs	r3, r3, #12
 8009ac4:	0d6d      	lsrs	r5, r5, #21
 8009ac6:	d125      	bne.n	8009b14 <__d2b+0x74>
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	d028      	beq.n	8009b20 <__d2b+0x80>
 8009ace:	4668      	mov	r0, sp
 8009ad0:	9400      	str	r4, [sp, #0]
 8009ad2:	f7ff fd23 	bl	800951c <__lo0bits>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	9900      	ldr	r1, [sp, #0]
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d01e      	beq.n	8009b1c <__d2b+0x7c>
 8009ade:	2220      	movs	r2, #32
 8009ae0:	001c      	movs	r4, r3
 8009ae2:	1a12      	subs	r2, r2, r0
 8009ae4:	4094      	lsls	r4, r2
 8009ae6:	0022      	movs	r2, r4
 8009ae8:	40c3      	lsrs	r3, r0
 8009aea:	430a      	orrs	r2, r1
 8009aec:	6172      	str	r2, [r6, #20]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	9c01      	ldr	r4, [sp, #4]
 8009af2:	61b4      	str	r4, [r6, #24]
 8009af4:	1e63      	subs	r3, r4, #1
 8009af6:	419c      	sbcs	r4, r3
 8009af8:	3401      	adds	r4, #1
 8009afa:	6134      	str	r4, [r6, #16]
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d017      	beq.n	8009b30 <__d2b+0x90>
 8009b00:	2435      	movs	r4, #53	; 0x35
 8009b02:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <__d2b+0xb4>)
 8009b04:	18ed      	adds	r5, r5, r3
 8009b06:	182d      	adds	r5, r5, r0
 8009b08:	603d      	str	r5, [r7, #0]
 8009b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0c:	1a24      	subs	r4, r4, r0
 8009b0e:	601c      	str	r4, [r3, #0]
 8009b10:	0030      	movs	r0, r6
 8009b12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b14:	2280      	movs	r2, #128	; 0x80
 8009b16:	0352      	lsls	r2, r2, #13
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	e7d5      	b.n	8009ac8 <__d2b+0x28>
 8009b1c:	6171      	str	r1, [r6, #20]
 8009b1e:	e7e7      	b.n	8009af0 <__d2b+0x50>
 8009b20:	a801      	add	r0, sp, #4
 8009b22:	f7ff fcfb 	bl	800951c <__lo0bits>
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	2401      	movs	r4, #1
 8009b2a:	6173      	str	r3, [r6, #20]
 8009b2c:	3020      	adds	r0, #32
 8009b2e:	e7e4      	b.n	8009afa <__d2b+0x5a>
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <__d2b+0xb8>)
 8009b32:	18c0      	adds	r0, r0, r3
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <__d2b+0xbc>)
 8009b36:	6038      	str	r0, [r7, #0]
 8009b38:	18e3      	adds	r3, r4, r3
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	18f3      	adds	r3, r6, r3
 8009b3e:	6958      	ldr	r0, [r3, #20]
 8009b40:	f7ff fcd2 	bl	80094e8 <__hi0bits>
 8009b44:	0164      	lsls	r4, r4, #5
 8009b46:	e7e0      	b.n	8009b0a <__d2b+0x6a>
 8009b48:	0800f649 	.word	0x0800f649
 8009b4c:	0800f6ba 	.word	0x0800f6ba
 8009b50:	0000030f 	.word	0x0000030f
 8009b54:	fffffbcd 	.word	0xfffffbcd
 8009b58:	fffffbce 	.word	0xfffffbce
 8009b5c:	3fffffff 	.word	0x3fffffff

08009b60 <__ratio>:
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	b087      	sub	sp, #28
 8009b64:	000f      	movs	r7, r1
 8009b66:	a904      	add	r1, sp, #16
 8009b68:	0006      	movs	r6, r0
 8009b6a:	f7ff ff4d 	bl	8009a08 <__b2d>
 8009b6e:	9000      	str	r0, [sp, #0]
 8009b70:	9101      	str	r1, [sp, #4]
 8009b72:	9c00      	ldr	r4, [sp, #0]
 8009b74:	9d01      	ldr	r5, [sp, #4]
 8009b76:	0038      	movs	r0, r7
 8009b78:	a905      	add	r1, sp, #20
 8009b7a:	f7ff ff45 	bl	8009a08 <__b2d>
 8009b7e:	9002      	str	r0, [sp, #8]
 8009b80:	9103      	str	r1, [sp, #12]
 8009b82:	9a02      	ldr	r2, [sp, #8]
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	6930      	ldr	r0, [r6, #16]
 8009b88:	6939      	ldr	r1, [r7, #16]
 8009b8a:	9e04      	ldr	r6, [sp, #16]
 8009b8c:	1a40      	subs	r0, r0, r1
 8009b8e:	9905      	ldr	r1, [sp, #20]
 8009b90:	0140      	lsls	r0, r0, #5
 8009b92:	1a71      	subs	r1, r6, r1
 8009b94:	1841      	adds	r1, r0, r1
 8009b96:	0508      	lsls	r0, r1, #20
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	dd07      	ble.n	8009bac <__ratio+0x4c>
 8009b9c:	9901      	ldr	r1, [sp, #4]
 8009b9e:	1845      	adds	r5, r0, r1
 8009ba0:	0020      	movs	r0, r4
 8009ba2:	0029      	movs	r1, r5
 8009ba4:	f7f7 f968 	bl	8000e78 <__aeabi_ddiv>
 8009ba8:	b007      	add	sp, #28
 8009baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bac:	9903      	ldr	r1, [sp, #12]
 8009bae:	1a0b      	subs	r3, r1, r0
 8009bb0:	e7f6      	b.n	8009ba0 <__ratio+0x40>

08009bb2 <__copybits>:
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	0014      	movs	r4, r2
 8009bb6:	0005      	movs	r5, r0
 8009bb8:	3901      	subs	r1, #1
 8009bba:	6913      	ldr	r3, [r2, #16]
 8009bbc:	1149      	asrs	r1, r1, #5
 8009bbe:	3101      	adds	r1, #1
 8009bc0:	0089      	lsls	r1, r1, #2
 8009bc2:	3414      	adds	r4, #20
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	1841      	adds	r1, r0, r1
 8009bc8:	18e3      	adds	r3, r4, r3
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	d80d      	bhi.n	8009bea <__copybits+0x38>
 8009bce:	0014      	movs	r4, r2
 8009bd0:	3411      	adds	r4, #17
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d803      	bhi.n	8009be0 <__copybits+0x2e>
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	3b11      	subs	r3, #17
 8009bdc:	089b      	lsrs	r3, r3, #2
 8009bde:	009d      	lsls	r5, r3, #2
 8009be0:	2300      	movs	r3, #0
 8009be2:	1940      	adds	r0, r0, r5
 8009be4:	4281      	cmp	r1, r0
 8009be6:	d803      	bhi.n	8009bf0 <__copybits+0x3e>
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	cc40      	ldmia	r4!, {r6}
 8009bec:	c540      	stmia	r5!, {r6}
 8009bee:	e7ec      	b.n	8009bca <__copybits+0x18>
 8009bf0:	c008      	stmia	r0!, {r3}
 8009bf2:	e7f7      	b.n	8009be4 <__copybits+0x32>

08009bf4 <__any_on>:
 8009bf4:	0002      	movs	r2, r0
 8009bf6:	6900      	ldr	r0, [r0, #16]
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	3214      	adds	r2, #20
 8009bfc:	114b      	asrs	r3, r1, #5
 8009bfe:	4298      	cmp	r0, r3
 8009c00:	db13      	blt.n	8009c2a <__any_on+0x36>
 8009c02:	dd0c      	ble.n	8009c1e <__any_on+0x2a>
 8009c04:	241f      	movs	r4, #31
 8009c06:	0008      	movs	r0, r1
 8009c08:	4020      	ands	r0, r4
 8009c0a:	4221      	tst	r1, r4
 8009c0c:	d007      	beq.n	8009c1e <__any_on+0x2a>
 8009c0e:	0099      	lsls	r1, r3, #2
 8009c10:	588c      	ldr	r4, [r1, r2]
 8009c12:	0021      	movs	r1, r4
 8009c14:	40c1      	lsrs	r1, r0
 8009c16:	4081      	lsls	r1, r0
 8009c18:	2001      	movs	r0, #1
 8009c1a:	428c      	cmp	r4, r1
 8009c1c:	d104      	bne.n	8009c28 <__any_on+0x34>
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	18d3      	adds	r3, r2, r3
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d803      	bhi.n	8009c2e <__any_on+0x3a>
 8009c26:	2000      	movs	r0, #0
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	e7f7      	b.n	8009c1e <__any_on+0x2a>
 8009c2e:	3b04      	subs	r3, #4
 8009c30:	6819      	ldr	r1, [r3, #0]
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d0f5      	beq.n	8009c22 <__any_on+0x2e>
 8009c36:	2001      	movs	r0, #1
 8009c38:	e7f6      	b.n	8009c28 <__any_on+0x34>

08009c3a <__ascii_wctomb>:
 8009c3a:	0003      	movs	r3, r0
 8009c3c:	1e08      	subs	r0, r1, #0
 8009c3e:	d005      	beq.n	8009c4c <__ascii_wctomb+0x12>
 8009c40:	2aff      	cmp	r2, #255	; 0xff
 8009c42:	d904      	bls.n	8009c4e <__ascii_wctomb+0x14>
 8009c44:	228a      	movs	r2, #138	; 0x8a
 8009c46:	2001      	movs	r0, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	4240      	negs	r0, r0
 8009c4c:	4770      	bx	lr
 8009c4e:	2001      	movs	r0, #1
 8009c50:	700a      	strb	r2, [r1, #0]
 8009c52:	e7fb      	b.n	8009c4c <__ascii_wctomb+0x12>

08009c54 <_svfprintf_r>:
 8009c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c56:	b0d9      	sub	sp, #356	; 0x164
 8009c58:	001c      	movs	r4, r3
 8009c5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c5c:	9208      	str	r2, [sp, #32]
 8009c5e:	900a      	str	r0, [sp, #40]	; 0x28
 8009c60:	f002 fdae 	bl	800c7c0 <_localeconv_r>
 8009c64:	6803      	ldr	r3, [r0, #0]
 8009c66:	0018      	movs	r0, r3
 8009c68:	931c      	str	r3, [sp, #112]	; 0x70
 8009c6a:	f7f6 fa4b 	bl	8000104 <strlen>
 8009c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c70:	9016      	str	r0, [sp, #88]	; 0x58
 8009c72:	899b      	ldrh	r3, [r3, #12]
 8009c74:	061b      	lsls	r3, r3, #24
 8009c76:	d517      	bpl.n	8009ca8 <_svfprintf_r+0x54>
 8009c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d113      	bne.n	8009ca8 <_svfprintf_r+0x54>
 8009c80:	2140      	movs	r1, #64	; 0x40
 8009c82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c84:	f7fd fb6e 	bl	8007364 <_malloc_r>
 8009c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c8a:	6018      	str	r0, [r3, #0]
 8009c8c:	6118      	str	r0, [r3, #16]
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d107      	bne.n	8009ca2 <_svfprintf_r+0x4e>
 8009c92:	230c      	movs	r3, #12
 8009c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	3b0d      	subs	r3, #13
 8009c9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009c9e:	b059      	add	sp, #356	; 0x164
 8009ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ca6:	6153      	str	r3, [r2, #20]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2200      	movs	r2, #0
 8009cac:	932e      	str	r3, [sp, #184]	; 0xb8
 8009cae:	932d      	str	r3, [sp, #180]	; 0xb4
 8009cb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9214      	str	r2, [sp, #80]	; 0x50
 8009cb6:	9315      	str	r3, [sp, #84]	; 0x54
 8009cb8:	2300      	movs	r3, #0
 8009cba:	af2f      	add	r7, sp, #188	; 0xbc
 8009cbc:	972c      	str	r7, [sp, #176]	; 0xb0
 8009cbe:	931f      	str	r3, [sp, #124]	; 0x7c
 8009cc0:	931e      	str	r3, [sp, #120]	; 0x78
 8009cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8009cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cc6:	931d      	str	r3, [sp, #116]	; 0x74
 8009cc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cca:	9d08      	ldr	r5, [sp, #32]
 8009ccc:	782b      	ldrb	r3, [r5, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <_svfprintf_r+0x84>
 8009cd2:	2b25      	cmp	r3, #37	; 0x25
 8009cd4:	d000      	beq.n	8009cd8 <_svfprintf_r+0x84>
 8009cd6:	e091      	b.n	8009dfc <_svfprintf_r+0x1a8>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	1aee      	subs	r6, r5, r3
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	d016      	beq.n	8009d0e <_svfprintf_r+0xba>
 8009ce0:	603b      	str	r3, [r7, #0]
 8009ce2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009ce4:	607e      	str	r6, [r7, #4]
 8009ce6:	199b      	adds	r3, r3, r6
 8009ce8:	932e      	str	r3, [sp, #184]	; 0xb8
 8009cea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009cec:	3708      	adds	r7, #8
 8009cee:	3301      	adds	r3, #1
 8009cf0:	932d      	str	r3, [sp, #180]	; 0xb4
 8009cf2:	2b07      	cmp	r3, #7
 8009cf4:	dd08      	ble.n	8009d08 <_svfprintf_r+0xb4>
 8009cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cfa:	aa2c      	add	r2, sp, #176	; 0xb0
 8009cfc:	f004 f8c0 	bl	800de80 <__ssprint_r>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d000      	beq.n	8009d06 <_svfprintf_r+0xb2>
 8009d04:	e1cf      	b.n	800a0a6 <_svfprintf_r+0x452>
 8009d06:	af2f      	add	r7, sp, #188	; 0xbc
 8009d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d0a:	199b      	adds	r3, r3, r6
 8009d0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d0e:	782b      	ldrb	r3, [r5, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <_svfprintf_r+0xc4>
 8009d14:	f001 f99e 	bl	800b054 <_svfprintf_r+0x1400>
 8009d18:	221b      	movs	r2, #27
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	a91e      	add	r1, sp, #120	; 0x78
 8009d1e:	1852      	adds	r2, r2, r1
 8009d20:	7013      	strb	r3, [r2, #0]
 8009d22:	2201      	movs	r2, #1
 8009d24:	001e      	movs	r6, r3
 8009d26:	4252      	negs	r2, r2
 8009d28:	3501      	adds	r5, #1
 8009d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2c:	9318      	str	r3, [sp, #96]	; 0x60
 8009d2e:	1c6b      	adds	r3, r5, #1
 8009d30:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d32:	782b      	ldrb	r3, [r5, #0]
 8009d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009d38:	3820      	subs	r0, #32
 8009d3a:	285a      	cmp	r0, #90	; 0x5a
 8009d3c:	d901      	bls.n	8009d42 <_svfprintf_r+0xee>
 8009d3e:	f000 fe20 	bl	800a982 <_svfprintf_r+0xd2e>
 8009d42:	f7f6 f9f1 	bl	8000128 <__gnu_thumb1_case_uhi>
 8009d46:	0078      	.short	0x0078
 8009d48:	061e061e 	.word	0x061e061e
 8009d4c:	061e0082 	.word	0x061e0082
 8009d50:	061e061e 	.word	0x061e061e
 8009d54:	061e005d 	.word	0x061e005d
 8009d58:	0084061e 	.word	0x0084061e
 8009d5c:	061e008c 	.word	0x061e008c
 8009d60:	0091008a 	.word	0x0091008a
 8009d64:	00b2061e 	.word	0x00b2061e
 8009d68:	00b400b4 	.word	0x00b400b4
 8009d6c:	00b400b4 	.word	0x00b400b4
 8009d70:	00b400b4 	.word	0x00b400b4
 8009d74:	00b400b4 	.word	0x00b400b4
 8009d78:	061e00b4 	.word	0x061e00b4
 8009d7c:	061e061e 	.word	0x061e061e
 8009d80:	061e061e 	.word	0x061e061e
 8009d84:	061e061e 	.word	0x061e061e
 8009d88:	061e013b 	.word	0x061e013b
 8009d8c:	00f400e0 	.word	0x00f400e0
 8009d90:	013b013b 	.word	0x013b013b
 8009d94:	061e013b 	.word	0x061e013b
 8009d98:	061e061e 	.word	0x061e061e
 8009d9c:	00c7061e 	.word	0x00c7061e
 8009da0:	061e061e 	.word	0x061e061e
 8009da4:	061e04c7 	.word	0x061e04c7
 8009da8:	061e061e 	.word	0x061e061e
 8009dac:	061e050a 	.word	0x061e050a
 8009db0:	061e052a 	.word	0x061e052a
 8009db4:	055c061e 	.word	0x055c061e
 8009db8:	061e061e 	.word	0x061e061e
 8009dbc:	061e061e 	.word	0x061e061e
 8009dc0:	061e061e 	.word	0x061e061e
 8009dc4:	061e061e 	.word	0x061e061e
 8009dc8:	061e013b 	.word	0x061e013b
 8009dcc:	00f600e0 	.word	0x00f600e0
 8009dd0:	013b013b 	.word	0x013b013b
 8009dd4:	00c9013b 	.word	0x00c9013b
 8009dd8:	00dc00f6 	.word	0x00dc00f6
 8009ddc:	00d5061e 	.word	0x00d5061e
 8009de0:	04a7061e 	.word	0x04a7061e
 8009de4:	04fa04c9 	.word	0x04fa04c9
 8009de8:	061e00dc 	.word	0x061e00dc
 8009dec:	0080050a 	.word	0x0080050a
 8009df0:	061e052c 	.word	0x061e052c
 8009df4:	057c061e 	.word	0x057c061e
 8009df8:	0080061e 	.word	0x0080061e
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	e765      	b.n	8009ccc <_svfprintf_r+0x78>
 8009e00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e02:	f002 fcdd 	bl	800c7c0 <_localeconv_r>
 8009e06:	6843      	ldr	r3, [r0, #4]
 8009e08:	0018      	movs	r0, r3
 8009e0a:	931d      	str	r3, [sp, #116]	; 0x74
 8009e0c:	f7f6 f97a 	bl	8000104 <strlen>
 8009e10:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e14:	f002 fcd4 	bl	800c7c0 <_localeconv_r>
 8009e18:	6883      	ldr	r3, [r0, #8]
 8009e1a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d011      	beq.n	8009e46 <_svfprintf_r+0x1f2>
 8009e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00e      	beq.n	8009e46 <_svfprintf_r+0x1f2>
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <_svfprintf_r+0x1f2>
 8009e2e:	2380      	movs	r3, #128	; 0x80
 8009e30:	00db      	lsls	r3, r3, #3
 8009e32:	431e      	orrs	r6, r3
 8009e34:	e007      	b.n	8009e46 <_svfprintf_r+0x1f2>
 8009e36:	231b      	movs	r3, #27
 8009e38:	aa1e      	add	r2, sp, #120	; 0x78
 8009e3a:	189b      	adds	r3, r3, r2
 8009e3c:	781a      	ldrb	r2, [r3, #0]
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	d101      	bne.n	8009e46 <_svfprintf_r+0x1f2>
 8009e42:	3220      	adds	r2, #32
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8009e48:	e771      	b.n	8009d2e <_svfprintf_r+0xda>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f1      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009e4e:	cc08      	ldmia	r4!, {r3}
 8009e50:	9318      	str	r3, [sp, #96]	; 0x60
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	daf7      	bge.n	8009e46 <_svfprintf_r+0x1f2>
 8009e56:	425b      	negs	r3, r3
 8009e58:	9318      	str	r3, [sp, #96]	; 0x60
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	e7e9      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009e5e:	231b      	movs	r3, #27
 8009e60:	aa1e      	add	r2, sp, #120	; 0x78
 8009e62:	189b      	adds	r3, r3, r2
 8009e64:	222b      	movs	r2, #43	; 0x2b
 8009e66:	e7ed      	b.n	8009e44 <_svfprintf_r+0x1f0>
 8009e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	920f      	str	r2, [sp, #60]	; 0x3c
 8009e72:	2a2a      	cmp	r2, #42	; 0x2a
 8009e74:	d010      	beq.n	8009e98 <_svfprintf_r+0x244>
 8009e76:	2200      	movs	r2, #0
 8009e78:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e7e:	3a30      	subs	r2, #48	; 0x30
 8009e80:	2a09      	cmp	r2, #9
 8009e82:	d900      	bls.n	8009e86 <_svfprintf_r+0x232>
 8009e84:	e757      	b.n	8009d36 <_svfprintf_r+0xe2>
 8009e86:	200a      	movs	r0, #10
 8009e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8a:	4341      	muls	r1, r0
 8009e8c:	188a      	adds	r2, r1, r2
 8009e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	3301      	adds	r3, #1
 8009e94:	920f      	str	r2, [sp, #60]	; 0x3c
 8009e96:	e7f0      	b.n	8009e7a <_svfprintf_r+0x226>
 8009e98:	cc04      	ldmia	r4!, {r2}
 8009e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	da02      	bge.n	8009ea6 <_svfprintf_r+0x252>
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	4252      	negs	r2, r2
 8009ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea6:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ea8:	e7cd      	b.n	8009e46 <_svfprintf_r+0x1f2>
 8009eaa:	2380      	movs	r3, #128	; 0x80
 8009eac:	e7c1      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eb2:	9218      	str	r2, [sp, #96]	; 0x60
 8009eb4:	210a      	movs	r1, #10
 8009eb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009eb8:	434a      	muls	r2, r1
 8009eba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ebc:	3930      	subs	r1, #48	; 0x30
 8009ebe:	188a      	adds	r2, r1, r2
 8009ec0:	9218      	str	r2, [sp, #96]	; 0x60
 8009ec2:	001a      	movs	r2, r3
 8009ec4:	7812      	ldrb	r2, [r2, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	920f      	str	r2, [sp, #60]	; 0x3c
 8009eca:	3a30      	subs	r2, #48	; 0x30
 8009ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ece:	2a09      	cmp	r2, #9
 8009ed0:	d9f0      	bls.n	8009eb4 <_svfprintf_r+0x260>
 8009ed2:	e730      	b.n	8009d36 <_svfprintf_r+0xe2>
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	e7ac      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b68      	cmp	r3, #104	; 0x68
 8009ede:	d105      	bne.n	8009eec <_svfprintf_r+0x298>
 8009ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ee6:	2380      	movs	r3, #128	; 0x80
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	e7a2      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009eec:	2340      	movs	r3, #64	; 0x40
 8009eee:	e7a0      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b6c      	cmp	r3, #108	; 0x6c
 8009ef6:	d104      	bne.n	8009f02 <_svfprintf_r+0x2ae>
 8009ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009efa:	3301      	adds	r3, #1
 8009efc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009efe:	2320      	movs	r3, #32
 8009f00:	e797      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009f02:	2310      	movs	r3, #16
 8009f04:	e795      	b.n	8009e32 <_svfprintf_r+0x1de>
 8009f06:	0021      	movs	r1, r4
 8009f08:	c904      	ldmia	r1!, {r2}
 8009f0a:	ab3f      	add	r3, sp, #252	; 0xfc
 8009f0c:	910d      	str	r1, [sp, #52]	; 0x34
 8009f0e:	211b      	movs	r1, #27
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	a81e      	add	r0, sp, #120	; 0x78
 8009f16:	1809      	adds	r1, r1, r0
 8009f18:	700a      	strb	r2, [r1, #0]
 8009f1a:	920c      	str	r2, [sp, #48]	; 0x30
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f20:	2200      	movs	r2, #0
 8009f22:	9308      	str	r3, [sp, #32]
 8009f24:	0015      	movs	r5, r2
 8009f26:	9219      	str	r2, [sp, #100]	; 0x64
 8009f28:	9210      	str	r2, [sp, #64]	; 0x40
 8009f2a:	9211      	str	r2, [sp, #68]	; 0x44
 8009f2c:	e1f1      	b.n	800a312 <_svfprintf_r+0x6be>
 8009f2e:	2310      	movs	r3, #16
 8009f30:	431e      	orrs	r6, r3
 8009f32:	06b3      	lsls	r3, r6, #26
 8009f34:	d531      	bpl.n	8009f9a <_svfprintf_r+0x346>
 8009f36:	2307      	movs	r3, #7
 8009f38:	3407      	adds	r4, #7
 8009f3a:	439c      	bics	r4, r3
 8009f3c:	0022      	movs	r2, r4
 8009f3e:	ca18      	ldmia	r2!, {r3, r4}
 8009f40:	9306      	str	r3, [sp, #24]
 8009f42:	9407      	str	r4, [sp, #28]
 8009f44:	920d      	str	r2, [sp, #52]	; 0x34
 8009f46:	9a07      	ldr	r2, [sp, #28]
 8009f48:	2301      	movs	r3, #1
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	da0b      	bge.n	8009f66 <_svfprintf_r+0x312>
 8009f4e:	9c06      	ldr	r4, [sp, #24]
 8009f50:	9d07      	ldr	r5, [sp, #28]
 8009f52:	2200      	movs	r2, #0
 8009f54:	4261      	negs	r1, r4
 8009f56:	41aa      	sbcs	r2, r5
 8009f58:	9106      	str	r1, [sp, #24]
 8009f5a:	9207      	str	r2, [sp, #28]
 8009f5c:	221b      	movs	r2, #27
 8009f5e:	a91e      	add	r1, sp, #120	; 0x78
 8009f60:	1852      	adds	r2, r2, r1
 8009f62:	212d      	movs	r1, #45	; 0x2d
 8009f64:	7011      	strb	r1, [r2, #0]
 8009f66:	9907      	ldr	r1, [sp, #28]
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f6e:	3101      	adds	r1, #1
 8009f70:	d101      	bne.n	8009f76 <_svfprintf_r+0x322>
 8009f72:	f001 f87b 	bl	800b06c <_svfprintf_r+0x1418>
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	0034      	movs	r4, r6
 8009f7a:	438c      	bics	r4, r1
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	d001      	beq.n	8009f84 <_svfprintf_r+0x330>
 8009f80:	f001 f879 	bl	800b076 <_svfprintf_r+0x1422>
 8009f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	d101      	bne.n	8009f8e <_svfprintf_r+0x33a>
 8009f8a:	f000 fcef 	bl	800a96c <_svfprintf_r+0xd18>
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d001      	beq.n	8009f96 <_svfprintf_r+0x342>
 8009f92:	f001 f874 	bl	800b07e <_svfprintf_r+0x142a>
 8009f96:	f000 fc79 	bl	800a88c <_svfprintf_r+0xc38>
 8009f9a:	0022      	movs	r2, r4
 8009f9c:	ca08      	ldmia	r2!, {r3}
 8009f9e:	920d      	str	r2, [sp, #52]	; 0x34
 8009fa0:	06f2      	lsls	r2, r6, #27
 8009fa2:	d503      	bpl.n	8009fac <_svfprintf_r+0x358>
 8009fa4:	9306      	str	r3, [sp, #24]
 8009fa6:	17db      	asrs	r3, r3, #31
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	e7cc      	b.n	8009f46 <_svfprintf_r+0x2f2>
 8009fac:	0672      	lsls	r2, r6, #25
 8009fae:	d501      	bpl.n	8009fb4 <_svfprintf_r+0x360>
 8009fb0:	b21b      	sxth	r3, r3
 8009fb2:	e7f7      	b.n	8009fa4 <_svfprintf_r+0x350>
 8009fb4:	05b2      	lsls	r2, r6, #22
 8009fb6:	d5f5      	bpl.n	8009fa4 <_svfprintf_r+0x350>
 8009fb8:	b25b      	sxtb	r3, r3
 8009fba:	e7f3      	b.n	8009fa4 <_svfprintf_r+0x350>
 8009fbc:	2307      	movs	r3, #7
 8009fbe:	3407      	adds	r4, #7
 8009fc0:	439c      	bics	r4, r3
 8009fc2:	0022      	movs	r2, r4
 8009fc4:	ca18      	ldmia	r2!, {r3, r4}
 8009fc6:	920d      	str	r2, [sp, #52]	; 0x34
 8009fc8:	2201      	movs	r2, #1
 8009fca:	9314      	str	r3, [sp, #80]	; 0x50
 8009fcc:	9415      	str	r4, [sp, #84]	; 0x54
 8009fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fd0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009fd2:	005c      	lsls	r4, r3, #1
 8009fd4:	0864      	lsrs	r4, r4, #1
 8009fd6:	0028      	movs	r0, r5
 8009fd8:	0021      	movs	r1, r4
 8009fda:	4b3e      	ldr	r3, [pc, #248]	; (800a0d4 <_svfprintf_r+0x480>)
 8009fdc:	4252      	negs	r2, r2
 8009fde:	f7f8 f989 	bl	80022f4 <__aeabi_dcmpun>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d126      	bne.n	800a034 <_svfprintf_r+0x3e0>
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	0028      	movs	r0, r5
 8009fea:	0021      	movs	r1, r4
 8009fec:	4b39      	ldr	r3, [pc, #228]	; (800a0d4 <_svfprintf_r+0x480>)
 8009fee:	4252      	negs	r2, r2
 8009ff0:	f7f6 fa3a 	bl	8000468 <__aeabi_dcmple>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d11d      	bne.n	800a034 <_svfprintf_r+0x3e0>
 8009ff8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009ffa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	f7f6 fa28 	bl	8000454 <__aeabi_dcmplt>
 800a004:	2800      	cmp	r0, #0
 800a006:	d004      	beq.n	800a012 <_svfprintf_r+0x3be>
 800a008:	231b      	movs	r3, #27
 800a00a:	aa1e      	add	r2, sp, #120	; 0x78
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	222d      	movs	r2, #45	; 0x2d
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	4b31      	ldr	r3, [pc, #196]	; (800a0d8 <_svfprintf_r+0x484>)
 800a014:	9308      	str	r3, [sp, #32]
 800a016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a018:	2b47      	cmp	r3, #71	; 0x47
 800a01a:	dd01      	ble.n	800a020 <_svfprintf_r+0x3cc>
 800a01c:	4b2f      	ldr	r3, [pc, #188]	; (800a0dc <_svfprintf_r+0x488>)
 800a01e:	9308      	str	r3, [sp, #32]
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	439e      	bics	r6, r3
 800a024:	2300      	movs	r3, #0
 800a026:	930c      	str	r3, [sp, #48]	; 0x30
 800a028:	3303      	adds	r3, #3
 800a02a:	9309      	str	r3, [sp, #36]	; 0x24
 800a02c:	2300      	movs	r3, #0
 800a02e:	9319      	str	r3, [sp, #100]	; 0x64
 800a030:	f000 fc78 	bl	800a924 <_svfprintf_r+0xcd0>
 800a034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a038:	0010      	movs	r0, r2
 800a03a:	0019      	movs	r1, r3
 800a03c:	f7f8 f95a 	bl	80022f4 <__aeabi_dcmpun>
 800a040:	2800      	cmp	r0, #0
 800a042:	d00e      	beq.n	800a062 <_svfprintf_r+0x40e>
 800a044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a046:	2b00      	cmp	r3, #0
 800a048:	da04      	bge.n	800a054 <_svfprintf_r+0x400>
 800a04a:	231b      	movs	r3, #27
 800a04c:	aa1e      	add	r2, sp, #120	; 0x78
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	222d      	movs	r2, #45	; 0x2d
 800a052:	701a      	strb	r2, [r3, #0]
 800a054:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <_svfprintf_r+0x48c>)
 800a056:	9308      	str	r3, [sp, #32]
 800a058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a05a:	2b47      	cmp	r3, #71	; 0x47
 800a05c:	dde0      	ble.n	800a020 <_svfprintf_r+0x3cc>
 800a05e:	4b21      	ldr	r3, [pc, #132]	; (800a0e4 <_svfprintf_r+0x490>)
 800a060:	e7dd      	b.n	800a01e <_svfprintf_r+0x3ca>
 800a062:	2320      	movs	r3, #32
 800a064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a066:	439a      	bics	r2, r3
 800a068:	9210      	str	r2, [sp, #64]	; 0x40
 800a06a:	2a41      	cmp	r2, #65	; 0x41
 800a06c:	d123      	bne.n	800a0b6 <_svfprintf_r+0x462>
 800a06e:	2230      	movs	r2, #48	; 0x30
 800a070:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a072:	ab25      	add	r3, sp, #148	; 0x94
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	3248      	adds	r2, #72	; 0x48
 800a078:	2961      	cmp	r1, #97	; 0x61
 800a07a:	d000      	beq.n	800a07e <_svfprintf_r+0x42a>
 800a07c:	3a20      	subs	r2, #32
 800a07e:	705a      	strb	r2, [r3, #1]
 800a080:	2302      	movs	r3, #2
 800a082:	431e      	orrs	r6, r3
 800a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a086:	2b63      	cmp	r3, #99	; 0x63
 800a088:	dd2e      	ble.n	800a0e8 <_svfprintf_r+0x494>
 800a08a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a08c:	1c59      	adds	r1, r3, #1
 800a08e:	f7fd f969 	bl	8007364 <_malloc_r>
 800a092:	9008      	str	r0, [sp, #32]
 800a094:	2800      	cmp	r0, #0
 800a096:	d000      	beq.n	800a09a <_svfprintf_r+0x446>
 800a098:	e216      	b.n	800a4c8 <_svfprintf_r+0x874>
 800a09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a09c:	899a      	ldrh	r2, [r3, #12]
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0a4:	8193      	strh	r3, [r2, #12]
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a8:	899b      	ldrh	r3, [r3, #12]
 800a0aa:	065b      	lsls	r3, r3, #25
 800a0ac:	d400      	bmi.n	800a0b0 <_svfprintf_r+0x45c>
 800a0ae:	e5f5      	b.n	8009c9c <_svfprintf_r+0x48>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	425b      	negs	r3, r3
 800a0b4:	e5f1      	b.n	8009c9a <_svfprintf_r+0x46>
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	900c      	str	r0, [sp, #48]	; 0x30
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	d100      	bne.n	800a0c0 <_svfprintf_r+0x46c>
 800a0be:	e206      	b.n	800a4ce <_svfprintf_r+0x87a>
 800a0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0c2:	2b47      	cmp	r3, #71	; 0x47
 800a0c4:	d114      	bne.n	800a0f0 <_svfprintf_r+0x49c>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d111      	bne.n	800a0f0 <_svfprintf_r+0x49c>
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d0:	e00e      	b.n	800a0f0 <_svfprintf_r+0x49c>
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	7fefffff 	.word	0x7fefffff
 800a0d8:	0800f814 	.word	0x0800f814
 800a0dc:	0800f818 	.word	0x0800f818
 800a0e0:	0800f81c 	.word	0x0800f81c
 800a0e4:	0800f820 	.word	0x0800f820
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ec:	ab3f      	add	r3, sp, #252	; 0xfc
 800a0ee:	9308      	str	r3, [sp, #32]
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	4333      	orrs	r3, r6
 800a0f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	db00      	blt.n	800a102 <_svfprintf_r+0x4ae>
 800a100:	e1e7      	b.n	800a4d2 <_svfprintf_r+0x87e>
 800a102:	2280      	movs	r2, #128	; 0x80
 800a104:	0612      	lsls	r2, r2, #24
 800a106:	4694      	mov	ip, r2
 800a108:	4463      	add	r3, ip
 800a10a:	930e      	str	r3, [sp, #56]	; 0x38
 800a10c:	232d      	movs	r3, #45	; 0x2d
 800a10e:	9322      	str	r3, [sp, #136]	; 0x88
 800a110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a112:	2b41      	cmp	r3, #65	; 0x41
 800a114:	d000      	beq.n	800a118 <_svfprintf_r+0x4c4>
 800a116:	e1f5      	b.n	800a504 <_svfprintf_r+0x8b0>
 800a118:	0028      	movs	r0, r5
 800a11a:	aa26      	add	r2, sp, #152	; 0x98
 800a11c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a11e:	f002 fb73 	bl	800c808 <frexp>
 800a122:	23ff      	movs	r3, #255	; 0xff
 800a124:	2200      	movs	r2, #0
 800a126:	059b      	lsls	r3, r3, #22
 800a128:	f7f7 faa0 	bl	800166c <__aeabi_dmul>
 800a12c:	2200      	movs	r2, #0
 800a12e:	2300      	movs	r3, #0
 800a130:	0004      	movs	r4, r0
 800a132:	000d      	movs	r5, r1
 800a134:	f7f6 f988 	bl	8000448 <__aeabi_dcmpeq>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d001      	beq.n	800a140 <_svfprintf_r+0x4ec>
 800a13c:	2301      	movs	r3, #1
 800a13e:	9326      	str	r3, [sp, #152]	; 0x98
 800a140:	4bda      	ldr	r3, [pc, #872]	; (800a4ac <_svfprintf_r+0x858>)
 800a142:	9319      	str	r3, [sp, #100]	; 0x64
 800a144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a146:	2b61      	cmp	r3, #97	; 0x61
 800a148:	d001      	beq.n	800a14e <_svfprintf_r+0x4fa>
 800a14a:	4bd9      	ldr	r3, [pc, #868]	; (800a4b0 <_svfprintf_r+0x85c>)
 800a14c:	9319      	str	r3, [sp, #100]	; 0x64
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	930e      	str	r3, [sp, #56]	; 0x38
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	3b01      	subs	r3, #1
 800a156:	9311      	str	r3, [sp, #68]	; 0x44
 800a158:	2200      	movs	r2, #0
 800a15a:	4bd6      	ldr	r3, [pc, #856]	; (800a4b4 <_svfprintf_r+0x860>)
 800a15c:	0020      	movs	r0, r4
 800a15e:	0029      	movs	r1, r5
 800a160:	f7f7 fa84 	bl	800166c <__aeabi_dmul>
 800a164:	000d      	movs	r5, r1
 800a166:	0004      	movs	r4, r0
 800a168:	f7f8 f8e2 	bl	8002330 <__aeabi_d2iz>
 800a16c:	9021      	str	r0, [sp, #132]	; 0x84
 800a16e:	f7f8 f915 	bl	800239c <__aeabi_i2d>
 800a172:	0002      	movs	r2, r0
 800a174:	000b      	movs	r3, r1
 800a176:	0020      	movs	r0, r4
 800a178:	0029      	movs	r1, r5
 800a17a:	f7f7 fd39 	bl	8001bf0 <__aeabi_dsub>
 800a17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a180:	000d      	movs	r5, r1
 800a182:	001a      	movs	r2, r3
 800a184:	3201      	adds	r2, #1
 800a186:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a188:	920e      	str	r2, [sp, #56]	; 0x38
 800a18a:	9223      	str	r2, [sp, #140]	; 0x8c
 800a18c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a18e:	0004      	movs	r4, r0
 800a190:	5c52      	ldrb	r2, [r2, r1]
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a196:	9320      	str	r3, [sp, #128]	; 0x80
 800a198:	3301      	adds	r3, #1
 800a19a:	d00a      	beq.n	800a1b2 <_svfprintf_r+0x55e>
 800a19c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a19e:	2200      	movs	r2, #0
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a1a4:	0020      	movs	r0, r4
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	0029      	movs	r1, r5
 800a1aa:	f7f6 f94d 	bl	8000448 <__aeabi_dcmpeq>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d0d2      	beq.n	800a158 <_svfprintf_r+0x504>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	0020      	movs	r0, r4
 800a1b6:	0029      	movs	r1, r5
 800a1b8:	4bbf      	ldr	r3, [pc, #764]	; (800a4b8 <_svfprintf_r+0x864>)
 800a1ba:	f7f6 f95f 	bl	800047c <__aeabi_dcmpgt>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d10c      	bne.n	800a1dc <_svfprintf_r+0x588>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	0020      	movs	r0, r4
 800a1c6:	0029      	movs	r1, r5
 800a1c8:	4bbb      	ldr	r3, [pc, #748]	; (800a4b8 <_svfprintf_r+0x864>)
 800a1ca:	f7f6 f93d 	bl	8000448 <__aeabi_dcmpeq>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d100      	bne.n	800a1d4 <_svfprintf_r+0x580>
 800a1d2:	e191      	b.n	800a4f8 <_svfprintf_r+0x8a4>
 800a1d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1d6:	07db      	lsls	r3, r3, #31
 800a1d8:	d400      	bmi.n	800a1dc <_svfprintf_r+0x588>
 800a1da:	e18d      	b.n	800a4f8 <_svfprintf_r+0x8a4>
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e0:	932a      	str	r3, [sp, #168]	; 0xa8
 800a1e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1e4:	7bdb      	ldrb	r3, [r3, #15]
 800a1e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a1e8:	3a01      	subs	r2, #1
 800a1ea:	922a      	str	r2, [sp, #168]	; 0xa8
 800a1ec:	7811      	ldrb	r1, [r2, #0]
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	d100      	bne.n	800a1f4 <_svfprintf_r+0x5a0>
 800a1f2:	e171      	b.n	800a4d8 <_svfprintf_r+0x884>
 800a1f4:	1c4b      	adds	r3, r1, #1
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2939      	cmp	r1, #57	; 0x39
 800a1fa:	d101      	bne.n	800a200 <_svfprintf_r+0x5ac>
 800a1fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1fe:	7a9b      	ldrb	r3, [r3, #10]
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a204:	9a08      	ldr	r2, [sp, #32]
 800a206:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	930e      	str	r3, [sp, #56]	; 0x38
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	2b47      	cmp	r3, #71	; 0x47
 800a210:	d000      	beq.n	800a214 <_svfprintf_r+0x5c0>
 800a212:	e1c4      	b.n	800a59e <_svfprintf_r+0x94a>
 800a214:	1ceb      	adds	r3, r5, #3
 800a216:	db03      	blt.n	800a220 <_svfprintf_r+0x5cc>
 800a218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	db00      	blt.n	800a220 <_svfprintf_r+0x5cc>
 800a21e:	e1e6      	b.n	800a5ee <_svfprintf_r+0x99a>
 800a220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a222:	3b02      	subs	r3, #2
 800a224:	930f      	str	r3, [sp, #60]	; 0x3c
 800a226:	223c      	movs	r2, #60	; 0x3c
 800a228:	466b      	mov	r3, sp
 800a22a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a22c:	189b      	adds	r3, r3, r2
 800a22e:	1e6c      	subs	r4, r5, #1
 800a230:	3a1c      	subs	r2, #28
 800a232:	2000      	movs	r0, #0
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	9426      	str	r4, [sp, #152]	; 0x98
 800a238:	4391      	bics	r1, r2
 800a23a:	2941      	cmp	r1, #65	; 0x41
 800a23c:	d102      	bne.n	800a244 <_svfprintf_r+0x5f0>
 800a23e:	330f      	adds	r3, #15
 800a240:	b2db      	uxtb	r3, r3
 800a242:	3001      	adds	r0, #1
 800a244:	a928      	add	r1, sp, #160	; 0xa0
 800a246:	700b      	strb	r3, [r1, #0]
 800a248:	232b      	movs	r3, #43	; 0x2b
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	da02      	bge.n	800a254 <_svfprintf_r+0x600>
 800a24e:	2401      	movs	r4, #1
 800a250:	3302      	adds	r3, #2
 800a252:	1b64      	subs	r4, r4, r5
 800a254:	704b      	strb	r3, [r1, #1]
 800a256:	2c09      	cmp	r4, #9
 800a258:	dc00      	bgt.n	800a25c <_svfprintf_r+0x608>
 800a25a:	e1ba      	b.n	800a5d2 <_svfprintf_r+0x97e>
 800a25c:	2337      	movs	r3, #55	; 0x37
 800a25e:	250a      	movs	r5, #10
 800a260:	aa1e      	add	r2, sp, #120	; 0x78
 800a262:	189b      	adds	r3, r3, r2
 800a264:	9310      	str	r3, [sp, #64]	; 0x40
 800a266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a268:	0020      	movs	r0, r4
 800a26a:	9309      	str	r3, [sp, #36]	; 0x24
 800a26c:	0029      	movs	r1, r5
 800a26e:	3b01      	subs	r3, #1
 800a270:	9310      	str	r3, [sp, #64]	; 0x40
 800a272:	f7f6 f8d3 	bl	800041c <__aeabi_idivmod>
 800a276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a278:	3130      	adds	r1, #48	; 0x30
 800a27a:	7019      	strb	r1, [r3, #0]
 800a27c:	0020      	movs	r0, r4
 800a27e:	0029      	movs	r1, r5
 800a280:	9411      	str	r4, [sp, #68]	; 0x44
 800a282:	f7f5 ffe5 	bl	8000250 <__divsi3>
 800a286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a288:	0004      	movs	r4, r0
 800a28a:	2b63      	cmp	r3, #99	; 0x63
 800a28c:	dceb      	bgt.n	800a266 <_svfprintf_r+0x612>
 800a28e:	222a      	movs	r2, #42	; 0x2a
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	a81e      	add	r0, sp, #120	; 0x78
 800a294:	1e99      	subs	r1, r3, #2
 800a296:	1812      	adds	r2, r2, r0
 800a298:	2037      	movs	r0, #55	; 0x37
 800a29a:	000b      	movs	r3, r1
 800a29c:	3430      	adds	r4, #48	; 0x30
 800a29e:	700c      	strb	r4, [r1, #0]
 800a2a0:	ac1e      	add	r4, sp, #120	; 0x78
 800a2a2:	1900      	adds	r0, r0, r4
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	d200      	bcs.n	800a2aa <_svfprintf_r+0x656>
 800a2a8:	e18e      	b.n	800a5c8 <_svfprintf_r+0x974>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4281      	cmp	r1, r0
 800a2ae:	d804      	bhi.n	800a2ba <_svfprintf_r+0x666>
 800a2b0:	aa1e      	add	r2, sp, #120	; 0x78
 800a2b2:	3339      	adds	r3, #57	; 0x39
 800a2b4:	189b      	adds	r3, r3, r2
 800a2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	222a      	movs	r2, #42	; 0x2a
 800a2bc:	a91e      	add	r1, sp, #120	; 0x78
 800a2be:	1852      	adds	r2, r2, r1
 800a2c0:	18d3      	adds	r3, r2, r3
 800a2c2:	aa28      	add	r2, sp, #160	; 0xa0
 800a2c4:	1a9b      	subs	r3, r3, r2
 800a2c6:	931e      	str	r3, [sp, #120]	; 0x78
 800a2c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2cc:	4694      	mov	ip, r2
 800a2ce:	4463      	add	r3, ip
 800a2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	dc01      	bgt.n	800a2dc <_svfprintf_r+0x688>
 800a2d8:	07f3      	lsls	r3, r6, #31
 800a2da:	d504      	bpl.n	800a2e6 <_svfprintf_r+0x692>
 800a2dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	4694      	mov	ip, r2
 800a2e2:	4463      	add	r3, ip
 800a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e6:	2280      	movs	r2, #128	; 0x80
 800a2e8:	4b74      	ldr	r3, [pc, #464]	; (800a4bc <_svfprintf_r+0x868>)
 800a2ea:	0052      	lsls	r2, r2, #1
 800a2ec:	4033      	ands	r3, r6
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	001d      	movs	r5, r3
 800a2f4:	921a      	str	r2, [sp, #104]	; 0x68
 800a2f6:	9310      	str	r3, [sp, #64]	; 0x40
 800a2f8:	9311      	str	r3, [sp, #68]	; 0x44
 800a2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2fc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a2fe:	9319      	str	r3, [sp, #100]	; 0x64
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <_svfprintf_r+0x6be>
 800a304:	231b      	movs	r3, #27
 800a306:	aa1e      	add	r2, sp, #120	; 0x78
 800a308:	189b      	adds	r3, r3, r2
 800a30a:	222d      	movs	r2, #45	; 0x2d
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	9319      	str	r3, [sp, #100]	; 0x64
 800a312:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a316:	931a      	str	r3, [sp, #104]	; 0x68
 800a318:	4293      	cmp	r3, r2
 800a31a:	da00      	bge.n	800a31e <_svfprintf_r+0x6ca>
 800a31c:	921a      	str	r2, [sp, #104]	; 0x68
 800a31e:	231b      	movs	r3, #27
 800a320:	aa1e      	add	r2, sp, #120	; 0x78
 800a322:	189b      	adds	r3, r3, r2
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	1e5a      	subs	r2, r3, #1
 800a328:	4193      	sbcs	r3, r2
 800a32a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	931a      	str	r3, [sp, #104]	; 0x68
 800a330:	0032      	movs	r2, r6
 800a332:	2302      	movs	r3, #2
 800a334:	401a      	ands	r2, r3
 800a336:	9220      	str	r2, [sp, #128]	; 0x80
 800a338:	421e      	tst	r6, r3
 800a33a:	d002      	beq.n	800a342 <_svfprintf_r+0x6ee>
 800a33c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a33e:	3302      	adds	r3, #2
 800a340:	931a      	str	r3, [sp, #104]	; 0x68
 800a342:	2384      	movs	r3, #132	; 0x84
 800a344:	0032      	movs	r2, r6
 800a346:	401a      	ands	r2, r3
 800a348:	9221      	str	r2, [sp, #132]	; 0x84
 800a34a:	421e      	tst	r6, r3
 800a34c:	d11f      	bne.n	800a38e <_svfprintf_r+0x73a>
 800a34e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a350:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a352:	1a9c      	subs	r4, r3, r2
 800a354:	2c00      	cmp	r4, #0
 800a356:	dd1a      	ble.n	800a38e <_svfprintf_r+0x73a>
 800a358:	0039      	movs	r1, r7
 800a35a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a35c:	4858      	ldr	r0, [pc, #352]	; (800a4c0 <_svfprintf_r+0x86c>)
 800a35e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a360:	3301      	adds	r3, #1
 800a362:	3108      	adds	r1, #8
 800a364:	6038      	str	r0, [r7, #0]
 800a366:	2c10      	cmp	r4, #16
 800a368:	dd00      	ble.n	800a36c <_svfprintf_r+0x718>
 800a36a:	e31c      	b.n	800a9a6 <_svfprintf_r+0xd52>
 800a36c:	607c      	str	r4, [r7, #4]
 800a36e:	18a4      	adds	r4, r4, r2
 800a370:	000f      	movs	r7, r1
 800a372:	942e      	str	r4, [sp, #184]	; 0xb8
 800a374:	932d      	str	r3, [sp, #180]	; 0xb4
 800a376:	2b07      	cmp	r3, #7
 800a378:	dd09      	ble.n	800a38e <_svfprintf_r+0x73a>
 800a37a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a37c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a37e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a380:	f003 fd7e 	bl	800de80 <__ssprint_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	d001      	beq.n	800a38c <_svfprintf_r+0x738>
 800a388:	f000 fe43 	bl	800b012 <_svfprintf_r+0x13be>
 800a38c:	af2f      	add	r7, sp, #188	; 0xbc
 800a38e:	221b      	movs	r2, #27
 800a390:	a91e      	add	r1, sp, #120	; 0x78
 800a392:	1852      	adds	r2, r2, r1
 800a394:	7811      	ldrb	r1, [r2, #0]
 800a396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a398:	2900      	cmp	r1, #0
 800a39a:	d014      	beq.n	800a3c6 <_svfprintf_r+0x772>
 800a39c:	603a      	str	r2, [r7, #0]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	189b      	adds	r3, r3, r2
 800a3a2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a3a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	189b      	adds	r3, r3, r2
 800a3aa:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	dd09      	ble.n	800a3c6 <_svfprintf_r+0x772>
 800a3b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3b8:	f003 fd62 	bl	800de80 <__ssprint_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d001      	beq.n	800a3c4 <_svfprintf_r+0x770>
 800a3c0:	f000 fe27 	bl	800b012 <_svfprintf_r+0x13be>
 800a3c4:	af2f      	add	r7, sp, #188	; 0xbc
 800a3c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	d015      	beq.n	800a3fa <_svfprintf_r+0x7a6>
 800a3ce:	aa25      	add	r2, sp, #148	; 0x94
 800a3d0:	603a      	str	r2, [r7, #0]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	189b      	adds	r3, r3, r2
 800a3d6:	932e      	str	r3, [sp, #184]	; 0xb8
 800a3d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	2b07      	cmp	r3, #7
 800a3e4:	dd09      	ble.n	800a3fa <_svfprintf_r+0x7a6>
 800a3e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3ea:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3ec:	f003 fd48 	bl	800de80 <__ssprint_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d001      	beq.n	800a3f8 <_svfprintf_r+0x7a4>
 800a3f4:	f000 fe0d 	bl	800b012 <_svfprintf_r+0x13be>
 800a3f8:	af2f      	add	r7, sp, #188	; 0xbc
 800a3fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3fc:	2b80      	cmp	r3, #128	; 0x80
 800a3fe:	d11f      	bne.n	800a440 <_svfprintf_r+0x7ec>
 800a400:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a402:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a404:	1a9c      	subs	r4, r3, r2
 800a406:	2c00      	cmp	r4, #0
 800a408:	dd1a      	ble.n	800a440 <_svfprintf_r+0x7ec>
 800a40a:	0039      	movs	r1, r7
 800a40c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a40e:	482d      	ldr	r0, [pc, #180]	; (800a4c4 <_svfprintf_r+0x870>)
 800a410:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a412:	3301      	adds	r3, #1
 800a414:	3108      	adds	r1, #8
 800a416:	6038      	str	r0, [r7, #0]
 800a418:	2c10      	cmp	r4, #16
 800a41a:	dd00      	ble.n	800a41e <_svfprintf_r+0x7ca>
 800a41c:	e2d6      	b.n	800a9cc <_svfprintf_r+0xd78>
 800a41e:	607c      	str	r4, [r7, #4]
 800a420:	18a4      	adds	r4, r4, r2
 800a422:	000f      	movs	r7, r1
 800a424:	942e      	str	r4, [sp, #184]	; 0xb8
 800a426:	932d      	str	r3, [sp, #180]	; 0xb4
 800a428:	2b07      	cmp	r3, #7
 800a42a:	dd09      	ble.n	800a440 <_svfprintf_r+0x7ec>
 800a42c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a42e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a430:	aa2c      	add	r2, sp, #176	; 0xb0
 800a432:	f003 fd25 	bl	800de80 <__ssprint_r>
 800a436:	2800      	cmp	r0, #0
 800a438:	d001      	beq.n	800a43e <_svfprintf_r+0x7ea>
 800a43a:	f000 fdea 	bl	800b012 <_svfprintf_r+0x13be>
 800a43e:	af2f      	add	r7, sp, #188	; 0xbc
 800a440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a444:	1a9c      	subs	r4, r3, r2
 800a446:	2c00      	cmp	r4, #0
 800a448:	dd1a      	ble.n	800a480 <_svfprintf_r+0x82c>
 800a44a:	0039      	movs	r1, r7
 800a44c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a44e:	481d      	ldr	r0, [pc, #116]	; (800a4c4 <_svfprintf_r+0x870>)
 800a450:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a452:	3301      	adds	r3, #1
 800a454:	3108      	adds	r1, #8
 800a456:	6038      	str	r0, [r7, #0]
 800a458:	2c10      	cmp	r4, #16
 800a45a:	dd00      	ble.n	800a45e <_svfprintf_r+0x80a>
 800a45c:	e2c9      	b.n	800a9f2 <_svfprintf_r+0xd9e>
 800a45e:	18a2      	adds	r2, r4, r2
 800a460:	607c      	str	r4, [r7, #4]
 800a462:	922e      	str	r2, [sp, #184]	; 0xb8
 800a464:	000f      	movs	r7, r1
 800a466:	932d      	str	r3, [sp, #180]	; 0xb4
 800a468:	2b07      	cmp	r3, #7
 800a46a:	dd09      	ble.n	800a480 <_svfprintf_r+0x82c>
 800a46c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a46e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a470:	aa2c      	add	r2, sp, #176	; 0xb0
 800a472:	f003 fd05 	bl	800de80 <__ssprint_r>
 800a476:	2800      	cmp	r0, #0
 800a478:	d001      	beq.n	800a47e <_svfprintf_r+0x82a>
 800a47a:	f000 fdca 	bl	800b012 <_svfprintf_r+0x13be>
 800a47e:	af2f      	add	r7, sp, #188	; 0xbc
 800a480:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a482:	9319      	str	r3, [sp, #100]	; 0x64
 800a484:	05f3      	lsls	r3, r6, #23
 800a486:	d500      	bpl.n	800a48a <_svfprintf_r+0x836>
 800a488:	e2ce      	b.n	800aa28 <_svfprintf_r+0xdd4>
 800a48a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	4694      	mov	ip, r2
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a494:	607b      	str	r3, [r7, #4]
 800a496:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a498:	4463      	add	r3, ip
 800a49a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a49c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a49e:	3301      	adds	r3, #1
 800a4a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a4a2:	2b07      	cmp	r3, #7
 800a4a4:	dd00      	ble.n	800a4a8 <_svfprintf_r+0x854>
 800a4a6:	e3a3      	b.n	800abf0 <_svfprintf_r+0xf9c>
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	e301      	b.n	800aab0 <_svfprintf_r+0xe5c>
 800a4ac:	0800f824 	.word	0x0800f824
 800a4b0:	0800f835 	.word	0x0800f835
 800a4b4:	40300000 	.word	0x40300000
 800a4b8:	3fe00000 	.word	0x3fe00000
 800a4bc:	fffffbff 	.word	0xfffffbff
 800a4c0:	0800f848 	.word	0x0800f848
 800a4c4:	0800f858 	.word	0x0800f858
 800a4c8:	9b08      	ldr	r3, [sp, #32]
 800a4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a4cc:	e610      	b.n	800a0f0 <_svfprintf_r+0x49c>
 800a4ce:	2306      	movs	r3, #6
 800a4d0:	e5fd      	b.n	800a0ce <_svfprintf_r+0x47a>
 800a4d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e61a      	b.n	800a10e <_svfprintf_r+0x4ba>
 800a4d8:	7010      	strb	r0, [r2, #0]
 800a4da:	e684      	b.n	800a1e6 <_svfprintf_r+0x592>
 800a4dc:	7018      	strb	r0, [r3, #0]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	1aca      	subs	r2, r1, r3
 800a4e2:	d5fb      	bpl.n	800a4dc <_svfprintf_r+0x888>
 800a4e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	db01      	blt.n	800a4f0 <_svfprintf_r+0x89c>
 800a4ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4f2:	18d3      	adds	r3, r2, r3
 800a4f4:	9323      	str	r3, [sp, #140]	; 0x8c
 800a4f6:	e684      	b.n	800a202 <_svfprintf_r+0x5ae>
 800a4f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a4fc:	2030      	movs	r0, #48	; 0x30
 800a4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a500:	1851      	adds	r1, r2, r1
 800a502:	e7ed      	b.n	800a4e0 <_svfprintf_r+0x88c>
 800a504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a506:	2303      	movs	r3, #3
 800a508:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a50a:	2a46      	cmp	r2, #70	; 0x46
 800a50c:	d006      	beq.n	800a51c <_svfprintf_r+0x8c8>
 800a50e:	0014      	movs	r4, r2
 800a510:	3c45      	subs	r4, #69	; 0x45
 800a512:	4262      	negs	r2, r4
 800a514:	4154      	adcs	r4, r2
 800a516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a518:	3b01      	subs	r3, #1
 800a51a:	1914      	adds	r4, r2, r4
 800a51c:	aa2a      	add	r2, sp, #168	; 0xa8
 800a51e:	9204      	str	r2, [sp, #16]
 800a520:	aa27      	add	r2, sp, #156	; 0x9c
 800a522:	9203      	str	r2, [sp, #12]
 800a524:	aa26      	add	r2, sp, #152	; 0x98
 800a526:	9202      	str	r2, [sp, #8]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	002a      	movs	r2, r5
 800a52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a52e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a530:	9401      	str	r4, [sp, #4]
 800a532:	f002 fad7 	bl	800cae4 <_dtoa_r>
 800a536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a538:	9008      	str	r0, [sp, #32]
 800a53a:	2b47      	cmp	r3, #71	; 0x47
 800a53c:	d103      	bne.n	800a546 <_svfprintf_r+0x8f2>
 800a53e:	07f3      	lsls	r3, r6, #31
 800a540:	d401      	bmi.n	800a546 <_svfprintf_r+0x8f2>
 800a542:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a544:	e65e      	b.n	800a204 <_svfprintf_r+0x5b0>
 800a546:	9b08      	ldr	r3, [sp, #32]
 800a548:	191b      	adds	r3, r3, r4
 800a54a:	9311      	str	r3, [sp, #68]	; 0x44
 800a54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a54e:	2b46      	cmp	r3, #70	; 0x46
 800a550:	d112      	bne.n	800a578 <_svfprintf_r+0x924>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b30      	cmp	r3, #48	; 0x30
 800a558:	d10a      	bne.n	800a570 <_svfprintf_r+0x91c>
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	0028      	movs	r0, r5
 800a560:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a562:	f7f5 ff71 	bl	8000448 <__aeabi_dcmpeq>
 800a566:	2800      	cmp	r0, #0
 800a568:	d102      	bne.n	800a570 <_svfprintf_r+0x91c>
 800a56a:	2301      	movs	r3, #1
 800a56c:	1b1b      	subs	r3, r3, r4
 800a56e:	9326      	str	r3, [sp, #152]	; 0x98
 800a570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a572:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a574:	18d3      	adds	r3, r2, r3
 800a576:	9311      	str	r3, [sp, #68]	; 0x44
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	0028      	movs	r0, r5
 800a57e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a580:	f7f5 ff62 	bl	8000448 <__aeabi_dcmpeq>
 800a584:	2800      	cmp	r0, #0
 800a586:	d001      	beq.n	800a58c <_svfprintf_r+0x938>
 800a588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a58a:	932a      	str	r3, [sp, #168]	; 0xa8
 800a58c:	2230      	movs	r2, #48	; 0x30
 800a58e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a590:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a592:	4299      	cmp	r1, r3
 800a594:	d9d5      	bls.n	800a542 <_svfprintf_r+0x8ee>
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	912a      	str	r1, [sp, #168]	; 0xa8
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	e7f7      	b.n	800a58e <_svfprintf_r+0x93a>
 800a59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5a0:	2b46      	cmp	r3, #70	; 0x46
 800a5a2:	d000      	beq.n	800a5a6 <_svfprintf_r+0x952>
 800a5a4:	e63f      	b.n	800a226 <_svfprintf_r+0x5d2>
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	0033      	movs	r3, r6
 800a5aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	dd2c      	ble.n	800a60e <_svfprintf_r+0x9ba>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d046      	beq.n	800a646 <_svfprintf_r+0x9f2>
 800a5b8:	000a      	movs	r2, r1
 800a5ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5bc:	18eb      	adds	r3, r5, r3
 800a5be:	18d3      	adds	r3, r2, r3
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	2366      	movs	r3, #102	; 0x66
 800a5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c6:	e030      	b.n	800a62a <_svfprintf_r+0x9d6>
 800a5c8:	781c      	ldrb	r4, [r3, #0]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	7014      	strb	r4, [r2, #0]
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	e668      	b.n	800a2a4 <_svfprintf_r+0x650>
 800a5d2:	222a      	movs	r2, #42	; 0x2a
 800a5d4:	ab1e      	add	r3, sp, #120	; 0x78
 800a5d6:	18d2      	adds	r2, r2, r3
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d104      	bne.n	800a5e6 <_svfprintf_r+0x992>
 800a5dc:	2330      	movs	r3, #48	; 0x30
 800a5de:	222b      	movs	r2, #43	; 0x2b
 800a5e0:	708b      	strb	r3, [r1, #2]
 800a5e2:	ab1e      	add	r3, sp, #120	; 0x78
 800a5e4:	18d2      	adds	r2, r2, r3
 800a5e6:	3430      	adds	r4, #48	; 0x30
 800a5e8:	1c53      	adds	r3, r2, #1
 800a5ea:	7014      	strb	r4, [r2, #0]
 800a5ec:	e669      	b.n	800a2c2 <_svfprintf_r+0x66e>
 800a5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	dd12      	ble.n	800a61a <_svfprintf_r+0x9c6>
 800a5f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f8:	4694      	mov	ip, r2
 800a5fa:	4463      	add	r3, ip
 800a5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fe:	2367      	movs	r3, #103	; 0x67
 800a600:	930f      	str	r3, [sp, #60]	; 0x3c
 800a602:	2d00      	cmp	r5, #0
 800a604:	dc11      	bgt.n	800a62a <_svfprintf_r+0x9d6>
 800a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a608:	1b5b      	subs	r3, r3, r5
 800a60a:	3301      	adds	r3, #1
 800a60c:	e00c      	b.n	800a628 <_svfprintf_r+0x9d4>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01b      	beq.n	800a64a <_svfprintf_r+0x9f6>
 800a612:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a616:	3301      	adds	r3, #1
 800a618:	e7d1      	b.n	800a5be <_svfprintf_r+0x96a>
 800a61a:	2367      	movs	r3, #103	; 0x67
 800a61c:	9509      	str	r5, [sp, #36]	; 0x24
 800a61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a620:	07f3      	lsls	r3, r6, #31
 800a622:	d502      	bpl.n	800a62a <_svfprintf_r+0x9d6>
 800a624:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a626:	18eb      	adds	r3, r5, r3
 800a628:	9309      	str	r3, [sp, #36]	; 0x24
 800a62a:	2380      	movs	r3, #128	; 0x80
 800a62c:	0032      	movs	r2, r6
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	401a      	ands	r2, r3
 800a632:	9211      	str	r2, [sp, #68]	; 0x44
 800a634:	2200      	movs	r2, #0
 800a636:	9210      	str	r2, [sp, #64]	; 0x40
 800a638:	421e      	tst	r6, r3
 800a63a:	d100      	bne.n	800a63e <_svfprintf_r+0x9ea>
 800a63c:	e65d      	b.n	800a2fa <_svfprintf_r+0x6a6>
 800a63e:	4295      	cmp	r5, r2
 800a640:	dc25      	bgt.n	800a68e <_svfprintf_r+0xa3a>
 800a642:	9211      	str	r2, [sp, #68]	; 0x44
 800a644:	e659      	b.n	800a2fa <_svfprintf_r+0x6a6>
 800a646:	9509      	str	r5, [sp, #36]	; 0x24
 800a648:	e7bb      	b.n	800a5c2 <_svfprintf_r+0x96e>
 800a64a:	2366      	movs	r3, #102	; 0x66
 800a64c:	9209      	str	r2, [sp, #36]	; 0x24
 800a64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a650:	e7eb      	b.n	800a62a <_svfprintf_r+0x9d6>
 800a652:	42ab      	cmp	r3, r5
 800a654:	da0e      	bge.n	800a674 <_svfprintf_r+0xa20>
 800a656:	1aed      	subs	r5, r5, r3
 800a658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d012      	beq.n	800a686 <_svfprintf_r+0xa32>
 800a660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a662:	3301      	adds	r3, #1
 800a664:	9311      	str	r3, [sp, #68]	; 0x44
 800a666:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a668:	3301      	adds	r3, #1
 800a66a:	9312      	str	r3, [sp, #72]	; 0x48
 800a66c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2bff      	cmp	r3, #255	; 0xff
 800a672:	d1ee      	bne.n	800a652 <_svfprintf_r+0x9fe>
 800a674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a67c:	4353      	muls	r3, r2
 800a67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a680:	189b      	adds	r3, r3, r2
 800a682:	9309      	str	r3, [sp, #36]	; 0x24
 800a684:	e639      	b.n	800a2fa <_svfprintf_r+0x6a6>
 800a686:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a688:	3301      	adds	r3, #1
 800a68a:	9310      	str	r3, [sp, #64]	; 0x40
 800a68c:	e7ee      	b.n	800a66c <_svfprintf_r+0xa18>
 800a68e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a690:	9311      	str	r3, [sp, #68]	; 0x44
 800a692:	e7eb      	b.n	800a66c <_svfprintf_r+0xa18>
 800a694:	1d23      	adds	r3, r4, #4
 800a696:	930d      	str	r3, [sp, #52]	; 0x34
 800a698:	06b3      	lsls	r3, r6, #26
 800a69a:	d509      	bpl.n	800a6b0 <_svfprintf_r+0xa5c>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	17d2      	asrs	r2, r2, #31
 800a6a4:	605a      	str	r2, [r3, #4]
 800a6a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a6aa:	9308      	str	r3, [sp, #32]
 800a6ac:	f7ff fb0d 	bl	8009cca <_svfprintf_r+0x76>
 800a6b0:	06f3      	lsls	r3, r6, #27
 800a6b2:	d503      	bpl.n	800a6bc <_svfprintf_r+0xa68>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e7f4      	b.n	800a6a6 <_svfprintf_r+0xa52>
 800a6bc:	0673      	lsls	r3, r6, #25
 800a6be:	d503      	bpl.n	800a6c8 <_svfprintf_r+0xa74>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6c4:	801a      	strh	r2, [r3, #0]
 800a6c6:	e7ee      	b.n	800a6a6 <_svfprintf_r+0xa52>
 800a6c8:	05b6      	lsls	r6, r6, #22
 800a6ca:	d5f3      	bpl.n	800a6b4 <_svfprintf_r+0xa60>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e7e8      	b.n	800a6a6 <_svfprintf_r+0xa52>
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	431e      	orrs	r6, r3
 800a6d8:	2320      	movs	r3, #32
 800a6da:	0030      	movs	r0, r6
 800a6dc:	4018      	ands	r0, r3
 800a6de:	421e      	tst	r6, r3
 800a6e0:	d00f      	beq.n	800a702 <_svfprintf_r+0xaae>
 800a6e2:	3b19      	subs	r3, #25
 800a6e4:	3407      	adds	r4, #7
 800a6e6:	439c      	bics	r4, r3
 800a6e8:	0022      	movs	r2, r4
 800a6ea:	ca18      	ldmia	r2!, {r3, r4}
 800a6ec:	9306      	str	r3, [sp, #24]
 800a6ee:	9407      	str	r4, [sp, #28]
 800a6f0:	920d      	str	r2, [sp, #52]	; 0x34
 800a6f2:	4bc9      	ldr	r3, [pc, #804]	; (800aa18 <_svfprintf_r+0xdc4>)
 800a6f4:	401e      	ands	r6, r3
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	221b      	movs	r2, #27
 800a6fa:	a91e      	add	r1, sp, #120	; 0x78
 800a6fc:	1852      	adds	r2, r2, r1
 800a6fe:	2100      	movs	r1, #0
 800a700:	e430      	b.n	8009f64 <_svfprintf_r+0x310>
 800a702:	0022      	movs	r2, r4
 800a704:	ca08      	ldmia	r2!, {r3}
 800a706:	0031      	movs	r1, r6
 800a708:	920d      	str	r2, [sp, #52]	; 0x34
 800a70a:	2210      	movs	r2, #16
 800a70c:	4011      	ands	r1, r2
 800a70e:	4216      	tst	r6, r2
 800a710:	d002      	beq.n	800a718 <_svfprintf_r+0xac4>
 800a712:	9306      	str	r3, [sp, #24]
 800a714:	9007      	str	r0, [sp, #28]
 800a716:	e7ec      	b.n	800a6f2 <_svfprintf_r+0xa9e>
 800a718:	2240      	movs	r2, #64	; 0x40
 800a71a:	0030      	movs	r0, r6
 800a71c:	4010      	ands	r0, r2
 800a71e:	4216      	tst	r6, r2
 800a720:	d003      	beq.n	800a72a <_svfprintf_r+0xad6>
 800a722:	b29b      	uxth	r3, r3
 800a724:	9306      	str	r3, [sp, #24]
 800a726:	9107      	str	r1, [sp, #28]
 800a728:	e7e3      	b.n	800a6f2 <_svfprintf_r+0xa9e>
 800a72a:	2280      	movs	r2, #128	; 0x80
 800a72c:	0031      	movs	r1, r6
 800a72e:	0092      	lsls	r2, r2, #2
 800a730:	4011      	ands	r1, r2
 800a732:	4216      	tst	r6, r2
 800a734:	d0f6      	beq.n	800a724 <_svfprintf_r+0xad0>
 800a736:	b2db      	uxtb	r3, r3
 800a738:	e7eb      	b.n	800a712 <_svfprintf_r+0xabe>
 800a73a:	0023      	movs	r3, r4
 800a73c:	cb04      	ldmia	r3!, {r2}
 800a73e:	49b7      	ldr	r1, [pc, #732]	; (800aa1c <_svfprintf_r+0xdc8>)
 800a740:	9206      	str	r2, [sp, #24]
 800a742:	aa25      	add	r2, sp, #148	; 0x94
 800a744:	8011      	strh	r1, [r2, #0]
 800a746:	4ab6      	ldr	r2, [pc, #728]	; (800aa20 <_svfprintf_r+0xdcc>)
 800a748:	930d      	str	r3, [sp, #52]	; 0x34
 800a74a:	2300      	movs	r3, #0
 800a74c:	921f      	str	r2, [sp, #124]	; 0x7c
 800a74e:	2278      	movs	r2, #120	; 0x78
 800a750:	9307      	str	r3, [sp, #28]
 800a752:	3302      	adds	r3, #2
 800a754:	431e      	orrs	r6, r3
 800a756:	920f      	str	r2, [sp, #60]	; 0x3c
 800a758:	e7ce      	b.n	800a6f8 <_svfprintf_r+0xaa4>
 800a75a:	0023      	movs	r3, r4
 800a75c:	cb04      	ldmia	r3!, {r2}
 800a75e:	2400      	movs	r4, #0
 800a760:	930d      	str	r3, [sp, #52]	; 0x34
 800a762:	231b      	movs	r3, #27
 800a764:	9208      	str	r2, [sp, #32]
 800a766:	aa1e      	add	r2, sp, #120	; 0x78
 800a768:	189b      	adds	r3, r3, r2
 800a76a:	701c      	strb	r4, [r3, #0]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	3301      	adds	r3, #1
 800a770:	d00e      	beq.n	800a790 <_svfprintf_r+0xb3c>
 800a772:	0021      	movs	r1, r4
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	9808      	ldr	r0, [sp, #32]
 800a778:	f002 f83a 	bl	800c7f0 <memchr>
 800a77c:	900c      	str	r0, [sp, #48]	; 0x30
 800a77e:	42a0      	cmp	r0, r4
 800a780:	d100      	bne.n	800a784 <_svfprintf_r+0xb30>
 800a782:	e10d      	b.n	800a9a0 <_svfprintf_r+0xd4c>
 800a784:	9a08      	ldr	r2, [sp, #32]
 800a786:	1a83      	subs	r3, r0, r2
 800a788:	9309      	str	r3, [sp, #36]	; 0x24
 800a78a:	0023      	movs	r3, r4
 800a78c:	940c      	str	r4, [sp, #48]	; 0x30
 800a78e:	e44e      	b.n	800a02e <_svfprintf_r+0x3da>
 800a790:	9808      	ldr	r0, [sp, #32]
 800a792:	f7f5 fcb7 	bl	8000104 <strlen>
 800a796:	9009      	str	r0, [sp, #36]	; 0x24
 800a798:	e7f7      	b.n	800a78a <_svfprintf_r+0xb36>
 800a79a:	2310      	movs	r3, #16
 800a79c:	431e      	orrs	r6, r3
 800a79e:	2320      	movs	r3, #32
 800a7a0:	0030      	movs	r0, r6
 800a7a2:	4018      	ands	r0, r3
 800a7a4:	421e      	tst	r6, r3
 800a7a6:	d009      	beq.n	800a7bc <_svfprintf_r+0xb68>
 800a7a8:	3b19      	subs	r3, #25
 800a7aa:	3407      	adds	r4, #7
 800a7ac:	439c      	bics	r4, r3
 800a7ae:	0022      	movs	r2, r4
 800a7b0:	ca18      	ldmia	r2!, {r3, r4}
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	9407      	str	r4, [sp, #28]
 800a7b6:	920d      	str	r2, [sp, #52]	; 0x34
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e79d      	b.n	800a6f8 <_svfprintf_r+0xaa4>
 800a7bc:	0023      	movs	r3, r4
 800a7be:	cb04      	ldmia	r3!, {r2}
 800a7c0:	0031      	movs	r1, r6
 800a7c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	4019      	ands	r1, r3
 800a7c8:	421e      	tst	r6, r3
 800a7ca:	d003      	beq.n	800a7d4 <_svfprintf_r+0xb80>
 800a7cc:	9206      	str	r2, [sp, #24]
 800a7ce:	9007      	str	r0, [sp, #28]
 800a7d0:	3b0f      	subs	r3, #15
 800a7d2:	e791      	b.n	800a6f8 <_svfprintf_r+0xaa4>
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	0030      	movs	r0, r6
 800a7d8:	4018      	ands	r0, r3
 800a7da:	421e      	tst	r6, r3
 800a7dc:	d003      	beq.n	800a7e6 <_svfprintf_r+0xb92>
 800a7de:	b293      	uxth	r3, r2
 800a7e0:	9306      	str	r3, [sp, #24]
 800a7e2:	9107      	str	r1, [sp, #28]
 800a7e4:	e7e8      	b.n	800a7b8 <_svfprintf_r+0xb64>
 800a7e6:	2380      	movs	r3, #128	; 0x80
 800a7e8:	0031      	movs	r1, r6
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4019      	ands	r1, r3
 800a7ee:	421e      	tst	r6, r3
 800a7f0:	d003      	beq.n	800a7fa <_svfprintf_r+0xba6>
 800a7f2:	b2d3      	uxtb	r3, r2
 800a7f4:	9306      	str	r3, [sp, #24]
 800a7f6:	9007      	str	r0, [sp, #28]
 800a7f8:	e7de      	b.n	800a7b8 <_svfprintf_r+0xb64>
 800a7fa:	9206      	str	r2, [sp, #24]
 800a7fc:	e7f1      	b.n	800a7e2 <_svfprintf_r+0xb8e>
 800a7fe:	4b89      	ldr	r3, [pc, #548]	; (800aa24 <_svfprintf_r+0xdd0>)
 800a800:	0030      	movs	r0, r6
 800a802:	931f      	str	r3, [sp, #124]	; 0x7c
 800a804:	2320      	movs	r3, #32
 800a806:	4018      	ands	r0, r3
 800a808:	421e      	tst	r6, r3
 800a80a:	d01a      	beq.n	800a842 <_svfprintf_r+0xbee>
 800a80c:	3b19      	subs	r3, #25
 800a80e:	3407      	adds	r4, #7
 800a810:	439c      	bics	r4, r3
 800a812:	0022      	movs	r2, r4
 800a814:	ca18      	ldmia	r2!, {r3, r4}
 800a816:	9306      	str	r3, [sp, #24]
 800a818:	9407      	str	r4, [sp, #28]
 800a81a:	920d      	str	r2, [sp, #52]	; 0x34
 800a81c:	07f3      	lsls	r3, r6, #31
 800a81e:	d50a      	bpl.n	800a836 <_svfprintf_r+0xbe2>
 800a820:	9b06      	ldr	r3, [sp, #24]
 800a822:	9a07      	ldr	r2, [sp, #28]
 800a824:	4313      	orrs	r3, r2
 800a826:	d006      	beq.n	800a836 <_svfprintf_r+0xbe2>
 800a828:	2230      	movs	r2, #48	; 0x30
 800a82a:	ab25      	add	r3, sp, #148	; 0x94
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a830:	705a      	strb	r2, [r3, #1]
 800a832:	2302      	movs	r3, #2
 800a834:	431e      	orrs	r6, r3
 800a836:	4b78      	ldr	r3, [pc, #480]	; (800aa18 <_svfprintf_r+0xdc4>)
 800a838:	401e      	ands	r6, r3
 800a83a:	2302      	movs	r3, #2
 800a83c:	e75c      	b.n	800a6f8 <_svfprintf_r+0xaa4>
 800a83e:	4b78      	ldr	r3, [pc, #480]	; (800aa20 <_svfprintf_r+0xdcc>)
 800a840:	e7de      	b.n	800a800 <_svfprintf_r+0xbac>
 800a842:	0023      	movs	r3, r4
 800a844:	cb04      	ldmia	r3!, {r2}
 800a846:	0031      	movs	r1, r6
 800a848:	930d      	str	r3, [sp, #52]	; 0x34
 800a84a:	2310      	movs	r3, #16
 800a84c:	4019      	ands	r1, r3
 800a84e:	421e      	tst	r6, r3
 800a850:	d002      	beq.n	800a858 <_svfprintf_r+0xc04>
 800a852:	9206      	str	r2, [sp, #24]
 800a854:	9007      	str	r0, [sp, #28]
 800a856:	e7e1      	b.n	800a81c <_svfprintf_r+0xbc8>
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	0030      	movs	r0, r6
 800a85c:	4018      	ands	r0, r3
 800a85e:	421e      	tst	r6, r3
 800a860:	d003      	beq.n	800a86a <_svfprintf_r+0xc16>
 800a862:	b293      	uxth	r3, r2
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	9107      	str	r1, [sp, #28]
 800a868:	e7d8      	b.n	800a81c <_svfprintf_r+0xbc8>
 800a86a:	2380      	movs	r3, #128	; 0x80
 800a86c:	0031      	movs	r1, r6
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4019      	ands	r1, r3
 800a872:	421e      	tst	r6, r3
 800a874:	d002      	beq.n	800a87c <_svfprintf_r+0xc28>
 800a876:	b2d3      	uxtb	r3, r2
 800a878:	9306      	str	r3, [sp, #24]
 800a87a:	e7eb      	b.n	800a854 <_svfprintf_r+0xc00>
 800a87c:	9206      	str	r2, [sp, #24]
 800a87e:	e7f2      	b.n	800a866 <_svfprintf_r+0xc12>
 800a880:	9b07      	ldr	r3, [sp, #28]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <_svfprintf_r+0xc48>
 800a886:	9b06      	ldr	r3, [sp, #24]
 800a888:	2b09      	cmp	r3, #9
 800a88a:	d807      	bhi.n	800a89c <_svfprintf_r+0xc48>
 800a88c:	23e7      	movs	r3, #231	; 0xe7
 800a88e:	aa1e      	add	r2, sp, #120	; 0x78
 800a890:	189b      	adds	r3, r3, r2
 800a892:	9a06      	ldr	r2, [sp, #24]
 800a894:	3230      	adds	r2, #48	; 0x30
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	f000 fc18 	bl	800b0cc <_svfprintf_r+0x1478>
 800a89c:	2680      	movs	r6, #128	; 0x80
 800a89e:	2300      	movs	r3, #0
 800a8a0:	00f6      	lsls	r6, r6, #3
 800a8a2:	930e      	str	r3, [sp, #56]	; 0x38
 800a8a4:	ad58      	add	r5, sp, #352	; 0x160
 800a8a6:	4026      	ands	r6, r4
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	9806      	ldr	r0, [sp, #24]
 800a8ac:	9907      	ldr	r1, [sp, #28]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f7f5 fdf8 	bl	80004a4 <__aeabi_uldivmod>
 800a8b4:	1e6b      	subs	r3, r5, #1
 800a8b6:	3230      	adds	r2, #48	; 0x30
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8be:	900c      	str	r0, [sp, #48]	; 0x30
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	9110      	str	r1, [sp, #64]	; 0x40
 800a8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d01d      	beq.n	800a906 <_svfprintf_r+0xcb2>
 800a8ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d118      	bne.n	800a906 <_svfprintf_r+0xcb2>
 800a8d4:	2aff      	cmp	r2, #255	; 0xff
 800a8d6:	d016      	beq.n	800a906 <_svfprintf_r+0xcb2>
 800a8d8:	9b07      	ldr	r3, [sp, #28]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <_svfprintf_r+0xc90>
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	2b09      	cmp	r3, #9
 800a8e2:	d910      	bls.n	800a906 <_svfprintf_r+0xcb2>
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8e8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	9308      	str	r3, [sp, #32]
 800a8f0:	f7fd ffd1 	bl	8008896 <strncpy>
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8f8:	920e      	str	r2, [sp, #56]	; 0x38
 800a8fa:	785b      	ldrb	r3, [r3, #1]
 800a8fc:	1e5a      	subs	r2, r3, #1
 800a8fe:	4193      	sbcs	r3, r2
 800a900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a902:	18d3      	adds	r3, r2, r3
 800a904:	9312      	str	r3, [sp, #72]	; 0x48
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10f      	bne.n	800a92c <_svfprintf_r+0xcd8>
 800a90c:	9b06      	ldr	r3, [sp, #24]
 800a90e:	2b09      	cmp	r3, #9
 800a910:	d80c      	bhi.n	800a92c <_svfprintf_r+0xcd8>
 800a912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a914:	9a08      	ldr	r2, [sp, #32]
 800a916:	9319      	str	r3, [sp, #100]	; 0x64
 800a918:	ab58      	add	r3, sp, #352	; 0x160
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	9309      	str	r3, [sp, #36]	; 0x24
 800a91e:	2300      	movs	r3, #0
 800a920:	0026      	movs	r6, r4
 800a922:	930c      	str	r3, [sp, #48]	; 0x30
 800a924:	001d      	movs	r5, r3
 800a926:	9310      	str	r3, [sp, #64]	; 0x40
 800a928:	9311      	str	r3, [sp, #68]	; 0x44
 800a92a:	e4f2      	b.n	800a312 <_svfprintf_r+0x6be>
 800a92c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a92e:	9d08      	ldr	r5, [sp, #32]
 800a930:	9306      	str	r3, [sp, #24]
 800a932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a934:	9307      	str	r3, [sp, #28]
 800a936:	e7b7      	b.n	800a8a8 <_svfprintf_r+0xc54>
 800a938:	200f      	movs	r0, #15
 800a93a:	ab58      	add	r3, sp, #352	; 0x160
 800a93c:	9308      	str	r3, [sp, #32]
 800a93e:	9b08      	ldr	r3, [sp, #32]
 800a940:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a942:	3b01      	subs	r3, #1
 800a944:	9308      	str	r3, [sp, #32]
 800a946:	9b06      	ldr	r3, [sp, #24]
 800a948:	4003      	ands	r3, r0
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	9a08      	ldr	r2, [sp, #32]
 800a94e:	7013      	strb	r3, [r2, #0]
 800a950:	9b07      	ldr	r3, [sp, #28]
 800a952:	0719      	lsls	r1, r3, #28
 800a954:	9b06      	ldr	r3, [sp, #24]
 800a956:	091a      	lsrs	r2, r3, #4
 800a958:	9b07      	ldr	r3, [sp, #28]
 800a95a:	4311      	orrs	r1, r2
 800a95c:	091b      	lsrs	r3, r3, #4
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	000b      	movs	r3, r1
 800a962:	9a07      	ldr	r2, [sp, #28]
 800a964:	9106      	str	r1, [sp, #24]
 800a966:	4313      	orrs	r3, r2
 800a968:	d1e9      	bne.n	800a93e <_svfprintf_r+0xcea>
 800a96a:	e7d2      	b.n	800a912 <_svfprintf_r+0xcbe>
 800a96c:	aa58      	add	r2, sp, #352	; 0x160
 800a96e:	9208      	str	r2, [sp, #32]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ce      	bne.n	800a912 <_svfprintf_r+0xcbe>
 800a974:	07f6      	lsls	r6, r6, #31
 800a976:	d5cc      	bpl.n	800a912 <_svfprintf_r+0xcbe>
 800a978:	aa1e      	add	r2, sp, #120	; 0x78
 800a97a:	33e7      	adds	r3, #231	; 0xe7
 800a97c:	189b      	adds	r3, r3, r2
 800a97e:	2230      	movs	r2, #48	; 0x30
 800a980:	e789      	b.n	800a896 <_svfprintf_r+0xc42>
 800a982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d100      	bne.n	800a98a <_svfprintf_r+0xd36>
 800a988:	e364      	b.n	800b054 <_svfprintf_r+0x1400>
 800a98a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a98c:	211b      	movs	r1, #27
 800a98e:	ab3f      	add	r3, sp, #252	; 0xfc
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	a81e      	add	r0, sp, #120	; 0x78
 800a996:	1809      	adds	r1, r1, r0
 800a998:	700a      	strb	r2, [r1, #0]
 800a99a:	940d      	str	r4, [sp, #52]	; 0x34
 800a99c:	f7ff fabd 	bl	8009f1a <_svfprintf_r+0x2c6>
 800a9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a2:	f7ff fb44 	bl	800a02e <_svfprintf_r+0x3da>
 800a9a6:	2010      	movs	r0, #16
 800a9a8:	1812      	adds	r2, r2, r0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800a9ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800a9b0:	2b07      	cmp	r3, #7
 800a9b2:	dd08      	ble.n	800a9c6 <_svfprintf_r+0xd72>
 800a9b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a9ba:	f003 fa61 	bl	800de80 <__ssprint_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d000      	beq.n	800a9c4 <_svfprintf_r+0xd70>
 800a9c2:	e326      	b.n	800b012 <_svfprintf_r+0x13be>
 800a9c4:	a92f      	add	r1, sp, #188	; 0xbc
 800a9c6:	000f      	movs	r7, r1
 800a9c8:	3c10      	subs	r4, #16
 800a9ca:	e4c5      	b.n	800a358 <_svfprintf_r+0x704>
 800a9cc:	2010      	movs	r0, #16
 800a9ce:	1812      	adds	r2, r2, r0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	922e      	str	r2, [sp, #184]	; 0xb8
 800a9d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	dd08      	ble.n	800a9ec <_svfprintf_r+0xd98>
 800a9da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9de:	aa2c      	add	r2, sp, #176	; 0xb0
 800a9e0:	f003 fa4e 	bl	800de80 <__ssprint_r>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d000      	beq.n	800a9ea <_svfprintf_r+0xd96>
 800a9e8:	e313      	b.n	800b012 <_svfprintf_r+0x13be>
 800a9ea:	a92f      	add	r1, sp, #188	; 0xbc
 800a9ec:	000f      	movs	r7, r1
 800a9ee:	3c10      	subs	r4, #16
 800a9f0:	e50b      	b.n	800a40a <_svfprintf_r+0x7b6>
 800a9f2:	2010      	movs	r0, #16
 800a9f4:	1812      	adds	r2, r2, r0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800a9fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800a9fc:	2b07      	cmp	r3, #7
 800a9fe:	dd08      	ble.n	800aa12 <_svfprintf_r+0xdbe>
 800aa00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa04:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa06:	f003 fa3b 	bl	800de80 <__ssprint_r>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d000      	beq.n	800aa10 <_svfprintf_r+0xdbc>
 800aa0e:	e300      	b.n	800b012 <_svfprintf_r+0x13be>
 800aa10:	a92f      	add	r1, sp, #188	; 0xbc
 800aa12:	000f      	movs	r7, r1
 800aa14:	3c10      	subs	r4, #16
 800aa16:	e518      	b.n	800a44a <_svfprintf_r+0x7f6>
 800aa18:	fffffbff 	.word	0xfffffbff
 800aa1c:	00007830 	.word	0x00007830
 800aa20:	0800f824 	.word	0x0800f824
 800aa24:	0800f835 	.word	0x0800f835
 800aa28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa2a:	2b65      	cmp	r3, #101	; 0x65
 800aa2c:	dc00      	bgt.n	800aa30 <_svfprintf_r+0xddc>
 800aa2e:	e241      	b.n	800aeb4 <_svfprintf_r+0x1260>
 800aa30:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aa32:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aa34:	2200      	movs	r2, #0
 800aa36:	2300      	movs	r3, #0
 800aa38:	f7f5 fd06 	bl	8000448 <__aeabi_dcmpeq>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d077      	beq.n	800ab30 <_svfprintf_r+0xedc>
 800aa40:	4bca      	ldr	r3, [pc, #808]	; (800ad6c <_svfprintf_r+0x1118>)
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	2301      	movs	r3, #1
 800aa46:	607b      	str	r3, [r7, #4]
 800aa48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	932e      	str	r3, [sp, #184]	; 0xb8
 800aa50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa52:	3301      	adds	r3, #1
 800aa54:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa56:	2b07      	cmp	r3, #7
 800aa58:	dd08      	ble.n	800aa6c <_svfprintf_r+0xe18>
 800aa5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa5e:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa60:	f003 fa0e 	bl	800de80 <__ssprint_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d000      	beq.n	800aa6a <_svfprintf_r+0xe16>
 800aa68:	e2d3      	b.n	800b012 <_svfprintf_r+0x13be>
 800aa6a:	af2f      	add	r7, sp, #188	; 0xbc
 800aa6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa70:	4293      	cmp	r3, r2
 800aa72:	db01      	blt.n	800aa78 <_svfprintf_r+0xe24>
 800aa74:	07f3      	lsls	r3, r6, #31
 800aa76:	d51b      	bpl.n	800aab0 <_svfprintf_r+0xe5c>
 800aa78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aa7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa7c:	603b      	str	r3, [r7, #0]
 800aa7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa80:	607b      	str	r3, [r7, #4]
 800aa82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aa84:	3708      	adds	r7, #8
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	932e      	str	r3, [sp, #184]	; 0xb8
 800aa8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa90:	2b07      	cmp	r3, #7
 800aa92:	dd08      	ble.n	800aaa6 <_svfprintf_r+0xe52>
 800aa94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa98:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa9a:	f003 f9f1 	bl	800de80 <__ssprint_r>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d000      	beq.n	800aaa4 <_svfprintf_r+0xe50>
 800aaa2:	e2b6      	b.n	800b012 <_svfprintf_r+0x13be>
 800aaa4:	af2f      	add	r7, sp, #188	; 0xbc
 800aaa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaa8:	2510      	movs	r5, #16
 800aaaa:	1e5c      	subs	r4, r3, #1
 800aaac:	2c00      	cmp	r4, #0
 800aaae:	dc2e      	bgt.n	800ab0e <_svfprintf_r+0xeba>
 800aab0:	0776      	lsls	r6, r6, #29
 800aab2:	d500      	bpl.n	800aab6 <_svfprintf_r+0xe62>
 800aab4:	e290      	b.n	800afd8 <_svfprintf_r+0x1384>
 800aab6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aab8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aaba:	4293      	cmp	r3, r2
 800aabc:	da00      	bge.n	800aac0 <_svfprintf_r+0xe6c>
 800aabe:	0013      	movs	r3, r2
 800aac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aac2:	18d3      	adds	r3, r2, r3
 800aac4:	9317      	str	r3, [sp, #92]	; 0x5c
 800aac6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d007      	beq.n	800aadc <_svfprintf_r+0xe88>
 800aacc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aace:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aad0:	aa2c      	add	r2, sp, #176	; 0xb0
 800aad2:	f003 f9d5 	bl	800de80 <__ssprint_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d000      	beq.n	800aadc <_svfprintf_r+0xe88>
 800aada:	e29a      	b.n	800b012 <_svfprintf_r+0x13be>
 800aadc:	2300      	movs	r3, #0
 800aade:	932d      	str	r3, [sp, #180]	; 0xb4
 800aae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d000      	beq.n	800aae8 <_svfprintf_r+0xe94>
 800aae6:	e2b0      	b.n	800b04a <_svfprintf_r+0x13f6>
 800aae8:	af2f      	add	r7, sp, #188	; 0xbc
 800aaea:	e5dc      	b.n	800a6a6 <_svfprintf_r+0xa52>
 800aaec:	3210      	adds	r2, #16
 800aaee:	607d      	str	r5, [r7, #4]
 800aaf0:	922e      	str	r2, [sp, #184]	; 0xb8
 800aaf2:	932d      	str	r3, [sp, #180]	; 0xb4
 800aaf4:	2b07      	cmp	r3, #7
 800aaf6:	dd08      	ble.n	800ab0a <_svfprintf_r+0xeb6>
 800aaf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aafa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aafc:	aa2c      	add	r2, sp, #176	; 0xb0
 800aafe:	f003 f9bf 	bl	800de80 <__ssprint_r>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d000      	beq.n	800ab08 <_svfprintf_r+0xeb4>
 800ab06:	e284      	b.n	800b012 <_svfprintf_r+0x13be>
 800ab08:	a92f      	add	r1, sp, #188	; 0xbc
 800ab0a:	000f      	movs	r7, r1
 800ab0c:	3c10      	subs	r4, #16
 800ab0e:	0039      	movs	r1, r7
 800ab10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab12:	4897      	ldr	r0, [pc, #604]	; (800ad70 <_svfprintf_r+0x111c>)
 800ab14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ab16:	3301      	adds	r3, #1
 800ab18:	3108      	adds	r1, #8
 800ab1a:	6038      	str	r0, [r7, #0]
 800ab1c:	2c10      	cmp	r4, #16
 800ab1e:	dce5      	bgt.n	800aaec <_svfprintf_r+0xe98>
 800ab20:	607c      	str	r4, [r7, #4]
 800ab22:	18a4      	adds	r4, r4, r2
 800ab24:	942e      	str	r4, [sp, #184]	; 0xb8
 800ab26:	000f      	movs	r7, r1
 800ab28:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab2a:	2b07      	cmp	r3, #7
 800ab2c:	ddc0      	ble.n	800aab0 <_svfprintf_r+0xe5c>
 800ab2e:	e05f      	b.n	800abf0 <_svfprintf_r+0xf9c>
 800ab30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dc78      	bgt.n	800ac28 <_svfprintf_r+0xfd4>
 800ab36:	4b8d      	ldr	r3, [pc, #564]	; (800ad6c <_svfprintf_r+0x1118>)
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	607b      	str	r3, [r7, #4]
 800ab3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab40:	3708      	adds	r7, #8
 800ab42:	3301      	adds	r3, #1
 800ab44:	932e      	str	r3, [sp, #184]	; 0xb8
 800ab46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab48:	3301      	adds	r3, #1
 800ab4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab4c:	2b07      	cmp	r3, #7
 800ab4e:	dd08      	ble.n	800ab62 <_svfprintf_r+0xf0e>
 800ab50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab54:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab56:	f003 f993 	bl	800de80 <__ssprint_r>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d000      	beq.n	800ab60 <_svfprintf_r+0xf0c>
 800ab5e:	e258      	b.n	800b012 <_svfprintf_r+0x13be>
 800ab60:	af2f      	add	r7, sp, #188	; 0xbc
 800ab62:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4031      	ands	r1, r6
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	d09e      	beq.n	800aab0 <_svfprintf_r+0xe5c>
 800ab72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab78:	607b      	str	r3, [r7, #4]
 800ab7a:	189a      	adds	r2, r3, r2
 800ab7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab7e:	922e      	str	r2, [sp, #184]	; 0xb8
 800ab80:	3301      	adds	r3, #1
 800ab82:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab84:	3708      	adds	r7, #8
 800ab86:	2b07      	cmp	r3, #7
 800ab88:	dd08      	ble.n	800ab9c <_svfprintf_r+0xf48>
 800ab8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab8e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab90:	f003 f976 	bl	800de80 <__ssprint_r>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d000      	beq.n	800ab9a <_svfprintf_r+0xf46>
 800ab98:	e23b      	b.n	800b012 <_svfprintf_r+0x13be>
 800ab9a:	af2f      	add	r7, sp, #188	; 0xbc
 800ab9c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ab9e:	2c00      	cmp	r4, #0
 800aba0:	da19      	bge.n	800abd6 <_svfprintf_r+0xf82>
 800aba2:	0038      	movs	r0, r7
 800aba4:	2510      	movs	r5, #16
 800aba6:	4264      	negs	r4, r4
 800aba8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800abaa:	4a71      	ldr	r2, [pc, #452]	; (800ad70 <_svfprintf_r+0x111c>)
 800abac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800abae:	3101      	adds	r1, #1
 800abb0:	3708      	adds	r7, #8
 800abb2:	6002      	str	r2, [r0, #0]
 800abb4:	2c10      	cmp	r4, #16
 800abb6:	dc25      	bgt.n	800ac04 <_svfprintf_r+0xfb0>
 800abb8:	6044      	str	r4, [r0, #4]
 800abba:	18e4      	adds	r4, r4, r3
 800abbc:	942e      	str	r4, [sp, #184]	; 0xb8
 800abbe:	912d      	str	r1, [sp, #180]	; 0xb4
 800abc0:	2907      	cmp	r1, #7
 800abc2:	dd08      	ble.n	800abd6 <_svfprintf_r+0xf82>
 800abc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abc8:	aa2c      	add	r2, sp, #176	; 0xb0
 800abca:	f003 f959 	bl	800de80 <__ssprint_r>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d000      	beq.n	800abd4 <_svfprintf_r+0xf80>
 800abd2:	e21e      	b.n	800b012 <_svfprintf_r+0x13be>
 800abd4:	af2f      	add	r7, sp, #188	; 0xbc
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abde:	18d2      	adds	r2, r2, r3
 800abe0:	922e      	str	r2, [sp, #184]	; 0xb8
 800abe2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800abe4:	607b      	str	r3, [r7, #4]
 800abe6:	3201      	adds	r2, #1
 800abe8:	922d      	str	r2, [sp, #180]	; 0xb4
 800abea:	2a07      	cmp	r2, #7
 800abec:	dc00      	bgt.n	800abf0 <_svfprintf_r+0xf9c>
 800abee:	e45b      	b.n	800a4a8 <_svfprintf_r+0x854>
 800abf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abf4:	aa2c      	add	r2, sp, #176	; 0xb0
 800abf6:	f003 f943 	bl	800de80 <__ssprint_r>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d000      	beq.n	800ac00 <_svfprintf_r+0xfac>
 800abfe:	e208      	b.n	800b012 <_svfprintf_r+0x13be>
 800ac00:	af2f      	add	r7, sp, #188	; 0xbc
 800ac02:	e755      	b.n	800aab0 <_svfprintf_r+0xe5c>
 800ac04:	3310      	adds	r3, #16
 800ac06:	6045      	str	r5, [r0, #4]
 800ac08:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac0a:	912d      	str	r1, [sp, #180]	; 0xb4
 800ac0c:	2907      	cmp	r1, #7
 800ac0e:	dd08      	ble.n	800ac22 <_svfprintf_r+0xfce>
 800ac10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac14:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac16:	f003 f933 	bl	800de80 <__ssprint_r>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d000      	beq.n	800ac20 <_svfprintf_r+0xfcc>
 800ac1e:	e1f8      	b.n	800b012 <_svfprintf_r+0x13be>
 800ac20:	af2f      	add	r7, sp, #188	; 0xbc
 800ac22:	0038      	movs	r0, r7
 800ac24:	3c10      	subs	r4, #16
 800ac26:	e7bf      	b.n	800aba8 <_svfprintf_r+0xf54>
 800ac28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac2a:	002c      	movs	r4, r5
 800ac2c:	429d      	cmp	r5, r3
 800ac2e:	dd00      	ble.n	800ac32 <_svfprintf_r+0xfde>
 800ac30:	001c      	movs	r4, r3
 800ac32:	2c00      	cmp	r4, #0
 800ac34:	dd14      	ble.n	800ac60 <_svfprintf_r+0x100c>
 800ac36:	9b08      	ldr	r3, [sp, #32]
 800ac38:	607c      	str	r4, [r7, #4]
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac3e:	3708      	adds	r7, #8
 800ac40:	18e3      	adds	r3, r4, r3
 800ac42:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac46:	3301      	adds	r3, #1
 800ac48:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac4a:	2b07      	cmp	r3, #7
 800ac4c:	dd08      	ble.n	800ac60 <_svfprintf_r+0x100c>
 800ac4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac52:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac54:	f003 f914 	bl	800de80 <__ssprint_r>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d000      	beq.n	800ac5e <_svfprintf_r+0x100a>
 800ac5c:	e1d9      	b.n	800b012 <_svfprintf_r+0x13be>
 800ac5e:	af2f      	add	r7, sp, #188	; 0xbc
 800ac60:	43e3      	mvns	r3, r4
 800ac62:	17db      	asrs	r3, r3, #31
 800ac64:	401c      	ands	r4, r3
 800ac66:	1b2c      	subs	r4, r5, r4
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	dd18      	ble.n	800ac9e <_svfprintf_r+0x104a>
 800ac6c:	0039      	movs	r1, r7
 800ac6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac70:	483f      	ldr	r0, [pc, #252]	; (800ad70 <_svfprintf_r+0x111c>)
 800ac72:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ac74:	3301      	adds	r3, #1
 800ac76:	3108      	adds	r1, #8
 800ac78:	6038      	str	r0, [r7, #0]
 800ac7a:	2c10      	cmp	r4, #16
 800ac7c:	dc7a      	bgt.n	800ad74 <_svfprintf_r+0x1120>
 800ac7e:	607c      	str	r4, [r7, #4]
 800ac80:	18a4      	adds	r4, r4, r2
 800ac82:	000f      	movs	r7, r1
 800ac84:	942e      	str	r4, [sp, #184]	; 0xb8
 800ac86:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac88:	2b07      	cmp	r3, #7
 800ac8a:	dd08      	ble.n	800ac9e <_svfprintf_r+0x104a>
 800ac8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac90:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac92:	f003 f8f5 	bl	800de80 <__ssprint_r>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d000      	beq.n	800ac9c <_svfprintf_r+0x1048>
 800ac9a:	e1ba      	b.n	800b012 <_svfprintf_r+0x13be>
 800ac9c:	af2f      	add	r7, sp, #188	; 0xbc
 800ac9e:	9b08      	ldr	r3, [sp, #32]
 800aca0:	195d      	adds	r5, r3, r5
 800aca2:	0573      	lsls	r3, r6, #21
 800aca4:	d50b      	bpl.n	800acbe <_svfprintf_r+0x106a>
 800aca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d176      	bne.n	800ad9a <_svfprintf_r+0x1146>
 800acac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d176      	bne.n	800ada0 <_svfprintf_r+0x114c>
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acb6:	189b      	adds	r3, r3, r2
 800acb8:	429d      	cmp	r5, r3
 800acba:	d900      	bls.n	800acbe <_svfprintf_r+0x106a>
 800acbc:	001d      	movs	r5, r3
 800acbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acc2:	4293      	cmp	r3, r2
 800acc4:	db01      	blt.n	800acca <_svfprintf_r+0x1076>
 800acc6:	07f3      	lsls	r3, r6, #31
 800acc8:	d516      	bpl.n	800acf8 <_svfprintf_r+0x10a4>
 800acca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800accc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acd2:	607b      	str	r3, [r7, #4]
 800acd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800acd6:	3708      	adds	r7, #8
 800acd8:	189b      	adds	r3, r3, r2
 800acda:	932e      	str	r3, [sp, #184]	; 0xb8
 800acdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800acde:	3301      	adds	r3, #1
 800ace0:	932d      	str	r3, [sp, #180]	; 0xb4
 800ace2:	2b07      	cmp	r3, #7
 800ace4:	dd08      	ble.n	800acf8 <_svfprintf_r+0x10a4>
 800ace6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ace8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acea:	aa2c      	add	r2, sp, #176	; 0xb0
 800acec:	f003 f8c8 	bl	800de80 <__ssprint_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d000      	beq.n	800acf6 <_svfprintf_r+0x10a2>
 800acf4:	e18d      	b.n	800b012 <_svfprintf_r+0x13be>
 800acf6:	af2f      	add	r7, sp, #188	; 0xbc
 800acf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acfa:	9b08      	ldr	r3, [sp, #32]
 800acfc:	4694      	mov	ip, r2
 800acfe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ad00:	4463      	add	r3, ip
 800ad02:	1b5b      	subs	r3, r3, r5
 800ad04:	1b14      	subs	r4, r2, r4
 800ad06:	429c      	cmp	r4, r3
 800ad08:	dd00      	ble.n	800ad0c <_svfprintf_r+0x10b8>
 800ad0a:	001c      	movs	r4, r3
 800ad0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad0e:	2c00      	cmp	r4, #0
 800ad10:	dd12      	ble.n	800ad38 <_svfprintf_r+0x10e4>
 800ad12:	18e3      	adds	r3, r4, r3
 800ad14:	932e      	str	r3, [sp, #184]	; 0xb8
 800ad16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad18:	603d      	str	r5, [r7, #0]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	607c      	str	r4, [r7, #4]
 800ad1e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad20:	3708      	adds	r7, #8
 800ad22:	2b07      	cmp	r3, #7
 800ad24:	dd08      	ble.n	800ad38 <_svfprintf_r+0x10e4>
 800ad26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad2a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad2c:	f003 f8a8 	bl	800de80 <__ssprint_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d000      	beq.n	800ad36 <_svfprintf_r+0x10e2>
 800ad34:	e16d      	b.n	800b012 <_svfprintf_r+0x13be>
 800ad36:	af2f      	add	r7, sp, #188	; 0xbc
 800ad38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad3c:	2510      	movs	r5, #16
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	43e2      	mvns	r2, r4
 800ad42:	17d2      	asrs	r2, r2, #31
 800ad44:	4014      	ands	r4, r2
 800ad46:	1b1c      	subs	r4, r3, r4
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	dc00      	bgt.n	800ad4e <_svfprintf_r+0x10fa>
 800ad4c:	e6b0      	b.n	800aab0 <_svfprintf_r+0xe5c>
 800ad4e:	0039      	movs	r1, r7
 800ad50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad52:	4807      	ldr	r0, [pc, #28]	; (800ad70 <_svfprintf_r+0x111c>)
 800ad54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ad56:	3301      	adds	r3, #1
 800ad58:	3108      	adds	r1, #8
 800ad5a:	6038      	str	r0, [r7, #0]
 800ad5c:	2c10      	cmp	r4, #16
 800ad5e:	dd00      	ble.n	800ad62 <_svfprintf_r+0x110e>
 800ad60:	e096      	b.n	800ae90 <_svfprintf_r+0x123c>
 800ad62:	1912      	adds	r2, r2, r4
 800ad64:	607c      	str	r4, [r7, #4]
 800ad66:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad68:	e6dd      	b.n	800ab26 <_svfprintf_r+0xed2>
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	0800f846 	.word	0x0800f846
 800ad70:	0800f858 	.word	0x0800f858
 800ad74:	2010      	movs	r0, #16
 800ad76:	1812      	adds	r2, r2, r0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad7c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad7e:	2b07      	cmp	r3, #7
 800ad80:	dd08      	ble.n	800ad94 <_svfprintf_r+0x1140>
 800ad82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad86:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad88:	f003 f87a 	bl	800de80 <__ssprint_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d000      	beq.n	800ad92 <_svfprintf_r+0x113e>
 800ad90:	e13f      	b.n	800b012 <_svfprintf_r+0x13be>
 800ad92:	a92f      	add	r1, sp, #188	; 0xbc
 800ad94:	000f      	movs	r7, r1
 800ad96:	3c10      	subs	r4, #16
 800ad98:	e768      	b.n	800ac6c <_svfprintf_r+0x1018>
 800ad9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d05d      	beq.n	800ae5c <_svfprintf_r+0x1208>
 800ada0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ada2:	3b01      	subs	r3, #1
 800ada4:	9310      	str	r3, [sp, #64]	; 0x40
 800ada6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ada8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adae:	607b      	str	r3, [r7, #4]
 800adb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800adb2:	3708      	adds	r7, #8
 800adb4:	189b      	adds	r3, r3, r2
 800adb6:	932e      	str	r3, [sp, #184]	; 0xb8
 800adb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800adba:	3301      	adds	r3, #1
 800adbc:	932d      	str	r3, [sp, #180]	; 0xb4
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	dd08      	ble.n	800add4 <_svfprintf_r+0x1180>
 800adc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adc6:	aa2c      	add	r2, sp, #176	; 0xb0
 800adc8:	f003 f85a 	bl	800de80 <__ssprint_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d000      	beq.n	800add2 <_svfprintf_r+0x117e>
 800add0:	e11f      	b.n	800b012 <_svfprintf_r+0x13be>
 800add2:	af2f      	add	r7, sp, #188	; 0xbc
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add8:	189c      	adds	r4, r3, r2
 800adda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800addc:	1b64      	subs	r4, r4, r5
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	429c      	cmp	r4, r3
 800ade2:	dd00      	ble.n	800ade6 <_svfprintf_r+0x1192>
 800ade4:	001c      	movs	r4, r3
 800ade6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ade8:	2c00      	cmp	r4, #0
 800adea:	dd12      	ble.n	800ae12 <_svfprintf_r+0x11be>
 800adec:	18e3      	adds	r3, r4, r3
 800adee:	932e      	str	r3, [sp, #184]	; 0xb8
 800adf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800adf2:	603d      	str	r5, [r7, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	607c      	str	r4, [r7, #4]
 800adf8:	932d      	str	r3, [sp, #180]	; 0xb4
 800adfa:	3708      	adds	r7, #8
 800adfc:	2b07      	cmp	r3, #7
 800adfe:	dd08      	ble.n	800ae12 <_svfprintf_r+0x11be>
 800ae00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae04:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae06:	f003 f83b 	bl	800de80 <__ssprint_r>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d000      	beq.n	800ae10 <_svfprintf_r+0x11bc>
 800ae0e:	e100      	b.n	800b012 <_svfprintf_r+0x13be>
 800ae10:	af2f      	add	r7, sp, #188	; 0xbc
 800ae12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	43e3      	mvns	r3, r4
 800ae18:	17db      	asrs	r3, r3, #31
 800ae1a:	401c      	ands	r4, r3
 800ae1c:	1b14      	subs	r4, r2, r4
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	dd18      	ble.n	800ae54 <_svfprintf_r+0x1200>
 800ae22:	0039      	movs	r1, r7
 800ae24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae26:	48aa      	ldr	r0, [pc, #680]	; (800b0d0 <_svfprintf_r+0x147c>)
 800ae28:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	3108      	adds	r1, #8
 800ae2e:	6038      	str	r0, [r7, #0]
 800ae30:	2c10      	cmp	r4, #16
 800ae32:	dc1a      	bgt.n	800ae6a <_svfprintf_r+0x1216>
 800ae34:	1912      	adds	r2, r2, r4
 800ae36:	607c      	str	r4, [r7, #4]
 800ae38:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae3a:	000f      	movs	r7, r1
 800ae3c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae3e:	2b07      	cmp	r3, #7
 800ae40:	dd08      	ble.n	800ae54 <_svfprintf_r+0x1200>
 800ae42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae46:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae48:	f003 f81a 	bl	800de80 <__ssprint_r>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d000      	beq.n	800ae52 <_svfprintf_r+0x11fe>
 800ae50:	e0df      	b.n	800b012 <_svfprintf_r+0x13be>
 800ae52:	af2f      	add	r7, sp, #188	; 0xbc
 800ae54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	18ed      	adds	r5, r5, r3
 800ae5a:	e724      	b.n	800aca6 <_svfprintf_r+0x1052>
 800ae5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	9312      	str	r3, [sp, #72]	; 0x48
 800ae62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae64:	3b01      	subs	r3, #1
 800ae66:	9311      	str	r3, [sp, #68]	; 0x44
 800ae68:	e79d      	b.n	800ada6 <_svfprintf_r+0x1152>
 800ae6a:	2010      	movs	r0, #16
 800ae6c:	1812      	adds	r2, r2, r0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae72:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae74:	2b07      	cmp	r3, #7
 800ae76:	dd08      	ble.n	800ae8a <_svfprintf_r+0x1236>
 800ae78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae7c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae7e:	f002 ffff 	bl	800de80 <__ssprint_r>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d000      	beq.n	800ae88 <_svfprintf_r+0x1234>
 800ae86:	e0c4      	b.n	800b012 <_svfprintf_r+0x13be>
 800ae88:	a92f      	add	r1, sp, #188	; 0xbc
 800ae8a:	000f      	movs	r7, r1
 800ae8c:	3c10      	subs	r4, #16
 800ae8e:	e7c8      	b.n	800ae22 <_svfprintf_r+0x11ce>
 800ae90:	3210      	adds	r2, #16
 800ae92:	607d      	str	r5, [r7, #4]
 800ae94:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae96:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae98:	2b07      	cmp	r3, #7
 800ae9a:	dd08      	ble.n	800aeae <_svfprintf_r+0x125a>
 800ae9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aea0:	aa2c      	add	r2, sp, #176	; 0xb0
 800aea2:	f002 ffed 	bl	800de80 <__ssprint_r>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d000      	beq.n	800aeac <_svfprintf_r+0x1258>
 800aeaa:	e0b2      	b.n	800b012 <_svfprintf_r+0x13be>
 800aeac:	a92f      	add	r1, sp, #188	; 0xbc
 800aeae:	000f      	movs	r7, r1
 800aeb0:	3c10      	subs	r4, #16
 800aeb2:	e74c      	b.n	800ad4e <_svfprintf_r+0x10fa>
 800aeb4:	003c      	movs	r4, r7
 800aeb6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800aeb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aeba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aebc:	3101      	adds	r1, #1
 800aebe:	3301      	adds	r3, #1
 800aec0:	3408      	adds	r4, #8
 800aec2:	2a01      	cmp	r2, #1
 800aec4:	dc03      	bgt.n	800aece <_svfprintf_r+0x127a>
 800aec6:	2201      	movs	r2, #1
 800aec8:	4216      	tst	r6, r2
 800aeca:	d100      	bne.n	800aece <_svfprintf_r+0x127a>
 800aecc:	e07f      	b.n	800afce <_svfprintf_r+0x137a>
 800aece:	9a08      	ldr	r2, [sp, #32]
 800aed0:	912e      	str	r1, [sp, #184]	; 0xb8
 800aed2:	603a      	str	r2, [r7, #0]
 800aed4:	2201      	movs	r2, #1
 800aed6:	932d      	str	r3, [sp, #180]	; 0xb4
 800aed8:	607a      	str	r2, [r7, #4]
 800aeda:	2b07      	cmp	r3, #7
 800aedc:	dd08      	ble.n	800aef0 <_svfprintf_r+0x129c>
 800aede:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aee0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aee2:	aa2c      	add	r2, sp, #176	; 0xb0
 800aee4:	f002 ffcc 	bl	800de80 <__ssprint_r>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d000      	beq.n	800aeee <_svfprintf_r+0x129a>
 800aeec:	e091      	b.n	800b012 <_svfprintf_r+0x13be>
 800aeee:	ac2f      	add	r4, sp, #188	; 0xbc
 800aef0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aef2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aef8:	6063      	str	r3, [r4, #4]
 800aefa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aefc:	3408      	adds	r4, #8
 800aefe:	189b      	adds	r3, r3, r2
 800af00:	932e      	str	r3, [sp, #184]	; 0xb8
 800af02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af04:	3301      	adds	r3, #1
 800af06:	932d      	str	r3, [sp, #180]	; 0xb4
 800af08:	2b07      	cmp	r3, #7
 800af0a:	dd07      	ble.n	800af1c <_svfprintf_r+0x12c8>
 800af0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af10:	aa2c      	add	r2, sp, #176	; 0xb0
 800af12:	f002 ffb5 	bl	800de80 <__ssprint_r>
 800af16:	2800      	cmp	r0, #0
 800af18:	d17b      	bne.n	800b012 <_svfprintf_r+0x13be>
 800af1a:	ac2f      	add	r4, sp, #188	; 0xbc
 800af1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af1e:	2200      	movs	r2, #0
 800af20:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af22:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af28:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800af2a:	1e5d      	subs	r5, r3, #1
 800af2c:	2300      	movs	r3, #0
 800af2e:	f7f5 fa8b 	bl	8000448 <__aeabi_dcmpeq>
 800af32:	2800      	cmp	r0, #0
 800af34:	d126      	bne.n	800af84 <_svfprintf_r+0x1330>
 800af36:	9b08      	ldr	r3, [sp, #32]
 800af38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3a:	3301      	adds	r3, #1
 800af3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	1e7b      	subs	r3, r7, #1
 800af42:	3201      	adds	r2, #1
 800af44:	185b      	adds	r3, r3, r1
 800af46:	6065      	str	r5, [r4, #4]
 800af48:	932e      	str	r3, [sp, #184]	; 0xb8
 800af4a:	922d      	str	r2, [sp, #180]	; 0xb4
 800af4c:	3408      	adds	r4, #8
 800af4e:	2a07      	cmp	r2, #7
 800af50:	dd07      	ble.n	800af62 <_svfprintf_r+0x130e>
 800af52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af56:	aa2c      	add	r2, sp, #176	; 0xb0
 800af58:	f002 ff92 	bl	800de80 <__ssprint_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d158      	bne.n	800b012 <_svfprintf_r+0x13be>
 800af60:	ac2f      	add	r4, sp, #188	; 0xbc
 800af62:	ab28      	add	r3, sp, #160	; 0xa0
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af6e:	189b      	adds	r3, r3, r2
 800af70:	932e      	str	r3, [sp, #184]	; 0xb8
 800af72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af74:	3301      	adds	r3, #1
 800af76:	932d      	str	r3, [sp, #180]	; 0xb4
 800af78:	2b07      	cmp	r3, #7
 800af7a:	dd00      	ble.n	800af7e <_svfprintf_r+0x132a>
 800af7c:	e638      	b.n	800abf0 <_svfprintf_r+0xf9c>
 800af7e:	3408      	adds	r4, #8
 800af80:	0027      	movs	r7, r4
 800af82:	e595      	b.n	800aab0 <_svfprintf_r+0xe5c>
 800af84:	2710      	movs	r7, #16
 800af86:	2d00      	cmp	r5, #0
 800af88:	ddeb      	ble.n	800af62 <_svfprintf_r+0x130e>
 800af8a:	0021      	movs	r1, r4
 800af8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af8e:	4850      	ldr	r0, [pc, #320]	; (800b0d0 <_svfprintf_r+0x147c>)
 800af90:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800af92:	3301      	adds	r3, #1
 800af94:	3108      	adds	r1, #8
 800af96:	6020      	str	r0, [r4, #0]
 800af98:	2d10      	cmp	r5, #16
 800af9a:	dc07      	bgt.n	800afac <_svfprintf_r+0x1358>
 800af9c:	6065      	str	r5, [r4, #4]
 800af9e:	000c      	movs	r4, r1
 800afa0:	18ad      	adds	r5, r5, r2
 800afa2:	952e      	str	r5, [sp, #184]	; 0xb8
 800afa4:	932d      	str	r3, [sp, #180]	; 0xb4
 800afa6:	2b07      	cmp	r3, #7
 800afa8:	dddb      	ble.n	800af62 <_svfprintf_r+0x130e>
 800afaa:	e7d2      	b.n	800af52 <_svfprintf_r+0x12fe>
 800afac:	3210      	adds	r2, #16
 800afae:	6067      	str	r7, [r4, #4]
 800afb0:	922e      	str	r2, [sp, #184]	; 0xb8
 800afb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800afb4:	2b07      	cmp	r3, #7
 800afb6:	dd07      	ble.n	800afc8 <_svfprintf_r+0x1374>
 800afb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800afbe:	f002 ff5f 	bl	800de80 <__ssprint_r>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d125      	bne.n	800b012 <_svfprintf_r+0x13be>
 800afc6:	a92f      	add	r1, sp, #188	; 0xbc
 800afc8:	000c      	movs	r4, r1
 800afca:	3d10      	subs	r5, #16
 800afcc:	e7dd      	b.n	800af8a <_svfprintf_r+0x1336>
 800afce:	9808      	ldr	r0, [sp, #32]
 800afd0:	912e      	str	r1, [sp, #184]	; 0xb8
 800afd2:	c705      	stmia	r7!, {r0, r2}
 800afd4:	932d      	str	r3, [sp, #180]	; 0xb4
 800afd6:	e7e6      	b.n	800afa6 <_svfprintf_r+0x1352>
 800afd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800afda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afdc:	2510      	movs	r5, #16
 800afde:	1a9c      	subs	r4, r3, r2
 800afe0:	2c00      	cmp	r4, #0
 800afe2:	dc00      	bgt.n	800afe6 <_svfprintf_r+0x1392>
 800afe4:	e567      	b.n	800aab6 <_svfprintf_r+0xe62>
 800afe6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afe8:	493a      	ldr	r1, [pc, #232]	; (800b0d4 <_svfprintf_r+0x1480>)
 800afea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800afec:	3301      	adds	r3, #1
 800afee:	6039      	str	r1, [r7, #0]
 800aff0:	2c10      	cmp	r4, #16
 800aff2:	dc19      	bgt.n	800b028 <_svfprintf_r+0x13d4>
 800aff4:	607c      	str	r4, [r7, #4]
 800aff6:	18a4      	adds	r4, r4, r2
 800aff8:	942e      	str	r4, [sp, #184]	; 0xb8
 800affa:	932d      	str	r3, [sp, #180]	; 0xb4
 800affc:	2b07      	cmp	r3, #7
 800affe:	dc00      	bgt.n	800b002 <_svfprintf_r+0x13ae>
 800b000:	e559      	b.n	800aab6 <_svfprintf_r+0xe62>
 800b002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b004:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b006:	aa2c      	add	r2, sp, #176	; 0xb0
 800b008:	f002 ff3a 	bl	800de80 <__ssprint_r>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d100      	bne.n	800b012 <_svfprintf_r+0x13be>
 800b010:	e551      	b.n	800aab6 <_svfprintf_r+0xe62>
 800b012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <_svfprintf_r+0x13c8>
 800b018:	f7ff f845 	bl	800a0a6 <_svfprintf_r+0x452>
 800b01c:	0019      	movs	r1, r3
 800b01e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b020:	f7fd fd80 	bl	8008b24 <_free_r>
 800b024:	f7ff f83f 	bl	800a0a6 <_svfprintf_r+0x452>
 800b028:	3210      	adds	r2, #16
 800b02a:	607d      	str	r5, [r7, #4]
 800b02c:	922e      	str	r2, [sp, #184]	; 0xb8
 800b02e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b030:	3708      	adds	r7, #8
 800b032:	2b07      	cmp	r3, #7
 800b034:	dd07      	ble.n	800b046 <_svfprintf_r+0x13f2>
 800b036:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b038:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b03a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b03c:	f002 ff20 	bl	800de80 <__ssprint_r>
 800b040:	2800      	cmp	r0, #0
 800b042:	d1e6      	bne.n	800b012 <_svfprintf_r+0x13be>
 800b044:	af2f      	add	r7, sp, #188	; 0xbc
 800b046:	3c10      	subs	r4, #16
 800b048:	e7cd      	b.n	800afe6 <_svfprintf_r+0x1392>
 800b04a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b04c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b04e:	f7fd fd69 	bl	8008b24 <_free_r>
 800b052:	e549      	b.n	800aae8 <_svfprintf_r+0xe94>
 800b054:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <_svfprintf_r+0x140a>
 800b05a:	f7ff f824 	bl	800a0a6 <_svfprintf_r+0x452>
 800b05e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b060:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b062:	aa2c      	add	r2, sp, #176	; 0xb0
 800b064:	f002 ff0c 	bl	800de80 <__ssprint_r>
 800b068:	f7ff f81d 	bl	800a0a6 <_svfprintf_r+0x452>
 800b06c:	0034      	movs	r4, r6
 800b06e:	2a00      	cmp	r2, #0
 800b070:	d101      	bne.n	800b076 <_svfprintf_r+0x1422>
 800b072:	f7fe ff8c 	bl	8009f8e <_svfprintf_r+0x33a>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <_svfprintf_r+0x142a>
 800b07a:	f7ff fc01 	bl	800a880 <_svfprintf_r+0xc2c>
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d100      	bne.n	800b084 <_svfprintf_r+0x1430>
 800b082:	e459      	b.n	800a938 <_svfprintf_r+0xce4>
 800b084:	2507      	movs	r5, #7
 800b086:	ab58      	add	r3, sp, #352	; 0x160
 800b088:	9308      	str	r3, [sp, #32]
 800b08a:	9a08      	ldr	r2, [sp, #32]
 800b08c:	0013      	movs	r3, r2
 800b08e:	3b01      	subs	r3, #1
 800b090:	9308      	str	r3, [sp, #32]
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	9908      	ldr	r1, [sp, #32]
 800b096:	402b      	ands	r3, r5
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	700b      	strb	r3, [r1, #0]
 800b09c:	9907      	ldr	r1, [sp, #28]
 800b09e:	074e      	lsls	r6, r1, #29
 800b0a0:	9906      	ldr	r1, [sp, #24]
 800b0a2:	08c8      	lsrs	r0, r1, #3
 800b0a4:	9907      	ldr	r1, [sp, #28]
 800b0a6:	4306      	orrs	r6, r0
 800b0a8:	08c9      	lsrs	r1, r1, #3
 800b0aa:	9107      	str	r1, [sp, #28]
 800b0ac:	0031      	movs	r1, r6
 800b0ae:	9807      	ldr	r0, [sp, #28]
 800b0b0:	9606      	str	r6, [sp, #24]
 800b0b2:	4301      	orrs	r1, r0
 800b0b4:	d1e9      	bne.n	800b08a <_svfprintf_r+0x1436>
 800b0b6:	07e1      	lsls	r1, r4, #31
 800b0b8:	d400      	bmi.n	800b0bc <_svfprintf_r+0x1468>
 800b0ba:	e42a      	b.n	800a912 <_svfprintf_r+0xcbe>
 800b0bc:	2b30      	cmp	r3, #48	; 0x30
 800b0be:	d100      	bne.n	800b0c2 <_svfprintf_r+0x146e>
 800b0c0:	e427      	b.n	800a912 <_svfprintf_r+0xcbe>
 800b0c2:	2130      	movs	r1, #48	; 0x30
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	7019      	strb	r1, [r3, #0]
 800b0ca:	1e93      	subs	r3, r2, #2
 800b0cc:	9308      	str	r3, [sp, #32]
 800b0ce:	e420      	b.n	800a912 <_svfprintf_r+0xcbe>
 800b0d0:	0800f858 	.word	0x0800f858
 800b0d4:	0800f848 	.word	0x0800f848

0800b0d8 <__ssvfscanf_r>:
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	4ca7      	ldr	r4, [pc, #668]	; (800b378 <__ssvfscanf_r+0x2a0>)
 800b0dc:	44a5      	add	sp, r4
 800b0de:	af02      	add	r7, sp, #8
 800b0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800b0e2:	000b      	movs	r3, r1
 800b0e4:	6378      	str	r0, [r7, #52]	; 0x34
 800b0e6:	6479      	str	r1, [r7, #68]	; 0x44
 800b0e8:	61ba      	str	r2, [r7, #24]
 800b0ea:	220c      	movs	r2, #12
 800b0ec:	5e9a      	ldrsh	r2, [r3, r2]
 800b0ee:	2380      	movs	r3, #128	; 0x80
 800b0f0:	019b      	lsls	r3, r3, #6
 800b0f2:	421a      	tst	r2, r3
 800b0f4:	d105      	bne.n	800b102 <__ssvfscanf_r+0x2a>
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	818b      	strh	r3, [r1, #12]
 800b0fa:	4aa0      	ldr	r2, [pc, #640]	; (800b37c <__ssvfscanf_r+0x2a4>)
 800b0fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b0fe:	4013      	ands	r3, r2
 800b100:	664b      	str	r3, [r1, #100]	; 0x64
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	643b      	str	r3, [r7, #64]	; 0x40
 800b108:	62bb      	str	r3, [r7, #40]	; 0x28
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
 800b10c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	3201      	adds	r2, #1
 800b118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b11a:	61ba      	str	r2, [r7, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d100      	bne.n	800b122 <__ssvfscanf_r+0x4a>
 800b120:	e0d7      	b.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b122:	2608      	movs	r6, #8
 800b124:	2108      	movs	r1, #8
 800b126:	4a96      	ldr	r2, [pc, #600]	; (800b380 <__ssvfscanf_r+0x2a8>)
 800b128:	5cd2      	ldrb	r2, [r2, r3]
 800b12a:	4016      	ands	r6, r2
 800b12c:	420a      	tst	r2, r1
 800b12e:	d01d      	beq.n	800b16c <__ssvfscanf_r+0x94>
 800b130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd12      	ble.n	800b15e <__ssvfscanf_r+0x86>
 800b138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b13a:	4991      	ldr	r1, [pc, #580]	; (800b380 <__ssvfscanf_r+0x2a8>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	5c8a      	ldrb	r2, [r1, r2]
 800b142:	2108      	movs	r1, #8
 800b144:	420a      	tst	r2, r1
 800b146:	d0e3      	beq.n	800b110 <__ssvfscanf_r+0x38>
 800b148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b14a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b14c:	3201      	adds	r2, #1
 800b14e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b152:	3301      	adds	r3, #1
 800b154:	6852      	ldr	r2, [r2, #4]
 800b156:	600b      	str	r3, [r1, #0]
 800b158:	3a01      	subs	r2, #1
 800b15a:	604a      	str	r2, [r1, #4]
 800b15c:	e7e8      	b.n	800b130 <__ssvfscanf_r+0x58>
 800b15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b162:	f002 ff4d 	bl	800e000 <__ssrefill_r>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0e6      	beq.n	800b138 <__ssvfscanf_r+0x60>
 800b16a:	e7d1      	b.n	800b110 <__ssvfscanf_r+0x38>
 800b16c:	2b25      	cmp	r3, #37	; 0x25
 800b16e:	d165      	bne.n	800b23c <__ssvfscanf_r+0x164>
 800b170:	250a      	movs	r5, #10
 800b172:	2480      	movs	r4, #128	; 0x80
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b178:	3b16      	subs	r3, #22
 800b17a:	69b9      	ldr	r1, [r7, #24]
 800b17c:	3101      	adds	r1, #1
 800b17e:	61b9      	str	r1, [r7, #24]
 800b180:	7811      	ldrb	r1, [r2, #0]
 800b182:	0008      	movs	r0, r1
 800b184:	3825      	subs	r0, #37	; 0x25
 800b186:	2855      	cmp	r0, #85	; 0x55
 800b188:	d900      	bls.n	800b18c <__ssvfscanf_r+0xb4>
 800b18a:	e170      	b.n	800b46e <__ssvfscanf_r+0x396>
 800b18c:	f7f4 ffcc 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b190:	016f0056 	.word	0x016f0056
 800b194:	016f016f 	.word	0x016f016f
 800b198:	0081016f 	.word	0x0081016f
 800b19c:	016f016f 	.word	0x016f016f
 800b1a0:	016f016f 	.word	0x016f016f
 800b1a4:	00b8016f 	.word	0x00b8016f
 800b1a8:	00b800b8 	.word	0x00b800b8
 800b1ac:	00b800b8 	.word	0x00b800b8
 800b1b0:	00b800b8 	.word	0x00b800b8
 800b1b4:	00b800b8 	.word	0x00b800b8
 800b1b8:	016f00b8 	.word	0x016f00b8
 800b1bc:	016f016f 	.word	0x016f016f
 800b1c0:	016f016f 	.word	0x016f016f
 800b1c4:	016f016f 	.word	0x016f016f
 800b1c8:	016f00d8 	.word	0x016f00d8
 800b1cc:	00c1010a 	.word	0x00c1010a
 800b1d0:	00d800d8 	.word	0x00d800d8
 800b1d4:	016f00d8 	.word	0x016f00d8
 800b1d8:	016f016f 	.word	0x016f016f
 800b1dc:	009f016f 	.word	0x009f016f
 800b1e0:	016f016f 	.word	0x016f016f
 800b1e4:	016f00c9 	.word	0x016f00c9
 800b1e8:	016f016f 	.word	0x016f016f
 800b1ec:	016f00f0 	.word	0x016f00f0
 800b1f0:	016f016f 	.word	0x016f016f
 800b1f4:	00d1016f 	.word	0x00d1016f
 800b1f8:	016f016f 	.word	0x016f016f
 800b1fc:	016f00fe 	.word	0x016f00fe
 800b200:	016f016f 	.word	0x016f016f
 800b204:	016f016f 	.word	0x016f016f
 800b208:	016f00d8 	.word	0x016f00d8
 800b20c:	00c3010c 	.word	0x00c3010c
 800b210:	00d800d8 	.word	0x00d800d8
 800b214:	009400d8 	.word	0x009400d8
 800b218:	009f012f 	.word	0x009f012f
 800b21c:	0088016f 	.word	0x0088016f
 800b220:	011200a9 	.word	0x011200a9
 800b224:	011000cb 	.word	0x011000cb
 800b228:	016f016f 	.word	0x016f016f
 800b22c:	00a600f2 	.word	0x00a600f2
 800b230:	016f00cf 	.word	0x016f00cf
 800b234:	00d1016f 	.word	0x00d1016f
 800b238:	00a6016f 	.word	0x00a6016f
 800b23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dd12      	ble.n	800b26a <__ssvfscanf_r+0x192>
 800b244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3a01      	subs	r2, #1
 800b24c:	7819      	ldrb	r1, [r3, #0]
 800b24e:	7812      	ldrb	r2, [r2, #0]
 800b250:	4291      	cmp	r1, r2
 800b252:	d13e      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b258:	6852      	ldr	r2, [r2, #4]
 800b25a:	3301      	adds	r3, #1
 800b25c:	600b      	str	r3, [r1, #0]
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	3a01      	subs	r2, #1
 800b262:	604a      	str	r2, [r1, #4]
 800b264:	3301      	adds	r3, #1
 800b266:	63bb      	str	r3, [r7, #56]	; 0x38
 800b268:	e752      	b.n	800b110 <__ssvfscanf_r+0x38>
 800b26a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b26e:	f002 fec7 	bl	800e000 <__ssrefill_r>
 800b272:	2800      	cmp	r0, #0
 800b274:	d0e6      	beq.n	800b244 <__ssvfscanf_r+0x16c>
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <__ssvfscanf_r+0x1ac>
 800b27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b27e:	899b      	ldrh	r3, [r3, #12]
 800b280:	065b      	lsls	r3, r3, #25
 800b282:	d526      	bpl.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d000      	beq.n	800b28c <__ssvfscanf_r+0x1b4>
 800b28a:	e0f6      	b.n	800b47a <__ssvfscanf_r+0x3a2>
 800b28c:	3b01      	subs	r3, #1
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b290:	e104      	b.n	800b49c <__ssvfscanf_r+0x3c4>
 800b292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b294:	4332      	orrs	r2, r6
 800b296:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b298:	d11b      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b29a:	2610      	movs	r6, #16
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	e76c      	b.n	800b17a <__ssvfscanf_r+0xa2>
 800b2a0:	421e      	tst	r6, r3
 800b2a2:	d116      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b2a4:	7851      	ldrb	r1, [r2, #1]
 800b2a6:	296c      	cmp	r1, #108	; 0x6c
 800b2a8:	d103      	bne.n	800b2b2 <__ssvfscanf_r+0x1da>
 800b2aa:	3202      	adds	r2, #2
 800b2ac:	61ba      	str	r2, [r7, #24]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	e000      	b.n	800b2b4 <__ssvfscanf_r+0x1dc>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	4316      	orrs	r6, r2
 800b2b6:	e7f1      	b.n	800b29c <__ssvfscanf_r+0x1c4>
 800b2b8:	421e      	tst	r6, r3
 800b2ba:	d10a      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b2bc:	7851      	ldrb	r1, [r2, #1]
 800b2be:	2968      	cmp	r1, #104	; 0x68
 800b2c0:	d103      	bne.n	800b2ca <__ssvfscanf_r+0x1f2>
 800b2c2:	3202      	adds	r2, #2
 800b2c4:	61ba      	str	r2, [r7, #24]
 800b2c6:	2208      	movs	r2, #8
 800b2c8:	e7f4      	b.n	800b2b4 <__ssvfscanf_r+0x1dc>
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	e7f2      	b.n	800b2b4 <__ssvfscanf_r+0x1dc>
 800b2ce:	421e      	tst	r6, r3
 800b2d0:	d0ed      	beq.n	800b2ae <__ssvfscanf_r+0x1d6>
 800b2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d000      	beq.n	800b2da <__ssvfscanf_r+0x202>
 800b2d8:	e0da      	b.n	800b490 <__ssvfscanf_r+0x3b8>
 800b2da:	e0df      	b.n	800b49c <__ssvfscanf_r+0x3c4>
 800b2dc:	421e      	tst	r6, r3
 800b2de:	d0dd      	beq.n	800b29c <__ssvfscanf_r+0x1c4>
 800b2e0:	e7f7      	b.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b2e2:	228f      	movs	r2, #143	; 0x8f
 800b2e4:	218f      	movs	r1, #143	; 0x8f
 800b2e6:	4032      	ands	r2, r6
 800b2e8:	420e      	tst	r6, r1
 800b2ea:	d1f2      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b2ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	d104      	bne.n	800b2fc <__ssvfscanf_r+0x224>
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	a902      	add	r1, sp, #8
 800b2f6:	6439      	str	r1, [r7, #64]	; 0x40
 800b2f8:	600a      	str	r2, [r1, #0]
 800b2fa:	604a      	str	r2, [r1, #4]
 800b2fc:	4326      	orrs	r6, r4
 800b2fe:	e7cd      	b.n	800b29c <__ssvfscanf_r+0x1c4>
 800b300:	228f      	movs	r2, #143	; 0x8f
 800b302:	4216      	tst	r6, r2
 800b304:	d1e5      	bne.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b308:	436a      	muls	r2, r5
 800b30a:	3a30      	subs	r2, #48	; 0x30
 800b30c:	188a      	adds	r2, r1, r2
 800b30e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b310:	e7c4      	b.n	800b29c <__ssvfscanf_r+0x1c4>
 800b312:	2301      	movs	r3, #1
 800b314:	431e      	orrs	r6, r3
 800b316:	4b1b      	ldr	r3, [pc, #108]	; (800b384 <__ssvfscanf_r+0x2ac>)
 800b318:	617b      	str	r3, [r7, #20]
 800b31a:	230a      	movs	r3, #10
 800b31c:	2403      	movs	r4, #3
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
 800b320:	e00f      	b.n	800b342 <__ssvfscanf_r+0x26a>
 800b322:	2301      	movs	r3, #1
 800b324:	431e      	orrs	r6, r3
 800b326:	4b18      	ldr	r3, [pc, #96]	; (800b388 <__ssvfscanf_r+0x2b0>)
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	2308      	movs	r3, #8
 800b32c:	e7f6      	b.n	800b31c <__ssvfscanf_r+0x244>
 800b32e:	4b16      	ldr	r3, [pc, #88]	; (800b388 <__ssvfscanf_r+0x2b0>)
 800b330:	e7f2      	b.n	800b318 <__ssvfscanf_r+0x240>
 800b332:	2380      	movs	r3, #128	; 0x80
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	431e      	orrs	r6, r3
 800b338:	4b13      	ldr	r3, [pc, #76]	; (800b388 <__ssvfscanf_r+0x2b0>)
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	2310      	movs	r3, #16
 800b33e:	e7ed      	b.n	800b31c <__ssvfscanf_r+0x244>
 800b340:	2404      	movs	r4, #4
 800b342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd55      	ble.n	800b3f6 <__ssvfscanf_r+0x31e>
 800b34a:	0673      	lsls	r3, r6, #25
 800b34c:	d407      	bmi.n	800b35e <__ssvfscanf_r+0x286>
 800b34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b350:	490b      	ldr	r1, [pc, #44]	; (800b380 <__ssvfscanf_r+0x2a8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	5c8a      	ldrb	r2, [r1, r2]
 800b358:	2108      	movs	r1, #8
 800b35a:	420a      	tst	r2, r1
 800b35c:	d152      	bne.n	800b404 <__ssvfscanf_r+0x32c>
 800b35e:	1e60      	subs	r0, r4, #1
 800b360:	2803      	cmp	r0, #3
 800b362:	d863      	bhi.n	800b42c <__ssvfscanf_r+0x354>
 800b364:	f7f4 fee0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b368:	03bd01da 	.word	0x03bd01da
 800b36c:	068a0579 	.word	0x068a0579
 800b370:	2301      	movs	r3, #1
 800b372:	431e      	orrs	r6, r3
 800b374:	2402      	movs	r4, #2
 800b376:	e7e4      	b.n	800b342 <__ssvfscanf_r+0x26a>
 800b378:	fffffd34 	.word	0xfffffd34
 800b37c:	ffffdfff 	.word	0xffffdfff
 800b380:	0800f541 	.word	0x0800f541
 800b384:	08008529 	.word	0x08008529
 800b388:	0800db31 	.word	0x0800db31
 800b38c:	2248      	movs	r2, #72	; 0x48
 800b38e:	2318      	movs	r3, #24
 800b390:	189b      	adds	r3, r3, r2
 800b392:	19d8      	adds	r0, r3, r7
 800b394:	69b9      	ldr	r1, [r7, #24]
 800b396:	f001 f9d7 	bl	800c748 <__sccl>
 800b39a:	2340      	movs	r3, #64	; 0x40
 800b39c:	2401      	movs	r4, #1
 800b39e:	61b8      	str	r0, [r7, #24]
 800b3a0:	431e      	orrs	r6, r3
 800b3a2:	e7ce      	b.n	800b342 <__ssvfscanf_r+0x26a>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	431e      	orrs	r6, r3
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	2400      	movs	r4, #0
 800b3ac:	431e      	orrs	r6, r3
 800b3ae:	e7c8      	b.n	800b342 <__ssvfscanf_r+0x26a>
 800b3b0:	2388      	movs	r3, #136	; 0x88
 800b3b2:	e7bf      	b.n	800b334 <__ssvfscanf_r+0x25c>
 800b3b4:	06f3      	lsls	r3, r6, #27
 800b3b6:	d500      	bpl.n	800b3ba <__ssvfscanf_r+0x2e2>
 800b3b8:	e6aa      	b.n	800b110 <__ssvfscanf_r+0x38>
 800b3ba:	2108      	movs	r1, #8
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	cb04      	ldmia	r3!, {r2}
 800b3c0:	420e      	tst	r6, r1
 800b3c2:	d003      	beq.n	800b3cc <__ssvfscanf_r+0x2f4>
 800b3c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3c6:	7011      	strb	r1, [r2, #0]
 800b3c8:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ca:	e6a1      	b.n	800b110 <__ssvfscanf_r+0x38>
 800b3cc:	0771      	lsls	r1, r6, #29
 800b3ce:	d502      	bpl.n	800b3d6 <__ssvfscanf_r+0x2fe>
 800b3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3d2:	8011      	strh	r1, [r2, #0]
 800b3d4:	e7f8      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800b3d6:	07f1      	lsls	r1, r6, #31
 800b3d8:	d502      	bpl.n	800b3e0 <__ssvfscanf_r+0x308>
 800b3da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3dc:	6011      	str	r1, [r2, #0]
 800b3de:	e7f3      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800b3e0:	07b6      	lsls	r6, r6, #30
 800b3e2:	d5fa      	bpl.n	800b3da <__ssvfscanf_r+0x302>
 800b3e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3e6:	6011      	str	r1, [r2, #0]
 800b3e8:	17c9      	asrs	r1, r1, #31
 800b3ea:	6051      	str	r1, [r2, #4]
 800b3ec:	e7ec      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800b3ee:	4ba2      	ldr	r3, [pc, #648]	; (800b678 <__ssvfscanf_r+0x5a0>)
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e792      	b.n	800b31c <__ssvfscanf_r+0x244>
 800b3f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b3fa:	f002 fe01 	bl	800e000 <__ssrefill_r>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d0a3      	beq.n	800b34a <__ssvfscanf_r+0x272>
 800b402:	e738      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b408:	3201      	adds	r2, #1
 800b40a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b40c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b40e:	6852      	ldr	r2, [r2, #4]
 800b410:	3a01      	subs	r2, #1
 800b412:	604a      	str	r2, [r1, #4]
 800b414:	2a00      	cmp	r2, #0
 800b416:	dd02      	ble.n	800b41e <__ssvfscanf_r+0x346>
 800b418:	3301      	adds	r3, #1
 800b41a:	600b      	str	r3, [r1, #0]
 800b41c:	e797      	b.n	800b34e <__ssvfscanf_r+0x276>
 800b41e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b422:	f002 fded 	bl	800e000 <__ssrefill_r>
 800b426:	2800      	cmp	r0, #0
 800b428:	d091      	beq.n	800b34e <__ssvfscanf_r+0x276>
 800b42a:	e724      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b42c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b42e:	2301      	movs	r3, #1
 800b430:	2a00      	cmp	r2, #0
 800b432:	d100      	bne.n	800b436 <__ssvfscanf_r+0x35e>
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b436:	2210      	movs	r2, #16
 800b438:	0034      	movs	r4, r6
 800b43a:	4032      	ands	r2, r6
 800b43c:	623a      	str	r2, [r7, #32]
 800b43e:	401c      	ands	r4, r3
 800b440:	421e      	tst	r6, r3
 800b442:	d100      	bne.n	800b446 <__ssvfscanf_r+0x36e>
 800b444:	e0f3      	b.n	800b62e <__ssvfscanf_r+0x556>
 800b446:	2a00      	cmp	r2, #0
 800b448:	d000      	beq.n	800b44c <__ssvfscanf_r+0x374>
 800b44a:	e0b6      	b.n	800b5ba <__ssvfscanf_r+0x4e2>
 800b44c:	2080      	movs	r0, #128	; 0x80
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	cb10      	ldmia	r3!, {r4}
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	4206      	tst	r6, r0
 800b456:	d100      	bne.n	800b45a <__ssvfscanf_r+0x382>
 800b458:	e0b7      	b.n	800b5ca <__ssvfscanf_r+0x4f2>
 800b45a:	2c00      	cmp	r4, #0
 800b45c:	d007      	beq.n	800b46e <__ssvfscanf_r+0x396>
 800b45e:	f7fb ff6d 	bl	800733c <malloc>
 800b462:	6338      	str	r0, [r7, #48]	; 0x30
 800b464:	2800      	cmp	r0, #0
 800b466:	d11f      	bne.n	800b4a8 <__ssvfscanf_r+0x3d0>
 800b468:	2301      	movs	r3, #1
 800b46a:	425b      	negs	r3, r3
 800b46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b470:	2b00      	cmp	r3, #0
 800b472:	d013      	beq.n	800b49c <__ssvfscanf_r+0x3c4>
 800b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b476:	3301      	adds	r3, #1
 800b478:	d10a      	bne.n	800b490 <__ssvfscanf_r+0x3b8>
 800b47a:	2400      	movs	r4, #0
 800b47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b47e:	681d      	ldr	r5, [r3, #0]
 800b480:	88db      	ldrh	r3, [r3, #6]
 800b482:	42a3      	cmp	r3, r4
 800b484:	dd01      	ble.n	800b48a <__ssvfscanf_r+0x3b2>
 800b486:	f001 f82a 	bl	800c4de <__ssvfscanf_r+0x1406>
 800b48a:	2301      	movs	r3, #1
 800b48c:	425b      	negs	r3, r3
 800b48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	2800      	cmp	r0, #0
 800b496:	d001      	beq.n	800b49c <__ssvfscanf_r+0x3c4>
 800b498:	f7fb ff5a 	bl	8007350 <free>
 800b49c:	46bd      	mov	sp, r7
 800b49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4a0:	23b1      	movs	r3, #177	; 0xb1
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	449d      	add	sp, r3
 800b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ae:	88de      	ldrh	r6, [r3, #6]
 800b4b0:	889d      	ldrh	r5, [r3, #4]
 800b4b2:	42ae      	cmp	r6, r5
 800b4b4:	d30e      	bcc.n	800b4d4 <__ssvfscanf_r+0x3fc>
 800b4b6:	4b71      	ldr	r3, [pc, #452]	; (800b67c <__ssvfscanf_r+0x5a4>)
 800b4b8:	429d      	cmp	r5, r3
 800b4ba:	d8d5      	bhi.n	800b468 <__ssvfscanf_r+0x390>
 800b4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4be:	3508      	adds	r5, #8
 800b4c0:	b2ad      	uxth	r5, r5
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	00a9      	lsls	r1, r5, #2
 800b4c6:	f002 f901 	bl	800d6cc <realloc>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0cc      	beq.n	800b468 <__ssvfscanf_r+0x390>
 800b4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d0:	6018      	str	r0, [r3, #0]
 800b4d2:	809d      	strh	r5, [r3, #4]
 800b4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d6:	1c72      	adds	r2, r6, #1
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	00b6      	lsls	r6, r6, #2
 800b4dc:	50f4      	str	r4, [r6, r3]
 800b4de:	2320      	movs	r3, #32
 800b4e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4e2:	0026      	movs	r6, r4
 800b4e4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b4e6:	80ca      	strh	r2, [r1, #6]
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	f7fd f9fe 	bl	80088ec <__locale_mb_cur_max>
 800b4f0:	42a8      	cmp	r0, r5
 800b4f2:	d100      	bne.n	800b4f6 <__ssvfscanf_r+0x41e>
 800b4f4:	e6bf      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b4f6:	1c6a      	adds	r2, r5, #1
 800b4f8:	60fa      	str	r2, [r7, #12]
 800b4fa:	228c      	movs	r2, #140	; 0x8c
 800b4fc:	2048      	movs	r0, #72	; 0x48
 800b4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b500:	0052      	lsls	r2, r2, #1
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	1812      	adds	r2, r2, r0
 800b506:	7819      	ldrb	r1, [r3, #0]
 800b508:	19d2      	adds	r2, r2, r7
 800b50a:	5551      	strb	r1, [r2, r5]
 800b50c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b50e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b510:	6852      	ldr	r2, [r2, #4]
 800b512:	3301      	adds	r3, #1
 800b514:	600b      	str	r3, [r1, #0]
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	3a01      	subs	r2, #1
 800b51a:	604a      	str	r2, [r1, #4]
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d102      	bne.n	800b526 <__ssvfscanf_r+0x44e>
 800b520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b522:	2b04      	cmp	r3, #4
 800b524:	d007      	beq.n	800b536 <__ssvfscanf_r+0x45e>
 800b526:	2048      	movs	r0, #72	; 0x48
 800b528:	2310      	movs	r3, #16
 800b52a:	181b      	adds	r3, r3, r0
 800b52c:	2208      	movs	r2, #8
 800b52e:	2100      	movs	r1, #0
 800b530:	19d8      	adds	r0, r3, r7
 800b532:	f7fd f997 	bl	8008864 <memset>
 800b536:	2148      	movs	r1, #72	; 0x48
 800b538:	2310      	movs	r3, #16
 800b53a:	228c      	movs	r2, #140	; 0x8c
 800b53c:	185b      	adds	r3, r3, r1
 800b53e:	0052      	lsls	r2, r2, #1
 800b540:	19db      	adds	r3, r3, r7
 800b542:	1852      	adds	r2, r2, r1
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	0021      	movs	r1, r4
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b54c:	19d2      	adds	r2, r2, r7
 800b54e:	f002 fc57 	bl	800de00 <_mbrtowc_r>
 800b552:	0003      	movs	r3, r0
 800b554:	62b8      	str	r0, [r7, #40]	; 0x28
 800b556:	3301      	adds	r3, #1
 800b558:	d100      	bne.n	800b55c <__ssvfscanf_r+0x484>
 800b55a:	e68c      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d139      	bne.n	800b5d4 <__ssvfscanf_r+0x4fc>
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d100      	bne.n	800b568 <__ssvfscanf_r+0x490>
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	4694      	mov	ip, r2
 800b56e:	4463      	add	r3, ip
 800b570:	63bb      	str	r3, [r7, #56]	; 0x38
 800b572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b574:	2b03      	cmp	r3, #3
 800b576:	d102      	bne.n	800b57e <__ssvfscanf_r+0x4a6>
 800b578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	d002      	beq.n	800b584 <__ssvfscanf_r+0x4ac>
 800b57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b580:	3b01      	subs	r3, #1
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d115      	bne.n	800b5b6 <__ssvfscanf_r+0x4de>
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	d012      	beq.n	800b5b4 <__ssvfscanf_r+0x4dc>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	69fa      	ldr	r2, [r7, #28]
 800b592:	1ae5      	subs	r5, r4, r3
 800b594:	10ab      	asrs	r3, r5, #2
 800b596:	4293      	cmp	r3, r2
 800b598:	d30c      	bcc.n	800b5b4 <__ssvfscanf_r+0x4dc>
 800b59a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b59c:	00d1      	lsls	r1, r2, #3
 800b59e:	f002 f895 	bl	800d6cc <realloc>
 800b5a2:	6338      	str	r0, [r7, #48]	; 0x30
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d100      	bne.n	800b5aa <__ssvfscanf_r+0x4d2>
 800b5a8:	e75e      	b.n	800b468 <__ssvfscanf_r+0x390>
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	1944      	adds	r4, r0, r5
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	61fb      	str	r3, [r7, #28]
 800b5b4:	3404      	adds	r4, #4
 800b5b6:	2500      	movs	r5, #0
 800b5b8:	e010      	b.n	800b5dc <__ssvfscanf_r+0x504>
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	001e      	movs	r6, r3
 800b5c2:	001c      	movs	r4, r3
 800b5c4:	61fb      	str	r3, [r7, #28]
 800b5c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b5c8:	e78f      	b.n	800b4ea <__ssvfscanf_r+0x412>
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	001e      	movs	r6, r3
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b5d2:	e78a      	b.n	800b4ea <__ssvfscanf_r+0x412>
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	68fd      	ldr	r5, [r7, #12]
 800b5d8:	3302      	adds	r3, #2
 800b5da:	d1c5      	bne.n	800b568 <__ssvfscanf_r+0x490>
 800b5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dc12      	bgt.n	800b60a <__ssvfscanf_r+0x532>
 800b5e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5e8:	f002 fd0a 	bl	800e000 <__ssrefill_r>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d00c      	beq.n	800b60a <__ssvfscanf_r+0x532>
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	d000      	beq.n	800b5f6 <__ssvfscanf_r+0x51e>
 800b5f4:	e63f      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d10c      	bne.n	800b614 <__ssvfscanf_r+0x53c>
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	425a      	negs	r2, r3
 800b5fe:	4153      	adcs	r3, r2
 800b600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b602:	18d3      	adds	r3, r2, r3
 800b604:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	e6de      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d000      	beq.n	800b612 <__ssvfscanf_r+0x53a>
 800b610:	e76c      	b.n	800b4ec <__ssvfscanf_r+0x414>
 800b612:	e7f0      	b.n	800b5f6 <__ssvfscanf_r+0x51e>
 800b614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b616:	69fa      	ldr	r2, [r7, #28]
 800b618:	1ae1      	subs	r1, r4, r3
 800b61a:	108b      	asrs	r3, r1, #2
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d9ec      	bls.n	800b5fa <__ssvfscanf_r+0x522>
 800b620:	6830      	ldr	r0, [r6, #0]
 800b622:	f002 f853 	bl	800d6cc <realloc>
 800b626:	2800      	cmp	r0, #0
 800b628:	d0e7      	beq.n	800b5fa <__ssvfscanf_r+0x522>
 800b62a:	6030      	str	r0, [r6, #0]
 800b62c:	e7e5      	b.n	800b5fa <__ssvfscanf_r+0x522>
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d025      	beq.n	800b680 <__ssvfscanf_r+0x5a8>
 800b634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	4299      	cmp	r1, r3
 800b640:	dd11      	ble.n	800b666 <__ssvfscanf_r+0x58e>
 800b642:	1ac9      	subs	r1, r1, r3
 800b644:	18d2      	adds	r2, r2, r3
 800b646:	18e4      	adds	r4, r4, r3
 800b648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b64a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b64c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b64e:	0019      	movs	r1, r3
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	f002 fcd5 	bl	800e000 <__ssrefill_r>
 800b656:	2800      	cmp	r0, #0
 800b658:	d0ec      	beq.n	800b634 <__ssvfscanf_r+0x55c>
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	d100      	bne.n	800b660 <__ssvfscanf_r+0x588>
 800b65e:	e60a      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	191b      	adds	r3, r3, r4
 800b664:	e5ff      	b.n	800b266 <__ssvfscanf_r+0x18e>
 800b666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b668:	1a5b      	subs	r3, r3, r1
 800b66a:	1864      	adds	r4, r4, r1
 800b66c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b66e:	604b      	str	r3, [r1, #4]
 800b670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b672:	18d2      	adds	r2, r2, r3
 800b674:	600a      	str	r2, [r1, #0]
 800b676:	e7f3      	b.n	800b660 <__ssvfscanf_r+0x588>
 800b678:	08008529 	.word	0x08008529
 800b67c:	0000fff6 	.word	0x0000fff6
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	0034      	movs	r4, r6
 800b684:	cb20      	ldmia	r3!, {r5}
 800b686:	633b      	str	r3, [r7, #48]	; 0x30
 800b688:	2380      	movs	r3, #128	; 0x80
 800b68a:	401c      	ands	r4, r3
 800b68c:	421e      	tst	r6, r3
 800b68e:	d028      	beq.n	800b6e2 <__ssvfscanf_r+0x60a>
 800b690:	2d00      	cmp	r5, #0
 800b692:	d100      	bne.n	800b696 <__ssvfscanf_r+0x5be>
 800b694:	e61d      	b.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b696:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b698:	f7fb fe50 	bl	800733c <malloc>
 800b69c:	6238      	str	r0, [r7, #32]
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d100      	bne.n	800b6a4 <__ssvfscanf_r+0x5cc>
 800b6a2:	e5ef      	b.n	800b284 <__ssvfscanf_r+0x1ac>
 800b6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a6:	6028      	str	r0, [r5, #0]
 800b6a8:	88de      	ldrh	r6, [r3, #6]
 800b6aa:	889c      	ldrh	r4, [r3, #4]
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	42a6      	cmp	r6, r4
 800b6b0:	d30e      	bcc.n	800b6d0 <__ssvfscanf_r+0x5f8>
 800b6b2:	4bbf      	ldr	r3, [pc, #764]	; (800b9b0 <__ssvfscanf_r+0x8d8>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	d900      	bls.n	800b6ba <__ssvfscanf_r+0x5e2>
 800b6b8:	e6df      	b.n	800b47a <__ssvfscanf_r+0x3a2>
 800b6ba:	3408      	adds	r4, #8
 800b6bc:	b2a4      	uxth	r4, r4
 800b6be:	00a1      	lsls	r1, r4, #2
 800b6c0:	f002 f804 	bl	800d6cc <realloc>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d100      	bne.n	800b6ca <__ssvfscanf_r+0x5f2>
 800b6c8:	e6d7      	b.n	800b47a <__ssvfscanf_r+0x3a2>
 800b6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6cc:	6018      	str	r0, [r3, #0]
 800b6ce:	809c      	strh	r4, [r3, #4]
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	1c72      	adds	r2, r6, #1
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6d8:	00b6      	lsls	r6, r6, #2
 800b6da:	002c      	movs	r4, r5
 800b6dc:	50f5      	str	r5, [r6, r3]
 800b6de:	6a3d      	ldr	r5, [r7, #32]
 800b6e0:	80ca      	strh	r2, [r1, #6]
 800b6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6e4:	0029      	movs	r1, r5
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6ee:	f002 fca6 	bl	800e03e <_sfread_r>
 800b6f2:	1e05      	subs	r5, r0, #0
 800b6f4:	d100      	bne.n	800b6f8 <__ssvfscanf_r+0x620>
 800b6f6:	e5be      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b6f8:	2c00      	cmp	r4, #0
 800b6fa:	d009      	beq.n	800b710 <__ssvfscanf_r+0x638>
 800b6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fe:	4283      	cmp	r3, r0
 800b700:	d906      	bls.n	800b710 <__ssvfscanf_r+0x638>
 800b702:	0001      	movs	r1, r0
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	f001 ffe1 	bl	800d6cc <realloc>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d000      	beq.n	800b710 <__ssvfscanf_r+0x638>
 800b70e:	6020      	str	r0, [r4, #0]
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	195b      	adds	r3, r3, r5
 800b714:	63bb      	str	r3, [r7, #56]	; 0x38
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	3301      	adds	r3, #1
 800b71a:	e4f8      	b.n	800b10e <__ssvfscanf_r+0x36>
 800b71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <__ssvfscanf_r+0x64e>
 800b722:	3b01      	subs	r3, #1
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b726:	2210      	movs	r2, #16
 800b728:	2301      	movs	r3, #1
 800b72a:	0034      	movs	r4, r6
 800b72c:	4032      	ands	r2, r6
 800b72e:	401c      	ands	r4, r3
 800b730:	623a      	str	r2, [r7, #32]
 800b732:	421e      	tst	r6, r3
 800b734:	d100      	bne.n	800b738 <__ssvfscanf_r+0x660>
 800b736:	e116      	b.n	800b966 <__ssvfscanf_r+0x88e>
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d000      	beq.n	800b73e <__ssvfscanf_r+0x666>
 800b73c:	e0b0      	b.n	800b8a0 <__ssvfscanf_r+0x7c8>
 800b73e:	2080      	movs	r0, #128	; 0x80
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	cb10      	ldmia	r3!, {r4}
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	4206      	tst	r6, r0
 800b748:	d100      	bne.n	800b74c <__ssvfscanf_r+0x674>
 800b74a:	e0b2      	b.n	800b8b2 <__ssvfscanf_r+0x7da>
 800b74c:	2c00      	cmp	r4, #0
 800b74e:	d100      	bne.n	800b752 <__ssvfscanf_r+0x67a>
 800b750:	e68d      	b.n	800b46e <__ssvfscanf_r+0x396>
 800b752:	f7fb fdf3 	bl	800733c <malloc>
 800b756:	6338      	str	r0, [r7, #48]	; 0x30
 800b758:	2800      	cmp	r0, #0
 800b75a:	d100      	bne.n	800b75e <__ssvfscanf_r+0x686>
 800b75c:	e684      	b.n	800b468 <__ssvfscanf_r+0x390>
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b764:	88de      	ldrh	r6, [r3, #6]
 800b766:	889d      	ldrh	r5, [r3, #4]
 800b768:	42ae      	cmp	r6, r5
 800b76a:	d310      	bcc.n	800b78e <__ssvfscanf_r+0x6b6>
 800b76c:	4b90      	ldr	r3, [pc, #576]	; (800b9b0 <__ssvfscanf_r+0x8d8>)
 800b76e:	429d      	cmp	r5, r3
 800b770:	d900      	bls.n	800b774 <__ssvfscanf_r+0x69c>
 800b772:	e679      	b.n	800b468 <__ssvfscanf_r+0x390>
 800b774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b776:	3508      	adds	r5, #8
 800b778:	b2ad      	uxth	r5, r5
 800b77a:	6818      	ldr	r0, [r3, #0]
 800b77c:	00a9      	lsls	r1, r5, #2
 800b77e:	f001 ffa5 	bl	800d6cc <realloc>
 800b782:	2800      	cmp	r0, #0
 800b784:	d100      	bne.n	800b788 <__ssvfscanf_r+0x6b0>
 800b786:	e66f      	b.n	800b468 <__ssvfscanf_r+0x390>
 800b788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b78a:	6018      	str	r0, [r3, #0]
 800b78c:	809d      	strh	r5, [r3, #4]
 800b78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b790:	1c72      	adds	r2, r6, #1
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	00b6      	lsls	r6, r6, #2
 800b796:	50f4      	str	r4, [r6, r3]
 800b798:	2320      	movs	r3, #32
 800b79a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b79c:	0026      	movs	r6, r4
 800b79e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b7a0:	80ca      	strh	r2, [r1, #6]
 800b7a2:	613b      	str	r3, [r7, #16]
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	f7fd f8a1 	bl	80088ec <__locale_mb_cur_max>
 800b7aa:	42a8      	cmp	r0, r5
 800b7ac:	d100      	bne.n	800b7b0 <__ssvfscanf_r+0x6d8>
 800b7ae:	e562      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b7b0:	1c6a      	adds	r2, r5, #1
 800b7b2:	61fa      	str	r2, [r7, #28]
 800b7b4:	228c      	movs	r2, #140	; 0x8c
 800b7b6:	2048      	movs	r0, #72	; 0x48
 800b7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ba:	0052      	lsls	r2, r2, #1
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	1812      	adds	r2, r2, r0
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	19d2      	adds	r2, r2, r7
 800b7c4:	5551      	strb	r1, [r2, r5]
 800b7c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7ca:	6852      	ldr	r2, [r2, #4]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	600b      	str	r3, [r1, #0]
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	3a01      	subs	r2, #1
 800b7d4:	604a      	str	r2, [r1, #4]
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d102      	bne.n	800b7e0 <__ssvfscanf_r+0x708>
 800b7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d006      	beq.n	800b7ee <__ssvfscanf_r+0x716>
 800b7e0:	2048      	movs	r0, #72	; 0x48
 800b7e2:	2208      	movs	r2, #8
 800b7e4:	1813      	adds	r3, r2, r0
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	19d8      	adds	r0, r3, r7
 800b7ea:	f7fd f83b 	bl	8008864 <memset>
 800b7ee:	2148      	movs	r1, #72	; 0x48
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	228c      	movs	r2, #140	; 0x8c
 800b7f4:	185b      	adds	r3, r3, r1
 800b7f6:	0052      	lsls	r2, r2, #1
 800b7f8:	19db      	adds	r3, r3, r7
 800b7fa:	1852      	adds	r2, r2, r1
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	0021      	movs	r1, r4
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b804:	19d2      	adds	r2, r2, r7
 800b806:	f002 fafb 	bl	800de00 <_mbrtowc_r>
 800b80a:	0003      	movs	r3, r0
 800b80c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b80e:	3301      	adds	r3, #1
 800b810:	d100      	bne.n	800b814 <__ssvfscanf_r+0x73c>
 800b812:	e530      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b814:	2800      	cmp	r0, #0
 800b816:	d151      	bne.n	800b8bc <__ssvfscanf_r+0x7e4>
 800b818:	6020      	str	r0, [r4, #0]
 800b81a:	2301      	movs	r3, #1
 800b81c:	6825      	ldr	r5, [r4, #0]
 800b81e:	425b      	negs	r3, r3
 800b820:	1c6a      	adds	r2, r5, #1
 800b822:	d01a      	beq.n	800b85a <__ssvfscanf_r+0x782>
 800b824:	2048      	movs	r0, #72	; 0x48
 800b826:	3311      	adds	r3, #17
 800b828:	181b      	adds	r3, r3, r0
 800b82a:	2208      	movs	r2, #8
 800b82c:	2100      	movs	r1, #0
 800b82e:	19d8      	adds	r0, r3, r7
 800b830:	f7fd f818 	bl	8008864 <memset>
 800b834:	4b5f      	ldr	r3, [pc, #380]	; (800b9b4 <__ssvfscanf_r+0x8dc>)
 800b836:	2148      	movs	r1, #72	; 0x48
 800b838:	33e0      	adds	r3, #224	; 0xe0
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	2310      	movs	r3, #16
 800b83e:	4694      	mov	ip, r2
 800b840:	185b      	adds	r3, r3, r1
 800b842:	002a      	movs	r2, r5
 800b844:	19db      	adds	r3, r3, r7
 800b846:	4665      	mov	r5, ip
 800b848:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b84a:	1879      	adds	r1, r7, r1
 800b84c:	47a8      	blx	r5
 800b84e:	2300      	movs	r3, #0
 800b850:	2801      	cmp	r0, #1
 800b852:	d102      	bne.n	800b85a <__ssvfscanf_r+0x782>
 800b854:	3348      	adds	r3, #72	; 0x48
 800b856:	18fb      	adds	r3, r7, r3
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2218      	movs	r2, #24
 800b85c:	2148      	movs	r1, #72	; 0x48
 800b85e:	1852      	adds	r2, r2, r1
 800b860:	19d2      	adds	r2, r2, r7
 800b862:	5cd3      	ldrb	r3, [r2, r3]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d149      	bne.n	800b8fc <__ssvfscanf_r+0x824>
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d137      	bne.n	800b8de <__ssvfscanf_r+0x806>
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d113      	bne.n	800b89c <__ssvfscanf_r+0x7c4>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	2e00      	cmp	r6, #0
 800b878:	d00d      	beq.n	800b896 <__ssvfscanf_r+0x7be>
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	1ae4      	subs	r4, r4, r3
 800b880:	10a3      	asrs	r3, r4, #2
 800b882:	3301      	adds	r3, #1
 800b884:	429a      	cmp	r2, r3
 800b886:	d906      	bls.n	800b896 <__ssvfscanf_r+0x7be>
 800b888:	6830      	ldr	r0, [r6, #0]
 800b88a:	1d21      	adds	r1, r4, #4
 800b88c:	f001 ff1e 	bl	800d6cc <realloc>
 800b890:	2800      	cmp	r0, #0
 800b892:	d000      	beq.n	800b896 <__ssvfscanf_r+0x7be>
 800b894:	6030      	str	r0, [r6, #0]
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	3301      	adds	r3, #1
 800b89a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	e593      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	001e      	movs	r6, r3
 800b8a8:	613b      	str	r3, [r7, #16]
 800b8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ac:	334c      	adds	r3, #76	; 0x4c
 800b8ae:	18fc      	adds	r4, r7, r3
 800b8b0:	e778      	b.n	800b7a4 <__ssvfscanf_r+0x6cc>
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	001e      	movs	r6, r3
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ba:	e773      	b.n	800b7a4 <__ssvfscanf_r+0x6cc>
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	69fd      	ldr	r5, [r7, #28]
 800b8c0:	3302      	adds	r3, #2
 800b8c2:	d1aa      	bne.n	800b81a <__ssvfscanf_r+0x742>
 800b8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	dc47      	bgt.n	800b95c <__ssvfscanf_r+0x884>
 800b8cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8d0:	f002 fb96 	bl	800e000 <__ssrefill_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d041      	beq.n	800b95c <__ssvfscanf_r+0x884>
 800b8d8:	2d00      	cmp	r5, #0
 800b8da:	d0c8      	beq.n	800b86e <__ssvfscanf_r+0x796>
 800b8dc:	e4cb      	b.n	800b276 <__ssvfscanf_r+0x19e>
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	2248      	movs	r2, #72	; 0x48
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	61fb      	str	r3, [r7, #28]
 800b8e6:	238c      	movs	r3, #140	; 0x8c
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	189b      	adds	r3, r3, r2
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	19db      	adds	r3, r3, r7
 800b8f0:	5cd1      	ldrb	r1, [r2, r3]
 800b8f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8f6:	f002 fb47 	bl	800df88 <_sungetc_r>
 800b8fa:	e7b5      	b.n	800b868 <__ssvfscanf_r+0x790>
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	4694      	mov	ip, r2
 800b902:	4463      	add	r3, ip
 800b904:	63bb      	str	r3, [r7, #56]	; 0x38
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d102      	bne.n	800b912 <__ssvfscanf_r+0x83a>
 800b90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d002      	beq.n	800b918 <__ssvfscanf_r+0x840>
 800b912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b914:	3b01      	subs	r3, #1
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d11a      	bne.n	800b954 <__ssvfscanf_r+0x87c>
 800b91e:	3404      	adds	r4, #4
 800b920:	2e00      	cmp	r6, #0
 800b922:	d019      	beq.n	800b958 <__ssvfscanf_r+0x880>
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	1ae3      	subs	r3, r4, r3
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	6a3d      	ldr	r5, [r7, #32]
 800b92e:	109b      	asrs	r3, r3, #2
 800b930:	4293      	cmp	r3, r2
 800b932:	d3c7      	bcc.n	800b8c4 <__ssvfscanf_r+0x7ec>
 800b934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b936:	00d1      	lsls	r1, r2, #3
 800b938:	f001 fec8 	bl	800d6cc <realloc>
 800b93c:	6338      	str	r0, [r7, #48]	; 0x30
 800b93e:	2800      	cmp	r0, #0
 800b940:	d100      	bne.n	800b944 <__ssvfscanf_r+0x86c>
 800b942:	e591      	b.n	800b468 <__ssvfscanf_r+0x390>
 800b944:	4684      	mov	ip, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	69fc      	ldr	r4, [r7, #28]
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	4464      	add	r4, ip
 800b94e:	6030      	str	r0, [r6, #0]
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	e7b7      	b.n	800b8c4 <__ssvfscanf_r+0x7ec>
 800b954:	2500      	movs	r5, #0
 800b956:	e7b5      	b.n	800b8c4 <__ssvfscanf_r+0x7ec>
 800b958:	0035      	movs	r5, r6
 800b95a:	e7b3      	b.n	800b8c4 <__ssvfscanf_r+0x7ec>
 800b95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d000      	beq.n	800b964 <__ssvfscanf_r+0x88c>
 800b962:	e720      	b.n	800b7a6 <__ssvfscanf_r+0x6ce>
 800b964:	e783      	b.n	800b86e <__ssvfscanf_r+0x796>
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d025      	beq.n	800b9b8 <__ssvfscanf_r+0x8e0>
 800b96c:	2118      	movs	r1, #24
 800b96e:	2048      	movs	r0, #72	; 0x48
 800b970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b972:	1809      	adds	r1, r1, r0
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	19c9      	adds	r1, r1, r7
 800b978:	781a      	ldrb	r2, [r3, #0]
 800b97a:	5c8a      	ldrb	r2, [r1, r2]
 800b97c:	2a00      	cmp	r2, #0
 800b97e:	d103      	bne.n	800b988 <__ssvfscanf_r+0x8b0>
 800b980:	2c00      	cmp	r4, #0
 800b982:	d000      	beq.n	800b986 <__ssvfscanf_r+0x8ae>
 800b984:	e66c      	b.n	800b660 <__ssvfscanf_r+0x588>
 800b986:	e4a4      	b.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b98a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b98c:	6852      	ldr	r2, [r2, #4]
 800b98e:	3301      	adds	r3, #1
 800b990:	600b      	str	r3, [r1, #0]
 800b992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b994:	3a01      	subs	r2, #1
 800b996:	3401      	adds	r4, #1
 800b998:	604a      	str	r2, [r1, #4]
 800b99a:	429c      	cmp	r4, r3
 800b99c:	d100      	bne.n	800b9a0 <__ssvfscanf_r+0x8c8>
 800b99e:	e65f      	b.n	800b660 <__ssvfscanf_r+0x588>
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	dce3      	bgt.n	800b96c <__ssvfscanf_r+0x894>
 800b9a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9a6:	f002 fb2b 	bl	800e000 <__ssrefill_r>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d0de      	beq.n	800b96c <__ssvfscanf_r+0x894>
 800b9ae:	e657      	b.n	800b660 <__ssvfscanf_r+0x588>
 800b9b0:	0000fff6 	.word	0x0000fff6
 800b9b4:	20000450 	.word	0x20000450
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	0032      	movs	r2, r6
 800b9bc:	cb20      	ldmia	r3!, {r5}
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	2380      	movs	r3, #128	; 0x80
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	421e      	tst	r6, r3
 800b9c6:	d100      	bne.n	800b9ca <__ssvfscanf_r+0x8f2>
 800b9c8:	e086      	b.n	800bad8 <__ssvfscanf_r+0xa00>
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	d100      	bne.n	800b9d0 <__ssvfscanf_r+0x8f8>
 800b9ce:	e480      	b.n	800b2d2 <__ssvfscanf_r+0x1fa>
 800b9d0:	2020      	movs	r0, #32
 800b9d2:	f7fb fcb3 	bl	800733c <malloc>
 800b9d6:	6338      	str	r0, [r7, #48]	; 0x30
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d100      	bne.n	800b9de <__ssvfscanf_r+0x906>
 800b9dc:	e452      	b.n	800b284 <__ssvfscanf_r+0x1ac>
 800b9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e0:	6028      	str	r0, [r5, #0]
 800b9e2:	88de      	ldrh	r6, [r3, #6]
 800b9e4:	889c      	ldrh	r4, [r3, #4]
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	42a6      	cmp	r6, r4
 800b9ea:	d30e      	bcc.n	800ba0a <__ssvfscanf_r+0x932>
 800b9ec:	4bc3      	ldr	r3, [pc, #780]	; (800bcfc <__ssvfscanf_r+0xc24>)
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	d900      	bls.n	800b9f4 <__ssvfscanf_r+0x91c>
 800b9f2:	e542      	b.n	800b47a <__ssvfscanf_r+0x3a2>
 800b9f4:	3408      	adds	r4, #8
 800b9f6:	b2a4      	uxth	r4, r4
 800b9f8:	00a1      	lsls	r1, r4, #2
 800b9fa:	f001 fe67 	bl	800d6cc <realloc>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d100      	bne.n	800ba04 <__ssvfscanf_r+0x92c>
 800ba02:	e53a      	b.n	800b47a <__ssvfscanf_r+0x3a2>
 800ba04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba06:	6018      	str	r0, [r3, #0]
 800ba08:	809c      	strh	r4, [r3, #4]
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0c:	1c72      	adds	r2, r6, #1
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	00b6      	lsls	r6, r6, #2
 800ba12:	50f5      	str	r5, [r6, r3]
 800ba14:	2320      	movs	r3, #32
 800ba16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba18:	002e      	movs	r6, r5
 800ba1a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ba1c:	80ca      	strh	r2, [r1, #6]
 800ba1e:	623b      	str	r3, [r7, #32]
 800ba20:	002c      	movs	r4, r5
 800ba22:	2118      	movs	r1, #24
 800ba24:	2048      	movs	r0, #72	; 0x48
 800ba26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba28:	1809      	adds	r1, r1, r0
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	19c9      	adds	r1, r1, r7
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	5c8a      	ldrb	r2, [r1, r2]
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	d101      	bne.n	800ba3a <__ssvfscanf_r+0x962>
 800ba36:	633d      	str	r5, [r7, #48]	; 0x30
 800ba38:	e031      	b.n	800ba9e <__ssvfscanf_r+0x9c6>
 800ba3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	3a01      	subs	r2, #1
 800ba42:	604a      	str	r2, [r1, #4]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	600a      	str	r2, [r1, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	1c6a      	adds	r2, r5, #1
 800ba4c:	633a      	str	r2, [r7, #48]	; 0x30
 800ba4e:	702b      	strb	r3, [r5, #0]
 800ba50:	2e00      	cmp	r6, #0
 800ba52:	d010      	beq.n	800ba76 <__ssvfscanf_r+0x99e>
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	1b15      	subs	r5, r2, r4
 800ba58:	429d      	cmp	r5, r3
 800ba5a:	d30c      	bcc.n	800ba76 <__ssvfscanf_r+0x99e>
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	0020      	movs	r0, r4
 800ba60:	0019      	movs	r1, r3
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	f001 fe32 	bl	800d6cc <realloc>
 800ba68:	1e04      	subs	r4, r0, #0
 800ba6a:	d101      	bne.n	800ba70 <__ssvfscanf_r+0x998>
 800ba6c:	f7ff fc0a 	bl	800b284 <__ssvfscanf_r+0x1ac>
 800ba70:	1943      	adds	r3, r0, r5
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30
 800ba74:	6030      	str	r0, [r6, #0]
 800ba76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00e      	beq.n	800ba9e <__ssvfscanf_r+0x9c6>
 800ba80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc2a      	bgt.n	800bade <__ssvfscanf_r+0xa06>
 800ba88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba8c:	f002 fab8 	bl	800e000 <__ssrefill_r>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d024      	beq.n	800bade <__ssvfscanf_r+0xa06>
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	42a3      	cmp	r3, r4
 800ba98:	d101      	bne.n	800ba9e <__ssvfscanf_r+0x9c6>
 800ba9a:	f7ff fbec 	bl	800b276 <__ssvfscanf_r+0x19e>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	1b1d      	subs	r5, r3, r4
 800baa2:	42a3      	cmp	r3, r4
 800baa4:	d101      	bne.n	800baaa <__ssvfscanf_r+0x9d2>
 800baa6:	f7ff fc14 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800baaa:	2300      	movs	r3, #0
 800baac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baae:	7013      	strb	r3, [r2, #0]
 800bab0:	429e      	cmp	r6, r3
 800bab2:	d009      	beq.n	800bac8 <__ssvfscanf_r+0x9f0>
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	1c69      	adds	r1, r5, #1
 800bab8:	428b      	cmp	r3, r1
 800baba:	d905      	bls.n	800bac8 <__ssvfscanf_r+0x9f0>
 800babc:	6830      	ldr	r0, [r6, #0]
 800babe:	f001 fe05 	bl	800d6cc <realloc>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d000      	beq.n	800bac8 <__ssvfscanf_r+0x9f0>
 800bac6:	6030      	str	r0, [r6, #0]
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	3301      	adds	r3, #1
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	195b      	adds	r3, r3, r5
 800bad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	e477      	b.n	800b3c8 <__ssvfscanf_r+0x2f0>
 800bad8:	0016      	movs	r6, r2
 800bada:	623a      	str	r2, [r7, #32]
 800badc:	e7a0      	b.n	800ba20 <__ssvfscanf_r+0x948>
 800bade:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bae0:	e79f      	b.n	800ba22 <__ssvfscanf_r+0x94a>
 800bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <__ssvfscanf_r+0xa14>
 800bae8:	3b01      	subs	r3, #1
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baec:	2210      	movs	r2, #16
 800baee:	2301      	movs	r3, #1
 800baf0:	0034      	movs	r4, r6
 800baf2:	4032      	ands	r2, r6
 800baf4:	401c      	ands	r4, r3
 800baf6:	61fa      	str	r2, [r7, #28]
 800baf8:	421e      	tst	r6, r3
 800bafa:	d100      	bne.n	800bafe <__ssvfscanf_r+0xa26>
 800bafc:	e102      	b.n	800bd04 <__ssvfscanf_r+0xc2c>
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	d000      	beq.n	800bb04 <__ssvfscanf_r+0xa2c>
 800bb02:	e09f      	b.n	800bc44 <__ssvfscanf_r+0xb6c>
 800bb04:	2080      	movs	r0, #128	; 0x80
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	cb10      	ldmia	r3!, {r4}
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	4206      	tst	r6, r0
 800bb0e:	d100      	bne.n	800bb12 <__ssvfscanf_r+0xa3a>
 800bb10:	e0a1      	b.n	800bc56 <__ssvfscanf_r+0xb7e>
 800bb12:	2c00      	cmp	r4, #0
 800bb14:	d100      	bne.n	800bb18 <__ssvfscanf_r+0xa40>
 800bb16:	e4aa      	b.n	800b46e <__ssvfscanf_r+0x396>
 800bb18:	f7fb fc10 	bl	800733c <malloc>
 800bb1c:	6338      	str	r0, [r7, #48]	; 0x30
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d100      	bne.n	800bb24 <__ssvfscanf_r+0xa4c>
 800bb22:	e4a1      	b.n	800b468 <__ssvfscanf_r+0x390>
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	6023      	str	r3, [r4, #0]
 800bb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2a:	88de      	ldrh	r6, [r3, #6]
 800bb2c:	889d      	ldrh	r5, [r3, #4]
 800bb2e:	42ae      	cmp	r6, r5
 800bb30:	d310      	bcc.n	800bb54 <__ssvfscanf_r+0xa7c>
 800bb32:	4b72      	ldr	r3, [pc, #456]	; (800bcfc <__ssvfscanf_r+0xc24>)
 800bb34:	429d      	cmp	r5, r3
 800bb36:	d900      	bls.n	800bb3a <__ssvfscanf_r+0xa62>
 800bb38:	e496      	b.n	800b468 <__ssvfscanf_r+0x390>
 800bb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb3c:	3508      	adds	r5, #8
 800bb3e:	b2ad      	uxth	r5, r5
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	00a9      	lsls	r1, r5, #2
 800bb44:	f001 fdc2 	bl	800d6cc <realloc>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d100      	bne.n	800bb4e <__ssvfscanf_r+0xa76>
 800bb4c:	e48c      	b.n	800b468 <__ssvfscanf_r+0x390>
 800bb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb50:	6018      	str	r0, [r3, #0]
 800bb52:	809d      	strh	r5, [r3, #4]
 800bb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb56:	1c72      	adds	r2, r6, #1
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	00b6      	lsls	r6, r6, #2
 800bb5c:	50f4      	str	r4, [r6, r3]
 800bb5e:	2320      	movs	r3, #32
 800bb60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb62:	0025      	movs	r5, r4
 800bb64:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bb66:	80ca      	strh	r2, [r1, #6]
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb70:	4a63      	ldr	r2, [pc, #396]	; (800bd00 <__ssvfscanf_r+0xc28>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	5cd3      	ldrb	r3, [r2, r3]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	4213      	tst	r3, r2
 800bb7c:	d149      	bne.n	800bc12 <__ssvfscanf_r+0xb3a>
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d046      	beq.n	800bc12 <__ssvfscanf_r+0xb3a>
 800bb84:	f7fc feb2 	bl	80088ec <__locale_mb_cur_max>
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	4298      	cmp	r0, r3
 800bb8c:	d101      	bne.n	800bb92 <__ssvfscanf_r+0xaba>
 800bb8e:	f7ff fb72 	bl	800b276 <__ssvfscanf_r+0x19e>
 800bb92:	6a3a      	ldr	r2, [r7, #32]
 800bb94:	2048      	movs	r0, #72	; 0x48
 800bb96:	1c56      	adds	r6, r2, #1
 800bb98:	228c      	movs	r2, #140	; 0x8c
 800bb9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb9c:	0052      	lsls	r2, r2, #1
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	1812      	adds	r2, r2, r0
 800bba2:	7819      	ldrb	r1, [r3, #0]
 800bba4:	6a38      	ldr	r0, [r7, #32]
 800bba6:	19d2      	adds	r2, r2, r7
 800bba8:	5411      	strb	r1, [r2, r0]
 800bbaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbae:	6852      	ldr	r2, [r2, #4]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	600b      	str	r3, [r1, #0]
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	3a01      	subs	r2, #1
 800bbb8:	604a      	str	r2, [r1, #4]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d102      	bne.n	800bbc4 <__ssvfscanf_r+0xaec>
 800bbbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	d007      	beq.n	800bbd4 <__ssvfscanf_r+0xafc>
 800bbc4:	2048      	movs	r0, #72	; 0x48
 800bbc6:	2310      	movs	r3, #16
 800bbc8:	181b      	adds	r3, r3, r0
 800bbca:	2208      	movs	r2, #8
 800bbcc:	2100      	movs	r1, #0
 800bbce:	19d8      	adds	r0, r3, r7
 800bbd0:	f7fc fe48 	bl	8008864 <memset>
 800bbd4:	2148      	movs	r1, #72	; 0x48
 800bbd6:	2310      	movs	r3, #16
 800bbd8:	228c      	movs	r2, #140	; 0x8c
 800bbda:	185b      	adds	r3, r3, r1
 800bbdc:	0052      	lsls	r2, r2, #1
 800bbde:	19db      	adds	r3, r3, r7
 800bbe0:	1852      	adds	r2, r2, r1
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	0021      	movs	r1, r4
 800bbe6:	0033      	movs	r3, r6
 800bbe8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bbea:	19d2      	adds	r2, r2, r7
 800bbec:	f002 f908 	bl	800de00 <_mbrtowc_r>
 800bbf0:	0003      	movs	r3, r0
 800bbf2:	62b8      	str	r0, [r7, #40]	; 0x28
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <__ssvfscanf_r+0xb24>
 800bbf8:	f7ff fb3d 	bl	800b276 <__ssvfscanf_r+0x19e>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d12f      	bne.n	800bc60 <__ssvfscanf_r+0xb88>
 800bc00:	6020      	str	r0, [r4, #0]
 800bc02:	6820      	ldr	r0, [r4, #0]
 800bc04:	f002 f91a 	bl	800de3c <iswspace>
 800bc08:	6238      	str	r0, [r7, #32]
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d04a      	beq.n	800bca4 <__ssvfscanf_r+0xbcc>
 800bc0e:	2e00      	cmp	r6, #0
 800bc10:	d13c      	bne.n	800bc8c <__ssvfscanf_r+0xbb4>
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d000      	beq.n	800bc1a <__ssvfscanf_r+0xb42>
 800bc18:	e640      	b.n	800b89c <__ssvfscanf_r+0x7c4>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	d100      	bne.n	800bc22 <__ssvfscanf_r+0xb4a>
 800bc20:	e639      	b.n	800b896 <__ssvfscanf_r+0x7be>
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	1ae4      	subs	r4, r4, r3
 800bc28:	10a3      	asrs	r3, r4, #2
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d800      	bhi.n	800bc32 <__ssvfscanf_r+0xb5a>
 800bc30:	e631      	b.n	800b896 <__ssvfscanf_r+0x7be>
 800bc32:	6828      	ldr	r0, [r5, #0]
 800bc34:	1d21      	adds	r1, r4, #4
 800bc36:	f001 fd49 	bl	800d6cc <realloc>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d100      	bne.n	800bc40 <__ssvfscanf_r+0xb68>
 800bc3e:	e62a      	b.n	800b896 <__ssvfscanf_r+0x7be>
 800bc40:	6028      	str	r0, [r5, #0]
 800bc42:	e628      	b.n	800b896 <__ssvfscanf_r+0x7be>
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	001d      	movs	r5, r3
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc50:	334c      	adds	r3, #76	; 0x4c
 800bc52:	18fc      	adds	r4, r7, r3
 800bc54:	e789      	b.n	800bb6a <__ssvfscanf_r+0xa92>
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	001d      	movs	r5, r3
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc5e:	e784      	b.n	800bb6a <__ssvfscanf_r+0xa92>
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	623e      	str	r6, [r7, #32]
 800bc64:	3302      	adds	r3, #2
 800bc66:	d1cc      	bne.n	800bc02 <__ssvfscanf_r+0xb2a>
 800bc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dd00      	ble.n	800bc72 <__ssvfscanf_r+0xb9a>
 800bc70:	e77d      	b.n	800bb6e <__ssvfscanf_r+0xa96>
 800bc72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc76:	f002 f9c3 	bl	800e000 <__ssrefill_r>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d100      	bne.n	800bc80 <__ssvfscanf_r+0xba8>
 800bc7e:	e776      	b.n	800bb6e <__ssvfscanf_r+0xa96>
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <__ssvfscanf_r+0xbb2>
 800bc86:	f7ff faf6 	bl	800b276 <__ssvfscanf_r+0x19e>
 800bc8a:	e7c2      	b.n	800bc12 <__ssvfscanf_r+0xb3a>
 800bc8c:	238c      	movs	r3, #140	; 0x8c
 800bc8e:	2248      	movs	r2, #72	; 0x48
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	189b      	adds	r3, r3, r2
 800bc94:	3e01      	subs	r6, #1
 800bc96:	19db      	adds	r3, r3, r7
 800bc98:	5cf1      	ldrb	r1, [r6, r3]
 800bc9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc9e:	f002 f973 	bl	800df88 <_sungetc_r>
 800bca2:	e7b4      	b.n	800bc0e <__ssvfscanf_r+0xb36>
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	199b      	adds	r3, r3, r6
 800bca8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d102      	bne.n	800bcb6 <__ssvfscanf_r+0xbde>
 800bcb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d002      	beq.n	800bcbc <__ssvfscanf_r+0xbe4>
 800bcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1d2      	bne.n	800bc68 <__ssvfscanf_r+0xb90>
 800bcc2:	3404      	adds	r4, #4
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	d016      	beq.n	800bcf6 <__ssvfscanf_r+0xc1e>
 800bcc8:	69fa      	ldr	r2, [r7, #28]
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	623a      	str	r2, [r7, #32]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	1ae6      	subs	r6, r4, r3
 800bcd2:	10b3      	asrs	r3, r6, #2
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d3c7      	bcc.n	800bc68 <__ssvfscanf_r+0xb90>
 800bcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcda:	00d1      	lsls	r1, r2, #3
 800bcdc:	f001 fcf6 	bl	800d6cc <realloc>
 800bce0:	6338      	str	r0, [r7, #48]	; 0x30
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d101      	bne.n	800bcea <__ssvfscanf_r+0xc12>
 800bce6:	f7ff fbbf 	bl	800b468 <__ssvfscanf_r+0x390>
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	1984      	adds	r4, r0, r6
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	6028      	str	r0, [r5, #0]
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	e7b8      	b.n	800bc68 <__ssvfscanf_r+0xb90>
 800bcf6:	623d      	str	r5, [r7, #32]
 800bcf8:	e7b6      	b.n	800bc68 <__ssvfscanf_r+0xb90>
 800bcfa:	46c0      	nop			; (mov r8, r8)
 800bcfc:	0000fff6 	.word	0x0000fff6
 800bd00:	0800f541 	.word	0x0800f541
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d01c      	beq.n	800bd44 <__ssvfscanf_r+0xc6c>
 800bd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd0c:	49bf      	ldr	r1, [pc, #764]	; (800c00c <__ssvfscanf_r+0xf34>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	5c8a      	ldrb	r2, [r1, r2]
 800bd14:	2108      	movs	r1, #8
 800bd16:	420a      	tst	r2, r1
 800bd18:	d000      	beq.n	800bd1c <__ssvfscanf_r+0xc44>
 800bd1a:	e4a1      	b.n	800b660 <__ssvfscanf_r+0x588>
 800bd1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd20:	6852      	ldr	r2, [r2, #4]
 800bd22:	3301      	adds	r3, #1
 800bd24:	600b      	str	r3, [r1, #0]
 800bd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd28:	3a01      	subs	r2, #1
 800bd2a:	3401      	adds	r4, #1
 800bd2c:	604a      	str	r2, [r1, #4]
 800bd2e:	429c      	cmp	r4, r3
 800bd30:	d100      	bne.n	800bd34 <__ssvfscanf_r+0xc5c>
 800bd32:	e495      	b.n	800b660 <__ssvfscanf_r+0x588>
 800bd34:	2a00      	cmp	r2, #0
 800bd36:	dce8      	bgt.n	800bd0a <__ssvfscanf_r+0xc32>
 800bd38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd3a:	f002 f961 	bl	800e000 <__ssrefill_r>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0e3      	beq.n	800bd0a <__ssvfscanf_r+0xc32>
 800bd42:	e48d      	b.n	800b660 <__ssvfscanf_r+0x588>
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	0032      	movs	r2, r6
 800bd48:	cb10      	ldmia	r3!, {r4}
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	2380      	movs	r3, #128	; 0x80
 800bd4e:	401a      	ands	r2, r3
 800bd50:	421e      	tst	r6, r3
 800bd52:	d039      	beq.n	800bdc8 <__ssvfscanf_r+0xcf0>
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d101      	bne.n	800bd5c <__ssvfscanf_r+0xc84>
 800bd58:	f7ff fabb 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800bd5c:	2020      	movs	r0, #32
 800bd5e:	f7fb faed 	bl	800733c <malloc>
 800bd62:	6338      	str	r0, [r7, #48]	; 0x30
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d101      	bne.n	800bd6c <__ssvfscanf_r+0xc94>
 800bd68:	f7ff fa8c 	bl	800b284 <__ssvfscanf_r+0x1ac>
 800bd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6e:	6020      	str	r0, [r4, #0]
 800bd70:	88de      	ldrh	r6, [r3, #6]
 800bd72:	889d      	ldrh	r5, [r3, #4]
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	42ae      	cmp	r6, r5
 800bd78:	d310      	bcc.n	800bd9c <__ssvfscanf_r+0xcc4>
 800bd7a:	4ba5      	ldr	r3, [pc, #660]	; (800c010 <__ssvfscanf_r+0xf38>)
 800bd7c:	429d      	cmp	r5, r3
 800bd7e:	d901      	bls.n	800bd84 <__ssvfscanf_r+0xcac>
 800bd80:	f7ff fb7b 	bl	800b47a <__ssvfscanf_r+0x3a2>
 800bd84:	3508      	adds	r5, #8
 800bd86:	b2ad      	uxth	r5, r5
 800bd88:	00a9      	lsls	r1, r5, #2
 800bd8a:	f001 fc9f 	bl	800d6cc <realloc>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d101      	bne.n	800bd96 <__ssvfscanf_r+0xcbe>
 800bd92:	f7ff fb72 	bl	800b47a <__ssvfscanf_r+0x3a2>
 800bd96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd98:	6018      	str	r0, [r3, #0]
 800bd9a:	809d      	strh	r5, [r3, #4]
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9e:	1c72      	adds	r2, r6, #1
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	00b6      	lsls	r6, r6, #2
 800bda4:	50f4      	str	r4, [r6, r3]
 800bda6:	2320      	movs	r3, #32
 800bda8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdaa:	0026      	movs	r6, r4
 800bdac:	80ca      	strh	r2, [r1, #6]
 800bdae:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bdb0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdb2:	0025      	movs	r5, r4
 800bdb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb6:	4995      	ldr	r1, [pc, #596]	; (800c00c <__ssvfscanf_r+0xf34>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	781a      	ldrb	r2, [r3, #0]
 800bdbc:	5c8a      	ldrb	r2, [r1, r2]
 800bdbe:	2108      	movs	r1, #8
 800bdc0:	420a      	tst	r2, r1
 800bdc2:	d004      	beq.n	800bdce <__ssvfscanf_r+0xcf6>
 800bdc4:	623c      	str	r4, [r7, #32]
 800bdc6:	e031      	b.n	800be2c <__ssvfscanf_r+0xd54>
 800bdc8:	0016      	movs	r6, r2
 800bdca:	633a      	str	r2, [r7, #48]	; 0x30
 800bdcc:	e7f1      	b.n	800bdb2 <__ssvfscanf_r+0xcda>
 800bdce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdd2:	6852      	ldr	r2, [r2, #4]
 800bdd4:	3a01      	subs	r2, #1
 800bdd6:	604a      	str	r2, [r1, #4]
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	600a      	str	r2, [r1, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	1c62      	adds	r2, r4, #1
 800bde0:	623a      	str	r2, [r7, #32]
 800bde2:	7023      	strb	r3, [r4, #0]
 800bde4:	2e00      	cmp	r6, #0
 800bde6:	d010      	beq.n	800be0a <__ssvfscanf_r+0xd32>
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	1b54      	subs	r4, r2, r5
 800bdec:	429c      	cmp	r4, r3
 800bdee:	d30c      	bcc.n	800be0a <__ssvfscanf_r+0xd32>
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	0019      	movs	r1, r3
 800bdf6:	633b      	str	r3, [r7, #48]	; 0x30
 800bdf8:	f001 fc68 	bl	800d6cc <realloc>
 800bdfc:	1e05      	subs	r5, r0, #0
 800bdfe:	d101      	bne.n	800be04 <__ssvfscanf_r+0xd2c>
 800be00:	f7ff fa40 	bl	800b284 <__ssvfscanf_r+0x1ac>
 800be04:	1903      	adds	r3, r0, r4
 800be06:	623b      	str	r3, [r7, #32]
 800be08:	6030      	str	r0, [r6, #0]
 800be0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0c:	3b01      	subs	r3, #1
 800be0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <__ssvfscanf_r+0xd54>
 800be14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dd01      	ble.n	800be20 <__ssvfscanf_r+0xd48>
 800be1c:	6a3c      	ldr	r4, [r7, #32]
 800be1e:	e7c9      	b.n	800bdb4 <__ssvfscanf_r+0xcdc>
 800be20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be24:	f002 f8ec 	bl	800e000 <__ssrefill_r>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d0f7      	beq.n	800be1c <__ssvfscanf_r+0xd44>
 800be2c:	2300      	movs	r3, #0
 800be2e:	6a3a      	ldr	r2, [r7, #32]
 800be30:	7013      	strb	r3, [r2, #0]
 800be32:	1b55      	subs	r5, r2, r5
 800be34:	2e00      	cmp	r6, #0
 800be36:	d009      	beq.n	800be4c <__ssvfscanf_r+0xd74>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	1c69      	adds	r1, r5, #1
 800be3c:	428b      	cmp	r3, r1
 800be3e:	d905      	bls.n	800be4c <__ssvfscanf_r+0xd74>
 800be40:	6830      	ldr	r0, [r6, #0]
 800be42:	f001 fc43 	bl	800d6cc <realloc>
 800be46:	2800      	cmp	r0, #0
 800be48:	d000      	beq.n	800be4c <__ssvfscanf_r+0xd74>
 800be4a:	6030      	str	r0, [r6, #0]
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	195b      	adds	r3, r3, r5
 800be50:	63bb      	str	r3, [r7, #56]	; 0x38
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	3301      	adds	r3, #1
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be58:	e63c      	b.n	800bad4 <__ssvfscanf_r+0x9fc>
 800be5a:	22ae      	movs	r2, #174	; 0xae
 800be5c:	2100      	movs	r1, #0
 800be5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be60:	0052      	lsls	r2, r2, #1
 800be62:	3b01      	subs	r3, #1
 800be64:	6239      	str	r1, [r7, #32]
 800be66:	4293      	cmp	r3, r2
 800be68:	d906      	bls.n	800be78 <__ssvfscanf_r+0xda0>
 800be6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6c:	3b5e      	subs	r3, #94	; 0x5e
 800be6e:	3bff      	subs	r3, #255	; 0xff
 800be70:	623b      	str	r3, [r7, #32]
 800be72:	235e      	movs	r3, #94	; 0x5e
 800be74:	33ff      	adds	r3, #255	; 0xff
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be78:	24d8      	movs	r4, #216	; 0xd8
 800be7a:	2300      	movs	r3, #0
 800be7c:	2248      	movs	r2, #72	; 0x48
 800be7e:	0124      	lsls	r4, r4, #4
 800be80:	4334      	orrs	r4, r6
 800be82:	2680      	movs	r6, #128	; 0x80
 800be84:	61fb      	str	r3, [r7, #28]
 800be86:	3319      	adds	r3, #25
 800be88:	33ff      	adds	r3, #255	; 0xff
 800be8a:	189b      	adds	r3, r3, r2
 800be8c:	19dd      	adds	r5, r3, r7
 800be8e:	00b6      	lsls	r6, r6, #2
 800be90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	7813      	ldrb	r3, [r2, #0]
 800be96:	2b39      	cmp	r3, #57	; 0x39
 800be98:	d80f      	bhi.n	800beba <__ssvfscanf_r+0xde2>
 800be9a:	2b2a      	cmp	r3, #42	; 0x2a
 800be9c:	d91b      	bls.n	800bed6 <__ssvfscanf_r+0xdfe>
 800be9e:	0018      	movs	r0, r3
 800bea0:	382b      	subs	r0, #43	; 0x2b
 800bea2:	280e      	cmp	r0, #14
 800bea4:	d817      	bhi.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bea6:	f7f4 f935 	bl	8000114 <__gnu_thumb1_case_uqi>
 800beaa:	168f      	.short	0x168f
 800beac:	5416168f 	.word	0x5416168f
 800beb0:	80808080 	.word	0x80808080
 800beb4:	87808080 	.word	0x87808080
 800beb8:	87          	.byte	0x87
 800beb9:	00          	.byte	0x00
 800beba:	2b66      	cmp	r3, #102	; 0x66
 800bebc:	d83a      	bhi.n	800bf34 <__ssvfscanf_r+0xe5c>
 800bebe:	2b60      	cmp	r3, #96	; 0x60
 800bec0:	d803      	bhi.n	800beca <__ssvfscanf_r+0xdf2>
 800bec2:	2b46      	cmp	r3, #70	; 0x46
 800bec4:	d805      	bhi.n	800bed2 <__ssvfscanf_r+0xdfa>
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	d905      	bls.n	800bed6 <__ssvfscanf_r+0xdfe>
 800beca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800becc:	290a      	cmp	r1, #10
 800bece:	dc71      	bgt.n	800bfb4 <__ssvfscanf_r+0xedc>
 800bed0:	e001      	b.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bed2:	2b58      	cmp	r3, #88	; 0x58
 800bed4:	d030      	beq.n	800bf38 <__ssvfscanf_r+0xe60>
 800bed6:	05e3      	lsls	r3, r4, #23
 800bed8:	d515      	bpl.n	800bf06 <__ssvfscanf_r+0xe2e>
 800beda:	238c      	movs	r3, #140	; 0x8c
 800bedc:	2248      	movs	r2, #72	; 0x48
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	189b      	adds	r3, r3, r2
 800bee2:	19db      	adds	r3, r3, r7
 800bee4:	429d      	cmp	r5, r3
 800bee6:	d905      	bls.n	800bef4 <__ssvfscanf_r+0xe1c>
 800bee8:	3d01      	subs	r5, #1
 800beea:	7829      	ldrb	r1, [r5, #0]
 800beec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bef0:	f002 f84a 	bl	800df88 <_sungetc_r>
 800bef4:	238c      	movs	r3, #140	; 0x8c
 800bef6:	2248      	movs	r2, #72	; 0x48
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	189b      	adds	r3, r3, r2
 800befc:	19db      	adds	r3, r3, r7
 800befe:	429d      	cmp	r5, r3
 800bf00:	d101      	bne.n	800bf06 <__ssvfscanf_r+0xe2e>
 800bf02:	f7ff f9e6 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800bf06:	2310      	movs	r3, #16
 800bf08:	0022      	movs	r2, r4
 800bf0a:	401a      	ands	r2, r3
 800bf0c:	421c      	tst	r4, r3
 800bf0e:	d171      	bne.n	800bff4 <__ssvfscanf_r+0xf1c>
 800bf10:	218c      	movs	r1, #140	; 0x8c
 800bf12:	2048      	movs	r0, #72	; 0x48
 800bf14:	0049      	lsls	r1, r1, #1
 800bf16:	1809      	adds	r1, r1, r0
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	697e      	ldr	r6, [r7, #20]
 800bf1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf1e:	19c9      	adds	r1, r1, r7
 800bf20:	702a      	strb	r2, [r5, #0]
 800bf22:	47b0      	blx	r6
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	1d1e      	adds	r6, r3, #4
 800bf28:	06a3      	lsls	r3, r4, #26
 800bf2a:	d559      	bpl.n	800bfe0 <__ssvfscanf_r+0xf08>
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6018      	str	r0, [r3, #0]
 800bf32:	e05b      	b.n	800bfec <__ssvfscanf_r+0xf14>
 800bf34:	2b78      	cmp	r3, #120	; 0x78
 800bf36:	d1ce      	bne.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bf38:	21c0      	movs	r1, #192	; 0xc0
 800bf3a:	00c9      	lsls	r1, r1, #3
 800bf3c:	4021      	ands	r1, r4
 800bf3e:	42b1      	cmp	r1, r6
 800bf40:	d1c9      	bne.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bf42:	4934      	ldr	r1, [pc, #208]	; (800c014 <__ssvfscanf_r+0xf3c>)
 800bf44:	4021      	ands	r1, r4
 800bf46:	24a0      	movs	r4, #160	; 0xa0
 800bf48:	00e4      	lsls	r4, r4, #3
 800bf4a:	430c      	orrs	r4, r1
 800bf4c:	2110      	movs	r1, #16
 800bf4e:	6279      	str	r1, [r7, #36]	; 0x24
 800bf50:	e00b      	b.n	800bf6a <__ssvfscanf_r+0xe92>
 800bf52:	0521      	lsls	r1, r4, #20
 800bf54:	d509      	bpl.n	800bf6a <__ssvfscanf_r+0xe92>
 800bf56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d102      	bne.n	800bf62 <__ssvfscanf_r+0xe8a>
 800bf5c:	3108      	adds	r1, #8
 800bf5e:	4334      	orrs	r4, r6
 800bf60:	6279      	str	r1, [r7, #36]	; 0x24
 800bf62:	0561      	lsls	r1, r4, #21
 800bf64:	d504      	bpl.n	800bf70 <__ssvfscanf_r+0xe98>
 800bf66:	492c      	ldr	r1, [pc, #176]	; (800c018 <__ssvfscanf_r+0xf40>)
 800bf68:	400c      	ands	r4, r1
 800bf6a:	702b      	strb	r3, [r5, #0]
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	e00c      	b.n	800bf8a <__ssvfscanf_r+0xeb2>
 800bf70:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <__ssvfscanf_r+0xf44>)
 800bf72:	401c      	ands	r4, r3
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <__ssvfscanf_r+0xeac>
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	623b      	str	r3, [r7, #32]
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	3301      	adds	r3, #1
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	3301      	adds	r3, #1
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	604b      	str	r3, [r1, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dd1c      	ble.n	800bfd2 <__ssvfscanf_r+0xefa>
 800bf98:	3201      	adds	r2, #1
 800bf9a:	600a      	str	r2, [r1, #0]
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d000      	beq.n	800bfa8 <__ssvfscanf_r+0xed0>
 800bfa6:	e773      	b.n	800be90 <__ssvfscanf_r+0xdb8>
 800bfa8:	e795      	b.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bfaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfac:	491c      	ldr	r1, [pc, #112]	; (800c020 <__ssvfscanf_r+0xf48>)
 800bfae:	0040      	lsls	r0, r0, #1
 800bfb0:	5e41      	ldrsh	r1, [r0, r1]
 800bfb2:	6279      	str	r1, [r7, #36]	; 0x24
 800bfb4:	491b      	ldr	r1, [pc, #108]	; (800c024 <__ssvfscanf_r+0xf4c>)
 800bfb6:	e7d7      	b.n	800bf68 <__ssvfscanf_r+0xe90>
 800bfb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfba:	4919      	ldr	r1, [pc, #100]	; (800c020 <__ssvfscanf_r+0xf48>)
 800bfbc:	0040      	lsls	r0, r0, #1
 800bfbe:	5e41      	ldrsh	r1, [r0, r1]
 800bfc0:	6279      	str	r1, [r7, #36]	; 0x24
 800bfc2:	2908      	cmp	r1, #8
 800bfc4:	dcf6      	bgt.n	800bfb4 <__ssvfscanf_r+0xedc>
 800bfc6:	e786      	b.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bfc8:	2180      	movs	r1, #128	; 0x80
 800bfca:	420c      	tst	r4, r1
 800bfcc:	d083      	beq.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bfce:	438c      	bics	r4, r1
 800bfd0:	e7cb      	b.n	800bf6a <__ssvfscanf_r+0xe92>
 800bfd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfd6:	f002 f813 	bl	800e000 <__ssrefill_r>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d0de      	beq.n	800bf9c <__ssvfscanf_r+0xec4>
 800bfde:	e77a      	b.n	800bed6 <__ssvfscanf_r+0xdfe>
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	421c      	tst	r4, r3
 800bfe4:	d020      	beq.n	800c028 <__ssvfscanf_r+0xf50>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	7018      	strb	r0, [r3, #0]
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	633e      	str	r6, [r7, #48]	; 0x30
 800bff0:	3301      	adds	r3, #1
 800bff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bff4:	238c      	movs	r3, #140	; 0x8c
 800bff6:	2248      	movs	r2, #72	; 0x48
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	189b      	adds	r3, r3, r2
 800bffc:	19db      	adds	r3, r3, r7
 800bffe:	1aed      	subs	r5, r5, r3
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	18ed      	adds	r5, r5, r3
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	195b      	adds	r3, r3, r5
 800c008:	f7ff f92d 	bl	800b266 <__ssvfscanf_r+0x18e>
 800c00c:	0800f541 	.word	0x0800f541
 800c010:	0000fff6 	.word	0x0000fff6
 800c014:	fffffdff 	.word	0xfffffdff
 800c018:	fffffa7f 	.word	0xfffffa7f
 800c01c:	fffffc7f 	.word	0xfffffc7f
 800c020:	0800f86e 	.word	0x0800f86e
 800c024:	fffff47f 	.word	0xfffff47f
 800c028:	0763      	lsls	r3, r4, #29
 800c02a:	d503      	bpl.n	800c034 <__ssvfscanf_r+0xf5c>
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	8018      	strh	r0, [r3, #0]
 800c032:	e7db      	b.n	800bfec <__ssvfscanf_r+0xf14>
 800c034:	2301      	movs	r3, #1
 800c036:	0022      	movs	r2, r4
 800c038:	401a      	ands	r2, r3
 800c03a:	421c      	tst	r4, r3
 800c03c:	d000      	beq.n	800c040 <__ssvfscanf_r+0xf68>
 800c03e:	e775      	b.n	800bf2c <__ssvfscanf_r+0xe54>
 800c040:	07a4      	lsls	r4, r4, #30
 800c042:	d400      	bmi.n	800c046 <__ssvfscanf_r+0xf6e>
 800c044:	e772      	b.n	800bf2c <__ssvfscanf_r+0xe54>
 800c046:	4ba8      	ldr	r3, [pc, #672]	; (800c2e8 <__ssvfscanf_r+0x1210>)
 800c048:	6979      	ldr	r1, [r7, #20]
 800c04a:	4299      	cmp	r1, r3
 800c04c:	d10c      	bne.n	800c068 <__ssvfscanf_r+0xf90>
 800c04e:	218c      	movs	r1, #140	; 0x8c
 800c050:	2048      	movs	r0, #72	; 0x48
 800c052:	0049      	lsls	r1, r1, #1
 800c054:	1809      	adds	r1, r1, r0
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c05a:	19c9      	adds	r1, r1, r7
 800c05c:	f001 fecc 	bl	800ddf8 <_strtoull_r>
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	c303      	stmia	r3!, {r0, r1}
 800c066:	e7c1      	b.n	800bfec <__ssvfscanf_r+0xf14>
 800c068:	218c      	movs	r1, #140	; 0x8c
 800c06a:	2048      	movs	r0, #72	; 0x48
 800c06c:	0049      	lsls	r1, r1, #1
 800c06e:	1809      	adds	r1, r1, r0
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c074:	19c9      	adds	r1, r1, r7
 800c076:	f001 fe0d 	bl	800dc94 <_strtoll_r>
 800c07a:	e7f1      	b.n	800c060 <__ssvfscanf_r+0xf88>
 800c07c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c07e:	f000 fb9f 	bl	800c7c0 <_localeconv_r>
 800c082:	22ae      	movs	r2, #174	; 0xae
 800c084:	2100      	movs	r1, #0
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	0052      	lsls	r2, r2, #1
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08e:	60f9      	str	r1, [r7, #12]
 800c090:	3b01      	subs	r3, #1
 800c092:	4293      	cmp	r3, r2
 800c094:	d906      	bls.n	800c0a4 <__ssvfscanf_r+0xfcc>
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	3b5e      	subs	r3, #94	; 0x5e
 800c09a:	3bff      	subs	r3, #255	; 0xff
 800c09c:	60fb      	str	r3, [r7, #12]
 800c09e:	235e      	movs	r3, #94	; 0x5e
 800c0a0:	33ff      	adds	r3, #255	; 0xff
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a4:	23f0      	movs	r3, #240	; 0xf0
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	431e      	orrs	r6, r3
 800c0aa:	238c      	movs	r3, #140	; 0x8c
 800c0ac:	2248      	movs	r2, #72	; 0x48
 800c0ae:	2400      	movs	r4, #0
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	189b      	adds	r3, r3, r2
 800c0b4:	623c      	str	r4, [r7, #32]
 800c0b6:	607c      	str	r4, [r7, #4]
 800c0b8:	60bc      	str	r4, [r7, #8]
 800c0ba:	61fc      	str	r4, [r7, #28]
 800c0bc:	613c      	str	r4, [r7, #16]
 800c0be:	19dd      	adds	r5, r3, r7
 800c0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781a      	ldrb	r2, [r3, #0]
 800c0c6:	0010      	movs	r0, r2
 800c0c8:	382b      	subs	r0, #43	; 0x2b
 800c0ca:	284e      	cmp	r0, #78	; 0x4e
 800c0cc:	d900      	bls.n	800c0d0 <__ssvfscanf_r+0xff8>
 800c0ce:	e133      	b.n	800c338 <__ssvfscanf_r+0x1260>
 800c0d0:	f7f4 f82a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c0d4:	0132009b 	.word	0x0132009b
 800c0d8:	0132009b 	.word	0x0132009b
 800c0dc:	004f0132 	.word	0x004f0132
 800c0e0:	00720072 	.word	0x00720072
 800c0e4:	00720072 	.word	0x00720072
 800c0e8:	00720072 	.word	0x00720072
 800c0ec:	00720072 	.word	0x00720072
 800c0f0:	01320072 	.word	0x01320072
 800c0f4:	01320132 	.word	0x01320132
 800c0f8:	01320132 	.word	0x01320132
 800c0fc:	01320132 	.word	0x01320132
 800c100:	007b00bc 	.word	0x007b00bc
 800c104:	007b007b 	.word	0x007b007b
 800c108:	00f7012f 	.word	0x00f7012f
 800c10c:	01320132 	.word	0x01320132
 800c110:	013200e3 	.word	0x013200e3
 800c114:	01320132 	.word	0x01320132
 800c118:	00a00132 	.word	0x00a00132
 800c11c:	01120132 	.word	0x01120132
 800c120:	01320132 	.word	0x01320132
 800c124:	01010132 	.word	0x01010132
 800c128:	01320132 	.word	0x01320132
 800c12c:	00820132 	.word	0x00820132
 800c130:	01320105 	.word	0x01320105
 800c134:	01320132 	.word	0x01320132
 800c138:	01320132 	.word	0x01320132
 800c13c:	01320132 	.word	0x01320132
 800c140:	007b00bc 	.word	0x007b00bc
 800c144:	007b007b 	.word	0x007b007b
 800c148:	00f7012f 	.word	0x00f7012f
 800c14c:	01320132 	.word	0x01320132
 800c150:	013200e3 	.word	0x013200e3
 800c154:	01320132 	.word	0x01320132
 800c158:	00a00132 	.word	0x00a00132
 800c15c:	01120132 	.word	0x01120132
 800c160:	01320132 	.word	0x01320132
 800c164:	01010132 	.word	0x01010132
 800c168:	01320132 	.word	0x01320132
 800c16c:	00820132 	.word	0x00820132
 800c170:	0105      	.short	0x0105
 800c172:	05f1      	lsls	r1, r6, #23
 800c174:	d520      	bpl.n	800c1b8 <__ssvfscanf_r+0x10e0>
 800c176:	2280      	movs	r2, #128	; 0x80
 800c178:	4396      	bics	r6, r2
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	3201      	adds	r2, #1
 800c17e:	61fa      	str	r2, [r7, #28]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	2a00      	cmp	r2, #0
 800c184:	d004      	beq.n	800c190 <__ssvfscanf_r+0x10b8>
 800c186:	3a01      	subs	r2, #1
 800c188:	60fa      	str	r2, [r7, #12]
 800c18a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c18c:	3201      	adds	r2, #1
 800c18e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c194:	3a01      	subs	r2, #1
 800c196:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19a:	3201      	adds	r2, #1
 800c19c:	63ba      	str	r2, [r7, #56]	; 0x38
 800c19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1a0:	6852      	ldr	r2, [r2, #4]
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	604a      	str	r2, [r1, #4]
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	dc00      	bgt.n	800c1ac <__ssvfscanf_r+0x10d4>
 800c1aa:	e0d6      	b.n	800c35a <__ssvfscanf_r+0x1282>
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	600b      	str	r3, [r1, #0]
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d184      	bne.n	800c0c0 <__ssvfscanf_r+0xfe8>
 800c1b6:	e057      	b.n	800c268 <__ssvfscanf_r+0x1190>
 800c1b8:	6a39      	ldr	r1, [r7, #32]
 800c1ba:	1909      	adds	r1, r1, r4
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	d153      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c1c0:	494a      	ldr	r1, [pc, #296]	; (800c2ec <__ssvfscanf_r+0x1214>)
 800c1c2:	400e      	ands	r6, r1
 800c1c4:	702a      	strb	r2, [r5, #0]
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	e7e2      	b.n	800c190 <__ssvfscanf_r+0x10b8>
 800c1ca:	0531      	lsls	r1, r6, #20
 800c1cc:	d54c      	bpl.n	800c268 <__ssvfscanf_r+0x1190>
 800c1ce:	6a39      	ldr	r1, [r7, #32]
 800c1d0:	1909      	adds	r1, r1, r4
 800c1d2:	2900      	cmp	r1, #0
 800c1d4:	d040      	beq.n	800c258 <__ssvfscanf_r+0x1180>
 800c1d6:	e047      	b.n	800c268 <__ssvfscanf_r+0x1190>
 800c1d8:	2198      	movs	r1, #152	; 0x98
 800c1da:	2080      	movs	r0, #128	; 0x80
 800c1dc:	0109      	lsls	r1, r1, #4
 800c1de:	4031      	ands	r1, r6
 800c1e0:	0040      	lsls	r0, r0, #1
 800c1e2:	4281      	cmp	r1, r0
 800c1e4:	d140      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c1e6:	69f9      	ldr	r1, [r7, #28]
 800c1e8:	2901      	cmp	r1, #1
 800c1ea:	d13d      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c1ec:	2080      	movs	r0, #128	; 0x80
 800c1ee:	4940      	ldr	r1, [pc, #256]	; (800c2f0 <__ssvfscanf_r+0x1218>)
 800c1f0:	0100      	lsls	r0, r0, #4
 800c1f2:	400e      	ands	r6, r1
 800c1f4:	3132      	adds	r1, #50	; 0x32
 800c1f6:	31ff      	adds	r1, #255	; 0xff
 800c1f8:	7029      	strb	r1, [r5, #0]
 800c1fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1fc:	4306      	orrs	r6, r0
 800c1fe:	3901      	subs	r1, #1
 800c200:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c202:	3501      	adds	r5, #1
 800c204:	2100      	movs	r1, #0
 800c206:	61f9      	str	r1, [r7, #28]
 800c208:	e7dc      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c20a:	2180      	movs	r1, #128	; 0x80
 800c20c:	420e      	tst	r6, r1
 800c20e:	d02b      	beq.n	800c268 <__ssvfscanf_r+0x1190>
 800c210:	438e      	bics	r6, r1
 800c212:	e7d7      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c214:	6a39      	ldr	r1, [r7, #32]
 800c216:	2900      	cmp	r1, #0
 800c218:	d10d      	bne.n	800c236 <__ssvfscanf_r+0x115e>
 800c21a:	69f9      	ldr	r1, [r7, #28]
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d10e      	bne.n	800c23e <__ssvfscanf_r+0x1166>
 800c220:	21e0      	movs	r1, #224	; 0xe0
 800c222:	0030      	movs	r0, r6
 800c224:	00c9      	lsls	r1, r1, #3
 800c226:	4008      	ands	r0, r1
 800c228:	4288      	cmp	r0, r1
 800c22a:	d108      	bne.n	800c23e <__ssvfscanf_r+0x1166>
 800c22c:	4931      	ldr	r1, [pc, #196]	; (800c2f4 <__ssvfscanf_r+0x121c>)
 800c22e:	400e      	ands	r6, r1
 800c230:	2101      	movs	r1, #1
 800c232:	6239      	str	r1, [r7, #32]
 800c234:	e7c6      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c236:	6a39      	ldr	r1, [r7, #32]
 800c238:	2902      	cmp	r1, #2
 800c23a:	d100      	bne.n	800c23e <__ssvfscanf_r+0x1166>
 800c23c:	e089      	b.n	800c352 <__ssvfscanf_r+0x127a>
 800c23e:	2c01      	cmp	r4, #1
 800c240:	d001      	beq.n	800c246 <__ssvfscanf_r+0x116e>
 800c242:	2c04      	cmp	r4, #4
 800c244:	d110      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c246:	3401      	adds	r4, #1
 800c248:	b2e4      	uxtb	r4, r4
 800c24a:	e7bb      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c24c:	0531      	lsls	r1, r6, #20
 800c24e:	d508      	bpl.n	800c262 <__ssvfscanf_r+0x118a>
 800c250:	6a39      	ldr	r1, [r7, #32]
 800c252:	1909      	adds	r1, r1, r4
 800c254:	2900      	cmp	r1, #0
 800c256:	d104      	bne.n	800c262 <__ssvfscanf_r+0x118a>
 800c258:	4824      	ldr	r0, [pc, #144]	; (800c2ec <__ssvfscanf_r+0x1214>)
 800c25a:	000c      	movs	r4, r1
 800c25c:	4006      	ands	r6, r0
 800c25e:	6239      	str	r1, [r7, #32]
 800c260:	e7b0      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c262:	6a39      	ldr	r1, [r7, #32]
 800c264:	2901      	cmp	r1, #1
 800c266:	d076      	beq.n	800c356 <__ssvfscanf_r+0x127e>
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <__ssvfscanf_r+0x119a>
 800c26e:	4b20      	ldr	r3, [pc, #128]	; (800c2f0 <__ssvfscanf_r+0x1218>)
 800c270:	401e      	ands	r6, r3
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	3b01      	subs	r3, #1
 800c276:	2b01      	cmp	r3, #1
 800c278:	d877      	bhi.n	800c36a <__ssvfscanf_r+0x1292>
 800c27a:	238c      	movs	r3, #140	; 0x8c
 800c27c:	2248      	movs	r2, #72	; 0x48
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	189b      	adds	r3, r3, r2
 800c282:	19db      	adds	r3, r3, r7
 800c284:	429d      	cmp	r5, r3
 800c286:	d801      	bhi.n	800c28c <__ssvfscanf_r+0x11b4>
 800c288:	f7ff f823 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800c28c:	3d01      	subs	r5, #1
 800c28e:	7829      	ldrb	r1, [r5, #0]
 800c290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c292:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c294:	f001 fe78 	bl	800df88 <_sungetc_r>
 800c298:	e7ef      	b.n	800c27a <__ssvfscanf_r+0x11a2>
 800c29a:	2c00      	cmp	r4, #0
 800c29c:	d10c      	bne.n	800c2b8 <__ssvfscanf_r+0x11e0>
 800c29e:	69f9      	ldr	r1, [r7, #28]
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	d1e4      	bne.n	800c26e <__ssvfscanf_r+0x1196>
 800c2a4:	21e0      	movs	r1, #224	; 0xe0
 800c2a6:	0030      	movs	r0, r6
 800c2a8:	00c9      	lsls	r1, r1, #3
 800c2aa:	4008      	ands	r0, r1
 800c2ac:	4288      	cmp	r0, r1
 800c2ae:	d1e0      	bne.n	800c272 <__ssvfscanf_r+0x119a>
 800c2b0:	4910      	ldr	r1, [pc, #64]	; (800c2f4 <__ssvfscanf_r+0x121c>)
 800c2b2:	3401      	adds	r4, #1
 800c2b4:	400e      	ands	r6, r1
 800c2b6:	e785      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c2b8:	20fd      	movs	r0, #253	; 0xfd
 800c2ba:	1ee1      	subs	r1, r4, #3
 800c2bc:	4201      	tst	r1, r0
 800c2be:	d1d3      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c2c0:	e7c1      	b.n	800c246 <__ssvfscanf_r+0x116e>
 800c2c2:	0531      	lsls	r1, r6, #20
 800c2c4:	d503      	bpl.n	800c2ce <__ssvfscanf_r+0x11f6>
 800c2c6:	6a39      	ldr	r1, [r7, #32]
 800c2c8:	1909      	adds	r1, r1, r4
 800c2ca:	2900      	cmp	r1, #0
 800c2cc:	d0c4      	beq.n	800c258 <__ssvfscanf_r+0x1180>
 800c2ce:	2c02      	cmp	r4, #2
 800c2d0:	d1ca      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c2d2:	2403      	movs	r4, #3
 800c2d4:	e776      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c2d6:	2c06      	cmp	r4, #6
 800c2d8:	d1c6      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c2da:	2407      	movs	r4, #7
 800c2dc:	e772      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c2de:	2c07      	cmp	r4, #7
 800c2e0:	d1c2      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c2e2:	2408      	movs	r4, #8
 800c2e4:	e76e      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c2e6:	46c0      	nop			; (mov r8, r8)
 800c2e8:	0800db31 	.word	0x0800db31
 800c2ec:	fffffe7f 	.word	0xfffffe7f
 800c2f0:	fffffeff 	.word	0xfffffeff
 800c2f4:	fffff87f 	.word	0xfffff87f
 800c2f8:	0531      	lsls	r1, r6, #20
 800c2fa:	d5b5      	bpl.n	800c268 <__ssvfscanf_r+0x1190>
 800c2fc:	21a0      	movs	r1, #160	; 0xa0
 800c2fe:	2080      	movs	r0, #128	; 0x80
 800c300:	00c9      	lsls	r1, r1, #3
 800c302:	00c0      	lsls	r0, r0, #3
 800c304:	4031      	ands	r1, r6
 800c306:	4281      	cmp	r1, r0
 800c308:	d004      	beq.n	800c314 <__ssvfscanf_r+0x123c>
 800c30a:	4206      	tst	r6, r0
 800c30c:	d0ac      	beq.n	800c268 <__ssvfscanf_r+0x1190>
 800c30e:	69f9      	ldr	r1, [r7, #28]
 800c310:	2900      	cmp	r1, #0
 800c312:	d0ae      	beq.n	800c272 <__ssvfscanf_r+0x119a>
 800c314:	2180      	movs	r1, #128	; 0x80
 800c316:	0089      	lsls	r1, r1, #2
 800c318:	420e      	tst	r6, r1
 800c31a:	d104      	bne.n	800c326 <__ssvfscanf_r+0x124e>
 800c31c:	69f9      	ldr	r1, [r7, #28]
 800c31e:	6938      	ldr	r0, [r7, #16]
 800c320:	607d      	str	r5, [r7, #4]
 800c322:	1a09      	subs	r1, r1, r0
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	20c0      	movs	r0, #192	; 0xc0
 800c328:	4973      	ldr	r1, [pc, #460]	; (800c4f8 <__ssvfscanf_r+0x1420>)
 800c32a:	0040      	lsls	r0, r0, #1
 800c32c:	400e      	ands	r6, r1
 800c32e:	4306      	orrs	r6, r0
 800c330:	e768      	b.n	800c204 <__ssvfscanf_r+0x112c>
 800c332:	0531      	lsls	r1, r6, #20
 800c334:	d5e2      	bpl.n	800c2fc <__ssvfscanf_r+0x1224>
 800c336:	e74a      	b.n	800c1ce <__ssvfscanf_r+0x10f6>
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	7809      	ldrb	r1, [r1, #0]
 800c33c:	4291      	cmp	r1, r2
 800c33e:	d193      	bne.n	800c268 <__ssvfscanf_r+0x1190>
 800c340:	2180      	movs	r1, #128	; 0x80
 800c342:	0089      	lsls	r1, r1, #2
 800c344:	420e      	tst	r6, r1
 800c346:	d08f      	beq.n	800c268 <__ssvfscanf_r+0x1190>
 800c348:	496c      	ldr	r1, [pc, #432]	; (800c4fc <__ssvfscanf_r+0x1424>)
 800c34a:	400e      	ands	r6, r1
 800c34c:	69f9      	ldr	r1, [r7, #28]
 800c34e:	6139      	str	r1, [r7, #16]
 800c350:	e738      	b.n	800c1c4 <__ssvfscanf_r+0x10ec>
 800c352:	2103      	movs	r1, #3
 800c354:	e76d      	b.n	800c232 <__ssvfscanf_r+0x115a>
 800c356:	2102      	movs	r1, #2
 800c358:	e76b      	b.n	800c232 <__ssvfscanf_r+0x115a>
 800c35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c35c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c35e:	f001 fe4f 	bl	800e000 <__ssrefill_r>
 800c362:	2800      	cmp	r0, #0
 800c364:	d100      	bne.n	800c368 <__ssvfscanf_r+0x1290>
 800c366:	e723      	b.n	800c1b0 <__ssvfscanf_r+0x10d8>
 800c368:	e77e      	b.n	800c268 <__ssvfscanf_r+0x1190>
 800c36a:	1e63      	subs	r3, r4, #1
 800c36c:	2b06      	cmp	r3, #6
 800c36e:	d825      	bhi.n	800c3bc <__ssvfscanf_r+0x12e4>
 800c370:	2c02      	cmp	r4, #2
 800c372:	d837      	bhi.n	800c3e4 <__ssvfscanf_r+0x130c>
 800c374:	238c      	movs	r3, #140	; 0x8c
 800c376:	2248      	movs	r2, #72	; 0x48
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	189b      	adds	r3, r3, r2
 800c37c:	19db      	adds	r3, r3, r7
 800c37e:	429d      	cmp	r5, r3
 800c380:	d801      	bhi.n	800c386 <__ssvfscanf_r+0x12ae>
 800c382:	f7fe ffa6 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800c386:	3d01      	subs	r5, #1
 800c388:	7829      	ldrb	r1, [r5, #0]
 800c38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c38c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c38e:	f001 fdfb 	bl	800df88 <_sungetc_r>
 800c392:	e7ef      	b.n	800c374 <__ssvfscanf_r+0x129c>
 800c394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c398:	3b01      	subs	r3, #1
 800c39a:	7819      	ldrb	r1, [r3, #0]
 800c39c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a0:	f001 fdf2 	bl	800df88 <_sungetc_r>
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	6a3a      	ldr	r2, [r7, #32]
 800c3a8:	189b      	adds	r3, r3, r2
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d8f1      	bhi.n	800c394 <__ssvfscanf_r+0x12bc>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	3c03      	subs	r4, #3
 800c3b4:	b2e4      	uxtb	r4, r4
 800c3b6:	1b1b      	subs	r3, r3, r4
 800c3b8:	1b2d      	subs	r5, r5, r4
 800c3ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3bc:	05f3      	lsls	r3, r6, #23
 800c3be:	d52f      	bpl.n	800c420 <__ssvfscanf_r+0x1348>
 800c3c0:	0573      	lsls	r3, r6, #21
 800c3c2:	d514      	bpl.n	800c3ee <__ssvfscanf_r+0x1316>
 800c3c4:	238c      	movs	r3, #140	; 0x8c
 800c3c6:	2248      	movs	r2, #72	; 0x48
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	189b      	adds	r3, r3, r2
 800c3cc:	19db      	adds	r3, r3, r7
 800c3ce:	429d      	cmp	r5, r3
 800c3d0:	d801      	bhi.n	800c3d6 <__ssvfscanf_r+0x12fe>
 800c3d2:	f7fe ff7e 	bl	800b2d2 <__ssvfscanf_r+0x1fa>
 800c3d6:	3d01      	subs	r5, #1
 800c3d8:	7829      	ldrb	r1, [r5, #0]
 800c3da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3de:	f001 fdd3 	bl	800df88 <_sungetc_r>
 800c3e2:	e7ef      	b.n	800c3c4 <__ssvfscanf_r+0x12ec>
 800c3e4:	1b63      	subs	r3, r4, r5
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800c3ea:	623b      	str	r3, [r7, #32]
 800c3ec:	e7da      	b.n	800c3a4 <__ssvfscanf_r+0x12cc>
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	1e6c      	subs	r4, r5, #1
 800c3f2:	7821      	ldrb	r1, [r4, #0]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f8:	2965      	cmp	r1, #101	; 0x65
 800c3fa:	d00a      	beq.n	800c412 <__ssvfscanf_r+0x133a>
 800c3fc:	2945      	cmp	r1, #69	; 0x45
 800c3fe:	d008      	beq.n	800c412 <__ssvfscanf_r+0x133a>
 800c400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c402:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c404:	f001 fdc0 	bl	800df88 <_sungetc_r>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	1eac      	subs	r4, r5, #2
 800c40c:	3b02      	subs	r3, #2
 800c40e:	7821      	ldrb	r1, [r4, #0]
 800c410:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c412:	0025      	movs	r5, r4
 800c414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c418:	f001 fdb6 	bl	800df88 <_sungetc_r>
 800c41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c420:	2310      	movs	r3, #16
 800c422:	0032      	movs	r2, r6
 800c424:	401a      	ands	r2, r3
 800c426:	421e      	tst	r6, r3
 800c428:	d001      	beq.n	800c42e <__ssvfscanf_r+0x1356>
 800c42a:	f7fe fe71 	bl	800b110 <__ssvfscanf_r+0x38>
 800c42e:	23c0      	movs	r3, #192	; 0xc0
 800c430:	2180      	movs	r1, #128	; 0x80
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	702a      	strb	r2, [r5, #0]
 800c436:	4033      	ands	r3, r6
 800c438:	00c9      	lsls	r1, r1, #3
 800c43a:	428b      	cmp	r3, r1
 800c43c:	d11f      	bne.n	800c47e <__ssvfscanf_r+0x13a6>
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	69f9      	ldr	r1, [r7, #28]
 800c444:	1a9a      	subs	r2, r3, r2
 800c446:	428b      	cmp	r3, r1
 800c448:	d125      	bne.n	800c496 <__ssvfscanf_r+0x13be>
 800c44a:	238c      	movs	r3, #140	; 0x8c
 800c44c:	2148      	movs	r1, #72	; 0x48
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	185b      	adds	r3, r3, r1
 800c452:	19d9      	adds	r1, r3, r7
 800c454:	2200      	movs	r2, #0
 800c456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c458:	f7fb ffca 	bl	80083f0 <_strtod_r>
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	0004      	movs	r4, r0
 800c460:	3304      	adds	r3, #4
 800c462:	000d      	movs	r5, r1
 800c464:	623b      	str	r3, [r7, #32]
 800c466:	07f3      	lsls	r3, r6, #31
 800c468:	d523      	bpl.n	800c4b2 <__ssvfscanf_r+0x13da>
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	601c      	str	r4, [r3, #0]
 800c470:	605d      	str	r5, [r3, #4]
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	3301      	adds	r3, #1
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	f7fe ffa5 	bl	800b3c8 <__ssvfscanf_r+0x2f0>
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0e2      	beq.n	800c44a <__ssvfscanf_r+0x1372>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c488:	1c59      	adds	r1, r3, #1
 800c48a:	230a      	movs	r3, #10
 800c48c:	f7fc f84c 	bl	8008528 <_strtol_r>
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	687d      	ldr	r5, [r7, #4]
 800c494:	1ac2      	subs	r2, r0, r3
 800c496:	2148      	movs	r1, #72	; 0x48
 800c498:	4b19      	ldr	r3, [pc, #100]	; (800c500 <__ssvfscanf_r+0x1428>)
 800c49a:	185b      	adds	r3, r3, r1
 800c49c:	19db      	adds	r3, r3, r7
 800c49e:	429d      	cmp	r5, r3
 800c4a0:	d302      	bcc.n	800c4a8 <__ssvfscanf_r+0x13d0>
 800c4a2:	4b18      	ldr	r3, [pc, #96]	; (800c504 <__ssvfscanf_r+0x142c>)
 800c4a4:	185b      	adds	r3, r3, r1
 800c4a6:	19dd      	adds	r5, r3, r7
 800c4a8:	0028      	movs	r0, r5
 800c4aa:	4917      	ldr	r1, [pc, #92]	; (800c508 <__ssvfscanf_r+0x1430>)
 800c4ac:	f7fc f944 	bl	8008738 <sprintf>
 800c4b0:	e7cb      	b.n	800c44a <__ssvfscanf_r+0x1372>
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b8:	07b6      	lsls	r6, r6, #30
 800c4ba:	d4d8      	bmi.n	800c46e <__ssvfscanf_r+0x1396>
 800c4bc:	0002      	movs	r2, r0
 800c4be:	000b      	movs	r3, r1
 800c4c0:	f7f5 ff18 	bl	80022f4 <__aeabi_dcmpun>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d005      	beq.n	800c4d4 <__ssvfscanf_r+0x13fc>
 800c4c8:	4810      	ldr	r0, [pc, #64]	; (800c50c <__ssvfscanf_r+0x1434>)
 800c4ca:	f7fc fabf 	bl	8008a4c <nanf>
 800c4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d0:	6018      	str	r0, [r3, #0]
 800c4d2:	e7ce      	b.n	800c472 <__ssvfscanf_r+0x139a>
 800c4d4:	0020      	movs	r0, r4
 800c4d6:	0029      	movs	r1, r5
 800c4d8:	f7f5 ffb6 	bl	8002448 <__aeabi_d2f>
 800c4dc:	e7f7      	b.n	800c4ce <__ssvfscanf_r+0x13f6>
 800c4de:	00a3      	lsls	r3, r4, #2
 800c4e0:	18ed      	adds	r5, r5, r3
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	3401      	adds	r4, #1
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	f7fa ff32 	bl	8007350 <free>
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	f7fe ffc3 	bl	800b47c <__ssvfscanf_r+0x3a4>
 800c4f6:	46c0      	nop			; (mov r8, r8)
 800c4f8:	fffff07f 	.word	0xfffff07f
 800c4fc:	fffffd7f 	.word	0xfffffd7f
 800c500:	0000026b 	.word	0x0000026b
 800c504:	0000026a 	.word	0x0000026a
 800c508:	0800f868 	.word	0x0800f868
 800c50c:	0800f8cb 	.word	0x0800f8cb

0800c510 <_fclose_r>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	0005      	movs	r5, r0
 800c514:	1e0c      	subs	r4, r1, #0
 800c516:	d102      	bne.n	800c51e <_fclose_r+0xe>
 800c518:	2600      	movs	r6, #0
 800c51a:	0030      	movs	r0, r6
 800c51c:	bd70      	pop	{r4, r5, r6, pc}
 800c51e:	2800      	cmp	r0, #0
 800c520:	d004      	beq.n	800c52c <_fclose_r+0x1c>
 800c522:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <_fclose_r+0x1c>
 800c528:	f7fc f89e 	bl	8008668 <__sinit>
 800c52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c52e:	07db      	lsls	r3, r3, #31
 800c530:	d405      	bmi.n	800c53e <_fclose_r+0x2e>
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	059b      	lsls	r3, r3, #22
 800c536:	d402      	bmi.n	800c53e <_fclose_r+0x2e>
 800c538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c53a:	f7fc fa6b 	bl	8008a14 <__retarget_lock_acquire_recursive>
 800c53e:	220c      	movs	r2, #12
 800c540:	5ea3      	ldrsh	r3, [r4, r2]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <_fclose_r+0x4a>
 800c546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c548:	3301      	adds	r3, #1
 800c54a:	0016      	movs	r6, r2
 800c54c:	401e      	ands	r6, r3
 800c54e:	421a      	tst	r2, r3
 800c550:	d1e2      	bne.n	800c518 <_fclose_r+0x8>
 800c552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c554:	f7fc fa5f 	bl	8008a16 <__retarget_lock_release_recursive>
 800c558:	e7df      	b.n	800c51a <_fclose_r+0xa>
 800c55a:	0021      	movs	r1, r4
 800c55c:	0028      	movs	r0, r5
 800c55e:	f000 f837 	bl	800c5d0 <__sflush_r>
 800c562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c564:	0006      	movs	r6, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d006      	beq.n	800c578 <_fclose_r+0x68>
 800c56a:	0028      	movs	r0, r5
 800c56c:	69e1      	ldr	r1, [r4, #28]
 800c56e:	4798      	blx	r3
 800c570:	2800      	cmp	r0, #0
 800c572:	da01      	bge.n	800c578 <_fclose_r+0x68>
 800c574:	2601      	movs	r6, #1
 800c576:	4276      	negs	r6, r6
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	061b      	lsls	r3, r3, #24
 800c57c:	d503      	bpl.n	800c586 <_fclose_r+0x76>
 800c57e:	0028      	movs	r0, r5
 800c580:	6921      	ldr	r1, [r4, #16]
 800c582:	f7fc facf 	bl	8008b24 <_free_r>
 800c586:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c588:	2900      	cmp	r1, #0
 800c58a:	d008      	beq.n	800c59e <_fclose_r+0x8e>
 800c58c:	0023      	movs	r3, r4
 800c58e:	3340      	adds	r3, #64	; 0x40
 800c590:	4299      	cmp	r1, r3
 800c592:	d002      	beq.n	800c59a <_fclose_r+0x8a>
 800c594:	0028      	movs	r0, r5
 800c596:	f7fc fac5 	bl	8008b24 <_free_r>
 800c59a:	2300      	movs	r3, #0
 800c59c:	6323      	str	r3, [r4, #48]	; 0x30
 800c59e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c5a0:	2900      	cmp	r1, #0
 800c5a2:	d004      	beq.n	800c5ae <_fclose_r+0x9e>
 800c5a4:	0028      	movs	r0, r5
 800c5a6:	f7fc fabd 	bl	8008b24 <_free_r>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	6463      	str	r3, [r4, #68]	; 0x44
 800c5ae:	f7fc f84b 	bl	8008648 <__sfp_lock_acquire>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5b8:	07db      	lsls	r3, r3, #31
 800c5ba:	d402      	bmi.n	800c5c2 <_fclose_r+0xb2>
 800c5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5be:	f7fc fa2a 	bl	8008a16 <__retarget_lock_release_recursive>
 800c5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5c4:	f7fc fa25 	bl	8008a12 <__retarget_lock_close_recursive>
 800c5c8:	f7fc f846 	bl	8008658 <__sfp_lock_release>
 800c5cc:	e7a5      	b.n	800c51a <_fclose_r+0xa>
	...

0800c5d0 <__sflush_r>:
 800c5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	5eca      	ldrsh	r2, [r1, r3]
 800c5d6:	000c      	movs	r4, r1
 800c5d8:	0005      	movs	r5, r0
 800c5da:	b291      	uxth	r1, r2
 800c5dc:	0713      	lsls	r3, r2, #28
 800c5de:	d464      	bmi.n	800c6aa <__sflush_r+0xda>
 800c5e0:	2380      	movs	r3, #128	; 0x80
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	6862      	ldr	r2, [r4, #4]
 800c5e8:	81a3      	strh	r3, [r4, #12]
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	dc04      	bgt.n	800c5f8 <__sflush_r+0x28>
 800c5ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	dc01      	bgt.n	800c5f8 <__sflush_r+0x28>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5f8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c5fa:	2f00      	cmp	r7, #0
 800c5fc:	d0fa      	beq.n	800c5f4 <__sflush_r+0x24>
 800c5fe:	2200      	movs	r2, #0
 800c600:	2080      	movs	r0, #128	; 0x80
 800c602:	682e      	ldr	r6, [r5, #0]
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	001a      	movs	r2, r3
 800c608:	0140      	lsls	r0, r0, #5
 800c60a:	69e1      	ldr	r1, [r4, #28]
 800c60c:	4002      	ands	r2, r0
 800c60e:	4203      	tst	r3, r0
 800c610:	d038      	beq.n	800c684 <__sflush_r+0xb4>
 800c612:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	075b      	lsls	r3, r3, #29
 800c618:	d506      	bpl.n	800c628 <__sflush_r+0x58>
 800c61a:	6863      	ldr	r3, [r4, #4]
 800c61c:	1ac0      	subs	r0, r0, r3
 800c61e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <__sflush_r+0x58>
 800c624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c626:	1ac0      	subs	r0, r0, r3
 800c628:	0002      	movs	r2, r0
 800c62a:	2300      	movs	r3, #0
 800c62c:	0028      	movs	r0, r5
 800c62e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c630:	69e1      	ldr	r1, [r4, #28]
 800c632:	47b8      	blx	r7
 800c634:	89a2      	ldrh	r2, [r4, #12]
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d106      	bne.n	800c648 <__sflush_r+0x78>
 800c63a:	6829      	ldr	r1, [r5, #0]
 800c63c:	291d      	cmp	r1, #29
 800c63e:	d830      	bhi.n	800c6a2 <__sflush_r+0xd2>
 800c640:	4b2c      	ldr	r3, [pc, #176]	; (800c6f4 <__sflush_r+0x124>)
 800c642:	410b      	asrs	r3, r1
 800c644:	07db      	lsls	r3, r3, #31
 800c646:	d42c      	bmi.n	800c6a2 <__sflush_r+0xd2>
 800c648:	4b2b      	ldr	r3, [pc, #172]	; (800c6f8 <__sflush_r+0x128>)
 800c64a:	4013      	ands	r3, r2
 800c64c:	2200      	movs	r2, #0
 800c64e:	6062      	str	r2, [r4, #4]
 800c650:	6922      	ldr	r2, [r4, #16]
 800c652:	b21b      	sxth	r3, r3
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	04db      	lsls	r3, r3, #19
 800c65a:	d505      	bpl.n	800c668 <__sflush_r+0x98>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <__sflush_r+0x96>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d100      	bne.n	800c668 <__sflush_r+0x98>
 800c666:	6520      	str	r0, [r4, #80]	; 0x50
 800c668:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c66a:	602e      	str	r6, [r5, #0]
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d0c1      	beq.n	800c5f4 <__sflush_r+0x24>
 800c670:	0023      	movs	r3, r4
 800c672:	3340      	adds	r3, #64	; 0x40
 800c674:	4299      	cmp	r1, r3
 800c676:	d002      	beq.n	800c67e <__sflush_r+0xae>
 800c678:	0028      	movs	r0, r5
 800c67a:	f7fc fa53 	bl	8008b24 <_free_r>
 800c67e:	2000      	movs	r0, #0
 800c680:	6320      	str	r0, [r4, #48]	; 0x30
 800c682:	e7b8      	b.n	800c5f6 <__sflush_r+0x26>
 800c684:	2301      	movs	r3, #1
 800c686:	0028      	movs	r0, r5
 800c688:	47b8      	blx	r7
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d1c2      	bne.n	800c614 <__sflush_r+0x44>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0bf      	beq.n	800c614 <__sflush_r+0x44>
 800c694:	2b1d      	cmp	r3, #29
 800c696:	d001      	beq.n	800c69c <__sflush_r+0xcc>
 800c698:	2b16      	cmp	r3, #22
 800c69a:	d101      	bne.n	800c6a0 <__sflush_r+0xd0>
 800c69c:	602e      	str	r6, [r5, #0]
 800c69e:	e7a9      	b.n	800c5f4 <__sflush_r+0x24>
 800c6a0:	89a2      	ldrh	r2, [r4, #12]
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	e7a5      	b.n	800c5f6 <__sflush_r+0x26>
 800c6aa:	6926      	ldr	r6, [r4, #16]
 800c6ac:	2e00      	cmp	r6, #0
 800c6ae:	d0a1      	beq.n	800c5f4 <__sflush_r+0x24>
 800c6b0:	6827      	ldr	r7, [r4, #0]
 800c6b2:	6026      	str	r6, [r4, #0]
 800c6b4:	1bbb      	subs	r3, r7, r6
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	0789      	lsls	r1, r1, #30
 800c6bc:	d100      	bne.n	800c6c0 <__sflush_r+0xf0>
 800c6be:	6963      	ldr	r3, [r4, #20]
 800c6c0:	60a3      	str	r3, [r4, #8]
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dc00      	bgt.n	800c6ca <__sflush_r+0xfa>
 800c6c8:	e794      	b.n	800c5f4 <__sflush_r+0x24>
 800c6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6cc:	0032      	movs	r2, r6
 800c6ce:	001f      	movs	r7, r3
 800c6d0:	0028      	movs	r0, r5
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	69e1      	ldr	r1, [r4, #28]
 800c6d6:	47b8      	blx	r7
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	dc06      	bgt.n	800c6ea <__sflush_r+0x11a>
 800c6dc:	2340      	movs	r3, #64	; 0x40
 800c6de:	2001      	movs	r0, #1
 800c6e0:	89a2      	ldrh	r2, [r4, #12]
 800c6e2:	4240      	negs	r0, r0
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	e785      	b.n	800c5f6 <__sflush_r+0x26>
 800c6ea:	9b01      	ldr	r3, [sp, #4]
 800c6ec:	1836      	adds	r6, r6, r0
 800c6ee:	1a1b      	subs	r3, r3, r0
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	e7e6      	b.n	800c6c2 <__sflush_r+0xf2>
 800c6f4:	dfbffffe 	.word	0xdfbffffe
 800c6f8:	fffff7ff 	.word	0xfffff7ff

0800c6fc <_fflush_r>:
 800c6fc:	b570      	push	{r4, r5, r6, lr}
 800c6fe:	0005      	movs	r5, r0
 800c700:	000c      	movs	r4, r1
 800c702:	2800      	cmp	r0, #0
 800c704:	d004      	beq.n	800c710 <_fflush_r+0x14>
 800c706:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <_fflush_r+0x14>
 800c70c:	f7fb ffac 	bl	8008668 <__sinit>
 800c710:	220c      	movs	r2, #12
 800c712:	5ea3      	ldrsh	r3, [r4, r2]
 800c714:	1e1e      	subs	r6, r3, #0
 800c716:	d015      	beq.n	800c744 <_fflush_r+0x48>
 800c718:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c71a:	07d2      	lsls	r2, r2, #31
 800c71c:	d404      	bmi.n	800c728 <_fflush_r+0x2c>
 800c71e:	059b      	lsls	r3, r3, #22
 800c720:	d402      	bmi.n	800c728 <_fflush_r+0x2c>
 800c722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c724:	f7fc f976 	bl	8008a14 <__retarget_lock_acquire_recursive>
 800c728:	0021      	movs	r1, r4
 800c72a:	0028      	movs	r0, r5
 800c72c:	f7ff ff50 	bl	800c5d0 <__sflush_r>
 800c730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c732:	0006      	movs	r6, r0
 800c734:	07db      	lsls	r3, r3, #31
 800c736:	d405      	bmi.n	800c744 <_fflush_r+0x48>
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	059b      	lsls	r3, r3, #22
 800c73c:	d402      	bmi.n	800c744 <_fflush_r+0x48>
 800c73e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c740:	f7fc f969 	bl	8008a16 <__retarget_lock_release_recursive>
 800c744:	0030      	movs	r0, r6
 800c746:	bd70      	pop	{r4, r5, r6, pc}

0800c748 <__sccl>:
 800c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c74a:	780b      	ldrb	r3, [r1, #0]
 800c74c:	0004      	movs	r4, r0
 800c74e:	2b5e      	cmp	r3, #94	; 0x5e
 800c750:	d019      	beq.n	800c786 <__sccl+0x3e>
 800c752:	2200      	movs	r2, #0
 800c754:	1c4d      	adds	r5, r1, #1
 800c756:	0021      	movs	r1, r4
 800c758:	1c60      	adds	r0, r4, #1
 800c75a:	30ff      	adds	r0, #255	; 0xff
 800c75c:	700a      	strb	r2, [r1, #0]
 800c75e:	3101      	adds	r1, #1
 800c760:	4281      	cmp	r1, r0
 800c762:	d1fb      	bne.n	800c75c <__sccl+0x14>
 800c764:	1e68      	subs	r0, r5, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00c      	beq.n	800c784 <__sccl+0x3c>
 800c76a:	2101      	movs	r1, #1
 800c76c:	262d      	movs	r6, #45	; 0x2d
 800c76e:	404a      	eors	r2, r1
 800c770:	0028      	movs	r0, r5
 800c772:	54e2      	strb	r2, [r4, r3]
 800c774:	7801      	ldrb	r1, [r0, #0]
 800c776:	1c45      	adds	r5, r0, #1
 800c778:	292d      	cmp	r1, #45	; 0x2d
 800c77a:	d00c      	beq.n	800c796 <__sccl+0x4e>
 800c77c:	295d      	cmp	r1, #93	; 0x5d
 800c77e:	d01d      	beq.n	800c7bc <__sccl+0x74>
 800c780:	2900      	cmp	r1, #0
 800c782:	d104      	bne.n	800c78e <__sccl+0x46>
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c786:	2201      	movs	r2, #1
 800c788:	784b      	ldrb	r3, [r1, #1]
 800c78a:	1c8d      	adds	r5, r1, #2
 800c78c:	e7e3      	b.n	800c756 <__sccl+0xe>
 800c78e:	000b      	movs	r3, r1
 800c790:	e7ee      	b.n	800c770 <__sccl+0x28>
 800c792:	0033      	movs	r3, r6
 800c794:	e7ec      	b.n	800c770 <__sccl+0x28>
 800c796:	7841      	ldrb	r1, [r0, #1]
 800c798:	295d      	cmp	r1, #93	; 0x5d
 800c79a:	d0fa      	beq.n	800c792 <__sccl+0x4a>
 800c79c:	428b      	cmp	r3, r1
 800c79e:	dcf8      	bgt.n	800c792 <__sccl+0x4a>
 800c7a0:	001d      	movs	r5, r3
 800c7a2:	3002      	adds	r0, #2
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	5562      	strb	r2, [r4, r5]
 800c7a8:	42a9      	cmp	r1, r5
 800c7aa:	dcfb      	bgt.n	800c7a4 <__sccl+0x5c>
 800c7ac:	2500      	movs	r5, #0
 800c7ae:	1c5f      	adds	r7, r3, #1
 800c7b0:	428b      	cmp	r3, r1
 800c7b2:	da01      	bge.n	800c7b8 <__sccl+0x70>
 800c7b4:	1acd      	subs	r5, r1, r3
 800c7b6:	3d01      	subs	r5, #1
 800c7b8:	197b      	adds	r3, r7, r5
 800c7ba:	e7db      	b.n	800c774 <__sccl+0x2c>
 800c7bc:	0028      	movs	r0, r5
 800c7be:	e7e1      	b.n	800c784 <__sccl+0x3c>

0800c7c0 <_localeconv_r>:
 800c7c0:	4800      	ldr	r0, [pc, #0]	; (800c7c4 <_localeconv_r+0x4>)
 800c7c2:	4770      	bx	lr
 800c7c4:	20000540 	.word	0x20000540

0800c7c8 <__libc_fini_array>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	4c07      	ldr	r4, [pc, #28]	; (800c7e8 <__libc_fini_array+0x20>)
 800c7cc:	4d07      	ldr	r5, [pc, #28]	; (800c7ec <__libc_fini_array+0x24>)
 800c7ce:	1b64      	subs	r4, r4, r5
 800c7d0:	10a4      	asrs	r4, r4, #2
 800c7d2:	2c00      	cmp	r4, #0
 800c7d4:	d102      	bne.n	800c7dc <__libc_fini_array+0x14>
 800c7d6:	f002 fdcd 	bl	800f374 <_fini>
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	3c01      	subs	r4, #1
 800c7de:	00a3      	lsls	r3, r4, #2
 800c7e0:	58eb      	ldr	r3, [r5, r3]
 800c7e2:	4798      	blx	r3
 800c7e4:	e7f5      	b.n	800c7d2 <__libc_fini_array+0xa>
 800c7e6:	46c0      	nop			; (mov r8, r8)
 800c7e8:	0800f968 	.word	0x0800f968
 800c7ec:	0800f964 	.word	0x0800f964

0800c7f0 <memchr>:
 800c7f0:	b2c9      	uxtb	r1, r1
 800c7f2:	1882      	adds	r2, r0, r2
 800c7f4:	4290      	cmp	r0, r2
 800c7f6:	d101      	bne.n	800c7fc <memchr+0xc>
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	4770      	bx	lr
 800c7fc:	7803      	ldrb	r3, [r0, #0]
 800c7fe:	428b      	cmp	r3, r1
 800c800:	d0fb      	beq.n	800c7fa <memchr+0xa>
 800c802:	3001      	adds	r0, #1
 800c804:	e7f6      	b.n	800c7f4 <memchr+0x4>
	...

0800c808 <frexp>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	0014      	movs	r4, r2
 800c80c:	2500      	movs	r5, #0
 800c80e:	6025      	str	r5, [r4, #0]
 800c810:	4d10      	ldr	r5, [pc, #64]	; (800c854 <frexp+0x4c>)
 800c812:	004b      	lsls	r3, r1, #1
 800c814:	000a      	movs	r2, r1
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	42ab      	cmp	r3, r5
 800c81a:	dc1a      	bgt.n	800c852 <frexp+0x4a>
 800c81c:	001d      	movs	r5, r3
 800c81e:	4305      	orrs	r5, r0
 800c820:	d017      	beq.n	800c852 <frexp+0x4a>
 800c822:	4d0d      	ldr	r5, [pc, #52]	; (800c858 <frexp+0x50>)
 800c824:	4229      	tst	r1, r5
 800c826:	d109      	bne.n	800c83c <frexp+0x34>
 800c828:	2200      	movs	r2, #0
 800c82a:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <frexp+0x54>)
 800c82c:	f7f4 ff1e 	bl	800166c <__aeabi_dmul>
 800c830:	2536      	movs	r5, #54	; 0x36
 800c832:	000a      	movs	r2, r1
 800c834:	004b      	lsls	r3, r1, #1
 800c836:	426d      	negs	r5, r5
 800c838:	085b      	lsrs	r3, r3, #1
 800c83a:	6025      	str	r5, [r4, #0]
 800c83c:	4d08      	ldr	r5, [pc, #32]	; (800c860 <frexp+0x58>)
 800c83e:	151b      	asrs	r3, r3, #20
 800c840:	195b      	adds	r3, r3, r5
 800c842:	6825      	ldr	r5, [r4, #0]
 800c844:	18eb      	adds	r3, r5, r3
 800c846:	6023      	str	r3, [r4, #0]
 800c848:	4b06      	ldr	r3, [pc, #24]	; (800c864 <frexp+0x5c>)
 800c84a:	401a      	ands	r2, r3
 800c84c:	4b06      	ldr	r3, [pc, #24]	; (800c868 <frexp+0x60>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	0019      	movs	r1, r3
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	7fefffff 	.word	0x7fefffff
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	43500000 	.word	0x43500000
 800c860:	fffffc02 	.word	0xfffffc02
 800c864:	800fffff 	.word	0x800fffff
 800c868:	3fe00000 	.word	0x3fe00000

0800c86c <__register_exitproc>:
 800c86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c86e:	4f1c      	ldr	r7, [pc, #112]	; (800c8e0 <__register_exitproc+0x74>)
 800c870:	0004      	movs	r4, r0
 800c872:	6838      	ldr	r0, [r7, #0]
 800c874:	0016      	movs	r6, r2
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	9100      	str	r1, [sp, #0]
 800c87a:	f7fc f8cb 	bl	8008a14 <__retarget_lock_acquire_recursive>
 800c87e:	4a19      	ldr	r2, [pc, #100]	; (800c8e4 <__register_exitproc+0x78>)
 800c880:	6813      	ldr	r3, [r2, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d101      	bne.n	800c88a <__register_exitproc+0x1e>
 800c886:	4b18      	ldr	r3, [pc, #96]	; (800c8e8 <__register_exitproc+0x7c>)
 800c888:	6013      	str	r3, [r2, #0]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	6838      	ldr	r0, [r7, #0]
 800c88e:	2a1f      	cmp	r2, #31
 800c890:	dd04      	ble.n	800c89c <__register_exitproc+0x30>
 800c892:	f7fc f8c0 	bl	8008a16 <__retarget_lock_release_recursive>
 800c896:	2001      	movs	r0, #1
 800c898:	4240      	negs	r0, r0
 800c89a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c89c:	2c00      	cmp	r4, #0
 800c89e:	d014      	beq.n	800c8ca <__register_exitproc+0x5e>
 800c8a0:	0091      	lsls	r1, r2, #2
 800c8a2:	1859      	adds	r1, r3, r1
 800c8a4:	000f      	movs	r7, r1
 800c8a6:	3788      	adds	r7, #136	; 0x88
 800c8a8:	603e      	str	r6, [r7, #0]
 800c8aa:	2701      	movs	r7, #1
 800c8ac:	001e      	movs	r6, r3
 800c8ae:	4097      	lsls	r7, r2
 800c8b0:	3685      	adds	r6, #133	; 0x85
 800c8b2:	36ff      	adds	r6, #255	; 0xff
 800c8b4:	6875      	ldr	r5, [r6, #4]
 800c8b6:	31fc      	adds	r1, #252	; 0xfc
 800c8b8:	433d      	orrs	r5, r7
 800c8ba:	6075      	str	r5, [r6, #4]
 800c8bc:	9d01      	ldr	r5, [sp, #4]
 800c8be:	60cd      	str	r5, [r1, #12]
 800c8c0:	2c02      	cmp	r4, #2
 800c8c2:	d102      	bne.n	800c8ca <__register_exitproc+0x5e>
 800c8c4:	68b1      	ldr	r1, [r6, #8]
 800c8c6:	4339      	orrs	r1, r7
 800c8c8:	60b1      	str	r1, [r6, #8]
 800c8ca:	1c51      	adds	r1, r2, #1
 800c8cc:	6059      	str	r1, [r3, #4]
 800c8ce:	3202      	adds	r2, #2
 800c8d0:	9900      	ldr	r1, [sp, #0]
 800c8d2:	0092      	lsls	r2, r2, #2
 800c8d4:	50d1      	str	r1, [r2, r3]
 800c8d6:	f7fc f89e 	bl	8008a16 <__retarget_lock_release_recursive>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	e7dd      	b.n	800c89a <__register_exitproc+0x2e>
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	200006e4 	.word	0x200006e4
 800c8e4:	20000dcc 	.word	0x20000dcc
 800c8e8:	20000dd0 	.word	0x20000dd0

0800c8ec <__assert_func>:
 800c8ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c8ee:	0014      	movs	r4, r2
 800c8f0:	001a      	movs	r2, r3
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <__assert_func+0x2c>)
 800c8f4:	0005      	movs	r5, r0
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	000e      	movs	r6, r1
 800c8fa:	68d8      	ldr	r0, [r3, #12]
 800c8fc:	4b07      	ldr	r3, [pc, #28]	; (800c91c <__assert_func+0x30>)
 800c8fe:	2c00      	cmp	r4, #0
 800c900:	d101      	bne.n	800c906 <__assert_func+0x1a>
 800c902:	4b07      	ldr	r3, [pc, #28]	; (800c920 <__assert_func+0x34>)
 800c904:	001c      	movs	r4, r3
 800c906:	4907      	ldr	r1, [pc, #28]	; (800c924 <__assert_func+0x38>)
 800c908:	9301      	str	r3, [sp, #4]
 800c90a:	9402      	str	r4, [sp, #8]
 800c90c:	002b      	movs	r3, r5
 800c90e:	9600      	str	r6, [sp, #0]
 800c910:	f001 faa6 	bl	800de60 <fiprintf>
 800c914:	f002 fb8e 	bl	800f034 <abort>
 800c918:	200006e0 	.word	0x200006e0
 800c91c:	0800f890 	.word	0x0800f890
 800c920:	0800f8cb 	.word	0x0800f8cb
 800c924:	0800f89d 	.word	0x0800f89d

0800c928 <_calloc_r>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	2400      	movs	r4, #0
 800c92c:	0c0b      	lsrs	r3, r1, #16
 800c92e:	0c16      	lsrs	r6, r2, #16
 800c930:	42a3      	cmp	r3, r4
 800c932:	d133      	bne.n	800c99c <_calloc_r+0x74>
 800c934:	42a6      	cmp	r6, r4
 800c936:	d121      	bne.n	800c97c <_calloc_r+0x54>
 800c938:	b28b      	uxth	r3, r1
 800c93a:	b291      	uxth	r1, r2
 800c93c:	4359      	muls	r1, r3
 800c93e:	f7fa fd11 	bl	8007364 <_malloc_r>
 800c942:	1e05      	subs	r5, r0, #0
 800c944:	d033      	beq.n	800c9ae <_calloc_r+0x86>
 800c946:	0003      	movs	r3, r0
 800c948:	3b08      	subs	r3, #8
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	2303      	movs	r3, #3
 800c94e:	439a      	bics	r2, r3
 800c950:	3a04      	subs	r2, #4
 800c952:	2a24      	cmp	r2, #36	; 0x24
 800c954:	d832      	bhi.n	800c9bc <_calloc_r+0x94>
 800c956:	0003      	movs	r3, r0
 800c958:	2a13      	cmp	r2, #19
 800c95a:	d90a      	bls.n	800c972 <_calloc_r+0x4a>
 800c95c:	6004      	str	r4, [r0, #0]
 800c95e:	6044      	str	r4, [r0, #4]
 800c960:	3308      	adds	r3, #8
 800c962:	2a1b      	cmp	r2, #27
 800c964:	d905      	bls.n	800c972 <_calloc_r+0x4a>
 800c966:	6084      	str	r4, [r0, #8]
 800c968:	60c4      	str	r4, [r0, #12]
 800c96a:	2a24      	cmp	r2, #36	; 0x24
 800c96c:	d021      	beq.n	800c9b2 <_calloc_r+0x8a>
 800c96e:	0003      	movs	r3, r0
 800c970:	3310      	adds	r3, #16
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	605a      	str	r2, [r3, #4]
 800c978:	609a      	str	r2, [r3, #8]
 800c97a:	e018      	b.n	800c9ae <_calloc_r+0x86>
 800c97c:	1c33      	adds	r3, r6, #0
 800c97e:	1c0d      	adds	r5, r1, #0
 800c980:	b289      	uxth	r1, r1
 800c982:	b292      	uxth	r2, r2
 800c984:	434a      	muls	r2, r1
 800c986:	b2ad      	uxth	r5, r5
 800c988:	b299      	uxth	r1, r3
 800c98a:	4369      	muls	r1, r5
 800c98c:	0c13      	lsrs	r3, r2, #16
 800c98e:	18c9      	adds	r1, r1, r3
 800c990:	0c0b      	lsrs	r3, r1, #16
 800c992:	d107      	bne.n	800c9a4 <_calloc_r+0x7c>
 800c994:	0409      	lsls	r1, r1, #16
 800c996:	b292      	uxth	r2, r2
 800c998:	4311      	orrs	r1, r2
 800c99a:	e7d0      	b.n	800c93e <_calloc_r+0x16>
 800c99c:	2e00      	cmp	r6, #0
 800c99e:	d101      	bne.n	800c9a4 <_calloc_r+0x7c>
 800c9a0:	1c15      	adds	r5, r2, #0
 800c9a2:	e7ed      	b.n	800c980 <_calloc_r+0x58>
 800c9a4:	f7fc f80a 	bl	80089bc <__errno>
 800c9a8:	230c      	movs	r3, #12
 800c9aa:	2500      	movs	r5, #0
 800c9ac:	6003      	str	r3, [r0, #0]
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b2:	0003      	movs	r3, r0
 800c9b4:	6104      	str	r4, [r0, #16]
 800c9b6:	3318      	adds	r3, #24
 800c9b8:	6144      	str	r4, [r0, #20]
 800c9ba:	e7da      	b.n	800c972 <_calloc_r+0x4a>
 800c9bc:	2100      	movs	r1, #0
 800c9be:	f7fb ff51 	bl	8008864 <memset>
 800c9c2:	e7f4      	b.n	800c9ae <_calloc_r+0x86>

0800c9c4 <quorem>:
 800c9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9c6:	6902      	ldr	r2, [r0, #16]
 800c9c8:	690b      	ldr	r3, [r1, #16]
 800c9ca:	b089      	sub	sp, #36	; 0x24
 800c9cc:	0007      	movs	r7, r0
 800c9ce:	9104      	str	r1, [sp, #16]
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	db69      	blt.n	800caaa <quorem+0xe6>
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	009c      	lsls	r4, r3, #2
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	000b      	movs	r3, r1
 800c9de:	3314      	adds	r3, #20
 800c9e0:	9306      	str	r3, [sp, #24]
 800c9e2:	191b      	adds	r3, r3, r4
 800c9e4:	9305      	str	r3, [sp, #20]
 800c9e6:	003b      	movs	r3, r7
 800c9e8:	3314      	adds	r3, #20
 800c9ea:	9303      	str	r3, [sp, #12]
 800c9ec:	191c      	adds	r4, r3, r4
 800c9ee:	9b05      	ldr	r3, [sp, #20]
 800c9f0:	6826      	ldr	r6, [r4, #0]
 800c9f2:	681d      	ldr	r5, [r3, #0]
 800c9f4:	0030      	movs	r0, r6
 800c9f6:	3501      	adds	r5, #1
 800c9f8:	0029      	movs	r1, r5
 800c9fa:	f7f3 fb9f 	bl	800013c <__udivsi3>
 800c9fe:	9002      	str	r0, [sp, #8]
 800ca00:	42ae      	cmp	r6, r5
 800ca02:	d329      	bcc.n	800ca58 <quorem+0x94>
 800ca04:	9b06      	ldr	r3, [sp, #24]
 800ca06:	2600      	movs	r6, #0
 800ca08:	469c      	mov	ip, r3
 800ca0a:	9d03      	ldr	r5, [sp, #12]
 800ca0c:	9606      	str	r6, [sp, #24]
 800ca0e:	4662      	mov	r2, ip
 800ca10:	ca08      	ldmia	r2!, {r3}
 800ca12:	6828      	ldr	r0, [r5, #0]
 800ca14:	4694      	mov	ip, r2
 800ca16:	9a02      	ldr	r2, [sp, #8]
 800ca18:	b299      	uxth	r1, r3
 800ca1a:	4351      	muls	r1, r2
 800ca1c:	0c1b      	lsrs	r3, r3, #16
 800ca1e:	4353      	muls	r3, r2
 800ca20:	1989      	adds	r1, r1, r6
 800ca22:	0c0a      	lsrs	r2, r1, #16
 800ca24:	189b      	adds	r3, r3, r2
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	0c1e      	lsrs	r6, r3, #16
 800ca2a:	9b06      	ldr	r3, [sp, #24]
 800ca2c:	b282      	uxth	r2, r0
 800ca2e:	18d2      	adds	r2, r2, r3
 800ca30:	466b      	mov	r3, sp
 800ca32:	b289      	uxth	r1, r1
 800ca34:	8b9b      	ldrh	r3, [r3, #28]
 800ca36:	1a52      	subs	r2, r2, r1
 800ca38:	0c01      	lsrs	r1, r0, #16
 800ca3a:	1ac9      	subs	r1, r1, r3
 800ca3c:	1413      	asrs	r3, r2, #16
 800ca3e:	18cb      	adds	r3, r1, r3
 800ca40:	1419      	asrs	r1, r3, #16
 800ca42:	b292      	uxth	r2, r2
 800ca44:	041b      	lsls	r3, r3, #16
 800ca46:	4313      	orrs	r3, r2
 800ca48:	c508      	stmia	r5!, {r3}
 800ca4a:	9b05      	ldr	r3, [sp, #20]
 800ca4c:	9106      	str	r1, [sp, #24]
 800ca4e:	4563      	cmp	r3, ip
 800ca50:	d2dd      	bcs.n	800ca0e <quorem+0x4a>
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d030      	beq.n	800caba <quorem+0xf6>
 800ca58:	0038      	movs	r0, r7
 800ca5a:	9904      	ldr	r1, [sp, #16]
 800ca5c:	f7fc ff04 	bl	8009868 <__mcmp>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	db21      	blt.n	800caa8 <quorem+0xe4>
 800ca64:	0038      	movs	r0, r7
 800ca66:	2600      	movs	r6, #0
 800ca68:	9b02      	ldr	r3, [sp, #8]
 800ca6a:	9c04      	ldr	r4, [sp, #16]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	9302      	str	r3, [sp, #8]
 800ca70:	3014      	adds	r0, #20
 800ca72:	3414      	adds	r4, #20
 800ca74:	6803      	ldr	r3, [r0, #0]
 800ca76:	cc02      	ldmia	r4!, {r1}
 800ca78:	b29d      	uxth	r5, r3
 800ca7a:	19ad      	adds	r5, r5, r6
 800ca7c:	b28a      	uxth	r2, r1
 800ca7e:	1aaa      	subs	r2, r5, r2
 800ca80:	0c09      	lsrs	r1, r1, #16
 800ca82:	0c1b      	lsrs	r3, r3, #16
 800ca84:	1a5b      	subs	r3, r3, r1
 800ca86:	1411      	asrs	r1, r2, #16
 800ca88:	185b      	adds	r3, r3, r1
 800ca8a:	141e      	asrs	r6, r3, #16
 800ca8c:	b292      	uxth	r2, r2
 800ca8e:	041b      	lsls	r3, r3, #16
 800ca90:	4313      	orrs	r3, r2
 800ca92:	c008      	stmia	r0!, {r3}
 800ca94:	9b05      	ldr	r3, [sp, #20]
 800ca96:	42a3      	cmp	r3, r4
 800ca98:	d2ec      	bcs.n	800ca74 <quorem+0xb0>
 800ca9a:	9b01      	ldr	r3, [sp, #4]
 800ca9c:	9a03      	ldr	r2, [sp, #12]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	18d3      	adds	r3, r2, r3
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	d015      	beq.n	800cad4 <quorem+0x110>
 800caa8:	9802      	ldr	r0, [sp, #8]
 800caaa:	b009      	add	sp, #36	; 0x24
 800caac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d106      	bne.n	800cac2 <quorem+0xfe>
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	9b03      	ldr	r3, [sp, #12]
 800cabc:	3c04      	subs	r4, #4
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	d3f5      	bcc.n	800caae <quorem+0xea>
 800cac2:	9b01      	ldr	r3, [sp, #4]
 800cac4:	613b      	str	r3, [r7, #16]
 800cac6:	e7c7      	b.n	800ca58 <quorem+0x94>
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	2a00      	cmp	r2, #0
 800cacc:	d106      	bne.n	800cadc <quorem+0x118>
 800cace:	9a01      	ldr	r2, [sp, #4]
 800cad0:	3a01      	subs	r2, #1
 800cad2:	9201      	str	r2, [sp, #4]
 800cad4:	9a03      	ldr	r2, [sp, #12]
 800cad6:	3b04      	subs	r3, #4
 800cad8:	429a      	cmp	r2, r3
 800cada:	d3f5      	bcc.n	800cac8 <quorem+0x104>
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	e7e2      	b.n	800caa8 <quorem+0xe4>
	...

0800cae4 <_dtoa_r>:
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	0014      	movs	r4, r2
 800cae8:	001d      	movs	r5, r3
 800caea:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800caec:	b09d      	sub	sp, #116	; 0x74
 800caee:	9408      	str	r4, [sp, #32]
 800caf0:	9509      	str	r5, [sp, #36]	; 0x24
 800caf2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800caf4:	9004      	str	r0, [sp, #16]
 800caf6:	2900      	cmp	r1, #0
 800caf8:	d009      	beq.n	800cb0e <_dtoa_r+0x2a>
 800cafa:	2301      	movs	r3, #1
 800cafc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cafe:	4093      	lsls	r3, r2
 800cb00:	604a      	str	r2, [r1, #4]
 800cb02:	608b      	str	r3, [r1, #8]
 800cb04:	f7fc fc56 	bl	80093b4 <_Bfree>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9a04      	ldr	r2, [sp, #16]
 800cb0c:	6393      	str	r3, [r2, #56]	; 0x38
 800cb0e:	2d00      	cmp	r5, #0
 800cb10:	da1e      	bge.n	800cb50 <_dtoa_r+0x6c>
 800cb12:	2301      	movs	r3, #1
 800cb14:	6033      	str	r3, [r6, #0]
 800cb16:	006b      	lsls	r3, r5, #1
 800cb18:	085b      	lsrs	r3, r3, #1
 800cb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb1e:	4bb5      	ldr	r3, [pc, #724]	; (800cdf4 <_dtoa_r+0x310>)
 800cb20:	4ab4      	ldr	r2, [pc, #720]	; (800cdf4 <_dtoa_r+0x310>)
 800cb22:	403b      	ands	r3, r7
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d116      	bne.n	800cb56 <_dtoa_r+0x72>
 800cb28:	4bb3      	ldr	r3, [pc, #716]	; (800cdf8 <_dtoa_r+0x314>)
 800cb2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb2c:	6013      	str	r3, [r2, #0]
 800cb2e:	033b      	lsls	r3, r7, #12
 800cb30:	0b1b      	lsrs	r3, r3, #12
 800cb32:	4323      	orrs	r3, r4
 800cb34:	d101      	bne.n	800cb3a <_dtoa_r+0x56>
 800cb36:	f000 fdb2 	bl	800d69e <_dtoa_r+0xbba>
 800cb3a:	4bb0      	ldr	r3, [pc, #704]	; (800cdfc <_dtoa_r+0x318>)
 800cb3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb3e:	9306      	str	r3, [sp, #24]
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	d002      	beq.n	800cb4a <_dtoa_r+0x66>
 800cb44:	4bae      	ldr	r3, [pc, #696]	; (800ce00 <_dtoa_r+0x31c>)
 800cb46:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	9806      	ldr	r0, [sp, #24]
 800cb4c:	b01d      	add	sp, #116	; 0x74
 800cb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb50:	2300      	movs	r3, #0
 800cb52:	6033      	str	r3, [r6, #0]
 800cb54:	e7e2      	b.n	800cb1c <_dtoa_r+0x38>
 800cb56:	9a08      	ldr	r2, [sp, #32]
 800cb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5a:	9210      	str	r2, [sp, #64]	; 0x40
 800cb5c:	9311      	str	r3, [sp, #68]	; 0x44
 800cb5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb62:	2200      	movs	r2, #0
 800cb64:	2300      	movs	r3, #0
 800cb66:	f7f3 fc6f 	bl	8000448 <__aeabi_dcmpeq>
 800cb6a:	1e06      	subs	r6, r0, #0
 800cb6c:	d009      	beq.n	800cb82 <_dtoa_r+0x9e>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	4ba3      	ldr	r3, [pc, #652]	; (800ce04 <_dtoa_r+0x320>)
 800cb76:	9306      	str	r3, [sp, #24]
 800cb78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0e5      	beq.n	800cb4a <_dtoa_r+0x66>
 800cb7e:	4ba2      	ldr	r3, [pc, #648]	; (800ce08 <_dtoa_r+0x324>)
 800cb80:	e7e1      	b.n	800cb46 <_dtoa_r+0x62>
 800cb82:	ab1a      	add	r3, sp, #104	; 0x68
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	ab1b      	add	r3, sp, #108	; 0x6c
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	9804      	ldr	r0, [sp, #16]
 800cb8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb90:	f7fc ff86 	bl	8009aa0 <__d2b>
 800cb94:	007a      	lsls	r2, r7, #1
 800cb96:	9005      	str	r0, [sp, #20]
 800cb98:	0d52      	lsrs	r2, r2, #21
 800cb9a:	d100      	bne.n	800cb9e <_dtoa_r+0xba>
 800cb9c:	e07b      	b.n	800cc96 <_dtoa_r+0x1b2>
 800cb9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cba0:	9617      	str	r6, [sp, #92]	; 0x5c
 800cba2:	0319      	lsls	r1, r3, #12
 800cba4:	4b99      	ldr	r3, [pc, #612]	; (800ce0c <_dtoa_r+0x328>)
 800cba6:	0b09      	lsrs	r1, r1, #12
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	4999      	ldr	r1, [pc, #612]	; (800ce10 <_dtoa_r+0x32c>)
 800cbac:	1857      	adds	r7, r2, r1
 800cbae:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cbb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cbb2:	0019      	movs	r1, r3
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4b97      	ldr	r3, [pc, #604]	; (800ce14 <_dtoa_r+0x330>)
 800cbb8:	f7f5 f81a 	bl	8001bf0 <__aeabi_dsub>
 800cbbc:	4a96      	ldr	r2, [pc, #600]	; (800ce18 <_dtoa_r+0x334>)
 800cbbe:	4b97      	ldr	r3, [pc, #604]	; (800ce1c <_dtoa_r+0x338>)
 800cbc0:	f7f4 fd54 	bl	800166c <__aeabi_dmul>
 800cbc4:	4a96      	ldr	r2, [pc, #600]	; (800ce20 <_dtoa_r+0x33c>)
 800cbc6:	4b97      	ldr	r3, [pc, #604]	; (800ce24 <_dtoa_r+0x340>)
 800cbc8:	f7f3 fdf6 	bl	80007b8 <__aeabi_dadd>
 800cbcc:	0004      	movs	r4, r0
 800cbce:	0038      	movs	r0, r7
 800cbd0:	000d      	movs	r5, r1
 800cbd2:	f7f5 fbe3 	bl	800239c <__aeabi_i2d>
 800cbd6:	4a94      	ldr	r2, [pc, #592]	; (800ce28 <_dtoa_r+0x344>)
 800cbd8:	4b94      	ldr	r3, [pc, #592]	; (800ce2c <_dtoa_r+0x348>)
 800cbda:	f7f4 fd47 	bl	800166c <__aeabi_dmul>
 800cbde:	0002      	movs	r2, r0
 800cbe0:	000b      	movs	r3, r1
 800cbe2:	0020      	movs	r0, r4
 800cbe4:	0029      	movs	r1, r5
 800cbe6:	f7f3 fde7 	bl	80007b8 <__aeabi_dadd>
 800cbea:	0004      	movs	r4, r0
 800cbec:	000d      	movs	r5, r1
 800cbee:	f7f5 fb9f 	bl	8002330 <__aeabi_d2iz>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	9003      	str	r0, [sp, #12]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	0020      	movs	r0, r4
 800cbfa:	0029      	movs	r1, r5
 800cbfc:	f7f3 fc2a 	bl	8000454 <__aeabi_dcmplt>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d00b      	beq.n	800cc1c <_dtoa_r+0x138>
 800cc04:	9803      	ldr	r0, [sp, #12]
 800cc06:	f7f5 fbc9 	bl	800239c <__aeabi_i2d>
 800cc0a:	002b      	movs	r3, r5
 800cc0c:	0022      	movs	r2, r4
 800cc0e:	f7f3 fc1b 	bl	8000448 <__aeabi_dcmpeq>
 800cc12:	4243      	negs	r3, r0
 800cc14:	4158      	adcs	r0, r3
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	1a1b      	subs	r3, r3, r0
 800cc1a:	9303      	str	r3, [sp, #12]
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	9316      	str	r3, [sp, #88]	; 0x58
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	2b16      	cmp	r3, #22
 800cc24:	d810      	bhi.n	800cc48 <_dtoa_r+0x164>
 800cc26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc2a:	9a03      	ldr	r2, [sp, #12]
 800cc2c:	4b80      	ldr	r3, [pc, #512]	; (800ce30 <_dtoa_r+0x34c>)
 800cc2e:	00d2      	lsls	r2, r2, #3
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f7f3 fc0d 	bl	8000454 <__aeabi_dcmplt>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d047      	beq.n	800ccce <_dtoa_r+0x1ea>
 800cc3e:	9b03      	ldr	r3, [sp, #12]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	2300      	movs	r3, #0
 800cc46:	9316      	str	r3, [sp, #88]	; 0x58
 800cc48:	2200      	movs	r2, #0
 800cc4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cc4c:	920a      	str	r2, [sp, #40]	; 0x28
 800cc4e:	1bdb      	subs	r3, r3, r7
 800cc50:	1e5a      	subs	r2, r3, #1
 800cc52:	d53e      	bpl.n	800ccd2 <_dtoa_r+0x1ee>
 800cc54:	2201      	movs	r2, #1
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	930a      	str	r3, [sp, #40]	; 0x28
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	db38      	blt.n	800ccd6 <_dtoa_r+0x1f2>
 800cc64:	9a03      	ldr	r2, [sp, #12]
 800cc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc68:	4694      	mov	ip, r2
 800cc6a:	4463      	add	r3, ip
 800cc6c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc72:	930d      	str	r3, [sp, #52]	; 0x34
 800cc74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc76:	2401      	movs	r4, #1
 800cc78:	2b09      	cmp	r3, #9
 800cc7a:	d867      	bhi.n	800cd4c <_dtoa_r+0x268>
 800cc7c:	2b05      	cmp	r3, #5
 800cc7e:	dd02      	ble.n	800cc86 <_dtoa_r+0x1a2>
 800cc80:	2400      	movs	r4, #0
 800cc82:	3b04      	subs	r3, #4
 800cc84:	9322      	str	r3, [sp, #136]	; 0x88
 800cc86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc88:	1e98      	subs	r0, r3, #2
 800cc8a:	2803      	cmp	r0, #3
 800cc8c:	d867      	bhi.n	800cd5e <_dtoa_r+0x27a>
 800cc8e:	f7f3 fa41 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cc92:	3a2b      	.short	0x3a2b
 800cc94:	5b38      	.short	0x5b38
 800cc96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc98:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cc9a:	18f6      	adds	r6, r6, r3
 800cc9c:	4b65      	ldr	r3, [pc, #404]	; (800ce34 <_dtoa_r+0x350>)
 800cc9e:	18f2      	adds	r2, r6, r3
 800cca0:	2a20      	cmp	r2, #32
 800cca2:	dd0f      	ble.n	800ccc4 <_dtoa_r+0x1e0>
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	1a9b      	subs	r3, r3, r2
 800cca8:	409f      	lsls	r7, r3
 800ccaa:	4b63      	ldr	r3, [pc, #396]	; (800ce38 <_dtoa_r+0x354>)
 800ccac:	0038      	movs	r0, r7
 800ccae:	18f3      	adds	r3, r6, r3
 800ccb0:	40dc      	lsrs	r4, r3
 800ccb2:	4320      	orrs	r0, r4
 800ccb4:	f7f5 fba2 	bl	80023fc <__aeabi_ui2d>
 800ccb8:	2201      	movs	r2, #1
 800ccba:	4b60      	ldr	r3, [pc, #384]	; (800ce3c <_dtoa_r+0x358>)
 800ccbc:	1e77      	subs	r7, r6, #1
 800ccbe:	18cb      	adds	r3, r1, r3
 800ccc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccc2:	e776      	b.n	800cbb2 <_dtoa_r+0xce>
 800ccc4:	2320      	movs	r3, #32
 800ccc6:	0020      	movs	r0, r4
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	4098      	lsls	r0, r3
 800cccc:	e7f2      	b.n	800ccb4 <_dtoa_r+0x1d0>
 800ccce:	9016      	str	r0, [sp, #88]	; 0x58
 800ccd0:	e7ba      	b.n	800cc48 <_dtoa_r+0x164>
 800ccd2:	920c      	str	r2, [sp, #48]	; 0x30
 800ccd4:	e7c3      	b.n	800cc5e <_dtoa_r+0x17a>
 800ccd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd8:	9a03      	ldr	r2, [sp, #12]
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	930a      	str	r3, [sp, #40]	; 0x28
 800ccde:	4253      	negs	r3, r2
 800cce0:	930d      	str	r3, [sp, #52]	; 0x34
 800cce2:	2300      	movs	r3, #0
 800cce4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cce6:	e7c5      	b.n	800cc74 <_dtoa_r+0x190>
 800cce8:	2300      	movs	r3, #0
 800ccea:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ccee:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccf0:	9307      	str	r3, [sp, #28]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	dc13      	bgt.n	800cd1e <_dtoa_r+0x23a>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	001a      	movs	r2, r3
 800ccfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	9223      	str	r2, [sp, #140]	; 0x8c
 800cd00:	e00d      	b.n	800cd1e <_dtoa_r+0x23a>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e7f1      	b.n	800ccea <_dtoa_r+0x206>
 800cd06:	2300      	movs	r3, #0
 800cd08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cd0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd0c:	4694      	mov	ip, r2
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	4463      	add	r3, ip
 800cd12:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd14:	3301      	adds	r3, #1
 800cd16:	9307      	str	r3, [sp, #28]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	dc00      	bgt.n	800cd1e <_dtoa_r+0x23a>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	2100      	movs	r1, #0
 800cd20:	2204      	movs	r2, #4
 800cd22:	0010      	movs	r0, r2
 800cd24:	3014      	adds	r0, #20
 800cd26:	4298      	cmp	r0, r3
 800cd28:	d91d      	bls.n	800cd66 <_dtoa_r+0x282>
 800cd2a:	9b04      	ldr	r3, [sp, #16]
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	63d9      	str	r1, [r3, #60]	; 0x3c
 800cd30:	f7fc fb18 	bl	8009364 <_Balloc>
 800cd34:	9006      	str	r0, [sp, #24]
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d118      	bne.n	800cd6c <_dtoa_r+0x288>
 800cd3a:	21b0      	movs	r1, #176	; 0xb0
 800cd3c:	4b40      	ldr	r3, [pc, #256]	; (800ce40 <_dtoa_r+0x35c>)
 800cd3e:	4841      	ldr	r0, [pc, #260]	; (800ce44 <_dtoa_r+0x360>)
 800cd40:	9a06      	ldr	r2, [sp, #24]
 800cd42:	31ff      	adds	r1, #255	; 0xff
 800cd44:	f7ff fdd2 	bl	800c8ec <__assert_func>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e7dd      	b.n	800cd08 <_dtoa_r+0x224>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	940f      	str	r4, [sp, #60]	; 0x3c
 800cd50:	9322      	str	r3, [sp, #136]	; 0x88
 800cd52:	3b01      	subs	r3, #1
 800cd54:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd56:	9307      	str	r3, [sp, #28]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	3313      	adds	r3, #19
 800cd5c:	e7cf      	b.n	800ccfe <_dtoa_r+0x21a>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd62:	3b02      	subs	r3, #2
 800cd64:	e7f6      	b.n	800cd54 <_dtoa_r+0x270>
 800cd66:	3101      	adds	r1, #1
 800cd68:	0052      	lsls	r2, r2, #1
 800cd6a:	e7da      	b.n	800cd22 <_dtoa_r+0x23e>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	9a06      	ldr	r2, [sp, #24]
 800cd70:	639a      	str	r2, [r3, #56]	; 0x38
 800cd72:	9b07      	ldr	r3, [sp, #28]
 800cd74:	2b0e      	cmp	r3, #14
 800cd76:	d900      	bls.n	800cd7a <_dtoa_r+0x296>
 800cd78:	e0e3      	b.n	800cf42 <_dtoa_r+0x45e>
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	d100      	bne.n	800cd80 <_dtoa_r+0x29c>
 800cd7e:	e0e0      	b.n	800cf42 <_dtoa_r+0x45e>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dd62      	ble.n	800ce4c <_dtoa_r+0x368>
 800cd86:	210f      	movs	r1, #15
 800cd88:	9a03      	ldr	r2, [sp, #12]
 800cd8a:	4b29      	ldr	r3, [pc, #164]	; (800ce30 <_dtoa_r+0x34c>)
 800cd8c:	400a      	ands	r2, r1
 800cd8e:	00d2      	lsls	r2, r2, #3
 800cd90:	189b      	adds	r3, r3, r2
 800cd92:	681e      	ldr	r6, [r3, #0]
 800cd94:	685f      	ldr	r7, [r3, #4]
 800cd96:	9b03      	ldr	r3, [sp, #12]
 800cd98:	2402      	movs	r4, #2
 800cd9a:	111d      	asrs	r5, r3, #4
 800cd9c:	05db      	lsls	r3, r3, #23
 800cd9e:	d50a      	bpl.n	800cdb6 <_dtoa_r+0x2d2>
 800cda0:	4b29      	ldr	r3, [pc, #164]	; (800ce48 <_dtoa_r+0x364>)
 800cda2:	400d      	ands	r5, r1
 800cda4:	6a1a      	ldr	r2, [r3, #32]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cdaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cdac:	f7f4 f864 	bl	8000e78 <__aeabi_ddiv>
 800cdb0:	9008      	str	r0, [sp, #32]
 800cdb2:	9109      	str	r1, [sp, #36]	; 0x24
 800cdb4:	3401      	adds	r4, #1
 800cdb6:	4b24      	ldr	r3, [pc, #144]	; (800ce48 <_dtoa_r+0x364>)
 800cdb8:	930e      	str	r3, [sp, #56]	; 0x38
 800cdba:	2d00      	cmp	r5, #0
 800cdbc:	d108      	bne.n	800cdd0 <_dtoa_r+0x2ec>
 800cdbe:	9808      	ldr	r0, [sp, #32]
 800cdc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdc2:	0032      	movs	r2, r6
 800cdc4:	003b      	movs	r3, r7
 800cdc6:	f7f4 f857 	bl	8000e78 <__aeabi_ddiv>
 800cdca:	9008      	str	r0, [sp, #32]
 800cdcc:	9109      	str	r1, [sp, #36]	; 0x24
 800cdce:	e058      	b.n	800ce82 <_dtoa_r+0x39e>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	421d      	tst	r5, r3
 800cdd4:	d009      	beq.n	800cdea <_dtoa_r+0x306>
 800cdd6:	18e4      	adds	r4, r4, r3
 800cdd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdda:	0030      	movs	r0, r6
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	0039      	movs	r1, r7
 800cde2:	f7f4 fc43 	bl	800166c <__aeabi_dmul>
 800cde6:	0006      	movs	r6, r0
 800cde8:	000f      	movs	r7, r1
 800cdea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdec:	106d      	asrs	r5, r5, #1
 800cdee:	3308      	adds	r3, #8
 800cdf0:	e7e2      	b.n	800cdb8 <_dtoa_r+0x2d4>
 800cdf2:	46c0      	nop			; (mov r8, r8)
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	0000270f 	.word	0x0000270f
 800cdfc:	0800f8d5 	.word	0x0800f8d5
 800ce00:	0800f8d8 	.word	0x0800f8d8
 800ce04:	0800f846 	.word	0x0800f846
 800ce08:	0800f847 	.word	0x0800f847
 800ce0c:	3ff00000 	.word	0x3ff00000
 800ce10:	fffffc01 	.word	0xfffffc01
 800ce14:	3ff80000 	.word	0x3ff80000
 800ce18:	636f4361 	.word	0x636f4361
 800ce1c:	3fd287a7 	.word	0x3fd287a7
 800ce20:	8b60c8b3 	.word	0x8b60c8b3
 800ce24:	3fc68a28 	.word	0x3fc68a28
 800ce28:	509f79fb 	.word	0x509f79fb
 800ce2c:	3fd34413 	.word	0x3fd34413
 800ce30:	0800f740 	.word	0x0800f740
 800ce34:	00000432 	.word	0x00000432
 800ce38:	00000412 	.word	0x00000412
 800ce3c:	fe100000 	.word	0xfe100000
 800ce40:	0800f649 	.word	0x0800f649
 800ce44:	0800f8d9 	.word	0x0800f8d9
 800ce48:	0800f718 	.word	0x0800f718
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	2402      	movs	r4, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d016      	beq.n	800ce82 <_dtoa_r+0x39e>
 800ce54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce56:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce58:	220f      	movs	r2, #15
 800ce5a:	425d      	negs	r5, r3
 800ce5c:	402a      	ands	r2, r5
 800ce5e:	4bdd      	ldr	r3, [pc, #884]	; (800d1d4 <_dtoa_r+0x6f0>)
 800ce60:	00d2      	lsls	r2, r2, #3
 800ce62:	189b      	adds	r3, r3, r2
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	f7f4 fc00 	bl	800166c <__aeabi_dmul>
 800ce6c:	2701      	movs	r7, #1
 800ce6e:	2300      	movs	r3, #0
 800ce70:	9008      	str	r0, [sp, #32]
 800ce72:	9109      	str	r1, [sp, #36]	; 0x24
 800ce74:	4ed8      	ldr	r6, [pc, #864]	; (800d1d8 <_dtoa_r+0x6f4>)
 800ce76:	112d      	asrs	r5, r5, #4
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	d000      	beq.n	800ce7e <_dtoa_r+0x39a>
 800ce7c:	e091      	b.n	800cfa2 <_dtoa_r+0x4be>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1a3      	bne.n	800cdca <_dtoa_r+0x2e6>
 800ce82:	9e08      	ldr	r6, [sp, #32]
 800ce84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d100      	bne.n	800ce8e <_dtoa_r+0x3aa>
 800ce8c:	e094      	b.n	800cfb8 <_dtoa_r+0x4d4>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	0030      	movs	r0, r6
 800ce92:	0039      	movs	r1, r7
 800ce94:	4bd1      	ldr	r3, [pc, #836]	; (800d1dc <_dtoa_r+0x6f8>)
 800ce96:	f7f3 fadd 	bl	8000454 <__aeabi_dcmplt>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d100      	bne.n	800cea0 <_dtoa_r+0x3bc>
 800ce9e:	e08b      	b.n	800cfb8 <_dtoa_r+0x4d4>
 800cea0:	9b07      	ldr	r3, [sp, #28]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d100      	bne.n	800cea8 <_dtoa_r+0x3c4>
 800cea6:	e087      	b.n	800cfb8 <_dtoa_r+0x4d4>
 800cea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	dd45      	ble.n	800cf3a <_dtoa_r+0x456>
 800ceae:	9b03      	ldr	r3, [sp, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	930e      	str	r3, [sp, #56]	; 0x38
 800ceb6:	0030      	movs	r0, r6
 800ceb8:	4bc9      	ldr	r3, [pc, #804]	; (800d1e0 <_dtoa_r+0x6fc>)
 800ceba:	0039      	movs	r1, r7
 800cebc:	f7f4 fbd6 	bl	800166c <__aeabi_dmul>
 800cec0:	9008      	str	r0, [sp, #32]
 800cec2:	9109      	str	r1, [sp, #36]	; 0x24
 800cec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec6:	3401      	adds	r4, #1
 800cec8:	0020      	movs	r0, r4
 800ceca:	9e08      	ldr	r6, [sp, #32]
 800cecc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cece:	9312      	str	r3, [sp, #72]	; 0x48
 800ced0:	f7f5 fa64 	bl	800239c <__aeabi_i2d>
 800ced4:	0032      	movs	r2, r6
 800ced6:	003b      	movs	r3, r7
 800ced8:	f7f4 fbc8 	bl	800166c <__aeabi_dmul>
 800cedc:	2200      	movs	r2, #0
 800cede:	4bc1      	ldr	r3, [pc, #772]	; (800d1e4 <_dtoa_r+0x700>)
 800cee0:	f7f3 fc6a 	bl	80007b8 <__aeabi_dadd>
 800cee4:	4ac0      	ldr	r2, [pc, #768]	; (800d1e8 <_dtoa_r+0x704>)
 800cee6:	9014      	str	r0, [sp, #80]	; 0x50
 800cee8:	9115      	str	r1, [sp, #84]	; 0x54
 800ceea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ceec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ceee:	4694      	mov	ip, r2
 800cef0:	9308      	str	r3, [sp, #32]
 800cef2:	9409      	str	r4, [sp, #36]	; 0x24
 800cef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cef6:	4463      	add	r3, ip
 800cef8:	9318      	str	r3, [sp, #96]	; 0x60
 800cefa:	9309      	str	r3, [sp, #36]	; 0x24
 800cefc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d15e      	bne.n	800cfc0 <_dtoa_r+0x4dc>
 800cf02:	2200      	movs	r2, #0
 800cf04:	4bb9      	ldr	r3, [pc, #740]	; (800d1ec <_dtoa_r+0x708>)
 800cf06:	0030      	movs	r0, r6
 800cf08:	0039      	movs	r1, r7
 800cf0a:	f7f4 fe71 	bl	8001bf0 <__aeabi_dsub>
 800cf0e:	9a08      	ldr	r2, [sp, #32]
 800cf10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf12:	0004      	movs	r4, r0
 800cf14:	000d      	movs	r5, r1
 800cf16:	f7f3 fab1 	bl	800047c <__aeabi_dcmpgt>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d000      	beq.n	800cf20 <_dtoa_r+0x43c>
 800cf1e:	e2b3      	b.n	800d488 <_dtoa_r+0x9a4>
 800cf20:	48b3      	ldr	r0, [pc, #716]	; (800d1f0 <_dtoa_r+0x70c>)
 800cf22:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cf24:	4684      	mov	ip, r0
 800cf26:	4461      	add	r1, ip
 800cf28:	000b      	movs	r3, r1
 800cf2a:	0020      	movs	r0, r4
 800cf2c:	0029      	movs	r1, r5
 800cf2e:	9a08      	ldr	r2, [sp, #32]
 800cf30:	f7f3 fa90 	bl	8000454 <__aeabi_dcmplt>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d000      	beq.n	800cf3a <_dtoa_r+0x456>
 800cf38:	e2a3      	b.n	800d482 <_dtoa_r+0x99e>
 800cf3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800cf3e:	9308      	str	r3, [sp, #32]
 800cf40:	9409      	str	r4, [sp, #36]	; 0x24
 800cf42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	da00      	bge.n	800cf4a <_dtoa_r+0x466>
 800cf48:	e179      	b.n	800d23e <_dtoa_r+0x75a>
 800cf4a:	9a03      	ldr	r2, [sp, #12]
 800cf4c:	2a0e      	cmp	r2, #14
 800cf4e:	dd00      	ble.n	800cf52 <_dtoa_r+0x46e>
 800cf50:	e175      	b.n	800d23e <_dtoa_r+0x75a>
 800cf52:	4ba0      	ldr	r3, [pc, #640]	; (800d1d4 <_dtoa_r+0x6f0>)
 800cf54:	00d2      	lsls	r2, r2, #3
 800cf56:	189b      	adds	r3, r3, r2
 800cf58:	681e      	ldr	r6, [r3, #0]
 800cf5a:	685f      	ldr	r7, [r3, #4]
 800cf5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	db00      	blt.n	800cf64 <_dtoa_r+0x480>
 800cf62:	e0e5      	b.n	800d130 <_dtoa_r+0x64c>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	dd00      	ble.n	800cf6c <_dtoa_r+0x488>
 800cf6a:	e0e1      	b.n	800d130 <_dtoa_r+0x64c>
 800cf6c:	d000      	beq.n	800cf70 <_dtoa_r+0x48c>
 800cf6e:	e288      	b.n	800d482 <_dtoa_r+0x99e>
 800cf70:	2200      	movs	r2, #0
 800cf72:	0030      	movs	r0, r6
 800cf74:	0039      	movs	r1, r7
 800cf76:	4b9d      	ldr	r3, [pc, #628]	; (800d1ec <_dtoa_r+0x708>)
 800cf78:	f7f4 fb78 	bl	800166c <__aeabi_dmul>
 800cf7c:	9a08      	ldr	r2, [sp, #32]
 800cf7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf80:	f7f3 fa86 	bl	8000490 <__aeabi_dcmpge>
 800cf84:	9e07      	ldr	r6, [sp, #28]
 800cf86:	0037      	movs	r7, r6
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d000      	beq.n	800cf8e <_dtoa_r+0x4aa>
 800cf8c:	e25f      	b.n	800d44e <_dtoa_r+0x96a>
 800cf8e:	9b06      	ldr	r3, [sp, #24]
 800cf90:	9a06      	ldr	r2, [sp, #24]
 800cf92:	3301      	adds	r3, #1
 800cf94:	9308      	str	r3, [sp, #32]
 800cf96:	2331      	movs	r3, #49	; 0x31
 800cf98:	7013      	strb	r3, [r2, #0]
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	e25a      	b.n	800d458 <_dtoa_r+0x974>
 800cfa2:	423d      	tst	r5, r7
 800cfa4:	d005      	beq.n	800cfb2 <_dtoa_r+0x4ce>
 800cfa6:	6832      	ldr	r2, [r6, #0]
 800cfa8:	6873      	ldr	r3, [r6, #4]
 800cfaa:	f7f4 fb5f 	bl	800166c <__aeabi_dmul>
 800cfae:	003b      	movs	r3, r7
 800cfb0:	3401      	adds	r4, #1
 800cfb2:	106d      	asrs	r5, r5, #1
 800cfb4:	3608      	adds	r6, #8
 800cfb6:	e75f      	b.n	800ce78 <_dtoa_r+0x394>
 800cfb8:	9b03      	ldr	r3, [sp, #12]
 800cfba:	930e      	str	r3, [sp, #56]	; 0x38
 800cfbc:	9b07      	ldr	r3, [sp, #28]
 800cfbe:	e783      	b.n	800cec8 <_dtoa_r+0x3e4>
 800cfc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfc2:	4b84      	ldr	r3, [pc, #528]	; (800d1d4 <_dtoa_r+0x6f0>)
 800cfc4:	3a01      	subs	r2, #1
 800cfc6:	00d2      	lsls	r2, r2, #3
 800cfc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfca:	189b      	adds	r3, r3, r2
 800cfcc:	9c08      	ldr	r4, [sp, #32]
 800cfce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	d051      	beq.n	800d07c <_dtoa_r+0x598>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	4986      	ldr	r1, [pc, #536]	; (800d1f4 <_dtoa_r+0x710>)
 800cfdc:	f7f3 ff4c 	bl	8000e78 <__aeabi_ddiv>
 800cfe0:	0022      	movs	r2, r4
 800cfe2:	002b      	movs	r3, r5
 800cfe4:	f7f4 fe04 	bl	8001bf0 <__aeabi_dsub>
 800cfe8:	9a06      	ldr	r2, [sp, #24]
 800cfea:	0004      	movs	r4, r0
 800cfec:	4694      	mov	ip, r2
 800cfee:	000d      	movs	r5, r1
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	9314      	str	r3, [sp, #80]	; 0x50
 800cff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cff6:	4463      	add	r3, ip
 800cff8:	9318      	str	r3, [sp, #96]	; 0x60
 800cffa:	0039      	movs	r1, r7
 800cffc:	0030      	movs	r0, r6
 800cffe:	f7f5 f997 	bl	8002330 <__aeabi_d2iz>
 800d002:	9012      	str	r0, [sp, #72]	; 0x48
 800d004:	f7f5 f9ca 	bl	800239c <__aeabi_i2d>
 800d008:	0002      	movs	r2, r0
 800d00a:	000b      	movs	r3, r1
 800d00c:	0030      	movs	r0, r6
 800d00e:	0039      	movs	r1, r7
 800d010:	f7f4 fdee 	bl	8001bf0 <__aeabi_dsub>
 800d014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d018:	3301      	adds	r3, #1
 800d01a:	9308      	str	r3, [sp, #32]
 800d01c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d01e:	0006      	movs	r6, r0
 800d020:	3330      	adds	r3, #48	; 0x30
 800d022:	7013      	strb	r3, [r2, #0]
 800d024:	0022      	movs	r2, r4
 800d026:	002b      	movs	r3, r5
 800d028:	000f      	movs	r7, r1
 800d02a:	f7f3 fa13 	bl	8000454 <__aeabi_dcmplt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d174      	bne.n	800d11c <_dtoa_r+0x638>
 800d032:	0032      	movs	r2, r6
 800d034:	003b      	movs	r3, r7
 800d036:	2000      	movs	r0, #0
 800d038:	4968      	ldr	r1, [pc, #416]	; (800d1dc <_dtoa_r+0x6f8>)
 800d03a:	f7f4 fdd9 	bl	8001bf0 <__aeabi_dsub>
 800d03e:	0022      	movs	r2, r4
 800d040:	002b      	movs	r3, r5
 800d042:	f7f3 fa07 	bl	8000454 <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	d000      	beq.n	800d04c <_dtoa_r+0x568>
 800d04a:	e0d7      	b.n	800d1fc <_dtoa_r+0x718>
 800d04c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d04e:	9a08      	ldr	r2, [sp, #32]
 800d050:	4293      	cmp	r3, r2
 800d052:	d100      	bne.n	800d056 <_dtoa_r+0x572>
 800d054:	e771      	b.n	800cf3a <_dtoa_r+0x456>
 800d056:	2200      	movs	r2, #0
 800d058:	0020      	movs	r0, r4
 800d05a:	0029      	movs	r1, r5
 800d05c:	4b60      	ldr	r3, [pc, #384]	; (800d1e0 <_dtoa_r+0x6fc>)
 800d05e:	f7f4 fb05 	bl	800166c <__aeabi_dmul>
 800d062:	4b5f      	ldr	r3, [pc, #380]	; (800d1e0 <_dtoa_r+0x6fc>)
 800d064:	0004      	movs	r4, r0
 800d066:	000d      	movs	r5, r1
 800d068:	0030      	movs	r0, r6
 800d06a:	0039      	movs	r1, r7
 800d06c:	2200      	movs	r2, #0
 800d06e:	f7f4 fafd 	bl	800166c <__aeabi_dmul>
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	0006      	movs	r6, r0
 800d076:	000f      	movs	r7, r1
 800d078:	9314      	str	r3, [sp, #80]	; 0x50
 800d07a:	e7be      	b.n	800cffa <_dtoa_r+0x516>
 800d07c:	0020      	movs	r0, r4
 800d07e:	0029      	movs	r1, r5
 800d080:	f7f4 faf4 	bl	800166c <__aeabi_dmul>
 800d084:	9a06      	ldr	r2, [sp, #24]
 800d086:	9b06      	ldr	r3, [sp, #24]
 800d088:	4694      	mov	ip, r2
 800d08a:	9308      	str	r3, [sp, #32]
 800d08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d08e:	9014      	str	r0, [sp, #80]	; 0x50
 800d090:	9115      	str	r1, [sp, #84]	; 0x54
 800d092:	4463      	add	r3, ip
 800d094:	9319      	str	r3, [sp, #100]	; 0x64
 800d096:	0030      	movs	r0, r6
 800d098:	0039      	movs	r1, r7
 800d09a:	f7f5 f949 	bl	8002330 <__aeabi_d2iz>
 800d09e:	9018      	str	r0, [sp, #96]	; 0x60
 800d0a0:	f7f5 f97c 	bl	800239c <__aeabi_i2d>
 800d0a4:	0002      	movs	r2, r0
 800d0a6:	000b      	movs	r3, r1
 800d0a8:	0030      	movs	r0, r6
 800d0aa:	0039      	movs	r1, r7
 800d0ac:	f7f4 fda0 	bl	8001bf0 <__aeabi_dsub>
 800d0b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	3630      	adds	r6, #48	; 0x30
 800d0b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d0b8:	701e      	strb	r6, [r3, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	0004      	movs	r4, r0
 800d0be:	000d      	movs	r5, r1
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d12d      	bne.n	800d122 <_dtoa_r+0x63e>
 800d0c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d0c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d0ca:	9a06      	ldr	r2, [sp, #24]
 800d0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0ce:	4694      	mov	ip, r2
 800d0d0:	4463      	add	r3, ip
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	9308      	str	r3, [sp, #32]
 800d0d6:	4b47      	ldr	r3, [pc, #284]	; (800d1f4 <_dtoa_r+0x710>)
 800d0d8:	f7f3 fb6e 	bl	80007b8 <__aeabi_dadd>
 800d0dc:	0002      	movs	r2, r0
 800d0de:	000b      	movs	r3, r1
 800d0e0:	0020      	movs	r0, r4
 800d0e2:	0029      	movs	r1, r5
 800d0e4:	f7f3 f9ca 	bl	800047c <__aeabi_dcmpgt>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d000      	beq.n	800d0ee <_dtoa_r+0x60a>
 800d0ec:	e086      	b.n	800d1fc <_dtoa_r+0x718>
 800d0ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	493f      	ldr	r1, [pc, #252]	; (800d1f4 <_dtoa_r+0x710>)
 800d0f6:	f7f4 fd7b 	bl	8001bf0 <__aeabi_dsub>
 800d0fa:	0002      	movs	r2, r0
 800d0fc:	000b      	movs	r3, r1
 800d0fe:	0020      	movs	r0, r4
 800d100:	0029      	movs	r1, r5
 800d102:	f7f3 f9a7 	bl	8000454 <__aeabi_dcmplt>
 800d106:	2800      	cmp	r0, #0
 800d108:	d100      	bne.n	800d10c <_dtoa_r+0x628>
 800d10a:	e716      	b.n	800cf3a <_dtoa_r+0x456>
 800d10c:	9b08      	ldr	r3, [sp, #32]
 800d10e:	001a      	movs	r2, r3
 800d110:	3a01      	subs	r2, #1
 800d112:	9208      	str	r2, [sp, #32]
 800d114:	7812      	ldrb	r2, [r2, #0]
 800d116:	2a30      	cmp	r2, #48	; 0x30
 800d118:	d0f8      	beq.n	800d10c <_dtoa_r+0x628>
 800d11a:	9308      	str	r3, [sp, #32]
 800d11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d11e:	9303      	str	r3, [sp, #12]
 800d120:	e046      	b.n	800d1b0 <_dtoa_r+0x6cc>
 800d122:	2200      	movs	r2, #0
 800d124:	4b2e      	ldr	r3, [pc, #184]	; (800d1e0 <_dtoa_r+0x6fc>)
 800d126:	f7f4 faa1 	bl	800166c <__aeabi_dmul>
 800d12a:	0006      	movs	r6, r0
 800d12c:	000f      	movs	r7, r1
 800d12e:	e7b2      	b.n	800d096 <_dtoa_r+0x5b2>
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	9a06      	ldr	r2, [sp, #24]
 800d134:	930a      	str	r3, [sp, #40]	; 0x28
 800d136:	9b07      	ldr	r3, [sp, #28]
 800d138:	9c08      	ldr	r4, [sp, #32]
 800d13a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d13c:	3b01      	subs	r3, #1
 800d13e:	189b      	adds	r3, r3, r2
 800d140:	930b      	str	r3, [sp, #44]	; 0x2c
 800d142:	0032      	movs	r2, r6
 800d144:	003b      	movs	r3, r7
 800d146:	0020      	movs	r0, r4
 800d148:	0029      	movs	r1, r5
 800d14a:	f7f3 fe95 	bl	8000e78 <__aeabi_ddiv>
 800d14e:	f7f5 f8ef 	bl	8002330 <__aeabi_d2iz>
 800d152:	9007      	str	r0, [sp, #28]
 800d154:	f7f5 f922 	bl	800239c <__aeabi_i2d>
 800d158:	0032      	movs	r2, r6
 800d15a:	003b      	movs	r3, r7
 800d15c:	f7f4 fa86 	bl	800166c <__aeabi_dmul>
 800d160:	0002      	movs	r2, r0
 800d162:	000b      	movs	r3, r1
 800d164:	0020      	movs	r0, r4
 800d166:	0029      	movs	r1, r5
 800d168:	f7f4 fd42 	bl	8001bf0 <__aeabi_dsub>
 800d16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d16e:	001a      	movs	r2, r3
 800d170:	3201      	adds	r2, #1
 800d172:	920a      	str	r2, [sp, #40]	; 0x28
 800d174:	9208      	str	r2, [sp, #32]
 800d176:	9a07      	ldr	r2, [sp, #28]
 800d178:	3230      	adds	r2, #48	; 0x30
 800d17a:	701a      	strb	r2, [r3, #0]
 800d17c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d17e:	429a      	cmp	r2, r3
 800d180:	d14f      	bne.n	800d222 <_dtoa_r+0x73e>
 800d182:	0002      	movs	r2, r0
 800d184:	000b      	movs	r3, r1
 800d186:	f7f3 fb17 	bl	80007b8 <__aeabi_dadd>
 800d18a:	0032      	movs	r2, r6
 800d18c:	003b      	movs	r3, r7
 800d18e:	0004      	movs	r4, r0
 800d190:	000d      	movs	r5, r1
 800d192:	f7f3 f973 	bl	800047c <__aeabi_dcmpgt>
 800d196:	2800      	cmp	r0, #0
 800d198:	d12e      	bne.n	800d1f8 <_dtoa_r+0x714>
 800d19a:	0032      	movs	r2, r6
 800d19c:	003b      	movs	r3, r7
 800d19e:	0020      	movs	r0, r4
 800d1a0:	0029      	movs	r1, r5
 800d1a2:	f7f3 f951 	bl	8000448 <__aeabi_dcmpeq>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d002      	beq.n	800d1b0 <_dtoa_r+0x6cc>
 800d1aa:	9b07      	ldr	r3, [sp, #28]
 800d1ac:	07de      	lsls	r6, r3, #31
 800d1ae:	d423      	bmi.n	800d1f8 <_dtoa_r+0x714>
 800d1b0:	9905      	ldr	r1, [sp, #20]
 800d1b2:	9804      	ldr	r0, [sp, #16]
 800d1b4:	f7fc f8fe 	bl	80093b4 <_Bfree>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	9a08      	ldr	r2, [sp, #32]
 800d1bc:	7013      	strb	r3, [r2, #0]
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d100      	bne.n	800d1ce <_dtoa_r+0x6ea>
 800d1cc:	e4bd      	b.n	800cb4a <_dtoa_r+0x66>
 800d1ce:	9a08      	ldr	r2, [sp, #32]
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	e4ba      	b.n	800cb4a <_dtoa_r+0x66>
 800d1d4:	0800f740 	.word	0x0800f740
 800d1d8:	0800f718 	.word	0x0800f718
 800d1dc:	3ff00000 	.word	0x3ff00000
 800d1e0:	40240000 	.word	0x40240000
 800d1e4:	401c0000 	.word	0x401c0000
 800d1e8:	fcc00000 	.word	0xfcc00000
 800d1ec:	40140000 	.word	0x40140000
 800d1f0:	7cc00000 	.word	0x7cc00000
 800d1f4:	3fe00000 	.word	0x3fe00000
 800d1f8:	9b03      	ldr	r3, [sp, #12]
 800d1fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d1fc:	9b08      	ldr	r3, [sp, #32]
 800d1fe:	9308      	str	r3, [sp, #32]
 800d200:	3b01      	subs	r3, #1
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	2a39      	cmp	r2, #57	; 0x39
 800d206:	d108      	bne.n	800d21a <_dtoa_r+0x736>
 800d208:	9a06      	ldr	r2, [sp, #24]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d1f7      	bne.n	800d1fe <_dtoa_r+0x71a>
 800d20e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d210:	9906      	ldr	r1, [sp, #24]
 800d212:	3201      	adds	r2, #1
 800d214:	920e      	str	r2, [sp, #56]	; 0x38
 800d216:	2230      	movs	r2, #48	; 0x30
 800d218:	700a      	strb	r2, [r1, #0]
 800d21a:	781a      	ldrb	r2, [r3, #0]
 800d21c:	3201      	adds	r2, #1
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e77c      	b.n	800d11c <_dtoa_r+0x638>
 800d222:	2200      	movs	r2, #0
 800d224:	4ba9      	ldr	r3, [pc, #676]	; (800d4cc <_dtoa_r+0x9e8>)
 800d226:	f7f4 fa21 	bl	800166c <__aeabi_dmul>
 800d22a:	2200      	movs	r2, #0
 800d22c:	2300      	movs	r3, #0
 800d22e:	0004      	movs	r4, r0
 800d230:	000d      	movs	r5, r1
 800d232:	f7f3 f909 	bl	8000448 <__aeabi_dcmpeq>
 800d236:	2800      	cmp	r0, #0
 800d238:	d100      	bne.n	800d23c <_dtoa_r+0x758>
 800d23a:	e782      	b.n	800d142 <_dtoa_r+0x65e>
 800d23c:	e7b8      	b.n	800d1b0 <_dtoa_r+0x6cc>
 800d23e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d240:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d242:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d244:	2f00      	cmp	r7, #0
 800d246:	d012      	beq.n	800d26e <_dtoa_r+0x78a>
 800d248:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d24a:	2a01      	cmp	r2, #1
 800d24c:	dc6e      	bgt.n	800d32c <_dtoa_r+0x848>
 800d24e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d250:	2a00      	cmp	r2, #0
 800d252:	d065      	beq.n	800d320 <_dtoa_r+0x83c>
 800d254:	4a9e      	ldr	r2, [pc, #632]	; (800d4d0 <_dtoa_r+0x9ec>)
 800d256:	189b      	adds	r3, r3, r2
 800d258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d25a:	2101      	movs	r1, #1
 800d25c:	18d2      	adds	r2, r2, r3
 800d25e:	920a      	str	r2, [sp, #40]	; 0x28
 800d260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d262:	9804      	ldr	r0, [sp, #16]
 800d264:	18d3      	adds	r3, r2, r3
 800d266:	930c      	str	r3, [sp, #48]	; 0x30
 800d268:	f7fc f986 	bl	8009578 <__i2b>
 800d26c:	0007      	movs	r7, r0
 800d26e:	2c00      	cmp	r4, #0
 800d270:	d00e      	beq.n	800d290 <_dtoa_r+0x7ac>
 800d272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d274:	2b00      	cmp	r3, #0
 800d276:	dd0b      	ble.n	800d290 <_dtoa_r+0x7ac>
 800d278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d27a:	0023      	movs	r3, r4
 800d27c:	4294      	cmp	r4, r2
 800d27e:	dd00      	ble.n	800d282 <_dtoa_r+0x79e>
 800d280:	0013      	movs	r3, r2
 800d282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d284:	1ae4      	subs	r4, r4, r3
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	920a      	str	r2, [sp, #40]	; 0x28
 800d28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	930c      	str	r3, [sp, #48]	; 0x30
 800d290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01e      	beq.n	800d2d4 <_dtoa_r+0x7f0>
 800d296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d05c      	beq.n	800d356 <_dtoa_r+0x872>
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	dd10      	ble.n	800d2c2 <_dtoa_r+0x7de>
 800d2a0:	0039      	movs	r1, r7
 800d2a2:	002a      	movs	r2, r5
 800d2a4:	9804      	ldr	r0, [sp, #16]
 800d2a6:	f7fc fa2f 	bl	8009708 <__pow5mult>
 800d2aa:	9a05      	ldr	r2, [sp, #20]
 800d2ac:	0001      	movs	r1, r0
 800d2ae:	0007      	movs	r7, r0
 800d2b0:	9804      	ldr	r0, [sp, #16]
 800d2b2:	f7fc f979 	bl	80095a8 <__multiply>
 800d2b6:	0006      	movs	r6, r0
 800d2b8:	9905      	ldr	r1, [sp, #20]
 800d2ba:	9804      	ldr	r0, [sp, #16]
 800d2bc:	f7fc f87a 	bl	80093b4 <_Bfree>
 800d2c0:	9605      	str	r6, [sp, #20]
 800d2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c4:	1b5a      	subs	r2, r3, r5
 800d2c6:	42ab      	cmp	r3, r5
 800d2c8:	d004      	beq.n	800d2d4 <_dtoa_r+0x7f0>
 800d2ca:	9905      	ldr	r1, [sp, #20]
 800d2cc:	9804      	ldr	r0, [sp, #16]
 800d2ce:	f7fc fa1b 	bl	8009708 <__pow5mult>
 800d2d2:	9005      	str	r0, [sp, #20]
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	9804      	ldr	r0, [sp, #16]
 800d2d8:	f7fc f94e 	bl	8009578 <__i2b>
 800d2dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2de:	0006      	movs	r6, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dd3a      	ble.n	800d35a <_dtoa_r+0x876>
 800d2e4:	001a      	movs	r2, r3
 800d2e6:	0001      	movs	r1, r0
 800d2e8:	9804      	ldr	r0, [sp, #16]
 800d2ea:	f7fc fa0d 	bl	8009708 <__pow5mult>
 800d2ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2f0:	0006      	movs	r6, r0
 800d2f2:	2500      	movs	r5, #0
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	dc38      	bgt.n	800d36a <_dtoa_r+0x886>
 800d2f8:	2500      	movs	r5, #0
 800d2fa:	9b08      	ldr	r3, [sp, #32]
 800d2fc:	42ab      	cmp	r3, r5
 800d2fe:	d130      	bne.n	800d362 <_dtoa_r+0x87e>
 800d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d302:	031b      	lsls	r3, r3, #12
 800d304:	42ab      	cmp	r3, r5
 800d306:	d12c      	bne.n	800d362 <_dtoa_r+0x87e>
 800d308:	4b72      	ldr	r3, [pc, #456]	; (800d4d4 <_dtoa_r+0x9f0>)
 800d30a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d30c:	4213      	tst	r3, r2
 800d30e:	d028      	beq.n	800d362 <_dtoa_r+0x87e>
 800d310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d312:	3501      	adds	r5, #1
 800d314:	3301      	adds	r3, #1
 800d316:	930a      	str	r3, [sp, #40]	; 0x28
 800d318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d31a:	3301      	adds	r3, #1
 800d31c:	930c      	str	r3, [sp, #48]	; 0x30
 800d31e:	e020      	b.n	800d362 <_dtoa_r+0x87e>
 800d320:	2336      	movs	r3, #54	; 0x36
 800d322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d324:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d326:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d328:	1a9b      	subs	r3, r3, r2
 800d32a:	e795      	b.n	800d258 <_dtoa_r+0x774>
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	1e5d      	subs	r5, r3, #1
 800d330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d332:	42ab      	cmp	r3, r5
 800d334:	db07      	blt.n	800d346 <_dtoa_r+0x862>
 800d336:	1b5d      	subs	r5, r3, r5
 800d338:	9b07      	ldr	r3, [sp, #28]
 800d33a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	da8b      	bge.n	800d258 <_dtoa_r+0x774>
 800d340:	1ae4      	subs	r4, r4, r3
 800d342:	2300      	movs	r3, #0
 800d344:	e788      	b.n	800d258 <_dtoa_r+0x774>
 800d346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d34a:	1aeb      	subs	r3, r5, r3
 800d34c:	18d3      	adds	r3, r2, r3
 800d34e:	950d      	str	r5, [sp, #52]	; 0x34
 800d350:	9313      	str	r3, [sp, #76]	; 0x4c
 800d352:	2500      	movs	r5, #0
 800d354:	e7f0      	b.n	800d338 <_dtoa_r+0x854>
 800d356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d358:	e7b7      	b.n	800d2ca <_dtoa_r+0x7e6>
 800d35a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d35c:	2500      	movs	r5, #0
 800d35e:	2b01      	cmp	r3, #1
 800d360:	ddca      	ble.n	800d2f8 <_dtoa_r+0x814>
 800d362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d364:	2001      	movs	r0, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d008      	beq.n	800d37c <_dtoa_r+0x898>
 800d36a:	6933      	ldr	r3, [r6, #16]
 800d36c:	3303      	adds	r3, #3
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	18f3      	adds	r3, r6, r3
 800d372:	6858      	ldr	r0, [r3, #4]
 800d374:	f7fc f8b8 	bl	80094e8 <__hi0bits>
 800d378:	2320      	movs	r3, #32
 800d37a:	1a18      	subs	r0, r3, r0
 800d37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d37e:	1818      	adds	r0, r3, r0
 800d380:	0002      	movs	r2, r0
 800d382:	231f      	movs	r3, #31
 800d384:	401a      	ands	r2, r3
 800d386:	4218      	tst	r0, r3
 800d388:	d047      	beq.n	800d41a <_dtoa_r+0x936>
 800d38a:	3301      	adds	r3, #1
 800d38c:	1a9b      	subs	r3, r3, r2
 800d38e:	2b04      	cmp	r3, #4
 800d390:	dd3f      	ble.n	800d412 <_dtoa_r+0x92e>
 800d392:	231c      	movs	r3, #28
 800d394:	1a9b      	subs	r3, r3, r2
 800d396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d398:	18e4      	adds	r4, r4, r3
 800d39a:	18d2      	adds	r2, r2, r3
 800d39c:	920a      	str	r2, [sp, #40]	; 0x28
 800d39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3a0:	18d3      	adds	r3, r2, r3
 800d3a2:	930c      	str	r3, [sp, #48]	; 0x30
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dd05      	ble.n	800d3b6 <_dtoa_r+0x8d2>
 800d3aa:	001a      	movs	r2, r3
 800d3ac:	9905      	ldr	r1, [sp, #20]
 800d3ae:	9804      	ldr	r0, [sp, #16]
 800d3b0:	f7fc f9ec 	bl	800978c <__lshift>
 800d3b4:	9005      	str	r0, [sp, #20]
 800d3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dd05      	ble.n	800d3c8 <_dtoa_r+0x8e4>
 800d3bc:	0031      	movs	r1, r6
 800d3be:	001a      	movs	r2, r3
 800d3c0:	9804      	ldr	r0, [sp, #16]
 800d3c2:	f7fc f9e3 	bl	800978c <__lshift>
 800d3c6:	0006      	movs	r6, r0
 800d3c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d027      	beq.n	800d41e <_dtoa_r+0x93a>
 800d3ce:	0031      	movs	r1, r6
 800d3d0:	9805      	ldr	r0, [sp, #20]
 800d3d2:	f7fc fa49 	bl	8009868 <__mcmp>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	da21      	bge.n	800d41e <_dtoa_r+0x93a>
 800d3da:	9b03      	ldr	r3, [sp, #12]
 800d3dc:	220a      	movs	r2, #10
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	9303      	str	r3, [sp, #12]
 800d3e2:	9905      	ldr	r1, [sp, #20]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9804      	ldr	r0, [sp, #16]
 800d3e8:	f7fb ffee 	bl	80093c8 <__multadd>
 800d3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ee:	9005      	str	r0, [sp, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d100      	bne.n	800d3f6 <_dtoa_r+0x912>
 800d3f4:	e15d      	b.n	800d6b2 <_dtoa_r+0xbce>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	0039      	movs	r1, r7
 800d3fa:	220a      	movs	r2, #10
 800d3fc:	9804      	ldr	r0, [sp, #16]
 800d3fe:	f7fb ffe3 	bl	80093c8 <__multadd>
 800d402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d404:	0007      	movs	r7, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	dc49      	bgt.n	800d49e <_dtoa_r+0x9ba>
 800d40a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	dc0e      	bgt.n	800d42e <_dtoa_r+0x94a>
 800d410:	e045      	b.n	800d49e <_dtoa_r+0x9ba>
 800d412:	2b04      	cmp	r3, #4
 800d414:	d0c6      	beq.n	800d3a4 <_dtoa_r+0x8c0>
 800d416:	331c      	adds	r3, #28
 800d418:	e7bd      	b.n	800d396 <_dtoa_r+0x8b2>
 800d41a:	0013      	movs	r3, r2
 800d41c:	e7fb      	b.n	800d416 <_dtoa_r+0x932>
 800d41e:	9b07      	ldr	r3, [sp, #28]
 800d420:	2b00      	cmp	r3, #0
 800d422:	dc36      	bgt.n	800d492 <_dtoa_r+0x9ae>
 800d424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d426:	2b02      	cmp	r3, #2
 800d428:	dd33      	ble.n	800d492 <_dtoa_r+0x9ae>
 800d42a:	9b07      	ldr	r3, [sp, #28]
 800d42c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10c      	bne.n	800d44e <_dtoa_r+0x96a>
 800d434:	0031      	movs	r1, r6
 800d436:	2205      	movs	r2, #5
 800d438:	9804      	ldr	r0, [sp, #16]
 800d43a:	f7fb ffc5 	bl	80093c8 <__multadd>
 800d43e:	0006      	movs	r6, r0
 800d440:	0001      	movs	r1, r0
 800d442:	9805      	ldr	r0, [sp, #20]
 800d444:	f7fc fa10 	bl	8009868 <__mcmp>
 800d448:	2800      	cmp	r0, #0
 800d44a:	dd00      	ble.n	800d44e <_dtoa_r+0x96a>
 800d44c:	e59f      	b.n	800cf8e <_dtoa_r+0x4aa>
 800d44e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d450:	43db      	mvns	r3, r3
 800d452:	9303      	str	r3, [sp, #12]
 800d454:	9b06      	ldr	r3, [sp, #24]
 800d456:	9308      	str	r3, [sp, #32]
 800d458:	2500      	movs	r5, #0
 800d45a:	0031      	movs	r1, r6
 800d45c:	9804      	ldr	r0, [sp, #16]
 800d45e:	f7fb ffa9 	bl	80093b4 <_Bfree>
 800d462:	2f00      	cmp	r7, #0
 800d464:	d100      	bne.n	800d468 <_dtoa_r+0x984>
 800d466:	e6a3      	b.n	800d1b0 <_dtoa_r+0x6cc>
 800d468:	2d00      	cmp	r5, #0
 800d46a:	d005      	beq.n	800d478 <_dtoa_r+0x994>
 800d46c:	42bd      	cmp	r5, r7
 800d46e:	d003      	beq.n	800d478 <_dtoa_r+0x994>
 800d470:	0029      	movs	r1, r5
 800d472:	9804      	ldr	r0, [sp, #16]
 800d474:	f7fb ff9e 	bl	80093b4 <_Bfree>
 800d478:	0039      	movs	r1, r7
 800d47a:	9804      	ldr	r0, [sp, #16]
 800d47c:	f7fb ff9a 	bl	80093b4 <_Bfree>
 800d480:	e696      	b.n	800d1b0 <_dtoa_r+0x6cc>
 800d482:	2600      	movs	r6, #0
 800d484:	0037      	movs	r7, r6
 800d486:	e7e2      	b.n	800d44e <_dtoa_r+0x96a>
 800d488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d48a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d48c:	9303      	str	r3, [sp, #12]
 800d48e:	0037      	movs	r7, r6
 800d490:	e57d      	b.n	800cf8e <_dtoa_r+0x4aa>
 800d492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d494:	2b00      	cmp	r3, #0
 800d496:	d100      	bne.n	800d49a <_dtoa_r+0x9b6>
 800d498:	e0c3      	b.n	800d622 <_dtoa_r+0xb3e>
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d49e:	2c00      	cmp	r4, #0
 800d4a0:	dd05      	ble.n	800d4ae <_dtoa_r+0x9ca>
 800d4a2:	0039      	movs	r1, r7
 800d4a4:	0022      	movs	r2, r4
 800d4a6:	9804      	ldr	r0, [sp, #16]
 800d4a8:	f7fc f970 	bl	800978c <__lshift>
 800d4ac:	0007      	movs	r7, r0
 800d4ae:	0038      	movs	r0, r7
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	d024      	beq.n	800d4fe <_dtoa_r+0xa1a>
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	9804      	ldr	r0, [sp, #16]
 800d4b8:	f7fb ff54 	bl	8009364 <_Balloc>
 800d4bc:	1e04      	subs	r4, r0, #0
 800d4be:	d111      	bne.n	800d4e4 <_dtoa_r+0xa00>
 800d4c0:	0022      	movs	r2, r4
 800d4c2:	4b05      	ldr	r3, [pc, #20]	; (800d4d8 <_dtoa_r+0x9f4>)
 800d4c4:	4805      	ldr	r0, [pc, #20]	; (800d4dc <_dtoa_r+0x9f8>)
 800d4c6:	4906      	ldr	r1, [pc, #24]	; (800d4e0 <_dtoa_r+0x9fc>)
 800d4c8:	e43c      	b.n	800cd44 <_dtoa_r+0x260>
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	40240000 	.word	0x40240000
 800d4d0:	00000433 	.word	0x00000433
 800d4d4:	7ff00000 	.word	0x7ff00000
 800d4d8:	0800f649 	.word	0x0800f649
 800d4dc:	0800f8d9 	.word	0x0800f8d9
 800d4e0:	000002ef 	.word	0x000002ef
 800d4e4:	0039      	movs	r1, r7
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	310c      	adds	r1, #12
 800d4ea:	3202      	adds	r2, #2
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	300c      	adds	r0, #12
 800d4f0:	f7fb fa9d 	bl	8008a2e <memcpy>
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	0021      	movs	r1, r4
 800d4f8:	9804      	ldr	r0, [sp, #16]
 800d4fa:	f7fc f947 	bl	800978c <__lshift>
 800d4fe:	9b06      	ldr	r3, [sp, #24]
 800d500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d502:	9307      	str	r3, [sp, #28]
 800d504:	3b01      	subs	r3, #1
 800d506:	189b      	adds	r3, r3, r2
 800d508:	2201      	movs	r2, #1
 800d50a:	003d      	movs	r5, r7
 800d50c:	0007      	movs	r7, r0
 800d50e:	930e      	str	r3, [sp, #56]	; 0x38
 800d510:	9b08      	ldr	r3, [sp, #32]
 800d512:	4013      	ands	r3, r2
 800d514:	930d      	str	r3, [sp, #52]	; 0x34
 800d516:	0031      	movs	r1, r6
 800d518:	9805      	ldr	r0, [sp, #20]
 800d51a:	f7ff fa53 	bl	800c9c4 <quorem>
 800d51e:	0029      	movs	r1, r5
 800d520:	0004      	movs	r4, r0
 800d522:	900b      	str	r0, [sp, #44]	; 0x2c
 800d524:	9805      	ldr	r0, [sp, #20]
 800d526:	f7fc f99f 	bl	8009868 <__mcmp>
 800d52a:	003a      	movs	r2, r7
 800d52c:	900c      	str	r0, [sp, #48]	; 0x30
 800d52e:	0031      	movs	r1, r6
 800d530:	9804      	ldr	r0, [sp, #16]
 800d532:	f7fc f9b5 	bl	80098a0 <__mdiff>
 800d536:	2201      	movs	r2, #1
 800d538:	68c3      	ldr	r3, [r0, #12]
 800d53a:	3430      	adds	r4, #48	; 0x30
 800d53c:	9008      	str	r0, [sp, #32]
 800d53e:	920a      	str	r2, [sp, #40]	; 0x28
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <_dtoa_r+0xa6a>
 800d544:	0001      	movs	r1, r0
 800d546:	9805      	ldr	r0, [sp, #20]
 800d548:	f7fc f98e 	bl	8009868 <__mcmp>
 800d54c:	900a      	str	r0, [sp, #40]	; 0x28
 800d54e:	9908      	ldr	r1, [sp, #32]
 800d550:	9804      	ldr	r0, [sp, #16]
 800d552:	f7fb ff2f 	bl	80093b4 <_Bfree>
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d55a:	3301      	adds	r3, #1
 800d55c:	9308      	str	r3, [sp, #32]
 800d55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d560:	4313      	orrs	r3, r2
 800d562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d564:	4313      	orrs	r3, r2
 800d566:	d109      	bne.n	800d57c <_dtoa_r+0xa98>
 800d568:	2c39      	cmp	r4, #57	; 0x39
 800d56a:	d022      	beq.n	800d5b2 <_dtoa_r+0xace>
 800d56c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d56e:	2b00      	cmp	r3, #0
 800d570:	dd01      	ble.n	800d576 <_dtoa_r+0xa92>
 800d572:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d574:	3431      	adds	r4, #49	; 0x31
 800d576:	9b07      	ldr	r3, [sp, #28]
 800d578:	701c      	strb	r4, [r3, #0]
 800d57a:	e76e      	b.n	800d45a <_dtoa_r+0x976>
 800d57c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d57e:	2b00      	cmp	r3, #0
 800d580:	db04      	blt.n	800d58c <_dtoa_r+0xaa8>
 800d582:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d584:	4313      	orrs	r3, r2
 800d586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d588:	4313      	orrs	r3, r2
 800d58a:	d11e      	bne.n	800d5ca <_dtoa_r+0xae6>
 800d58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	ddf1      	ble.n	800d576 <_dtoa_r+0xa92>
 800d592:	9905      	ldr	r1, [sp, #20]
 800d594:	2201      	movs	r2, #1
 800d596:	9804      	ldr	r0, [sp, #16]
 800d598:	f7fc f8f8 	bl	800978c <__lshift>
 800d59c:	0031      	movs	r1, r6
 800d59e:	9005      	str	r0, [sp, #20]
 800d5a0:	f7fc f962 	bl	8009868 <__mcmp>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	dc02      	bgt.n	800d5ae <_dtoa_r+0xaca>
 800d5a8:	d1e5      	bne.n	800d576 <_dtoa_r+0xa92>
 800d5aa:	07e3      	lsls	r3, r4, #31
 800d5ac:	d5e3      	bpl.n	800d576 <_dtoa_r+0xa92>
 800d5ae:	2c39      	cmp	r4, #57	; 0x39
 800d5b0:	d1df      	bne.n	800d572 <_dtoa_r+0xa8e>
 800d5b2:	2339      	movs	r3, #57	; 0x39
 800d5b4:	9a07      	ldr	r2, [sp, #28]
 800d5b6:	7013      	strb	r3, [r2, #0]
 800d5b8:	9b08      	ldr	r3, [sp, #32]
 800d5ba:	9308      	str	r3, [sp, #32]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	781a      	ldrb	r2, [r3, #0]
 800d5c0:	2a39      	cmp	r2, #57	; 0x39
 800d5c2:	d063      	beq.n	800d68c <_dtoa_r+0xba8>
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e747      	b.n	800d45a <_dtoa_r+0x976>
 800d5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	dd03      	ble.n	800d5d8 <_dtoa_r+0xaf4>
 800d5d0:	2c39      	cmp	r4, #57	; 0x39
 800d5d2:	d0ee      	beq.n	800d5b2 <_dtoa_r+0xace>
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	e7ce      	b.n	800d576 <_dtoa_r+0xa92>
 800d5d8:	9b07      	ldr	r3, [sp, #28]
 800d5da:	9a07      	ldr	r2, [sp, #28]
 800d5dc:	701c      	strb	r4, [r3, #0]
 800d5de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d03e      	beq.n	800d662 <_dtoa_r+0xb7e>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	220a      	movs	r2, #10
 800d5e8:	9905      	ldr	r1, [sp, #20]
 800d5ea:	9804      	ldr	r0, [sp, #16]
 800d5ec:	f7fb feec 	bl	80093c8 <__multadd>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9005      	str	r0, [sp, #20]
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	0029      	movs	r1, r5
 800d5f8:	9804      	ldr	r0, [sp, #16]
 800d5fa:	42bd      	cmp	r5, r7
 800d5fc:	d106      	bne.n	800d60c <_dtoa_r+0xb28>
 800d5fe:	f7fb fee3 	bl	80093c8 <__multadd>
 800d602:	0005      	movs	r5, r0
 800d604:	0007      	movs	r7, r0
 800d606:	9b08      	ldr	r3, [sp, #32]
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	e784      	b.n	800d516 <_dtoa_r+0xa32>
 800d60c:	f7fb fedc 	bl	80093c8 <__multadd>
 800d610:	0039      	movs	r1, r7
 800d612:	0005      	movs	r5, r0
 800d614:	2300      	movs	r3, #0
 800d616:	220a      	movs	r2, #10
 800d618:	9804      	ldr	r0, [sp, #16]
 800d61a:	f7fb fed5 	bl	80093c8 <__multadd>
 800d61e:	0007      	movs	r7, r0
 800d620:	e7f1      	b.n	800d606 <_dtoa_r+0xb22>
 800d622:	9b07      	ldr	r3, [sp, #28]
 800d624:	930b      	str	r3, [sp, #44]	; 0x2c
 800d626:	2500      	movs	r5, #0
 800d628:	0031      	movs	r1, r6
 800d62a:	9805      	ldr	r0, [sp, #20]
 800d62c:	f7ff f9ca 	bl	800c9c4 <quorem>
 800d630:	9b06      	ldr	r3, [sp, #24]
 800d632:	3030      	adds	r0, #48	; 0x30
 800d634:	5558      	strb	r0, [r3, r5]
 800d636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d638:	3501      	adds	r5, #1
 800d63a:	0004      	movs	r4, r0
 800d63c:	42ab      	cmp	r3, r5
 800d63e:	dd07      	ble.n	800d650 <_dtoa_r+0xb6c>
 800d640:	2300      	movs	r3, #0
 800d642:	220a      	movs	r2, #10
 800d644:	9905      	ldr	r1, [sp, #20]
 800d646:	9804      	ldr	r0, [sp, #16]
 800d648:	f7fb febe 	bl	80093c8 <__multadd>
 800d64c:	9005      	str	r0, [sp, #20]
 800d64e:	e7eb      	b.n	800d628 <_dtoa_r+0xb44>
 800d650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d652:	2301      	movs	r3, #1
 800d654:	2a00      	cmp	r2, #0
 800d656:	dd00      	ble.n	800d65a <_dtoa_r+0xb76>
 800d658:	0013      	movs	r3, r2
 800d65a:	2500      	movs	r5, #0
 800d65c:	9a06      	ldr	r2, [sp, #24]
 800d65e:	18d3      	adds	r3, r2, r3
 800d660:	9308      	str	r3, [sp, #32]
 800d662:	9905      	ldr	r1, [sp, #20]
 800d664:	2201      	movs	r2, #1
 800d666:	9804      	ldr	r0, [sp, #16]
 800d668:	f7fc f890 	bl	800978c <__lshift>
 800d66c:	0031      	movs	r1, r6
 800d66e:	9005      	str	r0, [sp, #20]
 800d670:	f7fc f8fa 	bl	8009868 <__mcmp>
 800d674:	2800      	cmp	r0, #0
 800d676:	dc9f      	bgt.n	800d5b8 <_dtoa_r+0xad4>
 800d678:	d101      	bne.n	800d67e <_dtoa_r+0xb9a>
 800d67a:	07e4      	lsls	r4, r4, #31
 800d67c:	d49c      	bmi.n	800d5b8 <_dtoa_r+0xad4>
 800d67e:	9b08      	ldr	r3, [sp, #32]
 800d680:	9308      	str	r3, [sp, #32]
 800d682:	3b01      	subs	r3, #1
 800d684:	781a      	ldrb	r2, [r3, #0]
 800d686:	2a30      	cmp	r2, #48	; 0x30
 800d688:	d0fa      	beq.n	800d680 <_dtoa_r+0xb9c>
 800d68a:	e6e6      	b.n	800d45a <_dtoa_r+0x976>
 800d68c:	9a06      	ldr	r2, [sp, #24]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d193      	bne.n	800d5ba <_dtoa_r+0xad6>
 800d692:	9b03      	ldr	r3, [sp, #12]
 800d694:	3301      	adds	r3, #1
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	2331      	movs	r3, #49	; 0x31
 800d69a:	7013      	strb	r3, [r2, #0]
 800d69c:	e6dd      	b.n	800d45a <_dtoa_r+0x976>
 800d69e:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <_dtoa_r+0xbe0>)
 800d6a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d6a2:	9306      	str	r3, [sp, #24]
 800d6a4:	4b08      	ldr	r3, [pc, #32]	; (800d6c8 <_dtoa_r+0xbe4>)
 800d6a6:	2a00      	cmp	r2, #0
 800d6a8:	d001      	beq.n	800d6ae <_dtoa_r+0xbca>
 800d6aa:	f7ff fa4c 	bl	800cb46 <_dtoa_r+0x62>
 800d6ae:	f7ff fa4c 	bl	800cb4a <_dtoa_r+0x66>
 800d6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dcb6      	bgt.n	800d626 <_dtoa_r+0xb42>
 800d6b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	dd00      	ble.n	800d6c0 <_dtoa_r+0xbdc>
 800d6be:	e6b6      	b.n	800d42e <_dtoa_r+0x94a>
 800d6c0:	e7b1      	b.n	800d626 <_dtoa_r+0xb42>
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	0800f8cc 	.word	0x0800f8cc
 800d6c8:	0800f8d4 	.word	0x0800f8d4

0800d6cc <realloc>:
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	4b03      	ldr	r3, [pc, #12]	; (800d6dc <realloc+0x10>)
 800d6d0:	000a      	movs	r2, r1
 800d6d2:	0001      	movs	r1, r0
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	f000 f803 	bl	800d6e0 <_realloc_r>
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	200006e0 	.word	0x200006e0

0800d6e0 <_realloc_r>:
 800d6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	1e0c      	subs	r4, r1, #0
 800d6e6:	9001      	str	r0, [sp, #4]
 800d6e8:	9205      	str	r2, [sp, #20]
 800d6ea:	d106      	bne.n	800d6fa <_realloc_r+0x1a>
 800d6ec:	0011      	movs	r1, r2
 800d6ee:	f7f9 fe39 	bl	8007364 <_malloc_r>
 800d6f2:	0007      	movs	r7, r0
 800d6f4:	0038      	movs	r0, r7
 800d6f6:	b007      	add	sp, #28
 800d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fa:	9801      	ldr	r0, [sp, #4]
 800d6fc:	f7fa f846 	bl	800778c <__malloc_lock>
 800d700:	0023      	movs	r3, r4
 800d702:	3b08      	subs	r3, #8
 800d704:	685f      	ldr	r7, [r3, #4]
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	9b05      	ldr	r3, [sp, #20]
 800d70a:	330b      	adds	r3, #11
 800d70c:	2b16      	cmp	r3, #22
 800d70e:	d908      	bls.n	800d722 <_realloc_r+0x42>
 800d710:	2207      	movs	r2, #7
 800d712:	4393      	bics	r3, r2
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	d506      	bpl.n	800d726 <_realloc_r+0x46>
 800d718:	230c      	movs	r3, #12
 800d71a:	9a01      	ldr	r2, [sp, #4]
 800d71c:	2700      	movs	r7, #0
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	e7e8      	b.n	800d6f4 <_realloc_r+0x14>
 800d722:	2310      	movs	r3, #16
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	9b00      	ldr	r3, [sp, #0]
 800d728:	9a05      	ldr	r2, [sp, #20]
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d3f4      	bcc.n	800d718 <_realloc_r+0x38>
 800d72e:	9b04      	ldr	r3, [sp, #16]
 800d730:	003a      	movs	r2, r7
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	2303      	movs	r3, #3
 800d736:	439a      	bics	r2, r3
 800d738:	9b00      	ldr	r3, [sp, #0]
 800d73a:	9203      	str	r2, [sp, #12]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	dc00      	bgt.n	800d742 <_realloc_r+0x62>
 800d740:	e169      	b.n	800da16 <_realloc_r+0x336>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	48b8      	ldr	r0, [pc, #736]	; (800da28 <_realloc_r+0x348>)
 800d746:	189b      	adds	r3, r3, r2
 800d748:	6882      	ldr	r2, [r0, #8]
 800d74a:	4694      	mov	ip, r2
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	459c      	cmp	ip, r3
 800d750:	d006      	beq.n	800d760 <_realloc_r+0x80>
 800d752:	2501      	movs	r5, #1
 800d754:	0011      	movs	r1, r2
 800d756:	43a9      	bics	r1, r5
 800d758:	1859      	adds	r1, r3, r1
 800d75a:	6849      	ldr	r1, [r1, #4]
 800d75c:	4229      	tst	r1, r5
 800d75e:	d144      	bne.n	800d7ea <_realloc_r+0x10a>
 800d760:	2103      	movs	r1, #3
 800d762:	438a      	bics	r2, r1
 800d764:	9903      	ldr	r1, [sp, #12]
 800d766:	188e      	adds	r6, r1, r2
 800d768:	9900      	ldr	r1, [sp, #0]
 800d76a:	459c      	cmp	ip, r3
 800d76c:	d117      	bne.n	800d79e <_realloc_r+0xbe>
 800d76e:	3110      	adds	r1, #16
 800d770:	42b1      	cmp	r1, r6
 800d772:	dc3c      	bgt.n	800d7ee <_realloc_r+0x10e>
 800d774:	9a00      	ldr	r2, [sp, #0]
 800d776:	2101      	movs	r1, #1
 800d778:	4694      	mov	ip, r2
 800d77a:	1ab6      	subs	r6, r6, r2
 800d77c:	0022      	movs	r2, r4
 800d77e:	9b04      	ldr	r3, [sp, #16]
 800d780:	430e      	orrs	r6, r1
 800d782:	4463      	add	r3, ip
 800d784:	6083      	str	r3, [r0, #8]
 800d786:	3a08      	subs	r2, #8
 800d788:	605e      	str	r6, [r3, #4]
 800d78a:	6853      	ldr	r3, [r2, #4]
 800d78c:	9801      	ldr	r0, [sp, #4]
 800d78e:	400b      	ands	r3, r1
 800d790:	4661      	mov	r1, ip
 800d792:	430b      	orrs	r3, r1
 800d794:	6053      	str	r3, [r2, #4]
 800d796:	f7fa f801 	bl	800779c <__malloc_unlock>
 800d79a:	0027      	movs	r7, r4
 800d79c:	e7aa      	b.n	800d6f4 <_realloc_r+0x14>
 800d79e:	42b1      	cmp	r1, r6
 800d7a0:	dc25      	bgt.n	800d7ee <_realloc_r+0x10e>
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	60da      	str	r2, [r3, #12]
 800d7a8:	6093      	str	r3, [r2, #8]
 800d7aa:	9b00      	ldr	r3, [sp, #0]
 800d7ac:	9a02      	ldr	r2, [sp, #8]
 800d7ae:	1af4      	subs	r4, r6, r3
 800d7b0:	9b02      	ldr	r3, [sp, #8]
 800d7b2:	1992      	adds	r2, r2, r6
 800d7b4:	6858      	ldr	r0, [r3, #4]
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4018      	ands	r0, r3
 800d7ba:	2c0f      	cmp	r4, #15
 800d7bc:	d800      	bhi.n	800d7c0 <_realloc_r+0xe0>
 800d7be:	e12c      	b.n	800da1a <_realloc_r+0x33a>
 800d7c0:	9d00      	ldr	r5, [sp, #0]
 800d7c2:	9902      	ldr	r1, [sp, #8]
 800d7c4:	4328      	orrs	r0, r5
 800d7c6:	1949      	adds	r1, r1, r5
 800d7c8:	9d02      	ldr	r5, [sp, #8]
 800d7ca:	431c      	orrs	r4, r3
 800d7cc:	6068      	str	r0, [r5, #4]
 800d7ce:	604c      	str	r4, [r1, #4]
 800d7d0:	6850      	ldr	r0, [r2, #4]
 800d7d2:	3108      	adds	r1, #8
 800d7d4:	4303      	orrs	r3, r0
 800d7d6:	6053      	str	r3, [r2, #4]
 800d7d8:	9801      	ldr	r0, [sp, #4]
 800d7da:	f7fb f9a3 	bl	8008b24 <_free_r>
 800d7de:	9801      	ldr	r0, [sp, #4]
 800d7e0:	f7f9 ffdc 	bl	800779c <__malloc_unlock>
 800d7e4:	9f02      	ldr	r7, [sp, #8]
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	e784      	b.n	800d6f4 <_realloc_r+0x14>
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	0013      	movs	r3, r2
 800d7ee:	07ff      	lsls	r7, r7, #31
 800d7f0:	d500      	bpl.n	800d7f4 <_realloc_r+0x114>
 800d7f2:	e0c6      	b.n	800d982 <_realloc_r+0x2a2>
 800d7f4:	0021      	movs	r1, r4
 800d7f6:	2003      	movs	r0, #3
 800d7f8:	3908      	subs	r1, #8
 800d7fa:	680d      	ldr	r5, [r1, #0]
 800d7fc:	9904      	ldr	r1, [sp, #16]
 800d7fe:	1b4d      	subs	r5, r1, r5
 800d800:	6869      	ldr	r1, [r5, #4]
 800d802:	4381      	bics	r1, r0
 800d804:	9803      	ldr	r0, [sp, #12]
 800d806:	180f      	adds	r7, r1, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d100      	bne.n	800d80e <_realloc_r+0x12e>
 800d80c:	e084      	b.n	800d918 <_realloc_r+0x238>
 800d80e:	19d6      	adds	r6, r2, r7
 800d810:	459c      	cmp	ip, r3
 800d812:	d148      	bne.n	800d8a6 <_realloc_r+0x1c6>
 800d814:	9b00      	ldr	r3, [sp, #0]
 800d816:	3310      	adds	r3, #16
 800d818:	42b3      	cmp	r3, r6
 800d81a:	dc7d      	bgt.n	800d918 <_realloc_r+0x238>
 800d81c:	68aa      	ldr	r2, [r5, #8]
 800d81e:	68eb      	ldr	r3, [r5, #12]
 800d820:	002f      	movs	r7, r5
 800d822:	60d3      	str	r3, [r2, #12]
 800d824:	609a      	str	r2, [r3, #8]
 800d826:	0002      	movs	r2, r0
 800d828:	3a04      	subs	r2, #4
 800d82a:	3708      	adds	r7, #8
 800d82c:	2a24      	cmp	r2, #36	; 0x24
 800d82e:	d835      	bhi.n	800d89c <_realloc_r+0x1bc>
 800d830:	003b      	movs	r3, r7
 800d832:	2a13      	cmp	r2, #19
 800d834:	d908      	bls.n	800d848 <_realloc_r+0x168>
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	60ab      	str	r3, [r5, #8]
 800d83a:	6863      	ldr	r3, [r4, #4]
 800d83c:	60eb      	str	r3, [r5, #12]
 800d83e:	2a1b      	cmp	r2, #27
 800d840:	d81a      	bhi.n	800d878 <_realloc_r+0x198>
 800d842:	002b      	movs	r3, r5
 800d844:	3408      	adds	r4, #8
 800d846:	3310      	adds	r3, #16
 800d848:	6822      	ldr	r2, [r4, #0]
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	6862      	ldr	r2, [r4, #4]
 800d84e:	605a      	str	r2, [r3, #4]
 800d850:	68a2      	ldr	r2, [r4, #8]
 800d852:	609a      	str	r2, [r3, #8]
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	4a74      	ldr	r2, [pc, #464]	; (800da28 <_realloc_r+0x348>)
 800d858:	18eb      	adds	r3, r5, r3
 800d85a:	6093      	str	r3, [r2, #8]
 800d85c:	9a00      	ldr	r2, [sp, #0]
 800d85e:	1ab6      	subs	r6, r6, r2
 800d860:	2201      	movs	r2, #1
 800d862:	4316      	orrs	r6, r2
 800d864:	605e      	str	r6, [r3, #4]
 800d866:	686b      	ldr	r3, [r5, #4]
 800d868:	4013      	ands	r3, r2
 800d86a:	9a00      	ldr	r2, [sp, #0]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	606b      	str	r3, [r5, #4]
 800d870:	9801      	ldr	r0, [sp, #4]
 800d872:	f7f9 ff93 	bl	800779c <__malloc_unlock>
 800d876:	e73d      	b.n	800d6f4 <_realloc_r+0x14>
 800d878:	68a3      	ldr	r3, [r4, #8]
 800d87a:	612b      	str	r3, [r5, #16]
 800d87c:	68e3      	ldr	r3, [r4, #12]
 800d87e:	616b      	str	r3, [r5, #20]
 800d880:	2a24      	cmp	r2, #36	; 0x24
 800d882:	d003      	beq.n	800d88c <_realloc_r+0x1ac>
 800d884:	002b      	movs	r3, r5
 800d886:	3410      	adds	r4, #16
 800d888:	3318      	adds	r3, #24
 800d88a:	e7dd      	b.n	800d848 <_realloc_r+0x168>
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	61ab      	str	r3, [r5, #24]
 800d890:	002b      	movs	r3, r5
 800d892:	6962      	ldr	r2, [r4, #20]
 800d894:	3320      	adds	r3, #32
 800d896:	61ea      	str	r2, [r5, #28]
 800d898:	3418      	adds	r4, #24
 800d89a:	e7d5      	b.n	800d848 <_realloc_r+0x168>
 800d89c:	0021      	movs	r1, r4
 800d89e:	0038      	movs	r0, r7
 800d8a0:	f001 fbb5 	bl	800f00e <memmove>
 800d8a4:	e7d6      	b.n	800d854 <_realloc_r+0x174>
 800d8a6:	9a00      	ldr	r2, [sp, #0]
 800d8a8:	42b2      	cmp	r2, r6
 800d8aa:	dc35      	bgt.n	800d918 <_realloc_r+0x238>
 800d8ac:	0028      	movs	r0, r5
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	3008      	adds	r0, #8
 800d8b4:	60da      	str	r2, [r3, #12]
 800d8b6:	6093      	str	r3, [r2, #8]
 800d8b8:	68aa      	ldr	r2, [r5, #8]
 800d8ba:	68eb      	ldr	r3, [r5, #12]
 800d8bc:	60d3      	str	r3, [r2, #12]
 800d8be:	609a      	str	r2, [r3, #8]
 800d8c0:	9a03      	ldr	r2, [sp, #12]
 800d8c2:	3a04      	subs	r2, #4
 800d8c4:	2a24      	cmp	r2, #36	; 0x24
 800d8c6:	d823      	bhi.n	800d910 <_realloc_r+0x230>
 800d8c8:	2a13      	cmp	r2, #19
 800d8ca:	d907      	bls.n	800d8dc <_realloc_r+0x1fc>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	60ab      	str	r3, [r5, #8]
 800d8d0:	6863      	ldr	r3, [r4, #4]
 800d8d2:	60eb      	str	r3, [r5, #12]
 800d8d4:	2a1b      	cmp	r2, #27
 800d8d6:	d809      	bhi.n	800d8ec <_realloc_r+0x20c>
 800d8d8:	3408      	adds	r4, #8
 800d8da:	3008      	adds	r0, #8
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	6003      	str	r3, [r0, #0]
 800d8e0:	6863      	ldr	r3, [r4, #4]
 800d8e2:	6043      	str	r3, [r0, #4]
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	6083      	str	r3, [r0, #8]
 800d8e8:	9502      	str	r5, [sp, #8]
 800d8ea:	e75e      	b.n	800d7aa <_realloc_r+0xca>
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	612b      	str	r3, [r5, #16]
 800d8f0:	68e3      	ldr	r3, [r4, #12]
 800d8f2:	616b      	str	r3, [r5, #20]
 800d8f4:	2a24      	cmp	r2, #36	; 0x24
 800d8f6:	d003      	beq.n	800d900 <_realloc_r+0x220>
 800d8f8:	0028      	movs	r0, r5
 800d8fa:	3410      	adds	r4, #16
 800d8fc:	3018      	adds	r0, #24
 800d8fe:	e7ed      	b.n	800d8dc <_realloc_r+0x1fc>
 800d900:	0028      	movs	r0, r5
 800d902:	6923      	ldr	r3, [r4, #16]
 800d904:	3020      	adds	r0, #32
 800d906:	61ab      	str	r3, [r5, #24]
 800d908:	6963      	ldr	r3, [r4, #20]
 800d90a:	3418      	adds	r4, #24
 800d90c:	61eb      	str	r3, [r5, #28]
 800d90e:	e7e5      	b.n	800d8dc <_realloc_r+0x1fc>
 800d910:	0021      	movs	r1, r4
 800d912:	f001 fb7c 	bl	800f00e <memmove>
 800d916:	e7e7      	b.n	800d8e8 <_realloc_r+0x208>
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	42bb      	cmp	r3, r7
 800d91c:	dc31      	bgt.n	800d982 <_realloc_r+0x2a2>
 800d91e:	0028      	movs	r0, r5
 800d920:	68aa      	ldr	r2, [r5, #8]
 800d922:	68eb      	ldr	r3, [r5, #12]
 800d924:	3008      	adds	r0, #8
 800d926:	60d3      	str	r3, [r2, #12]
 800d928:	609a      	str	r2, [r3, #8]
 800d92a:	9a03      	ldr	r2, [sp, #12]
 800d92c:	3a04      	subs	r2, #4
 800d92e:	2a24      	cmp	r2, #36	; 0x24
 800d930:	d823      	bhi.n	800d97a <_realloc_r+0x29a>
 800d932:	2a13      	cmp	r2, #19
 800d934:	d907      	bls.n	800d946 <_realloc_r+0x266>
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	60ab      	str	r3, [r5, #8]
 800d93a:	6863      	ldr	r3, [r4, #4]
 800d93c:	60eb      	str	r3, [r5, #12]
 800d93e:	2a1b      	cmp	r2, #27
 800d940:	d809      	bhi.n	800d956 <_realloc_r+0x276>
 800d942:	3408      	adds	r4, #8
 800d944:	3008      	adds	r0, #8
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	6003      	str	r3, [r0, #0]
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	6043      	str	r3, [r0, #4]
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	6083      	str	r3, [r0, #8]
 800d952:	003e      	movs	r6, r7
 800d954:	e7c8      	b.n	800d8e8 <_realloc_r+0x208>
 800d956:	68a3      	ldr	r3, [r4, #8]
 800d958:	612b      	str	r3, [r5, #16]
 800d95a:	68e3      	ldr	r3, [r4, #12]
 800d95c:	616b      	str	r3, [r5, #20]
 800d95e:	2a24      	cmp	r2, #36	; 0x24
 800d960:	d003      	beq.n	800d96a <_realloc_r+0x28a>
 800d962:	0028      	movs	r0, r5
 800d964:	3410      	adds	r4, #16
 800d966:	3018      	adds	r0, #24
 800d968:	e7ed      	b.n	800d946 <_realloc_r+0x266>
 800d96a:	0028      	movs	r0, r5
 800d96c:	6923      	ldr	r3, [r4, #16]
 800d96e:	3020      	adds	r0, #32
 800d970:	61ab      	str	r3, [r5, #24]
 800d972:	6963      	ldr	r3, [r4, #20]
 800d974:	3418      	adds	r4, #24
 800d976:	61eb      	str	r3, [r5, #28]
 800d978:	e7e5      	b.n	800d946 <_realloc_r+0x266>
 800d97a:	0021      	movs	r1, r4
 800d97c:	f001 fb47 	bl	800f00e <memmove>
 800d980:	e7e7      	b.n	800d952 <_realloc_r+0x272>
 800d982:	9905      	ldr	r1, [sp, #20]
 800d984:	9801      	ldr	r0, [sp, #4]
 800d986:	f7f9 fced 	bl	8007364 <_malloc_r>
 800d98a:	1e07      	subs	r7, r0, #0
 800d98c:	d100      	bne.n	800d990 <_realloc_r+0x2b0>
 800d98e:	e76f      	b.n	800d870 <_realloc_r+0x190>
 800d990:	0023      	movs	r3, r4
 800d992:	2201      	movs	r2, #1
 800d994:	3b08      	subs	r3, #8
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4393      	bics	r3, r2
 800d99a:	9a04      	ldr	r2, [sp, #16]
 800d99c:	18d3      	adds	r3, r2, r3
 800d99e:	0002      	movs	r2, r0
 800d9a0:	3a08      	subs	r2, #8
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d105      	bne.n	800d9b2 <_realloc_r+0x2d2>
 800d9a6:	685e      	ldr	r6, [r3, #4]
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	439e      	bics	r6, r3
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	18f6      	adds	r6, r6, r3
 800d9b0:	e6fb      	b.n	800d7aa <_realloc_r+0xca>
 800d9b2:	9a03      	ldr	r2, [sp, #12]
 800d9b4:	3a04      	subs	r2, #4
 800d9b6:	2a24      	cmp	r2, #36	; 0x24
 800d9b8:	d829      	bhi.n	800da0e <_realloc_r+0x32e>
 800d9ba:	0003      	movs	r3, r0
 800d9bc:	0021      	movs	r1, r4
 800d9be:	2a13      	cmp	r2, #19
 800d9c0:	d908      	bls.n	800d9d4 <_realloc_r+0x2f4>
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	6003      	str	r3, [r0, #0]
 800d9c6:	6863      	ldr	r3, [r4, #4]
 800d9c8:	6043      	str	r3, [r0, #4]
 800d9ca:	2a1b      	cmp	r2, #27
 800d9cc:	d80d      	bhi.n	800d9ea <_realloc_r+0x30a>
 800d9ce:	0003      	movs	r3, r0
 800d9d0:	3108      	adds	r1, #8
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	680a      	ldr	r2, [r1, #0]
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	684a      	ldr	r2, [r1, #4]
 800d9da:	605a      	str	r2, [r3, #4]
 800d9dc:	688a      	ldr	r2, [r1, #8]
 800d9de:	609a      	str	r2, [r3, #8]
 800d9e0:	0021      	movs	r1, r4
 800d9e2:	9801      	ldr	r0, [sp, #4]
 800d9e4:	f7fb f89e 	bl	8008b24 <_free_r>
 800d9e8:	e742      	b.n	800d870 <_realloc_r+0x190>
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	6083      	str	r3, [r0, #8]
 800d9ee:	68e3      	ldr	r3, [r4, #12]
 800d9f0:	60c3      	str	r3, [r0, #12]
 800d9f2:	2a24      	cmp	r2, #36	; 0x24
 800d9f4:	d003      	beq.n	800d9fe <_realloc_r+0x31e>
 800d9f6:	0003      	movs	r3, r0
 800d9f8:	3110      	adds	r1, #16
 800d9fa:	3310      	adds	r3, #16
 800d9fc:	e7ea      	b.n	800d9d4 <_realloc_r+0x2f4>
 800d9fe:	6923      	ldr	r3, [r4, #16]
 800da00:	3118      	adds	r1, #24
 800da02:	6103      	str	r3, [r0, #16]
 800da04:	0003      	movs	r3, r0
 800da06:	6962      	ldr	r2, [r4, #20]
 800da08:	3318      	adds	r3, #24
 800da0a:	6142      	str	r2, [r0, #20]
 800da0c:	e7e2      	b.n	800d9d4 <_realloc_r+0x2f4>
 800da0e:	0021      	movs	r1, r4
 800da10:	f001 fafd 	bl	800f00e <memmove>
 800da14:	e7e4      	b.n	800d9e0 <_realloc_r+0x300>
 800da16:	9e03      	ldr	r6, [sp, #12]
 800da18:	e6c7      	b.n	800d7aa <_realloc_r+0xca>
 800da1a:	9902      	ldr	r1, [sp, #8]
 800da1c:	4306      	orrs	r6, r0
 800da1e:	604e      	str	r6, [r1, #4]
 800da20:	6851      	ldr	r1, [r2, #4]
 800da22:	430b      	orrs	r3, r1
 800da24:	6053      	str	r3, [r2, #4]
 800da26:	e6da      	b.n	800d7de <_realloc_r+0xfe>
 800da28:	20000034 	.word	0x20000034

0800da2c <_strtoul_l.constprop.0>:
 800da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2e:	b087      	sub	sp, #28
 800da30:	9202      	str	r2, [sp, #8]
 800da32:	4a3e      	ldr	r2, [pc, #248]	; (800db2c <_strtoul_l.constprop.0+0x100>)
 800da34:	001e      	movs	r6, r3
 800da36:	9101      	str	r1, [sp, #4]
 800da38:	000b      	movs	r3, r1
 800da3a:	4694      	mov	ip, r2
 800da3c:	2108      	movs	r1, #8
 800da3e:	9005      	str	r0, [sp, #20]
 800da40:	001a      	movs	r2, r3
 800da42:	4660      	mov	r0, ip
 800da44:	7814      	ldrb	r4, [r2, #0]
 800da46:	3301      	adds	r3, #1
 800da48:	5d00      	ldrb	r0, [r0, r4]
 800da4a:	001d      	movs	r5, r3
 800da4c:	0007      	movs	r7, r0
 800da4e:	400f      	ands	r7, r1
 800da50:	4208      	tst	r0, r1
 800da52:	d1f5      	bne.n	800da40 <_strtoul_l.constprop.0+0x14>
 800da54:	2c2d      	cmp	r4, #45	; 0x2d
 800da56:	d13d      	bne.n	800dad4 <_strtoul_l.constprop.0+0xa8>
 800da58:	2701      	movs	r7, #1
 800da5a:	781c      	ldrb	r4, [r3, #0]
 800da5c:	1c95      	adds	r5, r2, #2
 800da5e:	2e00      	cmp	r6, #0
 800da60:	d05f      	beq.n	800db22 <_strtoul_l.constprop.0+0xf6>
 800da62:	2e10      	cmp	r6, #16
 800da64:	d109      	bne.n	800da7a <_strtoul_l.constprop.0+0x4e>
 800da66:	2c30      	cmp	r4, #48	; 0x30
 800da68:	d107      	bne.n	800da7a <_strtoul_l.constprop.0+0x4e>
 800da6a:	2220      	movs	r2, #32
 800da6c:	782b      	ldrb	r3, [r5, #0]
 800da6e:	4393      	bics	r3, r2
 800da70:	2b58      	cmp	r3, #88	; 0x58
 800da72:	d151      	bne.n	800db18 <_strtoul_l.constprop.0+0xec>
 800da74:	2610      	movs	r6, #16
 800da76:	786c      	ldrb	r4, [r5, #1]
 800da78:	3502      	adds	r5, #2
 800da7a:	2001      	movs	r0, #1
 800da7c:	0031      	movs	r1, r6
 800da7e:	4240      	negs	r0, r0
 800da80:	f7f2 fb5c 	bl	800013c <__udivsi3>
 800da84:	9003      	str	r0, [sp, #12]
 800da86:	2001      	movs	r0, #1
 800da88:	0031      	movs	r1, r6
 800da8a:	4240      	negs	r0, r0
 800da8c:	f7f2 fbdc 	bl	8000248 <__aeabi_uidivmod>
 800da90:	2300      	movs	r3, #0
 800da92:	2201      	movs	r2, #1
 800da94:	9104      	str	r1, [sp, #16]
 800da96:	2101      	movs	r1, #1
 800da98:	0018      	movs	r0, r3
 800da9a:	4694      	mov	ip, r2
 800da9c:	4249      	negs	r1, r1
 800da9e:	0022      	movs	r2, r4
 800daa0:	3a30      	subs	r2, #48	; 0x30
 800daa2:	2a09      	cmp	r2, #9
 800daa4:	d903      	bls.n	800daae <_strtoul_l.constprop.0+0x82>
 800daa6:	3a11      	subs	r2, #17
 800daa8:	2a19      	cmp	r2, #25
 800daaa:	d818      	bhi.n	800dade <_strtoul_l.constprop.0+0xb2>
 800daac:	320a      	adds	r2, #10
 800daae:	4296      	cmp	r6, r2
 800dab0:	dd19      	ble.n	800dae6 <_strtoul_l.constprop.0+0xba>
 800dab2:	1c5c      	adds	r4, r3, #1
 800dab4:	d00b      	beq.n	800dace <_strtoul_l.constprop.0+0xa2>
 800dab6:	9c03      	ldr	r4, [sp, #12]
 800dab8:	000b      	movs	r3, r1
 800daba:	4284      	cmp	r4, r0
 800dabc:	d307      	bcc.n	800dace <_strtoul_l.constprop.0+0xa2>
 800dabe:	d103      	bne.n	800dac8 <_strtoul_l.constprop.0+0x9c>
 800dac0:	9c04      	ldr	r4, [sp, #16]
 800dac2:	000b      	movs	r3, r1
 800dac4:	4294      	cmp	r4, r2
 800dac6:	db02      	blt.n	800dace <_strtoul_l.constprop.0+0xa2>
 800dac8:	4663      	mov	r3, ip
 800daca:	4370      	muls	r0, r6
 800dacc:	1810      	adds	r0, r2, r0
 800dace:	782c      	ldrb	r4, [r5, #0]
 800dad0:	3501      	adds	r5, #1
 800dad2:	e7e4      	b.n	800da9e <_strtoul_l.constprop.0+0x72>
 800dad4:	2c2b      	cmp	r4, #43	; 0x2b
 800dad6:	d1c2      	bne.n	800da5e <_strtoul_l.constprop.0+0x32>
 800dad8:	781c      	ldrb	r4, [r3, #0]
 800dada:	1c95      	adds	r5, r2, #2
 800dadc:	e7bf      	b.n	800da5e <_strtoul_l.constprop.0+0x32>
 800dade:	0022      	movs	r2, r4
 800dae0:	3a61      	subs	r2, #97	; 0x61
 800dae2:	2a19      	cmp	r2, #25
 800dae4:	d9e2      	bls.n	800daac <_strtoul_l.constprop.0+0x80>
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	d108      	bne.n	800dafc <_strtoul_l.constprop.0+0xd0>
 800daea:	2222      	movs	r2, #34	; 0x22
 800daec:	9905      	ldr	r1, [sp, #20]
 800daee:	0018      	movs	r0, r3
 800daf0:	600a      	str	r2, [r1, #0]
 800daf2:	9a02      	ldr	r2, [sp, #8]
 800daf4:	2a00      	cmp	r2, #0
 800daf6:	d109      	bne.n	800db0c <_strtoul_l.constprop.0+0xe0>
 800daf8:	b007      	add	sp, #28
 800dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafc:	2f00      	cmp	r7, #0
 800dafe:	d000      	beq.n	800db02 <_strtoul_l.constprop.0+0xd6>
 800db00:	4240      	negs	r0, r0
 800db02:	9a02      	ldr	r2, [sp, #8]
 800db04:	2a00      	cmp	r2, #0
 800db06:	d0f7      	beq.n	800daf8 <_strtoul_l.constprop.0+0xcc>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <_strtoul_l.constprop.0+0xe4>
 800db0c:	1e6b      	subs	r3, r5, #1
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	9a01      	ldr	r2, [sp, #4]
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	e7ef      	b.n	800daf8 <_strtoul_l.constprop.0+0xcc>
 800db18:	2430      	movs	r4, #48	; 0x30
 800db1a:	2e00      	cmp	r6, #0
 800db1c:	d1ad      	bne.n	800da7a <_strtoul_l.constprop.0+0x4e>
 800db1e:	3608      	adds	r6, #8
 800db20:	e7ab      	b.n	800da7a <_strtoul_l.constprop.0+0x4e>
 800db22:	2c30      	cmp	r4, #48	; 0x30
 800db24:	d0a1      	beq.n	800da6a <_strtoul_l.constprop.0+0x3e>
 800db26:	260a      	movs	r6, #10
 800db28:	e7a7      	b.n	800da7a <_strtoul_l.constprop.0+0x4e>
 800db2a:	46c0      	nop			; (mov r8, r8)
 800db2c:	0800f541 	.word	0x0800f541

0800db30 <_strtoul_r>:
 800db30:	b510      	push	{r4, lr}
 800db32:	f7ff ff7b 	bl	800da2c <_strtoul_l.constprop.0>
 800db36:	bd10      	pop	{r4, pc}

0800db38 <_strtoll_l.constprop.0>:
 800db38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db3a:	b08d      	sub	sp, #52	; 0x34
 800db3c:	9203      	str	r2, [sp, #12]
 800db3e:	4a53      	ldr	r2, [pc, #332]	; (800dc8c <_strtoll_l.constprop.0+0x154>)
 800db40:	001e      	movs	r6, r3
 800db42:	9102      	str	r1, [sp, #8]
 800db44:	000b      	movs	r3, r1
 800db46:	4694      	mov	ip, r2
 800db48:	2108      	movs	r1, #8
 800db4a:	900a      	str	r0, [sp, #40]	; 0x28
 800db4c:	001a      	movs	r2, r3
 800db4e:	4660      	mov	r0, ip
 800db50:	7814      	ldrb	r4, [r2, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	5d00      	ldrb	r0, [r0, r4]
 800db56:	001d      	movs	r5, r3
 800db58:	0007      	movs	r7, r0
 800db5a:	400f      	ands	r7, r1
 800db5c:	4208      	tst	r0, r1
 800db5e:	d1f5      	bne.n	800db4c <_strtoll_l.constprop.0+0x14>
 800db60:	2c2d      	cmp	r4, #45	; 0x2d
 800db62:	d153      	bne.n	800dc0c <_strtoll_l.constprop.0+0xd4>
 800db64:	781c      	ldrb	r4, [r3, #0]
 800db66:	2301      	movs	r3, #1
 800db68:	1c95      	adds	r5, r2, #2
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	2e00      	cmp	r6, #0
 800db6e:	d100      	bne.n	800db72 <_strtoll_l.constprop.0+0x3a>
 800db70:	e086      	b.n	800dc80 <_strtoll_l.constprop.0+0x148>
 800db72:	2e10      	cmp	r6, #16
 800db74:	d10a      	bne.n	800db8c <_strtoll_l.constprop.0+0x54>
 800db76:	2c30      	cmp	r4, #48	; 0x30
 800db78:	d108      	bne.n	800db8c <_strtoll_l.constprop.0+0x54>
 800db7a:	2220      	movs	r2, #32
 800db7c:	782b      	ldrb	r3, [r5, #0]
 800db7e:	4393      	bics	r3, r2
 800db80:	2b58      	cmp	r3, #88	; 0x58
 800db82:	d000      	beq.n	800db86 <_strtoll_l.constprop.0+0x4e>
 800db84:	e076      	b.n	800dc74 <_strtoll_l.constprop.0+0x13c>
 800db86:	2610      	movs	r6, #16
 800db88:	786c      	ldrb	r4, [r5, #1]
 800db8a:	3502      	adds	r5, #2
 800db8c:	2001      	movs	r0, #1
 800db8e:	2300      	movs	r3, #0
 800db90:	493f      	ldr	r1, [pc, #252]	; (800dc90 <_strtoll_l.constprop.0+0x158>)
 800db92:	9a01      	ldr	r2, [sp, #4]
 800db94:	4240      	negs	r0, r0
 800db96:	1812      	adds	r2, r2, r0
 800db98:	414b      	adcs	r3, r1
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	9804      	ldr	r0, [sp, #16]
 800dba0:	9905      	ldr	r1, [sp, #20]
 800dba2:	17f3      	asrs	r3, r6, #31
 800dba4:	0032      	movs	r2, r6
 800dba6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dba8:	f7f2 fc7c 	bl	80004a4 <__aeabi_uldivmod>
 800dbac:	2300      	movs	r3, #0
 800dbae:	000f      	movs	r7, r1
 800dbb0:	9008      	str	r0, [sp, #32]
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb8:	0022      	movs	r2, r4
 800dbba:	3a30      	subs	r2, #48	; 0x30
 800dbbc:	2a09      	cmp	r2, #9
 800dbbe:	d82b      	bhi.n	800dc18 <_strtoll_l.constprop.0+0xe0>
 800dbc0:	0014      	movs	r4, r2
 800dbc2:	42a6      	cmp	r6, r4
 800dbc4:	dd37      	ble.n	800dc36 <_strtoll_l.constprop.0+0xfe>
 800dbc6:	1c5a      	adds	r2, r3, #1
 800dbc8:	d01d      	beq.n	800dc06 <_strtoll_l.constprop.0+0xce>
 800dbca:	42b9      	cmp	r1, r7
 800dbcc:	d830      	bhi.n	800dc30 <_strtoll_l.constprop.0+0xf8>
 800dbce:	d102      	bne.n	800dbd6 <_strtoll_l.constprop.0+0x9e>
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	4298      	cmp	r0, r3
 800dbd4:	d82c      	bhi.n	800dc30 <_strtoll_l.constprop.0+0xf8>
 800dbd6:	9b08      	ldr	r3, [sp, #32]
 800dbd8:	4283      	cmp	r3, r0
 800dbda:	d106      	bne.n	800dbea <_strtoll_l.constprop.0+0xb2>
 800dbdc:	428f      	cmp	r7, r1
 800dbde:	d104      	bne.n	800dbea <_strtoll_l.constprop.0+0xb2>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe4:	425b      	negs	r3, r3
 800dbe6:	42a2      	cmp	r2, r4
 800dbe8:	db0d      	blt.n	800dc06 <_strtoll_l.constprop.0+0xce>
 800dbea:	000b      	movs	r3, r1
 800dbec:	0002      	movs	r2, r0
 800dbee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbf0:	0030      	movs	r0, r6
 800dbf2:	f7f2 fc77 	bl	80004e4 <__aeabi_lmul>
 800dbf6:	17e3      	asrs	r3, r4, #31
 800dbf8:	9406      	str	r4, [sp, #24]
 800dbfa:	9307      	str	r3, [sp, #28]
 800dbfc:	9b06      	ldr	r3, [sp, #24]
 800dbfe:	9c07      	ldr	r4, [sp, #28]
 800dc00:	18c0      	adds	r0, r0, r3
 800dc02:	4161      	adcs	r1, r4
 800dc04:	2301      	movs	r3, #1
 800dc06:	782c      	ldrb	r4, [r5, #0]
 800dc08:	3501      	adds	r5, #1
 800dc0a:	e7d5      	b.n	800dbb8 <_strtoll_l.constprop.0+0x80>
 800dc0c:	9701      	str	r7, [sp, #4]
 800dc0e:	2c2b      	cmp	r4, #43	; 0x2b
 800dc10:	d1ac      	bne.n	800db6c <_strtoll_l.constprop.0+0x34>
 800dc12:	781c      	ldrb	r4, [r3, #0]
 800dc14:	1c95      	adds	r5, r2, #2
 800dc16:	e7a9      	b.n	800db6c <_strtoll_l.constprop.0+0x34>
 800dc18:	0022      	movs	r2, r4
 800dc1a:	3a41      	subs	r2, #65	; 0x41
 800dc1c:	2a19      	cmp	r2, #25
 800dc1e:	d801      	bhi.n	800dc24 <_strtoll_l.constprop.0+0xec>
 800dc20:	3c37      	subs	r4, #55	; 0x37
 800dc22:	e7ce      	b.n	800dbc2 <_strtoll_l.constprop.0+0x8a>
 800dc24:	0022      	movs	r2, r4
 800dc26:	3a61      	subs	r2, #97	; 0x61
 800dc28:	2a19      	cmp	r2, #25
 800dc2a:	d804      	bhi.n	800dc36 <_strtoll_l.constprop.0+0xfe>
 800dc2c:	3c57      	subs	r4, #87	; 0x57
 800dc2e:	e7c8      	b.n	800dbc2 <_strtoll_l.constprop.0+0x8a>
 800dc30:	2301      	movs	r3, #1
 800dc32:	425b      	negs	r3, r3
 800dc34:	e7e7      	b.n	800dc06 <_strtoll_l.constprop.0+0xce>
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	d109      	bne.n	800dc4e <_strtoll_l.constprop.0+0x116>
 800dc3a:	9804      	ldr	r0, [sp, #16]
 800dc3c:	9905      	ldr	r1, [sp, #20]
 800dc3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc40:	3323      	adds	r3, #35	; 0x23
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	9b03      	ldr	r3, [sp, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10e      	bne.n	800dc68 <_strtoll_l.constprop.0+0x130>
 800dc4a:	b00d      	add	sp, #52	; 0x34
 800dc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc4e:	9a01      	ldr	r2, [sp, #4]
 800dc50:	2a00      	cmp	r2, #0
 800dc52:	d004      	beq.n	800dc5e <_strtoll_l.constprop.0+0x126>
 800dc54:	0006      	movs	r6, r0
 800dc56:	000f      	movs	r7, r1
 800dc58:	2100      	movs	r1, #0
 800dc5a:	4270      	negs	r0, r6
 800dc5c:	41b9      	sbcs	r1, r7
 800dc5e:	9a03      	ldr	r2, [sp, #12]
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	d0f2      	beq.n	800dc4a <_strtoll_l.constprop.0+0x112>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <_strtoll_l.constprop.0+0x134>
 800dc68:	1e6b      	subs	r3, r5, #1
 800dc6a:	9302      	str	r3, [sp, #8]
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	9a02      	ldr	r2, [sp, #8]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e7ea      	b.n	800dc4a <_strtoll_l.constprop.0+0x112>
 800dc74:	2430      	movs	r4, #48	; 0x30
 800dc76:	2e00      	cmp	r6, #0
 800dc78:	d000      	beq.n	800dc7c <_strtoll_l.constprop.0+0x144>
 800dc7a:	e787      	b.n	800db8c <_strtoll_l.constprop.0+0x54>
 800dc7c:	3608      	adds	r6, #8
 800dc7e:	e785      	b.n	800db8c <_strtoll_l.constprop.0+0x54>
 800dc80:	2c30      	cmp	r4, #48	; 0x30
 800dc82:	d100      	bne.n	800dc86 <_strtoll_l.constprop.0+0x14e>
 800dc84:	e779      	b.n	800db7a <_strtoll_l.constprop.0+0x42>
 800dc86:	260a      	movs	r6, #10
 800dc88:	e780      	b.n	800db8c <_strtoll_l.constprop.0+0x54>
 800dc8a:	46c0      	nop			; (mov r8, r8)
 800dc8c:	0800f541 	.word	0x0800f541
 800dc90:	7fffffff 	.word	0x7fffffff

0800dc94 <_strtoll_r>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	f7ff ff4f 	bl	800db38 <_strtoll_l.constprop.0>
 800dc9a:	bd10      	pop	{r4, pc}

0800dc9c <_strtoull_l.constprop.0>:
 800dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc9e:	b08b      	sub	sp, #44	; 0x2c
 800dca0:	9202      	str	r2, [sp, #8]
 800dca2:	4a54      	ldr	r2, [pc, #336]	; (800ddf4 <_strtoull_l.constprop.0+0x158>)
 800dca4:	001e      	movs	r6, r3
 800dca6:	9101      	str	r1, [sp, #4]
 800dca8:	000b      	movs	r3, r1
 800dcaa:	4694      	mov	ip, r2
 800dcac:	2108      	movs	r1, #8
 800dcae:	9009      	str	r0, [sp, #36]	; 0x24
 800dcb0:	001a      	movs	r2, r3
 800dcb2:	4660      	mov	r0, ip
 800dcb4:	7814      	ldrb	r4, [r2, #0]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	5d00      	ldrb	r0, [r0, r4]
 800dcba:	001d      	movs	r5, r3
 800dcbc:	0007      	movs	r7, r0
 800dcbe:	400f      	ands	r7, r1
 800dcc0:	4208      	tst	r0, r1
 800dcc2:	d1f5      	bne.n	800dcb0 <_strtoull_l.constprop.0+0x14>
 800dcc4:	2c2d      	cmp	r4, #45	; 0x2d
 800dcc6:	d154      	bne.n	800dd72 <_strtoull_l.constprop.0+0xd6>
 800dcc8:	781c      	ldrb	r4, [r3, #0]
 800dcca:	2301      	movs	r3, #1
 800dccc:	1c95      	adds	r5, r2, #2
 800dcce:	9306      	str	r3, [sp, #24]
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	d100      	bne.n	800dcd6 <_strtoull_l.constprop.0+0x3a>
 800dcd4:	e088      	b.n	800dde8 <_strtoull_l.constprop.0+0x14c>
 800dcd6:	2e10      	cmp	r6, #16
 800dcd8:	d10a      	bne.n	800dcf0 <_strtoull_l.constprop.0+0x54>
 800dcda:	2c30      	cmp	r4, #48	; 0x30
 800dcdc:	d108      	bne.n	800dcf0 <_strtoull_l.constprop.0+0x54>
 800dcde:	2220      	movs	r2, #32
 800dce0:	782b      	ldrb	r3, [r5, #0]
 800dce2:	4393      	bics	r3, r2
 800dce4:	2b58      	cmp	r3, #88	; 0x58
 800dce6:	d000      	beq.n	800dcea <_strtoull_l.constprop.0+0x4e>
 800dce8:	e078      	b.n	800dddc <_strtoull_l.constprop.0+0x140>
 800dcea:	2610      	movs	r6, #16
 800dcec:	786c      	ldrb	r4, [r5, #1]
 800dcee:	3502      	adds	r5, #2
 800dcf0:	17f7      	asrs	r7, r6, #31
 800dcf2:	0032      	movs	r2, r6
 800dcf4:	003b      	movs	r3, r7
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	4240      	negs	r0, r0
 800dcfa:	17c1      	asrs	r1, r0, #31
 800dcfc:	f7f2 fbd2 	bl	80004a4 <__aeabi_uldivmod>
 800dd00:	0032      	movs	r2, r6
 800dd02:	9007      	str	r0, [sp, #28]
 800dd04:	9103      	str	r1, [sp, #12]
 800dd06:	003b      	movs	r3, r7
 800dd08:	2001      	movs	r0, #1
 800dd0a:	4240      	negs	r0, r0
 800dd0c:	17c1      	asrs	r1, r0, #31
 800dd0e:	f7f2 fbc9 	bl	80004a4 <__aeabi_uldivmod>
 800dd12:	2300      	movs	r3, #0
 800dd14:	2000      	movs	r0, #0
 800dd16:	2100      	movs	r1, #0
 800dd18:	9208      	str	r2, [sp, #32]
 800dd1a:	0022      	movs	r2, r4
 800dd1c:	3a30      	subs	r2, #48	; 0x30
 800dd1e:	2a09      	cmp	r2, #9
 800dd20:	d82d      	bhi.n	800dd7e <_strtoull_l.constprop.0+0xe2>
 800dd22:	0014      	movs	r4, r2
 800dd24:	42a6      	cmp	r6, r4
 800dd26:	dd39      	ble.n	800dd9c <_strtoull_l.constprop.0+0x100>
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	d01f      	beq.n	800dd6c <_strtoull_l.constprop.0+0xd0>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	4299      	cmp	r1, r3
 800dd30:	d831      	bhi.n	800dd96 <_strtoull_l.constprop.0+0xfa>
 800dd32:	d102      	bne.n	800dd3a <_strtoull_l.constprop.0+0x9e>
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	4298      	cmp	r0, r3
 800dd38:	d82d      	bhi.n	800dd96 <_strtoull_l.constprop.0+0xfa>
 800dd3a:	9b07      	ldr	r3, [sp, #28]
 800dd3c:	4283      	cmp	r3, r0
 800dd3e:	d107      	bne.n	800dd50 <_strtoull_l.constprop.0+0xb4>
 800dd40:	9b03      	ldr	r3, [sp, #12]
 800dd42:	428b      	cmp	r3, r1
 800dd44:	d104      	bne.n	800dd50 <_strtoull_l.constprop.0+0xb4>
 800dd46:	2301      	movs	r3, #1
 800dd48:	9a08      	ldr	r2, [sp, #32]
 800dd4a:	425b      	negs	r3, r3
 800dd4c:	42a2      	cmp	r2, r4
 800dd4e:	db0d      	blt.n	800dd6c <_strtoull_l.constprop.0+0xd0>
 800dd50:	000b      	movs	r3, r1
 800dd52:	0002      	movs	r2, r0
 800dd54:	0039      	movs	r1, r7
 800dd56:	0030      	movs	r0, r6
 800dd58:	f7f2 fbc4 	bl	80004e4 <__aeabi_lmul>
 800dd5c:	17e3      	asrs	r3, r4, #31
 800dd5e:	9404      	str	r4, [sp, #16]
 800dd60:	9305      	str	r3, [sp, #20]
 800dd62:	9b04      	ldr	r3, [sp, #16]
 800dd64:	9c05      	ldr	r4, [sp, #20]
 800dd66:	18c0      	adds	r0, r0, r3
 800dd68:	4161      	adcs	r1, r4
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	782c      	ldrb	r4, [r5, #0]
 800dd6e:	3501      	adds	r5, #1
 800dd70:	e7d3      	b.n	800dd1a <_strtoull_l.constprop.0+0x7e>
 800dd72:	9706      	str	r7, [sp, #24]
 800dd74:	2c2b      	cmp	r4, #43	; 0x2b
 800dd76:	d1ab      	bne.n	800dcd0 <_strtoull_l.constprop.0+0x34>
 800dd78:	781c      	ldrb	r4, [r3, #0]
 800dd7a:	1c95      	adds	r5, r2, #2
 800dd7c:	e7a8      	b.n	800dcd0 <_strtoull_l.constprop.0+0x34>
 800dd7e:	0022      	movs	r2, r4
 800dd80:	3a41      	subs	r2, #65	; 0x41
 800dd82:	2a19      	cmp	r2, #25
 800dd84:	d801      	bhi.n	800dd8a <_strtoull_l.constprop.0+0xee>
 800dd86:	3c37      	subs	r4, #55	; 0x37
 800dd88:	e7cc      	b.n	800dd24 <_strtoull_l.constprop.0+0x88>
 800dd8a:	0022      	movs	r2, r4
 800dd8c:	3a61      	subs	r2, #97	; 0x61
 800dd8e:	2a19      	cmp	r2, #25
 800dd90:	d804      	bhi.n	800dd9c <_strtoull_l.constprop.0+0x100>
 800dd92:	3c57      	subs	r4, #87	; 0x57
 800dd94:	e7c6      	b.n	800dd24 <_strtoull_l.constprop.0+0x88>
 800dd96:	2301      	movs	r3, #1
 800dd98:	425b      	negs	r3, r3
 800dd9a:	e7e7      	b.n	800dd6c <_strtoull_l.constprop.0+0xd0>
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	d10a      	bne.n	800ddb6 <_strtoull_l.constprop.0+0x11a>
 800dda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda2:	3323      	adds	r3, #35	; 0x23
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	9b02      	ldr	r3, [sp, #8]
 800dda8:	2001      	movs	r0, #1
 800ddaa:	4240      	negs	r0, r0
 800ddac:	17c1      	asrs	r1, r0, #31
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10e      	bne.n	800ddd0 <_strtoull_l.constprop.0+0x134>
 800ddb2:	b00b      	add	sp, #44	; 0x2c
 800ddb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb6:	9a06      	ldr	r2, [sp, #24]
 800ddb8:	2a00      	cmp	r2, #0
 800ddba:	d004      	beq.n	800ddc6 <_strtoull_l.constprop.0+0x12a>
 800ddbc:	0006      	movs	r6, r0
 800ddbe:	000f      	movs	r7, r1
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4270      	negs	r0, r6
 800ddc4:	41b9      	sbcs	r1, r7
 800ddc6:	9a02      	ldr	r2, [sp, #8]
 800ddc8:	2a00      	cmp	r2, #0
 800ddca:	d0f2      	beq.n	800ddb2 <_strtoull_l.constprop.0+0x116>
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <_strtoull_l.constprop.0+0x138>
 800ddd0:	1e6b      	subs	r3, r5, #1
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	9a01      	ldr	r2, [sp, #4]
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	e7ea      	b.n	800ddb2 <_strtoull_l.constprop.0+0x116>
 800dddc:	2430      	movs	r4, #48	; 0x30
 800ddde:	2e00      	cmp	r6, #0
 800dde0:	d000      	beq.n	800dde4 <_strtoull_l.constprop.0+0x148>
 800dde2:	e785      	b.n	800dcf0 <_strtoull_l.constprop.0+0x54>
 800dde4:	3608      	adds	r6, #8
 800dde6:	e783      	b.n	800dcf0 <_strtoull_l.constprop.0+0x54>
 800dde8:	2c30      	cmp	r4, #48	; 0x30
 800ddea:	d100      	bne.n	800ddee <_strtoull_l.constprop.0+0x152>
 800ddec:	e777      	b.n	800dcde <_strtoull_l.constprop.0+0x42>
 800ddee:	260a      	movs	r6, #10
 800ddf0:	e77e      	b.n	800dcf0 <_strtoull_l.constprop.0+0x54>
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	0800f541 	.word	0x0800f541

0800ddf8 <_strtoull_r>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	f7ff ff4f 	bl	800dc9c <_strtoull_l.constprop.0>
 800ddfe:	bd10      	pop	{r4, pc}

0800de00 <_mbrtowc_r>:
 800de00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de02:	0004      	movs	r4, r0
 800de04:	0010      	movs	r0, r2
 800de06:	4a0b      	ldr	r2, [pc, #44]	; (800de34 <_mbrtowc_r+0x34>)
 800de08:	9d06      	ldr	r5, [sp, #24]
 800de0a:	32e4      	adds	r2, #228	; 0xe4
 800de0c:	6816      	ldr	r6, [r2, #0]
 800de0e:	2800      	cmp	r0, #0
 800de10:	d10c      	bne.n	800de2c <_mbrtowc_r+0x2c>
 800de12:	2301      	movs	r3, #1
 800de14:	0001      	movs	r1, r0
 800de16:	4a08      	ldr	r2, [pc, #32]	; (800de38 <_mbrtowc_r+0x38>)
 800de18:	9500      	str	r5, [sp, #0]
 800de1a:	0020      	movs	r0, r4
 800de1c:	47b0      	blx	r6
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	d103      	bne.n	800de2a <_mbrtowc_r+0x2a>
 800de22:	2300      	movs	r3, #0
 800de24:	602b      	str	r3, [r5, #0]
 800de26:	338a      	adds	r3, #138	; 0x8a
 800de28:	6023      	str	r3, [r4, #0]
 800de2a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800de2c:	0002      	movs	r2, r0
 800de2e:	9500      	str	r5, [sp, #0]
 800de30:	e7f3      	b.n	800de1a <_mbrtowc_r+0x1a>
 800de32:	46c0      	nop			; (mov r8, r8)
 800de34:	20000450 	.word	0x20000450
 800de38:	0800f8cb 	.word	0x0800f8cb

0800de3c <iswspace>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	2100      	movs	r1, #0
 800de40:	f000 f802 	bl	800de48 <iswspace_l>
 800de44:	bd10      	pop	{r4, pc}
	...

0800de48 <iswspace_l>:
 800de48:	0003      	movs	r3, r0
 800de4a:	2000      	movs	r0, #0
 800de4c:	2bff      	cmp	r3, #255	; 0xff
 800de4e:	d803      	bhi.n	800de58 <iswspace_l+0x10>
 800de50:	4a02      	ldr	r2, [pc, #8]	; (800de5c <iswspace_l+0x14>)
 800de52:	5cd0      	ldrb	r0, [r2, r3]
 800de54:	2308      	movs	r3, #8
 800de56:	4018      	ands	r0, r3
 800de58:	4770      	bx	lr
 800de5a:	46c0      	nop			; (mov r8, r8)
 800de5c:	0800f541 	.word	0x0800f541

0800de60 <fiprintf>:
 800de60:	b40e      	push	{r1, r2, r3}
 800de62:	b517      	push	{r0, r1, r2, r4, lr}
 800de64:	4c05      	ldr	r4, [pc, #20]	; (800de7c <fiprintf+0x1c>)
 800de66:	ab05      	add	r3, sp, #20
 800de68:	cb04      	ldmia	r3!, {r2}
 800de6a:	0001      	movs	r1, r0
 800de6c:	6820      	ldr	r0, [r4, #0]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	f000 f954 	bl	800e11c <_vfiprintf_r>
 800de74:	bc1e      	pop	{r1, r2, r3, r4}
 800de76:	bc08      	pop	{r3}
 800de78:	b003      	add	sp, #12
 800de7a:	4718      	bx	r3
 800de7c:	200006e0 	.word	0x200006e0

0800de80 <__ssprint_r>:
 800de80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de82:	6813      	ldr	r3, [r2, #0]
 800de84:	b087      	sub	sp, #28
 800de86:	0017      	movs	r7, r2
 800de88:	9303      	str	r3, [sp, #12]
 800de8a:	6893      	ldr	r3, [r2, #8]
 800de8c:	2200      	movs	r2, #0
 800de8e:	000c      	movs	r4, r1
 800de90:	9005      	str	r0, [sp, #20]
 800de92:	9202      	str	r2, [sp, #8]
 800de94:	9201      	str	r2, [sp, #4]
 800de96:	4293      	cmp	r3, r2
 800de98:	d10d      	bne.n	800deb6 <__ssprint_r+0x36>
 800de9a:	2000      	movs	r0, #0
 800de9c:	2300      	movs	r3, #0
 800de9e:	607b      	str	r3, [r7, #4]
 800dea0:	b007      	add	sp, #28
 800dea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	9302      	str	r3, [sp, #8]
 800deaa:	9b03      	ldr	r3, [sp, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	9b03      	ldr	r3, [sp, #12]
 800deb2:	3308      	adds	r3, #8
 800deb4:	9303      	str	r3, [sp, #12]
 800deb6:	9a01      	ldr	r2, [sp, #4]
 800deb8:	68a6      	ldr	r6, [r4, #8]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	2a00      	cmp	r2, #0
 800debe:	d0f1      	beq.n	800dea4 <__ssprint_r+0x24>
 800dec0:	42b2      	cmp	r2, r6
 800dec2:	d32e      	bcc.n	800df22 <__ssprint_r+0xa2>
 800dec4:	2190      	movs	r1, #144	; 0x90
 800dec6:	89a2      	ldrh	r2, [r4, #12]
 800dec8:	00c9      	lsls	r1, r1, #3
 800deca:	420a      	tst	r2, r1
 800decc:	d029      	beq.n	800df22 <__ssprint_r+0xa2>
 800dece:	2003      	movs	r0, #3
 800ded0:	6921      	ldr	r1, [r4, #16]
 800ded2:	1a5b      	subs	r3, r3, r1
 800ded4:	9304      	str	r3, [sp, #16]
 800ded6:	6963      	ldr	r3, [r4, #20]
 800ded8:	4343      	muls	r3, r0
 800deda:	0fdd      	lsrs	r5, r3, #31
 800dedc:	18ed      	adds	r5, r5, r3
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	9801      	ldr	r0, [sp, #4]
 800dee2:	3301      	adds	r3, #1
 800dee4:	181b      	adds	r3, r3, r0
 800dee6:	106d      	asrs	r5, r5, #1
 800dee8:	42ab      	cmp	r3, r5
 800deea:	d900      	bls.n	800deee <__ssprint_r+0x6e>
 800deec:	001d      	movs	r5, r3
 800deee:	0552      	lsls	r2, r2, #21
 800def0:	d532      	bpl.n	800df58 <__ssprint_r+0xd8>
 800def2:	0029      	movs	r1, r5
 800def4:	9805      	ldr	r0, [sp, #20]
 800def6:	f7f9 fa35 	bl	8007364 <_malloc_r>
 800defa:	1e06      	subs	r6, r0, #0
 800defc:	d036      	beq.n	800df6c <__ssprint_r+0xec>
 800defe:	9a04      	ldr	r2, [sp, #16]
 800df00:	6921      	ldr	r1, [r4, #16]
 800df02:	f7fa fd94 	bl	8008a2e <memcpy>
 800df06:	89a2      	ldrh	r2, [r4, #12]
 800df08:	4b1e      	ldr	r3, [pc, #120]	; (800df84 <__ssprint_r+0x104>)
 800df0a:	401a      	ands	r2, r3
 800df0c:	2380      	movs	r3, #128	; 0x80
 800df0e:	4313      	orrs	r3, r2
 800df10:	81a3      	strh	r3, [r4, #12]
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	6126      	str	r6, [r4, #16]
 800df16:	18f6      	adds	r6, r6, r3
 800df18:	6026      	str	r6, [r4, #0]
 800df1a:	6165      	str	r5, [r4, #20]
 800df1c:	9e01      	ldr	r6, [sp, #4]
 800df1e:	1aed      	subs	r5, r5, r3
 800df20:	60a5      	str	r5, [r4, #8]
 800df22:	9b01      	ldr	r3, [sp, #4]
 800df24:	429e      	cmp	r6, r3
 800df26:	d900      	bls.n	800df2a <__ssprint_r+0xaa>
 800df28:	001e      	movs	r6, r3
 800df2a:	0032      	movs	r2, r6
 800df2c:	9902      	ldr	r1, [sp, #8]
 800df2e:	6820      	ldr	r0, [r4, #0]
 800df30:	f001 f86d 	bl	800f00e <memmove>
 800df34:	9a01      	ldr	r2, [sp, #4]
 800df36:	68a3      	ldr	r3, [r4, #8]
 800df38:	4694      	mov	ip, r2
 800df3a:	1b9b      	subs	r3, r3, r6
 800df3c:	60a3      	str	r3, [r4, #8]
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	199b      	adds	r3, r3, r6
 800df42:	6023      	str	r3, [r4, #0]
 800df44:	9b02      	ldr	r3, [sp, #8]
 800df46:	4463      	add	r3, ip
 800df48:	9302      	str	r3, [sp, #8]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	60bb      	str	r3, [r7, #8]
 800df50:	d0a3      	beq.n	800de9a <__ssprint_r+0x1a>
 800df52:	2300      	movs	r3, #0
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	e7ae      	b.n	800deb6 <__ssprint_r+0x36>
 800df58:	002a      	movs	r2, r5
 800df5a:	9805      	ldr	r0, [sp, #20]
 800df5c:	f7ff fbc0 	bl	800d6e0 <_realloc_r>
 800df60:	1e06      	subs	r6, r0, #0
 800df62:	d1d6      	bne.n	800df12 <__ssprint_r+0x92>
 800df64:	6921      	ldr	r1, [r4, #16]
 800df66:	9805      	ldr	r0, [sp, #20]
 800df68:	f7fa fddc 	bl	8008b24 <_free_r>
 800df6c:	230c      	movs	r3, #12
 800df6e:	9a05      	ldr	r2, [sp, #20]
 800df70:	2001      	movs	r0, #1
 800df72:	6013      	str	r3, [r2, #0]
 800df74:	89a2      	ldrh	r2, [r4, #12]
 800df76:	3334      	adds	r3, #52	; 0x34
 800df78:	4313      	orrs	r3, r2
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	2300      	movs	r3, #0
 800df7e:	4240      	negs	r0, r0
 800df80:	60bb      	str	r3, [r7, #8]
 800df82:	e78b      	b.n	800de9c <__ssprint_r+0x1c>
 800df84:	fffffb7f 	.word	0xfffffb7f

0800df88 <_sungetc_r>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	0014      	movs	r4, r2
 800df8c:	1c4b      	adds	r3, r1, #1
 800df8e:	d103      	bne.n	800df98 <_sungetc_r+0x10>
 800df90:	2501      	movs	r5, #1
 800df92:	426d      	negs	r5, r5
 800df94:	0028      	movs	r0, r5
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	8993      	ldrh	r3, [r2, #12]
 800df9a:	2220      	movs	r2, #32
 800df9c:	4393      	bics	r3, r2
 800df9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	b2ce      	uxtb	r6, r1
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	b2cd      	uxtb	r5, r1
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	d010      	beq.n	800dfce <_sungetc_r+0x46>
 800dfac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	dd07      	ble.n	800dfc2 <_sungetc_r+0x3a>
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	6023      	str	r3, [r4, #0]
 800dfb8:	701e      	strb	r6, [r3, #0]
 800dfba:	6863      	ldr	r3, [r4, #4]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	6063      	str	r3, [r4, #4]
 800dfc0:	e7e8      	b.n	800df94 <_sungetc_r+0xc>
 800dfc2:	0021      	movs	r1, r4
 800dfc4:	f000 ff1a 	bl	800edfc <__submore>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d0f2      	beq.n	800dfb2 <_sungetc_r+0x2a>
 800dfcc:	e7e0      	b.n	800df90 <_sungetc_r+0x8>
 800dfce:	6921      	ldr	r1, [r4, #16]
 800dfd0:	6822      	ldr	r2, [r4, #0]
 800dfd2:	2900      	cmp	r1, #0
 800dfd4:	d007      	beq.n	800dfe6 <_sungetc_r+0x5e>
 800dfd6:	4291      	cmp	r1, r2
 800dfd8:	d205      	bcs.n	800dfe6 <_sungetc_r+0x5e>
 800dfda:	1e51      	subs	r1, r2, #1
 800dfdc:	7808      	ldrb	r0, [r1, #0]
 800dfde:	42a8      	cmp	r0, r5
 800dfe0:	d101      	bne.n	800dfe6 <_sungetc_r+0x5e>
 800dfe2:	6021      	str	r1, [r4, #0]
 800dfe4:	e7ea      	b.n	800dfbc <_sungetc_r+0x34>
 800dfe6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800dfe8:	0023      	movs	r3, r4
 800dfea:	3340      	adds	r3, #64	; 0x40
 800dfec:	6323      	str	r3, [r4, #48]	; 0x30
 800dfee:	2303      	movs	r3, #3
 800dff0:	6363      	str	r3, [r4, #52]	; 0x34
 800dff2:	0023      	movs	r3, r4
 800dff4:	3342      	adds	r3, #66	; 0x42
 800dff6:	63a2      	str	r2, [r4, #56]	; 0x38
 800dff8:	701e      	strb	r6, [r3, #0]
 800dffa:	6023      	str	r3, [r4, #0]
 800dffc:	2301      	movs	r3, #1
 800dffe:	e7de      	b.n	800dfbe <_sungetc_r+0x36>

0800e000 <__ssrefill_r>:
 800e000:	b510      	push	{r4, lr}
 800e002:	000c      	movs	r4, r1
 800e004:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e006:	2900      	cmp	r1, #0
 800e008:	d00e      	beq.n	800e028 <__ssrefill_r+0x28>
 800e00a:	0023      	movs	r3, r4
 800e00c:	3340      	adds	r3, #64	; 0x40
 800e00e:	4299      	cmp	r1, r3
 800e010:	d001      	beq.n	800e016 <__ssrefill_r+0x16>
 800e012:	f7fa fd87 	bl	8008b24 <_free_r>
 800e016:	2000      	movs	r0, #0
 800e018:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e01a:	6320      	str	r0, [r4, #48]	; 0x30
 800e01c:	6063      	str	r3, [r4, #4]
 800e01e:	4283      	cmp	r3, r0
 800e020:	d002      	beq.n	800e028 <__ssrefill_r+0x28>
 800e022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	bd10      	pop	{r4, pc}
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	2001      	movs	r0, #1
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	2300      	movs	r3, #0
 800e030:	89a2      	ldrh	r2, [r4, #12]
 800e032:	6063      	str	r3, [r4, #4]
 800e034:	3320      	adds	r3, #32
 800e036:	4313      	orrs	r3, r2
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	4240      	negs	r0, r0
 800e03c:	e7f3      	b.n	800e026 <__ssrefill_r+0x26>

0800e03e <_sfread_r>:
 800e03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e040:	0014      	movs	r4, r2
 800e042:	435c      	muls	r4, r3
 800e044:	b087      	sub	sp, #28
 800e046:	1e26      	subs	r6, r4, #0
 800e048:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e04a:	9005      	str	r0, [sp, #20]
 800e04c:	9101      	str	r1, [sp, #4]
 800e04e:	9202      	str	r2, [sp, #8]
 800e050:	9303      	str	r3, [sp, #12]
 800e052:	d11e      	bne.n	800e092 <_sfread_r+0x54>
 800e054:	0020      	movs	r0, r4
 800e056:	b007      	add	sp, #28
 800e058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e05a:	003a      	movs	r2, r7
 800e05c:	9801      	ldr	r0, [sp, #4]
 800e05e:	f7fa fce6 	bl	8008a2e <memcpy>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	0029      	movs	r1, r5
 800e066:	19db      	adds	r3, r3, r7
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	2300      	movs	r3, #0
 800e06c:	606b      	str	r3, [r5, #4]
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	9805      	ldr	r0, [sp, #20]
 800e072:	19db      	adds	r3, r3, r7
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	1bf3      	subs	r3, r6, r7
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	f7ff ffc1 	bl	800e000 <__ssrefill_r>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d006      	beq.n	800e090 <_sfread_r+0x52>
 800e082:	193c      	adds	r4, r7, r4
 800e084:	1ba0      	subs	r0, r4, r6
 800e086:	9902      	ldr	r1, [sp, #8]
 800e088:	f7f2 f858 	bl	800013c <__udivsi3>
 800e08c:	0004      	movs	r4, r0
 800e08e:	e7e1      	b.n	800e054 <_sfread_r+0x16>
 800e090:	9e04      	ldr	r6, [sp, #16]
 800e092:	686f      	ldr	r7, [r5, #4]
 800e094:	6829      	ldr	r1, [r5, #0]
 800e096:	42b7      	cmp	r7, r6
 800e098:	d3df      	bcc.n	800e05a <_sfread_r+0x1c>
 800e09a:	0032      	movs	r2, r6
 800e09c:	9801      	ldr	r0, [sp, #4]
 800e09e:	f7fa fcc6 	bl	8008a2e <memcpy>
 800e0a2:	686b      	ldr	r3, [r5, #4]
 800e0a4:	9c03      	ldr	r4, [sp, #12]
 800e0a6:	1b9b      	subs	r3, r3, r6
 800e0a8:	606b      	str	r3, [r5, #4]
 800e0aa:	682b      	ldr	r3, [r5, #0]
 800e0ac:	199b      	adds	r3, r3, r6
 800e0ae:	602b      	str	r3, [r5, #0]
 800e0b0:	e7d0      	b.n	800e054 <_sfread_r+0x16>

0800e0b2 <__sprint_r>:
 800e0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0b4:	6893      	ldr	r3, [r2, #8]
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	9001      	str	r0, [sp, #4]
 800e0ba:	000d      	movs	r5, r1
 800e0bc:	0014      	movs	r4, r2
 800e0be:	1e18      	subs	r0, r3, #0
 800e0c0:	d018      	beq.n	800e0f4 <__sprint_r+0x42>
 800e0c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e0c4:	049b      	lsls	r3, r3, #18
 800e0c6:	d524      	bpl.n	800e112 <__sprint_r+0x60>
 800e0c8:	6817      	ldr	r7, [r2, #0]
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	9302      	str	r3, [sp, #8]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	089b      	lsrs	r3, r3, #2
 800e0d6:	9303      	str	r3, [sp, #12]
 800e0d8:	9b03      	ldr	r3, [sp, #12]
 800e0da:	42b3      	cmp	r3, r6
 800e0dc:	dc0e      	bgt.n	800e0fc <__sprint_r+0x4a>
 800e0de:	2203      	movs	r2, #3
 800e0e0:	9b00      	ldr	r3, [sp, #0]
 800e0e2:	68a0      	ldr	r0, [r4, #8]
 800e0e4:	4393      	bics	r3, r2
 800e0e6:	1ac0      	subs	r0, r0, r3
 800e0e8:	60a0      	str	r0, [r4, #8]
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d1ec      	bne.n	800e0ca <__sprint_r+0x18>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60a3      	str	r3, [r4, #8]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	6063      	str	r3, [r4, #4]
 800e0f8:	b005      	add	sp, #20
 800e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fc:	9902      	ldr	r1, [sp, #8]
 800e0fe:	00b3      	lsls	r3, r6, #2
 800e100:	58c9      	ldr	r1, [r1, r3]
 800e102:	002a      	movs	r2, r5
 800e104:	9801      	ldr	r0, [sp, #4]
 800e106:	f000 ff59 	bl	800efbc <_fputwc_r>
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	d0f0      	beq.n	800e0f0 <__sprint_r+0x3e>
 800e10e:	3601      	adds	r6, #1
 800e110:	e7e2      	b.n	800e0d8 <__sprint_r+0x26>
 800e112:	9801      	ldr	r0, [sp, #4]
 800e114:	f000 fd14 	bl	800eb40 <__sfvwrite_r>
 800e118:	e7ea      	b.n	800e0f0 <__sprint_r+0x3e>
	...

0800e11c <_vfiprintf_r>:
 800e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11e:	b0c1      	sub	sp, #260	; 0x104
 800e120:	001c      	movs	r4, r3
 800e122:	001f      	movs	r7, r3
 800e124:	9006      	str	r0, [sp, #24]
 800e126:	9103      	str	r1, [sp, #12]
 800e128:	9207      	str	r2, [sp, #28]
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d004      	beq.n	800e138 <_vfiprintf_r+0x1c>
 800e12e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <_vfiprintf_r+0x1c>
 800e134:	f7fa fa98 	bl	8008668 <__sinit>
 800e138:	9b03      	ldr	r3, [sp, #12]
 800e13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e13c:	07db      	lsls	r3, r3, #31
 800e13e:	d407      	bmi.n	800e150 <_vfiprintf_r+0x34>
 800e140:	9b03      	ldr	r3, [sp, #12]
 800e142:	899b      	ldrh	r3, [r3, #12]
 800e144:	059b      	lsls	r3, r3, #22
 800e146:	d403      	bmi.n	800e150 <_vfiprintf_r+0x34>
 800e148:	9b03      	ldr	r3, [sp, #12]
 800e14a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e14c:	f7fa fc62 	bl	8008a14 <__retarget_lock_acquire_recursive>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	220c      	movs	r2, #12
 800e154:	5e9a      	ldrsh	r2, [r3, r2]
 800e156:	2380      	movs	r3, #128	; 0x80
 800e158:	019b      	lsls	r3, r3, #6
 800e15a:	421a      	tst	r2, r3
 800e15c:	d107      	bne.n	800e16e <_vfiprintf_r+0x52>
 800e15e:	4313      	orrs	r3, r2
 800e160:	9a03      	ldr	r2, [sp, #12]
 800e162:	8193      	strh	r3, [r2, #12]
 800e164:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e166:	4aa3      	ldr	r2, [pc, #652]	; (800e3f4 <_vfiprintf_r+0x2d8>)
 800e168:	4013      	ands	r3, r2
 800e16a:	9a03      	ldr	r2, [sp, #12]
 800e16c:	6653      	str	r3, [r2, #100]	; 0x64
 800e16e:	9b03      	ldr	r3, [sp, #12]
 800e170:	899b      	ldrh	r3, [r3, #12]
 800e172:	071b      	lsls	r3, r3, #28
 800e174:	d503      	bpl.n	800e17e <_vfiprintf_r+0x62>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d118      	bne.n	800e1b0 <_vfiprintf_r+0x94>
 800e17e:	9903      	ldr	r1, [sp, #12]
 800e180:	9806      	ldr	r0, [sp, #24]
 800e182:	f000 fe79 	bl	800ee78 <__swsetup_r>
 800e186:	2800      	cmp	r0, #0
 800e188:	d012      	beq.n	800e1b0 <_vfiprintf_r+0x94>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e18e:	07db      	lsls	r3, r3, #31
 800e190:	d505      	bpl.n	800e19e <_vfiprintf_r+0x82>
 800e192:	2301      	movs	r3, #1
 800e194:	425b      	negs	r3, r3
 800e196:	9308      	str	r3, [sp, #32]
 800e198:	9808      	ldr	r0, [sp, #32]
 800e19a:	b041      	add	sp, #260	; 0x104
 800e19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	899b      	ldrh	r3, [r3, #12]
 800e1a2:	059b      	lsls	r3, r3, #22
 800e1a4:	d4f5      	bmi.n	800e192 <_vfiprintf_r+0x76>
 800e1a6:	9b03      	ldr	r3, [sp, #12]
 800e1a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e1aa:	f7fa fc34 	bl	8008a16 <__retarget_lock_release_recursive>
 800e1ae:	e7f0      	b.n	800e192 <_vfiprintf_r+0x76>
 800e1b0:	221a      	movs	r2, #26
 800e1b2:	9b03      	ldr	r3, [sp, #12]
 800e1b4:	899b      	ldrh	r3, [r3, #12]
 800e1b6:	401a      	ands	r2, r3
 800e1b8:	2a0a      	cmp	r2, #10
 800e1ba:	d116      	bne.n	800e1ea <_vfiprintf_r+0xce>
 800e1bc:	9a03      	ldr	r2, [sp, #12]
 800e1be:	210e      	movs	r1, #14
 800e1c0:	5e52      	ldrsh	r2, [r2, r1]
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	db11      	blt.n	800e1ea <_vfiprintf_r+0xce>
 800e1c6:	9a03      	ldr	r2, [sp, #12]
 800e1c8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e1ca:	07d2      	lsls	r2, r2, #31
 800e1cc:	d405      	bmi.n	800e1da <_vfiprintf_r+0xbe>
 800e1ce:	059b      	lsls	r3, r3, #22
 800e1d0:	d403      	bmi.n	800e1da <_vfiprintf_r+0xbe>
 800e1d2:	9b03      	ldr	r3, [sp, #12]
 800e1d4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e1d6:	f7fa fc1e 	bl	8008a16 <__retarget_lock_release_recursive>
 800e1da:	0023      	movs	r3, r4
 800e1dc:	9a07      	ldr	r2, [sp, #28]
 800e1de:	9903      	ldr	r1, [sp, #12]
 800e1e0:	9806      	ldr	r0, [sp, #24]
 800e1e2:	f000 fc69 	bl	800eab8 <__sbprintf>
 800e1e6:	9008      	str	r0, [sp, #32]
 800e1e8:	e7d6      	b.n	800e198 <_vfiprintf_r+0x7c>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	ad17      	add	r5, sp, #92	; 0x5c
 800e1ee:	9514      	str	r5, [sp, #80]	; 0x50
 800e1f0:	9316      	str	r3, [sp, #88]	; 0x58
 800e1f2:	9315      	str	r3, [sp, #84]	; 0x54
 800e1f4:	930c      	str	r3, [sp, #48]	; 0x30
 800e1f6:	930d      	str	r3, [sp, #52]	; 0x34
 800e1f8:	930e      	str	r3, [sp, #56]	; 0x38
 800e1fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1fc:	9308      	str	r3, [sp, #32]
 800e1fe:	9c07      	ldr	r4, [sp, #28]
 800e200:	7823      	ldrb	r3, [r4, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d002      	beq.n	800e20c <_vfiprintf_r+0xf0>
 800e206:	2b25      	cmp	r3, #37	; 0x25
 800e208:	d000      	beq.n	800e20c <_vfiprintf_r+0xf0>
 800e20a:	e08d      	b.n	800e328 <_vfiprintf_r+0x20c>
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	1ae6      	subs	r6, r4, r3
 800e210:	429c      	cmp	r4, r3
 800e212:	d016      	beq.n	800e242 <_vfiprintf_r+0x126>
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e218:	606e      	str	r6, [r5, #4]
 800e21a:	199b      	adds	r3, r3, r6
 800e21c:	9316      	str	r3, [sp, #88]	; 0x58
 800e21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e220:	3508      	adds	r5, #8
 800e222:	3301      	adds	r3, #1
 800e224:	9315      	str	r3, [sp, #84]	; 0x54
 800e226:	2b07      	cmp	r3, #7
 800e228:	dd08      	ble.n	800e23c <_vfiprintf_r+0x120>
 800e22a:	9903      	ldr	r1, [sp, #12]
 800e22c:	9806      	ldr	r0, [sp, #24]
 800e22e:	aa14      	add	r2, sp, #80	; 0x50
 800e230:	f7ff ff3f 	bl	800e0b2 <__sprint_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	d000      	beq.n	800e23a <_vfiprintf_r+0x11e>
 800e238:	e3d9      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e23a:	ad17      	add	r5, sp, #92	; 0x5c
 800e23c:	9b08      	ldr	r3, [sp, #32]
 800e23e:	199b      	adds	r3, r3, r6
 800e240:	9308      	str	r3, [sp, #32]
 800e242:	7823      	ldrb	r3, [r4, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d101      	bne.n	800e24c <_vfiprintf_r+0x130>
 800e248:	f000 fbf6 	bl	800ea38 <_vfiprintf_r+0x91c>
 800e24c:	2200      	movs	r2, #0
 800e24e:	a912      	add	r1, sp, #72	; 0x48
 800e250:	70ca      	strb	r2, [r1, #3]
 800e252:	2101      	movs	r1, #1
 800e254:	1c63      	adds	r3, r4, #1
 800e256:	0014      	movs	r4, r2
 800e258:	4249      	negs	r1, r1
 800e25a:	9105      	str	r1, [sp, #20]
 800e25c:	9209      	str	r2, [sp, #36]	; 0x24
 800e25e:	1c5a      	adds	r2, r3, #1
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	9207      	str	r2, [sp, #28]
 800e264:	0018      	movs	r0, r3
 800e266:	3820      	subs	r0, #32
 800e268:	285a      	cmp	r0, #90	; 0x5a
 800e26a:	d900      	bls.n	800e26e <_vfiprintf_r+0x152>
 800e26c:	e362      	b.n	800e934 <_vfiprintf_r+0x818>
 800e26e:	f7f1 ff5b 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e272:	0078      	.short	0x0078
 800e274:	03610361 	.word	0x03610361
 800e278:	03610081 	.word	0x03610081
 800e27c:	03610361 	.word	0x03610361
 800e280:	0361005d 	.word	0x0361005d
 800e284:	00830361 	.word	0x00830361
 800e288:	0361008b 	.word	0x0361008b
 800e28c:	008f0089 	.word	0x008f0089
 800e290:	00ad0361 	.word	0x00ad0361
 800e294:	00af00af 	.word	0x00af00af
 800e298:	00af00af 	.word	0x00af00af
 800e29c:	00af00af 	.word	0x00af00af
 800e2a0:	00af00af 	.word	0x00af00af
 800e2a4:	036100af 	.word	0x036100af
 800e2a8:	03610361 	.word	0x03610361
 800e2ac:	03610361 	.word	0x03610361
 800e2b0:	03610361 	.word	0x03610361
 800e2b4:	03610361 	.word	0x03610361
 800e2b8:	00e600da 	.word	0x00e600da
 800e2bc:	03610361 	.word	0x03610361
 800e2c0:	03610361 	.word	0x03610361
 800e2c4:	03610361 	.word	0x03610361
 800e2c8:	03610361 	.word	0x03610361
 800e2cc:	03610361 	.word	0x03610361
 800e2d0:	03610143 	.word	0x03610143
 800e2d4:	03610361 	.word	0x03610361
 800e2d8:	03610182 	.word	0x03610182
 800e2dc:	0361027c 	.word	0x0361027c
 800e2e0:	02ae0361 	.word	0x02ae0361
 800e2e4:	03610361 	.word	0x03610361
 800e2e8:	03610361 	.word	0x03610361
 800e2ec:	03610361 	.word	0x03610361
 800e2f0:	03610361 	.word	0x03610361
 800e2f4:	03610361 	.word	0x03610361
 800e2f8:	00e800da 	.word	0x00e800da
 800e2fc:	03610361 	.word	0x03610361
 800e300:	00c30361 	.word	0x00c30361
 800e304:	00d600e8 	.word	0x00d600e8
 800e308:	00cf0361 	.word	0x00cf0361
 800e30c:	01260361 	.word	0x01260361
 800e310:	01740145 	.word	0x01740145
 800e314:	036100d6 	.word	0x036100d6
 800e318:	007f0182 	.word	0x007f0182
 800e31c:	0361027e 	.word	0x0361027e
 800e320:	02cd0361 	.word	0x02cd0361
 800e324:	007f0361 	.word	0x007f0361
 800e328:	3401      	adds	r4, #1
 800e32a:	e769      	b.n	800e200 <_vfiprintf_r+0xe4>
 800e32c:	9806      	ldr	r0, [sp, #24]
 800e32e:	f7fe fa47 	bl	800c7c0 <_localeconv_r>
 800e332:	6843      	ldr	r3, [r0, #4]
 800e334:	0018      	movs	r0, r3
 800e336:	930f      	str	r3, [sp, #60]	; 0x3c
 800e338:	f7f1 fee4 	bl	8000104 <strlen>
 800e33c:	900e      	str	r0, [sp, #56]	; 0x38
 800e33e:	9806      	ldr	r0, [sp, #24]
 800e340:	f7fe fa3e 	bl	800c7c0 <_localeconv_r>
 800e344:	6883      	ldr	r3, [r0, #8]
 800e346:	930d      	str	r3, [sp, #52]	; 0x34
 800e348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d010      	beq.n	800e370 <_vfiprintf_r+0x254>
 800e34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00d      	beq.n	800e370 <_vfiprintf_r+0x254>
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00a      	beq.n	800e370 <_vfiprintf_r+0x254>
 800e35a:	2380      	movs	r3, #128	; 0x80
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	431c      	orrs	r4, r3
 800e360:	e006      	b.n	800e370 <_vfiprintf_r+0x254>
 800e362:	ab12      	add	r3, sp, #72	; 0x48
 800e364:	78da      	ldrb	r2, [r3, #3]
 800e366:	3303      	adds	r3, #3
 800e368:	2a00      	cmp	r2, #0
 800e36a:	d101      	bne.n	800e370 <_vfiprintf_r+0x254>
 800e36c:	3220      	adds	r2, #32
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	9b07      	ldr	r3, [sp, #28]
 800e372:	e774      	b.n	800e25e <_vfiprintf_r+0x142>
 800e374:	2301      	movs	r3, #1
 800e376:	e7f2      	b.n	800e35e <_vfiprintf_r+0x242>
 800e378:	cf08      	ldmia	r7!, {r3}
 800e37a:	9309      	str	r3, [sp, #36]	; 0x24
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	daf7      	bge.n	800e370 <_vfiprintf_r+0x254>
 800e380:	425b      	negs	r3, r3
 800e382:	9309      	str	r3, [sp, #36]	; 0x24
 800e384:	2304      	movs	r3, #4
 800e386:	e7ea      	b.n	800e35e <_vfiprintf_r+0x242>
 800e388:	222b      	movs	r2, #43	; 0x2b
 800e38a:	ab12      	add	r3, sp, #72	; 0x48
 800e38c:	70da      	strb	r2, [r3, #3]
 800e38e:	e7ef      	b.n	800e370 <_vfiprintf_r+0x254>
 800e390:	9b07      	ldr	r3, [sp, #28]
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2b2a      	cmp	r3, #42	; 0x2a
 800e398:	d00f      	beq.n	800e3ba <_vfiprintf_r+0x29e>
 800e39a:	2100      	movs	r1, #0
 800e39c:	9105      	str	r1, [sp, #20]
 800e39e:	0019      	movs	r1, r3
 800e3a0:	3930      	subs	r1, #48	; 0x30
 800e3a2:	9207      	str	r2, [sp, #28]
 800e3a4:	2909      	cmp	r1, #9
 800e3a6:	d900      	bls.n	800e3aa <_vfiprintf_r+0x28e>
 800e3a8:	e75c      	b.n	800e264 <_vfiprintf_r+0x148>
 800e3aa:	200a      	movs	r0, #10
 800e3ac:	9b05      	ldr	r3, [sp, #20]
 800e3ae:	4343      	muls	r3, r0
 800e3b0:	185b      	adds	r3, r3, r1
 800e3b2:	9305      	str	r3, [sp, #20]
 800e3b4:	7813      	ldrb	r3, [r2, #0]
 800e3b6:	3201      	adds	r2, #1
 800e3b8:	e7f1      	b.n	800e39e <_vfiprintf_r+0x282>
 800e3ba:	cf08      	ldmia	r7!, {r3}
 800e3bc:	9305      	str	r3, [sp, #20]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	da02      	bge.n	800e3c8 <_vfiprintf_r+0x2ac>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	425b      	negs	r3, r3
 800e3c6:	9305      	str	r3, [sp, #20]
 800e3c8:	9207      	str	r2, [sp, #28]
 800e3ca:	e7d1      	b.n	800e370 <_vfiprintf_r+0x254>
 800e3cc:	2380      	movs	r3, #128	; 0x80
 800e3ce:	e7c6      	b.n	800e35e <_vfiprintf_r+0x242>
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	9a07      	ldr	r2, [sp, #28]
 800e3d4:	9109      	str	r1, [sp, #36]	; 0x24
 800e3d6:	200a      	movs	r0, #10
 800e3d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3da:	3b30      	subs	r3, #48	; 0x30
 800e3dc:	4341      	muls	r1, r0
 800e3de:	185b      	adds	r3, r3, r1
 800e3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e2:	0013      	movs	r3, r2
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	3201      	adds	r2, #1
 800e3e8:	0019      	movs	r1, r3
 800e3ea:	3930      	subs	r1, #48	; 0x30
 800e3ec:	9207      	str	r2, [sp, #28]
 800e3ee:	2909      	cmp	r1, #9
 800e3f0:	d9f1      	bls.n	800e3d6 <_vfiprintf_r+0x2ba>
 800e3f2:	e737      	b.n	800e264 <_vfiprintf_r+0x148>
 800e3f4:	ffffdfff 	.word	0xffffdfff
 800e3f8:	9b07      	ldr	r3, [sp, #28]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b68      	cmp	r3, #104	; 0x68
 800e3fe:	d105      	bne.n	800e40c <_vfiprintf_r+0x2f0>
 800e400:	9b07      	ldr	r3, [sp, #28]
 800e402:	3301      	adds	r3, #1
 800e404:	9307      	str	r3, [sp, #28]
 800e406:	2380      	movs	r3, #128	; 0x80
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	e7a8      	b.n	800e35e <_vfiprintf_r+0x242>
 800e40c:	2340      	movs	r3, #64	; 0x40
 800e40e:	e7a6      	b.n	800e35e <_vfiprintf_r+0x242>
 800e410:	9b07      	ldr	r3, [sp, #28]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b6c      	cmp	r3, #108	; 0x6c
 800e416:	d104      	bne.n	800e422 <_vfiprintf_r+0x306>
 800e418:	9b07      	ldr	r3, [sp, #28]
 800e41a:	3301      	adds	r3, #1
 800e41c:	9307      	str	r3, [sp, #28]
 800e41e:	2320      	movs	r3, #32
 800e420:	e79d      	b.n	800e35e <_vfiprintf_r+0x242>
 800e422:	2310      	movs	r3, #16
 800e424:	e79b      	b.n	800e35e <_vfiprintf_r+0x242>
 800e426:	003a      	movs	r2, r7
 800e428:	ca08      	ldmia	r2!, {r3}
 800e42a:	ae27      	add	r6, sp, #156	; 0x9c
 800e42c:	7033      	strb	r3, [r6, #0]
 800e42e:	2300      	movs	r3, #0
 800e430:	9204      	str	r2, [sp, #16]
 800e432:	aa12      	add	r2, sp, #72	; 0x48
 800e434:	70d3      	strb	r3, [r2, #3]
 800e436:	2201      	movs	r2, #1
 800e438:	930b      	str	r3, [sp, #44]	; 0x2c
 800e43a:	9205      	str	r2, [sp, #20]
 800e43c:	e0b0      	b.n	800e5a0 <_vfiprintf_r+0x484>
 800e43e:	2310      	movs	r3, #16
 800e440:	431c      	orrs	r4, r3
 800e442:	06a3      	lsls	r3, r4, #26
 800e444:	d52a      	bpl.n	800e49c <_vfiprintf_r+0x380>
 800e446:	2307      	movs	r3, #7
 800e448:	3707      	adds	r7, #7
 800e44a:	439f      	bics	r7, r3
 800e44c:	0039      	movs	r1, r7
 800e44e:	c90c      	ldmia	r1!, {r2, r3}
 800e450:	9200      	str	r2, [sp, #0]
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	9104      	str	r1, [sp, #16]
 800e456:	9a01      	ldr	r2, [sp, #4]
 800e458:	2301      	movs	r3, #1
 800e45a:	2a00      	cmp	r2, #0
 800e45c:	da09      	bge.n	800e472 <_vfiprintf_r+0x356>
 800e45e:	9e00      	ldr	r6, [sp, #0]
 800e460:	9f01      	ldr	r7, [sp, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	4271      	negs	r1, r6
 800e466:	41ba      	sbcs	r2, r7
 800e468:	9100      	str	r1, [sp, #0]
 800e46a:	9201      	str	r2, [sp, #4]
 800e46c:	212d      	movs	r1, #45	; 0x2d
 800e46e:	aa12      	add	r2, sp, #72	; 0x48
 800e470:	70d1      	strb	r1, [r2, #3]
 800e472:	9901      	ldr	r1, [sp, #4]
 800e474:	9a00      	ldr	r2, [sp, #0]
 800e476:	430a      	orrs	r2, r1
 800e478:	9905      	ldr	r1, [sp, #20]
 800e47a:	3101      	adds	r1, #1
 800e47c:	d100      	bne.n	800e480 <_vfiprintf_r+0x364>
 800e47e:	e2e9      	b.n	800ea54 <_vfiprintf_r+0x938>
 800e480:	2180      	movs	r1, #128	; 0x80
 800e482:	0027      	movs	r7, r4
 800e484:	438f      	bics	r7, r1
 800e486:	2a00      	cmp	r2, #0
 800e488:	d000      	beq.n	800e48c <_vfiprintf_r+0x370>
 800e48a:	e2e7      	b.n	800ea5c <_vfiprintf_r+0x940>
 800e48c:	9a05      	ldr	r2, [sp, #20]
 800e48e:	2a00      	cmp	r2, #0
 800e490:	d100      	bne.n	800e494 <_vfiprintf_r+0x378>
 800e492:	e243      	b.n	800e91c <_vfiprintf_r+0x800>
 800e494:	2b01      	cmp	r3, #1
 800e496:	d000      	beq.n	800e49a <_vfiprintf_r+0x37e>
 800e498:	e2e3      	b.n	800ea62 <_vfiprintf_r+0x946>
 800e49a:	e1e7      	b.n	800e86c <_vfiprintf_r+0x750>
 800e49c:	003a      	movs	r2, r7
 800e49e:	ca08      	ldmia	r2!, {r3}
 800e4a0:	9204      	str	r2, [sp, #16]
 800e4a2:	06e2      	lsls	r2, r4, #27
 800e4a4:	d503      	bpl.n	800e4ae <_vfiprintf_r+0x392>
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	17db      	asrs	r3, r3, #31
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	e7d3      	b.n	800e456 <_vfiprintf_r+0x33a>
 800e4ae:	0662      	lsls	r2, r4, #25
 800e4b0:	d501      	bpl.n	800e4b6 <_vfiprintf_r+0x39a>
 800e4b2:	b21b      	sxth	r3, r3
 800e4b4:	e7f7      	b.n	800e4a6 <_vfiprintf_r+0x38a>
 800e4b6:	05a2      	lsls	r2, r4, #22
 800e4b8:	d5f5      	bpl.n	800e4a6 <_vfiprintf_r+0x38a>
 800e4ba:	b25b      	sxtb	r3, r3
 800e4bc:	e7f3      	b.n	800e4a6 <_vfiprintf_r+0x38a>
 800e4be:	1d3b      	adds	r3, r7, #4
 800e4c0:	9304      	str	r3, [sp, #16]
 800e4c2:	06a3      	lsls	r3, r4, #26
 800e4c4:	d506      	bpl.n	800e4d4 <_vfiprintf_r+0x3b8>
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	9a08      	ldr	r2, [sp, #32]
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	17d2      	asrs	r2, r2, #31
 800e4ce:	605a      	str	r2, [r3, #4]
 800e4d0:	9f04      	ldr	r7, [sp, #16]
 800e4d2:	e694      	b.n	800e1fe <_vfiprintf_r+0xe2>
 800e4d4:	06e3      	lsls	r3, r4, #27
 800e4d6:	d503      	bpl.n	800e4e0 <_vfiprintf_r+0x3c4>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	9a08      	ldr	r2, [sp, #32]
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	e7f7      	b.n	800e4d0 <_vfiprintf_r+0x3b4>
 800e4e0:	0663      	lsls	r3, r4, #25
 800e4e2:	d503      	bpl.n	800e4ec <_vfiprintf_r+0x3d0>
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	9a08      	ldr	r2, [sp, #32]
 800e4e8:	801a      	strh	r2, [r3, #0]
 800e4ea:	e7f1      	b.n	800e4d0 <_vfiprintf_r+0x3b4>
 800e4ec:	05a4      	lsls	r4, r4, #22
 800e4ee:	d5f3      	bpl.n	800e4d8 <_vfiprintf_r+0x3bc>
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	9a08      	ldr	r2, [sp, #32]
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	e7eb      	b.n	800e4d0 <_vfiprintf_r+0x3b4>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	431c      	orrs	r4, r3
 800e4fc:	2320      	movs	r3, #32
 800e4fe:	0020      	movs	r0, r4
 800e500:	4018      	ands	r0, r3
 800e502:	421c      	tst	r4, r3
 800e504:	d00d      	beq.n	800e522 <_vfiprintf_r+0x406>
 800e506:	3b19      	subs	r3, #25
 800e508:	3707      	adds	r7, #7
 800e50a:	439f      	bics	r7, r3
 800e50c:	0039      	movs	r1, r7
 800e50e:	c90c      	ldmia	r1!, {r2, r3}
 800e510:	9200      	str	r2, [sp, #0]
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	9104      	str	r1, [sp, #16]
 800e516:	4bcc      	ldr	r3, [pc, #816]	; (800e848 <_vfiprintf_r+0x72c>)
 800e518:	401c      	ands	r4, r3
 800e51a:	2300      	movs	r3, #0
 800e51c:	2100      	movs	r1, #0
 800e51e:	aa12      	add	r2, sp, #72	; 0x48
 800e520:	e7a6      	b.n	800e470 <_vfiprintf_r+0x354>
 800e522:	003a      	movs	r2, r7
 800e524:	ca08      	ldmia	r2!, {r3}
 800e526:	0021      	movs	r1, r4
 800e528:	9204      	str	r2, [sp, #16]
 800e52a:	2210      	movs	r2, #16
 800e52c:	4011      	ands	r1, r2
 800e52e:	4214      	tst	r4, r2
 800e530:	d002      	beq.n	800e538 <_vfiprintf_r+0x41c>
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	9001      	str	r0, [sp, #4]
 800e536:	e7ee      	b.n	800e516 <_vfiprintf_r+0x3fa>
 800e538:	2240      	movs	r2, #64	; 0x40
 800e53a:	0020      	movs	r0, r4
 800e53c:	4010      	ands	r0, r2
 800e53e:	4214      	tst	r4, r2
 800e540:	d003      	beq.n	800e54a <_vfiprintf_r+0x42e>
 800e542:	b29b      	uxth	r3, r3
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	9101      	str	r1, [sp, #4]
 800e548:	e7e5      	b.n	800e516 <_vfiprintf_r+0x3fa>
 800e54a:	2280      	movs	r2, #128	; 0x80
 800e54c:	0021      	movs	r1, r4
 800e54e:	0092      	lsls	r2, r2, #2
 800e550:	4011      	ands	r1, r2
 800e552:	4214      	tst	r4, r2
 800e554:	d0f6      	beq.n	800e544 <_vfiprintf_r+0x428>
 800e556:	b2db      	uxtb	r3, r3
 800e558:	e7eb      	b.n	800e532 <_vfiprintf_r+0x416>
 800e55a:	003b      	movs	r3, r7
 800e55c:	cb04      	ldmia	r3!, {r2}
 800e55e:	49bb      	ldr	r1, [pc, #748]	; (800e84c <_vfiprintf_r+0x730>)
 800e560:	9304      	str	r3, [sp, #16]
 800e562:	2300      	movs	r3, #0
 800e564:	9200      	str	r2, [sp, #0]
 800e566:	aa13      	add	r2, sp, #76	; 0x4c
 800e568:	8011      	strh	r1, [r2, #0]
 800e56a:	4ab9      	ldr	r2, [pc, #740]	; (800e850 <_vfiprintf_r+0x734>)
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	3302      	adds	r3, #2
 800e570:	431c      	orrs	r4, r3
 800e572:	920c      	str	r2, [sp, #48]	; 0x30
 800e574:	e7d2      	b.n	800e51c <_vfiprintf_r+0x400>
 800e576:	003b      	movs	r3, r7
 800e578:	2700      	movs	r7, #0
 800e57a:	cb40      	ldmia	r3!, {r6}
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	ab12      	add	r3, sp, #72	; 0x48
 800e580:	70df      	strb	r7, [r3, #3]
 800e582:	9b05      	ldr	r3, [sp, #20]
 800e584:	3301      	adds	r3, #1
 800e586:	d100      	bne.n	800e58a <_vfiprintf_r+0x46e>
 800e588:	e0ea      	b.n	800e760 <_vfiprintf_r+0x644>
 800e58a:	0039      	movs	r1, r7
 800e58c:	0030      	movs	r0, r6
 800e58e:	9a05      	ldr	r2, [sp, #20]
 800e590:	f7fe f92e 	bl	800c7f0 <memchr>
 800e594:	900b      	str	r0, [sp, #44]	; 0x2c
 800e596:	42b8      	cmp	r0, r7
 800e598:	d002      	beq.n	800e5a0 <_vfiprintf_r+0x484>
 800e59a:	1b83      	subs	r3, r0, r6
 800e59c:	9305      	str	r3, [sp, #20]
 800e59e:	970b      	str	r7, [sp, #44]	; 0x2c
 800e5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5a2:	9a05      	ldr	r2, [sp, #20]
 800e5a4:	930a      	str	r3, [sp, #40]	; 0x28
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	da00      	bge.n	800e5ac <_vfiprintf_r+0x490>
 800e5aa:	920a      	str	r2, [sp, #40]	; 0x28
 800e5ac:	ab12      	add	r3, sp, #72	; 0x48
 800e5ae:	3303      	adds	r3, #3
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	1e5a      	subs	r2, r3, #1
 800e5b4:	4193      	sbcs	r3, r2
 800e5b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5b8:	18d3      	adds	r3, r2, r3
 800e5ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e5bc:	0022      	movs	r2, r4
 800e5be:	2302      	movs	r3, #2
 800e5c0:	401a      	ands	r2, r3
 800e5c2:	9210      	str	r2, [sp, #64]	; 0x40
 800e5c4:	421c      	tst	r4, r3
 800e5c6:	d002      	beq.n	800e5ce <_vfiprintf_r+0x4b2>
 800e5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	930a      	str	r3, [sp, #40]	; 0x28
 800e5ce:	2384      	movs	r3, #132	; 0x84
 800e5d0:	0022      	movs	r2, r4
 800e5d2:	401a      	ands	r2, r3
 800e5d4:	9211      	str	r2, [sp, #68]	; 0x44
 800e5d6:	421c      	tst	r4, r3
 800e5d8:	d11e      	bne.n	800e618 <_vfiprintf_r+0x4fc>
 800e5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5de:	1a9f      	subs	r7, r3, r2
 800e5e0:	2f00      	cmp	r7, #0
 800e5e2:	dd19      	ble.n	800e618 <_vfiprintf_r+0x4fc>
 800e5e4:	0029      	movs	r1, r5
 800e5e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5e8:	489a      	ldr	r0, [pc, #616]	; (800e854 <_vfiprintf_r+0x738>)
 800e5ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	3108      	adds	r1, #8
 800e5f0:	6028      	str	r0, [r5, #0]
 800e5f2:	2f10      	cmp	r7, #16
 800e5f4:	dd00      	ble.n	800e5f8 <_vfiprintf_r+0x4dc>
 800e5f6:	e1a7      	b.n	800e948 <_vfiprintf_r+0x82c>
 800e5f8:	606f      	str	r7, [r5, #4]
 800e5fa:	18bf      	adds	r7, r7, r2
 800e5fc:	000d      	movs	r5, r1
 800e5fe:	9716      	str	r7, [sp, #88]	; 0x58
 800e600:	9315      	str	r3, [sp, #84]	; 0x54
 800e602:	2b07      	cmp	r3, #7
 800e604:	dd08      	ble.n	800e618 <_vfiprintf_r+0x4fc>
 800e606:	9903      	ldr	r1, [sp, #12]
 800e608:	9806      	ldr	r0, [sp, #24]
 800e60a:	aa14      	add	r2, sp, #80	; 0x50
 800e60c:	f7ff fd51 	bl	800e0b2 <__sprint_r>
 800e610:	2800      	cmp	r0, #0
 800e612:	d000      	beq.n	800e616 <_vfiprintf_r+0x4fa>
 800e614:	e1eb      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e616:	ad17      	add	r5, sp, #92	; 0x5c
 800e618:	a912      	add	r1, sp, #72	; 0x48
 800e61a:	78c8      	ldrb	r0, [r1, #3]
 800e61c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e620:	3103      	adds	r1, #3
 800e622:	2800      	cmp	r0, #0
 800e624:	d012      	beq.n	800e64c <_vfiprintf_r+0x530>
 800e626:	6029      	str	r1, [r5, #0]
 800e628:	2101      	movs	r1, #1
 800e62a:	3301      	adds	r3, #1
 800e62c:	1852      	adds	r2, r2, r1
 800e62e:	6069      	str	r1, [r5, #4]
 800e630:	9216      	str	r2, [sp, #88]	; 0x58
 800e632:	9315      	str	r3, [sp, #84]	; 0x54
 800e634:	3508      	adds	r5, #8
 800e636:	2b07      	cmp	r3, #7
 800e638:	dd08      	ble.n	800e64c <_vfiprintf_r+0x530>
 800e63a:	9903      	ldr	r1, [sp, #12]
 800e63c:	9806      	ldr	r0, [sp, #24]
 800e63e:	aa14      	add	r2, sp, #80	; 0x50
 800e640:	f7ff fd37 	bl	800e0b2 <__sprint_r>
 800e644:	2800      	cmp	r0, #0
 800e646:	d000      	beq.n	800e64a <_vfiprintf_r+0x52e>
 800e648:	e1d1      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e64a:	ad17      	add	r5, sp, #92	; 0x5c
 800e64c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e64e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e652:	2900      	cmp	r1, #0
 800e654:	d013      	beq.n	800e67e <_vfiprintf_r+0x562>
 800e656:	a913      	add	r1, sp, #76	; 0x4c
 800e658:	6029      	str	r1, [r5, #0]
 800e65a:	2102      	movs	r1, #2
 800e65c:	3301      	adds	r3, #1
 800e65e:	1852      	adds	r2, r2, r1
 800e660:	6069      	str	r1, [r5, #4]
 800e662:	9216      	str	r2, [sp, #88]	; 0x58
 800e664:	9315      	str	r3, [sp, #84]	; 0x54
 800e666:	3508      	adds	r5, #8
 800e668:	2b07      	cmp	r3, #7
 800e66a:	dd08      	ble.n	800e67e <_vfiprintf_r+0x562>
 800e66c:	9903      	ldr	r1, [sp, #12]
 800e66e:	9806      	ldr	r0, [sp, #24]
 800e670:	aa14      	add	r2, sp, #80	; 0x50
 800e672:	f7ff fd1e 	bl	800e0b2 <__sprint_r>
 800e676:	2800      	cmp	r0, #0
 800e678:	d000      	beq.n	800e67c <_vfiprintf_r+0x560>
 800e67a:	e1b8      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e67c:	ad17      	add	r5, sp, #92	; 0x5c
 800e67e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e680:	2b80      	cmp	r3, #128	; 0x80
 800e682:	d11e      	bne.n	800e6c2 <_vfiprintf_r+0x5a6>
 800e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e688:	1a9f      	subs	r7, r3, r2
 800e68a:	2f00      	cmp	r7, #0
 800e68c:	dd19      	ble.n	800e6c2 <_vfiprintf_r+0x5a6>
 800e68e:	0029      	movs	r1, r5
 800e690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e692:	4871      	ldr	r0, [pc, #452]	; (800e858 <_vfiprintf_r+0x73c>)
 800e694:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e696:	3301      	adds	r3, #1
 800e698:	3108      	adds	r1, #8
 800e69a:	6028      	str	r0, [r5, #0]
 800e69c:	2f10      	cmp	r7, #16
 800e69e:	dd00      	ble.n	800e6a2 <_vfiprintf_r+0x586>
 800e6a0:	e164      	b.n	800e96c <_vfiprintf_r+0x850>
 800e6a2:	606f      	str	r7, [r5, #4]
 800e6a4:	18bf      	adds	r7, r7, r2
 800e6a6:	000d      	movs	r5, r1
 800e6a8:	9716      	str	r7, [sp, #88]	; 0x58
 800e6aa:	9315      	str	r3, [sp, #84]	; 0x54
 800e6ac:	2b07      	cmp	r3, #7
 800e6ae:	dd08      	ble.n	800e6c2 <_vfiprintf_r+0x5a6>
 800e6b0:	9903      	ldr	r1, [sp, #12]
 800e6b2:	9806      	ldr	r0, [sp, #24]
 800e6b4:	aa14      	add	r2, sp, #80	; 0x50
 800e6b6:	f7ff fcfc 	bl	800e0b2 <__sprint_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d000      	beq.n	800e6c0 <_vfiprintf_r+0x5a4>
 800e6be:	e196      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e6c0:	ad17      	add	r5, sp, #92	; 0x5c
 800e6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6c4:	9a05      	ldr	r2, [sp, #20]
 800e6c6:	1a9f      	subs	r7, r3, r2
 800e6c8:	2f00      	cmp	r7, #0
 800e6ca:	dd19      	ble.n	800e700 <_vfiprintf_r+0x5e4>
 800e6cc:	0029      	movs	r1, r5
 800e6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6d0:	4861      	ldr	r0, [pc, #388]	; (800e858 <_vfiprintf_r+0x73c>)
 800e6d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	3108      	adds	r1, #8
 800e6d8:	6028      	str	r0, [r5, #0]
 800e6da:	2f10      	cmp	r7, #16
 800e6dc:	dd00      	ble.n	800e6e0 <_vfiprintf_r+0x5c4>
 800e6de:	e157      	b.n	800e990 <_vfiprintf_r+0x874>
 800e6e0:	606f      	str	r7, [r5, #4]
 800e6e2:	18bf      	adds	r7, r7, r2
 800e6e4:	000d      	movs	r5, r1
 800e6e6:	9716      	str	r7, [sp, #88]	; 0x58
 800e6e8:	9315      	str	r3, [sp, #84]	; 0x54
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	dd08      	ble.n	800e700 <_vfiprintf_r+0x5e4>
 800e6ee:	9903      	ldr	r1, [sp, #12]
 800e6f0:	9806      	ldr	r0, [sp, #24]
 800e6f2:	aa14      	add	r2, sp, #80	; 0x50
 800e6f4:	f7ff fcdd 	bl	800e0b2 <__sprint_r>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d000      	beq.n	800e6fe <_vfiprintf_r+0x5e2>
 800e6fc:	e177      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e6fe:	ad17      	add	r5, sp, #92	; 0x5c
 800e700:	9b05      	ldr	r3, [sp, #20]
 800e702:	9a05      	ldr	r2, [sp, #20]
 800e704:	606b      	str	r3, [r5, #4]
 800e706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e708:	602e      	str	r6, [r5, #0]
 800e70a:	189b      	adds	r3, r3, r2
 800e70c:	9316      	str	r3, [sp, #88]	; 0x58
 800e70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e710:	3508      	adds	r5, #8
 800e712:	3301      	adds	r3, #1
 800e714:	9315      	str	r3, [sp, #84]	; 0x54
 800e716:	2b07      	cmp	r3, #7
 800e718:	dd08      	ble.n	800e72c <_vfiprintf_r+0x610>
 800e71a:	9903      	ldr	r1, [sp, #12]
 800e71c:	9806      	ldr	r0, [sp, #24]
 800e71e:	aa14      	add	r2, sp, #80	; 0x50
 800e720:	f7ff fcc7 	bl	800e0b2 <__sprint_r>
 800e724:	2800      	cmp	r0, #0
 800e726:	d000      	beq.n	800e72a <_vfiprintf_r+0x60e>
 800e728:	e161      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e72a:	ad17      	add	r5, sp, #92	; 0x5c
 800e72c:	0764      	lsls	r4, r4, #29
 800e72e:	d500      	bpl.n	800e732 <_vfiprintf_r+0x616>
 800e730:	e140      	b.n	800e9b4 <_vfiprintf_r+0x898>
 800e732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e736:	4293      	cmp	r3, r2
 800e738:	da00      	bge.n	800e73c <_vfiprintf_r+0x620>
 800e73a:	0013      	movs	r3, r2
 800e73c:	9a08      	ldr	r2, [sp, #32]
 800e73e:	18d3      	adds	r3, r2, r3
 800e740:	9308      	str	r3, [sp, #32]
 800e742:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e744:	2b00      	cmp	r3, #0
 800e746:	d007      	beq.n	800e758 <_vfiprintf_r+0x63c>
 800e748:	9903      	ldr	r1, [sp, #12]
 800e74a:	9806      	ldr	r0, [sp, #24]
 800e74c:	aa14      	add	r2, sp, #80	; 0x50
 800e74e:	f7ff fcb0 	bl	800e0b2 <__sprint_r>
 800e752:	2800      	cmp	r0, #0
 800e754:	d000      	beq.n	800e758 <_vfiprintf_r+0x63c>
 800e756:	e14a      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800e758:	2300      	movs	r3, #0
 800e75a:	ad17      	add	r5, sp, #92	; 0x5c
 800e75c:	9315      	str	r3, [sp, #84]	; 0x54
 800e75e:	e6b7      	b.n	800e4d0 <_vfiprintf_r+0x3b4>
 800e760:	0030      	movs	r0, r6
 800e762:	f7f1 fccf 	bl	8000104 <strlen>
 800e766:	9005      	str	r0, [sp, #20]
 800e768:	e719      	b.n	800e59e <_vfiprintf_r+0x482>
 800e76a:	2310      	movs	r3, #16
 800e76c:	431c      	orrs	r4, r3
 800e76e:	2320      	movs	r3, #32
 800e770:	0020      	movs	r0, r4
 800e772:	4018      	ands	r0, r3
 800e774:	421c      	tst	r4, r3
 800e776:	d009      	beq.n	800e78c <_vfiprintf_r+0x670>
 800e778:	3b19      	subs	r3, #25
 800e77a:	3707      	adds	r7, #7
 800e77c:	439f      	bics	r7, r3
 800e77e:	0039      	movs	r1, r7
 800e780:	c90c      	ldmia	r1!, {r2, r3}
 800e782:	9200      	str	r2, [sp, #0]
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	9104      	str	r1, [sp, #16]
 800e788:	2301      	movs	r3, #1
 800e78a:	e6c7      	b.n	800e51c <_vfiprintf_r+0x400>
 800e78c:	003b      	movs	r3, r7
 800e78e:	cb04      	ldmia	r3!, {r2}
 800e790:	0021      	movs	r1, r4
 800e792:	9304      	str	r3, [sp, #16]
 800e794:	2310      	movs	r3, #16
 800e796:	4019      	ands	r1, r3
 800e798:	421c      	tst	r4, r3
 800e79a:	d003      	beq.n	800e7a4 <_vfiprintf_r+0x688>
 800e79c:	9200      	str	r2, [sp, #0]
 800e79e:	9001      	str	r0, [sp, #4]
 800e7a0:	3b0f      	subs	r3, #15
 800e7a2:	e6bb      	b.n	800e51c <_vfiprintf_r+0x400>
 800e7a4:	2340      	movs	r3, #64	; 0x40
 800e7a6:	0020      	movs	r0, r4
 800e7a8:	4018      	ands	r0, r3
 800e7aa:	421c      	tst	r4, r3
 800e7ac:	d003      	beq.n	800e7b6 <_vfiprintf_r+0x69a>
 800e7ae:	b293      	uxth	r3, r2
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	9101      	str	r1, [sp, #4]
 800e7b4:	e7e8      	b.n	800e788 <_vfiprintf_r+0x66c>
 800e7b6:	2380      	movs	r3, #128	; 0x80
 800e7b8:	0021      	movs	r1, r4
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4019      	ands	r1, r3
 800e7be:	421c      	tst	r4, r3
 800e7c0:	d003      	beq.n	800e7ca <_vfiprintf_r+0x6ae>
 800e7c2:	b2d3      	uxtb	r3, r2
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	9001      	str	r0, [sp, #4]
 800e7c8:	e7de      	b.n	800e788 <_vfiprintf_r+0x66c>
 800e7ca:	9200      	str	r2, [sp, #0]
 800e7cc:	e7f1      	b.n	800e7b2 <_vfiprintf_r+0x696>
 800e7ce:	4a23      	ldr	r2, [pc, #140]	; (800e85c <_vfiprintf_r+0x740>)
 800e7d0:	0020      	movs	r0, r4
 800e7d2:	920c      	str	r2, [sp, #48]	; 0x30
 800e7d4:	2220      	movs	r2, #32
 800e7d6:	4010      	ands	r0, r2
 800e7d8:	4214      	tst	r4, r2
 800e7da:	d019      	beq.n	800e810 <_vfiprintf_r+0x6f4>
 800e7dc:	3a19      	subs	r2, #25
 800e7de:	3707      	adds	r7, #7
 800e7e0:	4397      	bics	r7, r2
 800e7e2:	0038      	movs	r0, r7
 800e7e4:	c806      	ldmia	r0!, {r1, r2}
 800e7e6:	9100      	str	r1, [sp, #0]
 800e7e8:	9201      	str	r2, [sp, #4]
 800e7ea:	9004      	str	r0, [sp, #16]
 800e7ec:	07e2      	lsls	r2, r4, #31
 800e7ee:	d509      	bpl.n	800e804 <_vfiprintf_r+0x6e8>
 800e7f0:	9a00      	ldr	r2, [sp, #0]
 800e7f2:	9901      	ldr	r1, [sp, #4]
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	d005      	beq.n	800e804 <_vfiprintf_r+0x6e8>
 800e7f8:	aa13      	add	r2, sp, #76	; 0x4c
 800e7fa:	2130      	movs	r1, #48	; 0x30
 800e7fc:	7053      	strb	r3, [r2, #1]
 800e7fe:	2302      	movs	r3, #2
 800e800:	7011      	strb	r1, [r2, #0]
 800e802:	431c      	orrs	r4, r3
 800e804:	4b10      	ldr	r3, [pc, #64]	; (800e848 <_vfiprintf_r+0x72c>)
 800e806:	401c      	ands	r4, r3
 800e808:	2302      	movs	r3, #2
 800e80a:	e687      	b.n	800e51c <_vfiprintf_r+0x400>
 800e80c:	4a10      	ldr	r2, [pc, #64]	; (800e850 <_vfiprintf_r+0x734>)
 800e80e:	e7df      	b.n	800e7d0 <_vfiprintf_r+0x6b4>
 800e810:	0039      	movs	r1, r7
 800e812:	c904      	ldmia	r1!, {r2}
 800e814:	0026      	movs	r6, r4
 800e816:	9104      	str	r1, [sp, #16]
 800e818:	2110      	movs	r1, #16
 800e81a:	400e      	ands	r6, r1
 800e81c:	420c      	tst	r4, r1
 800e81e:	d002      	beq.n	800e826 <_vfiprintf_r+0x70a>
 800e820:	9200      	str	r2, [sp, #0]
 800e822:	9001      	str	r0, [sp, #4]
 800e824:	e7e2      	b.n	800e7ec <_vfiprintf_r+0x6d0>
 800e826:	2140      	movs	r1, #64	; 0x40
 800e828:	0020      	movs	r0, r4
 800e82a:	4008      	ands	r0, r1
 800e82c:	420c      	tst	r4, r1
 800e82e:	d003      	beq.n	800e838 <_vfiprintf_r+0x71c>
 800e830:	b292      	uxth	r2, r2
 800e832:	9200      	str	r2, [sp, #0]
 800e834:	9601      	str	r6, [sp, #4]
 800e836:	e7d9      	b.n	800e7ec <_vfiprintf_r+0x6d0>
 800e838:	2180      	movs	r1, #128	; 0x80
 800e83a:	0026      	movs	r6, r4
 800e83c:	0089      	lsls	r1, r1, #2
 800e83e:	400e      	ands	r6, r1
 800e840:	420c      	tst	r4, r1
 800e842:	d0f6      	beq.n	800e832 <_vfiprintf_r+0x716>
 800e844:	b2d2      	uxtb	r2, r2
 800e846:	e7eb      	b.n	800e820 <_vfiprintf_r+0x704>
 800e848:	fffffbff 	.word	0xfffffbff
 800e84c:	00007830 	.word	0x00007830
 800e850:	0800f824 	.word	0x0800f824
 800e854:	0800f931 	.word	0x0800f931
 800e858:	0800f941 	.word	0x0800f941
 800e85c:	0800f835 	.word	0x0800f835
 800e860:	9b01      	ldr	r3, [sp, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d109      	bne.n	800e87a <_vfiprintf_r+0x75e>
 800e866:	9b00      	ldr	r3, [sp, #0]
 800e868:	2b09      	cmp	r3, #9
 800e86a:	d806      	bhi.n	800e87a <_vfiprintf_r+0x75e>
 800e86c:	26b7      	movs	r6, #183	; 0xb7
 800e86e:	ab12      	add	r3, sp, #72	; 0x48
 800e870:	18f6      	adds	r6, r6, r3
 800e872:	9b00      	ldr	r3, [sp, #0]
 800e874:	3330      	adds	r3, #48	; 0x30
 800e876:	7033      	strb	r3, [r6, #0]
 800e878:	e115      	b.n	800eaa6 <_vfiprintf_r+0x98a>
 800e87a:	2380      	movs	r3, #128	; 0x80
 800e87c:	2400      	movs	r4, #0
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	403b      	ands	r3, r7
 800e882:	ae40      	add	r6, sp, #256	; 0x100
 800e884:	930a      	str	r3, [sp, #40]	; 0x28
 800e886:	220a      	movs	r2, #10
 800e888:	9800      	ldr	r0, [sp, #0]
 800e88a:	9901      	ldr	r1, [sp, #4]
 800e88c:	2300      	movs	r3, #0
 800e88e:	f7f1 fe09 	bl	80004a4 <__aeabi_uldivmod>
 800e892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e894:	3e01      	subs	r6, #1
 800e896:	3230      	adds	r2, #48	; 0x30
 800e898:	900b      	str	r0, [sp, #44]	; 0x2c
 800e89a:	9110      	str	r1, [sp, #64]	; 0x40
 800e89c:	7032      	strb	r2, [r6, #0]
 800e89e:	3401      	adds	r4, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01a      	beq.n	800e8da <_vfiprintf_r+0x7be>
 800e8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	42a3      	cmp	r3, r4
 800e8aa:	d116      	bne.n	800e8da <_vfiprintf_r+0x7be>
 800e8ac:	2cff      	cmp	r4, #255	; 0xff
 800e8ae:	d014      	beq.n	800e8da <_vfiprintf_r+0x7be>
 800e8b0:	9b01      	ldr	r3, [sp, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d102      	bne.n	800e8bc <_vfiprintf_r+0x7a0>
 800e8b6:	9b00      	ldr	r3, [sp, #0]
 800e8b8:	2b09      	cmp	r3, #9
 800e8ba:	d90e      	bls.n	800e8da <_vfiprintf_r+0x7be>
 800e8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e8c0:	1af6      	subs	r6, r6, r3
 800e8c2:	001a      	movs	r2, r3
 800e8c4:	0030      	movs	r0, r6
 800e8c6:	f7f9 ffe6 	bl	8008896 <strncpy>
 800e8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8cc:	2400      	movs	r4, #0
 800e8ce:	785b      	ldrb	r3, [r3, #1]
 800e8d0:	1e5a      	subs	r2, r3, #1
 800e8d2:	4193      	sbcs	r3, r2
 800e8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8d6:	18d3      	adds	r3, r2, r3
 800e8d8:	930d      	str	r3, [sp, #52]	; 0x34
 800e8da:	9b01      	ldr	r3, [sp, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d103      	bne.n	800e8e8 <_vfiprintf_r+0x7cc>
 800e8e0:	9b00      	ldr	r3, [sp, #0]
 800e8e2:	2b09      	cmp	r3, #9
 800e8e4:	d800      	bhi.n	800e8e8 <_vfiprintf_r+0x7cc>
 800e8e6:	e0de      	b.n	800eaa6 <_vfiprintf_r+0x98a>
 800e8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	e7c9      	b.n	800e886 <_vfiprintf_r+0x76a>
 800e8f2:	200f      	movs	r0, #15
 800e8f4:	9b00      	ldr	r3, [sp, #0]
 800e8f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8f8:	4003      	ands	r3, r0
 800e8fa:	5cd3      	ldrb	r3, [r2, r3]
 800e8fc:	3e01      	subs	r6, #1
 800e8fe:	7033      	strb	r3, [r6, #0]
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	0719      	lsls	r1, r3, #28
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	091a      	lsrs	r2, r3, #4
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	4311      	orrs	r1, r2
 800e90c:	091b      	lsrs	r3, r3, #4
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	000b      	movs	r3, r1
 800e912:	9a01      	ldr	r2, [sp, #4]
 800e914:	9100      	str	r1, [sp, #0]
 800e916:	4313      	orrs	r3, r2
 800e918:	d1ec      	bne.n	800e8f4 <_vfiprintf_r+0x7d8>
 800e91a:	e0c4      	b.n	800eaa6 <_vfiprintf_r+0x98a>
 800e91c:	ae40      	add	r6, sp, #256	; 0x100
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d000      	beq.n	800e924 <_vfiprintf_r+0x808>
 800e922:	e0c0      	b.n	800eaa6 <_vfiprintf_r+0x98a>
 800e924:	07e4      	lsls	r4, r4, #31
 800e926:	d400      	bmi.n	800e92a <_vfiprintf_r+0x80e>
 800e928:	e0bd      	b.n	800eaa6 <_vfiprintf_r+0x98a>
 800e92a:	26b7      	movs	r6, #183	; 0xb7
 800e92c:	ab12      	add	r3, sp, #72	; 0x48
 800e92e:	18f6      	adds	r6, r6, r3
 800e930:	2330      	movs	r3, #48	; 0x30
 800e932:	e7a0      	b.n	800e876 <_vfiprintf_r+0x75a>
 800e934:	2b00      	cmp	r3, #0
 800e936:	d100      	bne.n	800e93a <_vfiprintf_r+0x81e>
 800e938:	e07e      	b.n	800ea38 <_vfiprintf_r+0x91c>
 800e93a:	ae27      	add	r6, sp, #156	; 0x9c
 800e93c:	7033      	strb	r3, [r6, #0]
 800e93e:	2300      	movs	r3, #0
 800e940:	aa12      	add	r2, sp, #72	; 0x48
 800e942:	70d3      	strb	r3, [r2, #3]
 800e944:	9704      	str	r7, [sp, #16]
 800e946:	e576      	b.n	800e436 <_vfiprintf_r+0x31a>
 800e948:	2010      	movs	r0, #16
 800e94a:	1812      	adds	r2, r2, r0
 800e94c:	6068      	str	r0, [r5, #4]
 800e94e:	9216      	str	r2, [sp, #88]	; 0x58
 800e950:	9315      	str	r3, [sp, #84]	; 0x54
 800e952:	2b07      	cmp	r3, #7
 800e954:	dd07      	ble.n	800e966 <_vfiprintf_r+0x84a>
 800e956:	9903      	ldr	r1, [sp, #12]
 800e958:	9806      	ldr	r0, [sp, #24]
 800e95a:	aa14      	add	r2, sp, #80	; 0x50
 800e95c:	f7ff fba9 	bl	800e0b2 <__sprint_r>
 800e960:	2800      	cmp	r0, #0
 800e962:	d144      	bne.n	800e9ee <_vfiprintf_r+0x8d2>
 800e964:	a917      	add	r1, sp, #92	; 0x5c
 800e966:	000d      	movs	r5, r1
 800e968:	3f10      	subs	r7, #16
 800e96a:	e63b      	b.n	800e5e4 <_vfiprintf_r+0x4c8>
 800e96c:	2010      	movs	r0, #16
 800e96e:	1812      	adds	r2, r2, r0
 800e970:	6068      	str	r0, [r5, #4]
 800e972:	9216      	str	r2, [sp, #88]	; 0x58
 800e974:	9315      	str	r3, [sp, #84]	; 0x54
 800e976:	2b07      	cmp	r3, #7
 800e978:	dd07      	ble.n	800e98a <_vfiprintf_r+0x86e>
 800e97a:	9903      	ldr	r1, [sp, #12]
 800e97c:	9806      	ldr	r0, [sp, #24]
 800e97e:	aa14      	add	r2, sp, #80	; 0x50
 800e980:	f7ff fb97 	bl	800e0b2 <__sprint_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	d132      	bne.n	800e9ee <_vfiprintf_r+0x8d2>
 800e988:	a917      	add	r1, sp, #92	; 0x5c
 800e98a:	000d      	movs	r5, r1
 800e98c:	3f10      	subs	r7, #16
 800e98e:	e67e      	b.n	800e68e <_vfiprintf_r+0x572>
 800e990:	2010      	movs	r0, #16
 800e992:	1812      	adds	r2, r2, r0
 800e994:	6068      	str	r0, [r5, #4]
 800e996:	9216      	str	r2, [sp, #88]	; 0x58
 800e998:	9315      	str	r3, [sp, #84]	; 0x54
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	dd07      	ble.n	800e9ae <_vfiprintf_r+0x892>
 800e99e:	9903      	ldr	r1, [sp, #12]
 800e9a0:	9806      	ldr	r0, [sp, #24]
 800e9a2:	aa14      	add	r2, sp, #80	; 0x50
 800e9a4:	f7ff fb85 	bl	800e0b2 <__sprint_r>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d120      	bne.n	800e9ee <_vfiprintf_r+0x8d2>
 800e9ac:	a917      	add	r1, sp, #92	; 0x5c
 800e9ae:	000d      	movs	r5, r1
 800e9b0:	3f10      	subs	r7, #16
 800e9b2:	e68b      	b.n	800e6cc <_vfiprintf_r+0x5b0>
 800e9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9b8:	2610      	movs	r6, #16
 800e9ba:	1a9c      	subs	r4, r3, r2
 800e9bc:	2c00      	cmp	r4, #0
 800e9be:	dc00      	bgt.n	800e9c2 <_vfiprintf_r+0x8a6>
 800e9c0:	e6b7      	b.n	800e732 <_vfiprintf_r+0x616>
 800e9c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e9c4:	4a3b      	ldr	r2, [pc, #236]	; (800eab4 <_vfiprintf_r+0x998>)
 800e9c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	602a      	str	r2, [r5, #0]
 800e9cc:	2c10      	cmp	r4, #16
 800e9ce:	dc22      	bgt.n	800ea16 <_vfiprintf_r+0x8fa>
 800e9d0:	606c      	str	r4, [r5, #4]
 800e9d2:	18e4      	adds	r4, r4, r3
 800e9d4:	9416      	str	r4, [sp, #88]	; 0x58
 800e9d6:	9115      	str	r1, [sp, #84]	; 0x54
 800e9d8:	2907      	cmp	r1, #7
 800e9da:	dc00      	bgt.n	800e9de <_vfiprintf_r+0x8c2>
 800e9dc:	e6a9      	b.n	800e732 <_vfiprintf_r+0x616>
 800e9de:	9903      	ldr	r1, [sp, #12]
 800e9e0:	9806      	ldr	r0, [sp, #24]
 800e9e2:	aa14      	add	r2, sp, #80	; 0x50
 800e9e4:	f7ff fb65 	bl	800e0b2 <__sprint_r>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d100      	bne.n	800e9ee <_vfiprintf_r+0x8d2>
 800e9ec:	e6a1      	b.n	800e732 <_vfiprintf_r+0x616>
 800e9ee:	9b03      	ldr	r3, [sp, #12]
 800e9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f2:	07db      	lsls	r3, r3, #31
 800e9f4:	d407      	bmi.n	800ea06 <_vfiprintf_r+0x8ea>
 800e9f6:	9b03      	ldr	r3, [sp, #12]
 800e9f8:	899b      	ldrh	r3, [r3, #12]
 800e9fa:	059b      	lsls	r3, r3, #22
 800e9fc:	d403      	bmi.n	800ea06 <_vfiprintf_r+0x8ea>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ea02:	f7fa f808 	bl	8008a16 <__retarget_lock_release_recursive>
 800ea06:	9b03      	ldr	r3, [sp, #12]
 800ea08:	899b      	ldrh	r3, [r3, #12]
 800ea0a:	065b      	lsls	r3, r3, #25
 800ea0c:	d401      	bmi.n	800ea12 <_vfiprintf_r+0x8f6>
 800ea0e:	f7ff fbc3 	bl	800e198 <_vfiprintf_r+0x7c>
 800ea12:	f7ff fbbe 	bl	800e192 <_vfiprintf_r+0x76>
 800ea16:	3310      	adds	r3, #16
 800ea18:	606e      	str	r6, [r5, #4]
 800ea1a:	9316      	str	r3, [sp, #88]	; 0x58
 800ea1c:	9115      	str	r1, [sp, #84]	; 0x54
 800ea1e:	3508      	adds	r5, #8
 800ea20:	2907      	cmp	r1, #7
 800ea22:	dd07      	ble.n	800ea34 <_vfiprintf_r+0x918>
 800ea24:	9903      	ldr	r1, [sp, #12]
 800ea26:	9806      	ldr	r0, [sp, #24]
 800ea28:	aa14      	add	r2, sp, #80	; 0x50
 800ea2a:	f7ff fb42 	bl	800e0b2 <__sprint_r>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d1dd      	bne.n	800e9ee <_vfiprintf_r+0x8d2>
 800ea32:	ad17      	add	r5, sp, #92	; 0x5c
 800ea34:	3c10      	subs	r4, #16
 800ea36:	e7c4      	b.n	800e9c2 <_vfiprintf_r+0x8a6>
 800ea38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d102      	bne.n	800ea44 <_vfiprintf_r+0x928>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9315      	str	r3, [sp, #84]	; 0x54
 800ea42:	e7d4      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800ea44:	9903      	ldr	r1, [sp, #12]
 800ea46:	9806      	ldr	r0, [sp, #24]
 800ea48:	aa14      	add	r2, sp, #80	; 0x50
 800ea4a:	f7ff fb32 	bl	800e0b2 <__sprint_r>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d0f5      	beq.n	800ea3e <_vfiprintf_r+0x922>
 800ea52:	e7cc      	b.n	800e9ee <_vfiprintf_r+0x8d2>
 800ea54:	0027      	movs	r7, r4
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	d100      	bne.n	800ea5c <_vfiprintf_r+0x940>
 800ea5a:	e51b      	b.n	800e494 <_vfiprintf_r+0x378>
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d100      	bne.n	800ea62 <_vfiprintf_r+0x946>
 800ea60:	e6fe      	b.n	800e860 <_vfiprintf_r+0x744>
 800ea62:	ae40      	add	r6, sp, #256	; 0x100
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d100      	bne.n	800ea6a <_vfiprintf_r+0x94e>
 800ea68:	e743      	b.n	800e8f2 <_vfiprintf_r+0x7d6>
 800ea6a:	2307      	movs	r3, #7
 800ea6c:	469c      	mov	ip, r3
 800ea6e:	4663      	mov	r3, ip
 800ea70:	9900      	ldr	r1, [sp, #0]
 800ea72:	0032      	movs	r2, r6
 800ea74:	400b      	ands	r3, r1
 800ea76:	9901      	ldr	r1, [sp, #4]
 800ea78:	3e01      	subs	r6, #1
 800ea7a:	074c      	lsls	r4, r1, #29
 800ea7c:	9900      	ldr	r1, [sp, #0]
 800ea7e:	3330      	adds	r3, #48	; 0x30
 800ea80:	08c8      	lsrs	r0, r1, #3
 800ea82:	9901      	ldr	r1, [sp, #4]
 800ea84:	4304      	orrs	r4, r0
 800ea86:	08c9      	lsrs	r1, r1, #3
 800ea88:	9101      	str	r1, [sp, #4]
 800ea8a:	0021      	movs	r1, r4
 800ea8c:	9801      	ldr	r0, [sp, #4]
 800ea8e:	7033      	strb	r3, [r6, #0]
 800ea90:	9400      	str	r4, [sp, #0]
 800ea92:	4301      	orrs	r1, r0
 800ea94:	d1eb      	bne.n	800ea6e <_vfiprintf_r+0x952>
 800ea96:	07f9      	lsls	r1, r7, #31
 800ea98:	d505      	bpl.n	800eaa6 <_vfiprintf_r+0x98a>
 800ea9a:	2b30      	cmp	r3, #48	; 0x30
 800ea9c:	d003      	beq.n	800eaa6 <_vfiprintf_r+0x98a>
 800ea9e:	2330      	movs	r3, #48	; 0x30
 800eaa0:	3e01      	subs	r6, #1
 800eaa2:	7033      	strb	r3, [r6, #0]
 800eaa4:	1e96      	subs	r6, r2, #2
 800eaa6:	9b05      	ldr	r3, [sp, #20]
 800eaa8:	003c      	movs	r4, r7
 800eaaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaac:	ab40      	add	r3, sp, #256	; 0x100
 800eaae:	1b9b      	subs	r3, r3, r6
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	e575      	b.n	800e5a0 <_vfiprintf_r+0x484>
 800eab4:	0800f931 	.word	0x0800f931

0800eab8 <__sbprintf>:
 800eab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaba:	0015      	movs	r5, r2
 800eabc:	2202      	movs	r2, #2
 800eabe:	4c1e      	ldr	r4, [pc, #120]	; (800eb38 <__sbprintf+0x80>)
 800eac0:	001f      	movs	r7, r3
 800eac2:	898b      	ldrh	r3, [r1, #12]
 800eac4:	44a5      	add	sp, r4
 800eac6:	4393      	bics	r3, r2
 800eac8:	466a      	mov	r2, sp
 800eaca:	8193      	strh	r3, [r2, #12]
 800eacc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eace:	0006      	movs	r6, r0
 800ead0:	9319      	str	r3, [sp, #100]	; 0x64
 800ead2:	89cb      	ldrh	r3, [r1, #14]
 800ead4:	a816      	add	r0, sp, #88	; 0x58
 800ead6:	81d3      	strh	r3, [r2, #14]
 800ead8:	69cb      	ldr	r3, [r1, #28]
 800eada:	000c      	movs	r4, r1
 800eadc:	9307      	str	r3, [sp, #28]
 800eade:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800eae0:	9309      	str	r3, [sp, #36]	; 0x24
 800eae2:	ab1a      	add	r3, sp, #104	; 0x68
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	2380      	movs	r3, #128	; 0x80
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	9302      	str	r3, [sp, #8]
 800eaee:	9305      	str	r3, [sp, #20]
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	9306      	str	r3, [sp, #24]
 800eaf4:	f7f9 ff8c 	bl	8008a10 <__retarget_lock_init_recursive>
 800eaf8:	002a      	movs	r2, r5
 800eafa:	003b      	movs	r3, r7
 800eafc:	4669      	mov	r1, sp
 800eafe:	0030      	movs	r0, r6
 800eb00:	f7ff fb0c 	bl	800e11c <_vfiprintf_r>
 800eb04:	1e05      	subs	r5, r0, #0
 800eb06:	db07      	blt.n	800eb18 <__sbprintf+0x60>
 800eb08:	4669      	mov	r1, sp
 800eb0a:	0030      	movs	r0, r6
 800eb0c:	f7fd fdf6 	bl	800c6fc <_fflush_r>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d001      	beq.n	800eb18 <__sbprintf+0x60>
 800eb14:	2501      	movs	r5, #1
 800eb16:	426d      	negs	r5, r5
 800eb18:	466b      	mov	r3, sp
 800eb1a:	899a      	ldrh	r2, [r3, #12]
 800eb1c:	2340      	movs	r3, #64	; 0x40
 800eb1e:	421a      	tst	r2, r3
 800eb20:	d002      	beq.n	800eb28 <__sbprintf+0x70>
 800eb22:	89a2      	ldrh	r2, [r4, #12]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	9816      	ldr	r0, [sp, #88]	; 0x58
 800eb2a:	f7f9 ff72 	bl	8008a12 <__retarget_lock_close_recursive>
 800eb2e:	0028      	movs	r0, r5
 800eb30:	4b02      	ldr	r3, [pc, #8]	; (800eb3c <__sbprintf+0x84>)
 800eb32:	449d      	add	sp, r3
 800eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb36:	46c0      	nop			; (mov r8, r8)
 800eb38:	fffffb94 	.word	0xfffffb94
 800eb3c:	0000046c 	.word	0x0000046c

0800eb40 <__sfvwrite_r>:
 800eb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb42:	6893      	ldr	r3, [r2, #8]
 800eb44:	b087      	sub	sp, #28
 800eb46:	000c      	movs	r4, r1
 800eb48:	9002      	str	r0, [sp, #8]
 800eb4a:	9204      	str	r2, [sp, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <__sfvwrite_r+0x16>
 800eb50:	2000      	movs	r0, #0
 800eb52:	b007      	add	sp, #28
 800eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb56:	898b      	ldrh	r3, [r1, #12]
 800eb58:	071b      	lsls	r3, r3, #28
 800eb5a:	d557      	bpl.n	800ec0c <__sfvwrite_r+0xcc>
 800eb5c:	690b      	ldr	r3, [r1, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d054      	beq.n	800ec0c <__sfvwrite_r+0xcc>
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	2202      	movs	r2, #2
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	001f      	movs	r7, r3
 800eb6e:	4017      	ands	r7, r2
 800eb70:	4213      	tst	r3, r2
 800eb72:	d171      	bne.n	800ec58 <__sfvwrite_r+0x118>
 800eb74:	2201      	movs	r2, #1
 800eb76:	2101      	movs	r1, #1
 800eb78:	401a      	ands	r2, r3
 800eb7a:	420b      	tst	r3, r1
 800eb7c:	d100      	bne.n	800eb80 <__sfvwrite_r+0x40>
 800eb7e:	e0a5      	b.n	800eccc <__sfvwrite_r+0x18c>
 800eb80:	0038      	movs	r0, r7
 800eb82:	003e      	movs	r6, r7
 800eb84:	9703      	str	r7, [sp, #12]
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d100      	bne.n	800eb8e <__sfvwrite_r+0x4e>
 800eb8c:	e10b      	b.n	800eda6 <__sfvwrite_r+0x266>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d10a      	bne.n	800eba8 <__sfvwrite_r+0x68>
 800eb92:	001a      	movs	r2, r3
 800eb94:	210a      	movs	r1, #10
 800eb96:	0030      	movs	r0, r6
 800eb98:	f7fd fe2a 	bl	800c7f0 <memchr>
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	1c5f      	adds	r7, r3, #1
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d001      	beq.n	800eba8 <__sfvwrite_r+0x68>
 800eba4:	3001      	adds	r0, #1
 800eba6:	1b87      	subs	r7, r0, r6
 800eba8:	9b03      	ldr	r3, [sp, #12]
 800ebaa:	9705      	str	r7, [sp, #20]
 800ebac:	429f      	cmp	r7, r3
 800ebae:	d900      	bls.n	800ebb2 <__sfvwrite_r+0x72>
 800ebb0:	9305      	str	r3, [sp, #20]
 800ebb2:	6820      	ldr	r0, [r4, #0]
 800ebb4:	6922      	ldr	r2, [r4, #16]
 800ebb6:	68a5      	ldr	r5, [r4, #8]
 800ebb8:	6963      	ldr	r3, [r4, #20]
 800ebba:	4290      	cmp	r0, r2
 800ebbc:	d800      	bhi.n	800ebc0 <__sfvwrite_r+0x80>
 800ebbe:	e0fb      	b.n	800edb8 <__sfvwrite_r+0x278>
 800ebc0:	9a05      	ldr	r2, [sp, #20]
 800ebc2:	18ed      	adds	r5, r5, r3
 800ebc4:	42aa      	cmp	r2, r5
 800ebc6:	dc00      	bgt.n	800ebca <__sfvwrite_r+0x8a>
 800ebc8:	e0f6      	b.n	800edb8 <__sfvwrite_r+0x278>
 800ebca:	0031      	movs	r1, r6
 800ebcc:	002a      	movs	r2, r5
 800ebce:	f000 fa1e 	bl	800f00e <memmove>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	0021      	movs	r1, r4
 800ebd6:	195b      	adds	r3, r3, r5
 800ebd8:	9802      	ldr	r0, [sp, #8]
 800ebda:	6023      	str	r3, [r4, #0]
 800ebdc:	f7fd fd8e 	bl	800c6fc <_fflush_r>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d16e      	bne.n	800ecc2 <__sfvwrite_r+0x182>
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	1b7f      	subs	r7, r7, r5
 800ebe8:	d105      	bne.n	800ebf6 <__sfvwrite_r+0xb6>
 800ebea:	0021      	movs	r1, r4
 800ebec:	9802      	ldr	r0, [sp, #8]
 800ebee:	f7fd fd85 	bl	800c6fc <_fflush_r>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d165      	bne.n	800ecc2 <__sfvwrite_r+0x182>
 800ebf6:	9b03      	ldr	r3, [sp, #12]
 800ebf8:	9a04      	ldr	r2, [sp, #16]
 800ebfa:	1b5b      	subs	r3, r3, r5
 800ebfc:	9303      	str	r3, [sp, #12]
 800ebfe:	9b04      	ldr	r3, [sp, #16]
 800ec00:	1976      	adds	r6, r6, r5
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	1b5b      	subs	r3, r3, r5
 800ec06:	6093      	str	r3, [r2, #8]
 800ec08:	d1bd      	bne.n	800eb86 <__sfvwrite_r+0x46>
 800ec0a:	e7a1      	b.n	800eb50 <__sfvwrite_r+0x10>
 800ec0c:	0021      	movs	r1, r4
 800ec0e:	9802      	ldr	r0, [sp, #8]
 800ec10:	f000 f932 	bl	800ee78 <__swsetup_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d0a4      	beq.n	800eb62 <__sfvwrite_r+0x22>
 800ec18:	2001      	movs	r0, #1
 800ec1a:	4240      	negs	r0, r0
 800ec1c:	e799      	b.n	800eb52 <__sfvwrite_r+0x12>
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	681e      	ldr	r6, [r3, #0]
 800ec22:	685d      	ldr	r5, [r3, #4]
 800ec24:	3308      	adds	r3, #8
 800ec26:	9301      	str	r3, [sp, #4]
 800ec28:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ec2a:	69e1      	ldr	r1, [r4, #28]
 800ec2c:	2d00      	cmp	r5, #0
 800ec2e:	d0f6      	beq.n	800ec1e <__sfvwrite_r+0xde>
 800ec30:	4a6e      	ldr	r2, [pc, #440]	; (800edec <__sfvwrite_r+0x2ac>)
 800ec32:	002b      	movs	r3, r5
 800ec34:	4295      	cmp	r5, r2
 800ec36:	d900      	bls.n	800ec3a <__sfvwrite_r+0xfa>
 800ec38:	0013      	movs	r3, r2
 800ec3a:	0032      	movs	r2, r6
 800ec3c:	9802      	ldr	r0, [sp, #8]
 800ec3e:	47b8      	blx	r7
 800ec40:	2800      	cmp	r0, #0
 800ec42:	dd3e      	ble.n	800ecc2 <__sfvwrite_r+0x182>
 800ec44:	9b04      	ldr	r3, [sp, #16]
 800ec46:	9a04      	ldr	r2, [sp, #16]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	1836      	adds	r6, r6, r0
 800ec4c:	1a1b      	subs	r3, r3, r0
 800ec4e:	1a2d      	subs	r5, r5, r0
 800ec50:	6093      	str	r3, [r2, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1e8      	bne.n	800ec28 <__sfvwrite_r+0xe8>
 800ec56:	e77b      	b.n	800eb50 <__sfvwrite_r+0x10>
 800ec58:	2600      	movs	r6, #0
 800ec5a:	0035      	movs	r5, r6
 800ec5c:	e7e4      	b.n	800ec28 <__sfvwrite_r+0xe8>
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	9303      	str	r3, [sp, #12]
 800ec64:	9b01      	ldr	r3, [sp, #4]
 800ec66:	685d      	ldr	r5, [r3, #4]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	9301      	str	r3, [sp, #4]
 800ec6c:	220c      	movs	r2, #12
 800ec6e:	5ea3      	ldrsh	r3, [r4, r2]
 800ec70:	6820      	ldr	r0, [r4, #0]
 800ec72:	68a6      	ldr	r6, [r4, #8]
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	d0f2      	beq.n	800ec5e <__sfvwrite_r+0x11e>
 800ec78:	2180      	movs	r1, #128	; 0x80
 800ec7a:	0089      	lsls	r1, r1, #2
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	420b      	tst	r3, r1
 800ec80:	d062      	beq.n	800ed48 <__sfvwrite_r+0x208>
 800ec82:	42ae      	cmp	r6, r5
 800ec84:	d837      	bhi.n	800ecf6 <__sfvwrite_r+0x1b6>
 800ec86:	2390      	movs	r3, #144	; 0x90
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	421a      	tst	r2, r3
 800ec8c:	d033      	beq.n	800ecf6 <__sfvwrite_r+0x1b6>
 800ec8e:	6921      	ldr	r1, [r4, #16]
 800ec90:	1a43      	subs	r3, r0, r1
 800ec92:	2003      	movs	r0, #3
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	6963      	ldr	r3, [r4, #20]
 800ec98:	4343      	muls	r3, r0
 800ec9a:	0fdf      	lsrs	r7, r3, #31
 800ec9c:	18ff      	adds	r7, r7, r3
 800ec9e:	9b05      	ldr	r3, [sp, #20]
 800eca0:	107f      	asrs	r7, r7, #1
 800eca2:	3301      	adds	r3, #1
 800eca4:	195b      	adds	r3, r3, r5
 800eca6:	42bb      	cmp	r3, r7
 800eca8:	d900      	bls.n	800ecac <__sfvwrite_r+0x16c>
 800ecaa:	001f      	movs	r7, r3
 800ecac:	0552      	lsls	r2, r2, #21
 800ecae:	d53c      	bpl.n	800ed2a <__sfvwrite_r+0x1ea>
 800ecb0:	0039      	movs	r1, r7
 800ecb2:	9802      	ldr	r0, [sp, #8]
 800ecb4:	f7f8 fb56 	bl	8007364 <_malloc_r>
 800ecb8:	1e06      	subs	r6, r0, #0
 800ecba:	d10a      	bne.n	800ecd2 <__sfvwrite_r+0x192>
 800ecbc:	230c      	movs	r3, #12
 800ecbe:	9a02      	ldr	r2, [sp, #8]
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	2340      	movs	r3, #64	; 0x40
 800ecc4:	89a2      	ldrh	r2, [r4, #12]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	81a3      	strh	r3, [r4, #12]
 800ecca:	e7a5      	b.n	800ec18 <__sfvwrite_r+0xd8>
 800eccc:	0015      	movs	r5, r2
 800ecce:	9203      	str	r2, [sp, #12]
 800ecd0:	e7cc      	b.n	800ec6c <__sfvwrite_r+0x12c>
 800ecd2:	9a05      	ldr	r2, [sp, #20]
 800ecd4:	6921      	ldr	r1, [r4, #16]
 800ecd6:	f7f9 feaa 	bl	8008a2e <memcpy>
 800ecda:	89a2      	ldrh	r2, [r4, #12]
 800ecdc:	4b44      	ldr	r3, [pc, #272]	; (800edf0 <__sfvwrite_r+0x2b0>)
 800ecde:	401a      	ands	r2, r3
 800ece0:	2380      	movs	r3, #128	; 0x80
 800ece2:	4313      	orrs	r3, r2
 800ece4:	81a3      	strh	r3, [r4, #12]
 800ece6:	9b05      	ldr	r3, [sp, #20]
 800ece8:	6126      	str	r6, [r4, #16]
 800ecea:	18f6      	adds	r6, r6, r3
 800ecec:	6026      	str	r6, [r4, #0]
 800ecee:	002e      	movs	r6, r5
 800ecf0:	6167      	str	r7, [r4, #20]
 800ecf2:	1aff      	subs	r7, r7, r3
 800ecf4:	60a7      	str	r7, [r4, #8]
 800ecf6:	002f      	movs	r7, r5
 800ecf8:	42ae      	cmp	r6, r5
 800ecfa:	d900      	bls.n	800ecfe <__sfvwrite_r+0x1be>
 800ecfc:	002e      	movs	r6, r5
 800ecfe:	0032      	movs	r2, r6
 800ed00:	9903      	ldr	r1, [sp, #12]
 800ed02:	6820      	ldr	r0, [r4, #0]
 800ed04:	f000 f983 	bl	800f00e <memmove>
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	1b9b      	subs	r3, r3, r6
 800ed0c:	60a3      	str	r3, [r4, #8]
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	199b      	adds	r3, r3, r6
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	9b03      	ldr	r3, [sp, #12]
 800ed16:	9a04      	ldr	r2, [sp, #16]
 800ed18:	19db      	adds	r3, r3, r7
 800ed1a:	9303      	str	r3, [sp, #12]
 800ed1c:	9b04      	ldr	r3, [sp, #16]
 800ed1e:	1bed      	subs	r5, r5, r7
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	1bdb      	subs	r3, r3, r7
 800ed24:	6093      	str	r3, [r2, #8]
 800ed26:	d1a1      	bne.n	800ec6c <__sfvwrite_r+0x12c>
 800ed28:	e712      	b.n	800eb50 <__sfvwrite_r+0x10>
 800ed2a:	003a      	movs	r2, r7
 800ed2c:	9802      	ldr	r0, [sp, #8]
 800ed2e:	f7fe fcd7 	bl	800d6e0 <_realloc_r>
 800ed32:	1e06      	subs	r6, r0, #0
 800ed34:	d1d7      	bne.n	800ece6 <__sfvwrite_r+0x1a6>
 800ed36:	6921      	ldr	r1, [r4, #16]
 800ed38:	9802      	ldr	r0, [sp, #8]
 800ed3a:	f7f9 fef3 	bl	8008b24 <_free_r>
 800ed3e:	2280      	movs	r2, #128	; 0x80
 800ed40:	89a3      	ldrh	r3, [r4, #12]
 800ed42:	4393      	bics	r3, r2
 800ed44:	81a3      	strh	r3, [r4, #12]
 800ed46:	e7b9      	b.n	800ecbc <__sfvwrite_r+0x17c>
 800ed48:	6923      	ldr	r3, [r4, #16]
 800ed4a:	4283      	cmp	r3, r0
 800ed4c:	d302      	bcc.n	800ed54 <__sfvwrite_r+0x214>
 800ed4e:	6967      	ldr	r7, [r4, #20]
 800ed50:	42af      	cmp	r7, r5
 800ed52:	d916      	bls.n	800ed82 <__sfvwrite_r+0x242>
 800ed54:	42ae      	cmp	r6, r5
 800ed56:	d900      	bls.n	800ed5a <__sfvwrite_r+0x21a>
 800ed58:	002e      	movs	r6, r5
 800ed5a:	0032      	movs	r2, r6
 800ed5c:	9903      	ldr	r1, [sp, #12]
 800ed5e:	f000 f956 	bl	800f00e <memmove>
 800ed62:	68a3      	ldr	r3, [r4, #8]
 800ed64:	6822      	ldr	r2, [r4, #0]
 800ed66:	1b9b      	subs	r3, r3, r6
 800ed68:	1992      	adds	r2, r2, r6
 800ed6a:	0037      	movs	r7, r6
 800ed6c:	60a3      	str	r3, [r4, #8]
 800ed6e:	6022      	str	r2, [r4, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1cf      	bne.n	800ed14 <__sfvwrite_r+0x1d4>
 800ed74:	0021      	movs	r1, r4
 800ed76:	9802      	ldr	r0, [sp, #8]
 800ed78:	f7fd fcc0 	bl	800c6fc <_fflush_r>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d0c9      	beq.n	800ed14 <__sfvwrite_r+0x1d4>
 800ed80:	e79f      	b.n	800ecc2 <__sfvwrite_r+0x182>
 800ed82:	4b1c      	ldr	r3, [pc, #112]	; (800edf4 <__sfvwrite_r+0x2b4>)
 800ed84:	0028      	movs	r0, r5
 800ed86:	429d      	cmp	r5, r3
 800ed88:	d900      	bls.n	800ed8c <__sfvwrite_r+0x24c>
 800ed8a:	481b      	ldr	r0, [pc, #108]	; (800edf8 <__sfvwrite_r+0x2b8>)
 800ed8c:	0039      	movs	r1, r7
 800ed8e:	f7f1 fa5f 	bl	8000250 <__divsi3>
 800ed92:	003b      	movs	r3, r7
 800ed94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed96:	4343      	muls	r3, r0
 800ed98:	9a03      	ldr	r2, [sp, #12]
 800ed9a:	69e1      	ldr	r1, [r4, #28]
 800ed9c:	9802      	ldr	r0, [sp, #8]
 800ed9e:	47b0      	blx	r6
 800eda0:	1e07      	subs	r7, r0, #0
 800eda2:	dcb7      	bgt.n	800ed14 <__sfvwrite_r+0x1d4>
 800eda4:	e78d      	b.n	800ecc2 <__sfvwrite_r+0x182>
 800eda6:	9b01      	ldr	r3, [sp, #4]
 800eda8:	2000      	movs	r0, #0
 800edaa:	681e      	ldr	r6, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	9303      	str	r3, [sp, #12]
 800edb0:	9b01      	ldr	r3, [sp, #4]
 800edb2:	3308      	adds	r3, #8
 800edb4:	9301      	str	r3, [sp, #4]
 800edb6:	e6e6      	b.n	800eb86 <__sfvwrite_r+0x46>
 800edb8:	9a05      	ldr	r2, [sp, #20]
 800edba:	4293      	cmp	r3, r2
 800edbc:	dc08      	bgt.n	800edd0 <__sfvwrite_r+0x290>
 800edbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800edc0:	0032      	movs	r2, r6
 800edc2:	69e1      	ldr	r1, [r4, #28]
 800edc4:	9802      	ldr	r0, [sp, #8]
 800edc6:	47a8      	blx	r5
 800edc8:	1e05      	subs	r5, r0, #0
 800edca:	dd00      	ble.n	800edce <__sfvwrite_r+0x28e>
 800edcc:	e70a      	b.n	800ebe4 <__sfvwrite_r+0xa4>
 800edce:	e778      	b.n	800ecc2 <__sfvwrite_r+0x182>
 800edd0:	9a05      	ldr	r2, [sp, #20]
 800edd2:	0031      	movs	r1, r6
 800edd4:	f000 f91b 	bl	800f00e <memmove>
 800edd8:	9a05      	ldr	r2, [sp, #20]
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	0015      	movs	r5, r2
 800edde:	1a9b      	subs	r3, r3, r2
 800ede0:	60a3      	str	r3, [r4, #8]
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	189b      	adds	r3, r3, r2
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	e6fc      	b.n	800ebe4 <__sfvwrite_r+0xa4>
 800edea:	46c0      	nop			; (mov r8, r8)
 800edec:	7ffffc00 	.word	0x7ffffc00
 800edf0:	fffffb7f 	.word	0xfffffb7f
 800edf4:	7ffffffe 	.word	0x7ffffffe
 800edf8:	7fffffff 	.word	0x7fffffff

0800edfc <__submore>:
 800edfc:	000b      	movs	r3, r1
 800edfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee00:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ee02:	3340      	adds	r3, #64	; 0x40
 800ee04:	000c      	movs	r4, r1
 800ee06:	429d      	cmp	r5, r3
 800ee08:	d11c      	bne.n	800ee44 <__submore+0x48>
 800ee0a:	2680      	movs	r6, #128	; 0x80
 800ee0c:	00f6      	lsls	r6, r6, #3
 800ee0e:	0031      	movs	r1, r6
 800ee10:	f7f8 faa8 	bl	8007364 <_malloc_r>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d102      	bne.n	800ee1e <__submore+0x22>
 800ee18:	2001      	movs	r0, #1
 800ee1a:	4240      	negs	r0, r0
 800ee1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee1e:	0023      	movs	r3, r4
 800ee20:	6320      	str	r0, [r4, #48]	; 0x30
 800ee22:	6366      	str	r6, [r4, #52]	; 0x34
 800ee24:	3342      	adds	r3, #66	; 0x42
 800ee26:	781a      	ldrb	r2, [r3, #0]
 800ee28:	4b10      	ldr	r3, [pc, #64]	; (800ee6c <__submore+0x70>)
 800ee2a:	54c2      	strb	r2, [r0, r3]
 800ee2c:	0023      	movs	r3, r4
 800ee2e:	3341      	adds	r3, #65	; 0x41
 800ee30:	781a      	ldrb	r2, [r3, #0]
 800ee32:	4b0f      	ldr	r3, [pc, #60]	; (800ee70 <__submore+0x74>)
 800ee34:	54c2      	strb	r2, [r0, r3]
 800ee36:	782a      	ldrb	r2, [r5, #0]
 800ee38:	4b0e      	ldr	r3, [pc, #56]	; (800ee74 <__submore+0x78>)
 800ee3a:	54c2      	strb	r2, [r0, r3]
 800ee3c:	18c0      	adds	r0, r0, r3
 800ee3e:	6020      	str	r0, [r4, #0]
 800ee40:	2000      	movs	r0, #0
 800ee42:	e7eb      	b.n	800ee1c <__submore+0x20>
 800ee44:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800ee46:	0029      	movs	r1, r5
 800ee48:	0073      	lsls	r3, r6, #1
 800ee4a:	001a      	movs	r2, r3
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	f7fe fc47 	bl	800d6e0 <_realloc_r>
 800ee52:	1e05      	subs	r5, r0, #0
 800ee54:	d0e0      	beq.n	800ee18 <__submore+0x1c>
 800ee56:	1987      	adds	r7, r0, r6
 800ee58:	0001      	movs	r1, r0
 800ee5a:	0032      	movs	r2, r6
 800ee5c:	0038      	movs	r0, r7
 800ee5e:	f7f9 fde6 	bl	8008a2e <memcpy>
 800ee62:	9b01      	ldr	r3, [sp, #4]
 800ee64:	6027      	str	r7, [r4, #0]
 800ee66:	6325      	str	r5, [r4, #48]	; 0x30
 800ee68:	6363      	str	r3, [r4, #52]	; 0x34
 800ee6a:	e7e9      	b.n	800ee40 <__submore+0x44>
 800ee6c:	000003ff 	.word	0x000003ff
 800ee70:	000003fe 	.word	0x000003fe
 800ee74:	000003fd 	.word	0x000003fd

0800ee78 <__swsetup_r>:
 800ee78:	4b30      	ldr	r3, [pc, #192]	; (800ef3c <__swsetup_r+0xc4>)
 800ee7a:	b570      	push	{r4, r5, r6, lr}
 800ee7c:	0005      	movs	r5, r0
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	000c      	movs	r4, r1
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d004      	beq.n	800ee90 <__swsetup_r+0x18>
 800ee86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d101      	bne.n	800ee90 <__swsetup_r+0x18>
 800ee8c:	f7f9 fbec 	bl	8008668 <__sinit>
 800ee90:	230c      	movs	r3, #12
 800ee92:	5ee2      	ldrsh	r2, [r4, r3]
 800ee94:	b293      	uxth	r3, r2
 800ee96:	0711      	lsls	r1, r2, #28
 800ee98:	d423      	bmi.n	800eee2 <__swsetup_r+0x6a>
 800ee9a:	06d9      	lsls	r1, r3, #27
 800ee9c:	d407      	bmi.n	800eeae <__swsetup_r+0x36>
 800ee9e:	2309      	movs	r3, #9
 800eea0:	2001      	movs	r0, #1
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	3337      	adds	r3, #55	; 0x37
 800eea6:	4313      	orrs	r3, r2
 800eea8:	81a3      	strh	r3, [r4, #12]
 800eeaa:	4240      	negs	r0, r0
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
 800eeae:	075b      	lsls	r3, r3, #29
 800eeb0:	d513      	bpl.n	800eeda <__swsetup_r+0x62>
 800eeb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eeb4:	2900      	cmp	r1, #0
 800eeb6:	d008      	beq.n	800eeca <__swsetup_r+0x52>
 800eeb8:	0023      	movs	r3, r4
 800eeba:	3340      	adds	r3, #64	; 0x40
 800eebc:	4299      	cmp	r1, r3
 800eebe:	d002      	beq.n	800eec6 <__swsetup_r+0x4e>
 800eec0:	0028      	movs	r0, r5
 800eec2:	f7f9 fe2f 	bl	8008b24 <_free_r>
 800eec6:	2300      	movs	r3, #0
 800eec8:	6323      	str	r3, [r4, #48]	; 0x30
 800eeca:	2224      	movs	r2, #36	; 0x24
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	4393      	bics	r3, r2
 800eed0:	81a3      	strh	r3, [r4, #12]
 800eed2:	2300      	movs	r3, #0
 800eed4:	6063      	str	r3, [r4, #4]
 800eed6:	6923      	ldr	r3, [r4, #16]
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	2308      	movs	r3, #8
 800eedc:	89a2      	ldrh	r2, [r4, #12]
 800eede:	4313      	orrs	r3, r2
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	6923      	ldr	r3, [r4, #16]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10b      	bne.n	800ef00 <__swsetup_r+0x88>
 800eee8:	21a0      	movs	r1, #160	; 0xa0
 800eeea:	2280      	movs	r2, #128	; 0x80
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	0089      	lsls	r1, r1, #2
 800eef0:	0092      	lsls	r2, r2, #2
 800eef2:	400b      	ands	r3, r1
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d003      	beq.n	800ef00 <__swsetup_r+0x88>
 800eef8:	0021      	movs	r1, r4
 800eefa:	0028      	movs	r0, r5
 800eefc:	f000 f8e8 	bl	800f0d0 <__smakebuf_r>
 800ef00:	220c      	movs	r2, #12
 800ef02:	5ea3      	ldrsh	r3, [r4, r2]
 800ef04:	2001      	movs	r0, #1
 800ef06:	001a      	movs	r2, r3
 800ef08:	b299      	uxth	r1, r3
 800ef0a:	4002      	ands	r2, r0
 800ef0c:	4203      	tst	r3, r0
 800ef0e:	d00f      	beq.n	800ef30 <__swsetup_r+0xb8>
 800ef10:	2200      	movs	r2, #0
 800ef12:	60a2      	str	r2, [r4, #8]
 800ef14:	6962      	ldr	r2, [r4, #20]
 800ef16:	4252      	negs	r2, r2
 800ef18:	61a2      	str	r2, [r4, #24]
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	6922      	ldr	r2, [r4, #16]
 800ef1e:	4282      	cmp	r2, r0
 800ef20:	d1c4      	bne.n	800eeac <__swsetup_r+0x34>
 800ef22:	0609      	lsls	r1, r1, #24
 800ef24:	d5c2      	bpl.n	800eeac <__swsetup_r+0x34>
 800ef26:	2240      	movs	r2, #64	; 0x40
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	81a3      	strh	r3, [r4, #12]
 800ef2c:	3801      	subs	r0, #1
 800ef2e:	e7bd      	b.n	800eeac <__swsetup_r+0x34>
 800ef30:	0788      	lsls	r0, r1, #30
 800ef32:	d400      	bmi.n	800ef36 <__swsetup_r+0xbe>
 800ef34:	6962      	ldr	r2, [r4, #20]
 800ef36:	60a2      	str	r2, [r4, #8]
 800ef38:	e7ef      	b.n	800ef1a <__swsetup_r+0xa2>
 800ef3a:	46c0      	nop			; (mov r8, r8)
 800ef3c:	200006e0 	.word	0x200006e0

0800ef40 <__fputwc>:
 800ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef42:	b085      	sub	sp, #20
 800ef44:	000e      	movs	r6, r1
 800ef46:	0015      	movs	r5, r2
 800ef48:	9001      	str	r0, [sp, #4]
 800ef4a:	f7f9 fccf 	bl	80088ec <__locale_mb_cur_max>
 800ef4e:	0004      	movs	r4, r0
 800ef50:	2801      	cmp	r0, #1
 800ef52:	d119      	bne.n	800ef88 <__fputwc+0x48>
 800ef54:	1e73      	subs	r3, r6, #1
 800ef56:	2bfe      	cmp	r3, #254	; 0xfe
 800ef58:	d816      	bhi.n	800ef88 <__fputwc+0x48>
 800ef5a:	ab02      	add	r3, sp, #8
 800ef5c:	711e      	strb	r6, [r3, #4]
 800ef5e:	2700      	movs	r7, #0
 800ef60:	42a7      	cmp	r7, r4
 800ef62:	d020      	beq.n	800efa6 <__fputwc+0x66>
 800ef64:	ab03      	add	r3, sp, #12
 800ef66:	5dd9      	ldrb	r1, [r3, r7]
 800ef68:	68ab      	ldr	r3, [r5, #8]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	60ab      	str	r3, [r5, #8]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	da04      	bge.n	800ef7c <__fputwc+0x3c>
 800ef72:	69aa      	ldr	r2, [r5, #24]
 800ef74:	4293      	cmp	r3, r2
 800ef76:	db19      	blt.n	800efac <__fputwc+0x6c>
 800ef78:	290a      	cmp	r1, #10
 800ef7a:	d017      	beq.n	800efac <__fputwc+0x6c>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	1c5a      	adds	r2, r3, #1
 800ef80:	602a      	str	r2, [r5, #0]
 800ef82:	7019      	strb	r1, [r3, #0]
 800ef84:	3701      	adds	r7, #1
 800ef86:	e7eb      	b.n	800ef60 <__fputwc+0x20>
 800ef88:	002b      	movs	r3, r5
 800ef8a:	0032      	movs	r2, r6
 800ef8c:	9801      	ldr	r0, [sp, #4]
 800ef8e:	335c      	adds	r3, #92	; 0x5c
 800ef90:	a903      	add	r1, sp, #12
 800ef92:	f000 f857 	bl	800f044 <_wcrtomb_r>
 800ef96:	0004      	movs	r4, r0
 800ef98:	1c43      	adds	r3, r0, #1
 800ef9a:	d1e0      	bne.n	800ef5e <__fputwc+0x1e>
 800ef9c:	2340      	movs	r3, #64	; 0x40
 800ef9e:	0006      	movs	r6, r0
 800efa0:	89aa      	ldrh	r2, [r5, #12]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	81ab      	strh	r3, [r5, #12]
 800efa6:	0030      	movs	r0, r6
 800efa8:	b005      	add	sp, #20
 800efaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efac:	002a      	movs	r2, r5
 800efae:	9801      	ldr	r0, [sp, #4]
 800efb0:	f000 f8cc 	bl	800f14c <__swbuf_r>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d1e5      	bne.n	800ef84 <__fputwc+0x44>
 800efb8:	0006      	movs	r6, r0
 800efba:	e7f4      	b.n	800efa6 <__fputwc+0x66>

0800efbc <_fputwc_r>:
 800efbc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800efbe:	b570      	push	{r4, r5, r6, lr}
 800efc0:	0005      	movs	r5, r0
 800efc2:	000e      	movs	r6, r1
 800efc4:	0014      	movs	r4, r2
 800efc6:	07db      	lsls	r3, r3, #31
 800efc8:	d405      	bmi.n	800efd6 <_fputwc_r+0x1a>
 800efca:	8993      	ldrh	r3, [r2, #12]
 800efcc:	059b      	lsls	r3, r3, #22
 800efce:	d402      	bmi.n	800efd6 <_fputwc_r+0x1a>
 800efd0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800efd2:	f7f9 fd1f 	bl	8008a14 <__retarget_lock_acquire_recursive>
 800efd6:	230c      	movs	r3, #12
 800efd8:	5ee2      	ldrsh	r2, [r4, r3]
 800efda:	2380      	movs	r3, #128	; 0x80
 800efdc:	019b      	lsls	r3, r3, #6
 800efde:	421a      	tst	r2, r3
 800efe0:	d104      	bne.n	800efec <_fputwc_r+0x30>
 800efe2:	431a      	orrs	r2, r3
 800efe4:	81a2      	strh	r2, [r4, #12]
 800efe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efe8:	4313      	orrs	r3, r2
 800efea:	6663      	str	r3, [r4, #100]	; 0x64
 800efec:	0028      	movs	r0, r5
 800efee:	0022      	movs	r2, r4
 800eff0:	0031      	movs	r1, r6
 800eff2:	f7ff ffa5 	bl	800ef40 <__fputwc>
 800eff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eff8:	0005      	movs	r5, r0
 800effa:	07db      	lsls	r3, r3, #31
 800effc:	d405      	bmi.n	800f00a <_fputwc_r+0x4e>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	059b      	lsls	r3, r3, #22
 800f002:	d402      	bmi.n	800f00a <_fputwc_r+0x4e>
 800f004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f006:	f7f9 fd06 	bl	8008a16 <__retarget_lock_release_recursive>
 800f00a:	0028      	movs	r0, r5
 800f00c:	bd70      	pop	{r4, r5, r6, pc}

0800f00e <memmove>:
 800f00e:	b510      	push	{r4, lr}
 800f010:	4288      	cmp	r0, r1
 800f012:	d902      	bls.n	800f01a <memmove+0xc>
 800f014:	188b      	adds	r3, r1, r2
 800f016:	4298      	cmp	r0, r3
 800f018:	d303      	bcc.n	800f022 <memmove+0x14>
 800f01a:	2300      	movs	r3, #0
 800f01c:	e007      	b.n	800f02e <memmove+0x20>
 800f01e:	5c8b      	ldrb	r3, [r1, r2]
 800f020:	5483      	strb	r3, [r0, r2]
 800f022:	3a01      	subs	r2, #1
 800f024:	d2fb      	bcs.n	800f01e <memmove+0x10>
 800f026:	bd10      	pop	{r4, pc}
 800f028:	5ccc      	ldrb	r4, [r1, r3]
 800f02a:	54c4      	strb	r4, [r0, r3]
 800f02c:	3301      	adds	r3, #1
 800f02e:	429a      	cmp	r2, r3
 800f030:	d1fa      	bne.n	800f028 <memmove+0x1a>
 800f032:	e7f8      	b.n	800f026 <memmove+0x18>

0800f034 <abort>:
 800f034:	2006      	movs	r0, #6
 800f036:	b510      	push	{r4, lr}
 800f038:	f000 f906 	bl	800f248 <raise>
 800f03c:	2001      	movs	r0, #1
 800f03e:	f7f4 f96b 	bl	8003318 <_exit>
	...

0800f044 <_wcrtomb_r>:
 800f044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f046:	001d      	movs	r5, r3
 800f048:	4b09      	ldr	r3, [pc, #36]	; (800f070 <_wcrtomb_r+0x2c>)
 800f04a:	0004      	movs	r4, r0
 800f04c:	33e0      	adds	r3, #224	; 0xe0
 800f04e:	681e      	ldr	r6, [r3, #0]
 800f050:	002b      	movs	r3, r5
 800f052:	2900      	cmp	r1, #0
 800f054:	d101      	bne.n	800f05a <_wcrtomb_r+0x16>
 800f056:	000a      	movs	r2, r1
 800f058:	a901      	add	r1, sp, #4
 800f05a:	0020      	movs	r0, r4
 800f05c:	47b0      	blx	r6
 800f05e:	1c43      	adds	r3, r0, #1
 800f060:	d103      	bne.n	800f06a <_wcrtomb_r+0x26>
 800f062:	2300      	movs	r3, #0
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	338a      	adds	r3, #138	; 0x8a
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	b004      	add	sp, #16
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	46c0      	nop			; (mov r8, r8)
 800f070:	20000450 	.word	0x20000450

0800f074 <__swhatbuf_r>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	000e      	movs	r6, r1
 800f078:	001d      	movs	r5, r3
 800f07a:	230e      	movs	r3, #14
 800f07c:	5ec9      	ldrsh	r1, [r1, r3]
 800f07e:	0014      	movs	r4, r2
 800f080:	b096      	sub	sp, #88	; 0x58
 800f082:	2900      	cmp	r1, #0
 800f084:	da09      	bge.n	800f09a <__swhatbuf_r+0x26>
 800f086:	89b2      	ldrh	r2, [r6, #12]
 800f088:	2380      	movs	r3, #128	; 0x80
 800f08a:	0011      	movs	r1, r2
 800f08c:	4019      	ands	r1, r3
 800f08e:	421a      	tst	r2, r3
 800f090:	d018      	beq.n	800f0c4 <__swhatbuf_r+0x50>
 800f092:	2100      	movs	r1, #0
 800f094:	3b40      	subs	r3, #64	; 0x40
 800f096:	0008      	movs	r0, r1
 800f098:	e010      	b.n	800f0bc <__swhatbuf_r+0x48>
 800f09a:	466a      	mov	r2, sp
 800f09c:	f000 f8de 	bl	800f25c <_fstat_r>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	dbf0      	blt.n	800f086 <__swhatbuf_r+0x12>
 800f0a4:	23f0      	movs	r3, #240	; 0xf0
 800f0a6:	9901      	ldr	r1, [sp, #4]
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	4019      	ands	r1, r3
 800f0ac:	4b07      	ldr	r3, [pc, #28]	; (800f0cc <__swhatbuf_r+0x58>)
 800f0ae:	2080      	movs	r0, #128	; 0x80
 800f0b0:	18c9      	adds	r1, r1, r3
 800f0b2:	424b      	negs	r3, r1
 800f0b4:	4159      	adcs	r1, r3
 800f0b6:	2380      	movs	r3, #128	; 0x80
 800f0b8:	0100      	lsls	r0, r0, #4
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	6029      	str	r1, [r5, #0]
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	b016      	add	sp, #88	; 0x58
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	2380      	movs	r3, #128	; 0x80
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	e7e5      	b.n	800f096 <__swhatbuf_r+0x22>
 800f0ca:	46c0      	nop			; (mov r8, r8)
 800f0cc:	ffffe000 	.word	0xffffe000

0800f0d0 <__smakebuf_r>:
 800f0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0d2:	2602      	movs	r6, #2
 800f0d4:	898b      	ldrh	r3, [r1, #12]
 800f0d6:	0005      	movs	r5, r0
 800f0d8:	000c      	movs	r4, r1
 800f0da:	4233      	tst	r3, r6
 800f0dc:	d006      	beq.n	800f0ec <__smakebuf_r+0x1c>
 800f0de:	0023      	movs	r3, r4
 800f0e0:	3343      	adds	r3, #67	; 0x43
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	6163      	str	r3, [r4, #20]
 800f0ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f0ec:	466a      	mov	r2, sp
 800f0ee:	ab01      	add	r3, sp, #4
 800f0f0:	f7ff ffc0 	bl	800f074 <__swhatbuf_r>
 800f0f4:	9900      	ldr	r1, [sp, #0]
 800f0f6:	0007      	movs	r7, r0
 800f0f8:	0028      	movs	r0, r5
 800f0fa:	f7f8 f933 	bl	8007364 <_malloc_r>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d108      	bne.n	800f114 <__smakebuf_r+0x44>
 800f102:	220c      	movs	r2, #12
 800f104:	5ea3      	ldrsh	r3, [r4, r2]
 800f106:	059a      	lsls	r2, r3, #22
 800f108:	d4ef      	bmi.n	800f0ea <__smakebuf_r+0x1a>
 800f10a:	2203      	movs	r2, #3
 800f10c:	4393      	bics	r3, r2
 800f10e:	431e      	orrs	r6, r3
 800f110:	81a6      	strh	r6, [r4, #12]
 800f112:	e7e4      	b.n	800f0de <__smakebuf_r+0xe>
 800f114:	2380      	movs	r3, #128	; 0x80
 800f116:	89a2      	ldrh	r2, [r4, #12]
 800f118:	6020      	str	r0, [r4, #0]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	6120      	str	r0, [r4, #16]
 800f122:	6163      	str	r3, [r4, #20]
 800f124:	9b01      	ldr	r3, [sp, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00c      	beq.n	800f144 <__smakebuf_r+0x74>
 800f12a:	0028      	movs	r0, r5
 800f12c:	230e      	movs	r3, #14
 800f12e:	5ee1      	ldrsh	r1, [r4, r3]
 800f130:	f000 f8a6 	bl	800f280 <_isatty_r>
 800f134:	2800      	cmp	r0, #0
 800f136:	d005      	beq.n	800f144 <__smakebuf_r+0x74>
 800f138:	2303      	movs	r3, #3
 800f13a:	89a2      	ldrh	r2, [r4, #12]
 800f13c:	439a      	bics	r2, r3
 800f13e:	3b02      	subs	r3, #2
 800f140:	4313      	orrs	r3, r2
 800f142:	81a3      	strh	r3, [r4, #12]
 800f144:	89a3      	ldrh	r3, [r4, #12]
 800f146:	433b      	orrs	r3, r7
 800f148:	81a3      	strh	r3, [r4, #12]
 800f14a:	e7ce      	b.n	800f0ea <__smakebuf_r+0x1a>

0800f14c <__swbuf_r>:
 800f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14e:	0006      	movs	r6, r0
 800f150:	000d      	movs	r5, r1
 800f152:	0014      	movs	r4, r2
 800f154:	2800      	cmp	r0, #0
 800f156:	d004      	beq.n	800f162 <__swbuf_r+0x16>
 800f158:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <__swbuf_r+0x16>
 800f15e:	f7f9 fa83 	bl	8008668 <__sinit>
 800f162:	69a3      	ldr	r3, [r4, #24]
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	89a3      	ldrh	r3, [r4, #12]
 800f168:	071b      	lsls	r3, r3, #28
 800f16a:	d52e      	bpl.n	800f1ca <__swbuf_r+0x7e>
 800f16c:	6923      	ldr	r3, [r4, #16]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d02b      	beq.n	800f1ca <__swbuf_r+0x7e>
 800f172:	230c      	movs	r3, #12
 800f174:	5ee2      	ldrsh	r2, [r4, r3]
 800f176:	2380      	movs	r3, #128	; 0x80
 800f178:	019b      	lsls	r3, r3, #6
 800f17a:	b2ef      	uxtb	r7, r5
 800f17c:	b2ed      	uxtb	r5, r5
 800f17e:	421a      	tst	r2, r3
 800f180:	d02c      	beq.n	800f1dc <__swbuf_r+0x90>
 800f182:	6923      	ldr	r3, [r4, #16]
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	1ac0      	subs	r0, r0, r3
 800f188:	6963      	ldr	r3, [r4, #20]
 800f18a:	4283      	cmp	r3, r0
 800f18c:	dc05      	bgt.n	800f19a <__swbuf_r+0x4e>
 800f18e:	0021      	movs	r1, r4
 800f190:	0030      	movs	r0, r6
 800f192:	f7fd fab3 	bl	800c6fc <_fflush_r>
 800f196:	2800      	cmp	r0, #0
 800f198:	d11d      	bne.n	800f1d6 <__swbuf_r+0x8a>
 800f19a:	68a3      	ldr	r3, [r4, #8]
 800f19c:	3001      	adds	r0, #1
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	60a3      	str	r3, [r4, #8]
 800f1a2:	6823      	ldr	r3, [r4, #0]
 800f1a4:	1c5a      	adds	r2, r3, #1
 800f1a6:	6022      	str	r2, [r4, #0]
 800f1a8:	701f      	strb	r7, [r3, #0]
 800f1aa:	6963      	ldr	r3, [r4, #20]
 800f1ac:	4283      	cmp	r3, r0
 800f1ae:	d004      	beq.n	800f1ba <__swbuf_r+0x6e>
 800f1b0:	89a3      	ldrh	r3, [r4, #12]
 800f1b2:	07db      	lsls	r3, r3, #31
 800f1b4:	d507      	bpl.n	800f1c6 <__swbuf_r+0x7a>
 800f1b6:	2d0a      	cmp	r5, #10
 800f1b8:	d105      	bne.n	800f1c6 <__swbuf_r+0x7a>
 800f1ba:	0021      	movs	r1, r4
 800f1bc:	0030      	movs	r0, r6
 800f1be:	f7fd fa9d 	bl	800c6fc <_fflush_r>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d107      	bne.n	800f1d6 <__swbuf_r+0x8a>
 800f1c6:	0028      	movs	r0, r5
 800f1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ca:	0021      	movs	r1, r4
 800f1cc:	0030      	movs	r0, r6
 800f1ce:	f7ff fe53 	bl	800ee78 <__swsetup_r>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d0cd      	beq.n	800f172 <__swbuf_r+0x26>
 800f1d6:	2501      	movs	r5, #1
 800f1d8:	426d      	negs	r5, r5
 800f1da:	e7f4      	b.n	800f1c6 <__swbuf_r+0x7a>
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	4a02      	ldr	r2, [pc, #8]	; (800f1ec <__swbuf_r+0xa0>)
 800f1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	6663      	str	r3, [r4, #100]	; 0x64
 800f1e8:	e7cb      	b.n	800f182 <__swbuf_r+0x36>
 800f1ea:	46c0      	nop			; (mov r8, r8)
 800f1ec:	ffffdfff 	.word	0xffffdfff

0800f1f0 <_raise_r>:
 800f1f0:	b570      	push	{r4, r5, r6, lr}
 800f1f2:	0004      	movs	r4, r0
 800f1f4:	000d      	movs	r5, r1
 800f1f6:	291f      	cmp	r1, #31
 800f1f8:	d904      	bls.n	800f204 <_raise_r+0x14>
 800f1fa:	2316      	movs	r3, #22
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	2001      	movs	r0, #1
 800f200:	4240      	negs	r0, r0
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	0003      	movs	r3, r0
 800f206:	33fc      	adds	r3, #252	; 0xfc
 800f208:	69db      	ldr	r3, [r3, #28]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d004      	beq.n	800f218 <_raise_r+0x28>
 800f20e:	008a      	lsls	r2, r1, #2
 800f210:	189b      	adds	r3, r3, r2
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	2a00      	cmp	r2, #0
 800f216:	d108      	bne.n	800f22a <_raise_r+0x3a>
 800f218:	0020      	movs	r0, r4
 800f21a:	f000 f855 	bl	800f2c8 <_getpid_r>
 800f21e:	002a      	movs	r2, r5
 800f220:	0001      	movs	r1, r0
 800f222:	0020      	movs	r0, r4
 800f224:	f000 f83e 	bl	800f2a4 <_kill_r>
 800f228:	e7eb      	b.n	800f202 <_raise_r+0x12>
 800f22a:	2000      	movs	r0, #0
 800f22c:	2a01      	cmp	r2, #1
 800f22e:	d0e8      	beq.n	800f202 <_raise_r+0x12>
 800f230:	1c51      	adds	r1, r2, #1
 800f232:	d103      	bne.n	800f23c <_raise_r+0x4c>
 800f234:	2316      	movs	r3, #22
 800f236:	3001      	adds	r0, #1
 800f238:	6023      	str	r3, [r4, #0]
 800f23a:	e7e2      	b.n	800f202 <_raise_r+0x12>
 800f23c:	2400      	movs	r4, #0
 800f23e:	0028      	movs	r0, r5
 800f240:	601c      	str	r4, [r3, #0]
 800f242:	4790      	blx	r2
 800f244:	0020      	movs	r0, r4
 800f246:	e7dc      	b.n	800f202 <_raise_r+0x12>

0800f248 <raise>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	4b03      	ldr	r3, [pc, #12]	; (800f258 <raise+0x10>)
 800f24c:	0001      	movs	r1, r0
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	f7ff ffce 	bl	800f1f0 <_raise_r>
 800f254:	bd10      	pop	{r4, pc}
 800f256:	46c0      	nop			; (mov r8, r8)
 800f258:	200006e0 	.word	0x200006e0

0800f25c <_fstat_r>:
 800f25c:	2300      	movs	r3, #0
 800f25e:	b570      	push	{r4, r5, r6, lr}
 800f260:	4d06      	ldr	r5, [pc, #24]	; (800f27c <_fstat_r+0x20>)
 800f262:	0004      	movs	r4, r0
 800f264:	0008      	movs	r0, r1
 800f266:	0011      	movs	r1, r2
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f7f4 f8a4 	bl	80033b6 <_fstat>
 800f26e:	1c43      	adds	r3, r0, #1
 800f270:	d103      	bne.n	800f27a <_fstat_r+0x1e>
 800f272:	682b      	ldr	r3, [r5, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d000      	beq.n	800f27a <_fstat_r+0x1e>
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	20000dc4 	.word	0x20000dc4

0800f280 <_isatty_r>:
 800f280:	2300      	movs	r3, #0
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	4d06      	ldr	r5, [pc, #24]	; (800f2a0 <_isatty_r+0x20>)
 800f286:	0004      	movs	r4, r0
 800f288:	0008      	movs	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f4 f8a1 	bl	80033d2 <_isatty>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d103      	bne.n	800f29c <_isatty_r+0x1c>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d000      	beq.n	800f29c <_isatty_r+0x1c>
 800f29a:	6023      	str	r3, [r4, #0]
 800f29c:	bd70      	pop	{r4, r5, r6, pc}
 800f29e:	46c0      	nop			; (mov r8, r8)
 800f2a0:	20000dc4 	.word	0x20000dc4

0800f2a4 <_kill_r>:
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	b570      	push	{r4, r5, r6, lr}
 800f2a8:	4d06      	ldr	r5, [pc, #24]	; (800f2c4 <_kill_r+0x20>)
 800f2aa:	0004      	movs	r4, r0
 800f2ac:	0008      	movs	r0, r1
 800f2ae:	0011      	movs	r1, r2
 800f2b0:	602b      	str	r3, [r5, #0]
 800f2b2:	f7f4 f821 	bl	80032f8 <_kill>
 800f2b6:	1c43      	adds	r3, r0, #1
 800f2b8:	d103      	bne.n	800f2c2 <_kill_r+0x1e>
 800f2ba:	682b      	ldr	r3, [r5, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d000      	beq.n	800f2c2 <_kill_r+0x1e>
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	bd70      	pop	{r4, r5, r6, pc}
 800f2c4:	20000dc4 	.word	0x20000dc4

0800f2c8 <_getpid_r>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	f7f4 f80f 	bl	80032ec <_getpid>
 800f2ce:	bd10      	pop	{r4, pc}

0800f2d0 <round>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	004a      	lsls	r2, r1, #1
 800f2d4:	000d      	movs	r5, r1
 800f2d6:	4920      	ldr	r1, [pc, #128]	; (800f358 <round+0x88>)
 800f2d8:	0d52      	lsrs	r2, r2, #21
 800f2da:	1851      	adds	r1, r2, r1
 800f2dc:	0006      	movs	r6, r0
 800f2de:	2913      	cmp	r1, #19
 800f2e0:	dc18      	bgt.n	800f314 <round+0x44>
 800f2e2:	2900      	cmp	r1, #0
 800f2e4:	da09      	bge.n	800f2fa <round+0x2a>
 800f2e6:	0feb      	lsrs	r3, r5, #31
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	07db      	lsls	r3, r3, #31
 800f2ec:	3101      	adds	r1, #1
 800f2ee:	d101      	bne.n	800f2f4 <round+0x24>
 800f2f0:	491a      	ldr	r1, [pc, #104]	; (800f35c <round+0x8c>)
 800f2f2:	430b      	orrs	r3, r1
 800f2f4:	0019      	movs	r1, r3
 800f2f6:	0010      	movs	r0, r2
 800f2f8:	e017      	b.n	800f32a <round+0x5a>
 800f2fa:	4c19      	ldr	r4, [pc, #100]	; (800f360 <round+0x90>)
 800f2fc:	410c      	asrs	r4, r1
 800f2fe:	0022      	movs	r2, r4
 800f300:	402a      	ands	r2, r5
 800f302:	4302      	orrs	r2, r0
 800f304:	d013      	beq.n	800f32e <round+0x5e>
 800f306:	2280      	movs	r2, #128	; 0x80
 800f308:	0312      	lsls	r2, r2, #12
 800f30a:	410a      	asrs	r2, r1
 800f30c:	1953      	adds	r3, r2, r5
 800f30e:	43a3      	bics	r3, r4
 800f310:	2200      	movs	r2, #0
 800f312:	e7ef      	b.n	800f2f4 <round+0x24>
 800f314:	2933      	cmp	r1, #51	; 0x33
 800f316:	dd0d      	ble.n	800f334 <round+0x64>
 800f318:	2380      	movs	r3, #128	; 0x80
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	4299      	cmp	r1, r3
 800f31e:	d106      	bne.n	800f32e <round+0x5e>
 800f320:	0002      	movs	r2, r0
 800f322:	002b      	movs	r3, r5
 800f324:	0029      	movs	r1, r5
 800f326:	f7f1 fa47 	bl	80007b8 <__aeabi_dadd>
 800f32a:	0006      	movs	r6, r0
 800f32c:	000d      	movs	r5, r1
 800f32e:	0030      	movs	r0, r6
 800f330:	0029      	movs	r1, r5
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	4c0b      	ldr	r4, [pc, #44]	; (800f364 <round+0x94>)
 800f336:	1912      	adds	r2, r2, r4
 800f338:	2401      	movs	r4, #1
 800f33a:	4264      	negs	r4, r4
 800f33c:	40d4      	lsrs	r4, r2
 800f33e:	4220      	tst	r0, r4
 800f340:	d0f5      	beq.n	800f32e <round+0x5e>
 800f342:	2233      	movs	r2, #51	; 0x33
 800f344:	1a51      	subs	r1, r2, r1
 800f346:	3a32      	subs	r2, #50	; 0x32
 800f348:	408a      	lsls	r2, r1
 800f34a:	1812      	adds	r2, r2, r0
 800f34c:	4282      	cmp	r2, r0
 800f34e:	4180      	sbcs	r0, r0
 800f350:	4240      	negs	r0, r0
 800f352:	182b      	adds	r3, r5, r0
 800f354:	43a2      	bics	r2, r4
 800f356:	e7cd      	b.n	800f2f4 <round+0x24>
 800f358:	fffffc01 	.word	0xfffffc01
 800f35c:	3ff00000 	.word	0x3ff00000
 800f360:	000fffff 	.word	0x000fffff
 800f364:	fffffbed 	.word	0xfffffbed

0800f368 <_init>:
 800f368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36a:	46c0      	nop			; (mov r8, r8)
 800f36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f36e:	bc08      	pop	{r3}
 800f370:	469e      	mov	lr, r3
 800f372:	4770      	bx	lr

0800f374 <_fini>:
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f37a:	bc08      	pop	{r3}
 800f37c:	469e      	mov	lr, r3
 800f37e:	4770      	bx	lr
