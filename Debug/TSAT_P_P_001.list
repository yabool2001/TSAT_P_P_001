
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001161c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cbc  080116d8  080116d8  000216d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013394  08013394  000306e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013394  08013394  00023394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801339c  0801339c  000306e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801339c  0801339c  0002339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133a4  080133a4  000233a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e8  20000000  080133a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  200006e8  08013a90  000306e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08013a90  00030ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a6d  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358e  00000000  00000000  000491c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0004c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121a  00000000  00000000  0004de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cdff  00000000  00000000  0004f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c56d  00000000  00000000  0006be49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afdd1  00000000  00000000  000883b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e94  00000000  00000000  00138188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e8 	.word	0x200006e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080116c0 	.word	0x080116c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006ec 	.word	0x200006ec
 8000100:	080116c0 	.word	0x080116c0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08012e14 	.word	0x08012e14
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b0ac      	sub	sp, #176	; 0xb0
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f901 	bl	80037b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 fa01 	bl	80029b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fc3d 	bl	8002e34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fbb9 	bl	8002d30 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fb69 	bl	8002c94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fc03 	bl	8002dcc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80025c6:	f000 fa43 	bl	8002a50 <MX_I2C1_Init>
  MX_TIM6_Init();
 80025ca:	f000 fb25 	bl	8002c18 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 fa7f 	bl	8002ad0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4bd8      	ldr	r3, [pc, #864]	; (8002934 <main+0x38c>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4bd7      	ldr	r3, [pc, #860]	; (8002934 <main+0x38c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	48d3      	ldr	r0, [pc, #844]	; (8002938 <main+0x390>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f003 fda6 	bl	800613c <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 80025f0:	4bd2      	ldr	r3, [pc, #840]	; (800293c <main+0x394>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 80025fa:	f000 fd63 	bl	80030c4 <my_astro_off>

  my_astro_on () ;
 80025fe:	f000 fd53 	bl	80030a8 <my_astro_on>
  reset_astronode () ;
 8002602:	f000 fcd5 	bl	8002fb0 <reset_astronode>
  print_housekeeping_timer = get_systick () ;
 8002606:	f000 fd31 	bl	800306c <get_systick>
 800260a:	0002      	movs	r2, r0
 800260c:	4bcc      	ldr	r3, [pc, #816]	; (8002940 <main+0x398>)
 800260e:	601a      	str	r2, [r3, #0]
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8002610:	2300      	movs	r3, #0
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	2301      	movs	r3, #1
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	2301      	movs	r3, #1
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	2301      	movs	r3, #1
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	2201      	movs	r2, #1
 8002624:	2100      	movs	r1, #0
 8002626:	2001      	movs	r0, #1
 8002628:	f004 fce0 	bl	8006fec <astronode_send_cfg_wr>
  astronode_send_cfg_sr () ;
 800262c:	f004 fca6 	bl	8006f7c <astronode_send_cfg_sr>
  astronode_send_mpn_rr () ;
 8002630:	f005 fa3a 	bl	8007aa8 <astronode_send_mpn_rr>
  astronode_send_msn_rr () ;
 8002634:	f004 fe2e 	bl	8007294 <astronode_send_msn_rr>
  astronode_send_mgi_rr () ;
 8002638:	f004 fd82 	bl	8007140 <astronode_send_mgi_rr>
  //my_astro_off () ;




  my_lx6_on () ;
 800263c:	f000 fd54 	bl	80030e8 <my_lx6_on>
  nmea_latitude[0] = 0 ;
 8002640:	4bc0      	ldr	r3, [pc, #768]	; (8002944 <main+0x39c>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
  nmea_longitude[0] = 0 ;
 8002646:	4bc0      	ldr	r3, [pc, #768]	; (8002948 <main+0x3a0>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
  gngll_message[0] = 0 ;
 800264c:	4bbf      	ldr	r3, [pc, #764]	; (800294c <main+0x3a4>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
  nmea_fixed_pdop_d = 1000.0 ;
 8002652:	49bf      	ldr	r1, [pc, #764]	; (8002950 <main+0x3a8>)
 8002654:	2200      	movs	r2, #0
 8002656:	4bbf      	ldr	r3, [pc, #764]	; (8002954 <main+0x3ac>)
 8002658:	600a      	str	r2, [r1, #0]
 800265a:	604b      	str	r3, [r1, #4]
  received_nmea_rmc_flag = false ;
 800265c:	4bbe      	ldr	r3, [pc, #760]	; (8002958 <main+0x3b0>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 8002662:	4bbe      	ldr	r3, [pc, #760]	; (800295c <main+0x3b4>)
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8002668:	4bb4      	ldr	r3, [pc, #720]	; (800293c <main+0x394>)
 800266a:	0018      	movs	r0, r3
 800266c:	f003 f9ee 	bl	8005a4c <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 8002670:	e0a0      	b.n	80027b4 <main+0x20c>
  {
	  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8002672:	23fa      	movs	r3, #250	; 0xfa
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	49ba      	ldr	r1, [pc, #744]	; (8002960 <main+0x3b8>)
 8002678:	48ba      	ldr	r0, [pc, #744]	; (8002964 <main+0x3bc>)
 800267a:	2201      	movs	r2, #1
 800267c:	f003 fdfa 	bl	8006274 <HAL_UART_Receive>
	  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8002680:	23fa      	movs	r3, #250	; 0xfa
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	49b6      	ldr	r1, [pc, #728]	; (8002960 <main+0x3b8>)
 8002686:	48ac      	ldr	r0, [pc, #688]	; (8002938 <main+0x390>)
 8002688:	2201      	movs	r2, #1
 800268a:	f003 fd57 	bl	800613c <HAL_UART_Transmit>
	  if ( rxd_byte )
 800268e:	4bb4      	ldr	r3, [pc, #720]	; (8002960 <main+0x3b8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d067      	beq.n	8002766 <main+0x1be>
	  {
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8002696:	4ab4      	ldr	r2, [pc, #720]	; (8002968 <main+0x3c0>)
 8002698:	49b4      	ldr	r1, [pc, #720]	; (800296c <main+0x3c4>)
 800269a:	4bb1      	ldr	r3, [pc, #708]	; (8002960 <main+0x3b8>)
 800269c:	0018      	movs	r0, r3
 800269e:	f006 fb28 	bl	8008cf2 <my_nmea_message>
 80026a2:	0003      	movs	r3, r0
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d15e      	bne.n	8002766 <main+0x1be>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80026a8:	4bb0      	ldr	r3, [pc, #704]	; (800296c <main+0x3c4>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f006 fbe1 	bl	8008e72 <is_my_nmea_checksum_ok>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d058      	beq.n	8002766 <main+0x1be>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) && !received_nmea_rmc_flag )
 80026b4:	4bae      	ldr	r3, [pc, #696]	; (8002970 <main+0x3c8>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4bac      	ldr	r3, [pc, #688]	; (800296c <main+0x3c4>)
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f008 faaa 	bl	800ac16 <strstr>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d00d      	beq.n	80026e2 <main+0x13a>
 80026c6:	4ba4      	ldr	r3, [pc, #656]	; (8002958 <main+0x3b0>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4053      	eors	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <main+0x13a>
				  {
					  set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 80026d4:	4ba5      	ldr	r3, [pc, #660]	; (800296c <main+0x3c4>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f006 fa26 	bl	8008b28 <set_my_rtc_from_nmea_rmc>
					  received_nmea_rmc_flag = true ;
 80026dc:	4b9e      	ldr	r3, [pc, #632]	; (8002958 <main+0x3b0>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80026e2:	4ba4      	ldr	r3, [pc, #656]	; (8002974 <main+0x3cc>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4ba1      	ldr	r3, [pc, #644]	; (800296c <main+0x3c4>)
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f008 fa93 	bl	800ac16 <strstr>
 80026f0:	1e03      	subs	r3, r0, #0
 80026f2:	d010      	beq.n	8002716 <main+0x16e>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80026f4:	4b9d      	ldr	r3, [pc, #628]	; (800296c <main+0x3c4>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f006 fb67 	bl	8008dca <get_my_nmea_gngsa_fixed_mode_s>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	4b9d      	ldr	r3, [pc, #628]	; (8002978 <main+0x3d0>)
 8002702:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8002704:	4b99      	ldr	r3, [pc, #612]	; (800296c <main+0x3c4>)
 8002706:	0018      	movs	r0, r3
 8002708:	f006 fb6a 	bl	8008de0 <get_my_nmea_gngsa_pdop_d>
 800270c:	0002      	movs	r2, r0
 800270e:	000b      	movs	r3, r1
 8002710:	498f      	ldr	r1, [pc, #572]	; (8002950 <main+0x3a8>)
 8002712:	600a      	str	r2, [r1, #0]
 8002714:	604b      	str	r3, [r1, #4]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 8002716:	4b99      	ldr	r3, [pc, #612]	; (800297c <main+0x3d4>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b94      	ldr	r3, [pc, #592]	; (800296c <main+0x3c4>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f008 fa79 	bl	800ac16 <strstr>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d01e      	beq.n	8002766 <main+0x1be>
				  {
					  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 8002728:	4b89      	ldr	r3, [pc, #548]	; (8002950 <main+0x3a8>)
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	4b94      	ldr	r3, [pc, #592]	; (8002980 <main+0x3d8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f7fd fe98 	bl	8000468 <__aeabi_dcmple>
 8002738:	1e03      	subs	r3, r0, #0
 800273a:	d00c      	beq.n	8002756 <main+0x1ae>
					  {
						  get_my_nmea_gngll_coordinates_s ( (char*) nmea_message , nmea_latitude , nmea_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800273c:	4a82      	ldr	r2, [pc, #520]	; (8002948 <main+0x3a0>)
 800273e:	4981      	ldr	r1, [pc, #516]	; (8002944 <main+0x39c>)
 8002740:	4b8a      	ldr	r3, [pc, #552]	; (800296c <main+0x3c4>)
 8002742:	0018      	movs	r0, r3
 8002744:	f006 fc90 	bl	8009068 <get_my_nmea_gngll_coordinates_s>
						  get_my_nmea_gngll_coordinates_d ( (char*) nmea_message , &nmea_latitude_d , &nmea_longitude_d ) ; // Ten wariant jest na potrzeby funkcji Astro GEO_WR
 8002748:	4a8e      	ldr	r2, [pc, #568]	; (8002984 <main+0x3dc>)
 800274a:	498f      	ldr	r1, [pc, #572]	; (8002988 <main+0x3e0>)
 800274c:	4b87      	ldr	r3, [pc, #540]	; (800296c <main+0x3c4>)
 800274e:	0018      	movs	r0, r3
 8002750:	f006 fd6c 	bl	800922c <get_my_nmea_gngll_coordinates_d>
 8002754:	e007      	b.n	8002766 <main+0x1be>
					  }
					  else
					  {
						  memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8002756:	4a7d      	ldr	r2, [pc, #500]	; (800294c <main+0x3a4>)
 8002758:	4b84      	ldr	r3, [pc, #528]	; (800296c <main+0x3c4>)
 800275a:	0010      	movs	r0, r2
 800275c:	0019      	movs	r1, r3
 800275e:	23fa      	movs	r3, #250	; 0xfa
 8002760:	001a      	movs	r2, r3
 8002762:	f008 fb10 	bl	800ad86 <memcpy>
					  }
				  }
			  }
		  }
	  }
	  rxd_byte = 0 ;
 8002766:	4b7e      	ldr	r3, [pc, #504]	; (8002960 <main+0x3b8>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > nmea_max_rmc_time && !received_nmea_rmc_flag )
 800276c:	4b7b      	ldr	r3, [pc, #492]	; (800295c <main+0x3b4>)
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	4b86      	ldr	r3, [pc, #536]	; (800298c <main+0x3e4>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d906      	bls.n	8002786 <main+0x1de>
 8002778:	4b77      	ldr	r3, [pc, #476]	; (8002958 <main+0x3b0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	4053      	eors	r3, r2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11e      	bne.n	80027c4 <main+0x21c>
	  {
		  break ;
	  }
	  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <main+0x3a8>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <main+0x3d8>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f7fd fe69 	bl	8000468 <__aeabi_dcmple>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d100      	bne.n	800279c <main+0x1f4>
 800279a:	e00b      	b.n	80027b4 <main+0x20c>
	  {
		  if ( nmea_latitude[0] != 0 )
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <main+0x39c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <main+0x20c>
		  {
			  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 80027a4:	4b74      	ldr	r3, [pc, #464]	; (8002978 <main+0x3d0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b33      	cmp	r3, #51	; 0x33
 80027aa:	d103      	bne.n	80027b4 <main+0x20c>
			  {
				  if ( received_nmea_rmc_flag )
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <main+0x3b0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <main+0x220>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 80027b4:	4b69      	ldr	r3, [pc, #420]	; (800295c <main+0x3b4>)
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <main+0x3e8>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d200      	bcs.n	80027c2 <main+0x21a>
 80027c0:	e757      	b.n	8002672 <main+0xca>
 80027c2:	e002      	b.n	80027ca <main+0x222>
		  break ;
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	e000      	b.n	80027ca <main+0x222>
				  {
					  break ;
 80027c8:	46c0      	nop			; (mov r8, r8)
				  }
			  }
		  }
	  }
  }
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <main+0x394>)
 80027cc:	0018      	movs	r0, r3
 80027ce:	f003 f999 	bl	8005b04 <HAL_TIM_Base_Stop_IT>
  if ( nmea_latitude[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <main+0x39c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <main+0x246>
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <main+0x3a4>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <main+0x246>
  {
	  get_my_nmea_gngll_coordinates_s ( (char*) gngll_message , nmea_latitude , nmea_longitude ) ;
 80027e2:	4a59      	ldr	r2, [pc, #356]	; (8002948 <main+0x3a0>)
 80027e4:	4957      	ldr	r1, [pc, #348]	; (8002944 <main+0x39c>)
 80027e6:	4b59      	ldr	r3, [pc, #356]	; (800294c <main+0x3a4>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f006 fc3d 	bl	8009068 <get_my_nmea_gngll_coordinates_s>
  }
  get_my_rtc_time ( rtc_dt ) ;
 80027ee:	4b69      	ldr	r3, [pc, #420]	; (8002994 <main+0x3ec>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f006 f9ef 	bl	8008bd4 <get_my_rtc_time>
  send_debug_logs ( rtc_dt ) ;
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <main+0x3ec>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fba9 	bl	8002f50 <send_debug_logs>
  astronode_send_geo_wr ( nmea_latitude_d , nmea_longitude_d ) ;
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <main+0x3e0>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0010      	movs	r0, r2
 8002806:	0019      	movs	r1, r3
 8002808:	f7ff fd92 	bl	8002330 <__aeabi_d2iz>
 800280c:	0004      	movs	r4, r0
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <main+0x3dc>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0010      	movs	r0, r2
 8002816:	0019      	movs	r1, r3
 8002818:	f7ff fd8a 	bl	8002330 <__aeabi_d2iz>
 800281c:	0003      	movs	r3, r0
 800281e:	0019      	movs	r1, r3
 8002820:	0020      	movs	r0, r4
 8002822:	f004 fec1 	bl	80075a8 <astronode_send_geo_wr>
  char payload[ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES] = {0};
 8002826:	003b      	movs	r3, r7
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	3304      	adds	r3, #4
 800282e:	229c      	movs	r2, #156	; 0x9c
 8002830:	2100      	movs	r1, #0
 8002832:	0018      	movs	r0, r3
 8002834:	f008 f9c2 	bl	800abbc <memset>
  sprintf ( payload , "%.1f,%s,%s,%d,%lu" , nmea_fixed_pdop_d , nmea_latitude , nmea_longitude , tim_seconds , agg_tim_seconds ) ;
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <main+0x3a8>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4947      	ldr	r1, [pc, #284]	; (800295c <main+0x3b4>)
 8002840:	8809      	ldrh	r1, [r1, #0]
 8002842:	000d      	movs	r5, r1
 8002844:	4954      	ldr	r1, [pc, #336]	; (8002998 <main+0x3f0>)
 8002846:	6809      	ldr	r1, [r1, #0]
 8002848:	4c54      	ldr	r4, [pc, #336]	; (800299c <main+0x3f4>)
 800284a:	0038      	movs	r0, r7
 800284c:	9103      	str	r1, [sp, #12]
 800284e:	9502      	str	r5, [sp, #8]
 8002850:	493d      	ldr	r1, [pc, #244]	; (8002948 <main+0x3a0>)
 8002852:	9101      	str	r1, [sp, #4]
 8002854:	493b      	ldr	r1, [pc, #236]	; (8002944 <main+0x39c>)
 8002856:	9100      	str	r1, [sp, #0]
 8002858:	0021      	movs	r1, r4
 800285a:	f008 f919 	bl	800aa90 <sprintf>
  send_debug_logs ( payload ) ;
 800285e:	003b      	movs	r3, r7
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fb75 	bl	8002f50 <send_debug_logs>
  g_payload_id_counter++ ;
 8002866:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <main+0x3f8>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <main+0x3f8>)
 8002870:	801a      	strh	r2, [r3, #0]
  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <main+0x3f8>)
 8002874:	881c      	ldrh	r4, [r3, #0]
 8002876:	003b      	movs	r3, r7
 8002878:	0018      	movs	r0, r3
 800287a:	f7fd fc43 	bl	8000104 <strlen>
 800287e:	0003      	movs	r3, r0
 8002880:	b29a      	uxth	r2, r3
 8002882:	003b      	movs	r3, r7
 8002884:	0019      	movs	r1, r3
 8002886:	0020      	movs	r0, r4
 8002888:	f004 ff4e 	bl	8007728 <astronode_send_pld_er>
  print_housekeeping_timer = get_systick () ;
 800288c:	f000 fbee 	bl	800306c <get_systick>
 8002890:	0002      	movs	r2, r0
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <main+0x398>)
 8002894:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( is_evt_pin_high() )
 8002896:	f000 fbd7 	bl	8003048 <is_evt_pin_high>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d029      	beq.n	80028f2 <main+0x34a>
	  {
		  send_debug_logs ( "Evt pin is high." ) ;
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <main+0x3fc>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fb55 	bl	8002f50 <send_debug_logs>
		  astronode_send_evt_rr () ;
 80028a6:	f004 fdff 	bl	80074a8 <astronode_send_evt_rr>
		  if (is_sak_available () )
 80028aa:	f005 fca7 	bl	80081fc <is_sak_available>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d009      	beq.n	80028c6 <main+0x31e>
		  {
			  astronode_send_sak_rr () ;
 80028b2:	f005 f863 	bl	800797c <astronode_send_sak_rr>
			  astronode_send_sak_cr () ;
 80028b6:	f005 f8b7 	bl	8007a28 <astronode_send_sak_cr>
			  send_debug_logs ( "Message has been acknowledged." ) ;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <main+0x400>)
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fb47 	bl	8002f50 <send_debug_logs>
			  astronode_send_per_rr () ;
 80028c2:	f005 f9db 	bl	8007c7c <astronode_send_per_rr>
		  }
		  if ( is_astronode_reset () )
 80028c6:	f005 fca3 	bl	8008210 <is_astronode_reset>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d005      	beq.n	80028da <main+0x332>
		  {
			  send_debug_logs ( "Terminal has been reset." ) ;
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <main+0x404>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fb3d 	bl	8002f50 <send_debug_logs>
			  astronode_send_res_cr () ;
 80028d6:	f004 ffb1 	bl	800783c <astronode_send_res_cr>
		  }
		  if ( is_command_available () )
 80028da:	f005 fca3 	bl	8008224 <is_command_available>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d007      	beq.n	80028f2 <main+0x34a>
		  {
			  send_debug_logs ( "Unicast command is available" ) ;
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <main+0x408>)
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fb33 	bl	8002f50 <send_debug_logs>
			  astronode_send_cmd_rr () ;
 80028ea:	f005 fb17 	bl	8007f1c <astronode_send_cmd_rr>
			  astronode_send_cmd_cr () ;
 80028ee:	f005 fad5 	bl	8007e9c <astronode_send_cmd_cr>
		  }
	  }
	  if ( get_systick () - print_housekeeping_timer >  astro_message_timer )
 80028f2:	f000 fbbb 	bl	800306c <get_systick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <main+0x398>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <main+0x40c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d9c7      	bls.n	8002896 <main+0x2ee>
	  {
		  astronode_send_rtc_rr ();
 8002906:	f004 ffd9 	bl	80078bc <astronode_send_rtc_rr>
		  astronode_send_nco_rr () ;
 800290a:	f004 fd6d 	bl	80073e8 <astronode_send_nco_rr>
		  //astronode_send_lcd_rr () ;
		  //astronode_send_end_rr () ;
		  //astronode_send_per_rr () ;
		  print_housekeeping_timer = get_systick () ;
 800290e:	f000 fbad 	bl	800306c <get_systick>
 8002912:	0002      	movs	r2, r0
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <main+0x398>)
 8002916:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <main+0x3f8>)
 800291a:	881c      	ldrh	r4, [r3, #0]
 800291c:	003b      	movs	r3, r7
 800291e:	0018      	movs	r0, r3
 8002920:	f7fd fbf0 	bl	8000104 <strlen>
 8002924:	0003      	movs	r3, r0
 8002926:	b29a      	uxth	r2, r3
 8002928:	003b      	movs	r3, r7
 800292a:	0019      	movs	r1, r3
 800292c:	0020      	movs	r0, r4
 800292e:	f004 fefb 	bl	8007728 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002932:	e7b0      	b.n	8002896 <main+0x2ee>
 8002934:	20000000 	.word	0x20000000
 8002938:	20000864 	.word	0x20000864
 800293c:	20000784 	.word	0x20000784
 8002940:	20000bd0 	.word	0x20000bd0
 8002944:	20000b9c 	.word	0x20000b9c
 8002948:	20000ba8 	.word	0x20000ba8
 800294c:	20000aa0 	.word	0x20000aa0
 8002950:	20000020 	.word	0x20000020
 8002954:	408f4000 	.word	0x408f4000
 8002958:	20000bd6 	.word	0x20000bd6
 800295c:	20000bca 	.word	0x20000bca
 8002960:	200009a0 	.word	0x200009a0
 8002964:	200008f8 	.word	0x200008f8
 8002968:	20000b9a 	.word	0x20000b9a
 800296c:	200009a4 	.word	0x200009a4
 8002970:	2000000c 	.word	0x2000000c
 8002974:	20000004 	.word	0x20000004
 8002978:	20000bc8 	.word	0x20000bc8
 800297c:	20000008 	.word	0x20000008
 8002980:	20000010 	.word	0x20000010
 8002984:	20000bc0 	.word	0x20000bc0
 8002988:	20000bb8 	.word	0x20000bb8
 800298c:	20000018 	.word	0x20000018
 8002990:	2000001a 	.word	0x2000001a
 8002994:	2000098c 	.word	0x2000098c
 8002998:	20000bcc 	.word	0x20000bcc
 800299c:	08011700 	.word	0x08011700
 80029a0:	20000bd4 	.word	0x20000bd4
 80029a4:	08011714 	.word	0x08011714
 80029a8:	08011728 	.word	0x08011728
 80029ac:	08011748 	.word	0x08011748
 80029b0:	08011764 	.word	0x08011764
 80029b4:	20000028 	.word	0x20000028

080029b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b093      	sub	sp, #76	; 0x4c
 80029bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029be:	2410      	movs	r4, #16
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	0018      	movs	r0, r3
 80029c4:	2338      	movs	r3, #56	; 0x38
 80029c6:	001a      	movs	r2, r3
 80029c8:	2100      	movs	r1, #0
 80029ca:	f008 f8f7 	bl	800abbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ce:	003b      	movs	r3, r7
 80029d0:	0018      	movs	r0, r3
 80029d2:	2310      	movs	r3, #16
 80029d4:	001a      	movs	r2, r3
 80029d6:	2100      	movs	r1, #0
 80029d8:	f008 f8f0 	bl	800abbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 fc0b 	bl	80041fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	220a      	movs	r2, #10
 80029ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029f4:	0021      	movs	r1, r4
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2201      	movs	r2, #1
 8002a06:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	0018      	movs	r0, r3
 8002a12:	f001 fc3f 	bl	8004294 <HAL_RCC_OscConfig>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a1a:	f000 fb95 	bl	8003148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a1e:	003b      	movs	r3, r7
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a24:	003b      	movs	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a2a:	003b      	movs	r3, r7
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a30:	003b      	movs	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a36:	003b      	movs	r3, r7
 8002a38:	2100      	movs	r1, #0
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f001 ff44 	bl	80048c8 <HAL_RCC_ClockConfig>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a44:	f000 fb80 	bl	8003148 <Error_Handler>
  }
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b013      	add	sp, #76	; 0x4c
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <MX_I2C1_Init+0x78>)
 8002a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <MX_I2C1_Init+0x7c>)
 8002a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f001 fa87 	bl	8003fa0 <HAL_I2C_Init>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d001      	beq.n	8002a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a96:	f000 fb57 	bl	8003148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fb14 	bl	80040cc <HAL_I2CEx_ConfigAnalogFilter>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aa8:	f000 fb4e 	bl	8003148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f001 fb57 	bl	8004164 <HAL_I2CEx_ConfigDigitalFilter>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aba:	f000 fb45 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000704 	.word	0x20000704
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	00303d5b 	.word	0x00303d5b

08002ad0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b090      	sub	sp, #64	; 0x40
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ad6:	232c      	movs	r3, #44	; 0x2c
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	0018      	movs	r0, r3
 8002adc:	2314      	movs	r3, #20
 8002ade:	001a      	movs	r2, r3
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f008 f86b 	bl	800abbc <memset>
  RTC_DateTypeDef sDate = {0};
 8002ae6:	2328      	movs	r3, #40	; 0x28
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002aee:	003b      	movs	r3, r7
 8002af0:	0018      	movs	r0, r3
 8002af2:	2328      	movs	r3, #40	; 0x28
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f008 f860 	bl	800abbc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <MX_RTC_Init+0x140>)
 8002afe:	4a45      	ldr	r2, [pc, #276]	; (8002c14 <MX_RTC_Init+0x144>)
 8002b00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b0a:	227f      	movs	r2, #127	; 0x7f
 8002b0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	05d2      	lsls	r2, r2, #23
 8002b2c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b2e:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f002 fa28 	bl	8004f8c <HAL_RTC_Init>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b40:	f000 fb02 	bl	8003148 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b6a:	1879      	adds	r1, r7, r1
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	0018      	movs	r0, r3
 8002b72:	f002 faad 	bl	80050d0 <HAL_RTC_SetTime>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d001      	beq.n	8002b7e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b7a:	f000 fae5 	bl	8003148 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b7e:	2128      	movs	r1, #40	; 0x28
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2201      	movs	r2, #1
 8002b8a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2201      	movs	r2, #1
 8002b90:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2224      	movs	r2, #36	; 0x24
 8002b96:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b98:	1879      	adds	r1, r7, r1
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <MX_RTC_Init+0x140>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f002 fb9a 	bl	80052d8 <HAL_RTC_SetDate>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d001      	beq.n	8002bac <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002ba8:	f000 face 	bl	8003148 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002bac:	003b      	movs	r3, r7
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002bb2:	003b      	movs	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002bb8:	003b      	movs	r3, r7
 8002bba:	2200      	movs	r2, #0
 8002bbc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002bbe:	003b      	movs	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bc4:	003b      	movs	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bca:	003b      	movs	r3, r7
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bd0:	003b      	movs	r3, r7
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002bd6:	003b      	movs	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002bdc:	003b      	movs	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002be2:	003b      	movs	r3, r7
 8002be4:	2220      	movs	r2, #32
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002bea:	003b      	movs	r3, r7
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bf2:	0039      	movs	r1, r7
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_RTC_Init+0x140>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f002 fc4d 	bl	8005498 <HAL_RTC_SetAlarm>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d001      	beq.n	8002c06 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002c02:	f000 faa1 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b010      	add	sp, #64	; 0x40
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000758 	.word	0x20000758
 8002c14:	40002800 	.word	0x40002800

08002c18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	0018      	movs	r0, r3
 8002c22:	230c      	movs	r3, #12
 8002c24:	001a      	movs	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f007 ffc8 	bl	800abbc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_TIM6_Init+0x70>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <MX_TIM6_Init+0x74>)
 8002c36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <MX_TIM6_Init+0x78>)
 8002c42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f002 fea4 	bl	800599a <HAL_TIM_Base_Init>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c56:	f000 fa77 	bl	8003148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f003 f949 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c76:	f000 fa67 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	20000784 	.word	0x20000784
 8002c88:	40001000 	.word	0x40001000
 8002c8c:	00003e7f 	.word	0x00003e7f
 8002c90:	000003e7 	.word	0x000003e7

08002c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <MX_USART1_UART_Init+0x98>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca0:	2296      	movs	r2, #150	; 0x96
 8002ca2:	0192      	lsls	r2, r2, #6
 8002ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f003 f996 	bl	8006010 <HAL_UART_Init>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ce8:	f000 fa2e 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f004 f863 	bl	8006dbc <HAL_UARTEx_SetTxFifoThreshold>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cfa:	f000 fa25 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f004 f89a 	bl	8006e3c <HAL_UARTEx_SetRxFifoThreshold>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d0c:	f000 fa1c 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f004 f818 	bl	8006d48 <HAL_UARTEx_DisableFifoMode>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d1c:	f000 fa14 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200007d0 	.word	0x200007d0
 8002d2c:	40013800 	.word	0x40013800

08002d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <MX_USART2_UART_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d3c:	22e1      	movs	r2, #225	; 0xe1
 8002d3e:	0252      	lsls	r2, r2, #9
 8002d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f003 f948 	bl	8006010 <HAL_UART_Init>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d84:	f000 f9e0 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f004 f815 	bl	8006dbc <HAL_UARTEx_SetTxFifoThreshold>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f000 f9d7 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f004 f84c 	bl	8006e3c <HAL_UARTEx_SetRxFifoThreshold>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002da8:	f000 f9ce 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f003 ffca 	bl	8006d48 <HAL_UARTEx_DisableFifoMode>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002db8:	f000 f9c6 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000864 	.word	0x20000864
 8002dc8:	40004400 	.word	0x40004400

08002dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <MX_USART3_UART_Init+0x64>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002dd8:	2296      	movs	r2, #150	; 0x96
 8002dda:	0192      	lsls	r2, r2, #6
 8002ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <MX_USART3_UART_Init+0x60>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 f8fa 	bl	8006010 <HAL_UART_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e20:	f000 f992 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	200008f8 	.word	0x200008f8
 8002e30:	40004800 	.word	0x40004800

08002e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3a:	2414      	movs	r4, #20
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	0018      	movs	r0, r3
 8002e40:	2314      	movs	r3, #20
 8002e42:	001a      	movs	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f007 feb9 	bl	800abbc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e50:	2104      	movs	r1, #4
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
 8002e56:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e68:	2120      	movs	r1, #32
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	2220      	movs	r2, #32
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e96:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002e98:	2102      	movs	r1, #2
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9e:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <MX_GPIO_Init+0x10c>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002eaa:	238c      	movs	r3, #140	; 0x8c
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	4825      	ldr	r0, [pc, #148]	; (8002f44 <MX_GPIO_Init+0x110>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f001 f857 	bl	8003f66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002eb8:	4923      	ldr	r1, [pc, #140]	; (8002f48 <MX_GPIO_Init+0x114>)
 8002eba:	23a0      	movs	r3, #160	; 0xa0
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f001 f850 	bl	8003f66 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	228c      	movs	r2, #140	; 0x8c
 8002eca:	0152      	lsls	r2, r2, #5
 8002ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	193b      	adds	r3, r7, r4
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <MX_GPIO_Init+0x110>)
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f000 fdec 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <MX_GPIO_Init+0x114>)
 8002ef0:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef2:	193b      	adds	r3, r7, r4
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	193a      	adds	r2, r7, r4
 8002f06:	23a0      	movs	r3, #160	; 0xa0
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 fdd9 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002f12:	0021      	movs	r1, r4
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	22c0      	movs	r2, #192	; 0xc0
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2288      	movs	r2, #136	; 0x88
 8002f20:	0352      	lsls	r2, r2, #13
 8002f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <MX_GPIO_Init+0x118>)
 8002f2e:	0019      	movs	r1, r3
 8002f30:	0010      	movs	r0, r2
 8002f32:	f000 fdc7 	bl	8003ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b00b      	add	sp, #44	; 0x2c
 8002f3c:	bd90      	pop	{r4, r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40021000 	.word	0x40021000
 8002f44:	50000800 	.word	0x50000800
 8002f48:	00009860 	.word	0x00009860
 8002f4c:	50000400 	.word	0x50000400

08002f50 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd f8d2 	bl	8000104 <strlen>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2bfa      	cmp	r3, #250	; 0xfa
 8002f68:	d908      	bls.n	8002f7c <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002f6a:	23fa      	movs	r3, #250	; 0xfa
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <send_debug_logs+0x54>)
 8002f70:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <send_debug_logs+0x58>)
 8002f72:	222a      	movs	r2, #42	; 0x2a
 8002f74:	f003 f8e2 	bl	800613c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002f78:	23fa      	movs	r3, #250	; 0xfa
 8002f7a:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	23fa      	movs	r3, #250	; 0xfa
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4808      	ldr	r0, [pc, #32]	; (8002fa8 <send_debug_logs+0x58>)
 8002f88:	f003 f8d8 	bl	800613c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002f8c:	23fa      	movs	r3, #250	; 0xfa
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <send_debug_logs+0x5c>)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <send_debug_logs+0x58>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	f003 f8d1 	bl	800613c <HAL_UART_Transmit>
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	08011784 	.word	0x08011784
 8002fa8:	20000864 	.word	0x20000864
 8002fac:	080117b0 	.word	0x080117b0

08002fb0 <reset_astronode>:
void reset_astronode ( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <reset_astronode+0x30>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 ffd3 	bl	8003f66 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 fc7d 	bl	80038c0 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <reset_astronode+0x30>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 ffca 	bl	8003f66 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002fd2:	20fa      	movs	r0, #250	; 0xfa
 8002fd4:	f000 fc74 	bl	80038c0 <HAL_Delay>
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	50000800 	.word	0x50000800

08002fe4 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <send_astronode_request+0x34>)
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff ffad 	bl	8002f50 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff ffa9 	bl	8002f50 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b29a      	uxth	r2, r3
 8003002:	23fa      	movs	r3, #250	; 0xfa
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4804      	ldr	r0, [pc, #16]	; (800301c <send_astronode_request+0x38>)
 800300a:	f003 f897 	bl	800613c <HAL_UART_Transmit>
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	080117b4 	.word	0x080117b4
 800301c:	200007d0 	.word	0x200007d0

08003020 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4806      	ldr	r0, [pc, #24]	; (8003044 <is_astronode_character_received+0x24>)
 800302c:	2364      	movs	r3, #100	; 0x64
 800302e:	2201      	movs	r2, #1
 8003030:	f003 f920 	bl	8006274 <HAL_UART_Receive>
 8003034:	0003      	movs	r3, r0
 8003036:	425a      	negs	r2, r3
 8003038:	4153      	adcs	r3, r2
 800303a:	b2db      	uxtb	r3, r3
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200007d0 	.word	0x200007d0

08003048 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVENT_Pin ) == GPIO_PIN_SET ? true : false);
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	23a0      	movs	r3, #160	; 0xa0
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	0011      	movs	r1, r2
 8003056:	0018      	movs	r0, r3
 8003058:	f000 ff68 	bl	8003f2c <HAL_GPIO_ReadPin>
 800305c:	0003      	movs	r3, r0
 800305e:	3b01      	subs	r3, #1
 8003060:	425a      	negs	r2, r3
 8003062:	4153      	adcs	r3, r2
 8003064:	b2db      	uxtb	r3, r3
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003070:	f000 fc1c 	bl	80038ac <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	000a      	movs	r2, r1
 8003086:	1cbb      	adds	r3, r7, #2
 8003088:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800308a:	f7ff ffef 	bl	800306c <get_systick>
 800308e:	0002      	movs	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	1cba      	adds	r2, r7, #2
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	419b      	sbcs	r3, r3
 800309c:	425b      	negs	r3, r3
 800309e:	b2db      	uxtb	r3, r3
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80030ac:	23a0      	movs	r3, #160	; 0xa0
 80030ae:	05db      	lsls	r3, r3, #23
 80030b0:	2201      	movs	r2, #1
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 ff56 	bl	8003f66 <HAL_GPIO_WritePin>
	MX_USART1_UART_Init () ;
 80030ba:	f7ff fdeb 	bl	8002c94 <MX_USART1_UART_Init>
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <my_astro_off>:
void my_astro_off ( void )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 ff48 	bl	8003f66 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <my_astro_off+0x20>)
 80030d8:	0018      	movs	r0, r3
 80030da:	f002 ffef 	bl	80060bc <HAL_UART_DeInit>
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200007d0 	.word	0x200007d0

080030e8 <my_lx6_on>:
void my_lx6_on ( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4808      	ldr	r0, [pc, #32]	; (8003114 <my_lx6_on+0x2c>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	0019      	movs	r1, r3
 80030f6:	f000 ff36 	bl	8003f66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	015b      	lsls	r3, r3, #5
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <my_lx6_on+0x2c>)
 8003100:	2201      	movs	r2, #1
 8003102:	0019      	movs	r1, r3
 8003104:	f000 ff2f 	bl	8003f66 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003108:	f7ff fe60 	bl	8002dcc <MX_USART3_UART_Init>
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	50000800 	.word	0x50000800

08003118 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d105      	bne.n	8003136 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		tim_seconds++ ;
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003134:	801a      	strh	r2, [r3, #0]
	}
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40001000 	.word	0x40001000
 8003144:	20000bca 	.word	0x20000bca

08003148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800314c:	b672      	cpsid	i
}
 800314e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003150:	e7fe      	b.n	8003150 <Error_Handler+0x8>
	...

08003154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_MspInit+0x44>)
 800315c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_MspInit+0x44>)
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_MspInit+0x44>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_MspInit+0x44>)
 8003174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_MspInit+0x44>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0549      	lsls	r1, r1, #21
 800317c:	430a      	orrs	r2, r1
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_MspInit+0x44>)
 8003182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	055b      	lsls	r3, r3, #21
 8003188:	4013      	ands	r3, r2
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b097      	sub	sp, #92	; 0x5c
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	2344      	movs	r3, #68	; 0x44
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	0018      	movs	r0, r3
 80031aa:	2314      	movs	r3, #20
 80031ac:	001a      	movs	r2, r3
 80031ae:	2100      	movs	r1, #0
 80031b0:	f007 fd04 	bl	800abbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b4:	2410      	movs	r4, #16
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	0018      	movs	r0, r3
 80031ba:	2334      	movs	r3, #52	; 0x34
 80031bc:	001a      	movs	r2, r3
 80031be:	2100      	movs	r1, #0
 80031c0:	f007 fcfc 	bl	800abbc <memset>
  if(hi2c->Instance==I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_I2C_MspInit+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d13d      	bne.n	800324a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	2220      	movs	r2, #32
 80031d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	0018      	movs	r0, r3
 80031de:	f001 fd1d 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80031e6:	f7ff ffaf 	bl	8003148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 80031ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 80031f0:	2102      	movs	r1, #2
 80031f2:	430a      	orrs	r2, r1
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8003202:	2144      	movs	r1, #68	; 0x44
 8003204:	187b      	adds	r3, r7, r1
 8003206:	22c0      	movs	r2, #192	; 0xc0
 8003208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2212      	movs	r2, #18
 800320e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2200      	movs	r2, #0
 800321a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2206      	movs	r2, #6
 8003220:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003222:	187b      	adds	r3, r7, r1
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_I2C_MspInit+0xc0>)
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f000 fc4b 	bl	8003ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 8003230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0389      	lsls	r1, r1, #14
 8003238:	430a      	orrs	r2, r1
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_I2C_MspInit+0xbc>)
 800323e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	039b      	lsls	r3, r3, #14
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b017      	add	sp, #92	; 0x5c
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40005400 	.word	0x40005400
 8003258:	40021000 	.word	0x40021000
 800325c:	50000400 	.word	0x50000400

08003260 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b091      	sub	sp, #68	; 0x44
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003268:	240c      	movs	r4, #12
 800326a:	193b      	adds	r3, r7, r4
 800326c:	0018      	movs	r0, r3
 800326e:	2334      	movs	r3, #52	; 0x34
 8003270:	001a      	movs	r2, r3
 8003272:	2100      	movs	r1, #0
 8003274:	f007 fca2 	bl	800abbc <memset>
  if(hrtc->Instance==RTC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <HAL_RTC_MspInit+0x74>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d124      	bne.n	80032cc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003282:	193b      	adds	r3, r7, r4
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0292      	lsls	r2, r2, #10
 8003288:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800328a:	193b      	adds	r3, r7, r4
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003292:	193b      	adds	r3, r7, r4
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fcc1 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800329e:	f7ff ff53 	bl	8003148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RTC_MspInit+0x78>)
 80032a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_RTC_MspInit+0x78>)
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0209      	lsls	r1, r1, #8
 80032ac:	430a      	orrs	r2, r1
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RTC_MspInit+0x78>)
 80032b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RTC_MspInit+0x78>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	00c9      	lsls	r1, r1, #3
 80032ba:	430a      	orrs	r2, r1
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RTC_MspInit+0x78>)
 80032c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4013      	ands	r3, r2
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b011      	add	sp, #68	; 0x44
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	40002800 	.word	0x40002800
 80032d8:	40021000 	.word	0x40021000

080032dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_TIM_Base_MspInit+0x44>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d113      	bne.n	8003316 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_TIM_Base_MspInit+0x48>)
 80032f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_TIM_Base_MspInit+0x48>)
 80032f4:	2110      	movs	r1, #16
 80032f6:	430a      	orrs	r2, r1
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_TIM_Base_MspInit+0x48>)
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2210      	movs	r2, #16
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	2011      	movs	r0, #17
 800330c:	f000 fba8 	bl	8003a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003310:	2011      	movs	r0, #17
 8003312:	f000 fbba 	bl	8003a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40001000 	.word	0x40001000
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b09b      	sub	sp, #108	; 0x6c
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	2354      	movs	r3, #84	; 0x54
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	0018      	movs	r0, r3
 8003336:	2314      	movs	r3, #20
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f007 fc3e 	bl	800abbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003340:	2420      	movs	r4, #32
 8003342:	193b      	adds	r3, r7, r4
 8003344:	0018      	movs	r0, r3
 8003346:	2334      	movs	r3, #52	; 0x34
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f007 fc36 	bl	800abbc <memset>
  if(huart->Instance==USART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a61      	ldr	r2, [pc, #388]	; (80034dc <HAL_UART_MspInit+0x1b4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d140      	bne.n	80033dc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2200      	movs	r2, #0
 8003364:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003366:	193b      	adds	r3, r7, r4
 8003368:	0018      	movs	r0, r3
 800336a:	f001 fc57 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003372:	f7ff fee9 	bl	8003148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	01c9      	lsls	r1, r1, #7
 8003380:	430a      	orrs	r2, r1
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
 8003384:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	01db      	lsls	r3, r3, #7
 800338c:	4013      	ands	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003396:	4b52      	ldr	r3, [pc, #328]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	635a      	str	r2, [r3, #52]	; 0x34
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80033aa:	2154      	movs	r1, #84	; 0x54
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	22c0      	movs	r2, #192	; 0xc0
 80033b0:	00d2      	lsls	r2, r2, #3
 80033b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2202      	movs	r2, #2
 80033b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2201      	movs	r2, #1
 80033ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	187a      	adds	r2, r7, r1
 80033ce:	23a0      	movs	r3, #160	; 0xa0
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	0011      	movs	r1, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 fb75 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033da:	e07b      	b.n	80034d4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <HAL_UART_MspInit+0x1bc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d140      	bne.n	8003468 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033e6:	2120      	movs	r1, #32
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2202      	movs	r2, #2
 80033ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 fc10 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003400:	f7ff fea2 	bl	8003148 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	0289      	lsls	r1, r1, #10
 800340e:	430a      	orrs	r2, r1
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	029b      	lsls	r3, r3, #10
 800341a:	4013      	ands	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003426:	2101      	movs	r1, #1
 8003428:	430a      	orrs	r2, r1
 800342a:	635a      	str	r2, [r3, #52]	; 0x34
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003438:	2154      	movs	r1, #84	; 0x54
 800343a:	187b      	adds	r3, r7, r1
 800343c:	220c      	movs	r2, #12
 800343e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	187b      	adds	r3, r7, r1
 8003442:	2202      	movs	r2, #2
 8003444:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2201      	movs	r2, #1
 800344a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2201      	movs	r2, #1
 8003456:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003458:	187a      	adds	r2, r7, r1
 800345a:	23a0      	movs	r3, #160	; 0xa0
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f000 fb2f 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003466:	e035      	b.n	80034d4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_UART_MspInit+0x1c0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d130      	bne.n	80034d4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	02c9      	lsls	r1, r1, #11
 800347c:	430a      	orrs	r2, r1
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	02db      	lsls	r3, r3, #11
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 8003494:	2104      	movs	r1, #4
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_UART_MspInit+0x1b8>)
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 80034a6:	2154      	movs	r1, #84	; 0x54
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	22c0      	movs	r2, #192	; 0xc0
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2202      	movs	r2, #2
 80034b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	4a08      	ldr	r2, [pc, #32]	; (80034ec <HAL_UART_MspInit+0x1c4>)
 80034cc:	0019      	movs	r1, r3
 80034ce:	0010      	movs	r0, r2
 80034d0:	f000 faf8 	bl	8003ac4 <HAL_GPIO_Init>
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b01b      	add	sp, #108	; 0x6c
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	50000800 	.word	0x50000800

080034f0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_UART_MspDeInit+0x80>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10e      	bne.n	8003520 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 8003504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 8003508:	491b      	ldr	r1, [pc, #108]	; (8003578 <HAL_UART_MspDeInit+0x88>)
 800350a:	400a      	ands	r2, r1
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 800350e:	23c0      	movs	r3, #192	; 0xc0
 8003510:	00da      	lsls	r2, r3, #3
 8003512:	23a0      	movs	r3, #160	; 0xa0
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f000 fc37 	bl	8003d8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800351e:	e023      	b.n	8003568 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_UART_MspDeInit+0x8c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 800352c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 8003530:	4913      	ldr	r1, [pc, #76]	; (8003580 <HAL_UART_MspDeInit+0x90>)
 8003532:	400a      	ands	r2, r1
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8003536:	23a0      	movs	r3, #160	; 0xa0
 8003538:	05db      	lsls	r3, r3, #23
 800353a:	210c      	movs	r1, #12
 800353c:	0018      	movs	r0, r3
 800353e:	f000 fc25 	bl	8003d8c <HAL_GPIO_DeInit>
}
 8003542:	e011      	b.n	8003568 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_UART_MspDeInit+0x94>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10c      	bne.n	8003568 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 8003550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_UART_MspDeInit+0x84>)
 8003554:	490c      	ldr	r1, [pc, #48]	; (8003588 <HAL_UART_MspDeInit+0x98>)
 8003556:	400a      	ands	r2, r1
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <HAL_UART_MspDeInit+0x9c>)
 8003560:	0019      	movs	r1, r3
 8003562:	0010      	movs	r0, r2
 8003564:	f000 fc12 	bl	8003d8c <HAL_GPIO_DeInit>
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40013800 	.word	0x40013800
 8003574:	40021000 	.word	0x40021000
 8003578:	ffffbfff 	.word	0xffffbfff
 800357c:	40004400 	.word	0x40004400
 8003580:	fffdffff 	.word	0xfffdffff
 8003584:	40004800 	.word	0x40004800
 8003588:	fffbffff 	.word	0xfffbffff
 800358c:	50000800 	.word	0x50000800

08003590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003594:	e7fe      	b.n	8003594 <NMI_Handler+0x4>

08003596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359a:	e7fe      	b.n	800359a <HardFault_Handler+0x4>

0800359c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b4:	f000 f968 	bl	8003888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f002 faca 	bl	8005b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000784 	.word	0x20000784

080035d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return 1;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_kill>:

int _kill(int pid, int sig)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ee:	f007 fb91 	bl	800ad14 <__errno>
 80035f2:	0003      	movs	r3, r0
 80035f4:	2216      	movs	r2, #22
 80035f6:	601a      	str	r2, [r3, #0]
  return -1;
 80035f8:	2301      	movs	r3, #1
 80035fa:	425b      	negs	r3, r3
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <_exit>:

void _exit (int status)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800360c:	2301      	movs	r3, #1
 800360e:	425a      	negs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0011      	movs	r1, r2
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff ffe5 	bl	80035e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800361a:	e7fe      	b.n	800361a <_exit+0x16>

0800361c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e00a      	b.n	8003644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800362e:	e000      	b.n	8003632 <_read+0x16>
 8003630:	bf00      	nop
 8003632:	0001      	movs	r1, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	60ba      	str	r2, [r7, #8]
 800363a:	b2ca      	uxtb	r2, r1
 800363c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf0      	blt.n	800362e <_read+0x12>
  }

  return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b006      	add	sp, #24
 8003654:	bd80      	pop	{r7, pc}

08003656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e009      	b.n	800367c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	60ba      	str	r2, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	0018      	movs	r0, r3
 8003672:	e000      	b.n	8003676 <_write+0x20>
 8003674:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3301      	adds	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	dbf1      	blt.n	8003668 <_write+0x12>
  }
  return len;
 8003684:	687b      	ldr	r3, [r7, #4]
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b006      	add	sp, #24
 800368c:	bd80      	pop	{r7, pc}

0800368e <_close>:

int _close(int file)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003696:	2301      	movs	r3, #1
 8003698:	425b      	negs	r3, r3
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0192      	lsls	r2, r2, #6
 80036b2:	605a      	str	r2, [r3, #4]
  return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b002      	add	sp, #8
 80036bc:	bd80      	pop	{r7, pc}

080036be <_isatty>:

int _isatty(int file)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <_sbrk+0x5c>)
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <_sbrk+0x60>)
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <_sbrk+0x64>)
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <_sbrk+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003718:	f007 fafc 	bl	800ad14 <__errno>
 800371c:	0003      	movs	r3, r0
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003722:	2301      	movs	r3, #1
 8003724:	425b      	negs	r3, r3
 8003726:	e009      	b.n	800373c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	18d2      	adds	r2, r2, r3
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <_sbrk+0x64>)
 8003738:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b006      	add	sp, #24
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20009000 	.word	0x20009000
 8003748:	00000400 	.word	0x00000400
 800374c:	20000bd8 	.word	0x20000bd8
 8003750:	20000ef0 	.word	0x20000ef0

08003754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003762:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003764:	f7ff fff6 	bl	8003754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <LoopForever+0x6>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <LoopForever+0xe>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	; (80037ac <LoopForever+0x16>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800378e:	f007 fac7 	bl	800ad20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003792:	f7fe ff09 	bl	80025a8 <main>

08003796 <LoopForever>:

LoopForever:
  b LoopForever
 8003796:	e7fe      	b.n	8003796 <LoopForever>
  ldr   r0, =_estack
 8003798:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 80037a4:	080133a8 	.word	0x080133a8
  ldr r2, =_sbss
 80037a8:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 80037ac:	20000ef0 	.word	0x20000ef0

080037b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC1_COMP_IRQHandler>
	...

080037b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_Init+0x3c>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_Init+0x3c>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	0049      	lsls	r1, r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ce:	2000      	movs	r0, #0
 80037d0:	f000 f810 	bl	80037f4 <HAL_InitTick>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e001      	b.n	80037e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037e0:	f7ff fcb8 	bl	8003154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	781b      	ldrb	r3, [r3, #0]
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037fc:	230f      	movs	r3, #15
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_InitTick+0x88>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02b      	beq.n	8003864 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800380c:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_InitTick+0x8c>)
 800380e:	681c      	ldr	r4, [r3, #0]
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_InitTick+0x88>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	0019      	movs	r1, r3
 8003816:	23fa      	movs	r3, #250	; 0xfa
 8003818:	0098      	lsls	r0, r3, #2
 800381a:	f7fc fc8f 	bl	800013c <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	0019      	movs	r1, r3
 8003822:	0020      	movs	r0, r4
 8003824:	f7fc fc8a 	bl	800013c <__udivsi3>
 8003828:	0003      	movs	r3, r0
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f93d 	bl	8003aaa <HAL_SYSTICK_Config>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d112      	bne.n	800385a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d80a      	bhi.n	8003850 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	2301      	movs	r3, #1
 800383e:	425b      	negs	r3, r3
 8003840:	2200      	movs	r2, #0
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f90c 	bl	8003a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_InitTick+0x90>)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e00d      	b.n	800386c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003850:	230f      	movs	r3, #15
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e008      	b.n	800386c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e003      	b.n	800386c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800386c:	230f      	movs	r3, #15
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	781b      	ldrb	r3, [r3, #0]
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b005      	add	sp, #20
 8003878:	bd90      	pop	{r4, r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20000034 	.word	0x20000034
 8003880:	2000002c 	.word	0x2000002c
 8003884:	20000030 	.word	0x20000030

08003888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_IncTick+0x1c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	001a      	movs	r2, r3
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_IncTick+0x20>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	18d2      	adds	r2, r2, r3
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_IncTick+0x20>)
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000034 	.word	0x20000034
 80038a8:	20000bdc 	.word	0x20000bdc

080038ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_GetTick+0x10>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	20000bdc 	.word	0x20000bdc

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff fff0 	bl	80038ac <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	001a      	movs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	f7ff ffe0 	bl	80038ac <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000034 	.word	0x20000034

08003908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	0002      	movs	r2, r0
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b7f      	cmp	r3, #127	; 0x7f
 800391a:	d809      	bhi.n	8003930 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	001a      	movs	r2, r3
 8003922:	231f      	movs	r3, #31
 8003924:	401a      	ands	r2, r3
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <__NVIC_EnableIRQ+0x30>)
 8003928:	2101      	movs	r1, #1
 800392a:	4091      	lsls	r1, r2
 800392c:	000a      	movs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	0002      	movs	r2, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b7f      	cmp	r3, #127	; 0x7f
 8003950:	d828      	bhi.n	80039a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003952:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <__NVIC_SetPriority+0xd4>)
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b25b      	sxtb	r3, r3
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	33c0      	adds	r3, #192	; 0xc0
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	589b      	ldr	r3, [r3, r2]
 8003962:	1dfa      	adds	r2, r7, #7
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	0011      	movs	r1, r2
 8003968:	2203      	movs	r2, #3
 800396a:	400a      	ands	r2, r1
 800396c:	00d2      	lsls	r2, r2, #3
 800396e:	21ff      	movs	r1, #255	; 0xff
 8003970:	4091      	lsls	r1, r2
 8003972:	000a      	movs	r2, r1
 8003974:	43d2      	mvns	r2, r2
 8003976:	401a      	ands	r2, r3
 8003978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	22ff      	movs	r2, #255	; 0xff
 8003980:	401a      	ands	r2, r3
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	0018      	movs	r0, r3
 8003988:	2303      	movs	r3, #3
 800398a:	4003      	ands	r3, r0
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003990:	481f      	ldr	r0, [pc, #124]	; (8003a10 <__NVIC_SetPriority+0xd4>)
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b25b      	sxtb	r3, r3
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	430a      	orrs	r2, r1
 800399c:	33c0      	adds	r3, #192	; 0xc0
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039a2:	e031      	b.n	8003a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <__NVIC_SetPriority+0xd8>)
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	0019      	movs	r1, r3
 80039ac:	230f      	movs	r3, #15
 80039ae:	400b      	ands	r3, r1
 80039b0:	3b08      	subs	r3, #8
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3306      	adds	r3, #6
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	3304      	adds	r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	1dfa      	adds	r2, r7, #7
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	0011      	movs	r1, r2
 80039c4:	2203      	movs	r2, #3
 80039c6:	400a      	ands	r2, r1
 80039c8:	00d2      	lsls	r2, r2, #3
 80039ca:	21ff      	movs	r1, #255	; 0xff
 80039cc:	4091      	lsls	r1, r2
 80039ce:	000a      	movs	r2, r1
 80039d0:	43d2      	mvns	r2, r2
 80039d2:	401a      	ands	r2, r3
 80039d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	401a      	ands	r2, r3
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0018      	movs	r0, r3
 80039e4:	2303      	movs	r3, #3
 80039e6:	4003      	ands	r3, r0
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <__NVIC_SetPriority+0xd8>)
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	001c      	movs	r4, r3
 80039f4:	230f      	movs	r3, #15
 80039f6:	4023      	ands	r3, r4
 80039f8:	3b08      	subs	r3, #8
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	430a      	orrs	r2, r1
 80039fe:	3306      	adds	r3, #6
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	18c3      	adds	r3, r0, r3
 8003a04:	3304      	adds	r3, #4
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b003      	add	sp, #12
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1e5a      	subs	r2, r3, #1
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	045b      	lsls	r3, r3, #17
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d301      	bcc.n	8003a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e010      	b.n	8003a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <SysTick_Config+0x44>)
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	3a01      	subs	r2, #1
 8003a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a38:	2301      	movs	r3, #1
 8003a3a:	425b      	negs	r3, r3
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ff7c 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <SysTick_Config+0x44>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <SysTick_Config+0x44>)
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	e000e010 	.word	0xe000e010

08003a60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	1c02      	adds	r2, r0, #0
 8003a70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7ff ff5d 	bl	800393c <__NVIC_SetPriority>
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	0002      	movs	r2, r0
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff ff33 	bl	8003908 <__NVIC_EnableIRQ>
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b002      	add	sp, #8
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff ffaf 	bl	8003a18 <SysTick_Config>
 8003aba:	0003      	movs	r3, r0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	e147      	b.n	8003d64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4091      	lsls	r1, r2
 8003ade:	000a      	movs	r2, r1
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d100      	bne.n	8003aec <HAL_GPIO_Init+0x28>
 8003aea:	e138      	b.n	8003d5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d005      	beq.n	8003b04 <HAL_GPIO_Init+0x40>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d130      	bne.n	8003b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	409a      	lsls	r2, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	43da      	mvns	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	409a      	lsls	r2, r3
 8003b26:	0013      	movs	r3, r2
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	43da      	mvns	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	2201      	movs	r2, #1
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d017      	beq.n	8003ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	0013      	movs	r3, r2
 8003b82:	43da      	mvns	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	0013      	movs	r3, r2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d123      	bne.n	8003bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	0092      	lsls	r2, r2, #2
 8003bb8:	58d3      	ldr	r3, [r2, r3]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2107      	movs	r1, #7
 8003bda:	400b      	ands	r3, r1
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	0092      	lsls	r2, r2, #2
 8003bf2:	6939      	ldr	r1, [r7, #16]
 8003bf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2203      	movs	r2, #3
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	43da      	mvns	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2203      	movs	r2, #3
 8003c14:	401a      	ands	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	0013      	movs	r3, r2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	23c0      	movs	r3, #192	; 0xc0
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	4013      	ands	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_GPIO_Init+0x174>
 8003c36:	e092      	b.n	8003d5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c38:	4a50      	ldr	r2, [pc, #320]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3318      	adds	r3, #24
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	589b      	ldr	r3, [r3, r2]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	220f      	movs	r2, #15
 8003c50:	409a      	lsls	r2, r3
 8003c52:	0013      	movs	r3, r2
 8003c54:	43da      	mvns	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	23a0      	movs	r3, #160	; 0xa0
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d013      	beq.n	8003c8e <HAL_GPIO_Init+0x1ca>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a45      	ldr	r2, [pc, #276]	; (8003d80 <HAL_GPIO_Init+0x2bc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00d      	beq.n	8003c8a <HAL_GPIO_Init+0x1c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <HAL_GPIO_Init+0x2c0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <HAL_GPIO_Init+0x1c2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_GPIO_Init+0x2c4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_GPIO_Init+0x1be>
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x1cc>
 8003c82:	2305      	movs	r3, #5
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x1cc>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x1cc>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x1cc>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	2103      	movs	r1, #3
 8003c94:	400a      	ands	r2, r1
 8003c96:	00d2      	lsls	r2, r2, #3
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ca0:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	035b      	lsls	r3, r3, #13
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	039b      	lsls	r3, r3, #14
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003d04:	2384      	movs	r3, #132	; 0x84
 8003d06:	58d3      	ldr	r3, [r2, r3]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	029b      	lsls	r3, r3, #10
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d28:	4914      	ldr	r1, [pc, #80]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003d2a:	2284      	movs	r2, #132	; 0x84
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d30:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d56:	4909      	ldr	r1, [pc, #36]	; (8003d7c <HAL_GPIO_Init+0x2b8>)
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3301      	adds	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	40da      	lsrs	r2, r3
 8003d6c:	1e13      	subs	r3, r2, #0
 8003d6e:	d000      	beq.n	8003d72 <HAL_GPIO_Init+0x2ae>
 8003d70:	e6b0      	b.n	8003ad4 <HAL_GPIO_Init+0x10>
  }
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b006      	add	sp, #24
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021800 	.word	0x40021800
 8003d80:	50000400 	.word	0x50000400
 8003d84:	50000800 	.word	0x50000800
 8003d88:	50000c00 	.word	0x50000c00

08003d8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d9a:	e0b4      	b.n	8003f06 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	409a      	lsls	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d100      	bne.n	8003db0 <HAL_GPIO_DeInit+0x24>
 8003dae:	e0a7      	b.n	8003f00 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003db0:	4a5a      	ldr	r2, [pc, #360]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3318      	adds	r3, #24
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	589b      	ldr	r3, [r3, r2]
 8003dbc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	23a0      	movs	r3, #160	; 0xa0
 8003dd4:	05db      	lsls	r3, r3, #23
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d013      	beq.n	8003e02 <HAL_GPIO_DeInit+0x76>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_GPIO_DeInit+0x194>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_GPIO_DeInit+0x72>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_DeInit+0x198>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <HAL_GPIO_DeInit+0x6e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_GPIO_DeInit+0x19c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_GPIO_DeInit+0x6a>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_DeInit+0x78>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e004      	b.n	8003e04 <HAL_GPIO_DeInit+0x78>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e002      	b.n	8003e04 <HAL_GPIO_DeInit+0x78>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_GPIO_DeInit+0x78>
 8003e02:	2300      	movs	r3, #0
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	2103      	movs	r1, #3
 8003e08:	400a      	ands	r2, r1
 8003e0a:	00d2      	lsls	r2, r2, #3
 8003e0c:	4093      	lsls	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d136      	bne.n	8003e82 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e14:	4a41      	ldr	r2, [pc, #260]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	58d3      	ldr	r3, [r2, r3]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	43d2      	mvns	r2, r2
 8003e1e:	493f      	ldr	r1, [pc, #252]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e26:	4a3d      	ldr	r2, [pc, #244]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e28:	2384      	movs	r3, #132	; 0x84
 8003e2a:	58d3      	ldr	r3, [r2, r3]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	43d2      	mvns	r2, r2
 8003e30:	493a      	ldr	r1, [pc, #232]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	2284      	movs	r2, #132	; 0x84
 8003e36:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43d9      	mvns	r1, r3
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e46:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43d9      	mvns	r1, r3
 8003e4e:	4b33      	ldr	r3, [pc, #204]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4013      	ands	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	0013      	movs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	589a      	ldr	r2, [r3, r2]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	4829      	ldr	r0, [pc, #164]	; (8003f1c <HAL_GPIO_DeInit+0x190>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	3318      	adds	r3, #24
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	4099      	lsls	r1, r3
 8003e8e:	000b      	movs	r3, r1
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	08da      	lsrs	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3208      	adds	r2, #8
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	58d3      	ldr	r3, [r2, r3]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	2107      	movs	r1, #7
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	0092      	lsls	r2, r2, #2
 8003eaa:	210f      	movs	r1, #15
 8003eac:	4091      	lsls	r1, r2
 8003eae:	000a      	movs	r2, r1
 8003eb0:	43d1      	mvns	r1, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	08d2      	lsrs	r2, r2, #3
 8003eb6:	4019      	ands	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	2103      	movs	r1, #3
 8003eca:	4091      	lsls	r1, r2
 8003ecc:	000a      	movs	r2, r1
 8003ece:	43d2      	mvns	r2, r2
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2101      	movs	r1, #1
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4091      	lsls	r1, r2
 8003ee0:	000a      	movs	r2, r1
 8003ee2:	43d2      	mvns	r2, r2
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	2103      	movs	r1, #3
 8003ef4:	4091      	lsls	r1, r2
 8003ef6:	000a      	movs	r2, r1
 8003ef8:	43d2      	mvns	r2, r2
 8003efa:	401a      	ands	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3301      	adds	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	40da      	lsrs	r2, r3
 8003f0c:	1e13      	subs	r3, r2, #0
 8003f0e:	d000      	beq.n	8003f12 <HAL_GPIO_DeInit+0x186>
 8003f10:	e744      	b.n	8003d9c <HAL_GPIO_DeInit+0x10>
  }
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021800 	.word	0x40021800
 8003f20:	50000400 	.word	0x50000400
 8003f24:	50000800 	.word	0x50000800
 8003f28:	50000c00 	.word	0x50000c00

08003f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	000a      	movs	r2, r1
 8003f36:	1cbb      	adds	r3, r7, #2
 8003f38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	1cba      	adds	r2, r7, #2
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	4013      	ands	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f46:	230f      	movs	r3, #15
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e003      	b.n	8003f58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f50:	230f      	movs	r3, #15
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f58:	230f      	movs	r3, #15
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	781b      	ldrb	r3, [r3, #0]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	0008      	movs	r0, r1
 8003f70:	0011      	movs	r1, r2
 8003f72:	1cbb      	adds	r3, r7, #2
 8003f74:	1c02      	adds	r2, r0, #0
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	1c7b      	adds	r3, r7, #1
 8003f7a:	1c0a      	adds	r2, r1, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f7e:	1c7b      	adds	r3, r7, #1
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f86:	1cbb      	adds	r3, r7, #2
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f8e:	e003      	b.n	8003f98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f90:	1cbb      	adds	r3, r7, #2
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e082      	b.n	80040b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2241      	movs	r2, #65	; 0x41
 8003fb6:	5c9b      	ldrb	r3, [r3, r2]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff f8e7 	bl	800319c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2241      	movs	r2, #65	; 0x41
 8003fd2:	2124      	movs	r1, #36	; 0x24
 8003fd4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4934      	ldr	r1, [pc, #208]	; (80040c0 <HAL_I2C_Init+0x120>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4931      	ldr	r1, [pc, #196]	; (80040c4 <HAL_I2C_Init+0x124>)
 8004000:	400a      	ands	r2, r1
 8004002:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0209      	lsls	r1, r1, #8
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e007      	b.n	800402e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2184      	movs	r1, #132	; 0x84
 8004028:	0209      	lsls	r1, r1, #8
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d104      	bne.n	8004040 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	491f      	ldr	r1, [pc, #124]	; (80040c8 <HAL_I2C_Init+0x128>)
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	491a      	ldr	r1, [pc, #104]	; (80040c4 <HAL_I2C_Init+0x124>)
 800405c:	400a      	ands	r2, r1
 800405e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	431a      	orrs	r2, r3
 800406a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69d9      	ldr	r1, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2101      	movs	r1, #1
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2241      	movs	r2, #65	; 0x41
 80040a4:	2120      	movs	r1, #32
 80040a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2242      	movs	r2, #66	; 0x42
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	f0ffffff 	.word	0xf0ffffff
 80040c4:	ffff7fff 	.word	0xffff7fff
 80040c8:	02008000 	.word	0x02008000

080040cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2241      	movs	r2, #65	; 0x41
 80040da:	5c9b      	ldrb	r3, [r3, r2]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d138      	bne.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2240      	movs	r2, #64	; 0x40
 80040e6:	5c9b      	ldrb	r3, [r3, r2]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e032      	b.n	8004156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2240      	movs	r2, #64	; 0x40
 80040f4:	2101      	movs	r1, #1
 80040f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2241      	movs	r2, #65	; 0x41
 80040fc:	2124      	movs	r1, #36	; 0x24
 80040fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	438a      	bics	r2, r1
 800410e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4911      	ldr	r1, [pc, #68]	; (8004160 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800411c:	400a      	ands	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2241      	movs	r2, #65	; 0x41
 8004144:	2120      	movs	r1, #32
 8004146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2240      	movs	r2, #64	; 0x40
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b002      	add	sp, #8
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	ffffefff 	.word	0xffffefff

08004164 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2241      	movs	r2, #65	; 0x41
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d139      	bne.n	80041ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	5c9b      	ldrb	r3, [r3, r2]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004184:	2302      	movs	r3, #2
 8004186:	e033      	b.n	80041f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	2101      	movs	r1, #1
 800418e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2241      	movs	r2, #65	; 0x41
 8004194:	2124      	movs	r1, #36	; 0x24
 8004196:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2101      	movs	r1, #1
 80041a4:	438a      	bics	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2241      	movs	r2, #65	; 0x41
 80041de:	2120      	movs	r1, #32
 80041e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2240      	movs	r2, #64	; 0x40
 80041e6:	2100      	movs	r1, #0
 80041e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b004      	add	sp, #16
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	fffff0ff 	.word	0xfffff0ff

080041fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d11f      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	0013      	movs	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	189b      	adds	r3, r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4912      	ldr	r1, [pc, #72]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800422e:	0018      	movs	r0, r3
 8004230:	f7fb ff84 	bl	800013c <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423a:	e008      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b01      	subs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e001      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e009      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	401a      	ands	r2, r3
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	429a      	cmp	r2, r3
 800425e:	d0ed      	beq.n	800423c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	40007000 	.word	0x40007000
 8004270:	fffff9ff 	.word	0xfffff9ff
 8004274:	2000002c 	.word	0x2000002c
 8004278:	000f4240 	.word	0x000f4240

0800427c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	23e0      	movs	r3, #224	; 0xe0
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	4013      	ands	r3, r2
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000

08004294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e2fe      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d100      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1e>
 80042b0:	e07c      	b.n	80043ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4bc3      	ldr	r3, [pc, #780]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2238      	movs	r2, #56	; 0x38
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	4bc0      	ldr	r3, [pc, #768]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4013      	ands	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3e>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	4bb9      	ldr	r3, [pc, #740]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	4013      	ands	r3, r2
 80042e2:	d062      	beq.n	80043aa <HAL_RCC_OscConfig+0x116>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d15e      	bne.n	80043aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e2d9      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x78>
 80042fc:	4bb0      	ldr	r3, [pc, #704]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4baf      	ldr	r3, [pc, #700]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0249      	lsls	r1, r1, #9
 8004306:	430a      	orrs	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e020      	b.n	800434e <HAL_RCC_OscConfig+0xba>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	23a0      	movs	r3, #160	; 0xa0
 8004312:	02db      	lsls	r3, r3, #11
 8004314:	429a      	cmp	r2, r3
 8004316:	d10e      	bne.n	8004336 <HAL_RCC_OscConfig+0xa2>
 8004318:	4ba9      	ldr	r3, [pc, #676]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4ba8      	ldr	r3, [pc, #672]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	02c9      	lsls	r1, r1, #11
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	4ba6      	ldr	r3, [pc, #664]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4ba5      	ldr	r3, [pc, #660]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0249      	lsls	r1, r1, #9
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e00b      	b.n	800434e <HAL_RCC_OscConfig+0xba>
 8004336:	4ba2      	ldr	r3, [pc, #648]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4ba1      	ldr	r3, [pc, #644]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800433c:	49a1      	ldr	r1, [pc, #644]	; (80045c4 <HAL_RCC_OscConfig+0x330>)
 800433e:	400a      	ands	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4b9f      	ldr	r3, [pc, #636]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004348:	499f      	ldr	r1, [pc, #636]	; (80045c8 <HAL_RCC_OscConfig+0x334>)
 800434a:	400a      	ands	r2, r1
 800434c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d014      	beq.n	8004380 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7ff faa9 	bl	80038ac <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004360:	f7ff faa4 	bl	80038ac <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e298      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004372:	4b93      	ldr	r3, [pc, #588]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	4013      	ands	r3, r2
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0xcc>
 800437e:	e015      	b.n	80043ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7ff fa94 	bl	80038ac <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438a:	f7ff fa8f 	bl	80038ac <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e283      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800439c:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	029b      	lsls	r3, r3, #10
 80043a4:	4013      	ands	r3, r2
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0xf6>
 80043a8:	e000      	b.n	80043ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d100      	bne.n	80043b8 <HAL_RCC_OscConfig+0x124>
 80043b6:	e099      	b.n	80044ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b8:	4b81      	ldr	r3, [pc, #516]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2238      	movs	r2, #56	; 0x38
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c2:	4b7f      	ldr	r3, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2203      	movs	r2, #3
 80043c8:	4013      	ands	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d102      	bne.n	80043d8 <HAL_RCC_OscConfig+0x144>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d002      	beq.n	80043de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d135      	bne.n	800444a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043de:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4013      	ands	r3, r2
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x162>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e256      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a74      	ldr	r2, [pc, #464]	; (80045cc <HAL_RCC_OscConfig+0x338>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004412:	4b6b      	ldr	r3, [pc, #428]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0x33c>)
 8004418:	4013      	ands	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	4b67      	ldr	r3, [pc, #412]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004426:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0adb      	lsrs	r3, r3, #11
 800442c:	2207      	movs	r2, #7
 800442e:	4013      	ands	r3, r2
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_RCC_OscConfig+0x340>)
 8004432:	40da      	lsrs	r2, r3
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x344>)
 8004436:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004438:	4b68      	ldr	r3, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x348>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff f9d9 	bl	80037f4 <HAL_InitTick>
 8004442:	1e03      	subs	r3, r0, #0
 8004444:	d051      	beq.n	80044ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e22c      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d030      	beq.n	80044b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5e      	ldr	r2, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x33c>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	4b57      	ldr	r3, [pc, #348]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004466:	4b56      	ldr	r3, [pc, #344]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b55      	ldr	r3, [pc, #340]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0049      	lsls	r1, r1, #1
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7ff fa1a 	bl	80038ac <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7ff fa15 	bl	80038ac <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e209      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4013      	ands	r3, r2
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_RCC_OscConfig+0x338>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	0019      	movs	r1, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e01b      	b.n	80044ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80044b4:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80044ba:	4949      	ldr	r1, [pc, #292]	; (80045e0 <HAL_RCC_OscConfig+0x34c>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7ff f9f4 	bl	80038ac <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7ff f9ef 	bl	80038ac <HAL_GetTick>
 80044ce:	0002      	movs	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1e3      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044dc:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4013      	ands	r3, r2
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x236>
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2208      	movs	r2, #8
 80044f2:	4013      	ands	r3, r2
 80044f4:	d047      	beq.n	8004586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044f6:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2238      	movs	r2, #56	; 0x38
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b18      	cmp	r3, #24
 8004500:	d10a      	bne.n	8004518 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004502:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	2202      	movs	r2, #2
 8004508:	4013      	ands	r3, r2
 800450a:	d03c      	beq.n	8004586 <HAL_RCC_OscConfig+0x2f2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d138      	bne.n	8004586 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e1c5      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004526:	2101      	movs	r1, #1
 8004528:	430a      	orrs	r2, r1
 800452a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7ff f9be 	bl	80038ac <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7ff f9b9 	bl	80038ac <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1ad      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d0f1      	beq.n	8004536 <HAL_RCC_OscConfig+0x2a2>
 8004552:	e018      	b.n	8004586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 8004556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800455a:	2101      	movs	r1, #1
 800455c:	438a      	bics	r2, r1
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7ff f9a4 	bl	80038ac <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7ff f99f 	bl	80038ac <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e193      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d1f1      	bne.n	800456a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	d100      	bne.n	8004592 <HAL_RCC_OscConfig+0x2fe>
 8004590:	e0c6      	b.n	8004720 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	231f      	movs	r3, #31
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2238      	movs	r2, #56	; 0x38
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d11e      	bne.n	80045e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_OscConfig+0x32c>)
 80045a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	d100      	bne.n	80045b2 <HAL_RCC_OscConfig+0x31e>
 80045b0:	e0b6      	b.n	8004720 <HAL_RCC_OscConfig+0x48c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d000      	beq.n	80045bc <HAL_RCC_OscConfig+0x328>
 80045ba:	e0b1      	b.n	8004720 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e171      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
 80045c0:	40021000 	.word	0x40021000
 80045c4:	fffeffff 	.word	0xfffeffff
 80045c8:	fffbffff 	.word	0xfffbffff
 80045cc:	ffff80ff 	.word	0xffff80ff
 80045d0:	ffffc7ff 	.word	0xffffc7ff
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	2000002c 	.word	0x2000002c
 80045dc:	20000030 	.word	0x20000030
 80045e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e4:	4bb1      	ldr	r3, [pc, #708]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80045e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	055b      	lsls	r3, r3, #21
 80045ec:	4013      	ands	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x360>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x362>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	4bac      	ldr	r3, [pc, #688]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80045fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fe:	4bab      	ldr	r3, [pc, #684]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	0549      	lsls	r1, r1, #21
 8004604:	430a      	orrs	r2, r1
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c
 8004608:	4ba8      	ldr	r3, [pc, #672]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	055b      	lsls	r3, r3, #21
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004616:	231f      	movs	r3, #31
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461e:	4ba4      	ldr	r3, [pc, #656]	; (80048b0 <HAL_RCC_OscConfig+0x61c>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4013      	ands	r3, r2
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462a:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_RCC_OscConfig+0x61c>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4ba0      	ldr	r3, [pc, #640]	; (80048b0 <HAL_RCC_OscConfig+0x61c>)
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	0049      	lsls	r1, r1, #1
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004638:	f7ff f938 	bl	80038ac <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7ff f933 	bl	80038ac <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e127      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004654:	4b96      	ldr	r3, [pc, #600]	; (80048b0 <HAL_RCC_OscConfig+0x61c>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4013      	ands	r3, r2
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x3e2>
 8004668:	4b90      	ldr	r3, [pc, #576]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800466a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800466c:	4b8f      	ldr	r3, [pc, #572]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800466e:	2101      	movs	r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c
 8004674:	e01c      	b.n	80046b0 <HAL_RCC_OscConfig+0x41c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x404>
 800467e:	4b8b      	ldr	r3, [pc, #556]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004682:	4b8a      	ldr	r3, [pc, #552]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004684:	2104      	movs	r1, #4
 8004686:	430a      	orrs	r2, r1
 8004688:	65da      	str	r2, [r3, #92]	; 0x5c
 800468a:	4b88      	ldr	r3, [pc, #544]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800468c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800468e:	4b87      	ldr	r3, [pc, #540]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004690:	2101      	movs	r1, #1
 8004692:	430a      	orrs	r2, r1
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c
 8004696:	e00b      	b.n	80046b0 <HAL_RCC_OscConfig+0x41c>
 8004698:	4b84      	ldr	r3, [pc, #528]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800469a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800469c:	4b83      	ldr	r3, [pc, #524]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800469e:	2101      	movs	r1, #1
 80046a0:	438a      	bics	r2, r1
 80046a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80046a4:	4b81      	ldr	r3, [pc, #516]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80046a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80046aa:	2104      	movs	r1, #4
 80046ac:	438a      	bics	r2, r1
 80046ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7ff f8f8 	bl	80038ac <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e009      	b.n	80046d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7ff f8f3 	bl	80038ac <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	4a79      	ldr	r2, [pc, #484]	; (80048b4 <HAL_RCC_OscConfig+0x620>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0e6      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d6:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	2202      	movs	r2, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x42e>
 80046e0:	e013      	b.n	800470a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7ff f8e3 	bl	80038ac <HAL_GetTick>
 80046e6:	0003      	movs	r3, r0
 80046e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ea:	e009      	b.n	8004700 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7ff f8de 	bl	80038ac <HAL_GetTick>
 80046f0:	0002      	movs	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	4a6f      	ldr	r2, [pc, #444]	; (80048b4 <HAL_RCC_OscConfig+0x620>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0d1      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004700:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2202      	movs	r2, #2
 8004706:	4013      	ands	r3, r2
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800470a:	231f      	movs	r3, #31
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004714:	4b65      	ldr	r3, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	4b64      	ldr	r3, [pc, #400]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800471a:	4967      	ldr	r1, [pc, #412]	; (80048b8 <HAL_RCC_OscConfig+0x624>)
 800471c:	400a      	ands	r2, r1
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d100      	bne.n	800472a <HAL_RCC_OscConfig+0x496>
 8004728:	e0bb      	b.n	80048a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2238      	movs	r2, #56	; 0x38
 8004730:	4013      	ands	r3, r2
 8004732:	2b10      	cmp	r3, #16
 8004734:	d100      	bne.n	8004738 <HAL_RCC_OscConfig+0x4a4>
 8004736:	e07b      	b.n	8004830 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d156      	bne.n	80047ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004746:	495d      	ldr	r1, [pc, #372]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7ff f8ae 	bl	80038ac <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004756:	f7ff f8a9 	bl	80038ac <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e09d      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004768:	4b50      	ldr	r3, [pc, #320]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	049b      	lsls	r3, r3, #18
 8004770:	4013      	ands	r3, r2
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004774:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a51      	ldr	r2, [pc, #324]	; (80048c0 <HAL_RCC_OscConfig+0x62c>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	431a      	orrs	r2, r3
 80047a2:	4b42      	ldr	r3, [pc, #264]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	0449      	lsls	r1, r1, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	4b3c      	ldr	r3, [pc, #240]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	0549      	lsls	r1, r1, #21
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7ff f872 	bl	80038ac <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ce:	f7ff f86d 	bl	80038ac <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e061      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e0:	4b32      	ldr	r3, [pc, #200]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	049b      	lsls	r3, r3, #18
 80047e8:	4013      	ands	r3, r2
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x53a>
 80047ec:	e059      	b.n	80048a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047f4:	4931      	ldr	r1, [pc, #196]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7ff f857 	bl	80038ac <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7ff f852 	bl	80038ac <HAL_GetTick>
 8004808:	0002      	movs	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e046      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	049b      	lsls	r3, r3, #18
 800481e:	4013      	ands	r3, r2
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004822:	4b22      	ldr	r3, [pc, #136]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004828:	4926      	ldr	r1, [pc, #152]	; (80048c4 <HAL_RCC_OscConfig+0x630>)
 800482a:	400a      	ands	r2, r1
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e038      	b.n	80048a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e033      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2203      	movs	r2, #3
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	429a      	cmp	r2, r3
 800484e:	d126      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2270      	movs	r2, #112	; 0x70
 8004854:	401a      	ands	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d11f      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	23fe      	movs	r3, #254	; 0xfe
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	401a      	ands	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d116      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	23f8      	movs	r3, #248	; 0xf8
 8004874:	039b      	lsls	r3, r3, #14
 8004876:	401a      	ands	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d10e      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	23e0      	movs	r3, #224	; 0xe0
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	401a      	ands	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0f5b      	lsrs	r3, r3, #29
 8004894:	075a      	lsls	r2, r3, #29
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b008      	add	sp, #32
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40007000 	.word	0x40007000
 80048b4:	00001388 	.word	0x00001388
 80048b8:	efffffff 	.word	0xefffffff
 80048bc:	feffffff 	.word	0xfeffffff
 80048c0:	11c1808c 	.word	0x11c1808c
 80048c4:	eefefffc 	.word	0xeefefffc

080048c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0e9      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2207      	movs	r2, #7
 80048e2:	4013      	ands	r3, r2
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d91e      	bls.n	8004928 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b73      	ldr	r3, [pc, #460]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2207      	movs	r2, #7
 80048f0:	4393      	bics	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048fc:	f7fe ffd6 	bl	80038ac <HAL_GetTick>
 8004900:	0003      	movs	r3, r0
 8004902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004904:	e009      	b.n	800491a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004906:	f7fe ffd1 	bl	80038ac <HAL_GetTick>
 800490a:	0002      	movs	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <HAL_RCC_ClockConfig+0x1f4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0ca      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800491a:	4b67      	ldr	r3, [pc, #412]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2207      	movs	r2, #7
 8004920:	4013      	ands	r3, r2
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d1ee      	bne.n	8004906 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d015      	beq.n	800495e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2204      	movs	r2, #4
 8004938:	4013      	ands	r3, r2
 800493a:	d006      	beq.n	800494a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b5f      	ldr	r3, [pc, #380]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004942:	21e0      	movs	r1, #224	; 0xe0
 8004944:	01c9      	lsls	r1, r1, #7
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494a:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b59      	ldr	r3, [pc, #356]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	d057      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004970:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	029b      	lsls	r3, r3, #10
 8004978:	4013      	ands	r3, r2
 800497a:	d12b      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e097      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004988:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	049b      	lsls	r3, r3, #18
 8004990:	4013      	ands	r3, r2
 8004992:	d11f      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e08b      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a0:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	d113      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e07f      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b8:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	2202      	movs	r2, #2
 80049be:	4013      	ands	r3, r2
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e074      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e06d      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d4:	4b3a      	ldr	r3, [pc, #232]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2207      	movs	r2, #7
 80049da:	4393      	bics	r3, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fe ff60 	bl	80038ac <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f0:	e009      	b.n	8004a06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f2:	f7fe ff5b 	bl	80038ac <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <HAL_RCC_ClockConfig+0x1f4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e054      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2238      	movs	r2, #56	; 0x38
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1ec      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	4013      	ands	r3, r2
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d21e      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a38:	f7fe ff38 	bl	80038ac <HAL_GetTick>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a40:	e009      	b.n	8004a56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a42:	f7fe ff33 	bl	80038ac <HAL_GetTick>
 8004a46:	0002      	movs	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_RCC_ClockConfig+0x1f4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e02c      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2207      	movs	r2, #7
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2204      	movs	r2, #4
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_RCC_ClockConfig+0x200>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a82:	f000 f829 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a86:	0001      	movs	r1, r0
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	220f      	movs	r2, #15
 8004a90:	401a      	ands	r2, r3
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_RCC_ClockConfig+0x204>)
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	58d3      	ldr	r3, [r2, r3]
 8004a98:	221f      	movs	r2, #31
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	000a      	movs	r2, r1
 8004a9e:	40da      	lsrs	r2, r3
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x208>)
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_ClockConfig+0x20c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fe fea3 	bl	80037f4 <HAL_InitTick>
 8004aae:	0003      	movs	r3, r0
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	00001388 	.word	0x00001388
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	fffff0ff 	.word	0xfffff0ff
 8004ac8:	ffff8fff 	.word	0xffff8fff
 8004acc:	08012e54 	.word	0x08012e54
 8004ad0:	2000002c 	.word	0x2000002c
 8004ad4:	20000030 	.word	0x20000030

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ade:	4b3c      	ldr	r3, [pc, #240]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2238      	movs	r2, #56	; 0x38
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d10f      	bne.n	8004b08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0adb      	lsrs	r3, r3, #11
 8004aee:	2207      	movs	r2, #7
 8004af0:	4013      	ands	r3, r2
 8004af2:	2201      	movs	r2, #1
 8004af4:	409a      	lsls	r2, r3
 8004af6:	0013      	movs	r3, r2
 8004af8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004afa:	6839      	ldr	r1, [r7, #0]
 8004afc:	4835      	ldr	r0, [pc, #212]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004afe:	f7fb fb1d 	bl	800013c <__udivsi3>
 8004b02:	0003      	movs	r3, r0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e05d      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2238      	movs	r2, #56	; 0x38
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d102      	bne.n	8004b1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b14:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	e054      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2238      	movs	r2, #56	; 0x38
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d138      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	2207      	movs	r2, #7
 8004b38:	4013      	ands	r3, r2
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4824      	ldr	r0, [pc, #144]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b48:	f7fb faf8 	bl	800013c <__udivsi3>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	0019      	movs	r1, r3
 8004b50:	4b1f      	ldr	r3, [pc, #124]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	227f      	movs	r2, #127	; 0x7f
 8004b58:	4013      	ands	r3, r2
 8004b5a:	434b      	muls	r3, r1
 8004b5c:	617b      	str	r3, [r7, #20]
        break;
 8004b5e:	e00d      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	481c      	ldr	r0, [pc, #112]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b64:	f7fb faea 	bl	800013c <__udivsi3>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	227f      	movs	r2, #127	; 0x7f
 8004b74:	4013      	ands	r3, r2
 8004b76:	434b      	muls	r3, r1
 8004b78:	617b      	str	r3, [r7, #20]
        break;
 8004b7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0f5b      	lsrs	r3, r3, #29
 8004b82:	2207      	movs	r2, #7
 8004b84:	4013      	ands	r3, r2
 8004b86:	3301      	adds	r3, #1
 8004b88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f7fb fad5 	bl	800013c <__udivsi3>
 8004b92:	0003      	movs	r3, r0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e015      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2238      	movs	r2, #56	; 0x38
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d103      	bne.n	8004bac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2238      	movs	r2, #56	; 0x38
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b18      	cmp	r3, #24
 8004bb6:	d103      	bne.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004bb8:	23fa      	movs	r3, #250	; 0xfa
 8004bba:	01db      	lsls	r3, r3, #7
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e001      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bc4:	693b      	ldr	r3, [r7, #16]
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b006      	add	sp, #24
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <HAL_RCC_GetHCLKFreq+0x10>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	2000002c 	.word	0x2000002c

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bf4:	f7ff fff2 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bf8:	0004      	movs	r4, r0
 8004bfa:	f7ff fb3f 	bl	800427c <LL_RCC_GetAPB1Prescaler>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	0b1a      	lsrs	r2, r3, #12
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	58d3      	ldr	r3, [r2, r3]
 8004c08:	221f      	movs	r2, #31
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	40dc      	lsrs	r4, r3
 8004c0e:	0023      	movs	r3, r4
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bdb0      	pop	{r4, r5, r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	08012e94 	.word	0x08012e94

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c24:	2313      	movs	r3, #19
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c2c:	2312      	movs	r3, #18
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c40:	e0a3      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2011      	movs	r0, #17
 8004c44:	183b      	adds	r3, r7, r0
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4bc3      	ldr	r3, [pc, #780]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	055b      	lsls	r3, r3, #21
 8004c52:	4013      	ands	r3, r2
 8004c54:	d110      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4bc0      	ldr	r3, [pc, #768]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c5a:	4bbf      	ldr	r3, [pc, #764]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	0549      	lsls	r1, r1, #21
 8004c60:	430a      	orrs	r2, r1
 8004c62:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c64:	4bbc      	ldr	r3, [pc, #752]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	055b      	lsls	r3, r3, #21
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c72:	183b      	adds	r3, r7, r0
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c78:	4bb8      	ldr	r3, [pc, #736]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4bb7      	ldr	r3, [pc, #732]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	0049      	lsls	r1, r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c86:	f7fe fe11 	bl	80038ac <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fe fe0c 	bl	80038ac <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d904      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c9e:	2313      	movs	r3, #19
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	701a      	strb	r2, [r3, #0]
        break;
 8004ca6:	e005      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ca8:	4bac      	ldr	r3, [pc, #688]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0ed      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004cb4:	2313      	movs	r3, #19
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d154      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cbe:	4ba6      	ldr	r3, [pc, #664]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc2:	23c0      	movs	r3, #192	; 0xc0
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d019      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d014      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cda:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cde:	4aa0      	ldr	r2, [pc, #640]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ce4:	4b9c      	ldr	r3, [pc, #624]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ce8:	4b9b      	ldr	r3, [pc, #620]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	0249      	lsls	r1, r1, #9
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cf6:	4b98      	ldr	r3, [pc, #608]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf8:	499a      	ldr	r1, [pc, #616]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cfe:	4b96      	ldr	r3, [pc, #600]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d016      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fdce 	bl	80038ac <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d14:	e00c      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fe fdc9 	bl	80038ac <HAL_GetTick>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	4a91      	ldr	r2, [pc, #580]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d904      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d26:	2313      	movs	r3, #19
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	701a      	strb	r2, [r3, #0]
            break;
 8004d2e:	e004      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d30:	4b89      	ldr	r3, [pc, #548]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	2202      	movs	r2, #2
 8004d36:	4013      	ands	r3, r2
 8004d38:	d0ed      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d3a:	2313      	movs	r3, #19
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d44:	4b84      	ldr	r3, [pc, #528]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	4a85      	ldr	r2, [pc, #532]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d52:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d58:	e00c      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d5a:	2312      	movs	r3, #18
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	2213      	movs	r2, #19
 8004d60:	18ba      	adds	r2, r7, r2
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e005      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	2312      	movs	r3, #18
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2213      	movs	r2, #19
 8004d6e:	18ba      	adds	r2, r7, r2
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d74:	2311      	movs	r3, #17
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d82:	4b75      	ldr	r3, [pc, #468]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d84:	4979      	ldr	r1, [pc, #484]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d94:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	2203      	movs	r2, #3
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da4:	430a      	orrs	r2, r1
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2202      	movs	r2, #2
 8004dae:	4013      	ands	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db2:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	220c      	movs	r2, #12
 8004db8:	4393      	bics	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dd0:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd4:	4a66      	ldr	r2, [pc, #408]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de0:	430a      	orrs	r2, r1
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df0:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	4a5f      	ldr	r2, [pc, #380]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e00:	430a      	orrs	r2, r1
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e10:	4b51      	ldr	r3, [pc, #324]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	0019      	movs	r1, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	4b4e      	ldr	r3, [pc, #312]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d015      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e4e:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	0899      	lsrs	r1, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	05db      	lsls	r3, r3, #23
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e6c:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0249      	lsls	r1, r1, #9
 8004e76:	430a      	orrs	r2, r1
 8004e78:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	031b      	lsls	r3, r3, #12
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e86:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e94:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	039b      	lsls	r3, r3, #14
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d016      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	03db      	lsls	r3, r3, #15
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	0449      	lsls	r1, r1, #17
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	03db      	lsls	r3, r3, #15
 8004edc:	4013      	ands	r3, r2
 8004ede:	d016      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	045b      	lsls	r3, r3, #17
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d106      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f00:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	0449      	lsls	r1, r1, #17
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4013      	ands	r3, r2
 8004f18:	d016      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	01db      	lsls	r3, r3, #7
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d106      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	0249      	lsls	r1, r1, #9
 8004f44:	430a      	orrs	r2, r1
 8004f46:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f48:	2312      	movs	r3, #18
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	781b      	ldrb	r3, [r3, #0]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b006      	add	sp, #24
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	fffffcff 	.word	0xfffffcff
 8004f64:	fffeffff 	.word	0xfffeffff
 8004f68:	00001388 	.word	0x00001388
 8004f6c:	efffffff 	.word	0xefffffff
 8004f70:	fffff3ff 	.word	0xfffff3ff
 8004f74:	fff3ffff 	.word	0xfff3ffff
 8004f78:	ffcfffff 	.word	0xffcfffff
 8004f7c:	ffffcfff 	.word	0xffffcfff
 8004f80:	ffbfffff 	.word	0xffbfffff
 8004f84:	feffffff 	.word	0xfeffffff
 8004f88:	ffff3fff 	.word	0xffff3fff

08004f8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f94:	230f      	movs	r3, #15
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d100      	bne.n	8004fa4 <HAL_RTC_Init+0x18>
 8004fa2:	e08c      	b.n	80050be <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2229      	movs	r2, #41	; 0x29
 8004fa8:	5c9b      	ldrb	r3, [r3, r2]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2228      	movs	r2, #40	; 0x28
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2288      	movs	r2, #136	; 0x88
 8004fbc:	0212      	lsls	r2, r2, #8
 8004fbe:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fe f94c 	bl	8003260 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2229      	movs	r2, #41	; 0x29
 8004fcc:	2102      	movs	r1, #2
 8004fce:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d062      	beq.n	80050a4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	22ca      	movs	r2, #202	; 0xca
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2253      	movs	r2, #83	; 0x53
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fee:	250f      	movs	r5, #15
 8004ff0:	197c      	adds	r4, r7, r5
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 fb9c 	bl	8005732 <RTC_EnterInitMode>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004ffe:	0028      	movs	r0, r5
 8005000:	183b      	adds	r3, r7, r0
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d12c      	bne.n	8005062 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	492e      	ldr	r1, [pc, #184]	; (80050cc <HAL_RTC_Init+0x140>)
 8005014:	400a      	ands	r2, r1
 8005016:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6912      	ldr	r2, [r2, #16]
 800503e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6919      	ldr	r1, [r3, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	041a      	lsls	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005054:	183c      	adds	r4, r7, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 fbad 	bl	80057b8 <RTC_ExitInitMode>
 800505e:	0003      	movs	r3, r0
 8005060:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005062:	230f      	movs	r3, #15
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d116      	bne.n	800509a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	00d2      	lsls	r2, r2, #3
 8005078:	08d2      	lsrs	r2, r2, #3
 800507a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	22ff      	movs	r2, #255	; 0xff
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24
 80050a2:	e003      	b.n	80050ac <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80050a4:	230f      	movs	r3, #15
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80050ac:	230f      	movs	r3, #15
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2229      	movs	r2, #41	; 0x29
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80050be:	230f      	movs	r3, #15
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	781b      	ldrb	r3, [r3, #0]
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bdb0      	pop	{r4, r5, r7, pc}
 80050cc:	fb8fffbf 	.word	0xfb8fffbf

080050d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2228      	movs	r2, #40	; 0x28
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_RTC_SetTime+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e092      	b.n	8005210 <HAL_RTC_SetTime+0x140>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2228      	movs	r2, #40	; 0x28
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2229      	movs	r2, #41	; 0x29
 80050f6:	2102      	movs	r1, #2
 80050f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	22ca      	movs	r2, #202	; 0xca
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2253      	movs	r2, #83	; 0x53
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800510a:	2513      	movs	r5, #19
 800510c:	197c      	adds	r4, r7, r5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 fb0e 	bl	8005732 <RTC_EnterInitMode>
 8005116:	0003      	movs	r3, r0
 8005118:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800511a:	197b      	adds	r3, r7, r5
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d162      	bne.n	80051e8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d125      	bne.n	8005174 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	4013      	ands	r3, r2
 8005132:	d102      	bne.n	800513a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 fb7e 	bl	8005840 <RTC_ByteToBcd2>
 8005144:	0003      	movs	r3, r0
 8005146:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 fb77 	bl	8005840 <RTC_ByteToBcd2>
 8005152:	0003      	movs	r3, r0
 8005154:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005156:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	789b      	ldrb	r3, [r3, #2]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 fb6f 	bl	8005840 <RTC_ByteToBcd2>
 8005162:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005164:	0022      	movs	r2, r4
 8005166:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	78db      	ldrb	r3, [r3, #3]
 800516c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e017      	b.n	80051a4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	4013      	ands	r3, r2
 800517e:	d102      	bne.n	8005186 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005192:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005198:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	491b      	ldr	r1, [pc, #108]	; (8005218 <HAL_RTC_SetTime+0x148>)
 80051ac:	400a      	ands	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4918      	ldr	r1, [pc, #96]	; (800521c <HAL_RTC_SetTime+0x14c>)
 80051bc:	400a      	ands	r2, r1
 80051be:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6999      	ldr	r1, [r3, #24]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051d8:	2313      	movs	r3, #19
 80051da:	18fc      	adds	r4, r7, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 faea 	bl	80057b8 <RTC_ExitInitMode>
 80051e4:	0003      	movs	r3, r0
 80051e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80051f0:	2313      	movs	r3, #19
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d103      	bne.n	8005202 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2229      	movs	r2, #41	; 0x29
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2228      	movs	r2, #40	; 0x28
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]

  return status;
 800520a:	2313      	movs	r3, #19
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	781b      	ldrb	r3, [r3, #0]
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b006      	add	sp, #24
 8005216:	bdb0      	pop	{r4, r5, r7, pc}
 8005218:	007f7f7f 	.word	0x007f7f7f
 800521c:	fffbffff 	.word	0xfffbffff

08005220 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	045b      	lsls	r3, r3, #17
 800523e:	0c5a      	lsrs	r2, r3, #17
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <HAL_RTC_GetTime+0xb4>)
 800524c:	4013      	ands	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b2db      	uxtb	r3, r3
 8005256:	223f      	movs	r2, #63	; 0x3f
 8005258:	4013      	ands	r3, r2
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b2db      	uxtb	r3, r3
 8005266:	227f      	movs	r2, #127	; 0x7f
 8005268:	4013      	ands	r3, r2
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	227f      	movs	r2, #127	; 0x7f
 8005276:	4013      	ands	r3, r2
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	0d9b      	lsrs	r3, r3, #22
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2201      	movs	r2, #1
 8005286:	4013      	ands	r3, r2
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11a      	bne.n	80052ca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 faf9 	bl	8005890 <RTC_Bcd2ToByte>
 800529e:	0003      	movs	r3, r0
 80052a0:	001a      	movs	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 faf0 	bl	8005890 <RTC_Bcd2ToByte>
 80052b0:	0003      	movs	r3, r0
 80052b2:	001a      	movs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	789b      	ldrb	r3, [r3, #2]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 fae7 	bl	8005890 <RTC_Bcd2ToByte>
 80052c2:	0003      	movs	r3, r0
 80052c4:	001a      	movs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b006      	add	sp, #24
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	007f7f7f 	.word	0x007f7f7f

080052d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2228      	movs	r2, #40	; 0x28
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_RTC_SetDate+0x1a>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e07e      	b.n	80053f0 <HAL_RTC_SetDate+0x118>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2228      	movs	r2, #40	; 0x28
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2229      	movs	r2, #41	; 0x29
 80052fe:	2102      	movs	r1, #2
 8005300:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10e      	bne.n	8005326 <HAL_RTC_SetDate+0x4e>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	001a      	movs	r2, r3
 800530e:	2310      	movs	r3, #16
 8005310:	4013      	ands	r3, r2
 8005312:	d008      	beq.n	8005326 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2210      	movs	r2, #16
 800531a:	4393      	bics	r3, r2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	330a      	adds	r3, #10
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11c      	bne.n	8005366 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	78db      	ldrb	r3, [r3, #3]
 8005330:	0018      	movs	r0, r3
 8005332:	f000 fa85 	bl	8005840 <RTC_ByteToBcd2>
 8005336:	0003      	movs	r3, r0
 8005338:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	0018      	movs	r0, r3
 8005340:	f000 fa7e 	bl	8005840 <RTC_ByteToBcd2>
 8005344:	0003      	movs	r3, r0
 8005346:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005348:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	789b      	ldrb	r3, [r3, #2]
 800534e:	0018      	movs	r0, r3
 8005350:	f000 fa76 	bl	8005840 <RTC_ByteToBcd2>
 8005354:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005356:	0022      	movs	r2, r4
 8005358:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e00e      	b.n	8005384 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005372:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005378:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	22ca      	movs	r2, #202	; 0xca
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2253      	movs	r2, #83	; 0x53
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005394:	2513      	movs	r5, #19
 8005396:	197c      	adds	r4, r7, r5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f9c9 	bl	8005732 <RTC_EnterInitMode>
 80053a0:	0003      	movs	r3, r0
 80053a2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80053a4:	0028      	movs	r0, r5
 80053a6:	183b      	adds	r3, r7, r0
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4910      	ldr	r1, [pc, #64]	; (80053f8 <HAL_RTC_SetDate+0x120>)
 80053b6:	400a      	ands	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053ba:	183c      	adds	r4, r7, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f9fa 	bl	80057b8 <RTC_ExitInitMode>
 80053c4:	0003      	movs	r3, r0
 80053c6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80053d0:	2313      	movs	r3, #19
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2229      	movs	r2, #41	; 0x29
 80053de:	2101      	movs	r1, #1
 80053e0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2228      	movs	r2, #40	; 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	5499      	strb	r1, [r3, r2]

  return status;
 80053ea:	2313      	movs	r3, #19
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	781b      	ldrb	r3, [r3, #0]
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b006      	add	sp, #24
 80053f6:	bdb0      	pop	{r4, r5, r7, pc}
 80053f8:	00ffff3f 	.word	0x00ffff3f

080053fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_RTC_GetDate+0x98>)
 8005410:	4013      	ands	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	0c1b      	lsrs	r3, r3, #16
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	b2db      	uxtb	r3, r3
 8005424:	221f      	movs	r2, #31
 8005426:	4013      	ands	r3, r2
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	223f      	movs	r2, #63	; 0x3f
 8005434:	4013      	ands	r3, r2
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	0b5b      	lsrs	r3, r3, #13
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2207      	movs	r2, #7
 8005444:	4013      	ands	r3, r2
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11a      	bne.n	8005488 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	0018      	movs	r0, r3
 8005458:	f000 fa1a 	bl	8005890 <RTC_Bcd2ToByte>
 800545c:	0003      	movs	r3, r0
 800545e:	001a      	movs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	0018      	movs	r0, r3
 800546a:	f000 fa11 	bl	8005890 <RTC_Bcd2ToByte>
 800546e:	0003      	movs	r3, r0
 8005470:	001a      	movs	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	789b      	ldrb	r3, [r3, #2]
 800547a:	0018      	movs	r0, r3
 800547c:	f000 fa08 	bl	8005890 <RTC_Bcd2ToByte>
 8005480:	0003      	movs	r3, r0
 8005482:	001a      	movs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b006      	add	sp, #24
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	00ffff3f 	.word	0x00ffff3f

08005498 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2228      	movs	r2, #40	; 0x28
 80054a8:	5c9b      	ldrb	r3, [r3, r2]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_RTC_SetAlarm+0x1a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e10c      	b.n	80056cc <HAL_RTC_SetAlarm+0x234>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2228      	movs	r2, #40	; 0x28
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2229      	movs	r2, #41	; 0x29
 80054be:	2102      	movs	r1, #2
 80054c0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d136      	bne.n	8005536 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	4013      	ands	r3, r2
 80054d2:	d102      	bne.n	80054da <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 f9ae 	bl	8005840 <RTC_ByteToBcd2>
 80054e4:	0003      	movs	r3, r0
 80054e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 f9a7 	bl	8005840 <RTC_ByteToBcd2>
 80054f2:	0003      	movs	r3, r0
 80054f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	789b      	ldrb	r3, [r3, #2]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 f99f 	bl	8005840 <RTC_ByteToBcd2>
 8005502:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005504:	0022      	movs	r2, r4
 8005506:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	78db      	ldrb	r3, [r3, #3]
 800550c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800550e:	431a      	orrs	r2, r3
 8005510:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2220      	movs	r2, #32
 8005516:	5c9b      	ldrb	r3, [r3, r2]
 8005518:	0018      	movs	r0, r3
 800551a:	f000 f991 	bl	8005840 <RTC_ByteToBcd2>
 800551e:	0003      	movs	r3, r0
 8005520:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005522:	0022      	movs	r2, r4
 8005524:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800552a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005530:	4313      	orrs	r3, r2
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e022      	b.n	800557c <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d102      	bne.n	8005548 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2200      	movs	r2, #0
 8005546:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005554:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800555a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	78db      	ldrb	r3, [r3, #3]
 8005560:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005562:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2120      	movs	r1, #32
 8005568:	5c5b      	ldrb	r3, [r3, r1]
 800556a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800556c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005572:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005578:	4313      	orrs	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	22ca      	movs	r2, #202	; 0xca
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2253      	movs	r2, #83	; 0x53
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d143      	bne.n	800562c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4949      	ldr	r1, [pc, #292]	; (80056d4 <HAL_RTC_SetAlarm+0x23c>)
 80055b0:	400a      	ands	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4946      	ldr	r1, [pc, #280]	; (80056d8 <HAL_RTC_SetAlarm+0x240>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80055c4:	f7fe f972 	bl	80038ac <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055cc:	e016      	b.n	80055fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055ce:	f7fe f96d 	bl	80038ac <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	23fa      	movs	r3, #250	; 0xfa
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	429a      	cmp	r2, r3
 80055de:	d90d      	bls.n	80055fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2229      	movs	r2, #41	; 0x29
 80055ec:	2103      	movs	r1, #3
 80055ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e067      	b.n	80056cc <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	4013      	ands	r3, r2
 8005606:	d0e2      	beq.n	80055ce <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0049      	lsls	r1, r1, #1
 8005626:	430a      	orrs	r2, r1
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	e042      	b.n	80056b2 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4929      	ldr	r1, [pc, #164]	; (80056dc <HAL_RTC_SetAlarm+0x244>)
 8005638:	400a      	ands	r2, r1
 800563a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4926      	ldr	r1, [pc, #152]	; (80056e0 <HAL_RTC_SetAlarm+0x248>)
 8005648:	400a      	ands	r2, r1
 800564a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800564c:	f7fe f92e 	bl	80038ac <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005654:	e016      	b.n	8005684 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005656:	f7fe f929 	bl	80038ac <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	23fa      	movs	r3, #250	; 0xfa
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	429a      	cmp	r2, r3
 8005666:	d90d      	bls.n	8005684 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2229      	movs	r2, #41	; 0x29
 8005674:	2103      	movs	r1, #3
 8005676:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2228      	movs	r2, #40	; 0x28
 800567c:	2100      	movs	r1, #0
 800567e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e023      	b.n	80056cc <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2202      	movs	r2, #2
 800568c:	4013      	ands	r3, r2
 800568e:	d0e2      	beq.n	8005656 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	0089      	lsls	r1, r1, #2
 80056ae:	430a      	orrs	r2, r1
 80056b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2229      	movs	r2, #41	; 0x29
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2228      	movs	r2, #40	; 0x28
 80056c6:	2100      	movs	r1, #0
 80056c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	0018      	movs	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b009      	add	sp, #36	; 0x24
 80056d2:	bd90      	pop	{r4, r7, pc}
 80056d4:	fffffeff 	.word	0xfffffeff
 80056d8:	ffffefff 	.word	0xffffefff
 80056dc:	fffffdff 	.word	0xfffffdff
 80056e0:	ffffdfff 	.word	0xffffdfff

080056e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	21a0      	movs	r1, #160	; 0xa0
 80056f8:	438a      	bics	r2, r1
 80056fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056fc:	f7fe f8d6 	bl	80038ac <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005704:	e00a      	b.n	800571c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005706:	f7fe f8d1 	bl	80038ac <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	23fa      	movs	r3, #250	; 0xfa
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d901      	bls.n	800571c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	d0ee      	beq.n	8005706 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	0018      	movs	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}

08005732 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800573a:	230f      	movs	r3, #15
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2240      	movs	r2, #64	; 0x40
 800574a:	4013      	ands	r3, r2
 800574c:	d12c      	bne.n	80057a8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	430a      	orrs	r2, r1
 800575c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800575e:	f7fe f8a5 	bl	80038ac <HAL_GetTick>
 8005762:	0003      	movs	r3, r0
 8005764:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005766:	e014      	b.n	8005792 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005768:	f7fe f8a0 	bl	80038ac <HAL_GetTick>
 800576c:	0002      	movs	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	200f      	movs	r0, #15
 8005774:	183b      	adds	r3, r7, r0
 8005776:	1839      	adds	r1, r7, r0
 8005778:	7809      	ldrb	r1, [r1, #0]
 800577a:	7019      	strb	r1, [r3, #0]
 800577c:	23fa      	movs	r3, #250	; 0xfa
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	429a      	cmp	r2, r3
 8005782:	d906      	bls.n	8005792 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005784:	183b      	adds	r3, r7, r0
 8005786:	2203      	movs	r2, #3
 8005788:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2229      	movs	r2, #41	; 0x29
 800578e:	2103      	movs	r1, #3
 8005790:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2240      	movs	r2, #64	; 0x40
 800579a:	4013      	ands	r3, r2
 800579c:	d104      	bne.n	80057a8 <RTC_EnterInitMode+0x76>
 800579e:	230f      	movs	r3, #15
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d1df      	bne.n	8005768 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057a8:	230f      	movs	r3, #15
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	781b      	ldrb	r3, [r3, #0]
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	240f      	movs	r4, #15
 80057c2:	193b      	adds	r3, r7, r4
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80057c8:	4b1c      	ldr	r3, [pc, #112]	; (800583c <RTC_ExitInitMode+0x84>)
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <RTC_ExitInitMode+0x84>)
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	438a      	bics	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <RTC_ExitInitMode+0x84>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2220      	movs	r2, #32
 80057da:	4013      	ands	r3, r2
 80057dc:	d10d      	bne.n	80057fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff ff7f 	bl	80056e4 <HAL_RTC_WaitForSynchro>
 80057e6:	1e03      	subs	r3, r0, #0
 80057e8:	d021      	beq.n	800582e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2229      	movs	r2, #41	; 0x29
 80057ee:	2103      	movs	r1, #3
 80057f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80057f2:	193b      	adds	r3, r7, r4
 80057f4:	2203      	movs	r2, #3
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e019      	b.n	800582e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <RTC_ExitInitMode+0x84>)
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <RTC_ExitInitMode+0x84>)
 8005800:	2120      	movs	r1, #32
 8005802:	438a      	bics	r2, r1
 8005804:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f7ff ff6b 	bl	80056e4 <HAL_RTC_WaitForSynchro>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d007      	beq.n	8005822 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2229      	movs	r2, #41	; 0x29
 8005816:	2103      	movs	r1, #3
 8005818:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800581a:	230f      	movs	r3, #15
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2203      	movs	r2, #3
 8005820:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <RTC_ExitInitMode+0x84>)
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <RTC_ExitInitMode+0x84>)
 8005828:	2120      	movs	r1, #32
 800582a:	430a      	orrs	r2, r1
 800582c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800582e:	230f      	movs	r3, #15
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b005      	add	sp, #20
 800583a:	bd90      	pop	{r4, r7, pc}
 800583c:	40002800 	.word	0x40002800

08005840 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	0002      	movs	r2, r0
 8005848:	1dfb      	adds	r3, r7, #7
 800584a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005850:	230b      	movs	r3, #11
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	1dfa      	adds	r2, r7, #7
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800585a:	e008      	b.n	800586e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005862:	220b      	movs	r2, #11
 8005864:	18bb      	adds	r3, r7, r2
 8005866:	18ba      	adds	r2, r7, r2
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	3a0a      	subs	r2, #10
 800586c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800586e:	210b      	movs	r1, #11
 8005870:	187b      	adds	r3, r7, r1
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b09      	cmp	r3, #9
 8005876:	d8f1      	bhi.n	800585c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	b2da      	uxtb	r2, r3
 8005880:	187b      	adds	r3, r7, r1
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	b2db      	uxtb	r3, r3
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b004      	add	sp, #16
 800588e:	bd80      	pop	{r7, pc}

08005890 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	0002      	movs	r2, r0
 8005898:	1dfb      	adds	r3, r7, #7
 800589a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	001a      	movs	r2, r3
 80058a6:	0013      	movs	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	1dfb      	adds	r3, r7, #7
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	210f      	movs	r1, #15
 80058ba:	400b      	ands	r3, r1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	b2db      	uxtb	r3, r3
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b004      	add	sp, #16
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2228      	movs	r2, #40	; 0x28
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_RTCEx_EnableBypassShadow+0x16>
 80058dc:	2302      	movs	r3, #2
 80058de:	e024      	b.n	800592a <HAL_RTCEx_EnableBypassShadow+0x60>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2228      	movs	r2, #40	; 0x28
 80058e4:	2101      	movs	r1, #1
 80058e6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2229      	movs	r2, #41	; 0x29
 80058ec:	2102      	movs	r1, #2
 80058ee:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	22ca      	movs	r2, #202	; 0xca
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2253      	movs	r2, #83	; 0x53
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2120      	movs	r1, #32
 800590c:	430a      	orrs	r2, r1
 800590e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2229      	movs	r2, #41	; 0x29
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2228      	movs	r2, #40	; 0x28
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b002      	add	sp, #8
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2228      	movs	r2, #40	; 0x28
 800593e:	5c9b      	ldrb	r3, [r3, r2]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005944:	2302      	movs	r3, #2
 8005946:	e024      	b.n	8005992 <HAL_RTCEx_DisableBypassShadow+0x60>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2228      	movs	r2, #40	; 0x28
 800594c:	2101      	movs	r1, #1
 800594e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2229      	movs	r2, #41	; 0x29
 8005954:	2102      	movs	r1, #2
 8005956:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	22ca      	movs	r2, #202	; 0xca
 800595e:	625a      	str	r2, [r3, #36]	; 0x24
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2253      	movs	r2, #83	; 0x53
 8005966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	21df      	movs	r1, #223	; 0xdf
 8005974:	400a      	ands	r2, r1
 8005976:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	22ff      	movs	r2, #255	; 0xff
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2229      	movs	r2, #41	; 0x29
 8005984:	2101      	movs	r1, #1
 8005986:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2228      	movs	r2, #40	; 0x28
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b002      	add	sp, #8
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04a      	b.n	8005a42 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	223d      	movs	r2, #61	; 0x3d
 80059b0:	5c9b      	ldrb	r3, [r3, r2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	223c      	movs	r2, #60	; 0x3c
 80059bc:	2100      	movs	r1, #0
 80059be:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	0018      	movs	r0, r3
 80059c4:	f7fd fc8a 	bl	80032dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	223d      	movs	r2, #61	; 0x3d
 80059cc:	2102      	movs	r1, #2
 80059ce:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f000 fa12 	bl	8005e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2248      	movs	r2, #72	; 0x48
 80059e4:	2101      	movs	r1, #1
 80059e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	223e      	movs	r2, #62	; 0x3e
 80059ec:	2101      	movs	r1, #1
 80059ee:	5499      	strb	r1, [r3, r2]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	223f      	movs	r2, #63	; 0x3f
 80059f4:	2101      	movs	r1, #1
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2241      	movs	r2, #65	; 0x41
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2242      	movs	r2, #66	; 0x42
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2243      	movs	r2, #67	; 0x43
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2244      	movs	r2, #68	; 0x44
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	5499      	strb	r1, [r3, r2]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2245      	movs	r2, #69	; 0x45
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2246      	movs	r2, #70	; 0x46
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2247      	movs	r2, #71	; 0x47
 8005a34:	2101      	movs	r1, #1
 8005a36:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223d      	movs	r2, #61	; 0x3d
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b002      	add	sp, #8
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	223d      	movs	r2, #61	; 0x3d
 8005a58:	5c9b      	ldrb	r3, [r3, r2]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d001      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e042      	b.n	8005aea <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	223d      	movs	r2, #61	; 0x3d
 8005a68:	2102      	movs	r1, #2
 8005a6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2101      	movs	r1, #1
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <HAL_TIM_Base_Start_IT+0x5a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	05db      	lsls	r3, r3, #23
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_Base_Start_IT+0x5a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_TIM_Base_Start_IT+0xac>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIM_Base_Start_IT+0x5a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIM_Base_Start_IT+0xb0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d116      	bne.n	8005ad4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_TIM_Base_Start_IT+0xb4>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d016      	beq.n	8005ae6 <HAL_TIM_Base_Start_IT+0x9a>
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	025b      	lsls	r3, r3, #9
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d011      	beq.n	8005ae6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2101      	movs	r1, #1
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	e008      	b.n	8005ae6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2101      	movs	r1, #1
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e000      	b.n	8005ae8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	0018      	movs	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b004      	add	sp, #16
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	00010007 	.word	0x00010007

08005b04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	438a      	bics	r2, r1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <HAL_TIM_Base_Stop_IT+0x54>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <HAL_TIM_Base_Stop_IT+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <HAL_TIM_Base_Stop_IT+0x58>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_Base_Stop_IT+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	438a      	bics	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	223d      	movs	r2, #61	; 0x3d
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b002      	add	sp, #8
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	00001111 	.word	0x00001111
 8005b5c:	00000444 	.word	0x00000444

08005b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d124      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d11d      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4252      	negs	r2, r2
 8005b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f916 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e007      	b.n	8005bba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f909 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f915 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d125      	bne.n	8005c1a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d11e      	bne.n	8005c1a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2205      	movs	r2, #5
 8005be2:	4252      	negs	r2, r2
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	23c0      	movs	r3, #192	; 0xc0
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 f8e9 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005c02:	e007      	b.n	8005c14 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	0018      	movs	r0, r3
 8005c08:	f000 f8dc 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f8e8 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2208      	movs	r2, #8
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d124      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2208      	movs	r2, #8
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11d      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2209      	movs	r2, #9
 8005c3c:	4252      	negs	r2, r2
 8005c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f8bd 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005c5a:	e007      	b.n	8005c6c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 f8b0 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 f8bc 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d125      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2210      	movs	r2, #16
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d11e      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2211      	movs	r2, #17
 8005c94:	4252      	negs	r2, r2
 8005c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	23c0      	movs	r3, #192	; 0xc0
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 f890 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e007      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 f883 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 f88f 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d10f      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d108      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2202      	movs	r2, #2
 8005cee:	4252      	negs	r2, r2
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fd fa0f 	bl	8003118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d10f      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b80      	cmp	r3, #128	; 0x80
 8005d14:	d108      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2281      	movs	r2, #129	; 0x81
 8005d1c:	4252      	negs	r2, r2
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f964 	bl	8005ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	401a      	ands	r2, r3
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d10e      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_TIM_IRQHandler+0x260>)
 8005d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f953 	bl	8006000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d10f      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d108      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2241      	movs	r2, #65	; 0x41
 8005d7c:	4252      	negs	r2, r2
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f000 f836 	bl	8005df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d10f      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d108      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	4252      	negs	r2, r2
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 f915 	bl	8005fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b002      	add	sp, #8
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	fffffeff 	.word	0xfffffeff

08005dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b002      	add	sp, #8
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a34      	ldr	r2, [pc, #208]	; (8005ee8 <TIM_Base_SetConfig+0xe4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d008      	beq.n	8005e2e <TIM_Base_SetConfig+0x2a>
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	05db      	lsls	r3, r3, #23
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d003      	beq.n	8005e2e <TIM_Base_SetConfig+0x2a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a30      	ldr	r2, [pc, #192]	; (8005eec <TIM_Base_SetConfig+0xe8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d108      	bne.n	8005e40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2270      	movs	r2, #112	; 0x70
 8005e32:	4393      	bics	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_Base_SetConfig+0xe4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	05db      	lsls	r3, r3, #23
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d013      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a25      	ldr	r2, [pc, #148]	; (8005eec <TIM_Base_SetConfig+0xe8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <TIM_Base_SetConfig+0xec>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <TIM_Base_SetConfig+0xf0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <TIM_Base_SetConfig+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_Base_SetConfig+0x76>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a21      	ldr	r2, [pc, #132]	; (8005efc <TIM_Base_SetConfig+0xf8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a20      	ldr	r2, [pc, #128]	; (8005f00 <TIM_Base_SetConfig+0xfc>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	4393      	bics	r3, r2
 8005e92:	001a      	movs	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <TIM_Base_SetConfig+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_Base_SetConfig+0xce>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <TIM_Base_SetConfig+0xf0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_Base_SetConfig+0xce>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <TIM_Base_SetConfig+0xf4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_Base_SetConfig+0xce>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <TIM_Base_SetConfig+0xf8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d103      	bne.n	8005eda <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	615a      	str	r2, [r3, #20]
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b004      	add	sp, #16
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40002000 	.word	0x40002000
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800
 8005f00:	fffffcff 	.word	0xfffffcff

08005f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	223c      	movs	r2, #60	; 0x3c
 8005f12:	5c9b      	ldrb	r3, [r3, r2]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e055      	b.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	223c      	movs	r2, #60	; 0x3c
 8005f20:	2101      	movs	r1, #1
 8005f22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	223d      	movs	r2, #61	; 0x3d
 8005f28:	2102      	movs	r1, #2
 8005f2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d108      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2270      	movs	r2, #112	; 0x70
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00f      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	05db      	lsls	r3, r3, #23
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d009      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	223d      	movs	r2, #61	; 0x3d
 8005fba:	2101      	movs	r1, #1
 8005fbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	223c      	movs	r2, #60	; 0x3c
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b004      	add	sp, #16
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	ff0fffff 	.word	0xff0fffff
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40014000 	.word	0x40014000

08005fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b002      	add	sp, #8
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e046      	b.n	80060b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2288      	movs	r2, #136	; 0x88
 8006026:	589b      	ldr	r3, [r3, r2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2284      	movs	r2, #132	; 0x84
 8006030:	2100      	movs	r1, #0
 8006032:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	0018      	movs	r0, r3
 8006038:	f7fd f976 	bl	8003328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2288      	movs	r2, #136	; 0x88
 8006040:	2124      	movs	r1, #36	; 0x24
 8006042:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2101      	movs	r1, #1
 8006050:	438a      	bics	r2, r1
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f9ee 	bl	8006438 <UART_SetConfig>
 800605c:	0003      	movs	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e024      	b.n	80060b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 fc9f 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	490d      	ldr	r1, [pc, #52]	; (80060b8 <HAL_UART_Init+0xa8>)
 8006082:	400a      	ands	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	212a      	movs	r1, #42	; 0x2a
 8006092:	438a      	bics	r2, r1
 8006094:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2101      	movs	r1, #1
 80060a2:	430a      	orrs	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fd37 	bl	8006b1c <UART_CheckIdleState>
 80060ae:	0003      	movs	r3, r0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b002      	add	sp, #8
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	ffffb7ff 	.word	0xffffb7ff

080060bc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e032      	b.n	8006134 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2288      	movs	r2, #136	; 0x88
 80060d2:	2124      	movs	r1, #36	; 0x24
 80060d4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2101      	movs	r1, #1
 80060e2:	438a      	bics	r2, r1
 80060e4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f7fd f9f5 	bl	80034f0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2290      	movs	r2, #144	; 0x90
 800610a:	2100      	movs	r1, #0
 800610c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2288      	movs	r2, #136	; 0x88
 8006112:	2100      	movs	r1, #0
 8006114:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	228c      	movs	r2, #140	; 0x8c
 800611a:	2100      	movs	r1, #0
 800611c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2284      	movs	r2, #132	; 0x84
 800612e:	2100      	movs	r1, #0
 8006130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	b002      	add	sp, #8
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	1dbb      	adds	r3, r7, #6
 800614a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2288      	movs	r2, #136	; 0x88
 8006150:	589b      	ldr	r3, [r3, r2]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d000      	beq.n	8006158 <HAL_UART_Transmit+0x1c>
 8006156:	e088      	b.n	800626a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_UART_Transmit+0x2a>
 800615e:	1dbb      	adds	r3, r7, #6
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e080      	b.n	800626c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	015b      	lsls	r3, r3, #5
 8006172:	429a      	cmp	r2, r3
 8006174:	d109      	bne.n	800618a <HAL_UART_Transmit+0x4e>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2201      	movs	r2, #1
 8006182:	4013      	ands	r3, r2
 8006184:	d001      	beq.n	800618a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e070      	b.n	800626c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2290      	movs	r2, #144	; 0x90
 800618e:	2100      	movs	r1, #0
 8006190:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2288      	movs	r2, #136	; 0x88
 8006196:	2121      	movs	r1, #33	; 0x21
 8006198:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619a:	f7fd fb87 	bl	80038ac <HAL_GetTick>
 800619e:	0003      	movs	r3, r0
 80061a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1dba      	adds	r2, r7, #6
 80061a6:	2154      	movs	r1, #84	; 0x54
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1dba      	adds	r2, r7, #6
 80061b0:	2156      	movs	r1, #86	; 0x56
 80061b2:	8812      	ldrh	r2, [r2, #0]
 80061b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	015b      	lsls	r3, r3, #5
 80061be:	429a      	cmp	r2, r3
 80061c0:	d108      	bne.n	80061d4 <HAL_UART_Transmit+0x98>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	e003      	b.n	80061dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061dc:	e02c      	b.n	8006238 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	0013      	movs	r3, r2
 80061e8:	2200      	movs	r2, #0
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	f000 fce4 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e039      	b.n	800626c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	001a      	movs	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	05d2      	lsls	r2, r2, #23
 800620a:	0dd2      	lsrs	r2, r2, #23
 800620c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3302      	adds	r3, #2
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e007      	b.n	8006226 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2256      	movs	r2, #86	; 0x56
 800622a:	5a9b      	ldrh	r3, [r3, r2]
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b299      	uxth	r1, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2256      	movs	r2, #86	; 0x56
 8006236:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2256      	movs	r2, #86	; 0x56
 800623c:	5a9b      	ldrh	r3, [r3, r2]
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1cc      	bne.n	80061de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	0013      	movs	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	f000 fcb1 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006256:	1e03      	subs	r3, r0, #0
 8006258:	d001      	beq.n	800625e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e006      	b.n	800626c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2288      	movs	r2, #136	; 0x88
 8006262:	2120      	movs	r1, #32
 8006264:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b008      	add	sp, #32
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	1dbb      	adds	r3, r7, #6
 8006282:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	228c      	movs	r2, #140	; 0x8c
 8006288:	589b      	ldr	r3, [r3, r2]
 800628a:	2b20      	cmp	r3, #32
 800628c:	d000      	beq.n	8006290 <HAL_UART_Receive+0x1c>
 800628e:	e0cc      	b.n	800642a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_UART_Receive+0x2a>
 8006296:	1dbb      	adds	r3, r7, #6
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e0c4      	b.n	800642c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	015b      	lsls	r3, r3, #5
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d109      	bne.n	80062c2 <HAL_UART_Receive+0x4e>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	d001      	beq.n	80062c2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e0b4      	b.n	800642c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2290      	movs	r2, #144	; 0x90
 80062c6:	2100      	movs	r1, #0
 80062c8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	228c      	movs	r2, #140	; 0x8c
 80062ce:	2122      	movs	r1, #34	; 0x22
 80062d0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d8:	f7fd fae8 	bl	80038ac <HAL_GetTick>
 80062dc:	0003      	movs	r3, r0
 80062de:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1dba      	adds	r2, r7, #6
 80062e4:	215c      	movs	r1, #92	; 0x5c
 80062e6:	8812      	ldrh	r2, [r2, #0]
 80062e8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1dba      	adds	r2, r7, #6
 80062ee:	215e      	movs	r1, #94	; 0x5e
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	015b      	lsls	r3, r3, #5
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10d      	bne.n	800631c <HAL_UART_Receive+0xa8>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <HAL_UART_Receive+0x9e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2260      	movs	r2, #96	; 0x60
 800630c:	4949      	ldr	r1, [pc, #292]	; (8006434 <HAL_UART_Receive+0x1c0>)
 800630e:	5299      	strh	r1, [r3, r2]
 8006310:	e02e      	b.n	8006370 <HAL_UART_Receive+0xfc>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2260      	movs	r2, #96	; 0x60
 8006316:	21ff      	movs	r1, #255	; 0xff
 8006318:	5299      	strh	r1, [r3, r2]
 800631a:	e029      	b.n	8006370 <HAL_UART_Receive+0xfc>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10d      	bne.n	8006340 <HAL_UART_Receive+0xcc>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_UART_Receive+0xc2>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2260      	movs	r2, #96	; 0x60
 8006330:	21ff      	movs	r1, #255	; 0xff
 8006332:	5299      	strh	r1, [r3, r2]
 8006334:	e01c      	b.n	8006370 <HAL_UART_Receive+0xfc>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2260      	movs	r2, #96	; 0x60
 800633a:	217f      	movs	r1, #127	; 0x7f
 800633c:	5299      	strh	r1, [r3, r2]
 800633e:	e017      	b.n	8006370 <HAL_UART_Receive+0xfc>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	055b      	lsls	r3, r3, #21
 8006348:	429a      	cmp	r2, r3
 800634a:	d10d      	bne.n	8006368 <HAL_UART_Receive+0xf4>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Receive+0xea>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2260      	movs	r2, #96	; 0x60
 8006358:	217f      	movs	r1, #127	; 0x7f
 800635a:	5299      	strh	r1, [r3, r2]
 800635c:	e008      	b.n	8006370 <HAL_UART_Receive+0xfc>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2260      	movs	r2, #96	; 0x60
 8006362:	213f      	movs	r1, #63	; 0x3f
 8006364:	5299      	strh	r1, [r3, r2]
 8006366:	e003      	b.n	8006370 <HAL_UART_Receive+0xfc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2260      	movs	r2, #96	; 0x60
 800636c:	2100      	movs	r1, #0
 800636e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006370:	2312      	movs	r3, #18
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	2160      	movs	r1, #96	; 0x60
 8006378:	5a52      	ldrh	r2, [r2, r1]
 800637a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	015b      	lsls	r3, r3, #5
 8006384:	429a      	cmp	r2, r3
 8006386:	d108      	bne.n	800639a <HAL_UART_Receive+0x126>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e003      	b.n	80063a2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063a2:	e036      	b.n	8006412 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	0013      	movs	r3, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	2120      	movs	r1, #32
 80063b2:	f000 fc01 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 80063b6:	1e03      	subs	r3, r0, #0
 80063b8:	d001      	beq.n	80063be <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e036      	b.n	800642c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10e      	bne.n	80063e2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2212      	movs	r2, #18
 80063ce:	18ba      	adds	r2, r7, r2
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	3302      	adds	r3, #2
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e00e      	b.n	8006400 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2212      	movs	r2, #18
 80063ec:	18ba      	adds	r2, r7, r2
 80063ee:	8812      	ldrh	r2, [r2, #0]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	4013      	ands	r3, r2
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3301      	adds	r3, #1
 80063fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	225e      	movs	r2, #94	; 0x5e
 8006404:	5a9b      	ldrh	r3, [r3, r2]
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b299      	uxth	r1, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	225e      	movs	r2, #94	; 0x5e
 8006410:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	225e      	movs	r2, #94	; 0x5e
 8006416:	5a9b      	ldrh	r3, [r3, r2]
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1c2      	bne.n	80063a4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	228c      	movs	r2, #140	; 0x8c
 8006422:	2120      	movs	r1, #32
 8006424:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e000      	b.n	800642c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800642a:	2302      	movs	r3, #2
  }
}
 800642c:	0018      	movs	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	b008      	add	sp, #32
 8006432:	bd80      	pop	{r7, pc}
 8006434:	000001ff 	.word	0x000001ff

08006438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b090      	sub	sp, #64	; 0x40
 800643c:	af00      	add	r7, sp, #0
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006440:	231a      	movs	r3, #26
 8006442:	2220      	movs	r2, #32
 8006444:	189b      	adds	r3, r3, r2
 8006446:	19db      	adds	r3, r3, r7
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	431a      	orrs	r2, r3
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4aaf      	ldr	r2, [pc, #700]	; (8006728 <UART_SetConfig+0x2f0>)
 800646c:	4013      	ands	r3, r2
 800646e:	0019      	movs	r1, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006476:	430b      	orrs	r3, r1
 8006478:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4aaa      	ldr	r2, [pc, #680]	; (800672c <UART_SetConfig+0x2f4>)
 8006482:	4013      	ands	r3, r2
 8006484:	0018      	movs	r0, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	68d9      	ldr	r1, [r3, #12]
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	0003      	movs	r3, r0
 8006490:	430b      	orrs	r3, r1
 8006492:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4aa4      	ldr	r2, [pc, #656]	; (8006730 <UART_SetConfig+0x2f8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064aa:	4313      	orrs	r3, r2
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a9f      	ldr	r2, [pc, #636]	; (8006734 <UART_SetConfig+0x2fc>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	0019      	movs	r1, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	220f      	movs	r2, #15
 80064cc:	4393      	bics	r3, r2
 80064ce:	0018      	movs	r0, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	0003      	movs	r3, r0
 80064da:	430b      	orrs	r3, r1
 80064dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a95      	ldr	r2, [pc, #596]	; (8006738 <UART_SetConfig+0x300>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d131      	bne.n	800654c <UART_SetConfig+0x114>
 80064e8:	4b94      	ldr	r3, [pc, #592]	; (800673c <UART_SetConfig+0x304>)
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	2203      	movs	r2, #3
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d01d      	beq.n	8006530 <UART_SetConfig+0xf8>
 80064f4:	d823      	bhi.n	800653e <UART_SetConfig+0x106>
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d00c      	beq.n	8006514 <UART_SetConfig+0xdc>
 80064fa:	d820      	bhi.n	800653e <UART_SetConfig+0x106>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <UART_SetConfig+0xce>
 8006500:	2b01      	cmp	r3, #1
 8006502:	d00e      	beq.n	8006522 <UART_SetConfig+0xea>
 8006504:	e01b      	b.n	800653e <UART_SetConfig+0x106>
 8006506:	231b      	movs	r3, #27
 8006508:	2220      	movs	r2, #32
 800650a:	189b      	adds	r3, r3, r2
 800650c:	19db      	adds	r3, r3, r7
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e0b4      	b.n	800667e <UART_SetConfig+0x246>
 8006514:	231b      	movs	r3, #27
 8006516:	2220      	movs	r2, #32
 8006518:	189b      	adds	r3, r3, r2
 800651a:	19db      	adds	r3, r3, r7
 800651c:	2202      	movs	r2, #2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e0ad      	b.n	800667e <UART_SetConfig+0x246>
 8006522:	231b      	movs	r3, #27
 8006524:	2220      	movs	r2, #32
 8006526:	189b      	adds	r3, r3, r2
 8006528:	19db      	adds	r3, r3, r7
 800652a:	2204      	movs	r2, #4
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e0a6      	b.n	800667e <UART_SetConfig+0x246>
 8006530:	231b      	movs	r3, #27
 8006532:	2220      	movs	r2, #32
 8006534:	189b      	adds	r3, r3, r2
 8006536:	19db      	adds	r3, r3, r7
 8006538:	2208      	movs	r2, #8
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e09f      	b.n	800667e <UART_SetConfig+0x246>
 800653e:	231b      	movs	r3, #27
 8006540:	2220      	movs	r2, #32
 8006542:	189b      	adds	r3, r3, r2
 8006544:	19db      	adds	r3, r3, r7
 8006546:	2210      	movs	r2, #16
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	e098      	b.n	800667e <UART_SetConfig+0x246>
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a7b      	ldr	r2, [pc, #492]	; (8006740 <UART_SetConfig+0x308>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d131      	bne.n	80065ba <UART_SetConfig+0x182>
 8006556:	4b79      	ldr	r3, [pc, #484]	; (800673c <UART_SetConfig+0x304>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	220c      	movs	r2, #12
 800655c:	4013      	ands	r3, r2
 800655e:	2b0c      	cmp	r3, #12
 8006560:	d01d      	beq.n	800659e <UART_SetConfig+0x166>
 8006562:	d823      	bhi.n	80065ac <UART_SetConfig+0x174>
 8006564:	2b08      	cmp	r3, #8
 8006566:	d00c      	beq.n	8006582 <UART_SetConfig+0x14a>
 8006568:	d820      	bhi.n	80065ac <UART_SetConfig+0x174>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <UART_SetConfig+0x13c>
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00e      	beq.n	8006590 <UART_SetConfig+0x158>
 8006572:	e01b      	b.n	80065ac <UART_SetConfig+0x174>
 8006574:	231b      	movs	r3, #27
 8006576:	2220      	movs	r2, #32
 8006578:	189b      	adds	r3, r3, r2
 800657a:	19db      	adds	r3, r3, r7
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e07d      	b.n	800667e <UART_SetConfig+0x246>
 8006582:	231b      	movs	r3, #27
 8006584:	2220      	movs	r2, #32
 8006586:	189b      	adds	r3, r3, r2
 8006588:	19db      	adds	r3, r3, r7
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e076      	b.n	800667e <UART_SetConfig+0x246>
 8006590:	231b      	movs	r3, #27
 8006592:	2220      	movs	r2, #32
 8006594:	189b      	adds	r3, r3, r2
 8006596:	19db      	adds	r3, r3, r7
 8006598:	2204      	movs	r2, #4
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	e06f      	b.n	800667e <UART_SetConfig+0x246>
 800659e:	231b      	movs	r3, #27
 80065a0:	2220      	movs	r2, #32
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	19db      	adds	r3, r3, r7
 80065a6:	2208      	movs	r2, #8
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e068      	b.n	800667e <UART_SetConfig+0x246>
 80065ac:	231b      	movs	r3, #27
 80065ae:	2220      	movs	r2, #32
 80065b0:	189b      	adds	r3, r3, r2
 80065b2:	19db      	adds	r3, r3, r7
 80065b4:	2210      	movs	r2, #16
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e061      	b.n	800667e <UART_SetConfig+0x246>
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a61      	ldr	r2, [pc, #388]	; (8006744 <UART_SetConfig+0x30c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d106      	bne.n	80065d2 <UART_SetConfig+0x19a>
 80065c4:	231b      	movs	r3, #27
 80065c6:	2220      	movs	r2, #32
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	19db      	adds	r3, r3, r7
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	e055      	b.n	800667e <UART_SetConfig+0x246>
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a5c      	ldr	r2, [pc, #368]	; (8006748 <UART_SetConfig+0x310>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d106      	bne.n	80065ea <UART_SetConfig+0x1b2>
 80065dc:	231b      	movs	r3, #27
 80065de:	2220      	movs	r2, #32
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e049      	b.n	800667e <UART_SetConfig+0x246>
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a50      	ldr	r2, [pc, #320]	; (8006730 <UART_SetConfig+0x2f8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d13e      	bne.n	8006672 <UART_SetConfig+0x23a>
 80065f4:	4b51      	ldr	r3, [pc, #324]	; (800673c <UART_SetConfig+0x304>)
 80065f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065f8:	23c0      	movs	r3, #192	; 0xc0
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	4013      	ands	r3, r2
 80065fe:	22c0      	movs	r2, #192	; 0xc0
 8006600:	0112      	lsls	r2, r2, #4
 8006602:	4293      	cmp	r3, r2
 8006604:	d027      	beq.n	8006656 <UART_SetConfig+0x21e>
 8006606:	22c0      	movs	r2, #192	; 0xc0
 8006608:	0112      	lsls	r2, r2, #4
 800660a:	4293      	cmp	r3, r2
 800660c:	d82a      	bhi.n	8006664 <UART_SetConfig+0x22c>
 800660e:	2280      	movs	r2, #128	; 0x80
 8006610:	0112      	lsls	r2, r2, #4
 8006612:	4293      	cmp	r3, r2
 8006614:	d011      	beq.n	800663a <UART_SetConfig+0x202>
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	0112      	lsls	r2, r2, #4
 800661a:	4293      	cmp	r3, r2
 800661c:	d822      	bhi.n	8006664 <UART_SetConfig+0x22c>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <UART_SetConfig+0x1f4>
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	00d2      	lsls	r2, r2, #3
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <UART_SetConfig+0x210>
 800662a:	e01b      	b.n	8006664 <UART_SetConfig+0x22c>
 800662c:	231b      	movs	r3, #27
 800662e:	2220      	movs	r2, #32
 8006630:	189b      	adds	r3, r3, r2
 8006632:	19db      	adds	r3, r3, r7
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e021      	b.n	800667e <UART_SetConfig+0x246>
 800663a:	231b      	movs	r3, #27
 800663c:	2220      	movs	r2, #32
 800663e:	189b      	adds	r3, r3, r2
 8006640:	19db      	adds	r3, r3, r7
 8006642:	2202      	movs	r2, #2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e01a      	b.n	800667e <UART_SetConfig+0x246>
 8006648:	231b      	movs	r3, #27
 800664a:	2220      	movs	r2, #32
 800664c:	189b      	adds	r3, r3, r2
 800664e:	19db      	adds	r3, r3, r7
 8006650:	2204      	movs	r2, #4
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e013      	b.n	800667e <UART_SetConfig+0x246>
 8006656:	231b      	movs	r3, #27
 8006658:	2220      	movs	r2, #32
 800665a:	189b      	adds	r3, r3, r2
 800665c:	19db      	adds	r3, r3, r7
 800665e:	2208      	movs	r2, #8
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e00c      	b.n	800667e <UART_SetConfig+0x246>
 8006664:	231b      	movs	r3, #27
 8006666:	2220      	movs	r2, #32
 8006668:	189b      	adds	r3, r3, r2
 800666a:	19db      	adds	r3, r3, r7
 800666c:	2210      	movs	r2, #16
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e005      	b.n	800667e <UART_SetConfig+0x246>
 8006672:	231b      	movs	r3, #27
 8006674:	2220      	movs	r2, #32
 8006676:	189b      	adds	r3, r3, r2
 8006678:	19db      	adds	r3, r3, r7
 800667a:	2210      	movs	r2, #16
 800667c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <UART_SetConfig+0x2f8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d000      	beq.n	800668a <UART_SetConfig+0x252>
 8006688:	e0a9      	b.n	80067de <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800668a:	231b      	movs	r3, #27
 800668c:	2220      	movs	r2, #32
 800668e:	189b      	adds	r3, r3, r2
 8006690:	19db      	adds	r3, r3, r7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d015      	beq.n	80066c4 <UART_SetConfig+0x28c>
 8006698:	dc18      	bgt.n	80066cc <UART_SetConfig+0x294>
 800669a:	2b04      	cmp	r3, #4
 800669c:	d00d      	beq.n	80066ba <UART_SetConfig+0x282>
 800669e:	dc15      	bgt.n	80066cc <UART_SetConfig+0x294>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <UART_SetConfig+0x272>
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d005      	beq.n	80066b4 <UART_SetConfig+0x27c>
 80066a8:	e010      	b.n	80066cc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fe faa1 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80066ae:	0003      	movs	r3, r0
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b2:	e014      	b.n	80066de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <UART_SetConfig+0x314>)
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b8:	e011      	b.n	80066de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fe fa0d 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80066be:	0003      	movs	r3, r0
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c2:	e00c      	b.n	80066de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ca:	e008      	b.n	80066de <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066d0:	231a      	movs	r3, #26
 80066d2:	2220      	movs	r2, #32
 80066d4:	189b      	adds	r3, r3, r2
 80066d6:	19db      	adds	r3, r3, r7
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
        break;
 80066dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d100      	bne.n	80066e6 <UART_SetConfig+0x2ae>
 80066e4:	e14b      	b.n	800697e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <UART_SetConfig+0x318>)
 80066ec:	0052      	lsls	r2, r2, #1
 80066ee:	5ad3      	ldrh	r3, [r2, r3]
 80066f0:	0019      	movs	r1, r3
 80066f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066f4:	f7f9 fd22 	bl	800013c <__udivsi3>
 80066f8:	0003      	movs	r3, r0
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	0013      	movs	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	189b      	adds	r3, r3, r2
 8006706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006708:	429a      	cmp	r2, r3
 800670a:	d305      	bcc.n	8006718 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006714:	429a      	cmp	r2, r3
 8006716:	d91d      	bls.n	8006754 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006718:	231a      	movs	r3, #26
 800671a:	2220      	movs	r2, #32
 800671c:	189b      	adds	r3, r3, r2
 800671e:	19db      	adds	r3, r3, r7
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e12b      	b.n	800697e <UART_SetConfig+0x546>
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	cfff69f3 	.word	0xcfff69f3
 800672c:	ffffcfff 	.word	0xffffcfff
 8006730:	40008000 	.word	0x40008000
 8006734:	11fff4ff 	.word	0x11fff4ff
 8006738:	40013800 	.word	0x40013800
 800673c:	40021000 	.word	0x40021000
 8006740:	40004400 	.word	0x40004400
 8006744:	40004800 	.word	0x40004800
 8006748:	40004c00 	.word	0x40004c00
 800674c:	00f42400 	.word	0x00f42400
 8006750:	08012eb4 	.word	0x08012eb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006760:	4b92      	ldr	r3, [pc, #584]	; (80069ac <UART_SetConfig+0x574>)
 8006762:	0052      	lsls	r2, r2, #1
 8006764:	5ad3      	ldrh	r3, [r2, r3]
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	69b8      	ldr	r0, [r7, #24]
 8006772:	69f9      	ldr	r1, [r7, #28]
 8006774:	f7f9 fe96 	bl	80004a4 <__aeabi_uldivmod>
 8006778:	0002      	movs	r2, r0
 800677a:	000b      	movs	r3, r1
 800677c:	0e11      	lsrs	r1, r2, #24
 800677e:	021d      	lsls	r5, r3, #8
 8006780:	430d      	orrs	r5, r1
 8006782:	0214      	lsls	r4, r2, #8
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	60bb      	str	r3, [r7, #8]
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68b8      	ldr	r0, [r7, #8]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	1900      	adds	r0, r0, r4
 8006796:	4169      	adcs	r1, r5
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f7f9 fe7d 	bl	80004a4 <__aeabi_uldivmod>
 80067aa:	0002      	movs	r2, r0
 80067ac:	000b      	movs	r3, r1
 80067ae:	0013      	movs	r3, r2
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b4:	23c0      	movs	r3, #192	; 0xc0
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d309      	bcc.n	80067d0 <UART_SetConfig+0x398>
 80067bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	035b      	lsls	r3, r3, #13
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d204      	bcs.n	80067d0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e0d6      	b.n	800697e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80067d0:	231a      	movs	r3, #26
 80067d2:	2220      	movs	r2, #32
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	19db      	adds	r3, r3, r7
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e0cf      	b.n	800697e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d000      	beq.n	80067ec <UART_SetConfig+0x3b4>
 80067ea:	e070      	b.n	80068ce <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80067ec:	231b      	movs	r3, #27
 80067ee:	2220      	movs	r2, #32
 80067f0:	189b      	adds	r3, r3, r2
 80067f2:	19db      	adds	r3, r3, r7
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d015      	beq.n	8006826 <UART_SetConfig+0x3ee>
 80067fa:	dc18      	bgt.n	800682e <UART_SetConfig+0x3f6>
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d00d      	beq.n	800681c <UART_SetConfig+0x3e4>
 8006800:	dc15      	bgt.n	800682e <UART_SetConfig+0x3f6>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <UART_SetConfig+0x3d4>
 8006806:	2b02      	cmp	r3, #2
 8006808:	d005      	beq.n	8006816 <UART_SetConfig+0x3de>
 800680a:	e010      	b.n	800682e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe f9f0 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8006810:	0003      	movs	r3, r0
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006814:	e014      	b.n	8006840 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006816:	4b66      	ldr	r3, [pc, #408]	; (80069b0 <UART_SetConfig+0x578>)
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800681a:	e011      	b.n	8006840 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681c:	f7fe f95c 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006820:	0003      	movs	r3, r0
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006824:	e00c      	b.n	8006840 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800682c:	e008      	b.n	8006840 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006832:	231a      	movs	r3, #26
 8006834:	2220      	movs	r2, #32
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
        break;
 800683e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d100      	bne.n	8006848 <UART_SetConfig+0x410>
 8006846:	e09a      	b.n	800697e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684c:	4b57      	ldr	r3, [pc, #348]	; (80069ac <UART_SetConfig+0x574>)
 800684e:	0052      	lsls	r2, r2, #1
 8006850:	5ad3      	ldrh	r3, [r2, r3]
 8006852:	0019      	movs	r1, r3
 8006854:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006856:	f7f9 fc71 	bl	800013c <__udivsi3>
 800685a:	0003      	movs	r3, r0
 800685c:	005a      	lsls	r2, r3, #1
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	18d2      	adds	r2, r2, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	0019      	movs	r1, r3
 800686c:	0010      	movs	r0, r2
 800686e:	f7f9 fc65 	bl	800013c <__udivsi3>
 8006872:	0003      	movs	r3, r0
 8006874:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2b0f      	cmp	r3, #15
 800687a:	d921      	bls.n	80068c0 <UART_SetConfig+0x488>
 800687c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	429a      	cmp	r2, r3
 8006884:	d21c      	bcs.n	80068c0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	b29a      	uxth	r2, r3
 800688a:	200e      	movs	r0, #14
 800688c:	2420      	movs	r4, #32
 800688e:	1903      	adds	r3, r0, r4
 8006890:	19db      	adds	r3, r3, r7
 8006892:	210f      	movs	r1, #15
 8006894:	438a      	bics	r2, r1
 8006896:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	2207      	movs	r2, #7
 80068a0:	4013      	ands	r3, r2
 80068a2:	b299      	uxth	r1, r3
 80068a4:	1903      	adds	r3, r0, r4
 80068a6:	19db      	adds	r3, r3, r7
 80068a8:	1902      	adds	r2, r0, r4
 80068aa:	19d2      	adds	r2, r2, r7
 80068ac:	8812      	ldrh	r2, [r2, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1902      	adds	r2, r0, r4
 80068b8:	19d2      	adds	r2, r2, r7
 80068ba:	8812      	ldrh	r2, [r2, #0]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	e05e      	b.n	800697e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	231a      	movs	r3, #26
 80068c2:	2220      	movs	r2, #32
 80068c4:	189b      	adds	r3, r3, r2
 80068c6:	19db      	adds	r3, r3, r7
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	e057      	b.n	800697e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ce:	231b      	movs	r3, #27
 80068d0:	2220      	movs	r2, #32
 80068d2:	189b      	adds	r3, r3, r2
 80068d4:	19db      	adds	r3, r3, r7
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d015      	beq.n	8006908 <UART_SetConfig+0x4d0>
 80068dc:	dc18      	bgt.n	8006910 <UART_SetConfig+0x4d8>
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d00d      	beq.n	80068fe <UART_SetConfig+0x4c6>
 80068e2:	dc15      	bgt.n	8006910 <UART_SetConfig+0x4d8>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <UART_SetConfig+0x4b6>
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d005      	beq.n	80068f8 <UART_SetConfig+0x4c0>
 80068ec:	e010      	b.n	8006910 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ee:	f7fe f97f 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80068f2:	0003      	movs	r3, r0
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068f6:	e014      	b.n	8006922 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <UART_SetConfig+0x578>)
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068fc:	e011      	b.n	8006922 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fe f8eb 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006902:	0003      	movs	r3, r0
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006906:	e00c      	b.n	8006922 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006908:	2380      	movs	r3, #128	; 0x80
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800690e:	e008      	b.n	8006922 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006914:	231a      	movs	r3, #26
 8006916:	2220      	movs	r2, #32
 8006918:	189b      	adds	r3, r3, r2
 800691a:	19db      	adds	r3, r3, r7
 800691c:	2201      	movs	r2, #1
 800691e:	701a      	strb	r2, [r3, #0]
        break;
 8006920:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02a      	beq.n	800697e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800692c:	4b1f      	ldr	r3, [pc, #124]	; (80069ac <UART_SetConfig+0x574>)
 800692e:	0052      	lsls	r2, r2, #1
 8006930:	5ad3      	ldrh	r3, [r2, r3]
 8006932:	0019      	movs	r1, r3
 8006934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006936:	f7f9 fc01 	bl	800013c <__udivsi3>
 800693a:	0003      	movs	r3, r0
 800693c:	001a      	movs	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	18d2      	adds	r2, r2, r3
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	0019      	movs	r1, r3
 800694c:	0010      	movs	r0, r2
 800694e:	f7f9 fbf5 	bl	800013c <__udivsi3>
 8006952:	0003      	movs	r3, r0
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2b0f      	cmp	r3, #15
 800695a:	d90a      	bls.n	8006972 <UART_SetConfig+0x53a>
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	025b      	lsls	r3, r3, #9
 8006962:	429a      	cmp	r2, r3
 8006964:	d205      	bcs.n	8006972 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	b29a      	uxth	r2, r3
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006972:	231a      	movs	r3, #26
 8006974:	2220      	movs	r2, #32
 8006976:	189b      	adds	r3, r3, r2
 8006978:	19db      	adds	r3, r3, r7
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	226a      	movs	r2, #106	; 0x6a
 8006982:	2101      	movs	r1, #1
 8006984:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2268      	movs	r2, #104	; 0x68
 800698a:	2101      	movs	r1, #1
 800698c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	2200      	movs	r2, #0
 8006992:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	2200      	movs	r2, #0
 8006998:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800699a:	231a      	movs	r3, #26
 800699c:	2220      	movs	r2, #32
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	19db      	adds	r3, r3, r7
 80069a2:	781b      	ldrb	r3, [r3, #0]
}
 80069a4:	0018      	movs	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b010      	add	sp, #64	; 0x40
 80069aa:	bdb0      	pop	{r4, r5, r7, pc}
 80069ac:	08012eb4 	.word	0x08012eb4
 80069b0:	00f42400 	.word	0x00f42400

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	2201      	movs	r2, #1
 80069c2:	4013      	ands	r3, r2
 80069c4:	d00b      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a4a      	ldr	r2, [pc, #296]	; (8006af8 <UART_AdvFeatureConfig+0x144>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	0019      	movs	r1, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	2202      	movs	r2, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4a43      	ldr	r2, [pc, #268]	; (8006afc <UART_AdvFeatureConfig+0x148>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	0019      	movs	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	2204      	movs	r2, #4
 8006a06:	4013      	ands	r3, r2
 8006a08:	d00b      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a3b      	ldr	r2, [pc, #236]	; (8006b00 <UART_AdvFeatureConfig+0x14c>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	0019      	movs	r1, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	2208      	movs	r2, #8
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4a34      	ldr	r2, [pc, #208]	; (8006b04 <UART_AdvFeatureConfig+0x150>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	0019      	movs	r1, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	2210      	movs	r2, #16
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a2c      	ldr	r2, [pc, #176]	; (8006b08 <UART_AdvFeatureConfig+0x154>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <UART_AdvFeatureConfig+0x158>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	2240      	movs	r2, #64	; 0x40
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d01d      	beq.n	8006ace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <UART_AdvFeatureConfig+0x15c>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	035b      	lsls	r3, r3, #13
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d10b      	bne.n	8006ace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <UART_AdvFeatureConfig+0x160>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	2280      	movs	r2, #128	; 0x80
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <UART_AdvFeatureConfig+0x164>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }
}
 8006af0:	46c0      	nop			; (mov r8, r8)
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	fffdffff 	.word	0xfffdffff
 8006afc:	fffeffff 	.word	0xfffeffff
 8006b00:	fffbffff 	.word	0xfffbffff
 8006b04:	ffff7fff 	.word	0xffff7fff
 8006b08:	ffffefff 	.word	0xffffefff
 8006b0c:	ffffdfff 	.word	0xffffdfff
 8006b10:	ffefffff 	.word	0xffefffff
 8006b14:	ff9fffff 	.word	0xff9fffff
 8006b18:	fff7ffff 	.word	0xfff7ffff

08006b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2290      	movs	r2, #144	; 0x90
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b2c:	f7fc febe 	bl	80038ac <HAL_GetTick>
 8006b30:	0003      	movs	r3, r0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d10c      	bne.n	8006b5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	0391      	lsls	r1, r2, #14
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <UART_CheckIdleState+0x98>)
 8006b4c:	9200      	str	r2, [sp, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f000 f832 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d001      	beq.n	8006b5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e026      	b.n	8006baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d10c      	bne.n	8006b84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	03d1      	lsls	r1, r2, #15
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4a10      	ldr	r2, [pc, #64]	; (8006bb4 <UART_CheckIdleState+0x98>)
 8006b74:	9200      	str	r2, [sp, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f81e 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e012      	b.n	8006baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2288      	movs	r2, #136	; 0x88
 8006b88:	2120      	movs	r1, #32
 8006b8a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	228c      	movs	r2, #140	; 0x8c
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2284      	movs	r2, #132	; 0x84
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b004      	add	sp, #16
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	01ffffff 	.word	0x01ffffff

08006bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b094      	sub	sp, #80	; 0x50
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	1dfb      	adds	r3, r7, #7
 8006bc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	e0a7      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bcc:	3301      	adds	r3, #1
 8006bce:	d100      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bd0:	e0a3      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fc fe6b 	bl	80038ac <HAL_GetTick>
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d13f      	bne.n	8006c68 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	f383 8810 	msr	PRIMASK, r3
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	494e      	ldr	r1, [pc, #312]	; (8006d44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c0a:	400a      	ands	r2, r1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f383 8810 	msr	PRIMASK, r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	2301      	movs	r3, #1
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f383 8810 	msr	PRIMASK, r3
}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	438a      	bics	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	f383 8810 	msr	PRIMASK, r3
}
 8006c4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2288      	movs	r2, #136	; 0x88
 8006c50:	2120      	movs	r1, #32
 8006c52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	228c      	movs	r2, #140	; 0x8c
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2284      	movs	r2, #132	; 0x84
 8006c60:	2100      	movs	r1, #0
 8006c62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e069      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	4013      	ands	r3, r2
 8006c72:	d052      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	401a      	ands	r2, r3
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d148      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2280      	movs	r2, #128	; 0x80
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c92:	f3ef 8310 	mrs	r3, PRIMASK
 8006c96:	613b      	str	r3, [r7, #16]
  return(result);
 8006c98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f383 8810 	msr	PRIMASK, r3
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4924      	ldr	r1, [pc, #144]	; (8006d44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cb4:	400a      	ands	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f383 8810 	msr	PRIMASK, r3
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cce:	2301      	movs	r3, #1
 8006cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f383 8810 	msr	PRIMASK, r3
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	438a      	bics	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]
 8006cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	f383 8810 	msr	PRIMASK, r3
}
 8006cf4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2288      	movs	r2, #136	; 0x88
 8006cfa:	2120      	movs	r1, #32
 8006cfc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	228c      	movs	r2, #140	; 0x8c
 8006d02:	2120      	movs	r1, #32
 8006d04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2290      	movs	r2, #144	; 0x90
 8006d0a:	2120      	movs	r1, #32
 8006d0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2284      	movs	r2, #132	; 0x84
 8006d12:	2100      	movs	r1, #0
 8006d14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e010      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	425a      	negs	r2, r3
 8006d2a:	4153      	adcs	r3, r2
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	001a      	movs	r2, r3
 8006d30:	1dfb      	adds	r3, r7, #7
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d100      	bne.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x182>
 8006d38:	e747      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b014      	add	sp, #80	; 0x50
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	fffffe5f 	.word	0xfffffe5f

08006d48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2284      	movs	r2, #132	; 0x84
 8006d54:	5c9b      	ldrb	r3, [r3, r2]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e027      	b.n	8006dae <HAL_UARTEx_DisableFifoMode+0x66>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2284      	movs	r2, #132	; 0x84
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2288      	movs	r2, #136	; 0x88
 8006d6a:	2124      	movs	r1, #36	; 0x24
 8006d6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2101      	movs	r1, #1
 8006d82:	438a      	bics	r2, r1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a0b      	ldr	r2, [pc, #44]	; (8006db8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2288      	movs	r2, #136	; 0x88
 8006da0:	2120      	movs	r1, #32
 8006da2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2284      	movs	r2, #132	; 0x84
 8006da8:	2100      	movs	r1, #0
 8006daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	dfffffff 	.word	0xdfffffff

08006dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2284      	movs	r2, #132	; 0x84
 8006dca:	5c9b      	ldrb	r3, [r3, r2]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e02e      	b.n	8006e32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2284      	movs	r2, #132	; 0x84
 8006dd8:	2101      	movs	r1, #1
 8006dda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2288      	movs	r2, #136	; 0x88
 8006de0:	2124      	movs	r1, #36	; 0x24
 8006de2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2101      	movs	r1, #1
 8006df8:	438a      	bics	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	08d9      	lsrs	r1, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 f854 	bl	8006ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2288      	movs	r2, #136	; 0x88
 8006e24:	2120      	movs	r1, #32
 8006e26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2284      	movs	r2, #132	; 0x84
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b004      	add	sp, #16
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2284      	movs	r2, #132	; 0x84
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e02f      	b.n	8006eb4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2284      	movs	r2, #132	; 0x84
 8006e58:	2101      	movs	r1, #1
 8006e5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2288      	movs	r2, #136	; 0x88
 8006e60:	2124      	movs	r1, #36	; 0x24
 8006e62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2101      	movs	r1, #1
 8006e78:	438a      	bics	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	4a0e      	ldr	r2, [pc, #56]	; (8006ebc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	0019      	movs	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 f813 	bl	8006ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2288      	movs	r2, #136	; 0x88
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2284      	movs	r2, #132	; 0x84
 8006eae:	2100      	movs	r1, #0
 8006eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b004      	add	sp, #16
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	f1ffffff 	.word	0xf1ffffff

08006ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d108      	bne.n	8006ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	226a      	movs	r2, #106	; 0x6a
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2268      	movs	r2, #104	; 0x68
 8006edc:	2101      	movs	r1, #1
 8006ede:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee0:	e043      	b.n	8006f6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee2:	260f      	movs	r6, #15
 8006ee4:	19bb      	adds	r3, r7, r6
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eea:	200e      	movs	r0, #14
 8006eec:	183b      	adds	r3, r7, r0
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	0e5b      	lsrs	r3, r3, #25
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	240d      	movs	r4, #13
 8006efe:	193b      	adds	r3, r7, r4
 8006f00:	2107      	movs	r1, #7
 8006f02:	400a      	ands	r2, r1
 8006f04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	0f5b      	lsrs	r3, r3, #29
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	250c      	movs	r5, #12
 8006f12:	197b      	adds	r3, r7, r5
 8006f14:	2107      	movs	r1, #7
 8006f16:	400a      	ands	r2, r1
 8006f18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1a:	183b      	adds	r3, r7, r0
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	197a      	adds	r2, r7, r5
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	4914      	ldr	r1, [pc, #80]	; (8006f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f24:	5c8a      	ldrb	r2, [r1, r2]
 8006f26:	435a      	muls	r2, r3
 8006f28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f2a:	197b      	adds	r3, r7, r5
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f32:	0019      	movs	r1, r3
 8006f34:	f7f9 f98c 	bl	8000250 <__divsi3>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	226a      	movs	r2, #106	; 0x6a
 8006f40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f42:	19bb      	adds	r3, r7, r6
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	193a      	adds	r2, r7, r4
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	490a      	ldr	r1, [pc, #40]	; (8006f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f4c:	5c8a      	ldrb	r2, [r1, r2]
 8006f4e:	435a      	muls	r2, r3
 8006f50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	f7f9 f978 	bl	8000250 <__divsi3>
 8006f60:	0003      	movs	r3, r0
 8006f62:	b299      	uxth	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2268      	movs	r2, #104	; 0x68
 8006f68:	5299      	strh	r1, [r3, r2]
}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	b005      	add	sp, #20
 8006f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	08012ecc 	.word	0x08012ecc
 8006f78:	08012ed4 	.word	0x08012ed4

08006f7c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006f7c:	b5b0      	push	{r4, r5, r7, lr}
 8006f7e:	b0e4      	sub	sp, #400	; 0x190
 8006f80:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006f82:	24c8      	movs	r4, #200	; 0xc8
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	0018      	movs	r0, r3
 8006f88:	23c6      	movs	r3, #198	; 0xc6
 8006f8a:	001a      	movs	r2, r3
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	f003 fe15 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8006f92:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <astronode_send_cfg_sr+0x64>)
 8006f94:	25c8      	movs	r5, #200	; 0xc8
 8006f96:	006d      	lsls	r5, r5, #1
 8006f98:	195b      	adds	r3, r3, r5
 8006f9a:	19db      	adds	r3, r3, r7
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	23c6      	movs	r3, #198	; 0xc6
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f003 fe0a 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006fa8:	193b      	adds	r3, r7, r4
 8006faa:	2210      	movs	r2, #16
 8006fac:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8006fae:	003a      	movs	r2, r7
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f001 fba1 	bl	80086fc <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <astronode_send_cfg_sr+0x64>)
 8006fbc:	195b      	adds	r3, r3, r5
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b90      	cmp	r3, #144	; 0x90
 8006fc4:	d104      	bne.n	8006fd0 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <astronode_send_cfg_sr+0x68>)
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7fb ffc1 	bl	8002f50 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8006fce:	e003      	b.n	8006fd8 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <astronode_send_cfg_sr+0x6c>)
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fb ffbc 	bl	8002f50 <send_debug_logs>
}
 8006fd8:	46c0      	nop			; (mov r8, r8)
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b064      	add	sp, #400	; 0x190
 8006fde:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe0:	fffffe70 	.word	0xfffffe70
 8006fe4:	08011be8 	.word	0x08011be8
 8006fe8:	08011c1c 	.word	0x08011c1c

08006fec <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8006fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fee:	b0e7      	sub	sp, #412	; 0x19c
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	0005      	movs	r5, r0
 8006ff4:	000c      	movs	r4, r1
 8006ff6:	0010      	movs	r0, r2
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	4b4a      	ldr	r3, [pc, #296]	; (8007124 <astronode_send_cfg_wr+0x138>)
 8006ffc:	26cc      	movs	r6, #204	; 0xcc
 8006ffe:	0076      	lsls	r6, r6, #1
 8007000:	199b      	adds	r3, r3, r6
 8007002:	19db      	adds	r3, r3, r7
 8007004:	1c2a      	adds	r2, r5, #0
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	4b47      	ldr	r3, [pc, #284]	; (8007128 <astronode_send_cfg_wr+0x13c>)
 800700a:	0035      	movs	r5, r6
 800700c:	195b      	adds	r3, r3, r5
 800700e:	19db      	adds	r3, r3, r7
 8007010:	1c22      	adds	r2, r4, #0
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	4b45      	ldr	r3, [pc, #276]	; (800712c <astronode_send_cfg_wr+0x140>)
 8007016:	002c      	movs	r4, r5
 8007018:	191b      	adds	r3, r3, r4
 800701a:	19db      	adds	r3, r3, r7
 800701c:	1c02      	adds	r2, r0, #0
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	4b43      	ldr	r3, [pc, #268]	; (8007130 <astronode_send_cfg_wr+0x144>)
 8007022:	191b      	adds	r3, r3, r4
 8007024:	19db      	adds	r3, r3, r7
 8007026:	1c0a      	adds	r2, r1, #0
 8007028:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800702a:	25d0      	movs	r5, #208	; 0xd0
 800702c:	197b      	adds	r3, r7, r5
 800702e:	0018      	movs	r0, r3
 8007030:	23c6      	movs	r3, #198	; 0xc6
 8007032:	001a      	movs	r2, r3
 8007034:	2100      	movs	r1, #0
 8007036:	f003 fdc1 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 800703a:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <astronode_send_cfg_wr+0x148>)
 800703c:	191b      	adds	r3, r3, r4
 800703e:	19db      	adds	r3, r3, r7
 8007040:	0018      	movs	r0, r3
 8007042:	23c6      	movs	r3, #198	; 0xc6
 8007044:	001a      	movs	r2, r3
 8007046:	2100      	movs	r1, #0
 8007048:	f003 fdb8 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 800704c:	0029      	movs	r1, r5
 800704e:	187b      	adds	r3, r7, r1
 8007050:	2205      	movs	r2, #5
 8007052:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007054:	4b33      	ldr	r3, [pc, #204]	; (8007124 <astronode_send_cfg_wr+0x138>)
 8007056:	191b      	adds	r3, r3, r4
 8007058:	19db      	adds	r3, r3, r7
 800705a:	2200      	movs	r2, #0
 800705c:	569a      	ldrsb	r2, [r3, r2]
 800705e:	4b32      	ldr	r3, [pc, #200]	; (8007128 <astronode_send_cfg_wr+0x13c>)
 8007060:	191b      	adds	r3, r3, r4
 8007062:	19db      	adds	r3, r3, r7
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	b25b      	sxtb	r3, r3
 800706a:	4313      	orrs	r3, r2
 800706c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <astronode_send_cfg_wr+0x140>)
 8007070:	191b      	adds	r3, r3, r4
 8007072:	19db      	adds	r3, r3, r7
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	b25b      	sxtb	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800707e:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <astronode_send_cfg_wr+0x144>)
 8007080:	191b      	adds	r3, r3, r4
 8007082:	19db      	adds	r3, r3, r7
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	b25b      	sxtb	r3, r3
 800708a:	4313      	orrs	r3, r2
 800708c:	b25b      	sxtb	r3, r3
 800708e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007090:	187b      	adds	r3, r7, r1
 8007092:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007094:	23d4      	movs	r3, #212	; 0xd4
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	2508      	movs	r5, #8
 800709a:	195b      	adds	r3, r3, r5
 800709c:	19db      	adds	r3, r3, r7
 800709e:	2200      	movs	r2, #0
 80070a0:	569a      	ldrsb	r2, [r3, r2]
 80070a2:	23d6      	movs	r3, #214	; 0xd6
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	195b      	adds	r3, r3, r5
 80070a8:	19db      	adds	r3, r3, r7
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80070b4:	23d8      	movs	r3, #216	; 0xd8
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	195b      	adds	r3, r3, r5
 80070ba:	19db      	adds	r3, r3, r7
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80070c6:	23da      	movs	r3, #218	; 0xda
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	195b      	adds	r3, r3, r5
 80070cc:	19db      	adds	r3, r3, r7
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80070da:	187b      	adds	r3, r7, r1
 80070dc:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80070de:	0008      	movs	r0, r1
 80070e0:	187b      	adds	r3, r7, r1
 80070e2:	22c4      	movs	r2, #196	; 0xc4
 80070e4:	2103      	movs	r1, #3
 80070e6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80070e8:	002b      	movs	r3, r5
 80070ea:	18fa      	adds	r2, r7, r3
 80070ec:	183b      	adds	r3, r7, r0
 80070ee:	0011      	movs	r1, r2
 80070f0:	0018      	movs	r0, r3
 80070f2:	f001 fb03 	bl	80086fc <astronode_transport_send_receive>
 80070f6:	0003      	movs	r3, r0
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10e      	bne.n	800711a <astronode_send_cfg_wr+0x12e>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80070fc:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <astronode_send_cfg_wr+0x148>)
 80070fe:	191b      	adds	r3, r3, r4
 8007100:	19db      	adds	r3, r3, r7
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b85      	cmp	r3, #133	; 0x85
 8007106:	d104      	bne.n	8007112 <astronode_send_cfg_wr+0x126>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <astronode_send_cfg_wr+0x14c>)
 800710a:	0018      	movs	r0, r3
 800710c:	f7fb ff20 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8007110:	e003      	b.n	800711a <astronode_send_cfg_wr+0x12e>
            send_debug_logs("Failed to set the Astronode configuration.");
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <astronode_send_cfg_wr+0x150>)
 8007114:	0018      	movs	r0, r3
 8007116:	f7fb ff1b 	bl	8002f50 <send_debug_logs>
}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	b067      	add	sp, #412	; 0x19c
 8007120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	fffffe6f 	.word	0xfffffe6f
 8007128:	fffffe6e 	.word	0xfffffe6e
 800712c:	fffffe6d 	.word	0xfffffe6d
 8007130:	fffffe6c 	.word	0xfffffe6c
 8007134:	fffffe70 	.word	0xfffffe70
 8007138:	08011c50 	.word	0x08011c50
 800713c:	08011c7c 	.word	0x08011c7c

08007140 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007142:	b0ed      	sub	sp, #436	; 0x1b4
 8007144:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007146:	21c8      	movs	r1, #200	; 0xc8
 8007148:	2318      	movs	r3, #24
 800714a:	18cb      	adds	r3, r1, r3
 800714c:	19db      	adds	r3, r3, r7
 800714e:	0018      	movs	r0, r3
 8007150:	23c6      	movs	r3, #198	; 0xc6
 8007152:	001a      	movs	r2, r3
 8007154:	2100      	movs	r1, #0
 8007156:	f003 fd31 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 800715a:	4b4a      	ldr	r3, [pc, #296]	; (8007284 <astronode_send_mgi_rr+0x144>)
 800715c:	26cc      	movs	r6, #204	; 0xcc
 800715e:	0076      	lsls	r6, r6, #1
 8007160:	199b      	adds	r3, r3, r6
 8007162:	2218      	movs	r2, #24
 8007164:	4694      	mov	ip, r2
 8007166:	44bc      	add	ip, r7
 8007168:	4463      	add	r3, ip
 800716a:	0018      	movs	r0, r3
 800716c:	23c6      	movs	r3, #198	; 0xc6
 800716e:	001a      	movs	r2, r3
 8007170:	2100      	movs	r1, #0
 8007172:	f003 fd23 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007176:	21c8      	movs	r1, #200	; 0xc8
 8007178:	2318      	movs	r3, #24
 800717a:	18cb      	adds	r3, r1, r3
 800717c:	19db      	adds	r3, r3, r7
 800717e:	2219      	movs	r2, #25
 8007180:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007182:	2318      	movs	r3, #24
 8007184:	18fa      	adds	r2, r7, r3
 8007186:	2318      	movs	r3, #24
 8007188:	18cb      	adds	r3, r1, r3
 800718a:	19db      	adds	r3, r3, r7
 800718c:	0011      	movs	r1, r2
 800718e:	0018      	movs	r0, r3
 8007190:	f001 fab4 	bl	80086fc <astronode_transport_send_receive>
 8007194:	0003      	movs	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d16f      	bne.n	800727a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800719a:	4b3a      	ldr	r3, [pc, #232]	; (8007284 <astronode_send_mgi_rr+0x144>)
 800719c:	0032      	movs	r2, r6
 800719e:	189b      	adds	r3, r3, r2
 80071a0:	2118      	movs	r1, #24
 80071a2:	468c      	mov	ip, r1
 80071a4:	44bc      	add	ip, r7
 80071a6:	4463      	add	r3, ip
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b99      	cmp	r3, #153	; 0x99
 80071ac:	d161      	bne.n	8007272 <astronode_send_mgi_rr+0x132>
        {
 80071ae:	466b      	mov	r3, sp
 80071b0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 80071b2:	4b34      	ldr	r3, [pc, #208]	; (8007284 <astronode_send_mgi_rr+0x144>)
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	2218      	movs	r2, #24
 80071b8:	4694      	mov	ip, r2
 80071ba:	44bc      	add	ip, r7
 80071bc:	4463      	add	r3, ip
 80071be:	22c4      	movs	r2, #196	; 0xc4
 80071c0:	5a9b      	ldrh	r3, [r3, r2]
 80071c2:	001a      	movs	r2, r3
 80071c4:	3a01      	subs	r2, #1
 80071c6:	21ca      	movs	r1, #202	; 0xca
 80071c8:	0049      	lsls	r1, r1, #1
 80071ca:	2018      	movs	r0, #24
 80071cc:	1809      	adds	r1, r1, r0
 80071ce:	19c9      	adds	r1, r1, r7
 80071d0:	600a      	str	r2, [r1, #0]
 80071d2:	001c      	movs	r4, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	0015      	movs	r5, r2
 80071d8:	0020      	movs	r0, r4
 80071da:	0029      	movs	r1, r5
 80071dc:	0004      	movs	r4, r0
 80071de:	0f62      	lsrs	r2, r4, #29
 80071e0:	000c      	movs	r4, r1
 80071e2:	00e4      	lsls	r4, r4, #3
 80071e4:	617c      	str	r4, [r7, #20]
 80071e6:	697c      	ldr	r4, [r7, #20]
 80071e8:	4314      	orrs	r4, r2
 80071ea:	617c      	str	r4, [r7, #20]
 80071ec:	0001      	movs	r1, r0
 80071ee:	00c9      	lsls	r1, r1, #3
 80071f0:	6139      	str	r1, [r7, #16]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	6838      	ldr	r0, [r7, #0]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	0004      	movs	r4, r0
 80071fe:	0f62      	lsrs	r2, r4, #29
 8007200:	000c      	movs	r4, r1
 8007202:	00e4      	lsls	r4, r4, #3
 8007204:	60fc      	str	r4, [r7, #12]
 8007206:	68fc      	ldr	r4, [r7, #12]
 8007208:	4314      	orrs	r4, r2
 800720a:	60fc      	str	r4, [r7, #12]
 800720c:	0001      	movs	r1, r0
 800720e:	00ca      	lsls	r2, r1, #3
 8007210:	60ba      	str	r2, [r7, #8]
 8007212:	3307      	adds	r3, #7
 8007214:	08db      	lsrs	r3, r3, #3
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4669      	mov	r1, sp
 800721a:	1acb      	subs	r3, r1, r3
 800721c:	469d      	mov	sp, r3
 800721e:	466b      	mov	r3, sp
 8007220:	3300      	adds	r3, #0
 8007222:	24c8      	movs	r4, #200	; 0xc8
 8007224:	0064      	lsls	r4, r4, #1
 8007226:	2218      	movs	r2, #24
 8007228:	18a2      	adds	r2, r4, r2
 800722a:	19d1      	adds	r1, r2, r7
 800722c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <astronode_send_mgi_rr+0x148>)
 8007230:	0018      	movs	r0, r3
 8007232:	f7fb fe8d 	bl	8002f50 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <astronode_send_mgi_rr+0x144>)
 8007238:	22cc      	movs	r2, #204	; 0xcc
 800723a:	0052      	lsls	r2, r2, #1
 800723c:	189b      	adds	r3, r3, r2
 800723e:	2218      	movs	r2, #24
 8007240:	4694      	mov	ip, r2
 8007242:	44bc      	add	ip, r7
 8007244:	4463      	add	r3, ip
 8007246:	22c4      	movs	r2, #196	; 0xc4
 8007248:	5a9b      	ldrh	r3, [r3, r2]
 800724a:	0019      	movs	r1, r3
 800724c:	2318      	movs	r3, #24
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	3301      	adds	r3, #1
 8007252:	4a0e      	ldr	r2, [pc, #56]	; (800728c <astronode_send_mgi_rr+0x14c>)
 8007254:	2018      	movs	r0, #24
 8007256:	1820      	adds	r0, r4, r0
 8007258:	19c0      	adds	r0, r0, r7
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	f003 fbe4 	bl	800aa28 <snprintf>
            send_debug_logs(guid);
 8007260:	2318      	movs	r3, #24
 8007262:	18e3      	adds	r3, r4, r3
 8007264:	19db      	adds	r3, r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0018      	movs	r0, r3
 800726a:	f7fb fe71 	bl	8002f50 <send_debug_logs>
 800726e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007270:	e003      	b.n	800727a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <astronode_send_mgi_rr+0x150>)
 8007274:	0018      	movs	r0, r3
 8007276:	f7fb fe6b 	bl	8002f50 <send_debug_logs>
}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	b06d      	add	sp, #436	; 0x1b4
 8007280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	fffffe68 	.word	0xfffffe68
 8007288:	08011d08 	.word	0x08011d08
 800728c:	08011d18 	.word	0x08011d18
 8007290:	08011d1c 	.word	0x08011d1c

08007294 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	b0ed      	sub	sp, #436	; 0x1b4
 8007298:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800729a:	21c8      	movs	r1, #200	; 0xc8
 800729c:	2318      	movs	r3, #24
 800729e:	18cb      	adds	r3, r1, r3
 80072a0:	19db      	adds	r3, r3, r7
 80072a2:	0018      	movs	r0, r3
 80072a4:	23c6      	movs	r3, #198	; 0xc6
 80072a6:	001a      	movs	r2, r3
 80072a8:	2100      	movs	r1, #0
 80072aa:	f003 fc87 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 80072ae:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <astronode_send_msn_rr+0x144>)
 80072b0:	26cc      	movs	r6, #204	; 0xcc
 80072b2:	0076      	lsls	r6, r6, #1
 80072b4:	199b      	adds	r3, r3, r6
 80072b6:	2218      	movs	r2, #24
 80072b8:	4694      	mov	ip, r2
 80072ba:	44bc      	add	ip, r7
 80072bc:	4463      	add	r3, ip
 80072be:	0018      	movs	r0, r3
 80072c0:	23c6      	movs	r3, #198	; 0xc6
 80072c2:	001a      	movs	r2, r3
 80072c4:	2100      	movs	r1, #0
 80072c6:	f003 fc79 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80072ca:	21c8      	movs	r1, #200	; 0xc8
 80072cc:	2318      	movs	r3, #24
 80072ce:	18cb      	adds	r3, r1, r3
 80072d0:	19db      	adds	r3, r3, r7
 80072d2:	221a      	movs	r2, #26
 80072d4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80072d6:	2318      	movs	r3, #24
 80072d8:	18fa      	adds	r2, r7, r3
 80072da:	2318      	movs	r3, #24
 80072dc:	18cb      	adds	r3, r1, r3
 80072de:	19db      	adds	r3, r3, r7
 80072e0:	0011      	movs	r1, r2
 80072e2:	0018      	movs	r0, r3
 80072e4:	f001 fa0a 	bl	80086fc <astronode_transport_send_receive>
 80072e8:	0003      	movs	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d16f      	bne.n	80073ce <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80072ee:	4b3a      	ldr	r3, [pc, #232]	; (80073d8 <astronode_send_msn_rr+0x144>)
 80072f0:	0032      	movs	r2, r6
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	2118      	movs	r1, #24
 80072f6:	468c      	mov	ip, r1
 80072f8:	44bc      	add	ip, r7
 80072fa:	4463      	add	r3, ip
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b9a      	cmp	r3, #154	; 0x9a
 8007300:	d161      	bne.n	80073c6 <astronode_send_msn_rr+0x132>
        {
 8007302:	466b      	mov	r3, sp
 8007304:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <astronode_send_msn_rr+0x144>)
 8007308:	189b      	adds	r3, r3, r2
 800730a:	2218      	movs	r2, #24
 800730c:	4694      	mov	ip, r2
 800730e:	44bc      	add	ip, r7
 8007310:	4463      	add	r3, ip
 8007312:	22c4      	movs	r2, #196	; 0xc4
 8007314:	5a9b      	ldrh	r3, [r3, r2]
 8007316:	001a      	movs	r2, r3
 8007318:	3a01      	subs	r2, #1
 800731a:	21ca      	movs	r1, #202	; 0xca
 800731c:	0049      	lsls	r1, r1, #1
 800731e:	2018      	movs	r0, #24
 8007320:	1809      	adds	r1, r1, r0
 8007322:	19c9      	adds	r1, r1, r7
 8007324:	600a      	str	r2, [r1, #0]
 8007326:	001c      	movs	r4, r3
 8007328:	2200      	movs	r2, #0
 800732a:	0015      	movs	r5, r2
 800732c:	0020      	movs	r0, r4
 800732e:	0029      	movs	r1, r5
 8007330:	0004      	movs	r4, r0
 8007332:	0f62      	lsrs	r2, r4, #29
 8007334:	000c      	movs	r4, r1
 8007336:	00e4      	lsls	r4, r4, #3
 8007338:	617c      	str	r4, [r7, #20]
 800733a:	697c      	ldr	r4, [r7, #20]
 800733c:	4314      	orrs	r4, r2
 800733e:	617c      	str	r4, [r7, #20]
 8007340:	0001      	movs	r1, r0
 8007342:	00c9      	lsls	r1, r1, #3
 8007344:	6139      	str	r1, [r7, #16]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	6838      	ldr	r0, [r7, #0]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	0004      	movs	r4, r0
 8007352:	0f62      	lsrs	r2, r4, #29
 8007354:	000c      	movs	r4, r1
 8007356:	00e4      	lsls	r4, r4, #3
 8007358:	60fc      	str	r4, [r7, #12]
 800735a:	68fc      	ldr	r4, [r7, #12]
 800735c:	4314      	orrs	r4, r2
 800735e:	60fc      	str	r4, [r7, #12]
 8007360:	0001      	movs	r1, r0
 8007362:	00ca      	lsls	r2, r1, #3
 8007364:	60ba      	str	r2, [r7, #8]
 8007366:	3307      	adds	r3, #7
 8007368:	08db      	lsrs	r3, r3, #3
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4669      	mov	r1, sp
 800736e:	1acb      	subs	r3, r1, r3
 8007370:	469d      	mov	sp, r3
 8007372:	466b      	mov	r3, sp
 8007374:	3300      	adds	r3, #0
 8007376:	24c8      	movs	r4, #200	; 0xc8
 8007378:	0064      	lsls	r4, r4, #1
 800737a:	2218      	movs	r2, #24
 800737c:	18a2      	adds	r2, r4, r2
 800737e:	19d1      	adds	r1, r2, r7
 8007380:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <astronode_send_msn_rr+0x148>)
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb fde3 	bl	8002f50 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <astronode_send_msn_rr+0x144>)
 800738c:	22cc      	movs	r2, #204	; 0xcc
 800738e:	0052      	lsls	r2, r2, #1
 8007390:	189b      	adds	r3, r3, r2
 8007392:	2218      	movs	r2, #24
 8007394:	4694      	mov	ip, r2
 8007396:	44bc      	add	ip, r7
 8007398:	4463      	add	r3, ip
 800739a:	22c4      	movs	r2, #196	; 0xc4
 800739c:	5a9b      	ldrh	r3, [r3, r2]
 800739e:	0019      	movs	r1, r3
 80073a0:	2318      	movs	r3, #24
 80073a2:	18fb      	adds	r3, r7, r3
 80073a4:	3301      	adds	r3, #1
 80073a6:	4a0e      	ldr	r2, [pc, #56]	; (80073e0 <astronode_send_msn_rr+0x14c>)
 80073a8:	2018      	movs	r0, #24
 80073aa:	1820      	adds	r0, r4, r0
 80073ac:	19c0      	adds	r0, r0, r7
 80073ae:	6800      	ldr	r0, [r0, #0]
 80073b0:	f003 fb3a 	bl	800aa28 <snprintf>
            send_debug_logs(serial_number);
 80073b4:	2318      	movs	r3, #24
 80073b6:	18e3      	adds	r3, r4, r3
 80073b8:	19db      	adds	r3, r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	0018      	movs	r0, r3
 80073be:	f7fb fdc7 	bl	8002f50 <send_debug_logs>
 80073c2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80073c4:	e003      	b.n	80073ce <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80073c6:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <astronode_send_msn_rr+0x150>)
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7fb fdc1 	bl	8002f50 <send_debug_logs>
}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b06d      	add	sp, #436	; 0x1b4
 80073d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	fffffe68 	.word	0xfffffe68
 80073dc:	08011d38 	.word	0x08011d38
 80073e0:	08011d18 	.word	0x08011d18
 80073e4:	08011d54 	.word	0x08011d54

080073e8 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 80073e8:	b5b0      	push	{r4, r5, r7, lr}
 80073ea:	b0fa      	sub	sp, #488	; 0x1e8
 80073ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80073ee:	258e      	movs	r5, #142	; 0x8e
 80073f0:	006d      	lsls	r5, r5, #1
 80073f2:	197b      	adds	r3, r7, r5
 80073f4:	0018      	movs	r0, r3
 80073f6:	23c6      	movs	r3, #198	; 0xc6
 80073f8:	001a      	movs	r2, r3
 80073fa:	2100      	movs	r1, #0
 80073fc:	f003 fbde 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007400:	4b26      	ldr	r3, [pc, #152]	; (800749c <astronode_send_nco_rr+0xb4>)
 8007402:	24f4      	movs	r4, #244	; 0xf4
 8007404:	0064      	lsls	r4, r4, #1
 8007406:	191b      	adds	r3, r3, r4
 8007408:	19db      	adds	r3, r3, r7
 800740a:	0018      	movs	r0, r3
 800740c:	23c6      	movs	r3, #198	; 0xc6
 800740e:	001a      	movs	r2, r3
 8007410:	2100      	movs	r1, #0
 8007412:	f003 fbd3 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8007416:	197b      	adds	r3, r7, r5
 8007418:	2218      	movs	r2, #24
 800741a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800741c:	2354      	movs	r3, #84	; 0x54
 800741e:	18fa      	adds	r2, r7, r3
 8007420:	197b      	adds	r3, r7, r5
 8007422:	0011      	movs	r1, r2
 8007424:	0018      	movs	r0, r3
 8007426:	f001 f969 	bl	80086fc <astronode_transport_send_receive>
 800742a:	0003      	movs	r3, r0
 800742c:	2b01      	cmp	r3, #1
 800742e:	d131      	bne.n	8007494 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8007430:	4b1a      	ldr	r3, [pc, #104]	; (800749c <astronode_send_nco_rr+0xb4>)
 8007432:	0021      	movs	r1, r4
 8007434:	185b      	adds	r3, r3, r1
 8007436:	19db      	adds	r3, r3, r7
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b98      	cmp	r3, #152	; 0x98
 800743c:	d126      	bne.n	800748c <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 800743e:	4b17      	ldr	r3, [pc, #92]	; (800749c <astronode_send_nco_rr+0xb4>)
 8007440:	185b      	adds	r3, r3, r1
 8007442:	19db      	adds	r3, r3, r7
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007448:	4b14      	ldr	r3, [pc, #80]	; (800749c <astronode_send_nco_rr+0xb4>)
 800744a:	185b      	adds	r3, r3, r1
 800744c:	19db      	adds	r3, r3, r7
 800744e:	789b      	ldrb	r3, [r3, #2]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <astronode_send_nco_rr+0xb4>)
 8007456:	185b      	adds	r3, r3, r1
 8007458:	19db      	adds	r3, r3, r7
 800745a:	78db      	ldrb	r3, [r3, #3]
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007460:	4b0e      	ldr	r3, [pc, #56]	; (800749c <astronode_send_nco_rr+0xb4>)
 8007462:	185b      	adds	r3, r3, r1
 8007464:	19db      	adds	r3, r3, r7
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 800746c:	22f2      	movs	r2, #242	; 0xf2
 800746e:	0052      	lsls	r2, r2, #1
 8007470:	18b9      	adds	r1, r7, r2
 8007472:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 8007474:	18bb      	adds	r3, r7, r2
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	4909      	ldr	r1, [pc, #36]	; (80074a0 <astronode_send_nco_rr+0xb8>)
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	0018      	movs	r0, r3
 800747e:	f003 fb07 	bl	800aa90 <sprintf>
            send_debug_logs(str);
 8007482:	1d3b      	adds	r3, r7, #4
 8007484:	0018      	movs	r0, r3
 8007486:	f7fb fd63 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 800748a:	e003      	b.n	8007494 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <astronode_send_nco_rr+0xbc>)
 800748e:	0018      	movs	r0, r3
 8007490:	f7fb fd5e 	bl	8002f50 <send_debug_logs>
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b07a      	add	sp, #488	; 0x1e8
 800749a:	bdb0      	pop	{r4, r5, r7, pc}
 800749c:	fffffe6c 	.word	0xfffffe6c
 80074a0:	08011d7c 	.word	0x08011d7c
 80074a4:	08011dc4 	.word	0x08011dc4

080074a8 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b0e4      	sub	sp, #400	; 0x190
 80074ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80074ae:	24c8      	movs	r4, #200	; 0xc8
 80074b0:	193b      	adds	r3, r7, r4
 80074b2:	0018      	movs	r0, r3
 80074b4:	23c6      	movs	r3, #198	; 0xc6
 80074b6:	001a      	movs	r2, r3
 80074b8:	2100      	movs	r1, #0
 80074ba:	f003 fb7f 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <astronode_send_evt_rr+0xdc>)
 80074c0:	25c8      	movs	r5, #200	; 0xc8
 80074c2:	006d      	lsls	r5, r5, #1
 80074c4:	195b      	adds	r3, r3, r5
 80074c6:	19db      	adds	r3, r3, r7
 80074c8:	0018      	movs	r0, r3
 80074ca:	23c6      	movs	r3, #198	; 0xc6
 80074cc:	001a      	movs	r2, r3
 80074ce:	2100      	movs	r1, #0
 80074d0:	f003 fb74 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	2265      	movs	r2, #101	; 0x65
 80074d8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80074da:	003a      	movs	r2, r7
 80074dc:	193b      	adds	r3, r7, r4
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f001 f90b 	bl	80086fc <astronode_transport_send_receive>
 80074e6:	0003      	movs	r3, r0
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d147      	bne.n	800757c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <astronode_send_evt_rr+0xdc>)
 80074ee:	195b      	adds	r3, r3, r5
 80074f0:	19db      	adds	r3, r3, r7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2be5      	cmp	r3, #229	; 0xe5
 80074f6:	d141      	bne.n	800757c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80074f8:	4b22      	ldr	r3, [pc, #136]	; (8007584 <astronode_send_evt_rr+0xdc>)
 80074fa:	195b      	adds	r3, r3, r5
 80074fc:	19db      	adds	r3, r3, r7
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	001a      	movs	r2, r3
 8007502:	2301      	movs	r3, #1
 8007504:	4013      	ands	r3, r2
 8007506:	d006      	beq.n	8007516 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007508:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <astronode_send_evt_rr+0xe0>)
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800750e:	4b1f      	ldr	r3, [pc, #124]	; (800758c <astronode_send_evt_rr+0xe4>)
 8007510:	0018      	movs	r0, r3
 8007512:	f7fb fd1d 	bl	8002f50 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007516:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <astronode_send_evt_rr+0xdc>)
 8007518:	22c8      	movs	r2, #200	; 0xc8
 800751a:	0052      	lsls	r2, r2, #1
 800751c:	189b      	adds	r3, r3, r2
 800751e:	19db      	adds	r3, r3, r7
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	001a      	movs	r2, r3
 8007524:	2302      	movs	r3, #2
 8007526:	4013      	ands	r3, r2
 8007528:	d006      	beq.n	8007538 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <astronode_send_evt_rr+0xe8>)
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007530:	4b18      	ldr	r3, [pc, #96]	; (8007594 <astronode_send_evt_rr+0xec>)
 8007532:	0018      	movs	r0, r3
 8007534:	f7fb fd0c 	bl	8002f50 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <astronode_send_evt_rr+0xdc>)
 800753a:	22c8      	movs	r2, #200	; 0xc8
 800753c:	0052      	lsls	r2, r2, #1
 800753e:	189b      	adds	r3, r3, r2
 8007540:	19db      	adds	r3, r3, r7
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	001a      	movs	r2, r3
 8007546:	2304      	movs	r3, #4
 8007548:	4013      	ands	r3, r2
 800754a:	d006      	beq.n	800755a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <astronode_send_evt_rr+0xf0>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <astronode_send_evt_rr+0xf4>)
 8007554:	0018      	movs	r0, r3
 8007556:	f7fb fcfb 	bl	8002f50 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800755a:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <astronode_send_evt_rr+0xdc>)
 800755c:	22c8      	movs	r2, #200	; 0xc8
 800755e:	0052      	lsls	r2, r2, #1
 8007560:	189b      	adds	r3, r3, r2
 8007562:	19db      	adds	r3, r3, r7
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	001a      	movs	r2, r3
 8007568:	2308      	movs	r3, #8
 800756a:	4013      	ands	r3, r2
 800756c:	d006      	beq.n	800757c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <astronode_send_evt_rr+0xf8>)
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <astronode_send_evt_rr+0xfc>)
 8007576:	0018      	movs	r0, r3
 8007578:	f7fb fcea 	bl	8002f50 <send_debug_logs>
            }

        }
    }
}
 800757c:	46c0      	nop			; (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b064      	add	sp, #400	; 0x190
 8007582:	bdb0      	pop	{r4, r5, r7, pc}
 8007584:	fffffe70 	.word	0xfffffe70
 8007588:	20000be0 	.word	0x20000be0
 800758c:	08011dfc 	.word	0x08011dfc
 8007590:	20000be1 	.word	0x20000be1
 8007594:	08011e20 	.word	0x08011e20
 8007598:	20000be2 	.word	0x20000be2
 800759c:	08011e38 	.word	0x08011e38
 80075a0:	20000be3 	.word	0x20000be3
 80075a4:	08011e4c 	.word	0x08011e4c

080075a8 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	b0e7      	sub	sp, #412	; 0x19c
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80075b2:	24d0      	movs	r4, #208	; 0xd0
 80075b4:	193b      	adds	r3, r7, r4
 80075b6:	0018      	movs	r0, r3
 80075b8:	23c6      	movs	r3, #198	; 0xc6
 80075ba:	001a      	movs	r2, r3
 80075bc:	2100      	movs	r1, #0
 80075be:	f003 fafd 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 80075c2:	4b56      	ldr	r3, [pc, #344]	; (800771c <astronode_send_geo_wr+0x174>)
 80075c4:	26cc      	movs	r6, #204	; 0xcc
 80075c6:	0076      	lsls	r6, r6, #1
 80075c8:	199b      	adds	r3, r3, r6
 80075ca:	19db      	adds	r3, r3, r7
 80075cc:	0018      	movs	r0, r3
 80075ce:	23c6      	movs	r3, #198	; 0xc6
 80075d0:	001a      	movs	r2, r3
 80075d2:	2100      	movs	r1, #0
 80075d4:	f003 faf2 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80075d8:	193b      	adds	r3, r7, r4
 80075da:	2235      	movs	r2, #53	; 0x35
 80075dc:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	22c4      	movs	r2, #196	; 0xc4
 80075e2:	5a9b      	ldrh	r3, [r3, r2]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	b290      	uxth	r0, r2
 80075e8:	193a      	adds	r2, r7, r4
 80075ea:	21c4      	movs	r1, #196	; 0xc4
 80075ec:	5250      	strh	r0, [r2, r1]
 80075ee:	0019      	movs	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	185b      	adds	r3, r3, r1
 80075f8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	1218      	asrs	r0, r3, #8
 80075fe:	0025      	movs	r5, r4
 8007600:	197b      	adds	r3, r7, r5
 8007602:	22c4      	movs	r2, #196	; 0xc4
 8007604:	5a9b      	ldrh	r3, [r3, r2]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	b294      	uxth	r4, r2
 800760a:	197a      	adds	r2, r7, r5
 800760c:	21c4      	movs	r1, #196	; 0xc4
 800760e:	5254      	strh	r4, [r2, r1]
 8007610:	0019      	movs	r1, r3
 8007612:	b2c2      	uxtb	r2, r0
 8007614:	002c      	movs	r4, r5
 8007616:	193b      	adds	r3, r7, r4
 8007618:	185b      	adds	r3, r3, r1
 800761a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1418      	asrs	r0, r3, #16
 8007620:	0025      	movs	r5, r4
 8007622:	197b      	adds	r3, r7, r5
 8007624:	22c4      	movs	r2, #196	; 0xc4
 8007626:	5a9b      	ldrh	r3, [r3, r2]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	b294      	uxth	r4, r2
 800762c:	197a      	adds	r2, r7, r5
 800762e:	21c4      	movs	r1, #196	; 0xc4
 8007630:	5254      	strh	r4, [r2, r1]
 8007632:	0019      	movs	r1, r3
 8007634:	b2c2      	uxtb	r2, r0
 8007636:	002c      	movs	r4, r5
 8007638:	193b      	adds	r3, r7, r4
 800763a:	185b      	adds	r3, r3, r1
 800763c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	1618      	asrs	r0, r3, #24
 8007642:	0025      	movs	r5, r4
 8007644:	197b      	adds	r3, r7, r5
 8007646:	22c4      	movs	r2, #196	; 0xc4
 8007648:	5a9b      	ldrh	r3, [r3, r2]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	b294      	uxth	r4, r2
 800764e:	197a      	adds	r2, r7, r5
 8007650:	21c4      	movs	r1, #196	; 0xc4
 8007652:	5254      	strh	r4, [r2, r1]
 8007654:	0019      	movs	r1, r3
 8007656:	b2c2      	uxtb	r2, r0
 8007658:	002c      	movs	r4, r5
 800765a:	193b      	adds	r3, r7, r4
 800765c:	185b      	adds	r3, r3, r1
 800765e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007660:	193b      	adds	r3, r7, r4
 8007662:	22c4      	movs	r2, #196	; 0xc4
 8007664:	5a9b      	ldrh	r3, [r3, r2]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	b290      	uxth	r0, r2
 800766a:	193a      	adds	r2, r7, r4
 800766c:	21c4      	movs	r1, #196	; 0xc4
 800766e:	5250      	strh	r0, [r2, r1]
 8007670:	0019      	movs	r1, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	193b      	adds	r3, r7, r4
 8007678:	185b      	adds	r3, r3, r1
 800767a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	1218      	asrs	r0, r3, #8
 8007680:	0025      	movs	r5, r4
 8007682:	197b      	adds	r3, r7, r5
 8007684:	22c4      	movs	r2, #196	; 0xc4
 8007686:	5a9b      	ldrh	r3, [r3, r2]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	b294      	uxth	r4, r2
 800768c:	197a      	adds	r2, r7, r5
 800768e:	21c4      	movs	r1, #196	; 0xc4
 8007690:	5254      	strh	r4, [r2, r1]
 8007692:	0019      	movs	r1, r3
 8007694:	b2c2      	uxtb	r2, r0
 8007696:	002c      	movs	r4, r5
 8007698:	193b      	adds	r3, r7, r4
 800769a:	185b      	adds	r3, r3, r1
 800769c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	1418      	asrs	r0, r3, #16
 80076a2:	0025      	movs	r5, r4
 80076a4:	197b      	adds	r3, r7, r5
 80076a6:	22c4      	movs	r2, #196	; 0xc4
 80076a8:	5a9b      	ldrh	r3, [r3, r2]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	b294      	uxth	r4, r2
 80076ae:	197a      	adds	r2, r7, r5
 80076b0:	21c4      	movs	r1, #196	; 0xc4
 80076b2:	5254      	strh	r4, [r2, r1]
 80076b4:	0019      	movs	r1, r3
 80076b6:	b2c2      	uxtb	r2, r0
 80076b8:	002c      	movs	r4, r5
 80076ba:	193b      	adds	r3, r7, r4
 80076bc:	185b      	adds	r3, r3, r1
 80076be:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	1618      	asrs	r0, r3, #24
 80076c4:	0025      	movs	r5, r4
 80076c6:	197b      	adds	r3, r7, r5
 80076c8:	22c4      	movs	r2, #196	; 0xc4
 80076ca:	5a9b      	ldrh	r3, [r3, r2]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	b294      	uxth	r4, r2
 80076d0:	197a      	adds	r2, r7, r5
 80076d2:	21c4      	movs	r1, #196	; 0xc4
 80076d4:	5254      	strh	r4, [r2, r1]
 80076d6:	0019      	movs	r1, r3
 80076d8:	b2c2      	uxtb	r2, r0
 80076da:	0028      	movs	r0, r5
 80076dc:	183b      	adds	r3, r7, r0
 80076de:	185b      	adds	r3, r3, r1
 80076e0:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80076e2:	2308      	movs	r3, #8
 80076e4:	18fa      	adds	r2, r7, r3
 80076e6:	183b      	adds	r3, r7, r0
 80076e8:	0011      	movs	r1, r2
 80076ea:	0018      	movs	r0, r3
 80076ec:	f001 f806 	bl	80086fc <astronode_transport_send_receive>
 80076f0:	0003      	movs	r3, r0
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d10e      	bne.n	8007714 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <astronode_send_geo_wr+0x174>)
 80076f8:	199b      	adds	r3, r3, r6
 80076fa:	19db      	adds	r3, r3, r7
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2bb5      	cmp	r3, #181	; 0xb5
 8007700:	d104      	bne.n	800770c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <astronode_send_geo_wr+0x178>)
 8007704:	0018      	movs	r0, r3
 8007706:	f7fb fc23 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800770a:	e003      	b.n	8007714 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <astronode_send_geo_wr+0x17c>)
 800770e:	0018      	movs	r0, r3
 8007710:	f7fb fc1e 	bl	8002f50 <send_debug_logs>
}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	46bd      	mov	sp, r7
 8007718:	b067      	add	sp, #412	; 0x19c
 800771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800771c:	fffffe70 	.word	0xfffffe70
 8007720:	08011e60 	.word	0x08011e60
 8007724:	08011e8c 	.word	0x08011e8c

08007728 <astronode_send_pld_er>:
        }
    }
}

void astronode_send_pld_er(uint16_t payload_id, char *p_payload, uint16_t payload_length)
{
 8007728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772a:	b0e7      	sub	sp, #412	; 0x19c
 800772c:	af00      	add	r7, sp, #0
 800772e:	6039      	str	r1, [r7, #0]
 8007730:	0011      	movs	r1, r2
 8007732:	4b3d      	ldr	r3, [pc, #244]	; (8007828 <astronode_send_pld_er+0x100>)
 8007734:	26cc      	movs	r6, #204	; 0xcc
 8007736:	0076      	lsls	r6, r6, #1
 8007738:	199b      	adds	r3, r3, r6
 800773a:	19db      	adds	r3, r3, r7
 800773c:	1c02      	adds	r2, r0, #0
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	4b3a      	ldr	r3, [pc, #232]	; (800782c <astronode_send_pld_er+0x104>)
 8007742:	199b      	adds	r3, r3, r6
 8007744:	19db      	adds	r3, r3, r7
 8007746:	1c0a      	adds	r2, r1, #0
 8007748:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800774a:	24d0      	movs	r4, #208	; 0xd0
 800774c:	193b      	adds	r3, r7, r4
 800774e:	0018      	movs	r0, r3
 8007750:	23c6      	movs	r3, #198	; 0xc6
 8007752:	001a      	movs	r2, r3
 8007754:	2100      	movs	r1, #0
 8007756:	f003 fa31 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 800775a:	4b35      	ldr	r3, [pc, #212]	; (8007830 <astronode_send_pld_er+0x108>)
 800775c:	199b      	adds	r3, r3, r6
 800775e:	19db      	adds	r3, r3, r7
 8007760:	0018      	movs	r0, r3
 8007762:	23c6      	movs	r3, #198	; 0xc6
 8007764:	001a      	movs	r2, r3
 8007766:	2100      	movs	r1, #0
 8007768:	f003 fa28 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800776c:	193b      	adds	r3, r7, r4
 800776e:	2225      	movs	r2, #37	; 0x25
 8007770:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8007772:	193b      	adds	r3, r7, r4
 8007774:	22c4      	movs	r2, #196	; 0xc4
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	b290      	uxth	r0, r2
 800777c:	193a      	adds	r2, r7, r4
 800777e:	21c4      	movs	r1, #196	; 0xc4
 8007780:	5250      	strh	r0, [r2, r1]
 8007782:	0019      	movs	r1, r3
 8007784:	4b28      	ldr	r3, [pc, #160]	; (8007828 <astronode_send_pld_er+0x100>)
 8007786:	199b      	adds	r3, r3, r6
 8007788:	19db      	adds	r3, r3, r7
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	193b      	adds	r3, r7, r4
 8007790:	185b      	adds	r3, r3, r1
 8007792:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <astronode_send_pld_er+0x100>)
 8007796:	199b      	adds	r3, r3, r6
 8007798:	19db      	adds	r3, r3, r7
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	0a1b      	lsrs	r3, r3, #8
 800779e:	b298      	uxth	r0, r3
 80077a0:	0025      	movs	r5, r4
 80077a2:	197b      	adds	r3, r7, r5
 80077a4:	22c4      	movs	r2, #196	; 0xc4
 80077a6:	5a9b      	ldrh	r3, [r3, r2]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	b294      	uxth	r4, r2
 80077ac:	197a      	adds	r2, r7, r5
 80077ae:	21c4      	movs	r1, #196	; 0xc4
 80077b0:	5254      	strh	r4, [r2, r1]
 80077b2:	0019      	movs	r1, r3
 80077b4:	b2c2      	uxtb	r2, r0
 80077b6:	002c      	movs	r4, r5
 80077b8:	193b      	adds	r3, r7, r4
 80077ba:	185b      	adds	r3, r3, r1
 80077bc:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80077be:	193b      	adds	r3, r7, r4
 80077c0:	22c4      	movs	r2, #196	; 0xc4
 80077c2:	5a9b      	ldrh	r3, [r3, r2]
 80077c4:	001a      	movs	r2, r3
 80077c6:	193b      	adds	r3, r7, r4
 80077c8:	189b      	adds	r3, r3, r2
 80077ca:	1c58      	adds	r0, r3, #1
 80077cc:	4b17      	ldr	r3, [pc, #92]	; (800782c <astronode_send_pld_er+0x104>)
 80077ce:	199b      	adds	r3, r3, r6
 80077d0:	19db      	adds	r3, r3, r7
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	0019      	movs	r1, r3
 80077d8:	f003 fad5 	bl	800ad86 <memcpy>
    request.payload_len = 2 + payload_length;
 80077dc:	4b13      	ldr	r3, [pc, #76]	; (800782c <astronode_send_pld_er+0x104>)
 80077de:	199b      	adds	r3, r3, r6
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	3302      	adds	r3, #2
 80077e6:	b299      	uxth	r1, r3
 80077e8:	193b      	adds	r3, r7, r4
 80077ea:	22c4      	movs	r2, #196	; 0xc4
 80077ec:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80077ee:	2308      	movs	r3, #8
 80077f0:	18fa      	adds	r2, r7, r3
 80077f2:	193b      	adds	r3, r7, r4
 80077f4:	0011      	movs	r1, r2
 80077f6:	0018      	movs	r0, r3
 80077f8:	f000 ff80 	bl	80086fc <astronode_transport_send_receive>
 80077fc:	0003      	movs	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d10e      	bne.n	8007820 <astronode_send_pld_er+0xf8>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <astronode_send_pld_er+0x108>)
 8007804:	199b      	adds	r3, r3, r6
 8007806:	19db      	adds	r3, r3, r7
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2ba5      	cmp	r3, #165	; 0xa5
 800780c:	d104      	bne.n	8007818 <astronode_send_pld_er+0xf0>
        {
            send_debug_logs("Payload was successfully queued.");
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <astronode_send_pld_er+0x10c>)
 8007810:	0018      	movs	r0, r3
 8007812:	f7fb fb9d 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("Payload failed to be queued.");
        }
    }
}
 8007816:	e003      	b.n	8007820 <astronode_send_pld_er+0xf8>
            send_debug_logs("Payload failed to be queued.");
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <astronode_send_pld_er+0x110>)
 800781a:	0018      	movs	r0, r3
 800781c:	f7fb fb98 	bl	8002f50 <send_debug_logs>
}
 8007820:	46c0      	nop			; (mov r8, r8)
 8007822:	46bd      	mov	sp, r7
 8007824:	b067      	add	sp, #412	; 0x19c
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007828:	fffffe6e 	.word	0xfffffe6e
 800782c:	fffffe6c 	.word	0xfffffe6c
 8007830:	fffffe70 	.word	0xfffffe70
 8007834:	08011f04 	.word	0x08011f04
 8007838:	08011f28 	.word	0x08011f28

0800783c <astronode_send_res_cr>:
        }
    }
}

void astronode_send_res_cr(void)
{
 800783c:	b5b0      	push	{r4, r5, r7, lr}
 800783e:	b0e4      	sub	sp, #400	; 0x190
 8007840:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007842:	24c8      	movs	r4, #200	; 0xc8
 8007844:	193b      	adds	r3, r7, r4
 8007846:	0018      	movs	r0, r3
 8007848:	23c6      	movs	r3, #198	; 0xc6
 800784a:	001a      	movs	r2, r3
 800784c:	2100      	movs	r1, #0
 800784e:	f003 f9b5 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007852:	4b16      	ldr	r3, [pc, #88]	; (80078ac <astronode_send_res_cr+0x70>)
 8007854:	25c8      	movs	r5, #200	; 0xc8
 8007856:	006d      	lsls	r5, r5, #1
 8007858:	195b      	adds	r3, r3, r5
 800785a:	19db      	adds	r3, r3, r7
 800785c:	0018      	movs	r0, r3
 800785e:	23c6      	movs	r3, #198	; 0xc6
 8007860:	001a      	movs	r2, r3
 8007862:	2100      	movs	r1, #0
 8007864:	f003 f9aa 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8007868:	193b      	adds	r3, r7, r4
 800786a:	2255      	movs	r2, #85	; 0x55
 800786c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800786e:	003a      	movs	r2, r7
 8007870:	193b      	adds	r3, r7, r4
 8007872:	0011      	movs	r1, r2
 8007874:	0018      	movs	r0, r3
 8007876:	f000 ff41 	bl	80086fc <astronode_transport_send_receive>
 800787a:	0003      	movs	r3, r0
 800787c:	2b01      	cmp	r3, #1
 800787e:	d111      	bne.n	80078a4 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <astronode_send_res_cr+0x70>)
 8007882:	195b      	adds	r3, r3, r5
 8007884:	19db      	adds	r3, r3, r7
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2bd5      	cmp	r3, #213	; 0xd5
 800788a:	d107      	bne.n	800789c <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <astronode_send_res_cr+0x74>)
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <astronode_send_res_cr+0x78>)
 8007894:	0018      	movs	r0, r3
 8007896:	f7fb fb5b 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 800789a:	e003      	b.n	80078a4 <astronode_send_res_cr+0x68>
            send_debug_logs("No reset to clear.");
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <astronode_send_res_cr+0x7c>)
 800789e:	0018      	movs	r0, r3
 80078a0:	f7fb fb56 	bl	8002f50 <send_debug_logs>
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b064      	add	sp, #400	; 0x190
 80078aa:	bdb0      	pop	{r4, r5, r7, pc}
 80078ac:	fffffe70 	.word	0xfffffe70
 80078b0:	20000be1 	.word	0x20000be1
 80078b4:	08011f94 	.word	0x08011f94
 80078b8:	08011fb0 	.word	0x08011fb0

080078bc <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 80078bc:	b5b0      	push	{r4, r5, r7, lr}
 80078be:	b0fa      	sub	sp, #488	; 0x1e8
 80078c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80078c2:	258e      	movs	r5, #142	; 0x8e
 80078c4:	006d      	lsls	r5, r5, #1
 80078c6:	197b      	adds	r3, r7, r5
 80078c8:	0018      	movs	r0, r3
 80078ca:	23c6      	movs	r3, #198	; 0xc6
 80078cc:	001a      	movs	r2, r3
 80078ce:	2100      	movs	r1, #0
 80078d0:	f003 f974 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 80078d4:	4b26      	ldr	r3, [pc, #152]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 80078d6:	24f4      	movs	r4, #244	; 0xf4
 80078d8:	0064      	lsls	r4, r4, #1
 80078da:	191b      	adds	r3, r3, r4
 80078dc:	19db      	adds	r3, r3, r7
 80078de:	0018      	movs	r0, r3
 80078e0:	23c6      	movs	r3, #198	; 0xc6
 80078e2:	001a      	movs	r2, r3
 80078e4:	2100      	movs	r1, #0
 80078e6:	f003 f969 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 80078ea:	197b      	adds	r3, r7, r5
 80078ec:	2217      	movs	r2, #23
 80078ee:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80078f0:	2354      	movs	r3, #84	; 0x54
 80078f2:	18fa      	adds	r2, r7, r3
 80078f4:	197b      	adds	r3, r7, r5
 80078f6:	0011      	movs	r1, r2
 80078f8:	0018      	movs	r0, r3
 80078fa:	f000 feff 	bl	80086fc <astronode_transport_send_receive>
 80078fe:	0003      	movs	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	d131      	bne.n	8007968 <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 8007906:	0021      	movs	r1, r4
 8007908:	185b      	adds	r3, r3, r1
 800790a:	19db      	adds	r3, r3, r7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b97      	cmp	r3, #151	; 0x97
 8007910:	d126      	bne.n	8007960 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 8007914:	185b      	adds	r3, r3, r1
 8007916:	19db      	adds	r3, r3, r7
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 800791c:	4b14      	ldr	r3, [pc, #80]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 800791e:	185b      	adds	r3, r3, r1
 8007920:	19db      	adds	r3, r3, r7
 8007922:	789b      	ldrb	r3, [r3, #2]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 800792a:	185b      	adds	r3, r3, r1
 800792c:	19db      	adds	r3, r3, r7
 800792e:	78db      	ldrb	r3, [r3, #3]
 8007930:	041b      	lsls	r3, r3, #16
 8007932:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <astronode_send_rtc_rr+0xb4>)
 8007936:	185b      	adds	r3, r3, r1
 8007938:	19db      	adds	r3, r3, r7
 800793a:	791b      	ldrb	r3, [r3, #4]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007940:	22f2      	movs	r2, #242	; 0xf2
 8007942:	0052      	lsls	r2, r2, #1
 8007944:	18b9      	adds	r1, r7, r2
 8007946:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007948:	18bb      	adds	r3, r7, r2
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4909      	ldr	r1, [pc, #36]	; (8007974 <astronode_send_rtc_rr+0xb8>)
 800794e:	1d3b      	adds	r3, r7, #4
 8007950:	0018      	movs	r0, r3
 8007952:	f003 f89d 	bl	800aa90 <sprintf>
            send_debug_logs(str);
 8007956:	1d3b      	adds	r3, r7, #4
 8007958:	0018      	movs	r0, r3
 800795a:	f7fb faf9 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 800795e:	e003      	b.n	8007968 <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <astronode_send_rtc_rr+0xbc>)
 8007962:	0018      	movs	r0, r3
 8007964:	f7fb faf4 	bl	8002f50 <send_debug_logs>
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b07a      	add	sp, #488	; 0x1e8
 800796e:	bdb0      	pop	{r4, r5, r7, pc}
 8007970:	fffffe6c 	.word	0xfffffe6c
 8007974:	08011fc4 	.word	0x08011fc4
 8007978:	08012004 	.word	0x08012004

0800797c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 800797c:	b5b0      	push	{r4, r5, r7, lr}
 800797e:	b0f8      	sub	sp, #480	; 0x1e0
 8007980:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007982:	258c      	movs	r5, #140	; 0x8c
 8007984:	006d      	lsls	r5, r5, #1
 8007986:	197b      	adds	r3, r7, r5
 8007988:	0018      	movs	r0, r3
 800798a:	23c6      	movs	r3, #198	; 0xc6
 800798c:	001a      	movs	r2, r3
 800798e:	2100      	movs	r1, #0
 8007990:	f003 f914 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007994:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <astronode_send_sak_rr+0xa0>)
 8007996:	24f0      	movs	r4, #240	; 0xf0
 8007998:	0064      	lsls	r4, r4, #1
 800799a:	191b      	adds	r3, r3, r4
 800799c:	19db      	adds	r3, r3, r7
 800799e:	0018      	movs	r0, r3
 80079a0:	23c6      	movs	r3, #198	; 0xc6
 80079a2:	001a      	movs	r2, r3
 80079a4:	2100      	movs	r1, #0
 80079a6:	f003 f909 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80079aa:	197b      	adds	r3, r7, r5
 80079ac:	2245      	movs	r2, #69	; 0x45
 80079ae:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80079b0:	2350      	movs	r3, #80	; 0x50
 80079b2:	18fa      	adds	r2, r7, r3
 80079b4:	197b      	adds	r3, r7, r5
 80079b6:	0011      	movs	r1, r2
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 fe9f 	bl	80086fc <astronode_transport_send_receive>
 80079be:	0003      	movs	r3, r0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d126      	bne.n	8007a12 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <astronode_send_sak_rr+0xa0>)
 80079c6:	191b      	adds	r3, r3, r4
 80079c8:	19db      	adds	r3, r3, r7
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2bc5      	cmp	r3, #197	; 0xc5
 80079ce:	d11c      	bne.n	8007a0a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <astronode_send_sak_rr+0xa0>)
 80079d2:	191b      	adds	r3, r3, r4
 80079d4:	19db      	adds	r3, r3, r7
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	b299      	uxth	r1, r3
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <astronode_send_sak_rr+0xa0>)
 80079dc:	191b      	adds	r3, r3, r4
 80079de:	19db      	adds	r3, r3, r7
 80079e0:	789b      	ldrb	r3, [r3, #2]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	20ef      	movs	r0, #239	; 0xef
 80079ea:	0040      	lsls	r0, r0, #1
 80079ec:	183b      	adds	r3, r7, r0
 80079ee:	188a      	adds	r2, r1, r2
 80079f0:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80079f2:	183b      	adds	r3, r7, r0
 80079f4:	881a      	ldrh	r2, [r3, #0]
 80079f6:	490a      	ldr	r1, [pc, #40]	; (8007a20 <astronode_send_sak_rr+0xa4>)
 80079f8:	003b      	movs	r3, r7
 80079fa:	0018      	movs	r0, r3
 80079fc:	f003 f848 	bl	800aa90 <sprintf>
            send_debug_logs(str);
 8007a00:	003b      	movs	r3, r7
 8007a02:	0018      	movs	r0, r3
 8007a04:	f7fb faa4 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007a08:	e003      	b.n	8007a12 <astronode_send_sak_rr+0x96>
            send_debug_logs("No acknowledgment available.");
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <astronode_send_sak_rr+0xa8>)
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7fb fa9f 	bl	8002f50 <send_debug_logs>
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b078      	add	sp, #480	; 0x1e0
 8007a18:	bdb0      	pop	{r4, r5, r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	fffffe70 	.word	0xfffffe70
 8007a20:	08012020 	.word	0x08012020
 8007a24:	0801204c 	.word	0x0801204c

08007a28 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007a28:	b5b0      	push	{r4, r5, r7, lr}
 8007a2a:	b0e4      	sub	sp, #400	; 0x190
 8007a2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a2e:	24c8      	movs	r4, #200	; 0xc8
 8007a30:	193b      	adds	r3, r7, r4
 8007a32:	0018      	movs	r0, r3
 8007a34:	23c6      	movs	r3, #198	; 0xc6
 8007a36:	001a      	movs	r2, r3
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f003 f8bf 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <astronode_send_sak_cr+0x70>)
 8007a40:	25c8      	movs	r5, #200	; 0xc8
 8007a42:	006d      	lsls	r5, r5, #1
 8007a44:	195b      	adds	r3, r3, r5
 8007a46:	19db      	adds	r3, r3, r7
 8007a48:	0018      	movs	r0, r3
 8007a4a:	23c6      	movs	r3, #198	; 0xc6
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f003 f8b4 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8007a54:	193b      	adds	r3, r7, r4
 8007a56:	2246      	movs	r2, #70	; 0x46
 8007a58:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a5a:	003a      	movs	r2, r7
 8007a5c:	193b      	adds	r3, r7, r4
 8007a5e:	0011      	movs	r1, r2
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 fe4b 	bl	80086fc <astronode_transport_send_receive>
 8007a66:	0003      	movs	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d111      	bne.n	8007a90 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <astronode_send_sak_cr+0x70>)
 8007a6e:	195b      	adds	r3, r3, r5
 8007a70:	19db      	adds	r3, r3, r7
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2bc6      	cmp	r3, #198	; 0xc6
 8007a76:	d107      	bne.n	8007a88 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <astronode_send_sak_cr+0x74>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <astronode_send_sak_cr+0x78>)
 8007a80:	0018      	movs	r0, r3
 8007a82:	f7fb fa65 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007a86:	e003      	b.n	8007a90 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8007a88:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <astronode_send_sak_cr+0x7c>)
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7fb fa60 	bl	8002f50 <send_debug_logs>
}
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b064      	add	sp, #400	; 0x190
 8007a96:	bdb0      	pop	{r4, r5, r7, pc}
 8007a98:	fffffe70 	.word	0xfffffe70
 8007a9c:	20000be0 	.word	0x20000be0
 8007aa0:	0801206c 	.word	0x0801206c
 8007aa4:	0801204c 	.word	0x0801204c

08007aa8 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	b0ed      	sub	sp, #436	; 0x1b4
 8007aac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007aae:	21c8      	movs	r1, #200	; 0xc8
 8007ab0:	2318      	movs	r3, #24
 8007ab2:	18cb      	adds	r3, r1, r3
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	23c6      	movs	r3, #198	; 0xc6
 8007aba:	001a      	movs	r2, r3
 8007abc:	2100      	movs	r1, #0
 8007abe:	f003 f87d 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007ac2:	4b4a      	ldr	r3, [pc, #296]	; (8007bec <astronode_send_mpn_rr+0x144>)
 8007ac4:	26cc      	movs	r6, #204	; 0xcc
 8007ac6:	0076      	lsls	r6, r6, #1
 8007ac8:	199b      	adds	r3, r3, r6
 8007aca:	2218      	movs	r2, #24
 8007acc:	4694      	mov	ip, r2
 8007ace:	44bc      	add	ip, r7
 8007ad0:	4463      	add	r3, ip
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	23c6      	movs	r3, #198	; 0xc6
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	2100      	movs	r1, #0
 8007ada:	f003 f86f 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007ade:	21c8      	movs	r1, #200	; 0xc8
 8007ae0:	2318      	movs	r3, #24
 8007ae2:	18cb      	adds	r3, r1, r3
 8007ae4:	19db      	adds	r3, r3, r7
 8007ae6:	221b      	movs	r2, #27
 8007ae8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007aea:	2318      	movs	r3, #24
 8007aec:	18fa      	adds	r2, r7, r3
 8007aee:	2318      	movs	r3, #24
 8007af0:	18cb      	adds	r3, r1, r3
 8007af2:	19db      	adds	r3, r3, r7
 8007af4:	0011      	movs	r1, r2
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 fe00 	bl	80086fc <astronode_transport_send_receive>
 8007afc:	0003      	movs	r3, r0
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d16f      	bne.n	8007be2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007b02:	4b3a      	ldr	r3, [pc, #232]	; (8007bec <astronode_send_mpn_rr+0x144>)
 8007b04:	0032      	movs	r2, r6
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	2118      	movs	r1, #24
 8007b0a:	468c      	mov	ip, r1
 8007b0c:	44bc      	add	ip, r7
 8007b0e:	4463      	add	r3, ip
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b9b      	cmp	r3, #155	; 0x9b
 8007b14:	d161      	bne.n	8007bda <astronode_send_mpn_rr+0x132>
        {
 8007b16:	466b      	mov	r3, sp
 8007b18:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007b1a:	4b34      	ldr	r3, [pc, #208]	; (8007bec <astronode_send_mpn_rr+0x144>)
 8007b1c:	189b      	adds	r3, r3, r2
 8007b1e:	2218      	movs	r2, #24
 8007b20:	4694      	mov	ip, r2
 8007b22:	44bc      	add	ip, r7
 8007b24:	4463      	add	r3, ip
 8007b26:	22c4      	movs	r2, #196	; 0xc4
 8007b28:	5a9b      	ldrh	r3, [r3, r2]
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	21ca      	movs	r1, #202	; 0xca
 8007b30:	0049      	lsls	r1, r1, #1
 8007b32:	2018      	movs	r0, #24
 8007b34:	1809      	adds	r1, r1, r0
 8007b36:	19c9      	adds	r1, r1, r7
 8007b38:	600a      	str	r2, [r1, #0]
 8007b3a:	001c      	movs	r4, r3
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	0015      	movs	r5, r2
 8007b40:	0020      	movs	r0, r4
 8007b42:	0029      	movs	r1, r5
 8007b44:	0004      	movs	r4, r0
 8007b46:	0f62      	lsrs	r2, r4, #29
 8007b48:	000c      	movs	r4, r1
 8007b4a:	00e4      	lsls	r4, r4, #3
 8007b4c:	617c      	str	r4, [r7, #20]
 8007b4e:	697c      	ldr	r4, [r7, #20]
 8007b50:	4314      	orrs	r4, r2
 8007b52:	617c      	str	r4, [r7, #20]
 8007b54:	0001      	movs	r1, r0
 8007b56:	00c9      	lsls	r1, r1, #3
 8007b58:	6139      	str	r1, [r7, #16]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	6838      	ldr	r0, [r7, #0]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	0004      	movs	r4, r0
 8007b66:	0f62      	lsrs	r2, r4, #29
 8007b68:	000c      	movs	r4, r1
 8007b6a:	00e4      	lsls	r4, r4, #3
 8007b6c:	60fc      	str	r4, [r7, #12]
 8007b6e:	68fc      	ldr	r4, [r7, #12]
 8007b70:	4314      	orrs	r4, r2
 8007b72:	60fc      	str	r4, [r7, #12]
 8007b74:	0001      	movs	r1, r0
 8007b76:	00ca      	lsls	r2, r1, #3
 8007b78:	60ba      	str	r2, [r7, #8]
 8007b7a:	3307      	adds	r3, #7
 8007b7c:	08db      	lsrs	r3, r3, #3
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4669      	mov	r1, sp
 8007b82:	1acb      	subs	r3, r1, r3
 8007b84:	469d      	mov	sp, r3
 8007b86:	466b      	mov	r3, sp
 8007b88:	3300      	adds	r3, #0
 8007b8a:	24c8      	movs	r4, #200	; 0xc8
 8007b8c:	0064      	lsls	r4, r4, #1
 8007b8e:	2218      	movs	r2, #24
 8007b90:	18a2      	adds	r2, r4, r2
 8007b92:	19d1      	adds	r1, r2, r7
 8007b94:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <astronode_send_mpn_rr+0x148>)
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7fb f9d9 	bl	8002f50 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <astronode_send_mpn_rr+0x144>)
 8007ba0:	22cc      	movs	r2, #204	; 0xcc
 8007ba2:	0052      	lsls	r2, r2, #1
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	2218      	movs	r2, #24
 8007ba8:	4694      	mov	ip, r2
 8007baa:	44bc      	add	ip, r7
 8007bac:	4463      	add	r3, ip
 8007bae:	22c4      	movs	r2, #196	; 0xc4
 8007bb0:	5a9b      	ldrh	r3, [r3, r2]
 8007bb2:	0019      	movs	r1, r3
 8007bb4:	2318      	movs	r3, #24
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	3301      	adds	r3, #1
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <astronode_send_mpn_rr+0x14c>)
 8007bbc:	2018      	movs	r0, #24
 8007bbe:	1820      	adds	r0, r4, r0
 8007bc0:	19c0      	adds	r0, r0, r7
 8007bc2:	6800      	ldr	r0, [r0, #0]
 8007bc4:	f002 ff30 	bl	800aa28 <snprintf>
            send_debug_logs(product_number);
 8007bc8:	2318      	movs	r3, #24
 8007bca:	18e3      	adds	r3, r4, r3
 8007bcc:	19db      	adds	r3, r3, r7
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7fb f9bd 	bl	8002f50 <send_debug_logs>
 8007bd6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007bd8:	e003      	b.n	8007be2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <astronode_send_mpn_rr+0x150>)
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fb f9b7 	bl	8002f50 <send_debug_logs>
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b06d      	add	sp, #436	; 0x1b4
 8007be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	fffffe68 	.word	0xfffffe68
 8007bf0:	0801213c 	.word	0x0801213c
 8007bf4:	08011d18 	.word	0x08011d18
 8007bf8:	08011d54 	.word	0x08011d54

08007bfc <append_multiple_data_size_to_string>:

void append_multiple_data_size_to_string(char * const p_str, uint32_t * const p_data, uint8_t size)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	1dfb      	adds	r3, r7, #7
 8007c08:	701a      	strb	r2, [r3, #0]
    switch (size)
 8007c0a:	1dfb      	adds	r3, r7, #7
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d019      	beq.n	8007c46 <append_multiple_data_size_to_string+0x4a>
 8007c12:	dc20      	bgt.n	8007c56 <append_multiple_data_size_to_string+0x5a>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d002      	beq.n	8007c1e <append_multiple_data_size_to_string+0x22>
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d00a      	beq.n	8007c32 <append_multiple_data_size_to_string+0x36>
 8007c1c:	e01b      	b.n	8007c56 <append_multiple_data_size_to_string+0x5a>
    {
        case 1:
            sprintf(p_str, "%u", (uint8_t) *p_data);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	001a      	movs	r2, r3
 8007c26:	4912      	ldr	r1, [pc, #72]	; (8007c70 <append_multiple_data_size_to_string+0x74>)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f002 ff30 	bl	800aa90 <sprintf>
            break;
 8007c30:	e019      	b.n	8007c66 <append_multiple_data_size_to_string+0x6a>
        case 2:
            sprintf(p_str, "%u", (uint16_t) *p_data);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	001a      	movs	r2, r3
 8007c3a:	490d      	ldr	r1, [pc, #52]	; (8007c70 <append_multiple_data_size_to_string+0x74>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f002 ff26 	bl	800aa90 <sprintf>
            break;
 8007c44:	e00f      	b.n	8007c66 <append_multiple_data_size_to_string+0x6a>
        case 4:
            sprintf(p_str, "%lu", *p_data);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	490a      	ldr	r1, [pc, #40]	; (8007c74 <append_multiple_data_size_to_string+0x78>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f002 ff1e 	bl	800aa90 <sprintf>
            break;
 8007c54:	e007      	b.n	8007c66 <append_multiple_data_size_to_string+0x6a>
        default:
            sprintf(p_str, "tlv size error %u", size);
 8007c56:	1dfb      	adds	r3, r7, #7
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	4907      	ldr	r1, [pc, #28]	; (8007c78 <append_multiple_data_size_to_string+0x7c>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f002 ff16 	bl	800aa90 <sprintf>
    }
}
 8007c64:	46c0      	nop			; (mov r8, r8)
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b004      	add	sp, #16
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	08012158 	.word	0x08012158
 8007c74:	0801215c 	.word	0x0801215c
 8007c78:	08012160 	.word	0x08012160

08007c7c <astronode_send_per_rr>:

void astronode_send_per_rr(void)
{
 8007c7c:	b5b0      	push	{r4, r5, r7, lr}
 8007c7e:	b0fa      	sub	sp, #488	; 0x1e8
 8007c80:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c82:	248c      	movs	r4, #140	; 0x8c
 8007c84:	0064      	lsls	r4, r4, #1
 8007c86:	193b      	adds	r3, r7, r4
 8007c88:	0018      	movs	r0, r3
 8007c8a:	23c6      	movs	r3, #198	; 0xc6
 8007c8c:	001a      	movs	r2, r3
 8007c8e:	2100      	movs	r1, #0
 8007c90:	f002 ff94 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007c94:	4b6e      	ldr	r3, [pc, #440]	; (8007e50 <astronode_send_per_rr+0x1d4>)
 8007c96:	25f4      	movs	r5, #244	; 0xf4
 8007c98:	006d      	lsls	r5, r5, #1
 8007c9a:	195b      	adds	r3, r3, r5
 8007c9c:	19db      	adds	r3, r3, r7
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	23c6      	movs	r3, #198	; 0xc6
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f002 ff89 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_PER_RR;
 8007caa:	193b      	adds	r3, r7, r4
 8007cac:	2267      	movs	r2, #103	; 0x67
 8007cae:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007cb0:	2350      	movs	r3, #80	; 0x50
 8007cb2:	18fa      	adds	r2, r7, r3
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	0011      	movs	r1, r2
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 fd1f 	bl	80086fc <astronode_transport_send_receive>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d000      	beq.n	8007cc6 <astronode_send_per_rr+0x4a>
 8007cc4:	e0bf      	b.n	8007e46 <astronode_send_per_rr+0x1ca>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PER_RA)
 8007cc6:	4b62      	ldr	r3, [pc, #392]	; (8007e50 <astronode_send_per_rr+0x1d4>)
 8007cc8:	195b      	adds	r3, r3, r5
 8007cca:	19db      	adds	r3, r3, r7
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2be7      	cmp	r3, #231	; 0xe7
 8007cd0:	d000      	beq.n	8007cd4 <astronode_send_per_rr+0x58>
 8007cd2:	e0b4      	b.n	8007e3e <astronode_send_per_rr+0x1c2>
        {
            uint16_t tlv_index = 0; // size 16bits to fit to payload_len
 8007cd4:	23f3      	movs	r3, #243	; 0xf3
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	2200      	movs	r2, #0
 8007cdc:	801a      	strh	r2, [r3, #0]
            char log_text[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            uint8_t tlv_size = 0;
 8007cde:	23e6      	movs	r3, #230	; 0xe6
 8007ce0:	33ff      	adds	r3, #255	; 0xff
 8007ce2:	18fb      	adds	r3, r7, r3
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
            while (tlv_index < answer.payload_len)
 8007ce8:	e09a      	b.n	8007e20 <astronode_send_per_rr+0x1a4>
            {
                uint32_t *p_data = (uint32_t *) &answer.p_payload[tlv_index + 2];
 8007cea:	20f3      	movs	r0, #243	; 0xf3
 8007cec:	0040      	lsls	r0, r0, #1
 8007cee:	183b      	adds	r3, r7, r0
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	2250      	movs	r2, #80	; 0x50
 8007cf6:	18ba      	adds	r2, r7, r2
 8007cf8:	18d3      	adds	r3, r2, r3
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	22f0      	movs	r2, #240	; 0xf0
 8007cfe:	0052      	lsls	r2, r2, #1
 8007d00:	18ba      	adds	r2, r7, r2
 8007d02:	6013      	str	r3, [r2, #0]
                tlv_size = answer.p_payload[tlv_index + 1];
 8007d04:	183b      	adds	r3, r7, r0
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	23e6      	movs	r3, #230	; 0xe6
 8007d0c:	33ff      	adds	r3, #255	; 0xff
 8007d0e:	18fb      	adds	r3, r7, r3
 8007d10:	494f      	ldr	r1, [pc, #316]	; (8007e50 <astronode_send_per_rr+0x1d4>)
 8007d12:	24f4      	movs	r4, #244	; 0xf4
 8007d14:	0064      	lsls	r4, r4, #1
 8007d16:	1909      	adds	r1, r1, r4
 8007d18:	19c9      	adds	r1, r1, r7
 8007d1a:	188a      	adds	r2, r1, r2
 8007d1c:	7852      	ldrb	r2, [r2, #1]
 8007d1e:	701a      	strb	r2, [r3, #0]
                switch (answer.p_payload[tlv_index])
 8007d20:	183b      	adds	r3, r7, r0
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	4a4a      	ldr	r2, [pc, #296]	; (8007e50 <astronode_send_per_rr+0x1d4>)
 8007d26:	1912      	adds	r2, r2, r4
 8007d28:	19d2      	adds	r2, r2, r7
 8007d2a:	18d3      	adds	r3, r2, r3
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b0e      	cmp	r3, #14
 8007d30:	d84a      	bhi.n	8007dc8 <astronode_send_per_rr+0x14c>
 8007d32:	009a      	lsls	r2, r3, #2
 8007d34:	4b47      	ldr	r3, [pc, #284]	; (8007e54 <astronode_send_per_rr+0x1d8>)
 8007d36:	18d3      	adds	r3, r2, r3
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	469f      	mov	pc, r3
                {
                    case PC_COUNTER_ID_SAT_DET_PHASE_COUNT:
                        send_debug_logs("PC sat det phase count is: ");
 8007d3c:	4b46      	ldr	r3, [pc, #280]	; (8007e58 <astronode_send_per_rr+0x1dc>)
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7fb f906 	bl	8002f50 <send_debug_logs>
                        break;
 8007d44:	e049      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_SAT_DET_OPERATIONS_COUNT:
                        send_debug_logs("PC sat det operation count is: ");
 8007d46:	4b45      	ldr	r3, [pc, #276]	; (8007e5c <astronode_send_per_rr+0x1e0>)
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7fb f901 	bl	8002f50 <send_debug_logs>
                        break;
 8007d4e:	e044      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_PHASE_COUNT:
                        send_debug_logs("PC signalling demod phase count is: ");
 8007d50:	4b43      	ldr	r3, [pc, #268]	; (8007e60 <astronode_send_per_rr+0x1e4>)
 8007d52:	0018      	movs	r0, r3
 8007d54:	f7fb f8fc 	bl	8002f50 <send_debug_logs>
                        break;
 8007d58:	e03f      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC signalling demod attemps count is: ");
 8007d5a:	4b42      	ldr	r3, [pc, #264]	; (8007e64 <astronode_send_per_rr+0x1e8>)
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f7fb f8f7 	bl	8002f50 <send_debug_logs>
                        break;
 8007d62:	e03a      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_SUCCESSES_COUNT:
                        send_debug_logs("PC signalling demod successes count is: ");
 8007d64:	4b40      	ldr	r3, [pc, #256]	; (8007e68 <astronode_send_per_rr+0x1ec>)
 8007d66:	0018      	movs	r0, r3
 8007d68:	f7fb f8f2 	bl	8002f50 <send_debug_logs>
                        break;
 8007d6c:	e035      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_ACK_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC ack demod attemps count is: ");
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <astronode_send_per_rr+0x1f0>)
 8007d70:	0018      	movs	r0, r3
 8007d72:	f7fb f8ed 	bl	8002f50 <send_debug_logs>
                        break;
 8007d76:	e030      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_ACK_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC ack demod success count is: ");
 8007d78:	4b3d      	ldr	r3, [pc, #244]	; (8007e70 <astronode_send_per_rr+0x1f4>)
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7fb f8e8 	bl	8002f50 <send_debug_logs>
                        break;
 8007d80:	e02b      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_QUEUED_MSG_COUNT:
                        send_debug_logs("PC queued message count is: ");
 8007d82:	4b3c      	ldr	r3, [pc, #240]	; (8007e74 <astronode_send_per_rr+0x1f8>)
 8007d84:	0018      	movs	r0, r3
 8007d86:	f7fb f8e3 	bl	8002f50 <send_debug_logs>
                        break;
 8007d8a:	e026      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_DEQUEUED_UNACKED_MSG_COUNT:
                        send_debug_logs("PC dequeued unacked message count is: ");
 8007d8c:	4b3a      	ldr	r3, [pc, #232]	; (8007e78 <astronode_send_per_rr+0x1fc>)
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f7fb f8de 	bl	8002f50 <send_debug_logs>
                        break;
 8007d94:	e021      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_ACKED_MSG_COUNT:
                        send_debug_logs("PC acked message count is: ");
 8007d96:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <astronode_send_per_rr+0x200>)
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7fb f8d9 	bl	8002f50 <send_debug_logs>
                        break;
 8007d9e:	e01c      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_SENT_FRAG_COUNT:
                        send_debug_logs("PC sent frag count is: ");
 8007da0:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <astronode_send_per_rr+0x204>)
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7fb f8d4 	bl	8002f50 <send_debug_logs>
                        break;
 8007da8:	e017      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_ACKED_FRAG_COUNT:
                        send_debug_logs("PC ack frag count is: ");
 8007daa:	4b36      	ldr	r3, [pc, #216]	; (8007e84 <astronode_send_per_rr+0x208>)
 8007dac:	0018      	movs	r0, r3
 8007dae:	f7fb f8cf 	bl	8002f50 <send_debug_logs>
                        break;
 8007db2:	e012      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_COMMAND_DEMOD_ATTEMPT_COUNT:
                        send_debug_logs("PC unicast demod attempt count is: ");
 8007db4:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <astronode_send_per_rr+0x20c>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7fb f8ca 	bl	8002f50 <send_debug_logs>
                        break;
 8007dbc:	e00d      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    case PC_COUNTER_ID_COMMAND_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC unicast demod success count is: ");
 8007dbe:	4b33      	ldr	r3, [pc, #204]	; (8007e8c <astronode_send_per_rr+0x210>)
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7fb f8c5 	bl	8002f50 <send_debug_logs>
                        break;
 8007dc6:	e008      	b.n	8007dda <astronode_send_per_rr+0x15e>
                    default:
                        send_debug_logs("PC error, type unknown");
 8007dc8:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <astronode_send_per_rr+0x214>)
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f7fb f8c0 	bl	8002f50 <send_debug_logs>
                        tlv_size = 0;
 8007dd0:	23e6      	movs	r3, #230	; 0xe6
 8007dd2:	33ff      	adds	r3, #255	; 0xff
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
                }
                append_multiple_data_size_to_string(log_text, p_data, tlv_size);
 8007dda:	24e6      	movs	r4, #230	; 0xe6
 8007ddc:	34ff      	adds	r4, #255	; 0xff
 8007dde:	193b      	adds	r3, r7, r4
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	23f0      	movs	r3, #240	; 0xf0
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	6819      	ldr	r1, [r3, #0]
 8007dea:	003b      	movs	r3, r7
 8007dec:	0018      	movs	r0, r3
 8007dee:	f7ff ff05 	bl	8007bfc <append_multiple_data_size_to_string>
                send_debug_logs(log_text);
 8007df2:	003b      	movs	r3, r7
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7fb f8ab 	bl	8002f50 <send_debug_logs>
                log_text[0] = '\0';
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <astronode_send_per_rr+0x218>)
 8007dfc:	22f4      	movs	r2, #244	; 0xf4
 8007dfe:	0052      	lsls	r2, r2, #1
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	19db      	adds	r3, r3, r7
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
                tlv_index += tlv_size + 2;
 8007e08:	193b      	adds	r3, r7, r4
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	21f3      	movs	r1, #243	; 0xf3
 8007e10:	0049      	lsls	r1, r1, #1
 8007e12:	187b      	adds	r3, r7, r1
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	18d3      	adds	r3, r2, r3
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	187b      	adds	r3, r7, r1
 8007e1c:	3202      	adds	r2, #2
 8007e1e:	801a      	strh	r2, [r3, #0]
            while (tlv_index < answer.payload_len)
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <astronode_send_per_rr+0x1d4>)
 8007e22:	22f4      	movs	r2, #244	; 0xf4
 8007e24:	0052      	lsls	r2, r2, #1
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	19db      	adds	r3, r3, r7
 8007e2a:	22c4      	movs	r2, #196	; 0xc4
 8007e2c:	5a9b      	ldrh	r3, [r3, r2]
 8007e2e:	22f3      	movs	r2, #243	; 0xf3
 8007e30:	0052      	lsls	r2, r2, #1
 8007e32:	18ba      	adds	r2, r7, r2
 8007e34:	8812      	ldrh	r2, [r2, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d200      	bcs.n	8007e3c <astronode_send_per_rr+0x1c0>
 8007e3a:	e756      	b.n	8007cea <astronode_send_per_rr+0x6e>
        else
        {
            send_debug_logs("Failed to get performance counters.");
        }
    }
}
 8007e3c:	e003      	b.n	8007e46 <astronode_send_per_rr+0x1ca>
            send_debug_logs("Failed to get performance counters.");
 8007e3e:	4b16      	ldr	r3, [pc, #88]	; (8007e98 <astronode_send_per_rr+0x21c>)
 8007e40:	0018      	movs	r0, r3
 8007e42:	f7fb f885 	bl	8002f50 <send_debug_logs>
}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	b07a      	add	sp, #488	; 0x1e8
 8007e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	fffffe68 	.word	0xfffffe68
 8007e54:	08012edc 	.word	0x08012edc
 8007e58:	08012174 	.word	0x08012174
 8007e5c:	08012190 	.word	0x08012190
 8007e60:	080121b0 	.word	0x080121b0
 8007e64:	080121d8 	.word	0x080121d8
 8007e68:	08012200 	.word	0x08012200
 8007e6c:	0801222c 	.word	0x0801222c
 8007e70:	0801224c 	.word	0x0801224c
 8007e74:	0801226c 	.word	0x0801226c
 8007e78:	0801228c 	.word	0x0801228c
 8007e7c:	080122b4 	.word	0x080122b4
 8007e80:	080122d0 	.word	0x080122d0
 8007e84:	080122e8 	.word	0x080122e8
 8007e88:	08012300 	.word	0x08012300
 8007e8c:	08012324 	.word	0x08012324
 8007e90:	08012348 	.word	0x08012348
 8007e94:	fffffe18 	.word	0xfffffe18
 8007e98:	08012360 	.word	0x08012360

08007e9c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8007e9c:	b5b0      	push	{r4, r5, r7, lr}
 8007e9e:	b0e4      	sub	sp, #400	; 0x190
 8007ea0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ea2:	24c8      	movs	r4, #200	; 0xc8
 8007ea4:	193b      	adds	r3, r7, r4
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	23c6      	movs	r3, #198	; 0xc6
 8007eaa:	001a      	movs	r2, r3
 8007eac:	2100      	movs	r1, #0
 8007eae:	f002 fe85 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007eb2:	4b16      	ldr	r3, [pc, #88]	; (8007f0c <astronode_send_cmd_cr+0x70>)
 8007eb4:	25c8      	movs	r5, #200	; 0xc8
 8007eb6:	006d      	lsls	r5, r5, #1
 8007eb8:	195b      	adds	r3, r3, r5
 8007eba:	19db      	adds	r3, r3, r7
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	23c6      	movs	r3, #198	; 0xc6
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	f002 fe7a 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007ec8:	193b      	adds	r3, r7, r4
 8007eca:	2248      	movs	r2, #72	; 0x48
 8007ecc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ece:	003a      	movs	r2, r7
 8007ed0:	193b      	adds	r3, r7, r4
 8007ed2:	0011      	movs	r1, r2
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 fc11 	bl	80086fc <astronode_transport_send_receive>
 8007eda:	0003      	movs	r3, r0
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d111      	bne.n	8007f04 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <astronode_send_cmd_cr+0x70>)
 8007ee2:	195b      	adds	r3, r3, r5
 8007ee4:	19db      	adds	r3, r3, r7
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2bc8      	cmp	r3, #200	; 0xc8
 8007eea:	d107      	bne.n	8007efc <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007eec:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <astronode_send_cmd_cr+0x74>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <astronode_send_cmd_cr+0x78>)
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f7fb f82b 	bl	8002f50 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007efa:	e003      	b.n	8007f04 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <astronode_send_cmd_cr+0x7c>)
 8007efe:	0018      	movs	r0, r3
 8007f00:	f7fb f826 	bl	8002f50 <send_debug_logs>
}
 8007f04:	46c0      	nop			; (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b064      	add	sp, #400	; 0x190
 8007f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f0c:	fffffe70 	.word	0xfffffe70
 8007f10:	20000be2 	.word	0x20000be2
 8007f14:	0801258c 	.word	0x0801258c
 8007f18:	080125b0 	.word	0x080125b0

08007f1c <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	4cac      	ldr	r4, [pc, #688]	; (80081d0 <astronode_send_cmd_rr+0x2b4>)
 8007f20:	44a5      	add	sp, r4
 8007f22:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f24:	218c      	movs	r1, #140	; 0x8c
 8007f26:	0049      	lsls	r1, r1, #1
 8007f28:	2318      	movs	r3, #24
 8007f2a:	18cb      	adds	r3, r1, r3
 8007f2c:	19db      	adds	r3, r3, r7
 8007f2e:	0018      	movs	r0, r3
 8007f30:	23c6      	movs	r3, #198	; 0xc6
 8007f32:	001a      	movs	r2, r3
 8007f34:	2100      	movs	r1, #0
 8007f36:	f002 fe41 	bl	800abbc <memset>
    astronode_app_msg_t answer = {0};
 8007f3a:	4ba6      	ldr	r3, [pc, #664]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007f3c:	26f8      	movs	r6, #248	; 0xf8
 8007f3e:	0076      	lsls	r6, r6, #1
 8007f40:	199b      	adds	r3, r3, r6
 8007f42:	2218      	movs	r2, #24
 8007f44:	4694      	mov	ip, r2
 8007f46:	44bc      	add	ip, r7
 8007f48:	4463      	add	r3, ip
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	23c6      	movs	r3, #198	; 0xc6
 8007f4e:	001a      	movs	r2, r3
 8007f50:	2100      	movs	r1, #0
 8007f52:	f002 fe33 	bl	800abbc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8007f56:	218c      	movs	r1, #140	; 0x8c
 8007f58:	0049      	lsls	r1, r1, #1
 8007f5a:	2318      	movs	r3, #24
 8007f5c:	18cb      	adds	r3, r1, r3
 8007f5e:	19db      	adds	r3, r3, r7
 8007f60:	2247      	movs	r2, #71	; 0x47
 8007f62:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f64:	2350      	movs	r3, #80	; 0x50
 8007f66:	2218      	movs	r2, #24
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	19da      	adds	r2, r3, r7
 8007f6c:	2318      	movs	r3, #24
 8007f6e:	18cb      	adds	r3, r1, r3
 8007f70:	19db      	adds	r3, r3, r7
 8007f72:	0011      	movs	r1, r2
 8007f74:	0018      	movs	r0, r3
 8007f76:	f000 fbc1 	bl	80086fc <astronode_transport_send_receive>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d000      	beq.n	8007f82 <astronode_send_cmd_rr+0x66>
 8007f80:	e121      	b.n	80081c6 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8007f82:	4b94      	ldr	r3, [pc, #592]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007f84:	199b      	adds	r3, r3, r6
 8007f86:	2218      	movs	r2, #24
 8007f88:	4694      	mov	ip, r2
 8007f8a:	44bc      	add	ip, r7
 8007f8c:	4463      	add	r3, ip
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2bc7      	cmp	r3, #199	; 0xc7
 8007f92:	d000      	beq.n	8007f96 <astronode_send_cmd_rr+0x7a>
 8007f94:	e113      	b.n	80081be <astronode_send_cmd_rr+0x2a2>
        {
 8007f96:	466b      	mov	r3, sp
 8007f98:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8007f9a:	4b8f      	ldr	r3, [pc, #572]	; (80081d8 <astronode_send_cmd_rr+0x2bc>)
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7fa ffd7 	bl	8002f50 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007fa2:	4b8c      	ldr	r3, [pc, #560]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007fa4:	21f8      	movs	r1, #248	; 0xf8
 8007fa6:	0049      	lsls	r1, r1, #1
 8007fa8:	185b      	adds	r3, r3, r1
 8007faa:	2218      	movs	r2, #24
 8007fac:	4694      	mov	ip, r2
 8007fae:	44bc      	add	ip, r7
 8007fb0:	4463      	add	r3, ip
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007fb6:	4b87      	ldr	r3, [pc, #540]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007fb8:	185b      	adds	r3, r3, r1
 8007fba:	2018      	movs	r0, #24
 8007fbc:	4684      	mov	ip, r0
 8007fbe:	44bc      	add	ip, r7
 8007fc0:	4463      	add	r3, ip
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007fc8:	4b82      	ldr	r3, [pc, #520]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007fca:	185b      	adds	r3, r3, r1
 8007fcc:	2018      	movs	r0, #24
 8007fce:	4684      	mov	ip, r0
 8007fd0:	44bc      	add	ip, r7
 8007fd2:	4463      	add	r3, ip
 8007fd4:	78db      	ldrb	r3, [r3, #3]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007fda:	4b7e      	ldr	r3, [pc, #504]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8007fdc:	185b      	adds	r3, r3, r1
 8007fde:	2118      	movs	r1, #24
 8007fe0:	468c      	mov	ip, r1
 8007fe2:	44bc      	add	ip, r7
 8007fe4:	4463      	add	r3, ip
 8007fe6:	791b      	ldrb	r3, [r3, #4]
 8007fe8:	061b      	lsls	r3, r3, #24
 8007fea:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007fec:	22f4      	movs	r2, #244	; 0xf4
 8007fee:	0052      	lsls	r2, r2, #1
 8007ff0:	2118      	movs	r1, #24
 8007ff2:	1851      	adds	r1, r2, r1
 8007ff4:	19c8      	adds	r0, r1, r7
 8007ff6:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007ff8:	2318      	movs	r3, #24
 8007ffa:	18d3      	adds	r3, r2, r3
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4976      	ldr	r1, [pc, #472]	; (80081dc <astronode_send_cmd_rr+0x2c0>)
 8008002:	2318      	movs	r3, #24
 8008004:	18fb      	adds	r3, r7, r3
 8008006:	0018      	movs	r0, r3
 8008008:	f002 fd42 	bl	800aa90 <sprintf>
            send_debug_logs(str);
 800800c:	2318      	movs	r3, #24
 800800e:	18fb      	adds	r3, r7, r3
 8008010:	0018      	movs	r0, r3
 8008012:	f7fa ff9d 	bl	8002f50 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008016:	4b6f      	ldr	r3, [pc, #444]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8008018:	21f8      	movs	r1, #248	; 0xf8
 800801a:	0049      	lsls	r1, r1, #1
 800801c:	185b      	adds	r3, r3, r1
 800801e:	2218      	movs	r2, #24
 8008020:	4694      	mov	ip, r2
 8008022:	44bc      	add	ip, r7
 8008024:	4463      	add	r3, ip
 8008026:	22c4      	movs	r2, #196	; 0xc4
 8008028:	5a9b      	ldrh	r3, [r3, r2]
 800802a:	2b2c      	cmp	r3, #44	; 0x2c
 800802c:	d00e      	beq.n	800804c <astronode_send_cmd_rr+0x130>
 800802e:	4b69      	ldr	r3, [pc, #420]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 8008030:	185b      	adds	r3, r3, r1
 8008032:	2218      	movs	r2, #24
 8008034:	4694      	mov	ip, r2
 8008036:	44bc      	add	ip, r7
 8008038:	4463      	add	r3, ip
 800803a:	22c4      	movs	r2, #196	; 0xc4
 800803c:	5a9b      	ldrh	r3, [r3, r2]
 800803e:	2b0c      	cmp	r3, #12
 8008040:	d004      	beq.n	800804c <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008042:	4b67      	ldr	r3, [pc, #412]	; (80081e0 <astronode_send_cmd_rr+0x2c4>)
 8008044:	0018      	movs	r0, r3
 8008046:	f7fa ff83 	bl	8002f50 <send_debug_logs>
                return;
 800804a:	e0b6      	b.n	80081ba <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 800804c:	4b61      	ldr	r3, [pc, #388]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 800804e:	22f8      	movs	r2, #248	; 0xf8
 8008050:	0052      	lsls	r2, r2, #1
 8008052:	189b      	adds	r3, r3, r2
 8008054:	2218      	movs	r2, #24
 8008056:	4694      	mov	ip, r2
 8008058:	44bc      	add	ip, r7
 800805a:	4463      	add	r3, ip
 800805c:	22c4      	movs	r2, #196	; 0xc4
 800805e:	5a9b      	ldrh	r3, [r3, r2]
 8008060:	001a      	movs	r2, r3
 8008062:	3a01      	subs	r2, #1
 8008064:	21f2      	movs	r1, #242	; 0xf2
 8008066:	0049      	lsls	r1, r1, #1
 8008068:	2018      	movs	r0, #24
 800806a:	1809      	adds	r1, r1, r0
 800806c:	19c9      	adds	r1, r1, r7
 800806e:	600a      	str	r2, [r1, #0]
 8008070:	001c      	movs	r4, r3
 8008072:	2200      	movs	r2, #0
 8008074:	0015      	movs	r5, r2
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	0004      	movs	r4, r0
 800807c:	0f62      	lsrs	r2, r4, #29
 800807e:	000c      	movs	r4, r1
 8008080:	00e4      	lsls	r4, r4, #3
 8008082:	617c      	str	r4, [r7, #20]
 8008084:	697c      	ldr	r4, [r7, #20]
 8008086:	4314      	orrs	r4, r2
 8008088:	617c      	str	r4, [r7, #20]
 800808a:	0001      	movs	r1, r0
 800808c:	00c9      	lsls	r1, r1, #3
 800808e:	6139      	str	r1, [r7, #16]
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	6838      	ldr	r0, [r7, #0]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	0004      	movs	r4, r0
 800809c:	0f62      	lsrs	r2, r4, #29
 800809e:	000c      	movs	r4, r1
 80080a0:	00e4      	lsls	r4, r4, #3
 80080a2:	60fc      	str	r4, [r7, #12]
 80080a4:	68fc      	ldr	r4, [r7, #12]
 80080a6:	4314      	orrs	r4, r2
 80080a8:	60fc      	str	r4, [r7, #12]
 80080aa:	0001      	movs	r1, r0
 80080ac:	00ca      	lsls	r2, r1, #3
 80080ae:	60ba      	str	r2, [r7, #8]
 80080b0:	3307      	adds	r3, #7
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	4669      	mov	r1, sp
 80080b8:	1acb      	subs	r3, r1, r3
 80080ba:	469d      	mov	sp, r3
 80080bc:	466b      	mov	r3, sp
 80080be:	3300      	adds	r3, #0
 80080c0:	20f0      	movs	r0, #240	; 0xf0
 80080c2:	0040      	lsls	r0, r0, #1
 80080c4:	2218      	movs	r2, #24
 80080c6:	1882      	adds	r2, r0, r2
 80080c8:	19d1      	adds	r1, r2, r7
 80080ca:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 80080cc:	4b41      	ldr	r3, [pc, #260]	; (80081d4 <astronode_send_cmd_rr+0x2b8>)
 80080ce:	22f8      	movs	r2, #248	; 0xf8
 80080d0:	0052      	lsls	r2, r2, #1
 80080d2:	189b      	adds	r3, r3, r2
 80080d4:	2218      	movs	r2, #24
 80080d6:	4694      	mov	ip, r2
 80080d8:	44bc      	add	ip, r7
 80080da:	4463      	add	r3, ip
 80080dc:	22c4      	movs	r2, #196	; 0xc4
 80080de:	5a9b      	ldrh	r3, [r3, r2]
 80080e0:	3b03      	subs	r3, #3
 80080e2:	0019      	movs	r1, r3
 80080e4:	2350      	movs	r3, #80	; 0x50
 80080e6:	2218      	movs	r2, #24
 80080e8:	189b      	adds	r3, r3, r2
 80080ea:	19db      	adds	r3, r3, r7
 80080ec:	3305      	adds	r3, #5
 80080ee:	4a3d      	ldr	r2, [pc, #244]	; (80081e4 <astronode_send_cmd_rr+0x2c8>)
 80080f0:	2418      	movs	r4, #24
 80080f2:	1900      	adds	r0, r0, r4
 80080f4:	19c0      	adds	r0, r0, r7
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	f002 fc96 	bl	800aa28 <snprintf>
 80080fc:	0002      	movs	r2, r0
 80080fe:	23ef      	movs	r3, #239	; 0xef
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	2118      	movs	r1, #24
 8008104:	185b      	adds	r3, r3, r1
 8008106:	19db      	adds	r3, r3, r7
 8008108:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 800810a:	23f0      	movs	r3, #240	; 0xf0
 800810c:	33ff      	adds	r3, #255	; 0xff
 800810e:	2218      	movs	r2, #24
 8008110:	189b      	adds	r3, r3, r2
 8008112:	19db      	adds	r3, r3, r7
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
 8008118:	e024      	b.n	8008164 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 800811a:	23f0      	movs	r3, #240	; 0xf0
 800811c:	33ff      	adds	r3, #255	; 0xff
 800811e:	2218      	movs	r2, #24
 8008120:	189b      	adds	r3, r3, r2
 8008122:	19db      	adds	r3, r3, r7
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	22f0      	movs	r2, #240	; 0xf0
 8008128:	0052      	lsls	r2, r2, #1
 800812a:	2118      	movs	r1, #24
 800812c:	1852      	adds	r2, r2, r1
 800812e:	19d2      	adds	r2, r2, r7
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	5cd3      	ldrb	r3, [r2, r3]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	4b2c      	ldr	r3, [pc, #176]	; (80081e8 <astronode_send_cmd_rr+0x2cc>)
 8008138:	18d3      	adds	r3, r2, r3
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	001a      	movs	r2, r3
 800813e:	2397      	movs	r3, #151	; 0x97
 8008140:	4013      	ands	r3, r2
 8008142:	d104      	bne.n	800814e <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008144:	4b29      	ldr	r3, [pc, #164]	; (80081ec <astronode_send_cmd_rr+0x2d0>)
 8008146:	0018      	movs	r0, r3
 8008148:	f7fa ff02 	bl	8002f50 <send_debug_logs>
                    return;
 800814c:	e035      	b.n	80081ba <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 800814e:	21f0      	movs	r1, #240	; 0xf0
 8008150:	31ff      	adds	r1, #255	; 0xff
 8008152:	2318      	movs	r3, #24
 8008154:	18cb      	adds	r3, r1, r3
 8008156:	19db      	adds	r3, r3, r7
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	2318      	movs	r3, #24
 800815c:	18cb      	adds	r3, r1, r3
 800815e:	19db      	adds	r3, r3, r7
 8008160:	3201      	adds	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	23f0      	movs	r3, #240	; 0xf0
 8008166:	33ff      	adds	r3, #255	; 0xff
 8008168:	2218      	movs	r2, #24
 800816a:	189b      	adds	r3, r3, r2
 800816c:	19db      	adds	r3, r3, r7
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	22ef      	movs	r2, #239	; 0xef
 8008174:	0052      	lsls	r2, r2, #1
 8008176:	2118      	movs	r1, #24
 8008178:	1852      	adds	r2, r2, r1
 800817a:	19d2      	adds	r2, r2, r7
 800817c:	8812      	ldrh	r2, [r2, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d8cb      	bhi.n	800811a <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008182:	4b1b      	ldr	r3, [pc, #108]	; (80081f0 <astronode_send_cmd_rr+0x2d4>)
 8008184:	0018      	movs	r0, r3
 8008186:	f7fa fee3 	bl	8002f50 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 800818a:	2350      	movs	r3, #80	; 0x50
 800818c:	2218      	movs	r2, #24
 800818e:	189b      	adds	r3, r3, r2
 8008190:	19db      	adds	r3, r3, r7
 8008192:	1d5a      	adds	r2, r3, #5
 8008194:	4917      	ldr	r1, [pc, #92]	; (80081f4 <astronode_send_cmd_rr+0x2d8>)
 8008196:	24f0      	movs	r4, #240	; 0xf0
 8008198:	0064      	lsls	r4, r4, #1
 800819a:	2318      	movs	r3, #24
 800819c:	18e3      	adds	r3, r4, r3
 800819e:	19db      	adds	r3, r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	0018      	movs	r0, r3
 80081a4:	f002 fc74 	bl	800aa90 <sprintf>
            send_debug_logs(command_content);
 80081a8:	2318      	movs	r3, #24
 80081aa:	18e3      	adds	r3, r4, r3
 80081ac:	19db      	adds	r3, r3, r7
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	0018      	movs	r0, r3
 80081b2:	f7fa fecd 	bl	8002f50 <send_debug_logs>
 80081b6:	46b5      	mov	sp, r6
 80081b8:	e005      	b.n	80081c6 <astronode_send_cmd_rr+0x2aa>
                return;
 80081ba:	46b5      	mov	sp, r6
 80081bc:	e003      	b.n	80081c6 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 80081be:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <astronode_send_cmd_rr+0x2dc>)
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7fa fec5 	bl	8002f50 <send_debug_logs>
        }
    }
}
 80081c6:	46bd      	mov	sp, r7
 80081c8:	2383      	movs	r3, #131	; 0x83
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	449d      	add	sp, r3
 80081ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d0:	fffffdf4 	.word	0xfffffdf4
 80081d4:	fffffe60 	.word	0xfffffe60
 80081d8:	080125c8 	.word	0x080125c8
 80081dc:	080125e4 	.word	0x080125e4
 80081e0:	08012634 	.word	0x08012634
 80081e4:	08011d18 	.word	0x08011d18
 80081e8:	08012f80 	.word	0x08012f80
 80081ec:	08012648 	.word	0x08012648
 80081f0:	08012674 	.word	0x08012674
 80081f4:	0801268c 	.word	0x0801268c
 80081f8:	08012690 	.word	0x08012690

080081fc <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <is_sak_available+0x10>)
 8008202:	781b      	ldrb	r3, [r3, #0]
}
 8008204:	0018      	movs	r0, r3
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	20000be0 	.word	0x20000be0

08008210 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <is_astronode_reset+0x10>)
 8008216:	781b      	ldrb	r3, [r3, #0]
}
 8008218:	0018      	movs	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	20000be1 	.word	0x20000be1

08008224 <is_command_available>:

bool is_command_available()
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008228:	4b02      	ldr	r3, [pc, #8]	; (8008234 <is_command_available+0x10>)
 800822a:	781b      	ldrb	r3, [r3, #0]
}
 800822c:	0018      	movs	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	20000be2 	.word	0x20000be2

08008238 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	0002      	movs	r2, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	1dfb      	adds	r3, r7, #7
 8008244:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008246:	1dfb      	adds	r3, r7, #7
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b2f      	cmp	r3, #47	; 0x2f
 800824c:	d90b      	bls.n	8008266 <ascii_to_value+0x2e>
 800824e:	1dfb      	adds	r3, r7, #7
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b39      	cmp	r3, #57	; 0x39
 8008254:	d807      	bhi.n	8008266 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008256:	1dfb      	adds	r3, r7, #7
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	3b30      	subs	r3, #48	; 0x30
 800825c:	b2da      	uxtb	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	701a      	strb	r2, [r3, #0]
        return true;
 8008262:	2301      	movs	r3, #1
 8008264:	e010      	b.n	8008288 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008266:	1dfb      	adds	r3, r7, #7
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b40      	cmp	r3, #64	; 0x40
 800826c:	d90b      	bls.n	8008286 <ascii_to_value+0x4e>
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b46      	cmp	r3, #70	; 0x46
 8008274:	d807      	bhi.n	8008286 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	3b37      	subs	r3, #55	; 0x37
 800827c:	b2da      	uxtb	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	701a      	strb	r2, [r3, #0]
        return true;
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008286:	2300      	movs	r3, #0
    }
}
 8008288:	0018      	movs	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800829a:	250e      	movs	r5, #14
 800829c:	197b      	adds	r3, r7, r5
 800829e:	2200      	movs	r2, #0
 80082a0:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80082a2:	197b      	adds	r3, r7, r5
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	197a      	adds	r2, r7, r5
 80082a8:	1c59      	adds	r1, r3, #1
 80082aa:	8011      	strh	r1, [r2, #0]
 80082ac:	001a      	movs	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	189b      	adds	r3, r3, r2
 80082b2:	2202      	movs	r2, #2
 80082b4:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	260a      	movs	r6, #10
 80082ba:	19bc      	adds	r4, r7, r6
 80082bc:	4a44      	ldr	r2, [pc, #272]	; (80083d0 <astronode_create_request_transport+0x140>)
 80082be:	2101      	movs	r1, #1
 80082c0:	0018      	movs	r0, r3
 80082c2:	f000 fa7d 	bl	80087c0 <calculate_crc>
 80082c6:	0003      	movs	r3, r0
 80082c8:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	1c58      	adds	r0, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	22c4      	movs	r2, #196	; 0xc4
 80082d2:	5a99      	ldrh	r1, [r3, r2]
 80082d4:	19bc      	adds	r4, r7, r6
 80082d6:	19bb      	adds	r3, r7, r6
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	001a      	movs	r2, r3
 80082dc:	f000 fa70 	bl	80087c0 <calculate_crc>
 80082e0:	0003      	movs	r3, r0
 80082e2:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80082e4:	19bb      	adds	r3, r7, r6
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	b21a      	sxth	r2, r3
 80082ec:	0031      	movs	r1, r6
 80082ee:	19bb      	adds	r3, r7, r6
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	b21b      	sxth	r3, r3
 80082f8:	4313      	orrs	r3, r2
 80082fa:	b21a      	sxth	r2, r3
 80082fc:	187b      	adds	r3, r7, r1
 80082fe:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	7818      	ldrb	r0, [r3, #0]
 8008304:	197b      	adds	r3, r7, r5
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	18d3      	adds	r3, r2, r3
 800830c:	0019      	movs	r1, r3
 800830e:	f000 fbeb 	bl	8008ae8 <uint8_to_ascii_buffer>
    index += 2;
 8008312:	197b      	adds	r3, r7, r5
 8008314:	197a      	adds	r2, r7, r5
 8008316:	8812      	ldrh	r2, [r2, #0]
 8008318:	3202      	adds	r2, #2
 800831a:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 800831c:	230c      	movs	r3, #12
 800831e:	18fb      	adds	r3, r7, r3
 8008320:	2200      	movs	r2, #0
 8008322:	801a      	strh	r2, [r3, #0]
 8008324:	e017      	b.n	8008356 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008326:	240c      	movs	r4, #12
 8008328:	193b      	adds	r3, r7, r4
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	18d3      	adds	r3, r2, r3
 8008330:	7858      	ldrb	r0, [r3, #1]
 8008332:	250e      	movs	r5, #14
 8008334:	197b      	adds	r3, r7, r5
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	18d3      	adds	r3, r2, r3
 800833c:	0019      	movs	r1, r3
 800833e:	f000 fbd3 	bl	8008ae8 <uint8_to_ascii_buffer>
        index += 2;
 8008342:	197b      	adds	r3, r7, r5
 8008344:	197a      	adds	r2, r7, r5
 8008346:	8812      	ldrh	r2, [r2, #0]
 8008348:	3202      	adds	r2, #2
 800834a:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 800834c:	193b      	adds	r3, r7, r4
 800834e:	881a      	ldrh	r2, [r3, #0]
 8008350:	193b      	adds	r3, r7, r4
 8008352:	3201      	adds	r2, #1
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	22c4      	movs	r2, #196	; 0xc4
 800835a:	5a9b      	ldrh	r3, [r3, r2]
 800835c:	220c      	movs	r2, #12
 800835e:	18ba      	adds	r2, r7, r2
 8008360:	8812      	ldrh	r2, [r2, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d3df      	bcc.n	8008326 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008366:	250a      	movs	r5, #10
 8008368:	197b      	adds	r3, r7, r5
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	b2d8      	uxtb	r0, r3
 8008372:	240e      	movs	r4, #14
 8008374:	193b      	adds	r3, r7, r4
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	18d3      	adds	r3, r2, r3
 800837c:	0019      	movs	r1, r3
 800837e:	f000 fbb3 	bl	8008ae8 <uint8_to_ascii_buffer>
    index += 2;
 8008382:	0021      	movs	r1, r4
 8008384:	187b      	adds	r3, r7, r1
 8008386:	187a      	adds	r2, r7, r1
 8008388:	8812      	ldrh	r2, [r2, #0]
 800838a:	3202      	adds	r2, #2
 800838c:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800838e:	197b      	adds	r3, r7, r5
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b2d8      	uxtb	r0, r3
 8008394:	000c      	movs	r4, r1
 8008396:	187b      	adds	r3, r7, r1
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	18d3      	adds	r3, r2, r3
 800839e:	0019      	movs	r1, r3
 80083a0:	f000 fba2 	bl	8008ae8 <uint8_to_ascii_buffer>
    index += 2;
 80083a4:	0020      	movs	r0, r4
 80083a6:	183b      	adds	r3, r7, r0
 80083a8:	183a      	adds	r2, r7, r0
 80083aa:	8812      	ldrh	r2, [r2, #0]
 80083ac:	3202      	adds	r2, #2
 80083ae:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80083b0:	183b      	adds	r3, r7, r0
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	183a      	adds	r2, r7, r0
 80083b6:	1c59      	adds	r1, r3, #1
 80083b8:	8011      	strh	r1, [r2, #0]
 80083ba:	001a      	movs	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	2203      	movs	r2, #3
 80083c2:	701a      	strb	r2, [r3, #0]

    return index;
 80083c4:	183b      	adds	r3, r7, r0
 80083c6:	881b      	ldrh	r3, [r3, #0]
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b005      	add	sp, #20
 80083ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d0:	0000ffff 	.word	0x0000ffff

080083d4 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 80083d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083d6:	b089      	sub	sp, #36	; 0x24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	230a      	movs	r3, #10
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	1c0a      	adds	r2, r1, #0
 80083e4:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d005      	beq.n	80083fa <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80083ee:	4bbd      	ldr	r3, [pc, #756]	; (80086e4 <astronode_decode_answer_transport+0x310>)
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7fa fdad 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e170      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80083fa:	210a      	movs	r1, #10
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2201      	movs	r2, #1
 8008402:	4013      	ands	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d103      	bne.n	8008412 <astronode_decode_answer_transport+0x3e>
 800840a:	187b      	adds	r3, r7, r1
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	2b07      	cmp	r3, #7
 8008410:	d805      	bhi.n	800841e <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008412:	4bb5      	ldr	r3, [pc, #724]	; (80086e8 <astronode_decode_answer_transport+0x314>)
 8008414:	0018      	movs	r0, r3
 8008416:	f7fa fd9b 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 800841a:	2300      	movs	r3, #0
 800841c:	e15e      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800841e:	230a      	movs	r3, #10
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	3b08      	subs	r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	da00      	bge.n	800842c <astronode_decode_answer_transport+0x58>
 800842a:	3301      	adds	r3, #1
 800842c:	105b      	asrs	r3, r3, #1
 800842e:	b299      	uxth	r1, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	22c4      	movs	r2, #196	; 0xc4
 8008434:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008436:	230a      	movs	r3, #10
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	3b01      	subs	r3, #1
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	18d3      	adds	r3, r2, r3
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b03      	cmp	r3, #3
 8008446:	d005      	beq.n	8008454 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008448:	4ba8      	ldr	r3, [pc, #672]	; (80086ec <astronode_decode_answer_transport+0x318>)
 800844a:	0018      	movs	r0, r3
 800844c:	f7fa fd80 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 8008450:	2300      	movs	r3, #0
 8008452:	e143      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008454:	2117      	movs	r1, #23
 8008456:	187b      	adds	r3, r7, r1
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800845c:	2416      	movs	r4, #22
 800845e:	193b      	adds	r3, r7, r4
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	187a      	adds	r2, r7, r1
 800846c:	0011      	movs	r1, r2
 800846e:	0018      	movs	r0, r3
 8008470:	f7ff fee2 	bl	8008238 <ascii_to_value>
 8008474:	0003      	movs	r3, r0
 8008476:	001a      	movs	r2, r3
 8008478:	2301      	movs	r3, #1
 800847a:	4053      	eors	r3, r2
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10e      	bne.n	80084a0 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3302      	adds	r3, #2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	193a      	adds	r2, r7, r4
 800848a:	0011      	movs	r1, r2
 800848c:	0018      	movs	r0, r3
 800848e:	f7ff fed3 	bl	8008238 <ascii_to_value>
 8008492:	0003      	movs	r3, r0
 8008494:	001a      	movs	r2, r3
 8008496:	2301      	movs	r3, #1
 8008498:	4053      	eors	r3, r2
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80084a0:	4b93      	ldr	r3, [pc, #588]	; (80086f0 <astronode_decode_answer_transport+0x31c>)
 80084a2:	0018      	movs	r0, r3
 80084a4:	f7fa fd54 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e117      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80084ac:	2317      	movs	r3, #23
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	2316      	movs	r3, #22
 80084b8:	18fb      	adds	r3, r7, r3
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	18d3      	adds	r3, r2, r3
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80084c4:	231e      	movs	r3, #30
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	2203      	movs	r2, #3
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	231c      	movs	r3, #28
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	2200      	movs	r2, #0
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	e045      	b.n	8008562 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80084d6:	241e      	movs	r4, #30
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	18d3      	adds	r3, r2, r3
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2217      	movs	r2, #23
 80084e4:	18ba      	adds	r2, r7, r2
 80084e6:	0011      	movs	r1, r2
 80084e8:	0018      	movs	r0, r3
 80084ea:	f7ff fea5 	bl	8008238 <ascii_to_value>
 80084ee:	0003      	movs	r3, r0
 80084f0:	001a      	movs	r2, r3
 80084f2:	2301      	movs	r3, #1
 80084f4:	4053      	eors	r3, r2
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d112      	bne.n	8008522 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80084fc:	193b      	adds	r3, r7, r4
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	18d3      	adds	r3, r2, r3
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2216      	movs	r2, #22
 800850a:	18ba      	adds	r2, r7, r2
 800850c:	0011      	movs	r1, r2
 800850e:	0018      	movs	r0, r3
 8008510:	f7ff fe92 	bl	8008238 <ascii_to_value>
 8008514:	0003      	movs	r3, r0
 8008516:	001a      	movs	r2, r3
 8008518:	2301      	movs	r3, #1
 800851a:	4053      	eors	r3, r2
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008522:	4b73      	ldr	r3, [pc, #460]	; (80086f0 <astronode_decode_answer_transport+0x31c>)
 8008524:	0018      	movs	r0, r3
 8008526:	f7fa fd13 	bl	8002f50 <send_debug_logs>
            return RS_FAILURE;
 800852a:	2300      	movs	r3, #0
 800852c:	e0d6      	b.n	80086dc <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800852e:	2317      	movs	r3, #23
 8008530:	18fb      	adds	r3, r7, r3
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	b2d9      	uxtb	r1, r3
 8008538:	2316      	movs	r3, #22
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	201c      	movs	r0, #28
 8008540:	183b      	adds	r3, r7, r0
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	1838      	adds	r0, r7, r0
 8008546:	1c5c      	adds	r4, r3, #1
 8008548:	8004      	strh	r4, [r0, #0]
 800854a:	0018      	movs	r0, r3
 800854c:	188b      	adds	r3, r1, r2
 800854e:	b2da      	uxtb	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	181b      	adds	r3, r3, r0
 8008554:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008556:	221e      	movs	r2, #30
 8008558:	18bb      	adds	r3, r7, r2
 800855a:	18ba      	adds	r2, r7, r2
 800855c:	8812      	ldrh	r2, [r2, #0]
 800855e:	3202      	adds	r2, #2
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	231e      	movs	r3, #30
 8008564:	18fb      	adds	r3, r7, r3
 8008566:	881a      	ldrh	r2, [r3, #0]
 8008568:	260a      	movs	r6, #10
 800856a:	19bb      	adds	r3, r7, r6
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	3b05      	subs	r3, #5
 8008570:	429a      	cmp	r2, r3
 8008572:	dbb0      	blt.n	80084d6 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	251a      	movs	r5, #26
 8008578:	197c      	adds	r4, r7, r5
 800857a:	4a5e      	ldr	r2, [pc, #376]	; (80086f4 <astronode_decode_answer_transport+0x320>)
 800857c:	2101      	movs	r1, #1
 800857e:	0018      	movs	r0, r3
 8008580:	f000 f91e 	bl	80087c0 <calculate_crc>
 8008584:	0003      	movs	r3, r0
 8008586:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1c58      	adds	r0, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	22c4      	movs	r2, #196	; 0xc4
 8008590:	5a99      	ldrh	r1, [r3, r2]
 8008592:	197c      	adds	r4, r7, r5
 8008594:	197b      	adds	r3, r7, r5
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	001a      	movs	r2, r3
 800859a:	f000 f911 	bl	80087c0 <calculate_crc>
 800859e:	0003      	movs	r3, r0
 80085a0:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80085a2:	197b      	adds	r3, r7, r5
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	b21a      	sxth	r2, r3
 80085aa:	0029      	movs	r1, r5
 80085ac:	197b      	adds	r3, r7, r5
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	0a1b      	lsrs	r3, r3, #8
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	b21b      	sxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b21a      	sxth	r2, r3
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80085be:	19bb      	adds	r3, r7, r6
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	3b05      	subs	r3, #5
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2217      	movs	r2, #23
 80085cc:	18ba      	adds	r2, r7, r2
 80085ce:	0011      	movs	r1, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7ff fe31 	bl	8008238 <ascii_to_value>
 80085d6:	0003      	movs	r3, r0
 80085d8:	001a      	movs	r2, r3
 80085da:	2301      	movs	r3, #1
 80085dc:	4053      	eors	r3, r2
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d112      	bne.n	800860a <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80085e4:	19bb      	adds	r3, r7, r6
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	3b04      	subs	r3, #4
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	18d3      	adds	r3, r2, r3
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2216      	movs	r2, #22
 80085f2:	18ba      	adds	r2, r7, r2
 80085f4:	0011      	movs	r1, r2
 80085f6:	0018      	movs	r0, r3
 80085f8:	f7ff fe1e 	bl	8008238 <ascii_to_value>
 80085fc:	0003      	movs	r3, r0
 80085fe:	001a      	movs	r2, r3
 8008600:	2301      	movs	r3, #1
 8008602:	4053      	eors	r3, r2
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800860a:	4b39      	ldr	r3, [pc, #228]	; (80086f0 <astronode_decode_answer_transport+0x31c>)
 800860c:	0018      	movs	r0, r3
 800860e:	f7fa fc9f 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 8008612:	2300      	movs	r3, #0
 8008614:	e062      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008616:	2017      	movs	r0, #23
 8008618:	183b      	adds	r3, r7, r0
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	031b      	lsls	r3, r3, #12
 8008620:	b299      	uxth	r1, r3
 8008622:	2416      	movs	r4, #22
 8008624:	193b      	adds	r3, r7, r4
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	b29a      	uxth	r2, r3
 800862e:	2318      	movs	r3, #24
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	188a      	adds	r2, r1, r2
 8008634:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008636:	250a      	movs	r5, #10
 8008638:	197b      	adds	r3, r7, r5
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	3b03      	subs	r3, #3
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	18d3      	adds	r3, r2, r3
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	183a      	adds	r2, r7, r0
 8008646:	0011      	movs	r1, r2
 8008648:	0018      	movs	r0, r3
 800864a:	f7ff fdf5 	bl	8008238 <ascii_to_value>
 800864e:	0003      	movs	r3, r0
 8008650:	001a      	movs	r2, r3
 8008652:	2301      	movs	r3, #1
 8008654:	4053      	eors	r3, r2
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d111      	bne.n	8008680 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800865c:	197b      	adds	r3, r7, r5
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	3b02      	subs	r3, #2
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	18d3      	adds	r3, r2, r3
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	193a      	adds	r2, r7, r4
 800866a:	0011      	movs	r1, r2
 800866c:	0018      	movs	r0, r3
 800866e:	f7ff fde3 	bl	8008238 <ascii_to_value>
 8008672:	0003      	movs	r3, r0
 8008674:	001a      	movs	r2, r3
 8008676:	2301      	movs	r3, #1
 8008678:	4053      	eors	r3, r2
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008680:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <astronode_decode_answer_transport+0x31c>)
 8008682:	0018      	movs	r0, r3
 8008684:	f7fa fc64 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 8008688:	2300      	movs	r3, #0
 800868a:	e027      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800868c:	2317      	movs	r3, #23
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	b29a      	uxth	r2, r3
 8008698:	2316      	movs	r3, #22
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	18d3      	adds	r3, r2, r3
 80086a2:	b299      	uxth	r1, r3
 80086a4:	2018      	movs	r0, #24
 80086a6:	183b      	adds	r3, r7, r0
 80086a8:	183a      	adds	r2, r7, r0
 80086aa:	8812      	ldrh	r2, [r2, #0]
 80086ac:	188a      	adds	r2, r1, r2
 80086ae:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80086b0:	183a      	adds	r2, r7, r0
 80086b2:	231a      	movs	r3, #26
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d005      	beq.n	80086ca <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80086be:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <astronode_decode_answer_transport+0x324>)
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fa fc45 	bl	8002f50 <send_debug_logs>
        return RS_FAILURE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e008      	b.n	80086dc <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2bff      	cmp	r3, #255	; 0xff
 80086d0:	d103      	bne.n	80086da <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	0018      	movs	r0, r3
 80086d6:	f000 f8c3 	bl	8008860 <check_for_error>
    }

    return RS_SUCCESS;
 80086da:	2301      	movs	r3, #1
}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b009      	add	sp, #36	; 0x24
 80086e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e4:	08012720 	.word	0x08012720
 80086e8:	08012770 	.word	0x08012770
 80086ec:	080127c0 	.word	0x080127c0
 80086f0:	08012810 	.word	0x08012810
 80086f4:	0000ffff 	.word	0x0000ffff
 80086f8:	0801285c 	.word	0x0801285c

080086fc <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80086fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086fe:	4c2b      	ldr	r4, [pc, #172]	; (80087ac <astronode_transport_send_receive+0xb0>)
 8008700:	44a5      	add	sp, r4
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008708:	4b29      	ldr	r3, [pc, #164]	; (80087b0 <astronode_transport_send_receive+0xb4>)
 800870a:	25ca      	movs	r5, #202	; 0xca
 800870c:	00ad      	lsls	r5, r5, #2
 800870e:	195b      	adds	r3, r3, r5
 8008710:	19db      	adds	r3, r3, r7
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	3304      	adds	r3, #4
 8008718:	22c4      	movs	r2, #196	; 0xc4
 800871a:	0052      	lsls	r2, r2, #1
 800871c:	2100      	movs	r1, #0
 800871e:	0018      	movs	r0, r3
 8008720:	f002 fa4c 	bl	800abbc <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008724:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <astronode_transport_send_receive+0xb8>)
 8008726:	195b      	adds	r3, r3, r5
 8008728:	19db      	adds	r3, r3, r7
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	3304      	adds	r3, #4
 8008730:	22c4      	movs	r2, #196	; 0xc4
 8008732:	0052      	lsls	r2, r2, #1
 8008734:	2100      	movs	r1, #0
 8008736:	0018      	movs	r0, r3
 8008738:	f002 fa40 	bl	800abbc <memset>
    uint16_t answer_length =  0;
 800873c:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <astronode_transport_send_receive+0xbc>)
 800873e:	195b      	adds	r3, r3, r5
 8008740:	19db      	adds	r3, r3, r7
 8008742:	2200      	movs	r2, #0
 8008744:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008746:	4e1d      	ldr	r6, [pc, #116]	; (80087bc <astronode_transport_send_receive+0xc0>)
 8008748:	19bc      	adds	r4, r7, r6
 800874a:	23cc      	movs	r3, #204	; 0xcc
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	18fa      	adds	r2, r7, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	0011      	movs	r1, r2
 8008754:	0018      	movs	r0, r3
 8008756:	f7ff fd9b 	bl	8008290 <astronode_create_request_transport>
 800875a:	0003      	movs	r3, r0
 800875c:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800875e:	19bb      	adds	r3, r7, r6
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	23cc      	movs	r3, #204	; 0xcc
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	0011      	movs	r1, r2
 800876a:	0018      	movs	r0, r3
 800876c:	f7fa fc3a 	bl	8002fe4 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008770:	230a      	movs	r3, #10
 8008772:	18fa      	adds	r2, r7, r3
 8008774:	240c      	movs	r4, #12
 8008776:	193b      	adds	r3, r7, r4
 8008778:	0011      	movs	r1, r2
 800877a:	0018      	movs	r0, r3
 800877c:	f000 f92c 	bl	80089d8 <receive_astronode_answer>
 8008780:	0003      	movs	r3, r0
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10a      	bne.n	800879c <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <astronode_transport_send_receive+0xbc>)
 8008788:	195b      	adds	r3, r3, r5
 800878a:	19db      	adds	r3, r3, r7
 800878c:	8819      	ldrh	r1, [r3, #0]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	193b      	adds	r3, r7, r4
 8008792:	0018      	movs	r0, r3
 8008794:	f7ff fe1e 	bl	80083d4 <astronode_decode_answer_transport>
 8008798:	0003      	movs	r3, r0
 800879a:	e000      	b.n	800879e <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800879c:	2300      	movs	r3, #0
    }
}
 800879e:	0018      	movs	r0, r3
 80087a0:	46bd      	mov	sp, r7
 80087a2:	23cb      	movs	r3, #203	; 0xcb
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	449d      	add	sp, r3
 80087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	fffffcd4 	.word	0xfffffcd4
 80087b0:	fffffe70 	.word	0xfffffe70
 80087b4:	fffffce4 	.word	0xfffffce4
 80087b8:	fffffce2 	.word	0xfffffce2
 80087bc:	00000326 	.word	0x00000326

080087c0 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	0008      	movs	r0, r1
 80087ca:	0011      	movs	r1, r2
 80087cc:	1cbb      	adds	r3, r7, #2
 80087ce:	1c02      	adds	r2, r0, #0
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	003b      	movs	r3, r7
 80087d4:	1c0a      	adds	r2, r1, #0
 80087d6:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80087d8:	230e      	movs	r3, #14
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	003a      	movs	r2, r7
 80087de:	8812      	ldrh	r2, [r2, #0]
 80087e0:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80087e2:	e02e      	b.n	8008842 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80087e4:	240e      	movs	r4, #14
 80087e6:	193b      	adds	r3, r7, r4
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	b299      	uxth	r1, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	200c      	movs	r0, #12
 80087fa:	183b      	adds	r3, r7, r0
 80087fc:	404a      	eors	r2, r1
 80087fe:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008800:	183b      	adds	r3, r7, r0
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	b299      	uxth	r1, r3
 8008808:	183b      	adds	r3, r7, r0
 800880a:	183a      	adds	r2, r7, r0
 800880c:	8812      	ldrh	r2, [r2, #0]
 800880e:	404a      	eors	r2, r1
 8008810:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008812:	0021      	movs	r1, r4
 8008814:	187b      	adds	r3, r7, r1
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b21a      	sxth	r2, r3
 800881c:	183b      	adds	r3, r7, r0
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	031b      	lsls	r3, r3, #12
 8008822:	b21b      	sxth	r3, r3
 8008824:	4053      	eors	r3, r2
 8008826:	b21a      	sxth	r2, r3
 8008828:	183b      	adds	r3, r7, r0
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	015b      	lsls	r3, r3, #5
 800882e:	b21b      	sxth	r3, r3
 8008830:	4053      	eors	r3, r2
 8008832:	b21a      	sxth	r2, r3
 8008834:	183b      	adds	r3, r7, r0
 8008836:	2000      	movs	r0, #0
 8008838:	5e1b      	ldrsh	r3, [r3, r0]
 800883a:	4053      	eors	r3, r2
 800883c:	b21a      	sxth	r2, r3
 800883e:	187b      	adds	r3, r7, r1
 8008840:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008842:	1cbb      	adds	r3, r7, #2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	1cba      	adds	r2, r7, #2
 8008848:	1e59      	subs	r1, r3, #1
 800884a:	8011      	strh	r1, [r2, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1c9      	bne.n	80087e4 <calculate_crc+0x24>
    }
    return crc;
 8008850:	230e      	movs	r3, #14
 8008852:	18fb      	adds	r3, r7, r3
 8008854:	881b      	ldrh	r3, [r3, #0]
}
 8008856:	0018      	movs	r0, r3
 8008858:	46bd      	mov	sp, r7
 800885a:	b005      	add	sp, #20
 800885c:	bd90      	pop	{r4, r7, pc}
	...

08008860 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	b299      	uxth	r1, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	789b      	ldrb	r3, [r3, #2]
 8008872:	b29b      	uxth	r3, r3
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	b29a      	uxth	r2, r3
 8008878:	200e      	movs	r0, #14
 800887a:	183b      	adds	r3, r7, r0
 800887c:	188a      	adds	r2, r1, r2
 800887e:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008880:	183b      	adds	r3, r7, r0
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	4a40      	ldr	r2, [pc, #256]	; (8008988 <check_for_error+0x128>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d100      	bne.n	800888c <check_for_error+0x2c>
 800888a:	e06f      	b.n	800896c <check_for_error+0x10c>
 800888c:	4a3e      	ldr	r2, [pc, #248]	; (8008988 <check_for_error+0x128>)
 800888e:	4293      	cmp	r3, r2
 8008890:	dd00      	ble.n	8008894 <check_for_error+0x34>
 8008892:	e070      	b.n	8008976 <check_for_error+0x116>
 8008894:	4a3d      	ldr	r2, [pc, #244]	; (800898c <check_for_error+0x12c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d100      	bne.n	800889c <check_for_error+0x3c>
 800889a:	e062      	b.n	8008962 <check_for_error+0x102>
 800889c:	4a3b      	ldr	r2, [pc, #236]	; (800898c <check_for_error+0x12c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	dd00      	ble.n	80088a4 <check_for_error+0x44>
 80088a2:	e068      	b.n	8008976 <check_for_error+0x116>
 80088a4:	4a3a      	ldr	r2, [pc, #232]	; (8008990 <check_for_error+0x130>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d056      	beq.n	8008958 <check_for_error+0xf8>
 80088aa:	4a39      	ldr	r2, [pc, #228]	; (8008990 <check_for_error+0x130>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	dd00      	ble.n	80088b2 <check_for_error+0x52>
 80088b0:	e061      	b.n	8008976 <check_for_error+0x116>
 80088b2:	4a38      	ldr	r2, [pc, #224]	; (8008994 <check_for_error+0x134>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d04a      	beq.n	800894e <check_for_error+0xee>
 80088b8:	4a36      	ldr	r2, [pc, #216]	; (8008994 <check_for_error+0x134>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	dc5b      	bgt.n	8008976 <check_for_error+0x116>
 80088be:	4a36      	ldr	r2, [pc, #216]	; (8008998 <check_for_error+0x138>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d03f      	beq.n	8008944 <check_for_error+0xe4>
 80088c4:	4a34      	ldr	r2, [pc, #208]	; (8008998 <check_for_error+0x138>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dc55      	bgt.n	8008976 <check_for_error+0x116>
 80088ca:	4a34      	ldr	r2, [pc, #208]	; (800899c <check_for_error+0x13c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d034      	beq.n	800893a <check_for_error+0xda>
 80088d0:	4a32      	ldr	r2, [pc, #200]	; (800899c <check_for_error+0x13c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	dc4f      	bgt.n	8008976 <check_for_error+0x116>
 80088d6:	4a32      	ldr	r2, [pc, #200]	; (80089a0 <check_for_error+0x140>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d029      	beq.n	8008930 <check_for_error+0xd0>
 80088dc:	4a30      	ldr	r2, [pc, #192]	; (80089a0 <check_for_error+0x140>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	dc49      	bgt.n	8008976 <check_for_error+0x116>
 80088e2:	4a30      	ldr	r2, [pc, #192]	; (80089a4 <check_for_error+0x144>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d01e      	beq.n	8008926 <check_for_error+0xc6>
 80088e8:	4a2e      	ldr	r2, [pc, #184]	; (80089a4 <check_for_error+0x144>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	dc43      	bgt.n	8008976 <check_for_error+0x116>
 80088ee:	2222      	movs	r2, #34	; 0x22
 80088f0:	32ff      	adds	r2, #255	; 0xff
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d012      	beq.n	800891c <check_for_error+0xbc>
 80088f6:	2291      	movs	r2, #145	; 0x91
 80088f8:	0052      	lsls	r2, r2, #1
 80088fa:	4293      	cmp	r3, r2
 80088fc:	da3b      	bge.n	8008976 <check_for_error+0x116>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d002      	beq.n	8008908 <check_for_error+0xa8>
 8008902:	2b11      	cmp	r3, #17
 8008904:	d005      	beq.n	8008912 <check_for_error+0xb2>
 8008906:	e036      	b.n	8008976 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008908:	4b27      	ldr	r3, [pc, #156]	; (80089a8 <check_for_error+0x148>)
 800890a:	0018      	movs	r0, r3
 800890c:	f7fa fb20 	bl	8002f50 <send_debug_logs>
            break;
 8008910:	e036      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8008912:	4b26      	ldr	r3, [pc, #152]	; (80089ac <check_for_error+0x14c>)
 8008914:	0018      	movs	r0, r3
 8008916:	f7fa fb1b 	bl	8002f50 <send_debug_logs>
            break;
 800891a:	e031      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800891c:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <check_for_error+0x150>)
 800891e:	0018      	movs	r0, r3
 8008920:	f7fa fb16 	bl	8002f50 <send_debug_logs>
            break;
 8008924:	e02c      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008926:	4b23      	ldr	r3, [pc, #140]	; (80089b4 <check_for_error+0x154>)
 8008928:	0018      	movs	r0, r3
 800892a:	f7fa fb11 	bl	8002f50 <send_debug_logs>
            break;
 800892e:	e027      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8008930:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <check_for_error+0x158>)
 8008932:	0018      	movs	r0, r3
 8008934:	f7fa fb0c 	bl	8002f50 <send_debug_logs>
            break;
 8008938:	e022      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800893a:	4b20      	ldr	r3, [pc, #128]	; (80089bc <check_for_error+0x15c>)
 800893c:	0018      	movs	r0, r3
 800893e:	f7fa fb07 	bl	8002f50 <send_debug_logs>
            break;
 8008942:	e01d      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008944:	4b1e      	ldr	r3, [pc, #120]	; (80089c0 <check_for_error+0x160>)
 8008946:	0018      	movs	r0, r3
 8008948:	f7fa fb02 	bl	8002f50 <send_debug_logs>
            break;
 800894c:	e018      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <check_for_error+0x164>)
 8008950:	0018      	movs	r0, r3
 8008952:	f7fa fafd 	bl	8002f50 <send_debug_logs>
            break;
 8008956:	e013      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008958:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <check_for_error+0x168>)
 800895a:	0018      	movs	r0, r3
 800895c:	f7fa faf8 	bl	8002f50 <send_debug_logs>
            break;
 8008960:	e00e      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <check_for_error+0x16c>)
 8008964:	0018      	movs	r0, r3
 8008966:	f7fa faf3 	bl	8002f50 <send_debug_logs>
            break;
 800896a:	e009      	b.n	8008980 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800896c:	4b18      	ldr	r3, [pc, #96]	; (80089d0 <check_for_error+0x170>)
 800896e:	0018      	movs	r0, r3
 8008970:	f7fa faee 	bl	8002f50 <send_debug_logs>
            break;
 8008974:	e004      	b.n	8008980 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8008976:	4b17      	ldr	r3, [pc, #92]	; (80089d4 <check_for_error+0x174>)
 8008978:	0018      	movs	r0, r3
 800897a:	f7fa fae9 	bl	8002f50 <send_debug_logs>
            break;
 800897e:	46c0      	nop			; (mov r8, r8)
    }
}
 8008980:	46c0      	nop			; (mov r8, r8)
 8008982:	46bd      	mov	sp, r7
 8008984:	b004      	add	sp, #16
 8008986:	bd80      	pop	{r7, pc}
 8008988:	00004601 	.word	0x00004601
 800898c:	00004501 	.word	0x00004501
 8008990:	00003501 	.word	0x00003501
 8008994:	00002601 	.word	0x00002601
 8008998:	00002511 	.word	0x00002511
 800899c:	00002501 	.word	0x00002501
 80089a0:	00000611 	.word	0x00000611
 80089a4:	00000601 	.word	0x00000601
 80089a8:	080128a0 	.word	0x080128a0
 80089ac:	080128ec 	.word	0x080128ec
 80089b0:	08012950 	.word	0x08012950
 80089b4:	08012988 	.word	0x08012988
 80089b8:	08012a2c 	.word	0x08012a2c
 80089bc:	08012a94 	.word	0x08012a94
 80089c0:	08012af4 	.word	0x08012af4
 80089c4:	08012b80 	.word	0x08012b80
 80089c8:	08012be0 	.word	0x08012be0
 80089cc:	08012c8c 	.word	0x08012c8c
 80089d0:	08012cd8 	.word	0x08012cd8
 80089d4:	08012d20 	.word	0x08012d20

080089d8 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80089d8:	b5b0      	push	{r4, r5, r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80089e2:	230f      	movs	r3, #15
 80089e4:	18fb      	adds	r3, r7, r3
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80089ea:	2316      	movs	r3, #22
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	2200      	movs	r2, #0
 80089f0:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80089f2:	f7fa fb3b 	bl	800306c <get_systick>
 80089f6:	0003      	movs	r3, r0
 80089f8:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80089fa:	2315      	movs	r3, #21
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8008a02:	e054      	b.n	8008aae <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8008a04:	4a34      	ldr	r2, [pc, #208]	; (8008ad8 <receive_astronode_answer+0x100>)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	0011      	movs	r1, r2
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f7fa fb36 	bl	800307c <is_systick_timeout_over>
 8008a10:	1e03      	subs	r3, r0, #0
 8008a12:	d005      	beq.n	8008a20 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8008a14:	4b31      	ldr	r3, [pc, #196]	; (8008adc <receive_astronode_answer+0x104>)
 8008a16:	0018      	movs	r0, r3
 8008a18:	f7fa fa9a 	bl	8002f50 <send_debug_logs>
            return RS_FAILURE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e057      	b.n	8008ad0 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8008a20:	250f      	movs	r5, #15
 8008a22:	197b      	adds	r3, r7, r5
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fa fafb 	bl	8003020 <is_astronode_character_received>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	0019      	movs	r1, r3
 8008a2e:	2016      	movs	r0, #22
 8008a30:	183b      	adds	r3, r7, r0
 8008a32:	183a      	adds	r2, r7, r0
 8008a34:	8812      	ldrh	r2, [r2, #0]
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	2415      	movs	r4, #21
 8008a3a:	193b      	adds	r3, r7, r4
 8008a3c:	193a      	adds	r2, r7, r4
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d033      	beq.n	8008aae <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8008a46:	197b      	adds	r3, r7, r5
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d105      	bne.n	8008a5a <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8008a4e:	193b      	adds	r3, r7, r4
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
                length = 0;
 8008a54:	183b      	adds	r3, r7, r0
 8008a56:	2200      	movs	r2, #0
 8008a58:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8008a5a:	2116      	movs	r1, #22
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	220f      	movs	r2, #15
 8008a66:	18ba      	adds	r2, r7, r2
 8008a68:	7812      	ldrb	r2, [r2, #0]
 8008a6a:	701a      	strb	r2, [r3, #0]
            length++;
 8008a6c:	187b      	adds	r3, r7, r1
 8008a6e:	881a      	ldrh	r2, [r3, #0]
 8008a70:	187b      	adds	r3, r7, r1
 8008a72:	3201      	adds	r2, #1
 8008a74:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2bb2      	cmp	r3, #178	; 0xb2
 8008a7c:	d905      	bls.n	8008a8a <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <receive_astronode_answer+0x108>)
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7fa fa65 	bl	8002f50 <send_debug_logs>
                return RS_FAILURE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e022      	b.n	8008ad0 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008a8a:	230f      	movs	r3, #15
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d10c      	bne.n	8008aae <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8008a94:	2216      	movs	r2, #22
 8008a96:	18bb      	adds	r3, r7, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d907      	bls.n	8008aae <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	18ba      	adds	r2, r7, r2
 8008aa2:	8812      	ldrh	r2, [r2, #0]
 8008aa4:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8008aa6:	2315      	movs	r3, #21
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	2201      	movs	r2, #1
 8008aac:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008aae:	2315      	movs	r3, #21
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4053      	eors	r3, r2
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1a2      	bne.n	8008a04 <receive_astronode_answer+0x2c>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <receive_astronode_answer+0x10c>)
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7fa fa45 	bl	8002f50 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7fa fa41 	bl	8002f50 <send_debug_logs>

    return RS_SUCCESS;
 8008ace:	2301      	movs	r3, #1
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b006      	add	sp, #24
 8008ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad8:	000005dc 	.word	0x000005dc
 8008adc:	08012d44 	.word	0x08012d44
 8008ae0:	08012d68 	.word	0x08012d68
 8008ae4:	08012db4 	.word	0x08012db4

08008ae8 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	0002      	movs	r2, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	1dfb      	adds	r3, r7, #7
 8008af4:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8008af6:	1dfb      	adds	r3, r7, #7
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	091b      	lsrs	r3, r3, #4
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	001a      	movs	r2, r3
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <uint8_to_ascii_buffer+0x3c>)
 8008b02:	5c9a      	ldrb	r2, [r3, r2]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008b08:	1dfb      	adds	r3, r7, #7
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	220f      	movs	r2, #15
 8008b0e:	401a      	ands	r2, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	4903      	ldr	r1, [pc, #12]	; (8008b24 <uint8_to_ascii_buffer+0x3c>)
 8008b16:	5c8a      	ldrb	r2, [r1, r2]
 8008b18:	701a      	strb	r2, [r3, #0]
}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	08012f18 	.word	0x08012f18

08008b28 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8008b30:	2508      	movs	r5, #8
 8008b32:	197b      	adds	r3, r7, r5
 8008b34:	1cda      	adds	r2, r3, #3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0011      	movs	r1, r2
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f000 fc1a 	bl	8009374 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8008b40:	197b      	adds	r3, r7, r5
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 fc4d 	bl	80093e8 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8008b4e:	197b      	adds	r3, r7, r5
 8008b50:	1c9a      	adds	r2, r3, #2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fc80 	bl	800945c <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8008b5c:	240c      	movs	r4, #12
 8008b5e:	193a      	adds	r2, r7, r4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	0011      	movs	r1, r2
 8008b64:	0018      	movs	r0, r3
 8008b66:	f000 fcb3 	bl	80094d0 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8008b6a:	193b      	adds	r3, r7, r4
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 fce6 	bl	8009544 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8008b78:	193b      	adds	r3, r7, r4
 8008b7a:	1c9a      	adds	r2, r3, #2
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	0011      	movs	r1, r2
 8008b80:	0018      	movs	r0, r3
 8008b82:	f000 fd19 	bl	80095b8 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8008b86:	193b      	adds	r3, r7, r4
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0011      	movs	r1, r2
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f000 fd4c 	bl	800962c <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008b94:	193b      	adds	r3, r7, r4
 8008b96:	2200      	movs	r2, #0
 8008b98:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008b9a:	193b      	adds	r3, r7, r4
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7fc fe91 	bl	80058ca <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8008ba8:	1939      	adds	r1, r7, r4
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7fc fa8e 	bl	80050d0 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8008bb4:	1979      	adds	r1, r7, r5
 8008bb6:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7fc fb8c 	bl	80052d8 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8008bc0:	4b03      	ldr	r3, [pc, #12]	; (8008bd0 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7fc feb5 	bl	8005932 <HAL_RTCEx_DisableBypassShadow>
}
 8008bc8:	46c0      	nop			; (mov r8, r8)
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	b008      	add	sp, #32
 8008bce:	bdb0      	pop	{r4, r5, r7, pc}
 8008bd0:	20000758 	.word	0x20000758

08008bd4 <get_my_rtc_time>:
void get_my_rtc_time ( char* dt )
{
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	b08d      	sub	sp, #52	; 0x34
 8008bd8:	af04      	add	r7, sp, #16
 8008bda:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8008bdc:	2508      	movs	r5, #8
 8008bde:	1979      	adds	r1, r7, r5
 8008be0:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <get_my_rtc_time+0x68>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	0018      	movs	r0, r3
 8008be6:	f7fc fb1b 	bl	8005220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8008bea:	241c      	movs	r4, #28
 8008bec:	1939      	adds	r1, r7, r4
 8008bee:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <get_my_rtc_time+0x68>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7fc fc02 	bl	80053fc <HAL_RTC_GetDate>

	sprintf ( dt , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8008bf8:	0021      	movs	r1, r4
 8008bfa:	187b      	adds	r3, r7, r1
 8008bfc:	78db      	ldrb	r3, [r3, #3]
 8008bfe:	22fa      	movs	r2, #250	; 0xfa
 8008c00:	00d2      	lsls	r2, r2, #3
 8008c02:	189a      	adds	r2, r3, r2
 8008c04:	187b      	adds	r3, r7, r1
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	469c      	mov	ip, r3
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	789b      	ldrb	r3, [r3, #2]
 8008c0e:	001c      	movs	r4, r3
 8008c10:	0029      	movs	r1, r5
 8008c12:	187b      	adds	r3, r7, r1
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	001d      	movs	r5, r3
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	001e      	movs	r6, r3
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	789b      	ldrb	r3, [r3, #2]
 8008c22:	4907      	ldr	r1, [pc, #28]	; (8008c40 <get_my_rtc_time+0x6c>)
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	9602      	str	r6, [sp, #8]
 8008c2a:	9501      	str	r5, [sp, #4]
 8008c2c:	9400      	str	r4, [sp, #0]
 8008c2e:	4663      	mov	r3, ip
 8008c30:	f001 ff2e 	bl	800aa90 <sprintf>
}
 8008c34:	46c0      	nop			; (mov r8, r8)
 8008c36:	46bd      	mov	sp, r7
 8008c38:	b009      	add	sp, #36	; 0x24
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	20000758 	.word	0x20000758
 8008c40:	08012de0 	.word	0x08012de0

08008c44 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2100      	movs	r1, #0
 8008c50:	0018      	movs	r0, r3
 8008c52:	f001 fd81 	bl	800a758 <strtod>
 8008c56:	0002      	movs	r2, r0
 8008c58:	000b      	movs	r3, r1
 8008c5a:	60ba      	str	r2, [r7, #8]
 8008c5c:	60fb      	str	r3, [r7, #12]
    return d ;
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	68fb      	ldr	r3, [r7, #12]
}
 8008c62:	0010      	movs	r0, r2
 8008c64:	0019      	movs	r1, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b004      	add	sp, #16
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	0008      	movs	r0, r1
 8008c76:	0011      	movs	r1, r2
 8008c78:	1cfb      	adds	r3, r7, #3
 8008c7a:	1c02      	adds	r2, r0, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	1cbb      	adds	r3, r7, #2
 8008c80:	1c0a      	adds	r2, r1, #0
 8008c82:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8008c84:	230f      	movs	r3, #15
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8008c8c:	230e      	movs	r3, #14
 8008c8e:	18fb      	adds	r3, r7, r3
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8008c94:	e01c      	b.n	8008cd0 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8008c96:	230f      	movs	r3, #15
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	18d3      	adds	r3, r2, r3
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	1cfa      	adds	r2, r7, #3
 8008ca4:	7812      	ldrb	r2, [r2, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d105      	bne.n	8008cb6 <my_find_char_position+0x4a>
			p++ ;
 8008caa:	210e      	movs	r1, #14
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8008cb6:	230e      	movs	r3, #14
 8008cb8:	18fa      	adds	r2, r7, r3
 8008cba:	1cbb      	adds	r3, r7, #2
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d00e      	beq.n	8008ce2 <my_find_char_position+0x76>
			break ;
		i++ ;
 8008cc4:	210f      	movs	r1, #15
 8008cc6:	187b      	adds	r3, r7, r1
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	3201      	adds	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8008cd0:	230f      	movs	r3, #15
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1da      	bne.n	8008c96 <my_find_char_position+0x2a>
 8008ce0:	e000      	b.n	8008ce4 <my_find_char_position+0x78>
			break ;
 8008ce2:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8008ce4:	230f      	movs	r3, #15
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	781b      	ldrb	r3, [r3, #0]
}
 8008cea:	0018      	movs	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b004      	add	sp, #16
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b24      	cmp	r3, #36	; 0x24
 8008d04:	d117      	bne.n	8008d36 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	b2d1      	uxtb	r1, r2
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7011      	strb	r1, [r2, #0]
 8008d18:	001a      	movs	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	189b      	adds	r3, r3, r2
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	001a      	movs	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	189b      	adds	r3, r3, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e045      	b.n	8008dc2 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b1f      	cmp	r3, #31
 8008d3c:	d907      	bls.n	8008d4e <my_nmea_message+0x5c>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b7e      	cmp	r3, #126	; 0x7e
 8008d44:	d803      	bhi.n	8008d4e <my_nmea_message+0x5c>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <my_nmea_message+0x64>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b0d      	cmp	r3, #13
 8008d54:	d114      	bne.n	8008d80 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	b2d1      	uxtb	r1, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	7011      	strb	r1, [r2, #0]
 8008d62:	001a      	movs	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	001a      	movs	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e020      	b.n	8008dc2 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b0a      	cmp	r3, #10
 8008d86:	d11a      	bne.n	8008dbe <my_nmea_message+0xcc>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d916      	bls.n	8008dbe <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	001a      	movs	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	189b      	adds	r3, r3, r2
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b0d      	cmp	r3, #13
 8008daa:	d108      	bne.n	8008dbe <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	001a      	movs	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	189b      	adds	r3, r3, r2
 8008db6:	2200      	movs	r2, #0
 8008db8:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e001      	b.n	8008dc2 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	425b      	negs	r3, r3
}
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	b004      	add	sp, #16
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3309      	adds	r3, #9
 8008dd6:	781b      	ldrb	r3, [r3, #0]
}
 8008dd8:	0018      	movs	r0, r3
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	b002      	add	sp, #8
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8008de0:	b5b0      	push	{r4, r5, r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	220f      	movs	r2, #15
 8008dec:	212c      	movs	r1, #44	; 0x2c
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7ff ff3c 	bl	8008c6c <my_find_char_position>
 8008df4:	0003      	movs	r3, r0
 8008df6:	001a      	movs	r2, r3
 8008df8:	2517      	movs	r5, #23
 8008dfa:	197b      	adds	r3, r7, r5
 8008dfc:	3201      	adds	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2210      	movs	r2, #16
 8008e04:	212c      	movs	r1, #44	; 0x2c
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff ff30 	bl	8008c6c <my_find_char_position>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	0019      	movs	r1, r3
 8008e10:	2416      	movs	r4, #22
 8008e12:	193b      	adds	r3, r7, r4
 8008e14:	197a      	adds	r2, r7, r5
 8008e16:	7812      	ldrb	r2, [r2, #0]
 8008e18:	1a8a      	subs	r2, r1, r2
 8008e1a:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8008e1c:	193b      	adds	r3, r7, r4
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	3301      	adds	r3, #1
 8008e22:	0018      	movs	r0, r3
 8008e24:	f000 fc36 	bl	8009694 <malloc>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8008e2c:	197b      	adds	r3, r7, r5
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	18d1      	adds	r1, r2, r3
 8008e34:	193b      	adds	r3, r7, r4
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f001 fed7 	bl	800abee <strncpy>
	pdop_s[pdop_length] = '\0';
 8008e40:	193b      	adds	r3, r7, r4
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	18d3      	adds	r3, r2, r3
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f7ff fef8 	bl	8008c44 <my_string2double_conv>
 8008e54:	0002      	movs	r2, r0
 8008e56:	000b      	movs	r3, r1
 8008e58:	60ba      	str	r2, [r7, #8]
 8008e5a:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f000 fc22 	bl	80096a8 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	0010      	movs	r0, r2
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	b006      	add	sp, #24
 8008e70:	bdb0      	pop	{r4, r5, r7, pc}

08008e72 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8008e72:	b590      	push	{r4, r7, lr}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8008e7a:	230f      	movs	r3, #15
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	2200      	movs	r2, #0
 8008e80:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8008e82:	230e      	movs	r3, #14
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	2201      	movs	r2, #1
 8008e88:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008e8a:	e00f      	b.n	8008eac <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8008e8c:	220e      	movs	r2, #14
 8008e8e:	18bb      	adds	r3, r7, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	18ba      	adds	r2, r7, r2
 8008e94:	1c59      	adds	r1, r3, #1
 8008e96:	7011      	strb	r1, [r2, #0]
 8008e98:	001a      	movs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	189b      	adds	r3, r3, r2
 8008e9e:	7819      	ldrb	r1, [r3, #0]
 8008ea0:	220f      	movs	r2, #15
 8008ea2:	18bb      	adds	r3, r7, r2
 8008ea4:	18ba      	adds	r2, r7, r2
 8008ea6:	7812      	ldrb	r2, [r2, #0]
 8008ea8:	404a      	eors	r2, r1
 8008eaa:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008eac:	210e      	movs	r1, #14
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	18d3      	adds	r3, r2, r3
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eba:	d00a      	beq.n	8008ed2 <is_my_nmea_checksum_ok+0x60>
 8008ebc:	187b      	adds	r3, r7, r1
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <is_my_nmea_checksum_ok+0x60>
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1dc      	bne.n	8008e8c <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8008ed2:	230f      	movs	r3, #15
 8008ed4:	18fb      	adds	r3, r7, r3
 8008ed6:	781c      	ldrb	r4, [r3, #0]
 8008ed8:	210e      	movs	r1, #14
 8008eda:	187b      	adds	r3, r7, r1
 8008edc:	187a      	adds	r2, r7, r1
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	187b      	adds	r3, r7, r1
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	2210      	movs	r2, #16
 8008eee:	2100      	movs	r1, #0
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f001 fcc9 	bl	800a888 <strtol>
 8008ef6:	0003      	movs	r3, r0
 8008ef8:	1ae3      	subs	r3, r4, r3
 8008efa:	425a      	negs	r2, r3
 8008efc:	4153      	adcs	r3, r2
 8008efe:	b2db      	uxtb	r3, r3
}
 8008f00:	0018      	movs	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b005      	add	sp, #20
 8008f06:	bd90      	pop	{r4, r7, pc}

08008f08 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8008f08:	b5b0      	push	{r4, r5, r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	000a      	movs	r2, r1
 8008f12:	1cfb      	adds	r3, r7, #3
 8008f14:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8008f16:	2308      	movs	r3, #8
 8008f18:	18fa      	adds	r2, r7, r3
 8008f1a:	492f      	ldr	r1, [pc, #188]	; (8008fd8 <nmea2decimal+0xd0>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f001 fdd6 	bl	800aad0 <sscanf>
    min = deg / 100 ;
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <nmea2decimal+0xd4>)
 8008f2c:	f7f7 ffa4 	bl	8000e78 <__aeabi_ddiv>
 8008f30:	0002      	movs	r2, r0
 8008f32:	000b      	movs	r3, r1
 8008f34:	613a      	str	r2, [r7, #16]
 8008f36:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8008f38:	6938      	ldr	r0, [r7, #16]
 8008f3a:	6979      	ldr	r1, [r7, #20]
 8008f3c:	f7f9 f9f8 	bl	8002330 <__aeabi_d2iz>
 8008f40:	0003      	movs	r3, r0
 8008f42:	0018      	movs	r0, r3
 8008f44:	f7f9 fa2a 	bl	800239c <__aeabi_i2d>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	60ba      	str	r2, [r7, #8]
 8008f4e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6938      	ldr	r0, [r7, #16]
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	f7f8 fe4a 	bl	8001bf0 <__aeabi_dsub>
 8008f5c:	0002      	movs	r2, r0
 8008f5e:	000b      	movs	r3, r1
 8008f60:	0010      	movs	r0, r2
 8008f62:	0019      	movs	r1, r3
 8008f64:	2200      	movs	r2, #0
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <nmea2decimal+0xd8>)
 8008f68:	f7f8 fb80 	bl	800166c <__aeabi_dmul>
 8008f6c:	0002      	movs	r2, r0
 8008f6e:	000b      	movs	r3, r1
 8008f70:	613a      	str	r2, [r7, #16]
 8008f72:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8008f74:	2200      	movs	r2, #0
 8008f76:	4b1b      	ldr	r3, [pc, #108]	; (8008fe4 <nmea2decimal+0xdc>)
 8008f78:	6938      	ldr	r0, [r7, #16]
 8008f7a:	6979      	ldr	r1, [r7, #20]
 8008f7c:	f7f7 ff7c 	bl	8000e78 <__aeabi_ddiv>
 8008f80:	0002      	movs	r2, r0
 8008f82:	000b      	movs	r3, r1
 8008f84:	613a      	str	r2, [r7, #16]
 8008f86:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8008f88:	1cfb      	adds	r3, r7, #3
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b53      	cmp	r3, #83	; 0x53
 8008f8e:	d003      	beq.n	8008f98 <nmea2decimal+0x90>
 8008f90:	1cfb      	adds	r3, r7, #3
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b57      	cmp	r3, #87	; 0x57
 8008f96:	d10e      	bne.n	8008fb6 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8008f98:	68b8      	ldr	r0, [r7, #8]
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f7f7 fc0a 	bl	80007b8 <__aeabi_dadd>
 8008fa4:	0002      	movs	r2, r0
 8008fa6:	000b      	movs	r3, r1
 8008fa8:	0011      	movs	r1, r2
 8008faa:	000c      	movs	r4, r1
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	0609      	lsls	r1, r1, #24
 8008fb0:	4059      	eors	r1, r3
 8008fb2:	000d      	movs	r5, r1
 8008fb4:	e009      	b.n	8008fca <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8008fb6:	68b8      	ldr	r0, [r7, #8]
 8008fb8:	68f9      	ldr	r1, [r7, #12]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f7f7 fbfb 	bl	80007b8 <__aeabi_dadd>
 8008fc2:	0002      	movs	r2, r0
 8008fc4:	000b      	movs	r3, r1
 8008fc6:	0014      	movs	r4, r2
 8008fc8:	001d      	movs	r5, r3
}
 8008fca:	0022      	movs	r2, r4
 8008fcc:	002b      	movs	r3, r5
 8008fce:	0010      	movs	r0, r2
 8008fd0:	0019      	movs	r1, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b006      	add	sp, #24
 8008fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd8:	08012e00 	.word	0x08012e00
 8008fdc:	40590000 	.word	0x40590000
 8008fe0:	40240000 	.word	0x40240000
 8008fe4:	40180000 	.word	0x40180000

08008fe8 <nmea2double>:
double nmea2double ( const char *coord , char dir )
{
 8008fe8:	b5b0      	push	{r4, r5, r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	000a      	movs	r2, r1
 8008ff2:	1cfb      	adds	r3, r7, #3
 8008ff4:	701a      	strb	r2, [r3, #0]
    double deg ;
    sscanf ( coord , "%lf" , &deg ) ;
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	18fa      	adds	r2, r7, r3
 8008ffa:	4919      	ldr	r1, [pc, #100]	; (8009060 <nmea2double+0x78>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	0018      	movs	r0, r3
 8009000:	f001 fd66 	bl	800aad0 <sscanf>
    deg = round ( deg * 1e6 ) / 1e6 ;
 8009004:	68b8      	ldr	r0, [r7, #8]
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	4b16      	ldr	r3, [pc, #88]	; (8009064 <nmea2double+0x7c>)
 800900c:	f7f8 fb2e 	bl	800166c <__aeabi_dmul>
 8009010:	0002      	movs	r2, r0
 8009012:	000b      	movs	r3, r1
 8009014:	0010      	movs	r0, r2
 8009016:	0019      	movs	r1, r3
 8009018:	f008 fb06 	bl	8011628 <round>
 800901c:	2200      	movs	r2, #0
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <nmea2double+0x7c>)
 8009020:	f7f7 ff2a 	bl	8000e78 <__aeabi_ddiv>
 8009024:	0002      	movs	r2, r0
 8009026:	000b      	movs	r3, r1
 8009028:	60ba      	str	r2, [r7, #8]
 800902a:	60fb      	str	r3, [r7, #12]
    if ( dir == 'S' || dir == 'W' )
 800902c:	1cfb      	adds	r3, r7, #3
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b53      	cmp	r3, #83	; 0x53
 8009032:	d003      	beq.n	800903c <nmea2double+0x54>
 8009034:	1cfb      	adds	r3, r7, #3
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b57      	cmp	r3, #87	; 0x57
 800903a:	d108      	bne.n	800904e <nmea2double+0x66>
    	return deg * -1 ;
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0011      	movs	r1, r2
 8009042:	000c      	movs	r4, r1
 8009044:	2180      	movs	r1, #128	; 0x80
 8009046:	0609      	lsls	r1, r1, #24
 8009048:	4059      	eors	r1, r3
 800904a:	000d      	movs	r5, r1
 800904c:	e001      	b.n	8009052 <nmea2double+0x6a>
    else
    	return deg ;
 800904e:	68bc      	ldr	r4, [r7, #8]
 8009050:	68fd      	ldr	r5, [r7, #12]
}
 8009052:	0022      	movs	r2, r4
 8009054:	002b      	movs	r3, r5
 8009056:	0010      	movs	r0, r2
 8009058:	0019      	movs	r1, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b004      	add	sp, #16
 800905e:	bdb0      	pop	{r4, r5, r7, pc}
 8009060:	08012e00 	.word	0x08012e00
 8009064:	412e8480 	.word	0x412e8480

08009068 <get_my_nmea_gngll_coordinates_s>:
    //double c = ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
    //return ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
}
*/
void get_my_nmea_gngll_coordinates_s ( const char* m , char* latitude , char* longitude )
{
 8009068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800906a:	b091      	sub	sp, #68	; 0x44
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	0018      	movs	r0, r3
 800907c:	f7ff fdf6 	bl	8008c6c <my_find_char_position>
 8009080:	0003      	movs	r3, r0
 8009082:	001a      	movs	r2, r3
 8009084:	2537      	movs	r5, #55	; 0x37
 8009086:	197b      	adds	r3, r7, r5
 8009088:	3201      	adds	r2, #1
 800908a:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2202      	movs	r2, #2
 8009090:	212c      	movs	r1, #44	; 0x2c
 8009092:	0018      	movs	r0, r3
 8009094:	f7ff fdea 	bl	8008c6c <my_find_char_position>
 8009098:	0003      	movs	r3, r0
 800909a:	0019      	movs	r1, r3
 800909c:	2436      	movs	r4, #54	; 0x36
 800909e:	193b      	adds	r3, r7, r4
 80090a0:	197a      	adds	r2, r7, r5
 80090a2:	7812      	ldrb	r2, [r2, #0]
 80090a4:	1a8a      	subs	r2, r1, r2
 80090a6:	701a      	strb	r2, [r3, #0]

	char* latitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80090a8:	193b      	adds	r3, r7, r4
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	3301      	adds	r3, #1
 80090ae:	0018      	movs	r0, r3
 80090b0:	f000 faf0 	bl	8009694 <malloc>
 80090b4:	0003      	movs	r3, r0
 80090b6:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80090b8:	197b      	adds	r3, r7, r5
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	18d1      	adds	r1, r2, r3
 80090c0:	193b      	adds	r3, r7, r4
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	0018      	movs	r0, r3
 80090c8:	f001 fd91 	bl	800abee <strncpy>
	latitude_s[coordinate_length] = '\0';
 80090cc:	193b      	adds	r3, r7, r4
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	18d3      	adds	r3, r2, r3
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80090d8:	197b      	adds	r3, r7, r5
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	193b      	adds	r3, r7, r4
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	18d3      	adds	r3, r2, r3
 80090e2:	3301      	adds	r3, #1
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	18d2      	adds	r2, r2, r3
 80090e8:	262f      	movs	r6, #47	; 0x2f
 80090ea:	19bb      	adds	r3, r7, r6
 80090ec:	7812      	ldrb	r2, [r2, #0]
 80090ee:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s , direction ) ;
 80090f0:	19bb      	adds	r3, r7, r6
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff ff05 	bl	8008f08 <nmea2decimal>
 80090fe:	0002      	movs	r2, r0
 8009100:	000b      	movs	r3, r1
 8009102:	623a      	str	r2, [r7, #32]
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s ) ;
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	0018      	movs	r0, r3
 800910a:	f000 facd 	bl	80096a8 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800910e:	2200      	movs	r2, #0
 8009110:	4b44      	ldr	r3, [pc, #272]	; (8009224 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8009112:	6a38      	ldr	r0, [r7, #32]
 8009114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009116:	f7f8 faa9 	bl	800166c <__aeabi_dmul>
 800911a:	0002      	movs	r2, r0
 800911c:	000b      	movs	r3, r1
 800911e:	0010      	movs	r0, r2
 8009120:	0019      	movs	r1, r3
 8009122:	f008 fa81 	bl	8011628 <round>
 8009126:	2200      	movs	r2, #0
 8009128:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 800912a:	f7f7 fea5 	bl	8000e78 <__aeabi_ddiv>
 800912e:	0002      	movs	r2, r0
 8009130:	000b      	movs	r3, r1
 8009132:	623a      	str	r2, [r7, #32]
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude , 12 , "%.6lf" , latitude_d ) ;
 8009136:	493c      	ldr	r1, [pc, #240]	; (8009228 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8009138:	68b8      	ldr	r0, [r7, #8]
 800913a:	6a3a      	ldr	r2, [r7, #32]
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	9200      	str	r2, [sp, #0]
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	000a      	movs	r2, r1
 8009144:	210c      	movs	r1, #12
 8009146:	f001 fc6f 	bl	800aa28 <snprintf>

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2203      	movs	r2, #3
 800914e:	212c      	movs	r1, #44	; 0x2c
 8009150:	0018      	movs	r0, r3
 8009152:	f7ff fd8b 	bl	8008c6c <my_find_char_position>
 8009156:	0003      	movs	r3, r0
 8009158:	001a      	movs	r2, r3
 800915a:	197b      	adds	r3, r7, r5
 800915c:	3201      	adds	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
	//coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2204      	movs	r2, #4
 8009164:	212c      	movs	r1, #44	; 0x2c
 8009166:	0018      	movs	r0, r3
 8009168:	f7ff fd80 	bl	8008c6c <my_find_char_position>
 800916c:	0003      	movs	r3, r0
 800916e:	0019      	movs	r1, r3
 8009170:	193b      	adds	r3, r7, r4
 8009172:	197a      	adds	r2, r7, r5
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	1a8a      	subs	r2, r1, r2
 8009178:	701a      	strb	r2, [r3, #0]

	char* longitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800917a:	193b      	adds	r3, r7, r4
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	0018      	movs	r0, r3
 8009182:	f000 fa87 	bl	8009694 <malloc>
 8009186:	0003      	movs	r3, r0
 8009188:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800918a:	197b      	adds	r3, r7, r5
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	18d1      	adds	r1, r2, r3
 8009192:	193b      	adds	r3, r7, r4
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	0018      	movs	r0, r3
 800919a:	f001 fd28 	bl	800abee <strncpy>
	longitude_s[coordinate_length] = '\0';
 800919e:	193b      	adds	r3, r7, r4
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	18d3      	adds	r3, r2, r3
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80091aa:	197b      	adds	r3, r7, r5
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	193b      	adds	r3, r7, r4
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	18d3      	adds	r3, r2, r3
 80091b4:	3301      	adds	r3, #1
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	18d2      	adds	r2, r2, r3
 80091ba:	19bb      	adds	r3, r7, r6
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s , direction ) ;
 80091c0:	19bb      	adds	r3, r7, r6
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	0011      	movs	r1, r2
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7ff fe9d 	bl	8008f08 <nmea2decimal>
 80091ce:	0002      	movs	r2, r0
 80091d0:	000b      	movs	r3, r1
 80091d2:	613a      	str	r2, [r7, #16]
 80091d4:	617b      	str	r3, [r7, #20]
	free ( longitude_s ) ;
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 fa65 	bl	80096a8 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 80091de:	2200      	movs	r2, #0
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 80091e2:	6938      	ldr	r0, [r7, #16]
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	f7f8 fa41 	bl	800166c <__aeabi_dmul>
 80091ea:	0002      	movs	r2, r0
 80091ec:	000b      	movs	r3, r1
 80091ee:	0010      	movs	r0, r2
 80091f0:	0019      	movs	r1, r3
 80091f2:	f008 fa19 	bl	8011628 <round>
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 80091fa:	f7f7 fe3d 	bl	8000e78 <__aeabi_ddiv>
 80091fe:	0002      	movs	r2, r0
 8009200:	000b      	movs	r3, r1
 8009202:	613a      	str	r2, [r7, #16]
 8009204:	617b      	str	r3, [r7, #20]
	snprintf ( longitude , 12 , "%.6lf" , longitude_d ) ;
 8009206:	4908      	ldr	r1, [pc, #32]	; (8009228 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	9200      	str	r2, [sp, #0]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	000a      	movs	r2, r1
 8009214:	210c      	movs	r1, #12
 8009216:	f001 fc07 	bl	800aa28 <snprintf>
}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	b00f      	add	sp, #60	; 0x3c
 8009220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	412e8480 	.word	0x412e8480
 8009228:	08012e04 	.word	0x08012e04

0800922c <get_my_nmea_gngll_coordinates_d>:
void get_my_nmea_gngll_coordinates_d ( const char* m , double* latitude_d , double* longitude_d )
{
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	b089      	sub	sp, #36	; 0x24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	212c      	movs	r1, #44	; 0x2c
 800923e:	0018      	movs	r0, r3
 8009240:	f7ff fd14 	bl	8008c6c <my_find_char_position>
 8009244:	0003      	movs	r3, r0
 8009246:	001a      	movs	r2, r3
 8009248:	251f      	movs	r5, #31
 800924a:	197b      	adds	r3, r7, r5
 800924c:	3201      	adds	r2, #1
 800924e:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2202      	movs	r2, #2
 8009254:	212c      	movs	r1, #44	; 0x2c
 8009256:	0018      	movs	r0, r3
 8009258:	f7ff fd08 	bl	8008c6c <my_find_char_position>
 800925c:	0003      	movs	r3, r0
 800925e:	0019      	movs	r1, r3
 8009260:	241e      	movs	r4, #30
 8009262:	193b      	adds	r3, r7, r4
 8009264:	197a      	adds	r2, r7, r5
 8009266:	7812      	ldrb	r2, [r2, #0]
 8009268:	1a8a      	subs	r2, r1, r2
 800926a:	701a      	strb	r2, [r3, #0]

	char* s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800926c:	193b      	adds	r3, r7, r4
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	0018      	movs	r0, r3
 8009274:	f000 fa0e 	bl	8009694 <malloc>
 8009278:	0003      	movs	r3, r0
 800927a:	61bb      	str	r3, [r7, #24]
	strncpy ( s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800927c:	197b      	adds	r3, r7, r5
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	18d1      	adds	r1, r2, r3
 8009284:	193b      	adds	r3, r7, r4
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	0018      	movs	r0, r3
 800928c:	f001 fcaf 	bl	800abee <strncpy>
	s[coordinate_length] = '\0';
 8009290:	193b      	adds	r3, r7, r4
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	18d3      	adds	r3, r2, r3
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800929c:	197b      	adds	r3, r7, r5
 800929e:	781a      	ldrb	r2, [r3, #0]
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	18d3      	adds	r3, r2, r3
 80092a6:	3301      	adds	r3, #1
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	18d2      	adds	r2, r2, r3
 80092ac:	2617      	movs	r6, #23
 80092ae:	19bb      	adds	r3, r7, r6
 80092b0:	7812      	ldrb	r2, [r2, #0]
 80092b2:	701a      	strb	r2, [r3, #0]
	*latitude_d = nmea2double ( s , direction ) ;
 80092b4:	19bb      	adds	r3, r7, r6
 80092b6:	781a      	ldrb	r2, [r3, #0]
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	0011      	movs	r1, r2
 80092bc:	0018      	movs	r0, r3
 80092be:	f7ff fe93 	bl	8008fe8 <nmea2double>
 80092c2:	0002      	movs	r2, r0
 80092c4:	000b      	movs	r3, r1
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	600a      	str	r2, [r1, #0]
 80092ca:	604b      	str	r3, [r1, #4]
	free ( s ) ;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	0018      	movs	r0, r3
 80092d0:	f000 f9ea 	bl	80096a8 <free>


	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2203      	movs	r2, #3
 80092d8:	212c      	movs	r1, #44	; 0x2c
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff fcc6 	bl	8008c6c <my_find_char_position>
 80092e0:	0003      	movs	r3, r0
 80092e2:	001a      	movs	r2, r3
 80092e4:	197b      	adds	r3, r7, r5
 80092e6:	3201      	adds	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2204      	movs	r2, #4
 80092ee:	212c      	movs	r1, #44	; 0x2c
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7ff fcbb 	bl	8008c6c <my_find_char_position>
 80092f6:	0003      	movs	r3, r0
 80092f8:	0019      	movs	r1, r3
 80092fa:	193b      	adds	r3, r7, r4
 80092fc:	197a      	adds	r2, r7, r5
 80092fe:	7812      	ldrb	r2, [r2, #0]
 8009300:	1a8a      	subs	r2, r1, r2
 8009302:	701a      	strb	r2, [r3, #0]

	s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009304:	193b      	adds	r3, r7, r4
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	0018      	movs	r0, r3
 800930c:	f000 f9c2 	bl	8009694 <malloc>
 8009310:	0003      	movs	r3, r0
 8009312:	61bb      	str	r3, [r7, #24]
	strncpy ( s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009314:	197b      	adds	r3, r7, r5
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	18d1      	adds	r1, r2, r3
 800931c:	193b      	adds	r3, r7, r4
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	0018      	movs	r0, r3
 8009324:	f001 fc63 	bl	800abee <strncpy>
	s[coordinate_length] = '\0';
 8009328:	193b      	adds	r3, r7, r4
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	18d3      	adds	r3, r2, r3
 8009330:	2200      	movs	r2, #0
 8009332:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009334:	197b      	adds	r3, r7, r5
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	193b      	adds	r3, r7, r4
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	18d3      	adds	r3, r2, r3
 800933e:	3301      	adds	r3, #1
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	18d2      	adds	r2, r2, r3
 8009344:	19bb      	adds	r3, r7, r6
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	701a      	strb	r2, [r3, #0]
	*longitude_d = nmea2double ( s , direction ) ;
 800934a:	19bb      	adds	r3, r7, r6
 800934c:	781a      	ldrb	r2, [r3, #0]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	0011      	movs	r1, r2
 8009352:	0018      	movs	r0, r3
 8009354:	f7ff fe48 	bl	8008fe8 <nmea2double>
 8009358:	0002      	movs	r2, r0
 800935a:	000b      	movs	r3, r1
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	600a      	str	r2, [r1, #0]
 8009360:	604b      	str	r3, [r1, #4]
	free ( s ) ;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	0018      	movs	r0, r3
 8009366:	f000 f99f 	bl	80096a8 <free>
}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	46bd      	mov	sp, r7
 800936e:	b009      	add	sp, #36	; 0x24
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009374 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2209      	movs	r2, #9
 8009382:	212c      	movs	r1, #44	; 0x2c
 8009384:	0018      	movs	r0, r3
 8009386:	f7ff fc71 	bl	8008c6c <my_find_char_position>
 800938a:	0003      	movs	r3, r0
 800938c:	001a      	movs	r2, r3
 800938e:	2417      	movs	r4, #23
 8009390:	193b      	adds	r3, r7, r4
 8009392:	3205      	adds	r2, #5
 8009394:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009396:	2003      	movs	r0, #3
 8009398:	f000 f97c 	bl	8009694 <malloc>
 800939c:	0003      	movs	r3, r0
 800939e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80093a0:	193b      	adds	r3, r7, r4
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	18d1      	adds	r1, r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2202      	movs	r2, #2
 80093ac:	0018      	movs	r0, r3
 80093ae:	f001 fc1e 	bl	800abee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3302      	adds	r3, #2
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80093ba:	240e      	movs	r4, #14
 80093bc:	193a      	adds	r2, r7, r4
 80093be:	4909      	ldr	r1, [pc, #36]	; (80093e4 <get_my_nmea_rmc_date_yy+0x70>)
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	0018      	movs	r0, r3
 80093c4:	f001 fb84 	bl	800aad0 <sscanf>
	free ( s ) ;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	0018      	movs	r0, r3
 80093cc:	f000 f96c 	bl	80096a8 <free>
	*yy = (uint8_t) temp ;
 80093d0:	193b      	adds	r3, r7, r4
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	701a      	strb	r2, [r3, #0]

}
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b007      	add	sp, #28
 80093e0:	bd90      	pop	{r4, r7, pc}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	08012e0c 	.word	0x08012e0c

080093e8 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2209      	movs	r2, #9
 80093f6:	212c      	movs	r1, #44	; 0x2c
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7ff fc37 	bl	8008c6c <my_find_char_position>
 80093fe:	0003      	movs	r3, r0
 8009400:	001a      	movs	r2, r3
 8009402:	2417      	movs	r4, #23
 8009404:	193b      	adds	r3, r7, r4
 8009406:	3203      	adds	r2, #3
 8009408:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800940a:	2003      	movs	r0, #3
 800940c:	f000 f942 	bl	8009694 <malloc>
 8009410:	0003      	movs	r3, r0
 8009412:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009414:	193b      	adds	r3, r7, r4
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	18d1      	adds	r1, r2, r3
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	2202      	movs	r2, #2
 8009420:	0018      	movs	r0, r3
 8009422:	f001 fbe4 	bl	800abee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3302      	adds	r3, #2
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800942e:	240e      	movs	r4, #14
 8009430:	193a      	adds	r2, r7, r4
 8009432:	4909      	ldr	r1, [pc, #36]	; (8009458 <get_my_nmea_rmc_date_mm+0x70>)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	0018      	movs	r0, r3
 8009438:	f001 fb4a 	bl	800aad0 <sscanf>
	free ( s ) ;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	0018      	movs	r0, r3
 8009440:	f000 f932 	bl	80096a8 <free>
	*mm = (uint8_t) temp ;
 8009444:	193b      	adds	r3, r7, r4
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b2da      	uxtb	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	701a      	strb	r2, [r3, #0]

}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	46bd      	mov	sp, r7
 8009452:	b007      	add	sp, #28
 8009454:	bd90      	pop	{r4, r7, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	08012e0c 	.word	0x08012e0c

0800945c <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800945c:	b590      	push	{r4, r7, lr}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2209      	movs	r2, #9
 800946a:	212c      	movs	r1, #44	; 0x2c
 800946c:	0018      	movs	r0, r3
 800946e:	f7ff fbfd 	bl	8008c6c <my_find_char_position>
 8009472:	0003      	movs	r3, r0
 8009474:	001a      	movs	r2, r3
 8009476:	2417      	movs	r4, #23
 8009478:	193b      	adds	r3, r7, r4
 800947a:	3201      	adds	r2, #1
 800947c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800947e:	2003      	movs	r0, #3
 8009480:	f000 f908 	bl	8009694 <malloc>
 8009484:	0003      	movs	r3, r0
 8009486:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009488:	193b      	adds	r3, r7, r4
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	18d1      	adds	r1, r2, r3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2202      	movs	r2, #2
 8009494:	0018      	movs	r0, r3
 8009496:	f001 fbaa 	bl	800abee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3302      	adds	r3, #2
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80094a2:	240e      	movs	r4, #14
 80094a4:	193a      	adds	r2, r7, r4
 80094a6:	4909      	ldr	r1, [pc, #36]	; (80094cc <get_my_nmea_rmc_date_dd+0x70>)
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	0018      	movs	r0, r3
 80094ac:	f001 fb10 	bl	800aad0 <sscanf>
	free ( s ) ;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	0018      	movs	r0, r3
 80094b4:	f000 f8f8 	bl	80096a8 <free>
	*dd = (uint8_t) temp ;
 80094b8:	193b      	adds	r3, r7, r4
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	701a      	strb	r2, [r3, #0]

}
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b007      	add	sp, #28
 80094c8:	bd90      	pop	{r4, r7, pc}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	08012e0c 	.word	0x08012e0c

080094d0 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	212c      	movs	r1, #44	; 0x2c
 80094e0:	0018      	movs	r0, r3
 80094e2:	f7ff fbc3 	bl	8008c6c <my_find_char_position>
 80094e6:	0003      	movs	r3, r0
 80094e8:	001a      	movs	r2, r3
 80094ea:	2417      	movs	r4, #23
 80094ec:	193b      	adds	r3, r7, r4
 80094ee:	3201      	adds	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80094f2:	2003      	movs	r0, #3
 80094f4:	f000 f8ce 	bl	8009694 <malloc>
 80094f8:	0003      	movs	r3, r0
 80094fa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80094fc:	193b      	adds	r3, r7, r4
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	18d1      	adds	r1, r2, r3
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2202      	movs	r2, #2
 8009508:	0018      	movs	r0, r3
 800950a:	f001 fb70 	bl	800abee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	3302      	adds	r3, #2
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009516:	240e      	movs	r4, #14
 8009518:	193a      	adds	r2, r7, r4
 800951a:	4909      	ldr	r1, [pc, #36]	; (8009540 <get_my_nmea_rmc_utc_hh+0x70>)
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	0018      	movs	r0, r3
 8009520:	f001 fad6 	bl	800aad0 <sscanf>
	free ( s ) ;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	0018      	movs	r0, r3
 8009528:	f000 f8be 	bl	80096a8 <free>
	*hh = (uint8_t) temp ;
 800952c:	193b      	adds	r3, r7, r4
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b2da      	uxtb	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	701a      	strb	r2, [r3, #0]

}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	46bd      	mov	sp, r7
 800953a:	b007      	add	sp, #28
 800953c:	bd90      	pop	{r4, r7, pc}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	08012e0c 	.word	0x08012e0c

08009544 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	212c      	movs	r1, #44	; 0x2c
 8009554:	0018      	movs	r0, r3
 8009556:	f7ff fb89 	bl	8008c6c <my_find_char_position>
 800955a:	0003      	movs	r3, r0
 800955c:	001a      	movs	r2, r3
 800955e:	2417      	movs	r4, #23
 8009560:	193b      	adds	r3, r7, r4
 8009562:	3203      	adds	r2, #3
 8009564:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009566:	2003      	movs	r0, #3
 8009568:	f000 f894 	bl	8009694 <malloc>
 800956c:	0003      	movs	r3, r0
 800956e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009570:	193b      	adds	r3, r7, r4
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	18d1      	adds	r1, r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2202      	movs	r2, #2
 800957c:	0018      	movs	r0, r3
 800957e:	f001 fb36 	bl	800abee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	3302      	adds	r3, #2
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800958a:	240e      	movs	r4, #14
 800958c:	193a      	adds	r2, r7, r4
 800958e:	4909      	ldr	r1, [pc, #36]	; (80095b4 <get_my_nmea_rmc_utc_mm+0x70>)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	0018      	movs	r0, r3
 8009594:	f001 fa9c 	bl	800aad0 <sscanf>
	free ( s ) ;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	0018      	movs	r0, r3
 800959c:	f000 f884 	bl	80096a8 <free>
	*mm = (uint8_t) temp ;
 80095a0:	193b      	adds	r3, r7, r4
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	701a      	strb	r2, [r3, #0]

}
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	46bd      	mov	sp, r7
 80095ae:	b007      	add	sp, #28
 80095b0:	bd90      	pop	{r4, r7, pc}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	08012e0c 	.word	0x08012e0c

080095b8 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	212c      	movs	r1, #44	; 0x2c
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7ff fb4f 	bl	8008c6c <my_find_char_position>
 80095ce:	0003      	movs	r3, r0
 80095d0:	001a      	movs	r2, r3
 80095d2:	2417      	movs	r4, #23
 80095d4:	193b      	adds	r3, r7, r4
 80095d6:	3205      	adds	r2, #5
 80095d8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80095da:	2003      	movs	r0, #3
 80095dc:	f000 f85a 	bl	8009694 <malloc>
 80095e0:	0003      	movs	r3, r0
 80095e2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80095e4:	193b      	adds	r3, r7, r4
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	18d1      	adds	r1, r2, r3
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2202      	movs	r2, #2
 80095f0:	0018      	movs	r0, r3
 80095f2:	f001 fafc 	bl	800abee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3302      	adds	r3, #2
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80095fe:	240e      	movs	r4, #14
 8009600:	193a      	adds	r2, r7, r4
 8009602:	4909      	ldr	r1, [pc, #36]	; (8009628 <get_my_nmea_rmc_utc_ss+0x70>)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	0018      	movs	r0, r3
 8009608:	f001 fa62 	bl	800aad0 <sscanf>
	free ( s ) ;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	0018      	movs	r0, r3
 8009610:	f000 f84a 	bl	80096a8 <free>
	*ss = (uint8_t) temp ;
 8009614:	193b      	adds	r3, r7, r4
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b2da      	uxtb	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	701a      	strb	r2, [r3, #0]

}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	46bd      	mov	sp, r7
 8009622:	b007      	add	sp, #28
 8009624:	bd90      	pop	{r4, r7, pc}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	08012e0c 	.word	0x08012e0c

0800962c <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800962c:	b590      	push	{r4, r7, lr}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	212c      	movs	r1, #44	; 0x2c
 800963c:	0018      	movs	r0, r3
 800963e:	f7ff fb15 	bl	8008c6c <my_find_char_position>
 8009642:	0003      	movs	r3, r0
 8009644:	001a      	movs	r2, r3
 8009646:	240f      	movs	r4, #15
 8009648:	193b      	adds	r3, r7, r4
 800964a:	3208      	adds	r2, #8
 800964c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800964e:	2004      	movs	r0, #4
 8009650:	f000 f820 	bl	8009694 <malloc>
 8009654:	0003      	movs	r3, r0
 8009656:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009658:	193b      	adds	r3, r7, r4
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	18d1      	adds	r1, r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2203      	movs	r2, #3
 8009664:	0018      	movs	r0, r3
 8009666:	f001 fac2 	bl	800abee <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	3303      	adds	r3, #3
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4906      	ldr	r1, [pc, #24]	; (8009690 <get_my_nmea_rmc_utc_sss+0x64>)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	0018      	movs	r0, r3
 800967a:	f001 fa29 	bl	800aad0 <sscanf>
	free ( s ) ;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	0018      	movs	r0, r3
 8009682:	f000 f811 	bl	80096a8 <free>
}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b005      	add	sp, #20
 800968c:	bd90      	pop	{r4, r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	08012e10 	.word	0x08012e10

08009694 <malloc>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <malloc+0x10>)
 8009698:	0001      	movs	r1, r0
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	f000 f80e 	bl	80096bc <_malloc_r>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	200006e0 	.word	0x200006e0

080096a8 <free>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <free+0x10>)
 80096ac:	0001      	movs	r1, r0
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	f001 fbe4 	bl	800ae7c <_free_r>
 80096b4:	bd10      	pop	{r4, pc}
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	200006e0 	.word	0x200006e0

080096bc <_malloc_r>:
 80096bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096be:	000d      	movs	r5, r1
 80096c0:	b087      	sub	sp, #28
 80096c2:	350b      	adds	r5, #11
 80096c4:	9001      	str	r0, [sp, #4]
 80096c6:	2d16      	cmp	r5, #22
 80096c8:	d908      	bls.n	80096dc <_malloc_r+0x20>
 80096ca:	2207      	movs	r2, #7
 80096cc:	4395      	bics	r5, r2
 80096ce:	d506      	bpl.n	80096de <_malloc_r+0x22>
 80096d0:	230c      	movs	r3, #12
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	2000      	movs	r0, #0
 80096d8:	b007      	add	sp, #28
 80096da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096dc:	2510      	movs	r5, #16
 80096de:	42a9      	cmp	r1, r5
 80096e0:	d8f6      	bhi.n	80096d0 <_malloc_r+0x14>
 80096e2:	9801      	ldr	r0, [sp, #4]
 80096e4:	f000 f9fe 	bl	8009ae4 <__malloc_lock>
 80096e8:	23fc      	movs	r3, #252	; 0xfc
 80096ea:	4ebe      	ldr	r6, [pc, #760]	; (80099e4 <_malloc_r+0x328>)
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	429d      	cmp	r5, r3
 80096f0:	d219      	bcs.n	8009726 <_malloc_r+0x6a>
 80096f2:	002a      	movs	r2, r5
 80096f4:	3208      	adds	r2, #8
 80096f6:	18b2      	adds	r2, r6, r2
 80096f8:	0011      	movs	r1, r2
 80096fa:	6854      	ldr	r4, [r2, #4]
 80096fc:	3908      	subs	r1, #8
 80096fe:	08eb      	lsrs	r3, r5, #3
 8009700:	428c      	cmp	r4, r1
 8009702:	d103      	bne.n	800970c <_malloc_r+0x50>
 8009704:	68d4      	ldr	r4, [r2, #12]
 8009706:	3302      	adds	r3, #2
 8009708:	42a2      	cmp	r2, r4
 800970a:	d022      	beq.n	8009752 <_malloc_r+0x96>
 800970c:	2203      	movs	r2, #3
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	68a1      	ldr	r1, [r4, #8]
 8009712:	4393      	bics	r3, r2
 8009714:	68e2      	ldr	r2, [r4, #12]
 8009716:	18e3      	adds	r3, r4, r3
 8009718:	60ca      	str	r2, [r1, #12]
 800971a:	6091      	str	r1, [r2, #8]
 800971c:	2201      	movs	r2, #1
 800971e:	6859      	ldr	r1, [r3, #4]
 8009720:	430a      	orrs	r2, r1
 8009722:	605a      	str	r2, [r3, #4]
 8009724:	e02a      	b.n	800977c <_malloc_r+0xc0>
 8009726:	233f      	movs	r3, #63	; 0x3f
 8009728:	0a6a      	lsrs	r2, r5, #9
 800972a:	d003      	beq.n	8009734 <_malloc_r+0x78>
 800972c:	2a04      	cmp	r2, #4
 800972e:	d82b      	bhi.n	8009788 <_malloc_r+0xcc>
 8009730:	09ab      	lsrs	r3, r5, #6
 8009732:	3338      	adds	r3, #56	; 0x38
 8009734:	2203      	movs	r2, #3
 8009736:	4694      	mov	ip, r2
 8009738:	00d9      	lsls	r1, r3, #3
 800973a:	1989      	adds	r1, r1, r6
 800973c:	68cc      	ldr	r4, [r1, #12]
 800973e:	428c      	cmp	r4, r1
 8009740:	d006      	beq.n	8009750 <_malloc_r+0x94>
 8009742:	4660      	mov	r0, ip
 8009744:	6862      	ldr	r2, [r4, #4]
 8009746:	4382      	bics	r2, r0
 8009748:	1b57      	subs	r7, r2, r5
 800974a:	2f0f      	cmp	r7, #15
 800974c:	dd34      	ble.n	80097b8 <_malloc_r+0xfc>
 800974e:	3b01      	subs	r3, #1
 8009750:	3301      	adds	r3, #1
 8009752:	6934      	ldr	r4, [r6, #16]
 8009754:	49a4      	ldr	r1, [pc, #656]	; (80099e8 <_malloc_r+0x32c>)
 8009756:	428c      	cmp	r4, r1
 8009758:	d055      	beq.n	8009806 <_malloc_r+0x14a>
 800975a:	2003      	movs	r0, #3
 800975c:	6862      	ldr	r2, [r4, #4]
 800975e:	4382      	bics	r2, r0
 8009760:	1b50      	subs	r0, r2, r5
 8009762:	280f      	cmp	r0, #15
 8009764:	dd36      	ble.n	80097d4 <_malloc_r+0x118>
 8009766:	2301      	movs	r3, #1
 8009768:	1967      	adds	r7, r4, r5
 800976a:	431d      	orrs	r5, r3
 800976c:	4303      	orrs	r3, r0
 800976e:	6065      	str	r5, [r4, #4]
 8009770:	6177      	str	r7, [r6, #20]
 8009772:	6137      	str	r7, [r6, #16]
 8009774:	60f9      	str	r1, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	50a0      	str	r0, [r4, r2]
 800977c:	9801      	ldr	r0, [sp, #4]
 800977e:	f000 f9b9 	bl	8009af4 <__malloc_unlock>
 8009782:	0020      	movs	r0, r4
 8009784:	3008      	adds	r0, #8
 8009786:	e7a7      	b.n	80096d8 <_malloc_r+0x1c>
 8009788:	2a14      	cmp	r2, #20
 800978a:	d802      	bhi.n	8009792 <_malloc_r+0xd6>
 800978c:	0013      	movs	r3, r2
 800978e:	335b      	adds	r3, #91	; 0x5b
 8009790:	e7d0      	b.n	8009734 <_malloc_r+0x78>
 8009792:	2a54      	cmp	r2, #84	; 0x54
 8009794:	d802      	bhi.n	800979c <_malloc_r+0xe0>
 8009796:	0b2b      	lsrs	r3, r5, #12
 8009798:	336e      	adds	r3, #110	; 0x6e
 800979a:	e7cb      	b.n	8009734 <_malloc_r+0x78>
 800979c:	23aa      	movs	r3, #170	; 0xaa
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d802      	bhi.n	80097aa <_malloc_r+0xee>
 80097a4:	0beb      	lsrs	r3, r5, #15
 80097a6:	3377      	adds	r3, #119	; 0x77
 80097a8:	e7c4      	b.n	8009734 <_malloc_r+0x78>
 80097aa:	4990      	ldr	r1, [pc, #576]	; (80099ec <_malloc_r+0x330>)
 80097ac:	237e      	movs	r3, #126	; 0x7e
 80097ae:	428a      	cmp	r2, r1
 80097b0:	d8c0      	bhi.n	8009734 <_malloc_r+0x78>
 80097b2:	0cab      	lsrs	r3, r5, #18
 80097b4:	337c      	adds	r3, #124	; 0x7c
 80097b6:	e7bd      	b.n	8009734 <_malloc_r+0x78>
 80097b8:	68e0      	ldr	r0, [r4, #12]
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	db08      	blt.n	80097d0 <_malloc_r+0x114>
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	60d8      	str	r0, [r3, #12]
 80097c2:	6083      	str	r3, [r0, #8]
 80097c4:	2301      	movs	r3, #1
 80097c6:	18a2      	adds	r2, r4, r2
 80097c8:	6851      	ldr	r1, [r2, #4]
 80097ca:	430b      	orrs	r3, r1
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	e7d5      	b.n	800977c <_malloc_r+0xc0>
 80097d0:	0004      	movs	r4, r0
 80097d2:	e7b4      	b.n	800973e <_malloc_r+0x82>
 80097d4:	6171      	str	r1, [r6, #20]
 80097d6:	6131      	str	r1, [r6, #16]
 80097d8:	2800      	cmp	r0, #0
 80097da:	daf3      	bge.n	80097c4 <_malloc_r+0x108>
 80097dc:	6871      	ldr	r1, [r6, #4]
 80097de:	468c      	mov	ip, r1
 80097e0:	2180      	movs	r1, #128	; 0x80
 80097e2:	0089      	lsls	r1, r1, #2
 80097e4:	428a      	cmp	r2, r1
 80097e6:	d300      	bcc.n	80097ea <_malloc_r+0x12e>
 80097e8:	e08c      	b.n	8009904 <_malloc_r+0x248>
 80097ea:	08d1      	lsrs	r1, r2, #3
 80097ec:	0950      	lsrs	r0, r2, #5
 80097ee:	2201      	movs	r2, #1
 80097f0:	4082      	lsls	r2, r0
 80097f2:	4660      	mov	r0, ip
 80097f4:	4302      	orrs	r2, r0
 80097f6:	6072      	str	r2, [r6, #4]
 80097f8:	00ca      	lsls	r2, r1, #3
 80097fa:	1992      	adds	r2, r2, r6
 80097fc:	6891      	ldr	r1, [r2, #8]
 80097fe:	60e2      	str	r2, [r4, #12]
 8009800:	60a1      	str	r1, [r4, #8]
 8009802:	6094      	str	r4, [r2, #8]
 8009804:	60cc      	str	r4, [r1, #12]
 8009806:	2201      	movs	r2, #1
 8009808:	4876      	ldr	r0, [pc, #472]	; (80099e4 <_malloc_r+0x328>)
 800980a:	1099      	asrs	r1, r3, #2
 800980c:	408a      	lsls	r2, r1
 800980e:	6841      	ldr	r1, [r0, #4]
 8009810:	4291      	cmp	r1, r2
 8009812:	d328      	bcc.n	8009866 <_malloc_r+0x1aa>
 8009814:	420a      	tst	r2, r1
 8009816:	d105      	bne.n	8009824 <_malloc_r+0x168>
 8009818:	2403      	movs	r4, #3
 800981a:	43a3      	bics	r3, r4
 800981c:	0052      	lsls	r2, r2, #1
 800981e:	3304      	adds	r3, #4
 8009820:	420a      	tst	r2, r1
 8009822:	d0fb      	beq.n	800981c <_malloc_r+0x160>
 8009824:	496f      	ldr	r1, [pc, #444]	; (80099e4 <_malloc_r+0x328>)
 8009826:	9104      	str	r1, [sp, #16]
 8009828:	00d9      	lsls	r1, r3, #3
 800982a:	1841      	adds	r1, r0, r1
 800982c:	468c      	mov	ip, r1
 800982e:	000f      	movs	r7, r1
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	68fc      	ldr	r4, [r7, #12]
 8009834:	42bc      	cmp	r4, r7
 8009836:	d000      	beq.n	800983a <_malloc_r+0x17e>
 8009838:	e09b      	b.n	8009972 <_malloc_r+0x2b6>
 800983a:	2403      	movs	r4, #3
 800983c:	9902      	ldr	r1, [sp, #8]
 800983e:	3708      	adds	r7, #8
 8009840:	3101      	adds	r1, #1
 8009842:	9102      	str	r1, [sp, #8]
 8009844:	4221      	tst	r1, r4
 8009846:	d1f4      	bne.n	8009832 <_malloc_r+0x176>
 8009848:	2103      	movs	r1, #3
 800984a:	420b      	tst	r3, r1
 800984c:	d000      	beq.n	8009850 <_malloc_r+0x194>
 800984e:	e0b7      	b.n	80099c0 <_malloc_r+0x304>
 8009850:	6843      	ldr	r3, [r0, #4]
 8009852:	4393      	bics	r3, r2
 8009854:	6043      	str	r3, [r0, #4]
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	0052      	lsls	r2, r2, #1
 800985a:	6859      	ldr	r1, [r3, #4]
 800985c:	4291      	cmp	r1, r2
 800985e:	d302      	bcc.n	8009866 <_malloc_r+0x1aa>
 8009860:	2a00      	cmp	r2, #0
 8009862:	d000      	beq.n	8009866 <_malloc_r+0x1aa>
 8009864:	e0bb      	b.n	80099de <_malloc_r+0x322>
 8009866:	2203      	movs	r2, #3
 8009868:	6883      	ldr	r3, [r0, #8]
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4393      	bics	r3, r2
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	42ab      	cmp	r3, r5
 8009874:	d303      	bcc.n	800987e <_malloc_r+0x1c2>
 8009876:	1b59      	subs	r1, r3, r5
 8009878:	290f      	cmp	r1, #15
 800987a:	dd00      	ble.n	800987e <_malloc_r+0x1c2>
 800987c:	e123      	b.n	8009ac6 <_malloc_r+0x40a>
 800987e:	9b02      	ldr	r3, [sp, #8]
 8009880:	9a03      	ldr	r2, [sp, #12]
 8009882:	2008      	movs	r0, #8
 8009884:	189e      	adds	r6, r3, r2
 8009886:	4b5a      	ldr	r3, [pc, #360]	; (80099f0 <_malloc_r+0x334>)
 8009888:	681f      	ldr	r7, [r3, #0]
 800988a:	f001 fa71 	bl	800ad70 <sysconf>
 800988e:	4b59      	ldr	r3, [pc, #356]	; (80099f4 <_malloc_r+0x338>)
 8009890:	3710      	adds	r7, #16
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	197f      	adds	r7, r7, r5
 8009896:	9004      	str	r0, [sp, #16]
 8009898:	3301      	adds	r3, #1
 800989a:	d003      	beq.n	80098a4 <_malloc_r+0x1e8>
 800989c:	1e7b      	subs	r3, r7, #1
 800989e:	181b      	adds	r3, r3, r0
 80098a0:	4247      	negs	r7, r0
 80098a2:	401f      	ands	r7, r3
 80098a4:	0039      	movs	r1, r7
 80098a6:	9801      	ldr	r0, [sp, #4]
 80098a8:	f001 fa0e 	bl	800acc8 <_sbrk_r>
 80098ac:	0004      	movs	r4, r0
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d100      	bne.n	80098b4 <_malloc_r+0x1f8>
 80098b2:	e0de      	b.n	8009a72 <_malloc_r+0x3b6>
 80098b4:	4286      	cmp	r6, r0
 80098b6:	d904      	bls.n	80098c2 <_malloc_r+0x206>
 80098b8:	4b4a      	ldr	r3, [pc, #296]	; (80099e4 <_malloc_r+0x328>)
 80098ba:	9a02      	ldr	r2, [sp, #8]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d000      	beq.n	80098c2 <_malloc_r+0x206>
 80098c0:	e0d7      	b.n	8009a72 <_malloc_r+0x3b6>
 80098c2:	4a4d      	ldr	r2, [pc, #308]	; (80099f8 <_malloc_r+0x33c>)
 80098c4:	6813      	ldr	r3, [r2, #0]
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	9a04      	ldr	r2, [sp, #16]
 80098cc:	3a01      	subs	r2, #1
 80098ce:	42a6      	cmp	r6, r4
 80098d0:	d000      	beq.n	80098d4 <_malloc_r+0x218>
 80098d2:	e097      	b.n	8009a04 <_malloc_r+0x348>
 80098d4:	4216      	tst	r6, r2
 80098d6:	d000      	beq.n	80098da <_malloc_r+0x21e>
 80098d8:	e094      	b.n	8009a04 <_malloc_r+0x348>
 80098da:	4b42      	ldr	r3, [pc, #264]	; (80099e4 <_malloc_r+0x328>)
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	19df      	adds	r7, r3, r7
 80098e2:	2301      	movs	r3, #1
 80098e4:	433b      	orrs	r3, r7
 80098e6:	6053      	str	r3, [r2, #4]
 80098e8:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <_malloc_r+0x33c>)
 80098ea:	4a44      	ldr	r2, [pc, #272]	; (80099fc <_malloc_r+0x340>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6811      	ldr	r1, [r2, #0]
 80098f0:	428b      	cmp	r3, r1
 80098f2:	d900      	bls.n	80098f6 <_malloc_r+0x23a>
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	4a42      	ldr	r2, [pc, #264]	; (8009a00 <_malloc_r+0x344>)
 80098f8:	6811      	ldr	r1, [r2, #0]
 80098fa:	428b      	cmp	r3, r1
 80098fc:	d800      	bhi.n	8009900 <_malloc_r+0x244>
 80098fe:	e0b8      	b.n	8009a72 <_malloc_r+0x3b6>
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	e0b6      	b.n	8009a72 <_malloc_r+0x3b6>
 8009904:	0a50      	lsrs	r0, r2, #9
 8009906:	2804      	cmp	r0, #4
 8009908:	d811      	bhi.n	800992e <_malloc_r+0x272>
 800990a:	0991      	lsrs	r1, r2, #6
 800990c:	3138      	adds	r1, #56	; 0x38
 800990e:	00cf      	lsls	r7, r1, #3
 8009910:	19bf      	adds	r7, r7, r6
 8009912:	68b8      	ldr	r0, [r7, #8]
 8009914:	4287      	cmp	r7, r0
 8009916:	d125      	bne.n	8009964 <_malloc_r+0x2a8>
 8009918:	2201      	movs	r2, #1
 800991a:	1089      	asrs	r1, r1, #2
 800991c:	408a      	lsls	r2, r1
 800991e:	4661      	mov	r1, ip
 8009920:	430a      	orrs	r2, r1
 8009922:	6072      	str	r2, [r6, #4]
 8009924:	60e7      	str	r7, [r4, #12]
 8009926:	60a0      	str	r0, [r4, #8]
 8009928:	60bc      	str	r4, [r7, #8]
 800992a:	60c4      	str	r4, [r0, #12]
 800992c:	e76b      	b.n	8009806 <_malloc_r+0x14a>
 800992e:	2814      	cmp	r0, #20
 8009930:	d802      	bhi.n	8009938 <_malloc_r+0x27c>
 8009932:	0001      	movs	r1, r0
 8009934:	315b      	adds	r1, #91	; 0x5b
 8009936:	e7ea      	b.n	800990e <_malloc_r+0x252>
 8009938:	2854      	cmp	r0, #84	; 0x54
 800993a:	d802      	bhi.n	8009942 <_malloc_r+0x286>
 800993c:	0b11      	lsrs	r1, r2, #12
 800993e:	316e      	adds	r1, #110	; 0x6e
 8009940:	e7e5      	b.n	800990e <_malloc_r+0x252>
 8009942:	21aa      	movs	r1, #170	; 0xaa
 8009944:	0049      	lsls	r1, r1, #1
 8009946:	4288      	cmp	r0, r1
 8009948:	d802      	bhi.n	8009950 <_malloc_r+0x294>
 800994a:	0bd1      	lsrs	r1, r2, #15
 800994c:	3177      	adds	r1, #119	; 0x77
 800994e:	e7de      	b.n	800990e <_malloc_r+0x252>
 8009950:	4f26      	ldr	r7, [pc, #152]	; (80099ec <_malloc_r+0x330>)
 8009952:	217e      	movs	r1, #126	; 0x7e
 8009954:	42b8      	cmp	r0, r7
 8009956:	d8da      	bhi.n	800990e <_malloc_r+0x252>
 8009958:	0c91      	lsrs	r1, r2, #18
 800995a:	317c      	adds	r1, #124	; 0x7c
 800995c:	e7d7      	b.n	800990e <_malloc_r+0x252>
 800995e:	6880      	ldr	r0, [r0, #8]
 8009960:	4287      	cmp	r7, r0
 8009962:	d004      	beq.n	800996e <_malloc_r+0x2b2>
 8009964:	2603      	movs	r6, #3
 8009966:	6841      	ldr	r1, [r0, #4]
 8009968:	43b1      	bics	r1, r6
 800996a:	4291      	cmp	r1, r2
 800996c:	d8f7      	bhi.n	800995e <_malloc_r+0x2a2>
 800996e:	68c7      	ldr	r7, [r0, #12]
 8009970:	e7d8      	b.n	8009924 <_malloc_r+0x268>
 8009972:	2603      	movs	r6, #3
 8009974:	6861      	ldr	r1, [r4, #4]
 8009976:	43b1      	bics	r1, r6
 8009978:	9103      	str	r1, [sp, #12]
 800997a:	68e6      	ldr	r6, [r4, #12]
 800997c:	1b49      	subs	r1, r1, r5
 800997e:	290f      	cmp	r1, #15
 8009980:	dd10      	ble.n	80099a4 <_malloc_r+0x2e8>
 8009982:	2201      	movs	r2, #1
 8009984:	1963      	adds	r3, r4, r5
 8009986:	4315      	orrs	r5, r2
 8009988:	6065      	str	r5, [r4, #4]
 800998a:	68a5      	ldr	r5, [r4, #8]
 800998c:	430a      	orrs	r2, r1
 800998e:	60ee      	str	r6, [r5, #12]
 8009990:	60b5      	str	r5, [r6, #8]
 8009992:	6143      	str	r3, [r0, #20]
 8009994:	6103      	str	r3, [r0, #16]
 8009996:	4814      	ldr	r0, [pc, #80]	; (80099e8 <_malloc_r+0x32c>)
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	60d8      	str	r0, [r3, #12]
 800999c:	6098      	str	r0, [r3, #8]
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	50e1      	str	r1, [r4, r3]
 80099a2:	e6eb      	b.n	800977c <_malloc_r+0xc0>
 80099a4:	2900      	cmp	r1, #0
 80099a6:	db09      	blt.n	80099bc <_malloc_r+0x300>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	18e1      	adds	r1, r4, r3
 80099ac:	2301      	movs	r3, #1
 80099ae:	684a      	ldr	r2, [r1, #4]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	604b      	str	r3, [r1, #4]
 80099b4:	68a3      	ldr	r3, [r4, #8]
 80099b6:	60de      	str	r6, [r3, #12]
 80099b8:	60b3      	str	r3, [r6, #8]
 80099ba:	e6df      	b.n	800977c <_malloc_r+0xc0>
 80099bc:	0034      	movs	r4, r6
 80099be:	e739      	b.n	8009834 <_malloc_r+0x178>
 80099c0:	2108      	movs	r1, #8
 80099c2:	4249      	negs	r1, r1
 80099c4:	448c      	add	ip, r1
 80099c6:	4661      	mov	r1, ip
 80099c8:	6889      	ldr	r1, [r1, #8]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4561      	cmp	r1, ip
 80099ce:	d100      	bne.n	80099d2 <_malloc_r+0x316>
 80099d0:	e73a      	b.n	8009848 <_malloc_r+0x18c>
 80099d2:	e740      	b.n	8009856 <_malloc_r+0x19a>
 80099d4:	3304      	adds	r3, #4
 80099d6:	0052      	lsls	r2, r2, #1
 80099d8:	420a      	tst	r2, r1
 80099da:	d0fb      	beq.n	80099d4 <_malloc_r+0x318>
 80099dc:	e724      	b.n	8009828 <_malloc_r+0x16c>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	e7fa      	b.n	80099d8 <_malloc_r+0x31c>
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	20000038 	.word	0x20000038
 80099e8:	20000040 	.word	0x20000040
 80099ec:	00000554 	.word	0x00000554
 80099f0:	20000c14 	.word	0x20000c14
 80099f4:	20000440 	.word	0x20000440
 80099f8:	20000be4 	.word	0x20000be4
 80099fc:	20000c0c 	.word	0x20000c0c
 8009a00:	20000c10 	.word	0x20000c10
 8009a04:	4934      	ldr	r1, [pc, #208]	; (8009ad8 <_malloc_r+0x41c>)
 8009a06:	6808      	ldr	r0, [r1, #0]
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d140      	bne.n	8009a8e <_malloc_r+0x3d2>
 8009a0c:	600c      	str	r4, [r1, #0]
 8009a0e:	2107      	movs	r1, #7
 8009a10:	0026      	movs	r6, r4
 8009a12:	2300      	movs	r3, #0
 8009a14:	400e      	ands	r6, r1
 8009a16:	420c      	tst	r4, r1
 8009a18:	d002      	beq.n	8009a20 <_malloc_r+0x364>
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	1b9b      	subs	r3, r3, r6
 8009a1e:	18e4      	adds	r4, r4, r3
 8009a20:	19e1      	adds	r1, r4, r7
 8009a22:	9105      	str	r1, [sp, #20]
 8009a24:	9f05      	ldr	r7, [sp, #20]
 8009a26:	9904      	ldr	r1, [sp, #16]
 8009a28:	4017      	ands	r7, r2
 8009a2a:	18cb      	adds	r3, r1, r3
 8009a2c:	1bdf      	subs	r7, r3, r7
 8009a2e:	4017      	ands	r7, r2
 8009a30:	0039      	movs	r1, r7
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	f001 f948 	bl	800acc8 <_sbrk_r>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d107      	bne.n	8009a4c <_malloc_r+0x390>
 8009a3c:	1e37      	subs	r7, r6, #0
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	d004      	beq.n	8009a4c <_malloc_r+0x390>
 8009a42:	0030      	movs	r0, r6
 8009a44:	2700      	movs	r7, #0
 8009a46:	9b05      	ldr	r3, [sp, #20]
 8009a48:	3808      	subs	r0, #8
 8009a4a:	1818      	adds	r0, r3, r0
 8009a4c:	4a23      	ldr	r2, [pc, #140]	; (8009adc <_malloc_r+0x420>)
 8009a4e:	1b00      	subs	r0, r0, r4
 8009a50:	6813      	ldr	r3, [r2, #0]
 8009a52:	19c0      	adds	r0, r0, r7
 8009a54:	19db      	adds	r3, r3, r7
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4b21      	ldr	r3, [pc, #132]	; (8009ae0 <_malloc_r+0x424>)
 8009a5c:	9902      	ldr	r1, [sp, #8]
 8009a5e:	4310      	orrs	r0, r2
 8009a60:	609c      	str	r4, [r3, #8]
 8009a62:	6060      	str	r0, [r4, #4]
 8009a64:	4299      	cmp	r1, r3
 8009a66:	d100      	bne.n	8009a6a <_malloc_r+0x3ae>
 8009a68:	e73e      	b.n	80098e8 <_malloc_r+0x22c>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	2b0f      	cmp	r3, #15
 8009a6e:	d813      	bhi.n	8009a98 <_malloc_r+0x3dc>
 8009a70:	6062      	str	r2, [r4, #4]
 8009a72:	2203      	movs	r2, #3
 8009a74:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <_malloc_r+0x424>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	4393      	bics	r3, r2
 8009a7c:	1b59      	subs	r1, r3, r5
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	d301      	bcc.n	8009a86 <_malloc_r+0x3ca>
 8009a82:	290f      	cmp	r1, #15
 8009a84:	dc1f      	bgt.n	8009ac6 <_malloc_r+0x40a>
 8009a86:	9801      	ldr	r0, [sp, #4]
 8009a88:	f000 f834 	bl	8009af4 <__malloc_unlock>
 8009a8c:	e623      	b.n	80096d6 <_malloc_r+0x1a>
 8009a8e:	4913      	ldr	r1, [pc, #76]	; (8009adc <_malloc_r+0x420>)
 8009a90:	1ba6      	subs	r6, r4, r6
 8009a92:	18f6      	adds	r6, r6, r3
 8009a94:	600e      	str	r6, [r1, #0]
 8009a96:	e7ba      	b.n	8009a0e <_malloc_r+0x352>
 8009a98:	2107      	movs	r1, #7
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	3b0c      	subs	r3, #12
 8009a9e:	438b      	bics	r3, r1
 8009aa0:	9902      	ldr	r1, [sp, #8]
 8009aa2:	6849      	ldr	r1, [r1, #4]
 8009aa4:	400a      	ands	r2, r1
 8009aa6:	9902      	ldr	r1, [sp, #8]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	604a      	str	r2, [r1, #4]
 8009aac:	18ca      	adds	r2, r1, r3
 8009aae:	2105      	movs	r1, #5
 8009ab0:	6051      	str	r1, [r2, #4]
 8009ab2:	6091      	str	r1, [r2, #8]
 8009ab4:	2b0f      	cmp	r3, #15
 8009ab6:	d800      	bhi.n	8009aba <_malloc_r+0x3fe>
 8009ab8:	e716      	b.n	80098e8 <_malloc_r+0x22c>
 8009aba:	9902      	ldr	r1, [sp, #8]
 8009abc:	9801      	ldr	r0, [sp, #4]
 8009abe:	3108      	adds	r1, #8
 8009ac0:	f001 f9dc 	bl	800ae7c <_free_r>
 8009ac4:	e710      	b.n	80098e8 <_malloc_r+0x22c>
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	0013      	movs	r3, r2
 8009aca:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <_malloc_r+0x424>)
 8009acc:	432b      	orrs	r3, r5
 8009ace:	6884      	ldr	r4, [r0, #8]
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	1963      	adds	r3, r4, r5
 8009ad4:	6083      	str	r3, [r0, #8]
 8009ad6:	e623      	b.n	8009720 <_malloc_r+0x64>
 8009ad8:	20000440 	.word	0x20000440
 8009adc:	20000be4 	.word	0x20000be4
 8009ae0:	20000038 	.word	0x20000038

08009ae4 <__malloc_lock>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4802      	ldr	r0, [pc, #8]	; (8009af0 <__malloc_lock+0xc>)
 8009ae8:	f001 f940 	bl	800ad6c <__retarget_lock_acquire_recursive>
 8009aec:	bd10      	pop	{r4, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	20000d59 	.word	0x20000d59

08009af4 <__malloc_unlock>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	4802      	ldr	r0, [pc, #8]	; (8009b00 <__malloc_unlock+0xc>)
 8009af8:	f001 f939 	bl	800ad6e <__retarget_lock_release_recursive>
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	20000d59 	.word	0x20000d59

08009b04 <sulp>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	0016      	movs	r6, r2
 8009b08:	000d      	movs	r5, r1
 8009b0a:	f002 f90d 	bl	800bd28 <__ulp>
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	d00d      	beq.n	8009b2e <sulp+0x2a>
 8009b12:	236b      	movs	r3, #107	; 0x6b
 8009b14:	006a      	lsls	r2, r5, #1
 8009b16:	0d52      	lsrs	r2, r2, #21
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dd07      	ble.n	8009b2e <sulp+0x2a>
 8009b1e:	2400      	movs	r4, #0
 8009b20:	4a03      	ldr	r2, [pc, #12]	; (8009b30 <sulp+0x2c>)
 8009b22:	051b      	lsls	r3, r3, #20
 8009b24:	189d      	adds	r5, r3, r2
 8009b26:	002b      	movs	r3, r5
 8009b28:	0022      	movs	r2, r4
 8009b2a:	f7f7 fd9f 	bl	800166c <__aeabi_dmul>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	3ff00000 	.word	0x3ff00000

08009b34 <_strtod_l>:
 8009b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b36:	b0a1      	sub	sp, #132	; 0x84
 8009b38:	9219      	str	r2, [sp, #100]	; 0x64
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	2700      	movs	r7, #0
 8009b40:	9004      	str	r0, [sp, #16]
 8009b42:	9107      	str	r1, [sp, #28]
 8009b44:	921c      	str	r2, [sp, #112]	; 0x70
 8009b46:	911b      	str	r1, [sp, #108]	; 0x6c
 8009b48:	780a      	ldrb	r2, [r1, #0]
 8009b4a:	2a2b      	cmp	r2, #43	; 0x2b
 8009b4c:	d055      	beq.n	8009bfa <_strtod_l+0xc6>
 8009b4e:	d841      	bhi.n	8009bd4 <_strtod_l+0xa0>
 8009b50:	2a0d      	cmp	r2, #13
 8009b52:	d83b      	bhi.n	8009bcc <_strtod_l+0x98>
 8009b54:	2a08      	cmp	r2, #8
 8009b56:	d83b      	bhi.n	8009bd0 <_strtod_l+0x9c>
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	d044      	beq.n	8009be6 <_strtod_l+0xb2>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b60:	2100      	movs	r1, #0
 8009b62:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b64:	9109      	str	r1, [sp, #36]	; 0x24
 8009b66:	782a      	ldrb	r2, [r5, #0]
 8009b68:	2a30      	cmp	r2, #48	; 0x30
 8009b6a:	d000      	beq.n	8009b6e <_strtod_l+0x3a>
 8009b6c:	e085      	b.n	8009c7a <_strtod_l+0x146>
 8009b6e:	786a      	ldrb	r2, [r5, #1]
 8009b70:	3120      	adds	r1, #32
 8009b72:	438a      	bics	r2, r1
 8009b74:	2a58      	cmp	r2, #88	; 0x58
 8009b76:	d000      	beq.n	8009b7a <_strtod_l+0x46>
 8009b78:	e075      	b.n	8009c66 <_strtod_l+0x132>
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b7e:	4a97      	ldr	r2, [pc, #604]	; (8009ddc <_strtod_l+0x2a8>)
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	ab1c      	add	r3, sp, #112	; 0x70
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	9804      	ldr	r0, [sp, #16]
 8009b88:	ab1d      	add	r3, sp, #116	; 0x74
 8009b8a:	a91b      	add	r1, sp, #108	; 0x6c
 8009b8c:	f001 fa92 	bl	800b0b4 <__gethex>
 8009b90:	230f      	movs	r3, #15
 8009b92:	0002      	movs	r2, r0
 8009b94:	401a      	ands	r2, r3
 8009b96:	0004      	movs	r4, r0
 8009b98:	9205      	str	r2, [sp, #20]
 8009b9a:	4218      	tst	r0, r3
 8009b9c:	d005      	beq.n	8009baa <_strtod_l+0x76>
 8009b9e:	2a06      	cmp	r2, #6
 8009ba0:	d12d      	bne.n	8009bfe <_strtod_l+0xca>
 8009ba2:	1c6b      	adds	r3, r5, #1
 8009ba4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <_strtod_l+0x82>
 8009bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01b      	beq.n	8009bf4 <_strtod_l+0xc0>
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	0032      	movs	r2, r6
 8009bc0:	061b      	lsls	r3, r3, #24
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	0010      	movs	r0, r2
 8009bc6:	0019      	movs	r1, r3
 8009bc8:	b021      	add	sp, #132	; 0x84
 8009bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bcc:	2a20      	cmp	r2, #32
 8009bce:	d1c5      	bne.n	8009b5c <_strtod_l+0x28>
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	e7b8      	b.n	8009b46 <_strtod_l+0x12>
 8009bd4:	2a2d      	cmp	r2, #45	; 0x2d
 8009bd6:	d1c1      	bne.n	8009b5c <_strtod_l+0x28>
 8009bd8:	3a2c      	subs	r2, #44	; 0x2c
 8009bda:	920f      	str	r2, [sp, #60]	; 0x3c
 8009bdc:	1c4a      	adds	r2, r1, #1
 8009bde:	921b      	str	r2, [sp, #108]	; 0x6c
 8009be0:	784a      	ldrb	r2, [r1, #1]
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d1bc      	bne.n	8009b60 <_strtod_l+0x2c>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bea:	2300      	movs	r3, #0
 8009bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1dd      	bne.n	8009bb0 <_strtod_l+0x7c>
 8009bf4:	0032      	movs	r2, r6
 8009bf6:	003b      	movs	r3, r7
 8009bf8:	e7e4      	b.n	8009bc4 <_strtod_l+0x90>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	e7ed      	b.n	8009bda <_strtod_l+0xa6>
 8009bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	d007      	beq.n	8009c14 <_strtod_l+0xe0>
 8009c04:	2135      	movs	r1, #53	; 0x35
 8009c06:	a81e      	add	r0, sp, #120	; 0x78
 8009c08:	f002 f97f 	bl	800bf0a <__copybits>
 8009c0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c0e:	9804      	ldr	r0, [sp, #16]
 8009c10:	f001 fd7c 	bl	800b70c <_Bfree>
 8009c14:	9805      	ldr	r0, [sp, #20]
 8009c16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c18:	3801      	subs	r0, #1
 8009c1a:	2804      	cmp	r0, #4
 8009c1c:	d806      	bhi.n	8009c2c <_strtod_l+0xf8>
 8009c1e:	f7f6 fa79 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009c22:	0312      	.short	0x0312
 8009c24:	1e1c      	.short	0x1e1c
 8009c26:	12          	.byte	0x12
 8009c27:	00          	.byte	0x00
 8009c28:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c2a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009c2c:	05e4      	lsls	r4, r4, #23
 8009c2e:	d502      	bpl.n	8009c36 <_strtod_l+0x102>
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	431f      	orrs	r7, r3
 8009c36:	4b6a      	ldr	r3, [pc, #424]	; (8009de0 <_strtod_l+0x2ac>)
 8009c38:	423b      	tst	r3, r7
 8009c3a:	d1b6      	bne.n	8009baa <_strtod_l+0x76>
 8009c3c:	f001 f86a 	bl	800ad14 <__errno>
 8009c40:	2322      	movs	r3, #34	; 0x22
 8009c42:	6003      	str	r3, [r0, #0]
 8009c44:	e7b1      	b.n	8009baa <_strtod_l+0x76>
 8009c46:	4967      	ldr	r1, [pc, #412]	; (8009de4 <_strtod_l+0x2b0>)
 8009c48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c4a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c4c:	400a      	ands	r2, r1
 8009c4e:	4966      	ldr	r1, [pc, #408]	; (8009de8 <_strtod_l+0x2b4>)
 8009c50:	185b      	adds	r3, r3, r1
 8009c52:	051b      	lsls	r3, r3, #20
 8009c54:	431a      	orrs	r2, r3
 8009c56:	0017      	movs	r7, r2
 8009c58:	e7e8      	b.n	8009c2c <_strtod_l+0xf8>
 8009c5a:	4f61      	ldr	r7, [pc, #388]	; (8009de0 <_strtod_l+0x2ac>)
 8009c5c:	e7e6      	b.n	8009c2c <_strtod_l+0xf8>
 8009c5e:	2601      	movs	r6, #1
 8009c60:	4f62      	ldr	r7, [pc, #392]	; (8009dec <_strtod_l+0x2b8>)
 8009c62:	4276      	negs	r6, r6
 8009c64:	e7e2      	b.n	8009c2c <_strtod_l+0xf8>
 8009c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b30      	cmp	r3, #48	; 0x30
 8009c70:	d0f9      	beq.n	8009c66 <_strtod_l+0x132>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d099      	beq.n	8009baa <_strtod_l+0x76>
 8009c76:	2301      	movs	r3, #1
 8009c78:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c80:	950d      	str	r5, [sp, #52]	; 0x34
 8009c82:	9310      	str	r3, [sp, #64]	; 0x40
 8009c84:	9508      	str	r5, [sp, #32]
 8009c86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c88:	7804      	ldrb	r4, [r0, #0]
 8009c8a:	0023      	movs	r3, r4
 8009c8c:	3b30      	subs	r3, #48	; 0x30
 8009c8e:	b2d9      	uxtb	r1, r3
 8009c90:	2909      	cmp	r1, #9
 8009c92:	d927      	bls.n	8009ce4 <_strtod_l+0x1b0>
 8009c94:	2201      	movs	r2, #1
 8009c96:	4956      	ldr	r1, [pc, #344]	; (8009df0 <_strtod_l+0x2bc>)
 8009c98:	f000 ff98 	bl	800abcc <strncmp>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d031      	beq.n	8009d04 <_strtod_l+0x1d0>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	0023      	movs	r3, r4
 8009ca4:	4684      	mov	ip, r0
 8009ca6:	9a08      	ldr	r2, [sp, #32]
 8009ca8:	900c      	str	r0, [sp, #48]	; 0x30
 8009caa:	9205      	str	r2, [sp, #20]
 8009cac:	2220      	movs	r2, #32
 8009cae:	0019      	movs	r1, r3
 8009cb0:	4391      	bics	r1, r2
 8009cb2:	000a      	movs	r2, r1
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	9106      	str	r1, [sp, #24]
 8009cb8:	2a45      	cmp	r2, #69	; 0x45
 8009cba:	d000      	beq.n	8009cbe <_strtod_l+0x18a>
 8009cbc:	e0c2      	b.n	8009e44 <_strtod_l+0x310>
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc2:	4303      	orrs	r3, r0
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	428b      	cmp	r3, r1
 8009cc8:	d08d      	beq.n	8009be6 <_strtod_l+0xb2>
 8009cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	2b2b      	cmp	r3, #43	; 0x2b
 8009cd8:	d071      	beq.n	8009dbe <_strtod_l+0x28a>
 8009cda:	000c      	movs	r4, r1
 8009cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8009cde:	d174      	bne.n	8009dca <_strtod_l+0x296>
 8009ce0:	2401      	movs	r4, #1
 8009ce2:	e06d      	b.n	8009dc0 <_strtod_l+0x28c>
 8009ce4:	9908      	ldr	r1, [sp, #32]
 8009ce6:	2908      	cmp	r1, #8
 8009ce8:	dc09      	bgt.n	8009cfe <_strtod_l+0x1ca>
 8009cea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cec:	4351      	muls	r1, r2
 8009cee:	185b      	adds	r3, r3, r1
 8009cf0:	930d      	str	r3, [sp, #52]	; 0x34
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	9308      	str	r3, [sp, #32]
 8009cfa:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cfc:	e7c3      	b.n	8009c86 <_strtod_l+0x152>
 8009cfe:	4355      	muls	r5, r2
 8009d00:	195d      	adds	r5, r3, r5
 8009d02:	e7f6      	b.n	8009cf2 <_strtod_l+0x1be>
 8009d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d0a:	9a08      	ldr	r2, [sp, #32]
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d03a      	beq.n	8009d88 <_strtod_l+0x254>
 8009d12:	900c      	str	r0, [sp, #48]	; 0x30
 8009d14:	9205      	str	r2, [sp, #20]
 8009d16:	001a      	movs	r2, r3
 8009d18:	3a30      	subs	r2, #48	; 0x30
 8009d1a:	2a09      	cmp	r2, #9
 8009d1c:	d912      	bls.n	8009d44 <_strtod_l+0x210>
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4694      	mov	ip, r2
 8009d22:	e7c3      	b.n	8009cac <_strtod_l+0x178>
 8009d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d26:	3001      	adds	r0, #1
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b30      	cmp	r3, #48	; 0x30
 8009d30:	d0f8      	beq.n	8009d24 <_strtod_l+0x1f0>
 8009d32:	001a      	movs	r2, r3
 8009d34:	3a31      	subs	r2, #49	; 0x31
 8009d36:	2a08      	cmp	r2, #8
 8009d38:	d83c      	bhi.n	8009db4 <_strtod_l+0x280>
 8009d3a:	900c      	str	r0, [sp, #48]	; 0x30
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d40:	9005      	str	r0, [sp, #20]
 8009d42:	9210      	str	r2, [sp, #64]	; 0x40
 8009d44:	001a      	movs	r2, r3
 8009d46:	1c41      	adds	r1, r0, #1
 8009d48:	3a30      	subs	r2, #48	; 0x30
 8009d4a:	2b30      	cmp	r3, #48	; 0x30
 8009d4c:	d016      	beq.n	8009d7c <_strtod_l+0x248>
 8009d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d50:	185b      	adds	r3, r3, r1
 8009d52:	930c      	str	r3, [sp, #48]	; 0x30
 8009d54:	9b05      	ldr	r3, [sp, #20]
 8009d56:	210a      	movs	r1, #10
 8009d58:	469c      	mov	ip, r3
 8009d5a:	4484      	add	ip, r0
 8009d5c:	4563      	cmp	r3, ip
 8009d5e:	d115      	bne.n	8009d8c <_strtod_l+0x258>
 8009d60:	9905      	ldr	r1, [sp, #20]
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	3101      	adds	r1, #1
 8009d66:	1809      	adds	r1, r1, r0
 8009d68:	181b      	adds	r3, r3, r0
 8009d6a:	9105      	str	r1, [sp, #20]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	dc19      	bgt.n	8009da4 <_strtod_l+0x270>
 8009d70:	230a      	movs	r3, #10
 8009d72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d74:	434b      	muls	r3, r1
 8009d76:	2100      	movs	r1, #0
 8009d78:	18d3      	adds	r3, r2, r3
 8009d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d7e:	0008      	movs	r0, r1
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	e7c6      	b.n	8009d16 <_strtod_l+0x1e2>
 8009d88:	9808      	ldr	r0, [sp, #32]
 8009d8a:	e7d0      	b.n	8009d2e <_strtod_l+0x1fa>
 8009d8c:	1c5c      	adds	r4, r3, #1
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	dc04      	bgt.n	8009d9c <_strtod_l+0x268>
 8009d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d94:	434b      	muls	r3, r1
 8009d96:	930d      	str	r3, [sp, #52]	; 0x34
 8009d98:	0023      	movs	r3, r4
 8009d9a:	e7df      	b.n	8009d5c <_strtod_l+0x228>
 8009d9c:	2c10      	cmp	r4, #16
 8009d9e:	dcfb      	bgt.n	8009d98 <_strtod_l+0x264>
 8009da0:	434d      	muls	r5, r1
 8009da2:	e7f9      	b.n	8009d98 <_strtod_l+0x264>
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	2100      	movs	r1, #0
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	dce7      	bgt.n	8009d7c <_strtod_l+0x248>
 8009dac:	230a      	movs	r3, #10
 8009dae:	435d      	muls	r5, r3
 8009db0:	1955      	adds	r5, r2, r5
 8009db2:	e7e3      	b.n	8009d7c <_strtod_l+0x248>
 8009db4:	2200      	movs	r2, #0
 8009db6:	920c      	str	r2, [sp, #48]	; 0x30
 8009db8:	9205      	str	r2, [sp, #20]
 8009dba:	3201      	adds	r2, #1
 8009dbc:	e7b0      	b.n	8009d20 <_strtod_l+0x1ec>
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	789b      	ldrb	r3, [r3, #2]
 8009dca:	001a      	movs	r2, r3
 8009dcc:	3a30      	subs	r2, #48	; 0x30
 8009dce:	2a09      	cmp	r2, #9
 8009dd0:	d914      	bls.n	8009dfc <_strtod_l+0x2c8>
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	e033      	b.n	8009e42 <_strtod_l+0x30e>
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	08012f2c 	.word	0x08012f2c
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	ffefffff 	.word	0xffefffff
 8009de8:	00000433 	.word	0x00000433
 8009dec:	7fffffff 	.word	0x7fffffff
 8009df0:	08012f28 	.word	0x08012f28
 8009df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2b30      	cmp	r3, #48	; 0x30
 8009dfe:	d0f9      	beq.n	8009df4 <_strtod_l+0x2c0>
 8009e00:	2200      	movs	r2, #0
 8009e02:	9206      	str	r2, [sp, #24]
 8009e04:	001a      	movs	r2, r3
 8009e06:	3a31      	subs	r2, #49	; 0x31
 8009e08:	2a08      	cmp	r2, #8
 8009e0a:	d81b      	bhi.n	8009e44 <_strtod_l+0x310>
 8009e0c:	3b30      	subs	r3, #48	; 0x30
 8009e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e16:	1c59      	adds	r1, r3, #1
 8009e18:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	001a      	movs	r2, r3
 8009e1e:	3a30      	subs	r2, #48	; 0x30
 8009e20:	2a09      	cmp	r2, #9
 8009e22:	d93a      	bls.n	8009e9a <_strtod_l+0x366>
 8009e24:	9a06      	ldr	r2, [sp, #24]
 8009e26:	1a8a      	subs	r2, r1, r2
 8009e28:	49b2      	ldr	r1, [pc, #712]	; (800a0f4 <_strtod_l+0x5c0>)
 8009e2a:	9106      	str	r1, [sp, #24]
 8009e2c:	2a08      	cmp	r2, #8
 8009e2e:	dc04      	bgt.n	8009e3a <_strtod_l+0x306>
 8009e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e32:	9206      	str	r2, [sp, #24]
 8009e34:	428a      	cmp	r2, r1
 8009e36:	dd00      	ble.n	8009e3a <_strtod_l+0x306>
 8009e38:	9106      	str	r1, [sp, #24]
 8009e3a:	2c00      	cmp	r4, #0
 8009e3c:	d002      	beq.n	8009e44 <_strtod_l+0x310>
 8009e3e:	9a06      	ldr	r2, [sp, #24]
 8009e40:	4252      	negs	r2, r2
 8009e42:	9206      	str	r2, [sp, #24]
 8009e44:	9a05      	ldr	r2, [sp, #20]
 8009e46:	2a00      	cmp	r2, #0
 8009e48:	d14d      	bne.n	8009ee6 <_strtod_l+0x3b2>
 8009e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4c:	4310      	orrs	r0, r2
 8009e4e:	d000      	beq.n	8009e52 <_strtod_l+0x31e>
 8009e50:	e6ab      	b.n	8009baa <_strtod_l+0x76>
 8009e52:	4662      	mov	r2, ip
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	d000      	beq.n	8009e5a <_strtod_l+0x326>
 8009e58:	e6c5      	b.n	8009be6 <_strtod_l+0xb2>
 8009e5a:	2b69      	cmp	r3, #105	; 0x69
 8009e5c:	d027      	beq.n	8009eae <_strtod_l+0x37a>
 8009e5e:	dc23      	bgt.n	8009ea8 <_strtod_l+0x374>
 8009e60:	2b49      	cmp	r3, #73	; 0x49
 8009e62:	d024      	beq.n	8009eae <_strtod_l+0x37a>
 8009e64:	2b4e      	cmp	r3, #78	; 0x4e
 8009e66:	d000      	beq.n	8009e6a <_strtod_l+0x336>
 8009e68:	e6bd      	b.n	8009be6 <_strtod_l+0xb2>
 8009e6a:	49a3      	ldr	r1, [pc, #652]	; (800a0f8 <_strtod_l+0x5c4>)
 8009e6c:	a81b      	add	r0, sp, #108	; 0x6c
 8009e6e:	f001 fb57 	bl	800b520 <__match>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d100      	bne.n	8009e78 <_strtod_l+0x344>
 8009e76:	e6b6      	b.n	8009be6 <_strtod_l+0xb2>
 8009e78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b28      	cmp	r3, #40	; 0x28
 8009e7e:	d12c      	bne.n	8009eda <_strtod_l+0x3a6>
 8009e80:	499e      	ldr	r1, [pc, #632]	; (800a0fc <_strtod_l+0x5c8>)
 8009e82:	aa1e      	add	r2, sp, #120	; 0x78
 8009e84:	a81b      	add	r0, sp, #108	; 0x6c
 8009e86:	f001 fb5f 	bl	800b548 <__hexnan>
 8009e8a:	2805      	cmp	r0, #5
 8009e8c:	d125      	bne.n	8009eda <_strtod_l+0x3a6>
 8009e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e90:	4a9b      	ldr	r2, [pc, #620]	; (800a100 <_strtod_l+0x5cc>)
 8009e92:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009e94:	431a      	orrs	r2, r3
 8009e96:	0017      	movs	r7, r2
 8009e98:	e687      	b.n	8009baa <_strtod_l+0x76>
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e9e:	434a      	muls	r2, r1
 8009ea0:	18d2      	adds	r2, r2, r3
 8009ea2:	3a30      	subs	r2, #48	; 0x30
 8009ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8009ea6:	e7b5      	b.n	8009e14 <_strtod_l+0x2e0>
 8009ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8009eaa:	d0de      	beq.n	8009e6a <_strtod_l+0x336>
 8009eac:	e69b      	b.n	8009be6 <_strtod_l+0xb2>
 8009eae:	4995      	ldr	r1, [pc, #596]	; (800a104 <_strtod_l+0x5d0>)
 8009eb0:	a81b      	add	r0, sp, #108	; 0x6c
 8009eb2:	f001 fb35 	bl	800b520 <__match>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d100      	bne.n	8009ebc <_strtod_l+0x388>
 8009eba:	e694      	b.n	8009be6 <_strtod_l+0xb2>
 8009ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ebe:	4992      	ldr	r1, [pc, #584]	; (800a108 <_strtod_l+0x5d4>)
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	a81b      	add	r0, sp, #108	; 0x6c
 8009ec4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec6:	f001 fb2b 	bl	800b520 <__match>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d102      	bne.n	8009ed4 <_strtod_l+0x3a0>
 8009ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	4f8a      	ldr	r7, [pc, #552]	; (800a100 <_strtod_l+0x5cc>)
 8009ed8:	e667      	b.n	8009baa <_strtod_l+0x76>
 8009eda:	488c      	ldr	r0, [pc, #560]	; (800a10c <_strtod_l+0x5d8>)
 8009edc:	f000 ff5c 	bl	800ad98 <nan>
 8009ee0:	0006      	movs	r6, r0
 8009ee2:	000f      	movs	r7, r1
 8009ee4:	e661      	b.n	8009baa <_strtod_l+0x76>
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	9309      	str	r3, [sp, #36]	; 0x24
 8009eee:	9b08      	ldr	r3, [sp, #32]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <_strtod_l+0x3c4>
 8009ef4:	9b05      	ldr	r3, [sp, #20]
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	9c05      	ldr	r4, [sp, #20]
 8009efa:	2c10      	cmp	r4, #16
 8009efc:	dd00      	ble.n	8009f00 <_strtod_l+0x3cc>
 8009efe:	2410      	movs	r4, #16
 8009f00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f02:	f7f8 fa7b 	bl	80023fc <__aeabi_ui2d>
 8009f06:	9b05      	ldr	r3, [sp, #20]
 8009f08:	0006      	movs	r6, r0
 8009f0a:	000f      	movs	r7, r1
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	dd15      	ble.n	8009f3c <_strtod_l+0x408>
 8009f10:	0022      	movs	r2, r4
 8009f12:	4b7f      	ldr	r3, [pc, #508]	; (800a110 <_strtod_l+0x5dc>)
 8009f14:	3a09      	subs	r2, #9
 8009f16:	00d2      	lsls	r2, r2, #3
 8009f18:	189b      	adds	r3, r3, r2
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f7f7 fba5 	bl	800166c <__aeabi_dmul>
 8009f22:	0006      	movs	r6, r0
 8009f24:	0028      	movs	r0, r5
 8009f26:	000f      	movs	r7, r1
 8009f28:	f7f8 fa68 	bl	80023fc <__aeabi_ui2d>
 8009f2c:	0002      	movs	r2, r0
 8009f2e:	000b      	movs	r3, r1
 8009f30:	0030      	movs	r0, r6
 8009f32:	0039      	movs	r1, r7
 8009f34:	f7f6 fc40 	bl	80007b8 <__aeabi_dadd>
 8009f38:	0006      	movs	r6, r0
 8009f3a:	000f      	movs	r7, r1
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	2b0f      	cmp	r3, #15
 8009f40:	dc39      	bgt.n	8009fb6 <_strtod_l+0x482>
 8009f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d100      	bne.n	8009f4a <_strtod_l+0x416>
 8009f48:	e62f      	b.n	8009baa <_strtod_l+0x76>
 8009f4a:	dd24      	ble.n	8009f96 <_strtod_l+0x462>
 8009f4c:	2b16      	cmp	r3, #22
 8009f4e:	dc09      	bgt.n	8009f64 <_strtod_l+0x430>
 8009f50:	496f      	ldr	r1, [pc, #444]	; (800a110 <_strtod_l+0x5dc>)
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	18c9      	adds	r1, r1, r3
 8009f56:	0032      	movs	r2, r6
 8009f58:	6808      	ldr	r0, [r1, #0]
 8009f5a:	6849      	ldr	r1, [r1, #4]
 8009f5c:	003b      	movs	r3, r7
 8009f5e:	f7f7 fb85 	bl	800166c <__aeabi_dmul>
 8009f62:	e7bd      	b.n	8009ee0 <_strtod_l+0x3ac>
 8009f64:	2325      	movs	r3, #37	; 0x25
 8009f66:	9a05      	ldr	r2, [sp, #20]
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	db22      	blt.n	8009fb6 <_strtod_l+0x482>
 8009f70:	240f      	movs	r4, #15
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	4d66      	ldr	r5, [pc, #408]	; (800a110 <_strtod_l+0x5dc>)
 8009f76:	1ae4      	subs	r4, r4, r3
 8009f78:	00e1      	lsls	r1, r4, #3
 8009f7a:	1869      	adds	r1, r5, r1
 8009f7c:	0032      	movs	r2, r6
 8009f7e:	6808      	ldr	r0, [r1, #0]
 8009f80:	6849      	ldr	r1, [r1, #4]
 8009f82:	003b      	movs	r3, r7
 8009f84:	f7f7 fb72 	bl	800166c <__aeabi_dmul>
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	1b1c      	subs	r4, r3, r4
 8009f8c:	00e4      	lsls	r4, r4, #3
 8009f8e:	192d      	adds	r5, r5, r4
 8009f90:	682a      	ldr	r2, [r5, #0]
 8009f92:	686b      	ldr	r3, [r5, #4]
 8009f94:	e7e3      	b.n	8009f5e <_strtod_l+0x42a>
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	3316      	adds	r3, #22
 8009f9a:	db0c      	blt.n	8009fb6 <_strtod_l+0x482>
 8009f9c:	9906      	ldr	r1, [sp, #24]
 8009f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fa0:	4b5b      	ldr	r3, [pc, #364]	; (800a110 <_strtod_l+0x5dc>)
 8009fa2:	1a52      	subs	r2, r2, r1
 8009fa4:	00d2      	lsls	r2, r2, #3
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	0030      	movs	r0, r6
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	0039      	movs	r1, r7
 8009fb0:	f7f6 ff62 	bl	8000e78 <__aeabi_ddiv>
 8009fb4:	e794      	b.n	8009ee0 <_strtod_l+0x3ac>
 8009fb6:	9b05      	ldr	r3, [sp, #20]
 8009fb8:	1b1c      	subs	r4, r3, r4
 8009fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fbc:	18e4      	adds	r4, r4, r3
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	dd72      	ble.n	800a0a8 <_strtod_l+0x574>
 8009fc2:	220f      	movs	r2, #15
 8009fc4:	0023      	movs	r3, r4
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	4214      	tst	r4, r2
 8009fca:	d00a      	beq.n	8009fe2 <_strtod_l+0x4ae>
 8009fcc:	4950      	ldr	r1, [pc, #320]	; (800a110 <_strtod_l+0x5dc>)
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	18c9      	adds	r1, r1, r3
 8009fd2:	0032      	movs	r2, r6
 8009fd4:	6808      	ldr	r0, [r1, #0]
 8009fd6:	6849      	ldr	r1, [r1, #4]
 8009fd8:	003b      	movs	r3, r7
 8009fda:	f7f7 fb47 	bl	800166c <__aeabi_dmul>
 8009fde:	0006      	movs	r6, r0
 8009fe0:	000f      	movs	r7, r1
 8009fe2:	230f      	movs	r3, #15
 8009fe4:	439c      	bics	r4, r3
 8009fe6:	d04a      	beq.n	800a07e <_strtod_l+0x54a>
 8009fe8:	3326      	adds	r3, #38	; 0x26
 8009fea:	33ff      	adds	r3, #255	; 0xff
 8009fec:	429c      	cmp	r4, r3
 8009fee:	dd22      	ble.n	800a036 <_strtod_l+0x502>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9305      	str	r3, [sp, #20]
 8009ff4:	9306      	str	r3, [sp, #24]
 8009ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff8:	9308      	str	r3, [sp, #32]
 8009ffa:	2322      	movs	r3, #34	; 0x22
 8009ffc:	2600      	movs	r6, #0
 8009ffe:	9a04      	ldr	r2, [sp, #16]
 800a000:	4f3f      	ldr	r7, [pc, #252]	; (800a100 <_strtod_l+0x5cc>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a006:	42b3      	cmp	r3, r6
 800a008:	d100      	bne.n	800a00c <_strtod_l+0x4d8>
 800a00a:	e5ce      	b.n	8009baa <_strtod_l+0x76>
 800a00c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a00e:	9804      	ldr	r0, [sp, #16]
 800a010:	f001 fb7c 	bl	800b70c <_Bfree>
 800a014:	9908      	ldr	r1, [sp, #32]
 800a016:	9804      	ldr	r0, [sp, #16]
 800a018:	f001 fb78 	bl	800b70c <_Bfree>
 800a01c:	9906      	ldr	r1, [sp, #24]
 800a01e:	9804      	ldr	r0, [sp, #16]
 800a020:	f001 fb74 	bl	800b70c <_Bfree>
 800a024:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a026:	9804      	ldr	r0, [sp, #16]
 800a028:	f001 fb70 	bl	800b70c <_Bfree>
 800a02c:	9905      	ldr	r1, [sp, #20]
 800a02e:	9804      	ldr	r0, [sp, #16]
 800a030:	f001 fb6c 	bl	800b70c <_Bfree>
 800a034:	e5b9      	b.n	8009baa <_strtod_l+0x76>
 800a036:	2300      	movs	r3, #0
 800a038:	0030      	movs	r0, r6
 800a03a:	0039      	movs	r1, r7
 800a03c:	4d35      	ldr	r5, [pc, #212]	; (800a114 <_strtod_l+0x5e0>)
 800a03e:	1124      	asrs	r4, r4, #4
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	2c01      	cmp	r4, #1
 800a044:	dc1e      	bgt.n	800a084 <_strtod_l+0x550>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <_strtod_l+0x51a>
 800a04a:	0006      	movs	r6, r0
 800a04c:	000f      	movs	r7, r1
 800a04e:	4b32      	ldr	r3, [pc, #200]	; (800a118 <_strtod_l+0x5e4>)
 800a050:	9a07      	ldr	r2, [sp, #28]
 800a052:	18ff      	adds	r7, r7, r3
 800a054:	4b2f      	ldr	r3, [pc, #188]	; (800a114 <_strtod_l+0x5e0>)
 800a056:	00d2      	lsls	r2, r2, #3
 800a058:	189d      	adds	r5, r3, r2
 800a05a:	6828      	ldr	r0, [r5, #0]
 800a05c:	6869      	ldr	r1, [r5, #4]
 800a05e:	0032      	movs	r2, r6
 800a060:	003b      	movs	r3, r7
 800a062:	f7f7 fb03 	bl	800166c <__aeabi_dmul>
 800a066:	4b26      	ldr	r3, [pc, #152]	; (800a100 <_strtod_l+0x5cc>)
 800a068:	4a2c      	ldr	r2, [pc, #176]	; (800a11c <_strtod_l+0x5e8>)
 800a06a:	0006      	movs	r6, r0
 800a06c:	400b      	ands	r3, r1
 800a06e:	4293      	cmp	r3, r2
 800a070:	d8be      	bhi.n	8009ff0 <_strtod_l+0x4bc>
 800a072:	4a2b      	ldr	r2, [pc, #172]	; (800a120 <_strtod_l+0x5ec>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d913      	bls.n	800a0a0 <_strtod_l+0x56c>
 800a078:	2601      	movs	r6, #1
 800a07a:	4f2a      	ldr	r7, [pc, #168]	; (800a124 <_strtod_l+0x5f0>)
 800a07c:	4276      	negs	r6, r6
 800a07e:	2300      	movs	r3, #0
 800a080:	9307      	str	r3, [sp, #28]
 800a082:	e088      	b.n	800a196 <_strtod_l+0x662>
 800a084:	2201      	movs	r2, #1
 800a086:	4214      	tst	r4, r2
 800a088:	d004      	beq.n	800a094 <_strtod_l+0x560>
 800a08a:	682a      	ldr	r2, [r5, #0]
 800a08c:	686b      	ldr	r3, [r5, #4]
 800a08e:	f7f7 faed 	bl	800166c <__aeabi_dmul>
 800a092:	2301      	movs	r3, #1
 800a094:	9a07      	ldr	r2, [sp, #28]
 800a096:	1064      	asrs	r4, r4, #1
 800a098:	3201      	adds	r2, #1
 800a09a:	9207      	str	r2, [sp, #28]
 800a09c:	3508      	adds	r5, #8
 800a09e:	e7d0      	b.n	800a042 <_strtod_l+0x50e>
 800a0a0:	23d4      	movs	r3, #212	; 0xd4
 800a0a2:	049b      	lsls	r3, r3, #18
 800a0a4:	18cf      	adds	r7, r1, r3
 800a0a6:	e7ea      	b.n	800a07e <_strtod_l+0x54a>
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	d0e8      	beq.n	800a07e <_strtod_l+0x54a>
 800a0ac:	4264      	negs	r4, r4
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	0022      	movs	r2, r4
 800a0b2:	401a      	ands	r2, r3
 800a0b4:	421c      	tst	r4, r3
 800a0b6:	d00a      	beq.n	800a0ce <_strtod_l+0x59a>
 800a0b8:	4b15      	ldr	r3, [pc, #84]	; (800a110 <_strtod_l+0x5dc>)
 800a0ba:	00d2      	lsls	r2, r2, #3
 800a0bc:	189b      	adds	r3, r3, r2
 800a0be:	0030      	movs	r0, r6
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	0039      	movs	r1, r7
 800a0c6:	f7f6 fed7 	bl	8000e78 <__aeabi_ddiv>
 800a0ca:	0006      	movs	r6, r0
 800a0cc:	000f      	movs	r7, r1
 800a0ce:	1124      	asrs	r4, r4, #4
 800a0d0:	d0d5      	beq.n	800a07e <_strtod_l+0x54a>
 800a0d2:	2c1f      	cmp	r4, #31
 800a0d4:	dd28      	ble.n	800a128 <_strtod_l+0x5f4>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	9306      	str	r3, [sp, #24]
 800a0dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a0de:	9308      	str	r3, [sp, #32]
 800a0e0:	2322      	movs	r3, #34	; 0x22
 800a0e2:	9a04      	ldr	r2, [sp, #16]
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ea:	2700      	movs	r7, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d18d      	bne.n	800a00c <_strtod_l+0x4d8>
 800a0f0:	e55b      	b.n	8009baa <_strtod_l+0x76>
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	00004e1f 	.word	0x00004e1f
 800a0f8:	08013261 	.word	0x08013261
 800a0fc:	08012f40 	.word	0x08012f40
 800a100:	7ff00000 	.word	0x7ff00000
 800a104:	08013259 	.word	0x08013259
 800a108:	0801330f 	.word	0x0801330f
 800a10c:	0801330b 	.word	0x0801330b
 800a110:	08013180 	.word	0x08013180
 800a114:	08013158 	.word	0x08013158
 800a118:	fcb00000 	.word	0xfcb00000
 800a11c:	7ca00000 	.word	0x7ca00000
 800a120:	7c900000 	.word	0x7c900000
 800a124:	7fefffff 	.word	0x7fefffff
 800a128:	2310      	movs	r3, #16
 800a12a:	0022      	movs	r2, r4
 800a12c:	401a      	ands	r2, r3
 800a12e:	9207      	str	r2, [sp, #28]
 800a130:	421c      	tst	r4, r3
 800a132:	d001      	beq.n	800a138 <_strtod_l+0x604>
 800a134:	335a      	adds	r3, #90	; 0x5a
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	0030      	movs	r0, r6
 800a13a:	0039      	movs	r1, r7
 800a13c:	2300      	movs	r3, #0
 800a13e:	4dc4      	ldr	r5, [pc, #784]	; (800a450 <_strtod_l+0x91c>)
 800a140:	2201      	movs	r2, #1
 800a142:	4214      	tst	r4, r2
 800a144:	d004      	beq.n	800a150 <_strtod_l+0x61c>
 800a146:	682a      	ldr	r2, [r5, #0]
 800a148:	686b      	ldr	r3, [r5, #4]
 800a14a:	f7f7 fa8f 	bl	800166c <__aeabi_dmul>
 800a14e:	2301      	movs	r3, #1
 800a150:	1064      	asrs	r4, r4, #1
 800a152:	3508      	adds	r5, #8
 800a154:	2c00      	cmp	r4, #0
 800a156:	d1f3      	bne.n	800a140 <_strtod_l+0x60c>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <_strtod_l+0x62c>
 800a15c:	0006      	movs	r6, r0
 800a15e:	000f      	movs	r7, r1
 800a160:	9b07      	ldr	r3, [sp, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <_strtod_l+0x652>
 800a166:	236b      	movs	r3, #107	; 0x6b
 800a168:	007a      	lsls	r2, r7, #1
 800a16a:	0d52      	lsrs	r2, r2, #21
 800a16c:	0039      	movs	r1, r7
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	2b00      	cmp	r3, #0
 800a172:	dd08      	ble.n	800a186 <_strtod_l+0x652>
 800a174:	2b1f      	cmp	r3, #31
 800a176:	dc00      	bgt.n	800a17a <_strtod_l+0x646>
 800a178:	e121      	b.n	800a3be <_strtod_l+0x88a>
 800a17a:	2600      	movs	r6, #0
 800a17c:	2b34      	cmp	r3, #52	; 0x34
 800a17e:	dc00      	bgt.n	800a182 <_strtod_l+0x64e>
 800a180:	e116      	b.n	800a3b0 <_strtod_l+0x87c>
 800a182:	27dc      	movs	r7, #220	; 0xdc
 800a184:	04bf      	lsls	r7, r7, #18
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	0030      	movs	r0, r6
 800a18c:	0039      	movs	r1, r7
 800a18e:	f7f6 f95b 	bl	8000448 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	d19f      	bne.n	800a0d6 <_strtod_l+0x5a2>
 800a196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a198:	9a08      	ldr	r2, [sp, #32]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	9804      	ldr	r0, [sp, #16]
 800a1a2:	f001 fb01 	bl	800b7a8 <__s2b>
 800a1a6:	900d      	str	r0, [sp, #52]	; 0x34
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d100      	bne.n	800a1ae <_strtod_l+0x67a>
 800a1ac:	e720      	b.n	8009ff0 <_strtod_l+0x4bc>
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	9906      	ldr	r1, [sp, #24]
 800a1b2:	17da      	asrs	r2, r3, #31
 800a1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	401a      	ands	r2, r3
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	9215      	str	r2, [sp, #84]	; 0x54
 800a1be:	43db      	mvns	r3, r3
 800a1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c2:	17db      	asrs	r3, r3, #31
 800a1c4:	401a      	ands	r2, r3
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9218      	str	r2, [sp, #96]	; 0x60
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	9306      	str	r3, [sp, #24]
 800a1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d0:	9804      	ldr	r0, [sp, #16]
 800a1d2:	6859      	ldr	r1, [r3, #4]
 800a1d4:	f001 fa72 	bl	800b6bc <_Balloc>
 800a1d8:	9008      	str	r0, [sp, #32]
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d100      	bne.n	800a1e0 <_strtod_l+0x6ac>
 800a1de:	e70c      	b.n	8009ffa <_strtod_l+0x4c6>
 800a1e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	0019      	movs	r1, r3
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	310c      	adds	r1, #12
 800a1ea:	3202      	adds	r2, #2
 800a1ec:	0092      	lsls	r2, r2, #2
 800a1ee:	f000 fdca 	bl	800ad86 <memcpy>
 800a1f2:	ab1e      	add	r3, sp, #120	; 0x78
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	0032      	movs	r2, r6
 800a1fc:	003b      	movs	r3, r7
 800a1fe:	9804      	ldr	r0, [sp, #16]
 800a200:	9610      	str	r6, [sp, #64]	; 0x40
 800a202:	9711      	str	r7, [sp, #68]	; 0x44
 800a204:	f001 fdf8 	bl	800bdf8 <__d2b>
 800a208:	901c      	str	r0, [sp, #112]	; 0x70
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d100      	bne.n	800a210 <_strtod_l+0x6dc>
 800a20e:	e6f4      	b.n	8009ffa <_strtod_l+0x4c6>
 800a210:	2101      	movs	r1, #1
 800a212:	9804      	ldr	r0, [sp, #16]
 800a214:	f001 fb5c 	bl	800b8d0 <__i2b>
 800a218:	9006      	str	r0, [sp, #24]
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d100      	bne.n	800a220 <_strtod_l+0x6ec>
 800a21e:	e6ec      	b.n	8009ffa <_strtod_l+0x4c6>
 800a220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a224:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a226:	1ad4      	subs	r4, r2, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	db01      	blt.n	800a230 <_strtod_l+0x6fc>
 800a22c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a22e:	195d      	adds	r5, r3, r5
 800a230:	9907      	ldr	r1, [sp, #28]
 800a232:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a234:	1a5b      	subs	r3, r3, r1
 800a236:	2136      	movs	r1, #54	; 0x36
 800a238:	189b      	adds	r3, r3, r2
 800a23a:	1a8a      	subs	r2, r1, r2
 800a23c:	4985      	ldr	r1, [pc, #532]	; (800a454 <_strtod_l+0x920>)
 800a23e:	2001      	movs	r0, #1
 800a240:	468c      	mov	ip, r1
 800a242:	2100      	movs	r1, #0
 800a244:	3b01      	subs	r3, #1
 800a246:	9114      	str	r1, [sp, #80]	; 0x50
 800a248:	9012      	str	r0, [sp, #72]	; 0x48
 800a24a:	4563      	cmp	r3, ip
 800a24c:	da07      	bge.n	800a25e <_strtod_l+0x72a>
 800a24e:	4661      	mov	r1, ip
 800a250:	1ac9      	subs	r1, r1, r3
 800a252:	1a52      	subs	r2, r2, r1
 800a254:	291f      	cmp	r1, #31
 800a256:	dd00      	ble.n	800a25a <_strtod_l+0x726>
 800a258:	e0b6      	b.n	800a3c8 <_strtod_l+0x894>
 800a25a:	4088      	lsls	r0, r1
 800a25c:	9012      	str	r0, [sp, #72]	; 0x48
 800a25e:	18ab      	adds	r3, r5, r2
 800a260:	930c      	str	r3, [sp, #48]	; 0x30
 800a262:	18a4      	adds	r4, r4, r2
 800a264:	9b07      	ldr	r3, [sp, #28]
 800a266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a268:	191c      	adds	r4, r3, r4
 800a26a:	002b      	movs	r3, r5
 800a26c:	4295      	cmp	r5, r2
 800a26e:	dd00      	ble.n	800a272 <_strtod_l+0x73e>
 800a270:	0013      	movs	r3, r2
 800a272:	42a3      	cmp	r3, r4
 800a274:	dd00      	ble.n	800a278 <_strtod_l+0x744>
 800a276:	0023      	movs	r3, r4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dd04      	ble.n	800a286 <_strtod_l+0x752>
 800a27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27e:	1ae4      	subs	r4, r4, r3
 800a280:	1ad2      	subs	r2, r2, r3
 800a282:	920c      	str	r2, [sp, #48]	; 0x30
 800a284:	1aed      	subs	r5, r5, r3
 800a286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dd17      	ble.n	800a2bc <_strtod_l+0x788>
 800a28c:	001a      	movs	r2, r3
 800a28e:	9906      	ldr	r1, [sp, #24]
 800a290:	9804      	ldr	r0, [sp, #16]
 800a292:	f001 fbe5 	bl	800ba60 <__pow5mult>
 800a296:	9006      	str	r0, [sp, #24]
 800a298:	2800      	cmp	r0, #0
 800a29a:	d100      	bne.n	800a29e <_strtod_l+0x76a>
 800a29c:	e6ad      	b.n	8009ffa <_strtod_l+0x4c6>
 800a29e:	0001      	movs	r1, r0
 800a2a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a2a2:	9804      	ldr	r0, [sp, #16]
 800a2a4:	f001 fb2c 	bl	800b900 <__multiply>
 800a2a8:	900e      	str	r0, [sp, #56]	; 0x38
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d100      	bne.n	800a2b0 <_strtod_l+0x77c>
 800a2ae:	e6a4      	b.n	8009ffa <_strtod_l+0x4c6>
 800a2b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2b2:	9804      	ldr	r0, [sp, #16]
 800a2b4:	f001 fa2a 	bl	800b70c <_Bfree>
 800a2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ba:	931c      	str	r3, [sp, #112]	; 0x70
 800a2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd00      	ble.n	800a2c4 <_strtod_l+0x790>
 800a2c2:	e087      	b.n	800a3d4 <_strtod_l+0x8a0>
 800a2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd08      	ble.n	800a2dc <_strtod_l+0x7a8>
 800a2ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2cc:	9908      	ldr	r1, [sp, #32]
 800a2ce:	9804      	ldr	r0, [sp, #16]
 800a2d0:	f001 fbc6 	bl	800ba60 <__pow5mult>
 800a2d4:	9008      	str	r0, [sp, #32]
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d100      	bne.n	800a2dc <_strtod_l+0x7a8>
 800a2da:	e68e      	b.n	8009ffa <_strtod_l+0x4c6>
 800a2dc:	2c00      	cmp	r4, #0
 800a2de:	dd08      	ble.n	800a2f2 <_strtod_l+0x7be>
 800a2e0:	0022      	movs	r2, r4
 800a2e2:	9908      	ldr	r1, [sp, #32]
 800a2e4:	9804      	ldr	r0, [sp, #16]
 800a2e6:	f001 fbfd 	bl	800bae4 <__lshift>
 800a2ea:	9008      	str	r0, [sp, #32]
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d100      	bne.n	800a2f2 <_strtod_l+0x7be>
 800a2f0:	e683      	b.n	8009ffa <_strtod_l+0x4c6>
 800a2f2:	2d00      	cmp	r5, #0
 800a2f4:	dd08      	ble.n	800a308 <_strtod_l+0x7d4>
 800a2f6:	002a      	movs	r2, r5
 800a2f8:	9906      	ldr	r1, [sp, #24]
 800a2fa:	9804      	ldr	r0, [sp, #16]
 800a2fc:	f001 fbf2 	bl	800bae4 <__lshift>
 800a300:	9006      	str	r0, [sp, #24]
 800a302:	2800      	cmp	r0, #0
 800a304:	d100      	bne.n	800a308 <_strtod_l+0x7d4>
 800a306:	e678      	b.n	8009ffa <_strtod_l+0x4c6>
 800a308:	9a08      	ldr	r2, [sp, #32]
 800a30a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a30c:	9804      	ldr	r0, [sp, #16]
 800a30e:	f001 fc73 	bl	800bbf8 <__mdiff>
 800a312:	9005      	str	r0, [sp, #20]
 800a314:	2800      	cmp	r0, #0
 800a316:	d100      	bne.n	800a31a <_strtod_l+0x7e6>
 800a318:	e66f      	b.n	8009ffa <_strtod_l+0x4c6>
 800a31a:	2200      	movs	r2, #0
 800a31c:	68c3      	ldr	r3, [r0, #12]
 800a31e:	9906      	ldr	r1, [sp, #24]
 800a320:	60c2      	str	r2, [r0, #12]
 800a322:	930c      	str	r3, [sp, #48]	; 0x30
 800a324:	f001 fc4c 	bl	800bbc0 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	da5d      	bge.n	800a3e8 <_strtod_l+0x8b4>
 800a32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a32e:	4333      	orrs	r3, r6
 800a330:	d000      	beq.n	800a334 <_strtod_l+0x800>
 800a332:	e088      	b.n	800a446 <_strtod_l+0x912>
 800a334:	033b      	lsls	r3, r7, #12
 800a336:	d000      	beq.n	800a33a <_strtod_l+0x806>
 800a338:	e085      	b.n	800a446 <_strtod_l+0x912>
 800a33a:	22d6      	movs	r2, #214	; 0xd6
 800a33c:	4b46      	ldr	r3, [pc, #280]	; (800a458 <_strtod_l+0x924>)
 800a33e:	04d2      	lsls	r2, r2, #19
 800a340:	403b      	ands	r3, r7
 800a342:	4293      	cmp	r3, r2
 800a344:	d97f      	bls.n	800a446 <_strtod_l+0x912>
 800a346:	9b05      	ldr	r3, [sp, #20]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <_strtod_l+0x822>
 800a34e:	9b05      	ldr	r3, [sp, #20]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b01      	cmp	r3, #1
 800a354:	dd77      	ble.n	800a446 <_strtod_l+0x912>
 800a356:	9905      	ldr	r1, [sp, #20]
 800a358:	2201      	movs	r2, #1
 800a35a:	9804      	ldr	r0, [sp, #16]
 800a35c:	f001 fbc2 	bl	800bae4 <__lshift>
 800a360:	9906      	ldr	r1, [sp, #24]
 800a362:	9005      	str	r0, [sp, #20]
 800a364:	f001 fc2c 	bl	800bbc0 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dd6c      	ble.n	800a446 <_strtod_l+0x912>
 800a36c:	9907      	ldr	r1, [sp, #28]
 800a36e:	003b      	movs	r3, r7
 800a370:	4a39      	ldr	r2, [pc, #228]	; (800a458 <_strtod_l+0x924>)
 800a372:	2900      	cmp	r1, #0
 800a374:	d100      	bne.n	800a378 <_strtod_l+0x844>
 800a376:	e094      	b.n	800a4a2 <_strtod_l+0x96e>
 800a378:	0011      	movs	r1, r2
 800a37a:	20d6      	movs	r0, #214	; 0xd6
 800a37c:	4039      	ands	r1, r7
 800a37e:	04c0      	lsls	r0, r0, #19
 800a380:	4281      	cmp	r1, r0
 800a382:	dd00      	ble.n	800a386 <_strtod_l+0x852>
 800a384:	e08d      	b.n	800a4a2 <_strtod_l+0x96e>
 800a386:	23dc      	movs	r3, #220	; 0xdc
 800a388:	049b      	lsls	r3, r3, #18
 800a38a:	4299      	cmp	r1, r3
 800a38c:	dc00      	bgt.n	800a390 <_strtod_l+0x85c>
 800a38e:	e6a7      	b.n	800a0e0 <_strtod_l+0x5ac>
 800a390:	0030      	movs	r0, r6
 800a392:	0039      	movs	r1, r7
 800a394:	4b31      	ldr	r3, [pc, #196]	; (800a45c <_strtod_l+0x928>)
 800a396:	2200      	movs	r2, #0
 800a398:	f7f7 f968 	bl	800166c <__aeabi_dmul>
 800a39c:	4b2e      	ldr	r3, [pc, #184]	; (800a458 <_strtod_l+0x924>)
 800a39e:	0006      	movs	r6, r0
 800a3a0:	000f      	movs	r7, r1
 800a3a2:	420b      	tst	r3, r1
 800a3a4:	d000      	beq.n	800a3a8 <_strtod_l+0x874>
 800a3a6:	e631      	b.n	800a00c <_strtod_l+0x4d8>
 800a3a8:	2322      	movs	r3, #34	; 0x22
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	e62d      	b.n	800a00c <_strtod_l+0x4d8>
 800a3b0:	234b      	movs	r3, #75	; 0x4b
 800a3b2:	1a9a      	subs	r2, r3, r2
 800a3b4:	3b4c      	subs	r3, #76	; 0x4c
 800a3b6:	4093      	lsls	r3, r2
 800a3b8:	4019      	ands	r1, r3
 800a3ba:	000f      	movs	r7, r1
 800a3bc:	e6e3      	b.n	800a186 <_strtod_l+0x652>
 800a3be:	2201      	movs	r2, #1
 800a3c0:	4252      	negs	r2, r2
 800a3c2:	409a      	lsls	r2, r3
 800a3c4:	4016      	ands	r6, r2
 800a3c6:	e6de      	b.n	800a186 <_strtod_l+0x652>
 800a3c8:	4925      	ldr	r1, [pc, #148]	; (800a460 <_strtod_l+0x92c>)
 800a3ca:	1acb      	subs	r3, r1, r3
 800a3cc:	0001      	movs	r1, r0
 800a3ce:	4099      	lsls	r1, r3
 800a3d0:	9114      	str	r1, [sp, #80]	; 0x50
 800a3d2:	e743      	b.n	800a25c <_strtod_l+0x728>
 800a3d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3d8:	9804      	ldr	r0, [sp, #16]
 800a3da:	f001 fb83 	bl	800bae4 <__lshift>
 800a3de:	901c      	str	r0, [sp, #112]	; 0x70
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d000      	beq.n	800a3e6 <_strtod_l+0x8b2>
 800a3e4:	e76e      	b.n	800a2c4 <_strtod_l+0x790>
 800a3e6:	e608      	b.n	8009ffa <_strtod_l+0x4c6>
 800a3e8:	970e      	str	r7, [sp, #56]	; 0x38
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d177      	bne.n	800a4de <_strtod_l+0x9aa>
 800a3ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f0:	033b      	lsls	r3, r7, #12
 800a3f2:	0b1b      	lsrs	r3, r3, #12
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d039      	beq.n	800a46c <_strtod_l+0x938>
 800a3f8:	4a1a      	ldr	r2, [pc, #104]	; (800a464 <_strtod_l+0x930>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d139      	bne.n	800a472 <_strtod_l+0x93e>
 800a3fe:	2101      	movs	r1, #1
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	4249      	negs	r1, r1
 800a404:	0032      	movs	r2, r6
 800a406:	0008      	movs	r0, r1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <_strtod_l+0x8f0>
 800a40c:	24d4      	movs	r4, #212	; 0xd4
 800a40e:	4b12      	ldr	r3, [pc, #72]	; (800a458 <_strtod_l+0x924>)
 800a410:	0008      	movs	r0, r1
 800a412:	403b      	ands	r3, r7
 800a414:	04e4      	lsls	r4, r4, #19
 800a416:	42a3      	cmp	r3, r4
 800a418:	d804      	bhi.n	800a424 <_strtod_l+0x8f0>
 800a41a:	306c      	adds	r0, #108	; 0x6c
 800a41c:	0d1b      	lsrs	r3, r3, #20
 800a41e:	1ac3      	subs	r3, r0, r3
 800a420:	4099      	lsls	r1, r3
 800a422:	0008      	movs	r0, r1
 800a424:	4282      	cmp	r2, r0
 800a426:	d124      	bne.n	800a472 <_strtod_l+0x93e>
 800a428:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <_strtod_l+0x934>)
 800a42a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d102      	bne.n	800a436 <_strtod_l+0x902>
 800a430:	3201      	adds	r2, #1
 800a432:	d100      	bne.n	800a436 <_strtod_l+0x902>
 800a434:	e5e1      	b.n	8009ffa <_strtod_l+0x4c6>
 800a436:	4b08      	ldr	r3, [pc, #32]	; (800a458 <_strtod_l+0x924>)
 800a438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a43a:	2600      	movs	r6, #0
 800a43c:	401a      	ands	r2, r3
 800a43e:	0013      	movs	r3, r2
 800a440:	2280      	movs	r2, #128	; 0x80
 800a442:	0352      	lsls	r2, r2, #13
 800a444:	189f      	adds	r7, r3, r2
 800a446:	9b07      	ldr	r3, [sp, #28]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1a1      	bne.n	800a390 <_strtod_l+0x85c>
 800a44c:	e5de      	b.n	800a00c <_strtod_l+0x4d8>
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	08012f58 	.word	0x08012f58
 800a454:	fffffc02 	.word	0xfffffc02
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	39500000 	.word	0x39500000
 800a460:	fffffbe2 	.word	0xfffffbe2
 800a464:	000fffff 	.word	0x000fffff
 800a468:	7fefffff 	.word	0x7fefffff
 800a46c:	4333      	orrs	r3, r6
 800a46e:	d100      	bne.n	800a472 <_strtod_l+0x93e>
 800a470:	e77c      	b.n	800a36c <_strtod_l+0x838>
 800a472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01d      	beq.n	800a4b4 <_strtod_l+0x980>
 800a478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a47c:	4213      	tst	r3, r2
 800a47e:	d0e2      	beq.n	800a446 <_strtod_l+0x912>
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	0030      	movs	r0, r6
 800a484:	0039      	movs	r1, r7
 800a486:	9a07      	ldr	r2, [sp, #28]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d017      	beq.n	800a4bc <_strtod_l+0x988>
 800a48c:	f7ff fb3a 	bl	8009b04 <sulp>
 800a490:	0002      	movs	r2, r0
 800a492:	000b      	movs	r3, r1
 800a494:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a496:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a498:	f7f6 f98e 	bl	80007b8 <__aeabi_dadd>
 800a49c:	0006      	movs	r6, r0
 800a49e:	000f      	movs	r7, r1
 800a4a0:	e7d1      	b.n	800a446 <_strtod_l+0x912>
 800a4a2:	2601      	movs	r6, #1
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	4a98      	ldr	r2, [pc, #608]	; (800a708 <_strtod_l+0xbd4>)
 800a4a8:	4276      	negs	r6, r6
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	4a97      	ldr	r2, [pc, #604]	; (800a70c <_strtod_l+0xbd8>)
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	0017      	movs	r7, r2
 800a4b2:	e7c8      	b.n	800a446 <_strtod_l+0x912>
 800a4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4b6:	4233      	tst	r3, r6
 800a4b8:	d0c5      	beq.n	800a446 <_strtod_l+0x912>
 800a4ba:	e7e1      	b.n	800a480 <_strtod_l+0x94c>
 800a4bc:	f7ff fb22 	bl	8009b04 <sulp>
 800a4c0:	0002      	movs	r2, r0
 800a4c2:	000b      	movs	r3, r1
 800a4c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a4c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a4c8:	f7f7 fb92 	bl	8001bf0 <__aeabi_dsub>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	0006      	movs	r6, r0
 800a4d2:	000f      	movs	r7, r1
 800a4d4:	f7f5 ffb8 	bl	8000448 <__aeabi_dcmpeq>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d0b4      	beq.n	800a446 <_strtod_l+0x912>
 800a4dc:	e600      	b.n	800a0e0 <_strtod_l+0x5ac>
 800a4de:	9906      	ldr	r1, [sp, #24]
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	f001 fce9 	bl	800beb8 <__ratio>
 800a4e6:	2380      	movs	r3, #128	; 0x80
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	05db      	lsls	r3, r3, #23
 800a4ec:	0004      	movs	r4, r0
 800a4ee:	000d      	movs	r5, r1
 800a4f0:	f7f5 ffba 	bl	8000468 <__aeabi_dcmple>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d06d      	beq.n	800a5d4 <_strtod_l+0xaa0>
 800a4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d000      	beq.n	800a500 <_strtod_l+0x9cc>
 800a4fe:	e07e      	b.n	800a5fe <_strtod_l+0xaca>
 800a500:	2e00      	cmp	r6, #0
 800a502:	d158      	bne.n	800a5b6 <_strtod_l+0xa82>
 800a504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a506:	031b      	lsls	r3, r3, #12
 800a508:	d000      	beq.n	800a50c <_strtod_l+0x9d8>
 800a50a:	e07f      	b.n	800a60c <_strtod_l+0xad8>
 800a50c:	2200      	movs	r2, #0
 800a50e:	0020      	movs	r0, r4
 800a510:	0029      	movs	r1, r5
 800a512:	4b7f      	ldr	r3, [pc, #508]	; (800a710 <_strtod_l+0xbdc>)
 800a514:	f7f5 ff9e 	bl	8000454 <__aeabi_dcmplt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d158      	bne.n	800a5ce <_strtod_l+0xa9a>
 800a51c:	0020      	movs	r0, r4
 800a51e:	0029      	movs	r1, r5
 800a520:	2200      	movs	r2, #0
 800a522:	4b7c      	ldr	r3, [pc, #496]	; (800a714 <_strtod_l+0xbe0>)
 800a524:	f7f7 f8a2 	bl	800166c <__aeabi_dmul>
 800a528:	0004      	movs	r4, r0
 800a52a:	000d      	movs	r5, r1
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	061b      	lsls	r3, r3, #24
 800a530:	940a      	str	r4, [sp, #40]	; 0x28
 800a532:	18eb      	adds	r3, r5, r3
 800a534:	930b      	str	r3, [sp, #44]	; 0x2c
 800a536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53a:	9212      	str	r2, [sp, #72]	; 0x48
 800a53c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a53e:	4a76      	ldr	r2, [pc, #472]	; (800a718 <_strtod_l+0xbe4>)
 800a540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a542:	4013      	ands	r3, r2
 800a544:	9314      	str	r3, [sp, #80]	; 0x50
 800a546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a548:	4b74      	ldr	r3, [pc, #464]	; (800a71c <_strtod_l+0xbe8>)
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d000      	beq.n	800a550 <_strtod_l+0xa1c>
 800a54e:	e091      	b.n	800a674 <_strtod_l+0xb40>
 800a550:	4a73      	ldr	r2, [pc, #460]	; (800a720 <_strtod_l+0xbec>)
 800a552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a554:	4694      	mov	ip, r2
 800a556:	4463      	add	r3, ip
 800a558:	001f      	movs	r7, r3
 800a55a:	0030      	movs	r0, r6
 800a55c:	0019      	movs	r1, r3
 800a55e:	f001 fbe3 	bl	800bd28 <__ulp>
 800a562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a566:	f7f7 f881 	bl	800166c <__aeabi_dmul>
 800a56a:	0032      	movs	r2, r6
 800a56c:	003b      	movs	r3, r7
 800a56e:	f7f6 f923 	bl	80007b8 <__aeabi_dadd>
 800a572:	4a69      	ldr	r2, [pc, #420]	; (800a718 <_strtod_l+0xbe4>)
 800a574:	4b6b      	ldr	r3, [pc, #428]	; (800a724 <_strtod_l+0xbf0>)
 800a576:	0006      	movs	r6, r0
 800a578:	400a      	ands	r2, r1
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d949      	bls.n	800a612 <_strtod_l+0xade>
 800a57e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a580:	4b69      	ldr	r3, [pc, #420]	; (800a728 <_strtod_l+0xbf4>)
 800a582:	429a      	cmp	r2, r3
 800a584:	d103      	bne.n	800a58e <_strtod_l+0xa5a>
 800a586:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a588:	3301      	adds	r3, #1
 800a58a:	d100      	bne.n	800a58e <_strtod_l+0xa5a>
 800a58c:	e535      	b.n	8009ffa <_strtod_l+0x4c6>
 800a58e:	2601      	movs	r6, #1
 800a590:	4f65      	ldr	r7, [pc, #404]	; (800a728 <_strtod_l+0xbf4>)
 800a592:	4276      	negs	r6, r6
 800a594:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a596:	9804      	ldr	r0, [sp, #16]
 800a598:	f001 f8b8 	bl	800b70c <_Bfree>
 800a59c:	9908      	ldr	r1, [sp, #32]
 800a59e:	9804      	ldr	r0, [sp, #16]
 800a5a0:	f001 f8b4 	bl	800b70c <_Bfree>
 800a5a4:	9906      	ldr	r1, [sp, #24]
 800a5a6:	9804      	ldr	r0, [sp, #16]
 800a5a8:	f001 f8b0 	bl	800b70c <_Bfree>
 800a5ac:	9905      	ldr	r1, [sp, #20]
 800a5ae:	9804      	ldr	r0, [sp, #16]
 800a5b0:	f001 f8ac 	bl	800b70c <_Bfree>
 800a5b4:	e60b      	b.n	800a1ce <_strtod_l+0x69a>
 800a5b6:	2e01      	cmp	r6, #1
 800a5b8:	d103      	bne.n	800a5c2 <_strtod_l+0xa8e>
 800a5ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d100      	bne.n	800a5c2 <_strtod_l+0xa8e>
 800a5c0:	e58e      	b.n	800a0e0 <_strtod_l+0x5ac>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4c59      	ldr	r4, [pc, #356]	; (800a72c <_strtod_l+0xbf8>)
 800a5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5cc:	e01c      	b.n	800a608 <_strtod_l+0xad4>
 800a5ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5d0:	4d50      	ldr	r5, [pc, #320]	; (800a714 <_strtod_l+0xbe0>)
 800a5d2:	e7ab      	b.n	800a52c <_strtod_l+0x9f8>
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	0020      	movs	r0, r4
 800a5d8:	0029      	movs	r1, r5
 800a5da:	4b4e      	ldr	r3, [pc, #312]	; (800a714 <_strtod_l+0xbe0>)
 800a5dc:	f7f7 f846 	bl	800166c <__aeabi_dmul>
 800a5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5e2:	0004      	movs	r4, r0
 800a5e4:	000b      	movs	r3, r1
 800a5e6:	000d      	movs	r5, r1
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d104      	bne.n	800a5f6 <_strtod_l+0xac2>
 800a5ec:	2280      	movs	r2, #128	; 0x80
 800a5ee:	0612      	lsls	r2, r2, #24
 800a5f0:	900a      	str	r0, [sp, #40]	; 0x28
 800a5f2:	188b      	adds	r3, r1, r2
 800a5f4:	e79e      	b.n	800a534 <_strtod_l+0xa00>
 800a5f6:	0002      	movs	r2, r0
 800a5f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5fc:	e79b      	b.n	800a536 <_strtod_l+0xa02>
 800a5fe:	2300      	movs	r3, #0
 800a600:	4c43      	ldr	r4, [pc, #268]	; (800a710 <_strtod_l+0xbdc>)
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	940b      	str	r4, [sp, #44]	; 0x2c
 800a606:	2400      	movs	r4, #0
 800a608:	4d41      	ldr	r5, [pc, #260]	; (800a710 <_strtod_l+0xbdc>)
 800a60a:	e794      	b.n	800a536 <_strtod_l+0xa02>
 800a60c:	2300      	movs	r3, #0
 800a60e:	4c47      	ldr	r4, [pc, #284]	; (800a72c <_strtod_l+0xbf8>)
 800a610:	e7f7      	b.n	800a602 <_strtod_l+0xace>
 800a612:	23d4      	movs	r3, #212	; 0xd4
 800a614:	049b      	lsls	r3, r3, #18
 800a616:	18cf      	adds	r7, r1, r3
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	970e      	str	r7, [sp, #56]	; 0x38
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1b9      	bne.n	800a594 <_strtod_l+0xa60>
 800a620:	4b3d      	ldr	r3, [pc, #244]	; (800a718 <_strtod_l+0xbe4>)
 800a622:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a624:	403b      	ands	r3, r7
 800a626:	429a      	cmp	r2, r3
 800a628:	d1b4      	bne.n	800a594 <_strtod_l+0xa60>
 800a62a:	0020      	movs	r0, r4
 800a62c:	0029      	movs	r1, r5
 800a62e:	f7f5 ffa5 	bl	800057c <__aeabi_d2lz>
 800a632:	f7f5 ffdf 	bl	80005f4 <__aeabi_l2d>
 800a636:	0002      	movs	r2, r0
 800a638:	000b      	movs	r3, r1
 800a63a:	0020      	movs	r0, r4
 800a63c:	0029      	movs	r1, r5
 800a63e:	f7f7 fad7 	bl	8001bf0 <__aeabi_dsub>
 800a642:	033b      	lsls	r3, r7, #12
 800a644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a646:	0b1b      	lsrs	r3, r3, #12
 800a648:	4333      	orrs	r3, r6
 800a64a:	4313      	orrs	r3, r2
 800a64c:	0004      	movs	r4, r0
 800a64e:	000d      	movs	r5, r1
 800a650:	4a37      	ldr	r2, [pc, #220]	; (800a730 <_strtod_l+0xbfc>)
 800a652:	2b00      	cmp	r3, #0
 800a654:	d054      	beq.n	800a700 <_strtod_l+0xbcc>
 800a656:	4b37      	ldr	r3, [pc, #220]	; (800a734 <_strtod_l+0xc00>)
 800a658:	f7f5 fefc 	bl	8000454 <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d000      	beq.n	800a662 <_strtod_l+0xb2e>
 800a660:	e4d4      	b.n	800a00c <_strtod_l+0x4d8>
 800a662:	0020      	movs	r0, r4
 800a664:	0029      	movs	r1, r5
 800a666:	4a34      	ldr	r2, [pc, #208]	; (800a738 <_strtod_l+0xc04>)
 800a668:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <_strtod_l+0xbe0>)
 800a66a:	f7f5 ff07 	bl	800047c <__aeabi_dcmpgt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d090      	beq.n	800a594 <_strtod_l+0xa60>
 800a672:	e4cb      	b.n	800a00c <_strtod_l+0x4d8>
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d02b      	beq.n	800a6d2 <_strtod_l+0xb9e>
 800a67a:	23d4      	movs	r3, #212	; 0xd4
 800a67c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a67e:	04db      	lsls	r3, r3, #19
 800a680:	429a      	cmp	r2, r3
 800a682:	d826      	bhi.n	800a6d2 <_strtod_l+0xb9e>
 800a684:	0020      	movs	r0, r4
 800a686:	0029      	movs	r1, r5
 800a688:	4a2c      	ldr	r2, [pc, #176]	; (800a73c <_strtod_l+0xc08>)
 800a68a:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <_strtod_l+0xc0c>)
 800a68c:	f7f5 feec 	bl	8000468 <__aeabi_dcmple>
 800a690:	2800      	cmp	r0, #0
 800a692:	d017      	beq.n	800a6c4 <_strtod_l+0xb90>
 800a694:	0020      	movs	r0, r4
 800a696:	0029      	movs	r1, r5
 800a698:	f7f5 ff52 	bl	8000540 <__aeabi_d2uiz>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d100      	bne.n	800a6a2 <_strtod_l+0xb6e>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f7f7 feab 	bl	80023fc <__aeabi_ui2d>
 800a6a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6a8:	0004      	movs	r4, r0
 800a6aa:	000b      	movs	r3, r1
 800a6ac:	000d      	movs	r5, r1
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d122      	bne.n	800a6f8 <_strtod_l+0xbc4>
 800a6b2:	2280      	movs	r2, #128	; 0x80
 800a6b4:	0612      	lsls	r2, r2, #24
 800a6b6:	188b      	adds	r3, r1, r2
 800a6b8:	9016      	str	r0, [sp, #88]	; 0x58
 800a6ba:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6c0:	9212      	str	r2, [sp, #72]	; 0x48
 800a6c2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6c4:	22d6      	movs	r2, #214	; 0xd6
 800a6c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6c8:	04d2      	lsls	r2, r2, #19
 800a6ca:	189b      	adds	r3, r3, r2
 800a6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ce:	1a9b      	subs	r3, r3, r2
 800a6d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a6d8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a6da:	f001 fb25 	bl	800bd28 <__ulp>
 800a6de:	0002      	movs	r2, r0
 800a6e0:	000b      	movs	r3, r1
 800a6e2:	0030      	movs	r0, r6
 800a6e4:	0039      	movs	r1, r7
 800a6e6:	f7f6 ffc1 	bl	800166c <__aeabi_dmul>
 800a6ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ee:	f7f6 f863 	bl	80007b8 <__aeabi_dadd>
 800a6f2:	0006      	movs	r6, r0
 800a6f4:	000f      	movs	r7, r1
 800a6f6:	e78f      	b.n	800a618 <_strtod_l+0xae4>
 800a6f8:	0002      	movs	r2, r0
 800a6fa:	9216      	str	r2, [sp, #88]	; 0x58
 800a6fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6fe:	e7dd      	b.n	800a6bc <_strtod_l+0xb88>
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <_strtod_l+0xc10>)
 800a702:	f7f5 fea7 	bl	8000454 <__aeabi_dcmplt>
 800a706:	e7b2      	b.n	800a66e <_strtod_l+0xb3a>
 800a708:	fff00000 	.word	0xfff00000
 800a70c:	000fffff 	.word	0x000fffff
 800a710:	3ff00000 	.word	0x3ff00000
 800a714:	3fe00000 	.word	0x3fe00000
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	7fe00000 	.word	0x7fe00000
 800a720:	fcb00000 	.word	0xfcb00000
 800a724:	7c9fffff 	.word	0x7c9fffff
 800a728:	7fefffff 	.word	0x7fefffff
 800a72c:	bff00000 	.word	0xbff00000
 800a730:	94a03595 	.word	0x94a03595
 800a734:	3fdfffff 	.word	0x3fdfffff
 800a738:	35afe535 	.word	0x35afe535
 800a73c:	ffc00000 	.word	0xffc00000
 800a740:	41dfffff 	.word	0x41dfffff
 800a744:	3fcfffff 	.word	0x3fcfffff

0800a748 <_strtod_r>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4b02      	ldr	r3, [pc, #8]	; (800a754 <_strtod_r+0xc>)
 800a74c:	f7ff f9f2 	bl	8009b34 <_strtod_l>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	20000454 	.word	0x20000454

0800a758 <strtod>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4c04      	ldr	r4, [pc, #16]	; (800a76c <strtod+0x14>)
 800a75c:	000a      	movs	r2, r1
 800a75e:	0001      	movs	r1, r0
 800a760:	4b03      	ldr	r3, [pc, #12]	; (800a770 <strtod+0x18>)
 800a762:	6820      	ldr	r0, [r4, #0]
 800a764:	f7ff f9e6 	bl	8009b34 <_strtod_l>
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	200006e0 	.word	0x200006e0
 800a770:	20000454 	.word	0x20000454

0800a774 <_strtol_l.constprop.0>:
 800a774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a776:	b087      	sub	sp, #28
 800a778:	001e      	movs	r6, r3
 800a77a:	9005      	str	r0, [sp, #20]
 800a77c:	9101      	str	r1, [sp, #4]
 800a77e:	9202      	str	r2, [sp, #8]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d048      	beq.n	800a816 <_strtol_l.constprop.0+0xa2>
 800a784:	000b      	movs	r3, r1
 800a786:	2e24      	cmp	r6, #36	; 0x24
 800a788:	d845      	bhi.n	800a816 <_strtol_l.constprop.0+0xa2>
 800a78a:	4a3b      	ldr	r2, [pc, #236]	; (800a878 <_strtol_l.constprop.0+0x104>)
 800a78c:	2108      	movs	r1, #8
 800a78e:	4694      	mov	ip, r2
 800a790:	001a      	movs	r2, r3
 800a792:	4660      	mov	r0, ip
 800a794:	7814      	ldrb	r4, [r2, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	5d00      	ldrb	r0, [r0, r4]
 800a79a:	001d      	movs	r5, r3
 800a79c:	0007      	movs	r7, r0
 800a79e:	400f      	ands	r7, r1
 800a7a0:	4208      	tst	r0, r1
 800a7a2:	d1f5      	bne.n	800a790 <_strtol_l.constprop.0+0x1c>
 800a7a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a7a6:	d13d      	bne.n	800a824 <_strtol_l.constprop.0+0xb0>
 800a7a8:	2701      	movs	r7, #1
 800a7aa:	781c      	ldrb	r4, [r3, #0]
 800a7ac:	1c95      	adds	r5, r2, #2
 800a7ae:	2e00      	cmp	r6, #0
 800a7b0:	d05e      	beq.n	800a870 <_strtol_l.constprop.0+0xfc>
 800a7b2:	2e10      	cmp	r6, #16
 800a7b4:	d109      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a7b6:	2c30      	cmp	r4, #48	; 0x30
 800a7b8:	d107      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	782b      	ldrb	r3, [r5, #0]
 800a7be:	4393      	bics	r3, r2
 800a7c0:	2b58      	cmp	r3, #88	; 0x58
 800a7c2:	d150      	bne.n	800a866 <_strtol_l.constprop.0+0xf2>
 800a7c4:	2610      	movs	r6, #16
 800a7c6:	786c      	ldrb	r4, [r5, #1]
 800a7c8:	3502      	adds	r5, #2
 800a7ca:	4b2c      	ldr	r3, [pc, #176]	; (800a87c <_strtol_l.constprop.0+0x108>)
 800a7cc:	0031      	movs	r1, r6
 800a7ce:	18fb      	adds	r3, r7, r3
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	9303      	str	r3, [sp, #12]
 800a7d4:	f7f5 fd38 	bl	8000248 <__aeabi_uidivmod>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	9104      	str	r1, [sp, #16]
 800a7dc:	2101      	movs	r1, #1
 800a7de:	4684      	mov	ip, r0
 800a7e0:	0010      	movs	r0, r2
 800a7e2:	4249      	negs	r1, r1
 800a7e4:	0023      	movs	r3, r4
 800a7e6:	3b30      	subs	r3, #48	; 0x30
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d903      	bls.n	800a7f4 <_strtol_l.constprop.0+0x80>
 800a7ec:	3b11      	subs	r3, #17
 800a7ee:	2b19      	cmp	r3, #25
 800a7f0:	d81d      	bhi.n	800a82e <_strtol_l.constprop.0+0xba>
 800a7f2:	330a      	adds	r3, #10
 800a7f4:	429e      	cmp	r6, r3
 800a7f6:	dd1e      	ble.n	800a836 <_strtol_l.constprop.0+0xc2>
 800a7f8:	1c54      	adds	r4, r2, #1
 800a7fa:	d009      	beq.n	800a810 <_strtol_l.constprop.0+0x9c>
 800a7fc:	000a      	movs	r2, r1
 800a7fe:	4584      	cmp	ip, r0
 800a800:	d306      	bcc.n	800a810 <_strtol_l.constprop.0+0x9c>
 800a802:	d102      	bne.n	800a80a <_strtol_l.constprop.0+0x96>
 800a804:	9c04      	ldr	r4, [sp, #16]
 800a806:	429c      	cmp	r4, r3
 800a808:	db02      	blt.n	800a810 <_strtol_l.constprop.0+0x9c>
 800a80a:	2201      	movs	r2, #1
 800a80c:	4370      	muls	r0, r6
 800a80e:	1818      	adds	r0, r3, r0
 800a810:	782c      	ldrb	r4, [r5, #0]
 800a812:	3501      	adds	r5, #1
 800a814:	e7e6      	b.n	800a7e4 <_strtol_l.constprop.0+0x70>
 800a816:	f000 fa7d 	bl	800ad14 <__errno>
 800a81a:	2316      	movs	r3, #22
 800a81c:	6003      	str	r3, [r0, #0]
 800a81e:	2000      	movs	r0, #0
 800a820:	b007      	add	sp, #28
 800a822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a824:	2c2b      	cmp	r4, #43	; 0x2b
 800a826:	d1c2      	bne.n	800a7ae <_strtol_l.constprop.0+0x3a>
 800a828:	781c      	ldrb	r4, [r3, #0]
 800a82a:	1c95      	adds	r5, r2, #2
 800a82c:	e7bf      	b.n	800a7ae <_strtol_l.constprop.0+0x3a>
 800a82e:	0023      	movs	r3, r4
 800a830:	3b61      	subs	r3, #97	; 0x61
 800a832:	2b19      	cmp	r3, #25
 800a834:	d9dd      	bls.n	800a7f2 <_strtol_l.constprop.0+0x7e>
 800a836:	1c53      	adds	r3, r2, #1
 800a838:	d109      	bne.n	800a84e <_strtol_l.constprop.0+0xda>
 800a83a:	2322      	movs	r3, #34	; 0x22
 800a83c:	9a05      	ldr	r2, [sp, #20]
 800a83e:	9803      	ldr	r0, [sp, #12]
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	9b02      	ldr	r3, [sp, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0eb      	beq.n	800a820 <_strtol_l.constprop.0+0xac>
 800a848:	1e6b      	subs	r3, r5, #1
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	e007      	b.n	800a85e <_strtol_l.constprop.0+0xea>
 800a84e:	2f00      	cmp	r7, #0
 800a850:	d000      	beq.n	800a854 <_strtol_l.constprop.0+0xe0>
 800a852:	4240      	negs	r0, r0
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0e2      	beq.n	800a820 <_strtol_l.constprop.0+0xac>
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	d1f4      	bne.n	800a848 <_strtol_l.constprop.0+0xd4>
 800a85e:	9b02      	ldr	r3, [sp, #8]
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e7dc      	b.n	800a820 <_strtol_l.constprop.0+0xac>
 800a866:	2430      	movs	r4, #48	; 0x30
 800a868:	2e00      	cmp	r6, #0
 800a86a:	d1ae      	bne.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a86c:	3608      	adds	r6, #8
 800a86e:	e7ac      	b.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a870:	2c30      	cmp	r4, #48	; 0x30
 800a872:	d0a2      	beq.n	800a7ba <_strtol_l.constprop.0+0x46>
 800a874:	260a      	movs	r6, #10
 800a876:	e7a8      	b.n	800a7ca <_strtol_l.constprop.0+0x56>
 800a878:	08012f81 	.word	0x08012f81
 800a87c:	7fffffff 	.word	0x7fffffff

0800a880 <_strtol_r>:
 800a880:	b510      	push	{r4, lr}
 800a882:	f7ff ff77 	bl	800a774 <_strtol_l.constprop.0>
 800a886:	bd10      	pop	{r4, pc}

0800a888 <strtol>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4c04      	ldr	r4, [pc, #16]	; (800a89c <strtol+0x14>)
 800a88c:	0013      	movs	r3, r2
 800a88e:	000a      	movs	r2, r1
 800a890:	0001      	movs	r1, r0
 800a892:	6820      	ldr	r0, [r4, #0]
 800a894:	f7ff ff6e 	bl	800a774 <_strtol_l.constprop.0>
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	200006e0 	.word	0x200006e0

0800a8a0 <std>:
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	0004      	movs	r4, r0
 800a8a6:	6003      	str	r3, [r0, #0]
 800a8a8:	6043      	str	r3, [r0, #4]
 800a8aa:	6083      	str	r3, [r0, #8]
 800a8ac:	8181      	strh	r1, [r0, #12]
 800a8ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a8b0:	81c2      	strh	r2, [r0, #14]
 800a8b2:	6103      	str	r3, [r0, #16]
 800a8b4:	6143      	str	r3, [r0, #20]
 800a8b6:	6183      	str	r3, [r0, #24]
 800a8b8:	0019      	movs	r1, r3
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	305c      	adds	r0, #92	; 0x5c
 800a8be:	f000 f97d 	bl	800abbc <memset>
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <std+0x50>)
 800a8c4:	61e4      	str	r4, [r4, #28]
 800a8c6:	6223      	str	r3, [r4, #32]
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <std+0x54>)
 800a8ca:	6263      	str	r3, [r4, #36]	; 0x24
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <std+0x58>)
 800a8ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8d0:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <std+0x5c>)
 800a8d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <std+0x60>)
 800a8d6:	429c      	cmp	r4, r3
 800a8d8:	d005      	beq.n	800a8e6 <std+0x46>
 800a8da:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <std+0x64>)
 800a8dc:	429c      	cmp	r4, r3
 800a8de:	d002      	beq.n	800a8e6 <std+0x46>
 800a8e0:	4b09      	ldr	r3, [pc, #36]	; (800a908 <std+0x68>)
 800a8e2:	429c      	cmp	r4, r3
 800a8e4:	d103      	bne.n	800a8ee <std+0x4e>
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	3058      	adds	r0, #88	; 0x58
 800a8ea:	f000 fa3d 	bl	800ad68 <__retarget_lock_init_recursive>
 800a8ee:	bd10      	pop	{r4, pc}
 800a8f0:	0800ab21 	.word	0x0800ab21
 800a8f4:	0800ab4d 	.word	0x0800ab4d
 800a8f8:	0800ab85 	.word	0x0800ab85
 800a8fc:	0800abb1 	.word	0x0800abb1
 800a900:	20000c18 	.word	0x20000c18
 800a904:	20000c80 	.word	0x20000c80
 800a908:	20000ce8 	.word	0x20000ce8

0800a90c <stdio_exit_handler>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	4a03      	ldr	r2, [pc, #12]	; (800a91c <stdio_exit_handler+0x10>)
 800a910:	4903      	ldr	r1, [pc, #12]	; (800a920 <stdio_exit_handler+0x14>)
 800a912:	4804      	ldr	r0, [pc, #16]	; (800a924 <stdio_exit_handler+0x18>)
 800a914:	f000 f86c 	bl	800a9f0 <_fwalk_sglue>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	20000448 	.word	0x20000448
 800a920:	0800e869 	.word	0x0800e869
 800a924:	200005c0 	.word	0x200005c0

0800a928 <cleanup_stdio>:
 800a928:	6841      	ldr	r1, [r0, #4]
 800a92a:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <cleanup_stdio+0x30>)
 800a92c:	b510      	push	{r4, lr}
 800a92e:	0004      	movs	r4, r0
 800a930:	4299      	cmp	r1, r3
 800a932:	d001      	beq.n	800a938 <cleanup_stdio+0x10>
 800a934:	f003 ff98 	bl	800e868 <_fclose_r>
 800a938:	68a1      	ldr	r1, [r4, #8]
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <cleanup_stdio+0x34>)
 800a93c:	4299      	cmp	r1, r3
 800a93e:	d002      	beq.n	800a946 <cleanup_stdio+0x1e>
 800a940:	0020      	movs	r0, r4
 800a942:	f003 ff91 	bl	800e868 <_fclose_r>
 800a946:	68e1      	ldr	r1, [r4, #12]
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <cleanup_stdio+0x38>)
 800a94a:	4299      	cmp	r1, r3
 800a94c:	d002      	beq.n	800a954 <cleanup_stdio+0x2c>
 800a94e:	0020      	movs	r0, r4
 800a950:	f003 ff8a 	bl	800e868 <_fclose_r>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	20000c18 	.word	0x20000c18
 800a95c:	20000c80 	.word	0x20000c80
 800a960:	20000ce8 	.word	0x20000ce8

0800a964 <global_stdio_init.part.0>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <global_stdio_init.part.0+0x28>)
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <global_stdio_init.part.0+0x2c>)
 800a96a:	2104      	movs	r1, #4
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	4809      	ldr	r0, [pc, #36]	; (800a994 <global_stdio_init.part.0+0x30>)
 800a970:	2200      	movs	r2, #0
 800a972:	f7ff ff95 	bl	800a8a0 <std>
 800a976:	2201      	movs	r2, #1
 800a978:	2109      	movs	r1, #9
 800a97a:	4807      	ldr	r0, [pc, #28]	; (800a998 <global_stdio_init.part.0+0x34>)
 800a97c:	f7ff ff90 	bl	800a8a0 <std>
 800a980:	2202      	movs	r2, #2
 800a982:	2112      	movs	r1, #18
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <global_stdio_init.part.0+0x38>)
 800a986:	f7ff ff8b 	bl	800a8a0 <std>
 800a98a:	bd10      	pop	{r4, pc}
 800a98c:	20000d50 	.word	0x20000d50
 800a990:	0800a90d 	.word	0x0800a90d
 800a994:	20000c18 	.word	0x20000c18
 800a998:	20000c80 	.word	0x20000c80
 800a99c:	20000ce8 	.word	0x20000ce8

0800a9a0 <__sfp_lock_acquire>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4802      	ldr	r0, [pc, #8]	; (800a9ac <__sfp_lock_acquire+0xc>)
 800a9a4:	f000 f9e2 	bl	800ad6c <__retarget_lock_acquire_recursive>
 800a9a8:	bd10      	pop	{r4, pc}
 800a9aa:	46c0      	nop			; (mov r8, r8)
 800a9ac:	20000d5a 	.word	0x20000d5a

0800a9b0 <__sfp_lock_release>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	4802      	ldr	r0, [pc, #8]	; (800a9bc <__sfp_lock_release+0xc>)
 800a9b4:	f000 f9db 	bl	800ad6e <__retarget_lock_release_recursive>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	46c0      	nop			; (mov r8, r8)
 800a9bc:	20000d5a 	.word	0x20000d5a

0800a9c0 <__sinit>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	0004      	movs	r4, r0
 800a9c4:	f7ff ffec 	bl	800a9a0 <__sfp_lock_acquire>
 800a9c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <__sinit+0x14>
 800a9ce:	f7ff ffef 	bl	800a9b0 <__sfp_lock_release>
 800a9d2:	bd10      	pop	{r4, pc}
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <__sinit+0x28>)
 800a9d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <__sinit+0x2c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f6      	bne.n	800a9ce <__sinit+0xe>
 800a9e0:	f7ff ffc0 	bl	800a964 <global_stdio_init.part.0>
 800a9e4:	e7f3      	b.n	800a9ce <__sinit+0xe>
 800a9e6:	46c0      	nop			; (mov r8, r8)
 800a9e8:	0800a929 	.word	0x0800a929
 800a9ec:	20000d50 	.word	0x20000d50

0800a9f0 <_fwalk_sglue>:
 800a9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9f2:	0014      	movs	r4, r2
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	9000      	str	r0, [sp, #0]
 800a9f8:	9101      	str	r1, [sp, #4]
 800a9fa:	68a5      	ldr	r5, [r4, #8]
 800a9fc:	6867      	ldr	r7, [r4, #4]
 800a9fe:	3f01      	subs	r7, #1
 800aa00:	d504      	bpl.n	800aa0c <_fwalk_sglue+0x1c>
 800aa02:	6824      	ldr	r4, [r4, #0]
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	d1f8      	bne.n	800a9fa <_fwalk_sglue+0xa>
 800aa08:	0030      	movs	r0, r6
 800aa0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa0c:	89ab      	ldrh	r3, [r5, #12]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d908      	bls.n	800aa24 <_fwalk_sglue+0x34>
 800aa12:	220e      	movs	r2, #14
 800aa14:	5eab      	ldrsh	r3, [r5, r2]
 800aa16:	3301      	adds	r3, #1
 800aa18:	d004      	beq.n	800aa24 <_fwalk_sglue+0x34>
 800aa1a:	0029      	movs	r1, r5
 800aa1c:	9800      	ldr	r0, [sp, #0]
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	4798      	blx	r3
 800aa22:	4306      	orrs	r6, r0
 800aa24:	3568      	adds	r5, #104	; 0x68
 800aa26:	e7ea      	b.n	800a9fe <_fwalk_sglue+0xe>

0800aa28 <snprintf>:
 800aa28:	b40c      	push	{r2, r3}
 800aa2a:	b530      	push	{r4, r5, lr}
 800aa2c:	4b17      	ldr	r3, [pc, #92]	; (800aa8c <snprintf+0x64>)
 800aa2e:	000c      	movs	r4, r1
 800aa30:	681d      	ldr	r5, [r3, #0]
 800aa32:	b09d      	sub	sp, #116	; 0x74
 800aa34:	2900      	cmp	r1, #0
 800aa36:	da08      	bge.n	800aa4a <snprintf+0x22>
 800aa38:	238b      	movs	r3, #139	; 0x8b
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	4240      	negs	r0, r0
 800aa40:	b01d      	add	sp, #116	; 0x74
 800aa42:	bc30      	pop	{r4, r5}
 800aa44:	bc08      	pop	{r3}
 800aa46:	b002      	add	sp, #8
 800aa48:	4718      	bx	r3
 800aa4a:	2382      	movs	r3, #130	; 0x82
 800aa4c:	466a      	mov	r2, sp
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	8293      	strh	r3, [r2, #20]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9002      	str	r0, [sp, #8]
 800aa56:	9006      	str	r0, [sp, #24]
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d000      	beq.n	800aa5e <snprintf+0x36>
 800aa5c:	1e4b      	subs	r3, r1, #1
 800aa5e:	9304      	str	r3, [sp, #16]
 800aa60:	9307      	str	r3, [sp, #28]
 800aa62:	2301      	movs	r3, #1
 800aa64:	466a      	mov	r2, sp
 800aa66:	425b      	negs	r3, r3
 800aa68:	82d3      	strh	r3, [r2, #22]
 800aa6a:	0028      	movs	r0, r5
 800aa6c:	ab21      	add	r3, sp, #132	; 0x84
 800aa6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa70:	a902      	add	r1, sp, #8
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	f001 fa9a 	bl	800bfac <_svfprintf_r>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	da01      	bge.n	800aa80 <snprintf+0x58>
 800aa7c:	238b      	movs	r3, #139	; 0x8b
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	2c00      	cmp	r4, #0
 800aa82:	d0dd      	beq.n	800aa40 <snprintf+0x18>
 800aa84:	2200      	movs	r2, #0
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	701a      	strb	r2, [r3, #0]
 800aa8a:	e7d9      	b.n	800aa40 <snprintf+0x18>
 800aa8c:	200006e0 	.word	0x200006e0

0800aa90 <sprintf>:
 800aa90:	b40e      	push	{r1, r2, r3}
 800aa92:	b500      	push	{lr}
 800aa94:	490b      	ldr	r1, [pc, #44]	; (800aac4 <sprintf+0x34>)
 800aa96:	b09c      	sub	sp, #112	; 0x70
 800aa98:	ab1d      	add	r3, sp, #116	; 0x74
 800aa9a:	9002      	str	r0, [sp, #8]
 800aa9c:	9006      	str	r0, [sp, #24]
 800aa9e:	9107      	str	r1, [sp, #28]
 800aaa0:	9104      	str	r1, [sp, #16]
 800aaa2:	4809      	ldr	r0, [pc, #36]	; (800aac8 <sprintf+0x38>)
 800aaa4:	4909      	ldr	r1, [pc, #36]	; (800aacc <sprintf+0x3c>)
 800aaa6:	cb04      	ldmia	r3!, {r2}
 800aaa8:	9105      	str	r1, [sp, #20]
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	a902      	add	r1, sp, #8
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	f001 fa7c 	bl	800bfac <_svfprintf_r>
 800aab4:	2200      	movs	r2, #0
 800aab6:	9b02      	ldr	r3, [sp, #8]
 800aab8:	701a      	strb	r2, [r3, #0]
 800aaba:	b01c      	add	sp, #112	; 0x70
 800aabc:	bc08      	pop	{r3}
 800aabe:	b003      	add	sp, #12
 800aac0:	4718      	bx	r3
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	7fffffff 	.word	0x7fffffff
 800aac8:	200006e0 	.word	0x200006e0
 800aacc:	ffff0208 	.word	0xffff0208

0800aad0 <sscanf>:
 800aad0:	b40e      	push	{r1, r2, r3}
 800aad2:	b530      	push	{r4, r5, lr}
 800aad4:	2381      	movs	r3, #129	; 0x81
 800aad6:	b09c      	sub	sp, #112	; 0x70
 800aad8:	466a      	mov	r2, sp
 800aada:	ac1f      	add	r4, sp, #124	; 0x7c
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	cc20      	ldmia	r4!, {r5}
 800aae0:	8293      	strh	r3, [r2, #20]
 800aae2:	9002      	str	r0, [sp, #8]
 800aae4:	9006      	str	r0, [sp, #24]
 800aae6:	f7f5 fb0d 	bl	8000104 <strlen>
 800aaea:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <sscanf+0x48>)
 800aaec:	466a      	mov	r2, sp
 800aaee:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9003      	str	r0, [sp, #12]
 800aaf4:	9007      	str	r0, [sp, #28]
 800aaf6:	4809      	ldr	r0, [pc, #36]	; (800ab1c <sscanf+0x4c>)
 800aaf8:	930e      	str	r3, [sp, #56]	; 0x38
 800aafa:	9313      	str	r3, [sp, #76]	; 0x4c
 800aafc:	3b01      	subs	r3, #1
 800aafe:	82d3      	strh	r3, [r2, #22]
 800ab00:	a902      	add	r1, sp, #8
 800ab02:	0023      	movs	r3, r4
 800ab04:	002a      	movs	r2, r5
 800ab06:	6800      	ldr	r0, [r0, #0]
 800ab08:	9401      	str	r4, [sp, #4]
 800ab0a:	f002 fc91 	bl	800d430 <__ssvfscanf_r>
 800ab0e:	b01c      	add	sp, #112	; 0x70
 800ab10:	bc30      	pop	{r4, r5}
 800ab12:	bc08      	pop	{r3}
 800ab14:	b003      	add	sp, #12
 800ab16:	4718      	bx	r3
 800ab18:	0800ab49 	.word	0x0800ab49
 800ab1c:	200006e0 	.word	0x200006e0

0800ab20 <__sread>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	000c      	movs	r4, r1
 800ab24:	250e      	movs	r5, #14
 800ab26:	5f49      	ldrsh	r1, [r1, r5]
 800ab28:	f000 f8ba 	bl	800aca0 <_read_r>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	db03      	blt.n	800ab38 <__sread+0x18>
 800ab30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab32:	181b      	adds	r3, r3, r0
 800ab34:	6523      	str	r3, [r4, #80]	; 0x50
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	4a02      	ldr	r2, [pc, #8]	; (800ab44 <__sread+0x24>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	e7f9      	b.n	800ab36 <__sread+0x16>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	ffffefff 	.word	0xffffefff

0800ab48 <__seofread>:
 800ab48:	2000      	movs	r0, #0
 800ab4a:	4770      	bx	lr

0800ab4c <__swrite>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	001f      	movs	r7, r3
 800ab50:	898b      	ldrh	r3, [r1, #12]
 800ab52:	0005      	movs	r5, r0
 800ab54:	000c      	movs	r4, r1
 800ab56:	0016      	movs	r6, r2
 800ab58:	05db      	lsls	r3, r3, #23
 800ab5a:	d505      	bpl.n	800ab68 <__swrite+0x1c>
 800ab5c:	230e      	movs	r3, #14
 800ab5e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab60:	2200      	movs	r2, #0
 800ab62:	2302      	movs	r3, #2
 800ab64:	f000 f888 	bl	800ac78 <_lseek_r>
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	4a05      	ldr	r2, [pc, #20]	; (800ab80 <__swrite+0x34>)
 800ab6c:	0028      	movs	r0, r5
 800ab6e:	4013      	ands	r3, r2
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	0032      	movs	r2, r6
 800ab74:	230e      	movs	r3, #14
 800ab76:	5ee1      	ldrsh	r1, [r4, r3]
 800ab78:	003b      	movs	r3, r7
 800ab7a:	f000 f8b7 	bl	800acec <_write_r>
 800ab7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab80:	ffffefff 	.word	0xffffefff

0800ab84 <__sseek>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	000c      	movs	r4, r1
 800ab88:	250e      	movs	r5, #14
 800ab8a:	5f49      	ldrsh	r1, [r1, r5]
 800ab8c:	f000 f874 	bl	800ac78 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	1c42      	adds	r2, r0, #1
 800ab94:	d103      	bne.n	800ab9e <__sseek+0x1a>
 800ab96:	4a05      	ldr	r2, [pc, #20]	; (800abac <__sseek+0x28>)
 800ab98:	4013      	ands	r3, r2
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	2280      	movs	r2, #128	; 0x80
 800aba0:	0152      	lsls	r2, r2, #5
 800aba2:	4313      	orrs	r3, r2
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	6520      	str	r0, [r4, #80]	; 0x50
 800aba8:	e7f8      	b.n	800ab9c <__sseek+0x18>
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	ffffefff 	.word	0xffffefff

0800abb0 <__sclose>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	230e      	movs	r3, #14
 800abb4:	5ec9      	ldrsh	r1, [r1, r3]
 800abb6:	f000 f84d 	bl	800ac54 <_close_r>
 800abba:	bd10      	pop	{r4, pc}

0800abbc <memset>:
 800abbc:	0003      	movs	r3, r0
 800abbe:	1882      	adds	r2, r0, r2
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d100      	bne.n	800abc6 <memset+0xa>
 800abc4:	4770      	bx	lr
 800abc6:	7019      	strb	r1, [r3, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	e7f9      	b.n	800abc0 <memset+0x4>

0800abcc <strncmp>:
 800abcc:	b530      	push	{r4, r5, lr}
 800abce:	0005      	movs	r5, r0
 800abd0:	1e10      	subs	r0, r2, #0
 800abd2:	d00b      	beq.n	800abec <strncmp+0x20>
 800abd4:	2400      	movs	r4, #0
 800abd6:	3a01      	subs	r2, #1
 800abd8:	5d2b      	ldrb	r3, [r5, r4]
 800abda:	5d08      	ldrb	r0, [r1, r4]
 800abdc:	4283      	cmp	r3, r0
 800abde:	d104      	bne.n	800abea <strncmp+0x1e>
 800abe0:	42a2      	cmp	r2, r4
 800abe2:	d002      	beq.n	800abea <strncmp+0x1e>
 800abe4:	3401      	adds	r4, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f6      	bne.n	800abd8 <strncmp+0xc>
 800abea:	1a18      	subs	r0, r3, r0
 800abec:	bd30      	pop	{r4, r5, pc}

0800abee <strncpy>:
 800abee:	0003      	movs	r3, r0
 800abf0:	b530      	push	{r4, r5, lr}
 800abf2:	001d      	movs	r5, r3
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	d006      	beq.n	800ac06 <strncpy+0x18>
 800abf8:	780c      	ldrb	r4, [r1, #0]
 800abfa:	3a01      	subs	r2, #1
 800abfc:	3301      	adds	r3, #1
 800abfe:	702c      	strb	r4, [r5, #0]
 800ac00:	3101      	adds	r1, #1
 800ac02:	2c00      	cmp	r4, #0
 800ac04:	d1f5      	bne.n	800abf2 <strncpy+0x4>
 800ac06:	2100      	movs	r1, #0
 800ac08:	189a      	adds	r2, r3, r2
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d100      	bne.n	800ac10 <strncpy+0x22>
 800ac0e:	bd30      	pop	{r4, r5, pc}
 800ac10:	7019      	strb	r1, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	e7f9      	b.n	800ac0a <strncpy+0x1c>

0800ac16 <strstr>:
 800ac16:	780a      	ldrb	r2, [r1, #0]
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	d10c      	bne.n	800ac38 <strstr+0x22>
 800ac1e:	bd30      	pop	{r4, r5, pc}
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d108      	bne.n	800ac36 <strstr+0x20>
 800ac24:	2301      	movs	r3, #1
 800ac26:	5ccc      	ldrb	r4, [r1, r3]
 800ac28:	2c00      	cmp	r4, #0
 800ac2a:	d0f8      	beq.n	800ac1e <strstr+0x8>
 800ac2c:	5cc5      	ldrb	r5, [r0, r3]
 800ac2e:	42a5      	cmp	r5, r4
 800ac30:	d101      	bne.n	800ac36 <strstr+0x20>
 800ac32:	3301      	adds	r3, #1
 800ac34:	e7f7      	b.n	800ac26 <strstr+0x10>
 800ac36:	3001      	adds	r0, #1
 800ac38:	7803      	ldrb	r3, [r0, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f0      	bne.n	800ac20 <strstr+0xa>
 800ac3e:	0018      	movs	r0, r3
 800ac40:	e7ed      	b.n	800ac1e <strstr+0x8>
	...

0800ac44 <__locale_mb_cur_max>:
 800ac44:	2294      	movs	r2, #148	; 0x94
 800ac46:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <__locale_mb_cur_max+0xc>)
 800ac48:	0052      	lsls	r2, r2, #1
 800ac4a:	5c98      	ldrb	r0, [r3, r2]
 800ac4c:	4770      	bx	lr
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	20000454 	.word	0x20000454

0800ac54 <_close_r>:
 800ac54:	2300      	movs	r3, #0
 800ac56:	b570      	push	{r4, r5, r6, lr}
 800ac58:	4d06      	ldr	r5, [pc, #24]	; (800ac74 <_close_r+0x20>)
 800ac5a:	0004      	movs	r4, r0
 800ac5c:	0008      	movs	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f8 fd15 	bl	800368e <_close>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d103      	bne.n	800ac70 <_close_r+0x1c>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d000      	beq.n	800ac70 <_close_r+0x1c>
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	20000d54 	.word	0x20000d54

0800ac78 <_lseek_r>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	0004      	movs	r4, r0
 800ac7c:	0008      	movs	r0, r1
 800ac7e:	0011      	movs	r1, r2
 800ac80:	001a      	movs	r2, r3
 800ac82:	2300      	movs	r3, #0
 800ac84:	4d05      	ldr	r5, [pc, #20]	; (800ac9c <_lseek_r+0x24>)
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7f8 fd22 	bl	80036d0 <_lseek>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d103      	bne.n	800ac98 <_lseek_r+0x20>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d000      	beq.n	800ac98 <_lseek_r+0x20>
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20000d54 	.word	0x20000d54

0800aca0 <_read_r>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	0004      	movs	r4, r0
 800aca4:	0008      	movs	r0, r1
 800aca6:	0011      	movs	r1, r2
 800aca8:	001a      	movs	r2, r3
 800acaa:	2300      	movs	r3, #0
 800acac:	4d05      	ldr	r5, [pc, #20]	; (800acc4 <_read_r+0x24>)
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	f7f8 fcb4 	bl	800361c <_read>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d103      	bne.n	800acc0 <_read_r+0x20>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d000      	beq.n	800acc0 <_read_r+0x20>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	20000d54 	.word	0x20000d54

0800acc8 <_sbrk_r>:
 800acc8:	2300      	movs	r3, #0
 800acca:	b570      	push	{r4, r5, r6, lr}
 800accc:	4d06      	ldr	r5, [pc, #24]	; (800ace8 <_sbrk_r+0x20>)
 800acce:	0004      	movs	r4, r0
 800acd0:	0008      	movs	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7f8 fd08 	bl	80036e8 <_sbrk>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d103      	bne.n	800ace4 <_sbrk_r+0x1c>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d000      	beq.n	800ace4 <_sbrk_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	20000d54 	.word	0x20000d54

0800acec <_write_r>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	0004      	movs	r4, r0
 800acf0:	0008      	movs	r0, r1
 800acf2:	0011      	movs	r1, r2
 800acf4:	001a      	movs	r2, r3
 800acf6:	2300      	movs	r3, #0
 800acf8:	4d05      	ldr	r5, [pc, #20]	; (800ad10 <_write_r+0x24>)
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f8 fcab 	bl	8003656 <_write>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d103      	bne.n	800ad0c <_write_r+0x20>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d000      	beq.n	800ad0c <_write_r+0x20>
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	20000d54 	.word	0x20000d54

0800ad14 <__errno>:
 800ad14:	4b01      	ldr	r3, [pc, #4]	; (800ad1c <__errno+0x8>)
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	4770      	bx	lr
 800ad1a:	46c0      	nop			; (mov r8, r8)
 800ad1c:	200006e0 	.word	0x200006e0

0800ad20 <__libc_init_array>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	2600      	movs	r6, #0
 800ad24:	4c0c      	ldr	r4, [pc, #48]	; (800ad58 <__libc_init_array+0x38>)
 800ad26:	4d0d      	ldr	r5, [pc, #52]	; (800ad5c <__libc_init_array+0x3c>)
 800ad28:	1b64      	subs	r4, r4, r5
 800ad2a:	10a4      	asrs	r4, r4, #2
 800ad2c:	42a6      	cmp	r6, r4
 800ad2e:	d109      	bne.n	800ad44 <__libc_init_array+0x24>
 800ad30:	2600      	movs	r6, #0
 800ad32:	f006 fcc5 	bl	80116c0 <_init>
 800ad36:	4c0a      	ldr	r4, [pc, #40]	; (800ad60 <__libc_init_array+0x40>)
 800ad38:	4d0a      	ldr	r5, [pc, #40]	; (800ad64 <__libc_init_array+0x44>)
 800ad3a:	1b64      	subs	r4, r4, r5
 800ad3c:	10a4      	asrs	r4, r4, #2
 800ad3e:	42a6      	cmp	r6, r4
 800ad40:	d105      	bne.n	800ad4e <__libc_init_array+0x2e>
 800ad42:	bd70      	pop	{r4, r5, r6, pc}
 800ad44:	00b3      	lsls	r3, r6, #2
 800ad46:	58eb      	ldr	r3, [r5, r3]
 800ad48:	4798      	blx	r3
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7ee      	b.n	800ad2c <__libc_init_array+0xc>
 800ad4e:	00b3      	lsls	r3, r6, #2
 800ad50:	58eb      	ldr	r3, [r5, r3]
 800ad52:	4798      	blx	r3
 800ad54:	3601      	adds	r6, #1
 800ad56:	e7f2      	b.n	800ad3e <__libc_init_array+0x1e>
 800ad58:	0801339c 	.word	0x0801339c
 800ad5c:	0801339c 	.word	0x0801339c
 800ad60:	080133a4 	.word	0x080133a4
 800ad64:	0801339c 	.word	0x0801339c

0800ad68 <__retarget_lock_init_recursive>:
 800ad68:	4770      	bx	lr

0800ad6a <__retarget_lock_close_recursive>:
 800ad6a:	4770      	bx	lr

0800ad6c <__retarget_lock_acquire_recursive>:
 800ad6c:	4770      	bx	lr

0800ad6e <__retarget_lock_release_recursive>:
 800ad6e:	4770      	bx	lr

0800ad70 <sysconf>:
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	b510      	push	{r4, lr}
 800ad74:	2808      	cmp	r0, #8
 800ad76:	d004      	beq.n	800ad82 <sysconf+0x12>
 800ad78:	f7ff ffcc 	bl	800ad14 <__errno>
 800ad7c:	2316      	movs	r3, #22
 800ad7e:	6003      	str	r3, [r0, #0]
 800ad80:	3b17      	subs	r3, #23
 800ad82:	0018      	movs	r0, r3
 800ad84:	bd10      	pop	{r4, pc}

0800ad86 <memcpy>:
 800ad86:	2300      	movs	r3, #0
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d100      	bne.n	800ad90 <memcpy+0xa>
 800ad8e:	bd10      	pop	{r4, pc}
 800ad90:	5ccc      	ldrb	r4, [r1, r3]
 800ad92:	54c4      	strb	r4, [r0, r3]
 800ad94:	3301      	adds	r3, #1
 800ad96:	e7f8      	b.n	800ad8a <memcpy+0x4>

0800ad98 <nan>:
 800ad98:	2000      	movs	r0, #0
 800ad9a:	4901      	ldr	r1, [pc, #4]	; (800ada0 <nan+0x8>)
 800ad9c:	4770      	bx	lr
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	7ff80000 	.word	0x7ff80000

0800ada4 <nanf>:
 800ada4:	4800      	ldr	r0, [pc, #0]	; (800ada8 <nanf+0x4>)
 800ada6:	4770      	bx	lr
 800ada8:	7fc00000 	.word	0x7fc00000

0800adac <register_fini>:
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <register_fini+0x10>)
 800adae:	b510      	push	{r4, lr}
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <register_fini+0xe>
 800adb4:	4802      	ldr	r0, [pc, #8]	; (800adc0 <register_fini+0x14>)
 800adb6:	f000 f805 	bl	800adc4 <atexit>
 800adba:	bd10      	pop	{r4, pc}
 800adbc:	00000000 	.word	0x00000000
 800adc0:	0800eb21 	.word	0x0800eb21

0800adc4 <atexit>:
 800adc4:	2300      	movs	r3, #0
 800adc6:	b510      	push	{r4, lr}
 800adc8:	0001      	movs	r1, r0
 800adca:	001a      	movs	r2, r3
 800adcc:	0018      	movs	r0, r3
 800adce:	f003 fef9 	bl	800ebc4 <__register_exitproc>
 800add2:	bd10      	pop	{r4, pc}

0800add4 <_malloc_trim_r>:
 800add4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add6:	0004      	movs	r4, r0
 800add8:	2008      	movs	r0, #8
 800adda:	000d      	movs	r5, r1
 800addc:	f7ff ffc8 	bl	800ad70 <sysconf>
 800ade0:	0006      	movs	r6, r0
 800ade2:	0020      	movs	r0, r4
 800ade4:	f7fe fe7e 	bl	8009ae4 <__malloc_lock>
 800ade8:	2203      	movs	r2, #3
 800adea:	4f21      	ldr	r7, [pc, #132]	; (800ae70 <_malloc_trim_r+0x9c>)
 800adec:	0031      	movs	r1, r6
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4393      	bics	r3, r2
 800adf4:	1b58      	subs	r0, r3, r5
 800adf6:	3811      	subs	r0, #17
 800adf8:	1980      	adds	r0, r0, r6
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	f7f5 f99e 	bl	800013c <__udivsi3>
 800ae00:	1e45      	subs	r5, r0, #1
 800ae02:	4375      	muls	r5, r6
 800ae04:	42ae      	cmp	r6, r5
 800ae06:	dd04      	ble.n	800ae12 <_malloc_trim_r+0x3e>
 800ae08:	0020      	movs	r0, r4
 800ae0a:	f7fe fe73 	bl	8009af4 <__malloc_unlock>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae12:	2100      	movs	r1, #0
 800ae14:	0020      	movs	r0, r4
 800ae16:	f7ff ff57 	bl	800acc8 <_sbrk_r>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	9a01      	ldr	r2, [sp, #4]
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	4298      	cmp	r0, r3
 800ae22:	d1f1      	bne.n	800ae08 <_malloc_trim_r+0x34>
 800ae24:	0020      	movs	r0, r4
 800ae26:	4269      	negs	r1, r5
 800ae28:	f7ff ff4e 	bl	800acc8 <_sbrk_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d110      	bne.n	800ae52 <_malloc_trim_r+0x7e>
 800ae30:	2100      	movs	r1, #0
 800ae32:	0020      	movs	r0, r4
 800ae34:	f7ff ff48 	bl	800acc8 <_sbrk_r>
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	1a81      	subs	r1, r0, r2
 800ae3c:	290f      	cmp	r1, #15
 800ae3e:	dde3      	ble.n	800ae08 <_malloc_trim_r+0x34>
 800ae40:	4d0c      	ldr	r5, [pc, #48]	; (800ae74 <_malloc_trim_r+0xa0>)
 800ae42:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <_malloc_trim_r+0xa4>)
 800ae44:	682d      	ldr	r5, [r5, #0]
 800ae46:	1b40      	subs	r0, r0, r5
 800ae48:	6018      	str	r0, [r3, #0]
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	6053      	str	r3, [r2, #4]
 800ae50:	e7da      	b.n	800ae08 <_malloc_trim_r+0x34>
 800ae52:	2601      	movs	r6, #1
 800ae54:	9b01      	ldr	r3, [sp, #4]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	1b5b      	subs	r3, r3, r5
 800ae5a:	4333      	orrs	r3, r6
 800ae5c:	6053      	str	r3, [r2, #4]
 800ae5e:	4a06      	ldr	r2, [pc, #24]	; (800ae78 <_malloc_trim_r+0xa4>)
 800ae60:	0020      	movs	r0, r4
 800ae62:	6813      	ldr	r3, [r2, #0]
 800ae64:	1b5b      	subs	r3, r3, r5
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	f7fe fe44 	bl	8009af4 <__malloc_unlock>
 800ae6c:	0030      	movs	r0, r6
 800ae6e:	e7cf      	b.n	800ae10 <_malloc_trim_r+0x3c>
 800ae70:	20000038 	.word	0x20000038
 800ae74:	20000440 	.word	0x20000440
 800ae78:	20000be4 	.word	0x20000be4

0800ae7c <_free_r>:
 800ae7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7e:	1e0d      	subs	r5, r1, #0
 800ae80:	9001      	str	r0, [sp, #4]
 800ae82:	d02d      	beq.n	800aee0 <_free_r+0x64>
 800ae84:	f7fe fe2e 	bl	8009ae4 <__malloc_lock>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	0029      	movs	r1, r5
 800ae8c:	469c      	mov	ip, r3
 800ae8e:	3908      	subs	r1, #8
 800ae90:	684f      	ldr	r7, [r1, #4]
 800ae92:	4662      	mov	r2, ip
 800ae94:	003b      	movs	r3, r7
 800ae96:	4664      	mov	r4, ip
 800ae98:	4393      	bics	r3, r2
 800ae9a:	18c8      	adds	r0, r1, r3
 800ae9c:	6845      	ldr	r5, [r0, #4]
 800ae9e:	3202      	adds	r2, #2
 800aea0:	4395      	bics	r5, r2
 800aea2:	4a4a      	ldr	r2, [pc, #296]	; (800afcc <_free_r+0x150>)
 800aea4:	4027      	ands	r7, r4
 800aea6:	6896      	ldr	r6, [r2, #8]
 800aea8:	4286      	cmp	r6, r0
 800aeaa:	d11a      	bne.n	800aee2 <_free_r+0x66>
 800aeac:	195b      	adds	r3, r3, r5
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d106      	bne.n	800aec0 <_free_r+0x44>
 800aeb2:	6808      	ldr	r0, [r1, #0]
 800aeb4:	1a09      	subs	r1, r1, r0
 800aeb6:	688d      	ldr	r5, [r1, #8]
 800aeb8:	181b      	adds	r3, r3, r0
 800aeba:	68c8      	ldr	r0, [r1, #12]
 800aebc:	60e8      	str	r0, [r5, #12]
 800aebe:	6085      	str	r5, [r0, #8]
 800aec0:	2001      	movs	r0, #1
 800aec2:	4318      	orrs	r0, r3
 800aec4:	6048      	str	r0, [r1, #4]
 800aec6:	6091      	str	r1, [r2, #8]
 800aec8:	4a41      	ldr	r2, [pc, #260]	; (800afd0 <_free_r+0x154>)
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d804      	bhi.n	800aeda <_free_r+0x5e>
 800aed0:	4b40      	ldr	r3, [pc, #256]	; (800afd4 <_free_r+0x158>)
 800aed2:	9801      	ldr	r0, [sp, #4]
 800aed4:	6819      	ldr	r1, [r3, #0]
 800aed6:	f7ff ff7d 	bl	800add4 <_malloc_trim_r>
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	f7fe fe0a 	bl	8009af4 <__malloc_unlock>
 800aee0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aee2:	2600      	movs	r6, #0
 800aee4:	6045      	str	r5, [r0, #4]
 800aee6:	42b7      	cmp	r7, r6
 800aee8:	d109      	bne.n	800aefe <_free_r+0x82>
 800aeea:	680f      	ldr	r7, [r1, #0]
 800aeec:	4c3a      	ldr	r4, [pc, #232]	; (800afd8 <_free_r+0x15c>)
 800aeee:	1bc9      	subs	r1, r1, r7
 800aef0:	19db      	adds	r3, r3, r7
 800aef2:	688f      	ldr	r7, [r1, #8]
 800aef4:	42a7      	cmp	r7, r4
 800aef6:	d02c      	beq.n	800af52 <_free_r+0xd6>
 800aef8:	68cc      	ldr	r4, [r1, #12]
 800aefa:	60fc      	str	r4, [r7, #12]
 800aefc:	60a7      	str	r7, [r4, #8]
 800aefe:	1947      	adds	r7, r0, r5
 800af00:	687c      	ldr	r4, [r7, #4]
 800af02:	2701      	movs	r7, #1
 800af04:	423c      	tst	r4, r7
 800af06:	d10b      	bne.n	800af20 <_free_r+0xa4>
 800af08:	195b      	adds	r3, r3, r5
 800af0a:	6885      	ldr	r5, [r0, #8]
 800af0c:	2e00      	cmp	r6, #0
 800af0e:	d122      	bne.n	800af56 <_free_r+0xda>
 800af10:	4c31      	ldr	r4, [pc, #196]	; (800afd8 <_free_r+0x15c>)
 800af12:	42a5      	cmp	r5, r4
 800af14:	d11f      	bne.n	800af56 <_free_r+0xda>
 800af16:	003e      	movs	r6, r7
 800af18:	6151      	str	r1, [r2, #20]
 800af1a:	6111      	str	r1, [r2, #16]
 800af1c:	60cd      	str	r5, [r1, #12]
 800af1e:	608d      	str	r5, [r1, #8]
 800af20:	2501      	movs	r5, #1
 800af22:	0028      	movs	r0, r5
 800af24:	4318      	orrs	r0, r3
 800af26:	6048      	str	r0, [r1, #4]
 800af28:	50cb      	str	r3, [r1, r3]
 800af2a:	2e00      	cmp	r6, #0
 800af2c:	d1d5      	bne.n	800aeda <_free_r+0x5e>
 800af2e:	2080      	movs	r0, #128	; 0x80
 800af30:	0080      	lsls	r0, r0, #2
 800af32:	4283      	cmp	r3, r0
 800af34:	d213      	bcs.n	800af5e <_free_r+0xe2>
 800af36:	08d8      	lsrs	r0, r3, #3
 800af38:	095b      	lsrs	r3, r3, #5
 800af3a:	409d      	lsls	r5, r3
 800af3c:	6853      	ldr	r3, [r2, #4]
 800af3e:	431d      	orrs	r5, r3
 800af40:	00c3      	lsls	r3, r0, #3
 800af42:	189b      	adds	r3, r3, r2
 800af44:	6055      	str	r5, [r2, #4]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	60cb      	str	r3, [r1, #12]
 800af4a:	608a      	str	r2, [r1, #8]
 800af4c:	6099      	str	r1, [r3, #8]
 800af4e:	60d1      	str	r1, [r2, #12]
 800af50:	e7c3      	b.n	800aeda <_free_r+0x5e>
 800af52:	4666      	mov	r6, ip
 800af54:	e7d3      	b.n	800aefe <_free_r+0x82>
 800af56:	68c0      	ldr	r0, [r0, #12]
 800af58:	60e8      	str	r0, [r5, #12]
 800af5a:	6085      	str	r5, [r0, #8]
 800af5c:	e7e0      	b.n	800af20 <_free_r+0xa4>
 800af5e:	0a5d      	lsrs	r5, r3, #9
 800af60:	2d04      	cmp	r5, #4
 800af62:	d812      	bhi.n	800af8a <_free_r+0x10e>
 800af64:	0998      	lsrs	r0, r3, #6
 800af66:	3038      	adds	r0, #56	; 0x38
 800af68:	00c6      	lsls	r6, r0, #3
 800af6a:	18b6      	adds	r6, r6, r2
 800af6c:	68b5      	ldr	r5, [r6, #8]
 800af6e:	2703      	movs	r7, #3
 800af70:	42ae      	cmp	r6, r5
 800af72:	d125      	bne.n	800afc0 <_free_r+0x144>
 800af74:	2301      	movs	r3, #1
 800af76:	1080      	asrs	r0, r0, #2
 800af78:	4083      	lsls	r3, r0
 800af7a:	6850      	ldr	r0, [r2, #4]
 800af7c:	4303      	orrs	r3, r0
 800af7e:	6053      	str	r3, [r2, #4]
 800af80:	60ce      	str	r6, [r1, #12]
 800af82:	608d      	str	r5, [r1, #8]
 800af84:	60b1      	str	r1, [r6, #8]
 800af86:	60e9      	str	r1, [r5, #12]
 800af88:	e7a7      	b.n	800aeda <_free_r+0x5e>
 800af8a:	2d14      	cmp	r5, #20
 800af8c:	d802      	bhi.n	800af94 <_free_r+0x118>
 800af8e:	0028      	movs	r0, r5
 800af90:	305b      	adds	r0, #91	; 0x5b
 800af92:	e7e9      	b.n	800af68 <_free_r+0xec>
 800af94:	2d54      	cmp	r5, #84	; 0x54
 800af96:	d802      	bhi.n	800af9e <_free_r+0x122>
 800af98:	0b18      	lsrs	r0, r3, #12
 800af9a:	306e      	adds	r0, #110	; 0x6e
 800af9c:	e7e4      	b.n	800af68 <_free_r+0xec>
 800af9e:	20aa      	movs	r0, #170	; 0xaa
 800afa0:	0040      	lsls	r0, r0, #1
 800afa2:	4285      	cmp	r5, r0
 800afa4:	d802      	bhi.n	800afac <_free_r+0x130>
 800afa6:	0bd8      	lsrs	r0, r3, #15
 800afa8:	3077      	adds	r0, #119	; 0x77
 800afaa:	e7dd      	b.n	800af68 <_free_r+0xec>
 800afac:	4e0b      	ldr	r6, [pc, #44]	; (800afdc <_free_r+0x160>)
 800afae:	207e      	movs	r0, #126	; 0x7e
 800afb0:	42b5      	cmp	r5, r6
 800afb2:	d8d9      	bhi.n	800af68 <_free_r+0xec>
 800afb4:	0c98      	lsrs	r0, r3, #18
 800afb6:	307c      	adds	r0, #124	; 0x7c
 800afb8:	e7d6      	b.n	800af68 <_free_r+0xec>
 800afba:	68ad      	ldr	r5, [r5, #8]
 800afbc:	42ae      	cmp	r6, r5
 800afbe:	d003      	beq.n	800afc8 <_free_r+0x14c>
 800afc0:	686a      	ldr	r2, [r5, #4]
 800afc2:	43ba      	bics	r2, r7
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d8f8      	bhi.n	800afba <_free_r+0x13e>
 800afc8:	68ee      	ldr	r6, [r5, #12]
 800afca:	e7d9      	b.n	800af80 <_free_r+0x104>
 800afcc:	20000038 	.word	0x20000038
 800afd0:	20000444 	.word	0x20000444
 800afd4:	20000c14 	.word	0x20000c14
 800afd8:	20000040 	.word	0x20000040
 800afdc:	00000554 	.word	0x00000554

0800afe0 <rshift>:
 800afe0:	0002      	movs	r2, r0
 800afe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afe4:	6904      	ldr	r4, [r0, #16]
 800afe6:	114b      	asrs	r3, r1, #5
 800afe8:	b085      	sub	sp, #20
 800afea:	3214      	adds	r2, #20
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	114d      	asrs	r5, r1, #5
 800aff0:	0013      	movs	r3, r2
 800aff2:	42ac      	cmp	r4, r5
 800aff4:	dd32      	ble.n	800b05c <rshift+0x7c>
 800aff6:	261f      	movs	r6, #31
 800aff8:	000f      	movs	r7, r1
 800affa:	114b      	asrs	r3, r1, #5
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	00a5      	lsls	r5, r4, #2
 800b000:	18d3      	adds	r3, r2, r3
 800b002:	4037      	ands	r7, r6
 800b004:	1955      	adds	r5, r2, r5
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	9701      	str	r7, [sp, #4]
 800b00a:	4231      	tst	r1, r6
 800b00c:	d10d      	bne.n	800b02a <rshift+0x4a>
 800b00e:	0016      	movs	r6, r2
 800b010:	0019      	movs	r1, r3
 800b012:	428d      	cmp	r5, r1
 800b014:	d836      	bhi.n	800b084 <rshift+0xa4>
 800b016:	9900      	ldr	r1, [sp, #0]
 800b018:	2300      	movs	r3, #0
 800b01a:	3903      	subs	r1, #3
 800b01c:	428d      	cmp	r5, r1
 800b01e:	d302      	bcc.n	800b026 <rshift+0x46>
 800b020:	9b02      	ldr	r3, [sp, #8]
 800b022:	1ae4      	subs	r4, r4, r3
 800b024:	00a3      	lsls	r3, r4, #2
 800b026:	18d3      	adds	r3, r2, r3
 800b028:	e018      	b.n	800b05c <rshift+0x7c>
 800b02a:	2120      	movs	r1, #32
 800b02c:	9e01      	ldr	r6, [sp, #4]
 800b02e:	9f01      	ldr	r7, [sp, #4]
 800b030:	1b89      	subs	r1, r1, r6
 800b032:	9e00      	ldr	r6, [sp, #0]
 800b034:	9103      	str	r1, [sp, #12]
 800b036:	ce02      	ldmia	r6!, {r1}
 800b038:	4694      	mov	ip, r2
 800b03a:	40f9      	lsrs	r1, r7
 800b03c:	42b5      	cmp	r5, r6
 800b03e:	d816      	bhi.n	800b06e <rshift+0x8e>
 800b040:	9e00      	ldr	r6, [sp, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	3601      	adds	r6, #1
 800b046:	42b5      	cmp	r5, r6
 800b048:	d303      	bcc.n	800b052 <rshift+0x72>
 800b04a:	9b02      	ldr	r3, [sp, #8]
 800b04c:	1ae3      	subs	r3, r4, r3
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	3b04      	subs	r3, #4
 800b052:	18d3      	adds	r3, r2, r3
 800b054:	6019      	str	r1, [r3, #0]
 800b056:	2900      	cmp	r1, #0
 800b058:	d000      	beq.n	800b05c <rshift+0x7c>
 800b05a:	3304      	adds	r3, #4
 800b05c:	1a99      	subs	r1, r3, r2
 800b05e:	1089      	asrs	r1, r1, #2
 800b060:	6101      	str	r1, [r0, #16]
 800b062:	4293      	cmp	r3, r2
 800b064:	d101      	bne.n	800b06a <rshift+0x8a>
 800b066:	2300      	movs	r3, #0
 800b068:	6143      	str	r3, [r0, #20]
 800b06a:	b005      	add	sp, #20
 800b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06e:	6837      	ldr	r7, [r6, #0]
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	409f      	lsls	r7, r3
 800b074:	430f      	orrs	r7, r1
 800b076:	4661      	mov	r1, ip
 800b078:	c180      	stmia	r1!, {r7}
 800b07a:	468c      	mov	ip, r1
 800b07c:	9b01      	ldr	r3, [sp, #4]
 800b07e:	ce02      	ldmia	r6!, {r1}
 800b080:	40d9      	lsrs	r1, r3
 800b082:	e7db      	b.n	800b03c <rshift+0x5c>
 800b084:	c980      	ldmia	r1!, {r7}
 800b086:	c680      	stmia	r6!, {r7}
 800b088:	e7c3      	b.n	800b012 <rshift+0x32>

0800b08a <__hexdig_fun>:
 800b08a:	0002      	movs	r2, r0
 800b08c:	3a30      	subs	r2, #48	; 0x30
 800b08e:	0003      	movs	r3, r0
 800b090:	2a09      	cmp	r2, #9
 800b092:	d802      	bhi.n	800b09a <__hexdig_fun+0x10>
 800b094:	3b20      	subs	r3, #32
 800b096:	b2d8      	uxtb	r0, r3
 800b098:	4770      	bx	lr
 800b09a:	0002      	movs	r2, r0
 800b09c:	3a61      	subs	r2, #97	; 0x61
 800b09e:	2a05      	cmp	r2, #5
 800b0a0:	d801      	bhi.n	800b0a6 <__hexdig_fun+0x1c>
 800b0a2:	3b47      	subs	r3, #71	; 0x47
 800b0a4:	e7f7      	b.n	800b096 <__hexdig_fun+0xc>
 800b0a6:	001a      	movs	r2, r3
 800b0a8:	3a41      	subs	r2, #65	; 0x41
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	2a05      	cmp	r2, #5
 800b0ae:	d8f3      	bhi.n	800b098 <__hexdig_fun+0xe>
 800b0b0:	3b27      	subs	r3, #39	; 0x27
 800b0b2:	e7f0      	b.n	800b096 <__hexdig_fun+0xc>

0800b0b4 <__gethex>:
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	9201      	str	r2, [sp, #4]
 800b0be:	680a      	ldr	r2, [r1, #0]
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	9003      	str	r0, [sp, #12]
 800b0c4:	9106      	str	r1, [sp, #24]
 800b0c6:	1c96      	adds	r6, r2, #2
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	199a      	adds	r2, r3, r6
 800b0cc:	9600      	str	r6, [sp, #0]
 800b0ce:	9205      	str	r2, [sp, #20]
 800b0d0:	9a00      	ldr	r2, [sp, #0]
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	7810      	ldrb	r0, [r2, #0]
 800b0d6:	2830      	cmp	r0, #48	; 0x30
 800b0d8:	d0f7      	beq.n	800b0ca <__gethex+0x16>
 800b0da:	f7ff ffd6 	bl	800b08a <__hexdig_fun>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	001d      	movs	r5, r3
 800b0e2:	9302      	str	r3, [sp, #8]
 800b0e4:	4298      	cmp	r0, r3
 800b0e6:	d11d      	bne.n	800b124 <__gethex+0x70>
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	49a6      	ldr	r1, [pc, #664]	; (800b384 <__gethex+0x2d0>)
 800b0ec:	9800      	ldr	r0, [sp, #0]
 800b0ee:	f7ff fd6d 	bl	800abcc <strncmp>
 800b0f2:	0007      	movs	r7, r0
 800b0f4:	42a8      	cmp	r0, r5
 800b0f6:	d169      	bne.n	800b1cc <__gethex+0x118>
 800b0f8:	9b00      	ldr	r3, [sp, #0]
 800b0fa:	0034      	movs	r4, r6
 800b0fc:	7858      	ldrb	r0, [r3, #1]
 800b0fe:	f7ff ffc4 	bl	800b08a <__hexdig_fun>
 800b102:	2301      	movs	r3, #1
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	42a8      	cmp	r0, r5
 800b108:	d02f      	beq.n	800b16a <__gethex+0xb6>
 800b10a:	9600      	str	r6, [sp, #0]
 800b10c:	9b00      	ldr	r3, [sp, #0]
 800b10e:	7818      	ldrb	r0, [r3, #0]
 800b110:	2830      	cmp	r0, #48	; 0x30
 800b112:	d009      	beq.n	800b128 <__gethex+0x74>
 800b114:	f7ff ffb9 	bl	800b08a <__hexdig_fun>
 800b118:	4242      	negs	r2, r0
 800b11a:	4142      	adcs	r2, r0
 800b11c:	2301      	movs	r3, #1
 800b11e:	0035      	movs	r5, r6
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	9c00      	ldr	r4, [sp, #0]
 800b126:	e004      	b.n	800b132 <__gethex+0x7e>
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	3301      	adds	r3, #1
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	e7ed      	b.n	800b10c <__gethex+0x58>
 800b130:	3401      	adds	r4, #1
 800b132:	7820      	ldrb	r0, [r4, #0]
 800b134:	f7ff ffa9 	bl	800b08a <__hexdig_fun>
 800b138:	1e07      	subs	r7, r0, #0
 800b13a:	d1f9      	bne.n	800b130 <__gethex+0x7c>
 800b13c:	2201      	movs	r2, #1
 800b13e:	0020      	movs	r0, r4
 800b140:	4990      	ldr	r1, [pc, #576]	; (800b384 <__gethex+0x2d0>)
 800b142:	f7ff fd43 	bl	800abcc <strncmp>
 800b146:	2800      	cmp	r0, #0
 800b148:	d10d      	bne.n	800b166 <__gethex+0xb2>
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	d106      	bne.n	800b15c <__gethex+0xa8>
 800b14e:	3401      	adds	r4, #1
 800b150:	0025      	movs	r5, r4
 800b152:	7820      	ldrb	r0, [r4, #0]
 800b154:	f7ff ff99 	bl	800b08a <__hexdig_fun>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d102      	bne.n	800b162 <__gethex+0xae>
 800b15c:	1b2d      	subs	r5, r5, r4
 800b15e:	00af      	lsls	r7, r5, #2
 800b160:	e003      	b.n	800b16a <__gethex+0xb6>
 800b162:	3401      	adds	r4, #1
 800b164:	e7f5      	b.n	800b152 <__gethex+0x9e>
 800b166:	2d00      	cmp	r5, #0
 800b168:	d1f8      	bne.n	800b15c <__gethex+0xa8>
 800b16a:	2220      	movs	r2, #32
 800b16c:	7823      	ldrb	r3, [r4, #0]
 800b16e:	0026      	movs	r6, r4
 800b170:	4393      	bics	r3, r2
 800b172:	2b50      	cmp	r3, #80	; 0x50
 800b174:	d11d      	bne.n	800b1b2 <__gethex+0xfe>
 800b176:	7863      	ldrb	r3, [r4, #1]
 800b178:	2b2b      	cmp	r3, #43	; 0x2b
 800b17a:	d02c      	beq.n	800b1d6 <__gethex+0x122>
 800b17c:	2b2d      	cmp	r3, #45	; 0x2d
 800b17e:	d02e      	beq.n	800b1de <__gethex+0x12a>
 800b180:	2300      	movs	r3, #0
 800b182:	1c66      	adds	r6, r4, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	7830      	ldrb	r0, [r6, #0]
 800b188:	f7ff ff7f 	bl	800b08a <__hexdig_fun>
 800b18c:	1e43      	subs	r3, r0, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b18      	cmp	r3, #24
 800b192:	d82b      	bhi.n	800b1ec <__gethex+0x138>
 800b194:	3810      	subs	r0, #16
 800b196:	0005      	movs	r5, r0
 800b198:	7870      	ldrb	r0, [r6, #1]
 800b19a:	f7ff ff76 	bl	800b08a <__hexdig_fun>
 800b19e:	1e43      	subs	r3, r0, #1
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	2b18      	cmp	r3, #24
 800b1a6:	d91c      	bls.n	800b1e2 <__gethex+0x12e>
 800b1a8:	9b04      	ldr	r3, [sp, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d000      	beq.n	800b1b0 <__gethex+0xfc>
 800b1ae:	426d      	negs	r5, r5
 800b1b0:	197f      	adds	r7, r7, r5
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	601e      	str	r6, [r3, #0]
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d019      	beq.n	800b1f0 <__gethex+0x13c>
 800b1bc:	2600      	movs	r6, #0
 800b1be:	9b05      	ldr	r3, [sp, #20]
 800b1c0:	42b3      	cmp	r3, r6
 800b1c2:	d100      	bne.n	800b1c6 <__gethex+0x112>
 800b1c4:	3606      	adds	r6, #6
 800b1c6:	0030      	movs	r0, r6
 800b1c8:	b009      	add	sp, #36	; 0x24
 800b1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	2700      	movs	r7, #0
 800b1d0:	9c00      	ldr	r4, [sp, #0]
 800b1d2:	9302      	str	r3, [sp, #8]
 800b1d4:	e7c9      	b.n	800b16a <__gethex+0xb6>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	1ca6      	adds	r6, r4, #2
 800b1dc:	e7d3      	b.n	800b186 <__gethex+0xd2>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7fa      	b.n	800b1d8 <__gethex+0x124>
 800b1e2:	230a      	movs	r3, #10
 800b1e4:	435d      	muls	r5, r3
 800b1e6:	182d      	adds	r5, r5, r0
 800b1e8:	3d10      	subs	r5, #16
 800b1ea:	e7d5      	b.n	800b198 <__gethex+0xe4>
 800b1ec:	0026      	movs	r6, r4
 800b1ee:	e7e0      	b.n	800b1b2 <__gethex+0xfe>
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	9902      	ldr	r1, [sp, #8]
 800b1f4:	1ae3      	subs	r3, r4, r3
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	2b07      	cmp	r3, #7
 800b1fa:	dc0a      	bgt.n	800b212 <__gethex+0x15e>
 800b1fc:	9803      	ldr	r0, [sp, #12]
 800b1fe:	f000 fa5d 	bl	800b6bc <_Balloc>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	d108      	bne.n	800b218 <__gethex+0x164>
 800b206:	002a      	movs	r2, r5
 800b208:	21e4      	movs	r1, #228	; 0xe4
 800b20a:	4b5f      	ldr	r3, [pc, #380]	; (800b388 <__gethex+0x2d4>)
 800b20c:	485f      	ldr	r0, [pc, #380]	; (800b38c <__gethex+0x2d8>)
 800b20e:	f003 fd19 	bl	800ec44 <__assert_func>
 800b212:	3101      	adds	r1, #1
 800b214:	105b      	asrs	r3, r3, #1
 800b216:	e7ef      	b.n	800b1f8 <__gethex+0x144>
 800b218:	0003      	movs	r3, r0
 800b21a:	3314      	adds	r3, #20
 800b21c:	9302      	str	r3, [sp, #8]
 800b21e:	9305      	str	r3, [sp, #20]
 800b220:	2300      	movs	r3, #0
 800b222:	001e      	movs	r6, r3
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d33f      	bcc.n	800b2ac <__gethex+0x1f8>
 800b22c:	9c05      	ldr	r4, [sp, #20]
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	c440      	stmia	r4!, {r6}
 800b232:	1ae4      	subs	r4, r4, r3
 800b234:	10a4      	asrs	r4, r4, #2
 800b236:	0030      	movs	r0, r6
 800b238:	612c      	str	r4, [r5, #16]
 800b23a:	f000 fb01 	bl	800b840 <__hi0bits>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	0164      	lsls	r4, r4, #5
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	1a26      	subs	r6, r4, r0
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	429e      	cmp	r6, r3
 800b24a:	dd51      	ble.n	800b2f0 <__gethex+0x23c>
 800b24c:	1af6      	subs	r6, r6, r3
 800b24e:	0031      	movs	r1, r6
 800b250:	0028      	movs	r0, r5
 800b252:	f000 fe7b 	bl	800bf4c <__any_on>
 800b256:	1e04      	subs	r4, r0, #0
 800b258:	d016      	beq.n	800b288 <__gethex+0x1d4>
 800b25a:	2401      	movs	r4, #1
 800b25c:	231f      	movs	r3, #31
 800b25e:	0020      	movs	r0, r4
 800b260:	1e72      	subs	r2, r6, #1
 800b262:	4013      	ands	r3, r2
 800b264:	4098      	lsls	r0, r3
 800b266:	0003      	movs	r3, r0
 800b268:	1151      	asrs	r1, r2, #5
 800b26a:	9802      	ldr	r0, [sp, #8]
 800b26c:	0089      	lsls	r1, r1, #2
 800b26e:	5809      	ldr	r1, [r1, r0]
 800b270:	4219      	tst	r1, r3
 800b272:	d009      	beq.n	800b288 <__gethex+0x1d4>
 800b274:	42a2      	cmp	r2, r4
 800b276:	dd06      	ble.n	800b286 <__gethex+0x1d2>
 800b278:	0028      	movs	r0, r5
 800b27a:	1eb1      	subs	r1, r6, #2
 800b27c:	f000 fe66 	bl	800bf4c <__any_on>
 800b280:	3402      	adds	r4, #2
 800b282:	2800      	cmp	r0, #0
 800b284:	d100      	bne.n	800b288 <__gethex+0x1d4>
 800b286:	2402      	movs	r4, #2
 800b288:	0031      	movs	r1, r6
 800b28a:	0028      	movs	r0, r5
 800b28c:	f7ff fea8 	bl	800afe0 <rshift>
 800b290:	19bf      	adds	r7, r7, r6
 800b292:	9b01      	ldr	r3, [sp, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	42bb      	cmp	r3, r7
 800b298:	da3a      	bge.n	800b310 <__gethex+0x25c>
 800b29a:	0029      	movs	r1, r5
 800b29c:	9803      	ldr	r0, [sp, #12]
 800b29e:	f000 fa35 	bl	800b70c <_Bfree>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2a6:	26a3      	movs	r6, #163	; 0xa3
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	e78c      	b.n	800b1c6 <__gethex+0x112>
 800b2ac:	3c01      	subs	r4, #1
 800b2ae:	7823      	ldrb	r3, [r4, #0]
 800b2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b2:	d012      	beq.n	800b2da <__gethex+0x226>
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	2b20      	cmp	r3, #32
 800b2b8:	d104      	bne.n	800b2c4 <__gethex+0x210>
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	c340      	stmia	r3!, {r6}
 800b2be:	2600      	movs	r6, #0
 800b2c0:	9305      	str	r3, [sp, #20]
 800b2c2:	9604      	str	r6, [sp, #16]
 800b2c4:	7820      	ldrb	r0, [r4, #0]
 800b2c6:	f7ff fee0 	bl	800b08a <__hexdig_fun>
 800b2ca:	230f      	movs	r3, #15
 800b2cc:	4018      	ands	r0, r3
 800b2ce:	9b04      	ldr	r3, [sp, #16]
 800b2d0:	4098      	lsls	r0, r3
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	4306      	orrs	r6, r0
 800b2d6:	9304      	str	r3, [sp, #16]
 800b2d8:	e7a5      	b.n	800b226 <__gethex+0x172>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d8e9      	bhi.n	800b2b4 <__gethex+0x200>
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	0020      	movs	r0, r4
 800b2e4:	4927      	ldr	r1, [pc, #156]	; (800b384 <__gethex+0x2d0>)
 800b2e6:	f7ff fc71 	bl	800abcc <strncmp>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d1e2      	bne.n	800b2b4 <__gethex+0x200>
 800b2ee:	e79a      	b.n	800b226 <__gethex+0x172>
 800b2f0:	9b00      	ldr	r3, [sp, #0]
 800b2f2:	2400      	movs	r4, #0
 800b2f4:	429e      	cmp	r6, r3
 800b2f6:	dacc      	bge.n	800b292 <__gethex+0x1de>
 800b2f8:	1b9e      	subs	r6, r3, r6
 800b2fa:	0029      	movs	r1, r5
 800b2fc:	0032      	movs	r2, r6
 800b2fe:	9803      	ldr	r0, [sp, #12]
 800b300:	f000 fbf0 	bl	800bae4 <__lshift>
 800b304:	0003      	movs	r3, r0
 800b306:	3314      	adds	r3, #20
 800b308:	0005      	movs	r5, r0
 800b30a:	1bbf      	subs	r7, r7, r6
 800b30c:	9302      	str	r3, [sp, #8]
 800b30e:	e7c0      	b.n	800b292 <__gethex+0x1de>
 800b310:	9b01      	ldr	r3, [sp, #4]
 800b312:	685e      	ldr	r6, [r3, #4]
 800b314:	42be      	cmp	r6, r7
 800b316:	dd70      	ble.n	800b3fa <__gethex+0x346>
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	1bf6      	subs	r6, r6, r7
 800b31c:	42b3      	cmp	r3, r6
 800b31e:	dc37      	bgt.n	800b390 <__gethex+0x2dc>
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d024      	beq.n	800b372 <__gethex+0x2be>
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d026      	beq.n	800b37a <__gethex+0x2c6>
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d117      	bne.n	800b360 <__gethex+0x2ac>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	42b3      	cmp	r3, r6
 800b334:	d114      	bne.n	800b360 <__gethex+0x2ac>
 800b336:	2b01      	cmp	r3, #1
 800b338:	d10b      	bne.n	800b352 <__gethex+0x29e>
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	9a07      	ldr	r2, [sp, #28]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	2662      	movs	r6, #98	; 0x62
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	2301      	movs	r3, #1
 800b346:	9a02      	ldr	r2, [sp, #8]
 800b348:	612b      	str	r3, [r5, #16]
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b34e:	601d      	str	r5, [r3, #0]
 800b350:	e739      	b.n	800b1c6 <__gethex+0x112>
 800b352:	9900      	ldr	r1, [sp, #0]
 800b354:	0028      	movs	r0, r5
 800b356:	3901      	subs	r1, #1
 800b358:	f000 fdf8 	bl	800bf4c <__any_on>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1ec      	bne.n	800b33a <__gethex+0x286>
 800b360:	0029      	movs	r1, r5
 800b362:	9803      	ldr	r0, [sp, #12]
 800b364:	f000 f9d2 	bl	800b70c <_Bfree>
 800b368:	2300      	movs	r3, #0
 800b36a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b36c:	2650      	movs	r6, #80	; 0x50
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	e729      	b.n	800b1c6 <__gethex+0x112>
 800b372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1f3      	bne.n	800b360 <__gethex+0x2ac>
 800b378:	e7df      	b.n	800b33a <__gethex+0x286>
 800b37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1dc      	bne.n	800b33a <__gethex+0x286>
 800b380:	e7ee      	b.n	800b360 <__gethex+0x2ac>
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	08012f28 	.word	0x08012f28
 800b388:	08013089 	.word	0x08013089
 800b38c:	0801309a 	.word	0x0801309a
 800b390:	1e77      	subs	r7, r6, #1
 800b392:	2c00      	cmp	r4, #0
 800b394:	d12f      	bne.n	800b3f6 <__gethex+0x342>
 800b396:	2f00      	cmp	r7, #0
 800b398:	d004      	beq.n	800b3a4 <__gethex+0x2f0>
 800b39a:	0039      	movs	r1, r7
 800b39c:	0028      	movs	r0, r5
 800b39e:	f000 fdd5 	bl	800bf4c <__any_on>
 800b3a2:	0004      	movs	r4, r0
 800b3a4:	231f      	movs	r3, #31
 800b3a6:	117a      	asrs	r2, r7, #5
 800b3a8:	401f      	ands	r7, r3
 800b3aa:	3b1e      	subs	r3, #30
 800b3ac:	40bb      	lsls	r3, r7
 800b3ae:	9902      	ldr	r1, [sp, #8]
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	5852      	ldr	r2, [r2, r1]
 800b3b4:	421a      	tst	r2, r3
 800b3b6:	d001      	beq.n	800b3bc <__gethex+0x308>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	431c      	orrs	r4, r3
 800b3bc:	9b00      	ldr	r3, [sp, #0]
 800b3be:	0031      	movs	r1, r6
 800b3c0:	1b9b      	subs	r3, r3, r6
 800b3c2:	2602      	movs	r6, #2
 800b3c4:	0028      	movs	r0, r5
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	f7ff fe0a 	bl	800afe0 <rshift>
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	685f      	ldr	r7, [r3, #4]
 800b3d0:	2c00      	cmp	r4, #0
 800b3d2:	d041      	beq.n	800b458 <__gethex+0x3a4>
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d010      	beq.n	800b3fe <__gethex+0x34a>
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d012      	beq.n	800b406 <__gethex+0x352>
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d106      	bne.n	800b3f2 <__gethex+0x33e>
 800b3e4:	07a2      	lsls	r2, r4, #30
 800b3e6:	d504      	bpl.n	800b3f2 <__gethex+0x33e>
 800b3e8:	9a02      	ldr	r2, [sp, #8]
 800b3ea:	6812      	ldr	r2, [r2, #0]
 800b3ec:	4314      	orrs	r4, r2
 800b3ee:	421c      	tst	r4, r3
 800b3f0:	d10c      	bne.n	800b40c <__gethex+0x358>
 800b3f2:	2310      	movs	r3, #16
 800b3f4:	e02f      	b.n	800b456 <__gethex+0x3a2>
 800b3f6:	2401      	movs	r4, #1
 800b3f8:	e7d4      	b.n	800b3a4 <__gethex+0x2f0>
 800b3fa:	2601      	movs	r6, #1
 800b3fc:	e7e8      	b.n	800b3d0 <__gethex+0x31c>
 800b3fe:	2301      	movs	r3, #1
 800b400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	930f      	str	r3, [sp, #60]	; 0x3c
 800b406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f2      	beq.n	800b3f2 <__gethex+0x33e>
 800b40c:	692b      	ldr	r3, [r5, #16]
 800b40e:	2000      	movs	r0, #0
 800b410:	9302      	str	r3, [sp, #8]
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	002b      	movs	r3, r5
 800b418:	9a04      	ldr	r2, [sp, #16]
 800b41a:	3314      	adds	r3, #20
 800b41c:	1899      	adds	r1, r3, r2
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	1c54      	adds	r4, r2, #1
 800b422:	d01e      	beq.n	800b462 <__gethex+0x3ae>
 800b424:	3201      	adds	r2, #1
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	002b      	movs	r3, r5
 800b42a:	3314      	adds	r3, #20
 800b42c:	2e02      	cmp	r6, #2
 800b42e:	d141      	bne.n	800b4b4 <__gethex+0x400>
 800b430:	9a01      	ldr	r2, [sp, #4]
 800b432:	9900      	ldr	r1, [sp, #0]
 800b434:	6812      	ldr	r2, [r2, #0]
 800b436:	3a01      	subs	r2, #1
 800b438:	428a      	cmp	r2, r1
 800b43a:	d10b      	bne.n	800b454 <__gethex+0x3a0>
 800b43c:	221f      	movs	r2, #31
 800b43e:	9800      	ldr	r0, [sp, #0]
 800b440:	1149      	asrs	r1, r1, #5
 800b442:	4002      	ands	r2, r0
 800b444:	2001      	movs	r0, #1
 800b446:	0004      	movs	r4, r0
 800b448:	4094      	lsls	r4, r2
 800b44a:	0089      	lsls	r1, r1, #2
 800b44c:	58cb      	ldr	r3, [r1, r3]
 800b44e:	4223      	tst	r3, r4
 800b450:	d000      	beq.n	800b454 <__gethex+0x3a0>
 800b452:	2601      	movs	r6, #1
 800b454:	2320      	movs	r3, #32
 800b456:	431e      	orrs	r6, r3
 800b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45a:	601d      	str	r5, [r3, #0]
 800b45c:	9b07      	ldr	r3, [sp, #28]
 800b45e:	601f      	str	r7, [r3, #0]
 800b460:	e6b1      	b.n	800b1c6 <__gethex+0x112>
 800b462:	c301      	stmia	r3!, {r0}
 800b464:	4299      	cmp	r1, r3
 800b466:	d8da      	bhi.n	800b41e <__gethex+0x36a>
 800b468:	68ab      	ldr	r3, [r5, #8]
 800b46a:	9a02      	ldr	r2, [sp, #8]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	db18      	blt.n	800b4a2 <__gethex+0x3ee>
 800b470:	6869      	ldr	r1, [r5, #4]
 800b472:	9803      	ldr	r0, [sp, #12]
 800b474:	3101      	adds	r1, #1
 800b476:	f000 f921 	bl	800b6bc <_Balloc>
 800b47a:	1e04      	subs	r4, r0, #0
 800b47c:	d104      	bne.n	800b488 <__gethex+0x3d4>
 800b47e:	0022      	movs	r2, r4
 800b480:	2184      	movs	r1, #132	; 0x84
 800b482:	4b1c      	ldr	r3, [pc, #112]	; (800b4f4 <__gethex+0x440>)
 800b484:	481c      	ldr	r0, [pc, #112]	; (800b4f8 <__gethex+0x444>)
 800b486:	e6c2      	b.n	800b20e <__gethex+0x15a>
 800b488:	0029      	movs	r1, r5
 800b48a:	692a      	ldr	r2, [r5, #16]
 800b48c:	310c      	adds	r1, #12
 800b48e:	3202      	adds	r2, #2
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	300c      	adds	r0, #12
 800b494:	f7ff fc77 	bl	800ad86 <memcpy>
 800b498:	0029      	movs	r1, r5
 800b49a:	9803      	ldr	r0, [sp, #12]
 800b49c:	f000 f936 	bl	800b70c <_Bfree>
 800b4a0:	0025      	movs	r5, r4
 800b4a2:	692b      	ldr	r3, [r5, #16]
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	612a      	str	r2, [r5, #16]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	18eb      	adds	r3, r5, r3
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	e7b9      	b.n	800b428 <__gethex+0x374>
 800b4b4:	692a      	ldr	r2, [r5, #16]
 800b4b6:	9902      	ldr	r1, [sp, #8]
 800b4b8:	428a      	cmp	r2, r1
 800b4ba:	dd09      	ble.n	800b4d0 <__gethex+0x41c>
 800b4bc:	2101      	movs	r1, #1
 800b4be:	0028      	movs	r0, r5
 800b4c0:	f7ff fd8e 	bl	800afe0 <rshift>
 800b4c4:	9b01      	ldr	r3, [sp, #4]
 800b4c6:	3701      	adds	r7, #1
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	42bb      	cmp	r3, r7
 800b4cc:	dac1      	bge.n	800b452 <__gethex+0x39e>
 800b4ce:	e6e4      	b.n	800b29a <__gethex+0x1e6>
 800b4d0:	221f      	movs	r2, #31
 800b4d2:	9c00      	ldr	r4, [sp, #0]
 800b4d4:	9900      	ldr	r1, [sp, #0]
 800b4d6:	2601      	movs	r6, #1
 800b4d8:	4014      	ands	r4, r2
 800b4da:	4211      	tst	r1, r2
 800b4dc:	d0ba      	beq.n	800b454 <__gethex+0x3a0>
 800b4de:	9a04      	ldr	r2, [sp, #16]
 800b4e0:	189b      	adds	r3, r3, r2
 800b4e2:	3b04      	subs	r3, #4
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f000 f9ab 	bl	800b840 <__hi0bits>
 800b4ea:	2320      	movs	r3, #32
 800b4ec:	1b1b      	subs	r3, r3, r4
 800b4ee:	4298      	cmp	r0, r3
 800b4f0:	dbe4      	blt.n	800b4bc <__gethex+0x408>
 800b4f2:	e7af      	b.n	800b454 <__gethex+0x3a0>
 800b4f4:	08013089 	.word	0x08013089
 800b4f8:	0801309a 	.word	0x0801309a

0800b4fc <L_shift>:
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	b570      	push	{r4, r5, r6, lr}
 800b500:	2520      	movs	r5, #32
 800b502:	1a9a      	subs	r2, r3, r2
 800b504:	0092      	lsls	r2, r2, #2
 800b506:	1aad      	subs	r5, r5, r2
 800b508:	6843      	ldr	r3, [r0, #4]
 800b50a:	6804      	ldr	r4, [r0, #0]
 800b50c:	001e      	movs	r6, r3
 800b50e:	40ae      	lsls	r6, r5
 800b510:	40d3      	lsrs	r3, r2
 800b512:	4334      	orrs	r4, r6
 800b514:	6004      	str	r4, [r0, #0]
 800b516:	6043      	str	r3, [r0, #4]
 800b518:	3004      	adds	r0, #4
 800b51a:	4288      	cmp	r0, r1
 800b51c:	d3f4      	bcc.n	800b508 <L_shift+0xc>
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <__match>:
 800b520:	b530      	push	{r4, r5, lr}
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	780c      	ldrb	r4, [r1, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	2c00      	cmp	r4, #0
 800b52a:	d102      	bne.n	800b532 <__match+0x12>
 800b52c:	6003      	str	r3, [r0, #0]
 800b52e:	2001      	movs	r0, #1
 800b530:	bd30      	pop	{r4, r5, pc}
 800b532:	781a      	ldrb	r2, [r3, #0]
 800b534:	0015      	movs	r5, r2
 800b536:	3d41      	subs	r5, #65	; 0x41
 800b538:	2d19      	cmp	r5, #25
 800b53a:	d800      	bhi.n	800b53e <__match+0x1e>
 800b53c:	3220      	adds	r2, #32
 800b53e:	3101      	adds	r1, #1
 800b540:	42a2      	cmp	r2, r4
 800b542:	d0ef      	beq.n	800b524 <__match+0x4>
 800b544:	2000      	movs	r0, #0
 800b546:	e7f3      	b.n	800b530 <__match+0x10>

0800b548 <__hexnan>:
 800b548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54a:	680b      	ldr	r3, [r1, #0]
 800b54c:	b08b      	sub	sp, #44	; 0x2c
 800b54e:	9201      	str	r2, [sp, #4]
 800b550:	9901      	ldr	r1, [sp, #4]
 800b552:	115a      	asrs	r2, r3, #5
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	188a      	adds	r2, r1, r2
 800b558:	9202      	str	r2, [sp, #8]
 800b55a:	0019      	movs	r1, r3
 800b55c:	221f      	movs	r2, #31
 800b55e:	4011      	ands	r1, r2
 800b560:	9008      	str	r0, [sp, #32]
 800b562:	9106      	str	r1, [sp, #24]
 800b564:	4213      	tst	r3, r2
 800b566:	d002      	beq.n	800b56e <__hexnan+0x26>
 800b568:	9b02      	ldr	r3, [sp, #8]
 800b56a:	3304      	adds	r3, #4
 800b56c:	9302      	str	r3, [sp, #8]
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	2500      	movs	r5, #0
 800b572:	1f1f      	subs	r7, r3, #4
 800b574:	003e      	movs	r6, r7
 800b576:	003c      	movs	r4, r7
 800b578:	9b08      	ldr	r3, [sp, #32]
 800b57a:	603d      	str	r5, [r7, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	9507      	str	r5, [sp, #28]
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	9503      	str	r5, [sp, #12]
 800b584:	9b05      	ldr	r3, [sp, #20]
 800b586:	3301      	adds	r3, #1
 800b588:	9309      	str	r3, [sp, #36]	; 0x24
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	785b      	ldrb	r3, [r3, #1]
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d028      	beq.n	800b5e6 <__hexnan+0x9e>
 800b594:	9804      	ldr	r0, [sp, #16]
 800b596:	f7ff fd78 	bl	800b08a <__hexdig_fun>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d154      	bne.n	800b648 <__hexnan+0x100>
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	2b20      	cmp	r3, #32
 800b5a2:	d819      	bhi.n	800b5d8 <__hexnan+0x90>
 800b5a4:	9b03      	ldr	r3, [sp, #12]
 800b5a6:	9a07      	ldr	r2, [sp, #28]
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	dd12      	ble.n	800b5d2 <__hexnan+0x8a>
 800b5ac:	42b4      	cmp	r4, r6
 800b5ae:	d206      	bcs.n	800b5be <__hexnan+0x76>
 800b5b0:	2d07      	cmp	r5, #7
 800b5b2:	dc04      	bgt.n	800b5be <__hexnan+0x76>
 800b5b4:	002a      	movs	r2, r5
 800b5b6:	0031      	movs	r1, r6
 800b5b8:	0020      	movs	r0, r4
 800b5ba:	f7ff ff9f 	bl	800b4fc <L_shift>
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	2508      	movs	r5, #8
 800b5c2:	429c      	cmp	r4, r3
 800b5c4:	d905      	bls.n	800b5d2 <__hexnan+0x8a>
 800b5c6:	1f26      	subs	r6, r4, #4
 800b5c8:	2500      	movs	r5, #0
 800b5ca:	0034      	movs	r4, r6
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	6035      	str	r5, [r6, #0]
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	e7d5      	b.n	800b584 <__hexnan+0x3c>
 800b5d8:	9b04      	ldr	r3, [sp, #16]
 800b5da:	2b29      	cmp	r3, #41	; 0x29
 800b5dc:	d159      	bne.n	800b692 <__hexnan+0x14a>
 800b5de:	9b05      	ldr	r3, [sp, #20]
 800b5e0:	9a08      	ldr	r2, [sp, #32]
 800b5e2:	3302      	adds	r3, #2
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d052      	beq.n	800b692 <__hexnan+0x14a>
 800b5ec:	42b4      	cmp	r4, r6
 800b5ee:	d206      	bcs.n	800b5fe <__hexnan+0xb6>
 800b5f0:	2d07      	cmp	r5, #7
 800b5f2:	dc04      	bgt.n	800b5fe <__hexnan+0xb6>
 800b5f4:	002a      	movs	r2, r5
 800b5f6:	0031      	movs	r1, r6
 800b5f8:	0020      	movs	r0, r4
 800b5fa:	f7ff ff7f 	bl	800b4fc <L_shift>
 800b5fe:	9b01      	ldr	r3, [sp, #4]
 800b600:	429c      	cmp	r4, r3
 800b602:	d935      	bls.n	800b670 <__hexnan+0x128>
 800b604:	001a      	movs	r2, r3
 800b606:	0023      	movs	r3, r4
 800b608:	cb02      	ldmia	r3!, {r1}
 800b60a:	c202      	stmia	r2!, {r1}
 800b60c:	429f      	cmp	r7, r3
 800b60e:	d2fb      	bcs.n	800b608 <__hexnan+0xc0>
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	1c62      	adds	r2, r4, #1
 800b614:	1ed9      	subs	r1, r3, #3
 800b616:	2304      	movs	r3, #4
 800b618:	4291      	cmp	r1, r2
 800b61a:	d305      	bcc.n	800b628 <__hexnan+0xe0>
 800b61c:	9b02      	ldr	r3, [sp, #8]
 800b61e:	3b04      	subs	r3, #4
 800b620:	1b1b      	subs	r3, r3, r4
 800b622:	089b      	lsrs	r3, r3, #2
 800b624:	3301      	adds	r3, #1
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	18d3      	adds	r3, r2, r3
 800b62c:	2200      	movs	r2, #0
 800b62e:	c304      	stmia	r3!, {r2}
 800b630:	429f      	cmp	r7, r3
 800b632:	d2fc      	bcs.n	800b62e <__hexnan+0xe6>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <__hexnan+0xfc>
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	429f      	cmp	r7, r3
 800b63e:	d126      	bne.n	800b68e <__hexnan+0x146>
 800b640:	2301      	movs	r3, #1
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	2005      	movs	r0, #5
 800b646:	e025      	b.n	800b694 <__hexnan+0x14c>
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	3501      	adds	r5, #1
 800b64c:	3301      	adds	r3, #1
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	2d08      	cmp	r5, #8
 800b652:	dd06      	ble.n	800b662 <__hexnan+0x11a>
 800b654:	9b01      	ldr	r3, [sp, #4]
 800b656:	429c      	cmp	r4, r3
 800b658:	d9bb      	bls.n	800b5d2 <__hexnan+0x8a>
 800b65a:	2300      	movs	r3, #0
 800b65c:	2501      	movs	r5, #1
 800b65e:	3c04      	subs	r4, #4
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	220f      	movs	r2, #15
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	4010      	ands	r0, r2
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	4303      	orrs	r3, r0
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	e7b0      	b.n	800b5d2 <__hexnan+0x8a>
 800b670:	9b06      	ldr	r3, [sp, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0de      	beq.n	800b634 <__hexnan+0xec>
 800b676:	2320      	movs	r3, #32
 800b678:	9a06      	ldr	r2, [sp, #24]
 800b67a:	9902      	ldr	r1, [sp, #8]
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	2201      	movs	r2, #1
 800b680:	4252      	negs	r2, r2
 800b682:	40da      	lsrs	r2, r3
 800b684:	3904      	subs	r1, #4
 800b686:	680b      	ldr	r3, [r1, #0]
 800b688:	4013      	ands	r3, r2
 800b68a:	600b      	str	r3, [r1, #0]
 800b68c:	e7d2      	b.n	800b634 <__hexnan+0xec>
 800b68e:	3f04      	subs	r7, #4
 800b690:	e7d0      	b.n	800b634 <__hexnan+0xec>
 800b692:	2004      	movs	r0, #4
 800b694:	b00b      	add	sp, #44	; 0x2c
 800b696:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b698 <__ascii_mbtowc>:
 800b698:	b082      	sub	sp, #8
 800b69a:	2900      	cmp	r1, #0
 800b69c:	d100      	bne.n	800b6a0 <__ascii_mbtowc+0x8>
 800b69e:	a901      	add	r1, sp, #4
 800b6a0:	1e10      	subs	r0, r2, #0
 800b6a2:	d006      	beq.n	800b6b2 <__ascii_mbtowc+0x1a>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d006      	beq.n	800b6b6 <__ascii_mbtowc+0x1e>
 800b6a8:	7813      	ldrb	r3, [r2, #0]
 800b6aa:	600b      	str	r3, [r1, #0]
 800b6ac:	7810      	ldrb	r0, [r2, #0]
 800b6ae:	1e43      	subs	r3, r0, #1
 800b6b0:	4198      	sbcs	r0, r3
 800b6b2:	b002      	add	sp, #8
 800b6b4:	4770      	bx	lr
 800b6b6:	2002      	movs	r0, #2
 800b6b8:	4240      	negs	r0, r0
 800b6ba:	e7fa      	b.n	800b6b2 <__ascii_mbtowc+0x1a>

0800b6bc <_Balloc>:
 800b6bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b6be:	b570      	push	{r4, r5, r6, lr}
 800b6c0:	0006      	movs	r6, r0
 800b6c2:	000c      	movs	r4, r1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d012      	beq.n	800b6ee <_Balloc+0x32>
 800b6c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b6ca:	00a2      	lsls	r2, r4, #2
 800b6cc:	189b      	adds	r3, r3, r2
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d115      	bne.n	800b700 <_Balloc+0x44>
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	000d      	movs	r5, r1
 800b6d8:	40a5      	lsls	r5, r4
 800b6da:	1d6a      	adds	r2, r5, #5
 800b6dc:	0030      	movs	r0, r6
 800b6de:	0092      	lsls	r2, r2, #2
 800b6e0:	f003 face 	bl	800ec80 <_calloc_r>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d009      	beq.n	800b6fc <_Balloc+0x40>
 800b6e8:	6044      	str	r4, [r0, #4]
 800b6ea:	6085      	str	r5, [r0, #8]
 800b6ec:	e00a      	b.n	800b704 <_Balloc+0x48>
 800b6ee:	2221      	movs	r2, #33	; 0x21
 800b6f0:	2104      	movs	r1, #4
 800b6f2:	f003 fac5 	bl	800ec80 <_calloc_r>
 800b6f6:	6470      	str	r0, [r6, #68]	; 0x44
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1e5      	bne.n	800b6c8 <_Balloc+0xc>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	6802      	ldr	r2, [r0, #0]
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	2300      	movs	r3, #0
 800b706:	6103      	str	r3, [r0, #16]
 800b708:	60c3      	str	r3, [r0, #12]
 800b70a:	e7f8      	b.n	800b6fe <_Balloc+0x42>

0800b70c <_Bfree>:
 800b70c:	2900      	cmp	r1, #0
 800b70e:	d006      	beq.n	800b71e <_Bfree+0x12>
 800b710:	684a      	ldr	r2, [r1, #4]
 800b712:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b714:	0092      	lsls	r2, r2, #2
 800b716:	189b      	adds	r3, r3, r2
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	600a      	str	r2, [r1, #0]
 800b71c:	6019      	str	r1, [r3, #0]
 800b71e:	4770      	bx	lr

0800b720 <__multadd>:
 800b720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b722:	000e      	movs	r6, r1
 800b724:	9001      	str	r0, [sp, #4]
 800b726:	000c      	movs	r4, r1
 800b728:	001d      	movs	r5, r3
 800b72a:	2000      	movs	r0, #0
 800b72c:	690f      	ldr	r7, [r1, #16]
 800b72e:	3614      	adds	r6, #20
 800b730:	6833      	ldr	r3, [r6, #0]
 800b732:	3001      	adds	r0, #1
 800b734:	b299      	uxth	r1, r3
 800b736:	4351      	muls	r1, r2
 800b738:	0c1b      	lsrs	r3, r3, #16
 800b73a:	4353      	muls	r3, r2
 800b73c:	1949      	adds	r1, r1, r5
 800b73e:	0c0d      	lsrs	r5, r1, #16
 800b740:	195b      	adds	r3, r3, r5
 800b742:	0c1d      	lsrs	r5, r3, #16
 800b744:	b289      	uxth	r1, r1
 800b746:	041b      	lsls	r3, r3, #16
 800b748:	185b      	adds	r3, r3, r1
 800b74a:	c608      	stmia	r6!, {r3}
 800b74c:	4287      	cmp	r7, r0
 800b74e:	dcef      	bgt.n	800b730 <__multadd+0x10>
 800b750:	2d00      	cmp	r5, #0
 800b752:	d022      	beq.n	800b79a <__multadd+0x7a>
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	42bb      	cmp	r3, r7
 800b758:	dc19      	bgt.n	800b78e <__multadd+0x6e>
 800b75a:	6861      	ldr	r1, [r4, #4]
 800b75c:	9801      	ldr	r0, [sp, #4]
 800b75e:	3101      	adds	r1, #1
 800b760:	f7ff ffac 	bl	800b6bc <_Balloc>
 800b764:	1e06      	subs	r6, r0, #0
 800b766:	d105      	bne.n	800b774 <__multadd+0x54>
 800b768:	0032      	movs	r2, r6
 800b76a:	21ba      	movs	r1, #186	; 0xba
 800b76c:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <__multadd+0x80>)
 800b76e:	480d      	ldr	r0, [pc, #52]	; (800b7a4 <__multadd+0x84>)
 800b770:	f003 fa68 	bl	800ec44 <__assert_func>
 800b774:	0021      	movs	r1, r4
 800b776:	6922      	ldr	r2, [r4, #16]
 800b778:	310c      	adds	r1, #12
 800b77a:	3202      	adds	r2, #2
 800b77c:	0092      	lsls	r2, r2, #2
 800b77e:	300c      	adds	r0, #12
 800b780:	f7ff fb01 	bl	800ad86 <memcpy>
 800b784:	0021      	movs	r1, r4
 800b786:	9801      	ldr	r0, [sp, #4]
 800b788:	f7ff ffc0 	bl	800b70c <_Bfree>
 800b78c:	0034      	movs	r4, r6
 800b78e:	1d3b      	adds	r3, r7, #4
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	18e3      	adds	r3, r4, r3
 800b794:	605d      	str	r5, [r3, #4]
 800b796:	1c7b      	adds	r3, r7, #1
 800b798:	6123      	str	r3, [r4, #16]
 800b79a:	0020      	movs	r0, r4
 800b79c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	08013089 	.word	0x08013089
 800b7a4:	080130fa 	.word	0x080130fa

0800b7a8 <__s2b>:
 800b7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7aa:	0006      	movs	r6, r0
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	000c      	movs	r4, r1
 800b7b0:	3008      	adds	r0, #8
 800b7b2:	2109      	movs	r1, #9
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	0015      	movs	r5, r2
 800b7b8:	f7f4 fd4a 	bl	8000250 <__divsi3>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4283      	cmp	r3, r0
 800b7c2:	db0a      	blt.n	800b7da <__s2b+0x32>
 800b7c4:	0030      	movs	r0, r6
 800b7c6:	f7ff ff79 	bl	800b6bc <_Balloc>
 800b7ca:	1e01      	subs	r1, r0, #0
 800b7cc:	d108      	bne.n	800b7e0 <__s2b+0x38>
 800b7ce:	000a      	movs	r2, r1
 800b7d0:	4b19      	ldr	r3, [pc, #100]	; (800b838 <__s2b+0x90>)
 800b7d2:	481a      	ldr	r0, [pc, #104]	; (800b83c <__s2b+0x94>)
 800b7d4:	31d3      	adds	r1, #211	; 0xd3
 800b7d6:	f003 fa35 	bl	800ec44 <__assert_func>
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	3101      	adds	r1, #1
 800b7de:	e7ef      	b.n	800b7c0 <__s2b+0x18>
 800b7e0:	9b08      	ldr	r3, [sp, #32]
 800b7e2:	6143      	str	r3, [r0, #20]
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	6103      	str	r3, [r0, #16]
 800b7e8:	2d09      	cmp	r5, #9
 800b7ea:	dd18      	ble.n	800b81e <__s2b+0x76>
 800b7ec:	0023      	movs	r3, r4
 800b7ee:	3309      	adds	r3, #9
 800b7f0:	001f      	movs	r7, r3
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	1964      	adds	r4, r4, r5
 800b7f6:	783b      	ldrb	r3, [r7, #0]
 800b7f8:	220a      	movs	r2, #10
 800b7fa:	0030      	movs	r0, r6
 800b7fc:	3b30      	subs	r3, #48	; 0x30
 800b7fe:	f7ff ff8f 	bl	800b720 <__multadd>
 800b802:	3701      	adds	r7, #1
 800b804:	0001      	movs	r1, r0
 800b806:	42a7      	cmp	r7, r4
 800b808:	d1f5      	bne.n	800b7f6 <__s2b+0x4e>
 800b80a:	002c      	movs	r4, r5
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	3c08      	subs	r4, #8
 800b810:	191c      	adds	r4, r3, r4
 800b812:	002f      	movs	r7, r5
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	429f      	cmp	r7, r3
 800b818:	db04      	blt.n	800b824 <__s2b+0x7c>
 800b81a:	0008      	movs	r0, r1
 800b81c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b81e:	2509      	movs	r5, #9
 800b820:	340a      	adds	r4, #10
 800b822:	e7f6      	b.n	800b812 <__s2b+0x6a>
 800b824:	1b63      	subs	r3, r4, r5
 800b826:	5ddb      	ldrb	r3, [r3, r7]
 800b828:	220a      	movs	r2, #10
 800b82a:	0030      	movs	r0, r6
 800b82c:	3b30      	subs	r3, #48	; 0x30
 800b82e:	f7ff ff77 	bl	800b720 <__multadd>
 800b832:	3701      	adds	r7, #1
 800b834:	0001      	movs	r1, r0
 800b836:	e7ed      	b.n	800b814 <__s2b+0x6c>
 800b838:	08013089 	.word	0x08013089
 800b83c:	080130fa 	.word	0x080130fa

0800b840 <__hi0bits>:
 800b840:	0003      	movs	r3, r0
 800b842:	0c02      	lsrs	r2, r0, #16
 800b844:	2000      	movs	r0, #0
 800b846:	4282      	cmp	r2, r0
 800b848:	d101      	bne.n	800b84e <__hi0bits+0xe>
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	3010      	adds	r0, #16
 800b84e:	0e1a      	lsrs	r2, r3, #24
 800b850:	d101      	bne.n	800b856 <__hi0bits+0x16>
 800b852:	3008      	adds	r0, #8
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	0f1a      	lsrs	r2, r3, #28
 800b858:	d101      	bne.n	800b85e <__hi0bits+0x1e>
 800b85a:	3004      	adds	r0, #4
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	0f9a      	lsrs	r2, r3, #30
 800b860:	d101      	bne.n	800b866 <__hi0bits+0x26>
 800b862:	3002      	adds	r0, #2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	db03      	blt.n	800b872 <__hi0bits+0x32>
 800b86a:	3001      	adds	r0, #1
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	d400      	bmi.n	800b872 <__hi0bits+0x32>
 800b870:	2020      	movs	r0, #32
 800b872:	4770      	bx	lr

0800b874 <__lo0bits>:
 800b874:	6803      	ldr	r3, [r0, #0]
 800b876:	0001      	movs	r1, r0
 800b878:	2207      	movs	r2, #7
 800b87a:	0018      	movs	r0, r3
 800b87c:	4010      	ands	r0, r2
 800b87e:	4213      	tst	r3, r2
 800b880:	d00d      	beq.n	800b89e <__lo0bits+0x2a>
 800b882:	3a06      	subs	r2, #6
 800b884:	2000      	movs	r0, #0
 800b886:	4213      	tst	r3, r2
 800b888:	d105      	bne.n	800b896 <__lo0bits+0x22>
 800b88a:	3002      	adds	r0, #2
 800b88c:	4203      	tst	r3, r0
 800b88e:	d003      	beq.n	800b898 <__lo0bits+0x24>
 800b890:	40d3      	lsrs	r3, r2
 800b892:	0010      	movs	r0, r2
 800b894:	600b      	str	r3, [r1, #0]
 800b896:	4770      	bx	lr
 800b898:	089b      	lsrs	r3, r3, #2
 800b89a:	600b      	str	r3, [r1, #0]
 800b89c:	e7fb      	b.n	800b896 <__lo0bits+0x22>
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	d101      	bne.n	800b8a8 <__lo0bits+0x34>
 800b8a4:	2010      	movs	r0, #16
 800b8a6:	0c1b      	lsrs	r3, r3, #16
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d101      	bne.n	800b8b2 <__lo0bits+0x3e>
 800b8ae:	3008      	adds	r0, #8
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	071a      	lsls	r2, r3, #28
 800b8b4:	d101      	bne.n	800b8ba <__lo0bits+0x46>
 800b8b6:	3004      	adds	r0, #4
 800b8b8:	091b      	lsrs	r3, r3, #4
 800b8ba:	079a      	lsls	r2, r3, #30
 800b8bc:	d101      	bne.n	800b8c2 <__lo0bits+0x4e>
 800b8be:	3002      	adds	r0, #2
 800b8c0:	089b      	lsrs	r3, r3, #2
 800b8c2:	07da      	lsls	r2, r3, #31
 800b8c4:	d4e9      	bmi.n	800b89a <__lo0bits+0x26>
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	085b      	lsrs	r3, r3, #1
 800b8ca:	d1e6      	bne.n	800b89a <__lo0bits+0x26>
 800b8cc:	2020      	movs	r0, #32
 800b8ce:	e7e2      	b.n	800b896 <__lo0bits+0x22>

0800b8d0 <__i2b>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	000c      	movs	r4, r1
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	f7ff fef1 	bl	800b6bc <_Balloc>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d107      	bne.n	800b8ee <__i2b+0x1e>
 800b8de:	2146      	movs	r1, #70	; 0x46
 800b8e0:	4c05      	ldr	r4, [pc, #20]	; (800b8f8 <__i2b+0x28>)
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <__i2b+0x2c>)
 800b8e6:	0020      	movs	r0, r4
 800b8e8:	31ff      	adds	r1, #255	; 0xff
 800b8ea:	f003 f9ab 	bl	800ec44 <__assert_func>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	6144      	str	r4, [r0, #20]
 800b8f2:	6103      	str	r3, [r0, #16]
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	080130fa 	.word	0x080130fa
 800b8fc:	08013089 	.word	0x08013089

0800b900 <__multiply>:
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	0015      	movs	r5, r2
 800b904:	690a      	ldr	r2, [r1, #16]
 800b906:	692b      	ldr	r3, [r5, #16]
 800b908:	000c      	movs	r4, r1
 800b90a:	b08b      	sub	sp, #44	; 0x2c
 800b90c:	429a      	cmp	r2, r3
 800b90e:	da01      	bge.n	800b914 <__multiply+0x14>
 800b910:	002c      	movs	r4, r5
 800b912:	000d      	movs	r5, r1
 800b914:	6927      	ldr	r7, [r4, #16]
 800b916:	692e      	ldr	r6, [r5, #16]
 800b918:	6861      	ldr	r1, [r4, #4]
 800b91a:	19bb      	adds	r3, r7, r6
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	19ba      	adds	r2, r7, r6
 800b922:	4293      	cmp	r3, r2
 800b924:	da00      	bge.n	800b928 <__multiply+0x28>
 800b926:	3101      	adds	r1, #1
 800b928:	f7ff fec8 	bl	800b6bc <_Balloc>
 800b92c:	9002      	str	r0, [sp, #8]
 800b92e:	2800      	cmp	r0, #0
 800b930:	d106      	bne.n	800b940 <__multiply+0x40>
 800b932:	21b1      	movs	r1, #177	; 0xb1
 800b934:	4b48      	ldr	r3, [pc, #288]	; (800ba58 <__multiply+0x158>)
 800b936:	4849      	ldr	r0, [pc, #292]	; (800ba5c <__multiply+0x15c>)
 800b938:	9a02      	ldr	r2, [sp, #8]
 800b93a:	0049      	lsls	r1, r1, #1
 800b93c:	f003 f982 	bl	800ec44 <__assert_func>
 800b940:	9b02      	ldr	r3, [sp, #8]
 800b942:	2200      	movs	r2, #0
 800b944:	3314      	adds	r3, #20
 800b946:	469c      	mov	ip, r3
 800b948:	19bb      	adds	r3, r7, r6
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4463      	add	r3, ip
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	4663      	mov	r3, ip
 800b952:	9904      	ldr	r1, [sp, #16]
 800b954:	428b      	cmp	r3, r1
 800b956:	d32a      	bcc.n	800b9ae <__multiply+0xae>
 800b958:	0023      	movs	r3, r4
 800b95a:	00bf      	lsls	r7, r7, #2
 800b95c:	3314      	adds	r3, #20
 800b95e:	3514      	adds	r5, #20
 800b960:	9308      	str	r3, [sp, #32]
 800b962:	00b6      	lsls	r6, r6, #2
 800b964:	19db      	adds	r3, r3, r7
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	19ab      	adds	r3, r5, r6
 800b96a:	9309      	str	r3, [sp, #36]	; 0x24
 800b96c:	2304      	movs	r3, #4
 800b96e:	9306      	str	r3, [sp, #24]
 800b970:	0023      	movs	r3, r4
 800b972:	9a05      	ldr	r2, [sp, #20]
 800b974:	3315      	adds	r3, #21
 800b976:	9501      	str	r5, [sp, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d305      	bcc.n	800b988 <__multiply+0x88>
 800b97c:	1b13      	subs	r3, r2, r4
 800b97e:	3b15      	subs	r3, #21
 800b980:	089b      	lsrs	r3, r3, #2
 800b982:	3301      	adds	r3, #1
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	9306      	str	r3, [sp, #24]
 800b988:	9b01      	ldr	r3, [sp, #4]
 800b98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d310      	bcc.n	800b9b2 <__multiply+0xb2>
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	dd05      	ble.n	800b9a2 <__multiply+0xa2>
 800b996:	9b04      	ldr	r3, [sp, #16]
 800b998:	3b04      	subs	r3, #4
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d056      	beq.n	800ba50 <__multiply+0x150>
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	9a03      	ldr	r2, [sp, #12]
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	611a      	str	r2, [r3, #16]
 800b9aa:	b00b      	add	sp, #44	; 0x2c
 800b9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ae:	c304      	stmia	r3!, {r2}
 800b9b0:	e7cf      	b.n	800b952 <__multiply+0x52>
 800b9b2:	9b01      	ldr	r3, [sp, #4]
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	b280      	uxth	r0, r0
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d01e      	beq.n	800b9fa <__multiply+0xfa>
 800b9bc:	4667      	mov	r7, ip
 800b9be:	2500      	movs	r5, #0
 800b9c0:	9e08      	ldr	r6, [sp, #32]
 800b9c2:	ce02      	ldmia	r6!, {r1}
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	b28b      	uxth	r3, r1
 800b9ca:	4343      	muls	r3, r0
 800b9cc:	001a      	movs	r2, r3
 800b9ce:	466b      	mov	r3, sp
 800b9d0:	8b9b      	ldrh	r3, [r3, #28]
 800b9d2:	18d3      	adds	r3, r2, r3
 800b9d4:	195b      	adds	r3, r3, r5
 800b9d6:	0c0d      	lsrs	r5, r1, #16
 800b9d8:	4345      	muls	r5, r0
 800b9da:	9a07      	ldr	r2, [sp, #28]
 800b9dc:	0c11      	lsrs	r1, r2, #16
 800b9de:	1869      	adds	r1, r5, r1
 800b9e0:	0c1a      	lsrs	r2, r3, #16
 800b9e2:	188a      	adds	r2, r1, r2
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	0c15      	lsrs	r5, r2, #16
 800b9e8:	0412      	lsls	r2, r2, #16
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	9b05      	ldr	r3, [sp, #20]
 800b9ee:	c704      	stmia	r7!, {r2}
 800b9f0:	42b3      	cmp	r3, r6
 800b9f2:	d8e6      	bhi.n	800b9c2 <__multiply+0xc2>
 800b9f4:	4663      	mov	r3, ip
 800b9f6:	9a06      	ldr	r2, [sp, #24]
 800b9f8:	509d      	str	r5, [r3, r2]
 800b9fa:	9b01      	ldr	r3, [sp, #4]
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	0c00      	lsrs	r0, r0, #16
 800ba00:	d020      	beq.n	800ba44 <__multiply+0x144>
 800ba02:	4663      	mov	r3, ip
 800ba04:	0025      	movs	r5, r4
 800ba06:	4661      	mov	r1, ip
 800ba08:	2700      	movs	r7, #0
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3514      	adds	r5, #20
 800ba0e:	682a      	ldr	r2, [r5, #0]
 800ba10:	680e      	ldr	r6, [r1, #0]
 800ba12:	b292      	uxth	r2, r2
 800ba14:	4342      	muls	r2, r0
 800ba16:	0c36      	lsrs	r6, r6, #16
 800ba18:	1992      	adds	r2, r2, r6
 800ba1a:	19d2      	adds	r2, r2, r7
 800ba1c:	0416      	lsls	r6, r2, #16
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	431e      	orrs	r6, r3
 800ba22:	600e      	str	r6, [r1, #0]
 800ba24:	cd40      	ldmia	r5!, {r6}
 800ba26:	684b      	ldr	r3, [r1, #4]
 800ba28:	0c36      	lsrs	r6, r6, #16
 800ba2a:	4346      	muls	r6, r0
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	0c12      	lsrs	r2, r2, #16
 800ba30:	18f3      	adds	r3, r6, r3
 800ba32:	189b      	adds	r3, r3, r2
 800ba34:	9a05      	ldr	r2, [sp, #20]
 800ba36:	0c1f      	lsrs	r7, r3, #16
 800ba38:	3104      	adds	r1, #4
 800ba3a:	42aa      	cmp	r2, r5
 800ba3c:	d8e7      	bhi.n	800ba0e <__multiply+0x10e>
 800ba3e:	4662      	mov	r2, ip
 800ba40:	9906      	ldr	r1, [sp, #24]
 800ba42:	5053      	str	r3, [r2, r1]
 800ba44:	9b01      	ldr	r3, [sp, #4]
 800ba46:	3304      	adds	r3, #4
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	2304      	movs	r3, #4
 800ba4c:	449c      	add	ip, r3
 800ba4e:	e79b      	b.n	800b988 <__multiply+0x88>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	e79b      	b.n	800b990 <__multiply+0x90>
 800ba58:	08013089 	.word	0x08013089
 800ba5c:	080130fa 	.word	0x080130fa

0800ba60 <__pow5mult>:
 800ba60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba62:	2303      	movs	r3, #3
 800ba64:	0015      	movs	r5, r2
 800ba66:	0007      	movs	r7, r0
 800ba68:	000e      	movs	r6, r1
 800ba6a:	401a      	ands	r2, r3
 800ba6c:	421d      	tst	r5, r3
 800ba6e:	d008      	beq.n	800ba82 <__pow5mult+0x22>
 800ba70:	491a      	ldr	r1, [pc, #104]	; (800badc <__pow5mult+0x7c>)
 800ba72:	3a01      	subs	r2, #1
 800ba74:	0092      	lsls	r2, r2, #2
 800ba76:	5852      	ldr	r2, [r2, r1]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	0031      	movs	r1, r6
 800ba7c:	f7ff fe50 	bl	800b720 <__multadd>
 800ba80:	0006      	movs	r6, r0
 800ba82:	10ad      	asrs	r5, r5, #2
 800ba84:	d027      	beq.n	800bad6 <__pow5mult+0x76>
 800ba86:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800ba88:	2c00      	cmp	r4, #0
 800ba8a:	d107      	bne.n	800ba9c <__pow5mult+0x3c>
 800ba8c:	0038      	movs	r0, r7
 800ba8e:	4914      	ldr	r1, [pc, #80]	; (800bae0 <__pow5mult+0x80>)
 800ba90:	f7ff ff1e 	bl	800b8d0 <__i2b>
 800ba94:	2300      	movs	r3, #0
 800ba96:	0004      	movs	r4, r0
 800ba98:	6438      	str	r0, [r7, #64]	; 0x40
 800ba9a:	6003      	str	r3, [r0, #0]
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	421d      	tst	r5, r3
 800baa0:	d00a      	beq.n	800bab8 <__pow5mult+0x58>
 800baa2:	0031      	movs	r1, r6
 800baa4:	0022      	movs	r2, r4
 800baa6:	0038      	movs	r0, r7
 800baa8:	f7ff ff2a 	bl	800b900 <__multiply>
 800baac:	0031      	movs	r1, r6
 800baae:	9001      	str	r0, [sp, #4]
 800bab0:	0038      	movs	r0, r7
 800bab2:	f7ff fe2b 	bl	800b70c <_Bfree>
 800bab6:	9e01      	ldr	r6, [sp, #4]
 800bab8:	106d      	asrs	r5, r5, #1
 800baba:	d00c      	beq.n	800bad6 <__pow5mult+0x76>
 800babc:	6820      	ldr	r0, [r4, #0]
 800babe:	2800      	cmp	r0, #0
 800bac0:	d107      	bne.n	800bad2 <__pow5mult+0x72>
 800bac2:	0022      	movs	r2, r4
 800bac4:	0021      	movs	r1, r4
 800bac6:	0038      	movs	r0, r7
 800bac8:	f7ff ff1a 	bl	800b900 <__multiply>
 800bacc:	2300      	movs	r3, #0
 800bace:	6020      	str	r0, [r4, #0]
 800bad0:	6003      	str	r3, [r0, #0]
 800bad2:	0004      	movs	r4, r0
 800bad4:	e7e2      	b.n	800ba9c <__pow5mult+0x3c>
 800bad6:	0030      	movs	r0, r6
 800bad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	08013248 	.word	0x08013248
 800bae0:	00000271 	.word	0x00000271

0800bae4 <__lshift>:
 800bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae6:	000c      	movs	r4, r1
 800bae8:	0017      	movs	r7, r2
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	1155      	asrs	r5, r2, #5
 800baee:	b087      	sub	sp, #28
 800baf0:	18eb      	adds	r3, r5, r3
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	3301      	adds	r3, #1
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	6849      	ldr	r1, [r1, #4]
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	9004      	str	r0, [sp, #16]
 800bafe:	9a01      	ldr	r2, [sp, #4]
 800bb00:	4293      	cmp	r3, r2
 800bb02:	db10      	blt.n	800bb26 <__lshift+0x42>
 800bb04:	9804      	ldr	r0, [sp, #16]
 800bb06:	f7ff fdd9 	bl	800b6bc <_Balloc>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	0002      	movs	r2, r0
 800bb0e:	0006      	movs	r6, r0
 800bb10:	0019      	movs	r1, r3
 800bb12:	3214      	adds	r2, #20
 800bb14:	4298      	cmp	r0, r3
 800bb16:	d10c      	bne.n	800bb32 <__lshift+0x4e>
 800bb18:	31df      	adds	r1, #223	; 0xdf
 800bb1a:	0032      	movs	r2, r6
 800bb1c:	4b26      	ldr	r3, [pc, #152]	; (800bbb8 <__lshift+0xd4>)
 800bb1e:	4827      	ldr	r0, [pc, #156]	; (800bbbc <__lshift+0xd8>)
 800bb20:	31ff      	adds	r1, #255	; 0xff
 800bb22:	f003 f88f 	bl	800ec44 <__assert_func>
 800bb26:	3101      	adds	r1, #1
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	e7e8      	b.n	800bafe <__lshift+0x1a>
 800bb2c:	0098      	lsls	r0, r3, #2
 800bb2e:	5011      	str	r1, [r2, r0]
 800bb30:	3301      	adds	r3, #1
 800bb32:	42ab      	cmp	r3, r5
 800bb34:	dbfa      	blt.n	800bb2c <__lshift+0x48>
 800bb36:	43eb      	mvns	r3, r5
 800bb38:	17db      	asrs	r3, r3, #31
 800bb3a:	401d      	ands	r5, r3
 800bb3c:	211f      	movs	r1, #31
 800bb3e:	0023      	movs	r3, r4
 800bb40:	0038      	movs	r0, r7
 800bb42:	00ad      	lsls	r5, r5, #2
 800bb44:	1955      	adds	r5, r2, r5
 800bb46:	6922      	ldr	r2, [r4, #16]
 800bb48:	3314      	adds	r3, #20
 800bb4a:	0092      	lsls	r2, r2, #2
 800bb4c:	4008      	ands	r0, r1
 800bb4e:	4684      	mov	ip, r0
 800bb50:	189a      	adds	r2, r3, r2
 800bb52:	420f      	tst	r7, r1
 800bb54:	d02a      	beq.n	800bbac <__lshift+0xc8>
 800bb56:	3101      	adds	r1, #1
 800bb58:	1a09      	subs	r1, r1, r0
 800bb5a:	9105      	str	r1, [sp, #20]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	9503      	str	r5, [sp, #12]
 800bb60:	4667      	mov	r7, ip
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	40b8      	lsls	r0, r7
 800bb66:	4308      	orrs	r0, r1
 800bb68:	9903      	ldr	r1, [sp, #12]
 800bb6a:	c101      	stmia	r1!, {r0}
 800bb6c:	9103      	str	r1, [sp, #12]
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	cb02      	ldmia	r3!, {r1}
 800bb72:	40c1      	lsrs	r1, r0
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d8f3      	bhi.n	800bb60 <__lshift+0x7c>
 800bb78:	0020      	movs	r0, r4
 800bb7a:	3015      	adds	r0, #21
 800bb7c:	2304      	movs	r3, #4
 800bb7e:	4282      	cmp	r2, r0
 800bb80:	d304      	bcc.n	800bb8c <__lshift+0xa8>
 800bb82:	1b13      	subs	r3, r2, r4
 800bb84:	3b15      	subs	r3, #21
 800bb86:	089b      	lsrs	r3, r3, #2
 800bb88:	3301      	adds	r3, #1
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	50e9      	str	r1, [r5, r3]
 800bb8e:	2900      	cmp	r1, #0
 800bb90:	d002      	beq.n	800bb98 <__lshift+0xb4>
 800bb92:	9b02      	ldr	r3, [sp, #8]
 800bb94:	3302      	adds	r3, #2
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	9b01      	ldr	r3, [sp, #4]
 800bb9a:	9804      	ldr	r0, [sp, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	0021      	movs	r1, r4
 800bba0:	6133      	str	r3, [r6, #16]
 800bba2:	f7ff fdb3 	bl	800b70c <_Bfree>
 800bba6:	0030      	movs	r0, r6
 800bba8:	b007      	add	sp, #28
 800bbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbac:	cb02      	ldmia	r3!, {r1}
 800bbae:	c502      	stmia	r5!, {r1}
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d8fb      	bhi.n	800bbac <__lshift+0xc8>
 800bbb4:	e7f0      	b.n	800bb98 <__lshift+0xb4>
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	08013089 	.word	0x08013089
 800bbbc:	080130fa 	.word	0x080130fa

0800bbc0 <__mcmp>:
 800bbc0:	b530      	push	{r4, r5, lr}
 800bbc2:	690b      	ldr	r3, [r1, #16]
 800bbc4:	6904      	ldr	r4, [r0, #16]
 800bbc6:	0002      	movs	r2, r0
 800bbc8:	1ae0      	subs	r0, r4, r3
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d10e      	bne.n	800bbec <__mcmp+0x2c>
 800bbce:	3214      	adds	r2, #20
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	3114      	adds	r1, #20
 800bbd4:	0014      	movs	r4, r2
 800bbd6:	18c9      	adds	r1, r1, r3
 800bbd8:	18d2      	adds	r2, r2, r3
 800bbda:	3a04      	subs	r2, #4
 800bbdc:	3904      	subs	r1, #4
 800bbde:	6815      	ldr	r5, [r2, #0]
 800bbe0:	680b      	ldr	r3, [r1, #0]
 800bbe2:	429d      	cmp	r5, r3
 800bbe4:	d003      	beq.n	800bbee <__mcmp+0x2e>
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	429d      	cmp	r5, r3
 800bbea:	d303      	bcc.n	800bbf4 <__mcmp+0x34>
 800bbec:	bd30      	pop	{r4, r5, pc}
 800bbee:	4294      	cmp	r4, r2
 800bbf0:	d3f3      	bcc.n	800bbda <__mcmp+0x1a>
 800bbf2:	e7fb      	b.n	800bbec <__mcmp+0x2c>
 800bbf4:	4240      	negs	r0, r0
 800bbf6:	e7f9      	b.n	800bbec <__mcmp+0x2c>

0800bbf8 <__mdiff>:
 800bbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbfa:	000e      	movs	r6, r1
 800bbfc:	0007      	movs	r7, r0
 800bbfe:	0011      	movs	r1, r2
 800bc00:	0030      	movs	r0, r6
 800bc02:	b087      	sub	sp, #28
 800bc04:	0014      	movs	r4, r2
 800bc06:	f7ff ffdb 	bl	800bbc0 <__mcmp>
 800bc0a:	1e05      	subs	r5, r0, #0
 800bc0c:	d110      	bne.n	800bc30 <__mdiff+0x38>
 800bc0e:	0001      	movs	r1, r0
 800bc10:	0038      	movs	r0, r7
 800bc12:	f7ff fd53 	bl	800b6bc <_Balloc>
 800bc16:	1e02      	subs	r2, r0, #0
 800bc18:	d104      	bne.n	800bc24 <__mdiff+0x2c>
 800bc1a:	4b3f      	ldr	r3, [pc, #252]	; (800bd18 <__mdiff+0x120>)
 800bc1c:	483f      	ldr	r0, [pc, #252]	; (800bd1c <__mdiff+0x124>)
 800bc1e:	4940      	ldr	r1, [pc, #256]	; (800bd20 <__mdiff+0x128>)
 800bc20:	f003 f810 	bl	800ec44 <__assert_func>
 800bc24:	2301      	movs	r3, #1
 800bc26:	6145      	str	r5, [r0, #20]
 800bc28:	6103      	str	r3, [r0, #16]
 800bc2a:	0010      	movs	r0, r2
 800bc2c:	b007      	add	sp, #28
 800bc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc30:	2301      	movs	r3, #1
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	2800      	cmp	r0, #0
 800bc36:	db04      	blt.n	800bc42 <__mdiff+0x4a>
 800bc38:	0023      	movs	r3, r4
 800bc3a:	0034      	movs	r4, r6
 800bc3c:	001e      	movs	r6, r3
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	0038      	movs	r0, r7
 800bc44:	6861      	ldr	r1, [r4, #4]
 800bc46:	f7ff fd39 	bl	800b6bc <_Balloc>
 800bc4a:	1e02      	subs	r2, r0, #0
 800bc4c:	d103      	bne.n	800bc56 <__mdiff+0x5e>
 800bc4e:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <__mdiff+0x120>)
 800bc50:	4832      	ldr	r0, [pc, #200]	; (800bd1c <__mdiff+0x124>)
 800bc52:	4934      	ldr	r1, [pc, #208]	; (800bd24 <__mdiff+0x12c>)
 800bc54:	e7e4      	b.n	800bc20 <__mdiff+0x28>
 800bc56:	9b01      	ldr	r3, [sp, #4]
 800bc58:	2700      	movs	r7, #0
 800bc5a:	60c3      	str	r3, [r0, #12]
 800bc5c:	6920      	ldr	r0, [r4, #16]
 800bc5e:	3414      	adds	r4, #20
 800bc60:	0083      	lsls	r3, r0, #2
 800bc62:	18e3      	adds	r3, r4, r3
 800bc64:	0021      	movs	r1, r4
 800bc66:	9401      	str	r4, [sp, #4]
 800bc68:	0034      	movs	r4, r6
 800bc6a:	9302      	str	r3, [sp, #8]
 800bc6c:	6933      	ldr	r3, [r6, #16]
 800bc6e:	3414      	adds	r4, #20
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	18e3      	adds	r3, r4, r3
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	0013      	movs	r3, r2
 800bc78:	3314      	adds	r3, #20
 800bc7a:	469c      	mov	ip, r3
 800bc7c:	9305      	str	r3, [sp, #20]
 800bc7e:	9104      	str	r1, [sp, #16]
 800bc80:	9b04      	ldr	r3, [sp, #16]
 800bc82:	cc02      	ldmia	r4!, {r1}
 800bc84:	cb20      	ldmia	r3!, {r5}
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	b2ab      	uxth	r3, r5
 800bc8a:	19df      	adds	r7, r3, r7
 800bc8c:	b28b      	uxth	r3, r1
 800bc8e:	1afb      	subs	r3, r7, r3
 800bc90:	0c09      	lsrs	r1, r1, #16
 800bc92:	0c2d      	lsrs	r5, r5, #16
 800bc94:	1a6d      	subs	r5, r5, r1
 800bc96:	1419      	asrs	r1, r3, #16
 800bc98:	1869      	adds	r1, r5, r1
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	140f      	asrs	r7, r1, #16
 800bc9e:	0409      	lsls	r1, r1, #16
 800bca0:	4319      	orrs	r1, r3
 800bca2:	4663      	mov	r3, ip
 800bca4:	c302      	stmia	r3!, {r1}
 800bca6:	469c      	mov	ip, r3
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	d8e8      	bhi.n	800bc80 <__mdiff+0x88>
 800bcae:	0031      	movs	r1, r6
 800bcb0:	9c03      	ldr	r4, [sp, #12]
 800bcb2:	3115      	adds	r1, #21
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	428c      	cmp	r4, r1
 800bcb8:	d304      	bcc.n	800bcc4 <__mdiff+0xcc>
 800bcba:	1ba3      	subs	r3, r4, r6
 800bcbc:	3b15      	subs	r3, #21
 800bcbe:	089b      	lsrs	r3, r3, #2
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	9901      	ldr	r1, [sp, #4]
 800bcc6:	18cd      	adds	r5, r1, r3
 800bcc8:	9905      	ldr	r1, [sp, #20]
 800bcca:	002e      	movs	r6, r5
 800bccc:	18cb      	adds	r3, r1, r3
 800bcce:	469c      	mov	ip, r3
 800bcd0:	9902      	ldr	r1, [sp, #8]
 800bcd2:	428e      	cmp	r6, r1
 800bcd4:	d310      	bcc.n	800bcf8 <__mdiff+0x100>
 800bcd6:	9e02      	ldr	r6, [sp, #8]
 800bcd8:	1ee9      	subs	r1, r5, #3
 800bcda:	2400      	movs	r4, #0
 800bcdc:	428e      	cmp	r6, r1
 800bcde:	d304      	bcc.n	800bcea <__mdiff+0xf2>
 800bce0:	0031      	movs	r1, r6
 800bce2:	3103      	adds	r1, #3
 800bce4:	1b49      	subs	r1, r1, r5
 800bce6:	0889      	lsrs	r1, r1, #2
 800bce8:	008c      	lsls	r4, r1, #2
 800bcea:	191b      	adds	r3, r3, r4
 800bcec:	3b04      	subs	r3, #4
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	2900      	cmp	r1, #0
 800bcf2:	d00f      	beq.n	800bd14 <__mdiff+0x11c>
 800bcf4:	6110      	str	r0, [r2, #16]
 800bcf6:	e798      	b.n	800bc2a <__mdiff+0x32>
 800bcf8:	ce02      	ldmia	r6!, {r1}
 800bcfa:	b28c      	uxth	r4, r1
 800bcfc:	19e4      	adds	r4, r4, r7
 800bcfe:	0c0f      	lsrs	r7, r1, #16
 800bd00:	1421      	asrs	r1, r4, #16
 800bd02:	1879      	adds	r1, r7, r1
 800bd04:	b2a4      	uxth	r4, r4
 800bd06:	140f      	asrs	r7, r1, #16
 800bd08:	0409      	lsls	r1, r1, #16
 800bd0a:	4321      	orrs	r1, r4
 800bd0c:	4664      	mov	r4, ip
 800bd0e:	c402      	stmia	r4!, {r1}
 800bd10:	46a4      	mov	ip, r4
 800bd12:	e7dd      	b.n	800bcd0 <__mdiff+0xd8>
 800bd14:	3801      	subs	r0, #1
 800bd16:	e7e9      	b.n	800bcec <__mdiff+0xf4>
 800bd18:	08013089 	.word	0x08013089
 800bd1c:	080130fa 	.word	0x080130fa
 800bd20:	00000237 	.word	0x00000237
 800bd24:	00000245 	.word	0x00000245

0800bd28 <__ulp>:
 800bd28:	2000      	movs	r0, #0
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <__ulp+0x30>)
 800bd2c:	4019      	ands	r1, r3
 800bd2e:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <__ulp+0x34>)
 800bd30:	18c9      	adds	r1, r1, r3
 800bd32:	4281      	cmp	r1, r0
 800bd34:	dc06      	bgt.n	800bd44 <__ulp+0x1c>
 800bd36:	4249      	negs	r1, r1
 800bd38:	150b      	asrs	r3, r1, #20
 800bd3a:	2b13      	cmp	r3, #19
 800bd3c:	dc03      	bgt.n	800bd46 <__ulp+0x1e>
 800bd3e:	2180      	movs	r1, #128	; 0x80
 800bd40:	0309      	lsls	r1, r1, #12
 800bd42:	4119      	asrs	r1, r3
 800bd44:	4770      	bx	lr
 800bd46:	3b14      	subs	r3, #20
 800bd48:	2001      	movs	r0, #1
 800bd4a:	2b1e      	cmp	r3, #30
 800bd4c:	dc02      	bgt.n	800bd54 <__ulp+0x2c>
 800bd4e:	2080      	movs	r0, #128	; 0x80
 800bd50:	0600      	lsls	r0, r0, #24
 800bd52:	40d8      	lsrs	r0, r3
 800bd54:	2100      	movs	r1, #0
 800bd56:	e7f5      	b.n	800bd44 <__ulp+0x1c>
 800bd58:	7ff00000 	.word	0x7ff00000
 800bd5c:	fcc00000 	.word	0xfcc00000

0800bd60 <__b2d>:
 800bd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd62:	0006      	movs	r6, r0
 800bd64:	6903      	ldr	r3, [r0, #16]
 800bd66:	3614      	adds	r6, #20
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	18f3      	adds	r3, r6, r3
 800bd6c:	1f1d      	subs	r5, r3, #4
 800bd6e:	682c      	ldr	r4, [r5, #0]
 800bd70:	000f      	movs	r7, r1
 800bd72:	0020      	movs	r0, r4
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	f7ff fd63 	bl	800b840 <__hi0bits>
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	1a12      	subs	r2, r2, r0
 800bd7e:	603a      	str	r2, [r7, #0]
 800bd80:	0003      	movs	r3, r0
 800bd82:	4a1c      	ldr	r2, [pc, #112]	; (800bdf4 <__b2d+0x94>)
 800bd84:	280a      	cmp	r0, #10
 800bd86:	dc15      	bgt.n	800bdb4 <__b2d+0x54>
 800bd88:	210b      	movs	r1, #11
 800bd8a:	0027      	movs	r7, r4
 800bd8c:	1a09      	subs	r1, r1, r0
 800bd8e:	40cf      	lsrs	r7, r1
 800bd90:	433a      	orrs	r2, r7
 800bd92:	468c      	mov	ip, r1
 800bd94:	0011      	movs	r1, r2
 800bd96:	2200      	movs	r2, #0
 800bd98:	42ae      	cmp	r6, r5
 800bd9a:	d202      	bcs.n	800bda2 <__b2d+0x42>
 800bd9c:	9a01      	ldr	r2, [sp, #4]
 800bd9e:	3a08      	subs	r2, #8
 800bda0:	6812      	ldr	r2, [r2, #0]
 800bda2:	3315      	adds	r3, #21
 800bda4:	409c      	lsls	r4, r3
 800bda6:	4663      	mov	r3, ip
 800bda8:	0027      	movs	r7, r4
 800bdaa:	40da      	lsrs	r2, r3
 800bdac:	4317      	orrs	r7, r2
 800bdae:	0038      	movs	r0, r7
 800bdb0:	b003      	add	sp, #12
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb4:	2700      	movs	r7, #0
 800bdb6:	42ae      	cmp	r6, r5
 800bdb8:	d202      	bcs.n	800bdc0 <__b2d+0x60>
 800bdba:	9d01      	ldr	r5, [sp, #4]
 800bdbc:	3d08      	subs	r5, #8
 800bdbe:	682f      	ldr	r7, [r5, #0]
 800bdc0:	210b      	movs	r1, #11
 800bdc2:	4249      	negs	r1, r1
 800bdc4:	468c      	mov	ip, r1
 800bdc6:	449c      	add	ip, r3
 800bdc8:	2b0b      	cmp	r3, #11
 800bdca:	d010      	beq.n	800bdee <__b2d+0x8e>
 800bdcc:	4661      	mov	r1, ip
 800bdce:	2320      	movs	r3, #32
 800bdd0:	408c      	lsls	r4, r1
 800bdd2:	1a5b      	subs	r3, r3, r1
 800bdd4:	0039      	movs	r1, r7
 800bdd6:	40d9      	lsrs	r1, r3
 800bdd8:	430c      	orrs	r4, r1
 800bdda:	4322      	orrs	r2, r4
 800bddc:	0011      	movs	r1, r2
 800bdde:	2200      	movs	r2, #0
 800bde0:	42b5      	cmp	r5, r6
 800bde2:	d901      	bls.n	800bde8 <__b2d+0x88>
 800bde4:	3d04      	subs	r5, #4
 800bde6:	682a      	ldr	r2, [r5, #0]
 800bde8:	4664      	mov	r4, ip
 800bdea:	40a7      	lsls	r7, r4
 800bdec:	e7dd      	b.n	800bdaa <__b2d+0x4a>
 800bdee:	4322      	orrs	r2, r4
 800bdf0:	0011      	movs	r1, r2
 800bdf2:	e7dc      	b.n	800bdae <__b2d+0x4e>
 800bdf4:	3ff00000 	.word	0x3ff00000

0800bdf8 <__d2b>:
 800bdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	0014      	movs	r4, r2
 800bdfe:	001d      	movs	r5, r3
 800be00:	9f08      	ldr	r7, [sp, #32]
 800be02:	f7ff fc5b 	bl	800b6bc <_Balloc>
 800be06:	1e06      	subs	r6, r0, #0
 800be08:	d105      	bne.n	800be16 <__d2b+0x1e>
 800be0a:	0032      	movs	r2, r6
 800be0c:	4b24      	ldr	r3, [pc, #144]	; (800bea0 <__d2b+0xa8>)
 800be0e:	4825      	ldr	r0, [pc, #148]	; (800bea4 <__d2b+0xac>)
 800be10:	4925      	ldr	r1, [pc, #148]	; (800bea8 <__d2b+0xb0>)
 800be12:	f002 ff17 	bl	800ec44 <__assert_func>
 800be16:	032b      	lsls	r3, r5, #12
 800be18:	006d      	lsls	r5, r5, #1
 800be1a:	0b1b      	lsrs	r3, r3, #12
 800be1c:	0d6d      	lsrs	r5, r5, #21
 800be1e:	d125      	bne.n	800be6c <__d2b+0x74>
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	2c00      	cmp	r4, #0
 800be24:	d028      	beq.n	800be78 <__d2b+0x80>
 800be26:	4668      	mov	r0, sp
 800be28:	9400      	str	r4, [sp, #0]
 800be2a:	f7ff fd23 	bl	800b874 <__lo0bits>
 800be2e:	9b01      	ldr	r3, [sp, #4]
 800be30:	9900      	ldr	r1, [sp, #0]
 800be32:	2800      	cmp	r0, #0
 800be34:	d01e      	beq.n	800be74 <__d2b+0x7c>
 800be36:	2220      	movs	r2, #32
 800be38:	001c      	movs	r4, r3
 800be3a:	1a12      	subs	r2, r2, r0
 800be3c:	4094      	lsls	r4, r2
 800be3e:	0022      	movs	r2, r4
 800be40:	40c3      	lsrs	r3, r0
 800be42:	430a      	orrs	r2, r1
 800be44:	6172      	str	r2, [r6, #20]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	9c01      	ldr	r4, [sp, #4]
 800be4a:	61b4      	str	r4, [r6, #24]
 800be4c:	1e63      	subs	r3, r4, #1
 800be4e:	419c      	sbcs	r4, r3
 800be50:	3401      	adds	r4, #1
 800be52:	6134      	str	r4, [r6, #16]
 800be54:	2d00      	cmp	r5, #0
 800be56:	d017      	beq.n	800be88 <__d2b+0x90>
 800be58:	2435      	movs	r4, #53	; 0x35
 800be5a:	4b14      	ldr	r3, [pc, #80]	; (800beac <__d2b+0xb4>)
 800be5c:	18ed      	adds	r5, r5, r3
 800be5e:	182d      	adds	r5, r5, r0
 800be60:	603d      	str	r5, [r7, #0]
 800be62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be64:	1a24      	subs	r4, r4, r0
 800be66:	601c      	str	r4, [r3, #0]
 800be68:	0030      	movs	r0, r6
 800be6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be6c:	2280      	movs	r2, #128	; 0x80
 800be6e:	0352      	lsls	r2, r2, #13
 800be70:	4313      	orrs	r3, r2
 800be72:	e7d5      	b.n	800be20 <__d2b+0x28>
 800be74:	6171      	str	r1, [r6, #20]
 800be76:	e7e7      	b.n	800be48 <__d2b+0x50>
 800be78:	a801      	add	r0, sp, #4
 800be7a:	f7ff fcfb 	bl	800b874 <__lo0bits>
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	2401      	movs	r4, #1
 800be82:	6173      	str	r3, [r6, #20]
 800be84:	3020      	adds	r0, #32
 800be86:	e7e4      	b.n	800be52 <__d2b+0x5a>
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <__d2b+0xb8>)
 800be8a:	18c0      	adds	r0, r0, r3
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <__d2b+0xbc>)
 800be8e:	6038      	str	r0, [r7, #0]
 800be90:	18e3      	adds	r3, r4, r3
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	18f3      	adds	r3, r6, r3
 800be96:	6958      	ldr	r0, [r3, #20]
 800be98:	f7ff fcd2 	bl	800b840 <__hi0bits>
 800be9c:	0164      	lsls	r4, r4, #5
 800be9e:	e7e0      	b.n	800be62 <__d2b+0x6a>
 800bea0:	08013089 	.word	0x08013089
 800bea4:	080130fa 	.word	0x080130fa
 800bea8:	0000030f 	.word	0x0000030f
 800beac:	fffffbcd 	.word	0xfffffbcd
 800beb0:	fffffbce 	.word	0xfffffbce
 800beb4:	3fffffff 	.word	0x3fffffff

0800beb8 <__ratio>:
 800beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beba:	b087      	sub	sp, #28
 800bebc:	000f      	movs	r7, r1
 800bebe:	a904      	add	r1, sp, #16
 800bec0:	0006      	movs	r6, r0
 800bec2:	f7ff ff4d 	bl	800bd60 <__b2d>
 800bec6:	9000      	str	r0, [sp, #0]
 800bec8:	9101      	str	r1, [sp, #4]
 800beca:	9c00      	ldr	r4, [sp, #0]
 800becc:	9d01      	ldr	r5, [sp, #4]
 800bece:	0038      	movs	r0, r7
 800bed0:	a905      	add	r1, sp, #20
 800bed2:	f7ff ff45 	bl	800bd60 <__b2d>
 800bed6:	9002      	str	r0, [sp, #8]
 800bed8:	9103      	str	r1, [sp, #12]
 800beda:	9a02      	ldr	r2, [sp, #8]
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	6930      	ldr	r0, [r6, #16]
 800bee0:	6939      	ldr	r1, [r7, #16]
 800bee2:	9e04      	ldr	r6, [sp, #16]
 800bee4:	1a40      	subs	r0, r0, r1
 800bee6:	9905      	ldr	r1, [sp, #20]
 800bee8:	0140      	lsls	r0, r0, #5
 800beea:	1a71      	subs	r1, r6, r1
 800beec:	1841      	adds	r1, r0, r1
 800beee:	0508      	lsls	r0, r1, #20
 800bef0:	2900      	cmp	r1, #0
 800bef2:	dd07      	ble.n	800bf04 <__ratio+0x4c>
 800bef4:	9901      	ldr	r1, [sp, #4]
 800bef6:	1845      	adds	r5, r0, r1
 800bef8:	0020      	movs	r0, r4
 800befa:	0029      	movs	r1, r5
 800befc:	f7f4 ffbc 	bl	8000e78 <__aeabi_ddiv>
 800bf00:	b007      	add	sp, #28
 800bf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf04:	9903      	ldr	r1, [sp, #12]
 800bf06:	1a0b      	subs	r3, r1, r0
 800bf08:	e7f6      	b.n	800bef8 <__ratio+0x40>

0800bf0a <__copybits>:
 800bf0a:	b570      	push	{r4, r5, r6, lr}
 800bf0c:	0014      	movs	r4, r2
 800bf0e:	0005      	movs	r5, r0
 800bf10:	3901      	subs	r1, #1
 800bf12:	6913      	ldr	r3, [r2, #16]
 800bf14:	1149      	asrs	r1, r1, #5
 800bf16:	3101      	adds	r1, #1
 800bf18:	0089      	lsls	r1, r1, #2
 800bf1a:	3414      	adds	r4, #20
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	1841      	adds	r1, r0, r1
 800bf20:	18e3      	adds	r3, r4, r3
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	d80d      	bhi.n	800bf42 <__copybits+0x38>
 800bf26:	0014      	movs	r4, r2
 800bf28:	3411      	adds	r4, #17
 800bf2a:	2500      	movs	r5, #0
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	d803      	bhi.n	800bf38 <__copybits+0x2e>
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	3b11      	subs	r3, #17
 800bf34:	089b      	lsrs	r3, r3, #2
 800bf36:	009d      	lsls	r5, r3, #2
 800bf38:	2300      	movs	r3, #0
 800bf3a:	1940      	adds	r0, r0, r5
 800bf3c:	4281      	cmp	r1, r0
 800bf3e:	d803      	bhi.n	800bf48 <__copybits+0x3e>
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	cc40      	ldmia	r4!, {r6}
 800bf44:	c540      	stmia	r5!, {r6}
 800bf46:	e7ec      	b.n	800bf22 <__copybits+0x18>
 800bf48:	c008      	stmia	r0!, {r3}
 800bf4a:	e7f7      	b.n	800bf3c <__copybits+0x32>

0800bf4c <__any_on>:
 800bf4c:	0002      	movs	r2, r0
 800bf4e:	6900      	ldr	r0, [r0, #16]
 800bf50:	b510      	push	{r4, lr}
 800bf52:	3214      	adds	r2, #20
 800bf54:	114b      	asrs	r3, r1, #5
 800bf56:	4298      	cmp	r0, r3
 800bf58:	db13      	blt.n	800bf82 <__any_on+0x36>
 800bf5a:	dd0c      	ble.n	800bf76 <__any_on+0x2a>
 800bf5c:	241f      	movs	r4, #31
 800bf5e:	0008      	movs	r0, r1
 800bf60:	4020      	ands	r0, r4
 800bf62:	4221      	tst	r1, r4
 800bf64:	d007      	beq.n	800bf76 <__any_on+0x2a>
 800bf66:	0099      	lsls	r1, r3, #2
 800bf68:	588c      	ldr	r4, [r1, r2]
 800bf6a:	0021      	movs	r1, r4
 800bf6c:	40c1      	lsrs	r1, r0
 800bf6e:	4081      	lsls	r1, r0
 800bf70:	2001      	movs	r0, #1
 800bf72:	428c      	cmp	r4, r1
 800bf74:	d104      	bne.n	800bf80 <__any_on+0x34>
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	18d3      	adds	r3, r2, r3
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d803      	bhi.n	800bf86 <__any_on+0x3a>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	0003      	movs	r3, r0
 800bf84:	e7f7      	b.n	800bf76 <__any_on+0x2a>
 800bf86:	3b04      	subs	r3, #4
 800bf88:	6819      	ldr	r1, [r3, #0]
 800bf8a:	2900      	cmp	r1, #0
 800bf8c:	d0f5      	beq.n	800bf7a <__any_on+0x2e>
 800bf8e:	2001      	movs	r0, #1
 800bf90:	e7f6      	b.n	800bf80 <__any_on+0x34>

0800bf92 <__ascii_wctomb>:
 800bf92:	0003      	movs	r3, r0
 800bf94:	1e08      	subs	r0, r1, #0
 800bf96:	d005      	beq.n	800bfa4 <__ascii_wctomb+0x12>
 800bf98:	2aff      	cmp	r2, #255	; 0xff
 800bf9a:	d904      	bls.n	800bfa6 <__ascii_wctomb+0x14>
 800bf9c:	228a      	movs	r2, #138	; 0x8a
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	4240      	negs	r0, r0
 800bfa4:	4770      	bx	lr
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	700a      	strb	r2, [r1, #0]
 800bfaa:	e7fb      	b.n	800bfa4 <__ascii_wctomb+0x12>

0800bfac <_svfprintf_r>:
 800bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfae:	b0d9      	sub	sp, #356	; 0x164
 800bfb0:	001c      	movs	r4, r3
 800bfb2:	910b      	str	r1, [sp, #44]	; 0x2c
 800bfb4:	9208      	str	r2, [sp, #32]
 800bfb6:	900a      	str	r0, [sp, #40]	; 0x28
 800bfb8:	f002 fdae 	bl	800eb18 <_localeconv_r>
 800bfbc:	6803      	ldr	r3, [r0, #0]
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	931c      	str	r3, [sp, #112]	; 0x70
 800bfc2:	f7f4 f89f 	bl	8000104 <strlen>
 800bfc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc8:	9016      	str	r0, [sp, #88]	; 0x58
 800bfca:	899b      	ldrh	r3, [r3, #12]
 800bfcc:	061b      	lsls	r3, r3, #24
 800bfce:	d517      	bpl.n	800c000 <_svfprintf_r+0x54>
 800bfd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d113      	bne.n	800c000 <_svfprintf_r+0x54>
 800bfd8:	2140      	movs	r1, #64	; 0x40
 800bfda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfdc:	f7fd fb6e 	bl	80096bc <_malloc_r>
 800bfe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe2:	6018      	str	r0, [r3, #0]
 800bfe4:	6118      	str	r0, [r3, #16]
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d107      	bne.n	800bffa <_svfprintf_r+0x4e>
 800bfea:	230c      	movs	r3, #12
 800bfec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	3b0d      	subs	r3, #13
 800bff2:	9317      	str	r3, [sp, #92]	; 0x5c
 800bff4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bff6:	b059      	add	sp, #356	; 0x164
 800bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffa:	2340      	movs	r3, #64	; 0x40
 800bffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bffe:	6153      	str	r3, [r2, #20]
 800c000:	2300      	movs	r3, #0
 800c002:	2200      	movs	r2, #0
 800c004:	932e      	str	r3, [sp, #184]	; 0xb8
 800c006:	932d      	str	r3, [sp, #180]	; 0xb4
 800c008:	930e      	str	r3, [sp, #56]	; 0x38
 800c00a:	2300      	movs	r3, #0
 800c00c:	9214      	str	r2, [sp, #80]	; 0x50
 800c00e:	9315      	str	r3, [sp, #84]	; 0x54
 800c010:	2300      	movs	r3, #0
 800c012:	af2f      	add	r7, sp, #188	; 0xbc
 800c014:	972c      	str	r7, [sp, #176]	; 0xb0
 800c016:	931f      	str	r3, [sp, #124]	; 0x7c
 800c018:	931e      	str	r3, [sp, #120]	; 0x78
 800c01a:	9312      	str	r3, [sp, #72]	; 0x48
 800c01c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c01e:	931d      	str	r3, [sp, #116]	; 0x74
 800c020:	9317      	str	r3, [sp, #92]	; 0x5c
 800c022:	9d08      	ldr	r5, [sp, #32]
 800c024:	782b      	ldrb	r3, [r5, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <_svfprintf_r+0x84>
 800c02a:	2b25      	cmp	r3, #37	; 0x25
 800c02c:	d000      	beq.n	800c030 <_svfprintf_r+0x84>
 800c02e:	e091      	b.n	800c154 <_svfprintf_r+0x1a8>
 800c030:	9b08      	ldr	r3, [sp, #32]
 800c032:	1aee      	subs	r6, r5, r3
 800c034:	429d      	cmp	r5, r3
 800c036:	d016      	beq.n	800c066 <_svfprintf_r+0xba>
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c03c:	607e      	str	r6, [r7, #4]
 800c03e:	199b      	adds	r3, r3, r6
 800c040:	932e      	str	r3, [sp, #184]	; 0xb8
 800c042:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c044:	3708      	adds	r7, #8
 800c046:	3301      	adds	r3, #1
 800c048:	932d      	str	r3, [sp, #180]	; 0xb4
 800c04a:	2b07      	cmp	r3, #7
 800c04c:	dd08      	ble.n	800c060 <_svfprintf_r+0xb4>
 800c04e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c050:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c052:	aa2c      	add	r2, sp, #176	; 0xb0
 800c054:	f004 f8c0 	bl	80101d8 <__ssprint_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d000      	beq.n	800c05e <_svfprintf_r+0xb2>
 800c05c:	e1cf      	b.n	800c3fe <_svfprintf_r+0x452>
 800c05e:	af2f      	add	r7, sp, #188	; 0xbc
 800c060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c062:	199b      	adds	r3, r3, r6
 800c064:	9317      	str	r3, [sp, #92]	; 0x5c
 800c066:	782b      	ldrb	r3, [r5, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <_svfprintf_r+0xc4>
 800c06c:	f001 f99e 	bl	800d3ac <_svfprintf_r+0x1400>
 800c070:	221b      	movs	r2, #27
 800c072:	2300      	movs	r3, #0
 800c074:	a91e      	add	r1, sp, #120	; 0x78
 800c076:	1852      	adds	r2, r2, r1
 800c078:	7013      	strb	r3, [r2, #0]
 800c07a:	2201      	movs	r2, #1
 800c07c:	001e      	movs	r6, r3
 800c07e:	4252      	negs	r2, r2
 800c080:	3501      	adds	r5, #1
 800c082:	9209      	str	r2, [sp, #36]	; 0x24
 800c084:	9318      	str	r3, [sp, #96]	; 0x60
 800c086:	1c6b      	adds	r3, r5, #1
 800c088:	9313      	str	r3, [sp, #76]	; 0x4c
 800c08a:	782b      	ldrb	r3, [r5, #0]
 800c08c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c08e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c090:	3820      	subs	r0, #32
 800c092:	285a      	cmp	r0, #90	; 0x5a
 800c094:	d901      	bls.n	800c09a <_svfprintf_r+0xee>
 800c096:	f000 fe20 	bl	800ccda <_svfprintf_r+0xd2e>
 800c09a:	f7f4 f845 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c09e:	0078      	.short	0x0078
 800c0a0:	061e061e 	.word	0x061e061e
 800c0a4:	061e0082 	.word	0x061e0082
 800c0a8:	061e061e 	.word	0x061e061e
 800c0ac:	061e005d 	.word	0x061e005d
 800c0b0:	0084061e 	.word	0x0084061e
 800c0b4:	061e008c 	.word	0x061e008c
 800c0b8:	0091008a 	.word	0x0091008a
 800c0bc:	00b2061e 	.word	0x00b2061e
 800c0c0:	00b400b4 	.word	0x00b400b4
 800c0c4:	00b400b4 	.word	0x00b400b4
 800c0c8:	00b400b4 	.word	0x00b400b4
 800c0cc:	00b400b4 	.word	0x00b400b4
 800c0d0:	061e00b4 	.word	0x061e00b4
 800c0d4:	061e061e 	.word	0x061e061e
 800c0d8:	061e061e 	.word	0x061e061e
 800c0dc:	061e061e 	.word	0x061e061e
 800c0e0:	061e013b 	.word	0x061e013b
 800c0e4:	00f400e0 	.word	0x00f400e0
 800c0e8:	013b013b 	.word	0x013b013b
 800c0ec:	061e013b 	.word	0x061e013b
 800c0f0:	061e061e 	.word	0x061e061e
 800c0f4:	00c7061e 	.word	0x00c7061e
 800c0f8:	061e061e 	.word	0x061e061e
 800c0fc:	061e04c7 	.word	0x061e04c7
 800c100:	061e061e 	.word	0x061e061e
 800c104:	061e050a 	.word	0x061e050a
 800c108:	061e052a 	.word	0x061e052a
 800c10c:	055c061e 	.word	0x055c061e
 800c110:	061e061e 	.word	0x061e061e
 800c114:	061e061e 	.word	0x061e061e
 800c118:	061e061e 	.word	0x061e061e
 800c11c:	061e061e 	.word	0x061e061e
 800c120:	061e013b 	.word	0x061e013b
 800c124:	00f600e0 	.word	0x00f600e0
 800c128:	013b013b 	.word	0x013b013b
 800c12c:	00c9013b 	.word	0x00c9013b
 800c130:	00dc00f6 	.word	0x00dc00f6
 800c134:	00d5061e 	.word	0x00d5061e
 800c138:	04a7061e 	.word	0x04a7061e
 800c13c:	04fa04c9 	.word	0x04fa04c9
 800c140:	061e00dc 	.word	0x061e00dc
 800c144:	0080050a 	.word	0x0080050a
 800c148:	061e052c 	.word	0x061e052c
 800c14c:	057c061e 	.word	0x057c061e
 800c150:	0080061e 	.word	0x0080061e
 800c154:	3501      	adds	r5, #1
 800c156:	e765      	b.n	800c024 <_svfprintf_r+0x78>
 800c158:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c15a:	f002 fcdd 	bl	800eb18 <_localeconv_r>
 800c15e:	6843      	ldr	r3, [r0, #4]
 800c160:	0018      	movs	r0, r3
 800c162:	931d      	str	r3, [sp, #116]	; 0x74
 800c164:	f7f3 ffce 	bl	8000104 <strlen>
 800c168:	901b      	str	r0, [sp, #108]	; 0x6c
 800c16a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c16c:	f002 fcd4 	bl	800eb18 <_localeconv_r>
 800c170:	6883      	ldr	r3, [r0, #8]
 800c172:	9312      	str	r3, [sp, #72]	; 0x48
 800c174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d011      	beq.n	800c19e <_svfprintf_r+0x1f2>
 800c17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00e      	beq.n	800c19e <_svfprintf_r+0x1f2>
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00b      	beq.n	800c19e <_svfprintf_r+0x1f2>
 800c186:	2380      	movs	r3, #128	; 0x80
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	431e      	orrs	r6, r3
 800c18c:	e007      	b.n	800c19e <_svfprintf_r+0x1f2>
 800c18e:	231b      	movs	r3, #27
 800c190:	aa1e      	add	r2, sp, #120	; 0x78
 800c192:	189b      	adds	r3, r3, r2
 800c194:	781a      	ldrb	r2, [r3, #0]
 800c196:	2a00      	cmp	r2, #0
 800c198:	d101      	bne.n	800c19e <_svfprintf_r+0x1f2>
 800c19a:	3220      	adds	r2, #32
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c1a0:	e771      	b.n	800c086 <_svfprintf_r+0xda>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e7f1      	b.n	800c18a <_svfprintf_r+0x1de>
 800c1a6:	cc08      	ldmia	r4!, {r3}
 800c1a8:	9318      	str	r3, [sp, #96]	; 0x60
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	daf7      	bge.n	800c19e <_svfprintf_r+0x1f2>
 800c1ae:	425b      	negs	r3, r3
 800c1b0:	9318      	str	r3, [sp, #96]	; 0x60
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	e7e9      	b.n	800c18a <_svfprintf_r+0x1de>
 800c1b6:	231b      	movs	r3, #27
 800c1b8:	aa1e      	add	r2, sp, #120	; 0x78
 800c1ba:	189b      	adds	r3, r3, r2
 800c1bc:	222b      	movs	r2, #43	; 0x2b
 800c1be:	e7ed      	b.n	800c19c <_svfprintf_r+0x1f0>
 800c1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1c4:	7812      	ldrb	r2, [r2, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	920f      	str	r2, [sp, #60]	; 0x3c
 800c1ca:	2a2a      	cmp	r2, #42	; 0x2a
 800c1cc:	d010      	beq.n	800c1f0 <_svfprintf_r+0x244>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1d6:	3a30      	subs	r2, #48	; 0x30
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d900      	bls.n	800c1de <_svfprintf_r+0x232>
 800c1dc:	e757      	b.n	800c08e <_svfprintf_r+0xe2>
 800c1de:	200a      	movs	r0, #10
 800c1e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1e2:	4341      	muls	r1, r0
 800c1e4:	188a      	adds	r2, r1, r2
 800c1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e8:	781a      	ldrb	r2, [r3, #0]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	920f      	str	r2, [sp, #60]	; 0x3c
 800c1ee:	e7f0      	b.n	800c1d2 <_svfprintf_r+0x226>
 800c1f0:	cc04      	ldmia	r4!, {r2}
 800c1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1f4:	2a00      	cmp	r2, #0
 800c1f6:	da02      	bge.n	800c1fe <_svfprintf_r+0x252>
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	4252      	negs	r2, r2
 800c1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800c200:	e7cd      	b.n	800c19e <_svfprintf_r+0x1f2>
 800c202:	2380      	movs	r3, #128	; 0x80
 800c204:	e7c1      	b.n	800c18a <_svfprintf_r+0x1de>
 800c206:	2200      	movs	r2, #0
 800c208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c20a:	9218      	str	r2, [sp, #96]	; 0x60
 800c20c:	210a      	movs	r1, #10
 800c20e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c210:	434a      	muls	r2, r1
 800c212:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c214:	3930      	subs	r1, #48	; 0x30
 800c216:	188a      	adds	r2, r1, r2
 800c218:	9218      	str	r2, [sp, #96]	; 0x60
 800c21a:	001a      	movs	r2, r3
 800c21c:	7812      	ldrb	r2, [r2, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	920f      	str	r2, [sp, #60]	; 0x3c
 800c222:	3a30      	subs	r2, #48	; 0x30
 800c224:	9313      	str	r3, [sp, #76]	; 0x4c
 800c226:	2a09      	cmp	r2, #9
 800c228:	d9f0      	bls.n	800c20c <_svfprintf_r+0x260>
 800c22a:	e730      	b.n	800c08e <_svfprintf_r+0xe2>
 800c22c:	2308      	movs	r3, #8
 800c22e:	e7ac      	b.n	800c18a <_svfprintf_r+0x1de>
 800c230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b68      	cmp	r3, #104	; 0x68
 800c236:	d105      	bne.n	800c244 <_svfprintf_r+0x298>
 800c238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c23a:	3301      	adds	r3, #1
 800c23c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c23e:	2380      	movs	r3, #128	; 0x80
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	e7a2      	b.n	800c18a <_svfprintf_r+0x1de>
 800c244:	2340      	movs	r3, #64	; 0x40
 800c246:	e7a0      	b.n	800c18a <_svfprintf_r+0x1de>
 800c248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b6c      	cmp	r3, #108	; 0x6c
 800c24e:	d104      	bne.n	800c25a <_svfprintf_r+0x2ae>
 800c250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c252:	3301      	adds	r3, #1
 800c254:	9313      	str	r3, [sp, #76]	; 0x4c
 800c256:	2320      	movs	r3, #32
 800c258:	e797      	b.n	800c18a <_svfprintf_r+0x1de>
 800c25a:	2310      	movs	r3, #16
 800c25c:	e795      	b.n	800c18a <_svfprintf_r+0x1de>
 800c25e:	0021      	movs	r1, r4
 800c260:	c904      	ldmia	r1!, {r2}
 800c262:	ab3f      	add	r3, sp, #252	; 0xfc
 800c264:	910d      	str	r1, [sp, #52]	; 0x34
 800c266:	211b      	movs	r1, #27
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	2200      	movs	r2, #0
 800c26c:	a81e      	add	r0, sp, #120	; 0x78
 800c26e:	1809      	adds	r1, r1, r0
 800c270:	700a      	strb	r2, [r1, #0]
 800c272:	920c      	str	r2, [sp, #48]	; 0x30
 800c274:	3201      	adds	r2, #1
 800c276:	9209      	str	r2, [sp, #36]	; 0x24
 800c278:	2200      	movs	r2, #0
 800c27a:	9308      	str	r3, [sp, #32]
 800c27c:	0015      	movs	r5, r2
 800c27e:	9219      	str	r2, [sp, #100]	; 0x64
 800c280:	9210      	str	r2, [sp, #64]	; 0x40
 800c282:	9211      	str	r2, [sp, #68]	; 0x44
 800c284:	e1f1      	b.n	800c66a <_svfprintf_r+0x6be>
 800c286:	2310      	movs	r3, #16
 800c288:	431e      	orrs	r6, r3
 800c28a:	06b3      	lsls	r3, r6, #26
 800c28c:	d531      	bpl.n	800c2f2 <_svfprintf_r+0x346>
 800c28e:	2307      	movs	r3, #7
 800c290:	3407      	adds	r4, #7
 800c292:	439c      	bics	r4, r3
 800c294:	0022      	movs	r2, r4
 800c296:	ca18      	ldmia	r2!, {r3, r4}
 800c298:	9306      	str	r3, [sp, #24]
 800c29a:	9407      	str	r4, [sp, #28]
 800c29c:	920d      	str	r2, [sp, #52]	; 0x34
 800c29e:	9a07      	ldr	r2, [sp, #28]
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	da0b      	bge.n	800c2be <_svfprintf_r+0x312>
 800c2a6:	9c06      	ldr	r4, [sp, #24]
 800c2a8:	9d07      	ldr	r5, [sp, #28]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4261      	negs	r1, r4
 800c2ae:	41aa      	sbcs	r2, r5
 800c2b0:	9106      	str	r1, [sp, #24]
 800c2b2:	9207      	str	r2, [sp, #28]
 800c2b4:	221b      	movs	r2, #27
 800c2b6:	a91e      	add	r1, sp, #120	; 0x78
 800c2b8:	1852      	adds	r2, r2, r1
 800c2ba:	212d      	movs	r1, #45	; 0x2d
 800c2bc:	7011      	strb	r1, [r2, #0]
 800c2be:	9907      	ldr	r1, [sp, #28]
 800c2c0:	9a06      	ldr	r2, [sp, #24]
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2c6:	3101      	adds	r1, #1
 800c2c8:	d101      	bne.n	800c2ce <_svfprintf_r+0x322>
 800c2ca:	f001 f87b 	bl	800d3c4 <_svfprintf_r+0x1418>
 800c2ce:	2180      	movs	r1, #128	; 0x80
 800c2d0:	0034      	movs	r4, r6
 800c2d2:	438c      	bics	r4, r1
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	d001      	beq.n	800c2dc <_svfprintf_r+0x330>
 800c2d8:	f001 f879 	bl	800d3ce <_svfprintf_r+0x1422>
 800c2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	d101      	bne.n	800c2e6 <_svfprintf_r+0x33a>
 800c2e2:	f000 fcef 	bl	800ccc4 <_svfprintf_r+0xd18>
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d001      	beq.n	800c2ee <_svfprintf_r+0x342>
 800c2ea:	f001 f874 	bl	800d3d6 <_svfprintf_r+0x142a>
 800c2ee:	f000 fc79 	bl	800cbe4 <_svfprintf_r+0xc38>
 800c2f2:	0022      	movs	r2, r4
 800c2f4:	ca08      	ldmia	r2!, {r3}
 800c2f6:	920d      	str	r2, [sp, #52]	; 0x34
 800c2f8:	06f2      	lsls	r2, r6, #27
 800c2fa:	d503      	bpl.n	800c304 <_svfprintf_r+0x358>
 800c2fc:	9306      	str	r3, [sp, #24]
 800c2fe:	17db      	asrs	r3, r3, #31
 800c300:	9307      	str	r3, [sp, #28]
 800c302:	e7cc      	b.n	800c29e <_svfprintf_r+0x2f2>
 800c304:	0672      	lsls	r2, r6, #25
 800c306:	d501      	bpl.n	800c30c <_svfprintf_r+0x360>
 800c308:	b21b      	sxth	r3, r3
 800c30a:	e7f7      	b.n	800c2fc <_svfprintf_r+0x350>
 800c30c:	05b2      	lsls	r2, r6, #22
 800c30e:	d5f5      	bpl.n	800c2fc <_svfprintf_r+0x350>
 800c310:	b25b      	sxtb	r3, r3
 800c312:	e7f3      	b.n	800c2fc <_svfprintf_r+0x350>
 800c314:	2307      	movs	r3, #7
 800c316:	3407      	adds	r4, #7
 800c318:	439c      	bics	r4, r3
 800c31a:	0022      	movs	r2, r4
 800c31c:	ca18      	ldmia	r2!, {r3, r4}
 800c31e:	920d      	str	r2, [sp, #52]	; 0x34
 800c320:	2201      	movs	r2, #1
 800c322:	9314      	str	r3, [sp, #80]	; 0x50
 800c324:	9415      	str	r4, [sp, #84]	; 0x54
 800c326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c328:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c32a:	005c      	lsls	r4, r3, #1
 800c32c:	0864      	lsrs	r4, r4, #1
 800c32e:	0028      	movs	r0, r5
 800c330:	0021      	movs	r1, r4
 800c332:	4b3e      	ldr	r3, [pc, #248]	; (800c42c <_svfprintf_r+0x480>)
 800c334:	4252      	negs	r2, r2
 800c336:	f7f5 ffdd 	bl	80022f4 <__aeabi_dcmpun>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d126      	bne.n	800c38c <_svfprintf_r+0x3e0>
 800c33e:	2201      	movs	r2, #1
 800c340:	0028      	movs	r0, r5
 800c342:	0021      	movs	r1, r4
 800c344:	4b39      	ldr	r3, [pc, #228]	; (800c42c <_svfprintf_r+0x480>)
 800c346:	4252      	negs	r2, r2
 800c348:	f7f4 f88e 	bl	8000468 <__aeabi_dcmple>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d11d      	bne.n	800c38c <_svfprintf_r+0x3e0>
 800c350:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c352:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c354:	2200      	movs	r2, #0
 800c356:	2300      	movs	r3, #0
 800c358:	f7f4 f87c 	bl	8000454 <__aeabi_dcmplt>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d004      	beq.n	800c36a <_svfprintf_r+0x3be>
 800c360:	231b      	movs	r3, #27
 800c362:	aa1e      	add	r2, sp, #120	; 0x78
 800c364:	189b      	adds	r3, r3, r2
 800c366:	222d      	movs	r2, #45	; 0x2d
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	4b31      	ldr	r3, [pc, #196]	; (800c430 <_svfprintf_r+0x484>)
 800c36c:	9308      	str	r3, [sp, #32]
 800c36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c370:	2b47      	cmp	r3, #71	; 0x47
 800c372:	dd01      	ble.n	800c378 <_svfprintf_r+0x3cc>
 800c374:	4b2f      	ldr	r3, [pc, #188]	; (800c434 <_svfprintf_r+0x488>)
 800c376:	9308      	str	r3, [sp, #32]
 800c378:	2380      	movs	r3, #128	; 0x80
 800c37a:	439e      	bics	r6, r3
 800c37c:	2300      	movs	r3, #0
 800c37e:	930c      	str	r3, [sp, #48]	; 0x30
 800c380:	3303      	adds	r3, #3
 800c382:	9309      	str	r3, [sp, #36]	; 0x24
 800c384:	2300      	movs	r3, #0
 800c386:	9319      	str	r3, [sp, #100]	; 0x64
 800c388:	f000 fc78 	bl	800cc7c <_svfprintf_r+0xcd0>
 800c38c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c390:	0010      	movs	r0, r2
 800c392:	0019      	movs	r1, r3
 800c394:	f7f5 ffae 	bl	80022f4 <__aeabi_dcmpun>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d00e      	beq.n	800c3ba <_svfprintf_r+0x40e>
 800c39c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	da04      	bge.n	800c3ac <_svfprintf_r+0x400>
 800c3a2:	231b      	movs	r3, #27
 800c3a4:	aa1e      	add	r2, sp, #120	; 0x78
 800c3a6:	189b      	adds	r3, r3, r2
 800c3a8:	222d      	movs	r2, #45	; 0x2d
 800c3aa:	701a      	strb	r2, [r3, #0]
 800c3ac:	4b22      	ldr	r3, [pc, #136]	; (800c438 <_svfprintf_r+0x48c>)
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3b2:	2b47      	cmp	r3, #71	; 0x47
 800c3b4:	dde0      	ble.n	800c378 <_svfprintf_r+0x3cc>
 800c3b6:	4b21      	ldr	r3, [pc, #132]	; (800c43c <_svfprintf_r+0x490>)
 800c3b8:	e7dd      	b.n	800c376 <_svfprintf_r+0x3ca>
 800c3ba:	2320      	movs	r3, #32
 800c3bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3be:	439a      	bics	r2, r3
 800c3c0:	9210      	str	r2, [sp, #64]	; 0x40
 800c3c2:	2a41      	cmp	r2, #65	; 0x41
 800c3c4:	d123      	bne.n	800c40e <_svfprintf_r+0x462>
 800c3c6:	2230      	movs	r2, #48	; 0x30
 800c3c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3ca:	ab25      	add	r3, sp, #148	; 0x94
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	3248      	adds	r2, #72	; 0x48
 800c3d0:	2961      	cmp	r1, #97	; 0x61
 800c3d2:	d000      	beq.n	800c3d6 <_svfprintf_r+0x42a>
 800c3d4:	3a20      	subs	r2, #32
 800c3d6:	705a      	strb	r2, [r3, #1]
 800c3d8:	2302      	movs	r3, #2
 800c3da:	431e      	orrs	r6, r3
 800c3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3de:	2b63      	cmp	r3, #99	; 0x63
 800c3e0:	dd2e      	ble.n	800c440 <_svfprintf_r+0x494>
 800c3e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c3e4:	1c59      	adds	r1, r3, #1
 800c3e6:	f7fd f969 	bl	80096bc <_malloc_r>
 800c3ea:	9008      	str	r0, [sp, #32]
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d000      	beq.n	800c3f2 <_svfprintf_r+0x446>
 800c3f0:	e216      	b.n	800c820 <_svfprintf_r+0x874>
 800c3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3f4:	899a      	ldrh	r2, [r3, #12]
 800c3f6:	2340      	movs	r3, #64	; 0x40
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3fc:	8193      	strh	r3, [r2, #12]
 800c3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c400:	899b      	ldrh	r3, [r3, #12]
 800c402:	065b      	lsls	r3, r3, #25
 800c404:	d400      	bmi.n	800c408 <_svfprintf_r+0x45c>
 800c406:	e5f5      	b.n	800bff4 <_svfprintf_r+0x48>
 800c408:	2301      	movs	r3, #1
 800c40a:	425b      	negs	r3, r3
 800c40c:	e5f1      	b.n	800bff2 <_svfprintf_r+0x46>
 800c40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c410:	900c      	str	r0, [sp, #48]	; 0x30
 800c412:	3301      	adds	r3, #1
 800c414:	d100      	bne.n	800c418 <_svfprintf_r+0x46c>
 800c416:	e206      	b.n	800c826 <_svfprintf_r+0x87a>
 800c418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c41a:	2b47      	cmp	r3, #71	; 0x47
 800c41c:	d114      	bne.n	800c448 <_svfprintf_r+0x49c>
 800c41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	d111      	bne.n	800c448 <_svfprintf_r+0x49c>
 800c424:	3301      	adds	r3, #1
 800c426:	9309      	str	r3, [sp, #36]	; 0x24
 800c428:	e00e      	b.n	800c448 <_svfprintf_r+0x49c>
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	7fefffff 	.word	0x7fefffff
 800c430:	08013254 	.word	0x08013254
 800c434:	08013258 	.word	0x08013258
 800c438:	0801325c 	.word	0x0801325c
 800c43c:	08013260 	.word	0x08013260
 800c440:	2300      	movs	r3, #0
 800c442:	930c      	str	r3, [sp, #48]	; 0x30
 800c444:	ab3f      	add	r3, sp, #252	; 0xfc
 800c446:	9308      	str	r3, [sp, #32]
 800c448:	2380      	movs	r3, #128	; 0x80
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	4333      	orrs	r3, r6
 800c44e:	931a      	str	r3, [sp, #104]	; 0x68
 800c450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c452:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c454:	2b00      	cmp	r3, #0
 800c456:	db00      	blt.n	800c45a <_svfprintf_r+0x4ae>
 800c458:	e1e7      	b.n	800c82a <_svfprintf_r+0x87e>
 800c45a:	2280      	movs	r2, #128	; 0x80
 800c45c:	0612      	lsls	r2, r2, #24
 800c45e:	4694      	mov	ip, r2
 800c460:	4463      	add	r3, ip
 800c462:	930e      	str	r3, [sp, #56]	; 0x38
 800c464:	232d      	movs	r3, #45	; 0x2d
 800c466:	9322      	str	r3, [sp, #136]	; 0x88
 800c468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c46a:	2b41      	cmp	r3, #65	; 0x41
 800c46c:	d000      	beq.n	800c470 <_svfprintf_r+0x4c4>
 800c46e:	e1f5      	b.n	800c85c <_svfprintf_r+0x8b0>
 800c470:	0028      	movs	r0, r5
 800c472:	aa26      	add	r2, sp, #152	; 0x98
 800c474:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c476:	f002 fb73 	bl	800eb60 <frexp>
 800c47a:	23ff      	movs	r3, #255	; 0xff
 800c47c:	2200      	movs	r2, #0
 800c47e:	059b      	lsls	r3, r3, #22
 800c480:	f7f5 f8f4 	bl	800166c <__aeabi_dmul>
 800c484:	2200      	movs	r2, #0
 800c486:	2300      	movs	r3, #0
 800c488:	0004      	movs	r4, r0
 800c48a:	000d      	movs	r5, r1
 800c48c:	f7f3 ffdc 	bl	8000448 <__aeabi_dcmpeq>
 800c490:	2800      	cmp	r0, #0
 800c492:	d001      	beq.n	800c498 <_svfprintf_r+0x4ec>
 800c494:	2301      	movs	r3, #1
 800c496:	9326      	str	r3, [sp, #152]	; 0x98
 800c498:	4bda      	ldr	r3, [pc, #872]	; (800c804 <_svfprintf_r+0x858>)
 800c49a:	9319      	str	r3, [sp, #100]	; 0x64
 800c49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c49e:	2b61      	cmp	r3, #97	; 0x61
 800c4a0:	d001      	beq.n	800c4a6 <_svfprintf_r+0x4fa>
 800c4a2:	4bd9      	ldr	r3, [pc, #868]	; (800c808 <_svfprintf_r+0x85c>)
 800c4a4:	9319      	str	r3, [sp, #100]	; 0x64
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	9311      	str	r3, [sp, #68]	; 0x44
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4bd6      	ldr	r3, [pc, #856]	; (800c80c <_svfprintf_r+0x860>)
 800c4b4:	0020      	movs	r0, r4
 800c4b6:	0029      	movs	r1, r5
 800c4b8:	f7f5 f8d8 	bl	800166c <__aeabi_dmul>
 800c4bc:	000d      	movs	r5, r1
 800c4be:	0004      	movs	r4, r0
 800c4c0:	f7f5 ff36 	bl	8002330 <__aeabi_d2iz>
 800c4c4:	9021      	str	r0, [sp, #132]	; 0x84
 800c4c6:	f7f5 ff69 	bl	800239c <__aeabi_i2d>
 800c4ca:	0002      	movs	r2, r0
 800c4cc:	000b      	movs	r3, r1
 800c4ce:	0020      	movs	r0, r4
 800c4d0:	0029      	movs	r1, r5
 800c4d2:	f7f5 fb8d 	bl	8001bf0 <__aeabi_dsub>
 800c4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4d8:	000d      	movs	r5, r1
 800c4da:	001a      	movs	r2, r3
 800c4dc:	3201      	adds	r2, #1
 800c4de:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c4e0:	920e      	str	r2, [sp, #56]	; 0x38
 800c4e2:	9223      	str	r2, [sp, #140]	; 0x8c
 800c4e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4e6:	0004      	movs	r4, r0
 800c4e8:	5c52      	ldrb	r2, [r2, r1]
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ee:	9320      	str	r3, [sp, #128]	; 0x80
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	d00a      	beq.n	800c50a <_svfprintf_r+0x55e>
 800c4f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	9311      	str	r3, [sp, #68]	; 0x44
 800c4fc:	0020      	movs	r0, r4
 800c4fe:	2300      	movs	r3, #0
 800c500:	0029      	movs	r1, r5
 800c502:	f7f3 ffa1 	bl	8000448 <__aeabi_dcmpeq>
 800c506:	2800      	cmp	r0, #0
 800c508:	d0d2      	beq.n	800c4b0 <_svfprintf_r+0x504>
 800c50a:	2200      	movs	r2, #0
 800c50c:	0020      	movs	r0, r4
 800c50e:	0029      	movs	r1, r5
 800c510:	4bbf      	ldr	r3, [pc, #764]	; (800c810 <_svfprintf_r+0x864>)
 800c512:	f7f3 ffb3 	bl	800047c <__aeabi_dcmpgt>
 800c516:	2800      	cmp	r0, #0
 800c518:	d10c      	bne.n	800c534 <_svfprintf_r+0x588>
 800c51a:	2200      	movs	r2, #0
 800c51c:	0020      	movs	r0, r4
 800c51e:	0029      	movs	r1, r5
 800c520:	4bbb      	ldr	r3, [pc, #748]	; (800c810 <_svfprintf_r+0x864>)
 800c522:	f7f3 ff91 	bl	8000448 <__aeabi_dcmpeq>
 800c526:	2800      	cmp	r0, #0
 800c528:	d100      	bne.n	800c52c <_svfprintf_r+0x580>
 800c52a:	e191      	b.n	800c850 <_svfprintf_r+0x8a4>
 800c52c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c52e:	07db      	lsls	r3, r3, #31
 800c530:	d400      	bmi.n	800c534 <_svfprintf_r+0x588>
 800c532:	e18d      	b.n	800c850 <_svfprintf_r+0x8a4>
 800c534:	2030      	movs	r0, #48	; 0x30
 800c536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c538:	932a      	str	r3, [sp, #168]	; 0xa8
 800c53a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c53c:	7bdb      	ldrb	r3, [r3, #15]
 800c53e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c540:	3a01      	subs	r2, #1
 800c542:	922a      	str	r2, [sp, #168]	; 0xa8
 800c544:	7811      	ldrb	r1, [r2, #0]
 800c546:	4299      	cmp	r1, r3
 800c548:	d100      	bne.n	800c54c <_svfprintf_r+0x5a0>
 800c54a:	e171      	b.n	800c830 <_svfprintf_r+0x884>
 800c54c:	1c4b      	adds	r3, r1, #1
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2939      	cmp	r1, #57	; 0x39
 800c552:	d101      	bne.n	800c558 <_svfprintf_r+0x5ac>
 800c554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c556:	7a9b      	ldrb	r3, [r3, #10]
 800c558:	7013      	strb	r3, [r2, #0]
 800c55a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c55c:	9a08      	ldr	r2, [sp, #32]
 800c55e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c560:	1a9b      	subs	r3, r3, r2
 800c562:	930e      	str	r3, [sp, #56]	; 0x38
 800c564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c566:	2b47      	cmp	r3, #71	; 0x47
 800c568:	d000      	beq.n	800c56c <_svfprintf_r+0x5c0>
 800c56a:	e1c4      	b.n	800c8f6 <_svfprintf_r+0x94a>
 800c56c:	1ceb      	adds	r3, r5, #3
 800c56e:	db03      	blt.n	800c578 <_svfprintf_r+0x5cc>
 800c570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c572:	42ab      	cmp	r3, r5
 800c574:	db00      	blt.n	800c578 <_svfprintf_r+0x5cc>
 800c576:	e1e6      	b.n	800c946 <_svfprintf_r+0x99a>
 800c578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c57a:	3b02      	subs	r3, #2
 800c57c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c57e:	223c      	movs	r2, #60	; 0x3c
 800c580:	466b      	mov	r3, sp
 800c582:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c584:	189b      	adds	r3, r3, r2
 800c586:	1e6c      	subs	r4, r5, #1
 800c588:	3a1c      	subs	r2, #28
 800c58a:	2000      	movs	r0, #0
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	9426      	str	r4, [sp, #152]	; 0x98
 800c590:	4391      	bics	r1, r2
 800c592:	2941      	cmp	r1, #65	; 0x41
 800c594:	d102      	bne.n	800c59c <_svfprintf_r+0x5f0>
 800c596:	330f      	adds	r3, #15
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	3001      	adds	r0, #1
 800c59c:	a928      	add	r1, sp, #160	; 0xa0
 800c59e:	700b      	strb	r3, [r1, #0]
 800c5a0:	232b      	movs	r3, #43	; 0x2b
 800c5a2:	2c00      	cmp	r4, #0
 800c5a4:	da02      	bge.n	800c5ac <_svfprintf_r+0x600>
 800c5a6:	2401      	movs	r4, #1
 800c5a8:	3302      	adds	r3, #2
 800c5aa:	1b64      	subs	r4, r4, r5
 800c5ac:	704b      	strb	r3, [r1, #1]
 800c5ae:	2c09      	cmp	r4, #9
 800c5b0:	dc00      	bgt.n	800c5b4 <_svfprintf_r+0x608>
 800c5b2:	e1ba      	b.n	800c92a <_svfprintf_r+0x97e>
 800c5b4:	2337      	movs	r3, #55	; 0x37
 800c5b6:	250a      	movs	r5, #10
 800c5b8:	aa1e      	add	r2, sp, #120	; 0x78
 800c5ba:	189b      	adds	r3, r3, r2
 800c5bc:	9310      	str	r3, [sp, #64]	; 0x40
 800c5be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5c0:	0020      	movs	r0, r4
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c4:	0029      	movs	r1, r5
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	9310      	str	r3, [sp, #64]	; 0x40
 800c5ca:	f7f3 ff27 	bl	800041c <__aeabi_idivmod>
 800c5ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5d0:	3130      	adds	r1, #48	; 0x30
 800c5d2:	7019      	strb	r1, [r3, #0]
 800c5d4:	0020      	movs	r0, r4
 800c5d6:	0029      	movs	r1, r5
 800c5d8:	9411      	str	r4, [sp, #68]	; 0x44
 800c5da:	f7f3 fe39 	bl	8000250 <__divsi3>
 800c5de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5e0:	0004      	movs	r4, r0
 800c5e2:	2b63      	cmp	r3, #99	; 0x63
 800c5e4:	dceb      	bgt.n	800c5be <_svfprintf_r+0x612>
 800c5e6:	222a      	movs	r2, #42	; 0x2a
 800c5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ea:	a81e      	add	r0, sp, #120	; 0x78
 800c5ec:	1e99      	subs	r1, r3, #2
 800c5ee:	1812      	adds	r2, r2, r0
 800c5f0:	2037      	movs	r0, #55	; 0x37
 800c5f2:	000b      	movs	r3, r1
 800c5f4:	3430      	adds	r4, #48	; 0x30
 800c5f6:	700c      	strb	r4, [r1, #0]
 800c5f8:	ac1e      	add	r4, sp, #120	; 0x78
 800c5fa:	1900      	adds	r0, r0, r4
 800c5fc:	4283      	cmp	r3, r0
 800c5fe:	d200      	bcs.n	800c602 <_svfprintf_r+0x656>
 800c600:	e18e      	b.n	800c920 <_svfprintf_r+0x974>
 800c602:	2300      	movs	r3, #0
 800c604:	4281      	cmp	r1, r0
 800c606:	d804      	bhi.n	800c612 <_svfprintf_r+0x666>
 800c608:	aa1e      	add	r2, sp, #120	; 0x78
 800c60a:	3339      	adds	r3, #57	; 0x39
 800c60c:	189b      	adds	r3, r3, r2
 800c60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	222a      	movs	r2, #42	; 0x2a
 800c614:	a91e      	add	r1, sp, #120	; 0x78
 800c616:	1852      	adds	r2, r2, r1
 800c618:	18d3      	adds	r3, r2, r3
 800c61a:	aa28      	add	r2, sp, #160	; 0xa0
 800c61c:	1a9b      	subs	r3, r3, r2
 800c61e:	931e      	str	r3, [sp, #120]	; 0x78
 800c620:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c624:	4694      	mov	ip, r2
 800c626:	4463      	add	r3, ip
 800c628:	9309      	str	r3, [sp, #36]	; 0x24
 800c62a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	dc01      	bgt.n	800c634 <_svfprintf_r+0x688>
 800c630:	07f3      	lsls	r3, r6, #31
 800c632:	d504      	bpl.n	800c63e <_svfprintf_r+0x692>
 800c634:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c638:	4694      	mov	ip, r2
 800c63a:	4463      	add	r3, ip
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	2280      	movs	r2, #128	; 0x80
 800c640:	4b74      	ldr	r3, [pc, #464]	; (800c814 <_svfprintf_r+0x868>)
 800c642:	0052      	lsls	r2, r2, #1
 800c644:	4033      	ands	r3, r6
 800c646:	431a      	orrs	r2, r3
 800c648:	2300      	movs	r3, #0
 800c64a:	001d      	movs	r5, r3
 800c64c:	921a      	str	r2, [sp, #104]	; 0x68
 800c64e:	9310      	str	r3, [sp, #64]	; 0x40
 800c650:	9311      	str	r3, [sp, #68]	; 0x44
 800c652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c654:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c656:	9319      	str	r3, [sp, #100]	; 0x64
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d006      	beq.n	800c66a <_svfprintf_r+0x6be>
 800c65c:	231b      	movs	r3, #27
 800c65e:	aa1e      	add	r2, sp, #120	; 0x78
 800c660:	189b      	adds	r3, r3, r2
 800c662:	222d      	movs	r2, #45	; 0x2d
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	2300      	movs	r3, #0
 800c668:	9319      	str	r3, [sp, #100]	; 0x64
 800c66a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c66e:	931a      	str	r3, [sp, #104]	; 0x68
 800c670:	4293      	cmp	r3, r2
 800c672:	da00      	bge.n	800c676 <_svfprintf_r+0x6ca>
 800c674:	921a      	str	r2, [sp, #104]	; 0x68
 800c676:	231b      	movs	r3, #27
 800c678:	aa1e      	add	r2, sp, #120	; 0x78
 800c67a:	189b      	adds	r3, r3, r2
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	1e5a      	subs	r2, r3, #1
 800c680:	4193      	sbcs	r3, r2
 800c682:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c684:	18d3      	adds	r3, r2, r3
 800c686:	931a      	str	r3, [sp, #104]	; 0x68
 800c688:	0032      	movs	r2, r6
 800c68a:	2302      	movs	r3, #2
 800c68c:	401a      	ands	r2, r3
 800c68e:	9220      	str	r2, [sp, #128]	; 0x80
 800c690:	421e      	tst	r6, r3
 800c692:	d002      	beq.n	800c69a <_svfprintf_r+0x6ee>
 800c694:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c696:	3302      	adds	r3, #2
 800c698:	931a      	str	r3, [sp, #104]	; 0x68
 800c69a:	2384      	movs	r3, #132	; 0x84
 800c69c:	0032      	movs	r2, r6
 800c69e:	401a      	ands	r2, r3
 800c6a0:	9221      	str	r2, [sp, #132]	; 0x84
 800c6a2:	421e      	tst	r6, r3
 800c6a4:	d11f      	bne.n	800c6e6 <_svfprintf_r+0x73a>
 800c6a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c6a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6aa:	1a9c      	subs	r4, r3, r2
 800c6ac:	2c00      	cmp	r4, #0
 800c6ae:	dd1a      	ble.n	800c6e6 <_svfprintf_r+0x73a>
 800c6b0:	0039      	movs	r1, r7
 800c6b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c6b4:	4858      	ldr	r0, [pc, #352]	; (800c818 <_svfprintf_r+0x86c>)
 800c6b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	3108      	adds	r1, #8
 800c6bc:	6038      	str	r0, [r7, #0]
 800c6be:	2c10      	cmp	r4, #16
 800c6c0:	dd00      	ble.n	800c6c4 <_svfprintf_r+0x718>
 800c6c2:	e31c      	b.n	800ccfe <_svfprintf_r+0xd52>
 800c6c4:	607c      	str	r4, [r7, #4]
 800c6c6:	18a4      	adds	r4, r4, r2
 800c6c8:	000f      	movs	r7, r1
 800c6ca:	942e      	str	r4, [sp, #184]	; 0xb8
 800c6cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800c6ce:	2b07      	cmp	r3, #7
 800c6d0:	dd09      	ble.n	800c6e6 <_svfprintf_r+0x73a>
 800c6d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800c6d8:	f003 fd7e 	bl	80101d8 <__ssprint_r>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d001      	beq.n	800c6e4 <_svfprintf_r+0x738>
 800c6e0:	f000 fe43 	bl	800d36a <_svfprintf_r+0x13be>
 800c6e4:	af2f      	add	r7, sp, #188	; 0xbc
 800c6e6:	221b      	movs	r2, #27
 800c6e8:	a91e      	add	r1, sp, #120	; 0x78
 800c6ea:	1852      	adds	r2, r2, r1
 800c6ec:	7811      	ldrb	r1, [r2, #0]
 800c6ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	d014      	beq.n	800c71e <_svfprintf_r+0x772>
 800c6f4:	603a      	str	r2, [r7, #0]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	189b      	adds	r3, r3, r2
 800c6fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800c6fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	189b      	adds	r3, r3, r2
 800c702:	932d      	str	r3, [sp, #180]	; 0xb4
 800c704:	3708      	adds	r7, #8
 800c706:	2b07      	cmp	r3, #7
 800c708:	dd09      	ble.n	800c71e <_svfprintf_r+0x772>
 800c70a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c70c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c70e:	aa2c      	add	r2, sp, #176	; 0xb0
 800c710:	f003 fd62 	bl	80101d8 <__ssprint_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	d001      	beq.n	800c71c <_svfprintf_r+0x770>
 800c718:	f000 fe27 	bl	800d36a <_svfprintf_r+0x13be>
 800c71c:	af2f      	add	r7, sp, #188	; 0xbc
 800c71e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c720:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c722:	2a00      	cmp	r2, #0
 800c724:	d015      	beq.n	800c752 <_svfprintf_r+0x7a6>
 800c726:	aa25      	add	r2, sp, #148	; 0x94
 800c728:	603a      	str	r2, [r7, #0]
 800c72a:	2202      	movs	r2, #2
 800c72c:	189b      	adds	r3, r3, r2
 800c72e:	932e      	str	r3, [sp, #184]	; 0xb8
 800c730:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	3301      	adds	r3, #1
 800c736:	932d      	str	r3, [sp, #180]	; 0xb4
 800c738:	3708      	adds	r7, #8
 800c73a:	2b07      	cmp	r3, #7
 800c73c:	dd09      	ble.n	800c752 <_svfprintf_r+0x7a6>
 800c73e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c740:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c742:	aa2c      	add	r2, sp, #176	; 0xb0
 800c744:	f003 fd48 	bl	80101d8 <__ssprint_r>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d001      	beq.n	800c750 <_svfprintf_r+0x7a4>
 800c74c:	f000 fe0d 	bl	800d36a <_svfprintf_r+0x13be>
 800c750:	af2f      	add	r7, sp, #188	; 0xbc
 800c752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c754:	2b80      	cmp	r3, #128	; 0x80
 800c756:	d11f      	bne.n	800c798 <_svfprintf_r+0x7ec>
 800c758:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c75a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c75c:	1a9c      	subs	r4, r3, r2
 800c75e:	2c00      	cmp	r4, #0
 800c760:	dd1a      	ble.n	800c798 <_svfprintf_r+0x7ec>
 800c762:	0039      	movs	r1, r7
 800c764:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c766:	482d      	ldr	r0, [pc, #180]	; (800c81c <_svfprintf_r+0x870>)
 800c768:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c76a:	3301      	adds	r3, #1
 800c76c:	3108      	adds	r1, #8
 800c76e:	6038      	str	r0, [r7, #0]
 800c770:	2c10      	cmp	r4, #16
 800c772:	dd00      	ble.n	800c776 <_svfprintf_r+0x7ca>
 800c774:	e2d6      	b.n	800cd24 <_svfprintf_r+0xd78>
 800c776:	607c      	str	r4, [r7, #4]
 800c778:	18a4      	adds	r4, r4, r2
 800c77a:	000f      	movs	r7, r1
 800c77c:	942e      	str	r4, [sp, #184]	; 0xb8
 800c77e:	932d      	str	r3, [sp, #180]	; 0xb4
 800c780:	2b07      	cmp	r3, #7
 800c782:	dd09      	ble.n	800c798 <_svfprintf_r+0x7ec>
 800c784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c786:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c788:	aa2c      	add	r2, sp, #176	; 0xb0
 800c78a:	f003 fd25 	bl	80101d8 <__ssprint_r>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d001      	beq.n	800c796 <_svfprintf_r+0x7ea>
 800c792:	f000 fdea 	bl	800d36a <_svfprintf_r+0x13be>
 800c796:	af2f      	add	r7, sp, #188	; 0xbc
 800c798:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c79c:	1a9c      	subs	r4, r3, r2
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	dd1a      	ble.n	800c7d8 <_svfprintf_r+0x82c>
 800c7a2:	0039      	movs	r1, r7
 800c7a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c7a6:	481d      	ldr	r0, [pc, #116]	; (800c81c <_svfprintf_r+0x870>)
 800c7a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	3108      	adds	r1, #8
 800c7ae:	6038      	str	r0, [r7, #0]
 800c7b0:	2c10      	cmp	r4, #16
 800c7b2:	dd00      	ble.n	800c7b6 <_svfprintf_r+0x80a>
 800c7b4:	e2c9      	b.n	800cd4a <_svfprintf_r+0xd9e>
 800c7b6:	18a2      	adds	r2, r4, r2
 800c7b8:	607c      	str	r4, [r7, #4]
 800c7ba:	922e      	str	r2, [sp, #184]	; 0xb8
 800c7bc:	000f      	movs	r7, r1
 800c7be:	932d      	str	r3, [sp, #180]	; 0xb4
 800c7c0:	2b07      	cmp	r3, #7
 800c7c2:	dd09      	ble.n	800c7d8 <_svfprintf_r+0x82c>
 800c7c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800c7ca:	f003 fd05 	bl	80101d8 <__ssprint_r>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d001      	beq.n	800c7d6 <_svfprintf_r+0x82a>
 800c7d2:	f000 fdca 	bl	800d36a <_svfprintf_r+0x13be>
 800c7d6:	af2f      	add	r7, sp, #188	; 0xbc
 800c7d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c7da:	9319      	str	r3, [sp, #100]	; 0x64
 800c7dc:	05f3      	lsls	r3, r6, #23
 800c7de:	d500      	bpl.n	800c7e2 <_svfprintf_r+0x836>
 800c7e0:	e2ce      	b.n	800cd80 <_svfprintf_r+0xdd4>
 800c7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	4694      	mov	ip, r2
 800c7e8:	603b      	str	r3, [r7, #0]
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7f0:	4463      	add	r3, ip
 800c7f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800c7f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800c7fa:	2b07      	cmp	r3, #7
 800c7fc:	dd00      	ble.n	800c800 <_svfprintf_r+0x854>
 800c7fe:	e3a3      	b.n	800cf48 <_svfprintf_r+0xf9c>
 800c800:	3708      	adds	r7, #8
 800c802:	e301      	b.n	800ce08 <_svfprintf_r+0xe5c>
 800c804:	08013264 	.word	0x08013264
 800c808:	08013275 	.word	0x08013275
 800c80c:	40300000 	.word	0x40300000
 800c810:	3fe00000 	.word	0x3fe00000
 800c814:	fffffbff 	.word	0xfffffbff
 800c818:	08013288 	.word	0x08013288
 800c81c:	08013298 	.word	0x08013298
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	930c      	str	r3, [sp, #48]	; 0x30
 800c824:	e610      	b.n	800c448 <_svfprintf_r+0x49c>
 800c826:	2306      	movs	r3, #6
 800c828:	e5fd      	b.n	800c426 <_svfprintf_r+0x47a>
 800c82a:	930e      	str	r3, [sp, #56]	; 0x38
 800c82c:	2300      	movs	r3, #0
 800c82e:	e61a      	b.n	800c466 <_svfprintf_r+0x4ba>
 800c830:	7010      	strb	r0, [r2, #0]
 800c832:	e684      	b.n	800c53e <_svfprintf_r+0x592>
 800c834:	7018      	strb	r0, [r3, #0]
 800c836:	3301      	adds	r3, #1
 800c838:	1aca      	subs	r2, r1, r3
 800c83a:	d5fb      	bpl.n	800c834 <_svfprintf_r+0x888>
 800c83c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c83e:	2300      	movs	r3, #0
 800c840:	3201      	adds	r2, #1
 800c842:	db01      	blt.n	800c848 <_svfprintf_r+0x89c>
 800c844:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c846:	3301      	adds	r3, #1
 800c848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c84a:	18d3      	adds	r3, r2, r3
 800c84c:	9323      	str	r3, [sp, #140]	; 0x8c
 800c84e:	e684      	b.n	800c55a <_svfprintf_r+0x5ae>
 800c850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c852:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c854:	2030      	movs	r0, #48	; 0x30
 800c856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c858:	1851      	adds	r1, r2, r1
 800c85a:	e7ed      	b.n	800c838 <_svfprintf_r+0x88c>
 800c85c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c85e:	2303      	movs	r3, #3
 800c860:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c862:	2a46      	cmp	r2, #70	; 0x46
 800c864:	d006      	beq.n	800c874 <_svfprintf_r+0x8c8>
 800c866:	0014      	movs	r4, r2
 800c868:	3c45      	subs	r4, #69	; 0x45
 800c86a:	4262      	negs	r2, r4
 800c86c:	4154      	adcs	r4, r2
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	3b01      	subs	r3, #1
 800c872:	1914      	adds	r4, r2, r4
 800c874:	aa2a      	add	r2, sp, #168	; 0xa8
 800c876:	9204      	str	r2, [sp, #16]
 800c878:	aa27      	add	r2, sp, #156	; 0x9c
 800c87a:	9203      	str	r2, [sp, #12]
 800c87c:	aa26      	add	r2, sp, #152	; 0x98
 800c87e:	9202      	str	r2, [sp, #8]
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	002a      	movs	r2, r5
 800c884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c886:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c888:	9401      	str	r4, [sp, #4]
 800c88a:	f002 fad7 	bl	800ee3c <_dtoa_r>
 800c88e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c890:	9008      	str	r0, [sp, #32]
 800c892:	2b47      	cmp	r3, #71	; 0x47
 800c894:	d103      	bne.n	800c89e <_svfprintf_r+0x8f2>
 800c896:	07f3      	lsls	r3, r6, #31
 800c898:	d401      	bmi.n	800c89e <_svfprintf_r+0x8f2>
 800c89a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c89c:	e65e      	b.n	800c55c <_svfprintf_r+0x5b0>
 800c89e:	9b08      	ldr	r3, [sp, #32]
 800c8a0:	191b      	adds	r3, r3, r4
 800c8a2:	9311      	str	r3, [sp, #68]	; 0x44
 800c8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8a6:	2b46      	cmp	r3, #70	; 0x46
 800c8a8:	d112      	bne.n	800c8d0 <_svfprintf_r+0x924>
 800c8aa:	9b08      	ldr	r3, [sp, #32]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2b30      	cmp	r3, #48	; 0x30
 800c8b0:	d10a      	bne.n	800c8c8 <_svfprintf_r+0x91c>
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	0028      	movs	r0, r5
 800c8b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c8ba:	f7f3 fdc5 	bl	8000448 <__aeabi_dcmpeq>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d102      	bne.n	800c8c8 <_svfprintf_r+0x91c>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	1b1b      	subs	r3, r3, r4
 800c8c6:	9326      	str	r3, [sp, #152]	; 0x98
 800c8c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c8ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8cc:	18d3      	adds	r3, r2, r3
 800c8ce:	9311      	str	r3, [sp, #68]	; 0x44
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	0028      	movs	r0, r5
 800c8d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c8d8:	f7f3 fdb6 	bl	8000448 <__aeabi_dcmpeq>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d001      	beq.n	800c8e4 <_svfprintf_r+0x938>
 800c8e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8e2:	932a      	str	r3, [sp, #168]	; 0xa8
 800c8e4:	2230      	movs	r2, #48	; 0x30
 800c8e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c8e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	d9d5      	bls.n	800c89a <_svfprintf_r+0x8ee>
 800c8ee:	1c59      	adds	r1, r3, #1
 800c8f0:	912a      	str	r1, [sp, #168]	; 0xa8
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	e7f7      	b.n	800c8e6 <_svfprintf_r+0x93a>
 800c8f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8f8:	2b46      	cmp	r3, #70	; 0x46
 800c8fa:	d000      	beq.n	800c8fe <_svfprintf_r+0x952>
 800c8fc:	e63f      	b.n	800c57e <_svfprintf_r+0x5d2>
 800c8fe:	2201      	movs	r2, #1
 800c900:	0033      	movs	r3, r6
 800c902:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c904:	4013      	ands	r3, r2
 800c906:	430b      	orrs	r3, r1
 800c908:	2d00      	cmp	r5, #0
 800c90a:	dd2c      	ble.n	800c966 <_svfprintf_r+0x9ba>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d046      	beq.n	800c99e <_svfprintf_r+0x9f2>
 800c910:	000a      	movs	r2, r1
 800c912:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c914:	18eb      	adds	r3, r5, r3
 800c916:	18d3      	adds	r3, r2, r3
 800c918:	9309      	str	r3, [sp, #36]	; 0x24
 800c91a:	2366      	movs	r3, #102	; 0x66
 800c91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c91e:	e030      	b.n	800c982 <_svfprintf_r+0x9d6>
 800c920:	781c      	ldrb	r4, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	7014      	strb	r4, [r2, #0]
 800c926:	3201      	adds	r2, #1
 800c928:	e668      	b.n	800c5fc <_svfprintf_r+0x650>
 800c92a:	222a      	movs	r2, #42	; 0x2a
 800c92c:	ab1e      	add	r3, sp, #120	; 0x78
 800c92e:	18d2      	adds	r2, r2, r3
 800c930:	2800      	cmp	r0, #0
 800c932:	d104      	bne.n	800c93e <_svfprintf_r+0x992>
 800c934:	2330      	movs	r3, #48	; 0x30
 800c936:	222b      	movs	r2, #43	; 0x2b
 800c938:	708b      	strb	r3, [r1, #2]
 800c93a:	ab1e      	add	r3, sp, #120	; 0x78
 800c93c:	18d2      	adds	r2, r2, r3
 800c93e:	3430      	adds	r4, #48	; 0x30
 800c940:	1c53      	adds	r3, r2, #1
 800c942:	7014      	strb	r4, [r2, #0]
 800c944:	e669      	b.n	800c61a <_svfprintf_r+0x66e>
 800c946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c948:	42ab      	cmp	r3, r5
 800c94a:	dd12      	ble.n	800c972 <_svfprintf_r+0x9c6>
 800c94c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c950:	4694      	mov	ip, r2
 800c952:	4463      	add	r3, ip
 800c954:	9309      	str	r3, [sp, #36]	; 0x24
 800c956:	2367      	movs	r3, #103	; 0x67
 800c958:	930f      	str	r3, [sp, #60]	; 0x3c
 800c95a:	2d00      	cmp	r5, #0
 800c95c:	dc11      	bgt.n	800c982 <_svfprintf_r+0x9d6>
 800c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c960:	1b5b      	subs	r3, r3, r5
 800c962:	3301      	adds	r3, #1
 800c964:	e00c      	b.n	800c980 <_svfprintf_r+0x9d4>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d01b      	beq.n	800c9a2 <_svfprintf_r+0x9f6>
 800c96a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c96c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c96e:	3301      	adds	r3, #1
 800c970:	e7d1      	b.n	800c916 <_svfprintf_r+0x96a>
 800c972:	2367      	movs	r3, #103	; 0x67
 800c974:	9509      	str	r5, [sp, #36]	; 0x24
 800c976:	930f      	str	r3, [sp, #60]	; 0x3c
 800c978:	07f3      	lsls	r3, r6, #31
 800c97a:	d502      	bpl.n	800c982 <_svfprintf_r+0x9d6>
 800c97c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c97e:	18eb      	adds	r3, r5, r3
 800c980:	9309      	str	r3, [sp, #36]	; 0x24
 800c982:	2380      	movs	r3, #128	; 0x80
 800c984:	0032      	movs	r2, r6
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	401a      	ands	r2, r3
 800c98a:	9211      	str	r2, [sp, #68]	; 0x44
 800c98c:	2200      	movs	r2, #0
 800c98e:	9210      	str	r2, [sp, #64]	; 0x40
 800c990:	421e      	tst	r6, r3
 800c992:	d100      	bne.n	800c996 <_svfprintf_r+0x9ea>
 800c994:	e65d      	b.n	800c652 <_svfprintf_r+0x6a6>
 800c996:	4295      	cmp	r5, r2
 800c998:	dc25      	bgt.n	800c9e6 <_svfprintf_r+0xa3a>
 800c99a:	9211      	str	r2, [sp, #68]	; 0x44
 800c99c:	e659      	b.n	800c652 <_svfprintf_r+0x6a6>
 800c99e:	9509      	str	r5, [sp, #36]	; 0x24
 800c9a0:	e7bb      	b.n	800c91a <_svfprintf_r+0x96e>
 800c9a2:	2366      	movs	r3, #102	; 0x66
 800c9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a8:	e7eb      	b.n	800c982 <_svfprintf_r+0x9d6>
 800c9aa:	42ab      	cmp	r3, r5
 800c9ac:	da0e      	bge.n	800c9cc <_svfprintf_r+0xa20>
 800c9ae:	1aed      	subs	r5, r5, r3
 800c9b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9b2:	785b      	ldrb	r3, [r3, #1]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d012      	beq.n	800c9de <_svfprintf_r+0xa32>
 800c9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	9311      	str	r3, [sp, #68]	; 0x44
 800c9be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	9312      	str	r3, [sp, #72]	; 0x48
 800c9c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2bff      	cmp	r3, #255	; 0xff
 800c9ca:	d1ee      	bne.n	800c9aa <_svfprintf_r+0x9fe>
 800c9cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9d0:	189b      	adds	r3, r3, r2
 800c9d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c9d4:	4353      	muls	r3, r2
 800c9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d8:	189b      	adds	r3, r3, r2
 800c9da:	9309      	str	r3, [sp, #36]	; 0x24
 800c9dc:	e639      	b.n	800c652 <_svfprintf_r+0x6a6>
 800c9de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	9310      	str	r3, [sp, #64]	; 0x40
 800c9e4:	e7ee      	b.n	800c9c4 <_svfprintf_r+0xa18>
 800c9e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c9ea:	e7eb      	b.n	800c9c4 <_svfprintf_r+0xa18>
 800c9ec:	1d23      	adds	r3, r4, #4
 800c9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c9f0:	06b3      	lsls	r3, r6, #26
 800c9f2:	d509      	bpl.n	800ca08 <_svfprintf_r+0xa5c>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	17d2      	asrs	r2, r2, #31
 800c9fc:	605a      	str	r2, [r3, #4]
 800c9fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ca02:	9308      	str	r3, [sp, #32]
 800ca04:	f7ff fb0d 	bl	800c022 <_svfprintf_r+0x76>
 800ca08:	06f3      	lsls	r3, r6, #27
 800ca0a:	d503      	bpl.n	800ca14 <_svfprintf_r+0xa68>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	e7f4      	b.n	800c9fe <_svfprintf_r+0xa52>
 800ca14:	0673      	lsls	r3, r6, #25
 800ca16:	d503      	bpl.n	800ca20 <_svfprintf_r+0xa74>
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca1c:	801a      	strh	r2, [r3, #0]
 800ca1e:	e7ee      	b.n	800c9fe <_svfprintf_r+0xa52>
 800ca20:	05b6      	lsls	r6, r6, #22
 800ca22:	d5f3      	bpl.n	800ca0c <_svfprintf_r+0xa60>
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	e7e8      	b.n	800c9fe <_svfprintf_r+0xa52>
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	431e      	orrs	r6, r3
 800ca30:	2320      	movs	r3, #32
 800ca32:	0030      	movs	r0, r6
 800ca34:	4018      	ands	r0, r3
 800ca36:	421e      	tst	r6, r3
 800ca38:	d00f      	beq.n	800ca5a <_svfprintf_r+0xaae>
 800ca3a:	3b19      	subs	r3, #25
 800ca3c:	3407      	adds	r4, #7
 800ca3e:	439c      	bics	r4, r3
 800ca40:	0022      	movs	r2, r4
 800ca42:	ca18      	ldmia	r2!, {r3, r4}
 800ca44:	9306      	str	r3, [sp, #24]
 800ca46:	9407      	str	r4, [sp, #28]
 800ca48:	920d      	str	r2, [sp, #52]	; 0x34
 800ca4a:	4bc9      	ldr	r3, [pc, #804]	; (800cd70 <_svfprintf_r+0xdc4>)
 800ca4c:	401e      	ands	r6, r3
 800ca4e:	2300      	movs	r3, #0
 800ca50:	221b      	movs	r2, #27
 800ca52:	a91e      	add	r1, sp, #120	; 0x78
 800ca54:	1852      	adds	r2, r2, r1
 800ca56:	2100      	movs	r1, #0
 800ca58:	e430      	b.n	800c2bc <_svfprintf_r+0x310>
 800ca5a:	0022      	movs	r2, r4
 800ca5c:	ca08      	ldmia	r2!, {r3}
 800ca5e:	0031      	movs	r1, r6
 800ca60:	920d      	str	r2, [sp, #52]	; 0x34
 800ca62:	2210      	movs	r2, #16
 800ca64:	4011      	ands	r1, r2
 800ca66:	4216      	tst	r6, r2
 800ca68:	d002      	beq.n	800ca70 <_svfprintf_r+0xac4>
 800ca6a:	9306      	str	r3, [sp, #24]
 800ca6c:	9007      	str	r0, [sp, #28]
 800ca6e:	e7ec      	b.n	800ca4a <_svfprintf_r+0xa9e>
 800ca70:	2240      	movs	r2, #64	; 0x40
 800ca72:	0030      	movs	r0, r6
 800ca74:	4010      	ands	r0, r2
 800ca76:	4216      	tst	r6, r2
 800ca78:	d003      	beq.n	800ca82 <_svfprintf_r+0xad6>
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	9306      	str	r3, [sp, #24]
 800ca7e:	9107      	str	r1, [sp, #28]
 800ca80:	e7e3      	b.n	800ca4a <_svfprintf_r+0xa9e>
 800ca82:	2280      	movs	r2, #128	; 0x80
 800ca84:	0031      	movs	r1, r6
 800ca86:	0092      	lsls	r2, r2, #2
 800ca88:	4011      	ands	r1, r2
 800ca8a:	4216      	tst	r6, r2
 800ca8c:	d0f6      	beq.n	800ca7c <_svfprintf_r+0xad0>
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	e7eb      	b.n	800ca6a <_svfprintf_r+0xabe>
 800ca92:	0023      	movs	r3, r4
 800ca94:	cb04      	ldmia	r3!, {r2}
 800ca96:	49b7      	ldr	r1, [pc, #732]	; (800cd74 <_svfprintf_r+0xdc8>)
 800ca98:	9206      	str	r2, [sp, #24]
 800ca9a:	aa25      	add	r2, sp, #148	; 0x94
 800ca9c:	8011      	strh	r1, [r2, #0]
 800ca9e:	4ab6      	ldr	r2, [pc, #728]	; (800cd78 <_svfprintf_r+0xdcc>)
 800caa0:	930d      	str	r3, [sp, #52]	; 0x34
 800caa2:	2300      	movs	r3, #0
 800caa4:	921f      	str	r2, [sp, #124]	; 0x7c
 800caa6:	2278      	movs	r2, #120	; 0x78
 800caa8:	9307      	str	r3, [sp, #28]
 800caaa:	3302      	adds	r3, #2
 800caac:	431e      	orrs	r6, r3
 800caae:	920f      	str	r2, [sp, #60]	; 0x3c
 800cab0:	e7ce      	b.n	800ca50 <_svfprintf_r+0xaa4>
 800cab2:	0023      	movs	r3, r4
 800cab4:	cb04      	ldmia	r3!, {r2}
 800cab6:	2400      	movs	r4, #0
 800cab8:	930d      	str	r3, [sp, #52]	; 0x34
 800caba:	231b      	movs	r3, #27
 800cabc:	9208      	str	r2, [sp, #32]
 800cabe:	aa1e      	add	r2, sp, #120	; 0x78
 800cac0:	189b      	adds	r3, r3, r2
 800cac2:	701c      	strb	r4, [r3, #0]
 800cac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac6:	3301      	adds	r3, #1
 800cac8:	d00e      	beq.n	800cae8 <_svfprintf_r+0xb3c>
 800caca:	0021      	movs	r1, r4
 800cacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cace:	9808      	ldr	r0, [sp, #32]
 800cad0:	f002 f83a 	bl	800eb48 <memchr>
 800cad4:	900c      	str	r0, [sp, #48]	; 0x30
 800cad6:	42a0      	cmp	r0, r4
 800cad8:	d100      	bne.n	800cadc <_svfprintf_r+0xb30>
 800cada:	e10d      	b.n	800ccf8 <_svfprintf_r+0xd4c>
 800cadc:	9a08      	ldr	r2, [sp, #32]
 800cade:	1a83      	subs	r3, r0, r2
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	0023      	movs	r3, r4
 800cae4:	940c      	str	r4, [sp, #48]	; 0x30
 800cae6:	e44e      	b.n	800c386 <_svfprintf_r+0x3da>
 800cae8:	9808      	ldr	r0, [sp, #32]
 800caea:	f7f3 fb0b 	bl	8000104 <strlen>
 800caee:	9009      	str	r0, [sp, #36]	; 0x24
 800caf0:	e7f7      	b.n	800cae2 <_svfprintf_r+0xb36>
 800caf2:	2310      	movs	r3, #16
 800caf4:	431e      	orrs	r6, r3
 800caf6:	2320      	movs	r3, #32
 800caf8:	0030      	movs	r0, r6
 800cafa:	4018      	ands	r0, r3
 800cafc:	421e      	tst	r6, r3
 800cafe:	d009      	beq.n	800cb14 <_svfprintf_r+0xb68>
 800cb00:	3b19      	subs	r3, #25
 800cb02:	3407      	adds	r4, #7
 800cb04:	439c      	bics	r4, r3
 800cb06:	0022      	movs	r2, r4
 800cb08:	ca18      	ldmia	r2!, {r3, r4}
 800cb0a:	9306      	str	r3, [sp, #24]
 800cb0c:	9407      	str	r4, [sp, #28]
 800cb0e:	920d      	str	r2, [sp, #52]	; 0x34
 800cb10:	2301      	movs	r3, #1
 800cb12:	e79d      	b.n	800ca50 <_svfprintf_r+0xaa4>
 800cb14:	0023      	movs	r3, r4
 800cb16:	cb04      	ldmia	r3!, {r2}
 800cb18:	0031      	movs	r1, r6
 800cb1a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	4019      	ands	r1, r3
 800cb20:	421e      	tst	r6, r3
 800cb22:	d003      	beq.n	800cb2c <_svfprintf_r+0xb80>
 800cb24:	9206      	str	r2, [sp, #24]
 800cb26:	9007      	str	r0, [sp, #28]
 800cb28:	3b0f      	subs	r3, #15
 800cb2a:	e791      	b.n	800ca50 <_svfprintf_r+0xaa4>
 800cb2c:	2340      	movs	r3, #64	; 0x40
 800cb2e:	0030      	movs	r0, r6
 800cb30:	4018      	ands	r0, r3
 800cb32:	421e      	tst	r6, r3
 800cb34:	d003      	beq.n	800cb3e <_svfprintf_r+0xb92>
 800cb36:	b293      	uxth	r3, r2
 800cb38:	9306      	str	r3, [sp, #24]
 800cb3a:	9107      	str	r1, [sp, #28]
 800cb3c:	e7e8      	b.n	800cb10 <_svfprintf_r+0xb64>
 800cb3e:	2380      	movs	r3, #128	; 0x80
 800cb40:	0031      	movs	r1, r6
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4019      	ands	r1, r3
 800cb46:	421e      	tst	r6, r3
 800cb48:	d003      	beq.n	800cb52 <_svfprintf_r+0xba6>
 800cb4a:	b2d3      	uxtb	r3, r2
 800cb4c:	9306      	str	r3, [sp, #24]
 800cb4e:	9007      	str	r0, [sp, #28]
 800cb50:	e7de      	b.n	800cb10 <_svfprintf_r+0xb64>
 800cb52:	9206      	str	r2, [sp, #24]
 800cb54:	e7f1      	b.n	800cb3a <_svfprintf_r+0xb8e>
 800cb56:	4b89      	ldr	r3, [pc, #548]	; (800cd7c <_svfprintf_r+0xdd0>)
 800cb58:	0030      	movs	r0, r6
 800cb5a:	931f      	str	r3, [sp, #124]	; 0x7c
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	4018      	ands	r0, r3
 800cb60:	421e      	tst	r6, r3
 800cb62:	d01a      	beq.n	800cb9a <_svfprintf_r+0xbee>
 800cb64:	3b19      	subs	r3, #25
 800cb66:	3407      	adds	r4, #7
 800cb68:	439c      	bics	r4, r3
 800cb6a:	0022      	movs	r2, r4
 800cb6c:	ca18      	ldmia	r2!, {r3, r4}
 800cb6e:	9306      	str	r3, [sp, #24]
 800cb70:	9407      	str	r4, [sp, #28]
 800cb72:	920d      	str	r2, [sp, #52]	; 0x34
 800cb74:	07f3      	lsls	r3, r6, #31
 800cb76:	d50a      	bpl.n	800cb8e <_svfprintf_r+0xbe2>
 800cb78:	9b06      	ldr	r3, [sp, #24]
 800cb7a:	9a07      	ldr	r2, [sp, #28]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	d006      	beq.n	800cb8e <_svfprintf_r+0xbe2>
 800cb80:	2230      	movs	r2, #48	; 0x30
 800cb82:	ab25      	add	r3, sp, #148	; 0x94
 800cb84:	701a      	strb	r2, [r3, #0]
 800cb86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb88:	705a      	strb	r2, [r3, #1]
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	431e      	orrs	r6, r3
 800cb8e:	4b78      	ldr	r3, [pc, #480]	; (800cd70 <_svfprintf_r+0xdc4>)
 800cb90:	401e      	ands	r6, r3
 800cb92:	2302      	movs	r3, #2
 800cb94:	e75c      	b.n	800ca50 <_svfprintf_r+0xaa4>
 800cb96:	4b78      	ldr	r3, [pc, #480]	; (800cd78 <_svfprintf_r+0xdcc>)
 800cb98:	e7de      	b.n	800cb58 <_svfprintf_r+0xbac>
 800cb9a:	0023      	movs	r3, r4
 800cb9c:	cb04      	ldmia	r3!, {r2}
 800cb9e:	0031      	movs	r1, r6
 800cba0:	930d      	str	r3, [sp, #52]	; 0x34
 800cba2:	2310      	movs	r3, #16
 800cba4:	4019      	ands	r1, r3
 800cba6:	421e      	tst	r6, r3
 800cba8:	d002      	beq.n	800cbb0 <_svfprintf_r+0xc04>
 800cbaa:	9206      	str	r2, [sp, #24]
 800cbac:	9007      	str	r0, [sp, #28]
 800cbae:	e7e1      	b.n	800cb74 <_svfprintf_r+0xbc8>
 800cbb0:	2340      	movs	r3, #64	; 0x40
 800cbb2:	0030      	movs	r0, r6
 800cbb4:	4018      	ands	r0, r3
 800cbb6:	421e      	tst	r6, r3
 800cbb8:	d003      	beq.n	800cbc2 <_svfprintf_r+0xc16>
 800cbba:	b293      	uxth	r3, r2
 800cbbc:	9306      	str	r3, [sp, #24]
 800cbbe:	9107      	str	r1, [sp, #28]
 800cbc0:	e7d8      	b.n	800cb74 <_svfprintf_r+0xbc8>
 800cbc2:	2380      	movs	r3, #128	; 0x80
 800cbc4:	0031      	movs	r1, r6
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4019      	ands	r1, r3
 800cbca:	421e      	tst	r6, r3
 800cbcc:	d002      	beq.n	800cbd4 <_svfprintf_r+0xc28>
 800cbce:	b2d3      	uxtb	r3, r2
 800cbd0:	9306      	str	r3, [sp, #24]
 800cbd2:	e7eb      	b.n	800cbac <_svfprintf_r+0xc00>
 800cbd4:	9206      	str	r2, [sp, #24]
 800cbd6:	e7f2      	b.n	800cbbe <_svfprintf_r+0xc12>
 800cbd8:	9b07      	ldr	r3, [sp, #28]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10a      	bne.n	800cbf4 <_svfprintf_r+0xc48>
 800cbde:	9b06      	ldr	r3, [sp, #24]
 800cbe0:	2b09      	cmp	r3, #9
 800cbe2:	d807      	bhi.n	800cbf4 <_svfprintf_r+0xc48>
 800cbe4:	23e7      	movs	r3, #231	; 0xe7
 800cbe6:	aa1e      	add	r2, sp, #120	; 0x78
 800cbe8:	189b      	adds	r3, r3, r2
 800cbea:	9a06      	ldr	r2, [sp, #24]
 800cbec:	3230      	adds	r2, #48	; 0x30
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	f000 fc18 	bl	800d424 <_svfprintf_r+0x1478>
 800cbf4:	2680      	movs	r6, #128	; 0x80
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	00f6      	lsls	r6, r6, #3
 800cbfa:	930e      	str	r3, [sp, #56]	; 0x38
 800cbfc:	ad58      	add	r5, sp, #352	; 0x160
 800cbfe:	4026      	ands	r6, r4
 800cc00:	220a      	movs	r2, #10
 800cc02:	9806      	ldr	r0, [sp, #24]
 800cc04:	9907      	ldr	r1, [sp, #28]
 800cc06:	2300      	movs	r3, #0
 800cc08:	f7f3 fc4c 	bl	80004a4 <__aeabi_uldivmod>
 800cc0c:	1e6b      	subs	r3, r5, #1
 800cc0e:	3230      	adds	r2, #48	; 0x30
 800cc10:	9308      	str	r3, [sp, #32]
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc16:	900c      	str	r0, [sp, #48]	; 0x30
 800cc18:	3301      	adds	r3, #1
 800cc1a:	9110      	str	r1, [sp, #64]	; 0x40
 800cc1c:	930e      	str	r3, [sp, #56]	; 0x38
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	d01d      	beq.n	800cc5e <_svfprintf_r+0xcb2>
 800cc22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d118      	bne.n	800cc5e <_svfprintf_r+0xcb2>
 800cc2c:	2aff      	cmp	r2, #255	; 0xff
 800cc2e:	d016      	beq.n	800cc5e <_svfprintf_r+0xcb2>
 800cc30:	9b07      	ldr	r3, [sp, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <_svfprintf_r+0xc90>
 800cc36:	9b06      	ldr	r3, [sp, #24]
 800cc38:	2b09      	cmp	r3, #9
 800cc3a:	d910      	bls.n	800cc5e <_svfprintf_r+0xcb2>
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cc40:	991d      	ldr	r1, [sp, #116]	; 0x74
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	0018      	movs	r0, r3
 800cc46:	9308      	str	r3, [sp, #32]
 800cc48:	f7fd ffd1 	bl	800abee <strncpy>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc50:	920e      	str	r2, [sp, #56]	; 0x38
 800cc52:	785b      	ldrb	r3, [r3, #1]
 800cc54:	1e5a      	subs	r2, r3, #1
 800cc56:	4193      	sbcs	r3, r2
 800cc58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc5a:	18d3      	adds	r3, r2, r3
 800cc5c:	9312      	str	r3, [sp, #72]	; 0x48
 800cc5e:	9b07      	ldr	r3, [sp, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10f      	bne.n	800cc84 <_svfprintf_r+0xcd8>
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	2b09      	cmp	r3, #9
 800cc68:	d80c      	bhi.n	800cc84 <_svfprintf_r+0xcd8>
 800cc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6c:	9a08      	ldr	r2, [sp, #32]
 800cc6e:	9319      	str	r3, [sp, #100]	; 0x64
 800cc70:	ab58      	add	r3, sp, #352	; 0x160
 800cc72:	1a9b      	subs	r3, r3, r2
 800cc74:	9309      	str	r3, [sp, #36]	; 0x24
 800cc76:	2300      	movs	r3, #0
 800cc78:	0026      	movs	r6, r4
 800cc7a:	930c      	str	r3, [sp, #48]	; 0x30
 800cc7c:	001d      	movs	r5, r3
 800cc7e:	9310      	str	r3, [sp, #64]	; 0x40
 800cc80:	9311      	str	r3, [sp, #68]	; 0x44
 800cc82:	e4f2      	b.n	800c66a <_svfprintf_r+0x6be>
 800cc84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc86:	9d08      	ldr	r5, [sp, #32]
 800cc88:	9306      	str	r3, [sp, #24]
 800cc8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc8c:	9307      	str	r3, [sp, #28]
 800cc8e:	e7b7      	b.n	800cc00 <_svfprintf_r+0xc54>
 800cc90:	200f      	movs	r0, #15
 800cc92:	ab58      	add	r3, sp, #352	; 0x160
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	9b08      	ldr	r3, [sp, #32]
 800cc98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	9308      	str	r3, [sp, #32]
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	4003      	ands	r3, r0
 800cca2:	5cd3      	ldrb	r3, [r2, r3]
 800cca4:	9a08      	ldr	r2, [sp, #32]
 800cca6:	7013      	strb	r3, [r2, #0]
 800cca8:	9b07      	ldr	r3, [sp, #28]
 800ccaa:	0719      	lsls	r1, r3, #28
 800ccac:	9b06      	ldr	r3, [sp, #24]
 800ccae:	091a      	lsrs	r2, r3, #4
 800ccb0:	9b07      	ldr	r3, [sp, #28]
 800ccb2:	4311      	orrs	r1, r2
 800ccb4:	091b      	lsrs	r3, r3, #4
 800ccb6:	9307      	str	r3, [sp, #28]
 800ccb8:	000b      	movs	r3, r1
 800ccba:	9a07      	ldr	r2, [sp, #28]
 800ccbc:	9106      	str	r1, [sp, #24]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	d1e9      	bne.n	800cc96 <_svfprintf_r+0xcea>
 800ccc2:	e7d2      	b.n	800cc6a <_svfprintf_r+0xcbe>
 800ccc4:	aa58      	add	r2, sp, #352	; 0x160
 800ccc6:	9208      	str	r2, [sp, #32]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1ce      	bne.n	800cc6a <_svfprintf_r+0xcbe>
 800cccc:	07f6      	lsls	r6, r6, #31
 800ccce:	d5cc      	bpl.n	800cc6a <_svfprintf_r+0xcbe>
 800ccd0:	aa1e      	add	r2, sp, #120	; 0x78
 800ccd2:	33e7      	adds	r3, #231	; 0xe7
 800ccd4:	189b      	adds	r3, r3, r2
 800ccd6:	2230      	movs	r2, #48	; 0x30
 800ccd8:	e789      	b.n	800cbee <_svfprintf_r+0xc42>
 800ccda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d100      	bne.n	800cce2 <_svfprintf_r+0xd36>
 800cce0:	e364      	b.n	800d3ac <_svfprintf_r+0x1400>
 800cce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cce4:	211b      	movs	r1, #27
 800cce6:	ab3f      	add	r3, sp, #252	; 0xfc
 800cce8:	701a      	strb	r2, [r3, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	a81e      	add	r0, sp, #120	; 0x78
 800ccee:	1809      	adds	r1, r1, r0
 800ccf0:	700a      	strb	r2, [r1, #0]
 800ccf2:	940d      	str	r4, [sp, #52]	; 0x34
 800ccf4:	f7ff fabd 	bl	800c272 <_svfprintf_r+0x2c6>
 800ccf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccfa:	f7ff fb44 	bl	800c386 <_svfprintf_r+0x3da>
 800ccfe:	2010      	movs	r0, #16
 800cd00:	1812      	adds	r2, r2, r0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd06:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd08:	2b07      	cmp	r3, #7
 800cd0a:	dd08      	ble.n	800cd1e <_svfprintf_r+0xd72>
 800cd0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd10:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd12:	f003 fa61 	bl	80101d8 <__ssprint_r>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d000      	beq.n	800cd1c <_svfprintf_r+0xd70>
 800cd1a:	e326      	b.n	800d36a <_svfprintf_r+0x13be>
 800cd1c:	a92f      	add	r1, sp, #188	; 0xbc
 800cd1e:	000f      	movs	r7, r1
 800cd20:	3c10      	subs	r4, #16
 800cd22:	e4c5      	b.n	800c6b0 <_svfprintf_r+0x704>
 800cd24:	2010      	movs	r0, #16
 800cd26:	1812      	adds	r2, r2, r0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd2e:	2b07      	cmp	r3, #7
 800cd30:	dd08      	ble.n	800cd44 <_svfprintf_r+0xd98>
 800cd32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd36:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd38:	f003 fa4e 	bl	80101d8 <__ssprint_r>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d000      	beq.n	800cd42 <_svfprintf_r+0xd96>
 800cd40:	e313      	b.n	800d36a <_svfprintf_r+0x13be>
 800cd42:	a92f      	add	r1, sp, #188	; 0xbc
 800cd44:	000f      	movs	r7, r1
 800cd46:	3c10      	subs	r4, #16
 800cd48:	e50b      	b.n	800c762 <_svfprintf_r+0x7b6>
 800cd4a:	2010      	movs	r0, #16
 800cd4c:	1812      	adds	r2, r2, r0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd52:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd54:	2b07      	cmp	r3, #7
 800cd56:	dd08      	ble.n	800cd6a <_svfprintf_r+0xdbe>
 800cd58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd5c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd5e:	f003 fa3b 	bl	80101d8 <__ssprint_r>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d000      	beq.n	800cd68 <_svfprintf_r+0xdbc>
 800cd66:	e300      	b.n	800d36a <_svfprintf_r+0x13be>
 800cd68:	a92f      	add	r1, sp, #188	; 0xbc
 800cd6a:	000f      	movs	r7, r1
 800cd6c:	3c10      	subs	r4, #16
 800cd6e:	e518      	b.n	800c7a2 <_svfprintf_r+0x7f6>
 800cd70:	fffffbff 	.word	0xfffffbff
 800cd74:	00007830 	.word	0x00007830
 800cd78:	08013264 	.word	0x08013264
 800cd7c:	08013275 	.word	0x08013275
 800cd80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd82:	2b65      	cmp	r3, #101	; 0x65
 800cd84:	dc00      	bgt.n	800cd88 <_svfprintf_r+0xddc>
 800cd86:	e241      	b.n	800d20c <_svfprintf_r+0x1260>
 800cd88:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cd8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f7f3 fb5a 	bl	8000448 <__aeabi_dcmpeq>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d077      	beq.n	800ce88 <_svfprintf_r+0xedc>
 800cd98:	4bca      	ldr	r3, [pc, #808]	; (800d0c4 <_svfprintf_r+0x1118>)
 800cd9a:	603b      	str	r3, [r7, #0]
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	607b      	str	r3, [r7, #4]
 800cda0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cda2:	3708      	adds	r7, #8
 800cda4:	3301      	adds	r3, #1
 800cda6:	932e      	str	r3, [sp, #184]	; 0xb8
 800cda8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cdaa:	3301      	adds	r3, #1
 800cdac:	932d      	str	r3, [sp, #180]	; 0xb4
 800cdae:	2b07      	cmp	r3, #7
 800cdb0:	dd08      	ble.n	800cdc4 <_svfprintf_r+0xe18>
 800cdb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdb8:	f003 fa0e 	bl	80101d8 <__ssprint_r>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d000      	beq.n	800cdc2 <_svfprintf_r+0xe16>
 800cdc0:	e2d3      	b.n	800d36a <_svfprintf_r+0x13be>
 800cdc2:	af2f      	add	r7, sp, #188	; 0xbc
 800cdc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cdc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	db01      	blt.n	800cdd0 <_svfprintf_r+0xe24>
 800cdcc:	07f3      	lsls	r3, r6, #31
 800cdce:	d51b      	bpl.n	800ce08 <_svfprintf_r+0xe5c>
 800cdd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cdd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cdd4:	603b      	str	r3, [r7, #0]
 800cdd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cdd8:	607b      	str	r3, [r7, #4]
 800cdda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cddc:	3708      	adds	r7, #8
 800cdde:	189b      	adds	r3, r3, r2
 800cde0:	932e      	str	r3, [sp, #184]	; 0xb8
 800cde2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cde4:	3301      	adds	r3, #1
 800cde6:	932d      	str	r3, [sp, #180]	; 0xb4
 800cde8:	2b07      	cmp	r3, #7
 800cdea:	dd08      	ble.n	800cdfe <_svfprintf_r+0xe52>
 800cdec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdf0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdf2:	f003 f9f1 	bl	80101d8 <__ssprint_r>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d000      	beq.n	800cdfc <_svfprintf_r+0xe50>
 800cdfa:	e2b6      	b.n	800d36a <_svfprintf_r+0x13be>
 800cdfc:	af2f      	add	r7, sp, #188	; 0xbc
 800cdfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce00:	2510      	movs	r5, #16
 800ce02:	1e5c      	subs	r4, r3, #1
 800ce04:	2c00      	cmp	r4, #0
 800ce06:	dc2e      	bgt.n	800ce66 <_svfprintf_r+0xeba>
 800ce08:	0776      	lsls	r6, r6, #29
 800ce0a:	d500      	bpl.n	800ce0e <_svfprintf_r+0xe62>
 800ce0c:	e290      	b.n	800d330 <_svfprintf_r+0x1384>
 800ce0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce12:	4293      	cmp	r3, r2
 800ce14:	da00      	bge.n	800ce18 <_svfprintf_r+0xe6c>
 800ce16:	0013      	movs	r3, r2
 800ce18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce1a:	18d3      	adds	r3, r2, r3
 800ce1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <_svfprintf_r+0xe88>
 800ce24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce28:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce2a:	f003 f9d5 	bl	80101d8 <__ssprint_r>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d000      	beq.n	800ce34 <_svfprintf_r+0xe88>
 800ce32:	e29a      	b.n	800d36a <_svfprintf_r+0x13be>
 800ce34:	2300      	movs	r3, #0
 800ce36:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d000      	beq.n	800ce40 <_svfprintf_r+0xe94>
 800ce3e:	e2b0      	b.n	800d3a2 <_svfprintf_r+0x13f6>
 800ce40:	af2f      	add	r7, sp, #188	; 0xbc
 800ce42:	e5dc      	b.n	800c9fe <_svfprintf_r+0xa52>
 800ce44:	3210      	adds	r2, #16
 800ce46:	607d      	str	r5, [r7, #4]
 800ce48:	922e      	str	r2, [sp, #184]	; 0xb8
 800ce4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce4c:	2b07      	cmp	r3, #7
 800ce4e:	dd08      	ble.n	800ce62 <_svfprintf_r+0xeb6>
 800ce50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce54:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce56:	f003 f9bf 	bl	80101d8 <__ssprint_r>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d000      	beq.n	800ce60 <_svfprintf_r+0xeb4>
 800ce5e:	e284      	b.n	800d36a <_svfprintf_r+0x13be>
 800ce60:	a92f      	add	r1, sp, #188	; 0xbc
 800ce62:	000f      	movs	r7, r1
 800ce64:	3c10      	subs	r4, #16
 800ce66:	0039      	movs	r1, r7
 800ce68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce6a:	4897      	ldr	r0, [pc, #604]	; (800d0c8 <_svfprintf_r+0x111c>)
 800ce6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ce6e:	3301      	adds	r3, #1
 800ce70:	3108      	adds	r1, #8
 800ce72:	6038      	str	r0, [r7, #0]
 800ce74:	2c10      	cmp	r4, #16
 800ce76:	dce5      	bgt.n	800ce44 <_svfprintf_r+0xe98>
 800ce78:	607c      	str	r4, [r7, #4]
 800ce7a:	18a4      	adds	r4, r4, r2
 800ce7c:	942e      	str	r4, [sp, #184]	; 0xb8
 800ce7e:	000f      	movs	r7, r1
 800ce80:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce82:	2b07      	cmp	r3, #7
 800ce84:	ddc0      	ble.n	800ce08 <_svfprintf_r+0xe5c>
 800ce86:	e05f      	b.n	800cf48 <_svfprintf_r+0xf9c>
 800ce88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc78      	bgt.n	800cf80 <_svfprintf_r+0xfd4>
 800ce8e:	4b8d      	ldr	r3, [pc, #564]	; (800d0c4 <_svfprintf_r+0x1118>)
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	2301      	movs	r3, #1
 800ce94:	607b      	str	r3, [r7, #4]
 800ce96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce98:	3708      	adds	r7, #8
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cea0:	3301      	adds	r3, #1
 800cea2:	932d      	str	r3, [sp, #180]	; 0xb4
 800cea4:	2b07      	cmp	r3, #7
 800cea6:	dd08      	ble.n	800ceba <_svfprintf_r+0xf0e>
 800cea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ceaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ceac:	aa2c      	add	r2, sp, #176	; 0xb0
 800ceae:	f003 f993 	bl	80101d8 <__ssprint_r>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d000      	beq.n	800ceb8 <_svfprintf_r+0xf0c>
 800ceb6:	e258      	b.n	800d36a <_svfprintf_r+0x13be>
 800ceb8:	af2f      	add	r7, sp, #188	; 0xbc
 800ceba:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cebc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cebe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cec0:	430b      	orrs	r3, r1
 800cec2:	2101      	movs	r1, #1
 800cec4:	4031      	ands	r1, r6
 800cec6:	430b      	orrs	r3, r1
 800cec8:	d09e      	beq.n	800ce08 <_svfprintf_r+0xe5c>
 800ceca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cecc:	603b      	str	r3, [r7, #0]
 800cece:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ced0:	607b      	str	r3, [r7, #4]
 800ced2:	189a      	adds	r2, r3, r2
 800ced4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ced6:	922e      	str	r2, [sp, #184]	; 0xb8
 800ced8:	3301      	adds	r3, #1
 800ceda:	932d      	str	r3, [sp, #180]	; 0xb4
 800cedc:	3708      	adds	r7, #8
 800cede:	2b07      	cmp	r3, #7
 800cee0:	dd08      	ble.n	800cef4 <_svfprintf_r+0xf48>
 800cee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cee6:	aa2c      	add	r2, sp, #176	; 0xb0
 800cee8:	f003 f976 	bl	80101d8 <__ssprint_r>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d000      	beq.n	800cef2 <_svfprintf_r+0xf46>
 800cef0:	e23b      	b.n	800d36a <_svfprintf_r+0x13be>
 800cef2:	af2f      	add	r7, sp, #188	; 0xbc
 800cef4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800cef6:	2c00      	cmp	r4, #0
 800cef8:	da19      	bge.n	800cf2e <_svfprintf_r+0xf82>
 800cefa:	0038      	movs	r0, r7
 800cefc:	2510      	movs	r5, #16
 800cefe:	4264      	negs	r4, r4
 800cf00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800cf02:	4a71      	ldr	r2, [pc, #452]	; (800d0c8 <_svfprintf_r+0x111c>)
 800cf04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cf06:	3101      	adds	r1, #1
 800cf08:	3708      	adds	r7, #8
 800cf0a:	6002      	str	r2, [r0, #0]
 800cf0c:	2c10      	cmp	r4, #16
 800cf0e:	dc25      	bgt.n	800cf5c <_svfprintf_r+0xfb0>
 800cf10:	6044      	str	r4, [r0, #4]
 800cf12:	18e4      	adds	r4, r4, r3
 800cf14:	942e      	str	r4, [sp, #184]	; 0xb8
 800cf16:	912d      	str	r1, [sp, #180]	; 0xb4
 800cf18:	2907      	cmp	r1, #7
 800cf1a:	dd08      	ble.n	800cf2e <_svfprintf_r+0xf82>
 800cf1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf20:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf22:	f003 f959 	bl	80101d8 <__ssprint_r>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d000      	beq.n	800cf2c <_svfprintf_r+0xf80>
 800cf2a:	e21e      	b.n	800d36a <_svfprintf_r+0x13be>
 800cf2c:	af2f      	add	r7, sp, #188	; 0xbc
 800cf2e:	9b08      	ldr	r3, [sp, #32]
 800cf30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cf32:	603b      	str	r3, [r7, #0]
 800cf34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf36:	18d2      	adds	r2, r2, r3
 800cf38:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf3a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cf3c:	607b      	str	r3, [r7, #4]
 800cf3e:	3201      	adds	r2, #1
 800cf40:	922d      	str	r2, [sp, #180]	; 0xb4
 800cf42:	2a07      	cmp	r2, #7
 800cf44:	dc00      	bgt.n	800cf48 <_svfprintf_r+0xf9c>
 800cf46:	e45b      	b.n	800c800 <_svfprintf_r+0x854>
 800cf48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf4e:	f003 f943 	bl	80101d8 <__ssprint_r>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d000      	beq.n	800cf58 <_svfprintf_r+0xfac>
 800cf56:	e208      	b.n	800d36a <_svfprintf_r+0x13be>
 800cf58:	af2f      	add	r7, sp, #188	; 0xbc
 800cf5a:	e755      	b.n	800ce08 <_svfprintf_r+0xe5c>
 800cf5c:	3310      	adds	r3, #16
 800cf5e:	6045      	str	r5, [r0, #4]
 800cf60:	932e      	str	r3, [sp, #184]	; 0xb8
 800cf62:	912d      	str	r1, [sp, #180]	; 0xb4
 800cf64:	2907      	cmp	r1, #7
 800cf66:	dd08      	ble.n	800cf7a <_svfprintf_r+0xfce>
 800cf68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf6c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf6e:	f003 f933 	bl	80101d8 <__ssprint_r>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d000      	beq.n	800cf78 <_svfprintf_r+0xfcc>
 800cf76:	e1f8      	b.n	800d36a <_svfprintf_r+0x13be>
 800cf78:	af2f      	add	r7, sp, #188	; 0xbc
 800cf7a:	0038      	movs	r0, r7
 800cf7c:	3c10      	subs	r4, #16
 800cf7e:	e7bf      	b.n	800cf00 <_svfprintf_r+0xf54>
 800cf80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf82:	002c      	movs	r4, r5
 800cf84:	429d      	cmp	r5, r3
 800cf86:	dd00      	ble.n	800cf8a <_svfprintf_r+0xfde>
 800cf88:	001c      	movs	r4, r3
 800cf8a:	2c00      	cmp	r4, #0
 800cf8c:	dd14      	ble.n	800cfb8 <_svfprintf_r+0x100c>
 800cf8e:	9b08      	ldr	r3, [sp, #32]
 800cf90:	607c      	str	r4, [r7, #4]
 800cf92:	603b      	str	r3, [r7, #0]
 800cf94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf96:	3708      	adds	r7, #8
 800cf98:	18e3      	adds	r3, r4, r3
 800cf9a:	932e      	str	r3, [sp, #184]	; 0xb8
 800cf9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfa2:	2b07      	cmp	r3, #7
 800cfa4:	dd08      	ble.n	800cfb8 <_svfprintf_r+0x100c>
 800cfa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfac:	f003 f914 	bl	80101d8 <__ssprint_r>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d000      	beq.n	800cfb6 <_svfprintf_r+0x100a>
 800cfb4:	e1d9      	b.n	800d36a <_svfprintf_r+0x13be>
 800cfb6:	af2f      	add	r7, sp, #188	; 0xbc
 800cfb8:	43e3      	mvns	r3, r4
 800cfba:	17db      	asrs	r3, r3, #31
 800cfbc:	401c      	ands	r4, r3
 800cfbe:	1b2c      	subs	r4, r5, r4
 800cfc0:	2c00      	cmp	r4, #0
 800cfc2:	dd18      	ble.n	800cff6 <_svfprintf_r+0x104a>
 800cfc4:	0039      	movs	r1, r7
 800cfc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cfc8:	483f      	ldr	r0, [pc, #252]	; (800d0c8 <_svfprintf_r+0x111c>)
 800cfca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cfcc:	3301      	adds	r3, #1
 800cfce:	3108      	adds	r1, #8
 800cfd0:	6038      	str	r0, [r7, #0]
 800cfd2:	2c10      	cmp	r4, #16
 800cfd4:	dc7a      	bgt.n	800d0cc <_svfprintf_r+0x1120>
 800cfd6:	607c      	str	r4, [r7, #4]
 800cfd8:	18a4      	adds	r4, r4, r2
 800cfda:	000f      	movs	r7, r1
 800cfdc:	942e      	str	r4, [sp, #184]	; 0xb8
 800cfde:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfe0:	2b07      	cmp	r3, #7
 800cfe2:	dd08      	ble.n	800cff6 <_svfprintf_r+0x104a>
 800cfe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfe6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfe8:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfea:	f003 f8f5 	bl	80101d8 <__ssprint_r>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d000      	beq.n	800cff4 <_svfprintf_r+0x1048>
 800cff2:	e1ba      	b.n	800d36a <_svfprintf_r+0x13be>
 800cff4:	af2f      	add	r7, sp, #188	; 0xbc
 800cff6:	9b08      	ldr	r3, [sp, #32]
 800cff8:	195d      	adds	r5, r3, r5
 800cffa:	0573      	lsls	r3, r6, #21
 800cffc:	d50b      	bpl.n	800d016 <_svfprintf_r+0x106a>
 800cffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d000:	2b00      	cmp	r3, #0
 800d002:	d176      	bne.n	800d0f2 <_svfprintf_r+0x1146>
 800d004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d006:	2b00      	cmp	r3, #0
 800d008:	d176      	bne.n	800d0f8 <_svfprintf_r+0x114c>
 800d00a:	9b08      	ldr	r3, [sp, #32]
 800d00c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d00e:	189b      	adds	r3, r3, r2
 800d010:	429d      	cmp	r5, r3
 800d012:	d900      	bls.n	800d016 <_svfprintf_r+0x106a>
 800d014:	001d      	movs	r5, r3
 800d016:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d01a:	4293      	cmp	r3, r2
 800d01c:	db01      	blt.n	800d022 <_svfprintf_r+0x1076>
 800d01e:	07f3      	lsls	r3, r6, #31
 800d020:	d516      	bpl.n	800d050 <_svfprintf_r+0x10a4>
 800d022:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d024:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d02a:	607b      	str	r3, [r7, #4]
 800d02c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d02e:	3708      	adds	r7, #8
 800d030:	189b      	adds	r3, r3, r2
 800d032:	932e      	str	r3, [sp, #184]	; 0xb8
 800d034:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d036:	3301      	adds	r3, #1
 800d038:	932d      	str	r3, [sp, #180]	; 0xb4
 800d03a:	2b07      	cmp	r3, #7
 800d03c:	dd08      	ble.n	800d050 <_svfprintf_r+0x10a4>
 800d03e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d040:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d042:	aa2c      	add	r2, sp, #176	; 0xb0
 800d044:	f003 f8c8 	bl	80101d8 <__ssprint_r>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d000      	beq.n	800d04e <_svfprintf_r+0x10a2>
 800d04c:	e18d      	b.n	800d36a <_svfprintf_r+0x13be>
 800d04e:	af2f      	add	r7, sp, #188	; 0xbc
 800d050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d052:	9b08      	ldr	r3, [sp, #32]
 800d054:	4694      	mov	ip, r2
 800d056:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800d058:	4463      	add	r3, ip
 800d05a:	1b5b      	subs	r3, r3, r5
 800d05c:	1b14      	subs	r4, r2, r4
 800d05e:	429c      	cmp	r4, r3
 800d060:	dd00      	ble.n	800d064 <_svfprintf_r+0x10b8>
 800d062:	001c      	movs	r4, r3
 800d064:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d066:	2c00      	cmp	r4, #0
 800d068:	dd12      	ble.n	800d090 <_svfprintf_r+0x10e4>
 800d06a:	18e3      	adds	r3, r4, r3
 800d06c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d06e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d070:	603d      	str	r5, [r7, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	607c      	str	r4, [r7, #4]
 800d076:	932d      	str	r3, [sp, #180]	; 0xb4
 800d078:	3708      	adds	r7, #8
 800d07a:	2b07      	cmp	r3, #7
 800d07c:	dd08      	ble.n	800d090 <_svfprintf_r+0x10e4>
 800d07e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d080:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d082:	aa2c      	add	r2, sp, #176	; 0xb0
 800d084:	f003 f8a8 	bl	80101d8 <__ssprint_r>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d000      	beq.n	800d08e <_svfprintf_r+0x10e2>
 800d08c:	e16d      	b.n	800d36a <_svfprintf_r+0x13be>
 800d08e:	af2f      	add	r7, sp, #188	; 0xbc
 800d090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d094:	2510      	movs	r5, #16
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	43e2      	mvns	r2, r4
 800d09a:	17d2      	asrs	r2, r2, #31
 800d09c:	4014      	ands	r4, r2
 800d09e:	1b1c      	subs	r4, r3, r4
 800d0a0:	2c00      	cmp	r4, #0
 800d0a2:	dc00      	bgt.n	800d0a6 <_svfprintf_r+0x10fa>
 800d0a4:	e6b0      	b.n	800ce08 <_svfprintf_r+0xe5c>
 800d0a6:	0039      	movs	r1, r7
 800d0a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d0aa:	4807      	ldr	r0, [pc, #28]	; (800d0c8 <_svfprintf_r+0x111c>)
 800d0ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	3108      	adds	r1, #8
 800d0b2:	6038      	str	r0, [r7, #0]
 800d0b4:	2c10      	cmp	r4, #16
 800d0b6:	dd00      	ble.n	800d0ba <_svfprintf_r+0x110e>
 800d0b8:	e096      	b.n	800d1e8 <_svfprintf_r+0x123c>
 800d0ba:	1912      	adds	r2, r2, r4
 800d0bc:	607c      	str	r4, [r7, #4]
 800d0be:	922e      	str	r2, [sp, #184]	; 0xb8
 800d0c0:	e6dd      	b.n	800ce7e <_svfprintf_r+0xed2>
 800d0c2:	46c0      	nop			; (mov r8, r8)
 800d0c4:	08013286 	.word	0x08013286
 800d0c8:	08013298 	.word	0x08013298
 800d0cc:	2010      	movs	r0, #16
 800d0ce:	1812      	adds	r2, r2, r0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	922e      	str	r2, [sp, #184]	; 0xb8
 800d0d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d0d6:	2b07      	cmp	r3, #7
 800d0d8:	dd08      	ble.n	800d0ec <_svfprintf_r+0x1140>
 800d0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0de:	aa2c      	add	r2, sp, #176	; 0xb0
 800d0e0:	f003 f87a 	bl	80101d8 <__ssprint_r>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d000      	beq.n	800d0ea <_svfprintf_r+0x113e>
 800d0e8:	e13f      	b.n	800d36a <_svfprintf_r+0x13be>
 800d0ea:	a92f      	add	r1, sp, #188	; 0xbc
 800d0ec:	000f      	movs	r7, r1
 800d0ee:	3c10      	subs	r4, #16
 800d0f0:	e768      	b.n	800cfc4 <_svfprintf_r+0x1018>
 800d0f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d05d      	beq.n	800d1b4 <_svfprintf_r+0x1208>
 800d0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	9310      	str	r3, [sp, #64]	; 0x40
 800d0fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d106:	607b      	str	r3, [r7, #4]
 800d108:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d10a:	3708      	adds	r7, #8
 800d10c:	189b      	adds	r3, r3, r2
 800d10e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d110:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d112:	3301      	adds	r3, #1
 800d114:	932d      	str	r3, [sp, #180]	; 0xb4
 800d116:	2b07      	cmp	r3, #7
 800d118:	dd08      	ble.n	800d12c <_svfprintf_r+0x1180>
 800d11a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d11c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d11e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d120:	f003 f85a 	bl	80101d8 <__ssprint_r>
 800d124:	2800      	cmp	r0, #0
 800d126:	d000      	beq.n	800d12a <_svfprintf_r+0x117e>
 800d128:	e11f      	b.n	800d36a <_svfprintf_r+0x13be>
 800d12a:	af2f      	add	r7, sp, #188	; 0xbc
 800d12c:	9b08      	ldr	r3, [sp, #32]
 800d12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d130:	189c      	adds	r4, r3, r2
 800d132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d134:	1b64      	subs	r4, r4, r5
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	429c      	cmp	r4, r3
 800d13a:	dd00      	ble.n	800d13e <_svfprintf_r+0x1192>
 800d13c:	001c      	movs	r4, r3
 800d13e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d140:	2c00      	cmp	r4, #0
 800d142:	dd12      	ble.n	800d16a <_svfprintf_r+0x11be>
 800d144:	18e3      	adds	r3, r4, r3
 800d146:	932e      	str	r3, [sp, #184]	; 0xb8
 800d148:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d14a:	603d      	str	r5, [r7, #0]
 800d14c:	3301      	adds	r3, #1
 800d14e:	607c      	str	r4, [r7, #4]
 800d150:	932d      	str	r3, [sp, #180]	; 0xb4
 800d152:	3708      	adds	r7, #8
 800d154:	2b07      	cmp	r3, #7
 800d156:	dd08      	ble.n	800d16a <_svfprintf_r+0x11be>
 800d158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d15a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d15c:	aa2c      	add	r2, sp, #176	; 0xb0
 800d15e:	f003 f83b 	bl	80101d8 <__ssprint_r>
 800d162:	2800      	cmp	r0, #0
 800d164:	d000      	beq.n	800d168 <_svfprintf_r+0x11bc>
 800d166:	e100      	b.n	800d36a <_svfprintf_r+0x13be>
 800d168:	af2f      	add	r7, sp, #188	; 0xbc
 800d16a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d16c:	781a      	ldrb	r2, [r3, #0]
 800d16e:	43e3      	mvns	r3, r4
 800d170:	17db      	asrs	r3, r3, #31
 800d172:	401c      	ands	r4, r3
 800d174:	1b14      	subs	r4, r2, r4
 800d176:	2c00      	cmp	r4, #0
 800d178:	dd18      	ble.n	800d1ac <_svfprintf_r+0x1200>
 800d17a:	0039      	movs	r1, r7
 800d17c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d17e:	48aa      	ldr	r0, [pc, #680]	; (800d428 <_svfprintf_r+0x147c>)
 800d180:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d182:	3301      	adds	r3, #1
 800d184:	3108      	adds	r1, #8
 800d186:	6038      	str	r0, [r7, #0]
 800d188:	2c10      	cmp	r4, #16
 800d18a:	dc1a      	bgt.n	800d1c2 <_svfprintf_r+0x1216>
 800d18c:	1912      	adds	r2, r2, r4
 800d18e:	607c      	str	r4, [r7, #4]
 800d190:	922e      	str	r2, [sp, #184]	; 0xb8
 800d192:	000f      	movs	r7, r1
 800d194:	932d      	str	r3, [sp, #180]	; 0xb4
 800d196:	2b07      	cmp	r3, #7
 800d198:	dd08      	ble.n	800d1ac <_svfprintf_r+0x1200>
 800d19a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d19c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d19e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1a0:	f003 f81a 	bl	80101d8 <__ssprint_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d000      	beq.n	800d1aa <_svfprintf_r+0x11fe>
 800d1a8:	e0df      	b.n	800d36a <_svfprintf_r+0x13be>
 800d1aa:	af2f      	add	r7, sp, #188	; 0xbc
 800d1ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	18ed      	adds	r5, r5, r3
 800d1b2:	e724      	b.n	800cffe <_svfprintf_r+0x1052>
 800d1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	9312      	str	r3, [sp, #72]	; 0x48
 800d1ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	9311      	str	r3, [sp, #68]	; 0x44
 800d1c0:	e79d      	b.n	800d0fe <_svfprintf_r+0x1152>
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	1812      	adds	r2, r2, r0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	922e      	str	r2, [sp, #184]	; 0xb8
 800d1ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1cc:	2b07      	cmp	r3, #7
 800d1ce:	dd08      	ble.n	800d1e2 <_svfprintf_r+0x1236>
 800d1d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1d6:	f002 ffff 	bl	80101d8 <__ssprint_r>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d000      	beq.n	800d1e0 <_svfprintf_r+0x1234>
 800d1de:	e0c4      	b.n	800d36a <_svfprintf_r+0x13be>
 800d1e0:	a92f      	add	r1, sp, #188	; 0xbc
 800d1e2:	000f      	movs	r7, r1
 800d1e4:	3c10      	subs	r4, #16
 800d1e6:	e7c8      	b.n	800d17a <_svfprintf_r+0x11ce>
 800d1e8:	3210      	adds	r2, #16
 800d1ea:	607d      	str	r5, [r7, #4]
 800d1ec:	922e      	str	r2, [sp, #184]	; 0xb8
 800d1ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1f0:	2b07      	cmp	r3, #7
 800d1f2:	dd08      	ble.n	800d206 <_svfprintf_r+0x125a>
 800d1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1fa:	f002 ffed 	bl	80101d8 <__ssprint_r>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d000      	beq.n	800d204 <_svfprintf_r+0x1258>
 800d202:	e0b2      	b.n	800d36a <_svfprintf_r+0x13be>
 800d204:	a92f      	add	r1, sp, #188	; 0xbc
 800d206:	000f      	movs	r7, r1
 800d208:	3c10      	subs	r4, #16
 800d20a:	e74c      	b.n	800d0a6 <_svfprintf_r+0x10fa>
 800d20c:	003c      	movs	r4, r7
 800d20e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d210:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d214:	3101      	adds	r1, #1
 800d216:	3301      	adds	r3, #1
 800d218:	3408      	adds	r4, #8
 800d21a:	2a01      	cmp	r2, #1
 800d21c:	dc03      	bgt.n	800d226 <_svfprintf_r+0x127a>
 800d21e:	2201      	movs	r2, #1
 800d220:	4216      	tst	r6, r2
 800d222:	d100      	bne.n	800d226 <_svfprintf_r+0x127a>
 800d224:	e07f      	b.n	800d326 <_svfprintf_r+0x137a>
 800d226:	9a08      	ldr	r2, [sp, #32]
 800d228:	912e      	str	r1, [sp, #184]	; 0xb8
 800d22a:	603a      	str	r2, [r7, #0]
 800d22c:	2201      	movs	r2, #1
 800d22e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d230:	607a      	str	r2, [r7, #4]
 800d232:	2b07      	cmp	r3, #7
 800d234:	dd08      	ble.n	800d248 <_svfprintf_r+0x129c>
 800d236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d238:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d23a:	aa2c      	add	r2, sp, #176	; 0xb0
 800d23c:	f002 ffcc 	bl	80101d8 <__ssprint_r>
 800d240:	2800      	cmp	r0, #0
 800d242:	d000      	beq.n	800d246 <_svfprintf_r+0x129a>
 800d244:	e091      	b.n	800d36a <_svfprintf_r+0x13be>
 800d246:	ac2f      	add	r4, sp, #188	; 0xbc
 800d248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d24a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d254:	3408      	adds	r4, #8
 800d256:	189b      	adds	r3, r3, r2
 800d258:	932e      	str	r3, [sp, #184]	; 0xb8
 800d25a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d25c:	3301      	adds	r3, #1
 800d25e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d260:	2b07      	cmp	r3, #7
 800d262:	dd07      	ble.n	800d274 <_svfprintf_r+0x12c8>
 800d264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d266:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d268:	aa2c      	add	r2, sp, #176	; 0xb0
 800d26a:	f002 ffb5 	bl	80101d8 <__ssprint_r>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d17b      	bne.n	800d36a <_svfprintf_r+0x13be>
 800d272:	ac2f      	add	r4, sp, #188	; 0xbc
 800d274:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d276:	2200      	movs	r2, #0
 800d278:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d27a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d280:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d282:	1e5d      	subs	r5, r3, #1
 800d284:	2300      	movs	r3, #0
 800d286:	f7f3 f8df 	bl	8000448 <__aeabi_dcmpeq>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d126      	bne.n	800d2dc <_svfprintf_r+0x1330>
 800d28e:	9b08      	ldr	r3, [sp, #32]
 800d290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d292:	3301      	adds	r3, #1
 800d294:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	1e7b      	subs	r3, r7, #1
 800d29a:	3201      	adds	r2, #1
 800d29c:	185b      	adds	r3, r3, r1
 800d29e:	6065      	str	r5, [r4, #4]
 800d2a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2a2:	922d      	str	r2, [sp, #180]	; 0xb4
 800d2a4:	3408      	adds	r4, #8
 800d2a6:	2a07      	cmp	r2, #7
 800d2a8:	dd07      	ble.n	800d2ba <_svfprintf_r+0x130e>
 800d2aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800d2b0:	f002 ff92 	bl	80101d8 <__ssprint_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d158      	bne.n	800d36a <_svfprintf_r+0x13be>
 800d2b8:	ac2f      	add	r4, sp, #188	; 0xbc
 800d2ba:	ab28      	add	r3, sp, #160	; 0xa0
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2c2:	6063      	str	r3, [r4, #4]
 800d2c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d2c6:	189b      	adds	r3, r3, r2
 800d2c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2d0:	2b07      	cmp	r3, #7
 800d2d2:	dd00      	ble.n	800d2d6 <_svfprintf_r+0x132a>
 800d2d4:	e638      	b.n	800cf48 <_svfprintf_r+0xf9c>
 800d2d6:	3408      	adds	r4, #8
 800d2d8:	0027      	movs	r7, r4
 800d2da:	e595      	b.n	800ce08 <_svfprintf_r+0xe5c>
 800d2dc:	2710      	movs	r7, #16
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	ddeb      	ble.n	800d2ba <_svfprintf_r+0x130e>
 800d2e2:	0021      	movs	r1, r4
 800d2e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2e6:	4850      	ldr	r0, [pc, #320]	; (800d428 <_svfprintf_r+0x147c>)
 800d2e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	3108      	adds	r1, #8
 800d2ee:	6020      	str	r0, [r4, #0]
 800d2f0:	2d10      	cmp	r5, #16
 800d2f2:	dc07      	bgt.n	800d304 <_svfprintf_r+0x1358>
 800d2f4:	6065      	str	r5, [r4, #4]
 800d2f6:	000c      	movs	r4, r1
 800d2f8:	18ad      	adds	r5, r5, r2
 800d2fa:	952e      	str	r5, [sp, #184]	; 0xb8
 800d2fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2fe:	2b07      	cmp	r3, #7
 800d300:	dddb      	ble.n	800d2ba <_svfprintf_r+0x130e>
 800d302:	e7d2      	b.n	800d2aa <_svfprintf_r+0x12fe>
 800d304:	3210      	adds	r2, #16
 800d306:	6067      	str	r7, [r4, #4]
 800d308:	922e      	str	r2, [sp, #184]	; 0xb8
 800d30a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d30c:	2b07      	cmp	r3, #7
 800d30e:	dd07      	ble.n	800d320 <_svfprintf_r+0x1374>
 800d310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d312:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d314:	aa2c      	add	r2, sp, #176	; 0xb0
 800d316:	f002 ff5f 	bl	80101d8 <__ssprint_r>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d125      	bne.n	800d36a <_svfprintf_r+0x13be>
 800d31e:	a92f      	add	r1, sp, #188	; 0xbc
 800d320:	000c      	movs	r4, r1
 800d322:	3d10      	subs	r5, #16
 800d324:	e7dd      	b.n	800d2e2 <_svfprintf_r+0x1336>
 800d326:	9808      	ldr	r0, [sp, #32]
 800d328:	912e      	str	r1, [sp, #184]	; 0xb8
 800d32a:	c705      	stmia	r7!, {r0, r2}
 800d32c:	932d      	str	r3, [sp, #180]	; 0xb4
 800d32e:	e7e6      	b.n	800d2fe <_svfprintf_r+0x1352>
 800d330:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d332:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d334:	2510      	movs	r5, #16
 800d336:	1a9c      	subs	r4, r3, r2
 800d338:	2c00      	cmp	r4, #0
 800d33a:	dc00      	bgt.n	800d33e <_svfprintf_r+0x1392>
 800d33c:	e567      	b.n	800ce0e <_svfprintf_r+0xe62>
 800d33e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d340:	493a      	ldr	r1, [pc, #232]	; (800d42c <_svfprintf_r+0x1480>)
 800d342:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d344:	3301      	adds	r3, #1
 800d346:	6039      	str	r1, [r7, #0]
 800d348:	2c10      	cmp	r4, #16
 800d34a:	dc19      	bgt.n	800d380 <_svfprintf_r+0x13d4>
 800d34c:	607c      	str	r4, [r7, #4]
 800d34e:	18a4      	adds	r4, r4, r2
 800d350:	942e      	str	r4, [sp, #184]	; 0xb8
 800d352:	932d      	str	r3, [sp, #180]	; 0xb4
 800d354:	2b07      	cmp	r3, #7
 800d356:	dc00      	bgt.n	800d35a <_svfprintf_r+0x13ae>
 800d358:	e559      	b.n	800ce0e <_svfprintf_r+0xe62>
 800d35a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d35c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d35e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d360:	f002 ff3a 	bl	80101d8 <__ssprint_r>
 800d364:	2800      	cmp	r0, #0
 800d366:	d100      	bne.n	800d36a <_svfprintf_r+0x13be>
 800d368:	e551      	b.n	800ce0e <_svfprintf_r+0xe62>
 800d36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <_svfprintf_r+0x13c8>
 800d370:	f7ff f845 	bl	800c3fe <_svfprintf_r+0x452>
 800d374:	0019      	movs	r1, r3
 800d376:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d378:	f7fd fd80 	bl	800ae7c <_free_r>
 800d37c:	f7ff f83f 	bl	800c3fe <_svfprintf_r+0x452>
 800d380:	3210      	adds	r2, #16
 800d382:	607d      	str	r5, [r7, #4]
 800d384:	922e      	str	r2, [sp, #184]	; 0xb8
 800d386:	932d      	str	r3, [sp, #180]	; 0xb4
 800d388:	3708      	adds	r7, #8
 800d38a:	2b07      	cmp	r3, #7
 800d38c:	dd07      	ble.n	800d39e <_svfprintf_r+0x13f2>
 800d38e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d390:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d392:	aa2c      	add	r2, sp, #176	; 0xb0
 800d394:	f002 ff20 	bl	80101d8 <__ssprint_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1e6      	bne.n	800d36a <_svfprintf_r+0x13be>
 800d39c:	af2f      	add	r7, sp, #188	; 0xbc
 800d39e:	3c10      	subs	r4, #16
 800d3a0:	e7cd      	b.n	800d33e <_svfprintf_r+0x1392>
 800d3a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d3a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3a6:	f7fd fd69 	bl	800ae7c <_free_r>
 800d3aa:	e549      	b.n	800ce40 <_svfprintf_r+0xe94>
 800d3ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <_svfprintf_r+0x140a>
 800d3b2:	f7ff f824 	bl	800c3fe <_svfprintf_r+0x452>
 800d3b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800d3bc:	f002 ff0c 	bl	80101d8 <__ssprint_r>
 800d3c0:	f7ff f81d 	bl	800c3fe <_svfprintf_r+0x452>
 800d3c4:	0034      	movs	r4, r6
 800d3c6:	2a00      	cmp	r2, #0
 800d3c8:	d101      	bne.n	800d3ce <_svfprintf_r+0x1422>
 800d3ca:	f7fe ff8c 	bl	800c2e6 <_svfprintf_r+0x33a>
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d101      	bne.n	800d3d6 <_svfprintf_r+0x142a>
 800d3d2:	f7ff fc01 	bl	800cbd8 <_svfprintf_r+0xc2c>
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d100      	bne.n	800d3dc <_svfprintf_r+0x1430>
 800d3da:	e459      	b.n	800cc90 <_svfprintf_r+0xce4>
 800d3dc:	2507      	movs	r5, #7
 800d3de:	ab58      	add	r3, sp, #352	; 0x160
 800d3e0:	9308      	str	r3, [sp, #32]
 800d3e2:	9a08      	ldr	r2, [sp, #32]
 800d3e4:	0013      	movs	r3, r2
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	9308      	str	r3, [sp, #32]
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	9908      	ldr	r1, [sp, #32]
 800d3ee:	402b      	ands	r3, r5
 800d3f0:	3330      	adds	r3, #48	; 0x30
 800d3f2:	700b      	strb	r3, [r1, #0]
 800d3f4:	9907      	ldr	r1, [sp, #28]
 800d3f6:	074e      	lsls	r6, r1, #29
 800d3f8:	9906      	ldr	r1, [sp, #24]
 800d3fa:	08c8      	lsrs	r0, r1, #3
 800d3fc:	9907      	ldr	r1, [sp, #28]
 800d3fe:	4306      	orrs	r6, r0
 800d400:	08c9      	lsrs	r1, r1, #3
 800d402:	9107      	str	r1, [sp, #28]
 800d404:	0031      	movs	r1, r6
 800d406:	9807      	ldr	r0, [sp, #28]
 800d408:	9606      	str	r6, [sp, #24]
 800d40a:	4301      	orrs	r1, r0
 800d40c:	d1e9      	bne.n	800d3e2 <_svfprintf_r+0x1436>
 800d40e:	07e1      	lsls	r1, r4, #31
 800d410:	d400      	bmi.n	800d414 <_svfprintf_r+0x1468>
 800d412:	e42a      	b.n	800cc6a <_svfprintf_r+0xcbe>
 800d414:	2b30      	cmp	r3, #48	; 0x30
 800d416:	d100      	bne.n	800d41a <_svfprintf_r+0x146e>
 800d418:	e427      	b.n	800cc6a <_svfprintf_r+0xcbe>
 800d41a:	2130      	movs	r1, #48	; 0x30
 800d41c:	9b08      	ldr	r3, [sp, #32]
 800d41e:	3b01      	subs	r3, #1
 800d420:	7019      	strb	r1, [r3, #0]
 800d422:	1e93      	subs	r3, r2, #2
 800d424:	9308      	str	r3, [sp, #32]
 800d426:	e420      	b.n	800cc6a <_svfprintf_r+0xcbe>
 800d428:	08013298 	.word	0x08013298
 800d42c:	08013288 	.word	0x08013288

0800d430 <__ssvfscanf_r>:
 800d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d432:	4ca7      	ldr	r4, [pc, #668]	; (800d6d0 <__ssvfscanf_r+0x2a0>)
 800d434:	44a5      	add	sp, r4
 800d436:	af02      	add	r7, sp, #8
 800d438:	633b      	str	r3, [r7, #48]	; 0x30
 800d43a:	000b      	movs	r3, r1
 800d43c:	6378      	str	r0, [r7, #52]	; 0x34
 800d43e:	6479      	str	r1, [r7, #68]	; 0x44
 800d440:	61ba      	str	r2, [r7, #24]
 800d442:	220c      	movs	r2, #12
 800d444:	5e9a      	ldrsh	r2, [r3, r2]
 800d446:	2380      	movs	r3, #128	; 0x80
 800d448:	019b      	lsls	r3, r3, #6
 800d44a:	421a      	tst	r2, r3
 800d44c:	d105      	bne.n	800d45a <__ssvfscanf_r+0x2a>
 800d44e:	4313      	orrs	r3, r2
 800d450:	818b      	strh	r3, [r1, #12]
 800d452:	4aa0      	ldr	r2, [pc, #640]	; (800d6d4 <__ssvfscanf_r+0x2a4>)
 800d454:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d456:	4013      	ands	r3, r2
 800d458:	664b      	str	r3, [r1, #100]	; 0x64
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	643b      	str	r3, [r7, #64]	; 0x40
 800d460:	62bb      	str	r3, [r7, #40]	; 0x28
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
 800d464:	63bb      	str	r3, [r7, #56]	; 0x38
 800d466:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	69ba      	ldr	r2, [r7, #24]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	3201      	adds	r2, #1
 800d470:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d472:	61ba      	str	r2, [r7, #24]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d100      	bne.n	800d47a <__ssvfscanf_r+0x4a>
 800d478:	e0d7      	b.n	800d62a <__ssvfscanf_r+0x1fa>
 800d47a:	2608      	movs	r6, #8
 800d47c:	2108      	movs	r1, #8
 800d47e:	4a96      	ldr	r2, [pc, #600]	; (800d6d8 <__ssvfscanf_r+0x2a8>)
 800d480:	5cd2      	ldrb	r2, [r2, r3]
 800d482:	4016      	ands	r6, r2
 800d484:	420a      	tst	r2, r1
 800d486:	d01d      	beq.n	800d4c4 <__ssvfscanf_r+0x94>
 800d488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd12      	ble.n	800d4b6 <__ssvfscanf_r+0x86>
 800d490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d492:	4991      	ldr	r1, [pc, #580]	; (800d6d8 <__ssvfscanf_r+0x2a8>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	781a      	ldrb	r2, [r3, #0]
 800d498:	5c8a      	ldrb	r2, [r1, r2]
 800d49a:	2108      	movs	r1, #8
 800d49c:	420a      	tst	r2, r1
 800d49e:	d0e3      	beq.n	800d468 <__ssvfscanf_r+0x38>
 800d4a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	63ba      	str	r2, [r7, #56]	; 0x38
 800d4a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	6852      	ldr	r2, [r2, #4]
 800d4ae:	600b      	str	r3, [r1, #0]
 800d4b0:	3a01      	subs	r2, #1
 800d4b2:	604a      	str	r2, [r1, #4]
 800d4b4:	e7e8      	b.n	800d488 <__ssvfscanf_r+0x58>
 800d4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4ba:	f002 ff4d 	bl	8010358 <__ssrefill_r>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0e6      	beq.n	800d490 <__ssvfscanf_r+0x60>
 800d4c2:	e7d1      	b.n	800d468 <__ssvfscanf_r+0x38>
 800d4c4:	2b25      	cmp	r3, #37	; 0x25
 800d4c6:	d165      	bne.n	800d594 <__ssvfscanf_r+0x164>
 800d4c8:	250a      	movs	r5, #10
 800d4ca:	2480      	movs	r4, #128	; 0x80
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	63fe      	str	r6, [r7, #60]	; 0x3c
 800d4d0:	3b16      	subs	r3, #22
 800d4d2:	69b9      	ldr	r1, [r7, #24]
 800d4d4:	3101      	adds	r1, #1
 800d4d6:	61b9      	str	r1, [r7, #24]
 800d4d8:	7811      	ldrb	r1, [r2, #0]
 800d4da:	0008      	movs	r0, r1
 800d4dc:	3825      	subs	r0, #37	; 0x25
 800d4de:	2855      	cmp	r0, #85	; 0x55
 800d4e0:	d900      	bls.n	800d4e4 <__ssvfscanf_r+0xb4>
 800d4e2:	e170      	b.n	800d7c6 <__ssvfscanf_r+0x396>
 800d4e4:	f7f2 fe20 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d4e8:	016f0056 	.word	0x016f0056
 800d4ec:	016f016f 	.word	0x016f016f
 800d4f0:	0081016f 	.word	0x0081016f
 800d4f4:	016f016f 	.word	0x016f016f
 800d4f8:	016f016f 	.word	0x016f016f
 800d4fc:	00b8016f 	.word	0x00b8016f
 800d500:	00b800b8 	.word	0x00b800b8
 800d504:	00b800b8 	.word	0x00b800b8
 800d508:	00b800b8 	.word	0x00b800b8
 800d50c:	00b800b8 	.word	0x00b800b8
 800d510:	016f00b8 	.word	0x016f00b8
 800d514:	016f016f 	.word	0x016f016f
 800d518:	016f016f 	.word	0x016f016f
 800d51c:	016f016f 	.word	0x016f016f
 800d520:	016f00d8 	.word	0x016f00d8
 800d524:	00c1010a 	.word	0x00c1010a
 800d528:	00d800d8 	.word	0x00d800d8
 800d52c:	016f00d8 	.word	0x016f00d8
 800d530:	016f016f 	.word	0x016f016f
 800d534:	009f016f 	.word	0x009f016f
 800d538:	016f016f 	.word	0x016f016f
 800d53c:	016f00c9 	.word	0x016f00c9
 800d540:	016f016f 	.word	0x016f016f
 800d544:	016f00f0 	.word	0x016f00f0
 800d548:	016f016f 	.word	0x016f016f
 800d54c:	00d1016f 	.word	0x00d1016f
 800d550:	016f016f 	.word	0x016f016f
 800d554:	016f00fe 	.word	0x016f00fe
 800d558:	016f016f 	.word	0x016f016f
 800d55c:	016f016f 	.word	0x016f016f
 800d560:	016f00d8 	.word	0x016f00d8
 800d564:	00c3010c 	.word	0x00c3010c
 800d568:	00d800d8 	.word	0x00d800d8
 800d56c:	009400d8 	.word	0x009400d8
 800d570:	009f012f 	.word	0x009f012f
 800d574:	0088016f 	.word	0x0088016f
 800d578:	011200a9 	.word	0x011200a9
 800d57c:	011000cb 	.word	0x011000cb
 800d580:	016f016f 	.word	0x016f016f
 800d584:	00a600f2 	.word	0x00a600f2
 800d588:	016f00cf 	.word	0x016f00cf
 800d58c:	00d1016f 	.word	0x00d1016f
 800d590:	00a6016f 	.word	0x00a6016f
 800d594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	dd12      	ble.n	800d5c2 <__ssvfscanf_r+0x192>
 800d59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3a01      	subs	r2, #1
 800d5a4:	7819      	ldrb	r1, [r3, #0]
 800d5a6:	7812      	ldrb	r2, [r2, #0]
 800d5a8:	4291      	cmp	r1, r2
 800d5aa:	d13e      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d5ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5b0:	6852      	ldr	r2, [r2, #4]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	600b      	str	r3, [r1, #0]
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	3a01      	subs	r2, #1
 800d5ba:	604a      	str	r2, [r1, #4]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c0:	e752      	b.n	800d468 <__ssvfscanf_r+0x38>
 800d5c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5c6:	f002 fec7 	bl	8010358 <__ssrefill_r>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d0e6      	beq.n	800d59c <__ssvfscanf_r+0x16c>
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <__ssvfscanf_r+0x1ac>
 800d5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5d6:	899b      	ldrh	r3, [r3, #12]
 800d5d8:	065b      	lsls	r3, r3, #25
 800d5da:	d526      	bpl.n	800d62a <__ssvfscanf_r+0x1fa>
 800d5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d000      	beq.n	800d5e4 <__ssvfscanf_r+0x1b4>
 800d5e2:	e0f6      	b.n	800d7d2 <__ssvfscanf_r+0x3a2>
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5e8:	e104      	b.n	800d7f4 <__ssvfscanf_r+0x3c4>
 800d5ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5ec:	4332      	orrs	r2, r6
 800d5ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d5f0:	d11b      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d5f2:	2610      	movs	r6, #16
 800d5f4:	69ba      	ldr	r2, [r7, #24]
 800d5f6:	e76c      	b.n	800d4d2 <__ssvfscanf_r+0xa2>
 800d5f8:	421e      	tst	r6, r3
 800d5fa:	d116      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d5fc:	7851      	ldrb	r1, [r2, #1]
 800d5fe:	296c      	cmp	r1, #108	; 0x6c
 800d600:	d103      	bne.n	800d60a <__ssvfscanf_r+0x1da>
 800d602:	3202      	adds	r2, #2
 800d604:	61ba      	str	r2, [r7, #24]
 800d606:	2202      	movs	r2, #2
 800d608:	e000      	b.n	800d60c <__ssvfscanf_r+0x1dc>
 800d60a:	2201      	movs	r2, #1
 800d60c:	4316      	orrs	r6, r2
 800d60e:	e7f1      	b.n	800d5f4 <__ssvfscanf_r+0x1c4>
 800d610:	421e      	tst	r6, r3
 800d612:	d10a      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d614:	7851      	ldrb	r1, [r2, #1]
 800d616:	2968      	cmp	r1, #104	; 0x68
 800d618:	d103      	bne.n	800d622 <__ssvfscanf_r+0x1f2>
 800d61a:	3202      	adds	r2, #2
 800d61c:	61ba      	str	r2, [r7, #24]
 800d61e:	2208      	movs	r2, #8
 800d620:	e7f4      	b.n	800d60c <__ssvfscanf_r+0x1dc>
 800d622:	2204      	movs	r2, #4
 800d624:	e7f2      	b.n	800d60c <__ssvfscanf_r+0x1dc>
 800d626:	421e      	tst	r6, r3
 800d628:	d0ed      	beq.n	800d606 <__ssvfscanf_r+0x1d6>
 800d62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d000      	beq.n	800d632 <__ssvfscanf_r+0x202>
 800d630:	e0da      	b.n	800d7e8 <__ssvfscanf_r+0x3b8>
 800d632:	e0df      	b.n	800d7f4 <__ssvfscanf_r+0x3c4>
 800d634:	421e      	tst	r6, r3
 800d636:	d0dd      	beq.n	800d5f4 <__ssvfscanf_r+0x1c4>
 800d638:	e7f7      	b.n	800d62a <__ssvfscanf_r+0x1fa>
 800d63a:	228f      	movs	r2, #143	; 0x8f
 800d63c:	218f      	movs	r1, #143	; 0x8f
 800d63e:	4032      	ands	r2, r6
 800d640:	420e      	tst	r6, r1
 800d642:	d1f2      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d646:	2900      	cmp	r1, #0
 800d648:	d104      	bne.n	800d654 <__ssvfscanf_r+0x224>
 800d64a:	b082      	sub	sp, #8
 800d64c:	a902      	add	r1, sp, #8
 800d64e:	6439      	str	r1, [r7, #64]	; 0x40
 800d650:	600a      	str	r2, [r1, #0]
 800d652:	604a      	str	r2, [r1, #4]
 800d654:	4326      	orrs	r6, r4
 800d656:	e7cd      	b.n	800d5f4 <__ssvfscanf_r+0x1c4>
 800d658:	228f      	movs	r2, #143	; 0x8f
 800d65a:	4216      	tst	r6, r2
 800d65c:	d1e5      	bne.n	800d62a <__ssvfscanf_r+0x1fa>
 800d65e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d660:	436a      	muls	r2, r5
 800d662:	3a30      	subs	r2, #48	; 0x30
 800d664:	188a      	adds	r2, r1, r2
 800d666:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d668:	e7c4      	b.n	800d5f4 <__ssvfscanf_r+0x1c4>
 800d66a:	2301      	movs	r3, #1
 800d66c:	431e      	orrs	r6, r3
 800d66e:	4b1b      	ldr	r3, [pc, #108]	; (800d6dc <__ssvfscanf_r+0x2ac>)
 800d670:	617b      	str	r3, [r7, #20]
 800d672:	230a      	movs	r3, #10
 800d674:	2403      	movs	r4, #3
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
 800d678:	e00f      	b.n	800d69a <__ssvfscanf_r+0x26a>
 800d67a:	2301      	movs	r3, #1
 800d67c:	431e      	orrs	r6, r3
 800d67e:	4b18      	ldr	r3, [pc, #96]	; (800d6e0 <__ssvfscanf_r+0x2b0>)
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	2308      	movs	r3, #8
 800d684:	e7f6      	b.n	800d674 <__ssvfscanf_r+0x244>
 800d686:	4b16      	ldr	r3, [pc, #88]	; (800d6e0 <__ssvfscanf_r+0x2b0>)
 800d688:	e7f2      	b.n	800d670 <__ssvfscanf_r+0x240>
 800d68a:	2380      	movs	r3, #128	; 0x80
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	431e      	orrs	r6, r3
 800d690:	4b13      	ldr	r3, [pc, #76]	; (800d6e0 <__ssvfscanf_r+0x2b0>)
 800d692:	617b      	str	r3, [r7, #20]
 800d694:	2310      	movs	r3, #16
 800d696:	e7ed      	b.n	800d674 <__ssvfscanf_r+0x244>
 800d698:	2404      	movs	r4, #4
 800d69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dd55      	ble.n	800d74e <__ssvfscanf_r+0x31e>
 800d6a2:	0673      	lsls	r3, r6, #25
 800d6a4:	d407      	bmi.n	800d6b6 <__ssvfscanf_r+0x286>
 800d6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a8:	490b      	ldr	r1, [pc, #44]	; (800d6d8 <__ssvfscanf_r+0x2a8>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	781a      	ldrb	r2, [r3, #0]
 800d6ae:	5c8a      	ldrb	r2, [r1, r2]
 800d6b0:	2108      	movs	r1, #8
 800d6b2:	420a      	tst	r2, r1
 800d6b4:	d152      	bne.n	800d75c <__ssvfscanf_r+0x32c>
 800d6b6:	1e60      	subs	r0, r4, #1
 800d6b8:	2803      	cmp	r0, #3
 800d6ba:	d863      	bhi.n	800d784 <__ssvfscanf_r+0x354>
 800d6bc:	f7f2 fd34 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d6c0:	03bd01da 	.word	0x03bd01da
 800d6c4:	068a0579 	.word	0x068a0579
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	431e      	orrs	r6, r3
 800d6cc:	2402      	movs	r4, #2
 800d6ce:	e7e4      	b.n	800d69a <__ssvfscanf_r+0x26a>
 800d6d0:	fffffd34 	.word	0xfffffd34
 800d6d4:	ffffdfff 	.word	0xffffdfff
 800d6d8:	08012f81 	.word	0x08012f81
 800d6dc:	0800a881 	.word	0x0800a881
 800d6e0:	0800fe89 	.word	0x0800fe89
 800d6e4:	2248      	movs	r2, #72	; 0x48
 800d6e6:	2318      	movs	r3, #24
 800d6e8:	189b      	adds	r3, r3, r2
 800d6ea:	19d8      	adds	r0, r3, r7
 800d6ec:	69b9      	ldr	r1, [r7, #24]
 800d6ee:	f001 f9d7 	bl	800eaa0 <__sccl>
 800d6f2:	2340      	movs	r3, #64	; 0x40
 800d6f4:	2401      	movs	r4, #1
 800d6f6:	61b8      	str	r0, [r7, #24]
 800d6f8:	431e      	orrs	r6, r3
 800d6fa:	e7ce      	b.n	800d69a <__ssvfscanf_r+0x26a>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	431e      	orrs	r6, r3
 800d700:	2340      	movs	r3, #64	; 0x40
 800d702:	2400      	movs	r4, #0
 800d704:	431e      	orrs	r6, r3
 800d706:	e7c8      	b.n	800d69a <__ssvfscanf_r+0x26a>
 800d708:	2388      	movs	r3, #136	; 0x88
 800d70a:	e7bf      	b.n	800d68c <__ssvfscanf_r+0x25c>
 800d70c:	06f3      	lsls	r3, r6, #27
 800d70e:	d500      	bpl.n	800d712 <__ssvfscanf_r+0x2e2>
 800d710:	e6aa      	b.n	800d468 <__ssvfscanf_r+0x38>
 800d712:	2108      	movs	r1, #8
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	cb04      	ldmia	r3!, {r2}
 800d718:	420e      	tst	r6, r1
 800d71a:	d003      	beq.n	800d724 <__ssvfscanf_r+0x2f4>
 800d71c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d71e:	7011      	strb	r1, [r2, #0]
 800d720:	633b      	str	r3, [r7, #48]	; 0x30
 800d722:	e6a1      	b.n	800d468 <__ssvfscanf_r+0x38>
 800d724:	0771      	lsls	r1, r6, #29
 800d726:	d502      	bpl.n	800d72e <__ssvfscanf_r+0x2fe>
 800d728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d72a:	8011      	strh	r1, [r2, #0]
 800d72c:	e7f8      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800d72e:	07f1      	lsls	r1, r6, #31
 800d730:	d502      	bpl.n	800d738 <__ssvfscanf_r+0x308>
 800d732:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d734:	6011      	str	r1, [r2, #0]
 800d736:	e7f3      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800d738:	07b6      	lsls	r6, r6, #30
 800d73a:	d5fa      	bpl.n	800d732 <__ssvfscanf_r+0x302>
 800d73c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d73e:	6011      	str	r1, [r2, #0]
 800d740:	17c9      	asrs	r1, r1, #31
 800d742:	6051      	str	r1, [r2, #4]
 800d744:	e7ec      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800d746:	4ba2      	ldr	r3, [pc, #648]	; (800d9d0 <__ssvfscanf_r+0x5a0>)
 800d748:	617b      	str	r3, [r7, #20]
 800d74a:	2300      	movs	r3, #0
 800d74c:	e792      	b.n	800d674 <__ssvfscanf_r+0x244>
 800d74e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d752:	f002 fe01 	bl	8010358 <__ssrefill_r>
 800d756:	2800      	cmp	r0, #0
 800d758:	d0a3      	beq.n	800d6a2 <__ssvfscanf_r+0x272>
 800d75a:	e738      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d75e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d760:	3201      	adds	r2, #1
 800d762:	63ba      	str	r2, [r7, #56]	; 0x38
 800d764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d766:	6852      	ldr	r2, [r2, #4]
 800d768:	3a01      	subs	r2, #1
 800d76a:	604a      	str	r2, [r1, #4]
 800d76c:	2a00      	cmp	r2, #0
 800d76e:	dd02      	ble.n	800d776 <__ssvfscanf_r+0x346>
 800d770:	3301      	adds	r3, #1
 800d772:	600b      	str	r3, [r1, #0]
 800d774:	e797      	b.n	800d6a6 <__ssvfscanf_r+0x276>
 800d776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d778:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d77a:	f002 fded 	bl	8010358 <__ssrefill_r>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d091      	beq.n	800d6a6 <__ssvfscanf_r+0x276>
 800d782:	e724      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d786:	2301      	movs	r3, #1
 800d788:	2a00      	cmp	r2, #0
 800d78a:	d100      	bne.n	800d78e <__ssvfscanf_r+0x35e>
 800d78c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d78e:	2210      	movs	r2, #16
 800d790:	0034      	movs	r4, r6
 800d792:	4032      	ands	r2, r6
 800d794:	623a      	str	r2, [r7, #32]
 800d796:	401c      	ands	r4, r3
 800d798:	421e      	tst	r6, r3
 800d79a:	d100      	bne.n	800d79e <__ssvfscanf_r+0x36e>
 800d79c:	e0f3      	b.n	800d986 <__ssvfscanf_r+0x556>
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	d000      	beq.n	800d7a4 <__ssvfscanf_r+0x374>
 800d7a2:	e0b6      	b.n	800d912 <__ssvfscanf_r+0x4e2>
 800d7a4:	2080      	movs	r0, #128	; 0x80
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	cb10      	ldmia	r3!, {r4}
 800d7aa:	613b      	str	r3, [r7, #16]
 800d7ac:	4206      	tst	r6, r0
 800d7ae:	d100      	bne.n	800d7b2 <__ssvfscanf_r+0x382>
 800d7b0:	e0b7      	b.n	800d922 <__ssvfscanf_r+0x4f2>
 800d7b2:	2c00      	cmp	r4, #0
 800d7b4:	d007      	beq.n	800d7c6 <__ssvfscanf_r+0x396>
 800d7b6:	f7fb ff6d 	bl	8009694 <malloc>
 800d7ba:	6338      	str	r0, [r7, #48]	; 0x30
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d11f      	bne.n	800d800 <__ssvfscanf_r+0x3d0>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	425b      	negs	r3, r3
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d013      	beq.n	800d7f4 <__ssvfscanf_r+0x3c4>
 800d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	d10a      	bne.n	800d7e8 <__ssvfscanf_r+0x3b8>
 800d7d2:	2400      	movs	r4, #0
 800d7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7d6:	681d      	ldr	r5, [r3, #0]
 800d7d8:	88db      	ldrh	r3, [r3, #6]
 800d7da:	42a3      	cmp	r3, r4
 800d7dc:	dd01      	ble.n	800d7e2 <__ssvfscanf_r+0x3b2>
 800d7de:	f001 f82a 	bl	800e836 <__ssvfscanf_r+0x1406>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	425b      	negs	r3, r3
 800d7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ea:	6818      	ldr	r0, [r3, #0]
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d001      	beq.n	800d7f4 <__ssvfscanf_r+0x3c4>
 800d7f0:	f7fb ff5a 	bl	80096a8 <free>
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f8:	23b1      	movs	r3, #177	; 0xb1
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	449d      	add	sp, r3
 800d7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d806:	88de      	ldrh	r6, [r3, #6]
 800d808:	889d      	ldrh	r5, [r3, #4]
 800d80a:	42ae      	cmp	r6, r5
 800d80c:	d30e      	bcc.n	800d82c <__ssvfscanf_r+0x3fc>
 800d80e:	4b71      	ldr	r3, [pc, #452]	; (800d9d4 <__ssvfscanf_r+0x5a4>)
 800d810:	429d      	cmp	r5, r3
 800d812:	d8d5      	bhi.n	800d7c0 <__ssvfscanf_r+0x390>
 800d814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d816:	3508      	adds	r5, #8
 800d818:	b2ad      	uxth	r5, r5
 800d81a:	6818      	ldr	r0, [r3, #0]
 800d81c:	00a9      	lsls	r1, r5, #2
 800d81e:	f002 f901 	bl	800fa24 <realloc>
 800d822:	2800      	cmp	r0, #0
 800d824:	d0cc      	beq.n	800d7c0 <__ssvfscanf_r+0x390>
 800d826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d828:	6018      	str	r0, [r3, #0]
 800d82a:	809d      	strh	r5, [r3, #4]
 800d82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82e:	1c72      	adds	r2, r6, #1
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	00b6      	lsls	r6, r6, #2
 800d834:	50f4      	str	r4, [r6, r3]
 800d836:	2320      	movs	r3, #32
 800d838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d83a:	0026      	movs	r6, r4
 800d83c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d83e:	80ca      	strh	r2, [r1, #6]
 800d840:	61fb      	str	r3, [r7, #28]
 800d842:	2500      	movs	r5, #0
 800d844:	f7fd f9fe 	bl	800ac44 <__locale_mb_cur_max>
 800d848:	42a8      	cmp	r0, r5
 800d84a:	d100      	bne.n	800d84e <__ssvfscanf_r+0x41e>
 800d84c:	e6bf      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d84e:	1c6a      	adds	r2, r5, #1
 800d850:	60fa      	str	r2, [r7, #12]
 800d852:	228c      	movs	r2, #140	; 0x8c
 800d854:	2048      	movs	r0, #72	; 0x48
 800d856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d858:	0052      	lsls	r2, r2, #1
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	1812      	adds	r2, r2, r0
 800d85e:	7819      	ldrb	r1, [r3, #0]
 800d860:	19d2      	adds	r2, r2, r7
 800d862:	5551      	strb	r1, [r2, r5]
 800d864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d868:	6852      	ldr	r2, [r2, #4]
 800d86a:	3301      	adds	r3, #1
 800d86c:	600b      	str	r3, [r1, #0]
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	3a01      	subs	r2, #1
 800d872:	604a      	str	r2, [r1, #4]
 800d874:	2b03      	cmp	r3, #3
 800d876:	d102      	bne.n	800d87e <__ssvfscanf_r+0x44e>
 800d878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d87a:	2b04      	cmp	r3, #4
 800d87c:	d007      	beq.n	800d88e <__ssvfscanf_r+0x45e>
 800d87e:	2048      	movs	r0, #72	; 0x48
 800d880:	2310      	movs	r3, #16
 800d882:	181b      	adds	r3, r3, r0
 800d884:	2208      	movs	r2, #8
 800d886:	2100      	movs	r1, #0
 800d888:	19d8      	adds	r0, r3, r7
 800d88a:	f7fd f997 	bl	800abbc <memset>
 800d88e:	2148      	movs	r1, #72	; 0x48
 800d890:	2310      	movs	r3, #16
 800d892:	228c      	movs	r2, #140	; 0x8c
 800d894:	185b      	adds	r3, r3, r1
 800d896:	0052      	lsls	r2, r2, #1
 800d898:	19db      	adds	r3, r3, r7
 800d89a:	1852      	adds	r2, r2, r1
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	0021      	movs	r1, r4
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8a4:	19d2      	adds	r2, r2, r7
 800d8a6:	f002 fc57 	bl	8010158 <_mbrtowc_r>
 800d8aa:	0003      	movs	r3, r0
 800d8ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	d100      	bne.n	800d8b4 <__ssvfscanf_r+0x484>
 800d8b2:	e68c      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d139      	bne.n	800d92c <__ssvfscanf_r+0x4fc>
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d100      	bne.n	800d8c0 <__ssvfscanf_r+0x490>
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	4694      	mov	ip, r2
 800d8c6:	4463      	add	r3, ip
 800d8c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d102      	bne.n	800d8d6 <__ssvfscanf_r+0x4a6>
 800d8d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8d2:	2b04      	cmp	r3, #4
 800d8d4:	d002      	beq.n	800d8dc <__ssvfscanf_r+0x4ac>
 800d8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d115      	bne.n	800d90e <__ssvfscanf_r+0x4de>
 800d8e2:	2e00      	cmp	r6, #0
 800d8e4:	d012      	beq.n	800d90c <__ssvfscanf_r+0x4dc>
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	1ae5      	subs	r5, r4, r3
 800d8ec:	10ab      	asrs	r3, r5, #2
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d30c      	bcc.n	800d90c <__ssvfscanf_r+0x4dc>
 800d8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8f4:	00d1      	lsls	r1, r2, #3
 800d8f6:	f002 f895 	bl	800fa24 <realloc>
 800d8fa:	6338      	str	r0, [r7, #48]	; 0x30
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d100      	bne.n	800d902 <__ssvfscanf_r+0x4d2>
 800d900:	e75e      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	1944      	adds	r4, r0, r5
 800d906:	005b      	lsls	r3, r3, #1
 800d908:	6030      	str	r0, [r6, #0]
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	3404      	adds	r4, #4
 800d90e:	2500      	movs	r5, #0
 800d910:	e010      	b.n	800d934 <__ssvfscanf_r+0x504>
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	613b      	str	r3, [r7, #16]
 800d916:	2300      	movs	r3, #0
 800d918:	001e      	movs	r6, r3
 800d91a:	001c      	movs	r4, r3
 800d91c:	61fb      	str	r3, [r7, #28]
 800d91e:	633b      	str	r3, [r7, #48]	; 0x30
 800d920:	e78f      	b.n	800d842 <__ssvfscanf_r+0x412>
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	001e      	movs	r6, r3
 800d926:	61fb      	str	r3, [r7, #28]
 800d928:	633b      	str	r3, [r7, #48]	; 0x30
 800d92a:	e78a      	b.n	800d842 <__ssvfscanf_r+0x412>
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	68fd      	ldr	r5, [r7, #12]
 800d930:	3302      	adds	r3, #2
 800d932:	d1c5      	bne.n	800d8c0 <__ssvfscanf_r+0x490>
 800d934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	dc12      	bgt.n	800d962 <__ssvfscanf_r+0x532>
 800d93c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d93e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d940:	f002 fd0a 	bl	8010358 <__ssrefill_r>
 800d944:	2800      	cmp	r0, #0
 800d946:	d00c      	beq.n	800d962 <__ssvfscanf_r+0x532>
 800d948:	2d00      	cmp	r5, #0
 800d94a:	d000      	beq.n	800d94e <__ssvfscanf_r+0x51e>
 800d94c:	e63f      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d94e:	2e00      	cmp	r6, #0
 800d950:	d10c      	bne.n	800d96c <__ssvfscanf_r+0x53c>
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	425a      	negs	r2, r3
 800d956:	4153      	adcs	r3, r2
 800d958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d95a:	18d3      	adds	r3, r2, r3
 800d95c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	e6de      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800d962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d000      	beq.n	800d96a <__ssvfscanf_r+0x53a>
 800d968:	e76c      	b.n	800d844 <__ssvfscanf_r+0x414>
 800d96a:	e7f0      	b.n	800d94e <__ssvfscanf_r+0x51e>
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	69fa      	ldr	r2, [r7, #28]
 800d970:	1ae1      	subs	r1, r4, r3
 800d972:	108b      	asrs	r3, r1, #2
 800d974:	429a      	cmp	r2, r3
 800d976:	d9ec      	bls.n	800d952 <__ssvfscanf_r+0x522>
 800d978:	6830      	ldr	r0, [r6, #0]
 800d97a:	f002 f853 	bl	800fa24 <realloc>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d0e7      	beq.n	800d952 <__ssvfscanf_r+0x522>
 800d982:	6030      	str	r0, [r6, #0]
 800d984:	e7e5      	b.n	800d952 <__ssvfscanf_r+0x522>
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d025      	beq.n	800d9d8 <__ssvfscanf_r+0x5a8>
 800d98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	4299      	cmp	r1, r3
 800d998:	dd11      	ble.n	800d9be <__ssvfscanf_r+0x58e>
 800d99a:	1ac9      	subs	r1, r1, r3
 800d99c:	18d2      	adds	r2, r2, r3
 800d99e:	18e4      	adds	r4, r4, r3
 800d9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d9a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9a6:	0019      	movs	r1, r3
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	f002 fcd5 	bl	8010358 <__ssrefill_r>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d0ec      	beq.n	800d98c <__ssvfscanf_r+0x55c>
 800d9b2:	2c00      	cmp	r4, #0
 800d9b4:	d100      	bne.n	800d9b8 <__ssvfscanf_r+0x588>
 800d9b6:	e60a      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	191b      	adds	r3, r3, r4
 800d9bc:	e5ff      	b.n	800d5be <__ssvfscanf_r+0x18e>
 800d9be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9c0:	1a5b      	subs	r3, r3, r1
 800d9c2:	1864      	adds	r4, r4, r1
 800d9c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9c6:	604b      	str	r3, [r1, #4]
 800d9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ca:	18d2      	adds	r2, r2, r3
 800d9cc:	600a      	str	r2, [r1, #0]
 800d9ce:	e7f3      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800d9d0:	0800a881 	.word	0x0800a881
 800d9d4:	0000fff6 	.word	0x0000fff6
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	0034      	movs	r4, r6
 800d9dc:	cb20      	ldmia	r3!, {r5}
 800d9de:	633b      	str	r3, [r7, #48]	; 0x30
 800d9e0:	2380      	movs	r3, #128	; 0x80
 800d9e2:	401c      	ands	r4, r3
 800d9e4:	421e      	tst	r6, r3
 800d9e6:	d028      	beq.n	800da3a <__ssvfscanf_r+0x60a>
 800d9e8:	2d00      	cmp	r5, #0
 800d9ea:	d100      	bne.n	800d9ee <__ssvfscanf_r+0x5be>
 800d9ec:	e61d      	b.n	800d62a <__ssvfscanf_r+0x1fa>
 800d9ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9f0:	f7fb fe50 	bl	8009694 <malloc>
 800d9f4:	6238      	str	r0, [r7, #32]
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d100      	bne.n	800d9fc <__ssvfscanf_r+0x5cc>
 800d9fa:	e5ef      	b.n	800d5dc <__ssvfscanf_r+0x1ac>
 800d9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fe:	6028      	str	r0, [r5, #0]
 800da00:	88de      	ldrh	r6, [r3, #6]
 800da02:	889c      	ldrh	r4, [r3, #4]
 800da04:	6818      	ldr	r0, [r3, #0]
 800da06:	42a6      	cmp	r6, r4
 800da08:	d30e      	bcc.n	800da28 <__ssvfscanf_r+0x5f8>
 800da0a:	4bbf      	ldr	r3, [pc, #764]	; (800dd08 <__ssvfscanf_r+0x8d8>)
 800da0c:	429c      	cmp	r4, r3
 800da0e:	d900      	bls.n	800da12 <__ssvfscanf_r+0x5e2>
 800da10:	e6df      	b.n	800d7d2 <__ssvfscanf_r+0x3a2>
 800da12:	3408      	adds	r4, #8
 800da14:	b2a4      	uxth	r4, r4
 800da16:	00a1      	lsls	r1, r4, #2
 800da18:	f002 f804 	bl	800fa24 <realloc>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d100      	bne.n	800da22 <__ssvfscanf_r+0x5f2>
 800da20:	e6d7      	b.n	800d7d2 <__ssvfscanf_r+0x3a2>
 800da22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da24:	6018      	str	r0, [r3, #0]
 800da26:	809c      	strh	r4, [r3, #4]
 800da28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2a:	1c72      	adds	r2, r6, #1
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da30:	00b6      	lsls	r6, r6, #2
 800da32:	002c      	movs	r4, r5
 800da34:	50f5      	str	r5, [r6, r3]
 800da36:	6a3d      	ldr	r5, [r7, #32]
 800da38:	80ca      	strh	r2, [r1, #6]
 800da3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da3c:	0029      	movs	r1, r5
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	2201      	movs	r2, #1
 800da42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da46:	f002 fca6 	bl	8010396 <_sfread_r>
 800da4a:	1e05      	subs	r5, r0, #0
 800da4c:	d100      	bne.n	800da50 <__ssvfscanf_r+0x620>
 800da4e:	e5be      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800da50:	2c00      	cmp	r4, #0
 800da52:	d009      	beq.n	800da68 <__ssvfscanf_r+0x638>
 800da54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da56:	4283      	cmp	r3, r0
 800da58:	d906      	bls.n	800da68 <__ssvfscanf_r+0x638>
 800da5a:	0001      	movs	r1, r0
 800da5c:	6820      	ldr	r0, [r4, #0]
 800da5e:	f001 ffe1 	bl	800fa24 <realloc>
 800da62:	2800      	cmp	r0, #0
 800da64:	d000      	beq.n	800da68 <__ssvfscanf_r+0x638>
 800da66:	6020      	str	r0, [r4, #0]
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	195b      	adds	r3, r3, r5
 800da6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	3301      	adds	r3, #1
 800da72:	e4f8      	b.n	800d466 <__ssvfscanf_r+0x36>
 800da74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d101      	bne.n	800da7e <__ssvfscanf_r+0x64e>
 800da7a:	3b01      	subs	r3, #1
 800da7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da7e:	2210      	movs	r2, #16
 800da80:	2301      	movs	r3, #1
 800da82:	0034      	movs	r4, r6
 800da84:	4032      	ands	r2, r6
 800da86:	401c      	ands	r4, r3
 800da88:	623a      	str	r2, [r7, #32]
 800da8a:	421e      	tst	r6, r3
 800da8c:	d100      	bne.n	800da90 <__ssvfscanf_r+0x660>
 800da8e:	e116      	b.n	800dcbe <__ssvfscanf_r+0x88e>
 800da90:	2a00      	cmp	r2, #0
 800da92:	d000      	beq.n	800da96 <__ssvfscanf_r+0x666>
 800da94:	e0b0      	b.n	800dbf8 <__ssvfscanf_r+0x7c8>
 800da96:	2080      	movs	r0, #128	; 0x80
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	cb10      	ldmia	r3!, {r4}
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	4206      	tst	r6, r0
 800daa0:	d100      	bne.n	800daa4 <__ssvfscanf_r+0x674>
 800daa2:	e0b2      	b.n	800dc0a <__ssvfscanf_r+0x7da>
 800daa4:	2c00      	cmp	r4, #0
 800daa6:	d100      	bne.n	800daaa <__ssvfscanf_r+0x67a>
 800daa8:	e68d      	b.n	800d7c6 <__ssvfscanf_r+0x396>
 800daaa:	f7fb fdf3 	bl	8009694 <malloc>
 800daae:	6338      	str	r0, [r7, #48]	; 0x30
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d100      	bne.n	800dab6 <__ssvfscanf_r+0x686>
 800dab4:	e684      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dabc:	88de      	ldrh	r6, [r3, #6]
 800dabe:	889d      	ldrh	r5, [r3, #4]
 800dac0:	42ae      	cmp	r6, r5
 800dac2:	d310      	bcc.n	800dae6 <__ssvfscanf_r+0x6b6>
 800dac4:	4b90      	ldr	r3, [pc, #576]	; (800dd08 <__ssvfscanf_r+0x8d8>)
 800dac6:	429d      	cmp	r5, r3
 800dac8:	d900      	bls.n	800dacc <__ssvfscanf_r+0x69c>
 800daca:	e679      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800dacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dace:	3508      	adds	r5, #8
 800dad0:	b2ad      	uxth	r5, r5
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	00a9      	lsls	r1, r5, #2
 800dad6:	f001 ffa5 	bl	800fa24 <realloc>
 800dada:	2800      	cmp	r0, #0
 800dadc:	d100      	bne.n	800dae0 <__ssvfscanf_r+0x6b0>
 800dade:	e66f      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800dae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae2:	6018      	str	r0, [r3, #0]
 800dae4:	809d      	strh	r5, [r3, #4]
 800dae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae8:	1c72      	adds	r2, r6, #1
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	00b6      	lsls	r6, r6, #2
 800daee:	50f4      	str	r4, [r6, r3]
 800daf0:	2320      	movs	r3, #32
 800daf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800daf4:	0026      	movs	r6, r4
 800daf6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800daf8:	80ca      	strh	r2, [r1, #6]
 800dafa:	613b      	str	r3, [r7, #16]
 800dafc:	2500      	movs	r5, #0
 800dafe:	f7fd f8a1 	bl	800ac44 <__locale_mb_cur_max>
 800db02:	42a8      	cmp	r0, r5
 800db04:	d100      	bne.n	800db08 <__ssvfscanf_r+0x6d8>
 800db06:	e562      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800db08:	1c6a      	adds	r2, r5, #1
 800db0a:	61fa      	str	r2, [r7, #28]
 800db0c:	228c      	movs	r2, #140	; 0x8c
 800db0e:	2048      	movs	r0, #72	; 0x48
 800db10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db12:	0052      	lsls	r2, r2, #1
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	1812      	adds	r2, r2, r0
 800db18:	7819      	ldrb	r1, [r3, #0]
 800db1a:	19d2      	adds	r2, r2, r7
 800db1c:	5551      	strb	r1, [r2, r5]
 800db1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db22:	6852      	ldr	r2, [r2, #4]
 800db24:	3301      	adds	r3, #1
 800db26:	600b      	str	r3, [r1, #0]
 800db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2a:	3a01      	subs	r2, #1
 800db2c:	604a      	str	r2, [r1, #4]
 800db2e:	2b03      	cmp	r3, #3
 800db30:	d102      	bne.n	800db38 <__ssvfscanf_r+0x708>
 800db32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db34:	2b04      	cmp	r3, #4
 800db36:	d006      	beq.n	800db46 <__ssvfscanf_r+0x716>
 800db38:	2048      	movs	r0, #72	; 0x48
 800db3a:	2208      	movs	r2, #8
 800db3c:	1813      	adds	r3, r2, r0
 800db3e:	2100      	movs	r1, #0
 800db40:	19d8      	adds	r0, r3, r7
 800db42:	f7fd f83b 	bl	800abbc <memset>
 800db46:	2148      	movs	r1, #72	; 0x48
 800db48:	2308      	movs	r3, #8
 800db4a:	228c      	movs	r2, #140	; 0x8c
 800db4c:	185b      	adds	r3, r3, r1
 800db4e:	0052      	lsls	r2, r2, #1
 800db50:	19db      	adds	r3, r3, r7
 800db52:	1852      	adds	r2, r2, r1
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	0021      	movs	r1, r4
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db5c:	19d2      	adds	r2, r2, r7
 800db5e:	f002 fafb 	bl	8010158 <_mbrtowc_r>
 800db62:	0003      	movs	r3, r0
 800db64:	62b8      	str	r0, [r7, #40]	; 0x28
 800db66:	3301      	adds	r3, #1
 800db68:	d100      	bne.n	800db6c <__ssvfscanf_r+0x73c>
 800db6a:	e530      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d151      	bne.n	800dc14 <__ssvfscanf_r+0x7e4>
 800db70:	6020      	str	r0, [r4, #0]
 800db72:	2301      	movs	r3, #1
 800db74:	6825      	ldr	r5, [r4, #0]
 800db76:	425b      	negs	r3, r3
 800db78:	1c6a      	adds	r2, r5, #1
 800db7a:	d01a      	beq.n	800dbb2 <__ssvfscanf_r+0x782>
 800db7c:	2048      	movs	r0, #72	; 0x48
 800db7e:	3311      	adds	r3, #17
 800db80:	181b      	adds	r3, r3, r0
 800db82:	2208      	movs	r2, #8
 800db84:	2100      	movs	r1, #0
 800db86:	19d8      	adds	r0, r3, r7
 800db88:	f7fd f818 	bl	800abbc <memset>
 800db8c:	4b5f      	ldr	r3, [pc, #380]	; (800dd0c <__ssvfscanf_r+0x8dc>)
 800db8e:	2148      	movs	r1, #72	; 0x48
 800db90:	33e0      	adds	r3, #224	; 0xe0
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	2310      	movs	r3, #16
 800db96:	4694      	mov	ip, r2
 800db98:	185b      	adds	r3, r3, r1
 800db9a:	002a      	movs	r2, r5
 800db9c:	19db      	adds	r3, r3, r7
 800db9e:	4665      	mov	r5, ip
 800dba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dba2:	1879      	adds	r1, r7, r1
 800dba4:	47a8      	blx	r5
 800dba6:	2300      	movs	r3, #0
 800dba8:	2801      	cmp	r0, #1
 800dbaa:	d102      	bne.n	800dbb2 <__ssvfscanf_r+0x782>
 800dbac:	3348      	adds	r3, #72	; 0x48
 800dbae:	18fb      	adds	r3, r7, r3
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2218      	movs	r2, #24
 800dbb4:	2148      	movs	r1, #72	; 0x48
 800dbb6:	1852      	adds	r2, r2, r1
 800dbb8:	19d2      	adds	r2, r2, r7
 800dbba:	5cd3      	ldrb	r3, [r2, r3]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d149      	bne.n	800dc54 <__ssvfscanf_r+0x824>
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d137      	bne.n	800dc36 <__ssvfscanf_r+0x806>
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d113      	bne.n	800dbf4 <__ssvfscanf_r+0x7c4>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	2e00      	cmp	r6, #0
 800dbd0:	d00d      	beq.n	800dbee <__ssvfscanf_r+0x7be>
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	1ae4      	subs	r4, r4, r3
 800dbd8:	10a3      	asrs	r3, r4, #2
 800dbda:	3301      	adds	r3, #1
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d906      	bls.n	800dbee <__ssvfscanf_r+0x7be>
 800dbe0:	6830      	ldr	r0, [r6, #0]
 800dbe2:	1d21      	adds	r1, r4, #4
 800dbe4:	f001 ff1e 	bl	800fa24 <realloc>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d000      	beq.n	800dbee <__ssvfscanf_r+0x7be>
 800dbec:	6030      	str	r0, [r6, #0]
 800dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	e593      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	60fb      	str	r3, [r7, #12]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	001e      	movs	r6, r3
 800dc00:	613b      	str	r3, [r7, #16]
 800dc02:	633b      	str	r3, [r7, #48]	; 0x30
 800dc04:	334c      	adds	r3, #76	; 0x4c
 800dc06:	18fc      	adds	r4, r7, r3
 800dc08:	e778      	b.n	800dafc <__ssvfscanf_r+0x6cc>
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	001e      	movs	r6, r3
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	633b      	str	r3, [r7, #48]	; 0x30
 800dc12:	e773      	b.n	800dafc <__ssvfscanf_r+0x6cc>
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	69fd      	ldr	r5, [r7, #28]
 800dc18:	3302      	adds	r3, #2
 800dc1a:	d1aa      	bne.n	800db72 <__ssvfscanf_r+0x742>
 800dc1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc47      	bgt.n	800dcb4 <__ssvfscanf_r+0x884>
 800dc24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc28:	f002 fb96 	bl	8010358 <__ssrefill_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d041      	beq.n	800dcb4 <__ssvfscanf_r+0x884>
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	d0c8      	beq.n	800dbc6 <__ssvfscanf_r+0x796>
 800dc34:	e4cb      	b.n	800d5ce <__ssvfscanf_r+0x19e>
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	2248      	movs	r2, #72	; 0x48
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	238c      	movs	r3, #140	; 0x8c
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	189b      	adds	r3, r3, r2
 800dc44:	69fa      	ldr	r2, [r7, #28]
 800dc46:	19db      	adds	r3, r3, r7
 800dc48:	5cd1      	ldrb	r1, [r2, r3]
 800dc4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc4e:	f002 fb47 	bl	80102e0 <_sungetc_r>
 800dc52:	e7b5      	b.n	800dbc0 <__ssvfscanf_r+0x790>
 800dc54:	69fa      	ldr	r2, [r7, #28]
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	4694      	mov	ip, r2
 800dc5a:	4463      	add	r3, ip
 800dc5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d102      	bne.n	800dc6a <__ssvfscanf_r+0x83a>
 800dc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d002      	beq.n	800dc70 <__ssvfscanf_r+0x840>
 800dc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d11a      	bne.n	800dcac <__ssvfscanf_r+0x87c>
 800dc76:	3404      	adds	r4, #4
 800dc78:	2e00      	cmp	r6, #0
 800dc7a:	d019      	beq.n	800dcb0 <__ssvfscanf_r+0x880>
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	1ae3      	subs	r3, r4, r3
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	6a3d      	ldr	r5, [r7, #32]
 800dc86:	109b      	asrs	r3, r3, #2
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d3c7      	bcc.n	800dc1c <__ssvfscanf_r+0x7ec>
 800dc8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc8e:	00d1      	lsls	r1, r2, #3
 800dc90:	f001 fec8 	bl	800fa24 <realloc>
 800dc94:	6338      	str	r0, [r7, #48]	; 0x30
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d100      	bne.n	800dc9c <__ssvfscanf_r+0x86c>
 800dc9a:	e591      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800dc9c:	4684      	mov	ip, r0
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	69fc      	ldr	r4, [r7, #28]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	4464      	add	r4, ip
 800dca6:	6030      	str	r0, [r6, #0]
 800dca8:	613b      	str	r3, [r7, #16]
 800dcaa:	e7b7      	b.n	800dc1c <__ssvfscanf_r+0x7ec>
 800dcac:	2500      	movs	r5, #0
 800dcae:	e7b5      	b.n	800dc1c <__ssvfscanf_r+0x7ec>
 800dcb0:	0035      	movs	r5, r6
 800dcb2:	e7b3      	b.n	800dc1c <__ssvfscanf_r+0x7ec>
 800dcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d000      	beq.n	800dcbc <__ssvfscanf_r+0x88c>
 800dcba:	e720      	b.n	800dafe <__ssvfscanf_r+0x6ce>
 800dcbc:	e783      	b.n	800dbc6 <__ssvfscanf_r+0x796>
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d025      	beq.n	800dd10 <__ssvfscanf_r+0x8e0>
 800dcc4:	2118      	movs	r1, #24
 800dcc6:	2048      	movs	r0, #72	; 0x48
 800dcc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcca:	1809      	adds	r1, r1, r0
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	19c9      	adds	r1, r1, r7
 800dcd0:	781a      	ldrb	r2, [r3, #0]
 800dcd2:	5c8a      	ldrb	r2, [r1, r2]
 800dcd4:	2a00      	cmp	r2, #0
 800dcd6:	d103      	bne.n	800dce0 <__ssvfscanf_r+0x8b0>
 800dcd8:	2c00      	cmp	r4, #0
 800dcda:	d000      	beq.n	800dcde <__ssvfscanf_r+0x8ae>
 800dcdc:	e66c      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800dcde:	e4a4      	b.n	800d62a <__ssvfscanf_r+0x1fa>
 800dce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dce2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dce4:	6852      	ldr	r2, [r2, #4]
 800dce6:	3301      	adds	r3, #1
 800dce8:	600b      	str	r3, [r1, #0]
 800dcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcec:	3a01      	subs	r2, #1
 800dcee:	3401      	adds	r4, #1
 800dcf0:	604a      	str	r2, [r1, #4]
 800dcf2:	429c      	cmp	r4, r3
 800dcf4:	d100      	bne.n	800dcf8 <__ssvfscanf_r+0x8c8>
 800dcf6:	e65f      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800dcf8:	2a00      	cmp	r2, #0
 800dcfa:	dce3      	bgt.n	800dcc4 <__ssvfscanf_r+0x894>
 800dcfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcfe:	f002 fb2b 	bl	8010358 <__ssrefill_r>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0de      	beq.n	800dcc4 <__ssvfscanf_r+0x894>
 800dd06:	e657      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800dd08:	0000fff6 	.word	0x0000fff6
 800dd0c:	20000454 	.word	0x20000454
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	0032      	movs	r2, r6
 800dd14:	cb20      	ldmia	r3!, {r5}
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	2380      	movs	r3, #128	; 0x80
 800dd1a:	401a      	ands	r2, r3
 800dd1c:	421e      	tst	r6, r3
 800dd1e:	d100      	bne.n	800dd22 <__ssvfscanf_r+0x8f2>
 800dd20:	e086      	b.n	800de30 <__ssvfscanf_r+0xa00>
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	d100      	bne.n	800dd28 <__ssvfscanf_r+0x8f8>
 800dd26:	e480      	b.n	800d62a <__ssvfscanf_r+0x1fa>
 800dd28:	2020      	movs	r0, #32
 800dd2a:	f7fb fcb3 	bl	8009694 <malloc>
 800dd2e:	6338      	str	r0, [r7, #48]	; 0x30
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d100      	bne.n	800dd36 <__ssvfscanf_r+0x906>
 800dd34:	e452      	b.n	800d5dc <__ssvfscanf_r+0x1ac>
 800dd36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd38:	6028      	str	r0, [r5, #0]
 800dd3a:	88de      	ldrh	r6, [r3, #6]
 800dd3c:	889c      	ldrh	r4, [r3, #4]
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	42a6      	cmp	r6, r4
 800dd42:	d30e      	bcc.n	800dd62 <__ssvfscanf_r+0x932>
 800dd44:	4bc3      	ldr	r3, [pc, #780]	; (800e054 <__ssvfscanf_r+0xc24>)
 800dd46:	429c      	cmp	r4, r3
 800dd48:	d900      	bls.n	800dd4c <__ssvfscanf_r+0x91c>
 800dd4a:	e542      	b.n	800d7d2 <__ssvfscanf_r+0x3a2>
 800dd4c:	3408      	adds	r4, #8
 800dd4e:	b2a4      	uxth	r4, r4
 800dd50:	00a1      	lsls	r1, r4, #2
 800dd52:	f001 fe67 	bl	800fa24 <realloc>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d100      	bne.n	800dd5c <__ssvfscanf_r+0x92c>
 800dd5a:	e53a      	b.n	800d7d2 <__ssvfscanf_r+0x3a2>
 800dd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd5e:	6018      	str	r0, [r3, #0]
 800dd60:	809c      	strh	r4, [r3, #4]
 800dd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd64:	1c72      	adds	r2, r6, #1
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	00b6      	lsls	r6, r6, #2
 800dd6a:	50f5      	str	r5, [r6, r3]
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd70:	002e      	movs	r6, r5
 800dd72:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800dd74:	80ca      	strh	r2, [r1, #6]
 800dd76:	623b      	str	r3, [r7, #32]
 800dd78:	002c      	movs	r4, r5
 800dd7a:	2118      	movs	r1, #24
 800dd7c:	2048      	movs	r0, #72	; 0x48
 800dd7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd80:	1809      	adds	r1, r1, r0
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	19c9      	adds	r1, r1, r7
 800dd86:	781a      	ldrb	r2, [r3, #0]
 800dd88:	5c8a      	ldrb	r2, [r1, r2]
 800dd8a:	2a00      	cmp	r2, #0
 800dd8c:	d101      	bne.n	800dd92 <__ssvfscanf_r+0x962>
 800dd8e:	633d      	str	r5, [r7, #48]	; 0x30
 800dd90:	e031      	b.n	800ddf6 <__ssvfscanf_r+0x9c6>
 800dd92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd96:	6852      	ldr	r2, [r2, #4]
 800dd98:	3a01      	subs	r2, #1
 800dd9a:	604a      	str	r2, [r1, #4]
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	600a      	str	r2, [r1, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	1c6a      	adds	r2, r5, #1
 800dda4:	633a      	str	r2, [r7, #48]	; 0x30
 800dda6:	702b      	strb	r3, [r5, #0]
 800dda8:	2e00      	cmp	r6, #0
 800ddaa:	d010      	beq.n	800ddce <__ssvfscanf_r+0x99e>
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	1b15      	subs	r5, r2, r4
 800ddb0:	429d      	cmp	r5, r3
 800ddb2:	d30c      	bcc.n	800ddce <__ssvfscanf_r+0x99e>
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	0020      	movs	r0, r4
 800ddb8:	0019      	movs	r1, r3
 800ddba:	623b      	str	r3, [r7, #32]
 800ddbc:	f001 fe32 	bl	800fa24 <realloc>
 800ddc0:	1e04      	subs	r4, r0, #0
 800ddc2:	d101      	bne.n	800ddc8 <__ssvfscanf_r+0x998>
 800ddc4:	f7ff fc0a 	bl	800d5dc <__ssvfscanf_r+0x1ac>
 800ddc8:	1943      	adds	r3, r0, r5
 800ddca:	633b      	str	r3, [r7, #48]	; 0x30
 800ddcc:	6030      	str	r0, [r6, #0]
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00e      	beq.n	800ddf6 <__ssvfscanf_r+0x9c6>
 800ddd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dc2a      	bgt.n	800de36 <__ssvfscanf_r+0xa06>
 800dde0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dde2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dde4:	f002 fab8 	bl	8010358 <__ssrefill_r>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d024      	beq.n	800de36 <__ssvfscanf_r+0xa06>
 800ddec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddee:	42a3      	cmp	r3, r4
 800ddf0:	d101      	bne.n	800ddf6 <__ssvfscanf_r+0x9c6>
 800ddf2:	f7ff fbec 	bl	800d5ce <__ssvfscanf_r+0x19e>
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	1b1d      	subs	r5, r3, r4
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	d101      	bne.n	800de02 <__ssvfscanf_r+0x9d2>
 800ddfe:	f7ff fc14 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800de02:	2300      	movs	r3, #0
 800de04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de06:	7013      	strb	r3, [r2, #0]
 800de08:	429e      	cmp	r6, r3
 800de0a:	d009      	beq.n	800de20 <__ssvfscanf_r+0x9f0>
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	1c69      	adds	r1, r5, #1
 800de10:	428b      	cmp	r3, r1
 800de12:	d905      	bls.n	800de20 <__ssvfscanf_r+0x9f0>
 800de14:	6830      	ldr	r0, [r6, #0]
 800de16:	f001 fe05 	bl	800fa24 <realloc>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d000      	beq.n	800de20 <__ssvfscanf_r+0x9f0>
 800de1e:	6030      	str	r0, [r6, #0]
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	3301      	adds	r3, #1
 800de24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	195b      	adds	r3, r3, r5
 800de2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	e477      	b.n	800d720 <__ssvfscanf_r+0x2f0>
 800de30:	0016      	movs	r6, r2
 800de32:	623a      	str	r2, [r7, #32]
 800de34:	e7a0      	b.n	800dd78 <__ssvfscanf_r+0x948>
 800de36:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800de38:	e79f      	b.n	800dd7a <__ssvfscanf_r+0x94a>
 800de3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <__ssvfscanf_r+0xa14>
 800de40:	3b01      	subs	r3, #1
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de44:	2210      	movs	r2, #16
 800de46:	2301      	movs	r3, #1
 800de48:	0034      	movs	r4, r6
 800de4a:	4032      	ands	r2, r6
 800de4c:	401c      	ands	r4, r3
 800de4e:	61fa      	str	r2, [r7, #28]
 800de50:	421e      	tst	r6, r3
 800de52:	d100      	bne.n	800de56 <__ssvfscanf_r+0xa26>
 800de54:	e102      	b.n	800e05c <__ssvfscanf_r+0xc2c>
 800de56:	2a00      	cmp	r2, #0
 800de58:	d000      	beq.n	800de5c <__ssvfscanf_r+0xa2c>
 800de5a:	e09f      	b.n	800df9c <__ssvfscanf_r+0xb6c>
 800de5c:	2080      	movs	r0, #128	; 0x80
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	cb10      	ldmia	r3!, {r4}
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	4206      	tst	r6, r0
 800de66:	d100      	bne.n	800de6a <__ssvfscanf_r+0xa3a>
 800de68:	e0a1      	b.n	800dfae <__ssvfscanf_r+0xb7e>
 800de6a:	2c00      	cmp	r4, #0
 800de6c:	d100      	bne.n	800de70 <__ssvfscanf_r+0xa40>
 800de6e:	e4aa      	b.n	800d7c6 <__ssvfscanf_r+0x396>
 800de70:	f7fb fc10 	bl	8009694 <malloc>
 800de74:	6338      	str	r0, [r7, #48]	; 0x30
 800de76:	2800      	cmp	r0, #0
 800de78:	d100      	bne.n	800de7c <__ssvfscanf_r+0xa4c>
 800de7a:	e4a1      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de82:	88de      	ldrh	r6, [r3, #6]
 800de84:	889d      	ldrh	r5, [r3, #4]
 800de86:	42ae      	cmp	r6, r5
 800de88:	d310      	bcc.n	800deac <__ssvfscanf_r+0xa7c>
 800de8a:	4b72      	ldr	r3, [pc, #456]	; (800e054 <__ssvfscanf_r+0xc24>)
 800de8c:	429d      	cmp	r5, r3
 800de8e:	d900      	bls.n	800de92 <__ssvfscanf_r+0xa62>
 800de90:	e496      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800de92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de94:	3508      	adds	r5, #8
 800de96:	b2ad      	uxth	r5, r5
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	00a9      	lsls	r1, r5, #2
 800de9c:	f001 fdc2 	bl	800fa24 <realloc>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d100      	bne.n	800dea6 <__ssvfscanf_r+0xa76>
 800dea4:	e48c      	b.n	800d7c0 <__ssvfscanf_r+0x390>
 800dea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea8:	6018      	str	r0, [r3, #0]
 800deaa:	809d      	strh	r5, [r3, #4]
 800deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deae:	1c72      	adds	r2, r6, #1
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	00b6      	lsls	r6, r6, #2
 800deb4:	50f4      	str	r4, [r6, r3]
 800deb6:	2320      	movs	r3, #32
 800deb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800deba:	0025      	movs	r5, r4
 800debc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800debe:	80ca      	strh	r2, [r1, #6]
 800dec0:	613b      	str	r3, [r7, #16]
 800dec2:	2300      	movs	r3, #0
 800dec4:	623b      	str	r3, [r7, #32]
 800dec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec8:	4a63      	ldr	r2, [pc, #396]	; (800e058 <__ssvfscanf_r+0xc28>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	5cd3      	ldrb	r3, [r2, r3]
 800ded0:	2208      	movs	r2, #8
 800ded2:	4213      	tst	r3, r2
 800ded4:	d149      	bne.n	800df6a <__ssvfscanf_r+0xb3a>
 800ded6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d046      	beq.n	800df6a <__ssvfscanf_r+0xb3a>
 800dedc:	f7fc feb2 	bl	800ac44 <__locale_mb_cur_max>
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	4298      	cmp	r0, r3
 800dee4:	d101      	bne.n	800deea <__ssvfscanf_r+0xaba>
 800dee6:	f7ff fb72 	bl	800d5ce <__ssvfscanf_r+0x19e>
 800deea:	6a3a      	ldr	r2, [r7, #32]
 800deec:	2048      	movs	r0, #72	; 0x48
 800deee:	1c56      	adds	r6, r2, #1
 800def0:	228c      	movs	r2, #140	; 0x8c
 800def2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def4:	0052      	lsls	r2, r2, #1
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	1812      	adds	r2, r2, r0
 800defa:	7819      	ldrb	r1, [r3, #0]
 800defc:	6a38      	ldr	r0, [r7, #32]
 800defe:	19d2      	adds	r2, r2, r7
 800df00:	5411      	strb	r1, [r2, r0]
 800df02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df06:	6852      	ldr	r2, [r2, #4]
 800df08:	3301      	adds	r3, #1
 800df0a:	600b      	str	r3, [r1, #0]
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	3a01      	subs	r2, #1
 800df10:	604a      	str	r2, [r1, #4]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d102      	bne.n	800df1c <__ssvfscanf_r+0xaec>
 800df16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d007      	beq.n	800df2c <__ssvfscanf_r+0xafc>
 800df1c:	2048      	movs	r0, #72	; 0x48
 800df1e:	2310      	movs	r3, #16
 800df20:	181b      	adds	r3, r3, r0
 800df22:	2208      	movs	r2, #8
 800df24:	2100      	movs	r1, #0
 800df26:	19d8      	adds	r0, r3, r7
 800df28:	f7fc fe48 	bl	800abbc <memset>
 800df2c:	2148      	movs	r1, #72	; 0x48
 800df2e:	2310      	movs	r3, #16
 800df30:	228c      	movs	r2, #140	; 0x8c
 800df32:	185b      	adds	r3, r3, r1
 800df34:	0052      	lsls	r2, r2, #1
 800df36:	19db      	adds	r3, r3, r7
 800df38:	1852      	adds	r2, r2, r1
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	0021      	movs	r1, r4
 800df3e:	0033      	movs	r3, r6
 800df40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df42:	19d2      	adds	r2, r2, r7
 800df44:	f002 f908 	bl	8010158 <_mbrtowc_r>
 800df48:	0003      	movs	r3, r0
 800df4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800df4c:	3301      	adds	r3, #1
 800df4e:	d101      	bne.n	800df54 <__ssvfscanf_r+0xb24>
 800df50:	f7ff fb3d 	bl	800d5ce <__ssvfscanf_r+0x19e>
 800df54:	2800      	cmp	r0, #0
 800df56:	d12f      	bne.n	800dfb8 <__ssvfscanf_r+0xb88>
 800df58:	6020      	str	r0, [r4, #0]
 800df5a:	6820      	ldr	r0, [r4, #0]
 800df5c:	f002 f91a 	bl	8010194 <iswspace>
 800df60:	6238      	str	r0, [r7, #32]
 800df62:	2800      	cmp	r0, #0
 800df64:	d04a      	beq.n	800dffc <__ssvfscanf_r+0xbcc>
 800df66:	2e00      	cmp	r6, #0
 800df68:	d13c      	bne.n	800dfe4 <__ssvfscanf_r+0xbb4>
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d000      	beq.n	800df72 <__ssvfscanf_r+0xb42>
 800df70:	e640      	b.n	800dbf4 <__ssvfscanf_r+0x7c4>
 800df72:	6023      	str	r3, [r4, #0]
 800df74:	2d00      	cmp	r5, #0
 800df76:	d100      	bne.n	800df7a <__ssvfscanf_r+0xb4a>
 800df78:	e639      	b.n	800dbee <__ssvfscanf_r+0x7be>
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	1ae4      	subs	r4, r4, r3
 800df80:	10a3      	asrs	r3, r4, #2
 800df82:	3301      	adds	r3, #1
 800df84:	429a      	cmp	r2, r3
 800df86:	d800      	bhi.n	800df8a <__ssvfscanf_r+0xb5a>
 800df88:	e631      	b.n	800dbee <__ssvfscanf_r+0x7be>
 800df8a:	6828      	ldr	r0, [r5, #0]
 800df8c:	1d21      	adds	r1, r4, #4
 800df8e:	f001 fd49 	bl	800fa24 <realloc>
 800df92:	2800      	cmp	r0, #0
 800df94:	d100      	bne.n	800df98 <__ssvfscanf_r+0xb68>
 800df96:	e62a      	b.n	800dbee <__ssvfscanf_r+0x7be>
 800df98:	6028      	str	r0, [r5, #0]
 800df9a:	e628      	b.n	800dbee <__ssvfscanf_r+0x7be>
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	60fb      	str	r3, [r7, #12]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	001d      	movs	r5, r3
 800dfa4:	613b      	str	r3, [r7, #16]
 800dfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfa8:	334c      	adds	r3, #76	; 0x4c
 800dfaa:	18fc      	adds	r4, r7, r3
 800dfac:	e789      	b.n	800dec2 <__ssvfscanf_r+0xa92>
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	001d      	movs	r5, r3
 800dfb2:	613b      	str	r3, [r7, #16]
 800dfb4:	633b      	str	r3, [r7, #48]	; 0x30
 800dfb6:	e784      	b.n	800dec2 <__ssvfscanf_r+0xa92>
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	623e      	str	r6, [r7, #32]
 800dfbc:	3302      	adds	r3, #2
 800dfbe:	d1cc      	bne.n	800df5a <__ssvfscanf_r+0xb2a>
 800dfc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd00      	ble.n	800dfca <__ssvfscanf_r+0xb9a>
 800dfc8:	e77d      	b.n	800dec6 <__ssvfscanf_r+0xa96>
 800dfca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfce:	f002 f9c3 	bl	8010358 <__ssrefill_r>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d100      	bne.n	800dfd8 <__ssvfscanf_r+0xba8>
 800dfd6:	e776      	b.n	800dec6 <__ssvfscanf_r+0xa96>
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <__ssvfscanf_r+0xbb2>
 800dfde:	f7ff faf6 	bl	800d5ce <__ssvfscanf_r+0x19e>
 800dfe2:	e7c2      	b.n	800df6a <__ssvfscanf_r+0xb3a>
 800dfe4:	238c      	movs	r3, #140	; 0x8c
 800dfe6:	2248      	movs	r2, #72	; 0x48
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	189b      	adds	r3, r3, r2
 800dfec:	3e01      	subs	r6, #1
 800dfee:	19db      	adds	r3, r3, r7
 800dff0:	5cf1      	ldrb	r1, [r6, r3]
 800dff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dff6:	f002 f973 	bl	80102e0 <_sungetc_r>
 800dffa:	e7b4      	b.n	800df66 <__ssvfscanf_r+0xb36>
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	199b      	adds	r3, r3, r6
 800e000:	63bb      	str	r3, [r7, #56]	; 0x38
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	2b03      	cmp	r3, #3
 800e006:	d102      	bne.n	800e00e <__ssvfscanf_r+0xbde>
 800e008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e00a:	2b04      	cmp	r3, #4
 800e00c:	d002      	beq.n	800e014 <__ssvfscanf_r+0xbe4>
 800e00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e010:	3b01      	subs	r3, #1
 800e012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1d2      	bne.n	800dfc0 <__ssvfscanf_r+0xb90>
 800e01a:	3404      	adds	r4, #4
 800e01c:	2d00      	cmp	r5, #0
 800e01e:	d016      	beq.n	800e04e <__ssvfscanf_r+0xc1e>
 800e020:	69fa      	ldr	r2, [r7, #28]
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	623a      	str	r2, [r7, #32]
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	1ae6      	subs	r6, r4, r3
 800e02a:	10b3      	asrs	r3, r6, #2
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d3c7      	bcc.n	800dfc0 <__ssvfscanf_r+0xb90>
 800e030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e032:	00d1      	lsls	r1, r2, #3
 800e034:	f001 fcf6 	bl	800fa24 <realloc>
 800e038:	6338      	str	r0, [r7, #48]	; 0x30
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d101      	bne.n	800e042 <__ssvfscanf_r+0xc12>
 800e03e:	f7ff fbbf 	bl	800d7c0 <__ssvfscanf_r+0x390>
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	1984      	adds	r4, r0, r6
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	6028      	str	r0, [r5, #0]
 800e04a:	613b      	str	r3, [r7, #16]
 800e04c:	e7b8      	b.n	800dfc0 <__ssvfscanf_r+0xb90>
 800e04e:	623d      	str	r5, [r7, #32]
 800e050:	e7b6      	b.n	800dfc0 <__ssvfscanf_r+0xb90>
 800e052:	46c0      	nop			; (mov r8, r8)
 800e054:	0000fff6 	.word	0x0000fff6
 800e058:	08012f81 	.word	0x08012f81
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d01c      	beq.n	800e09c <__ssvfscanf_r+0xc6c>
 800e062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e064:	49bf      	ldr	r1, [pc, #764]	; (800e364 <__ssvfscanf_r+0xf34>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	781a      	ldrb	r2, [r3, #0]
 800e06a:	5c8a      	ldrb	r2, [r1, r2]
 800e06c:	2108      	movs	r1, #8
 800e06e:	420a      	tst	r2, r1
 800e070:	d000      	beq.n	800e074 <__ssvfscanf_r+0xc44>
 800e072:	e4a1      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800e074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e078:	6852      	ldr	r2, [r2, #4]
 800e07a:	3301      	adds	r3, #1
 800e07c:	600b      	str	r3, [r1, #0]
 800e07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e080:	3a01      	subs	r2, #1
 800e082:	3401      	adds	r4, #1
 800e084:	604a      	str	r2, [r1, #4]
 800e086:	429c      	cmp	r4, r3
 800e088:	d100      	bne.n	800e08c <__ssvfscanf_r+0xc5c>
 800e08a:	e495      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	dce8      	bgt.n	800e062 <__ssvfscanf_r+0xc32>
 800e090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e092:	f002 f961 	bl	8010358 <__ssrefill_r>
 800e096:	2800      	cmp	r0, #0
 800e098:	d0e3      	beq.n	800e062 <__ssvfscanf_r+0xc32>
 800e09a:	e48d      	b.n	800d9b8 <__ssvfscanf_r+0x588>
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	0032      	movs	r2, r6
 800e0a0:	cb10      	ldmia	r3!, {r4}
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	2380      	movs	r3, #128	; 0x80
 800e0a6:	401a      	ands	r2, r3
 800e0a8:	421e      	tst	r6, r3
 800e0aa:	d039      	beq.n	800e120 <__ssvfscanf_r+0xcf0>
 800e0ac:	2c00      	cmp	r4, #0
 800e0ae:	d101      	bne.n	800e0b4 <__ssvfscanf_r+0xc84>
 800e0b0:	f7ff fabb 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800e0b4:	2020      	movs	r0, #32
 800e0b6:	f7fb faed 	bl	8009694 <malloc>
 800e0ba:	6338      	str	r0, [r7, #48]	; 0x30
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d101      	bne.n	800e0c4 <__ssvfscanf_r+0xc94>
 800e0c0:	f7ff fa8c 	bl	800d5dc <__ssvfscanf_r+0x1ac>
 800e0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0c6:	6020      	str	r0, [r4, #0]
 800e0c8:	88de      	ldrh	r6, [r3, #6]
 800e0ca:	889d      	ldrh	r5, [r3, #4]
 800e0cc:	6818      	ldr	r0, [r3, #0]
 800e0ce:	42ae      	cmp	r6, r5
 800e0d0:	d310      	bcc.n	800e0f4 <__ssvfscanf_r+0xcc4>
 800e0d2:	4ba5      	ldr	r3, [pc, #660]	; (800e368 <__ssvfscanf_r+0xf38>)
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	d901      	bls.n	800e0dc <__ssvfscanf_r+0xcac>
 800e0d8:	f7ff fb7b 	bl	800d7d2 <__ssvfscanf_r+0x3a2>
 800e0dc:	3508      	adds	r5, #8
 800e0de:	b2ad      	uxth	r5, r5
 800e0e0:	00a9      	lsls	r1, r5, #2
 800e0e2:	f001 fc9f 	bl	800fa24 <realloc>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d101      	bne.n	800e0ee <__ssvfscanf_r+0xcbe>
 800e0ea:	f7ff fb72 	bl	800d7d2 <__ssvfscanf_r+0x3a2>
 800e0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0f0:	6018      	str	r0, [r3, #0]
 800e0f2:	809d      	strh	r5, [r3, #4]
 800e0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0f6:	1c72      	adds	r2, r6, #1
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	00b6      	lsls	r6, r6, #2
 800e0fc:	50f4      	str	r4, [r6, r3]
 800e0fe:	2320      	movs	r3, #32
 800e100:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e102:	0026      	movs	r6, r4
 800e104:	80ca      	strh	r2, [r1, #6]
 800e106:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e108:	633b      	str	r3, [r7, #48]	; 0x30
 800e10a:	0025      	movs	r5, r4
 800e10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e10e:	4995      	ldr	r1, [pc, #596]	; (800e364 <__ssvfscanf_r+0xf34>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	5c8a      	ldrb	r2, [r1, r2]
 800e116:	2108      	movs	r1, #8
 800e118:	420a      	tst	r2, r1
 800e11a:	d004      	beq.n	800e126 <__ssvfscanf_r+0xcf6>
 800e11c:	623c      	str	r4, [r7, #32]
 800e11e:	e031      	b.n	800e184 <__ssvfscanf_r+0xd54>
 800e120:	0016      	movs	r6, r2
 800e122:	633a      	str	r2, [r7, #48]	; 0x30
 800e124:	e7f1      	b.n	800e10a <__ssvfscanf_r+0xcda>
 800e126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e128:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e12a:	6852      	ldr	r2, [r2, #4]
 800e12c:	3a01      	subs	r2, #1
 800e12e:	604a      	str	r2, [r1, #4]
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	600a      	str	r2, [r1, #0]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	1c62      	adds	r2, r4, #1
 800e138:	623a      	str	r2, [r7, #32]
 800e13a:	7023      	strb	r3, [r4, #0]
 800e13c:	2e00      	cmp	r6, #0
 800e13e:	d010      	beq.n	800e162 <__ssvfscanf_r+0xd32>
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	1b54      	subs	r4, r2, r5
 800e144:	429c      	cmp	r4, r3
 800e146:	d30c      	bcc.n	800e162 <__ssvfscanf_r+0xd32>
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	0028      	movs	r0, r5
 800e14c:	0019      	movs	r1, r3
 800e14e:	633b      	str	r3, [r7, #48]	; 0x30
 800e150:	f001 fc68 	bl	800fa24 <realloc>
 800e154:	1e05      	subs	r5, r0, #0
 800e156:	d101      	bne.n	800e15c <__ssvfscanf_r+0xd2c>
 800e158:	f7ff fa40 	bl	800d5dc <__ssvfscanf_r+0x1ac>
 800e15c:	1903      	adds	r3, r0, r4
 800e15e:	623b      	str	r3, [r7, #32]
 800e160:	6030      	str	r0, [r6, #0]
 800e162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e164:	3b01      	subs	r3, #1
 800e166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00b      	beq.n	800e184 <__ssvfscanf_r+0xd54>
 800e16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	dd01      	ble.n	800e178 <__ssvfscanf_r+0xd48>
 800e174:	6a3c      	ldr	r4, [r7, #32]
 800e176:	e7c9      	b.n	800e10c <__ssvfscanf_r+0xcdc>
 800e178:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e17a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e17c:	f002 f8ec 	bl	8010358 <__ssrefill_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	d0f7      	beq.n	800e174 <__ssvfscanf_r+0xd44>
 800e184:	2300      	movs	r3, #0
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	7013      	strb	r3, [r2, #0]
 800e18a:	1b55      	subs	r5, r2, r5
 800e18c:	2e00      	cmp	r6, #0
 800e18e:	d009      	beq.n	800e1a4 <__ssvfscanf_r+0xd74>
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	1c69      	adds	r1, r5, #1
 800e194:	428b      	cmp	r3, r1
 800e196:	d905      	bls.n	800e1a4 <__ssvfscanf_r+0xd74>
 800e198:	6830      	ldr	r0, [r6, #0]
 800e19a:	f001 fc43 	bl	800fa24 <realloc>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d000      	beq.n	800e1a4 <__ssvfscanf_r+0xd74>
 800e1a2:	6030      	str	r0, [r6, #0]
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	195b      	adds	r3, r3, r5
 800e1a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b0:	e63c      	b.n	800de2c <__ssvfscanf_r+0x9fc>
 800e1b2:	22ae      	movs	r2, #174	; 0xae
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b8:	0052      	lsls	r2, r2, #1
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	6239      	str	r1, [r7, #32]
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d906      	bls.n	800e1d0 <__ssvfscanf_r+0xda0>
 800e1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c4:	3b5e      	subs	r3, #94	; 0x5e
 800e1c6:	3bff      	subs	r3, #255	; 0xff
 800e1c8:	623b      	str	r3, [r7, #32]
 800e1ca:	235e      	movs	r3, #94	; 0x5e
 800e1cc:	33ff      	adds	r3, #255	; 0xff
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1d0:	24d8      	movs	r4, #216	; 0xd8
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2248      	movs	r2, #72	; 0x48
 800e1d6:	0124      	lsls	r4, r4, #4
 800e1d8:	4334      	orrs	r4, r6
 800e1da:	2680      	movs	r6, #128	; 0x80
 800e1dc:	61fb      	str	r3, [r7, #28]
 800e1de:	3319      	adds	r3, #25
 800e1e0:	33ff      	adds	r3, #255	; 0xff
 800e1e2:	189b      	adds	r3, r3, r2
 800e1e4:	19dd      	adds	r5, r3, r7
 800e1e6:	00b6      	lsls	r6, r6, #2
 800e1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	7813      	ldrb	r3, [r2, #0]
 800e1ee:	2b39      	cmp	r3, #57	; 0x39
 800e1f0:	d80f      	bhi.n	800e212 <__ssvfscanf_r+0xde2>
 800e1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f4:	d91b      	bls.n	800e22e <__ssvfscanf_r+0xdfe>
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	382b      	subs	r0, #43	; 0x2b
 800e1fa:	280e      	cmp	r0, #14
 800e1fc:	d817      	bhi.n	800e22e <__ssvfscanf_r+0xdfe>
 800e1fe:	f7f1 ff89 	bl	8000114 <__gnu_thumb1_case_uqi>
 800e202:	168f      	.short	0x168f
 800e204:	5416168f 	.word	0x5416168f
 800e208:	80808080 	.word	0x80808080
 800e20c:	87808080 	.word	0x87808080
 800e210:	87          	.byte	0x87
 800e211:	00          	.byte	0x00
 800e212:	2b66      	cmp	r3, #102	; 0x66
 800e214:	d83a      	bhi.n	800e28c <__ssvfscanf_r+0xe5c>
 800e216:	2b60      	cmp	r3, #96	; 0x60
 800e218:	d803      	bhi.n	800e222 <__ssvfscanf_r+0xdf2>
 800e21a:	2b46      	cmp	r3, #70	; 0x46
 800e21c:	d805      	bhi.n	800e22a <__ssvfscanf_r+0xdfa>
 800e21e:	2b40      	cmp	r3, #64	; 0x40
 800e220:	d905      	bls.n	800e22e <__ssvfscanf_r+0xdfe>
 800e222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e224:	290a      	cmp	r1, #10
 800e226:	dc71      	bgt.n	800e30c <__ssvfscanf_r+0xedc>
 800e228:	e001      	b.n	800e22e <__ssvfscanf_r+0xdfe>
 800e22a:	2b58      	cmp	r3, #88	; 0x58
 800e22c:	d030      	beq.n	800e290 <__ssvfscanf_r+0xe60>
 800e22e:	05e3      	lsls	r3, r4, #23
 800e230:	d515      	bpl.n	800e25e <__ssvfscanf_r+0xe2e>
 800e232:	238c      	movs	r3, #140	; 0x8c
 800e234:	2248      	movs	r2, #72	; 0x48
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	189b      	adds	r3, r3, r2
 800e23a:	19db      	adds	r3, r3, r7
 800e23c:	429d      	cmp	r5, r3
 800e23e:	d905      	bls.n	800e24c <__ssvfscanf_r+0xe1c>
 800e240:	3d01      	subs	r5, #1
 800e242:	7829      	ldrb	r1, [r5, #0]
 800e244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e246:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e248:	f002 f84a 	bl	80102e0 <_sungetc_r>
 800e24c:	238c      	movs	r3, #140	; 0x8c
 800e24e:	2248      	movs	r2, #72	; 0x48
 800e250:	005b      	lsls	r3, r3, #1
 800e252:	189b      	adds	r3, r3, r2
 800e254:	19db      	adds	r3, r3, r7
 800e256:	429d      	cmp	r5, r3
 800e258:	d101      	bne.n	800e25e <__ssvfscanf_r+0xe2e>
 800e25a:	f7ff f9e6 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800e25e:	2310      	movs	r3, #16
 800e260:	0022      	movs	r2, r4
 800e262:	401a      	ands	r2, r3
 800e264:	421c      	tst	r4, r3
 800e266:	d171      	bne.n	800e34c <__ssvfscanf_r+0xf1c>
 800e268:	218c      	movs	r1, #140	; 0x8c
 800e26a:	2048      	movs	r0, #72	; 0x48
 800e26c:	0049      	lsls	r1, r1, #1
 800e26e:	1809      	adds	r1, r1, r0
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	697e      	ldr	r6, [r7, #20]
 800e274:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e276:	19c9      	adds	r1, r1, r7
 800e278:	702a      	strb	r2, [r5, #0]
 800e27a:	47b0      	blx	r6
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	1d1e      	adds	r6, r3, #4
 800e280:	06a3      	lsls	r3, r4, #26
 800e282:	d559      	bpl.n	800e338 <__ssvfscanf_r+0xf08>
 800e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6018      	str	r0, [r3, #0]
 800e28a:	e05b      	b.n	800e344 <__ssvfscanf_r+0xf14>
 800e28c:	2b78      	cmp	r3, #120	; 0x78
 800e28e:	d1ce      	bne.n	800e22e <__ssvfscanf_r+0xdfe>
 800e290:	21c0      	movs	r1, #192	; 0xc0
 800e292:	00c9      	lsls	r1, r1, #3
 800e294:	4021      	ands	r1, r4
 800e296:	42b1      	cmp	r1, r6
 800e298:	d1c9      	bne.n	800e22e <__ssvfscanf_r+0xdfe>
 800e29a:	4934      	ldr	r1, [pc, #208]	; (800e36c <__ssvfscanf_r+0xf3c>)
 800e29c:	4021      	ands	r1, r4
 800e29e:	24a0      	movs	r4, #160	; 0xa0
 800e2a0:	00e4      	lsls	r4, r4, #3
 800e2a2:	430c      	orrs	r4, r1
 800e2a4:	2110      	movs	r1, #16
 800e2a6:	6279      	str	r1, [r7, #36]	; 0x24
 800e2a8:	e00b      	b.n	800e2c2 <__ssvfscanf_r+0xe92>
 800e2aa:	0521      	lsls	r1, r4, #20
 800e2ac:	d509      	bpl.n	800e2c2 <__ssvfscanf_r+0xe92>
 800e2ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2b0:	2900      	cmp	r1, #0
 800e2b2:	d102      	bne.n	800e2ba <__ssvfscanf_r+0xe8a>
 800e2b4:	3108      	adds	r1, #8
 800e2b6:	4334      	orrs	r4, r6
 800e2b8:	6279      	str	r1, [r7, #36]	; 0x24
 800e2ba:	0561      	lsls	r1, r4, #21
 800e2bc:	d504      	bpl.n	800e2c8 <__ssvfscanf_r+0xe98>
 800e2be:	492c      	ldr	r1, [pc, #176]	; (800e370 <__ssvfscanf_r+0xf40>)
 800e2c0:	400c      	ands	r4, r1
 800e2c2:	702b      	strb	r3, [r5, #0]
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	e00c      	b.n	800e2e2 <__ssvfscanf_r+0xeb2>
 800e2c8:	4b2a      	ldr	r3, [pc, #168]	; (800e374 <__ssvfscanf_r+0xf44>)
 800e2ca:	401c      	ands	r4, r3
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d004      	beq.n	800e2dc <__ssvfscanf_r+0xeac>
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	623b      	str	r3, [r7, #32]
 800e2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d8:	3301      	adds	r3, #1
 800e2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	61fb      	str	r3, [r7, #28]
 800e2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	604b      	str	r3, [r1, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd1c      	ble.n	800e32a <__ssvfscanf_r+0xefa>
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	600a      	str	r2, [r1, #0]
 800e2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d000      	beq.n	800e300 <__ssvfscanf_r+0xed0>
 800e2fe:	e773      	b.n	800e1e8 <__ssvfscanf_r+0xdb8>
 800e300:	e795      	b.n	800e22e <__ssvfscanf_r+0xdfe>
 800e302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e304:	491c      	ldr	r1, [pc, #112]	; (800e378 <__ssvfscanf_r+0xf48>)
 800e306:	0040      	lsls	r0, r0, #1
 800e308:	5e41      	ldrsh	r1, [r0, r1]
 800e30a:	6279      	str	r1, [r7, #36]	; 0x24
 800e30c:	491b      	ldr	r1, [pc, #108]	; (800e37c <__ssvfscanf_r+0xf4c>)
 800e30e:	e7d7      	b.n	800e2c0 <__ssvfscanf_r+0xe90>
 800e310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e312:	4919      	ldr	r1, [pc, #100]	; (800e378 <__ssvfscanf_r+0xf48>)
 800e314:	0040      	lsls	r0, r0, #1
 800e316:	5e41      	ldrsh	r1, [r0, r1]
 800e318:	6279      	str	r1, [r7, #36]	; 0x24
 800e31a:	2908      	cmp	r1, #8
 800e31c:	dcf6      	bgt.n	800e30c <__ssvfscanf_r+0xedc>
 800e31e:	e786      	b.n	800e22e <__ssvfscanf_r+0xdfe>
 800e320:	2180      	movs	r1, #128	; 0x80
 800e322:	420c      	tst	r4, r1
 800e324:	d083      	beq.n	800e22e <__ssvfscanf_r+0xdfe>
 800e326:	438c      	bics	r4, r1
 800e328:	e7cb      	b.n	800e2c2 <__ssvfscanf_r+0xe92>
 800e32a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e32c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e32e:	f002 f813 	bl	8010358 <__ssrefill_r>
 800e332:	2800      	cmp	r0, #0
 800e334:	d0de      	beq.n	800e2f4 <__ssvfscanf_r+0xec4>
 800e336:	e77a      	b.n	800e22e <__ssvfscanf_r+0xdfe>
 800e338:	2308      	movs	r3, #8
 800e33a:	421c      	tst	r4, r3
 800e33c:	d020      	beq.n	800e380 <__ssvfscanf_r+0xf50>
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	7018      	strb	r0, [r3, #0]
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	633e      	str	r6, [r7, #48]	; 0x30
 800e348:	3301      	adds	r3, #1
 800e34a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e34c:	238c      	movs	r3, #140	; 0x8c
 800e34e:	2248      	movs	r2, #72	; 0x48
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	189b      	adds	r3, r3, r2
 800e354:	19db      	adds	r3, r3, r7
 800e356:	1aed      	subs	r5, r5, r3
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	18ed      	adds	r5, r5, r3
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	195b      	adds	r3, r3, r5
 800e360:	f7ff f92d 	bl	800d5be <__ssvfscanf_r+0x18e>
 800e364:	08012f81 	.word	0x08012f81
 800e368:	0000fff6 	.word	0x0000fff6
 800e36c:	fffffdff 	.word	0xfffffdff
 800e370:	fffffa7f 	.word	0xfffffa7f
 800e374:	fffffc7f 	.word	0xfffffc7f
 800e378:	080132ae 	.word	0x080132ae
 800e37c:	fffff47f 	.word	0xfffff47f
 800e380:	0763      	lsls	r3, r4, #29
 800e382:	d503      	bpl.n	800e38c <__ssvfscanf_r+0xf5c>
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	8018      	strh	r0, [r3, #0]
 800e38a:	e7db      	b.n	800e344 <__ssvfscanf_r+0xf14>
 800e38c:	2301      	movs	r3, #1
 800e38e:	0022      	movs	r2, r4
 800e390:	401a      	ands	r2, r3
 800e392:	421c      	tst	r4, r3
 800e394:	d000      	beq.n	800e398 <__ssvfscanf_r+0xf68>
 800e396:	e775      	b.n	800e284 <__ssvfscanf_r+0xe54>
 800e398:	07a4      	lsls	r4, r4, #30
 800e39a:	d400      	bmi.n	800e39e <__ssvfscanf_r+0xf6e>
 800e39c:	e772      	b.n	800e284 <__ssvfscanf_r+0xe54>
 800e39e:	4ba8      	ldr	r3, [pc, #672]	; (800e640 <__ssvfscanf_r+0x1210>)
 800e3a0:	6979      	ldr	r1, [r7, #20]
 800e3a2:	4299      	cmp	r1, r3
 800e3a4:	d10c      	bne.n	800e3c0 <__ssvfscanf_r+0xf90>
 800e3a6:	218c      	movs	r1, #140	; 0x8c
 800e3a8:	2048      	movs	r0, #72	; 0x48
 800e3aa:	0049      	lsls	r1, r1, #1
 800e3ac:	1809      	adds	r1, r1, r0
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3b2:	19c9      	adds	r1, r1, r7
 800e3b4:	f001 fecc 	bl	8010150 <_strtoull_r>
 800e3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	c303      	stmia	r3!, {r0, r1}
 800e3be:	e7c1      	b.n	800e344 <__ssvfscanf_r+0xf14>
 800e3c0:	218c      	movs	r1, #140	; 0x8c
 800e3c2:	2048      	movs	r0, #72	; 0x48
 800e3c4:	0049      	lsls	r1, r1, #1
 800e3c6:	1809      	adds	r1, r1, r0
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3cc:	19c9      	adds	r1, r1, r7
 800e3ce:	f001 fe0d 	bl	800ffec <_strtoll_r>
 800e3d2:	e7f1      	b.n	800e3b8 <__ssvfscanf_r+0xf88>
 800e3d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3d6:	f000 fb9f 	bl	800eb18 <_localeconv_r>
 800e3da:	22ae      	movs	r2, #174	; 0xae
 800e3dc:	2100      	movs	r1, #0
 800e3de:	6803      	ldr	r3, [r0, #0]
 800e3e0:	0052      	lsls	r2, r2, #1
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e6:	60f9      	str	r1, [r7, #12]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d906      	bls.n	800e3fc <__ssvfscanf_r+0xfcc>
 800e3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f0:	3b5e      	subs	r3, #94	; 0x5e
 800e3f2:	3bff      	subs	r3, #255	; 0xff
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	235e      	movs	r3, #94	; 0x5e
 800e3f8:	33ff      	adds	r3, #255	; 0xff
 800e3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3fc:	23f0      	movs	r3, #240	; 0xf0
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	431e      	orrs	r6, r3
 800e402:	238c      	movs	r3, #140	; 0x8c
 800e404:	2248      	movs	r2, #72	; 0x48
 800e406:	2400      	movs	r4, #0
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	189b      	adds	r3, r3, r2
 800e40c:	623c      	str	r4, [r7, #32]
 800e40e:	607c      	str	r4, [r7, #4]
 800e410:	60bc      	str	r4, [r7, #8]
 800e412:	61fc      	str	r4, [r7, #28]
 800e414:	613c      	str	r4, [r7, #16]
 800e416:	19dd      	adds	r5, r3, r7
 800e418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	781a      	ldrb	r2, [r3, #0]
 800e41e:	0010      	movs	r0, r2
 800e420:	382b      	subs	r0, #43	; 0x2b
 800e422:	284e      	cmp	r0, #78	; 0x4e
 800e424:	d900      	bls.n	800e428 <__ssvfscanf_r+0xff8>
 800e426:	e133      	b.n	800e690 <__ssvfscanf_r+0x1260>
 800e428:	f7f1 fe7e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e42c:	0132009b 	.word	0x0132009b
 800e430:	0132009b 	.word	0x0132009b
 800e434:	004f0132 	.word	0x004f0132
 800e438:	00720072 	.word	0x00720072
 800e43c:	00720072 	.word	0x00720072
 800e440:	00720072 	.word	0x00720072
 800e444:	00720072 	.word	0x00720072
 800e448:	01320072 	.word	0x01320072
 800e44c:	01320132 	.word	0x01320132
 800e450:	01320132 	.word	0x01320132
 800e454:	01320132 	.word	0x01320132
 800e458:	007b00bc 	.word	0x007b00bc
 800e45c:	007b007b 	.word	0x007b007b
 800e460:	00f7012f 	.word	0x00f7012f
 800e464:	01320132 	.word	0x01320132
 800e468:	013200e3 	.word	0x013200e3
 800e46c:	01320132 	.word	0x01320132
 800e470:	00a00132 	.word	0x00a00132
 800e474:	01120132 	.word	0x01120132
 800e478:	01320132 	.word	0x01320132
 800e47c:	01010132 	.word	0x01010132
 800e480:	01320132 	.word	0x01320132
 800e484:	00820132 	.word	0x00820132
 800e488:	01320105 	.word	0x01320105
 800e48c:	01320132 	.word	0x01320132
 800e490:	01320132 	.word	0x01320132
 800e494:	01320132 	.word	0x01320132
 800e498:	007b00bc 	.word	0x007b00bc
 800e49c:	007b007b 	.word	0x007b007b
 800e4a0:	00f7012f 	.word	0x00f7012f
 800e4a4:	01320132 	.word	0x01320132
 800e4a8:	013200e3 	.word	0x013200e3
 800e4ac:	01320132 	.word	0x01320132
 800e4b0:	00a00132 	.word	0x00a00132
 800e4b4:	01120132 	.word	0x01120132
 800e4b8:	01320132 	.word	0x01320132
 800e4bc:	01010132 	.word	0x01010132
 800e4c0:	01320132 	.word	0x01320132
 800e4c4:	00820132 	.word	0x00820132
 800e4c8:	0105      	.short	0x0105
 800e4ca:	05f1      	lsls	r1, r6, #23
 800e4cc:	d520      	bpl.n	800e510 <__ssvfscanf_r+0x10e0>
 800e4ce:	2280      	movs	r2, #128	; 0x80
 800e4d0:	4396      	bics	r6, r2
 800e4d2:	69fa      	ldr	r2, [r7, #28]
 800e4d4:	3201      	adds	r2, #1
 800e4d6:	61fa      	str	r2, [r7, #28]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d004      	beq.n	800e4e8 <__ssvfscanf_r+0x10b8>
 800e4de:	3a01      	subs	r2, #1
 800e4e0:	60fa      	str	r2, [r7, #12]
 800e4e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4e4:	3201      	adds	r2, #1
 800e4e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4ec:	3a01      	subs	r2, #1
 800e4ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4f2:	3201      	adds	r2, #1
 800e4f4:	63ba      	str	r2, [r7, #56]	; 0x38
 800e4f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4f8:	6852      	ldr	r2, [r2, #4]
 800e4fa:	3a01      	subs	r2, #1
 800e4fc:	604a      	str	r2, [r1, #4]
 800e4fe:	2a00      	cmp	r2, #0
 800e500:	dc00      	bgt.n	800e504 <__ssvfscanf_r+0x10d4>
 800e502:	e0d6      	b.n	800e6b2 <__ssvfscanf_r+0x1282>
 800e504:	3301      	adds	r3, #1
 800e506:	600b      	str	r3, [r1, #0]
 800e508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d184      	bne.n	800e418 <__ssvfscanf_r+0xfe8>
 800e50e:	e057      	b.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e510:	6a39      	ldr	r1, [r7, #32]
 800e512:	1909      	adds	r1, r1, r4
 800e514:	2900      	cmp	r1, #0
 800e516:	d153      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e518:	494a      	ldr	r1, [pc, #296]	; (800e644 <__ssvfscanf_r+0x1214>)
 800e51a:	400e      	ands	r6, r1
 800e51c:	702a      	strb	r2, [r5, #0]
 800e51e:	3501      	adds	r5, #1
 800e520:	e7e2      	b.n	800e4e8 <__ssvfscanf_r+0x10b8>
 800e522:	0531      	lsls	r1, r6, #20
 800e524:	d54c      	bpl.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e526:	6a39      	ldr	r1, [r7, #32]
 800e528:	1909      	adds	r1, r1, r4
 800e52a:	2900      	cmp	r1, #0
 800e52c:	d040      	beq.n	800e5b0 <__ssvfscanf_r+0x1180>
 800e52e:	e047      	b.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e530:	2198      	movs	r1, #152	; 0x98
 800e532:	2080      	movs	r0, #128	; 0x80
 800e534:	0109      	lsls	r1, r1, #4
 800e536:	4031      	ands	r1, r6
 800e538:	0040      	lsls	r0, r0, #1
 800e53a:	4281      	cmp	r1, r0
 800e53c:	d140      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e53e:	69f9      	ldr	r1, [r7, #28]
 800e540:	2901      	cmp	r1, #1
 800e542:	d13d      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e544:	2080      	movs	r0, #128	; 0x80
 800e546:	4940      	ldr	r1, [pc, #256]	; (800e648 <__ssvfscanf_r+0x1218>)
 800e548:	0100      	lsls	r0, r0, #4
 800e54a:	400e      	ands	r6, r1
 800e54c:	3132      	adds	r1, #50	; 0x32
 800e54e:	31ff      	adds	r1, #255	; 0xff
 800e550:	7029      	strb	r1, [r5, #0]
 800e552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e554:	4306      	orrs	r6, r0
 800e556:	3901      	subs	r1, #1
 800e558:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e55a:	3501      	adds	r5, #1
 800e55c:	2100      	movs	r1, #0
 800e55e:	61f9      	str	r1, [r7, #28]
 800e560:	e7dc      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e562:	2180      	movs	r1, #128	; 0x80
 800e564:	420e      	tst	r6, r1
 800e566:	d02b      	beq.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e568:	438e      	bics	r6, r1
 800e56a:	e7d7      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e56c:	6a39      	ldr	r1, [r7, #32]
 800e56e:	2900      	cmp	r1, #0
 800e570:	d10d      	bne.n	800e58e <__ssvfscanf_r+0x115e>
 800e572:	69f9      	ldr	r1, [r7, #28]
 800e574:	2900      	cmp	r1, #0
 800e576:	d10e      	bne.n	800e596 <__ssvfscanf_r+0x1166>
 800e578:	21e0      	movs	r1, #224	; 0xe0
 800e57a:	0030      	movs	r0, r6
 800e57c:	00c9      	lsls	r1, r1, #3
 800e57e:	4008      	ands	r0, r1
 800e580:	4288      	cmp	r0, r1
 800e582:	d108      	bne.n	800e596 <__ssvfscanf_r+0x1166>
 800e584:	4931      	ldr	r1, [pc, #196]	; (800e64c <__ssvfscanf_r+0x121c>)
 800e586:	400e      	ands	r6, r1
 800e588:	2101      	movs	r1, #1
 800e58a:	6239      	str	r1, [r7, #32]
 800e58c:	e7c6      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e58e:	6a39      	ldr	r1, [r7, #32]
 800e590:	2902      	cmp	r1, #2
 800e592:	d100      	bne.n	800e596 <__ssvfscanf_r+0x1166>
 800e594:	e089      	b.n	800e6aa <__ssvfscanf_r+0x127a>
 800e596:	2c01      	cmp	r4, #1
 800e598:	d001      	beq.n	800e59e <__ssvfscanf_r+0x116e>
 800e59a:	2c04      	cmp	r4, #4
 800e59c:	d110      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e59e:	3401      	adds	r4, #1
 800e5a0:	b2e4      	uxtb	r4, r4
 800e5a2:	e7bb      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e5a4:	0531      	lsls	r1, r6, #20
 800e5a6:	d508      	bpl.n	800e5ba <__ssvfscanf_r+0x118a>
 800e5a8:	6a39      	ldr	r1, [r7, #32]
 800e5aa:	1909      	adds	r1, r1, r4
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d104      	bne.n	800e5ba <__ssvfscanf_r+0x118a>
 800e5b0:	4824      	ldr	r0, [pc, #144]	; (800e644 <__ssvfscanf_r+0x1214>)
 800e5b2:	000c      	movs	r4, r1
 800e5b4:	4006      	ands	r6, r0
 800e5b6:	6239      	str	r1, [r7, #32]
 800e5b8:	e7b0      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e5ba:	6a39      	ldr	r1, [r7, #32]
 800e5bc:	2901      	cmp	r1, #1
 800e5be:	d076      	beq.n	800e6ae <__ssvfscanf_r+0x127e>
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <__ssvfscanf_r+0x119a>
 800e5c6:	4b20      	ldr	r3, [pc, #128]	; (800e648 <__ssvfscanf_r+0x1218>)
 800e5c8:	401e      	ands	r6, r3
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d877      	bhi.n	800e6c2 <__ssvfscanf_r+0x1292>
 800e5d2:	238c      	movs	r3, #140	; 0x8c
 800e5d4:	2248      	movs	r2, #72	; 0x48
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	189b      	adds	r3, r3, r2
 800e5da:	19db      	adds	r3, r3, r7
 800e5dc:	429d      	cmp	r5, r3
 800e5de:	d801      	bhi.n	800e5e4 <__ssvfscanf_r+0x11b4>
 800e5e0:	f7ff f823 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800e5e4:	3d01      	subs	r5, #1
 800e5e6:	7829      	ldrb	r1, [r5, #0]
 800e5e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5ec:	f001 fe78 	bl	80102e0 <_sungetc_r>
 800e5f0:	e7ef      	b.n	800e5d2 <__ssvfscanf_r+0x11a2>
 800e5f2:	2c00      	cmp	r4, #0
 800e5f4:	d10c      	bne.n	800e610 <__ssvfscanf_r+0x11e0>
 800e5f6:	69f9      	ldr	r1, [r7, #28]
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	d1e4      	bne.n	800e5c6 <__ssvfscanf_r+0x1196>
 800e5fc:	21e0      	movs	r1, #224	; 0xe0
 800e5fe:	0030      	movs	r0, r6
 800e600:	00c9      	lsls	r1, r1, #3
 800e602:	4008      	ands	r0, r1
 800e604:	4288      	cmp	r0, r1
 800e606:	d1e0      	bne.n	800e5ca <__ssvfscanf_r+0x119a>
 800e608:	4910      	ldr	r1, [pc, #64]	; (800e64c <__ssvfscanf_r+0x121c>)
 800e60a:	3401      	adds	r4, #1
 800e60c:	400e      	ands	r6, r1
 800e60e:	e785      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e610:	20fd      	movs	r0, #253	; 0xfd
 800e612:	1ee1      	subs	r1, r4, #3
 800e614:	4201      	tst	r1, r0
 800e616:	d1d3      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e618:	e7c1      	b.n	800e59e <__ssvfscanf_r+0x116e>
 800e61a:	0531      	lsls	r1, r6, #20
 800e61c:	d503      	bpl.n	800e626 <__ssvfscanf_r+0x11f6>
 800e61e:	6a39      	ldr	r1, [r7, #32]
 800e620:	1909      	adds	r1, r1, r4
 800e622:	2900      	cmp	r1, #0
 800e624:	d0c4      	beq.n	800e5b0 <__ssvfscanf_r+0x1180>
 800e626:	2c02      	cmp	r4, #2
 800e628:	d1ca      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e62a:	2403      	movs	r4, #3
 800e62c:	e776      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e62e:	2c06      	cmp	r4, #6
 800e630:	d1c6      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e632:	2407      	movs	r4, #7
 800e634:	e772      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e636:	2c07      	cmp	r4, #7
 800e638:	d1c2      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e63a:	2408      	movs	r4, #8
 800e63c:	e76e      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e63e:	46c0      	nop			; (mov r8, r8)
 800e640:	0800fe89 	.word	0x0800fe89
 800e644:	fffffe7f 	.word	0xfffffe7f
 800e648:	fffffeff 	.word	0xfffffeff
 800e64c:	fffff87f 	.word	0xfffff87f
 800e650:	0531      	lsls	r1, r6, #20
 800e652:	d5b5      	bpl.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e654:	21a0      	movs	r1, #160	; 0xa0
 800e656:	2080      	movs	r0, #128	; 0x80
 800e658:	00c9      	lsls	r1, r1, #3
 800e65a:	00c0      	lsls	r0, r0, #3
 800e65c:	4031      	ands	r1, r6
 800e65e:	4281      	cmp	r1, r0
 800e660:	d004      	beq.n	800e66c <__ssvfscanf_r+0x123c>
 800e662:	4206      	tst	r6, r0
 800e664:	d0ac      	beq.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e666:	69f9      	ldr	r1, [r7, #28]
 800e668:	2900      	cmp	r1, #0
 800e66a:	d0ae      	beq.n	800e5ca <__ssvfscanf_r+0x119a>
 800e66c:	2180      	movs	r1, #128	; 0x80
 800e66e:	0089      	lsls	r1, r1, #2
 800e670:	420e      	tst	r6, r1
 800e672:	d104      	bne.n	800e67e <__ssvfscanf_r+0x124e>
 800e674:	69f9      	ldr	r1, [r7, #28]
 800e676:	6938      	ldr	r0, [r7, #16]
 800e678:	607d      	str	r5, [r7, #4]
 800e67a:	1a09      	subs	r1, r1, r0
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	20c0      	movs	r0, #192	; 0xc0
 800e680:	4973      	ldr	r1, [pc, #460]	; (800e850 <__ssvfscanf_r+0x1420>)
 800e682:	0040      	lsls	r0, r0, #1
 800e684:	400e      	ands	r6, r1
 800e686:	4306      	orrs	r6, r0
 800e688:	e768      	b.n	800e55c <__ssvfscanf_r+0x112c>
 800e68a:	0531      	lsls	r1, r6, #20
 800e68c:	d5e2      	bpl.n	800e654 <__ssvfscanf_r+0x1224>
 800e68e:	e74a      	b.n	800e526 <__ssvfscanf_r+0x10f6>
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	7809      	ldrb	r1, [r1, #0]
 800e694:	4291      	cmp	r1, r2
 800e696:	d193      	bne.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e698:	2180      	movs	r1, #128	; 0x80
 800e69a:	0089      	lsls	r1, r1, #2
 800e69c:	420e      	tst	r6, r1
 800e69e:	d08f      	beq.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e6a0:	496c      	ldr	r1, [pc, #432]	; (800e854 <__ssvfscanf_r+0x1424>)
 800e6a2:	400e      	ands	r6, r1
 800e6a4:	69f9      	ldr	r1, [r7, #28]
 800e6a6:	6139      	str	r1, [r7, #16]
 800e6a8:	e738      	b.n	800e51c <__ssvfscanf_r+0x10ec>
 800e6aa:	2103      	movs	r1, #3
 800e6ac:	e76d      	b.n	800e58a <__ssvfscanf_r+0x115a>
 800e6ae:	2102      	movs	r1, #2
 800e6b0:	e76b      	b.n	800e58a <__ssvfscanf_r+0x115a>
 800e6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6b6:	f001 fe4f 	bl	8010358 <__ssrefill_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d100      	bne.n	800e6c0 <__ssvfscanf_r+0x1290>
 800e6be:	e723      	b.n	800e508 <__ssvfscanf_r+0x10d8>
 800e6c0:	e77e      	b.n	800e5c0 <__ssvfscanf_r+0x1190>
 800e6c2:	1e63      	subs	r3, r4, #1
 800e6c4:	2b06      	cmp	r3, #6
 800e6c6:	d825      	bhi.n	800e714 <__ssvfscanf_r+0x12e4>
 800e6c8:	2c02      	cmp	r4, #2
 800e6ca:	d837      	bhi.n	800e73c <__ssvfscanf_r+0x130c>
 800e6cc:	238c      	movs	r3, #140	; 0x8c
 800e6ce:	2248      	movs	r2, #72	; 0x48
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	189b      	adds	r3, r3, r2
 800e6d4:	19db      	adds	r3, r3, r7
 800e6d6:	429d      	cmp	r5, r3
 800e6d8:	d801      	bhi.n	800e6de <__ssvfscanf_r+0x12ae>
 800e6da:	f7fe ffa6 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800e6de:	3d01      	subs	r5, #1
 800e6e0:	7829      	ldrb	r1, [r5, #0]
 800e6e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6e6:	f001 fdfb 	bl	80102e0 <_sungetc_r>
 800e6ea:	e7ef      	b.n	800e6cc <__ssvfscanf_r+0x129c>
 800e6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	7819      	ldrb	r1, [r3, #0]
 800e6f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6f8:	f001 fdf2 	bl	80102e0 <_sungetc_r>
 800e6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fe:	6a3a      	ldr	r2, [r7, #32]
 800e700:	189b      	adds	r3, r3, r2
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b03      	cmp	r3, #3
 800e706:	d8f1      	bhi.n	800e6ec <__ssvfscanf_r+0x12bc>
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	3c03      	subs	r4, #3
 800e70c:	b2e4      	uxtb	r4, r4
 800e70e:	1b1b      	subs	r3, r3, r4
 800e710:	1b2d      	subs	r5, r5, r4
 800e712:	63bb      	str	r3, [r7, #56]	; 0x38
 800e714:	05f3      	lsls	r3, r6, #23
 800e716:	d52f      	bpl.n	800e778 <__ssvfscanf_r+0x1348>
 800e718:	0573      	lsls	r3, r6, #21
 800e71a:	d514      	bpl.n	800e746 <__ssvfscanf_r+0x1316>
 800e71c:	238c      	movs	r3, #140	; 0x8c
 800e71e:	2248      	movs	r2, #72	; 0x48
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	189b      	adds	r3, r3, r2
 800e724:	19db      	adds	r3, r3, r7
 800e726:	429d      	cmp	r5, r3
 800e728:	d801      	bhi.n	800e72e <__ssvfscanf_r+0x12fe>
 800e72a:	f7fe ff7e 	bl	800d62a <__ssvfscanf_r+0x1fa>
 800e72e:	3d01      	subs	r5, #1
 800e730:	7829      	ldrb	r1, [r5, #0]
 800e732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e734:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e736:	f001 fdd3 	bl	80102e0 <_sungetc_r>
 800e73a:	e7ef      	b.n	800e71c <__ssvfscanf_r+0x12ec>
 800e73c:	1b63      	subs	r3, r4, r5
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	63fd      	str	r5, [r7, #60]	; 0x3c
 800e742:	623b      	str	r3, [r7, #32]
 800e744:	e7da      	b.n	800e6fc <__ssvfscanf_r+0x12cc>
 800e746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e748:	1e6c      	subs	r4, r5, #1
 800e74a:	7821      	ldrb	r1, [r4, #0]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e750:	2965      	cmp	r1, #101	; 0x65
 800e752:	d00a      	beq.n	800e76a <__ssvfscanf_r+0x133a>
 800e754:	2945      	cmp	r1, #69	; 0x45
 800e756:	d008      	beq.n	800e76a <__ssvfscanf_r+0x133a>
 800e758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e75a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e75c:	f001 fdc0 	bl	80102e0 <_sungetc_r>
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	1eac      	subs	r4, r5, #2
 800e764:	3b02      	subs	r3, #2
 800e766:	7821      	ldrb	r1, [r4, #0]
 800e768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e76a:	0025      	movs	r5, r4
 800e76c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e76e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e770:	f001 fdb6 	bl	80102e0 <_sungetc_r>
 800e774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e776:	63bb      	str	r3, [r7, #56]	; 0x38
 800e778:	2310      	movs	r3, #16
 800e77a:	0032      	movs	r2, r6
 800e77c:	401a      	ands	r2, r3
 800e77e:	421e      	tst	r6, r3
 800e780:	d001      	beq.n	800e786 <__ssvfscanf_r+0x1356>
 800e782:	f7fe fe71 	bl	800d468 <__ssvfscanf_r+0x38>
 800e786:	23c0      	movs	r3, #192	; 0xc0
 800e788:	2180      	movs	r1, #128	; 0x80
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	702a      	strb	r2, [r5, #0]
 800e78e:	4033      	ands	r3, r6
 800e790:	00c9      	lsls	r1, r1, #3
 800e792:	428b      	cmp	r3, r1
 800e794:	d11f      	bne.n	800e7d6 <__ssvfscanf_r+0x13a6>
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	69f9      	ldr	r1, [r7, #28]
 800e79c:	1a9a      	subs	r2, r3, r2
 800e79e:	428b      	cmp	r3, r1
 800e7a0:	d125      	bne.n	800e7ee <__ssvfscanf_r+0x13be>
 800e7a2:	238c      	movs	r3, #140	; 0x8c
 800e7a4:	2148      	movs	r1, #72	; 0x48
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	185b      	adds	r3, r3, r1
 800e7aa:	19d9      	adds	r1, r3, r7
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7b0:	f7fb ffca 	bl	800a748 <_strtod_r>
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	0004      	movs	r4, r0
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	000d      	movs	r5, r1
 800e7bc:	623b      	str	r3, [r7, #32]
 800e7be:	07f3      	lsls	r3, r6, #31
 800e7c0:	d523      	bpl.n	800e80a <__ssvfscanf_r+0x13da>
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	601c      	str	r4, [r3, #0]
 800e7c8:	605d      	str	r5, [r3, #4]
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	f7fe ffa5 	bl	800d720 <__ssvfscanf_r+0x2f0>
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0e2      	beq.n	800e7a2 <__ssvfscanf_r+0x1372>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7e0:	1c59      	adds	r1, r3, #1
 800e7e2:	230a      	movs	r3, #10
 800e7e4:	f7fc f84c 	bl	800a880 <_strtol_r>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	687d      	ldr	r5, [r7, #4]
 800e7ec:	1ac2      	subs	r2, r0, r3
 800e7ee:	2148      	movs	r1, #72	; 0x48
 800e7f0:	4b19      	ldr	r3, [pc, #100]	; (800e858 <__ssvfscanf_r+0x1428>)
 800e7f2:	185b      	adds	r3, r3, r1
 800e7f4:	19db      	adds	r3, r3, r7
 800e7f6:	429d      	cmp	r5, r3
 800e7f8:	d302      	bcc.n	800e800 <__ssvfscanf_r+0x13d0>
 800e7fa:	4b18      	ldr	r3, [pc, #96]	; (800e85c <__ssvfscanf_r+0x142c>)
 800e7fc:	185b      	adds	r3, r3, r1
 800e7fe:	19dd      	adds	r5, r3, r7
 800e800:	0028      	movs	r0, r5
 800e802:	4917      	ldr	r1, [pc, #92]	; (800e860 <__ssvfscanf_r+0x1430>)
 800e804:	f7fc f944 	bl	800aa90 <sprintf>
 800e808:	e7cb      	b.n	800e7a2 <__ssvfscanf_r+0x1372>
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e810:	07b6      	lsls	r6, r6, #30
 800e812:	d4d8      	bmi.n	800e7c6 <__ssvfscanf_r+0x1396>
 800e814:	0002      	movs	r2, r0
 800e816:	000b      	movs	r3, r1
 800e818:	f7f3 fd6c 	bl	80022f4 <__aeabi_dcmpun>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	d005      	beq.n	800e82c <__ssvfscanf_r+0x13fc>
 800e820:	4810      	ldr	r0, [pc, #64]	; (800e864 <__ssvfscanf_r+0x1434>)
 800e822:	f7fc fabf 	bl	800ada4 <nanf>
 800e826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e828:	6018      	str	r0, [r3, #0]
 800e82a:	e7ce      	b.n	800e7ca <__ssvfscanf_r+0x139a>
 800e82c:	0020      	movs	r0, r4
 800e82e:	0029      	movs	r1, r5
 800e830:	f7f3 fe0a 	bl	8002448 <__aeabi_d2f>
 800e834:	e7f7      	b.n	800e826 <__ssvfscanf_r+0x13f6>
 800e836:	00a3      	lsls	r3, r4, #2
 800e838:	18ed      	adds	r5, r5, r3
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	3401      	adds	r4, #1
 800e83e:	6818      	ldr	r0, [r3, #0]
 800e840:	f7fa ff32 	bl	80096a8 <free>
 800e844:	2200      	movs	r2, #0
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	f7fe ffc3 	bl	800d7d4 <__ssvfscanf_r+0x3a4>
 800e84e:	46c0      	nop			; (mov r8, r8)
 800e850:	fffff07f 	.word	0xfffff07f
 800e854:	fffffd7f 	.word	0xfffffd7f
 800e858:	0000026b 	.word	0x0000026b
 800e85c:	0000026a 	.word	0x0000026a
 800e860:	080132a8 	.word	0x080132a8
 800e864:	0801330b 	.word	0x0801330b

0800e868 <_fclose_r>:
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	0005      	movs	r5, r0
 800e86c:	1e0c      	subs	r4, r1, #0
 800e86e:	d102      	bne.n	800e876 <_fclose_r+0xe>
 800e870:	2600      	movs	r6, #0
 800e872:	0030      	movs	r0, r6
 800e874:	bd70      	pop	{r4, r5, r6, pc}
 800e876:	2800      	cmp	r0, #0
 800e878:	d004      	beq.n	800e884 <_fclose_r+0x1c>
 800e87a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <_fclose_r+0x1c>
 800e880:	f7fc f89e 	bl	800a9c0 <__sinit>
 800e884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e886:	07db      	lsls	r3, r3, #31
 800e888:	d405      	bmi.n	800e896 <_fclose_r+0x2e>
 800e88a:	89a3      	ldrh	r3, [r4, #12]
 800e88c:	059b      	lsls	r3, r3, #22
 800e88e:	d402      	bmi.n	800e896 <_fclose_r+0x2e>
 800e890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e892:	f7fc fa6b 	bl	800ad6c <__retarget_lock_acquire_recursive>
 800e896:	220c      	movs	r2, #12
 800e898:	5ea3      	ldrsh	r3, [r4, r2]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d109      	bne.n	800e8b2 <_fclose_r+0x4a>
 800e89e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	0016      	movs	r6, r2
 800e8a4:	401e      	ands	r6, r3
 800e8a6:	421a      	tst	r2, r3
 800e8a8:	d1e2      	bne.n	800e870 <_fclose_r+0x8>
 800e8aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8ac:	f7fc fa5f 	bl	800ad6e <__retarget_lock_release_recursive>
 800e8b0:	e7df      	b.n	800e872 <_fclose_r+0xa>
 800e8b2:	0021      	movs	r1, r4
 800e8b4:	0028      	movs	r0, r5
 800e8b6:	f000 f837 	bl	800e928 <__sflush_r>
 800e8ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e8bc:	0006      	movs	r6, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d006      	beq.n	800e8d0 <_fclose_r+0x68>
 800e8c2:	0028      	movs	r0, r5
 800e8c4:	69e1      	ldr	r1, [r4, #28]
 800e8c6:	4798      	blx	r3
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	da01      	bge.n	800e8d0 <_fclose_r+0x68>
 800e8cc:	2601      	movs	r6, #1
 800e8ce:	4276      	negs	r6, r6
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	061b      	lsls	r3, r3, #24
 800e8d4:	d503      	bpl.n	800e8de <_fclose_r+0x76>
 800e8d6:	0028      	movs	r0, r5
 800e8d8:	6921      	ldr	r1, [r4, #16]
 800e8da:	f7fc facf 	bl	800ae7c <_free_r>
 800e8de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e8e0:	2900      	cmp	r1, #0
 800e8e2:	d008      	beq.n	800e8f6 <_fclose_r+0x8e>
 800e8e4:	0023      	movs	r3, r4
 800e8e6:	3340      	adds	r3, #64	; 0x40
 800e8e8:	4299      	cmp	r1, r3
 800e8ea:	d002      	beq.n	800e8f2 <_fclose_r+0x8a>
 800e8ec:	0028      	movs	r0, r5
 800e8ee:	f7fc fac5 	bl	800ae7c <_free_r>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6323      	str	r3, [r4, #48]	; 0x30
 800e8f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e8f8:	2900      	cmp	r1, #0
 800e8fa:	d004      	beq.n	800e906 <_fclose_r+0x9e>
 800e8fc:	0028      	movs	r0, r5
 800e8fe:	f7fc fabd 	bl	800ae7c <_free_r>
 800e902:	2300      	movs	r3, #0
 800e904:	6463      	str	r3, [r4, #68]	; 0x44
 800e906:	f7fc f84b 	bl	800a9a0 <__sfp_lock_acquire>
 800e90a:	2300      	movs	r3, #0
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e910:	07db      	lsls	r3, r3, #31
 800e912:	d402      	bmi.n	800e91a <_fclose_r+0xb2>
 800e914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e916:	f7fc fa2a 	bl	800ad6e <__retarget_lock_release_recursive>
 800e91a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e91c:	f7fc fa25 	bl	800ad6a <__retarget_lock_close_recursive>
 800e920:	f7fc f846 	bl	800a9b0 <__sfp_lock_release>
 800e924:	e7a5      	b.n	800e872 <_fclose_r+0xa>
	...

0800e928 <__sflush_r>:
 800e928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e92a:	230c      	movs	r3, #12
 800e92c:	5eca      	ldrsh	r2, [r1, r3]
 800e92e:	000c      	movs	r4, r1
 800e930:	0005      	movs	r5, r0
 800e932:	b291      	uxth	r1, r2
 800e934:	0713      	lsls	r3, r2, #28
 800e936:	d464      	bmi.n	800ea02 <__sflush_r+0xda>
 800e938:	2380      	movs	r3, #128	; 0x80
 800e93a:	011b      	lsls	r3, r3, #4
 800e93c:	4313      	orrs	r3, r2
 800e93e:	6862      	ldr	r2, [r4, #4]
 800e940:	81a3      	strh	r3, [r4, #12]
 800e942:	2a00      	cmp	r2, #0
 800e944:	dc04      	bgt.n	800e950 <__sflush_r+0x28>
 800e946:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e948:	2a00      	cmp	r2, #0
 800e94a:	dc01      	bgt.n	800e950 <__sflush_r+0x28>
 800e94c:	2000      	movs	r0, #0
 800e94e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e950:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e952:	2f00      	cmp	r7, #0
 800e954:	d0fa      	beq.n	800e94c <__sflush_r+0x24>
 800e956:	2200      	movs	r2, #0
 800e958:	2080      	movs	r0, #128	; 0x80
 800e95a:	682e      	ldr	r6, [r5, #0]
 800e95c:	602a      	str	r2, [r5, #0]
 800e95e:	001a      	movs	r2, r3
 800e960:	0140      	lsls	r0, r0, #5
 800e962:	69e1      	ldr	r1, [r4, #28]
 800e964:	4002      	ands	r2, r0
 800e966:	4203      	tst	r3, r0
 800e968:	d038      	beq.n	800e9dc <__sflush_r+0xb4>
 800e96a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	075b      	lsls	r3, r3, #29
 800e970:	d506      	bpl.n	800e980 <__sflush_r+0x58>
 800e972:	6863      	ldr	r3, [r4, #4]
 800e974:	1ac0      	subs	r0, r0, r3
 800e976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d001      	beq.n	800e980 <__sflush_r+0x58>
 800e97c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e97e:	1ac0      	subs	r0, r0, r3
 800e980:	0002      	movs	r2, r0
 800e982:	2300      	movs	r3, #0
 800e984:	0028      	movs	r0, r5
 800e986:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e988:	69e1      	ldr	r1, [r4, #28]
 800e98a:	47b8      	blx	r7
 800e98c:	89a2      	ldrh	r2, [r4, #12]
 800e98e:	1c43      	adds	r3, r0, #1
 800e990:	d106      	bne.n	800e9a0 <__sflush_r+0x78>
 800e992:	6829      	ldr	r1, [r5, #0]
 800e994:	291d      	cmp	r1, #29
 800e996:	d830      	bhi.n	800e9fa <__sflush_r+0xd2>
 800e998:	4b2c      	ldr	r3, [pc, #176]	; (800ea4c <__sflush_r+0x124>)
 800e99a:	410b      	asrs	r3, r1
 800e99c:	07db      	lsls	r3, r3, #31
 800e99e:	d42c      	bmi.n	800e9fa <__sflush_r+0xd2>
 800e9a0:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <__sflush_r+0x128>)
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	6062      	str	r2, [r4, #4]
 800e9a8:	6922      	ldr	r2, [r4, #16]
 800e9aa:	b21b      	sxth	r3, r3
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	6022      	str	r2, [r4, #0]
 800e9b0:	04db      	lsls	r3, r3, #19
 800e9b2:	d505      	bpl.n	800e9c0 <__sflush_r+0x98>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d102      	bne.n	800e9be <__sflush_r+0x96>
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d100      	bne.n	800e9c0 <__sflush_r+0x98>
 800e9be:	6520      	str	r0, [r4, #80]	; 0x50
 800e9c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e9c2:	602e      	str	r6, [r5, #0]
 800e9c4:	2900      	cmp	r1, #0
 800e9c6:	d0c1      	beq.n	800e94c <__sflush_r+0x24>
 800e9c8:	0023      	movs	r3, r4
 800e9ca:	3340      	adds	r3, #64	; 0x40
 800e9cc:	4299      	cmp	r1, r3
 800e9ce:	d002      	beq.n	800e9d6 <__sflush_r+0xae>
 800e9d0:	0028      	movs	r0, r5
 800e9d2:	f7fc fa53 	bl	800ae7c <_free_r>
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	6320      	str	r0, [r4, #48]	; 0x30
 800e9da:	e7b8      	b.n	800e94e <__sflush_r+0x26>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	0028      	movs	r0, r5
 800e9e0:	47b8      	blx	r7
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d1c2      	bne.n	800e96c <__sflush_r+0x44>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d0bf      	beq.n	800e96c <__sflush_r+0x44>
 800e9ec:	2b1d      	cmp	r3, #29
 800e9ee:	d001      	beq.n	800e9f4 <__sflush_r+0xcc>
 800e9f0:	2b16      	cmp	r3, #22
 800e9f2:	d101      	bne.n	800e9f8 <__sflush_r+0xd0>
 800e9f4:	602e      	str	r6, [r5, #0]
 800e9f6:	e7a9      	b.n	800e94c <__sflush_r+0x24>
 800e9f8:	89a2      	ldrh	r2, [r4, #12]
 800e9fa:	2340      	movs	r3, #64	; 0x40
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	81a3      	strh	r3, [r4, #12]
 800ea00:	e7a5      	b.n	800e94e <__sflush_r+0x26>
 800ea02:	6926      	ldr	r6, [r4, #16]
 800ea04:	2e00      	cmp	r6, #0
 800ea06:	d0a1      	beq.n	800e94c <__sflush_r+0x24>
 800ea08:	6827      	ldr	r7, [r4, #0]
 800ea0a:	6026      	str	r6, [r4, #0]
 800ea0c:	1bbb      	subs	r3, r7, r6
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	2300      	movs	r3, #0
 800ea12:	0789      	lsls	r1, r1, #30
 800ea14:	d100      	bne.n	800ea18 <__sflush_r+0xf0>
 800ea16:	6963      	ldr	r3, [r4, #20]
 800ea18:	60a3      	str	r3, [r4, #8]
 800ea1a:	9b01      	ldr	r3, [sp, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dc00      	bgt.n	800ea22 <__sflush_r+0xfa>
 800ea20:	e794      	b.n	800e94c <__sflush_r+0x24>
 800ea22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea24:	0032      	movs	r2, r6
 800ea26:	001f      	movs	r7, r3
 800ea28:	0028      	movs	r0, r5
 800ea2a:	9b01      	ldr	r3, [sp, #4]
 800ea2c:	69e1      	ldr	r1, [r4, #28]
 800ea2e:	47b8      	blx	r7
 800ea30:	2800      	cmp	r0, #0
 800ea32:	dc06      	bgt.n	800ea42 <__sflush_r+0x11a>
 800ea34:	2340      	movs	r3, #64	; 0x40
 800ea36:	2001      	movs	r0, #1
 800ea38:	89a2      	ldrh	r2, [r4, #12]
 800ea3a:	4240      	negs	r0, r0
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	81a3      	strh	r3, [r4, #12]
 800ea40:	e785      	b.n	800e94e <__sflush_r+0x26>
 800ea42:	9b01      	ldr	r3, [sp, #4]
 800ea44:	1836      	adds	r6, r6, r0
 800ea46:	1a1b      	subs	r3, r3, r0
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	e7e6      	b.n	800ea1a <__sflush_r+0xf2>
 800ea4c:	dfbffffe 	.word	0xdfbffffe
 800ea50:	fffff7ff 	.word	0xfffff7ff

0800ea54 <_fflush_r>:
 800ea54:	b570      	push	{r4, r5, r6, lr}
 800ea56:	0005      	movs	r5, r0
 800ea58:	000c      	movs	r4, r1
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d004      	beq.n	800ea68 <_fflush_r+0x14>
 800ea5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d101      	bne.n	800ea68 <_fflush_r+0x14>
 800ea64:	f7fb ffac 	bl	800a9c0 <__sinit>
 800ea68:	220c      	movs	r2, #12
 800ea6a:	5ea3      	ldrsh	r3, [r4, r2]
 800ea6c:	1e1e      	subs	r6, r3, #0
 800ea6e:	d015      	beq.n	800ea9c <_fflush_r+0x48>
 800ea70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea72:	07d2      	lsls	r2, r2, #31
 800ea74:	d404      	bmi.n	800ea80 <_fflush_r+0x2c>
 800ea76:	059b      	lsls	r3, r3, #22
 800ea78:	d402      	bmi.n	800ea80 <_fflush_r+0x2c>
 800ea7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea7c:	f7fc f976 	bl	800ad6c <__retarget_lock_acquire_recursive>
 800ea80:	0021      	movs	r1, r4
 800ea82:	0028      	movs	r0, r5
 800ea84:	f7ff ff50 	bl	800e928 <__sflush_r>
 800ea88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea8a:	0006      	movs	r6, r0
 800ea8c:	07db      	lsls	r3, r3, #31
 800ea8e:	d405      	bmi.n	800ea9c <_fflush_r+0x48>
 800ea90:	89a3      	ldrh	r3, [r4, #12]
 800ea92:	059b      	lsls	r3, r3, #22
 800ea94:	d402      	bmi.n	800ea9c <_fflush_r+0x48>
 800ea96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea98:	f7fc f969 	bl	800ad6e <__retarget_lock_release_recursive>
 800ea9c:	0030      	movs	r0, r6
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}

0800eaa0 <__sccl>:
 800eaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaa2:	780b      	ldrb	r3, [r1, #0]
 800eaa4:	0004      	movs	r4, r0
 800eaa6:	2b5e      	cmp	r3, #94	; 0x5e
 800eaa8:	d019      	beq.n	800eade <__sccl+0x3e>
 800eaaa:	2200      	movs	r2, #0
 800eaac:	1c4d      	adds	r5, r1, #1
 800eaae:	0021      	movs	r1, r4
 800eab0:	1c60      	adds	r0, r4, #1
 800eab2:	30ff      	adds	r0, #255	; 0xff
 800eab4:	700a      	strb	r2, [r1, #0]
 800eab6:	3101      	adds	r1, #1
 800eab8:	4281      	cmp	r1, r0
 800eaba:	d1fb      	bne.n	800eab4 <__sccl+0x14>
 800eabc:	1e68      	subs	r0, r5, #1
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00c      	beq.n	800eadc <__sccl+0x3c>
 800eac2:	2101      	movs	r1, #1
 800eac4:	262d      	movs	r6, #45	; 0x2d
 800eac6:	404a      	eors	r2, r1
 800eac8:	0028      	movs	r0, r5
 800eaca:	54e2      	strb	r2, [r4, r3]
 800eacc:	7801      	ldrb	r1, [r0, #0]
 800eace:	1c45      	adds	r5, r0, #1
 800ead0:	292d      	cmp	r1, #45	; 0x2d
 800ead2:	d00c      	beq.n	800eaee <__sccl+0x4e>
 800ead4:	295d      	cmp	r1, #93	; 0x5d
 800ead6:	d01d      	beq.n	800eb14 <__sccl+0x74>
 800ead8:	2900      	cmp	r1, #0
 800eada:	d104      	bne.n	800eae6 <__sccl+0x46>
 800eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eade:	2201      	movs	r2, #1
 800eae0:	784b      	ldrb	r3, [r1, #1]
 800eae2:	1c8d      	adds	r5, r1, #2
 800eae4:	e7e3      	b.n	800eaae <__sccl+0xe>
 800eae6:	000b      	movs	r3, r1
 800eae8:	e7ee      	b.n	800eac8 <__sccl+0x28>
 800eaea:	0033      	movs	r3, r6
 800eaec:	e7ec      	b.n	800eac8 <__sccl+0x28>
 800eaee:	7841      	ldrb	r1, [r0, #1]
 800eaf0:	295d      	cmp	r1, #93	; 0x5d
 800eaf2:	d0fa      	beq.n	800eaea <__sccl+0x4a>
 800eaf4:	428b      	cmp	r3, r1
 800eaf6:	dcf8      	bgt.n	800eaea <__sccl+0x4a>
 800eaf8:	001d      	movs	r5, r3
 800eafa:	3002      	adds	r0, #2
 800eafc:	3501      	adds	r5, #1
 800eafe:	5562      	strb	r2, [r4, r5]
 800eb00:	42a9      	cmp	r1, r5
 800eb02:	dcfb      	bgt.n	800eafc <__sccl+0x5c>
 800eb04:	2500      	movs	r5, #0
 800eb06:	1c5f      	adds	r7, r3, #1
 800eb08:	428b      	cmp	r3, r1
 800eb0a:	da01      	bge.n	800eb10 <__sccl+0x70>
 800eb0c:	1acd      	subs	r5, r1, r3
 800eb0e:	3d01      	subs	r5, #1
 800eb10:	197b      	adds	r3, r7, r5
 800eb12:	e7db      	b.n	800eacc <__sccl+0x2c>
 800eb14:	0028      	movs	r0, r5
 800eb16:	e7e1      	b.n	800eadc <__sccl+0x3c>

0800eb18 <_localeconv_r>:
 800eb18:	4800      	ldr	r0, [pc, #0]	; (800eb1c <_localeconv_r+0x4>)
 800eb1a:	4770      	bx	lr
 800eb1c:	20000544 	.word	0x20000544

0800eb20 <__libc_fini_array>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	4c07      	ldr	r4, [pc, #28]	; (800eb40 <__libc_fini_array+0x20>)
 800eb24:	4d07      	ldr	r5, [pc, #28]	; (800eb44 <__libc_fini_array+0x24>)
 800eb26:	1b64      	subs	r4, r4, r5
 800eb28:	10a4      	asrs	r4, r4, #2
 800eb2a:	2c00      	cmp	r4, #0
 800eb2c:	d102      	bne.n	800eb34 <__libc_fini_array+0x14>
 800eb2e:	f002 fdcd 	bl	80116cc <_fini>
 800eb32:	bd70      	pop	{r4, r5, r6, pc}
 800eb34:	3c01      	subs	r4, #1
 800eb36:	00a3      	lsls	r3, r4, #2
 800eb38:	58eb      	ldr	r3, [r5, r3]
 800eb3a:	4798      	blx	r3
 800eb3c:	e7f5      	b.n	800eb2a <__libc_fini_array+0xa>
 800eb3e:	46c0      	nop			; (mov r8, r8)
 800eb40:	080133a8 	.word	0x080133a8
 800eb44:	080133a4 	.word	0x080133a4

0800eb48 <memchr>:
 800eb48:	b2c9      	uxtb	r1, r1
 800eb4a:	1882      	adds	r2, r0, r2
 800eb4c:	4290      	cmp	r0, r2
 800eb4e:	d101      	bne.n	800eb54 <memchr+0xc>
 800eb50:	2000      	movs	r0, #0
 800eb52:	4770      	bx	lr
 800eb54:	7803      	ldrb	r3, [r0, #0]
 800eb56:	428b      	cmp	r3, r1
 800eb58:	d0fb      	beq.n	800eb52 <memchr+0xa>
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	e7f6      	b.n	800eb4c <memchr+0x4>
	...

0800eb60 <frexp>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	0014      	movs	r4, r2
 800eb64:	2500      	movs	r5, #0
 800eb66:	6025      	str	r5, [r4, #0]
 800eb68:	4d10      	ldr	r5, [pc, #64]	; (800ebac <frexp+0x4c>)
 800eb6a:	004b      	lsls	r3, r1, #1
 800eb6c:	000a      	movs	r2, r1
 800eb6e:	085b      	lsrs	r3, r3, #1
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	dc1a      	bgt.n	800ebaa <frexp+0x4a>
 800eb74:	001d      	movs	r5, r3
 800eb76:	4305      	orrs	r5, r0
 800eb78:	d017      	beq.n	800ebaa <frexp+0x4a>
 800eb7a:	4d0d      	ldr	r5, [pc, #52]	; (800ebb0 <frexp+0x50>)
 800eb7c:	4229      	tst	r1, r5
 800eb7e:	d109      	bne.n	800eb94 <frexp+0x34>
 800eb80:	2200      	movs	r2, #0
 800eb82:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <frexp+0x54>)
 800eb84:	f7f2 fd72 	bl	800166c <__aeabi_dmul>
 800eb88:	2536      	movs	r5, #54	; 0x36
 800eb8a:	000a      	movs	r2, r1
 800eb8c:	004b      	lsls	r3, r1, #1
 800eb8e:	426d      	negs	r5, r5
 800eb90:	085b      	lsrs	r3, r3, #1
 800eb92:	6025      	str	r5, [r4, #0]
 800eb94:	4d08      	ldr	r5, [pc, #32]	; (800ebb8 <frexp+0x58>)
 800eb96:	151b      	asrs	r3, r3, #20
 800eb98:	195b      	adds	r3, r3, r5
 800eb9a:	6825      	ldr	r5, [r4, #0]
 800eb9c:	18eb      	adds	r3, r5, r3
 800eb9e:	6023      	str	r3, [r4, #0]
 800eba0:	4b06      	ldr	r3, [pc, #24]	; (800ebbc <frexp+0x5c>)
 800eba2:	401a      	ands	r2, r3
 800eba4:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <frexp+0x60>)
 800eba6:	4313      	orrs	r3, r2
 800eba8:	0019      	movs	r1, r3
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}
 800ebac:	7fefffff 	.word	0x7fefffff
 800ebb0:	7ff00000 	.word	0x7ff00000
 800ebb4:	43500000 	.word	0x43500000
 800ebb8:	fffffc02 	.word	0xfffffc02
 800ebbc:	800fffff 	.word	0x800fffff
 800ebc0:	3fe00000 	.word	0x3fe00000

0800ebc4 <__register_exitproc>:
 800ebc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebc6:	4f1c      	ldr	r7, [pc, #112]	; (800ec38 <__register_exitproc+0x74>)
 800ebc8:	0004      	movs	r4, r0
 800ebca:	6838      	ldr	r0, [r7, #0]
 800ebcc:	0016      	movs	r6, r2
 800ebce:	9301      	str	r3, [sp, #4]
 800ebd0:	9100      	str	r1, [sp, #0]
 800ebd2:	f7fc f8cb 	bl	800ad6c <__retarget_lock_acquire_recursive>
 800ebd6:	4a19      	ldr	r2, [pc, #100]	; (800ec3c <__register_exitproc+0x78>)
 800ebd8:	6813      	ldr	r3, [r2, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <__register_exitproc+0x1e>
 800ebde:	4b18      	ldr	r3, [pc, #96]	; (800ec40 <__register_exitproc+0x7c>)
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	6838      	ldr	r0, [r7, #0]
 800ebe6:	2a1f      	cmp	r2, #31
 800ebe8:	dd04      	ble.n	800ebf4 <__register_exitproc+0x30>
 800ebea:	f7fc f8c0 	bl	800ad6e <__retarget_lock_release_recursive>
 800ebee:	2001      	movs	r0, #1
 800ebf0:	4240      	negs	r0, r0
 800ebf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebf4:	2c00      	cmp	r4, #0
 800ebf6:	d014      	beq.n	800ec22 <__register_exitproc+0x5e>
 800ebf8:	0091      	lsls	r1, r2, #2
 800ebfa:	1859      	adds	r1, r3, r1
 800ebfc:	000f      	movs	r7, r1
 800ebfe:	3788      	adds	r7, #136	; 0x88
 800ec00:	603e      	str	r6, [r7, #0]
 800ec02:	2701      	movs	r7, #1
 800ec04:	001e      	movs	r6, r3
 800ec06:	4097      	lsls	r7, r2
 800ec08:	3685      	adds	r6, #133	; 0x85
 800ec0a:	36ff      	adds	r6, #255	; 0xff
 800ec0c:	6875      	ldr	r5, [r6, #4]
 800ec0e:	31fc      	adds	r1, #252	; 0xfc
 800ec10:	433d      	orrs	r5, r7
 800ec12:	6075      	str	r5, [r6, #4]
 800ec14:	9d01      	ldr	r5, [sp, #4]
 800ec16:	60cd      	str	r5, [r1, #12]
 800ec18:	2c02      	cmp	r4, #2
 800ec1a:	d102      	bne.n	800ec22 <__register_exitproc+0x5e>
 800ec1c:	68b1      	ldr	r1, [r6, #8]
 800ec1e:	4339      	orrs	r1, r7
 800ec20:	60b1      	str	r1, [r6, #8]
 800ec22:	1c51      	adds	r1, r2, #1
 800ec24:	6059      	str	r1, [r3, #4]
 800ec26:	3202      	adds	r2, #2
 800ec28:	9900      	ldr	r1, [sp, #0]
 800ec2a:	0092      	lsls	r2, r2, #2
 800ec2c:	50d1      	str	r1, [r2, r3]
 800ec2e:	f7fc f89e 	bl	800ad6e <__retarget_lock_release_recursive>
 800ec32:	2000      	movs	r0, #0
 800ec34:	e7dd      	b.n	800ebf2 <__register_exitproc+0x2e>
 800ec36:	46c0      	nop			; (mov r8, r8)
 800ec38:	200006e4 	.word	0x200006e4
 800ec3c:	20000d5c 	.word	0x20000d5c
 800ec40:	20000d60 	.word	0x20000d60

0800ec44 <__assert_func>:
 800ec44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ec46:	0014      	movs	r4, r2
 800ec48:	001a      	movs	r2, r3
 800ec4a:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <__assert_func+0x2c>)
 800ec4c:	0005      	movs	r5, r0
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	000e      	movs	r6, r1
 800ec52:	68d8      	ldr	r0, [r3, #12]
 800ec54:	4b07      	ldr	r3, [pc, #28]	; (800ec74 <__assert_func+0x30>)
 800ec56:	2c00      	cmp	r4, #0
 800ec58:	d101      	bne.n	800ec5e <__assert_func+0x1a>
 800ec5a:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <__assert_func+0x34>)
 800ec5c:	001c      	movs	r4, r3
 800ec5e:	4907      	ldr	r1, [pc, #28]	; (800ec7c <__assert_func+0x38>)
 800ec60:	9301      	str	r3, [sp, #4]
 800ec62:	9402      	str	r4, [sp, #8]
 800ec64:	002b      	movs	r3, r5
 800ec66:	9600      	str	r6, [sp, #0]
 800ec68:	f001 faa6 	bl	80101b8 <fiprintf>
 800ec6c:	f002 fb8e 	bl	801138c <abort>
 800ec70:	200006e0 	.word	0x200006e0
 800ec74:	080132d0 	.word	0x080132d0
 800ec78:	0801330b 	.word	0x0801330b
 800ec7c:	080132dd 	.word	0x080132dd

0800ec80 <_calloc_r>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	2400      	movs	r4, #0
 800ec84:	0c0b      	lsrs	r3, r1, #16
 800ec86:	0c16      	lsrs	r6, r2, #16
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d133      	bne.n	800ecf4 <_calloc_r+0x74>
 800ec8c:	42a6      	cmp	r6, r4
 800ec8e:	d121      	bne.n	800ecd4 <_calloc_r+0x54>
 800ec90:	b28b      	uxth	r3, r1
 800ec92:	b291      	uxth	r1, r2
 800ec94:	4359      	muls	r1, r3
 800ec96:	f7fa fd11 	bl	80096bc <_malloc_r>
 800ec9a:	1e05      	subs	r5, r0, #0
 800ec9c:	d033      	beq.n	800ed06 <_calloc_r+0x86>
 800ec9e:	0003      	movs	r3, r0
 800eca0:	3b08      	subs	r3, #8
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	2303      	movs	r3, #3
 800eca6:	439a      	bics	r2, r3
 800eca8:	3a04      	subs	r2, #4
 800ecaa:	2a24      	cmp	r2, #36	; 0x24
 800ecac:	d832      	bhi.n	800ed14 <_calloc_r+0x94>
 800ecae:	0003      	movs	r3, r0
 800ecb0:	2a13      	cmp	r2, #19
 800ecb2:	d90a      	bls.n	800ecca <_calloc_r+0x4a>
 800ecb4:	6004      	str	r4, [r0, #0]
 800ecb6:	6044      	str	r4, [r0, #4]
 800ecb8:	3308      	adds	r3, #8
 800ecba:	2a1b      	cmp	r2, #27
 800ecbc:	d905      	bls.n	800ecca <_calloc_r+0x4a>
 800ecbe:	6084      	str	r4, [r0, #8]
 800ecc0:	60c4      	str	r4, [r0, #12]
 800ecc2:	2a24      	cmp	r2, #36	; 0x24
 800ecc4:	d021      	beq.n	800ed0a <_calloc_r+0x8a>
 800ecc6:	0003      	movs	r3, r0
 800ecc8:	3310      	adds	r3, #16
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	605a      	str	r2, [r3, #4]
 800ecd0:	609a      	str	r2, [r3, #8]
 800ecd2:	e018      	b.n	800ed06 <_calloc_r+0x86>
 800ecd4:	1c33      	adds	r3, r6, #0
 800ecd6:	1c0d      	adds	r5, r1, #0
 800ecd8:	b289      	uxth	r1, r1
 800ecda:	b292      	uxth	r2, r2
 800ecdc:	434a      	muls	r2, r1
 800ecde:	b2ad      	uxth	r5, r5
 800ece0:	b299      	uxth	r1, r3
 800ece2:	4369      	muls	r1, r5
 800ece4:	0c13      	lsrs	r3, r2, #16
 800ece6:	18c9      	adds	r1, r1, r3
 800ece8:	0c0b      	lsrs	r3, r1, #16
 800ecea:	d107      	bne.n	800ecfc <_calloc_r+0x7c>
 800ecec:	0409      	lsls	r1, r1, #16
 800ecee:	b292      	uxth	r2, r2
 800ecf0:	4311      	orrs	r1, r2
 800ecf2:	e7d0      	b.n	800ec96 <_calloc_r+0x16>
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	d101      	bne.n	800ecfc <_calloc_r+0x7c>
 800ecf8:	1c15      	adds	r5, r2, #0
 800ecfa:	e7ed      	b.n	800ecd8 <_calloc_r+0x58>
 800ecfc:	f7fc f80a 	bl	800ad14 <__errno>
 800ed00:	230c      	movs	r3, #12
 800ed02:	2500      	movs	r5, #0
 800ed04:	6003      	str	r3, [r0, #0]
 800ed06:	0028      	movs	r0, r5
 800ed08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed0a:	0003      	movs	r3, r0
 800ed0c:	6104      	str	r4, [r0, #16]
 800ed0e:	3318      	adds	r3, #24
 800ed10:	6144      	str	r4, [r0, #20]
 800ed12:	e7da      	b.n	800ecca <_calloc_r+0x4a>
 800ed14:	2100      	movs	r1, #0
 800ed16:	f7fb ff51 	bl	800abbc <memset>
 800ed1a:	e7f4      	b.n	800ed06 <_calloc_r+0x86>

0800ed1c <quorem>:
 800ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1e:	6902      	ldr	r2, [r0, #16]
 800ed20:	690b      	ldr	r3, [r1, #16]
 800ed22:	b089      	sub	sp, #36	; 0x24
 800ed24:	0007      	movs	r7, r0
 800ed26:	9104      	str	r1, [sp, #16]
 800ed28:	2000      	movs	r0, #0
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	db69      	blt.n	800ee02 <quorem+0xe6>
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	009c      	lsls	r4, r3, #2
 800ed32:	9301      	str	r3, [sp, #4]
 800ed34:	000b      	movs	r3, r1
 800ed36:	3314      	adds	r3, #20
 800ed38:	9306      	str	r3, [sp, #24]
 800ed3a:	191b      	adds	r3, r3, r4
 800ed3c:	9305      	str	r3, [sp, #20]
 800ed3e:	003b      	movs	r3, r7
 800ed40:	3314      	adds	r3, #20
 800ed42:	9303      	str	r3, [sp, #12]
 800ed44:	191c      	adds	r4, r3, r4
 800ed46:	9b05      	ldr	r3, [sp, #20]
 800ed48:	6826      	ldr	r6, [r4, #0]
 800ed4a:	681d      	ldr	r5, [r3, #0]
 800ed4c:	0030      	movs	r0, r6
 800ed4e:	3501      	adds	r5, #1
 800ed50:	0029      	movs	r1, r5
 800ed52:	f7f1 f9f3 	bl	800013c <__udivsi3>
 800ed56:	9002      	str	r0, [sp, #8]
 800ed58:	42ae      	cmp	r6, r5
 800ed5a:	d329      	bcc.n	800edb0 <quorem+0x94>
 800ed5c:	9b06      	ldr	r3, [sp, #24]
 800ed5e:	2600      	movs	r6, #0
 800ed60:	469c      	mov	ip, r3
 800ed62:	9d03      	ldr	r5, [sp, #12]
 800ed64:	9606      	str	r6, [sp, #24]
 800ed66:	4662      	mov	r2, ip
 800ed68:	ca08      	ldmia	r2!, {r3}
 800ed6a:	6828      	ldr	r0, [r5, #0]
 800ed6c:	4694      	mov	ip, r2
 800ed6e:	9a02      	ldr	r2, [sp, #8]
 800ed70:	b299      	uxth	r1, r3
 800ed72:	4351      	muls	r1, r2
 800ed74:	0c1b      	lsrs	r3, r3, #16
 800ed76:	4353      	muls	r3, r2
 800ed78:	1989      	adds	r1, r1, r6
 800ed7a:	0c0a      	lsrs	r2, r1, #16
 800ed7c:	189b      	adds	r3, r3, r2
 800ed7e:	9307      	str	r3, [sp, #28]
 800ed80:	0c1e      	lsrs	r6, r3, #16
 800ed82:	9b06      	ldr	r3, [sp, #24]
 800ed84:	b282      	uxth	r2, r0
 800ed86:	18d2      	adds	r2, r2, r3
 800ed88:	466b      	mov	r3, sp
 800ed8a:	b289      	uxth	r1, r1
 800ed8c:	8b9b      	ldrh	r3, [r3, #28]
 800ed8e:	1a52      	subs	r2, r2, r1
 800ed90:	0c01      	lsrs	r1, r0, #16
 800ed92:	1ac9      	subs	r1, r1, r3
 800ed94:	1413      	asrs	r3, r2, #16
 800ed96:	18cb      	adds	r3, r1, r3
 800ed98:	1419      	asrs	r1, r3, #16
 800ed9a:	b292      	uxth	r2, r2
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	c508      	stmia	r5!, {r3}
 800eda2:	9b05      	ldr	r3, [sp, #20]
 800eda4:	9106      	str	r1, [sp, #24]
 800eda6:	4563      	cmp	r3, ip
 800eda8:	d2dd      	bcs.n	800ed66 <quorem+0x4a>
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d030      	beq.n	800ee12 <quorem+0xf6>
 800edb0:	0038      	movs	r0, r7
 800edb2:	9904      	ldr	r1, [sp, #16]
 800edb4:	f7fc ff04 	bl	800bbc0 <__mcmp>
 800edb8:	2800      	cmp	r0, #0
 800edba:	db21      	blt.n	800ee00 <quorem+0xe4>
 800edbc:	0038      	movs	r0, r7
 800edbe:	2600      	movs	r6, #0
 800edc0:	9b02      	ldr	r3, [sp, #8]
 800edc2:	9c04      	ldr	r4, [sp, #16]
 800edc4:	3301      	adds	r3, #1
 800edc6:	9302      	str	r3, [sp, #8]
 800edc8:	3014      	adds	r0, #20
 800edca:	3414      	adds	r4, #20
 800edcc:	6803      	ldr	r3, [r0, #0]
 800edce:	cc02      	ldmia	r4!, {r1}
 800edd0:	b29d      	uxth	r5, r3
 800edd2:	19ad      	adds	r5, r5, r6
 800edd4:	b28a      	uxth	r2, r1
 800edd6:	1aaa      	subs	r2, r5, r2
 800edd8:	0c09      	lsrs	r1, r1, #16
 800edda:	0c1b      	lsrs	r3, r3, #16
 800eddc:	1a5b      	subs	r3, r3, r1
 800edde:	1411      	asrs	r1, r2, #16
 800ede0:	185b      	adds	r3, r3, r1
 800ede2:	141e      	asrs	r6, r3, #16
 800ede4:	b292      	uxth	r2, r2
 800ede6:	041b      	lsls	r3, r3, #16
 800ede8:	4313      	orrs	r3, r2
 800edea:	c008      	stmia	r0!, {r3}
 800edec:	9b05      	ldr	r3, [sp, #20]
 800edee:	42a3      	cmp	r3, r4
 800edf0:	d2ec      	bcs.n	800edcc <quorem+0xb0>
 800edf2:	9b01      	ldr	r3, [sp, #4]
 800edf4:	9a03      	ldr	r2, [sp, #12]
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	18d3      	adds	r3, r2, r3
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	d015      	beq.n	800ee2c <quorem+0x110>
 800ee00:	9802      	ldr	r0, [sp, #8]
 800ee02:	b009      	add	sp, #36	; 0x24
 800ee04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee06:	6823      	ldr	r3, [r4, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d106      	bne.n	800ee1a <quorem+0xfe>
 800ee0c:	9b01      	ldr	r3, [sp, #4]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	3c04      	subs	r4, #4
 800ee16:	42a3      	cmp	r3, r4
 800ee18:	d3f5      	bcc.n	800ee06 <quorem+0xea>
 800ee1a:	9b01      	ldr	r3, [sp, #4]
 800ee1c:	613b      	str	r3, [r7, #16]
 800ee1e:	e7c7      	b.n	800edb0 <quorem+0x94>
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d106      	bne.n	800ee34 <quorem+0x118>
 800ee26:	9a01      	ldr	r2, [sp, #4]
 800ee28:	3a01      	subs	r2, #1
 800ee2a:	9201      	str	r2, [sp, #4]
 800ee2c:	9a03      	ldr	r2, [sp, #12]
 800ee2e:	3b04      	subs	r3, #4
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d3f5      	bcc.n	800ee20 <quorem+0x104>
 800ee34:	9b01      	ldr	r3, [sp, #4]
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	e7e2      	b.n	800ee00 <quorem+0xe4>
	...

0800ee3c <_dtoa_r>:
 800ee3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee3e:	0014      	movs	r4, r2
 800ee40:	001d      	movs	r5, r3
 800ee42:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ee44:	b09d      	sub	sp, #116	; 0x74
 800ee46:	9408      	str	r4, [sp, #32]
 800ee48:	9509      	str	r5, [sp, #36]	; 0x24
 800ee4a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ee4c:	9004      	str	r0, [sp, #16]
 800ee4e:	2900      	cmp	r1, #0
 800ee50:	d009      	beq.n	800ee66 <_dtoa_r+0x2a>
 800ee52:	2301      	movs	r3, #1
 800ee54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee56:	4093      	lsls	r3, r2
 800ee58:	604a      	str	r2, [r1, #4]
 800ee5a:	608b      	str	r3, [r1, #8]
 800ee5c:	f7fc fc56 	bl	800b70c <_Bfree>
 800ee60:	2300      	movs	r3, #0
 800ee62:	9a04      	ldr	r2, [sp, #16]
 800ee64:	6393      	str	r3, [r2, #56]	; 0x38
 800ee66:	2d00      	cmp	r5, #0
 800ee68:	da1e      	bge.n	800eea8 <_dtoa_r+0x6c>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	6033      	str	r3, [r6, #0]
 800ee6e:	006b      	lsls	r3, r5, #1
 800ee70:	085b      	lsrs	r3, r3, #1
 800ee72:	9309      	str	r3, [sp, #36]	; 0x24
 800ee74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee76:	4bb5      	ldr	r3, [pc, #724]	; (800f14c <_dtoa_r+0x310>)
 800ee78:	4ab4      	ldr	r2, [pc, #720]	; (800f14c <_dtoa_r+0x310>)
 800ee7a:	403b      	ands	r3, r7
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d116      	bne.n	800eeae <_dtoa_r+0x72>
 800ee80:	4bb3      	ldr	r3, [pc, #716]	; (800f150 <_dtoa_r+0x314>)
 800ee82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ee84:	6013      	str	r3, [r2, #0]
 800ee86:	033b      	lsls	r3, r7, #12
 800ee88:	0b1b      	lsrs	r3, r3, #12
 800ee8a:	4323      	orrs	r3, r4
 800ee8c:	d101      	bne.n	800ee92 <_dtoa_r+0x56>
 800ee8e:	f000 fdb2 	bl	800f9f6 <_dtoa_r+0xbba>
 800ee92:	4bb0      	ldr	r3, [pc, #704]	; (800f154 <_dtoa_r+0x318>)
 800ee94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ee96:	9306      	str	r3, [sp, #24]
 800ee98:	2a00      	cmp	r2, #0
 800ee9a:	d002      	beq.n	800eea2 <_dtoa_r+0x66>
 800ee9c:	4bae      	ldr	r3, [pc, #696]	; (800f158 <_dtoa_r+0x31c>)
 800ee9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	9806      	ldr	r0, [sp, #24]
 800eea4:	b01d      	add	sp, #116	; 0x74
 800eea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea8:	2300      	movs	r3, #0
 800eeaa:	6033      	str	r3, [r6, #0]
 800eeac:	e7e2      	b.n	800ee74 <_dtoa_r+0x38>
 800eeae:	9a08      	ldr	r2, [sp, #32]
 800eeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb2:	9210      	str	r2, [sp, #64]	; 0x40
 800eeb4:	9311      	str	r3, [sp, #68]	; 0x44
 800eeb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eeb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eeba:	2200      	movs	r2, #0
 800eebc:	2300      	movs	r3, #0
 800eebe:	f7f1 fac3 	bl	8000448 <__aeabi_dcmpeq>
 800eec2:	1e06      	subs	r6, r0, #0
 800eec4:	d009      	beq.n	800eeda <_dtoa_r+0x9e>
 800eec6:	2301      	movs	r3, #1
 800eec8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	4ba3      	ldr	r3, [pc, #652]	; (800f15c <_dtoa_r+0x320>)
 800eece:	9306      	str	r3, [sp, #24]
 800eed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0e5      	beq.n	800eea2 <_dtoa_r+0x66>
 800eed6:	4ba2      	ldr	r3, [pc, #648]	; (800f160 <_dtoa_r+0x324>)
 800eed8:	e7e1      	b.n	800ee9e <_dtoa_r+0x62>
 800eeda:	ab1a      	add	r3, sp, #104	; 0x68
 800eedc:	9301      	str	r3, [sp, #4]
 800eede:	ab1b      	add	r3, sp, #108	; 0x6c
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	9804      	ldr	r0, [sp, #16]
 800eee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eee8:	f7fc ff86 	bl	800bdf8 <__d2b>
 800eeec:	007a      	lsls	r2, r7, #1
 800eeee:	9005      	str	r0, [sp, #20]
 800eef0:	0d52      	lsrs	r2, r2, #21
 800eef2:	d100      	bne.n	800eef6 <_dtoa_r+0xba>
 800eef4:	e07b      	b.n	800efee <_dtoa_r+0x1b2>
 800eef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eef8:	9617      	str	r6, [sp, #92]	; 0x5c
 800eefa:	0319      	lsls	r1, r3, #12
 800eefc:	4b99      	ldr	r3, [pc, #612]	; (800f164 <_dtoa_r+0x328>)
 800eefe:	0b09      	lsrs	r1, r1, #12
 800ef00:	430b      	orrs	r3, r1
 800ef02:	4999      	ldr	r1, [pc, #612]	; (800f168 <_dtoa_r+0x32c>)
 800ef04:	1857      	adds	r7, r2, r1
 800ef06:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef08:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef0a:	0019      	movs	r1, r3
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	4b97      	ldr	r3, [pc, #604]	; (800f16c <_dtoa_r+0x330>)
 800ef10:	f7f2 fe6e 	bl	8001bf0 <__aeabi_dsub>
 800ef14:	4a96      	ldr	r2, [pc, #600]	; (800f170 <_dtoa_r+0x334>)
 800ef16:	4b97      	ldr	r3, [pc, #604]	; (800f174 <_dtoa_r+0x338>)
 800ef18:	f7f2 fba8 	bl	800166c <__aeabi_dmul>
 800ef1c:	4a96      	ldr	r2, [pc, #600]	; (800f178 <_dtoa_r+0x33c>)
 800ef1e:	4b97      	ldr	r3, [pc, #604]	; (800f17c <_dtoa_r+0x340>)
 800ef20:	f7f1 fc4a 	bl	80007b8 <__aeabi_dadd>
 800ef24:	0004      	movs	r4, r0
 800ef26:	0038      	movs	r0, r7
 800ef28:	000d      	movs	r5, r1
 800ef2a:	f7f3 fa37 	bl	800239c <__aeabi_i2d>
 800ef2e:	4a94      	ldr	r2, [pc, #592]	; (800f180 <_dtoa_r+0x344>)
 800ef30:	4b94      	ldr	r3, [pc, #592]	; (800f184 <_dtoa_r+0x348>)
 800ef32:	f7f2 fb9b 	bl	800166c <__aeabi_dmul>
 800ef36:	0002      	movs	r2, r0
 800ef38:	000b      	movs	r3, r1
 800ef3a:	0020      	movs	r0, r4
 800ef3c:	0029      	movs	r1, r5
 800ef3e:	f7f1 fc3b 	bl	80007b8 <__aeabi_dadd>
 800ef42:	0004      	movs	r4, r0
 800ef44:	000d      	movs	r5, r1
 800ef46:	f7f3 f9f3 	bl	8002330 <__aeabi_d2iz>
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	9003      	str	r0, [sp, #12]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	0020      	movs	r0, r4
 800ef52:	0029      	movs	r1, r5
 800ef54:	f7f1 fa7e 	bl	8000454 <__aeabi_dcmplt>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d00b      	beq.n	800ef74 <_dtoa_r+0x138>
 800ef5c:	9803      	ldr	r0, [sp, #12]
 800ef5e:	f7f3 fa1d 	bl	800239c <__aeabi_i2d>
 800ef62:	002b      	movs	r3, r5
 800ef64:	0022      	movs	r2, r4
 800ef66:	f7f1 fa6f 	bl	8000448 <__aeabi_dcmpeq>
 800ef6a:	4243      	negs	r3, r0
 800ef6c:	4158      	adcs	r0, r3
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	1a1b      	subs	r3, r3, r0
 800ef72:	9303      	str	r3, [sp, #12]
 800ef74:	2301      	movs	r3, #1
 800ef76:	9316      	str	r3, [sp, #88]	; 0x58
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	2b16      	cmp	r3, #22
 800ef7c:	d810      	bhi.n	800efa0 <_dtoa_r+0x164>
 800ef7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef80:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef82:	9a03      	ldr	r2, [sp, #12]
 800ef84:	4b80      	ldr	r3, [pc, #512]	; (800f188 <_dtoa_r+0x34c>)
 800ef86:	00d2      	lsls	r2, r2, #3
 800ef88:	189b      	adds	r3, r3, r2
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	f7f1 fa61 	bl	8000454 <__aeabi_dcmplt>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d047      	beq.n	800f026 <_dtoa_r+0x1ea>
 800ef96:	9b03      	ldr	r3, [sp, #12]
 800ef98:	3b01      	subs	r3, #1
 800ef9a:	9303      	str	r3, [sp, #12]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9316      	str	r3, [sp, #88]	; 0x58
 800efa0:	2200      	movs	r2, #0
 800efa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800efa4:	920a      	str	r2, [sp, #40]	; 0x28
 800efa6:	1bdb      	subs	r3, r3, r7
 800efa8:	1e5a      	subs	r2, r3, #1
 800efaa:	d53e      	bpl.n	800f02a <_dtoa_r+0x1ee>
 800efac:	2201      	movs	r2, #1
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	930a      	str	r3, [sp, #40]	; 0x28
 800efb2:	2300      	movs	r3, #0
 800efb4:	930c      	str	r3, [sp, #48]	; 0x30
 800efb6:	9b03      	ldr	r3, [sp, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	db38      	blt.n	800f02e <_dtoa_r+0x1f2>
 800efbc:	9a03      	ldr	r2, [sp, #12]
 800efbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efc0:	4694      	mov	ip, r2
 800efc2:	4463      	add	r3, ip
 800efc4:	930c      	str	r3, [sp, #48]	; 0x30
 800efc6:	2300      	movs	r3, #0
 800efc8:	9213      	str	r2, [sp, #76]	; 0x4c
 800efca:	930d      	str	r3, [sp, #52]	; 0x34
 800efcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efce:	2401      	movs	r4, #1
 800efd0:	2b09      	cmp	r3, #9
 800efd2:	d867      	bhi.n	800f0a4 <_dtoa_r+0x268>
 800efd4:	2b05      	cmp	r3, #5
 800efd6:	dd02      	ble.n	800efde <_dtoa_r+0x1a2>
 800efd8:	2400      	movs	r4, #0
 800efda:	3b04      	subs	r3, #4
 800efdc:	9322      	str	r3, [sp, #136]	; 0x88
 800efde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efe0:	1e98      	subs	r0, r3, #2
 800efe2:	2803      	cmp	r0, #3
 800efe4:	d867      	bhi.n	800f0b6 <_dtoa_r+0x27a>
 800efe6:	f7f1 f895 	bl	8000114 <__gnu_thumb1_case_uqi>
 800efea:	3a2b      	.short	0x3a2b
 800efec:	5b38      	.short	0x5b38
 800efee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eff0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800eff2:	18f6      	adds	r6, r6, r3
 800eff4:	4b65      	ldr	r3, [pc, #404]	; (800f18c <_dtoa_r+0x350>)
 800eff6:	18f2      	adds	r2, r6, r3
 800eff8:	2a20      	cmp	r2, #32
 800effa:	dd0f      	ble.n	800f01c <_dtoa_r+0x1e0>
 800effc:	2340      	movs	r3, #64	; 0x40
 800effe:	1a9b      	subs	r3, r3, r2
 800f000:	409f      	lsls	r7, r3
 800f002:	4b63      	ldr	r3, [pc, #396]	; (800f190 <_dtoa_r+0x354>)
 800f004:	0038      	movs	r0, r7
 800f006:	18f3      	adds	r3, r6, r3
 800f008:	40dc      	lsrs	r4, r3
 800f00a:	4320      	orrs	r0, r4
 800f00c:	f7f3 f9f6 	bl	80023fc <__aeabi_ui2d>
 800f010:	2201      	movs	r2, #1
 800f012:	4b60      	ldr	r3, [pc, #384]	; (800f194 <_dtoa_r+0x358>)
 800f014:	1e77      	subs	r7, r6, #1
 800f016:	18cb      	adds	r3, r1, r3
 800f018:	9217      	str	r2, [sp, #92]	; 0x5c
 800f01a:	e776      	b.n	800ef0a <_dtoa_r+0xce>
 800f01c:	2320      	movs	r3, #32
 800f01e:	0020      	movs	r0, r4
 800f020:	1a9b      	subs	r3, r3, r2
 800f022:	4098      	lsls	r0, r3
 800f024:	e7f2      	b.n	800f00c <_dtoa_r+0x1d0>
 800f026:	9016      	str	r0, [sp, #88]	; 0x58
 800f028:	e7ba      	b.n	800efa0 <_dtoa_r+0x164>
 800f02a:	920c      	str	r2, [sp, #48]	; 0x30
 800f02c:	e7c3      	b.n	800efb6 <_dtoa_r+0x17a>
 800f02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f030:	9a03      	ldr	r2, [sp, #12]
 800f032:	1a9b      	subs	r3, r3, r2
 800f034:	930a      	str	r3, [sp, #40]	; 0x28
 800f036:	4253      	negs	r3, r2
 800f038:	930d      	str	r3, [sp, #52]	; 0x34
 800f03a:	2300      	movs	r3, #0
 800f03c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f03e:	e7c5      	b.n	800efcc <_dtoa_r+0x190>
 800f040:	2300      	movs	r3, #0
 800f042:	930f      	str	r3, [sp, #60]	; 0x3c
 800f044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f046:	930b      	str	r3, [sp, #44]	; 0x2c
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dc13      	bgt.n	800f076 <_dtoa_r+0x23a>
 800f04e:	2301      	movs	r3, #1
 800f050:	001a      	movs	r2, r3
 800f052:	930b      	str	r3, [sp, #44]	; 0x2c
 800f054:	9307      	str	r3, [sp, #28]
 800f056:	9223      	str	r2, [sp, #140]	; 0x8c
 800f058:	e00d      	b.n	800f076 <_dtoa_r+0x23a>
 800f05a:	2301      	movs	r3, #1
 800f05c:	e7f1      	b.n	800f042 <_dtoa_r+0x206>
 800f05e:	2300      	movs	r3, #0
 800f060:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f062:	930f      	str	r3, [sp, #60]	; 0x3c
 800f064:	4694      	mov	ip, r2
 800f066:	9b03      	ldr	r3, [sp, #12]
 800f068:	4463      	add	r3, ip
 800f06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f06c:	3301      	adds	r3, #1
 800f06e:	9307      	str	r3, [sp, #28]
 800f070:	2b00      	cmp	r3, #0
 800f072:	dc00      	bgt.n	800f076 <_dtoa_r+0x23a>
 800f074:	2301      	movs	r3, #1
 800f076:	2100      	movs	r1, #0
 800f078:	2204      	movs	r2, #4
 800f07a:	0010      	movs	r0, r2
 800f07c:	3014      	adds	r0, #20
 800f07e:	4298      	cmp	r0, r3
 800f080:	d91d      	bls.n	800f0be <_dtoa_r+0x282>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	0018      	movs	r0, r3
 800f086:	63d9      	str	r1, [r3, #60]	; 0x3c
 800f088:	f7fc fb18 	bl	800b6bc <_Balloc>
 800f08c:	9006      	str	r0, [sp, #24]
 800f08e:	2800      	cmp	r0, #0
 800f090:	d118      	bne.n	800f0c4 <_dtoa_r+0x288>
 800f092:	21b0      	movs	r1, #176	; 0xb0
 800f094:	4b40      	ldr	r3, [pc, #256]	; (800f198 <_dtoa_r+0x35c>)
 800f096:	4841      	ldr	r0, [pc, #260]	; (800f19c <_dtoa_r+0x360>)
 800f098:	9a06      	ldr	r2, [sp, #24]
 800f09a:	31ff      	adds	r1, #255	; 0xff
 800f09c:	f7ff fdd2 	bl	800ec44 <__assert_func>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e7dd      	b.n	800f060 <_dtoa_r+0x224>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	940f      	str	r4, [sp, #60]	; 0x3c
 800f0a8:	9322      	str	r3, [sp, #136]	; 0x88
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0ae:	9307      	str	r3, [sp, #28]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	3313      	adds	r3, #19
 800f0b4:	e7cf      	b.n	800f056 <_dtoa_r+0x21a>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0ba:	3b02      	subs	r3, #2
 800f0bc:	e7f6      	b.n	800f0ac <_dtoa_r+0x270>
 800f0be:	3101      	adds	r1, #1
 800f0c0:	0052      	lsls	r2, r2, #1
 800f0c2:	e7da      	b.n	800f07a <_dtoa_r+0x23e>
 800f0c4:	9b04      	ldr	r3, [sp, #16]
 800f0c6:	9a06      	ldr	r2, [sp, #24]
 800f0c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f0ca:	9b07      	ldr	r3, [sp, #28]
 800f0cc:	2b0e      	cmp	r3, #14
 800f0ce:	d900      	bls.n	800f0d2 <_dtoa_r+0x296>
 800f0d0:	e0e3      	b.n	800f29a <_dtoa_r+0x45e>
 800f0d2:	2c00      	cmp	r4, #0
 800f0d4:	d100      	bne.n	800f0d8 <_dtoa_r+0x29c>
 800f0d6:	e0e0      	b.n	800f29a <_dtoa_r+0x45e>
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	dd62      	ble.n	800f1a4 <_dtoa_r+0x368>
 800f0de:	210f      	movs	r1, #15
 800f0e0:	9a03      	ldr	r2, [sp, #12]
 800f0e2:	4b29      	ldr	r3, [pc, #164]	; (800f188 <_dtoa_r+0x34c>)
 800f0e4:	400a      	ands	r2, r1
 800f0e6:	00d2      	lsls	r2, r2, #3
 800f0e8:	189b      	adds	r3, r3, r2
 800f0ea:	681e      	ldr	r6, [r3, #0]
 800f0ec:	685f      	ldr	r7, [r3, #4]
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	2402      	movs	r4, #2
 800f0f2:	111d      	asrs	r5, r3, #4
 800f0f4:	05db      	lsls	r3, r3, #23
 800f0f6:	d50a      	bpl.n	800f10e <_dtoa_r+0x2d2>
 800f0f8:	4b29      	ldr	r3, [pc, #164]	; (800f1a0 <_dtoa_r+0x364>)
 800f0fa:	400d      	ands	r5, r1
 800f0fc:	6a1a      	ldr	r2, [r3, #32]
 800f0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f100:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f102:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f104:	f7f1 feb8 	bl	8000e78 <__aeabi_ddiv>
 800f108:	9008      	str	r0, [sp, #32]
 800f10a:	9109      	str	r1, [sp, #36]	; 0x24
 800f10c:	3401      	adds	r4, #1
 800f10e:	4b24      	ldr	r3, [pc, #144]	; (800f1a0 <_dtoa_r+0x364>)
 800f110:	930e      	str	r3, [sp, #56]	; 0x38
 800f112:	2d00      	cmp	r5, #0
 800f114:	d108      	bne.n	800f128 <_dtoa_r+0x2ec>
 800f116:	9808      	ldr	r0, [sp, #32]
 800f118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f11a:	0032      	movs	r2, r6
 800f11c:	003b      	movs	r3, r7
 800f11e:	f7f1 feab 	bl	8000e78 <__aeabi_ddiv>
 800f122:	9008      	str	r0, [sp, #32]
 800f124:	9109      	str	r1, [sp, #36]	; 0x24
 800f126:	e058      	b.n	800f1da <_dtoa_r+0x39e>
 800f128:	2301      	movs	r3, #1
 800f12a:	421d      	tst	r5, r3
 800f12c:	d009      	beq.n	800f142 <_dtoa_r+0x306>
 800f12e:	18e4      	adds	r4, r4, r3
 800f130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f132:	0030      	movs	r0, r6
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	0039      	movs	r1, r7
 800f13a:	f7f2 fa97 	bl	800166c <__aeabi_dmul>
 800f13e:	0006      	movs	r6, r0
 800f140:	000f      	movs	r7, r1
 800f142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f144:	106d      	asrs	r5, r5, #1
 800f146:	3308      	adds	r3, #8
 800f148:	e7e2      	b.n	800f110 <_dtoa_r+0x2d4>
 800f14a:	46c0      	nop			; (mov r8, r8)
 800f14c:	7ff00000 	.word	0x7ff00000
 800f150:	0000270f 	.word	0x0000270f
 800f154:	08013315 	.word	0x08013315
 800f158:	08013318 	.word	0x08013318
 800f15c:	08013286 	.word	0x08013286
 800f160:	08013287 	.word	0x08013287
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	fffffc01 	.word	0xfffffc01
 800f16c:	3ff80000 	.word	0x3ff80000
 800f170:	636f4361 	.word	0x636f4361
 800f174:	3fd287a7 	.word	0x3fd287a7
 800f178:	8b60c8b3 	.word	0x8b60c8b3
 800f17c:	3fc68a28 	.word	0x3fc68a28
 800f180:	509f79fb 	.word	0x509f79fb
 800f184:	3fd34413 	.word	0x3fd34413
 800f188:	08013180 	.word	0x08013180
 800f18c:	00000432 	.word	0x00000432
 800f190:	00000412 	.word	0x00000412
 800f194:	fe100000 	.word	0xfe100000
 800f198:	08013089 	.word	0x08013089
 800f19c:	08013319 	.word	0x08013319
 800f1a0:	08013158 	.word	0x08013158
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	2402      	movs	r4, #2
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d016      	beq.n	800f1da <_dtoa_r+0x39e>
 800f1ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f1ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1b0:	220f      	movs	r2, #15
 800f1b2:	425d      	negs	r5, r3
 800f1b4:	402a      	ands	r2, r5
 800f1b6:	4bdd      	ldr	r3, [pc, #884]	; (800f52c <_dtoa_r+0x6f0>)
 800f1b8:	00d2      	lsls	r2, r2, #3
 800f1ba:	189b      	adds	r3, r3, r2
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	f7f2 fa54 	bl	800166c <__aeabi_dmul>
 800f1c4:	2701      	movs	r7, #1
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9008      	str	r0, [sp, #32]
 800f1ca:	9109      	str	r1, [sp, #36]	; 0x24
 800f1cc:	4ed8      	ldr	r6, [pc, #864]	; (800f530 <_dtoa_r+0x6f4>)
 800f1ce:	112d      	asrs	r5, r5, #4
 800f1d0:	2d00      	cmp	r5, #0
 800f1d2:	d000      	beq.n	800f1d6 <_dtoa_r+0x39a>
 800f1d4:	e091      	b.n	800f2fa <_dtoa_r+0x4be>
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1a3      	bne.n	800f122 <_dtoa_r+0x2e6>
 800f1da:	9e08      	ldr	r6, [sp, #32]
 800f1dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f1de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d100      	bne.n	800f1e6 <_dtoa_r+0x3aa>
 800f1e4:	e094      	b.n	800f310 <_dtoa_r+0x4d4>
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	0030      	movs	r0, r6
 800f1ea:	0039      	movs	r1, r7
 800f1ec:	4bd1      	ldr	r3, [pc, #836]	; (800f534 <_dtoa_r+0x6f8>)
 800f1ee:	f7f1 f931 	bl	8000454 <__aeabi_dcmplt>
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d100      	bne.n	800f1f8 <_dtoa_r+0x3bc>
 800f1f6:	e08b      	b.n	800f310 <_dtoa_r+0x4d4>
 800f1f8:	9b07      	ldr	r3, [sp, #28]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d100      	bne.n	800f200 <_dtoa_r+0x3c4>
 800f1fe:	e087      	b.n	800f310 <_dtoa_r+0x4d4>
 800f200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f202:	2b00      	cmp	r3, #0
 800f204:	dd45      	ble.n	800f292 <_dtoa_r+0x456>
 800f206:	9b03      	ldr	r3, [sp, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	3b01      	subs	r3, #1
 800f20c:	930e      	str	r3, [sp, #56]	; 0x38
 800f20e:	0030      	movs	r0, r6
 800f210:	4bc9      	ldr	r3, [pc, #804]	; (800f538 <_dtoa_r+0x6fc>)
 800f212:	0039      	movs	r1, r7
 800f214:	f7f2 fa2a 	bl	800166c <__aeabi_dmul>
 800f218:	9008      	str	r0, [sp, #32]
 800f21a:	9109      	str	r1, [sp, #36]	; 0x24
 800f21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f21e:	3401      	adds	r4, #1
 800f220:	0020      	movs	r0, r4
 800f222:	9e08      	ldr	r6, [sp, #32]
 800f224:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f226:	9312      	str	r3, [sp, #72]	; 0x48
 800f228:	f7f3 f8b8 	bl	800239c <__aeabi_i2d>
 800f22c:	0032      	movs	r2, r6
 800f22e:	003b      	movs	r3, r7
 800f230:	f7f2 fa1c 	bl	800166c <__aeabi_dmul>
 800f234:	2200      	movs	r2, #0
 800f236:	4bc1      	ldr	r3, [pc, #772]	; (800f53c <_dtoa_r+0x700>)
 800f238:	f7f1 fabe 	bl	80007b8 <__aeabi_dadd>
 800f23c:	4ac0      	ldr	r2, [pc, #768]	; (800f540 <_dtoa_r+0x704>)
 800f23e:	9014      	str	r0, [sp, #80]	; 0x50
 800f240:	9115      	str	r1, [sp, #84]	; 0x54
 800f242:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f244:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f246:	4694      	mov	ip, r2
 800f248:	9308      	str	r3, [sp, #32]
 800f24a:	9409      	str	r4, [sp, #36]	; 0x24
 800f24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f24e:	4463      	add	r3, ip
 800f250:	9318      	str	r3, [sp, #96]	; 0x60
 800f252:	9309      	str	r3, [sp, #36]	; 0x24
 800f254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f256:	2b00      	cmp	r3, #0
 800f258:	d15e      	bne.n	800f318 <_dtoa_r+0x4dc>
 800f25a:	2200      	movs	r2, #0
 800f25c:	4bb9      	ldr	r3, [pc, #740]	; (800f544 <_dtoa_r+0x708>)
 800f25e:	0030      	movs	r0, r6
 800f260:	0039      	movs	r1, r7
 800f262:	f7f2 fcc5 	bl	8001bf0 <__aeabi_dsub>
 800f266:	9a08      	ldr	r2, [sp, #32]
 800f268:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f26a:	0004      	movs	r4, r0
 800f26c:	000d      	movs	r5, r1
 800f26e:	f7f1 f905 	bl	800047c <__aeabi_dcmpgt>
 800f272:	2800      	cmp	r0, #0
 800f274:	d000      	beq.n	800f278 <_dtoa_r+0x43c>
 800f276:	e2b3      	b.n	800f7e0 <_dtoa_r+0x9a4>
 800f278:	48b3      	ldr	r0, [pc, #716]	; (800f548 <_dtoa_r+0x70c>)
 800f27a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f27c:	4684      	mov	ip, r0
 800f27e:	4461      	add	r1, ip
 800f280:	000b      	movs	r3, r1
 800f282:	0020      	movs	r0, r4
 800f284:	0029      	movs	r1, r5
 800f286:	9a08      	ldr	r2, [sp, #32]
 800f288:	f7f1 f8e4 	bl	8000454 <__aeabi_dcmplt>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d000      	beq.n	800f292 <_dtoa_r+0x456>
 800f290:	e2a3      	b.n	800f7da <_dtoa_r+0x99e>
 800f292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f294:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f296:	9308      	str	r3, [sp, #32]
 800f298:	9409      	str	r4, [sp, #36]	; 0x24
 800f29a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	da00      	bge.n	800f2a2 <_dtoa_r+0x466>
 800f2a0:	e179      	b.n	800f596 <_dtoa_r+0x75a>
 800f2a2:	9a03      	ldr	r2, [sp, #12]
 800f2a4:	2a0e      	cmp	r2, #14
 800f2a6:	dd00      	ble.n	800f2aa <_dtoa_r+0x46e>
 800f2a8:	e175      	b.n	800f596 <_dtoa_r+0x75a>
 800f2aa:	4ba0      	ldr	r3, [pc, #640]	; (800f52c <_dtoa_r+0x6f0>)
 800f2ac:	00d2      	lsls	r2, r2, #3
 800f2ae:	189b      	adds	r3, r3, r2
 800f2b0:	681e      	ldr	r6, [r3, #0]
 800f2b2:	685f      	ldr	r7, [r3, #4]
 800f2b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	db00      	blt.n	800f2bc <_dtoa_r+0x480>
 800f2ba:	e0e5      	b.n	800f488 <_dtoa_r+0x64c>
 800f2bc:	9b07      	ldr	r3, [sp, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	dd00      	ble.n	800f2c4 <_dtoa_r+0x488>
 800f2c2:	e0e1      	b.n	800f488 <_dtoa_r+0x64c>
 800f2c4:	d000      	beq.n	800f2c8 <_dtoa_r+0x48c>
 800f2c6:	e288      	b.n	800f7da <_dtoa_r+0x99e>
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	0030      	movs	r0, r6
 800f2cc:	0039      	movs	r1, r7
 800f2ce:	4b9d      	ldr	r3, [pc, #628]	; (800f544 <_dtoa_r+0x708>)
 800f2d0:	f7f2 f9cc 	bl	800166c <__aeabi_dmul>
 800f2d4:	9a08      	ldr	r2, [sp, #32]
 800f2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d8:	f7f1 f8da 	bl	8000490 <__aeabi_dcmpge>
 800f2dc:	9e07      	ldr	r6, [sp, #28]
 800f2de:	0037      	movs	r7, r6
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d000      	beq.n	800f2e6 <_dtoa_r+0x4aa>
 800f2e4:	e25f      	b.n	800f7a6 <_dtoa_r+0x96a>
 800f2e6:	9b06      	ldr	r3, [sp, #24]
 800f2e8:	9a06      	ldr	r2, [sp, #24]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	9308      	str	r3, [sp, #32]
 800f2ee:	2331      	movs	r3, #49	; 0x31
 800f2f0:	7013      	strb	r3, [r2, #0]
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	9303      	str	r3, [sp, #12]
 800f2f8:	e25a      	b.n	800f7b0 <_dtoa_r+0x974>
 800f2fa:	423d      	tst	r5, r7
 800f2fc:	d005      	beq.n	800f30a <_dtoa_r+0x4ce>
 800f2fe:	6832      	ldr	r2, [r6, #0]
 800f300:	6873      	ldr	r3, [r6, #4]
 800f302:	f7f2 f9b3 	bl	800166c <__aeabi_dmul>
 800f306:	003b      	movs	r3, r7
 800f308:	3401      	adds	r4, #1
 800f30a:	106d      	asrs	r5, r5, #1
 800f30c:	3608      	adds	r6, #8
 800f30e:	e75f      	b.n	800f1d0 <_dtoa_r+0x394>
 800f310:	9b03      	ldr	r3, [sp, #12]
 800f312:	930e      	str	r3, [sp, #56]	; 0x38
 800f314:	9b07      	ldr	r3, [sp, #28]
 800f316:	e783      	b.n	800f220 <_dtoa_r+0x3e4>
 800f318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f31a:	4b84      	ldr	r3, [pc, #528]	; (800f52c <_dtoa_r+0x6f0>)
 800f31c:	3a01      	subs	r2, #1
 800f31e:	00d2      	lsls	r2, r2, #3
 800f320:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f322:	189b      	adds	r3, r3, r2
 800f324:	9c08      	ldr	r4, [sp, #32]
 800f326:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	2900      	cmp	r1, #0
 800f32e:	d051      	beq.n	800f3d4 <_dtoa_r+0x598>
 800f330:	2000      	movs	r0, #0
 800f332:	4986      	ldr	r1, [pc, #536]	; (800f54c <_dtoa_r+0x710>)
 800f334:	f7f1 fda0 	bl	8000e78 <__aeabi_ddiv>
 800f338:	0022      	movs	r2, r4
 800f33a:	002b      	movs	r3, r5
 800f33c:	f7f2 fc58 	bl	8001bf0 <__aeabi_dsub>
 800f340:	9a06      	ldr	r2, [sp, #24]
 800f342:	0004      	movs	r4, r0
 800f344:	4694      	mov	ip, r2
 800f346:	000d      	movs	r5, r1
 800f348:	9b06      	ldr	r3, [sp, #24]
 800f34a:	9314      	str	r3, [sp, #80]	; 0x50
 800f34c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f34e:	4463      	add	r3, ip
 800f350:	9318      	str	r3, [sp, #96]	; 0x60
 800f352:	0039      	movs	r1, r7
 800f354:	0030      	movs	r0, r6
 800f356:	f7f2 ffeb 	bl	8002330 <__aeabi_d2iz>
 800f35a:	9012      	str	r0, [sp, #72]	; 0x48
 800f35c:	f7f3 f81e 	bl	800239c <__aeabi_i2d>
 800f360:	0002      	movs	r2, r0
 800f362:	000b      	movs	r3, r1
 800f364:	0030      	movs	r0, r6
 800f366:	0039      	movs	r1, r7
 800f368:	f7f2 fc42 	bl	8001bf0 <__aeabi_dsub>
 800f36c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f36e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f370:	3301      	adds	r3, #1
 800f372:	9308      	str	r3, [sp, #32]
 800f374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f376:	0006      	movs	r6, r0
 800f378:	3330      	adds	r3, #48	; 0x30
 800f37a:	7013      	strb	r3, [r2, #0]
 800f37c:	0022      	movs	r2, r4
 800f37e:	002b      	movs	r3, r5
 800f380:	000f      	movs	r7, r1
 800f382:	f7f1 f867 	bl	8000454 <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d174      	bne.n	800f474 <_dtoa_r+0x638>
 800f38a:	0032      	movs	r2, r6
 800f38c:	003b      	movs	r3, r7
 800f38e:	2000      	movs	r0, #0
 800f390:	4968      	ldr	r1, [pc, #416]	; (800f534 <_dtoa_r+0x6f8>)
 800f392:	f7f2 fc2d 	bl	8001bf0 <__aeabi_dsub>
 800f396:	0022      	movs	r2, r4
 800f398:	002b      	movs	r3, r5
 800f39a:	f7f1 f85b 	bl	8000454 <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d000      	beq.n	800f3a4 <_dtoa_r+0x568>
 800f3a2:	e0d7      	b.n	800f554 <_dtoa_r+0x718>
 800f3a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f3a6:	9a08      	ldr	r2, [sp, #32]
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d100      	bne.n	800f3ae <_dtoa_r+0x572>
 800f3ac:	e771      	b.n	800f292 <_dtoa_r+0x456>
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	0020      	movs	r0, r4
 800f3b2:	0029      	movs	r1, r5
 800f3b4:	4b60      	ldr	r3, [pc, #384]	; (800f538 <_dtoa_r+0x6fc>)
 800f3b6:	f7f2 f959 	bl	800166c <__aeabi_dmul>
 800f3ba:	4b5f      	ldr	r3, [pc, #380]	; (800f538 <_dtoa_r+0x6fc>)
 800f3bc:	0004      	movs	r4, r0
 800f3be:	000d      	movs	r5, r1
 800f3c0:	0030      	movs	r0, r6
 800f3c2:	0039      	movs	r1, r7
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f7f2 f951 	bl	800166c <__aeabi_dmul>
 800f3ca:	9b08      	ldr	r3, [sp, #32]
 800f3cc:	0006      	movs	r6, r0
 800f3ce:	000f      	movs	r7, r1
 800f3d0:	9314      	str	r3, [sp, #80]	; 0x50
 800f3d2:	e7be      	b.n	800f352 <_dtoa_r+0x516>
 800f3d4:	0020      	movs	r0, r4
 800f3d6:	0029      	movs	r1, r5
 800f3d8:	f7f2 f948 	bl	800166c <__aeabi_dmul>
 800f3dc:	9a06      	ldr	r2, [sp, #24]
 800f3de:	9b06      	ldr	r3, [sp, #24]
 800f3e0:	4694      	mov	ip, r2
 800f3e2:	9308      	str	r3, [sp, #32]
 800f3e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3e6:	9014      	str	r0, [sp, #80]	; 0x50
 800f3e8:	9115      	str	r1, [sp, #84]	; 0x54
 800f3ea:	4463      	add	r3, ip
 800f3ec:	9319      	str	r3, [sp, #100]	; 0x64
 800f3ee:	0030      	movs	r0, r6
 800f3f0:	0039      	movs	r1, r7
 800f3f2:	f7f2 ff9d 	bl	8002330 <__aeabi_d2iz>
 800f3f6:	9018      	str	r0, [sp, #96]	; 0x60
 800f3f8:	f7f2 ffd0 	bl	800239c <__aeabi_i2d>
 800f3fc:	0002      	movs	r2, r0
 800f3fe:	000b      	movs	r3, r1
 800f400:	0030      	movs	r0, r6
 800f402:	0039      	movs	r1, r7
 800f404:	f7f2 fbf4 	bl	8001bf0 <__aeabi_dsub>
 800f408:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f40a:	9b08      	ldr	r3, [sp, #32]
 800f40c:	3630      	adds	r6, #48	; 0x30
 800f40e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f410:	701e      	strb	r6, [r3, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	0004      	movs	r4, r0
 800f416:	000d      	movs	r5, r1
 800f418:	9308      	str	r3, [sp, #32]
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d12d      	bne.n	800f47a <_dtoa_r+0x63e>
 800f41e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f420:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f422:	9a06      	ldr	r2, [sp, #24]
 800f424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f426:	4694      	mov	ip, r2
 800f428:	4463      	add	r3, ip
 800f42a:	2200      	movs	r2, #0
 800f42c:	9308      	str	r3, [sp, #32]
 800f42e:	4b47      	ldr	r3, [pc, #284]	; (800f54c <_dtoa_r+0x710>)
 800f430:	f7f1 f9c2 	bl	80007b8 <__aeabi_dadd>
 800f434:	0002      	movs	r2, r0
 800f436:	000b      	movs	r3, r1
 800f438:	0020      	movs	r0, r4
 800f43a:	0029      	movs	r1, r5
 800f43c:	f7f1 f81e 	bl	800047c <__aeabi_dcmpgt>
 800f440:	2800      	cmp	r0, #0
 800f442:	d000      	beq.n	800f446 <_dtoa_r+0x60a>
 800f444:	e086      	b.n	800f554 <_dtoa_r+0x718>
 800f446:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f44a:	2000      	movs	r0, #0
 800f44c:	493f      	ldr	r1, [pc, #252]	; (800f54c <_dtoa_r+0x710>)
 800f44e:	f7f2 fbcf 	bl	8001bf0 <__aeabi_dsub>
 800f452:	0002      	movs	r2, r0
 800f454:	000b      	movs	r3, r1
 800f456:	0020      	movs	r0, r4
 800f458:	0029      	movs	r1, r5
 800f45a:	f7f0 fffb 	bl	8000454 <__aeabi_dcmplt>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d100      	bne.n	800f464 <_dtoa_r+0x628>
 800f462:	e716      	b.n	800f292 <_dtoa_r+0x456>
 800f464:	9b08      	ldr	r3, [sp, #32]
 800f466:	001a      	movs	r2, r3
 800f468:	3a01      	subs	r2, #1
 800f46a:	9208      	str	r2, [sp, #32]
 800f46c:	7812      	ldrb	r2, [r2, #0]
 800f46e:	2a30      	cmp	r2, #48	; 0x30
 800f470:	d0f8      	beq.n	800f464 <_dtoa_r+0x628>
 800f472:	9308      	str	r3, [sp, #32]
 800f474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f476:	9303      	str	r3, [sp, #12]
 800f478:	e046      	b.n	800f508 <_dtoa_r+0x6cc>
 800f47a:	2200      	movs	r2, #0
 800f47c:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <_dtoa_r+0x6fc>)
 800f47e:	f7f2 f8f5 	bl	800166c <__aeabi_dmul>
 800f482:	0006      	movs	r6, r0
 800f484:	000f      	movs	r7, r1
 800f486:	e7b2      	b.n	800f3ee <_dtoa_r+0x5b2>
 800f488:	9b06      	ldr	r3, [sp, #24]
 800f48a:	9a06      	ldr	r2, [sp, #24]
 800f48c:	930a      	str	r3, [sp, #40]	; 0x28
 800f48e:	9b07      	ldr	r3, [sp, #28]
 800f490:	9c08      	ldr	r4, [sp, #32]
 800f492:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f494:	3b01      	subs	r3, #1
 800f496:	189b      	adds	r3, r3, r2
 800f498:	930b      	str	r3, [sp, #44]	; 0x2c
 800f49a:	0032      	movs	r2, r6
 800f49c:	003b      	movs	r3, r7
 800f49e:	0020      	movs	r0, r4
 800f4a0:	0029      	movs	r1, r5
 800f4a2:	f7f1 fce9 	bl	8000e78 <__aeabi_ddiv>
 800f4a6:	f7f2 ff43 	bl	8002330 <__aeabi_d2iz>
 800f4aa:	9007      	str	r0, [sp, #28]
 800f4ac:	f7f2 ff76 	bl	800239c <__aeabi_i2d>
 800f4b0:	0032      	movs	r2, r6
 800f4b2:	003b      	movs	r3, r7
 800f4b4:	f7f2 f8da 	bl	800166c <__aeabi_dmul>
 800f4b8:	0002      	movs	r2, r0
 800f4ba:	000b      	movs	r3, r1
 800f4bc:	0020      	movs	r0, r4
 800f4be:	0029      	movs	r1, r5
 800f4c0:	f7f2 fb96 	bl	8001bf0 <__aeabi_dsub>
 800f4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4c6:	001a      	movs	r2, r3
 800f4c8:	3201      	adds	r2, #1
 800f4ca:	920a      	str	r2, [sp, #40]	; 0x28
 800f4cc:	9208      	str	r2, [sp, #32]
 800f4ce:	9a07      	ldr	r2, [sp, #28]
 800f4d0:	3230      	adds	r2, #48	; 0x30
 800f4d2:	701a      	strb	r2, [r3, #0]
 800f4d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d14f      	bne.n	800f57a <_dtoa_r+0x73e>
 800f4da:	0002      	movs	r2, r0
 800f4dc:	000b      	movs	r3, r1
 800f4de:	f7f1 f96b 	bl	80007b8 <__aeabi_dadd>
 800f4e2:	0032      	movs	r2, r6
 800f4e4:	003b      	movs	r3, r7
 800f4e6:	0004      	movs	r4, r0
 800f4e8:	000d      	movs	r5, r1
 800f4ea:	f7f0 ffc7 	bl	800047c <__aeabi_dcmpgt>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d12e      	bne.n	800f550 <_dtoa_r+0x714>
 800f4f2:	0032      	movs	r2, r6
 800f4f4:	003b      	movs	r3, r7
 800f4f6:	0020      	movs	r0, r4
 800f4f8:	0029      	movs	r1, r5
 800f4fa:	f7f0 ffa5 	bl	8000448 <__aeabi_dcmpeq>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d002      	beq.n	800f508 <_dtoa_r+0x6cc>
 800f502:	9b07      	ldr	r3, [sp, #28]
 800f504:	07de      	lsls	r6, r3, #31
 800f506:	d423      	bmi.n	800f550 <_dtoa_r+0x714>
 800f508:	9905      	ldr	r1, [sp, #20]
 800f50a:	9804      	ldr	r0, [sp, #16]
 800f50c:	f7fc f8fe 	bl	800b70c <_Bfree>
 800f510:	2300      	movs	r3, #0
 800f512:	9a08      	ldr	r2, [sp, #32]
 800f514:	7013      	strb	r3, [r2, #0]
 800f516:	9b03      	ldr	r3, [sp, #12]
 800f518:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f51a:	3301      	adds	r3, #1
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f520:	2b00      	cmp	r3, #0
 800f522:	d100      	bne.n	800f526 <_dtoa_r+0x6ea>
 800f524:	e4bd      	b.n	800eea2 <_dtoa_r+0x66>
 800f526:	9a08      	ldr	r2, [sp, #32]
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	e4ba      	b.n	800eea2 <_dtoa_r+0x66>
 800f52c:	08013180 	.word	0x08013180
 800f530:	08013158 	.word	0x08013158
 800f534:	3ff00000 	.word	0x3ff00000
 800f538:	40240000 	.word	0x40240000
 800f53c:	401c0000 	.word	0x401c0000
 800f540:	fcc00000 	.word	0xfcc00000
 800f544:	40140000 	.word	0x40140000
 800f548:	7cc00000 	.word	0x7cc00000
 800f54c:	3fe00000 	.word	0x3fe00000
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	930e      	str	r3, [sp, #56]	; 0x38
 800f554:	9b08      	ldr	r3, [sp, #32]
 800f556:	9308      	str	r3, [sp, #32]
 800f558:	3b01      	subs	r3, #1
 800f55a:	781a      	ldrb	r2, [r3, #0]
 800f55c:	2a39      	cmp	r2, #57	; 0x39
 800f55e:	d108      	bne.n	800f572 <_dtoa_r+0x736>
 800f560:	9a06      	ldr	r2, [sp, #24]
 800f562:	429a      	cmp	r2, r3
 800f564:	d1f7      	bne.n	800f556 <_dtoa_r+0x71a>
 800f566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f568:	9906      	ldr	r1, [sp, #24]
 800f56a:	3201      	adds	r2, #1
 800f56c:	920e      	str	r2, [sp, #56]	; 0x38
 800f56e:	2230      	movs	r2, #48	; 0x30
 800f570:	700a      	strb	r2, [r1, #0]
 800f572:	781a      	ldrb	r2, [r3, #0]
 800f574:	3201      	adds	r2, #1
 800f576:	701a      	strb	r2, [r3, #0]
 800f578:	e77c      	b.n	800f474 <_dtoa_r+0x638>
 800f57a:	2200      	movs	r2, #0
 800f57c:	4ba9      	ldr	r3, [pc, #676]	; (800f824 <_dtoa_r+0x9e8>)
 800f57e:	f7f2 f875 	bl	800166c <__aeabi_dmul>
 800f582:	2200      	movs	r2, #0
 800f584:	2300      	movs	r3, #0
 800f586:	0004      	movs	r4, r0
 800f588:	000d      	movs	r5, r1
 800f58a:	f7f0 ff5d 	bl	8000448 <__aeabi_dcmpeq>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d100      	bne.n	800f594 <_dtoa_r+0x758>
 800f592:	e782      	b.n	800f49a <_dtoa_r+0x65e>
 800f594:	e7b8      	b.n	800f508 <_dtoa_r+0x6cc>
 800f596:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f598:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f59a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f59c:	2f00      	cmp	r7, #0
 800f59e:	d012      	beq.n	800f5c6 <_dtoa_r+0x78a>
 800f5a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f5a2:	2a01      	cmp	r2, #1
 800f5a4:	dc6e      	bgt.n	800f684 <_dtoa_r+0x848>
 800f5a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	d065      	beq.n	800f678 <_dtoa_r+0x83c>
 800f5ac:	4a9e      	ldr	r2, [pc, #632]	; (800f828 <_dtoa_r+0x9ec>)
 800f5ae:	189b      	adds	r3, r3, r2
 800f5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	18d2      	adds	r2, r2, r3
 800f5b6:	920a      	str	r2, [sp, #40]	; 0x28
 800f5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5ba:	9804      	ldr	r0, [sp, #16]
 800f5bc:	18d3      	adds	r3, r2, r3
 800f5be:	930c      	str	r3, [sp, #48]	; 0x30
 800f5c0:	f7fc f986 	bl	800b8d0 <__i2b>
 800f5c4:	0007      	movs	r7, r0
 800f5c6:	2c00      	cmp	r4, #0
 800f5c8:	d00e      	beq.n	800f5e8 <_dtoa_r+0x7ac>
 800f5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	dd0b      	ble.n	800f5e8 <_dtoa_r+0x7ac>
 800f5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5d2:	0023      	movs	r3, r4
 800f5d4:	4294      	cmp	r4, r2
 800f5d6:	dd00      	ble.n	800f5da <_dtoa_r+0x79e>
 800f5d8:	0013      	movs	r3, r2
 800f5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5dc:	1ae4      	subs	r4, r4, r3
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800f5e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	930c      	str	r3, [sp, #48]	; 0x30
 800f5e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d01e      	beq.n	800f62c <_dtoa_r+0x7f0>
 800f5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d05c      	beq.n	800f6ae <_dtoa_r+0x872>
 800f5f4:	2d00      	cmp	r5, #0
 800f5f6:	dd10      	ble.n	800f61a <_dtoa_r+0x7de>
 800f5f8:	0039      	movs	r1, r7
 800f5fa:	002a      	movs	r2, r5
 800f5fc:	9804      	ldr	r0, [sp, #16]
 800f5fe:	f7fc fa2f 	bl	800ba60 <__pow5mult>
 800f602:	9a05      	ldr	r2, [sp, #20]
 800f604:	0001      	movs	r1, r0
 800f606:	0007      	movs	r7, r0
 800f608:	9804      	ldr	r0, [sp, #16]
 800f60a:	f7fc f979 	bl	800b900 <__multiply>
 800f60e:	0006      	movs	r6, r0
 800f610:	9905      	ldr	r1, [sp, #20]
 800f612:	9804      	ldr	r0, [sp, #16]
 800f614:	f7fc f87a 	bl	800b70c <_Bfree>
 800f618:	9605      	str	r6, [sp, #20]
 800f61a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f61c:	1b5a      	subs	r2, r3, r5
 800f61e:	42ab      	cmp	r3, r5
 800f620:	d004      	beq.n	800f62c <_dtoa_r+0x7f0>
 800f622:	9905      	ldr	r1, [sp, #20]
 800f624:	9804      	ldr	r0, [sp, #16]
 800f626:	f7fc fa1b 	bl	800ba60 <__pow5mult>
 800f62a:	9005      	str	r0, [sp, #20]
 800f62c:	2101      	movs	r1, #1
 800f62e:	9804      	ldr	r0, [sp, #16]
 800f630:	f7fc f94e 	bl	800b8d0 <__i2b>
 800f634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f636:	0006      	movs	r6, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dd3a      	ble.n	800f6b2 <_dtoa_r+0x876>
 800f63c:	001a      	movs	r2, r3
 800f63e:	0001      	movs	r1, r0
 800f640:	9804      	ldr	r0, [sp, #16]
 800f642:	f7fc fa0d 	bl	800ba60 <__pow5mult>
 800f646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f648:	0006      	movs	r6, r0
 800f64a:	2500      	movs	r5, #0
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	dc38      	bgt.n	800f6c2 <_dtoa_r+0x886>
 800f650:	2500      	movs	r5, #0
 800f652:	9b08      	ldr	r3, [sp, #32]
 800f654:	42ab      	cmp	r3, r5
 800f656:	d130      	bne.n	800f6ba <_dtoa_r+0x87e>
 800f658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65a:	031b      	lsls	r3, r3, #12
 800f65c:	42ab      	cmp	r3, r5
 800f65e:	d12c      	bne.n	800f6ba <_dtoa_r+0x87e>
 800f660:	4b72      	ldr	r3, [pc, #456]	; (800f82c <_dtoa_r+0x9f0>)
 800f662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f664:	4213      	tst	r3, r2
 800f666:	d028      	beq.n	800f6ba <_dtoa_r+0x87e>
 800f668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f66a:	3501      	adds	r5, #1
 800f66c:	3301      	adds	r3, #1
 800f66e:	930a      	str	r3, [sp, #40]	; 0x28
 800f670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f672:	3301      	adds	r3, #1
 800f674:	930c      	str	r3, [sp, #48]	; 0x30
 800f676:	e020      	b.n	800f6ba <_dtoa_r+0x87e>
 800f678:	2336      	movs	r3, #54	; 0x36
 800f67a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f67c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f67e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f680:	1a9b      	subs	r3, r3, r2
 800f682:	e795      	b.n	800f5b0 <_dtoa_r+0x774>
 800f684:	9b07      	ldr	r3, [sp, #28]
 800f686:	1e5d      	subs	r5, r3, #1
 800f688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f68a:	42ab      	cmp	r3, r5
 800f68c:	db07      	blt.n	800f69e <_dtoa_r+0x862>
 800f68e:	1b5d      	subs	r5, r3, r5
 800f690:	9b07      	ldr	r3, [sp, #28]
 800f692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f694:	2b00      	cmp	r3, #0
 800f696:	da8b      	bge.n	800f5b0 <_dtoa_r+0x774>
 800f698:	1ae4      	subs	r4, r4, r3
 800f69a:	2300      	movs	r3, #0
 800f69c:	e788      	b.n	800f5b0 <_dtoa_r+0x774>
 800f69e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f6a2:	1aeb      	subs	r3, r5, r3
 800f6a4:	18d3      	adds	r3, r2, r3
 800f6a6:	950d      	str	r5, [sp, #52]	; 0x34
 800f6a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f6aa:	2500      	movs	r5, #0
 800f6ac:	e7f0      	b.n	800f690 <_dtoa_r+0x854>
 800f6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6b0:	e7b7      	b.n	800f622 <_dtoa_r+0x7e6>
 800f6b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f6b4:	2500      	movs	r5, #0
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	ddca      	ble.n	800f650 <_dtoa_r+0x814>
 800f6ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6bc:	2001      	movs	r0, #1
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d008      	beq.n	800f6d4 <_dtoa_r+0x898>
 800f6c2:	6933      	ldr	r3, [r6, #16]
 800f6c4:	3303      	adds	r3, #3
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	18f3      	adds	r3, r6, r3
 800f6ca:	6858      	ldr	r0, [r3, #4]
 800f6cc:	f7fc f8b8 	bl	800b840 <__hi0bits>
 800f6d0:	2320      	movs	r3, #32
 800f6d2:	1a18      	subs	r0, r3, r0
 800f6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6d6:	1818      	adds	r0, r3, r0
 800f6d8:	0002      	movs	r2, r0
 800f6da:	231f      	movs	r3, #31
 800f6dc:	401a      	ands	r2, r3
 800f6de:	4218      	tst	r0, r3
 800f6e0:	d047      	beq.n	800f772 <_dtoa_r+0x936>
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	1a9b      	subs	r3, r3, r2
 800f6e6:	2b04      	cmp	r3, #4
 800f6e8:	dd3f      	ble.n	800f76a <_dtoa_r+0x92e>
 800f6ea:	231c      	movs	r3, #28
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6f0:	18e4      	adds	r4, r4, r3
 800f6f2:	18d2      	adds	r2, r2, r3
 800f6f4:	920a      	str	r2, [sp, #40]	; 0x28
 800f6f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6f8:	18d3      	adds	r3, r2, r3
 800f6fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dd05      	ble.n	800f70e <_dtoa_r+0x8d2>
 800f702:	001a      	movs	r2, r3
 800f704:	9905      	ldr	r1, [sp, #20]
 800f706:	9804      	ldr	r0, [sp, #16]
 800f708:	f7fc f9ec 	bl	800bae4 <__lshift>
 800f70c:	9005      	str	r0, [sp, #20]
 800f70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	dd05      	ble.n	800f720 <_dtoa_r+0x8e4>
 800f714:	0031      	movs	r1, r6
 800f716:	001a      	movs	r2, r3
 800f718:	9804      	ldr	r0, [sp, #16]
 800f71a:	f7fc f9e3 	bl	800bae4 <__lshift>
 800f71e:	0006      	movs	r6, r0
 800f720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f722:	2b00      	cmp	r3, #0
 800f724:	d027      	beq.n	800f776 <_dtoa_r+0x93a>
 800f726:	0031      	movs	r1, r6
 800f728:	9805      	ldr	r0, [sp, #20]
 800f72a:	f7fc fa49 	bl	800bbc0 <__mcmp>
 800f72e:	2800      	cmp	r0, #0
 800f730:	da21      	bge.n	800f776 <_dtoa_r+0x93a>
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	220a      	movs	r2, #10
 800f736:	3b01      	subs	r3, #1
 800f738:	9303      	str	r3, [sp, #12]
 800f73a:	9905      	ldr	r1, [sp, #20]
 800f73c:	2300      	movs	r3, #0
 800f73e:	9804      	ldr	r0, [sp, #16]
 800f740:	f7fb ffee 	bl	800b720 <__multadd>
 800f744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f746:	9005      	str	r0, [sp, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d100      	bne.n	800f74e <_dtoa_r+0x912>
 800f74c:	e15d      	b.n	800fa0a <_dtoa_r+0xbce>
 800f74e:	2300      	movs	r3, #0
 800f750:	0039      	movs	r1, r7
 800f752:	220a      	movs	r2, #10
 800f754:	9804      	ldr	r0, [sp, #16]
 800f756:	f7fb ffe3 	bl	800b720 <__multadd>
 800f75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f75c:	0007      	movs	r7, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	dc49      	bgt.n	800f7f6 <_dtoa_r+0x9ba>
 800f762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f764:	2b02      	cmp	r3, #2
 800f766:	dc0e      	bgt.n	800f786 <_dtoa_r+0x94a>
 800f768:	e045      	b.n	800f7f6 <_dtoa_r+0x9ba>
 800f76a:	2b04      	cmp	r3, #4
 800f76c:	d0c6      	beq.n	800f6fc <_dtoa_r+0x8c0>
 800f76e:	331c      	adds	r3, #28
 800f770:	e7bd      	b.n	800f6ee <_dtoa_r+0x8b2>
 800f772:	0013      	movs	r3, r2
 800f774:	e7fb      	b.n	800f76e <_dtoa_r+0x932>
 800f776:	9b07      	ldr	r3, [sp, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	dc36      	bgt.n	800f7ea <_dtoa_r+0x9ae>
 800f77c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f77e:	2b02      	cmp	r3, #2
 800f780:	dd33      	ble.n	800f7ea <_dtoa_r+0x9ae>
 800f782:	9b07      	ldr	r3, [sp, #28]
 800f784:	930b      	str	r3, [sp, #44]	; 0x2c
 800f786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10c      	bne.n	800f7a6 <_dtoa_r+0x96a>
 800f78c:	0031      	movs	r1, r6
 800f78e:	2205      	movs	r2, #5
 800f790:	9804      	ldr	r0, [sp, #16]
 800f792:	f7fb ffc5 	bl	800b720 <__multadd>
 800f796:	0006      	movs	r6, r0
 800f798:	0001      	movs	r1, r0
 800f79a:	9805      	ldr	r0, [sp, #20]
 800f79c:	f7fc fa10 	bl	800bbc0 <__mcmp>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	dd00      	ble.n	800f7a6 <_dtoa_r+0x96a>
 800f7a4:	e59f      	b.n	800f2e6 <_dtoa_r+0x4aa>
 800f7a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f7a8:	43db      	mvns	r3, r3
 800f7aa:	9303      	str	r3, [sp, #12]
 800f7ac:	9b06      	ldr	r3, [sp, #24]
 800f7ae:	9308      	str	r3, [sp, #32]
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	0031      	movs	r1, r6
 800f7b4:	9804      	ldr	r0, [sp, #16]
 800f7b6:	f7fb ffa9 	bl	800b70c <_Bfree>
 800f7ba:	2f00      	cmp	r7, #0
 800f7bc:	d100      	bne.n	800f7c0 <_dtoa_r+0x984>
 800f7be:	e6a3      	b.n	800f508 <_dtoa_r+0x6cc>
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	d005      	beq.n	800f7d0 <_dtoa_r+0x994>
 800f7c4:	42bd      	cmp	r5, r7
 800f7c6:	d003      	beq.n	800f7d0 <_dtoa_r+0x994>
 800f7c8:	0029      	movs	r1, r5
 800f7ca:	9804      	ldr	r0, [sp, #16]
 800f7cc:	f7fb ff9e 	bl	800b70c <_Bfree>
 800f7d0:	0039      	movs	r1, r7
 800f7d2:	9804      	ldr	r0, [sp, #16]
 800f7d4:	f7fb ff9a 	bl	800b70c <_Bfree>
 800f7d8:	e696      	b.n	800f508 <_dtoa_r+0x6cc>
 800f7da:	2600      	movs	r6, #0
 800f7dc:	0037      	movs	r7, r6
 800f7de:	e7e2      	b.n	800f7a6 <_dtoa_r+0x96a>
 800f7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7e2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f7e4:	9303      	str	r3, [sp, #12]
 800f7e6:	0037      	movs	r7, r6
 800f7e8:	e57d      	b.n	800f2e6 <_dtoa_r+0x4aa>
 800f7ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d100      	bne.n	800f7f2 <_dtoa_r+0x9b6>
 800f7f0:	e0c3      	b.n	800f97a <_dtoa_r+0xb3e>
 800f7f2:	9b07      	ldr	r3, [sp, #28]
 800f7f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7f6:	2c00      	cmp	r4, #0
 800f7f8:	dd05      	ble.n	800f806 <_dtoa_r+0x9ca>
 800f7fa:	0039      	movs	r1, r7
 800f7fc:	0022      	movs	r2, r4
 800f7fe:	9804      	ldr	r0, [sp, #16]
 800f800:	f7fc f970 	bl	800bae4 <__lshift>
 800f804:	0007      	movs	r7, r0
 800f806:	0038      	movs	r0, r7
 800f808:	2d00      	cmp	r5, #0
 800f80a:	d024      	beq.n	800f856 <_dtoa_r+0xa1a>
 800f80c:	6879      	ldr	r1, [r7, #4]
 800f80e:	9804      	ldr	r0, [sp, #16]
 800f810:	f7fb ff54 	bl	800b6bc <_Balloc>
 800f814:	1e04      	subs	r4, r0, #0
 800f816:	d111      	bne.n	800f83c <_dtoa_r+0xa00>
 800f818:	0022      	movs	r2, r4
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <_dtoa_r+0x9f4>)
 800f81c:	4805      	ldr	r0, [pc, #20]	; (800f834 <_dtoa_r+0x9f8>)
 800f81e:	4906      	ldr	r1, [pc, #24]	; (800f838 <_dtoa_r+0x9fc>)
 800f820:	e43c      	b.n	800f09c <_dtoa_r+0x260>
 800f822:	46c0      	nop			; (mov r8, r8)
 800f824:	40240000 	.word	0x40240000
 800f828:	00000433 	.word	0x00000433
 800f82c:	7ff00000 	.word	0x7ff00000
 800f830:	08013089 	.word	0x08013089
 800f834:	08013319 	.word	0x08013319
 800f838:	000002ef 	.word	0x000002ef
 800f83c:	0039      	movs	r1, r7
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	310c      	adds	r1, #12
 800f842:	3202      	adds	r2, #2
 800f844:	0092      	lsls	r2, r2, #2
 800f846:	300c      	adds	r0, #12
 800f848:	f7fb fa9d 	bl	800ad86 <memcpy>
 800f84c:	2201      	movs	r2, #1
 800f84e:	0021      	movs	r1, r4
 800f850:	9804      	ldr	r0, [sp, #16]
 800f852:	f7fc f947 	bl	800bae4 <__lshift>
 800f856:	9b06      	ldr	r3, [sp, #24]
 800f858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f85a:	9307      	str	r3, [sp, #28]
 800f85c:	3b01      	subs	r3, #1
 800f85e:	189b      	adds	r3, r3, r2
 800f860:	2201      	movs	r2, #1
 800f862:	003d      	movs	r5, r7
 800f864:	0007      	movs	r7, r0
 800f866:	930e      	str	r3, [sp, #56]	; 0x38
 800f868:	9b08      	ldr	r3, [sp, #32]
 800f86a:	4013      	ands	r3, r2
 800f86c:	930d      	str	r3, [sp, #52]	; 0x34
 800f86e:	0031      	movs	r1, r6
 800f870:	9805      	ldr	r0, [sp, #20]
 800f872:	f7ff fa53 	bl	800ed1c <quorem>
 800f876:	0029      	movs	r1, r5
 800f878:	0004      	movs	r4, r0
 800f87a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f87c:	9805      	ldr	r0, [sp, #20]
 800f87e:	f7fc f99f 	bl	800bbc0 <__mcmp>
 800f882:	003a      	movs	r2, r7
 800f884:	900c      	str	r0, [sp, #48]	; 0x30
 800f886:	0031      	movs	r1, r6
 800f888:	9804      	ldr	r0, [sp, #16]
 800f88a:	f7fc f9b5 	bl	800bbf8 <__mdiff>
 800f88e:	2201      	movs	r2, #1
 800f890:	68c3      	ldr	r3, [r0, #12]
 800f892:	3430      	adds	r4, #48	; 0x30
 800f894:	9008      	str	r0, [sp, #32]
 800f896:	920a      	str	r2, [sp, #40]	; 0x28
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d104      	bne.n	800f8a6 <_dtoa_r+0xa6a>
 800f89c:	0001      	movs	r1, r0
 800f89e:	9805      	ldr	r0, [sp, #20]
 800f8a0:	f7fc f98e 	bl	800bbc0 <__mcmp>
 800f8a4:	900a      	str	r0, [sp, #40]	; 0x28
 800f8a6:	9908      	ldr	r1, [sp, #32]
 800f8a8:	9804      	ldr	r0, [sp, #16]
 800f8aa:	f7fb ff2f 	bl	800b70c <_Bfree>
 800f8ae:	9b07      	ldr	r3, [sp, #28]
 800f8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	9308      	str	r3, [sp, #32]
 800f8b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	d109      	bne.n	800f8d4 <_dtoa_r+0xa98>
 800f8c0:	2c39      	cmp	r4, #57	; 0x39
 800f8c2:	d022      	beq.n	800f90a <_dtoa_r+0xace>
 800f8c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	dd01      	ble.n	800f8ce <_dtoa_r+0xa92>
 800f8ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f8cc:	3431      	adds	r4, #49	; 0x31
 800f8ce:	9b07      	ldr	r3, [sp, #28]
 800f8d0:	701c      	strb	r4, [r3, #0]
 800f8d2:	e76e      	b.n	800f7b2 <_dtoa_r+0x976>
 800f8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	db04      	blt.n	800f8e4 <_dtoa_r+0xaa8>
 800f8da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	d11e      	bne.n	800f922 <_dtoa_r+0xae6>
 800f8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	ddf1      	ble.n	800f8ce <_dtoa_r+0xa92>
 800f8ea:	9905      	ldr	r1, [sp, #20]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	9804      	ldr	r0, [sp, #16]
 800f8f0:	f7fc f8f8 	bl	800bae4 <__lshift>
 800f8f4:	0031      	movs	r1, r6
 800f8f6:	9005      	str	r0, [sp, #20]
 800f8f8:	f7fc f962 	bl	800bbc0 <__mcmp>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	dc02      	bgt.n	800f906 <_dtoa_r+0xaca>
 800f900:	d1e5      	bne.n	800f8ce <_dtoa_r+0xa92>
 800f902:	07e3      	lsls	r3, r4, #31
 800f904:	d5e3      	bpl.n	800f8ce <_dtoa_r+0xa92>
 800f906:	2c39      	cmp	r4, #57	; 0x39
 800f908:	d1df      	bne.n	800f8ca <_dtoa_r+0xa8e>
 800f90a:	2339      	movs	r3, #57	; 0x39
 800f90c:	9a07      	ldr	r2, [sp, #28]
 800f90e:	7013      	strb	r3, [r2, #0]
 800f910:	9b08      	ldr	r3, [sp, #32]
 800f912:	9308      	str	r3, [sp, #32]
 800f914:	3b01      	subs	r3, #1
 800f916:	781a      	ldrb	r2, [r3, #0]
 800f918:	2a39      	cmp	r2, #57	; 0x39
 800f91a:	d063      	beq.n	800f9e4 <_dtoa_r+0xba8>
 800f91c:	3201      	adds	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
 800f920:	e747      	b.n	800f7b2 <_dtoa_r+0x976>
 800f922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f924:	2b00      	cmp	r3, #0
 800f926:	dd03      	ble.n	800f930 <_dtoa_r+0xaf4>
 800f928:	2c39      	cmp	r4, #57	; 0x39
 800f92a:	d0ee      	beq.n	800f90a <_dtoa_r+0xace>
 800f92c:	3401      	adds	r4, #1
 800f92e:	e7ce      	b.n	800f8ce <_dtoa_r+0xa92>
 800f930:	9b07      	ldr	r3, [sp, #28]
 800f932:	9a07      	ldr	r2, [sp, #28]
 800f934:	701c      	strb	r4, [r3, #0]
 800f936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f938:	4293      	cmp	r3, r2
 800f93a:	d03e      	beq.n	800f9ba <_dtoa_r+0xb7e>
 800f93c:	2300      	movs	r3, #0
 800f93e:	220a      	movs	r2, #10
 800f940:	9905      	ldr	r1, [sp, #20]
 800f942:	9804      	ldr	r0, [sp, #16]
 800f944:	f7fb feec 	bl	800b720 <__multadd>
 800f948:	2300      	movs	r3, #0
 800f94a:	9005      	str	r0, [sp, #20]
 800f94c:	220a      	movs	r2, #10
 800f94e:	0029      	movs	r1, r5
 800f950:	9804      	ldr	r0, [sp, #16]
 800f952:	42bd      	cmp	r5, r7
 800f954:	d106      	bne.n	800f964 <_dtoa_r+0xb28>
 800f956:	f7fb fee3 	bl	800b720 <__multadd>
 800f95a:	0005      	movs	r5, r0
 800f95c:	0007      	movs	r7, r0
 800f95e:	9b08      	ldr	r3, [sp, #32]
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	e784      	b.n	800f86e <_dtoa_r+0xa32>
 800f964:	f7fb fedc 	bl	800b720 <__multadd>
 800f968:	0039      	movs	r1, r7
 800f96a:	0005      	movs	r5, r0
 800f96c:	2300      	movs	r3, #0
 800f96e:	220a      	movs	r2, #10
 800f970:	9804      	ldr	r0, [sp, #16]
 800f972:	f7fb fed5 	bl	800b720 <__multadd>
 800f976:	0007      	movs	r7, r0
 800f978:	e7f1      	b.n	800f95e <_dtoa_r+0xb22>
 800f97a:	9b07      	ldr	r3, [sp, #28]
 800f97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f97e:	2500      	movs	r5, #0
 800f980:	0031      	movs	r1, r6
 800f982:	9805      	ldr	r0, [sp, #20]
 800f984:	f7ff f9ca 	bl	800ed1c <quorem>
 800f988:	9b06      	ldr	r3, [sp, #24]
 800f98a:	3030      	adds	r0, #48	; 0x30
 800f98c:	5558      	strb	r0, [r3, r5]
 800f98e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f990:	3501      	adds	r5, #1
 800f992:	0004      	movs	r4, r0
 800f994:	42ab      	cmp	r3, r5
 800f996:	dd07      	ble.n	800f9a8 <_dtoa_r+0xb6c>
 800f998:	2300      	movs	r3, #0
 800f99a:	220a      	movs	r2, #10
 800f99c:	9905      	ldr	r1, [sp, #20]
 800f99e:	9804      	ldr	r0, [sp, #16]
 800f9a0:	f7fb febe 	bl	800b720 <__multadd>
 800f9a4:	9005      	str	r0, [sp, #20]
 800f9a6:	e7eb      	b.n	800f980 <_dtoa_r+0xb44>
 800f9a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	dd00      	ble.n	800f9b2 <_dtoa_r+0xb76>
 800f9b0:	0013      	movs	r3, r2
 800f9b2:	2500      	movs	r5, #0
 800f9b4:	9a06      	ldr	r2, [sp, #24]
 800f9b6:	18d3      	adds	r3, r2, r3
 800f9b8:	9308      	str	r3, [sp, #32]
 800f9ba:	9905      	ldr	r1, [sp, #20]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	9804      	ldr	r0, [sp, #16]
 800f9c0:	f7fc f890 	bl	800bae4 <__lshift>
 800f9c4:	0031      	movs	r1, r6
 800f9c6:	9005      	str	r0, [sp, #20]
 800f9c8:	f7fc f8fa 	bl	800bbc0 <__mcmp>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	dc9f      	bgt.n	800f910 <_dtoa_r+0xad4>
 800f9d0:	d101      	bne.n	800f9d6 <_dtoa_r+0xb9a>
 800f9d2:	07e4      	lsls	r4, r4, #31
 800f9d4:	d49c      	bmi.n	800f910 <_dtoa_r+0xad4>
 800f9d6:	9b08      	ldr	r3, [sp, #32]
 800f9d8:	9308      	str	r3, [sp, #32]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	781a      	ldrb	r2, [r3, #0]
 800f9de:	2a30      	cmp	r2, #48	; 0x30
 800f9e0:	d0fa      	beq.n	800f9d8 <_dtoa_r+0xb9c>
 800f9e2:	e6e6      	b.n	800f7b2 <_dtoa_r+0x976>
 800f9e4:	9a06      	ldr	r2, [sp, #24]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d193      	bne.n	800f912 <_dtoa_r+0xad6>
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	9303      	str	r3, [sp, #12]
 800f9f0:	2331      	movs	r3, #49	; 0x31
 800f9f2:	7013      	strb	r3, [r2, #0]
 800f9f4:	e6dd      	b.n	800f7b2 <_dtoa_r+0x976>
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <_dtoa_r+0xbe0>)
 800f9f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f9fa:	9306      	str	r3, [sp, #24]
 800f9fc:	4b08      	ldr	r3, [pc, #32]	; (800fa20 <_dtoa_r+0xbe4>)
 800f9fe:	2a00      	cmp	r2, #0
 800fa00:	d001      	beq.n	800fa06 <_dtoa_r+0xbca>
 800fa02:	f7ff fa4c 	bl	800ee9e <_dtoa_r+0x62>
 800fa06:	f7ff fa4c 	bl	800eea2 <_dtoa_r+0x66>
 800fa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dcb6      	bgt.n	800f97e <_dtoa_r+0xb42>
 800fa10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	dd00      	ble.n	800fa18 <_dtoa_r+0xbdc>
 800fa16:	e6b6      	b.n	800f786 <_dtoa_r+0x94a>
 800fa18:	e7b1      	b.n	800f97e <_dtoa_r+0xb42>
 800fa1a:	46c0      	nop			; (mov r8, r8)
 800fa1c:	0801330c 	.word	0x0801330c
 800fa20:	08013314 	.word	0x08013314

0800fa24 <realloc>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	4b03      	ldr	r3, [pc, #12]	; (800fa34 <realloc+0x10>)
 800fa28:	000a      	movs	r2, r1
 800fa2a:	0001      	movs	r1, r0
 800fa2c:	6818      	ldr	r0, [r3, #0]
 800fa2e:	f000 f803 	bl	800fa38 <_realloc_r>
 800fa32:	bd10      	pop	{r4, pc}
 800fa34:	200006e0 	.word	0x200006e0

0800fa38 <_realloc_r>:
 800fa38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	1e0c      	subs	r4, r1, #0
 800fa3e:	9001      	str	r0, [sp, #4]
 800fa40:	9205      	str	r2, [sp, #20]
 800fa42:	d106      	bne.n	800fa52 <_realloc_r+0x1a>
 800fa44:	0011      	movs	r1, r2
 800fa46:	f7f9 fe39 	bl	80096bc <_malloc_r>
 800fa4a:	0007      	movs	r7, r0
 800fa4c:	0038      	movs	r0, r7
 800fa4e:	b007      	add	sp, #28
 800fa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa52:	9801      	ldr	r0, [sp, #4]
 800fa54:	f7fa f846 	bl	8009ae4 <__malloc_lock>
 800fa58:	0023      	movs	r3, r4
 800fa5a:	3b08      	subs	r3, #8
 800fa5c:	685f      	ldr	r7, [r3, #4]
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	9b05      	ldr	r3, [sp, #20]
 800fa62:	330b      	adds	r3, #11
 800fa64:	2b16      	cmp	r3, #22
 800fa66:	d908      	bls.n	800fa7a <_realloc_r+0x42>
 800fa68:	2207      	movs	r2, #7
 800fa6a:	4393      	bics	r3, r2
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	d506      	bpl.n	800fa7e <_realloc_r+0x46>
 800fa70:	230c      	movs	r3, #12
 800fa72:	9a01      	ldr	r2, [sp, #4]
 800fa74:	2700      	movs	r7, #0
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	e7e8      	b.n	800fa4c <_realloc_r+0x14>
 800fa7a:	2310      	movs	r3, #16
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	9b00      	ldr	r3, [sp, #0]
 800fa80:	9a05      	ldr	r2, [sp, #20]
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d3f4      	bcc.n	800fa70 <_realloc_r+0x38>
 800fa86:	9b04      	ldr	r3, [sp, #16]
 800fa88:	003a      	movs	r2, r7
 800fa8a:	9302      	str	r3, [sp, #8]
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	439a      	bics	r2, r3
 800fa90:	9b00      	ldr	r3, [sp, #0]
 800fa92:	9203      	str	r2, [sp, #12]
 800fa94:	4293      	cmp	r3, r2
 800fa96:	dc00      	bgt.n	800fa9a <_realloc_r+0x62>
 800fa98:	e169      	b.n	800fd6e <_realloc_r+0x336>
 800fa9a:	9b04      	ldr	r3, [sp, #16]
 800fa9c:	48b8      	ldr	r0, [pc, #736]	; (800fd80 <_realloc_r+0x348>)
 800fa9e:	189b      	adds	r3, r3, r2
 800faa0:	6882      	ldr	r2, [r0, #8]
 800faa2:	4694      	mov	ip, r2
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	459c      	cmp	ip, r3
 800faa8:	d006      	beq.n	800fab8 <_realloc_r+0x80>
 800faaa:	2501      	movs	r5, #1
 800faac:	0011      	movs	r1, r2
 800faae:	43a9      	bics	r1, r5
 800fab0:	1859      	adds	r1, r3, r1
 800fab2:	6849      	ldr	r1, [r1, #4]
 800fab4:	4229      	tst	r1, r5
 800fab6:	d144      	bne.n	800fb42 <_realloc_r+0x10a>
 800fab8:	2103      	movs	r1, #3
 800faba:	438a      	bics	r2, r1
 800fabc:	9903      	ldr	r1, [sp, #12]
 800fabe:	188e      	adds	r6, r1, r2
 800fac0:	9900      	ldr	r1, [sp, #0]
 800fac2:	459c      	cmp	ip, r3
 800fac4:	d117      	bne.n	800faf6 <_realloc_r+0xbe>
 800fac6:	3110      	adds	r1, #16
 800fac8:	42b1      	cmp	r1, r6
 800faca:	dc3c      	bgt.n	800fb46 <_realloc_r+0x10e>
 800facc:	9a00      	ldr	r2, [sp, #0]
 800face:	2101      	movs	r1, #1
 800fad0:	4694      	mov	ip, r2
 800fad2:	1ab6      	subs	r6, r6, r2
 800fad4:	0022      	movs	r2, r4
 800fad6:	9b04      	ldr	r3, [sp, #16]
 800fad8:	430e      	orrs	r6, r1
 800fada:	4463      	add	r3, ip
 800fadc:	6083      	str	r3, [r0, #8]
 800fade:	3a08      	subs	r2, #8
 800fae0:	605e      	str	r6, [r3, #4]
 800fae2:	6853      	ldr	r3, [r2, #4]
 800fae4:	9801      	ldr	r0, [sp, #4]
 800fae6:	400b      	ands	r3, r1
 800fae8:	4661      	mov	r1, ip
 800faea:	430b      	orrs	r3, r1
 800faec:	6053      	str	r3, [r2, #4]
 800faee:	f7fa f801 	bl	8009af4 <__malloc_unlock>
 800faf2:	0027      	movs	r7, r4
 800faf4:	e7aa      	b.n	800fa4c <_realloc_r+0x14>
 800faf6:	42b1      	cmp	r1, r6
 800faf8:	dc25      	bgt.n	800fb46 <_realloc_r+0x10e>
 800fafa:	68da      	ldr	r2, [r3, #12]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	60da      	str	r2, [r3, #12]
 800fb00:	6093      	str	r3, [r2, #8]
 800fb02:	9b00      	ldr	r3, [sp, #0]
 800fb04:	9a02      	ldr	r2, [sp, #8]
 800fb06:	1af4      	subs	r4, r6, r3
 800fb08:	9b02      	ldr	r3, [sp, #8]
 800fb0a:	1992      	adds	r2, r2, r6
 800fb0c:	6858      	ldr	r0, [r3, #4]
 800fb0e:	2301      	movs	r3, #1
 800fb10:	4018      	ands	r0, r3
 800fb12:	2c0f      	cmp	r4, #15
 800fb14:	d800      	bhi.n	800fb18 <_realloc_r+0xe0>
 800fb16:	e12c      	b.n	800fd72 <_realloc_r+0x33a>
 800fb18:	9d00      	ldr	r5, [sp, #0]
 800fb1a:	9902      	ldr	r1, [sp, #8]
 800fb1c:	4328      	orrs	r0, r5
 800fb1e:	1949      	adds	r1, r1, r5
 800fb20:	9d02      	ldr	r5, [sp, #8]
 800fb22:	431c      	orrs	r4, r3
 800fb24:	6068      	str	r0, [r5, #4]
 800fb26:	604c      	str	r4, [r1, #4]
 800fb28:	6850      	ldr	r0, [r2, #4]
 800fb2a:	3108      	adds	r1, #8
 800fb2c:	4303      	orrs	r3, r0
 800fb2e:	6053      	str	r3, [r2, #4]
 800fb30:	9801      	ldr	r0, [sp, #4]
 800fb32:	f7fb f9a3 	bl	800ae7c <_free_r>
 800fb36:	9801      	ldr	r0, [sp, #4]
 800fb38:	f7f9 ffdc 	bl	8009af4 <__malloc_unlock>
 800fb3c:	9f02      	ldr	r7, [sp, #8]
 800fb3e:	3708      	adds	r7, #8
 800fb40:	e784      	b.n	800fa4c <_realloc_r+0x14>
 800fb42:	2200      	movs	r2, #0
 800fb44:	0013      	movs	r3, r2
 800fb46:	07ff      	lsls	r7, r7, #31
 800fb48:	d500      	bpl.n	800fb4c <_realloc_r+0x114>
 800fb4a:	e0c6      	b.n	800fcda <_realloc_r+0x2a2>
 800fb4c:	0021      	movs	r1, r4
 800fb4e:	2003      	movs	r0, #3
 800fb50:	3908      	subs	r1, #8
 800fb52:	680d      	ldr	r5, [r1, #0]
 800fb54:	9904      	ldr	r1, [sp, #16]
 800fb56:	1b4d      	subs	r5, r1, r5
 800fb58:	6869      	ldr	r1, [r5, #4]
 800fb5a:	4381      	bics	r1, r0
 800fb5c:	9803      	ldr	r0, [sp, #12]
 800fb5e:	180f      	adds	r7, r1, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d100      	bne.n	800fb66 <_realloc_r+0x12e>
 800fb64:	e084      	b.n	800fc70 <_realloc_r+0x238>
 800fb66:	19d6      	adds	r6, r2, r7
 800fb68:	459c      	cmp	ip, r3
 800fb6a:	d148      	bne.n	800fbfe <_realloc_r+0x1c6>
 800fb6c:	9b00      	ldr	r3, [sp, #0]
 800fb6e:	3310      	adds	r3, #16
 800fb70:	42b3      	cmp	r3, r6
 800fb72:	dc7d      	bgt.n	800fc70 <_realloc_r+0x238>
 800fb74:	68aa      	ldr	r2, [r5, #8]
 800fb76:	68eb      	ldr	r3, [r5, #12]
 800fb78:	002f      	movs	r7, r5
 800fb7a:	60d3      	str	r3, [r2, #12]
 800fb7c:	609a      	str	r2, [r3, #8]
 800fb7e:	0002      	movs	r2, r0
 800fb80:	3a04      	subs	r2, #4
 800fb82:	3708      	adds	r7, #8
 800fb84:	2a24      	cmp	r2, #36	; 0x24
 800fb86:	d835      	bhi.n	800fbf4 <_realloc_r+0x1bc>
 800fb88:	003b      	movs	r3, r7
 800fb8a:	2a13      	cmp	r2, #19
 800fb8c:	d908      	bls.n	800fba0 <_realloc_r+0x168>
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	60ab      	str	r3, [r5, #8]
 800fb92:	6863      	ldr	r3, [r4, #4]
 800fb94:	60eb      	str	r3, [r5, #12]
 800fb96:	2a1b      	cmp	r2, #27
 800fb98:	d81a      	bhi.n	800fbd0 <_realloc_r+0x198>
 800fb9a:	002b      	movs	r3, r5
 800fb9c:	3408      	adds	r4, #8
 800fb9e:	3310      	adds	r3, #16
 800fba0:	6822      	ldr	r2, [r4, #0]
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	6862      	ldr	r2, [r4, #4]
 800fba6:	605a      	str	r2, [r3, #4]
 800fba8:	68a2      	ldr	r2, [r4, #8]
 800fbaa:	609a      	str	r2, [r3, #8]
 800fbac:	9b00      	ldr	r3, [sp, #0]
 800fbae:	4a74      	ldr	r2, [pc, #464]	; (800fd80 <_realloc_r+0x348>)
 800fbb0:	18eb      	adds	r3, r5, r3
 800fbb2:	6093      	str	r3, [r2, #8]
 800fbb4:	9a00      	ldr	r2, [sp, #0]
 800fbb6:	1ab6      	subs	r6, r6, r2
 800fbb8:	2201      	movs	r2, #1
 800fbba:	4316      	orrs	r6, r2
 800fbbc:	605e      	str	r6, [r3, #4]
 800fbbe:	686b      	ldr	r3, [r5, #4]
 800fbc0:	4013      	ands	r3, r2
 800fbc2:	9a00      	ldr	r2, [sp, #0]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	606b      	str	r3, [r5, #4]
 800fbc8:	9801      	ldr	r0, [sp, #4]
 800fbca:	f7f9 ff93 	bl	8009af4 <__malloc_unlock>
 800fbce:	e73d      	b.n	800fa4c <_realloc_r+0x14>
 800fbd0:	68a3      	ldr	r3, [r4, #8]
 800fbd2:	612b      	str	r3, [r5, #16]
 800fbd4:	68e3      	ldr	r3, [r4, #12]
 800fbd6:	616b      	str	r3, [r5, #20]
 800fbd8:	2a24      	cmp	r2, #36	; 0x24
 800fbda:	d003      	beq.n	800fbe4 <_realloc_r+0x1ac>
 800fbdc:	002b      	movs	r3, r5
 800fbde:	3410      	adds	r4, #16
 800fbe0:	3318      	adds	r3, #24
 800fbe2:	e7dd      	b.n	800fba0 <_realloc_r+0x168>
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	61ab      	str	r3, [r5, #24]
 800fbe8:	002b      	movs	r3, r5
 800fbea:	6962      	ldr	r2, [r4, #20]
 800fbec:	3320      	adds	r3, #32
 800fbee:	61ea      	str	r2, [r5, #28]
 800fbf0:	3418      	adds	r4, #24
 800fbf2:	e7d5      	b.n	800fba0 <_realloc_r+0x168>
 800fbf4:	0021      	movs	r1, r4
 800fbf6:	0038      	movs	r0, r7
 800fbf8:	f001 fbb5 	bl	8011366 <memmove>
 800fbfc:	e7d6      	b.n	800fbac <_realloc_r+0x174>
 800fbfe:	9a00      	ldr	r2, [sp, #0]
 800fc00:	42b2      	cmp	r2, r6
 800fc02:	dc35      	bgt.n	800fc70 <_realloc_r+0x238>
 800fc04:	0028      	movs	r0, r5
 800fc06:	68da      	ldr	r2, [r3, #12]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	3008      	adds	r0, #8
 800fc0c:	60da      	str	r2, [r3, #12]
 800fc0e:	6093      	str	r3, [r2, #8]
 800fc10:	68aa      	ldr	r2, [r5, #8]
 800fc12:	68eb      	ldr	r3, [r5, #12]
 800fc14:	60d3      	str	r3, [r2, #12]
 800fc16:	609a      	str	r2, [r3, #8]
 800fc18:	9a03      	ldr	r2, [sp, #12]
 800fc1a:	3a04      	subs	r2, #4
 800fc1c:	2a24      	cmp	r2, #36	; 0x24
 800fc1e:	d823      	bhi.n	800fc68 <_realloc_r+0x230>
 800fc20:	2a13      	cmp	r2, #19
 800fc22:	d907      	bls.n	800fc34 <_realloc_r+0x1fc>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	60ab      	str	r3, [r5, #8]
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	60eb      	str	r3, [r5, #12]
 800fc2c:	2a1b      	cmp	r2, #27
 800fc2e:	d809      	bhi.n	800fc44 <_realloc_r+0x20c>
 800fc30:	3408      	adds	r4, #8
 800fc32:	3008      	adds	r0, #8
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	6003      	str	r3, [r0, #0]
 800fc38:	6863      	ldr	r3, [r4, #4]
 800fc3a:	6043      	str	r3, [r0, #4]
 800fc3c:	68a3      	ldr	r3, [r4, #8]
 800fc3e:	6083      	str	r3, [r0, #8]
 800fc40:	9502      	str	r5, [sp, #8]
 800fc42:	e75e      	b.n	800fb02 <_realloc_r+0xca>
 800fc44:	68a3      	ldr	r3, [r4, #8]
 800fc46:	612b      	str	r3, [r5, #16]
 800fc48:	68e3      	ldr	r3, [r4, #12]
 800fc4a:	616b      	str	r3, [r5, #20]
 800fc4c:	2a24      	cmp	r2, #36	; 0x24
 800fc4e:	d003      	beq.n	800fc58 <_realloc_r+0x220>
 800fc50:	0028      	movs	r0, r5
 800fc52:	3410      	adds	r4, #16
 800fc54:	3018      	adds	r0, #24
 800fc56:	e7ed      	b.n	800fc34 <_realloc_r+0x1fc>
 800fc58:	0028      	movs	r0, r5
 800fc5a:	6923      	ldr	r3, [r4, #16]
 800fc5c:	3020      	adds	r0, #32
 800fc5e:	61ab      	str	r3, [r5, #24]
 800fc60:	6963      	ldr	r3, [r4, #20]
 800fc62:	3418      	adds	r4, #24
 800fc64:	61eb      	str	r3, [r5, #28]
 800fc66:	e7e5      	b.n	800fc34 <_realloc_r+0x1fc>
 800fc68:	0021      	movs	r1, r4
 800fc6a:	f001 fb7c 	bl	8011366 <memmove>
 800fc6e:	e7e7      	b.n	800fc40 <_realloc_r+0x208>
 800fc70:	9b00      	ldr	r3, [sp, #0]
 800fc72:	42bb      	cmp	r3, r7
 800fc74:	dc31      	bgt.n	800fcda <_realloc_r+0x2a2>
 800fc76:	0028      	movs	r0, r5
 800fc78:	68aa      	ldr	r2, [r5, #8]
 800fc7a:	68eb      	ldr	r3, [r5, #12]
 800fc7c:	3008      	adds	r0, #8
 800fc7e:	60d3      	str	r3, [r2, #12]
 800fc80:	609a      	str	r2, [r3, #8]
 800fc82:	9a03      	ldr	r2, [sp, #12]
 800fc84:	3a04      	subs	r2, #4
 800fc86:	2a24      	cmp	r2, #36	; 0x24
 800fc88:	d823      	bhi.n	800fcd2 <_realloc_r+0x29a>
 800fc8a:	2a13      	cmp	r2, #19
 800fc8c:	d907      	bls.n	800fc9e <_realloc_r+0x266>
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	60ab      	str	r3, [r5, #8]
 800fc92:	6863      	ldr	r3, [r4, #4]
 800fc94:	60eb      	str	r3, [r5, #12]
 800fc96:	2a1b      	cmp	r2, #27
 800fc98:	d809      	bhi.n	800fcae <_realloc_r+0x276>
 800fc9a:	3408      	adds	r4, #8
 800fc9c:	3008      	adds	r0, #8
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	6003      	str	r3, [r0, #0]
 800fca2:	6863      	ldr	r3, [r4, #4]
 800fca4:	6043      	str	r3, [r0, #4]
 800fca6:	68a3      	ldr	r3, [r4, #8]
 800fca8:	6083      	str	r3, [r0, #8]
 800fcaa:	003e      	movs	r6, r7
 800fcac:	e7c8      	b.n	800fc40 <_realloc_r+0x208>
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	612b      	str	r3, [r5, #16]
 800fcb2:	68e3      	ldr	r3, [r4, #12]
 800fcb4:	616b      	str	r3, [r5, #20]
 800fcb6:	2a24      	cmp	r2, #36	; 0x24
 800fcb8:	d003      	beq.n	800fcc2 <_realloc_r+0x28a>
 800fcba:	0028      	movs	r0, r5
 800fcbc:	3410      	adds	r4, #16
 800fcbe:	3018      	adds	r0, #24
 800fcc0:	e7ed      	b.n	800fc9e <_realloc_r+0x266>
 800fcc2:	0028      	movs	r0, r5
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	3020      	adds	r0, #32
 800fcc8:	61ab      	str	r3, [r5, #24]
 800fcca:	6963      	ldr	r3, [r4, #20]
 800fccc:	3418      	adds	r4, #24
 800fcce:	61eb      	str	r3, [r5, #28]
 800fcd0:	e7e5      	b.n	800fc9e <_realloc_r+0x266>
 800fcd2:	0021      	movs	r1, r4
 800fcd4:	f001 fb47 	bl	8011366 <memmove>
 800fcd8:	e7e7      	b.n	800fcaa <_realloc_r+0x272>
 800fcda:	9905      	ldr	r1, [sp, #20]
 800fcdc:	9801      	ldr	r0, [sp, #4]
 800fcde:	f7f9 fced 	bl	80096bc <_malloc_r>
 800fce2:	1e07      	subs	r7, r0, #0
 800fce4:	d100      	bne.n	800fce8 <_realloc_r+0x2b0>
 800fce6:	e76f      	b.n	800fbc8 <_realloc_r+0x190>
 800fce8:	0023      	movs	r3, r4
 800fcea:	2201      	movs	r2, #1
 800fcec:	3b08      	subs	r3, #8
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4393      	bics	r3, r2
 800fcf2:	9a04      	ldr	r2, [sp, #16]
 800fcf4:	18d3      	adds	r3, r2, r3
 800fcf6:	0002      	movs	r2, r0
 800fcf8:	3a08      	subs	r2, #8
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d105      	bne.n	800fd0a <_realloc_r+0x2d2>
 800fcfe:	685e      	ldr	r6, [r3, #4]
 800fd00:	2303      	movs	r3, #3
 800fd02:	439e      	bics	r6, r3
 800fd04:	9b03      	ldr	r3, [sp, #12]
 800fd06:	18f6      	adds	r6, r6, r3
 800fd08:	e6fb      	b.n	800fb02 <_realloc_r+0xca>
 800fd0a:	9a03      	ldr	r2, [sp, #12]
 800fd0c:	3a04      	subs	r2, #4
 800fd0e:	2a24      	cmp	r2, #36	; 0x24
 800fd10:	d829      	bhi.n	800fd66 <_realloc_r+0x32e>
 800fd12:	0003      	movs	r3, r0
 800fd14:	0021      	movs	r1, r4
 800fd16:	2a13      	cmp	r2, #19
 800fd18:	d908      	bls.n	800fd2c <_realloc_r+0x2f4>
 800fd1a:	6823      	ldr	r3, [r4, #0]
 800fd1c:	6003      	str	r3, [r0, #0]
 800fd1e:	6863      	ldr	r3, [r4, #4]
 800fd20:	6043      	str	r3, [r0, #4]
 800fd22:	2a1b      	cmp	r2, #27
 800fd24:	d80d      	bhi.n	800fd42 <_realloc_r+0x30a>
 800fd26:	0003      	movs	r3, r0
 800fd28:	3108      	adds	r1, #8
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	680a      	ldr	r2, [r1, #0]
 800fd2e:	601a      	str	r2, [r3, #0]
 800fd30:	684a      	ldr	r2, [r1, #4]
 800fd32:	605a      	str	r2, [r3, #4]
 800fd34:	688a      	ldr	r2, [r1, #8]
 800fd36:	609a      	str	r2, [r3, #8]
 800fd38:	0021      	movs	r1, r4
 800fd3a:	9801      	ldr	r0, [sp, #4]
 800fd3c:	f7fb f89e 	bl	800ae7c <_free_r>
 800fd40:	e742      	b.n	800fbc8 <_realloc_r+0x190>
 800fd42:	68a3      	ldr	r3, [r4, #8]
 800fd44:	6083      	str	r3, [r0, #8]
 800fd46:	68e3      	ldr	r3, [r4, #12]
 800fd48:	60c3      	str	r3, [r0, #12]
 800fd4a:	2a24      	cmp	r2, #36	; 0x24
 800fd4c:	d003      	beq.n	800fd56 <_realloc_r+0x31e>
 800fd4e:	0003      	movs	r3, r0
 800fd50:	3110      	adds	r1, #16
 800fd52:	3310      	adds	r3, #16
 800fd54:	e7ea      	b.n	800fd2c <_realloc_r+0x2f4>
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	3118      	adds	r1, #24
 800fd5a:	6103      	str	r3, [r0, #16]
 800fd5c:	0003      	movs	r3, r0
 800fd5e:	6962      	ldr	r2, [r4, #20]
 800fd60:	3318      	adds	r3, #24
 800fd62:	6142      	str	r2, [r0, #20]
 800fd64:	e7e2      	b.n	800fd2c <_realloc_r+0x2f4>
 800fd66:	0021      	movs	r1, r4
 800fd68:	f001 fafd 	bl	8011366 <memmove>
 800fd6c:	e7e4      	b.n	800fd38 <_realloc_r+0x300>
 800fd6e:	9e03      	ldr	r6, [sp, #12]
 800fd70:	e6c7      	b.n	800fb02 <_realloc_r+0xca>
 800fd72:	9902      	ldr	r1, [sp, #8]
 800fd74:	4306      	orrs	r6, r0
 800fd76:	604e      	str	r6, [r1, #4]
 800fd78:	6851      	ldr	r1, [r2, #4]
 800fd7a:	430b      	orrs	r3, r1
 800fd7c:	6053      	str	r3, [r2, #4]
 800fd7e:	e6da      	b.n	800fb36 <_realloc_r+0xfe>
 800fd80:	20000038 	.word	0x20000038

0800fd84 <_strtoul_l.constprop.0>:
 800fd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd86:	b087      	sub	sp, #28
 800fd88:	9202      	str	r2, [sp, #8]
 800fd8a:	4a3e      	ldr	r2, [pc, #248]	; (800fe84 <_strtoul_l.constprop.0+0x100>)
 800fd8c:	001e      	movs	r6, r3
 800fd8e:	9101      	str	r1, [sp, #4]
 800fd90:	000b      	movs	r3, r1
 800fd92:	4694      	mov	ip, r2
 800fd94:	2108      	movs	r1, #8
 800fd96:	9005      	str	r0, [sp, #20]
 800fd98:	001a      	movs	r2, r3
 800fd9a:	4660      	mov	r0, ip
 800fd9c:	7814      	ldrb	r4, [r2, #0]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	5d00      	ldrb	r0, [r0, r4]
 800fda2:	001d      	movs	r5, r3
 800fda4:	0007      	movs	r7, r0
 800fda6:	400f      	ands	r7, r1
 800fda8:	4208      	tst	r0, r1
 800fdaa:	d1f5      	bne.n	800fd98 <_strtoul_l.constprop.0+0x14>
 800fdac:	2c2d      	cmp	r4, #45	; 0x2d
 800fdae:	d13d      	bne.n	800fe2c <_strtoul_l.constprop.0+0xa8>
 800fdb0:	2701      	movs	r7, #1
 800fdb2:	781c      	ldrb	r4, [r3, #0]
 800fdb4:	1c95      	adds	r5, r2, #2
 800fdb6:	2e00      	cmp	r6, #0
 800fdb8:	d05f      	beq.n	800fe7a <_strtoul_l.constprop.0+0xf6>
 800fdba:	2e10      	cmp	r6, #16
 800fdbc:	d109      	bne.n	800fdd2 <_strtoul_l.constprop.0+0x4e>
 800fdbe:	2c30      	cmp	r4, #48	; 0x30
 800fdc0:	d107      	bne.n	800fdd2 <_strtoul_l.constprop.0+0x4e>
 800fdc2:	2220      	movs	r2, #32
 800fdc4:	782b      	ldrb	r3, [r5, #0]
 800fdc6:	4393      	bics	r3, r2
 800fdc8:	2b58      	cmp	r3, #88	; 0x58
 800fdca:	d151      	bne.n	800fe70 <_strtoul_l.constprop.0+0xec>
 800fdcc:	2610      	movs	r6, #16
 800fdce:	786c      	ldrb	r4, [r5, #1]
 800fdd0:	3502      	adds	r5, #2
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	0031      	movs	r1, r6
 800fdd6:	4240      	negs	r0, r0
 800fdd8:	f7f0 f9b0 	bl	800013c <__udivsi3>
 800fddc:	9003      	str	r0, [sp, #12]
 800fdde:	2001      	movs	r0, #1
 800fde0:	0031      	movs	r1, r6
 800fde2:	4240      	negs	r0, r0
 800fde4:	f7f0 fa30 	bl	8000248 <__aeabi_uidivmod>
 800fde8:	2300      	movs	r3, #0
 800fdea:	2201      	movs	r2, #1
 800fdec:	9104      	str	r1, [sp, #16]
 800fdee:	2101      	movs	r1, #1
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	4694      	mov	ip, r2
 800fdf4:	4249      	negs	r1, r1
 800fdf6:	0022      	movs	r2, r4
 800fdf8:	3a30      	subs	r2, #48	; 0x30
 800fdfa:	2a09      	cmp	r2, #9
 800fdfc:	d903      	bls.n	800fe06 <_strtoul_l.constprop.0+0x82>
 800fdfe:	3a11      	subs	r2, #17
 800fe00:	2a19      	cmp	r2, #25
 800fe02:	d818      	bhi.n	800fe36 <_strtoul_l.constprop.0+0xb2>
 800fe04:	320a      	adds	r2, #10
 800fe06:	4296      	cmp	r6, r2
 800fe08:	dd19      	ble.n	800fe3e <_strtoul_l.constprop.0+0xba>
 800fe0a:	1c5c      	adds	r4, r3, #1
 800fe0c:	d00b      	beq.n	800fe26 <_strtoul_l.constprop.0+0xa2>
 800fe0e:	9c03      	ldr	r4, [sp, #12]
 800fe10:	000b      	movs	r3, r1
 800fe12:	4284      	cmp	r4, r0
 800fe14:	d307      	bcc.n	800fe26 <_strtoul_l.constprop.0+0xa2>
 800fe16:	d103      	bne.n	800fe20 <_strtoul_l.constprop.0+0x9c>
 800fe18:	9c04      	ldr	r4, [sp, #16]
 800fe1a:	000b      	movs	r3, r1
 800fe1c:	4294      	cmp	r4, r2
 800fe1e:	db02      	blt.n	800fe26 <_strtoul_l.constprop.0+0xa2>
 800fe20:	4663      	mov	r3, ip
 800fe22:	4370      	muls	r0, r6
 800fe24:	1810      	adds	r0, r2, r0
 800fe26:	782c      	ldrb	r4, [r5, #0]
 800fe28:	3501      	adds	r5, #1
 800fe2a:	e7e4      	b.n	800fdf6 <_strtoul_l.constprop.0+0x72>
 800fe2c:	2c2b      	cmp	r4, #43	; 0x2b
 800fe2e:	d1c2      	bne.n	800fdb6 <_strtoul_l.constprop.0+0x32>
 800fe30:	781c      	ldrb	r4, [r3, #0]
 800fe32:	1c95      	adds	r5, r2, #2
 800fe34:	e7bf      	b.n	800fdb6 <_strtoul_l.constprop.0+0x32>
 800fe36:	0022      	movs	r2, r4
 800fe38:	3a61      	subs	r2, #97	; 0x61
 800fe3a:	2a19      	cmp	r2, #25
 800fe3c:	d9e2      	bls.n	800fe04 <_strtoul_l.constprop.0+0x80>
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	d108      	bne.n	800fe54 <_strtoul_l.constprop.0+0xd0>
 800fe42:	2222      	movs	r2, #34	; 0x22
 800fe44:	9905      	ldr	r1, [sp, #20]
 800fe46:	0018      	movs	r0, r3
 800fe48:	600a      	str	r2, [r1, #0]
 800fe4a:	9a02      	ldr	r2, [sp, #8]
 800fe4c:	2a00      	cmp	r2, #0
 800fe4e:	d109      	bne.n	800fe64 <_strtoul_l.constprop.0+0xe0>
 800fe50:	b007      	add	sp, #28
 800fe52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe54:	2f00      	cmp	r7, #0
 800fe56:	d000      	beq.n	800fe5a <_strtoul_l.constprop.0+0xd6>
 800fe58:	4240      	negs	r0, r0
 800fe5a:	9a02      	ldr	r2, [sp, #8]
 800fe5c:	2a00      	cmp	r2, #0
 800fe5e:	d0f7      	beq.n	800fe50 <_strtoul_l.constprop.0+0xcc>
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <_strtoul_l.constprop.0+0xe4>
 800fe64:	1e6b      	subs	r3, r5, #1
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	9b02      	ldr	r3, [sp, #8]
 800fe6a:	9a01      	ldr	r2, [sp, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e7ef      	b.n	800fe50 <_strtoul_l.constprop.0+0xcc>
 800fe70:	2430      	movs	r4, #48	; 0x30
 800fe72:	2e00      	cmp	r6, #0
 800fe74:	d1ad      	bne.n	800fdd2 <_strtoul_l.constprop.0+0x4e>
 800fe76:	3608      	adds	r6, #8
 800fe78:	e7ab      	b.n	800fdd2 <_strtoul_l.constprop.0+0x4e>
 800fe7a:	2c30      	cmp	r4, #48	; 0x30
 800fe7c:	d0a1      	beq.n	800fdc2 <_strtoul_l.constprop.0+0x3e>
 800fe7e:	260a      	movs	r6, #10
 800fe80:	e7a7      	b.n	800fdd2 <_strtoul_l.constprop.0+0x4e>
 800fe82:	46c0      	nop			; (mov r8, r8)
 800fe84:	08012f81 	.word	0x08012f81

0800fe88 <_strtoul_r>:
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	f7ff ff7b 	bl	800fd84 <_strtoul_l.constprop.0>
 800fe8e:	bd10      	pop	{r4, pc}

0800fe90 <_strtoll_l.constprop.0>:
 800fe90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe92:	b08d      	sub	sp, #52	; 0x34
 800fe94:	9203      	str	r2, [sp, #12]
 800fe96:	4a53      	ldr	r2, [pc, #332]	; (800ffe4 <_strtoll_l.constprop.0+0x154>)
 800fe98:	001e      	movs	r6, r3
 800fe9a:	9102      	str	r1, [sp, #8]
 800fe9c:	000b      	movs	r3, r1
 800fe9e:	4694      	mov	ip, r2
 800fea0:	2108      	movs	r1, #8
 800fea2:	900a      	str	r0, [sp, #40]	; 0x28
 800fea4:	001a      	movs	r2, r3
 800fea6:	4660      	mov	r0, ip
 800fea8:	7814      	ldrb	r4, [r2, #0]
 800feaa:	3301      	adds	r3, #1
 800feac:	5d00      	ldrb	r0, [r0, r4]
 800feae:	001d      	movs	r5, r3
 800feb0:	0007      	movs	r7, r0
 800feb2:	400f      	ands	r7, r1
 800feb4:	4208      	tst	r0, r1
 800feb6:	d1f5      	bne.n	800fea4 <_strtoll_l.constprop.0+0x14>
 800feb8:	2c2d      	cmp	r4, #45	; 0x2d
 800feba:	d153      	bne.n	800ff64 <_strtoll_l.constprop.0+0xd4>
 800febc:	781c      	ldrb	r4, [r3, #0]
 800febe:	2301      	movs	r3, #1
 800fec0:	1c95      	adds	r5, r2, #2
 800fec2:	9301      	str	r3, [sp, #4]
 800fec4:	2e00      	cmp	r6, #0
 800fec6:	d100      	bne.n	800feca <_strtoll_l.constprop.0+0x3a>
 800fec8:	e086      	b.n	800ffd8 <_strtoll_l.constprop.0+0x148>
 800feca:	2e10      	cmp	r6, #16
 800fecc:	d10a      	bne.n	800fee4 <_strtoll_l.constprop.0+0x54>
 800fece:	2c30      	cmp	r4, #48	; 0x30
 800fed0:	d108      	bne.n	800fee4 <_strtoll_l.constprop.0+0x54>
 800fed2:	2220      	movs	r2, #32
 800fed4:	782b      	ldrb	r3, [r5, #0]
 800fed6:	4393      	bics	r3, r2
 800fed8:	2b58      	cmp	r3, #88	; 0x58
 800feda:	d000      	beq.n	800fede <_strtoll_l.constprop.0+0x4e>
 800fedc:	e076      	b.n	800ffcc <_strtoll_l.constprop.0+0x13c>
 800fede:	2610      	movs	r6, #16
 800fee0:	786c      	ldrb	r4, [r5, #1]
 800fee2:	3502      	adds	r5, #2
 800fee4:	2001      	movs	r0, #1
 800fee6:	2300      	movs	r3, #0
 800fee8:	493f      	ldr	r1, [pc, #252]	; (800ffe8 <_strtoll_l.constprop.0+0x158>)
 800feea:	9a01      	ldr	r2, [sp, #4]
 800feec:	4240      	negs	r0, r0
 800feee:	1812      	adds	r2, r2, r0
 800fef0:	414b      	adcs	r3, r1
 800fef2:	9204      	str	r2, [sp, #16]
 800fef4:	9305      	str	r3, [sp, #20]
 800fef6:	9804      	ldr	r0, [sp, #16]
 800fef8:	9905      	ldr	r1, [sp, #20]
 800fefa:	17f3      	asrs	r3, r6, #31
 800fefc:	0032      	movs	r2, r6
 800fefe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff00:	f7f0 fad0 	bl	80004a4 <__aeabi_uldivmod>
 800ff04:	2300      	movs	r3, #0
 800ff06:	000f      	movs	r7, r1
 800ff08:	9008      	str	r0, [sp, #32]
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff10:	0022      	movs	r2, r4
 800ff12:	3a30      	subs	r2, #48	; 0x30
 800ff14:	2a09      	cmp	r2, #9
 800ff16:	d82b      	bhi.n	800ff70 <_strtoll_l.constprop.0+0xe0>
 800ff18:	0014      	movs	r4, r2
 800ff1a:	42a6      	cmp	r6, r4
 800ff1c:	dd37      	ble.n	800ff8e <_strtoll_l.constprop.0+0xfe>
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	d01d      	beq.n	800ff5e <_strtoll_l.constprop.0+0xce>
 800ff22:	42b9      	cmp	r1, r7
 800ff24:	d830      	bhi.n	800ff88 <_strtoll_l.constprop.0+0xf8>
 800ff26:	d102      	bne.n	800ff2e <_strtoll_l.constprop.0+0x9e>
 800ff28:	9b08      	ldr	r3, [sp, #32]
 800ff2a:	4298      	cmp	r0, r3
 800ff2c:	d82c      	bhi.n	800ff88 <_strtoll_l.constprop.0+0xf8>
 800ff2e:	9b08      	ldr	r3, [sp, #32]
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d106      	bne.n	800ff42 <_strtoll_l.constprop.0+0xb2>
 800ff34:	428f      	cmp	r7, r1
 800ff36:	d104      	bne.n	800ff42 <_strtoll_l.constprop.0+0xb2>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff3c:	425b      	negs	r3, r3
 800ff3e:	42a2      	cmp	r2, r4
 800ff40:	db0d      	blt.n	800ff5e <_strtoll_l.constprop.0+0xce>
 800ff42:	000b      	movs	r3, r1
 800ff44:	0002      	movs	r2, r0
 800ff46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff48:	0030      	movs	r0, r6
 800ff4a:	f7f0 facb 	bl	80004e4 <__aeabi_lmul>
 800ff4e:	17e3      	asrs	r3, r4, #31
 800ff50:	9406      	str	r4, [sp, #24]
 800ff52:	9307      	str	r3, [sp, #28]
 800ff54:	9b06      	ldr	r3, [sp, #24]
 800ff56:	9c07      	ldr	r4, [sp, #28]
 800ff58:	18c0      	adds	r0, r0, r3
 800ff5a:	4161      	adcs	r1, r4
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	782c      	ldrb	r4, [r5, #0]
 800ff60:	3501      	adds	r5, #1
 800ff62:	e7d5      	b.n	800ff10 <_strtoll_l.constprop.0+0x80>
 800ff64:	9701      	str	r7, [sp, #4]
 800ff66:	2c2b      	cmp	r4, #43	; 0x2b
 800ff68:	d1ac      	bne.n	800fec4 <_strtoll_l.constprop.0+0x34>
 800ff6a:	781c      	ldrb	r4, [r3, #0]
 800ff6c:	1c95      	adds	r5, r2, #2
 800ff6e:	e7a9      	b.n	800fec4 <_strtoll_l.constprop.0+0x34>
 800ff70:	0022      	movs	r2, r4
 800ff72:	3a41      	subs	r2, #65	; 0x41
 800ff74:	2a19      	cmp	r2, #25
 800ff76:	d801      	bhi.n	800ff7c <_strtoll_l.constprop.0+0xec>
 800ff78:	3c37      	subs	r4, #55	; 0x37
 800ff7a:	e7ce      	b.n	800ff1a <_strtoll_l.constprop.0+0x8a>
 800ff7c:	0022      	movs	r2, r4
 800ff7e:	3a61      	subs	r2, #97	; 0x61
 800ff80:	2a19      	cmp	r2, #25
 800ff82:	d804      	bhi.n	800ff8e <_strtoll_l.constprop.0+0xfe>
 800ff84:	3c57      	subs	r4, #87	; 0x57
 800ff86:	e7c8      	b.n	800ff1a <_strtoll_l.constprop.0+0x8a>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	425b      	negs	r3, r3
 800ff8c:	e7e7      	b.n	800ff5e <_strtoll_l.constprop.0+0xce>
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	d109      	bne.n	800ffa6 <_strtoll_l.constprop.0+0x116>
 800ff92:	9804      	ldr	r0, [sp, #16]
 800ff94:	9905      	ldr	r1, [sp, #20]
 800ff96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff98:	3323      	adds	r3, #35	; 0x23
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	9b03      	ldr	r3, [sp, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10e      	bne.n	800ffc0 <_strtoll_l.constprop.0+0x130>
 800ffa2:	b00d      	add	sp, #52	; 0x34
 800ffa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa6:	9a01      	ldr	r2, [sp, #4]
 800ffa8:	2a00      	cmp	r2, #0
 800ffaa:	d004      	beq.n	800ffb6 <_strtoll_l.constprop.0+0x126>
 800ffac:	0006      	movs	r6, r0
 800ffae:	000f      	movs	r7, r1
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4270      	negs	r0, r6
 800ffb4:	41b9      	sbcs	r1, r7
 800ffb6:	9a03      	ldr	r2, [sp, #12]
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	d0f2      	beq.n	800ffa2 <_strtoll_l.constprop.0+0x112>
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d001      	beq.n	800ffc4 <_strtoll_l.constprop.0+0x134>
 800ffc0:	1e6b      	subs	r3, r5, #1
 800ffc2:	9302      	str	r3, [sp, #8]
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	9a02      	ldr	r2, [sp, #8]
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	e7ea      	b.n	800ffa2 <_strtoll_l.constprop.0+0x112>
 800ffcc:	2430      	movs	r4, #48	; 0x30
 800ffce:	2e00      	cmp	r6, #0
 800ffd0:	d000      	beq.n	800ffd4 <_strtoll_l.constprop.0+0x144>
 800ffd2:	e787      	b.n	800fee4 <_strtoll_l.constprop.0+0x54>
 800ffd4:	3608      	adds	r6, #8
 800ffd6:	e785      	b.n	800fee4 <_strtoll_l.constprop.0+0x54>
 800ffd8:	2c30      	cmp	r4, #48	; 0x30
 800ffda:	d100      	bne.n	800ffde <_strtoll_l.constprop.0+0x14e>
 800ffdc:	e779      	b.n	800fed2 <_strtoll_l.constprop.0+0x42>
 800ffde:	260a      	movs	r6, #10
 800ffe0:	e780      	b.n	800fee4 <_strtoll_l.constprop.0+0x54>
 800ffe2:	46c0      	nop			; (mov r8, r8)
 800ffe4:	08012f81 	.word	0x08012f81
 800ffe8:	7fffffff 	.word	0x7fffffff

0800ffec <_strtoll_r>:
 800ffec:	b510      	push	{r4, lr}
 800ffee:	f7ff ff4f 	bl	800fe90 <_strtoll_l.constprop.0>
 800fff2:	bd10      	pop	{r4, pc}

0800fff4 <_strtoull_l.constprop.0>:
 800fff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff6:	b08b      	sub	sp, #44	; 0x2c
 800fff8:	9202      	str	r2, [sp, #8]
 800fffa:	4a54      	ldr	r2, [pc, #336]	; (801014c <_strtoull_l.constprop.0+0x158>)
 800fffc:	001e      	movs	r6, r3
 800fffe:	9101      	str	r1, [sp, #4]
 8010000:	000b      	movs	r3, r1
 8010002:	4694      	mov	ip, r2
 8010004:	2108      	movs	r1, #8
 8010006:	9009      	str	r0, [sp, #36]	; 0x24
 8010008:	001a      	movs	r2, r3
 801000a:	4660      	mov	r0, ip
 801000c:	7814      	ldrb	r4, [r2, #0]
 801000e:	3301      	adds	r3, #1
 8010010:	5d00      	ldrb	r0, [r0, r4]
 8010012:	001d      	movs	r5, r3
 8010014:	0007      	movs	r7, r0
 8010016:	400f      	ands	r7, r1
 8010018:	4208      	tst	r0, r1
 801001a:	d1f5      	bne.n	8010008 <_strtoull_l.constprop.0+0x14>
 801001c:	2c2d      	cmp	r4, #45	; 0x2d
 801001e:	d154      	bne.n	80100ca <_strtoull_l.constprop.0+0xd6>
 8010020:	781c      	ldrb	r4, [r3, #0]
 8010022:	2301      	movs	r3, #1
 8010024:	1c95      	adds	r5, r2, #2
 8010026:	9306      	str	r3, [sp, #24]
 8010028:	2e00      	cmp	r6, #0
 801002a:	d100      	bne.n	801002e <_strtoull_l.constprop.0+0x3a>
 801002c:	e088      	b.n	8010140 <_strtoull_l.constprop.0+0x14c>
 801002e:	2e10      	cmp	r6, #16
 8010030:	d10a      	bne.n	8010048 <_strtoull_l.constprop.0+0x54>
 8010032:	2c30      	cmp	r4, #48	; 0x30
 8010034:	d108      	bne.n	8010048 <_strtoull_l.constprop.0+0x54>
 8010036:	2220      	movs	r2, #32
 8010038:	782b      	ldrb	r3, [r5, #0]
 801003a:	4393      	bics	r3, r2
 801003c:	2b58      	cmp	r3, #88	; 0x58
 801003e:	d000      	beq.n	8010042 <_strtoull_l.constprop.0+0x4e>
 8010040:	e078      	b.n	8010134 <_strtoull_l.constprop.0+0x140>
 8010042:	2610      	movs	r6, #16
 8010044:	786c      	ldrb	r4, [r5, #1]
 8010046:	3502      	adds	r5, #2
 8010048:	17f7      	asrs	r7, r6, #31
 801004a:	0032      	movs	r2, r6
 801004c:	003b      	movs	r3, r7
 801004e:	2001      	movs	r0, #1
 8010050:	4240      	negs	r0, r0
 8010052:	17c1      	asrs	r1, r0, #31
 8010054:	f7f0 fa26 	bl	80004a4 <__aeabi_uldivmod>
 8010058:	0032      	movs	r2, r6
 801005a:	9007      	str	r0, [sp, #28]
 801005c:	9103      	str	r1, [sp, #12]
 801005e:	003b      	movs	r3, r7
 8010060:	2001      	movs	r0, #1
 8010062:	4240      	negs	r0, r0
 8010064:	17c1      	asrs	r1, r0, #31
 8010066:	f7f0 fa1d 	bl	80004a4 <__aeabi_uldivmod>
 801006a:	2300      	movs	r3, #0
 801006c:	2000      	movs	r0, #0
 801006e:	2100      	movs	r1, #0
 8010070:	9208      	str	r2, [sp, #32]
 8010072:	0022      	movs	r2, r4
 8010074:	3a30      	subs	r2, #48	; 0x30
 8010076:	2a09      	cmp	r2, #9
 8010078:	d82d      	bhi.n	80100d6 <_strtoull_l.constprop.0+0xe2>
 801007a:	0014      	movs	r4, r2
 801007c:	42a6      	cmp	r6, r4
 801007e:	dd39      	ble.n	80100f4 <_strtoull_l.constprop.0+0x100>
 8010080:	1c5a      	adds	r2, r3, #1
 8010082:	d01f      	beq.n	80100c4 <_strtoull_l.constprop.0+0xd0>
 8010084:	9b03      	ldr	r3, [sp, #12]
 8010086:	4299      	cmp	r1, r3
 8010088:	d831      	bhi.n	80100ee <_strtoull_l.constprop.0+0xfa>
 801008a:	d102      	bne.n	8010092 <_strtoull_l.constprop.0+0x9e>
 801008c:	9b07      	ldr	r3, [sp, #28]
 801008e:	4298      	cmp	r0, r3
 8010090:	d82d      	bhi.n	80100ee <_strtoull_l.constprop.0+0xfa>
 8010092:	9b07      	ldr	r3, [sp, #28]
 8010094:	4283      	cmp	r3, r0
 8010096:	d107      	bne.n	80100a8 <_strtoull_l.constprop.0+0xb4>
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	428b      	cmp	r3, r1
 801009c:	d104      	bne.n	80100a8 <_strtoull_l.constprop.0+0xb4>
 801009e:	2301      	movs	r3, #1
 80100a0:	9a08      	ldr	r2, [sp, #32]
 80100a2:	425b      	negs	r3, r3
 80100a4:	42a2      	cmp	r2, r4
 80100a6:	db0d      	blt.n	80100c4 <_strtoull_l.constprop.0+0xd0>
 80100a8:	000b      	movs	r3, r1
 80100aa:	0002      	movs	r2, r0
 80100ac:	0039      	movs	r1, r7
 80100ae:	0030      	movs	r0, r6
 80100b0:	f7f0 fa18 	bl	80004e4 <__aeabi_lmul>
 80100b4:	17e3      	asrs	r3, r4, #31
 80100b6:	9404      	str	r4, [sp, #16]
 80100b8:	9305      	str	r3, [sp, #20]
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	9c05      	ldr	r4, [sp, #20]
 80100be:	18c0      	adds	r0, r0, r3
 80100c0:	4161      	adcs	r1, r4
 80100c2:	2301      	movs	r3, #1
 80100c4:	782c      	ldrb	r4, [r5, #0]
 80100c6:	3501      	adds	r5, #1
 80100c8:	e7d3      	b.n	8010072 <_strtoull_l.constprop.0+0x7e>
 80100ca:	9706      	str	r7, [sp, #24]
 80100cc:	2c2b      	cmp	r4, #43	; 0x2b
 80100ce:	d1ab      	bne.n	8010028 <_strtoull_l.constprop.0+0x34>
 80100d0:	781c      	ldrb	r4, [r3, #0]
 80100d2:	1c95      	adds	r5, r2, #2
 80100d4:	e7a8      	b.n	8010028 <_strtoull_l.constprop.0+0x34>
 80100d6:	0022      	movs	r2, r4
 80100d8:	3a41      	subs	r2, #65	; 0x41
 80100da:	2a19      	cmp	r2, #25
 80100dc:	d801      	bhi.n	80100e2 <_strtoull_l.constprop.0+0xee>
 80100de:	3c37      	subs	r4, #55	; 0x37
 80100e0:	e7cc      	b.n	801007c <_strtoull_l.constprop.0+0x88>
 80100e2:	0022      	movs	r2, r4
 80100e4:	3a61      	subs	r2, #97	; 0x61
 80100e6:	2a19      	cmp	r2, #25
 80100e8:	d804      	bhi.n	80100f4 <_strtoull_l.constprop.0+0x100>
 80100ea:	3c57      	subs	r4, #87	; 0x57
 80100ec:	e7c6      	b.n	801007c <_strtoull_l.constprop.0+0x88>
 80100ee:	2301      	movs	r3, #1
 80100f0:	425b      	negs	r3, r3
 80100f2:	e7e7      	b.n	80100c4 <_strtoull_l.constprop.0+0xd0>
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	d10a      	bne.n	801010e <_strtoull_l.constprop.0+0x11a>
 80100f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100fa:	3323      	adds	r3, #35	; 0x23
 80100fc:	6013      	str	r3, [r2, #0]
 80100fe:	9b02      	ldr	r3, [sp, #8]
 8010100:	2001      	movs	r0, #1
 8010102:	4240      	negs	r0, r0
 8010104:	17c1      	asrs	r1, r0, #31
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10e      	bne.n	8010128 <_strtoull_l.constprop.0+0x134>
 801010a:	b00b      	add	sp, #44	; 0x2c
 801010c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801010e:	9a06      	ldr	r2, [sp, #24]
 8010110:	2a00      	cmp	r2, #0
 8010112:	d004      	beq.n	801011e <_strtoull_l.constprop.0+0x12a>
 8010114:	0006      	movs	r6, r0
 8010116:	000f      	movs	r7, r1
 8010118:	2100      	movs	r1, #0
 801011a:	4270      	negs	r0, r6
 801011c:	41b9      	sbcs	r1, r7
 801011e:	9a02      	ldr	r2, [sp, #8]
 8010120:	2a00      	cmp	r2, #0
 8010122:	d0f2      	beq.n	801010a <_strtoull_l.constprop.0+0x116>
 8010124:	2b00      	cmp	r3, #0
 8010126:	d001      	beq.n	801012c <_strtoull_l.constprop.0+0x138>
 8010128:	1e6b      	subs	r3, r5, #1
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	9b02      	ldr	r3, [sp, #8]
 801012e:	9a01      	ldr	r2, [sp, #4]
 8010130:	601a      	str	r2, [r3, #0]
 8010132:	e7ea      	b.n	801010a <_strtoull_l.constprop.0+0x116>
 8010134:	2430      	movs	r4, #48	; 0x30
 8010136:	2e00      	cmp	r6, #0
 8010138:	d000      	beq.n	801013c <_strtoull_l.constprop.0+0x148>
 801013a:	e785      	b.n	8010048 <_strtoull_l.constprop.0+0x54>
 801013c:	3608      	adds	r6, #8
 801013e:	e783      	b.n	8010048 <_strtoull_l.constprop.0+0x54>
 8010140:	2c30      	cmp	r4, #48	; 0x30
 8010142:	d100      	bne.n	8010146 <_strtoull_l.constprop.0+0x152>
 8010144:	e777      	b.n	8010036 <_strtoull_l.constprop.0+0x42>
 8010146:	260a      	movs	r6, #10
 8010148:	e77e      	b.n	8010048 <_strtoull_l.constprop.0+0x54>
 801014a:	46c0      	nop			; (mov r8, r8)
 801014c:	08012f81 	.word	0x08012f81

08010150 <_strtoull_r>:
 8010150:	b510      	push	{r4, lr}
 8010152:	f7ff ff4f 	bl	800fff4 <_strtoull_l.constprop.0>
 8010156:	bd10      	pop	{r4, pc}

08010158 <_mbrtowc_r>:
 8010158:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801015a:	0004      	movs	r4, r0
 801015c:	0010      	movs	r0, r2
 801015e:	4a0b      	ldr	r2, [pc, #44]	; (801018c <_mbrtowc_r+0x34>)
 8010160:	9d06      	ldr	r5, [sp, #24]
 8010162:	32e4      	adds	r2, #228	; 0xe4
 8010164:	6816      	ldr	r6, [r2, #0]
 8010166:	2800      	cmp	r0, #0
 8010168:	d10c      	bne.n	8010184 <_mbrtowc_r+0x2c>
 801016a:	2301      	movs	r3, #1
 801016c:	0001      	movs	r1, r0
 801016e:	4a08      	ldr	r2, [pc, #32]	; (8010190 <_mbrtowc_r+0x38>)
 8010170:	9500      	str	r5, [sp, #0]
 8010172:	0020      	movs	r0, r4
 8010174:	47b0      	blx	r6
 8010176:	1c43      	adds	r3, r0, #1
 8010178:	d103      	bne.n	8010182 <_mbrtowc_r+0x2a>
 801017a:	2300      	movs	r3, #0
 801017c:	602b      	str	r3, [r5, #0]
 801017e:	338a      	adds	r3, #138	; 0x8a
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010184:	0002      	movs	r2, r0
 8010186:	9500      	str	r5, [sp, #0]
 8010188:	e7f3      	b.n	8010172 <_mbrtowc_r+0x1a>
 801018a:	46c0      	nop			; (mov r8, r8)
 801018c:	20000454 	.word	0x20000454
 8010190:	0801330b 	.word	0x0801330b

08010194 <iswspace>:
 8010194:	b510      	push	{r4, lr}
 8010196:	2100      	movs	r1, #0
 8010198:	f000 f802 	bl	80101a0 <iswspace_l>
 801019c:	bd10      	pop	{r4, pc}
	...

080101a0 <iswspace_l>:
 80101a0:	0003      	movs	r3, r0
 80101a2:	2000      	movs	r0, #0
 80101a4:	2bff      	cmp	r3, #255	; 0xff
 80101a6:	d803      	bhi.n	80101b0 <iswspace_l+0x10>
 80101a8:	4a02      	ldr	r2, [pc, #8]	; (80101b4 <iswspace_l+0x14>)
 80101aa:	5cd0      	ldrb	r0, [r2, r3]
 80101ac:	2308      	movs	r3, #8
 80101ae:	4018      	ands	r0, r3
 80101b0:	4770      	bx	lr
 80101b2:	46c0      	nop			; (mov r8, r8)
 80101b4:	08012f81 	.word	0x08012f81

080101b8 <fiprintf>:
 80101b8:	b40e      	push	{r1, r2, r3}
 80101ba:	b517      	push	{r0, r1, r2, r4, lr}
 80101bc:	4c05      	ldr	r4, [pc, #20]	; (80101d4 <fiprintf+0x1c>)
 80101be:	ab05      	add	r3, sp, #20
 80101c0:	cb04      	ldmia	r3!, {r2}
 80101c2:	0001      	movs	r1, r0
 80101c4:	6820      	ldr	r0, [r4, #0]
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	f000 f954 	bl	8010474 <_vfiprintf_r>
 80101cc:	bc1e      	pop	{r1, r2, r3, r4}
 80101ce:	bc08      	pop	{r3}
 80101d0:	b003      	add	sp, #12
 80101d2:	4718      	bx	r3
 80101d4:	200006e0 	.word	0x200006e0

080101d8 <__ssprint_r>:
 80101d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101da:	6813      	ldr	r3, [r2, #0]
 80101dc:	b087      	sub	sp, #28
 80101de:	0017      	movs	r7, r2
 80101e0:	9303      	str	r3, [sp, #12]
 80101e2:	6893      	ldr	r3, [r2, #8]
 80101e4:	2200      	movs	r2, #0
 80101e6:	000c      	movs	r4, r1
 80101e8:	9005      	str	r0, [sp, #20]
 80101ea:	9202      	str	r2, [sp, #8]
 80101ec:	9201      	str	r2, [sp, #4]
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d10d      	bne.n	801020e <__ssprint_r+0x36>
 80101f2:	2000      	movs	r0, #0
 80101f4:	2300      	movs	r3, #0
 80101f6:	607b      	str	r3, [r7, #4]
 80101f8:	b007      	add	sp, #28
 80101fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fc:	9b03      	ldr	r3, [sp, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	9302      	str	r3, [sp, #8]
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	9301      	str	r3, [sp, #4]
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	3308      	adds	r3, #8
 801020c:	9303      	str	r3, [sp, #12]
 801020e:	9a01      	ldr	r2, [sp, #4]
 8010210:	68a6      	ldr	r6, [r4, #8]
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	2a00      	cmp	r2, #0
 8010216:	d0f1      	beq.n	80101fc <__ssprint_r+0x24>
 8010218:	42b2      	cmp	r2, r6
 801021a:	d32e      	bcc.n	801027a <__ssprint_r+0xa2>
 801021c:	2190      	movs	r1, #144	; 0x90
 801021e:	89a2      	ldrh	r2, [r4, #12]
 8010220:	00c9      	lsls	r1, r1, #3
 8010222:	420a      	tst	r2, r1
 8010224:	d029      	beq.n	801027a <__ssprint_r+0xa2>
 8010226:	2003      	movs	r0, #3
 8010228:	6921      	ldr	r1, [r4, #16]
 801022a:	1a5b      	subs	r3, r3, r1
 801022c:	9304      	str	r3, [sp, #16]
 801022e:	6963      	ldr	r3, [r4, #20]
 8010230:	4343      	muls	r3, r0
 8010232:	0fdd      	lsrs	r5, r3, #31
 8010234:	18ed      	adds	r5, r5, r3
 8010236:	9b04      	ldr	r3, [sp, #16]
 8010238:	9801      	ldr	r0, [sp, #4]
 801023a:	3301      	adds	r3, #1
 801023c:	181b      	adds	r3, r3, r0
 801023e:	106d      	asrs	r5, r5, #1
 8010240:	42ab      	cmp	r3, r5
 8010242:	d900      	bls.n	8010246 <__ssprint_r+0x6e>
 8010244:	001d      	movs	r5, r3
 8010246:	0552      	lsls	r2, r2, #21
 8010248:	d532      	bpl.n	80102b0 <__ssprint_r+0xd8>
 801024a:	0029      	movs	r1, r5
 801024c:	9805      	ldr	r0, [sp, #20]
 801024e:	f7f9 fa35 	bl	80096bc <_malloc_r>
 8010252:	1e06      	subs	r6, r0, #0
 8010254:	d036      	beq.n	80102c4 <__ssprint_r+0xec>
 8010256:	9a04      	ldr	r2, [sp, #16]
 8010258:	6921      	ldr	r1, [r4, #16]
 801025a:	f7fa fd94 	bl	800ad86 <memcpy>
 801025e:	89a2      	ldrh	r2, [r4, #12]
 8010260:	4b1e      	ldr	r3, [pc, #120]	; (80102dc <__ssprint_r+0x104>)
 8010262:	401a      	ands	r2, r3
 8010264:	2380      	movs	r3, #128	; 0x80
 8010266:	4313      	orrs	r3, r2
 8010268:	81a3      	strh	r3, [r4, #12]
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	6126      	str	r6, [r4, #16]
 801026e:	18f6      	adds	r6, r6, r3
 8010270:	6026      	str	r6, [r4, #0]
 8010272:	6165      	str	r5, [r4, #20]
 8010274:	9e01      	ldr	r6, [sp, #4]
 8010276:	1aed      	subs	r5, r5, r3
 8010278:	60a5      	str	r5, [r4, #8]
 801027a:	9b01      	ldr	r3, [sp, #4]
 801027c:	429e      	cmp	r6, r3
 801027e:	d900      	bls.n	8010282 <__ssprint_r+0xaa>
 8010280:	001e      	movs	r6, r3
 8010282:	0032      	movs	r2, r6
 8010284:	9902      	ldr	r1, [sp, #8]
 8010286:	6820      	ldr	r0, [r4, #0]
 8010288:	f001 f86d 	bl	8011366 <memmove>
 801028c:	9a01      	ldr	r2, [sp, #4]
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	4694      	mov	ip, r2
 8010292:	1b9b      	subs	r3, r3, r6
 8010294:	60a3      	str	r3, [r4, #8]
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	199b      	adds	r3, r3, r6
 801029a:	6023      	str	r3, [r4, #0]
 801029c:	9b02      	ldr	r3, [sp, #8]
 801029e:	4463      	add	r3, ip
 80102a0:	9302      	str	r3, [sp, #8]
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	60bb      	str	r3, [r7, #8]
 80102a8:	d0a3      	beq.n	80101f2 <__ssprint_r+0x1a>
 80102aa:	2300      	movs	r3, #0
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	e7ae      	b.n	801020e <__ssprint_r+0x36>
 80102b0:	002a      	movs	r2, r5
 80102b2:	9805      	ldr	r0, [sp, #20]
 80102b4:	f7ff fbc0 	bl	800fa38 <_realloc_r>
 80102b8:	1e06      	subs	r6, r0, #0
 80102ba:	d1d6      	bne.n	801026a <__ssprint_r+0x92>
 80102bc:	6921      	ldr	r1, [r4, #16]
 80102be:	9805      	ldr	r0, [sp, #20]
 80102c0:	f7fa fddc 	bl	800ae7c <_free_r>
 80102c4:	230c      	movs	r3, #12
 80102c6:	9a05      	ldr	r2, [sp, #20]
 80102c8:	2001      	movs	r0, #1
 80102ca:	6013      	str	r3, [r2, #0]
 80102cc:	89a2      	ldrh	r2, [r4, #12]
 80102ce:	3334      	adds	r3, #52	; 0x34
 80102d0:	4313      	orrs	r3, r2
 80102d2:	81a3      	strh	r3, [r4, #12]
 80102d4:	2300      	movs	r3, #0
 80102d6:	4240      	negs	r0, r0
 80102d8:	60bb      	str	r3, [r7, #8]
 80102da:	e78b      	b.n	80101f4 <__ssprint_r+0x1c>
 80102dc:	fffffb7f 	.word	0xfffffb7f

080102e0 <_sungetc_r>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	0014      	movs	r4, r2
 80102e4:	1c4b      	adds	r3, r1, #1
 80102e6:	d103      	bne.n	80102f0 <_sungetc_r+0x10>
 80102e8:	2501      	movs	r5, #1
 80102ea:	426d      	negs	r5, r5
 80102ec:	0028      	movs	r0, r5
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
 80102f0:	8993      	ldrh	r3, [r2, #12]
 80102f2:	2220      	movs	r2, #32
 80102f4:	4393      	bics	r3, r2
 80102f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	b2ce      	uxtb	r6, r1
 80102fc:	6863      	ldr	r3, [r4, #4]
 80102fe:	b2cd      	uxtb	r5, r1
 8010300:	2a00      	cmp	r2, #0
 8010302:	d010      	beq.n	8010326 <_sungetc_r+0x46>
 8010304:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010306:	429a      	cmp	r2, r3
 8010308:	dd07      	ble.n	801031a <_sungetc_r+0x3a>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	3b01      	subs	r3, #1
 801030e:	6023      	str	r3, [r4, #0]
 8010310:	701e      	strb	r6, [r3, #0]
 8010312:	6863      	ldr	r3, [r4, #4]
 8010314:	3301      	adds	r3, #1
 8010316:	6063      	str	r3, [r4, #4]
 8010318:	e7e8      	b.n	80102ec <_sungetc_r+0xc>
 801031a:	0021      	movs	r1, r4
 801031c:	f000 ff1a 	bl	8011154 <__submore>
 8010320:	2800      	cmp	r0, #0
 8010322:	d0f2      	beq.n	801030a <_sungetc_r+0x2a>
 8010324:	e7e0      	b.n	80102e8 <_sungetc_r+0x8>
 8010326:	6921      	ldr	r1, [r4, #16]
 8010328:	6822      	ldr	r2, [r4, #0]
 801032a:	2900      	cmp	r1, #0
 801032c:	d007      	beq.n	801033e <_sungetc_r+0x5e>
 801032e:	4291      	cmp	r1, r2
 8010330:	d205      	bcs.n	801033e <_sungetc_r+0x5e>
 8010332:	1e51      	subs	r1, r2, #1
 8010334:	7808      	ldrb	r0, [r1, #0]
 8010336:	42a8      	cmp	r0, r5
 8010338:	d101      	bne.n	801033e <_sungetc_r+0x5e>
 801033a:	6021      	str	r1, [r4, #0]
 801033c:	e7ea      	b.n	8010314 <_sungetc_r+0x34>
 801033e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010340:	0023      	movs	r3, r4
 8010342:	3340      	adds	r3, #64	; 0x40
 8010344:	6323      	str	r3, [r4, #48]	; 0x30
 8010346:	2303      	movs	r3, #3
 8010348:	6363      	str	r3, [r4, #52]	; 0x34
 801034a:	0023      	movs	r3, r4
 801034c:	3342      	adds	r3, #66	; 0x42
 801034e:	63a2      	str	r2, [r4, #56]	; 0x38
 8010350:	701e      	strb	r6, [r3, #0]
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	2301      	movs	r3, #1
 8010356:	e7de      	b.n	8010316 <_sungetc_r+0x36>

08010358 <__ssrefill_r>:
 8010358:	b510      	push	{r4, lr}
 801035a:	000c      	movs	r4, r1
 801035c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801035e:	2900      	cmp	r1, #0
 8010360:	d00e      	beq.n	8010380 <__ssrefill_r+0x28>
 8010362:	0023      	movs	r3, r4
 8010364:	3340      	adds	r3, #64	; 0x40
 8010366:	4299      	cmp	r1, r3
 8010368:	d001      	beq.n	801036e <__ssrefill_r+0x16>
 801036a:	f7fa fd87 	bl	800ae7c <_free_r>
 801036e:	2000      	movs	r0, #0
 8010370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010372:	6320      	str	r0, [r4, #48]	; 0x30
 8010374:	6063      	str	r3, [r4, #4]
 8010376:	4283      	cmp	r3, r0
 8010378:	d002      	beq.n	8010380 <__ssrefill_r+0x28>
 801037a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd10      	pop	{r4, pc}
 8010380:	6923      	ldr	r3, [r4, #16]
 8010382:	2001      	movs	r0, #1
 8010384:	6023      	str	r3, [r4, #0]
 8010386:	2300      	movs	r3, #0
 8010388:	89a2      	ldrh	r2, [r4, #12]
 801038a:	6063      	str	r3, [r4, #4]
 801038c:	3320      	adds	r3, #32
 801038e:	4313      	orrs	r3, r2
 8010390:	81a3      	strh	r3, [r4, #12]
 8010392:	4240      	negs	r0, r0
 8010394:	e7f3      	b.n	801037e <__ssrefill_r+0x26>

08010396 <_sfread_r>:
 8010396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010398:	0014      	movs	r4, r2
 801039a:	435c      	muls	r4, r3
 801039c:	b087      	sub	sp, #28
 801039e:	1e26      	subs	r6, r4, #0
 80103a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103a2:	9005      	str	r0, [sp, #20]
 80103a4:	9101      	str	r1, [sp, #4]
 80103a6:	9202      	str	r2, [sp, #8]
 80103a8:	9303      	str	r3, [sp, #12]
 80103aa:	d11e      	bne.n	80103ea <_sfread_r+0x54>
 80103ac:	0020      	movs	r0, r4
 80103ae:	b007      	add	sp, #28
 80103b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b2:	003a      	movs	r2, r7
 80103b4:	9801      	ldr	r0, [sp, #4]
 80103b6:	f7fa fce6 	bl	800ad86 <memcpy>
 80103ba:	682b      	ldr	r3, [r5, #0]
 80103bc:	0029      	movs	r1, r5
 80103be:	19db      	adds	r3, r3, r7
 80103c0:	602b      	str	r3, [r5, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	606b      	str	r3, [r5, #4]
 80103c6:	9b01      	ldr	r3, [sp, #4]
 80103c8:	9805      	ldr	r0, [sp, #20]
 80103ca:	19db      	adds	r3, r3, r7
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	1bf3      	subs	r3, r6, r7
 80103d0:	9304      	str	r3, [sp, #16]
 80103d2:	f7ff ffc1 	bl	8010358 <__ssrefill_r>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d006      	beq.n	80103e8 <_sfread_r+0x52>
 80103da:	193c      	adds	r4, r7, r4
 80103dc:	1ba0      	subs	r0, r4, r6
 80103de:	9902      	ldr	r1, [sp, #8]
 80103e0:	f7ef feac 	bl	800013c <__udivsi3>
 80103e4:	0004      	movs	r4, r0
 80103e6:	e7e1      	b.n	80103ac <_sfread_r+0x16>
 80103e8:	9e04      	ldr	r6, [sp, #16]
 80103ea:	686f      	ldr	r7, [r5, #4]
 80103ec:	6829      	ldr	r1, [r5, #0]
 80103ee:	42b7      	cmp	r7, r6
 80103f0:	d3df      	bcc.n	80103b2 <_sfread_r+0x1c>
 80103f2:	0032      	movs	r2, r6
 80103f4:	9801      	ldr	r0, [sp, #4]
 80103f6:	f7fa fcc6 	bl	800ad86 <memcpy>
 80103fa:	686b      	ldr	r3, [r5, #4]
 80103fc:	9c03      	ldr	r4, [sp, #12]
 80103fe:	1b9b      	subs	r3, r3, r6
 8010400:	606b      	str	r3, [r5, #4]
 8010402:	682b      	ldr	r3, [r5, #0]
 8010404:	199b      	adds	r3, r3, r6
 8010406:	602b      	str	r3, [r5, #0]
 8010408:	e7d0      	b.n	80103ac <_sfread_r+0x16>

0801040a <__sprint_r>:
 801040a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040c:	6893      	ldr	r3, [r2, #8]
 801040e:	b085      	sub	sp, #20
 8010410:	9001      	str	r0, [sp, #4]
 8010412:	000d      	movs	r5, r1
 8010414:	0014      	movs	r4, r2
 8010416:	1e18      	subs	r0, r3, #0
 8010418:	d018      	beq.n	801044c <__sprint_r+0x42>
 801041a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801041c:	049b      	lsls	r3, r3, #18
 801041e:	d524      	bpl.n	801046a <__sprint_r+0x60>
 8010420:	6817      	ldr	r7, [r2, #0]
 8010422:	2600      	movs	r6, #0
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	089b      	lsrs	r3, r3, #2
 801042e:	9303      	str	r3, [sp, #12]
 8010430:	9b03      	ldr	r3, [sp, #12]
 8010432:	42b3      	cmp	r3, r6
 8010434:	dc0e      	bgt.n	8010454 <__sprint_r+0x4a>
 8010436:	2203      	movs	r2, #3
 8010438:	9b00      	ldr	r3, [sp, #0]
 801043a:	68a0      	ldr	r0, [r4, #8]
 801043c:	4393      	bics	r3, r2
 801043e:	1ac0      	subs	r0, r0, r3
 8010440:	60a0      	str	r0, [r4, #8]
 8010442:	3708      	adds	r7, #8
 8010444:	2800      	cmp	r0, #0
 8010446:	d1ec      	bne.n	8010422 <__sprint_r+0x18>
 8010448:	2300      	movs	r3, #0
 801044a:	60a3      	str	r3, [r4, #8]
 801044c:	2300      	movs	r3, #0
 801044e:	6063      	str	r3, [r4, #4]
 8010450:	b005      	add	sp, #20
 8010452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010454:	9902      	ldr	r1, [sp, #8]
 8010456:	00b3      	lsls	r3, r6, #2
 8010458:	58c9      	ldr	r1, [r1, r3]
 801045a:	002a      	movs	r2, r5
 801045c:	9801      	ldr	r0, [sp, #4]
 801045e:	f000 ff59 	bl	8011314 <_fputwc_r>
 8010462:	1c43      	adds	r3, r0, #1
 8010464:	d0f0      	beq.n	8010448 <__sprint_r+0x3e>
 8010466:	3601      	adds	r6, #1
 8010468:	e7e2      	b.n	8010430 <__sprint_r+0x26>
 801046a:	9801      	ldr	r0, [sp, #4]
 801046c:	f000 fd14 	bl	8010e98 <__sfvwrite_r>
 8010470:	e7ea      	b.n	8010448 <__sprint_r+0x3e>
	...

08010474 <_vfiprintf_r>:
 8010474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010476:	b0c1      	sub	sp, #260	; 0x104
 8010478:	001c      	movs	r4, r3
 801047a:	001f      	movs	r7, r3
 801047c:	9006      	str	r0, [sp, #24]
 801047e:	9103      	str	r1, [sp, #12]
 8010480:	9207      	str	r2, [sp, #28]
 8010482:	2800      	cmp	r0, #0
 8010484:	d004      	beq.n	8010490 <_vfiprintf_r+0x1c>
 8010486:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <_vfiprintf_r+0x1c>
 801048c:	f7fa fa98 	bl	800a9c0 <__sinit>
 8010490:	9b03      	ldr	r3, [sp, #12]
 8010492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010494:	07db      	lsls	r3, r3, #31
 8010496:	d407      	bmi.n	80104a8 <_vfiprintf_r+0x34>
 8010498:	9b03      	ldr	r3, [sp, #12]
 801049a:	899b      	ldrh	r3, [r3, #12]
 801049c:	059b      	lsls	r3, r3, #22
 801049e:	d403      	bmi.n	80104a8 <_vfiprintf_r+0x34>
 80104a0:	9b03      	ldr	r3, [sp, #12]
 80104a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80104a4:	f7fa fc62 	bl	800ad6c <__retarget_lock_acquire_recursive>
 80104a8:	9b03      	ldr	r3, [sp, #12]
 80104aa:	220c      	movs	r2, #12
 80104ac:	5e9a      	ldrsh	r2, [r3, r2]
 80104ae:	2380      	movs	r3, #128	; 0x80
 80104b0:	019b      	lsls	r3, r3, #6
 80104b2:	421a      	tst	r2, r3
 80104b4:	d107      	bne.n	80104c6 <_vfiprintf_r+0x52>
 80104b6:	4313      	orrs	r3, r2
 80104b8:	9a03      	ldr	r2, [sp, #12]
 80104ba:	8193      	strh	r3, [r2, #12]
 80104bc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80104be:	4aa3      	ldr	r2, [pc, #652]	; (801074c <_vfiprintf_r+0x2d8>)
 80104c0:	4013      	ands	r3, r2
 80104c2:	9a03      	ldr	r2, [sp, #12]
 80104c4:	6653      	str	r3, [r2, #100]	; 0x64
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	899b      	ldrh	r3, [r3, #12]
 80104ca:	071b      	lsls	r3, r3, #28
 80104cc:	d503      	bpl.n	80104d6 <_vfiprintf_r+0x62>
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d118      	bne.n	8010508 <_vfiprintf_r+0x94>
 80104d6:	9903      	ldr	r1, [sp, #12]
 80104d8:	9806      	ldr	r0, [sp, #24]
 80104da:	f000 fe79 	bl	80111d0 <__swsetup_r>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d012      	beq.n	8010508 <_vfiprintf_r+0x94>
 80104e2:	9b03      	ldr	r3, [sp, #12]
 80104e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104e6:	07db      	lsls	r3, r3, #31
 80104e8:	d505      	bpl.n	80104f6 <_vfiprintf_r+0x82>
 80104ea:	2301      	movs	r3, #1
 80104ec:	425b      	negs	r3, r3
 80104ee:	9308      	str	r3, [sp, #32]
 80104f0:	9808      	ldr	r0, [sp, #32]
 80104f2:	b041      	add	sp, #260	; 0x104
 80104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f6:	9b03      	ldr	r3, [sp, #12]
 80104f8:	899b      	ldrh	r3, [r3, #12]
 80104fa:	059b      	lsls	r3, r3, #22
 80104fc:	d4f5      	bmi.n	80104ea <_vfiprintf_r+0x76>
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010502:	f7fa fc34 	bl	800ad6e <__retarget_lock_release_recursive>
 8010506:	e7f0      	b.n	80104ea <_vfiprintf_r+0x76>
 8010508:	221a      	movs	r2, #26
 801050a:	9b03      	ldr	r3, [sp, #12]
 801050c:	899b      	ldrh	r3, [r3, #12]
 801050e:	401a      	ands	r2, r3
 8010510:	2a0a      	cmp	r2, #10
 8010512:	d116      	bne.n	8010542 <_vfiprintf_r+0xce>
 8010514:	9a03      	ldr	r2, [sp, #12]
 8010516:	210e      	movs	r1, #14
 8010518:	5e52      	ldrsh	r2, [r2, r1]
 801051a:	2a00      	cmp	r2, #0
 801051c:	db11      	blt.n	8010542 <_vfiprintf_r+0xce>
 801051e:	9a03      	ldr	r2, [sp, #12]
 8010520:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010522:	07d2      	lsls	r2, r2, #31
 8010524:	d405      	bmi.n	8010532 <_vfiprintf_r+0xbe>
 8010526:	059b      	lsls	r3, r3, #22
 8010528:	d403      	bmi.n	8010532 <_vfiprintf_r+0xbe>
 801052a:	9b03      	ldr	r3, [sp, #12]
 801052c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801052e:	f7fa fc1e 	bl	800ad6e <__retarget_lock_release_recursive>
 8010532:	0023      	movs	r3, r4
 8010534:	9a07      	ldr	r2, [sp, #28]
 8010536:	9903      	ldr	r1, [sp, #12]
 8010538:	9806      	ldr	r0, [sp, #24]
 801053a:	f000 fc69 	bl	8010e10 <__sbprintf>
 801053e:	9008      	str	r0, [sp, #32]
 8010540:	e7d6      	b.n	80104f0 <_vfiprintf_r+0x7c>
 8010542:	2300      	movs	r3, #0
 8010544:	ad17      	add	r5, sp, #92	; 0x5c
 8010546:	9514      	str	r5, [sp, #80]	; 0x50
 8010548:	9316      	str	r3, [sp, #88]	; 0x58
 801054a:	9315      	str	r3, [sp, #84]	; 0x54
 801054c:	930c      	str	r3, [sp, #48]	; 0x30
 801054e:	930d      	str	r3, [sp, #52]	; 0x34
 8010550:	930e      	str	r3, [sp, #56]	; 0x38
 8010552:	930f      	str	r3, [sp, #60]	; 0x3c
 8010554:	9308      	str	r3, [sp, #32]
 8010556:	9c07      	ldr	r4, [sp, #28]
 8010558:	7823      	ldrb	r3, [r4, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <_vfiprintf_r+0xf0>
 801055e:	2b25      	cmp	r3, #37	; 0x25
 8010560:	d000      	beq.n	8010564 <_vfiprintf_r+0xf0>
 8010562:	e08d      	b.n	8010680 <_vfiprintf_r+0x20c>
 8010564:	9b07      	ldr	r3, [sp, #28]
 8010566:	1ae6      	subs	r6, r4, r3
 8010568:	429c      	cmp	r4, r3
 801056a:	d016      	beq.n	801059a <_vfiprintf_r+0x126>
 801056c:	602b      	str	r3, [r5, #0]
 801056e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010570:	606e      	str	r6, [r5, #4]
 8010572:	199b      	adds	r3, r3, r6
 8010574:	9316      	str	r3, [sp, #88]	; 0x58
 8010576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010578:	3508      	adds	r5, #8
 801057a:	3301      	adds	r3, #1
 801057c:	9315      	str	r3, [sp, #84]	; 0x54
 801057e:	2b07      	cmp	r3, #7
 8010580:	dd08      	ble.n	8010594 <_vfiprintf_r+0x120>
 8010582:	9903      	ldr	r1, [sp, #12]
 8010584:	9806      	ldr	r0, [sp, #24]
 8010586:	aa14      	add	r2, sp, #80	; 0x50
 8010588:	f7ff ff3f 	bl	801040a <__sprint_r>
 801058c:	2800      	cmp	r0, #0
 801058e:	d000      	beq.n	8010592 <_vfiprintf_r+0x11e>
 8010590:	e3d9      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010592:	ad17      	add	r5, sp, #92	; 0x5c
 8010594:	9b08      	ldr	r3, [sp, #32]
 8010596:	199b      	adds	r3, r3, r6
 8010598:	9308      	str	r3, [sp, #32]
 801059a:	7823      	ldrb	r3, [r4, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <_vfiprintf_r+0x130>
 80105a0:	f000 fbf6 	bl	8010d90 <_vfiprintf_r+0x91c>
 80105a4:	2200      	movs	r2, #0
 80105a6:	a912      	add	r1, sp, #72	; 0x48
 80105a8:	70ca      	strb	r2, [r1, #3]
 80105aa:	2101      	movs	r1, #1
 80105ac:	1c63      	adds	r3, r4, #1
 80105ae:	0014      	movs	r4, r2
 80105b0:	4249      	negs	r1, r1
 80105b2:	9105      	str	r1, [sp, #20]
 80105b4:	9209      	str	r2, [sp, #36]	; 0x24
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	9207      	str	r2, [sp, #28]
 80105bc:	0018      	movs	r0, r3
 80105be:	3820      	subs	r0, #32
 80105c0:	285a      	cmp	r0, #90	; 0x5a
 80105c2:	d900      	bls.n	80105c6 <_vfiprintf_r+0x152>
 80105c4:	e362      	b.n	8010c8c <_vfiprintf_r+0x818>
 80105c6:	f7ef fdaf 	bl	8000128 <__gnu_thumb1_case_uhi>
 80105ca:	0078      	.short	0x0078
 80105cc:	03610361 	.word	0x03610361
 80105d0:	03610081 	.word	0x03610081
 80105d4:	03610361 	.word	0x03610361
 80105d8:	0361005d 	.word	0x0361005d
 80105dc:	00830361 	.word	0x00830361
 80105e0:	0361008b 	.word	0x0361008b
 80105e4:	008f0089 	.word	0x008f0089
 80105e8:	00ad0361 	.word	0x00ad0361
 80105ec:	00af00af 	.word	0x00af00af
 80105f0:	00af00af 	.word	0x00af00af
 80105f4:	00af00af 	.word	0x00af00af
 80105f8:	00af00af 	.word	0x00af00af
 80105fc:	036100af 	.word	0x036100af
 8010600:	03610361 	.word	0x03610361
 8010604:	03610361 	.word	0x03610361
 8010608:	03610361 	.word	0x03610361
 801060c:	03610361 	.word	0x03610361
 8010610:	00e600da 	.word	0x00e600da
 8010614:	03610361 	.word	0x03610361
 8010618:	03610361 	.word	0x03610361
 801061c:	03610361 	.word	0x03610361
 8010620:	03610361 	.word	0x03610361
 8010624:	03610361 	.word	0x03610361
 8010628:	03610143 	.word	0x03610143
 801062c:	03610361 	.word	0x03610361
 8010630:	03610182 	.word	0x03610182
 8010634:	0361027c 	.word	0x0361027c
 8010638:	02ae0361 	.word	0x02ae0361
 801063c:	03610361 	.word	0x03610361
 8010640:	03610361 	.word	0x03610361
 8010644:	03610361 	.word	0x03610361
 8010648:	03610361 	.word	0x03610361
 801064c:	03610361 	.word	0x03610361
 8010650:	00e800da 	.word	0x00e800da
 8010654:	03610361 	.word	0x03610361
 8010658:	00c30361 	.word	0x00c30361
 801065c:	00d600e8 	.word	0x00d600e8
 8010660:	00cf0361 	.word	0x00cf0361
 8010664:	01260361 	.word	0x01260361
 8010668:	01740145 	.word	0x01740145
 801066c:	036100d6 	.word	0x036100d6
 8010670:	007f0182 	.word	0x007f0182
 8010674:	0361027e 	.word	0x0361027e
 8010678:	02cd0361 	.word	0x02cd0361
 801067c:	007f0361 	.word	0x007f0361
 8010680:	3401      	adds	r4, #1
 8010682:	e769      	b.n	8010558 <_vfiprintf_r+0xe4>
 8010684:	9806      	ldr	r0, [sp, #24]
 8010686:	f7fe fa47 	bl	800eb18 <_localeconv_r>
 801068a:	6843      	ldr	r3, [r0, #4]
 801068c:	0018      	movs	r0, r3
 801068e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010690:	f7ef fd38 	bl	8000104 <strlen>
 8010694:	900e      	str	r0, [sp, #56]	; 0x38
 8010696:	9806      	ldr	r0, [sp, #24]
 8010698:	f7fe fa3e 	bl	800eb18 <_localeconv_r>
 801069c:	6883      	ldr	r3, [r0, #8]
 801069e:	930d      	str	r3, [sp, #52]	; 0x34
 80106a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d010      	beq.n	80106c8 <_vfiprintf_r+0x254>
 80106a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00d      	beq.n	80106c8 <_vfiprintf_r+0x254>
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00a      	beq.n	80106c8 <_vfiprintf_r+0x254>
 80106b2:	2380      	movs	r3, #128	; 0x80
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	431c      	orrs	r4, r3
 80106b8:	e006      	b.n	80106c8 <_vfiprintf_r+0x254>
 80106ba:	ab12      	add	r3, sp, #72	; 0x48
 80106bc:	78da      	ldrb	r2, [r3, #3]
 80106be:	3303      	adds	r3, #3
 80106c0:	2a00      	cmp	r2, #0
 80106c2:	d101      	bne.n	80106c8 <_vfiprintf_r+0x254>
 80106c4:	3220      	adds	r2, #32
 80106c6:	701a      	strb	r2, [r3, #0]
 80106c8:	9b07      	ldr	r3, [sp, #28]
 80106ca:	e774      	b.n	80105b6 <_vfiprintf_r+0x142>
 80106cc:	2301      	movs	r3, #1
 80106ce:	e7f2      	b.n	80106b6 <_vfiprintf_r+0x242>
 80106d0:	cf08      	ldmia	r7!, {r3}
 80106d2:	9309      	str	r3, [sp, #36]	; 0x24
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	daf7      	bge.n	80106c8 <_vfiprintf_r+0x254>
 80106d8:	425b      	negs	r3, r3
 80106da:	9309      	str	r3, [sp, #36]	; 0x24
 80106dc:	2304      	movs	r3, #4
 80106de:	e7ea      	b.n	80106b6 <_vfiprintf_r+0x242>
 80106e0:	222b      	movs	r2, #43	; 0x2b
 80106e2:	ab12      	add	r3, sp, #72	; 0x48
 80106e4:	70da      	strb	r2, [r3, #3]
 80106e6:	e7ef      	b.n	80106c8 <_vfiprintf_r+0x254>
 80106e8:	9b07      	ldr	r3, [sp, #28]
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	2b2a      	cmp	r3, #42	; 0x2a
 80106f0:	d00f      	beq.n	8010712 <_vfiprintf_r+0x29e>
 80106f2:	2100      	movs	r1, #0
 80106f4:	9105      	str	r1, [sp, #20]
 80106f6:	0019      	movs	r1, r3
 80106f8:	3930      	subs	r1, #48	; 0x30
 80106fa:	9207      	str	r2, [sp, #28]
 80106fc:	2909      	cmp	r1, #9
 80106fe:	d900      	bls.n	8010702 <_vfiprintf_r+0x28e>
 8010700:	e75c      	b.n	80105bc <_vfiprintf_r+0x148>
 8010702:	200a      	movs	r0, #10
 8010704:	9b05      	ldr	r3, [sp, #20]
 8010706:	4343      	muls	r3, r0
 8010708:	185b      	adds	r3, r3, r1
 801070a:	9305      	str	r3, [sp, #20]
 801070c:	7813      	ldrb	r3, [r2, #0]
 801070e:	3201      	adds	r2, #1
 8010710:	e7f1      	b.n	80106f6 <_vfiprintf_r+0x282>
 8010712:	cf08      	ldmia	r7!, {r3}
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	da02      	bge.n	8010720 <_vfiprintf_r+0x2ac>
 801071a:	2301      	movs	r3, #1
 801071c:	425b      	negs	r3, r3
 801071e:	9305      	str	r3, [sp, #20]
 8010720:	9207      	str	r2, [sp, #28]
 8010722:	e7d1      	b.n	80106c8 <_vfiprintf_r+0x254>
 8010724:	2380      	movs	r3, #128	; 0x80
 8010726:	e7c6      	b.n	80106b6 <_vfiprintf_r+0x242>
 8010728:	2100      	movs	r1, #0
 801072a:	9a07      	ldr	r2, [sp, #28]
 801072c:	9109      	str	r1, [sp, #36]	; 0x24
 801072e:	200a      	movs	r0, #10
 8010730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010732:	3b30      	subs	r3, #48	; 0x30
 8010734:	4341      	muls	r1, r0
 8010736:	185b      	adds	r3, r3, r1
 8010738:	9309      	str	r3, [sp, #36]	; 0x24
 801073a:	0013      	movs	r3, r2
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	3201      	adds	r2, #1
 8010740:	0019      	movs	r1, r3
 8010742:	3930      	subs	r1, #48	; 0x30
 8010744:	9207      	str	r2, [sp, #28]
 8010746:	2909      	cmp	r1, #9
 8010748:	d9f1      	bls.n	801072e <_vfiprintf_r+0x2ba>
 801074a:	e737      	b.n	80105bc <_vfiprintf_r+0x148>
 801074c:	ffffdfff 	.word	0xffffdfff
 8010750:	9b07      	ldr	r3, [sp, #28]
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2b68      	cmp	r3, #104	; 0x68
 8010756:	d105      	bne.n	8010764 <_vfiprintf_r+0x2f0>
 8010758:	9b07      	ldr	r3, [sp, #28]
 801075a:	3301      	adds	r3, #1
 801075c:	9307      	str	r3, [sp, #28]
 801075e:	2380      	movs	r3, #128	; 0x80
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	e7a8      	b.n	80106b6 <_vfiprintf_r+0x242>
 8010764:	2340      	movs	r3, #64	; 0x40
 8010766:	e7a6      	b.n	80106b6 <_vfiprintf_r+0x242>
 8010768:	9b07      	ldr	r3, [sp, #28]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	2b6c      	cmp	r3, #108	; 0x6c
 801076e:	d104      	bne.n	801077a <_vfiprintf_r+0x306>
 8010770:	9b07      	ldr	r3, [sp, #28]
 8010772:	3301      	adds	r3, #1
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	2320      	movs	r3, #32
 8010778:	e79d      	b.n	80106b6 <_vfiprintf_r+0x242>
 801077a:	2310      	movs	r3, #16
 801077c:	e79b      	b.n	80106b6 <_vfiprintf_r+0x242>
 801077e:	003a      	movs	r2, r7
 8010780:	ca08      	ldmia	r2!, {r3}
 8010782:	ae27      	add	r6, sp, #156	; 0x9c
 8010784:	7033      	strb	r3, [r6, #0]
 8010786:	2300      	movs	r3, #0
 8010788:	9204      	str	r2, [sp, #16]
 801078a:	aa12      	add	r2, sp, #72	; 0x48
 801078c:	70d3      	strb	r3, [r2, #3]
 801078e:	2201      	movs	r2, #1
 8010790:	930b      	str	r3, [sp, #44]	; 0x2c
 8010792:	9205      	str	r2, [sp, #20]
 8010794:	e0b0      	b.n	80108f8 <_vfiprintf_r+0x484>
 8010796:	2310      	movs	r3, #16
 8010798:	431c      	orrs	r4, r3
 801079a:	06a3      	lsls	r3, r4, #26
 801079c:	d52a      	bpl.n	80107f4 <_vfiprintf_r+0x380>
 801079e:	2307      	movs	r3, #7
 80107a0:	3707      	adds	r7, #7
 80107a2:	439f      	bics	r7, r3
 80107a4:	0039      	movs	r1, r7
 80107a6:	c90c      	ldmia	r1!, {r2, r3}
 80107a8:	9200      	str	r2, [sp, #0]
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	9104      	str	r1, [sp, #16]
 80107ae:	9a01      	ldr	r2, [sp, #4]
 80107b0:	2301      	movs	r3, #1
 80107b2:	2a00      	cmp	r2, #0
 80107b4:	da09      	bge.n	80107ca <_vfiprintf_r+0x356>
 80107b6:	9e00      	ldr	r6, [sp, #0]
 80107b8:	9f01      	ldr	r7, [sp, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	4271      	negs	r1, r6
 80107be:	41ba      	sbcs	r2, r7
 80107c0:	9100      	str	r1, [sp, #0]
 80107c2:	9201      	str	r2, [sp, #4]
 80107c4:	212d      	movs	r1, #45	; 0x2d
 80107c6:	aa12      	add	r2, sp, #72	; 0x48
 80107c8:	70d1      	strb	r1, [r2, #3]
 80107ca:	9901      	ldr	r1, [sp, #4]
 80107cc:	9a00      	ldr	r2, [sp, #0]
 80107ce:	430a      	orrs	r2, r1
 80107d0:	9905      	ldr	r1, [sp, #20]
 80107d2:	3101      	adds	r1, #1
 80107d4:	d100      	bne.n	80107d8 <_vfiprintf_r+0x364>
 80107d6:	e2e9      	b.n	8010dac <_vfiprintf_r+0x938>
 80107d8:	2180      	movs	r1, #128	; 0x80
 80107da:	0027      	movs	r7, r4
 80107dc:	438f      	bics	r7, r1
 80107de:	2a00      	cmp	r2, #0
 80107e0:	d000      	beq.n	80107e4 <_vfiprintf_r+0x370>
 80107e2:	e2e7      	b.n	8010db4 <_vfiprintf_r+0x940>
 80107e4:	9a05      	ldr	r2, [sp, #20]
 80107e6:	2a00      	cmp	r2, #0
 80107e8:	d100      	bne.n	80107ec <_vfiprintf_r+0x378>
 80107ea:	e243      	b.n	8010c74 <_vfiprintf_r+0x800>
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d000      	beq.n	80107f2 <_vfiprintf_r+0x37e>
 80107f0:	e2e3      	b.n	8010dba <_vfiprintf_r+0x946>
 80107f2:	e1e7      	b.n	8010bc4 <_vfiprintf_r+0x750>
 80107f4:	003a      	movs	r2, r7
 80107f6:	ca08      	ldmia	r2!, {r3}
 80107f8:	9204      	str	r2, [sp, #16]
 80107fa:	06e2      	lsls	r2, r4, #27
 80107fc:	d503      	bpl.n	8010806 <_vfiprintf_r+0x392>
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	17db      	asrs	r3, r3, #31
 8010802:	9301      	str	r3, [sp, #4]
 8010804:	e7d3      	b.n	80107ae <_vfiprintf_r+0x33a>
 8010806:	0662      	lsls	r2, r4, #25
 8010808:	d501      	bpl.n	801080e <_vfiprintf_r+0x39a>
 801080a:	b21b      	sxth	r3, r3
 801080c:	e7f7      	b.n	80107fe <_vfiprintf_r+0x38a>
 801080e:	05a2      	lsls	r2, r4, #22
 8010810:	d5f5      	bpl.n	80107fe <_vfiprintf_r+0x38a>
 8010812:	b25b      	sxtb	r3, r3
 8010814:	e7f3      	b.n	80107fe <_vfiprintf_r+0x38a>
 8010816:	1d3b      	adds	r3, r7, #4
 8010818:	9304      	str	r3, [sp, #16]
 801081a:	06a3      	lsls	r3, r4, #26
 801081c:	d506      	bpl.n	801082c <_vfiprintf_r+0x3b8>
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	9a08      	ldr	r2, [sp, #32]
 8010822:	601a      	str	r2, [r3, #0]
 8010824:	17d2      	asrs	r2, r2, #31
 8010826:	605a      	str	r2, [r3, #4]
 8010828:	9f04      	ldr	r7, [sp, #16]
 801082a:	e694      	b.n	8010556 <_vfiprintf_r+0xe2>
 801082c:	06e3      	lsls	r3, r4, #27
 801082e:	d503      	bpl.n	8010838 <_vfiprintf_r+0x3c4>
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	9a08      	ldr	r2, [sp, #32]
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	e7f7      	b.n	8010828 <_vfiprintf_r+0x3b4>
 8010838:	0663      	lsls	r3, r4, #25
 801083a:	d503      	bpl.n	8010844 <_vfiprintf_r+0x3d0>
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	9a08      	ldr	r2, [sp, #32]
 8010840:	801a      	strh	r2, [r3, #0]
 8010842:	e7f1      	b.n	8010828 <_vfiprintf_r+0x3b4>
 8010844:	05a4      	lsls	r4, r4, #22
 8010846:	d5f3      	bpl.n	8010830 <_vfiprintf_r+0x3bc>
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	9a08      	ldr	r2, [sp, #32]
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	e7eb      	b.n	8010828 <_vfiprintf_r+0x3b4>
 8010850:	2310      	movs	r3, #16
 8010852:	431c      	orrs	r4, r3
 8010854:	2320      	movs	r3, #32
 8010856:	0020      	movs	r0, r4
 8010858:	4018      	ands	r0, r3
 801085a:	421c      	tst	r4, r3
 801085c:	d00d      	beq.n	801087a <_vfiprintf_r+0x406>
 801085e:	3b19      	subs	r3, #25
 8010860:	3707      	adds	r7, #7
 8010862:	439f      	bics	r7, r3
 8010864:	0039      	movs	r1, r7
 8010866:	c90c      	ldmia	r1!, {r2, r3}
 8010868:	9200      	str	r2, [sp, #0]
 801086a:	9301      	str	r3, [sp, #4]
 801086c:	9104      	str	r1, [sp, #16]
 801086e:	4bcc      	ldr	r3, [pc, #816]	; (8010ba0 <_vfiprintf_r+0x72c>)
 8010870:	401c      	ands	r4, r3
 8010872:	2300      	movs	r3, #0
 8010874:	2100      	movs	r1, #0
 8010876:	aa12      	add	r2, sp, #72	; 0x48
 8010878:	e7a6      	b.n	80107c8 <_vfiprintf_r+0x354>
 801087a:	003a      	movs	r2, r7
 801087c:	ca08      	ldmia	r2!, {r3}
 801087e:	0021      	movs	r1, r4
 8010880:	9204      	str	r2, [sp, #16]
 8010882:	2210      	movs	r2, #16
 8010884:	4011      	ands	r1, r2
 8010886:	4214      	tst	r4, r2
 8010888:	d002      	beq.n	8010890 <_vfiprintf_r+0x41c>
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	9001      	str	r0, [sp, #4]
 801088e:	e7ee      	b.n	801086e <_vfiprintf_r+0x3fa>
 8010890:	2240      	movs	r2, #64	; 0x40
 8010892:	0020      	movs	r0, r4
 8010894:	4010      	ands	r0, r2
 8010896:	4214      	tst	r4, r2
 8010898:	d003      	beq.n	80108a2 <_vfiprintf_r+0x42e>
 801089a:	b29b      	uxth	r3, r3
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	9101      	str	r1, [sp, #4]
 80108a0:	e7e5      	b.n	801086e <_vfiprintf_r+0x3fa>
 80108a2:	2280      	movs	r2, #128	; 0x80
 80108a4:	0021      	movs	r1, r4
 80108a6:	0092      	lsls	r2, r2, #2
 80108a8:	4011      	ands	r1, r2
 80108aa:	4214      	tst	r4, r2
 80108ac:	d0f6      	beq.n	801089c <_vfiprintf_r+0x428>
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	e7eb      	b.n	801088a <_vfiprintf_r+0x416>
 80108b2:	003b      	movs	r3, r7
 80108b4:	cb04      	ldmia	r3!, {r2}
 80108b6:	49bb      	ldr	r1, [pc, #748]	; (8010ba4 <_vfiprintf_r+0x730>)
 80108b8:	9304      	str	r3, [sp, #16]
 80108ba:	2300      	movs	r3, #0
 80108bc:	9200      	str	r2, [sp, #0]
 80108be:	aa13      	add	r2, sp, #76	; 0x4c
 80108c0:	8011      	strh	r1, [r2, #0]
 80108c2:	4ab9      	ldr	r2, [pc, #740]	; (8010ba8 <_vfiprintf_r+0x734>)
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	3302      	adds	r3, #2
 80108c8:	431c      	orrs	r4, r3
 80108ca:	920c      	str	r2, [sp, #48]	; 0x30
 80108cc:	e7d2      	b.n	8010874 <_vfiprintf_r+0x400>
 80108ce:	003b      	movs	r3, r7
 80108d0:	2700      	movs	r7, #0
 80108d2:	cb40      	ldmia	r3!, {r6}
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	ab12      	add	r3, sp, #72	; 0x48
 80108d8:	70df      	strb	r7, [r3, #3]
 80108da:	9b05      	ldr	r3, [sp, #20]
 80108dc:	3301      	adds	r3, #1
 80108de:	d100      	bne.n	80108e2 <_vfiprintf_r+0x46e>
 80108e0:	e0ea      	b.n	8010ab8 <_vfiprintf_r+0x644>
 80108e2:	0039      	movs	r1, r7
 80108e4:	0030      	movs	r0, r6
 80108e6:	9a05      	ldr	r2, [sp, #20]
 80108e8:	f7fe f92e 	bl	800eb48 <memchr>
 80108ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80108ee:	42b8      	cmp	r0, r7
 80108f0:	d002      	beq.n	80108f8 <_vfiprintf_r+0x484>
 80108f2:	1b83      	subs	r3, r0, r6
 80108f4:	9305      	str	r3, [sp, #20]
 80108f6:	970b      	str	r7, [sp, #44]	; 0x2c
 80108f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108fa:	9a05      	ldr	r2, [sp, #20]
 80108fc:	930a      	str	r3, [sp, #40]	; 0x28
 80108fe:	4293      	cmp	r3, r2
 8010900:	da00      	bge.n	8010904 <_vfiprintf_r+0x490>
 8010902:	920a      	str	r2, [sp, #40]	; 0x28
 8010904:	ab12      	add	r3, sp, #72	; 0x48
 8010906:	3303      	adds	r3, #3
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	1e5a      	subs	r2, r3, #1
 801090c:	4193      	sbcs	r3, r2
 801090e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010910:	18d3      	adds	r3, r2, r3
 8010912:	930a      	str	r3, [sp, #40]	; 0x28
 8010914:	0022      	movs	r2, r4
 8010916:	2302      	movs	r3, #2
 8010918:	401a      	ands	r2, r3
 801091a:	9210      	str	r2, [sp, #64]	; 0x40
 801091c:	421c      	tst	r4, r3
 801091e:	d002      	beq.n	8010926 <_vfiprintf_r+0x4b2>
 8010920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010922:	3302      	adds	r3, #2
 8010924:	930a      	str	r3, [sp, #40]	; 0x28
 8010926:	2384      	movs	r3, #132	; 0x84
 8010928:	0022      	movs	r2, r4
 801092a:	401a      	ands	r2, r3
 801092c:	9211      	str	r2, [sp, #68]	; 0x44
 801092e:	421c      	tst	r4, r3
 8010930:	d11e      	bne.n	8010970 <_vfiprintf_r+0x4fc>
 8010932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010936:	1a9f      	subs	r7, r3, r2
 8010938:	2f00      	cmp	r7, #0
 801093a:	dd19      	ble.n	8010970 <_vfiprintf_r+0x4fc>
 801093c:	0029      	movs	r1, r5
 801093e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010940:	489a      	ldr	r0, [pc, #616]	; (8010bac <_vfiprintf_r+0x738>)
 8010942:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010944:	3301      	adds	r3, #1
 8010946:	3108      	adds	r1, #8
 8010948:	6028      	str	r0, [r5, #0]
 801094a:	2f10      	cmp	r7, #16
 801094c:	dd00      	ble.n	8010950 <_vfiprintf_r+0x4dc>
 801094e:	e1a7      	b.n	8010ca0 <_vfiprintf_r+0x82c>
 8010950:	606f      	str	r7, [r5, #4]
 8010952:	18bf      	adds	r7, r7, r2
 8010954:	000d      	movs	r5, r1
 8010956:	9716      	str	r7, [sp, #88]	; 0x58
 8010958:	9315      	str	r3, [sp, #84]	; 0x54
 801095a:	2b07      	cmp	r3, #7
 801095c:	dd08      	ble.n	8010970 <_vfiprintf_r+0x4fc>
 801095e:	9903      	ldr	r1, [sp, #12]
 8010960:	9806      	ldr	r0, [sp, #24]
 8010962:	aa14      	add	r2, sp, #80	; 0x50
 8010964:	f7ff fd51 	bl	801040a <__sprint_r>
 8010968:	2800      	cmp	r0, #0
 801096a:	d000      	beq.n	801096e <_vfiprintf_r+0x4fa>
 801096c:	e1eb      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 801096e:	ad17      	add	r5, sp, #92	; 0x5c
 8010970:	a912      	add	r1, sp, #72	; 0x48
 8010972:	78c8      	ldrb	r0, [r1, #3]
 8010974:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010978:	3103      	adds	r1, #3
 801097a:	2800      	cmp	r0, #0
 801097c:	d012      	beq.n	80109a4 <_vfiprintf_r+0x530>
 801097e:	6029      	str	r1, [r5, #0]
 8010980:	2101      	movs	r1, #1
 8010982:	3301      	adds	r3, #1
 8010984:	1852      	adds	r2, r2, r1
 8010986:	6069      	str	r1, [r5, #4]
 8010988:	9216      	str	r2, [sp, #88]	; 0x58
 801098a:	9315      	str	r3, [sp, #84]	; 0x54
 801098c:	3508      	adds	r5, #8
 801098e:	2b07      	cmp	r3, #7
 8010990:	dd08      	ble.n	80109a4 <_vfiprintf_r+0x530>
 8010992:	9903      	ldr	r1, [sp, #12]
 8010994:	9806      	ldr	r0, [sp, #24]
 8010996:	aa14      	add	r2, sp, #80	; 0x50
 8010998:	f7ff fd37 	bl	801040a <__sprint_r>
 801099c:	2800      	cmp	r0, #0
 801099e:	d000      	beq.n	80109a2 <_vfiprintf_r+0x52e>
 80109a0:	e1d1      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 80109a2:	ad17      	add	r5, sp, #92	; 0x5c
 80109a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80109a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80109a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109aa:	2900      	cmp	r1, #0
 80109ac:	d013      	beq.n	80109d6 <_vfiprintf_r+0x562>
 80109ae:	a913      	add	r1, sp, #76	; 0x4c
 80109b0:	6029      	str	r1, [r5, #0]
 80109b2:	2102      	movs	r1, #2
 80109b4:	3301      	adds	r3, #1
 80109b6:	1852      	adds	r2, r2, r1
 80109b8:	6069      	str	r1, [r5, #4]
 80109ba:	9216      	str	r2, [sp, #88]	; 0x58
 80109bc:	9315      	str	r3, [sp, #84]	; 0x54
 80109be:	3508      	adds	r5, #8
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	dd08      	ble.n	80109d6 <_vfiprintf_r+0x562>
 80109c4:	9903      	ldr	r1, [sp, #12]
 80109c6:	9806      	ldr	r0, [sp, #24]
 80109c8:	aa14      	add	r2, sp, #80	; 0x50
 80109ca:	f7ff fd1e 	bl	801040a <__sprint_r>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	d000      	beq.n	80109d4 <_vfiprintf_r+0x560>
 80109d2:	e1b8      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 80109d4:	ad17      	add	r5, sp, #92	; 0x5c
 80109d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109d8:	2b80      	cmp	r3, #128	; 0x80
 80109da:	d11e      	bne.n	8010a1a <_vfiprintf_r+0x5a6>
 80109dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109e0:	1a9f      	subs	r7, r3, r2
 80109e2:	2f00      	cmp	r7, #0
 80109e4:	dd19      	ble.n	8010a1a <_vfiprintf_r+0x5a6>
 80109e6:	0029      	movs	r1, r5
 80109e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109ea:	4871      	ldr	r0, [pc, #452]	; (8010bb0 <_vfiprintf_r+0x73c>)
 80109ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80109ee:	3301      	adds	r3, #1
 80109f0:	3108      	adds	r1, #8
 80109f2:	6028      	str	r0, [r5, #0]
 80109f4:	2f10      	cmp	r7, #16
 80109f6:	dd00      	ble.n	80109fa <_vfiprintf_r+0x586>
 80109f8:	e164      	b.n	8010cc4 <_vfiprintf_r+0x850>
 80109fa:	606f      	str	r7, [r5, #4]
 80109fc:	18bf      	adds	r7, r7, r2
 80109fe:	000d      	movs	r5, r1
 8010a00:	9716      	str	r7, [sp, #88]	; 0x58
 8010a02:	9315      	str	r3, [sp, #84]	; 0x54
 8010a04:	2b07      	cmp	r3, #7
 8010a06:	dd08      	ble.n	8010a1a <_vfiprintf_r+0x5a6>
 8010a08:	9903      	ldr	r1, [sp, #12]
 8010a0a:	9806      	ldr	r0, [sp, #24]
 8010a0c:	aa14      	add	r2, sp, #80	; 0x50
 8010a0e:	f7ff fcfc 	bl	801040a <__sprint_r>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d000      	beq.n	8010a18 <_vfiprintf_r+0x5a4>
 8010a16:	e196      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010a18:	ad17      	add	r5, sp, #92	; 0x5c
 8010a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a1c:	9a05      	ldr	r2, [sp, #20]
 8010a1e:	1a9f      	subs	r7, r3, r2
 8010a20:	2f00      	cmp	r7, #0
 8010a22:	dd19      	ble.n	8010a58 <_vfiprintf_r+0x5e4>
 8010a24:	0029      	movs	r1, r5
 8010a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a28:	4861      	ldr	r0, [pc, #388]	; (8010bb0 <_vfiprintf_r+0x73c>)
 8010a2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	3108      	adds	r1, #8
 8010a30:	6028      	str	r0, [r5, #0]
 8010a32:	2f10      	cmp	r7, #16
 8010a34:	dd00      	ble.n	8010a38 <_vfiprintf_r+0x5c4>
 8010a36:	e157      	b.n	8010ce8 <_vfiprintf_r+0x874>
 8010a38:	606f      	str	r7, [r5, #4]
 8010a3a:	18bf      	adds	r7, r7, r2
 8010a3c:	000d      	movs	r5, r1
 8010a3e:	9716      	str	r7, [sp, #88]	; 0x58
 8010a40:	9315      	str	r3, [sp, #84]	; 0x54
 8010a42:	2b07      	cmp	r3, #7
 8010a44:	dd08      	ble.n	8010a58 <_vfiprintf_r+0x5e4>
 8010a46:	9903      	ldr	r1, [sp, #12]
 8010a48:	9806      	ldr	r0, [sp, #24]
 8010a4a:	aa14      	add	r2, sp, #80	; 0x50
 8010a4c:	f7ff fcdd 	bl	801040a <__sprint_r>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d000      	beq.n	8010a56 <_vfiprintf_r+0x5e2>
 8010a54:	e177      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010a56:	ad17      	add	r5, sp, #92	; 0x5c
 8010a58:	9b05      	ldr	r3, [sp, #20]
 8010a5a:	9a05      	ldr	r2, [sp, #20]
 8010a5c:	606b      	str	r3, [r5, #4]
 8010a5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a60:	602e      	str	r6, [r5, #0]
 8010a62:	189b      	adds	r3, r3, r2
 8010a64:	9316      	str	r3, [sp, #88]	; 0x58
 8010a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a68:	3508      	adds	r5, #8
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	9315      	str	r3, [sp, #84]	; 0x54
 8010a6e:	2b07      	cmp	r3, #7
 8010a70:	dd08      	ble.n	8010a84 <_vfiprintf_r+0x610>
 8010a72:	9903      	ldr	r1, [sp, #12]
 8010a74:	9806      	ldr	r0, [sp, #24]
 8010a76:	aa14      	add	r2, sp, #80	; 0x50
 8010a78:	f7ff fcc7 	bl	801040a <__sprint_r>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	d000      	beq.n	8010a82 <_vfiprintf_r+0x60e>
 8010a80:	e161      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010a82:	ad17      	add	r5, sp, #92	; 0x5c
 8010a84:	0764      	lsls	r4, r4, #29
 8010a86:	d500      	bpl.n	8010a8a <_vfiprintf_r+0x616>
 8010a88:	e140      	b.n	8010d0c <_vfiprintf_r+0x898>
 8010a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	da00      	bge.n	8010a94 <_vfiprintf_r+0x620>
 8010a92:	0013      	movs	r3, r2
 8010a94:	9a08      	ldr	r2, [sp, #32]
 8010a96:	18d3      	adds	r3, r2, r3
 8010a98:	9308      	str	r3, [sp, #32]
 8010a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d007      	beq.n	8010ab0 <_vfiprintf_r+0x63c>
 8010aa0:	9903      	ldr	r1, [sp, #12]
 8010aa2:	9806      	ldr	r0, [sp, #24]
 8010aa4:	aa14      	add	r2, sp, #80	; 0x50
 8010aa6:	f7ff fcb0 	bl	801040a <__sprint_r>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d000      	beq.n	8010ab0 <_vfiprintf_r+0x63c>
 8010aae:	e14a      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	ad17      	add	r5, sp, #92	; 0x5c
 8010ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8010ab6:	e6b7      	b.n	8010828 <_vfiprintf_r+0x3b4>
 8010ab8:	0030      	movs	r0, r6
 8010aba:	f7ef fb23 	bl	8000104 <strlen>
 8010abe:	9005      	str	r0, [sp, #20]
 8010ac0:	e719      	b.n	80108f6 <_vfiprintf_r+0x482>
 8010ac2:	2310      	movs	r3, #16
 8010ac4:	431c      	orrs	r4, r3
 8010ac6:	2320      	movs	r3, #32
 8010ac8:	0020      	movs	r0, r4
 8010aca:	4018      	ands	r0, r3
 8010acc:	421c      	tst	r4, r3
 8010ace:	d009      	beq.n	8010ae4 <_vfiprintf_r+0x670>
 8010ad0:	3b19      	subs	r3, #25
 8010ad2:	3707      	adds	r7, #7
 8010ad4:	439f      	bics	r7, r3
 8010ad6:	0039      	movs	r1, r7
 8010ad8:	c90c      	ldmia	r1!, {r2, r3}
 8010ada:	9200      	str	r2, [sp, #0]
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	9104      	str	r1, [sp, #16]
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e6c7      	b.n	8010874 <_vfiprintf_r+0x400>
 8010ae4:	003b      	movs	r3, r7
 8010ae6:	cb04      	ldmia	r3!, {r2}
 8010ae8:	0021      	movs	r1, r4
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	2310      	movs	r3, #16
 8010aee:	4019      	ands	r1, r3
 8010af0:	421c      	tst	r4, r3
 8010af2:	d003      	beq.n	8010afc <_vfiprintf_r+0x688>
 8010af4:	9200      	str	r2, [sp, #0]
 8010af6:	9001      	str	r0, [sp, #4]
 8010af8:	3b0f      	subs	r3, #15
 8010afa:	e6bb      	b.n	8010874 <_vfiprintf_r+0x400>
 8010afc:	2340      	movs	r3, #64	; 0x40
 8010afe:	0020      	movs	r0, r4
 8010b00:	4018      	ands	r0, r3
 8010b02:	421c      	tst	r4, r3
 8010b04:	d003      	beq.n	8010b0e <_vfiprintf_r+0x69a>
 8010b06:	b293      	uxth	r3, r2
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	9101      	str	r1, [sp, #4]
 8010b0c:	e7e8      	b.n	8010ae0 <_vfiprintf_r+0x66c>
 8010b0e:	2380      	movs	r3, #128	; 0x80
 8010b10:	0021      	movs	r1, r4
 8010b12:	009b      	lsls	r3, r3, #2
 8010b14:	4019      	ands	r1, r3
 8010b16:	421c      	tst	r4, r3
 8010b18:	d003      	beq.n	8010b22 <_vfiprintf_r+0x6ae>
 8010b1a:	b2d3      	uxtb	r3, r2
 8010b1c:	9300      	str	r3, [sp, #0]
 8010b1e:	9001      	str	r0, [sp, #4]
 8010b20:	e7de      	b.n	8010ae0 <_vfiprintf_r+0x66c>
 8010b22:	9200      	str	r2, [sp, #0]
 8010b24:	e7f1      	b.n	8010b0a <_vfiprintf_r+0x696>
 8010b26:	4a23      	ldr	r2, [pc, #140]	; (8010bb4 <_vfiprintf_r+0x740>)
 8010b28:	0020      	movs	r0, r4
 8010b2a:	920c      	str	r2, [sp, #48]	; 0x30
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	4010      	ands	r0, r2
 8010b30:	4214      	tst	r4, r2
 8010b32:	d019      	beq.n	8010b68 <_vfiprintf_r+0x6f4>
 8010b34:	3a19      	subs	r2, #25
 8010b36:	3707      	adds	r7, #7
 8010b38:	4397      	bics	r7, r2
 8010b3a:	0038      	movs	r0, r7
 8010b3c:	c806      	ldmia	r0!, {r1, r2}
 8010b3e:	9100      	str	r1, [sp, #0]
 8010b40:	9201      	str	r2, [sp, #4]
 8010b42:	9004      	str	r0, [sp, #16]
 8010b44:	07e2      	lsls	r2, r4, #31
 8010b46:	d509      	bpl.n	8010b5c <_vfiprintf_r+0x6e8>
 8010b48:	9a00      	ldr	r2, [sp, #0]
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	430a      	orrs	r2, r1
 8010b4e:	d005      	beq.n	8010b5c <_vfiprintf_r+0x6e8>
 8010b50:	aa13      	add	r2, sp, #76	; 0x4c
 8010b52:	2130      	movs	r1, #48	; 0x30
 8010b54:	7053      	strb	r3, [r2, #1]
 8010b56:	2302      	movs	r3, #2
 8010b58:	7011      	strb	r1, [r2, #0]
 8010b5a:	431c      	orrs	r4, r3
 8010b5c:	4b10      	ldr	r3, [pc, #64]	; (8010ba0 <_vfiprintf_r+0x72c>)
 8010b5e:	401c      	ands	r4, r3
 8010b60:	2302      	movs	r3, #2
 8010b62:	e687      	b.n	8010874 <_vfiprintf_r+0x400>
 8010b64:	4a10      	ldr	r2, [pc, #64]	; (8010ba8 <_vfiprintf_r+0x734>)
 8010b66:	e7df      	b.n	8010b28 <_vfiprintf_r+0x6b4>
 8010b68:	0039      	movs	r1, r7
 8010b6a:	c904      	ldmia	r1!, {r2}
 8010b6c:	0026      	movs	r6, r4
 8010b6e:	9104      	str	r1, [sp, #16]
 8010b70:	2110      	movs	r1, #16
 8010b72:	400e      	ands	r6, r1
 8010b74:	420c      	tst	r4, r1
 8010b76:	d002      	beq.n	8010b7e <_vfiprintf_r+0x70a>
 8010b78:	9200      	str	r2, [sp, #0]
 8010b7a:	9001      	str	r0, [sp, #4]
 8010b7c:	e7e2      	b.n	8010b44 <_vfiprintf_r+0x6d0>
 8010b7e:	2140      	movs	r1, #64	; 0x40
 8010b80:	0020      	movs	r0, r4
 8010b82:	4008      	ands	r0, r1
 8010b84:	420c      	tst	r4, r1
 8010b86:	d003      	beq.n	8010b90 <_vfiprintf_r+0x71c>
 8010b88:	b292      	uxth	r2, r2
 8010b8a:	9200      	str	r2, [sp, #0]
 8010b8c:	9601      	str	r6, [sp, #4]
 8010b8e:	e7d9      	b.n	8010b44 <_vfiprintf_r+0x6d0>
 8010b90:	2180      	movs	r1, #128	; 0x80
 8010b92:	0026      	movs	r6, r4
 8010b94:	0089      	lsls	r1, r1, #2
 8010b96:	400e      	ands	r6, r1
 8010b98:	420c      	tst	r4, r1
 8010b9a:	d0f6      	beq.n	8010b8a <_vfiprintf_r+0x716>
 8010b9c:	b2d2      	uxtb	r2, r2
 8010b9e:	e7eb      	b.n	8010b78 <_vfiprintf_r+0x704>
 8010ba0:	fffffbff 	.word	0xfffffbff
 8010ba4:	00007830 	.word	0x00007830
 8010ba8:	08013264 	.word	0x08013264
 8010bac:	08013371 	.word	0x08013371
 8010bb0:	08013381 	.word	0x08013381
 8010bb4:	08013275 	.word	0x08013275
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d109      	bne.n	8010bd2 <_vfiprintf_r+0x75e>
 8010bbe:	9b00      	ldr	r3, [sp, #0]
 8010bc0:	2b09      	cmp	r3, #9
 8010bc2:	d806      	bhi.n	8010bd2 <_vfiprintf_r+0x75e>
 8010bc4:	26b7      	movs	r6, #183	; 0xb7
 8010bc6:	ab12      	add	r3, sp, #72	; 0x48
 8010bc8:	18f6      	adds	r6, r6, r3
 8010bca:	9b00      	ldr	r3, [sp, #0]
 8010bcc:	3330      	adds	r3, #48	; 0x30
 8010bce:	7033      	strb	r3, [r6, #0]
 8010bd0:	e115      	b.n	8010dfe <_vfiprintf_r+0x98a>
 8010bd2:	2380      	movs	r3, #128	; 0x80
 8010bd4:	2400      	movs	r4, #0
 8010bd6:	00db      	lsls	r3, r3, #3
 8010bd8:	403b      	ands	r3, r7
 8010bda:	ae40      	add	r6, sp, #256	; 0x100
 8010bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8010bde:	220a      	movs	r2, #10
 8010be0:	9800      	ldr	r0, [sp, #0]
 8010be2:	9901      	ldr	r1, [sp, #4]
 8010be4:	2300      	movs	r3, #0
 8010be6:	f7ef fc5d 	bl	80004a4 <__aeabi_uldivmod>
 8010bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bec:	3e01      	subs	r6, #1
 8010bee:	3230      	adds	r2, #48	; 0x30
 8010bf0:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bf2:	9110      	str	r1, [sp, #64]	; 0x40
 8010bf4:	7032      	strb	r2, [r6, #0]
 8010bf6:	3401      	adds	r4, #1
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d01a      	beq.n	8010c32 <_vfiprintf_r+0x7be>
 8010bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	d116      	bne.n	8010c32 <_vfiprintf_r+0x7be>
 8010c04:	2cff      	cmp	r4, #255	; 0xff
 8010c06:	d014      	beq.n	8010c32 <_vfiprintf_r+0x7be>
 8010c08:	9b01      	ldr	r3, [sp, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d102      	bne.n	8010c14 <_vfiprintf_r+0x7a0>
 8010c0e:	9b00      	ldr	r3, [sp, #0]
 8010c10:	2b09      	cmp	r3, #9
 8010c12:	d90e      	bls.n	8010c32 <_vfiprintf_r+0x7be>
 8010c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c18:	1af6      	subs	r6, r6, r3
 8010c1a:	001a      	movs	r2, r3
 8010c1c:	0030      	movs	r0, r6
 8010c1e:	f7f9 ffe6 	bl	800abee <strncpy>
 8010c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c24:	2400      	movs	r4, #0
 8010c26:	785b      	ldrb	r3, [r3, #1]
 8010c28:	1e5a      	subs	r2, r3, #1
 8010c2a:	4193      	sbcs	r3, r2
 8010c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c2e:	18d3      	adds	r3, r2, r3
 8010c30:	930d      	str	r3, [sp, #52]	; 0x34
 8010c32:	9b01      	ldr	r3, [sp, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d103      	bne.n	8010c40 <_vfiprintf_r+0x7cc>
 8010c38:	9b00      	ldr	r3, [sp, #0]
 8010c3a:	2b09      	cmp	r3, #9
 8010c3c:	d800      	bhi.n	8010c40 <_vfiprintf_r+0x7cc>
 8010c3e:	e0de      	b.n	8010dfe <_vfiprintf_r+0x98a>
 8010c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c46:	9301      	str	r3, [sp, #4]
 8010c48:	e7c9      	b.n	8010bde <_vfiprintf_r+0x76a>
 8010c4a:	200f      	movs	r0, #15
 8010c4c:	9b00      	ldr	r3, [sp, #0]
 8010c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c50:	4003      	ands	r3, r0
 8010c52:	5cd3      	ldrb	r3, [r2, r3]
 8010c54:	3e01      	subs	r6, #1
 8010c56:	7033      	strb	r3, [r6, #0]
 8010c58:	9b01      	ldr	r3, [sp, #4]
 8010c5a:	0719      	lsls	r1, r3, #28
 8010c5c:	9b00      	ldr	r3, [sp, #0]
 8010c5e:	091a      	lsrs	r2, r3, #4
 8010c60:	9b01      	ldr	r3, [sp, #4]
 8010c62:	4311      	orrs	r1, r2
 8010c64:	091b      	lsrs	r3, r3, #4
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	000b      	movs	r3, r1
 8010c6a:	9a01      	ldr	r2, [sp, #4]
 8010c6c:	9100      	str	r1, [sp, #0]
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	d1ec      	bne.n	8010c4c <_vfiprintf_r+0x7d8>
 8010c72:	e0c4      	b.n	8010dfe <_vfiprintf_r+0x98a>
 8010c74:	ae40      	add	r6, sp, #256	; 0x100
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d000      	beq.n	8010c7c <_vfiprintf_r+0x808>
 8010c7a:	e0c0      	b.n	8010dfe <_vfiprintf_r+0x98a>
 8010c7c:	07e4      	lsls	r4, r4, #31
 8010c7e:	d400      	bmi.n	8010c82 <_vfiprintf_r+0x80e>
 8010c80:	e0bd      	b.n	8010dfe <_vfiprintf_r+0x98a>
 8010c82:	26b7      	movs	r6, #183	; 0xb7
 8010c84:	ab12      	add	r3, sp, #72	; 0x48
 8010c86:	18f6      	adds	r6, r6, r3
 8010c88:	2330      	movs	r3, #48	; 0x30
 8010c8a:	e7a0      	b.n	8010bce <_vfiprintf_r+0x75a>
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d100      	bne.n	8010c92 <_vfiprintf_r+0x81e>
 8010c90:	e07e      	b.n	8010d90 <_vfiprintf_r+0x91c>
 8010c92:	ae27      	add	r6, sp, #156	; 0x9c
 8010c94:	7033      	strb	r3, [r6, #0]
 8010c96:	2300      	movs	r3, #0
 8010c98:	aa12      	add	r2, sp, #72	; 0x48
 8010c9a:	70d3      	strb	r3, [r2, #3]
 8010c9c:	9704      	str	r7, [sp, #16]
 8010c9e:	e576      	b.n	801078e <_vfiprintf_r+0x31a>
 8010ca0:	2010      	movs	r0, #16
 8010ca2:	1812      	adds	r2, r2, r0
 8010ca4:	6068      	str	r0, [r5, #4]
 8010ca6:	9216      	str	r2, [sp, #88]	; 0x58
 8010ca8:	9315      	str	r3, [sp, #84]	; 0x54
 8010caa:	2b07      	cmp	r3, #7
 8010cac:	dd07      	ble.n	8010cbe <_vfiprintf_r+0x84a>
 8010cae:	9903      	ldr	r1, [sp, #12]
 8010cb0:	9806      	ldr	r0, [sp, #24]
 8010cb2:	aa14      	add	r2, sp, #80	; 0x50
 8010cb4:	f7ff fba9 	bl	801040a <__sprint_r>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d144      	bne.n	8010d46 <_vfiprintf_r+0x8d2>
 8010cbc:	a917      	add	r1, sp, #92	; 0x5c
 8010cbe:	000d      	movs	r5, r1
 8010cc0:	3f10      	subs	r7, #16
 8010cc2:	e63b      	b.n	801093c <_vfiprintf_r+0x4c8>
 8010cc4:	2010      	movs	r0, #16
 8010cc6:	1812      	adds	r2, r2, r0
 8010cc8:	6068      	str	r0, [r5, #4]
 8010cca:	9216      	str	r2, [sp, #88]	; 0x58
 8010ccc:	9315      	str	r3, [sp, #84]	; 0x54
 8010cce:	2b07      	cmp	r3, #7
 8010cd0:	dd07      	ble.n	8010ce2 <_vfiprintf_r+0x86e>
 8010cd2:	9903      	ldr	r1, [sp, #12]
 8010cd4:	9806      	ldr	r0, [sp, #24]
 8010cd6:	aa14      	add	r2, sp, #80	; 0x50
 8010cd8:	f7ff fb97 	bl	801040a <__sprint_r>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	d132      	bne.n	8010d46 <_vfiprintf_r+0x8d2>
 8010ce0:	a917      	add	r1, sp, #92	; 0x5c
 8010ce2:	000d      	movs	r5, r1
 8010ce4:	3f10      	subs	r7, #16
 8010ce6:	e67e      	b.n	80109e6 <_vfiprintf_r+0x572>
 8010ce8:	2010      	movs	r0, #16
 8010cea:	1812      	adds	r2, r2, r0
 8010cec:	6068      	str	r0, [r5, #4]
 8010cee:	9216      	str	r2, [sp, #88]	; 0x58
 8010cf0:	9315      	str	r3, [sp, #84]	; 0x54
 8010cf2:	2b07      	cmp	r3, #7
 8010cf4:	dd07      	ble.n	8010d06 <_vfiprintf_r+0x892>
 8010cf6:	9903      	ldr	r1, [sp, #12]
 8010cf8:	9806      	ldr	r0, [sp, #24]
 8010cfa:	aa14      	add	r2, sp, #80	; 0x50
 8010cfc:	f7ff fb85 	bl	801040a <__sprint_r>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d120      	bne.n	8010d46 <_vfiprintf_r+0x8d2>
 8010d04:	a917      	add	r1, sp, #92	; 0x5c
 8010d06:	000d      	movs	r5, r1
 8010d08:	3f10      	subs	r7, #16
 8010d0a:	e68b      	b.n	8010a24 <_vfiprintf_r+0x5b0>
 8010d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d10:	2610      	movs	r6, #16
 8010d12:	1a9c      	subs	r4, r3, r2
 8010d14:	2c00      	cmp	r4, #0
 8010d16:	dc00      	bgt.n	8010d1a <_vfiprintf_r+0x8a6>
 8010d18:	e6b7      	b.n	8010a8a <_vfiprintf_r+0x616>
 8010d1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010d1c:	4a3b      	ldr	r2, [pc, #236]	; (8010e0c <_vfiprintf_r+0x998>)
 8010d1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d20:	3101      	adds	r1, #1
 8010d22:	602a      	str	r2, [r5, #0]
 8010d24:	2c10      	cmp	r4, #16
 8010d26:	dc22      	bgt.n	8010d6e <_vfiprintf_r+0x8fa>
 8010d28:	606c      	str	r4, [r5, #4]
 8010d2a:	18e4      	adds	r4, r4, r3
 8010d2c:	9416      	str	r4, [sp, #88]	; 0x58
 8010d2e:	9115      	str	r1, [sp, #84]	; 0x54
 8010d30:	2907      	cmp	r1, #7
 8010d32:	dc00      	bgt.n	8010d36 <_vfiprintf_r+0x8c2>
 8010d34:	e6a9      	b.n	8010a8a <_vfiprintf_r+0x616>
 8010d36:	9903      	ldr	r1, [sp, #12]
 8010d38:	9806      	ldr	r0, [sp, #24]
 8010d3a:	aa14      	add	r2, sp, #80	; 0x50
 8010d3c:	f7ff fb65 	bl	801040a <__sprint_r>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d100      	bne.n	8010d46 <_vfiprintf_r+0x8d2>
 8010d44:	e6a1      	b.n	8010a8a <_vfiprintf_r+0x616>
 8010d46:	9b03      	ldr	r3, [sp, #12]
 8010d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d4a:	07db      	lsls	r3, r3, #31
 8010d4c:	d407      	bmi.n	8010d5e <_vfiprintf_r+0x8ea>
 8010d4e:	9b03      	ldr	r3, [sp, #12]
 8010d50:	899b      	ldrh	r3, [r3, #12]
 8010d52:	059b      	lsls	r3, r3, #22
 8010d54:	d403      	bmi.n	8010d5e <_vfiprintf_r+0x8ea>
 8010d56:	9b03      	ldr	r3, [sp, #12]
 8010d58:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010d5a:	f7fa f808 	bl	800ad6e <__retarget_lock_release_recursive>
 8010d5e:	9b03      	ldr	r3, [sp, #12]
 8010d60:	899b      	ldrh	r3, [r3, #12]
 8010d62:	065b      	lsls	r3, r3, #25
 8010d64:	d401      	bmi.n	8010d6a <_vfiprintf_r+0x8f6>
 8010d66:	f7ff fbc3 	bl	80104f0 <_vfiprintf_r+0x7c>
 8010d6a:	f7ff fbbe 	bl	80104ea <_vfiprintf_r+0x76>
 8010d6e:	3310      	adds	r3, #16
 8010d70:	606e      	str	r6, [r5, #4]
 8010d72:	9316      	str	r3, [sp, #88]	; 0x58
 8010d74:	9115      	str	r1, [sp, #84]	; 0x54
 8010d76:	3508      	adds	r5, #8
 8010d78:	2907      	cmp	r1, #7
 8010d7a:	dd07      	ble.n	8010d8c <_vfiprintf_r+0x918>
 8010d7c:	9903      	ldr	r1, [sp, #12]
 8010d7e:	9806      	ldr	r0, [sp, #24]
 8010d80:	aa14      	add	r2, sp, #80	; 0x50
 8010d82:	f7ff fb42 	bl	801040a <__sprint_r>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d1dd      	bne.n	8010d46 <_vfiprintf_r+0x8d2>
 8010d8a:	ad17      	add	r5, sp, #92	; 0x5c
 8010d8c:	3c10      	subs	r4, #16
 8010d8e:	e7c4      	b.n	8010d1a <_vfiprintf_r+0x8a6>
 8010d90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d102      	bne.n	8010d9c <_vfiprintf_r+0x928>
 8010d96:	2300      	movs	r3, #0
 8010d98:	9315      	str	r3, [sp, #84]	; 0x54
 8010d9a:	e7d4      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010d9c:	9903      	ldr	r1, [sp, #12]
 8010d9e:	9806      	ldr	r0, [sp, #24]
 8010da0:	aa14      	add	r2, sp, #80	; 0x50
 8010da2:	f7ff fb32 	bl	801040a <__sprint_r>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d0f5      	beq.n	8010d96 <_vfiprintf_r+0x922>
 8010daa:	e7cc      	b.n	8010d46 <_vfiprintf_r+0x8d2>
 8010dac:	0027      	movs	r7, r4
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	d100      	bne.n	8010db4 <_vfiprintf_r+0x940>
 8010db2:	e51b      	b.n	80107ec <_vfiprintf_r+0x378>
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d100      	bne.n	8010dba <_vfiprintf_r+0x946>
 8010db8:	e6fe      	b.n	8010bb8 <_vfiprintf_r+0x744>
 8010dba:	ae40      	add	r6, sp, #256	; 0x100
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d100      	bne.n	8010dc2 <_vfiprintf_r+0x94e>
 8010dc0:	e743      	b.n	8010c4a <_vfiprintf_r+0x7d6>
 8010dc2:	2307      	movs	r3, #7
 8010dc4:	469c      	mov	ip, r3
 8010dc6:	4663      	mov	r3, ip
 8010dc8:	9900      	ldr	r1, [sp, #0]
 8010dca:	0032      	movs	r2, r6
 8010dcc:	400b      	ands	r3, r1
 8010dce:	9901      	ldr	r1, [sp, #4]
 8010dd0:	3e01      	subs	r6, #1
 8010dd2:	074c      	lsls	r4, r1, #29
 8010dd4:	9900      	ldr	r1, [sp, #0]
 8010dd6:	3330      	adds	r3, #48	; 0x30
 8010dd8:	08c8      	lsrs	r0, r1, #3
 8010dda:	9901      	ldr	r1, [sp, #4]
 8010ddc:	4304      	orrs	r4, r0
 8010dde:	08c9      	lsrs	r1, r1, #3
 8010de0:	9101      	str	r1, [sp, #4]
 8010de2:	0021      	movs	r1, r4
 8010de4:	9801      	ldr	r0, [sp, #4]
 8010de6:	7033      	strb	r3, [r6, #0]
 8010de8:	9400      	str	r4, [sp, #0]
 8010dea:	4301      	orrs	r1, r0
 8010dec:	d1eb      	bne.n	8010dc6 <_vfiprintf_r+0x952>
 8010dee:	07f9      	lsls	r1, r7, #31
 8010df0:	d505      	bpl.n	8010dfe <_vfiprintf_r+0x98a>
 8010df2:	2b30      	cmp	r3, #48	; 0x30
 8010df4:	d003      	beq.n	8010dfe <_vfiprintf_r+0x98a>
 8010df6:	2330      	movs	r3, #48	; 0x30
 8010df8:	3e01      	subs	r6, #1
 8010dfa:	7033      	strb	r3, [r6, #0]
 8010dfc:	1e96      	subs	r6, r2, #2
 8010dfe:	9b05      	ldr	r3, [sp, #20]
 8010e00:	003c      	movs	r4, r7
 8010e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e04:	ab40      	add	r3, sp, #256	; 0x100
 8010e06:	1b9b      	subs	r3, r3, r6
 8010e08:	9305      	str	r3, [sp, #20]
 8010e0a:	e575      	b.n	80108f8 <_vfiprintf_r+0x484>
 8010e0c:	08013371 	.word	0x08013371

08010e10 <__sbprintf>:
 8010e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e12:	0015      	movs	r5, r2
 8010e14:	2202      	movs	r2, #2
 8010e16:	4c1e      	ldr	r4, [pc, #120]	; (8010e90 <__sbprintf+0x80>)
 8010e18:	001f      	movs	r7, r3
 8010e1a:	898b      	ldrh	r3, [r1, #12]
 8010e1c:	44a5      	add	sp, r4
 8010e1e:	4393      	bics	r3, r2
 8010e20:	466a      	mov	r2, sp
 8010e22:	8193      	strh	r3, [r2, #12]
 8010e24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010e26:	0006      	movs	r6, r0
 8010e28:	9319      	str	r3, [sp, #100]	; 0x64
 8010e2a:	89cb      	ldrh	r3, [r1, #14]
 8010e2c:	a816      	add	r0, sp, #88	; 0x58
 8010e2e:	81d3      	strh	r3, [r2, #14]
 8010e30:	69cb      	ldr	r3, [r1, #28]
 8010e32:	000c      	movs	r4, r1
 8010e34:	9307      	str	r3, [sp, #28]
 8010e36:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010e38:	9309      	str	r3, [sp, #36]	; 0x24
 8010e3a:	ab1a      	add	r3, sp, #104	; 0x68
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	9304      	str	r3, [sp, #16]
 8010e40:	2380      	movs	r3, #128	; 0x80
 8010e42:	00db      	lsls	r3, r3, #3
 8010e44:	9302      	str	r3, [sp, #8]
 8010e46:	9305      	str	r3, [sp, #20]
 8010e48:	2300      	movs	r3, #0
 8010e4a:	9306      	str	r3, [sp, #24]
 8010e4c:	f7f9 ff8c 	bl	800ad68 <__retarget_lock_init_recursive>
 8010e50:	002a      	movs	r2, r5
 8010e52:	003b      	movs	r3, r7
 8010e54:	4669      	mov	r1, sp
 8010e56:	0030      	movs	r0, r6
 8010e58:	f7ff fb0c 	bl	8010474 <_vfiprintf_r>
 8010e5c:	1e05      	subs	r5, r0, #0
 8010e5e:	db07      	blt.n	8010e70 <__sbprintf+0x60>
 8010e60:	4669      	mov	r1, sp
 8010e62:	0030      	movs	r0, r6
 8010e64:	f7fd fdf6 	bl	800ea54 <_fflush_r>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d001      	beq.n	8010e70 <__sbprintf+0x60>
 8010e6c:	2501      	movs	r5, #1
 8010e6e:	426d      	negs	r5, r5
 8010e70:	466b      	mov	r3, sp
 8010e72:	899a      	ldrh	r2, [r3, #12]
 8010e74:	2340      	movs	r3, #64	; 0x40
 8010e76:	421a      	tst	r2, r3
 8010e78:	d002      	beq.n	8010e80 <__sbprintf+0x70>
 8010e7a:	89a2      	ldrh	r2, [r4, #12]
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	81a3      	strh	r3, [r4, #12]
 8010e80:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010e82:	f7f9 ff72 	bl	800ad6a <__retarget_lock_close_recursive>
 8010e86:	0028      	movs	r0, r5
 8010e88:	4b02      	ldr	r3, [pc, #8]	; (8010e94 <__sbprintf+0x84>)
 8010e8a:	449d      	add	sp, r3
 8010e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e8e:	46c0      	nop			; (mov r8, r8)
 8010e90:	fffffb94 	.word	0xfffffb94
 8010e94:	0000046c 	.word	0x0000046c

08010e98 <__sfvwrite_r>:
 8010e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e9a:	6893      	ldr	r3, [r2, #8]
 8010e9c:	b087      	sub	sp, #28
 8010e9e:	000c      	movs	r4, r1
 8010ea0:	9002      	str	r0, [sp, #8]
 8010ea2:	9204      	str	r2, [sp, #16]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d102      	bne.n	8010eae <__sfvwrite_r+0x16>
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	b007      	add	sp, #28
 8010eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eae:	898b      	ldrh	r3, [r1, #12]
 8010eb0:	071b      	lsls	r3, r3, #28
 8010eb2:	d557      	bpl.n	8010f64 <__sfvwrite_r+0xcc>
 8010eb4:	690b      	ldr	r3, [r1, #16]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d054      	beq.n	8010f64 <__sfvwrite_r+0xcc>
 8010eba:	9b04      	ldr	r3, [sp, #16]
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	9301      	str	r3, [sp, #4]
 8010ec2:	89a3      	ldrh	r3, [r4, #12]
 8010ec4:	001f      	movs	r7, r3
 8010ec6:	4017      	ands	r7, r2
 8010ec8:	4213      	tst	r3, r2
 8010eca:	d171      	bne.n	8010fb0 <__sfvwrite_r+0x118>
 8010ecc:	2201      	movs	r2, #1
 8010ece:	2101      	movs	r1, #1
 8010ed0:	401a      	ands	r2, r3
 8010ed2:	420b      	tst	r3, r1
 8010ed4:	d100      	bne.n	8010ed8 <__sfvwrite_r+0x40>
 8010ed6:	e0a5      	b.n	8011024 <__sfvwrite_r+0x18c>
 8010ed8:	0038      	movs	r0, r7
 8010eda:	003e      	movs	r6, r7
 8010edc:	9703      	str	r7, [sp, #12]
 8010ede:	9b03      	ldr	r3, [sp, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d100      	bne.n	8010ee6 <__sfvwrite_r+0x4e>
 8010ee4:	e10b      	b.n	80110fe <__sfvwrite_r+0x266>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	d10a      	bne.n	8010f00 <__sfvwrite_r+0x68>
 8010eea:	001a      	movs	r2, r3
 8010eec:	210a      	movs	r1, #10
 8010eee:	0030      	movs	r0, r6
 8010ef0:	f7fd fe2a 	bl	800eb48 <memchr>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	1c5f      	adds	r7, r3, #1
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d001      	beq.n	8010f00 <__sfvwrite_r+0x68>
 8010efc:	3001      	adds	r0, #1
 8010efe:	1b87      	subs	r7, r0, r6
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	9705      	str	r7, [sp, #20]
 8010f04:	429f      	cmp	r7, r3
 8010f06:	d900      	bls.n	8010f0a <__sfvwrite_r+0x72>
 8010f08:	9305      	str	r3, [sp, #20]
 8010f0a:	6820      	ldr	r0, [r4, #0]
 8010f0c:	6922      	ldr	r2, [r4, #16]
 8010f0e:	68a5      	ldr	r5, [r4, #8]
 8010f10:	6963      	ldr	r3, [r4, #20]
 8010f12:	4290      	cmp	r0, r2
 8010f14:	d800      	bhi.n	8010f18 <__sfvwrite_r+0x80>
 8010f16:	e0fb      	b.n	8011110 <__sfvwrite_r+0x278>
 8010f18:	9a05      	ldr	r2, [sp, #20]
 8010f1a:	18ed      	adds	r5, r5, r3
 8010f1c:	42aa      	cmp	r2, r5
 8010f1e:	dc00      	bgt.n	8010f22 <__sfvwrite_r+0x8a>
 8010f20:	e0f6      	b.n	8011110 <__sfvwrite_r+0x278>
 8010f22:	0031      	movs	r1, r6
 8010f24:	002a      	movs	r2, r5
 8010f26:	f000 fa1e 	bl	8011366 <memmove>
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	0021      	movs	r1, r4
 8010f2e:	195b      	adds	r3, r3, r5
 8010f30:	9802      	ldr	r0, [sp, #8]
 8010f32:	6023      	str	r3, [r4, #0]
 8010f34:	f7fd fd8e 	bl	800ea54 <_fflush_r>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d16e      	bne.n	801101a <__sfvwrite_r+0x182>
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	1b7f      	subs	r7, r7, r5
 8010f40:	d105      	bne.n	8010f4e <__sfvwrite_r+0xb6>
 8010f42:	0021      	movs	r1, r4
 8010f44:	9802      	ldr	r0, [sp, #8]
 8010f46:	f7fd fd85 	bl	800ea54 <_fflush_r>
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d165      	bne.n	801101a <__sfvwrite_r+0x182>
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	9a04      	ldr	r2, [sp, #16]
 8010f52:	1b5b      	subs	r3, r3, r5
 8010f54:	9303      	str	r3, [sp, #12]
 8010f56:	9b04      	ldr	r3, [sp, #16]
 8010f58:	1976      	adds	r6, r6, r5
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	1b5b      	subs	r3, r3, r5
 8010f5e:	6093      	str	r3, [r2, #8]
 8010f60:	d1bd      	bne.n	8010ede <__sfvwrite_r+0x46>
 8010f62:	e7a1      	b.n	8010ea8 <__sfvwrite_r+0x10>
 8010f64:	0021      	movs	r1, r4
 8010f66:	9802      	ldr	r0, [sp, #8]
 8010f68:	f000 f932 	bl	80111d0 <__swsetup_r>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d0a4      	beq.n	8010eba <__sfvwrite_r+0x22>
 8010f70:	2001      	movs	r0, #1
 8010f72:	4240      	negs	r0, r0
 8010f74:	e799      	b.n	8010eaa <__sfvwrite_r+0x12>
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	681e      	ldr	r6, [r3, #0]
 8010f7a:	685d      	ldr	r5, [r3, #4]
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010f82:	69e1      	ldr	r1, [r4, #28]
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	d0f6      	beq.n	8010f76 <__sfvwrite_r+0xde>
 8010f88:	4a6e      	ldr	r2, [pc, #440]	; (8011144 <__sfvwrite_r+0x2ac>)
 8010f8a:	002b      	movs	r3, r5
 8010f8c:	4295      	cmp	r5, r2
 8010f8e:	d900      	bls.n	8010f92 <__sfvwrite_r+0xfa>
 8010f90:	0013      	movs	r3, r2
 8010f92:	0032      	movs	r2, r6
 8010f94:	9802      	ldr	r0, [sp, #8]
 8010f96:	47b8      	blx	r7
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	dd3e      	ble.n	801101a <__sfvwrite_r+0x182>
 8010f9c:	9b04      	ldr	r3, [sp, #16]
 8010f9e:	9a04      	ldr	r2, [sp, #16]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	1836      	adds	r6, r6, r0
 8010fa4:	1a1b      	subs	r3, r3, r0
 8010fa6:	1a2d      	subs	r5, r5, r0
 8010fa8:	6093      	str	r3, [r2, #8]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1e8      	bne.n	8010f80 <__sfvwrite_r+0xe8>
 8010fae:	e77b      	b.n	8010ea8 <__sfvwrite_r+0x10>
 8010fb0:	2600      	movs	r6, #0
 8010fb2:	0035      	movs	r5, r6
 8010fb4:	e7e4      	b.n	8010f80 <__sfvwrite_r+0xe8>
 8010fb6:	9b01      	ldr	r3, [sp, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	9303      	str	r3, [sp, #12]
 8010fbc:	9b01      	ldr	r3, [sp, #4]
 8010fbe:	685d      	ldr	r5, [r3, #4]
 8010fc0:	3308      	adds	r3, #8
 8010fc2:	9301      	str	r3, [sp, #4]
 8010fc4:	220c      	movs	r2, #12
 8010fc6:	5ea3      	ldrsh	r3, [r4, r2]
 8010fc8:	6820      	ldr	r0, [r4, #0]
 8010fca:	68a6      	ldr	r6, [r4, #8]
 8010fcc:	2d00      	cmp	r5, #0
 8010fce:	d0f2      	beq.n	8010fb6 <__sfvwrite_r+0x11e>
 8010fd0:	2180      	movs	r1, #128	; 0x80
 8010fd2:	0089      	lsls	r1, r1, #2
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	420b      	tst	r3, r1
 8010fd8:	d062      	beq.n	80110a0 <__sfvwrite_r+0x208>
 8010fda:	42ae      	cmp	r6, r5
 8010fdc:	d837      	bhi.n	801104e <__sfvwrite_r+0x1b6>
 8010fde:	2390      	movs	r3, #144	; 0x90
 8010fe0:	00db      	lsls	r3, r3, #3
 8010fe2:	421a      	tst	r2, r3
 8010fe4:	d033      	beq.n	801104e <__sfvwrite_r+0x1b6>
 8010fe6:	6921      	ldr	r1, [r4, #16]
 8010fe8:	1a43      	subs	r3, r0, r1
 8010fea:	2003      	movs	r0, #3
 8010fec:	9305      	str	r3, [sp, #20]
 8010fee:	6963      	ldr	r3, [r4, #20]
 8010ff0:	4343      	muls	r3, r0
 8010ff2:	0fdf      	lsrs	r7, r3, #31
 8010ff4:	18ff      	adds	r7, r7, r3
 8010ff6:	9b05      	ldr	r3, [sp, #20]
 8010ff8:	107f      	asrs	r7, r7, #1
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	195b      	adds	r3, r3, r5
 8010ffe:	42bb      	cmp	r3, r7
 8011000:	d900      	bls.n	8011004 <__sfvwrite_r+0x16c>
 8011002:	001f      	movs	r7, r3
 8011004:	0552      	lsls	r2, r2, #21
 8011006:	d53c      	bpl.n	8011082 <__sfvwrite_r+0x1ea>
 8011008:	0039      	movs	r1, r7
 801100a:	9802      	ldr	r0, [sp, #8]
 801100c:	f7f8 fb56 	bl	80096bc <_malloc_r>
 8011010:	1e06      	subs	r6, r0, #0
 8011012:	d10a      	bne.n	801102a <__sfvwrite_r+0x192>
 8011014:	230c      	movs	r3, #12
 8011016:	9a02      	ldr	r2, [sp, #8]
 8011018:	6013      	str	r3, [r2, #0]
 801101a:	2340      	movs	r3, #64	; 0x40
 801101c:	89a2      	ldrh	r2, [r4, #12]
 801101e:	4313      	orrs	r3, r2
 8011020:	81a3      	strh	r3, [r4, #12]
 8011022:	e7a5      	b.n	8010f70 <__sfvwrite_r+0xd8>
 8011024:	0015      	movs	r5, r2
 8011026:	9203      	str	r2, [sp, #12]
 8011028:	e7cc      	b.n	8010fc4 <__sfvwrite_r+0x12c>
 801102a:	9a05      	ldr	r2, [sp, #20]
 801102c:	6921      	ldr	r1, [r4, #16]
 801102e:	f7f9 feaa 	bl	800ad86 <memcpy>
 8011032:	89a2      	ldrh	r2, [r4, #12]
 8011034:	4b44      	ldr	r3, [pc, #272]	; (8011148 <__sfvwrite_r+0x2b0>)
 8011036:	401a      	ands	r2, r3
 8011038:	2380      	movs	r3, #128	; 0x80
 801103a:	4313      	orrs	r3, r2
 801103c:	81a3      	strh	r3, [r4, #12]
 801103e:	9b05      	ldr	r3, [sp, #20]
 8011040:	6126      	str	r6, [r4, #16]
 8011042:	18f6      	adds	r6, r6, r3
 8011044:	6026      	str	r6, [r4, #0]
 8011046:	002e      	movs	r6, r5
 8011048:	6167      	str	r7, [r4, #20]
 801104a:	1aff      	subs	r7, r7, r3
 801104c:	60a7      	str	r7, [r4, #8]
 801104e:	002f      	movs	r7, r5
 8011050:	42ae      	cmp	r6, r5
 8011052:	d900      	bls.n	8011056 <__sfvwrite_r+0x1be>
 8011054:	002e      	movs	r6, r5
 8011056:	0032      	movs	r2, r6
 8011058:	9903      	ldr	r1, [sp, #12]
 801105a:	6820      	ldr	r0, [r4, #0]
 801105c:	f000 f983 	bl	8011366 <memmove>
 8011060:	68a3      	ldr	r3, [r4, #8]
 8011062:	1b9b      	subs	r3, r3, r6
 8011064:	60a3      	str	r3, [r4, #8]
 8011066:	6823      	ldr	r3, [r4, #0]
 8011068:	199b      	adds	r3, r3, r6
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	9a04      	ldr	r2, [sp, #16]
 8011070:	19db      	adds	r3, r3, r7
 8011072:	9303      	str	r3, [sp, #12]
 8011074:	9b04      	ldr	r3, [sp, #16]
 8011076:	1bed      	subs	r5, r5, r7
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	1bdb      	subs	r3, r3, r7
 801107c:	6093      	str	r3, [r2, #8]
 801107e:	d1a1      	bne.n	8010fc4 <__sfvwrite_r+0x12c>
 8011080:	e712      	b.n	8010ea8 <__sfvwrite_r+0x10>
 8011082:	003a      	movs	r2, r7
 8011084:	9802      	ldr	r0, [sp, #8]
 8011086:	f7fe fcd7 	bl	800fa38 <_realloc_r>
 801108a:	1e06      	subs	r6, r0, #0
 801108c:	d1d7      	bne.n	801103e <__sfvwrite_r+0x1a6>
 801108e:	6921      	ldr	r1, [r4, #16]
 8011090:	9802      	ldr	r0, [sp, #8]
 8011092:	f7f9 fef3 	bl	800ae7c <_free_r>
 8011096:	2280      	movs	r2, #128	; 0x80
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	4393      	bics	r3, r2
 801109c:	81a3      	strh	r3, [r4, #12]
 801109e:	e7b9      	b.n	8011014 <__sfvwrite_r+0x17c>
 80110a0:	6923      	ldr	r3, [r4, #16]
 80110a2:	4283      	cmp	r3, r0
 80110a4:	d302      	bcc.n	80110ac <__sfvwrite_r+0x214>
 80110a6:	6967      	ldr	r7, [r4, #20]
 80110a8:	42af      	cmp	r7, r5
 80110aa:	d916      	bls.n	80110da <__sfvwrite_r+0x242>
 80110ac:	42ae      	cmp	r6, r5
 80110ae:	d900      	bls.n	80110b2 <__sfvwrite_r+0x21a>
 80110b0:	002e      	movs	r6, r5
 80110b2:	0032      	movs	r2, r6
 80110b4:	9903      	ldr	r1, [sp, #12]
 80110b6:	f000 f956 	bl	8011366 <memmove>
 80110ba:	68a3      	ldr	r3, [r4, #8]
 80110bc:	6822      	ldr	r2, [r4, #0]
 80110be:	1b9b      	subs	r3, r3, r6
 80110c0:	1992      	adds	r2, r2, r6
 80110c2:	0037      	movs	r7, r6
 80110c4:	60a3      	str	r3, [r4, #8]
 80110c6:	6022      	str	r2, [r4, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1cf      	bne.n	801106c <__sfvwrite_r+0x1d4>
 80110cc:	0021      	movs	r1, r4
 80110ce:	9802      	ldr	r0, [sp, #8]
 80110d0:	f7fd fcc0 	bl	800ea54 <_fflush_r>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d0c9      	beq.n	801106c <__sfvwrite_r+0x1d4>
 80110d8:	e79f      	b.n	801101a <__sfvwrite_r+0x182>
 80110da:	4b1c      	ldr	r3, [pc, #112]	; (801114c <__sfvwrite_r+0x2b4>)
 80110dc:	0028      	movs	r0, r5
 80110de:	429d      	cmp	r5, r3
 80110e0:	d900      	bls.n	80110e4 <__sfvwrite_r+0x24c>
 80110e2:	481b      	ldr	r0, [pc, #108]	; (8011150 <__sfvwrite_r+0x2b8>)
 80110e4:	0039      	movs	r1, r7
 80110e6:	f7ef f8b3 	bl	8000250 <__divsi3>
 80110ea:	003b      	movs	r3, r7
 80110ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80110ee:	4343      	muls	r3, r0
 80110f0:	9a03      	ldr	r2, [sp, #12]
 80110f2:	69e1      	ldr	r1, [r4, #28]
 80110f4:	9802      	ldr	r0, [sp, #8]
 80110f6:	47b0      	blx	r6
 80110f8:	1e07      	subs	r7, r0, #0
 80110fa:	dcb7      	bgt.n	801106c <__sfvwrite_r+0x1d4>
 80110fc:	e78d      	b.n	801101a <__sfvwrite_r+0x182>
 80110fe:	9b01      	ldr	r3, [sp, #4]
 8011100:	2000      	movs	r0, #0
 8011102:	681e      	ldr	r6, [r3, #0]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	9303      	str	r3, [sp, #12]
 8011108:	9b01      	ldr	r3, [sp, #4]
 801110a:	3308      	adds	r3, #8
 801110c:	9301      	str	r3, [sp, #4]
 801110e:	e6e6      	b.n	8010ede <__sfvwrite_r+0x46>
 8011110:	9a05      	ldr	r2, [sp, #20]
 8011112:	4293      	cmp	r3, r2
 8011114:	dc08      	bgt.n	8011128 <__sfvwrite_r+0x290>
 8011116:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011118:	0032      	movs	r2, r6
 801111a:	69e1      	ldr	r1, [r4, #28]
 801111c:	9802      	ldr	r0, [sp, #8]
 801111e:	47a8      	blx	r5
 8011120:	1e05      	subs	r5, r0, #0
 8011122:	dd00      	ble.n	8011126 <__sfvwrite_r+0x28e>
 8011124:	e70a      	b.n	8010f3c <__sfvwrite_r+0xa4>
 8011126:	e778      	b.n	801101a <__sfvwrite_r+0x182>
 8011128:	9a05      	ldr	r2, [sp, #20]
 801112a:	0031      	movs	r1, r6
 801112c:	f000 f91b 	bl	8011366 <memmove>
 8011130:	9a05      	ldr	r2, [sp, #20]
 8011132:	68a3      	ldr	r3, [r4, #8]
 8011134:	0015      	movs	r5, r2
 8011136:	1a9b      	subs	r3, r3, r2
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	6823      	ldr	r3, [r4, #0]
 801113c:	189b      	adds	r3, r3, r2
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	e6fc      	b.n	8010f3c <__sfvwrite_r+0xa4>
 8011142:	46c0      	nop			; (mov r8, r8)
 8011144:	7ffffc00 	.word	0x7ffffc00
 8011148:	fffffb7f 	.word	0xfffffb7f
 801114c:	7ffffffe 	.word	0x7ffffffe
 8011150:	7fffffff 	.word	0x7fffffff

08011154 <__submore>:
 8011154:	000b      	movs	r3, r1
 8011156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011158:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801115a:	3340      	adds	r3, #64	; 0x40
 801115c:	000c      	movs	r4, r1
 801115e:	429d      	cmp	r5, r3
 8011160:	d11c      	bne.n	801119c <__submore+0x48>
 8011162:	2680      	movs	r6, #128	; 0x80
 8011164:	00f6      	lsls	r6, r6, #3
 8011166:	0031      	movs	r1, r6
 8011168:	f7f8 faa8 	bl	80096bc <_malloc_r>
 801116c:	2800      	cmp	r0, #0
 801116e:	d102      	bne.n	8011176 <__submore+0x22>
 8011170:	2001      	movs	r0, #1
 8011172:	4240      	negs	r0, r0
 8011174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011176:	0023      	movs	r3, r4
 8011178:	6320      	str	r0, [r4, #48]	; 0x30
 801117a:	6366      	str	r6, [r4, #52]	; 0x34
 801117c:	3342      	adds	r3, #66	; 0x42
 801117e:	781a      	ldrb	r2, [r3, #0]
 8011180:	4b10      	ldr	r3, [pc, #64]	; (80111c4 <__submore+0x70>)
 8011182:	54c2      	strb	r2, [r0, r3]
 8011184:	0023      	movs	r3, r4
 8011186:	3341      	adds	r3, #65	; 0x41
 8011188:	781a      	ldrb	r2, [r3, #0]
 801118a:	4b0f      	ldr	r3, [pc, #60]	; (80111c8 <__submore+0x74>)
 801118c:	54c2      	strb	r2, [r0, r3]
 801118e:	782a      	ldrb	r2, [r5, #0]
 8011190:	4b0e      	ldr	r3, [pc, #56]	; (80111cc <__submore+0x78>)
 8011192:	54c2      	strb	r2, [r0, r3]
 8011194:	18c0      	adds	r0, r0, r3
 8011196:	6020      	str	r0, [r4, #0]
 8011198:	2000      	movs	r0, #0
 801119a:	e7eb      	b.n	8011174 <__submore+0x20>
 801119c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801119e:	0029      	movs	r1, r5
 80111a0:	0073      	lsls	r3, r6, #1
 80111a2:	001a      	movs	r2, r3
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	f7fe fc47 	bl	800fa38 <_realloc_r>
 80111aa:	1e05      	subs	r5, r0, #0
 80111ac:	d0e0      	beq.n	8011170 <__submore+0x1c>
 80111ae:	1987      	adds	r7, r0, r6
 80111b0:	0001      	movs	r1, r0
 80111b2:	0032      	movs	r2, r6
 80111b4:	0038      	movs	r0, r7
 80111b6:	f7f9 fde6 	bl	800ad86 <memcpy>
 80111ba:	9b01      	ldr	r3, [sp, #4]
 80111bc:	6027      	str	r7, [r4, #0]
 80111be:	6325      	str	r5, [r4, #48]	; 0x30
 80111c0:	6363      	str	r3, [r4, #52]	; 0x34
 80111c2:	e7e9      	b.n	8011198 <__submore+0x44>
 80111c4:	000003ff 	.word	0x000003ff
 80111c8:	000003fe 	.word	0x000003fe
 80111cc:	000003fd 	.word	0x000003fd

080111d0 <__swsetup_r>:
 80111d0:	4b30      	ldr	r3, [pc, #192]	; (8011294 <__swsetup_r+0xc4>)
 80111d2:	b570      	push	{r4, r5, r6, lr}
 80111d4:	0005      	movs	r5, r0
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	000c      	movs	r4, r1
 80111da:	2800      	cmp	r0, #0
 80111dc:	d004      	beq.n	80111e8 <__swsetup_r+0x18>
 80111de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d101      	bne.n	80111e8 <__swsetup_r+0x18>
 80111e4:	f7f9 fbec 	bl	800a9c0 <__sinit>
 80111e8:	230c      	movs	r3, #12
 80111ea:	5ee2      	ldrsh	r2, [r4, r3]
 80111ec:	b293      	uxth	r3, r2
 80111ee:	0711      	lsls	r1, r2, #28
 80111f0:	d423      	bmi.n	801123a <__swsetup_r+0x6a>
 80111f2:	06d9      	lsls	r1, r3, #27
 80111f4:	d407      	bmi.n	8011206 <__swsetup_r+0x36>
 80111f6:	2309      	movs	r3, #9
 80111f8:	2001      	movs	r0, #1
 80111fa:	602b      	str	r3, [r5, #0]
 80111fc:	3337      	adds	r3, #55	; 0x37
 80111fe:	4313      	orrs	r3, r2
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	4240      	negs	r0, r0
 8011204:	bd70      	pop	{r4, r5, r6, pc}
 8011206:	075b      	lsls	r3, r3, #29
 8011208:	d513      	bpl.n	8011232 <__swsetup_r+0x62>
 801120a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801120c:	2900      	cmp	r1, #0
 801120e:	d008      	beq.n	8011222 <__swsetup_r+0x52>
 8011210:	0023      	movs	r3, r4
 8011212:	3340      	adds	r3, #64	; 0x40
 8011214:	4299      	cmp	r1, r3
 8011216:	d002      	beq.n	801121e <__swsetup_r+0x4e>
 8011218:	0028      	movs	r0, r5
 801121a:	f7f9 fe2f 	bl	800ae7c <_free_r>
 801121e:	2300      	movs	r3, #0
 8011220:	6323      	str	r3, [r4, #48]	; 0x30
 8011222:	2224      	movs	r2, #36	; 0x24
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	4393      	bics	r3, r2
 8011228:	81a3      	strh	r3, [r4, #12]
 801122a:	2300      	movs	r3, #0
 801122c:	6063      	str	r3, [r4, #4]
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	6023      	str	r3, [r4, #0]
 8011232:	2308      	movs	r3, #8
 8011234:	89a2      	ldrh	r2, [r4, #12]
 8011236:	4313      	orrs	r3, r2
 8011238:	81a3      	strh	r3, [r4, #12]
 801123a:	6923      	ldr	r3, [r4, #16]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10b      	bne.n	8011258 <__swsetup_r+0x88>
 8011240:	21a0      	movs	r1, #160	; 0xa0
 8011242:	2280      	movs	r2, #128	; 0x80
 8011244:	89a3      	ldrh	r3, [r4, #12]
 8011246:	0089      	lsls	r1, r1, #2
 8011248:	0092      	lsls	r2, r2, #2
 801124a:	400b      	ands	r3, r1
 801124c:	4293      	cmp	r3, r2
 801124e:	d003      	beq.n	8011258 <__swsetup_r+0x88>
 8011250:	0021      	movs	r1, r4
 8011252:	0028      	movs	r0, r5
 8011254:	f000 f8e8 	bl	8011428 <__smakebuf_r>
 8011258:	220c      	movs	r2, #12
 801125a:	5ea3      	ldrsh	r3, [r4, r2]
 801125c:	2001      	movs	r0, #1
 801125e:	001a      	movs	r2, r3
 8011260:	b299      	uxth	r1, r3
 8011262:	4002      	ands	r2, r0
 8011264:	4203      	tst	r3, r0
 8011266:	d00f      	beq.n	8011288 <__swsetup_r+0xb8>
 8011268:	2200      	movs	r2, #0
 801126a:	60a2      	str	r2, [r4, #8]
 801126c:	6962      	ldr	r2, [r4, #20]
 801126e:	4252      	negs	r2, r2
 8011270:	61a2      	str	r2, [r4, #24]
 8011272:	2000      	movs	r0, #0
 8011274:	6922      	ldr	r2, [r4, #16]
 8011276:	4282      	cmp	r2, r0
 8011278:	d1c4      	bne.n	8011204 <__swsetup_r+0x34>
 801127a:	0609      	lsls	r1, r1, #24
 801127c:	d5c2      	bpl.n	8011204 <__swsetup_r+0x34>
 801127e:	2240      	movs	r2, #64	; 0x40
 8011280:	4313      	orrs	r3, r2
 8011282:	81a3      	strh	r3, [r4, #12]
 8011284:	3801      	subs	r0, #1
 8011286:	e7bd      	b.n	8011204 <__swsetup_r+0x34>
 8011288:	0788      	lsls	r0, r1, #30
 801128a:	d400      	bmi.n	801128e <__swsetup_r+0xbe>
 801128c:	6962      	ldr	r2, [r4, #20]
 801128e:	60a2      	str	r2, [r4, #8]
 8011290:	e7ef      	b.n	8011272 <__swsetup_r+0xa2>
 8011292:	46c0      	nop			; (mov r8, r8)
 8011294:	200006e0 	.word	0x200006e0

08011298 <__fputwc>:
 8011298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801129a:	b085      	sub	sp, #20
 801129c:	000e      	movs	r6, r1
 801129e:	0015      	movs	r5, r2
 80112a0:	9001      	str	r0, [sp, #4]
 80112a2:	f7f9 fccf 	bl	800ac44 <__locale_mb_cur_max>
 80112a6:	0004      	movs	r4, r0
 80112a8:	2801      	cmp	r0, #1
 80112aa:	d119      	bne.n	80112e0 <__fputwc+0x48>
 80112ac:	1e73      	subs	r3, r6, #1
 80112ae:	2bfe      	cmp	r3, #254	; 0xfe
 80112b0:	d816      	bhi.n	80112e0 <__fputwc+0x48>
 80112b2:	ab02      	add	r3, sp, #8
 80112b4:	711e      	strb	r6, [r3, #4]
 80112b6:	2700      	movs	r7, #0
 80112b8:	42a7      	cmp	r7, r4
 80112ba:	d020      	beq.n	80112fe <__fputwc+0x66>
 80112bc:	ab03      	add	r3, sp, #12
 80112be:	5dd9      	ldrb	r1, [r3, r7]
 80112c0:	68ab      	ldr	r3, [r5, #8]
 80112c2:	3b01      	subs	r3, #1
 80112c4:	60ab      	str	r3, [r5, #8]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da04      	bge.n	80112d4 <__fputwc+0x3c>
 80112ca:	69aa      	ldr	r2, [r5, #24]
 80112cc:	4293      	cmp	r3, r2
 80112ce:	db19      	blt.n	8011304 <__fputwc+0x6c>
 80112d0:	290a      	cmp	r1, #10
 80112d2:	d017      	beq.n	8011304 <__fputwc+0x6c>
 80112d4:	682b      	ldr	r3, [r5, #0]
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	602a      	str	r2, [r5, #0]
 80112da:	7019      	strb	r1, [r3, #0]
 80112dc:	3701      	adds	r7, #1
 80112de:	e7eb      	b.n	80112b8 <__fputwc+0x20>
 80112e0:	002b      	movs	r3, r5
 80112e2:	0032      	movs	r2, r6
 80112e4:	9801      	ldr	r0, [sp, #4]
 80112e6:	335c      	adds	r3, #92	; 0x5c
 80112e8:	a903      	add	r1, sp, #12
 80112ea:	f000 f857 	bl	801139c <_wcrtomb_r>
 80112ee:	0004      	movs	r4, r0
 80112f0:	1c43      	adds	r3, r0, #1
 80112f2:	d1e0      	bne.n	80112b6 <__fputwc+0x1e>
 80112f4:	2340      	movs	r3, #64	; 0x40
 80112f6:	0006      	movs	r6, r0
 80112f8:	89aa      	ldrh	r2, [r5, #12]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	81ab      	strh	r3, [r5, #12]
 80112fe:	0030      	movs	r0, r6
 8011300:	b005      	add	sp, #20
 8011302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011304:	002a      	movs	r2, r5
 8011306:	9801      	ldr	r0, [sp, #4]
 8011308:	f000 f8cc 	bl	80114a4 <__swbuf_r>
 801130c:	1c43      	adds	r3, r0, #1
 801130e:	d1e5      	bne.n	80112dc <__fputwc+0x44>
 8011310:	0006      	movs	r6, r0
 8011312:	e7f4      	b.n	80112fe <__fputwc+0x66>

08011314 <_fputwc_r>:
 8011314:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011316:	b570      	push	{r4, r5, r6, lr}
 8011318:	0005      	movs	r5, r0
 801131a:	000e      	movs	r6, r1
 801131c:	0014      	movs	r4, r2
 801131e:	07db      	lsls	r3, r3, #31
 8011320:	d405      	bmi.n	801132e <_fputwc_r+0x1a>
 8011322:	8993      	ldrh	r3, [r2, #12]
 8011324:	059b      	lsls	r3, r3, #22
 8011326:	d402      	bmi.n	801132e <_fputwc_r+0x1a>
 8011328:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801132a:	f7f9 fd1f 	bl	800ad6c <__retarget_lock_acquire_recursive>
 801132e:	230c      	movs	r3, #12
 8011330:	5ee2      	ldrsh	r2, [r4, r3]
 8011332:	2380      	movs	r3, #128	; 0x80
 8011334:	019b      	lsls	r3, r3, #6
 8011336:	421a      	tst	r2, r3
 8011338:	d104      	bne.n	8011344 <_fputwc_r+0x30>
 801133a:	431a      	orrs	r2, r3
 801133c:	81a2      	strh	r2, [r4, #12]
 801133e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011340:	4313      	orrs	r3, r2
 8011342:	6663      	str	r3, [r4, #100]	; 0x64
 8011344:	0028      	movs	r0, r5
 8011346:	0022      	movs	r2, r4
 8011348:	0031      	movs	r1, r6
 801134a:	f7ff ffa5 	bl	8011298 <__fputwc>
 801134e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011350:	0005      	movs	r5, r0
 8011352:	07db      	lsls	r3, r3, #31
 8011354:	d405      	bmi.n	8011362 <_fputwc_r+0x4e>
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	059b      	lsls	r3, r3, #22
 801135a:	d402      	bmi.n	8011362 <_fputwc_r+0x4e>
 801135c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801135e:	f7f9 fd06 	bl	800ad6e <__retarget_lock_release_recursive>
 8011362:	0028      	movs	r0, r5
 8011364:	bd70      	pop	{r4, r5, r6, pc}

08011366 <memmove>:
 8011366:	b510      	push	{r4, lr}
 8011368:	4288      	cmp	r0, r1
 801136a:	d902      	bls.n	8011372 <memmove+0xc>
 801136c:	188b      	adds	r3, r1, r2
 801136e:	4298      	cmp	r0, r3
 8011370:	d303      	bcc.n	801137a <memmove+0x14>
 8011372:	2300      	movs	r3, #0
 8011374:	e007      	b.n	8011386 <memmove+0x20>
 8011376:	5c8b      	ldrb	r3, [r1, r2]
 8011378:	5483      	strb	r3, [r0, r2]
 801137a:	3a01      	subs	r2, #1
 801137c:	d2fb      	bcs.n	8011376 <memmove+0x10>
 801137e:	bd10      	pop	{r4, pc}
 8011380:	5ccc      	ldrb	r4, [r1, r3]
 8011382:	54c4      	strb	r4, [r0, r3]
 8011384:	3301      	adds	r3, #1
 8011386:	429a      	cmp	r2, r3
 8011388:	d1fa      	bne.n	8011380 <memmove+0x1a>
 801138a:	e7f8      	b.n	801137e <memmove+0x18>

0801138c <abort>:
 801138c:	2006      	movs	r0, #6
 801138e:	b510      	push	{r4, lr}
 8011390:	f000 f906 	bl	80115a0 <raise>
 8011394:	2001      	movs	r0, #1
 8011396:	f7f2 f935 	bl	8003604 <_exit>
	...

0801139c <_wcrtomb_r>:
 801139c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801139e:	001d      	movs	r5, r3
 80113a0:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <_wcrtomb_r+0x2c>)
 80113a2:	0004      	movs	r4, r0
 80113a4:	33e0      	adds	r3, #224	; 0xe0
 80113a6:	681e      	ldr	r6, [r3, #0]
 80113a8:	002b      	movs	r3, r5
 80113aa:	2900      	cmp	r1, #0
 80113ac:	d101      	bne.n	80113b2 <_wcrtomb_r+0x16>
 80113ae:	000a      	movs	r2, r1
 80113b0:	a901      	add	r1, sp, #4
 80113b2:	0020      	movs	r0, r4
 80113b4:	47b0      	blx	r6
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	d103      	bne.n	80113c2 <_wcrtomb_r+0x26>
 80113ba:	2300      	movs	r3, #0
 80113bc:	602b      	str	r3, [r5, #0]
 80113be:	338a      	adds	r3, #138	; 0x8a
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	b004      	add	sp, #16
 80113c4:	bd70      	pop	{r4, r5, r6, pc}
 80113c6:	46c0      	nop			; (mov r8, r8)
 80113c8:	20000454 	.word	0x20000454

080113cc <__swhatbuf_r>:
 80113cc:	b570      	push	{r4, r5, r6, lr}
 80113ce:	000e      	movs	r6, r1
 80113d0:	001d      	movs	r5, r3
 80113d2:	230e      	movs	r3, #14
 80113d4:	5ec9      	ldrsh	r1, [r1, r3]
 80113d6:	0014      	movs	r4, r2
 80113d8:	b096      	sub	sp, #88	; 0x58
 80113da:	2900      	cmp	r1, #0
 80113dc:	da09      	bge.n	80113f2 <__swhatbuf_r+0x26>
 80113de:	89b2      	ldrh	r2, [r6, #12]
 80113e0:	2380      	movs	r3, #128	; 0x80
 80113e2:	0011      	movs	r1, r2
 80113e4:	4019      	ands	r1, r3
 80113e6:	421a      	tst	r2, r3
 80113e8:	d018      	beq.n	801141c <__swhatbuf_r+0x50>
 80113ea:	2100      	movs	r1, #0
 80113ec:	3b40      	subs	r3, #64	; 0x40
 80113ee:	0008      	movs	r0, r1
 80113f0:	e010      	b.n	8011414 <__swhatbuf_r+0x48>
 80113f2:	466a      	mov	r2, sp
 80113f4:	f000 f8de 	bl	80115b4 <_fstat_r>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	dbf0      	blt.n	80113de <__swhatbuf_r+0x12>
 80113fc:	23f0      	movs	r3, #240	; 0xf0
 80113fe:	9901      	ldr	r1, [sp, #4]
 8011400:	021b      	lsls	r3, r3, #8
 8011402:	4019      	ands	r1, r3
 8011404:	4b07      	ldr	r3, [pc, #28]	; (8011424 <__swhatbuf_r+0x58>)
 8011406:	2080      	movs	r0, #128	; 0x80
 8011408:	18c9      	adds	r1, r1, r3
 801140a:	424b      	negs	r3, r1
 801140c:	4159      	adcs	r1, r3
 801140e:	2380      	movs	r3, #128	; 0x80
 8011410:	0100      	lsls	r0, r0, #4
 8011412:	00db      	lsls	r3, r3, #3
 8011414:	6029      	str	r1, [r5, #0]
 8011416:	6023      	str	r3, [r4, #0]
 8011418:	b016      	add	sp, #88	; 0x58
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	2380      	movs	r3, #128	; 0x80
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	e7e5      	b.n	80113ee <__swhatbuf_r+0x22>
 8011422:	46c0      	nop			; (mov r8, r8)
 8011424:	ffffe000 	.word	0xffffe000

08011428 <__smakebuf_r>:
 8011428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801142a:	2602      	movs	r6, #2
 801142c:	898b      	ldrh	r3, [r1, #12]
 801142e:	0005      	movs	r5, r0
 8011430:	000c      	movs	r4, r1
 8011432:	4233      	tst	r3, r6
 8011434:	d006      	beq.n	8011444 <__smakebuf_r+0x1c>
 8011436:	0023      	movs	r3, r4
 8011438:	3343      	adds	r3, #67	; 0x43
 801143a:	6023      	str	r3, [r4, #0]
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	2301      	movs	r3, #1
 8011440:	6163      	str	r3, [r4, #20]
 8011442:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011444:	466a      	mov	r2, sp
 8011446:	ab01      	add	r3, sp, #4
 8011448:	f7ff ffc0 	bl	80113cc <__swhatbuf_r>
 801144c:	9900      	ldr	r1, [sp, #0]
 801144e:	0007      	movs	r7, r0
 8011450:	0028      	movs	r0, r5
 8011452:	f7f8 f933 	bl	80096bc <_malloc_r>
 8011456:	2800      	cmp	r0, #0
 8011458:	d108      	bne.n	801146c <__smakebuf_r+0x44>
 801145a:	220c      	movs	r2, #12
 801145c:	5ea3      	ldrsh	r3, [r4, r2]
 801145e:	059a      	lsls	r2, r3, #22
 8011460:	d4ef      	bmi.n	8011442 <__smakebuf_r+0x1a>
 8011462:	2203      	movs	r2, #3
 8011464:	4393      	bics	r3, r2
 8011466:	431e      	orrs	r6, r3
 8011468:	81a6      	strh	r6, [r4, #12]
 801146a:	e7e4      	b.n	8011436 <__smakebuf_r+0xe>
 801146c:	2380      	movs	r3, #128	; 0x80
 801146e:	89a2      	ldrh	r2, [r4, #12]
 8011470:	6020      	str	r0, [r4, #0]
 8011472:	4313      	orrs	r3, r2
 8011474:	81a3      	strh	r3, [r4, #12]
 8011476:	9b00      	ldr	r3, [sp, #0]
 8011478:	6120      	str	r0, [r4, #16]
 801147a:	6163      	str	r3, [r4, #20]
 801147c:	9b01      	ldr	r3, [sp, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d00c      	beq.n	801149c <__smakebuf_r+0x74>
 8011482:	0028      	movs	r0, r5
 8011484:	230e      	movs	r3, #14
 8011486:	5ee1      	ldrsh	r1, [r4, r3]
 8011488:	f000 f8a6 	bl	80115d8 <_isatty_r>
 801148c:	2800      	cmp	r0, #0
 801148e:	d005      	beq.n	801149c <__smakebuf_r+0x74>
 8011490:	2303      	movs	r3, #3
 8011492:	89a2      	ldrh	r2, [r4, #12]
 8011494:	439a      	bics	r2, r3
 8011496:	3b02      	subs	r3, #2
 8011498:	4313      	orrs	r3, r2
 801149a:	81a3      	strh	r3, [r4, #12]
 801149c:	89a3      	ldrh	r3, [r4, #12]
 801149e:	433b      	orrs	r3, r7
 80114a0:	81a3      	strh	r3, [r4, #12]
 80114a2:	e7ce      	b.n	8011442 <__smakebuf_r+0x1a>

080114a4 <__swbuf_r>:
 80114a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a6:	0006      	movs	r6, r0
 80114a8:	000d      	movs	r5, r1
 80114aa:	0014      	movs	r4, r2
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d004      	beq.n	80114ba <__swbuf_r+0x16>
 80114b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d101      	bne.n	80114ba <__swbuf_r+0x16>
 80114b6:	f7f9 fa83 	bl	800a9c0 <__sinit>
 80114ba:	69a3      	ldr	r3, [r4, #24]
 80114bc:	60a3      	str	r3, [r4, #8]
 80114be:	89a3      	ldrh	r3, [r4, #12]
 80114c0:	071b      	lsls	r3, r3, #28
 80114c2:	d52e      	bpl.n	8011522 <__swbuf_r+0x7e>
 80114c4:	6923      	ldr	r3, [r4, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d02b      	beq.n	8011522 <__swbuf_r+0x7e>
 80114ca:	230c      	movs	r3, #12
 80114cc:	5ee2      	ldrsh	r2, [r4, r3]
 80114ce:	2380      	movs	r3, #128	; 0x80
 80114d0:	019b      	lsls	r3, r3, #6
 80114d2:	b2ef      	uxtb	r7, r5
 80114d4:	b2ed      	uxtb	r5, r5
 80114d6:	421a      	tst	r2, r3
 80114d8:	d02c      	beq.n	8011534 <__swbuf_r+0x90>
 80114da:	6923      	ldr	r3, [r4, #16]
 80114dc:	6820      	ldr	r0, [r4, #0]
 80114de:	1ac0      	subs	r0, r0, r3
 80114e0:	6963      	ldr	r3, [r4, #20]
 80114e2:	4283      	cmp	r3, r0
 80114e4:	dc05      	bgt.n	80114f2 <__swbuf_r+0x4e>
 80114e6:	0021      	movs	r1, r4
 80114e8:	0030      	movs	r0, r6
 80114ea:	f7fd fab3 	bl	800ea54 <_fflush_r>
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d11d      	bne.n	801152e <__swbuf_r+0x8a>
 80114f2:	68a3      	ldr	r3, [r4, #8]
 80114f4:	3001      	adds	r0, #1
 80114f6:	3b01      	subs	r3, #1
 80114f8:	60a3      	str	r3, [r4, #8]
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	1c5a      	adds	r2, r3, #1
 80114fe:	6022      	str	r2, [r4, #0]
 8011500:	701f      	strb	r7, [r3, #0]
 8011502:	6963      	ldr	r3, [r4, #20]
 8011504:	4283      	cmp	r3, r0
 8011506:	d004      	beq.n	8011512 <__swbuf_r+0x6e>
 8011508:	89a3      	ldrh	r3, [r4, #12]
 801150a:	07db      	lsls	r3, r3, #31
 801150c:	d507      	bpl.n	801151e <__swbuf_r+0x7a>
 801150e:	2d0a      	cmp	r5, #10
 8011510:	d105      	bne.n	801151e <__swbuf_r+0x7a>
 8011512:	0021      	movs	r1, r4
 8011514:	0030      	movs	r0, r6
 8011516:	f7fd fa9d 	bl	800ea54 <_fflush_r>
 801151a:	2800      	cmp	r0, #0
 801151c:	d107      	bne.n	801152e <__swbuf_r+0x8a>
 801151e:	0028      	movs	r0, r5
 8011520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011522:	0021      	movs	r1, r4
 8011524:	0030      	movs	r0, r6
 8011526:	f7ff fe53 	bl	80111d0 <__swsetup_r>
 801152a:	2800      	cmp	r0, #0
 801152c:	d0cd      	beq.n	80114ca <__swbuf_r+0x26>
 801152e:	2501      	movs	r5, #1
 8011530:	426d      	negs	r5, r5
 8011532:	e7f4      	b.n	801151e <__swbuf_r+0x7a>
 8011534:	4313      	orrs	r3, r2
 8011536:	81a3      	strh	r3, [r4, #12]
 8011538:	4a02      	ldr	r2, [pc, #8]	; (8011544 <__swbuf_r+0xa0>)
 801153a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801153c:	4013      	ands	r3, r2
 801153e:	6663      	str	r3, [r4, #100]	; 0x64
 8011540:	e7cb      	b.n	80114da <__swbuf_r+0x36>
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	ffffdfff 	.word	0xffffdfff

08011548 <_raise_r>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	0004      	movs	r4, r0
 801154c:	000d      	movs	r5, r1
 801154e:	291f      	cmp	r1, #31
 8011550:	d904      	bls.n	801155c <_raise_r+0x14>
 8011552:	2316      	movs	r3, #22
 8011554:	6003      	str	r3, [r0, #0]
 8011556:	2001      	movs	r0, #1
 8011558:	4240      	negs	r0, r0
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	0003      	movs	r3, r0
 801155e:	33fc      	adds	r3, #252	; 0xfc
 8011560:	69db      	ldr	r3, [r3, #28]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d004      	beq.n	8011570 <_raise_r+0x28>
 8011566:	008a      	lsls	r2, r1, #2
 8011568:	189b      	adds	r3, r3, r2
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	2a00      	cmp	r2, #0
 801156e:	d108      	bne.n	8011582 <_raise_r+0x3a>
 8011570:	0020      	movs	r0, r4
 8011572:	f000 f855 	bl	8011620 <_getpid_r>
 8011576:	002a      	movs	r2, r5
 8011578:	0001      	movs	r1, r0
 801157a:	0020      	movs	r0, r4
 801157c:	f000 f83e 	bl	80115fc <_kill_r>
 8011580:	e7eb      	b.n	801155a <_raise_r+0x12>
 8011582:	2000      	movs	r0, #0
 8011584:	2a01      	cmp	r2, #1
 8011586:	d0e8      	beq.n	801155a <_raise_r+0x12>
 8011588:	1c51      	adds	r1, r2, #1
 801158a:	d103      	bne.n	8011594 <_raise_r+0x4c>
 801158c:	2316      	movs	r3, #22
 801158e:	3001      	adds	r0, #1
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	e7e2      	b.n	801155a <_raise_r+0x12>
 8011594:	2400      	movs	r4, #0
 8011596:	0028      	movs	r0, r5
 8011598:	601c      	str	r4, [r3, #0]
 801159a:	4790      	blx	r2
 801159c:	0020      	movs	r0, r4
 801159e:	e7dc      	b.n	801155a <_raise_r+0x12>

080115a0 <raise>:
 80115a0:	b510      	push	{r4, lr}
 80115a2:	4b03      	ldr	r3, [pc, #12]	; (80115b0 <raise+0x10>)
 80115a4:	0001      	movs	r1, r0
 80115a6:	6818      	ldr	r0, [r3, #0]
 80115a8:	f7ff ffce 	bl	8011548 <_raise_r>
 80115ac:	bd10      	pop	{r4, pc}
 80115ae:	46c0      	nop			; (mov r8, r8)
 80115b0:	200006e0 	.word	0x200006e0

080115b4 <_fstat_r>:
 80115b4:	2300      	movs	r3, #0
 80115b6:	b570      	push	{r4, r5, r6, lr}
 80115b8:	4d06      	ldr	r5, [pc, #24]	; (80115d4 <_fstat_r+0x20>)
 80115ba:	0004      	movs	r4, r0
 80115bc:	0008      	movs	r0, r1
 80115be:	0011      	movs	r1, r2
 80115c0:	602b      	str	r3, [r5, #0]
 80115c2:	f7f2 f86e 	bl	80036a2 <_fstat>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	d103      	bne.n	80115d2 <_fstat_r+0x1e>
 80115ca:	682b      	ldr	r3, [r5, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d000      	beq.n	80115d2 <_fstat_r+0x1e>
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	20000d54 	.word	0x20000d54

080115d8 <_isatty_r>:
 80115d8:	2300      	movs	r3, #0
 80115da:	b570      	push	{r4, r5, r6, lr}
 80115dc:	4d06      	ldr	r5, [pc, #24]	; (80115f8 <_isatty_r+0x20>)
 80115de:	0004      	movs	r4, r0
 80115e0:	0008      	movs	r0, r1
 80115e2:	602b      	str	r3, [r5, #0]
 80115e4:	f7f2 f86b 	bl	80036be <_isatty>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d103      	bne.n	80115f4 <_isatty_r+0x1c>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d000      	beq.n	80115f4 <_isatty_r+0x1c>
 80115f2:	6023      	str	r3, [r4, #0]
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	46c0      	nop			; (mov r8, r8)
 80115f8:	20000d54 	.word	0x20000d54

080115fc <_kill_r>:
 80115fc:	2300      	movs	r3, #0
 80115fe:	b570      	push	{r4, r5, r6, lr}
 8011600:	4d06      	ldr	r5, [pc, #24]	; (801161c <_kill_r+0x20>)
 8011602:	0004      	movs	r4, r0
 8011604:	0008      	movs	r0, r1
 8011606:	0011      	movs	r1, r2
 8011608:	602b      	str	r3, [r5, #0]
 801160a:	f7f1 ffeb 	bl	80035e4 <_kill>
 801160e:	1c43      	adds	r3, r0, #1
 8011610:	d103      	bne.n	801161a <_kill_r+0x1e>
 8011612:	682b      	ldr	r3, [r5, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d000      	beq.n	801161a <_kill_r+0x1e>
 8011618:	6023      	str	r3, [r4, #0]
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	20000d54 	.word	0x20000d54

08011620 <_getpid_r>:
 8011620:	b510      	push	{r4, lr}
 8011622:	f7f1 ffd9 	bl	80035d8 <_getpid>
 8011626:	bd10      	pop	{r4, pc}

08011628 <round>:
 8011628:	b570      	push	{r4, r5, r6, lr}
 801162a:	004a      	lsls	r2, r1, #1
 801162c:	000d      	movs	r5, r1
 801162e:	4920      	ldr	r1, [pc, #128]	; (80116b0 <round+0x88>)
 8011630:	0d52      	lsrs	r2, r2, #21
 8011632:	1851      	adds	r1, r2, r1
 8011634:	0006      	movs	r6, r0
 8011636:	2913      	cmp	r1, #19
 8011638:	dc18      	bgt.n	801166c <round+0x44>
 801163a:	2900      	cmp	r1, #0
 801163c:	da09      	bge.n	8011652 <round+0x2a>
 801163e:	0feb      	lsrs	r3, r5, #31
 8011640:	2200      	movs	r2, #0
 8011642:	07db      	lsls	r3, r3, #31
 8011644:	3101      	adds	r1, #1
 8011646:	d101      	bne.n	801164c <round+0x24>
 8011648:	491a      	ldr	r1, [pc, #104]	; (80116b4 <round+0x8c>)
 801164a:	430b      	orrs	r3, r1
 801164c:	0019      	movs	r1, r3
 801164e:	0010      	movs	r0, r2
 8011650:	e017      	b.n	8011682 <round+0x5a>
 8011652:	4c19      	ldr	r4, [pc, #100]	; (80116b8 <round+0x90>)
 8011654:	410c      	asrs	r4, r1
 8011656:	0022      	movs	r2, r4
 8011658:	402a      	ands	r2, r5
 801165a:	4302      	orrs	r2, r0
 801165c:	d013      	beq.n	8011686 <round+0x5e>
 801165e:	2280      	movs	r2, #128	; 0x80
 8011660:	0312      	lsls	r2, r2, #12
 8011662:	410a      	asrs	r2, r1
 8011664:	1953      	adds	r3, r2, r5
 8011666:	43a3      	bics	r3, r4
 8011668:	2200      	movs	r2, #0
 801166a:	e7ef      	b.n	801164c <round+0x24>
 801166c:	2933      	cmp	r1, #51	; 0x33
 801166e:	dd0d      	ble.n	801168c <round+0x64>
 8011670:	2380      	movs	r3, #128	; 0x80
 8011672:	00db      	lsls	r3, r3, #3
 8011674:	4299      	cmp	r1, r3
 8011676:	d106      	bne.n	8011686 <round+0x5e>
 8011678:	0002      	movs	r2, r0
 801167a:	002b      	movs	r3, r5
 801167c:	0029      	movs	r1, r5
 801167e:	f7ef f89b 	bl	80007b8 <__aeabi_dadd>
 8011682:	0006      	movs	r6, r0
 8011684:	000d      	movs	r5, r1
 8011686:	0030      	movs	r0, r6
 8011688:	0029      	movs	r1, r5
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	4c0b      	ldr	r4, [pc, #44]	; (80116bc <round+0x94>)
 801168e:	1912      	adds	r2, r2, r4
 8011690:	2401      	movs	r4, #1
 8011692:	4264      	negs	r4, r4
 8011694:	40d4      	lsrs	r4, r2
 8011696:	4220      	tst	r0, r4
 8011698:	d0f5      	beq.n	8011686 <round+0x5e>
 801169a:	2233      	movs	r2, #51	; 0x33
 801169c:	1a51      	subs	r1, r2, r1
 801169e:	3a32      	subs	r2, #50	; 0x32
 80116a0:	408a      	lsls	r2, r1
 80116a2:	1812      	adds	r2, r2, r0
 80116a4:	4282      	cmp	r2, r0
 80116a6:	4180      	sbcs	r0, r0
 80116a8:	4240      	negs	r0, r0
 80116aa:	182b      	adds	r3, r5, r0
 80116ac:	43a2      	bics	r2, r4
 80116ae:	e7cd      	b.n	801164c <round+0x24>
 80116b0:	fffffc01 	.word	0xfffffc01
 80116b4:	3ff00000 	.word	0x3ff00000
 80116b8:	000fffff 	.word	0x000fffff
 80116bc:	fffffbed 	.word	0xfffffbed

080116c0 <_init>:
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c2:	46c0      	nop			; (mov r8, r8)
 80116c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c6:	bc08      	pop	{r3}
 80116c8:	469e      	mov	lr, r3
 80116ca:	4770      	bx	lr

080116cc <_fini>:
 80116cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ce:	46c0      	nop			; (mov r8, r8)
 80116d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116d2:	bc08      	pop	{r3}
 80116d4:	469e      	mov	lr, r3
 80116d6:	4770      	bx	lr
